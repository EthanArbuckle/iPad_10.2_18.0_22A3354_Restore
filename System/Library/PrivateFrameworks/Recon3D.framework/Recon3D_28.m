void sub_223C712B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void **__p,void **a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  void **v44;
  void **v45;
  unint64_t *p_shared_owners;
  unint64_t v47;

  if (__p)
  {
    v44 = a38;
    v45 = __p;
    if (a38 != __p)
    {
      do
      {
        if (*((char *)v44 - 1) < 0)
          operator delete(*(v44 - 3));
        v44 -= 3;
      }
      while (v44 != __p);
      v45 = __p;
    }
    operator delete(v45);
  }
  if (*(char *)(v42 - 97) < 0)
    operator delete(*(void **)(v42 - 120));
  if (*(char *)(v42 - 121) < 0)
    operator delete(*(void **)(v42 - 144));
  if (*(char *)(v42 - 153) < 0)
    operator delete(*(void **)(v42 - 176));
  __cxa_guard_abort(&qword_2540CD080);
  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  if (a34)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a34 + 8))(a34);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223C71628(unint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  std::string *v26;
  std::string::size_type size;
  std::string *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t result;
  _QWORD v33[2];
  std::__shared_weak_count *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  _QWORD v41[2];
  unint64_t **v42[2];

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (v8)
    {
      if (!v4)
        goto LABEL_20;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v4)
        goto LABEL_20;
    }
    v4 = *(_QWORD *)(a2 + 8);
    v9 = *(std::__shared_weak_count **)(a2 + 16);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 - 1, v10));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (!*(_BYTE *)(a2 + 49))
          goto LABEL_20;
LABEL_17:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v40, v4, 0);
        v33[0] = &off_24EC1F8C8;
        v13 = *(_QWORD *)(a2 + 8);
        v14 = *(std::__shared_weak_count **)(a2 + 16);
        if (v14)
          goto LABEL_21;
LABEL_18:
        v15 = *(_DWORD *)(a2 + 44);
        v17 = *(_QWORD *)(a2 + 24);
        v16 = *(_QWORD *)(a2 + 32);
        v18 = *(_WORD *)(a2 + 48);
        goto LABEL_26;
      }
    }
LABEL_16:
    if (!*(_BYTE *)(a2 + 49))
      goto LABEL_20;
    goto LABEL_17;
  }
  if (v4)
    goto LABEL_16;
LABEL_20:
  v40 = 0;
  v33[0] = &off_24EC1F8C8;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_18;
LABEL_21:
  v19 = (unint64_t *)&v14->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  v15 = *(_DWORD *)(a2 + 44);
  v17 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a2 + 32);
  v18 = *(_WORD *)(a2 + 48);
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  do
    v22 = __ldxr(v19);
  while (__stxr(v22 + 1, v19));
LABEL_26:
  v33[1] = v13;
  v34 = v14;
  v35 = v16;
  v36 = 2 * v15;
  v37 = v17;
  v38 = 3;
  v39 = v18;
  if (v14)
  {
    v23 = (unint64_t *)&v14->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    do
      v25 = __ldaxr(v23);
    while (__stlxr(v25 - 1, v23));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v26 = sub_2232BD638();
  size = HIBYTE(v26->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v28 = v26;
  else
    v28 = (std::string *)v26->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v26->__r_.__value_.__l.__size_;
  v41[0] = v28;
  v41[1] = size;
  v42[0] = a1;
  v42[1] = (unint64_t **)v41;
  sub_2244DA40C(v38, v42, (uint64_t)v33);
  v29 = v34;
  if (v34)
  {
    v30 = (unint64_t *)&v34->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  result = v40;
  v40 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223C718AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;

  sub_22319A5E0((uint64_t)&a9);
  v17 = a16;
  a16 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_223C718D8(unint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t result;
  _QWORD v32[2];
  std::__shared_weak_count *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  _QWORD v40[2];
  unint64_t **v41[2];

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (v8)
    {
      if (!v4)
        goto LABEL_20;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v4)
        goto LABEL_20;
    }
    v4 = *(_QWORD *)(a2 + 8);
    v9 = *(std::__shared_weak_count **)(a2 + 16);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 - 1, v10));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (!*(_BYTE *)(a2 + 49))
          goto LABEL_20;
LABEL_17:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v39, v4, 0);
        v32[0] = &off_24EC1F8C8;
        v13 = *(_QWORD *)(a2 + 8);
        v14 = *(std::__shared_weak_count **)(a2 + 16);
        if (v14)
          goto LABEL_21;
LABEL_18:
        v15 = *(_DWORD *)(a2 + 44);
        v17 = *(_QWORD *)(a2 + 24);
        v16 = *(_QWORD *)(a2 + 32);
        v18 = *(_WORD *)(a2 + 48);
        goto LABEL_26;
      }
    }
LABEL_16:
    if (!*(_BYTE *)(a2 + 49))
      goto LABEL_20;
    goto LABEL_17;
  }
  if (v4)
    goto LABEL_16;
LABEL_20:
  v39 = 0;
  v32[0] = &off_24EC1F8C8;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_18;
LABEL_21:
  v19 = (unint64_t *)&v14->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  v15 = *(_DWORD *)(a2 + 44);
  v17 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a2 + 32);
  v18 = *(_WORD *)(a2 + 48);
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  do
    v22 = __ldxr(v19);
  while (__stxr(v22 + 1, v19));
LABEL_26:
  v32[1] = v13;
  v33 = v14;
  v34 = v16;
  v35 = v15;
  v36 = v17;
  v37 = 1;
  v38 = v18;
  if (v14)
  {
    v23 = (unint64_t *)&v14->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    do
      v25 = __ldaxr(v23);
    while (__stlxr(v25 - 1, v23));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  sub_223C6D9BC();
  v26 = &qword_2540CD200;
  v27 = byte_2540CD217;
  if (byte_2540CD217 < 0)
  {
    v27 = qword_2540CD208;
    v26 = (uint64_t *)qword_2540CD200;
  }
  v40[0] = v26;
  v40[1] = v27;
  v41[0] = a1;
  v41[1] = (unint64_t **)v40;
  sub_2244DA40C(v37, v41, (uint64_t)v32);
  v28 = v33;
  if (v33)
  {
    v29 = (unint64_t *)&v33->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  result = v39;
  v39 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223C71B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;

  sub_22319A5E0((uint64_t)&a9);
  v17 = a16;
  a16 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

void sub_223C71B88(uint64_t a1, uint64_t a2)
{
  _QWORD **v4;
  std::string *v5;
  std::string::size_type size;
  std::string v7;

  if (!*(_BYTE *)a1)
  {
    sub_2231813E8(**(_QWORD ***)(a1 + 8), (uint64_t)",", 1);
    *(_BYTE *)a1 = 0;
    v4 = *(_QWORD ***)(a1 + 8);
    if (*(_BYTE *)(a2 + 4))
      goto LABEL_3;
LABEL_12:
    sub_2231813E8(*v4, (uint64_t)"nullopt", 7);
    return;
  }
  *(_BYTE *)a1 = 0;
  v4 = *(_QWORD ***)(a1 + 8);
  if (!*(_BYTE *)(a2 + 4))
    goto LABEL_12;
LABEL_3:
  std::to_string(&v7, *(_DWORD *)a2);
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v7;
  else
    v5 = (std::string *)v7.__r_.__value_.__r.__words[0];
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v7.__r_.__value_.__r.__words[2]);
  else
    size = v7.__r_.__value_.__l.__size_;
  sub_2231813E8(*v4, (uint64_t)v5, size);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_223C71C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223C71C7C(unint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t result;
  _QWORD v32[2];
  std::__shared_weak_count *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  _QWORD v40[2];
  unint64_t **v41[2];

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (v8)
    {
      if (!v4)
        goto LABEL_20;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v4)
        goto LABEL_20;
    }
    v4 = *(_QWORD *)(a2 + 8);
    v9 = *(std::__shared_weak_count **)(a2 + 16);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 - 1, v10));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (!*(_BYTE *)(a2 + 73))
          goto LABEL_20;
LABEL_17:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v39, v4, 0);
        v32[0] = &off_24EC1F8C8;
        v13 = *(_QWORD *)(a2 + 8);
        v14 = *(std::__shared_weak_count **)(a2 + 16);
        if (v14)
          goto LABEL_21;
LABEL_18:
        v15 = *(_QWORD *)(a2 + 36);
        v16 = *(_DWORD *)(a2 + 52);
        v17 = *(_QWORD *)(a2 + 24);
        v18 = *(_WORD *)(a2 + 72);
        goto LABEL_26;
      }
    }
LABEL_16:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_20;
    goto LABEL_17;
  }
  if (v4)
    goto LABEL_16;
LABEL_20:
  v39 = 0;
  v32[0] = &off_24EC1F8C8;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_18;
LABEL_21:
  v19 = (unint64_t *)&v14->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  v15 = *(_QWORD *)(a2 + 36);
  v16 = *(_DWORD *)(a2 + 52);
  v17 = *(_QWORD *)(a2 + 24);
  v18 = *(_WORD *)(a2 + 72);
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  do
    v22 = __ldxr(v19);
  while (__stxr(v22 + 1, v19));
LABEL_26:
  v32[1] = v13;
  v33 = v14;
  v34 = v15;
  v35 = 4 * v16;
  v36 = v17;
  v37 = 32;
  v38 = v18;
  if (v14)
  {
    v23 = (unint64_t *)&v14->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    do
      v25 = __ldaxr(v23);
    while (__stlxr(v25 - 1, v23));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  sub_223C6A0F0();
  v26 = &qword_2540CD188;
  v27 = byte_2540CD19F;
  if (byte_2540CD19F < 0)
  {
    v27 = qword_2540CD190;
    v26 = (uint64_t *)qword_2540CD188;
  }
  v40[0] = v26;
  v40[1] = v27;
  v41[0] = a1;
  v41[1] = (unint64_t **)v40;
  sub_2244DA40C(v37, v41, (uint64_t)v32);
  v28 = v33;
  if (v33)
  {
    v29 = (unint64_t *)&v33->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  result = v39;
  v39 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223C71F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;

  sub_22319A5E0((uint64_t)&a9);
  v17 = a16;
  a16 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

void sub_223C71F38(uint64_t a1, _QWORD **a2, float *a3)
{
  std::string *v5;
  std::string *v6;
  std::string::size_type size;
  uint64_t v8;
  int v9;
  std::string::size_type v10;
  std::string *v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  void *p_p;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *__p;
  size_t v21;
  int64_t v22;
  std::string v23;

  std::to_string(&v23, *a3);
  v5 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v23;
  else
    v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  else
    size = v23.__r_.__value_.__l.__size_;
  v8 = size;
  do
  {
    if (!v8)
    {
      v8 = -1;
      if ((*((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_14;
LABEL_11:
      if (v8 != HIBYTE(v23.__r_.__value_.__r.__words[2]) - 1)
      {
        v5 = &v23;
        goto LABEL_16;
      }
LABEL_15:
      sub_2231813E8(*a2, (uint64_t)v6, size);
LABEL_48:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_51;
    }
    v9 = v6->__r_.__value_.__s.__data_[--v8];
  }
  while (v9 == 48);
  if ((*((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x80) == 0)
    goto LABEL_11;
LABEL_14:
  if (v8 == v23.__r_.__value_.__l.__size_ - 1)
    goto LABEL_15;
LABEL_16:
  if (strtof((const char *)v5, 0) != *a3)
  {
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v23;
    else
      v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    else
      size = v23.__r_.__value_.__l.__size_;
    goto LABEL_15;
  }
  v10 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v23;
  else
    v11 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = v23.__r_.__value_.__l.__size_;
  v12 = 1;
  if (v11->__r_.__value_.__s.__data_[v8] == 46)
    v12 = 2;
  v13 = v12 + v8;
  if (v10 >= v13)
    v14 = v13;
  else
    v14 = v10;
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v14 >= 0x17)
  {
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    v21 = v14;
    v22 = v17 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_40;
  }
  HIBYTE(v22) = v14;
  p_p = &__p;
  if (v14)
LABEL_40:
    memmove(p_p, v11, v14);
  *((_BYTE *)p_p + v14) = 0;
  if (v22 >= 0)
    v18 = &__p;
  else
    v18 = __p;
  if (v22 >= 0)
    v19 = HIBYTE(v22);
  else
    v19 = v21;
  sub_2231813E8(*a2, (uint64_t)v18, v19);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
    goto LABEL_48;
  operator delete(__p);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
LABEL_51:
  operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_223C72138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223C721A4(unint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int8 v26;
  uint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t result;
  std::string *v33;
  __int128 *v34;
  int64x2_t v35;
  int8x16_t v36;
  _QWORD v37[2];
  std::__shared_weak_count *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  void *v45[3];
  void *__p[2];
  char v47;
  unint64_t **v48[2];
  char v49;
  void *v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v5)
  {
    if (!v4)
    {
LABEL_25:
      v44 = 0;
      v37[0] = &off_24EC1F8C8;
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v14)
        goto LABEL_26;
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    if (!v4)
      goto LABEL_25;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v4)
      goto LABEL_25;
  }
  v4 = *(_QWORD *)(a2 + 8);
  v9 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v9)
    goto LABEL_16;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_16:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_25;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_25;
LABEL_17:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v44, v4, 0);
  v37[0] = &off_24EC1F8C8;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
  {
LABEL_26:
    v17 = *(_QWORD *)(a2 + 36);
    v18 = *(_DWORD *)(a2 + 52);
    v19 = *(_QWORD *)(a2 + 24);
    v20 = *(_WORD *)(a2 + 72);
    goto LABEL_27;
  }
LABEL_18:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v17 = *(_QWORD *)(a2 + 36);
  v18 = *(_DWORD *)(a2 + 52);
  v19 = *(_QWORD *)(a2 + 24);
  v20 = *(_WORD *)(a2 + 72);
  do
    v21 = __ldxr(v15);
  while (__stxr(v21 + 1, v15));
  do
    v22 = __ldxr(v15);
  while (__stxr(v22 + 1, v15));
LABEL_27:
  v37[1] = v13;
  v38 = v14;
  v39 = v17;
  v40 = 2 * v18;
  v41 = v19;
  v42 = 38;
  v43 = v20;
  if (v14)
  {
    v23 = (unint64_t *)&v14->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    do
      v25 = __ldaxr(v23);
    while (__stlxr(v25 - 1, v23));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v26 = atomic_load((unsigned __int8 *)&qword_2540CD088);
  if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD088))
  {
    sub_223174DE4(__p, "ConstSharedImage");
    v33 = sub_2231A5138();
    sub_223C72614((uint64_t)v48, (uint64_t)v33);
    v34 = sub_2231A27C0();
    sub_223C72614((uint64_t)&v50, (uint64_t)v34);
    sub_22319BD1C(v45, (uint64_t)v48, 2uLL);
    sub_2245730F4((char *)__p, (uint64_t *)v45, (std::string *)&qword_2540CD260, v35, v36);
    sub_22319BB48(v45);
    if (v51 < 0)
    {
      operator delete(v50);
      if ((v49 & 0x80000000) == 0)
      {
LABEL_49:
        if ((v47 & 0x80000000) == 0)
        {
LABEL_50:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CD260, &dword_22314D000);
          __cxa_guard_release(&qword_2540CD088);
          goto LABEL_36;
        }
LABEL_53:
        operator delete(__p[0]);
        goto LABEL_50;
      }
    }
    else if ((v49 & 0x80000000) == 0)
    {
      goto LABEL_49;
    }
    operator delete(v48[0]);
    if ((v47 & 0x80000000) == 0)
      goto LABEL_50;
    goto LABEL_53;
  }
LABEL_36:
  v27 = &qword_2540CD260;
  v28 = byte_2540CD277;
  if (byte_2540CD277 < 0)
  {
    v28 = unk_2540CD268;
    v27 = (uint64_t *)qword_2540CD260;
  }
  __p[0] = v27;
  __p[1] = (void *)v28;
  v48[0] = a1;
  v48[1] = (unint64_t **)__p;
  sub_2244DA40C(v42, v48, (uint64_t)v37);
  v29 = v38;
  if (v38)
  {
    v30 = (unint64_t *)&v38->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  result = v44;
  v44 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223C7254C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v27;

  sub_22319BB48(&a17);
  if (*(char *)(v25 - 41) < 0)
  {
    operator delete(*(void **)(v25 - 64));
    if ((*(char *)(v25 - 65) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a25 & 0x80000000) == 0)
      {
LABEL_8:
        __cxa_guard_abort(&qword_2540CD088);
        sub_22319A5E0((uint64_t)&a9);
        v27 = a16;
        a16 = 0;
        if (!v27)
          _Unwind_Resume(a1);
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(__p);
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v25 - 65) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v25 - 88));
  if ((a25 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_223C72614(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223C726B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223C726CC(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223C72768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223C72784(_QWORD *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;

  sub_2231813E8(a1, (uint64_t)"{Model: ", 8);
  sub_2231813E8(a1, (uint64_t)"{fx,fy: ", 8);
  v6 = *(_QWORD *)(a2 + 16);
  sub_223C72860(a1, (float *)&v6);
  sub_2231813E8(a1, (uint64_t)", cx,cy: ", 9);
  v5 = *(_QWORD *)(a2 + 24);
  sub_223C72860(a1, (float *)&v5);
  sub_2231813E8(a1, (uint64_t)"}", 1);
  sub_2231813E8(a1, (uint64_t)", Size: ", 8);
  sub_2231BFD90(a1, (unsigned int *)(a2 + 88));
  sub_2231813E8(a1, (uint64_t)"}", 1);
  return a1;
}

_QWORD *sub_223C72860(_QWORD *a1, float *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_223C7298C((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_22316DD70();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC60F98[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24EC60F50[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_2231813E8(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_223C72948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223C72964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223C72978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223C7298C(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t *v14;

  v9 = a2;
  v10 = "{";
  v11 = a2;
  v12 = "{";
  v13 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_5;
  v14 = &v9;
  ((void (*)(uint64_t **))off_24EC60F38[v3])(&v14);
  sub_223208764((uint64_t)&v9, a2, a3);
  v9 = a2;
  v10 = ",";
  v11 = a2;
  v12 = ",";
  v13 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_5;
  v14 = &v9;
  ((void (*)(uint64_t **, uint64_t))off_24EC60F38[v6])(&v14, a2);
  sub_223208764((uint64_t)&v9, a2, a3 + 1);
  v9 = a2;
  v10 = "}";
  v11 = a2;
  v12 = "}";
  v13 = "}";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
LABEL_5:
    sub_22316DD70();
  v14 = &v9;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24EC60F38[v7])(&v14, a2);
}

uint64_t *sub_223C72A90(uint64_t *a1, uint64_t a2)
{
  char *v4;
  int64_t v5;
  size_t v6;
  size_t v7;
  double v8;
  size_t v9;
  double v10;
  std::string *p_b;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  char *v31;
  void **v32;
  void *v33;
  float v34;
  uint64_t v35;
  char *v36;
  void **v37;
  void *v38;
  float v39;
  uint64_t v40;
  char *v41;
  void **v42;
  void *v43;
  float v44;
  uint64_t v45;
  char *v46;
  void **v47;
  void *v48;
  int v50;
  void *v51;
  size_t v52;
  int64_t v53;
  std::string __b;
  std::string v55;
  void *__p[2];
  int64_t v57;

  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v50 = *((_DWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 2);
  v5 = *((_QWORD *)v4 + 3);
  if (v5)
  {
    if (v5 <= (uint64_t)(v6 + 2))
      v5 = v6 + 2;
    v7 = v5 + ~v6;
    v8 = __exp10((double)-(uint64_t)v6);
    v9 = v7 - 1;
    if (v7 - 1 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v10 = v8;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      p_b = (std::string *)operator new(v12 + 1);
      __b.__r_.__value_.__l.__size_ = v7 - 1;
      __b.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v7 - 1;
      p_b = &__b;
      if (v7 == 1)
      {
        LODWORD(v7) = 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v10 = __exp10((double)-(uint64_t)v6);
    v9 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v7) = 4;
  }
  memset(p_b, 32, v9);
LABEL_13:
  p_b->__r_.__value_.__s.__data_[v9] = 0;
  v14 = std::string::append(&__b, "0 ", 2uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v6 >= 0x17)
  {
    v17 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v17 = v6 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    v52 = v6;
    v53 = v18 | 0x8000000000000000;
    v51 = v16;
    goto LABEL_20;
  }
  HIBYTE(v53) = v6;
  v16 = &v51;
  if (v6)
LABEL_20:
    memset(v16, 32, v6);
  *((_BYTE *)v16 + v6) = 0;
  if (v53 >= 0)
    v19 = (const std::string::value_type *)&v51;
  else
    v19 = (const std::string::value_type *)v51;
  if (v53 >= 0)
    v20 = HIBYTE(v53);
  else
    v20 = v52;
  v21 = std::string::append(&v55, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v57 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v53) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_85:
    operator delete(v55.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
LABEL_86:
    operator delete(__b.__r_.__value_.__l.__data_);
    goto LABEL_30;
  }
  operator delete(v51);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_85;
LABEL_29:
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_86;
LABEL_30:
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  v55.__r_.__value_.__s.__data_[0] = 91;
  sub_2231813E8(a1, (uint64_t)&v55, 1);
  v23 = 0;
  v24 = a1 + 1;
  v25 = a1 + 2;
  v26 = (int)v7 + (int)v6 + 1;
  v27 = (int)v6 - 3;
  v28 = a2 + 32;
  while (1)
  {
    v29 = *(float *)(a2 + v23);
    v30 = *a1;
    v31 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v31[9] & 1) != 0)
    {
      if (v29 != 0.0)
      {
        *((_QWORD *)v31 + 3) = v26;
        *(_DWORD *)((char *)v24 + *(_QWORD *)(v30 - 24)) |= 0x400u;
        *(_QWORD *)((char *)v25 + *(_QWORD *)(v30 - 24)) = v27;
        std::ostream::operator<<();
        goto LABEL_43;
      }
    }
    else if (fabs(v29) >= v10)
    {
      *((_QWORD *)v31 + 3) = v26;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v30 - 24)) = *(_DWORD *)((_BYTE *)v24 + *(_QWORD *)(v30 - 24)) & 0xFFFFFEFB | 4;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v30 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v25 + *(_QWORD *)(v30 - 24)) = (int)v6;
      std::ostream::operator<<();
      goto LABEL_43;
    }
    v32 = v57 >= 0 ? __p : (void **)__p[0];
    v33 = v57 >= 0 ? (void *)HIBYTE(v57) : __p[1];
    sub_2231813E8(a1, (uint64_t)v32, (uint64_t)v33);
LABEL_43:
    v55.__r_.__value_.__s.__data_[0] = 44;
    sub_2231813E8(a1, (uint64_t)&v55, 1);
    v34 = *(float *)(v28 + v23 - 16);
    v35 = *a1;
    v36 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v36[9] & 1) != 0)
    {
      if (v34 != 0.0)
      {
        *((_QWORD *)v36 + 3) = v26;
        *(_DWORD *)((char *)v24 + *(_QWORD *)(v35 - 24)) |= 0x400u;
        *(_QWORD *)((char *)v25 + *(_QWORD *)(v35 - 24)) = v27;
        std::ostream::operator<<();
        goto LABEL_55;
      }
    }
    else if (fabs(v34) >= v10)
    {
      *((_QWORD *)v36 + 3) = v26;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v35 - 24)) = *(_DWORD *)((_BYTE *)v24 + *(_QWORD *)(v35 - 24)) & 0xFFFFFEFB | 4;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v35 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v25 + *(_QWORD *)(v35 - 24)) = (int)v6;
      std::ostream::operator<<();
      goto LABEL_55;
    }
    v37 = v57 >= 0 ? __p : (void **)__p[0];
    v38 = v57 >= 0 ? (void *)HIBYTE(v57) : __p[1];
    sub_2231813E8(a1, (uint64_t)v37, (uint64_t)v38);
LABEL_55:
    v55.__r_.__value_.__s.__data_[0] = 44;
    sub_2231813E8(a1, (uint64_t)&v55, 1);
    v39 = *(float *)(v28 + v23);
    v40 = *a1;
    v41 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v41[9] & 1) != 0)
    {
      if (v39 != 0.0)
      {
        *((_QWORD *)v41 + 3) = v26;
        *(_DWORD *)((char *)v24 + *(_QWORD *)(v40 - 24)) |= 0x400u;
        *(_QWORD *)((char *)v25 + *(_QWORD *)(v40 - 24)) = v27;
        std::ostream::operator<<();
        goto LABEL_67;
      }
    }
    else if (fabs(v39) >= v10)
    {
      *((_QWORD *)v41 + 3) = v26;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v40 - 24)) = *(_DWORD *)((_BYTE *)v24 + *(_QWORD *)(v40 - 24)) & 0xFFFFFEFB | 4;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v40 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v25 + *(_QWORD *)(v40 - 24)) = (int)v6;
      std::ostream::operator<<();
      goto LABEL_67;
    }
    v42 = v57 >= 0 ? __p : (void **)__p[0];
    v43 = v57 >= 0 ? (void *)HIBYTE(v57) : __p[1];
    sub_2231813E8(a1, (uint64_t)v42, (uint64_t)v43);
LABEL_67:
    v55.__r_.__value_.__s.__data_[0] = 44;
    sub_2231813E8(a1, (uint64_t)&v55, 1);
    v44 = *(float *)(v28 + v23 + 16);
    v45 = *a1;
    v46 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v46[9] & 1) != 0)
    {
      if (v44 != 0.0)
      {
        *((_QWORD *)v46 + 3) = v26;
        *(_DWORD *)((char *)v24 + *(_QWORD *)(v45 - 24)) |= 0x400u;
        *(_QWORD *)((char *)v25 + *(_QWORD *)(v45 - 24)) = v27;
        std::ostream::operator<<();
        goto LABEL_79;
      }
    }
    else if (fabs(v44) >= v10)
    {
      *((_QWORD *)v46 + 3) = v26;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v45 - 24)) = *(_DWORD *)((_BYTE *)v24 + *(_QWORD *)(v45 - 24)) & 0xFFFFFEFB | 4;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v45 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v25 + *(_QWORD *)(v45 - 24)) = (int)v6;
      std::ostream::operator<<();
      goto LABEL_79;
    }
    v47 = v57 >= 0 ? __p : (void **)__p[0];
    v48 = v57 >= 0 ? (void *)HIBYTE(v57) : __p[1];
    sub_2231813E8(a1, (uint64_t)v47, (uint64_t)v48);
LABEL_79:
    if (v23 == 12)
      break;
    sub_2231813E8(a1, (uint64_t)";\n ", 3);
    v23 += 4;
  }
  sub_2231813E8(a1, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v50;
  if (SHIBYTE(v57) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_223C730AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223C73144(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 56))
  {
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t sub_223C731B4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C7321C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C73284()
{
  return 4;
}

uint64_t sub_223C7328C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_223C73294@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_223C732AC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

std::string *sub_223C73330()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578EFB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578EFB8))
  {
    sub_223174DE4(v7, "ConstImageView");
    v2 = sub_2231C26A0();
    sub_223C73534((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_223C73534((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578EFA0, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578EFA0, &dword_22314D000);
          __cxa_guard_release(&qword_25578EFB8);
          return &stru_25578EFA0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578EFA0;
}

void sub_223C73480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578EFB8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578EFB8);
  _Unwind_Resume(a1);
}

void sub_223C73534(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223C735D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223C735EC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24EC6F7D0;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24EC70110[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x227684CE8](v2, 0x10A3C40A1F8E8FFLL);
  }
  return a1;
}

void sub_223C73678(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C7369C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24EC6F7D0;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24EC70110[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223C73724(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE4EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE4EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE4EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE4EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

std::string *sub_223C73794()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578EFF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578EFF8))
  {
    sub_223174DE4(v7, "ConstImageView");
    v2 = sub_2231EFDB4();
    sub_223C73998((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_223C73998((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578EFE0, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578EFE0, &dword_22314D000);
          __cxa_guard_release(&qword_25578EFF8);
          return &stru_25578EFE0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578EFE0;
}

void sub_223C738E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578EFF8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578EFF8);
  _Unwind_Resume(a1);
}

void sub_223C73998(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223C73A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223C73A50(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24EC6F8F0;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24EC70110[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x227684CE8](v2, 0x10A3C40ED729E16);
  }
  return a1;
}

void sub_223C73ADC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C73B00(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24EC6F8F0;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24EC70110[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223C73B88(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE32EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE32EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE32EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE32EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

std::string *sub_223C73BF8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578EF98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578EF98))
  {
    sub_223174DE4(v7, "ConstImageView");
    v2 = sub_2231B47AC();
    sub_223C73DFC((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_223C73DFC((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578EF80, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578EF80, &dword_22314D000);
          __cxa_guard_release(&qword_25578EF98);
          return &stru_25578EF80;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578EF80;
}

void sub_223C73D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578EF98);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578EF98);
  _Unwind_Resume(a1);
}

void sub_223C73DFC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223C73E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223C73EB4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C73F1C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C73F84()
{
  return 25;
}

uint64_t sub_223C73F8C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_223C73F94@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_223C73FA8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

std::string *sub_223C7402C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578EFD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578EFD8))
  {
    sub_223174DE4(v7, "ConstImageView");
    v2 = sub_2231EC034();
    sub_223C74230((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_223C74230((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578EFC0, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578EFC0, &dword_22314D000);
          __cxa_guard_release(&qword_25578EFD8);
          return &stru_25578EFC0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578EFC0;
}

void sub_223C7417C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578EFD8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578EFD8);
  _Unwind_Resume(a1);
}

void sub_223C74230(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223C742CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223C742E8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24EC6F3E0;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24EC70110[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x227684CE8](v2, 0x10A3C40ED729E16);
  }
  return a1;
}

void sub_223C74374(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C74398(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24EC6F3E0;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24EC70110[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223C74420(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE25EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE25EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE25EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE25EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_223C74490(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  _QWORD *v15;
  uint64_t (**v16)();
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t (**v32)();
  uint64_t v33;
  std::__shared_weak_count *v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __int16 v40;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(uint64_t (***__return_ptr)(), uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = (*((uint64_t (**)(uint64_t (**)()))*v32 + 6))(v32);
    v14 = v32;
    if (v32)
    {
      v15 = (_QWORD *)operator new();
      v16 = v32;
      *v15 = &off_24EC20DE8;
      v15[1] = 0;
      v15[2] = 0;
      v15[3] = v16;
    }
    else
    {
      v15 = 0;
    }
    v22 = *(_QWORD *)(a1 + 36);
    v23 = 4 * *(_DWORD *)(a1 + 52);
    v24 = *(_WORD *)(a1 + 72);
    *(_QWORD *)a2 = v14;
    *(_QWORD *)(a2 + 8) = v15;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v22;
    *(_DWORD *)(a2 + 32) = v23;
    *(_QWORD *)(a2 + 40) = v13;
    *(_DWORD *)(a2 + 48) = 32;
    *(_WORD *)(a2 + 52) = v24;
  }
  else
  {
    v32 = &off_24EC24BA0;
    sub_223A9E4D0(a1, (uint64_t)&v33);
    v17 = v33;
    v18 = v34;
    if (v34)
    {
      v19 = (unint64_t *)&v34->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = v34;
    }
    else
    {
      v21 = 0;
    }
    v25 = v38;
    v26 = 4 * v39;
    if (v36)
      v27 = (4 * v35) | 0x100000000;
    else
      v27 = 0;
    v28 = v37;
    v29 = v40;
    *(_QWORD *)a2 = v17;
    *(_QWORD *)(a2 + 8) = v18;
    *(_QWORD *)(a2 + 16) = v27;
    *(_QWORD *)(a2 + 24) = v25;
    *(_DWORD *)(a2 + 32) = v26;
    *(_QWORD *)(a2 + 40) = v28;
    *(_DWORD *)(a2 + 48) = 32;
    *(_WORD *)(a2 + 52) = v29;
    if (v21)
    {
      v30 = (unint64_t *)&v21->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
}

void sub_223C746BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_223C746E0(_DWORD *a1@<X0>, const __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();

  v24 = &off_24EC618C8;
  sub_224499234(a1, a2, (uint64_t)&v15);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24EC61728;
  *(_OWORD *)(v4 + 8) = v16;
  *(_OWORD *)(v4 + 24) = v17;
  *(_OWORD *)(v4 + 40) = v18;
  *(_QWORD *)(v4 + 56) = v19;
  *(_OWORD *)(v4 + 64) = v20;
  *(_QWORD *)(v4 + 80) = v21;
  *(_QWORD *)(v4 + 104) = v23;
  *(_OWORD *)(v4 + 88) = v22;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC61900;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  *a3 = v4;
  a3[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a3[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v15, v4, 6);
  v9 = v15[1];
  v8 = v15[2];
  *(_OWORD *)(a3 + 3) = *v15;
  *(_OWORD *)(a3 + 5) = v9;
  *(_OWORD *)(a3 + 7) = v8;
  v15 = 0;
  MEMORY[0x227684CE8]();
  a3[9] = a3[3];
  a3[14] = a3[8];
  v10 = *((_OWORD *)a3 + 3);
  *((_OWORD *)a3 + 5) = *((_OWORD *)a3 + 2);
  *((_OWORD *)a3 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 104))(*a3);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a3 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_223C748D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_223167354(v10);
  sub_223167354((uint64_t)&a10);
  sub_22329C830(&a9);
  _Unwind_Resume(a1);
}

void sub_223C7490C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22329C830(&a9);
  _Unwind_Resume(a1);
}

void sub_223C74920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21)
    free(a21);
  _Unwind_Resume(exception_object);
}

void sub_223C74938(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C749A0()
{
  return 6;
}

uint64_t sub_223C749A8(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_223C749B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_223C749C8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_223C74A48()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C74A5C()
{
  return 6;
}

__int128 *sub_223C74A68()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578EED8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578EED8))
  {
    v2 = sub_223C74B40();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(&xmmword_25578EEC0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25578EED0 = *((_QWORD *)v2 + 2);
      xmmword_25578EEC0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578EEC0, &dword_22314D000);
    __cxa_guard_release(&qword_25578EED8);
  }
  if (byte_25578EED7 >= 0)
    return &xmmword_25578EEC0;
  else
    return (__int128 *)xmmword_25578EEC0;
}

void sub_223C74B28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EED8);
  _Unwind_Resume(a1);
}

__int128 *sub_223C74B40()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578EEF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578EEF8))
    return &xmmword_25578EEE0;
  v2 = sub_223C74C1C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578EEE0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578EEF0 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578EEE0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578EEE0, &dword_22314D000);
  __cxa_guard_release(&qword_25578EEF8);
  return &xmmword_25578EEE0;
}

void sub_223C74C04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EEF8);
  _Unwind_Resume(a1);
}

std::string *sub_223C74C1C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578EF18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578EF18))
    return &stru_25578EF00;
  sub_223C74E34((uint64_t)__p);
  sub_223C74D0C((char *)__p, &stru_25578EF00);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578EF00, &dword_22314D000);
  __cxa_guard_release(&qword_25578EF18);
  return &stru_25578EF00;
}

void sub_223C74CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578EF18);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578EF18);
  _Unwind_Resume(a1);
}

void sub_223C74D0C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2231E1404();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_223C74E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223C74E34(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578EF38);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578EF38))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Two16u>]", qword_25578EF20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578EF20, &dword_22314D000);
    __cxa_guard_release(&qword_25578EF38);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578EF58);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578EF58))
  {
    v5 = sub_2231A38CC(qword_25578EF20, "<", 0);
    sub_2231A37C8(qword_25578EF20, 0, v5, qword_25578EF40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578EF40, &dword_22314D000);
    __cxa_guard_release(&qword_25578EF58);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578EF78);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578EF78))
  {
    sub_224573040((uint64_t)qword_25578EF40, (uint64_t)&xmmword_25578EF60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578EF60, &dword_22314D000);
    __cxa_guard_release(&qword_25578EF78);
  }
  if (byte_25578EF77 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578EF60, *((unint64_t *)&xmmword_25578EF60 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578EF60;
    *(_QWORD *)(a1 + 16) = unk_25578EF70;
  }
}

void sub_223C74FD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EF78);
  _Unwind_Resume(a1);
}

void sub_223C74FE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EF58);
  _Unwind_Resume(a1);
}

void sub_223C75000(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EF38);
  _Unwind_Resume(a1);
}

void sub_223C7501C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C75040(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223C75090(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE6EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE6EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE6EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE6EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_223C75100(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v4;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v15 = v4;
    v16 = 0;
  }
  sub_2231E14FC(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_223C751EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_223C75208(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char **v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = a2[6];
  v5 = a2[7];
  v46 = 0uLL;
  *(_QWORD *)&v47 = 0;
  v6 = v5 - v4;
  if (v5 == v4)
  {
    v8 = 0;
    v7 = 0uLL;
  }
  else
  {
    if (v6 < 0)
      sub_22316E078();
    *(_QWORD *)&v46 = operator new(v5 - v4);
    *((_QWORD *)&v46 + 1) = v46;
    *(_QWORD *)&v47 = v46 + 16 * (v6 >> 4);
    v50 = (char **)&v46;
    do
    {
      v51 = *(_OWORD *)v4;
      sub_2232E9564(&v50, &v51);
      v4 += 16;
    }
    while (v4 != v5);
    v7 = v46;
    v8 = v47;
  }
  *(_OWORD *)a1 = v7;
  *(_QWORD *)(a1 + 16) = v8;
  v9 = a2[9];
  v10 = a2[10];
  v51 = 0uLL;
  v52 = 0;
  v11 = v10 - v9;
  if (v10 == v9)
  {
    v16 = 0;
    v15 = 0uLL;
  }
  else
  {
    if (v11 < 0)
      sub_22316E078();
    *(_QWORD *)&v51 = operator new(v10 - v9);
    *((_QWORD *)&v51 + 1) = v51;
    v52 = v51 + (v11 >> 6 << 6);
    v50 = (char **)&v51;
    do
    {
      v12 = *(_OWORD *)v9;
      v13 = *((_OWORD *)v9 + 1);
      v14 = *((_OWORD *)v9 + 3);
      v48 = *((_OWORD *)v9 + 2);
      v49 = v14;
      v46 = v12;
      v47 = v13;
      sub_223C790E8(&v50, &v46);
      v9 += 64;
    }
    while (v9 != v10);
    v15 = v51;
    v16 = v52;
  }
  *(_OWORD *)(a1 + 24) = v15;
  *(_QWORD *)(a1 + 40) = v16;
  v17 = a2[12];
  v18 = a2[13];
  v46 = 0uLL;
  *(_QWORD *)&v47 = 0;
  v19 = v18 - v17;
  if (v18 == v17)
  {
    v21 = 0;
    v20 = 0uLL;
  }
  else
  {
    if (v19 < 0)
      sub_22316E078();
    *(_QWORD *)&v46 = operator new(v18 - v17);
    *((_QWORD *)&v46 + 1) = v46;
    *(_QWORD *)&v47 = v46 + 16 * (v19 >> 4);
    v50 = (char **)&v46;
    do
    {
      v51 = *(_OWORD *)v17;
      sub_2232E9564(&v50, &v51);
      v17 += 16;
    }
    while (v17 != v18);
    v20 = v46;
    v21 = v47;
  }
  *(_OWORD *)(a1 + 48) = v20;
  *(_QWORD *)(a1 + 64) = v21;
  v22 = a2[18];
  v23 = a2[19];
  v46 = 0uLL;
  *(_QWORD *)&v47 = 0;
  v24 = v23 - v22;
  if (v23 == v22)
  {
    v26 = 0;
    v25 = 0uLL;
  }
  else
  {
    if (v24 < 0)
      sub_22316E078();
    *(_QWORD *)&v46 = operator new(v23 - v22);
    *((_QWORD *)&v46 + 1) = v46;
    *(_QWORD *)&v47 = v46 + 16 * (v24 >> 4);
    v50 = (char **)&v46;
    do
    {
      v51 = *(_OWORD *)v22;
      sub_2232E9564(&v50, &v51);
      v22 += 16;
    }
    while (v22 != v23);
    v25 = v46;
    v26 = v47;
  }
  *(_OWORD *)(a1 + 72) = v25;
  *(_QWORD *)(a1 + 88) = v26;
  v27 = *a2;
  v28 = a2[1];
  v46 = 0uLL;
  *(_QWORD *)&v47 = 0;
  v29 = v28 - v27;
  if (v28 == v27)
  {
    v31 = 0;
    v30 = 0uLL;
  }
  else
  {
    if (v29 < 0)
      sub_22316E078();
    *(_QWORD *)&v46 = operator new(v28 - v27);
    *((_QWORD *)&v46 + 1) = v46;
    *(_QWORD *)&v47 = v46 + 16 * (v29 >> 4);
    v50 = (char **)&v46;
    do
    {
      v51 = *(_OWORD *)v27;
      sub_2232E9564(&v50, &v51);
      v27 += 16;
    }
    while (v27 != v28);
    v30 = v46;
    v31 = v47;
  }
  *(_OWORD *)(a1 + 96) = v30;
  *(_QWORD *)(a1 + 112) = v31;
  v32 = a2[3];
  v33 = a2[4];
  v51 = 0uLL;
  v52 = 0;
  v34 = v33 - v32;
  if (v33 == v32)
  {
    v39 = 0;
    v38 = 0uLL;
  }
  else
  {
    if (v34 < 0)
      sub_22316E078();
    *(_QWORD *)&v51 = operator new(v33 - v32);
    *((_QWORD *)&v51 + 1) = v51;
    v52 = v51 + (v34 >> 6 << 6);
    v50 = (char **)&v51;
    do
    {
      v35 = *(_OWORD *)v32;
      v36 = *((_OWORD *)v32 + 1);
      v37 = *((_OWORD *)v32 + 3);
      v48 = *((_OWORD *)v32 + 2);
      v49 = v37;
      v46 = v35;
      v47 = v36;
      sub_223C790E8(&v50, &v46);
      v32 += 64;
    }
    while (v32 != v33);
    v38 = v51;
    v39 = v52;
  }
  *(_OWORD *)(a1 + 120) = v38;
  *(_QWORD *)(a1 + 136) = v39;
  v40 = a2[15];
  v41 = a2[16];
  v46 = 0uLL;
  *(_QWORD *)&v47 = 0;
  v42 = v41 - v40;
  if (v41 == v40)
  {
    v44 = 0;
    v43 = 0uLL;
  }
  else
  {
    if (v42 < 0)
      sub_22316E078();
    *(_QWORD *)&v46 = operator new(v41 - v40);
    *((_QWORD *)&v46 + 1) = v46;
    *(_QWORD *)&v47 = v46 + 16 * (v42 >> 4);
    v50 = (char **)&v46;
    do
    {
      v51 = *(_OWORD *)v40;
      sub_2232E9564(&v50, &v51);
      v40 += 16;
    }
    while (v40 != v41);
    v43 = v46;
    v44 = v47;
  }
  *(_OWORD *)(a1 + 144) = v43;
  *(_QWORD *)(a1 + 160) = v44;
  return a1;
}

void sub_223C75600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  uint64_t v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  if (__p)
    operator delete(__p);
  v22 = *(void **)(v20 + 120);
  if (v22)
  {
    *(_QWORD *)(v20 + 128) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(v20 + 96);
  if (v23)
  {
    *(_QWORD *)(v20 + 104) = v23;
    operator delete(v23);
  }
  v24 = *(void **)(v20 + 72);
  if (v24)
  {
    *(_QWORD *)(v20 + 80) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(v20 + 48);
  if (v25)
  {
    *(_QWORD *)(v20 + 56) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(v20 + 24);
  if (v26)
  {
    *(_QWORD *)(v20 + 32) = v26;
    operator delete(v26);
  }
  v27 = *(void **)v20;
  if (*(_QWORD *)v20)
  {
    *(_QWORD *)(v20 + 8) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void sub_223C75724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19)
    JUMPOUT(0x223C75730);
  JUMPOUT(0x223C7570CLL);
}

char ***sub_223C7574C@<X0>(char ***result@<X0>, uint64_t a2@<X8>)
{
  char ***v2;
  __int128 v4;
  char **v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char **v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  v2 = result;
  v52 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 160) = 0;
  v4 = 0uLL;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v5 = result[12];
  v6 = result[13];
  v45 = 0uLL;
  *(_QWORD *)&v46 = 0;
  v7 = (char *)v6 - (char *)v5;
  if (v6 == v5)
  {
    v8 = 0;
  }
  else
  {
    if (v7 < 0)
      sub_22316E078();
    *(_QWORD *)&v45 = operator new((char *)v6 - (char *)v5);
    *((_QWORD *)&v45 + 1) = v45;
    *(_QWORD *)&v46 = v45 + 16 * (v7 >> 4);
    v49 = (char **)&v45;
    do
    {
      v50 = *(_OWORD *)v5;
      result = sub_2232E9564(&v49, &v50);
      v5 += 2;
    }
    while (v5 != v6);
    v4 = v45;
    v8 = v46;
  }
  v9 = (char *)v2[15];
  v10 = (char *)v2[16];
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v8;
  v50 = 0uLL;
  v51 = 0;
  v11 = v10 - v9;
  if (v10 == v9)
  {
    v16 = 0;
    v15 = 0uLL;
  }
  else
  {
    if (v11 < 0)
      sub_223257BE4();
    *(_QWORD *)&v50 = operator new(v10 - v9);
    *((_QWORD *)&v50 + 1) = v50;
    v51 = v50 + (v11 >> 6 << 6);
    v49 = (char **)&v50;
    do
    {
      v13 = *(_OWORD *)v9;
      v12 = *((_OWORD *)v9 + 1);
      v14 = *((_OWORD *)v9 + 3);
      v47 = *((_OWORD *)v9 + 2);
      v48 = v14;
      v45 = v13;
      v46 = v12;
      result = sub_223C7920C(&v49, &v45);
      v9 += 64;
    }
    while (v9 != v10);
    v15 = v50;
    v16 = v51;
  }
  v17 = (char *)*v2;
  v18 = (char *)v2[1];
  *(_OWORD *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 40) = v16;
  v45 = 0uLL;
  *(_QWORD *)&v46 = 0;
  v19 = v18 - v17;
  if (v18 == v17)
  {
    v21 = 0;
    v20 = 0uLL;
  }
  else
  {
    if (v19 < 0)
      sub_22316E078();
    *(_QWORD *)&v45 = operator new(v18 - v17);
    *((_QWORD *)&v45 + 1) = v45;
    *(_QWORD *)&v46 = v45 + 16 * (v19 >> 4);
    v49 = (char **)&v45;
    do
    {
      v50 = *(_OWORD *)v17;
      result = sub_2232E9564(&v49, &v50);
      v17 += 16;
    }
    while (v17 != v18);
    v20 = v45;
    v21 = v46;
  }
  v22 = (char *)v2[3];
  v23 = (char *)v2[4];
  *(_OWORD *)(a2 + 48) = v20;
  *(_QWORD *)(a2 + 64) = v21;
  v50 = 0uLL;
  v51 = 0;
  v24 = v23 - v22;
  if (v23 == v22)
  {
    v29 = 0;
    v28 = 0uLL;
  }
  else
  {
    if (v24 < 0)
      sub_223257BE4();
    *(_QWORD *)&v50 = operator new(v23 - v22);
    *((_QWORD *)&v50 + 1) = v50;
    v51 = v50 + (v24 >> 6 << 6);
    v49 = (char **)&v50;
    do
    {
      v26 = *(_OWORD *)v22;
      v25 = *((_OWORD *)v22 + 1);
      v27 = *((_OWORD *)v22 + 3);
      v47 = *((_OWORD *)v22 + 2);
      v48 = v27;
      v45 = v26;
      v46 = v25;
      result = sub_223C7920C(&v49, &v45);
      v22 += 64;
    }
    while (v22 != v23);
    v28 = v50;
    v29 = v51;
  }
  v30 = (char *)v2[6];
  v31 = (char *)v2[7];
  *(_OWORD *)(a2 + 72) = v28;
  *(_QWORD *)(a2 + 88) = v29;
  v45 = 0uLL;
  *(_QWORD *)&v46 = 0;
  v32 = v31 - v30;
  if (v31 == v30)
  {
    v34 = 0;
    v33 = 0uLL;
  }
  else
  {
    if (v32 < 0)
      sub_22316E078();
    *(_QWORD *)&v45 = operator new(v31 - v30);
    *((_QWORD *)&v45 + 1) = v45;
    *(_QWORD *)&v46 = v45 + 16 * (v32 >> 4);
    v49 = (char **)&v45;
    do
    {
      v50 = *(_OWORD *)v30;
      result = sub_2232E9564(&v49, &v50);
      v30 += 16;
    }
    while (v30 != v31);
    v33 = v45;
    v34 = v46;
  }
  v35 = (char *)v2[18];
  v36 = (char *)v2[19];
  *(_OWORD *)(a2 + 96) = v33;
  *(_QWORD *)(a2 + 112) = v34;
  v45 = 0uLL;
  *(_QWORD *)&v46 = 0;
  v37 = v36 - v35;
  if (v36 == v35)
  {
    v39 = 0;
    v38 = 0uLL;
  }
  else
  {
    if (v37 < 0)
      sub_22316E078();
    *(_QWORD *)&v45 = operator new(v36 - v35);
    *((_QWORD *)&v45 + 1) = v45;
    *(_QWORD *)&v46 = v45 + 16 * (v37 >> 4);
    v49 = (char **)&v45;
    do
    {
      v50 = *(_OWORD *)v35;
      result = sub_2232E9564(&v49, &v50);
      v35 += 16;
    }
    while (v35 != v36);
    v38 = v45;
    v39 = v46;
  }
  v40 = (char *)v2[9];
  v41 = (char *)v2[10];
  *(_OWORD *)(a2 + 120) = v38;
  *(_QWORD *)(a2 + 136) = v39;
  v45 = 0uLL;
  *(_QWORD *)&v46 = 0;
  v42 = v41 - v40;
  if (v41 == v40)
  {
    v44 = 0;
    v43 = 0uLL;
  }
  else
  {
    if (v42 < 0)
      sub_22316E078();
    *(_QWORD *)&v45 = operator new(v41 - v40);
    *((_QWORD *)&v45 + 1) = v45;
    *(_QWORD *)&v46 = v45 + 16 * (v42 >> 4);
    v49 = (char **)&v45;
    do
    {
      v50 = *(_OWORD *)v40;
      result = sub_2232E9564(&v49, &v50);
      v40 += 16;
    }
    while (v40 != v41);
    v43 = v45;
    v44 = v46;
  }
  *(_OWORD *)(a2 + 144) = v43;
  *(_QWORD *)(a2 + 160) = v44;
  return result;
}

void sub_223C75B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  if (__p)
    operator delete(__p);
  sub_223255CAC(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_223C75BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int16 v26;
  __int128 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int16 v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __int16 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int16 v47;
  unint64_t v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  __int16 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  unsigned __int8 v82;
  __int16 v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  __int16 v95;
  unint64_t v96;
  __int128 v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  __int16 v101;
  __int128 v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  __int16 v107;
  unint64_t v108;
  __int128 v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  __int16 v113;
  __int128 v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  __int16 v119;
  unint64_t v120;
  __int128 v121;
  __int128 v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  __int16 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  __int16 v135;
  unint64_t v136;
  __int128 v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  __int16 v141;
  __int128 v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  __int16 v147;
  unint64_t v148;
  __int128 v149;
  __int128 v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  __int16 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  __int16 v161;
  unint64_t v162;
  __int128 v163;
  __int128 v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  __int16 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  char *v172;
  __int128 v173;
  uint64_t v174;
  _QWORD *v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char *v189;
  char *v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  int v202;
  char *v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  __int128 v207;
  char *v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  char *v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  char *v220;
  char *v221;
  _OWORD *v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  char *v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  void *v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  uint64_t v244;
  void *v245;
  void *v246;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  std::__shared_weak_count *v252;
  _OWORD *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  __int128 v256;
  _BYTE v257[32];
  __int128 v258;
  _OWORD v259[2];
  __int128 v260;
  _BYTE v261[24];
  uint64_t v262;
  __int128 __p;
  uint64_t v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  int v273;
  uint64_t v274;

  v274 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 8) = 0;
  v249 = a1 + 8;
  *(_BYTE *)(a1 + 64) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    *(_QWORD *)(a1 + 8) = &off_24EC21328;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a2 + 48);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 32) = v10;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = v5;
      *(_WORD *)(a1 + 56) = v8;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v14 = *(_WORD *)(a2 + 48);
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = 0;
      v15 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 32) = v15;
      *(_WORD *)(a1 + 56) = v14;
    }
    *(_BYTE *)(a1 + 64) = 1;
  }
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    *(_QWORD *)(a1 + 72) = &off_24EC21328;
    v16 = *(_QWORD *)(a2 + 72);
    v17 = *(std::__shared_weak_count **)(a2 + 80);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v20 = *(_WORD *)(a2 + 112);
      do
        v21 = __ldxr(v18);
      while (__stxr(v21 + 1, v18));
      v22 = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 96) = v22;
      do
        v23 = __ldxr(v18);
      while (__stxr(v23 + 1, v18));
      *(_QWORD *)(a1 + 80) = v16;
      *(_QWORD *)(a1 + 88) = v17;
      *(_WORD *)(a1 + 120) = v20;
      do
        v24 = __ldaxr(v18);
      while (__stlxr(v24 - 1, v18));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      do
        v25 = __ldaxr(v18);
      while (__stlxr(v25 - 1, v18));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    else
    {
      v26 = *(_WORD *)(a2 + 112);
      *(_QWORD *)(a1 + 80) = v16;
      *(_QWORD *)(a1 + 88) = 0;
      v27 = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 96) = v27;
      *(_WORD *)(a1 + 120) = v26;
    }
    *(_BYTE *)(a1 + 128) = 1;
  }
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  if (*(_BYTE *)(a2 + 208))
  {
    *(_QWORD *)(a1 + 136) = &off_24EC26FA8;
    v28 = *(_QWORD *)(a2 + 136);
    v29 = *(std::__shared_weak_count **)(a2 + 144);
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = *(_WORD *)(a2 + 200);
      do
        v33 = __ldxr(v30);
      while (__stxr(v33 + 1, v30));
      v34 = *(_OWORD *)(a2 + 152);
      v35 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 192) = v35;
      *(_OWORD *)(a1 + 160) = v34;
      do
        v36 = __ldxr(v30);
      while (__stxr(v36 + 1, v30));
      *(_QWORD *)(a1 + 144) = v28;
      *(_QWORD *)(a1 + 152) = v29;
      *(_WORD *)(a1 + 208) = v32;
      do
        v37 = __ldaxr(v30);
      while (__stlxr(v37 - 1, v30));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      do
        v38 = __ldaxr(v30);
      while (__stlxr(v38 - 1, v30));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    else
    {
      v39 = *(_WORD *)(a2 + 200);
      *(_QWORD *)(a1 + 144) = v28;
      *(_QWORD *)(a1 + 152) = 0;
      v40 = *(_OWORD *)(a2 + 152);
      v41 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 192) = v41;
      *(_OWORD *)(a1 + 160) = v40;
      *(_WORD *)(a1 + 208) = v39;
    }
    *(_BYTE *)(a1 + 216) = 1;
  }
  v42 = *(_QWORD *)(a2 + 216);
  v250 = a1;
  if (!v42)
  {
    v53 = 0;
    *(_BYTE *)(a1 + 224) = 0;
    goto LABEL_113;
  }
  *(_QWORD *)(a1 + 224) = &off_24EC21328;
  v43 = *(_QWORD *)(v42 + 8);
  v44 = *(std::__shared_weak_count **)(v42 + 16);
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    v47 = *(_WORD *)(v42 + 48);
    do
      v48 = __ldxr(v45);
    while (__stxr(v48 + 1, v45));
    v49 = *(_OWORD *)(v42 + 24);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(v42 + 40);
    *(_OWORD *)(a1 + 248) = v49;
    do
      v50 = __ldxr(v45);
    while (__stxr(v50 + 1, v45));
    *(_QWORD *)(a1 + 232) = v43;
    *(_QWORD *)(a1 + 240) = v44;
    *(_WORD *)(a1 + 272) = v47;
    do
      v51 = __ldaxr(v45);
    while (__stlxr(v51 - 1, v45));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
    do
      v52 = __ldaxr(v45);
    while (__stlxr(v52 - 1, v45));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  else
  {
    v54 = *(_WORD *)(v42 + 48);
    *(_QWORD *)(a1 + 232) = v43;
    *(_QWORD *)(a1 + 240) = 0;
    v55 = *(_OWORD *)(v42 + 24);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(v42 + 40);
    *(_OWORD *)(a1 + 248) = v55;
    *(_WORD *)(a1 + 272) = v54;
  }
  *(_BYTE *)(a1 + 280) = 1;
  *(_QWORD *)&v256 = &off_24EC1F8C8;
  sub_2238E7018(v42 + 56, (uint64_t)&v256 + 8);
  sub_22416BFE0(a1 + 288, (uint64_t)&v256, 0, v56, v57, v58, v59, v60);
  v66 = *(std::__shared_weak_count **)v257;
  if (!*(_QWORD *)v257)
    goto LABEL_73;
  v67 = (unint64_t *)(*(_QWORD *)v257 + 8);
  do
    v68 = __ldaxr(v67);
  while (__stlxr(v68 - 1, v67));
  if (v68)
  {
LABEL_73:
    *(_QWORD *)&v256 = &off_24EC1F8C8;
    v70 = *(_QWORD *)(v42 + 152);
    v69 = *(std::__shared_weak_count **)(v42 + 160);
    if (v69)
      goto LABEL_74;
LABEL_82:
    v252 = 0;
    v255 = 0;
    v74 = *(_QWORD *)(v42 + 224);
    v75 = *(_QWORD *)(v42 + 236);
    v76 = *(_DWORD *)(v42 + 252);
    goto LABEL_83;
  }
  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
  std::__shared_weak_count::__release_weak(v66);
  *(_QWORD *)&v256 = &off_24EC1F8C8;
  v70 = *(_QWORD *)(v42 + 152);
  v69 = *(std::__shared_weak_count **)(v42 + 160);
  if (!v69)
    goto LABEL_82;
LABEL_74:
  v71 = (unint64_t *)&v69->__shared_owners_;
  do
    v72 = __ldxr(v71);
  while (__stxr(v72 + 1, v71));
  v252 = v69;
  v255 = v69;
  do
    v73 = __ldxr(v71);
  while (__stxr(v73 + 1, v71));
  v74 = *(_QWORD *)(v42 + 224);
  v75 = *(_QWORD *)(v42 + 236);
  v76 = *(_DWORD *)(v42 + 252);
  do
    v77 = __ldxr(v71);
  while (__stxr(v77 + 1, v71));
LABEL_83:
  *((_QWORD *)&v256 + 1) = v70;
  *(_QWORD *)v257 = v69;
  *(_QWORD *)&v257[8] = v75;
  *(_DWORD *)&v257[16] = 2 * v76;
  *(_QWORD *)&v257[24] = v74;
  LODWORD(v258) = 6;
  if (v70)
  {
    if (v69)
    {
      v78 = (unint64_t *)&v69->__shared_owners_;
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
      do
        v80 = __ldaxr(v78);
      while (__stlxr(v80 - 1, v78));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 104))(v70);
    if ((v81 & 0xFFFFFFu) <= 0x10000)
      v82 = 0;
    else
      v82 = v81;
    v83 = v81 & 0xFF00;
    if ((v81 & 0xFF0000) == 0)
      v83 = 0;
    v69 = v255;
    WORD2(v258) = v83 & 0xFF00 | v82;
    if (!v255)
      goto LABEL_102;
    goto LABEL_98;
  }
  WORD2(v258) = 0;
  if (v69)
  {
LABEL_98:
    v84 = (unint64_t *)&v69->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
LABEL_102:
  if (v252)
  {
    v86 = (unint64_t *)&v252->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  sub_22416BFE0(a1 + 392, (uint64_t)&v256, 0, v61, v62, v63, v64, v65);
  v88 = *(std::__shared_weak_count **)v257;
  if (*(_QWORD *)v257)
  {
    v89 = (unint64_t *)(*(_QWORD *)v257 + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v53 = 1;
LABEL_113:
  *(_BYTE *)(a1 + 496) = v53;
  *(_BYTE *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  if (*(_BYTE *)(a2 + 288))
  {
    *(_QWORD *)(a1 + 504) = &off_24EC270A0;
    v91 = *(_QWORD *)(a2 + 240);
    v92 = *(std::__shared_weak_count **)(a2 + 248);
    if (v92)
    {
      v93 = (unint64_t *)&v92->__shared_owners_;
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
      v95 = *(_WORD *)(a2 + 280);
      do
        v96 = __ldxr(v93);
      while (__stxr(v96 + 1, v93));
      v97 = *(_OWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 528) = v97;
      do
        v98 = __ldxr(v93);
      while (__stxr(v98 + 1, v93));
      *(_QWORD *)(a1 + 512) = v91;
      *(_QWORD *)(a1 + 520) = v92;
      *(_WORD *)(a1 + 552) = v95;
      do
        v99 = __ldaxr(v93);
      while (__stlxr(v99 - 1, v93));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
      do
        v100 = __ldaxr(v93);
      while (__stlxr(v100 - 1, v93));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    else
    {
      v101 = *(_WORD *)(a2 + 280);
      *(_QWORD *)(a1 + 512) = v91;
      *(_QWORD *)(a1 + 520) = 0;
      v102 = *(_OWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 528) = v102;
      *(_WORD *)(a1 + 552) = v101;
    }
    *(_BYTE *)(a1 + 560) = 1;
  }
  *(_BYTE *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  if (*(_BYTE *)(a2 + 352))
  {
    *(_QWORD *)(a1 + 568) = &off_24EC21328;
    v103 = *(_QWORD *)(a2 + 304);
    v104 = *(std::__shared_weak_count **)(a2 + 312);
    if (v104)
    {
      v105 = (unint64_t *)&v104->__shared_owners_;
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 1, v105));
      v107 = *(_WORD *)(a2 + 344);
      do
        v108 = __ldxr(v105);
      while (__stxr(v108 + 1, v105));
      v109 = *(_OWORD *)(a2 + 320);
      *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 592) = v109;
      do
        v110 = __ldxr(v105);
      while (__stxr(v110 + 1, v105));
      *(_QWORD *)(a1 + 576) = v103;
      *(_QWORD *)(a1 + 584) = v104;
      *(_WORD *)(a1 + 616) = v107;
      do
        v111 = __ldaxr(v105);
      while (__stlxr(v111 - 1, v105));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
      do
        v112 = __ldaxr(v105);
      while (__stlxr(v112 - 1, v105));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    else
    {
      v113 = *(_WORD *)(a2 + 344);
      *(_QWORD *)(a1 + 576) = v103;
      *(_QWORD *)(a1 + 584) = 0;
      v114 = *(_OWORD *)(a2 + 320);
      *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 592) = v114;
      *(_WORD *)(a1 + 616) = v113;
    }
    *(_BYTE *)(a1 + 624) = 1;
  }
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  if (*(_BYTE *)(a2 + 440))
  {
    *(_QWORD *)(a1 + 632) = &off_24EC26EB0;
    v115 = *(_QWORD *)(a2 + 368);
    v116 = *(std::__shared_weak_count **)(a2 + 376);
    if (v116)
    {
      v117 = (unint64_t *)&v116->__shared_owners_;
      do
        v118 = __ldxr(v117);
      while (__stxr(v118 + 1, v117));
      v119 = *(_WORD *)(a2 + 432);
      do
        v120 = __ldxr(v117);
      while (__stxr(v120 + 1, v117));
      v121 = *(_OWORD *)(a2 + 384);
      v122 = *(_OWORD *)(a2 + 416);
      *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 400);
      *(_OWORD *)(a1 + 688) = v122;
      *(_OWORD *)(a1 + 656) = v121;
      do
        v123 = __ldxr(v117);
      while (__stxr(v123 + 1, v117));
      *(_QWORD *)(a1 + 640) = v115;
      *(_QWORD *)(a1 + 648) = v116;
      *(_WORD *)(a1 + 704) = v119;
      do
        v124 = __ldaxr(v117);
      while (__stlxr(v124 - 1, v117));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
      do
        v125 = __ldaxr(v117);
      while (__stlxr(v125 - 1, v117));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    else
    {
      v126 = *(_WORD *)(a2 + 432);
      *(_QWORD *)(a1 + 640) = v115;
      *(_QWORD *)(a1 + 648) = 0;
      v127 = *(_OWORD *)(a2 + 384);
      v128 = *(_OWORD *)(a2 + 416);
      *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 400);
      *(_OWORD *)(a1 + 688) = v128;
      *(_OWORD *)(a1 + 656) = v127;
      *(_WORD *)(a1 + 704) = v126;
    }
    *(_BYTE *)(a1 + 712) = 1;
  }
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 456);
  sub_223257B24(a1 + 728, a2 + 464);
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 448);
  sub_224518820((_QWORD *)(a1 + 784), a2 + 512);
  *(_BYTE *)(a1 + 800) = 0;
  *(_BYTE *)(a1 + 836) = 0;
  if (*(_BYTE *)(a2 + 564))
  {
    v129 = *(_OWORD *)(a2 + 528);
    v130 = *(_OWORD *)(a2 + 544);
    *(_DWORD *)(a1 + 832) = *(_DWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 800) = v129;
    *(_OWORD *)(a1 + 816) = v130;
    *(_BYTE *)(a1 + 836) = 1;
  }
  *(_BYTE *)(a1 + 840) = 0;
  *(_BYTE *)(a1 + 896) = 0;
  if (*(_BYTE *)(a2 + 1032))
  {
    *(_QWORD *)(a1 + 840) = &off_24EC270A0;
    v131 = *(_QWORD *)(a2 + 984);
    v132 = *(std::__shared_weak_count **)(a2 + 992);
    if (v132)
    {
      v133 = (unint64_t *)&v132->__shared_owners_;
      do
        v134 = __ldxr(v133);
      while (__stxr(v134 + 1, v133));
      v135 = *(_WORD *)(a2 + 1024);
      do
        v136 = __ldxr(v133);
      while (__stxr(v136 + 1, v133));
      v137 = *(_OWORD *)(a2 + 1000);
      *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 1016);
      *(_OWORD *)(a1 + 864) = v137;
      do
        v138 = __ldxr(v133);
      while (__stxr(v138 + 1, v133));
      *(_QWORD *)(a1 + 848) = v131;
      *(_QWORD *)(a1 + 856) = v132;
      *(_WORD *)(a1 + 888) = v135;
      do
        v139 = __ldaxr(v133);
      while (__stlxr(v139 - 1, v133));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
      do
        v140 = __ldaxr(v133);
      while (__stlxr(v140 - 1, v133));
      if (!v140)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    else
    {
      v141 = *(_WORD *)(a2 + 1024);
      *(_QWORD *)(a1 + 848) = v131;
      *(_QWORD *)(a1 + 856) = 0;
      v142 = *(_OWORD *)(a2 + 1000);
      *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 1016);
      *(_OWORD *)(a1 + 864) = v142;
      *(_WORD *)(a1 + 888) = v141;
    }
    *(_BYTE *)(a1 + 896) = 1;
  }
  *(_BYTE *)(a1 + 904) = 0;
  *(_BYTE *)(a1 + 984) = 0;
  if (*(_BYTE *)(a2 + 1120))
  {
    *(_QWORD *)(a1 + 904) = &off_24EC27290;
    v143 = *(_QWORD *)(a2 + 1048);
    v144 = *(std::__shared_weak_count **)(a2 + 1056);
    if (v144)
    {
      v145 = (unint64_t *)&v144->__shared_owners_;
      do
        v146 = __ldxr(v145);
      while (__stxr(v146 + 1, v145));
      v147 = *(_WORD *)(a2 + 1112);
      do
        v148 = __ldxr(v145);
      while (__stxr(v148 + 1, v145));
      v149 = *(_OWORD *)(a2 + 1064);
      v150 = *(_OWORD *)(a2 + 1096);
      *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 1080);
      *(_OWORD *)(a1 + 960) = v150;
      *(_OWORD *)(a1 + 928) = v149;
      do
        v151 = __ldxr(v145);
      while (__stxr(v151 + 1, v145));
      *(_QWORD *)(a1 + 912) = v143;
      *(_QWORD *)(a1 + 920) = v144;
      *(_WORD *)(a1 + 976) = v147;
      do
        v152 = __ldaxr(v145);
      while (__stlxr(v152 - 1, v145));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
      do
        v153 = __ldaxr(v145);
      while (__stlxr(v153 - 1, v145));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
    }
    else
    {
      v154 = *(_WORD *)(a2 + 1112);
      *(_QWORD *)(a1 + 912) = v143;
      *(_QWORD *)(a1 + 920) = 0;
      v155 = *(_OWORD *)(a2 + 1064);
      v156 = *(_OWORD *)(a2 + 1096);
      *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 1080);
      *(_OWORD *)(a1 + 960) = v156;
      *(_OWORD *)(a1 + 928) = v155;
      *(_WORD *)(a1 + 976) = v154;
    }
    *(_BYTE *)(a1 + 984) = 1;
  }
  *(_BYTE *)(a1 + 992) = 0;
  *(_BYTE *)(a1 + 1072) = 0;
  if (*(_BYTE *)(a2 + 1208))
  {
    *(_QWORD *)(a1 + 992) = &off_24EC26EB0;
    v157 = *(_QWORD *)(a2 + 1136);
    v158 = *(std::__shared_weak_count **)(a2 + 1144);
    if (v158)
    {
      v159 = (unint64_t *)&v158->__shared_owners_;
      do
        v160 = __ldxr(v159);
      while (__stxr(v160 + 1, v159));
      v161 = *(_WORD *)(a2 + 1200);
      do
        v162 = __ldxr(v159);
      while (__stxr(v162 + 1, v159));
      v163 = *(_OWORD *)(a2 + 1152);
      v164 = *(_OWORD *)(a2 + 1184);
      *(_OWORD *)(a1 + 1032) = *(_OWORD *)(a2 + 1168);
      *(_OWORD *)(a1 + 1048) = v164;
      *(_OWORD *)(a1 + 1016) = v163;
      do
        v165 = __ldxr(v159);
      while (__stxr(v165 + 1, v159));
      *(_QWORD *)(a1 + 1000) = v157;
      *(_QWORD *)(a1 + 1008) = v158;
      *(_WORD *)(a1 + 1064) = v161;
      do
        v166 = __ldaxr(v159);
      while (__stlxr(v166 - 1, v159));
      if (!v166)
      {
        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
        std::__shared_weak_count::__release_weak(v158);
      }
      do
        v167 = __ldaxr(v159);
      while (__stlxr(v167 - 1, v159));
      if (!v167)
      {
        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
        std::__shared_weak_count::__release_weak(v158);
      }
    }
    else
    {
      v168 = *(_WORD *)(a2 + 1200);
      *(_QWORD *)(a1 + 1000) = v157;
      *(_QWORD *)(a1 + 1008) = 0;
      v169 = *(_OWORD *)(a2 + 1152);
      v170 = *(_OWORD *)(a2 + 1184);
      *(_OWORD *)(a1 + 1032) = *(_OWORD *)(a2 + 1168);
      *(_OWORD *)(a1 + 1048) = v170;
      *(_OWORD *)(a1 + 1016) = v169;
      *(_WORD *)(a1 + 1064) = v168;
    }
    *(_BYTE *)(a1 + 1072) = 1;
  }
  *(_BYTE *)(a1 + 1080) = *(_BYTE *)(a2 + 1216);
  v171 = *(_QWORD *)(a2 + 1220);
  *(_DWORD *)(a1 + 1092) = *(_DWORD *)(a2 + 1228);
  *(_QWORD *)(a1 + 1084) = v171;
  *(_BYTE *)(a1 + 1096) = 0;
  *(_BYTE *)(a1 + 1128) = 0;
  *(_QWORD *)(a1 + 1136) = *(_QWORD *)(a2 + 1232);
  *(_QWORD *)(a1 + 1144) = *(_QWORD *)(a2 + 1256);
  *(_QWORD *)(a1 + 1152) = *(_QWORD *)(a2 + 1264);
  *(_QWORD *)(a1 + 1160) = *(_QWORD *)(a2 + 1328);
  v172 = (char *)operator new(0x78uLL);
  *(_OWORD *)(v172 + 40) = *(_OWORD *)(a2 + 1256);
  v173 = *(_OWORD *)(a2 + 1288);
  *(_OWORD *)(v172 + 56) = *(_OWORD *)(a2 + 1272);
  *((_QWORD *)v172 + 1) = 0;
  *((_QWORD *)v172 + 2) = 0;
  *(_QWORD *)v172 = &off_24EC6CE00;
  v174 = *(_QWORD *)(a2 + 1328);
  *((_QWORD *)v172 + 4) = &off_24EC20868;
  *((_DWORD *)v172 + 26) = *(_DWORD *)(a2 + 1320);
  *(_OWORD *)(v172 + 72) = v173;
  *(_OWORD *)(v172 + 88) = *(_OWORD *)(a2 + 1304);
  *((_QWORD *)v172 + 14) = v174;
  *((_QWORD *)v172 + 3) = &off_24EC207B8;
  *(_QWORD *)(a1 + 1168) = v172 + 24;
  *(_QWORD *)(a1 + 1176) = v172;
  *(float64x2_t *)(a1 + 1184) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 1336));
  *(float64x2_t *)(a1 + 1200) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 1344));
  *(float64x2_t *)(a1 + 1216) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 1352));
  *(float64x2_t *)(a1 + 1232) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 1360));
  *(float64x2_t *)(a1 + 1248) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 1368));
  *(float64x2_t *)(a1 + 1264) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 1376));
  *(float64x2_t *)(a1 + 1280) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 1384));
  *(float64x2_t *)(a1 + 1296) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 1392));
  if (*(_BYTE *)(a2 + 1608))
  {
    LOBYTE(v256) = *(_BYTE *)(a2 + 1408);
    *(_WORD *)((char *)&v256 + 1) = *(_WORD *)(a2 + 1409);
    DWORD1(v256) = *(_DWORD *)(a2 + 1412);
    *((_QWORD *)&v256 + 1) = *(_QWORD *)(a2 + 1416);
    *(_DWORD *)v257 = *(_DWORD *)(a2 + 1424);
    v175 = (_QWORD *)sub_223C75208((uint64_t)&v257[8], (char **)(a2 + 1432));
    BYTE8(v266) = *(_BYTE *)(a2 + 1600);
    v176 = BYTE8(v266);
    *(_OWORD *)(a1 + 1312) = v256;
    *(_DWORD *)(a1 + 1328) = *(_DWORD *)v257;
    *(_OWORD *)(v249 + 1328) = *(_OWORD *)&v257[8];
    *(_QWORD *)(a1 + 1352) = *(_QWORD *)&v257[24];
    v175[1] = 0;
    v175[2] = 0;
    *v175 = 0;
    *(_OWORD *)(a1 + 1360) = v258;
    *(_QWORD *)(a1 + 1376) = *(_QWORD *)&v259[0];
    v258 = 0uLL;
    *(_OWORD *)(v249 + 1376) = *(_OWORD *)((char *)v259 + 8);
    v177 = *(_QWORD *)v261;
    *(_QWORD *)(a1 + 1400) = *((_QWORD *)&v259[1] + 1);
    memset(v259, 0, sizeof(v259));
    *(_OWORD *)(a1 + 1408) = v260;
    *(_QWORD *)(a1 + 1424) = v177;
    v260 = 0uLL;
    *(_OWORD *)(v249 + 1424) = *(_OWORD *)&v261[8];
    v178 = v264;
    *(_QWORD *)(a1 + 1448) = v262;
    memset(v261, 0, sizeof(v261));
    v262 = 0;
    *(_OWORD *)(a1 + 1456) = __p;
    *(_QWORD *)(a1 + 1472) = v178;
    __p = 0uLL;
    v264 = 0;
    *(_OWORD *)(v249 + 1472) = v265;
    *(_QWORD *)(a1 + 1496) = v266;
    *(_BYTE *)(a1 + 1504) = v176;
    *(_BYTE *)(a1 + 1512) = 1;
    *(_BYTE *)(a1 + 1520) = 0;
    *(_BYTE *)(a1 + 1648) = 0;
    if (!*(_BYTE *)(a2 + 1744))
      goto LABEL_220;
    goto LABEL_219;
  }
  *(_BYTE *)(a1 + 1312) = 0;
  *(_BYTE *)(a1 + 1512) = 0;
  *(_BYTE *)(a1 + 1520) = 0;
  *(_BYTE *)(a1 + 1648) = 0;
  if (*(_BYTE *)(a2 + 1744))
  {
LABEL_219:
    v179 = *(_OWORD *)(a2 + 1616);
    v180 = *(_OWORD *)(a2 + 1632);
    v181 = *(_OWORD *)(a2 + 1664);
    *(_OWORD *)(a1 + 1552) = *(_OWORD *)(a2 + 1648);
    *(_OWORD *)(a1 + 1568) = v181;
    *(_OWORD *)(a1 + 1520) = v179;
    *(_OWORD *)(a1 + 1536) = v180;
    v182 = *(_OWORD *)(a2 + 1680);
    v183 = *(_OWORD *)(a2 + 1696);
    v184 = *(_OWORD *)(a2 + 1712);
    *(_OWORD *)(a1 + 1632) = *(_OWORD *)(a2 + 1728);
    *(_OWORD *)(a1 + 1616) = v184;
    *(_OWORD *)(a1 + 1600) = v183;
    *(_OWORD *)(a1 + 1584) = v182;
    *(_BYTE *)(a1 + 1648) = 1;
  }
LABEL_220:
  v185 = *(_QWORD *)(a2 + 1784);
  v248 = a2;
  v186 = *(_QWORD *)(a2 + 1776);
  v187 = v185 - v186;
  if (v185 == v186)
  {
    v189 = 0;
    v190 = 0;
  }
  else
  {
    v188 = 0x6DB6DB6DB6DB6DB7 * (v187 >> 5);
    if (v188 > 0xD79435E50D7943)
      sub_22316E078();
    v189 = (char *)operator new(0x4924924924924950 * (v187 >> 5));
    v187 = (uint64_t)&v189[304 * v188];
    v251 = v189;
    v253 = v189;
    v254 = v187;
    v190 = v189;
    if (v185 != v186)
    {
      do
      {
        sub_223C8DBC8((uint64_t)&v256, v186);
        v203 = (char *)v253;
        if ((unint64_t)v253 < v254)
        {
          *v253 = v256;
          v191 = *(_OWORD *)v257;
          v192 = *(_OWORD *)&v257[16];
          v193 = v259[0];
          v253[3] = v258;
          v253[4] = v193;
          v253[1] = v191;
          v253[2] = v192;
          v194 = v259[1];
          v195 = v260;
          v196 = *(_OWORD *)v261;
          *((_QWORD *)v253 + 16) = *(_QWORD *)&v261[16];
          v253[6] = v195;
          v253[7] = v196;
          v253[5] = v194;
          *((_QWORD *)v253 + 18) = 0;
          *((_QWORD *)v253 + 19) = 0;
          *((_QWORD *)v253 + 20) = 0;
          v253[9] = __p;
          *((_QWORD *)v253 + 20) = v264;
          __p = 0uLL;
          v264 = 0;
          *(_OWORD *)((char *)v253 + 168) = v265;
          v197 = v268;
          v198 = v269;
          v199 = v267;
          *(_OWORD *)((char *)v253 + 184) = v266;
          *(_OWORD *)((char *)v253 + 232) = v198;
          *(_OWORD *)((char *)v253 + 216) = v197;
          *(_OWORD *)((char *)v253 + 200) = v199;
          v201 = v271;
          v200 = v272;
          v202 = v273;
          *(_OWORD *)((char *)v253 + 248) = v270;
          *((_DWORD *)v253 + 74) = v202;
          *(_OWORD *)((char *)v253 + 264) = v201;
          *(_OWORD *)((char *)v253 + 280) = v200;
          v253 += 19;
        }
        else
        {
          v204 = 0x86BCA1AF286BCA1BLL * (((char *)v253 - v251) >> 4) + 1;
          if (v204 > 0xD79435E50D7943)
            sub_22316E078();
          if (0xD79435E50D79436 * ((uint64_t)(v254 - (_QWORD)v251) >> 4) > v204)
            v204 = 0xD79435E50D79436 * ((uint64_t)(v254 - (_QWORD)v251) >> 4);
          if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v254 - (_QWORD)v251) >> 4) >= 0x6BCA1AF286BCA1)
            v205 = 0xD79435E50D7943;
          else
            v205 = v204;
          if (v205)
          {
            if (v205 > 0xD79435E50D7943)
              sub_223174E94();
            v206 = (char *)operator new(304 * v205);
          }
          else
          {
            v206 = 0;
          }
          v207 = *(_OWORD *)v261;
          v208 = &v206[16 * (((char *)v253 - v251) >> 4)];
          *((_OWORD *)v208 + 6) = v260;
          *((_OWORD *)v208 + 7) = v207;
          v209 = v258;
          *((_OWORD *)v208 + 2) = *(_OWORD *)&v257[16];
          *((_OWORD *)v208 + 3) = v209;
          v210 = v259[1];
          *((_OWORD *)v208 + 4) = v259[0];
          *((_OWORD *)v208 + 5) = v210;
          v211 = *(_OWORD *)v257;
          *(_OWORD *)v208 = v256;
          *((_OWORD *)v208 + 1) = v211;
          *((_OWORD *)v208 + 9) = __p;
          v212 = v269;
          *(_OWORD *)(v208 + 248) = v270;
          v213 = v272;
          *(_OWORD *)(v208 + 264) = v271;
          *(_OWORD *)(v208 + 280) = v213;
          v214 = v265;
          *(_OWORD *)(v208 + 184) = v266;
          v215 = v268;
          *(_OWORD *)(v208 + 200) = v267;
          *(_OWORD *)(v208 + 216) = v215;
          *(_OWORD *)(v208 + 232) = v212;
          v216 = &v206[304 * v205];
          v217 = v264;
          *((_QWORD *)v208 + 16) = *(_QWORD *)&v261[16];
          *((_QWORD *)v208 + 20) = v217;
          v264 = 0;
          __p = 0uLL;
          *((_DWORD *)v208 + 74) = v273;
          v218 = v208 + 304;
          *(_OWORD *)(v208 + 168) = v214;
          if (v253 == (_OWORD *)v251)
          {
            v251 = &v206[16 * (((char *)v253 - v251) >> 4)];
            v254 = (unint64_t)v216;
          }
          else
          {
            v219 = 0;
            do
            {
              v220 = &v208[v219 * 16];
              v221 = &v208[v219 * 16 - 304];
              v222 = &v253[v219];
              v223 = v253[v219 - 14];
              v224 = v253[v219 - 13];
              v225 = v253[v219 - 12];
              *((_QWORD *)v220 - 22) = *(_QWORD *)&v253[v219 - 11];
              *((_OWORD *)v220 - 13) = v224;
              *((_OWORD *)v220 - 12) = v225;
              *((_OWORD *)v220 - 14) = v223;
              *(_OWORD *)v221 = v253[v219 - 19];
              v226 = v253[v219 - 18];
              v227 = v253[v219 - 17];
              v228 = v253[v219 - 15];
              *((_OWORD *)v220 - 16) = v253[v219 - 16];
              *((_OWORD *)v220 - 15) = v228;
              *((_OWORD *)v221 + 1) = v226;
              *((_OWORD *)v221 + 2) = v227;
              *((_QWORD *)v220 - 19) = 0;
              *((_QWORD *)v220 - 18) = 0;
              *((_OWORD *)v220 - 10) = v253[v219 - 10];
              *((_QWORD *)v220 - 18) = *(_QWORD *)&v253[v219 - 9];
              *((_QWORD *)v222 - 19) = 0;
              *((_QWORD *)v222 - 18) = 0;
              *((_QWORD *)v222 - 20) = 0;
              v229 = *(_OWORD *)((char *)&v253[v219 - 6] - 8);
              v230 = *(_OWORD *)((char *)&v253[v219 - 5] - 8);
              v231 = *(_OWORD *)((char *)&v253[v219 - 4] - 8);
              *(_OWORD *)(v220 - 120) = *(_OWORD *)((char *)&v253[v219 - 7] - 8);
              *(_OWORD *)(v220 - 72) = v231;
              *(_OWORD *)(v220 - 88) = v230;
              *(_OWORD *)(v220 - 104) = v229;
              v232 = *(_OWORD *)((char *)&v253[v219 - 2] - 8);
              v233 = *(_OWORD *)((char *)&v253[v219 - 1] - 8);
              LODWORD(v221) = DWORD2(v253[v219 - 1]);
              *(_OWORD *)(v220 - 56) = *(_OWORD *)((char *)&v253[v219 - 3] - 8);
              *((_DWORD *)v220 - 2) = (_DWORD)v221;
              *(_OWORD *)(v220 - 24) = v233;
              *(_OWORD *)(v220 - 40) = v232;
              *(_OWORD *)(v220 - 136) = *(_OWORD *)((char *)&v253[v219 - 8] - 8);
              v219 -= 19;
            }
            while (&v253[v219] != (_OWORD *)v251);
            v203 = v251;
            v234 = (char *)v253;
            v251 = &v208[v219 * 16];
            v254 = (unint64_t)v216;
            while (v234 != v203)
            {
              v236 = *((_QWORD *)v234 - 20);
              if (v236)
              {
                v237 = *((_QWORD *)v234 - 19);
                v235 = (void *)*((_QWORD *)v234 - 20);
                if (v237 != v236)
                {
                  v238 = *((_QWORD *)v234 - 19);
                  do
                  {
                    v240 = *(void **)(v238 - 24);
                    v238 -= 24;
                    v239 = v240;
                    if (v240)
                    {
                      *(_QWORD *)(v237 - 16) = v239;
                      operator delete(v239);
                    }
                    v237 = v238;
                  }
                  while (v238 != v236);
                  v235 = (void *)*((_QWORD *)v234 - 20);
                }
                *((_QWORD *)v234 - 19) = v236;
                operator delete(v235);
              }
              v234 -= 304;
            }
          }
          if (v203)
            operator delete(v203);
          v241 = __p;
          v253 = v218;
          if ((_QWORD)__p)
          {
            v242 = *((_QWORD *)&__p + 1);
            v243 = (void *)__p;
            if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
            {
              v244 = *((_QWORD *)&__p + 1);
              do
              {
                v246 = *(void **)(v244 - 24);
                v244 -= 24;
                v245 = v246;
                if (v246)
                {
                  *(_QWORD *)(v242 - 16) = v245;
                  operator delete(v245);
                }
                v242 = v244;
              }
              while (v244 != v241);
              v243 = (void *)__p;
            }
            *((_QWORD *)&__p + 1) = v241;
            operator delete(v243);
          }
        }
        v186 += 224;
      }
      while (v186 != v185);
      v190 = v251;
      v189 = (char *)v253;
      v187 = v254;
    }
  }
  *(_QWORD *)(v250 + 1656) = v190;
  *(_QWORD *)(v250 + 1664) = v189;
  *(_QWORD *)(v250 + 1672) = v187;
  *(_BYTE *)(v250 + 1680) = *(_BYTE *)(v248 + 1400);
  *(_WORD *)(v249 + 1673) = *(_WORD *)(v248 + 1800);
  return v250;
}

void sub_223C7700C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;

  v26 = a21;
  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  sub_223167354((uint64_t)&a17);
  sub_223167354((uint64_t)&a14);
  sub_22319A588(v24);
  sub_2232BBF74(v23);
  sub_223B88EB8(v22);
  sub_2232BBF74(v21);
  sub_2232BBF74(a12);
  _Unwind_Resume(a1);
}

void sub_223C770BC()
{
  JUMPOUT(0x223C77194);
}

void sub_223C770C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void *v16;

  if (*(_BYTE *)(v13 + 752))
  {
    v16 = *v15;
    if (*v15)
    {
      *(_QWORD *)(a13 + 736) = v16;
      operator delete(v16);
    }
  }
  sub_223255D3C(v14);
  JUMPOUT(0x223C771C0);
}

void sub_223C77104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  uint64_t v38;

  sub_223C771DC(&a14);
  if (*(_BYTE *)(a13 + 1512))
    sub_223255CAC(a13 + 1336);
  sub_22365B530(a13 + 1144);
  sub_2232BC87C(a13 + 1096);
  sub_2232559C8(a13 + 904);
  sub_223255A90(a13 + 840);
  sub_2232BC8F8(v38);
  sub_223255BE4(a13 + 504);
  sub_2232BC9D0(a12);
  _Unwind_Resume(a1);
}

void **sub_223C771DC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 20);
        if (v6)
        {
          v7 = *((_QWORD *)v3 - 19);
          v5 = (void *)*((_QWORD *)v3 - 20);
          if (v7 != v6)
          {
            v8 = *((_QWORD *)v3 - 19);
            do
            {
              v10 = *(void **)(v8 - 24);
              v8 -= 24;
              v9 = v10;
              if (v10)
              {
                *(_QWORD *)(v7 - 16) = v9;
                operator delete(v9);
              }
              v7 = v8;
            }
            while (v8 != v6);
            v5 = (void *)*((_QWORD *)v3 - 20);
          }
          *((_QWORD *)v3 - 19) = v6;
          operator delete(v5);
        }
        v3 -= 304;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_223C7728C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (**v2)();
  char v3;
  char v4;
  char v5;
  uint64_t (**v8)();
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  __int16 v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  __int16 v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  unint64_t *v63;
  unint64_t v64;
  int v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  int v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  __int128 v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  __int128 *v81;
  int v82;
  __int128 v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  __int128 v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  __int128 v92;
  unint64_t *v93;
  unint64_t v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  int v108;
  __int128 v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  int v113;
  int v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  __int128 v122;
  __int128 v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  __int128 v127;
  __int128 v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  char v135;
  char v136;
  char v137;
  char v138;
  char v139;
  char v140;
  unint64_t v141;
  char v142;
  unsigned int v143;
  char v144;
  char v145;
  char v146;
  char v147;
  char v148;
  char v149;
  __int128 v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  uint64_t v155;
  char v156;
  char v157;
  int v158;
  __int128 v159;
  __int128 v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  __int128 v164;
  __int128 v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  _OWORD *v169;
  int v170;
  __int128 v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  int v175;
  int v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  __int128 v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  __int128 v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  __int128 v188;
  __int128 v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  float32x2_t v198;
  float32x2_t v199;
  float32x2_t v205;
  int32x2_t v206;
  int8x16_t v207;
  uint64_t v208;
  __int128 v209;
  __int128 v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float32x4_t v215;
  char v216;
  __n128 v217;
  __n128 v218;
  __n128 v219;
  __n128 v220;
  __n128 v221;
  __n128 v222;
  __n128 v223;
  __int128 v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  char *v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  char *v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  char *v252;
  uint64_t v253;
  __int128 v254;
  __int128 v255;
  unint64_t *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  char *v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  int v270;
  std::runtime_error *exception;
  char v272;
  char v273;
  char v274;
  char v275;
  char v276;
  char v277;
  char v278;
  char v279;
  char v280;
  char v281;
  char v282;
  __int128 v283;
  char v284;
  _BYTE v285[24];
  _BYTE v286[32];
  __int128 v287;
  __int128 v288;
  _BYTE v289[32];
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int16 v295;
  unsigned __int8 v296;
  __int128 v297;
  _BYTE v298[24];
  _BYTE v299[32];
  _BYTE v300[112];
  _BYTE v301[32];
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  uint64_t v306;
  __int16 v307;
  uint64_t (**v308)();
  uint64_t v309;
  std::__shared_weak_count *v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  int v314;
  __int16 v315;
  __int128 v316;
  std::__shared_weak_count *v317;

  sub_2232BD040(a2);
  v285[0] = 0;
  LOBYTE(v287) = 0;
  BYTE8(v287) = 0;
  LOBYTE(v290) = 0;
  BYTE8(v290) = 0;
  v296 = 0;
  v297 = 0uLL;
  sub_2231BEC8C((uint64_t)v285, a1 + 8);
  sub_2231BEC8C((uint64_t)&v287 + 8, a1 + 72);
  sub_2234821D0((uint64_t)&v290 + 8, a1 + 136);
  v8 = &off_24EC21328;
  if (!*(_BYTE *)(a1 + 496))
  {
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v297 + 1);
    v297 = 0uLL;
    if (!v19)
      goto LABEL_73;
    goto LABEL_70;
  }
  *(_QWORD *)v298 = &off_24EC21328;
  v9 = *(_QWORD *)(a1 + 232);
  v10 = *(std::__shared_weak_count **)(a1 + 240);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = *(_WORD *)(a1 + 272);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *(_OWORD *)v299 = *(_OWORD *)(a1 + 248);
    *(_QWORD *)&v299[16] = *(_QWORD *)(a1 + 264);
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    *(_QWORD *)&v298[8] = v9;
    *(_QWORD *)&v298[16] = v10;
    *(_WORD *)&v299[24] = v13;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    v18 = *(_DWORD *)(a1 + 384);
    if (v18)
      goto LABEL_17;
  }
  else
  {
    v20 = *(_WORD *)(a1 + 272);
    *(_QWORD *)&v298[8] = *(_QWORD *)(a1 + 232);
    *(_QWORD *)&v298[16] = 0;
    *(_OWORD *)v299 = *(_OWORD *)(a1 + 248);
    *(_QWORD *)&v299[16] = *(_QWORD *)(a1 + 264);
    *(_WORD *)&v299[24] = v20;
    v18 = *(_DWORD *)(a1 + 384);
    if (v18)
    {
LABEL_17:
      if (v18 != 1)
        sub_22316DD70();
      v308 = &off_24EC1F8C8;
      sub_2231F47D4(a1 + 320, (uint64_t)&v309);
      goto LABEL_34;
    }
  }
  v308 = &off_24EC1F8C8;
  v21 = *(_QWORD *)(a1 + 328);
  v22 = *(std::__shared_weak_count **)(a1 + 336);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v25 = *(_QWORD *)(a1 + 360);
    v26 = *(_DWORD *)(a1 + 368);
    v27 = *(_WORD *)(a1 + 372);
    do
      v28 = __ldxr(v23);
    while (__stxr(v28 + 1, v23));
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 360);
    v26 = *(_DWORD *)(a1 + 368);
    v27 = *(_WORD *)(a1 + 372);
  }
  v309 = v21;
  v310 = v22;
  v311 = *(_QWORD *)(a1 + 344);
  v312 = *(_DWORD *)(a1 + 352);
  v313 = v25;
  v314 = v26;
  v315 = v27;
  if (v22)
  {
    v29 = (unint64_t *)&v22->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_34:
  *(_QWORD *)&v316 = &off_24EC21230;
  sub_223C795C4((uint64_t)&v308, (uint64_t)&v316 + 8);
  v2 = &off_24EC216B8;
  *(_QWORD *)v300 = &off_24EC216B8;
  sub_22390BCB0((uint64_t)&v316, (uint64_t)&v300[8]);
  v31 = v317;
  if (v317)
  {
    v32 = (unint64_t *)&v317->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v310;
  if (!v310)
    goto LABEL_43;
  v35 = (unint64_t *)&v310->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    v37 = *(_DWORD *)(a1 + 488);
    if (v37)
      goto LABEL_44;
  }
  else
  {
LABEL_43:
    v37 = *(_DWORD *)(a1 + 488);
    if (v37)
    {
LABEL_44:
      if (v37 != 1)
        sub_22316DD70();
      v308 = &off_24EC1F8C8;
      sub_2231F47D4(a1 + 424, (uint64_t)&v309);
      goto LABEL_59;
    }
  }
  v308 = &off_24EC1F8C8;
  v38 = *(_QWORD *)(a1 + 432);
  v39 = *(std::__shared_weak_count **)(a1 + 440);
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    v42 = *(_QWORD *)(a1 + 464);
    v43 = *(_DWORD *)(a1 + 472);
    v44 = *(_WORD *)(a1 + 476);
    do
      v45 = __ldxr(v40);
    while (__stxr(v45 + 1, v40));
  }
  else
  {
    v42 = *(_QWORD *)(a1 + 464);
    v43 = *(_DWORD *)(a1 + 472);
    v44 = *(_WORD *)(a1 + 476);
  }
  v309 = v38;
  v310 = v39;
  v311 = *(_QWORD *)(a1 + 448);
  v312 = *(_DWORD *)(a1 + 456);
  v313 = v42;
  v314 = v43;
  v315 = v44;
  if (v39)
  {
    v46 = (unint64_t *)&v39->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
LABEL_59:
  *(_QWORD *)&v316 = &off_24EC61A40;
  sub_223C79A38((uint64_t)&v308, (uint64_t)&v316 + 8);
  *(_QWORD *)&v300[88] = &off_24EC617D0;
  sub_223C7A070((uint64_t)&v316, (uint64_t)&v300[96]);
  v48 = v317;
  if (v317)
  {
    v49 = (unint64_t *)&v317->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v310;
  if (v310)
  {
    v52 = (unint64_t *)&v310->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = (char *)operator new(0x130uLL);
  *((_QWORD *)v54 + 1) = 0;
  *((_QWORD *)v54 + 2) = 0;
  *(_QWORD *)v54 = &off_24EC612D8;
  *((_QWORD *)v54 + 3) = &off_24EC21328;
  v55 = *(_OWORD *)v299;
  *((_OWORD *)v54 + 2) = *(_OWORD *)&v298[8];
  *((_OWORD *)v54 + 3) = v55;
  *(_OWORD *)(v54 + 58) = *(_OWORD *)&v299[10];
  *((_QWORD *)v54 + 10) = &off_24EC216B8;
  v56 = *(_OWORD *)&v300[24];
  *(_OWORD *)(v54 + 88) = *(_OWORD *)&v300[8];
  v57 = *(_OWORD *)&v300[40];
  v58 = *(_OWORD *)&v300[56];
  *((_QWORD *)v54 + 19) = *(_QWORD *)&v300[72];
  *(_OWORD *)(v54 + 136) = v58;
  *(_OWORD *)(v54 + 120) = v57;
  *(_OWORD *)(v54 + 104) = v56;
  *((_WORD *)v54 + 80) = *(_WORD *)&v300[80];
  *((_QWORD *)v54 + 21) = &off_24EC617D0;
  v59 = *(_OWORD *)&v300[96];
  v60 = v304;
  *((_OWORD *)v54 + 15) = v303;
  *((_OWORD *)v54 + 16) = v60;
  *((_OWORD *)v54 + 17) = v305;
  *((_QWORD *)v54 + 36) = v306;
  v61 = *(_OWORD *)v301;
  *((_OWORD *)v54 + 11) = v59;
  *((_OWORD *)v54 + 12) = v61;
  v62 = v302;
  *((_OWORD *)v54 + 13) = *(_OWORD *)&v301[16];
  *((_OWORD *)v54 + 14) = v62;
  *((_WORD *)v54 + 148) = v307;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v297 + 1);
  *(_QWORD *)&v297 = v54 + 24;
  *((_QWORD *)&v297 + 1) = v54;
  if (!v19)
  {
LABEL_73:
    v65 = *(unsigned __int8 *)(a2 + 56);
    if (v65 == v287)
      goto LABEL_74;
LABEL_83:
    *(_QWORD *)a2 = &off_24EC21328;
    if (!v65)
    {
      *(_OWORD *)(a2 + 8) = *(_OWORD *)&v285[8];
      *(_QWORD *)&v285[8] = 0;
      *(_QWORD *)&v285[16] = 0;
      *(_OWORD *)(a2 + 24) = *(_OWORD *)v286;
      *(_OWORD *)(a2 + 34) = *(_OWORD *)&v286[10];
      *(_BYTE *)(a2 + 56) = 1;
      v70 = *(unsigned __int8 *)(a2 + 120);
      if (v70 == v290)
        goto LABEL_91;
LABEL_99:
      *(_QWORD *)(a2 + 64) = &off_24EC21328;
      if (v70)
      {
        v78 = *(std::__shared_weak_count **)(a2 + 80);
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        *(_BYTE *)(a2 + 120) = 0;
      }
      else
      {
        *(_OWORD *)(a2 + 72) = v288;
        v288 = 0uLL;
        *(_OWORD *)(a2 + 88) = *(_OWORD *)v289;
        *(_OWORD *)(a2 + 98) = *(_OWORD *)&v289[10];
        *(_BYTE *)(a2 + 120) = 1;
      }
      goto LABEL_107;
    }
    v71 = *(std::__shared_weak_count **)(a2 + 16);
    if (v71)
    {
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    *(_BYTE *)(a2 + 56) = 0;
LABEL_90:
    v70 = *(unsigned __int8 *)(a2 + 120);
    if (v70 == v290)
      goto LABEL_91;
    goto LABEL_99;
  }
LABEL_70:
  v63 = (unint64_t *)&v19->__shared_owners_;
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
  if (v64)
    goto LABEL_73;
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  v65 = *(unsigned __int8 *)(a2 + 56);
  if (v65 != v287)
    goto LABEL_83;
LABEL_74:
  if (!v65)
    goto LABEL_90;
  v66 = *(_OWORD *)&v285[8];
  *(_QWORD *)&v285[8] = 0;
  *(_QWORD *)&v285[16] = 0;
  v67 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v66;
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)v286;
  *(_OWORD *)(a2 + 34) = *(_OWORD *)&v286[10];
  v70 = *(unsigned __int8 *)(a2 + 120);
  if (v70 != v290)
    goto LABEL_99;
LABEL_91:
  if (v70)
  {
    v74 = v288;
    v288 = 0uLL;
    v75 = *(std::__shared_weak_count **)(a2 + 80);
    *(_OWORD *)(a2 + 72) = v74;
    if (v75)
    {
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    *(_OWORD *)(a2 + 88) = *(_OWORD *)v289;
    *(_OWORD *)(a2 + 98) = *(_OWORD *)&v289[10];
  }
LABEL_107:
  v81 = &v297;
  v82 = *(unsigned __int8 *)(a2 + 208);
  if (v82 != v296)
  {
    *(_QWORD *)(a2 + 128) = &off_24EC26FA8;
    if (!v82)
    {
      *(_OWORD *)(a2 + 136) = v291;
      v291 = 0uLL;
      *(_OWORD *)(a2 + 152) = v292;
      *(_OWORD *)(a2 + 168) = v293;
      *(_OWORD *)(a2 + 184) = v294;
      *(_WORD *)(a2 + 200) = v295;
      *(_BYTE *)(a2 + 208) = 1;
      v95 = v297;
      v297 = 0uLL;
      v88 = *(std::__shared_weak_count **)(a2 + 224);
      *(_OWORD *)(a2 + 216) = v95;
      if (!v88)
        goto LABEL_129;
      goto LABEL_124;
    }
    v89 = *(std::__shared_weak_count **)(a2 + 144);
    if (v89)
    {
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    *(_BYTE *)(a2 + 208) = 0;
LABEL_123:
    v92 = v297;
    v297 = 0uLL;
    v88 = *(std::__shared_weak_count **)(a2 + 224);
    *(_OWORD *)(a2 + 216) = v92;
    if (!v88)
      goto LABEL_129;
    goto LABEL_124;
  }
  if (!*(_BYTE *)(a2 + 208))
    goto LABEL_123;
  v83 = v291;
  v291 = 0uLL;
  v84 = *(std::__shared_weak_count **)(a2 + 144);
  *(_OWORD *)(a2 + 136) = v83;
  if (v84)
  {
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  *(_OWORD *)(a2 + 152) = v292;
  *(_OWORD *)(a2 + 168) = v293;
  *(_OWORD *)(a2 + 184) = v294;
  *(_WORD *)(a2 + 200) = v295;
  v87 = v297;
  v297 = 0uLL;
  v88 = *(std::__shared_weak_count **)(a2 + 224);
  *(_OWORD *)(a2 + 216) = v87;
  if (v88)
  {
LABEL_124:
    v93 = (unint64_t *)&v88->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
LABEL_129:
  v96 = (std::__shared_weak_count *)*((_QWORD *)&v297 + 1);
  if (*((_QWORD *)&v297 + 1))
  {
    v97 = (unint64_t *)(*((_QWORD *)&v297 + 1) + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if (v296)
  {
    *((_QWORD *)&v290 + 1) = &off_24EC26FA8;
    v99 = (std::__shared_weak_count *)*((_QWORD *)&v291 + 1);
    if (*((_QWORD *)&v291 + 1))
    {
      v100 = (unint64_t *)(*((_QWORD *)&v291 + 1) + 8);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
  }
  if ((_BYTE)v290)
  {
    *((_QWORD *)&v287 + 1) = &off_24EC21328;
    v102 = (std::__shared_weak_count *)*((_QWORD *)&v288 + 1);
    if (*((_QWORD *)&v288 + 1))
    {
      v103 = (unint64_t *)(*((_QWORD *)&v288 + 1) + 8);
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
  }
  if ((_BYTE)v287)
  {
    *(_QWORD *)v285 = &off_24EC21328;
    v105 = *(std::__shared_weak_count **)&v285[16];
    if (*(_QWORD *)&v285[16])
    {
      v106 = (unint64_t *)(*(_QWORD *)&v285[16] + 8);
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
  }
  v298[0] = 0;
  v300[0] = 0;
  v300[8] = 0;
  v300[64] = 0;
  sub_223482AC8((uint64_t)v298, a1 + 504);
  sub_2231BEC8C((uint64_t)&v300[8], a1 + 568);
  v108 = *(unsigned __int8 *)(a2 + 288);
  if (v108 != v300[0])
  {
    *(_QWORD *)(a2 + 232) = &off_24EC270A0;
    if (!v108)
    {
      v122 = *(_OWORD *)&v298[8];
      *(_QWORD *)&v298[8] = 0;
      *(_QWORD *)&v298[16] = 0;
      v123 = *(_OWORD *)v299;
      *(_OWORD *)(a2 + 240) = v122;
      *(_OWORD *)(a2 + 256) = v123;
      *(_OWORD *)(a2 + 266) = *(_OWORD *)&v299[10];
      *(_BYTE *)(a2 + 288) = 1;
      v113 = *(unsigned __int8 *)(a2 + 352);
      v114 = v300[64];
      if (v113 == v300[64])
        goto LABEL_169;
LABEL_177:
      *(_QWORD *)(a2 + 296) = &off_24EC21328;
      if (v113)
      {
        v124 = *(std::__shared_weak_count **)(a2 + 312);
        if (v124)
        {
          v125 = (unint64_t *)&v124->__shared_owners_;
          do
            v126 = __ldaxr(v125);
          while (__stlxr(v126 - 1, v125));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }
        *(_BYTE *)(a2 + 352) = 0;
      }
      else
      {
        v127 = *(_OWORD *)&v300[16];
        *(_QWORD *)&v300[16] = 0;
        *(_QWORD *)&v300[24] = 0;
        v128 = *(_OWORD *)&v300[32];
        *(_OWORD *)(a2 + 304) = v127;
        *(_OWORD *)(a2 + 320) = v128;
        *(_OWORD *)(a2 + 330) = *(_OWORD *)&v300[42];
        *(_BYTE *)(a2 + 352) = 1;
      }
LABEL_185:
      v114 = v300[64];
      goto LABEL_186;
    }
    v115 = *(std::__shared_weak_count **)(a2 + 248);
    if (v115)
    {
      v116 = (unint64_t *)&v115->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    *(_BYTE *)(a2 + 288) = 0;
LABEL_168:
    v113 = *(unsigned __int8 *)(a2 + 352);
    v114 = v300[64];
    if (v113 == v300[64])
      goto LABEL_169;
    goto LABEL_177;
  }
  if (!*(_BYTE *)(a2 + 288))
    goto LABEL_168;
  v109 = *(_OWORD *)&v298[8];
  *(_QWORD *)&v298[8] = 0;
  *(_QWORD *)&v298[16] = 0;
  v110 = *(std::__shared_weak_count **)(a2 + 248);
  *(_OWORD *)(a2 + 240) = v109;
  if (v110)
  {
    v111 = (unint64_t *)&v110->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  *(_OWORD *)(a2 + 256) = *(_OWORD *)v299;
  *(_OWORD *)(a2 + 266) = *(_OWORD *)&v299[10];
  v113 = *(unsigned __int8 *)(a2 + 352);
  v114 = v300[64];
  if (v113 != v300[64])
    goto LABEL_177;
LABEL_169:
  if (v113)
  {
    v118 = *(_OWORD *)&v300[16];
    *(_QWORD *)&v300[16] = 0;
    *(_QWORD *)&v300[24] = 0;
    v119 = *(std::__shared_weak_count **)(a2 + 312);
    *(_OWORD *)(a2 + 304) = v118;
    if (v119)
    {
      v120 = (unint64_t *)&v119->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    *(_OWORD *)(a2 + 320) = *(_OWORD *)&v300[32];
    *(_OWORD *)(a2 + 330) = *(_OWORD *)&v300[42];
    goto LABEL_185;
  }
LABEL_186:
  if (v114)
  {
    *(_QWORD *)&v300[8] = &off_24EC21328;
    v129 = *(std::__shared_weak_count **)&v300[24];
    if (*(_QWORD *)&v300[24])
    {
      v130 = (unint64_t *)(*(_QWORD *)&v300[24] + 8);
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
  }
  if (v300[0])
  {
    *(_QWORD *)v298 = &off_24EC270A0;
    v132 = *(std::__shared_weak_count **)&v298[16];
    if (*(_QWORD *)&v298[16])
    {
      v133 = (unint64_t *)(*(_QWORD *)&v298[16] + 8);
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
  }
  v298[0] = 0;
  v300[24] = 0;
  v300[32] = 0;
  v300[36] = 0;
  v300[40] = 0;
  v300[44] = 0;
  v300[48] = 0;
  v300[72] = 0;
  v300[80] = 0;
  v300[84] = 0;
  v300[88] = 0;
  v300[92] = 0;
  *(_QWORD *)&v285[8] = 0;
  *(_QWORD *)&v285[16] = 0;
  *(_QWORD *)v285 = &v285[8];
  sub_224530B6C(v285, &v316);
  *(_OWORD *)&v300[96] = v316;
  sub_22323DF84((uint64_t)v285, *(char **)&v285[8]);
  v301[0] = 0;
  BYTE4(v302) = 0;
  sub_223482418((uint64_t)v298, a1 + 632);
  *(_DWORD *)&v300[32] = *(_DWORD *)(a1 + 776);
  v300[36] = *(_BYTE *)(a1 + 780);
  *(_DWORD *)&v300[40] = *(_DWORD *)(a1 + 720);
  v300[44] = *(_BYTE *)(a1 + 724);
  sub_223482660((uint64_t)&v300[48], a1 + 728);
  *(_DWORD *)&v300[80] = *(_DWORD *)(a1 + 760);
  v300[84] = *(_BYTE *)(a1 + 764);
  *(_DWORD *)&v300[88] = *(_DWORD *)(a1 + 768);
  v300[92] = *(_BYTE *)(a1 + 772);
  sub_22319ED0C(v285, a1 + 784);
  v150 = *(_OWORD *)v285;
  *(_OWORD *)v285 = 0uLL;
  v151 = *(std::__shared_weak_count **)&v300[104];
  *(_OWORD *)&v300[96] = v150;
  if (v151)
  {
    v152 = (unint64_t *)&v151->__shared_owners_;
    do
    {
      v141 = __ldaxr(v152);
      v142 = v141 - 1;
      v143 = __stlxr(v141 - 1, v152);
    }
    while (v143);
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v153 = *(std::__shared_weak_count **)&v285[8];
  if (!*(_QWORD *)&v285[8])
    goto LABEL_207;
  v154 = (unint64_t *)(*(_QWORD *)&v285[8] + 8);
  do
  {
    v141 = __ldaxr(v154);
    v142 = v141 - 1;
    v143 = __stlxr(v141 - 1, v154);
  }
  while (v143);
  if (!v141)
  {
    ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
    std::__shared_weak_count::__release_weak(v153);
    v155 = a1 + 800;
    v156 = *(_BYTE *)(a1 + 836);
    if (v156)
    {
LABEL_208:
      v284 = HIBYTE(*(_DWORD *)(v155 + 32));
      v281 = BYTE1(*(_DWORD *)(v155 + 32));
      v282 = BYTE2(*(_DWORD *)(v155 + 32));
      v279 = HIBYTE(*(_OWORD *)(v155 + 16));
      v280 = *(_DWORD *)(v155 + 32);
      v277 = (unsigned __int16)WORD6(*(_OWORD *)(v155 + 16)) >> 8;
      v278 = BYTE14(*(_OWORD *)(v155 + 16));
      v275 = BYTE3(*(_QWORD *)(v155 + 24));
      v276 = BYTE12(*(_OWORD *)(v155 + 16));
      v273 = BYTE1(*(_QWORD *)(v155 + 24));
      v274 = BYTE2(*(_QWORD *)(v155 + 24));
      v272 = *(_QWORD *)(v155 + 24);
      v135 = HIBYTE(*(_QWORD *)(v155 + 16));
      v136 = BYTE6(*(_QWORD *)(v155 + 16));
      v137 = (unsigned __int16)WORD2(*(_QWORD *)(v155 + 16)) >> 8;
      v138 = BYTE4(*(_QWORD *)(v155 + 16));
      v139 = BYTE3(*(_OWORD *)(v155 + 16));
      v140 = BYTE2(*(_OWORD *)(v155 + 16));
      LOBYTE(v153) = BYTE1(*(_OWORD *)(v155 + 16));
      v149 = *(_OWORD *)(v155 + 16);
      LOBYTE(v8) = HIBYTE(*(_OWORD *)v155);
      LOBYTE(v2) = BYTE14(*(_OWORD *)v155);
      v3 = (unsigned __int16)WORD6(*(_OWORD *)v155) >> 8;
      v4 = BYTE12(*(_OWORD *)v155);
      v5 = BYTE3(*(_QWORD *)(v155 + 8));
      LOBYTE(v81) = BYTE2(*(_QWORD *)(v155 + 8));
      v156 = BYTE1(*(_QWORD *)(v155 + 8));
      LOBYTE(v141) = *(_QWORD *)(v155 + 8);
      v142 = HIBYTE(*(_QWORD *)v155);
      LOBYTE(v143) = BYTE6(*(_QWORD *)v155);
      v144 = (unsigned __int16)WORD2(*(_QWORD *)v155) >> 8;
      v145 = BYTE4(*(_QWORD *)v155);
      v146 = BYTE3(*(_OWORD *)v155);
      v147 = BYTE2(*(_OWORD *)v155);
      v148 = BYTE1(*(_OWORD *)v155);
      v157 = *(_OWORD *)v155;
      v158 = BYTE4(v302);
      if (BYTE4(v302) == 1)
        goto LABEL_209;
LABEL_214:
      if (!v158)
      {
        LOBYTE(v164) = v157;
        BYTE1(v164) = v148;
        BYTE2(v164) = v147;
        LOBYTE(v165) = v149;
        BYTE3(v164) = v146;
        BYTE4(v164) = v145;
        BYTE5(v164) = v144;
        BYTE6(v164) = v143;
        BYTE7(v164) = v142;
        BYTE8(v164) = v141;
        BYTE9(v164) = v156;
        BYTE10(v164) = (_BYTE)v81;
        BYTE11(v164) = v5;
        BYTE12(v164) = v4;
        BYTE13(v164) = v3;
        BYTE14(v164) = (_BYTE)v2;
        HIBYTE(v164) = (_BYTE)v8;
        BYTE1(v165) = (_BYTE)v153;
        BYTE2(v165) = v140;
        BYTE3(v165) = v139;
        BYTE4(v165) = v138;
        BYTE5(v165) = v137;
        BYTE6(v165) = v136;
        BYTE7(v165) = v135;
        BYTE8(v165) = v272;
        BYTE9(v165) = v273;
        BYTE10(v165) = v274;
        BYTE11(v165) = v275;
        BYTE12(v165) = v276;
        BYTE13(v165) = v277;
        BYTE14(v165) = v278;
        HIBYTE(v165) = v279;
        *(_OWORD *)v301 = v164;
        LOBYTE(v164) = v280;
        BYTE1(v164) = v281;
        BYTE2(v164) = v282;
        *(_OWORD *)&v301[16] = v165;
        BYTE3(v164) = v284;
        BYTE4(v302) = 1;
        LODWORD(v302) = v164;
        sub_22347FED4(a2 + 360, (uint64_t)v298);
        v161 = *(std::__shared_weak_count **)&v300[104];
        if (!*(_QWORD *)&v300[104])
          goto LABEL_222;
        goto LABEL_217;
      }
      BYTE4(v302) = 0;
LABEL_216:
      sub_22347FED4(a2 + 360, (uint64_t)v298);
      v161 = *(std::__shared_weak_count **)&v300[104];
      if (!*(_QWORD *)&v300[104])
        goto LABEL_222;
      goto LABEL_217;
    }
  }
  else
  {
LABEL_207:
    v155 = a1 + 800;
    v156 = *(_BYTE *)(a1 + 836);
    if (v156)
      goto LABEL_208;
  }
  v157 = 0;
  v158 = BYTE4(v302);
  if (BYTE4(v302))
    goto LABEL_214;
LABEL_209:
  if (!v158)
    goto LABEL_216;
  LOBYTE(v159) = v157;
  BYTE1(v159) = v148;
  BYTE2(v159) = v147;
  LOBYTE(v160) = v149;
  BYTE3(v159) = v146;
  BYTE4(v159) = v145;
  BYTE5(v159) = v144;
  BYTE6(v159) = v143;
  BYTE7(v159) = v142;
  BYTE8(v159) = v141;
  BYTE9(v159) = v156;
  BYTE10(v159) = (_BYTE)v81;
  BYTE11(v159) = v5;
  BYTE12(v159) = v4;
  BYTE13(v159) = v3;
  BYTE14(v159) = (_BYTE)v2;
  HIBYTE(v159) = (_BYTE)v8;
  BYTE1(v160) = (_BYTE)v153;
  BYTE2(v160) = v140;
  BYTE3(v160) = v139;
  BYTE4(v160) = v138;
  BYTE5(v160) = v137;
  BYTE6(v160) = v136;
  BYTE7(v160) = v135;
  BYTE8(v160) = v272;
  BYTE9(v160) = v273;
  BYTE10(v160) = v274;
  BYTE11(v160) = v275;
  BYTE12(v160) = v276;
  BYTE13(v160) = v277;
  BYTE14(v160) = v278;
  *(_OWORD *)v301 = v159;
  HIBYTE(v160) = v279;
  LOBYTE(v159) = v280;
  BYTE1(v159) = v281;
  *(_OWORD *)&v301[16] = v160;
  BYTE2(v159) = v282;
  BYTE3(v159) = v284;
  LODWORD(v302) = v159;
  sub_22347FED4(a2 + 360, (uint64_t)v298);
  v161 = *(std::__shared_weak_count **)&v300[104];
  if (!*(_QWORD *)&v300[104])
    goto LABEL_222;
LABEL_217:
  v162 = (unint64_t *)&v161->__shared_owners_;
  do
    v163 = __ldaxr(v162);
  while (__stlxr(v163 - 1, v162));
  if (!v163)
  {
    ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
    std::__shared_weak_count::__release_weak(v161);
  }
LABEL_222:
  if (v300[72] && *(_QWORD *)&v300[48])
  {
    *(_QWORD *)&v300[56] = *(_QWORD *)&v300[48];
    operator delete(*(void **)&v300[48]);
  }
  if (v300[24])
  {
    *(_QWORD *)v298 = &off_24EC26EB0;
    v166 = *(std::__shared_weak_count **)&v298[16];
    if (*(_QWORD *)&v298[16])
    {
      v167 = (unint64_t *)(*(_QWORD *)&v298[16] + 8);
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
  }
  sub_223482AC8(a2 + 976, a1 + 840);
  v298[0] = 0;
  v300[24] = 0;
  v300[32] = 0;
  v301[0] = 0;
  v301[8] = 0;
  *(_QWORD *)&v301[12] = 1065353216;
  *(_DWORD *)&v301[20] = 0;
  sub_223482CFC((uint64_t)v298, a1 + 904);
  sub_223482418((uint64_t)&v300[32], a1 + 992);
  v169 = (_OWORD *)(a2 + 1048);
  v301[8] = *(_BYTE *)(a1 + 1080);
  *(_DWORD *)&v301[20] = *(_DWORD *)(a1 + 1092);
  *(_QWORD *)&v301[12] = *(_QWORD *)(a1 + 1084);
  v170 = *(unsigned __int8 *)(a2 + 1120);
  if (v170 != v300[24])
  {
    *(_QWORD *)(a2 + 1040) = &off_24EC27290;
    if (!v170)
    {
      *v169 = *(_OWORD *)&v298[8];
      *(_QWORD *)&v298[8] = 0;
      *(_QWORD *)&v298[16] = 0;
      *(_WORD *)(a2 + 1112) = *(_WORD *)&v300[16];
      *(_OWORD *)(a2 + 1064) = *(_OWORD *)v299;
      *(_OWORD *)(a2 + 1080) = *(_OWORD *)&v299[16];
      *(_OWORD *)(a2 + 1096) = *(_OWORD *)v300;
      *(_BYTE *)(a2 + 1120) = 1;
      v175 = *(unsigned __int8 *)(a2 + 1208);
      v176 = v301[0];
      if (v175 == v301[0])
        goto LABEL_248;
LABEL_256:
      *(_QWORD *)(a2 + 1128) = &off_24EC26EB0;
      if (v175)
      {
        v185 = *(std::__shared_weak_count **)(a2 + 1144);
        if (v185)
        {
          v186 = (unint64_t *)&v185->__shared_owners_;
          do
            v187 = __ldaxr(v186);
          while (__stlxr(v187 - 1, v186));
          if (!v187)
          {
            ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
            std::__shared_weak_count::__release_weak(v185);
          }
        }
        *(_BYTE *)(a2 + 1208) = 0;
      }
      else
      {
        v188 = *(_OWORD *)&v300[56];
        *(_OWORD *)(a2 + 1136) = *(_OWORD *)&v300[40];
        *(_QWORD *)&v300[40] = 0;
        *(_QWORD *)&v300[48] = 0;
        *(_OWORD *)(a2 + 1152) = v188;
        v189 = *(_OWORD *)&v300[88];
        *(_OWORD *)(a2 + 1168) = *(_OWORD *)&v300[72];
        *(_OWORD *)(a2 + 1184) = v189;
        *(_WORD *)(a2 + 1200) = *(_WORD *)&v300[104];
        *(_BYTE *)(a2 + 1208) = 1;
      }
LABEL_264:
      v176 = v301[0];
      goto LABEL_265;
    }
    v177 = *(std::__shared_weak_count **)(a2 + 1056);
    if (v177)
    {
      v178 = (unint64_t *)&v177->__shared_owners_;
      do
        v179 = __ldaxr(v178);
      while (__stlxr(v179 - 1, v178));
      if (!v179)
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
    }
    *(_BYTE *)(a2 + 1120) = 0;
LABEL_247:
    v175 = *(unsigned __int8 *)(a2 + 1208);
    v176 = v301[0];
    if (v175 == v301[0])
      goto LABEL_248;
    goto LABEL_256;
  }
  if (!*(_BYTE *)(a2 + 1120))
    goto LABEL_247;
  v171 = *(_OWORD *)&v298[8];
  *(_QWORD *)&v298[8] = 0;
  *(_QWORD *)&v298[16] = 0;
  v172 = *(std::__shared_weak_count **)(a2 + 1056);
  *v169 = v171;
  if (v172)
  {
    v173 = (unint64_t *)&v172->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  *(_WORD *)(a2 + 1112) = *(_WORD *)&v300[16];
  *(_OWORD *)(a2 + 1064) = *(_OWORD *)v299;
  *(_OWORD *)(a2 + 1080) = *(_OWORD *)&v299[16];
  *(_OWORD *)(a2 + 1096) = *(_OWORD *)v300;
  v175 = *(unsigned __int8 *)(a2 + 1208);
  v176 = v301[0];
  if (v175 != v301[0])
    goto LABEL_256;
LABEL_248:
  if (v175)
  {
    v180 = *(_OWORD *)&v300[40];
    *(_QWORD *)&v300[40] = 0;
    *(_QWORD *)&v300[48] = 0;
    v181 = *(std::__shared_weak_count **)(a2 + 1144);
    *(_OWORD *)(a2 + 1136) = v180;
    if (v181)
    {
      v182 = (unint64_t *)&v181->__shared_owners_;
      do
        v183 = __ldaxr(v182);
      while (__stlxr(v183 - 1, v182));
      if (!v183)
      {
        ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
        std::__shared_weak_count::__release_weak(v181);
      }
    }
    v184 = *(_OWORD *)&v300[72];
    *(_OWORD *)(a2 + 1152) = *(_OWORD *)&v300[56];
    *(_OWORD *)(a2 + 1168) = v184;
    *(_OWORD *)(a2 + 1184) = *(_OWORD *)&v300[88];
    *(_WORD *)(a2 + 1200) = *(_WORD *)&v300[104];
    goto LABEL_264;
  }
LABEL_265:
  *(_OWORD *)(a2 + 1216) = *(_OWORD *)&v301[8];
  if (v176)
  {
    *(_QWORD *)&v300[32] = &off_24EC26EB0;
    v190 = *(std::__shared_weak_count **)&v300[48];
    if (*(_QWORD *)&v300[48])
    {
      v191 = (unint64_t *)(*(_QWORD *)&v300[48] + 8);
      do
        v192 = __ldaxr(v191);
      while (__stlxr(v192 - 1, v191));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
      }
    }
  }
  if (v300[24])
  {
    *(_QWORD *)v298 = &off_24EC27290;
    v193 = *(std::__shared_weak_count **)&v298[16];
    if (*(_QWORD *)&v298[16])
    {
      v194 = (unint64_t *)(*(_QWORD *)&v298[16] + 8);
      do
        v195 = __ldaxr(v194);
      while (__stlxr(v195 - 1, v194));
      if (!v195)
      {
        ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
        std::__shared_weak_count::__release_weak(v193);
      }
    }
  }
  *(_QWORD *)(a2 + 1232) = *(_QWORD *)(a1 + 1136);
  v196 = *(_QWORD *)(a1 + 1160);
  v197 = *(_QWORD *)(a1 + 1168);
  v198 = *(float32x2_t *)(a1 + 1144);
  v199 = *(float32x2_t *)(a1 + 1152);
  __asm { FMOV            V2.2S, #1.0 }
  v205 = vdiv_f32(_D2, v198);
  v206 = vzip1_s32((int32x2_t)v198, (int32x2_t)v199);
  v207.i64[0] = v206.u32[0];
  v207.i64[1] = v206.u32[1];
  *(int8x16_t *)(v197 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v198, (int32x2_t)v199), 0x20uLL), v207);
  *(float32x2_t *)(v197 + 32) = v205;
  *(float32x2_t *)(v197 + 40) = vmul_f32(v205, vneg_f32(v199));
  *(_DWORD *)(v197 + 48) = v198.i32[0];
  *(_QWORD *)(v197 + 56) = 0;
  *(_DWORD *)(v197 + 52) = 0;
  *(_DWORD *)(v197 + 64) = v198.i32[1];
  *(_DWORD *)(v197 + 68) = 0;
  *(float32x2_t *)(v197 + 72) = v199;
  *(_DWORD *)(v197 + 80) = 1065353216;
  *(_QWORD *)(v197 + 88) = v196;
  v208 = *(_QWORD *)(a1 + 1168);
  *(_QWORD *)(a2 + 1256) = *(_QWORD *)(v208 + 16);
  *(_QWORD *)(a2 + 1264) = *(_QWORD *)(v208 + 24);
  *(_OWORD *)(a2 + 1272) = *(_OWORD *)(v208 + 32);
  v210 = *(_OWORD *)(v208 + 48);
  v209 = *(_OWORD *)(v208 + 64);
  *(_DWORD *)(a2 + 1320) = *(_DWORD *)(v208 + 80);
  *(_OWORD *)(a2 + 1288) = v210;
  *(_OWORD *)(a2 + 1304) = v209;
  *(_QWORD *)(a2 + 1328) = *(_QWORD *)(v208 + 88);
  v212 = *(float64x2_t *)(v155 + 480);
  v211 = *(float64x2_t *)(v155 + 496);
  v214 = *(float64x2_t *)(v155 + 448);
  v213 = *(float64x2_t *)(v155 + 464);
  v215 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v155 + 416)), *(float64x2_t *)(v155 + 432));
  *(float32x4_t *)(a2 + 1336) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v155 + 384)), *(float64x2_t *)(v155 + 400));
  *(float32x4_t *)(a2 + 1352) = v215;
  *(float32x4_t *)(a2 + 1368) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v214), v213);
  *(float32x4_t *)(a2 + 1384) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v212), v211);
  if (*(_BYTE *)(a1 + 1512))
  {
    v285[0] = *(_BYTE *)(a1 + 1312);
    *(_WORD *)&v285[1] = *(_WORD *)(a1 + 1313);
    *(_DWORD *)&v285[4] = *(_DWORD *)(a1 + 1316);
    *(_QWORD *)&v285[8] = *(_QWORD *)(a1 + 1320);
    *(_DWORD *)&v285[16] = *(_DWORD *)(a1 + 1328);
    sub_223C7574C((char ***)(a1 + 1336), (uint64_t)v286);
    v216 = *(_BYTE *)(a1 + 1504);
    *(_OWORD *)v298 = *(_OWORD *)v285;
    *(_DWORD *)&v298[16] = *(_DWORD *)&v285[16];
    *(_OWORD *)v299 = *(_OWORD *)v286;
    *(_OWORD *)&v299[16] = *(_OWORD *)&v286[16];
    *(_OWORD *)v300 = v287;
    *(_OWORD *)&v300[16] = v288;
    *(_OWORD *)&v300[32] = *(_OWORD *)v289;
    *(_OWORD *)&v300[48] = *(_OWORD *)&v289[16];
    *(_OWORD *)&v300[64] = v290;
    *(_OWORD *)&v300[80] = v291;
    *(_OWORD *)&v300[96] = v292;
    *(_OWORD *)v301 = v293;
    *(_QWORD *)&v301[16] = v294;
    v301[24] = v216;
    LOBYTE(v302) = 1;
  }
  else
  {
    v298[0] = 0;
    LOBYTE(v302) = 0;
  }
  v217 = sub_223480770(a2 + 1408, (__int128 *)v298);
  if ((_BYTE)v302)
  {
    if (*(_QWORD *)v301)
    {
      *(_QWORD *)&v301[8] = *(_QWORD *)v301;
      operator delete(*(void **)v301);
    }
    if (*(_QWORD *)&v300[88])
    {
      *(_QWORD *)&v300[96] = *(_QWORD *)&v300[88];
      operator delete(*(void **)&v300[88]);
    }
    if (*(_QWORD *)&v300[64])
    {
      *(_QWORD *)&v300[72] = *(_QWORD *)&v300[64];
      operator delete(*(void **)&v300[64]);
    }
    if (*(_QWORD *)&v300[40])
    {
      *(_QWORD *)&v300[48] = *(_QWORD *)&v300[40];
      operator delete(*(void **)&v300[40]);
    }
    if (*(_QWORD *)&v300[16])
    {
      *(_QWORD *)&v300[24] = *(_QWORD *)&v300[16];
      operator delete(*(void **)&v300[16]);
    }
    if (*(_QWORD *)&v299[24])
    {
      *(_QWORD *)v300 = *(_QWORD *)&v299[24];
      operator delete(*(void **)&v299[24]);
    }
    if (*(_QWORD *)v299)
    {
      *(_QWORD *)&v299[8] = *(_QWORD *)v299;
      operator delete(*(void **)v299);
    }
  }
  if (*(_BYTE *)(a1 + 1648))
  {
    v222 = *(__n128 *)(a1 + 1552);
    v221 = *(__n128 *)(a1 + 1568);
    v224 = *(_OWORD *)(a1 + 1520);
    v223 = *(__n128 *)(a1 + 1536);
    v218 = *(__n128 *)(a1 + 1616);
    v217 = *(__n128 *)(a1 + 1632);
    v220 = *(__n128 *)(a1 + 1584);
    v219 = *(__n128 *)(a1 + 1600);
    v225 = a2 + 1616;
    v226 = *(unsigned __int8 *)(a2 + 1744);
    if (v226 == 1)
      goto LABEL_297;
LABEL_300:
    if (v226)
    {
      *(_BYTE *)(a2 + 1744) = 0;
    }
    else
    {
      *(_OWORD *)v225 = v224;
      *(__n128 *)(v225 + 16) = v223;
      *(__n128 *)(v225 + 32) = v222;
      *(__n128 *)(v225 + 48) = v221;
      *(__n128 *)(v225 + 64) = v220;
      *(__n128 *)(v225 + 80) = v219;
      *(__n128 *)(v225 + 96) = v218;
      *(__n128 *)(v225 + 112) = v217;
      *(_BYTE *)(a2 + 1744) = 1;
    }
    goto LABEL_303;
  }
  v224 = 0uLL;
  v225 = a2 + 1616;
  v226 = *(unsigned __int8 *)(a2 + 1744);
  if (v226 != *(unsigned __int8 *)(a1 + 1648))
    goto LABEL_300;
LABEL_297:
  if (v226)
  {
    *(_OWORD *)v225 = v224;
    *(__n128 *)(v225 + 16) = v223;
    *(__n128 *)(v225 + 32) = v222;
    *(__n128 *)(v225 + 48) = v221;
    *(__n128 *)(v225 + 64) = v220;
    *(__n128 *)(v225 + 80) = v219;
    *(__n128 *)(v225 + 96) = v218;
    *(__n128 *)(v225 + 112) = v217;
  }
LABEL_303:
  v227 = *(_QWORD *)(a1 + 1664);
  v228 = *(_QWORD *)(a1 + 1656);
  memset(v285, 0, sizeof(v285));
  v229 = 0uLL;
  if (v227 == v228)
  {
    v244 = 0;
    v245 = a2 + 1776;
    v246 = *(char **)(a2 + 1776);
    if (!v246)
      goto LABEL_317;
  }
  else
  {
    if (0x86BCA1AF286BCA1BLL * ((v227 - v228) >> 4) >= 0x124924924924925)
      sub_223257BE4();
    *(_QWORD *)v285 = operator new(0xE50D79435E50D7A0 * ((v227 - v228) >> 4));
    *(_QWORD *)&v285[8] = *(_QWORD *)v285;
    *(_QWORD *)&v285[16] = *(_QWORD *)v285 - 0x1AF286BCA1AF2860 * ((v227 - v228) >> 4);
    do
    {
      sub_223C8E06C(v228, (uint64_t)v298);
      v230 = *(_QWORD *)&v285[8];
      if (*(_QWORD *)&v285[8] >= *(_QWORD *)&v285[16])
      {
        v240 = sub_223C79330((void **)v285, (uint64_t)v298);
        v241 = *(std::__shared_weak_count **)&v300[24];
        *(_QWORD *)&v285[8] = v240;
        if (*(_QWORD *)&v300[24])
        {
          v242 = (unint64_t *)(*(_QWORD *)&v300[24] + 8);
          do
            v243 = __ldaxr(v242);
          while (__stlxr(v243 - 1, v242));
          if (!v243)
          {
            ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
            std::__shared_weak_count::__release_weak(v241);
          }
        }
      }
      else
      {
        **(_QWORD **)&v285[8] = *(_QWORD *)v298;
        v231 = *(_OWORD *)&v298[8];
        v232 = *(_OWORD *)v299;
        v233 = *(_OWORD *)&v299[16];
        *(_OWORD *)(v230 + 56) = *(_OWORD *)v300;
        *(_OWORD *)(v230 + 40) = v233;
        *(_OWORD *)(v230 + 24) = v232;
        *(_OWORD *)(v230 + 8) = v231;
        *(_OWORD *)(v230 + 72) = *(_OWORD *)&v300[16];
        *(_BYTE *)(v230 + 88) = 0;
        *(_BYTE *)(v230 + 216) = 0;
        if ((_BYTE)v303)
        {
          v234 = *(_OWORD *)&v300[32];
          v235 = *(_OWORD *)&v300[48];
          v236 = *(_OWORD *)&v300[80];
          *(_OWORD *)(v230 + 120) = *(_OWORD *)&v300[64];
          *(_OWORD *)(v230 + 136) = v236;
          *(_OWORD *)(v230 + 88) = v234;
          *(_OWORD *)(v230 + 104) = v235;
          v237 = *(_OWORD *)&v300[96];
          v238 = *(_OWORD *)v301;
          v239 = *(_OWORD *)&v301[16];
          *(_OWORD *)(v230 + 200) = v302;
          *(_OWORD *)(v230 + 184) = v239;
          *(_OWORD *)(v230 + 168) = v238;
          *(_OWORD *)(v230 + 152) = v237;
          *(_BYTE *)(v230 + 216) = 1;
        }
        *(_QWORD *)&v285[8] = v230 + 224;
      }
      v228 += 304;
    }
    while (v228 != v227);
    v229 = *(_OWORD *)v285;
    v244 = *(_QWORD *)&v285[16];
    v245 = a2 + 1776;
    v246 = *(char **)(a2 + 1776);
    if (!v246)
    {
LABEL_317:
      *(_OWORD *)(a2 + 1776) = v229;
      *(_QWORD *)(a2 + 1792) = v244;
      if (!*(_BYTE *)(a1 + 1128))
        goto LABEL_345;
      goto LABEL_330;
    }
  }
  v283 = v229;
  v247 = *(char **)(a2 + 1784);
  v248 = v246;
  if (v247 != v246)
  {
    do
    {
      v249 = (std::__shared_weak_count *)*((_QWORD *)v247 - 18);
      if (v249)
      {
        v250 = (unint64_t *)&v249->__shared_owners_;
        do
          v251 = __ldaxr(v250);
        while (__stlxr(v251 - 1, v250));
        if (!v251)
        {
          ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
          std::__shared_weak_count::__release_weak(v249);
        }
      }
      v247 -= 224;
    }
    while (v247 != v246);
    v248 = *(char **)v245;
  }
  *(_QWORD *)(a2 + 1784) = v246;
  operator delete(v248);
  *(_QWORD *)v245 = 0;
  *(_QWORD *)(v245 + 8) = 0;
  *(_QWORD *)(v245 + 16) = 0;
  *(_OWORD *)(a2 + 1776) = v283;
  *(_QWORD *)(a2 + 1792) = v244;
  if (*(_BYTE *)(a1 + 1128))
  {
LABEL_330:
    sub_223C8D958((uint64_t **)(a1 + 1104), (uint64_t)v298);
    v252 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v252 + 24) = *(_OWORD *)v298;
    v253 = *(_QWORD *)&v298[16];
    v254 = *(_OWORD *)(a2 + 1352);
    *(_OWORD *)&v298[8] = *(_OWORD *)(a2 + 1336);
    *(_OWORD *)v299 = v254;
    v255 = *(_OWORD *)(a2 + 1384);
    *(_OWORD *)&v299[16] = *(_OWORD *)(a2 + 1368);
    *((_QWORD *)v252 + 1) = 0;
    v256 = (unint64_t *)(v252 + 8);
    *((_QWORD *)v252 + 2) = 0;
    *(_QWORD *)v252 = &off_24EC29190;
    *((_QWORD *)v252 + 5) = v253;
    *(_QWORD *)v285 = v252 + 24;
    *(_QWORD *)&v285[8] = v252;
    v285[16] = 1;
    v257 = *(_QWORD *)(a2 + 1232);
    *(_OWORD *)v300 = v255;
    *(_QWORD *)v298 = v257;
    *(_QWORD *)&v300[16] = v252 + 24;
    *(_QWORD *)&v300[24] = v252;
    do
      v258 = __ldxr(v256);
    while (__stxr(v258 + 1, v256));
    v300[32] = 0;
    LOBYTE(v303) = 0;
    v259 = *(_QWORD *)(a2 + 1784);
    if (v259 >= *(_QWORD *)(a2 + 1792))
    {
      v263 = sub_223C79330((void **)v245, (uint64_t)v298);
      v264 = *(std::__shared_weak_count **)&v300[24];
      *(_QWORD *)(a2 + 1784) = v263;
      if (v264)
      {
        v265 = (unint64_t *)&v264->__shared_owners_;
        do
          v266 = __ldaxr(v265);
        while (__stlxr(v266 - 1, v265));
        if (!v266)
        {
          ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
          std::__shared_weak_count::__release_weak(v264);
        }
      }
    }
    else
    {
      *(_QWORD *)v259 = v257;
      v260 = *(_OWORD *)&v298[8];
      v261 = *(_OWORD *)v299;
      v262 = *(_OWORD *)&v299[16];
      *(_OWORD *)(v259 + 56) = *(_OWORD *)v300;
      *(_OWORD *)(v259 + 40) = v262;
      *(_OWORD *)(v259 + 24) = v261;
      *(_OWORD *)(v259 + 8) = v260;
      *(_QWORD *)(v259 + 72) = v252 + 24;
      *(_QWORD *)(v259 + 80) = v252;
      *(_BYTE *)(v259 + 88) = 0;
      *(_BYTE *)(v259 + 216) = 0;
      *(_QWORD *)(a2 + 1784) = v259 + 224;
    }
    if (v285[16])
    {
      v267 = *(std::__shared_weak_count **)&v285[8];
      if (*(_QWORD *)&v285[8])
      {
        v268 = (unint64_t *)(*(_QWORD *)&v285[8] + 8);
        do
          v269 = __ldaxr(v268);
        while (__stlxr(v269 - 1, v268));
        if (!v269)
        {
          ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
          std::__shared_weak_count::__release_weak(v267);
        }
      }
    }
  }
LABEL_345:
  v270 = *(unsigned __int8 *)(a1 + 1680);
  if ((v270 - 3) <= 0xFFFFFFFD)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unexpected monitoring mode");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *(_BYTE *)(a2 + 1400) = v270;
  *(_WORD *)(a2 + 1800) = *(_WORD *)(a1 + 1681);
}

void sub_223C78DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  sub_223C79080((uint64_t)&a49);
  sub_223224234((uint64_t)&a19);
  sub_2232555B8(v49);
  _Unwind_Resume(a1);
}

void sub_223C78DF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2232555B8(v1);
  _Unwind_Resume(a1);
}

void sub_223C78EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  sub_223255B0C((uint64_t)&a49);
  sub_2232555B8(v49);
  _Unwind_Resume(a1);
}

void sub_223C78F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  sub_223255BE4((uint64_t)&a49);
  sub_2232555B8(v49);
  _Unwind_Resume(a1);
}

void sub_223C78FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19, char *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59)
{
  uint64_t v59;
  unint64_t *p_shared_owners;
  unint64_t v62;
  char *v63;
  char *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;

  if (a59)
  {
    p_shared_owners = (unint64_t *)&a59->__shared_owners_;
    do
      v62 = __ldaxr(p_shared_owners);
    while (__stlxr(v62 - 1, p_shared_owners));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))a59->__on_zero_shared)(a59);
      std::__shared_weak_count::__release_weak(a59);
    }
  }
  if (a19)
  {
    v63 = a20;
    v64 = a19;
    if (a20 != a19)
    {
      do
      {
        v65 = (std::__shared_weak_count *)*((_QWORD *)v63 - 18);
        if (v65)
        {
          v66 = (unint64_t *)&v65->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v63 -= 224;
      }
      while (v63 != a19);
      v64 = a19;
    }
    operator delete(v64);
  }
  sub_2232555B8(v59);
  _Unwind_Resume(a1);
}

uint64_t sub_223C79080(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 80);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

char ***sub_223C790E8(char ***a1, _OWORD *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v11 = *v4;
    v12 = (v6 - *v4) >> 6;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 58)
      sub_22316E078();
    v14 = v5 - (_QWORD)v11;
    if (v14 >> 5 > v13)
      v13 = v14 >> 5;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0)
      v15 = 0x3FFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 58)
        sub_223174E94();
      v16 = (char *)operator new(v15 << 6);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[64 * v12];
    v18 = a2[1];
    *(_OWORD *)v17 = *a2;
    *((_OWORD *)v17 + 1) = v18;
    v19 = a2[3];
    *((_OWORD *)v17 + 2) = a2[2];
    *((_OWORD *)v17 + 3) = v19;
    v10 = v17 + 64;
    if (v6 != v11)
    {
      do
      {
        v20 = *((_OWORD *)v6 - 4);
        v21 = *((_OWORD *)v6 - 3);
        v22 = *((_OWORD *)v6 - 1);
        *((_OWORD *)v17 - 2) = *((_OWORD *)v6 - 2);
        *((_OWORD *)v17 - 1) = v22;
        *((_OWORD *)v17 - 4) = v20;
        *((_OWORD *)v17 - 3) = v21;
        v17 -= 64;
        v6 -= 64;
      }
      while (v6 != v11);
      v6 = *v4;
    }
    *v4 = v17;
    v4[1] = v10;
    v4[2] = &v16[64 * v15];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[3];
    *((_OWORD *)v6 + 2) = a2[2];
    *((_OWORD *)v6 + 3) = v9;
    *(_OWORD *)v6 = v7;
    *((_OWORD *)v6 + 1) = v8;
    v10 = v6 + 64;
  }
  v4[1] = v10;
  return a1;
}

char ***sub_223C7920C(char ***a1, _OWORD *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v11 = *v4;
    v12 = (v6 - *v4) >> 6;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 58)
      sub_223257BE4();
    v14 = v5 - (_QWORD)v11;
    if (v14 >> 5 > v13)
      v13 = v14 >> 5;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0)
      v15 = 0x3FFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 58)
        sub_223174E94();
      v16 = (char *)operator new(v15 << 6);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[64 * v12];
    v18 = a2[1];
    *(_OWORD *)v17 = *a2;
    *((_OWORD *)v17 + 1) = v18;
    v19 = a2[3];
    *((_OWORD *)v17 + 2) = a2[2];
    *((_OWORD *)v17 + 3) = v19;
    v10 = v17 + 64;
    if (v6 != v11)
    {
      do
      {
        v20 = *((_OWORD *)v6 - 4);
        v21 = *((_OWORD *)v6 - 3);
        v22 = *((_OWORD *)v6 - 1);
        *((_OWORD *)v17 - 2) = *((_OWORD *)v6 - 2);
        *((_OWORD *)v17 - 1) = v22;
        *((_OWORD *)v17 - 4) = v20;
        *((_OWORD *)v17 - 3) = v21;
        v17 -= 64;
        v6 -= 64;
      }
      while (v6 != v11);
      v6 = *v4;
    }
    *v4 = v17;
    v4[1] = v10;
    v4[2] = &v16[64 * v15];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[3];
    *((_OWORD *)v6 + 2) = a2[2];
    *((_OWORD *)v6 + 3) = v9;
    *(_OWORD *)v6 = v7;
    *((_OWORD *)v6 + 1) = v8;
    v10 = v6 + 64;
  }
  v4[1] = v10;
  return a1;
}

char *sub_223C79330(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v3 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x124924924924924)
    sub_223257BE4();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5)) >= 0x92492492492492)
    v6 = 0x124924924924924;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x124924924924924)
      sub_223174E94();
    v7 = (char *)operator new(224 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[224 * v3];
  *(_QWORD *)v8 = *(_QWORD *)a2;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v8[88] = 0;
  v8[216] = 0;
  if (*(_BYTE *)(a2 + 216))
  {
    v9 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(v8 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(v8 + 104) = v9;
    v10 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(v8 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(v8 + 136) = v10;
    v11 = &v7[224 * v3];
    *(_OWORD *)(v11 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(v11 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(v11 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(v11 + 200) = *(_OWORD *)(a2 + 200);
    v8[216] = 1;
  }
  v12 = &v7[224 * v6];
  v13 = v8 + 224;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v8;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v8[v16];
      v18 = &v15[v16];
      *((_QWORD *)v17 - 28) = *(_QWORD *)&v15[v16 - 224];
      v19 = *(_OWORD *)&v15[v16 - 216];
      v20 = *(_OWORD *)&v15[v16 - 200];
      v21 = *(_OWORD *)&v15[v16 - 184];
      *(_OWORD *)(v17 - 168) = *(_OWORD *)&v15[v16 - 168];
      *(_OWORD *)(v17 - 184) = v21;
      *(_OWORD *)(v17 - 200) = v20;
      *(_OWORD *)(v17 - 216) = v19;
      *(_OWORD *)(v17 - 152) = *(_OWORD *)&v15[v16 - 152];
      *((_QWORD *)v18 - 19) = 0;
      *((_QWORD *)v18 - 18) = 0;
      v8[v16 - 136] = 0;
      *(v17 - 8) = 0;
      if (v15[v16 - 8])
      {
        v22 = *(_OWORD *)(v18 - 136);
        v23 = *(_OWORD *)(v18 - 120);
        v24 = *(_OWORD *)(v18 - 88);
        *(_OWORD *)&v8[v16 - 104] = *(_OWORD *)(v18 - 104);
        *(_OWORD *)&v8[v16 - 88] = v24;
        *(_OWORD *)&v8[v16 - 136] = v22;
        *(_OWORD *)&v8[v16 - 120] = v23;
        v25 = *(_OWORD *)(v18 - 72);
        v26 = *(_OWORD *)(v18 - 56);
        v27 = *(_OWORD *)(v18 - 40);
        *(_OWORD *)(v17 - 24) = *(_OWORD *)(v18 - 24);
        *(_OWORD *)(v17 - 40) = v27;
        *(_OWORD *)(v17 - 56) = v26;
        *(_OWORD *)(v17 - 72) = v25;
        *(v17 - 8) = 1;
      }
      v16 -= 224;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v28 = (char *)a1[1];
    *a1 = &v8[v16];
    a1[1] = v13;
    a1[2] = v12;
    while (v28 != v15)
    {
      v29 = (std::__shared_weak_count *)*((_QWORD *)v28 - 18);
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v28 -= 224;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_223C795C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223C79844(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_223C797F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_223C79844(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_223C73330();
  v3 = sub_2231A29BC();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

uint64_t sub_223C798BC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C79924(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C7998C()
{
  return 6;
}

uint64_t sub_223C79994(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_223C7999C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_223C799B4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_223C79A38(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223C79D3C(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  v16 = v15 | (2 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 2;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_223C79CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_223C79D3C(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_223C79DB4();
  v3 = sub_2231A29BC();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_223C79DB4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578F070);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578F070))
  {
    sub_223174DE4(v7, "ConstImageView");
    v2 = sub_2231E1404();
    sub_223C79FB8((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_223C79FB8((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578F058, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578F058, &dword_22314D000);
          __cxa_guard_release(&qword_25578F070);
          return &stru_25578F058;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578F058;
}

void sub_223C79F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578F070);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578F070);
  _Unwind_Resume(a1);
}

void sub_223C79FB8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223C7A054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223C7A070(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20DE8;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 6);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x227684CE8](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_223C7A320(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_223C7A2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223C7A320@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t *result;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v23 = *(_QWORD *)(a1 + 12);
  sub_2244B65C8((uint64_t)v31, &v23);
  v27 = v31[0];
  v28 = v31[1];
  v29 = v31[2];
  v4 = v33;
  v30 = v32;
  v5 = v34;
  v6 = v35;
  v25 = v36;
  v26 = v37;
  v7 = operator new();
  v8 = v28;
  *(_OWORD *)(v7 + 8) = v27;
  *(_QWORD *)v7 = &off_24EC61728;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v29;
  *(_QWORD *)(v7 + 56) = v30;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v25;
  *(_QWORD *)(v7 + 104) = v26;
  v24 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC61900;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v24 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v31, v7, 6);
  v12 = *(_QWORD *)&v31[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v31[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v31[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v31[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v31[0] = 0;
  MEMORY[0x227684CE8](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  *(_QWORD *)&v31[0] = a1;
  *((_QWORD *)&v31[0] + 1) = a2 + 3;
  result = sub_223C7A5D0((uint64_t *)v31);
  v21 = v24;
  if (v24)
  {
    v22 = *(void **)(v24 + 72);
    if (v22)
      free(v22);
    *(_QWORD *)(v21 + 72) = 0;
    return (uint64_t *)MEMORY[0x227684CE8](v21, 0x1091C40A44A61E0);
  }
  return result;
}

void sub_223C7A554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_223167354(v4);
  sub_22329C830((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223C7A570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_223167354(v12);
  sub_223167354((uint64_t)&a9);
  sub_22329C830(&a12);
  _Unwind_Resume(a1);
}

void sub_223C7A5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22329C830((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223C7A5B8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223C7A5D0(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  int v5;
  BOOL v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  _WORD *v20;
  int v21;

  v2 = *result;
  v1 = result[1];
  if (*(_DWORD *)(*result + 20) == 1 && *(_DWORD *)(v1 + 20) == 1)
    return sub_223C7A718(result);
  v4 = *(_DWORD *)(v2 + 12);
  v5 = *(_DWORD *)(v2 + 16);
  if (*(_DWORD *)(v2 + 8))
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v8 = v4 - 1;
    v9 = *(unsigned int *)(v2 + 24);
    v10 = *(unsigned int *)(v1 + 24);
    v11 = *(_WORD **)v2;
    v12 = *(_WORD **)v1;
    v13 = v5 - 1;
    if (v13)
    {
      v14 = *(unsigned int *)(v1 + 28);
      v15 = *(unsigned int *)(v2 + 28);
      if (!v8)
      {
        do
        {
          *v12 = *v11;
          v12[1] = v11[1];
          v11 += v15;
          v12 += v14;
          --v13;
        }
        while (v13);
LABEL_23:
        *v12 = *v11;
        v12[1] = v11[1];
        return result;
      }
      v16 = 0;
      result = (uint64_t *)(2 * v9);
      v17 = v11 + 1;
      v18 = v12 + 1;
      do
      {
        v19 = v18;
        v20 = v17;
        v21 = v8;
        do
        {
          *(v19 - 1) = *(v20 - 1);
          *v19 = *v20;
          v20 = (_WORD *)((char *)result + (_QWORD)v20);
          v19 += v10;
          --v21;
        }
        while (v21);
        *(v19 - 1) = *(v20 - 1);
        *v19 = *v20;
        v11 += v15;
        v12 += v14;
        ++v16;
        v17 += v15;
        v18 += v14;
      }
      while (v16 != v13);
    }
    for (; v8; --v8)
    {
      *v12 = *v11;
      v12[1] = v11[1];
      v11 += v9;
      v12 += v10;
    }
    goto LABEL_23;
  }
  return result;
}

uint64_t *sub_223C7A718(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  char *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v12;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 24);
  if (v3 == *(_DWORD *)(v2 + 24))
  {
    v4 = *(_DWORD *)(v1 + 8);
    if (v3 == *(_DWORD *)(v1 + 20) * v4)
    {
      v5 = *(_DWORD *)(v1 + 28);
      if (v5 != *(_DWORD *)(v2 + 28))
        return (uint64_t *)sub_223C7A84C((_DWORD *)*result, (char **)v2);
      v6 = *(_DWORD *)(v1 + 12);
      if (v5 != v6 * v3)
        return (uint64_t *)sub_223C7A84C((_DWORD *)*result, (char **)v2);
      v7 = v6 * v4 * *(_DWORD *)(v1 + 16);
      v8 = *(char **)v1;
      if ((_DWORD)v7)
        v9 = v8 == 0;
      else
        v9 = 0;
      if (v9)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
      }
      else if (!(_DWORD)v7)
      {
        return result;
      }
      return (uint64_t *)memmove(*(void **)v2, v8, 2 * v7);
    }
  }
  else
  {
    v4 = *(_DWORD *)(v1 + 8);
  }
  v12 = v4;
  if (v4)
    v10 = *(_DWORD *)(v1 + 12) == 0;
  else
    v10 = 1;
  if (!v10 && *(_DWORD *)(v1 + 16) != 0)
    return sub_223C7A9A0(&v12, (char **)v1, (char **)v2);
  return result;
}

_DWORD *sub_223C7A84C(_DWORD *result, char **a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v2 = result[2];
  v3 = result[3];
  v4 = result[4];
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = (v3 * v2);
    v8 = *(char **)result;
    v9 = *a2;
    v10 = v4 - 1;
    if (v4 == 1)
    {
LABEL_17:
      if (!(_DWORD)v7 || v8)
      {
        if (!(_DWORD)v7)
          return result;
      }
      else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_16;
      }
      return memmove(v9, v8, 2 * v7);
    }
    if ((_DWORD)v7)
    {
      v11 = 2 * result[7];
      v12 = 2 * *((unsigned int *)a2 + 7);
      while (v8
           || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        result = memmove(v9, v8, 2 * v7);
        v8 += v11;
        v9 += v12;
        if (!--v10)
          goto LABEL_17;
      }
LABEL_16:
      abort();
    }
  }
  return result;
}

uint64_t *sub_223C7A9A0(uint64_t *result, char **a2, char **a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  int v9;
  char *v10;
  int v11;
  unsigned __int8 *v12;
  char *v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;

  v44 = result;
  v3 = *((_DWORD *)a2 + 3);
  v4 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 2))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v43 = *((unsigned int *)a2 + 6);
    v8 = *((unsigned int *)a3 + 6);
    v9 = v4 - 1;
    v5 = v9 == 0;
    v41 = v9;
    v10 = *a2;
    if (!v5)
    {
      if (v3 != 1)
      {
        v11 = 0;
        v12 = (unsigned __int8 *)&qword_255795680;
        v13 = *a3;
        v36 = *((unsigned int *)a2 + 7);
        v37 = *((unsigned int *)a3 + 7);
        v42 = v3 - 1;
        while (1)
        {
          v38 = v11;
          v14 = 0;
          v39 = v13;
          v40 = v10;
          v15 = v10;
          do
          {
            v16 = v15;
            v17 = *v44;
            if (v16 || !v17)
            {
              if (!v17)
                goto LABEL_19;
            }
            else
            {
              v18 = v8;
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v19 = atomic_load(v12);
              if ((v19 & 1) == 0 && __cxa_guard_acquire((__guard *)v12))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release((__guard *)v12);
              }
              v20 = v12;
              if (!byte_255795670 || byte_255795678)
              {
                v22 = qword_255795648;
                v23 = qword_255795650;
                while (v22 != v23)
                {
                  v25 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v22;
                  v24 = *(_QWORD *)(v22 + 8);
                  v22 += 16;
                  v25(v24, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v12 = v20;
              v21 = atomic_load(v20);
              if ((v21 & 1) == 0 && __cxa_guard_acquire((__guard *)v20))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release((__guard *)v20);
              }
              if (!byte_255795670)
                goto LABEL_52;
              v8 = v18;
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
              v7 = v42;
            }
            result = (uint64_t *)memmove(v13, v16, 2 * v17);
LABEL_19:
            v15 = &v16[2 * v43];
            v13 += 2 * v8;
            ++v14;
          }
          while (v14 != v7);
          v26 = *v44;
          if (!v16 && v26)
          {
            if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
LABEL_14:
              result = (uint64_t *)memmove(v13, v15, 2 * v26);
              goto LABEL_15;
            }
LABEL_52:
            abort();
          }
          if (v26)
            goto LABEL_14;
LABEL_15:
          v10 = &v40[2 * v36];
          v13 = &v39[2 * v37];
          v11 = v38 + 1;
          if (v38 + 1 == v41)
            goto LABEL_40;
        }
      }
      v32 = 2 * *((unsigned int *)a2 + 7);
      v33 = 2 * *((unsigned int *)a3 + 7);
      v13 = *a3;
      while (1)
      {
        v34 = *v44;
        v35 = v10;
        if (!v10 && v34)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_52;
          }
        }
        else if (!v34)
        {
          goto LABEL_58;
        }
        result = (uint64_t *)memmove(v13, v35, 2 * v34);
LABEL_58:
        v10 = &v35[v32];
        v13 += v33;
        if (!--v41)
          goto LABEL_40;
      }
    }
    v13 = *a3;
LABEL_40:
    v27 = v13;
    v28 = v10;
    if (v7)
    {
      v29 = 2 * v8;
      do
      {
        v30 = *v44;
        if (!v28 && v30)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_52;
          }
        }
        else if (!v30)
        {
          goto LABEL_44;
        }
        result = (uint64_t *)memmove(v27, v28, 2 * v30);
LABEL_44:
        v28 += 2 * v43;
        v27 += v29;
        --v7;
      }
      while (v7);
    }
    v31 = *v44;
    if (!v28 && v31)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_52;
      }
      return (uint64_t *)memmove(v27, v28, 2 * v31);
    }
    if (v31)
      return (uint64_t *)memmove(v27, v28, 2 * v31);
  }
  return result;
}

void sub_223C7AE14()
{
  JUMPOUT(0x227684CE8);
}

void sub_223C7AE28(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CD878);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD878))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CD870);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CD878);
  }
  *a1 = qword_2540CD870;
}

void sub_223C7AEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CD878);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CD878);
  _Unwind_Resume(a1);
}

uint64_t sub_223C7AF1C(_QWORD *a1, _QWORD *a2, char **a3, uint64_t *a4, uint64_t *a5, char *a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 *v38;
  unint64_t v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t **v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  unsigned int v70;
  unsigned int v71;
  BOOL v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  unsigned __int8 *v77;
  _OWORD *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  uint64_t *v89;
  uint64_t **v90;
  unsigned int v91;
  unsigned int v92;
  BOOL v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t *v97;
  uint64_t **v98;
  uint64_t **v99;
  unsigned __int8 *v100;
  char *v101;
  char *v102;
  char *v103;
  BOOL v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v109;
  const char *v110;
  size_t v111;
  unsigned __int8 v112;
  unsigned __int8 v113;
  const char *v114;
  size_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  NSObject *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  size_t v124;
  void *v125;
  _QWORD *v126;
  size_t v127;
  size_t v128;
  _QWORD *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  _QWORD *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *p_shared_owners;
  unint64_t v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  char *v179;
  char *v180;
  int64_t v181;
  int64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  size_t v186;
  unsigned __int8 *v187;
  unsigned __int8 *v188;
  int v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v194;
  const char *v195;
  size_t v196;
  unsigned __int8 v197;
  unsigned __int8 v198;
  const char *v199;
  size_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  NSObject *v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  size_t v209;
  void *v210;
  _QWORD *v211;
  size_t v212;
  size_t v213;
  _QWORD *v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  _QWORD *v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  const char *v240;
  uint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  char *v264;
  int64_t v265;
  char *v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unsigned __int8 *v270;
  unsigned __int8 *v271;
  unint64_t v272;
  _BOOL4 v274;
  BOOL v275;
  uint64_t *v276;
  unint64_t v277;
  unint64_t *v278;
  unsigned __int8 *v279;
  unsigned __int8 *v280;
  unsigned __int8 *v281;
  uint64_t ***v282;
  uint64_t **v283;
  unsigned int v284;
  unsigned int v285;
  BOOL v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned __int8 *v290;
  unsigned __int8 *v291;
  const char *v292;
  size_t v293;
  uint64_t *v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t *v297;
  uint64_t **v298;
  unsigned int v299;
  unsigned int v300;
  _DWORD *v301;
  _BYTE *v302;
  _QWORD *v303;
  _QWORD **v304;
  _QWORD **v305;
  _QWORD **v306;
  unsigned int v307;
  unsigned int v308;
  int v309;
  BOOL v310;
  char *v311;
  char *v312;
  unsigned __int8 *v313;
  _WORD *v314;
  int v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  void **v320;
  char *v321;
  uint64_t v322;
  const char *v323;
  size_t v324;
  unsigned __int8 v325;
  unsigned __int8 v326;
  const char *v327;
  size_t v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  NSObject *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  size_t v337;
  std::__shared_weak_count_vtbl *v338;
  std::__shared_weak_count *v339;
  size_t v340;
  size_t v341;
  uint64_t *v342;
  void *v343;
  uint64_t v344;
  uint64_t v345;
  size_t v346;
  size_t v347;
  _QWORD *v348;
  uint64_t v349;
  uint64_t v350;
  size_t v351;
  size_t v352;
  _QWORD *v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  __int128 v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  char *v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  unint64_t v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  uint64_t v372;
  char *v373;
  char *v374;
  char *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  const char *v379;
  uint64_t v380;
  __int128 v381;
  uint64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  uint64_t v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  unint64_t v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  uint64_t v402;
  void **v403;
  const char *v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  uint64_t *v408;
  unint64_t v410;
  unint64_t v411;
  const char *v412;
  const char *v413;
  _QWORD *v414;
  _QWORD *v415;
  uint64_t v416;
  const char *v417;
  unsigned __int8 *v418;
  int v419;
  int v420;
  uint64_t v421;
  unsigned __int8 *v422;
  int v423;
  char *v424;
  char *v425;
  char *v426;
  uint64_t *v428;
  char **v429;
  uint64_t *v430;
  _QWORD *v431;
  _QWORD *v432;
  uint64_t v433;
  unsigned __int8 *v434;
  _QWORD *v435;
  uint64_t v436;
  uint64_t **v437;
  uint64_t *v438;
  unint64_t v439;
  __int128 v440;
  __int128 v441;
  int v442;
  uint64_t *v443;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v445;
  int v446;
  const char *v447;
  int v448;
  const char *v449;
  uint64_t v450;
  std::__shared_weak_count *v451;
  uint64_t v452;
  void *v453;
  uint64_t v454;
  _BYTE v455[6];
  void *v456[2];
  char v457;
  _QWORD **v458;
  _QWORD *v459;
  unint64_t v460;
  _QWORD v461[4];
  int v462;
  _BYTE __p[24];
  __int128 v464;
  char *v465;
  _QWORD *v466;
  __int128 v467;
  _QWORD *v468;
  __int128 v469;
  uint64_t *v470;
  __int128 v471;
  char __src[40];
  _OWORD v473[5];
  __int128 __s;
  std::__shared_weak_count *v475;
  char *v476;
  std::__shared_weak_count *v477;
  uint64_t v478;

  v478 = *MEMORY[0x24BDAC8D0];
  if (!a2[2]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/GenericGlobalReferenceSystem.cpp", 127, (uint64_t)"!tracked_kfs.empty()", 20, (uint64_t)"Tracked keyframe cannot be empty.", 33, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v425 = a6;
  v440 = 0u;
  v441 = 0u;
  v442 = 728333664;
  kdebug_trace();
  v438 = 0;
  v439 = 0;
  v437 = &v438;
  a4[1] = *a4;
  a3[1] = *a3;
  v430 = a5;
  a5[1] = *a5;
  sub_223198030((uint64_t)&v437, 0);
  v438 = 0;
  v439 = 0;
  v429 = a3;
  v437 = &v438;
  v14 = a1[9];
  v13 = a1[10];
  v15 = v13 - v14;
  v428 = a4;
  if (v13 == v14)
    goto LABEL_81;
  v16 = (uint64_t **)a2[1];
  if (!v16)
    goto LABEL_81;
  v17 = 0;
  v18 = v15 >> 4;
LABEL_7:
  v19 = (unsigned __int8 *)(v14 + 16 * v17);
  v20 = *v19;
  while (1)
  {
    v21 = *((unsigned __int8 *)v16 + 25);
    v22 = v20 >= v21;
    if (v20 != v21)
    {
      v23 = *v19;
LABEL_38:
      if (!v22)
        goto LABEL_8;
      goto LABEL_40;
    }
    v23 = v19[1];
    v21 = *((unsigned __int8 *)v16 + 26);
    v22 = v23 >= v21;
    if (v23 != v21)
      goto LABEL_38;
    v23 = v19[2];
    v21 = *((unsigned __int8 *)v16 + 27);
    v22 = v23 >= v21;
    if (v23 != v21)
      goto LABEL_38;
    v23 = v19[3];
    v21 = *((unsigned __int8 *)v16 + 28);
    v22 = v23 >= v21;
    if (v23 != v21)
      goto LABEL_38;
    v23 = v19[4];
    v21 = *((unsigned __int8 *)v16 + 29);
    v22 = v23 >= v21;
    if (v23 != v21)
      goto LABEL_38;
    v23 = v19[5];
    v21 = *((unsigned __int8 *)v16 + 30);
    v22 = v23 >= v21;
    if (v23 != v21)
      goto LABEL_38;
    v24 = v19[6];
    v25 = *((unsigned __int8 *)v16 + 31);
    if (v24 != v25)
      goto LABEL_25;
    v24 = v19[7];
    v25 = *((unsigned __int8 *)v16 + 32);
    if (v24 != v25)
      goto LABEL_25;
    v24 = v19[8];
    v25 = *((unsigned __int8 *)v16 + 33);
    if (v24 != v25)
      goto LABEL_25;
    v24 = v19[9];
    v25 = *((unsigned __int8 *)v16 + 34);
    if (v24 != v25)
      goto LABEL_25;
    v24 = v19[10];
    v25 = *((unsigned __int8 *)v16 + 35);
    if (v24 != v25)
      goto LABEL_25;
    v24 = v19[11];
    v25 = *((unsigned __int8 *)v16 + 36);
    if (v24 != v25)
      goto LABEL_25;
    v24 = v19[12];
    v25 = *((unsigned __int8 *)v16 + 37);
    if (v24 != v25
      || (v24 = v19[13], v25 = *((unsigned __int8 *)v16 + 38), v24 != v25)
      || (v24 = v19[14], v25 = *((unsigned __int8 *)v16 + 39), v24 != v25)
      || (v24 = v19[15], v25 = *((unsigned __int8 *)v16 + 40), v24 != v25))
    {
LABEL_25:
      if (v24 < v25)
        goto LABEL_8;
    }
    v21 = *((unsigned __int8 *)v16 + 31);
    v23 = v19[6];
    if (v21 == v23)
    {
      v21 = *((unsigned __int8 *)v16 + 32);
      v23 = v19[7];
      if (v21 == v23)
      {
        v21 = *((unsigned __int8 *)v16 + 33);
        v23 = v19[8];
        if (v21 == v23)
        {
          v21 = *((unsigned __int8 *)v16 + 34);
          v23 = v19[9];
          if (v21 == v23)
          {
            v21 = *((unsigned __int8 *)v16 + 35);
            v23 = v19[10];
            if (v21 == v23)
            {
              v21 = *((unsigned __int8 *)v16 + 36);
              v23 = v19[11];
              if (v21 == v23)
              {
                v21 = *((unsigned __int8 *)v16 + 37);
                v23 = v19[12];
                if (v21 == v23)
                {
                  v21 = *((unsigned __int8 *)v16 + 38);
                  v23 = v19[13];
                  if (v21 == v23)
                  {
                    v21 = *((unsigned __int8 *)v16 + 39);
                    v23 = v19[14];
                    if (v21 == v23)
                    {
                      v21 = *((unsigned __int8 *)v16 + 40);
                      v23 = v19[15];
                      if (v21 == v23)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_40:
    if (v21 >= v23)
      break;
    ++v16;
LABEL_8:
    v16 = (uint64_t **)*v16;
    if (!v16)
      goto LABEL_80;
  }
  v27 = (_OWORD *)a4[1];
  v26 = a4[2];
  if ((unint64_t)v27 < v26)
  {
    *v27 = *(_OWORD *)v19;
    v28 = v27 + 1;
    goto LABEL_57;
  }
  v29 = (_OWORD *)*a4;
  v30 = v27 - v29;
  v31 = v30 + 1;
  if ((unint64_t)(v30 + 1) >> 60)
    goto LABEL_788;
  v32 = v26 - (_QWORD)v29;
  if (v32 >> 3 > v31)
    v31 = v32 >> 3;
  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
    v33 = 0xFFFFFFFFFFFFFFFLL;
  else
    v33 = v31;
  if (!v33)
  {
    v34 = 0;
    v35 = (char *)(16 * v30);
    *(_OWORD *)(16 * v30) = *(_OWORD *)v19;
    v36 = 16 * v30;
    if (v27 != v29)
      goto LABEL_53;
    goto LABEL_69;
  }
  if (v33 >> 60)
    goto LABEL_786;
  v34 = (char *)operator new(16 * v33);
  v35 = &v34[16 * v30];
  *(_OWORD *)v35 = *(_OWORD *)v19;
  v36 = (uint64_t)v35;
  if (v27 == v29)
  {
LABEL_69:
    a4 = v428;
    a3 = v429;
    v51 = &v34[16 * v33];
    v28 = v35 + 16;
    *v428 = v36;
    v428[1] = (uint64_t)(v35 + 16);
    v428[2] = (uint64_t)v51;
    if (v27)
      goto LABEL_56;
    goto LABEL_57;
  }
LABEL_53:
  a3 = v429;
  do
  {
    *(_OWORD *)(v36 - 16) = *(v27 - 1);
    v36 -= 16;
    --v27;
  }
  while (v27 != v29);
  a4 = v428;
  v27 = (_OWORD *)*v428;
  v37 = &v34[16 * v33];
  v28 = v35 + 16;
  *v428 = v36;
  v428[1] = (uint64_t)(v35 + 16);
  v428[2] = (uint64_t)v37;
  if (v27)
LABEL_56:
    operator delete(v27);
LABEL_57:
  a4[1] = (uint64_t)v28;
  v38 = (__int128 *)(a1[12] + (v17 << 6));
  v40 = a3[1];
  v39 = (unint64_t)a3[2];
  if ((unint64_t)v40 < v39)
  {
    v41 = *v38;
    v42 = v38[1];
    v43 = v38[3];
    *((_OWORD *)v40 + 2) = v38[2];
    *((_OWORD *)v40 + 3) = v43;
    *(_OWORD *)v40 = v41;
    *((_OWORD *)v40 + 1) = v42;
    v44 = v40 + 64;
    a4 = v428;
    goto LABEL_77;
  }
  v45 = *a3;
  v46 = (v40 - *a3) >> 6;
  v47 = v46 + 1;
  if ((unint64_t)(v46 + 1) >> 58)
    sub_223257BE4();
  v48 = v39 - (_QWORD)v45;
  if (v48 >> 5 > v47)
    v47 = v48 >> 5;
  if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFC0)
    v49 = 0x3FFFFFFFFFFFFFFLL;
  else
    v49 = v47;
  if (!v49)
  {
    v50 = 0;
    goto LABEL_72;
  }
  if (v49 >> 58)
    goto LABEL_786;
  v50 = (char *)operator new(v49 << 6);
LABEL_72:
  v52 = &v50[64 * v46];
  v53 = *v38;
  v54 = v38[1];
  v55 = v38[3];
  *((_OWORD *)v52 + 2) = v38[2];
  *((_OWORD *)v52 + 3) = v55;
  *(_OWORD *)v52 = v53;
  *((_OWORD *)v52 + 1) = v54;
  v56 = v52;
  if (v40 == v45)
  {
    a4 = v428;
    a3 = v429;
    v61 = &v50[64 * v49];
    v44 = v52 + 64;
    *v429 = v52;
    v429[1] = v52 + 64;
    v429[2] = v61;
    if (!v40)
      goto LABEL_77;
  }
  else
  {
    a4 = v428;
    a3 = v429;
    do
    {
      v57 = *((_OWORD *)v40 - 4);
      v58 = *((_OWORD *)v40 - 3);
      v59 = *((_OWORD *)v40 - 1);
      *((_OWORD *)v56 - 2) = *((_OWORD *)v40 - 2);
      *((_OWORD *)v56 - 1) = v59;
      *((_OWORD *)v56 - 4) = v57;
      *((_OWORD *)v56 - 3) = v58;
      v56 -= 64;
      v40 -= 64;
    }
    while (v40 != v45);
    v40 = *v429;
    v60 = &v50[64 * v49];
    v44 = v52 + 64;
    *v429 = v56;
    v429[1] = v52 + 64;
    v429[2] = v60;
    if (!v40)
      goto LABEL_77;
  }
  operator delete(v40);
LABEL_77:
  a3[1] = v44;
LABEL_80:
  while (++v17 != v18)
  {
    v16 = (uint64_t **)a2[1];
    v14 = a1[9];
    if (v16)
      goto LABEL_7;
  }
LABEL_81:
  v63 = a1[18];
  v62 = a1[19];
  v64 = v62 - v63;
  v65 = v430;
  if (v62 == v63)
    goto LABEL_140;
  v66 = (uint64_t **)a2[1];
  if (!v66)
    goto LABEL_140;
  v67 = 0;
  v68 = v64 >> 4;
LABEL_85:
  v69 = (unsigned __int8 *)(v63 + 16 * v67);
  v70 = *v69;
  while (2)
  {
    v71 = *((unsigned __int8 *)v66 + 25);
    v72 = v70 >= v71;
    if (v70 != v71)
    {
      v73 = *v69;
      goto LABEL_116;
    }
    v73 = v69[1];
    v71 = *((unsigned __int8 *)v66 + 26);
    v72 = v73 >= v71;
    if (v73 != v71)
      goto LABEL_116;
    v73 = v69[2];
    v71 = *((unsigned __int8 *)v66 + 27);
    v72 = v73 >= v71;
    if (v73 != v71)
      goto LABEL_116;
    v73 = v69[3];
    v71 = *((unsigned __int8 *)v66 + 28);
    v72 = v73 >= v71;
    if (v73 != v71
      || (v73 = v69[4], v71 = *((unsigned __int8 *)v66 + 29), v72 = v73 >= v71, v73 != v71)
      || (v73 = v69[5], v71 = *((unsigned __int8 *)v66 + 30), v72 = v73 >= v71, v73 != v71))
    {
LABEL_116:
      if (v72)
      {
LABEL_118:
        if (v71 >= v73)
          goto LABEL_120;
        ++v66;
      }
LABEL_86:
      v66 = (uint64_t **)*v66;
      if (!v66)
        goto LABEL_139;
      continue;
    }
    break;
  }
  v74 = v69[6];
  v75 = *((unsigned __int8 *)v66 + 31);
  if (v74 != v75)
    goto LABEL_103;
  v74 = v69[7];
  v75 = *((unsigned __int8 *)v66 + 32);
  if (v74 != v75)
    goto LABEL_103;
  v74 = v69[8];
  v75 = *((unsigned __int8 *)v66 + 33);
  if (v74 != v75)
    goto LABEL_103;
  v74 = v69[9];
  v75 = *((unsigned __int8 *)v66 + 34);
  if (v74 != v75)
    goto LABEL_103;
  v74 = v69[10];
  v75 = *((unsigned __int8 *)v66 + 35);
  if (v74 != v75)
    goto LABEL_103;
  v74 = v69[11];
  v75 = *((unsigned __int8 *)v66 + 36);
  if (v74 != v75)
    goto LABEL_103;
  v74 = v69[12];
  v75 = *((unsigned __int8 *)v66 + 37);
  if (v74 != v75
    || (v74 = v69[13], v75 = *((unsigned __int8 *)v66 + 38), v74 != v75)
    || (v74 = v69[14], v75 = *((unsigned __int8 *)v66 + 39), v74 != v75)
    || (v74 = v69[15], v75 = *((unsigned __int8 *)v66 + 40), v74 != v75))
  {
LABEL_103:
    if (v74 < v75)
      goto LABEL_86;
  }
  v71 = *((unsigned __int8 *)v66 + 31);
  v73 = v69[6];
  if (v71 != v73)
    goto LABEL_118;
  v71 = *((unsigned __int8 *)v66 + 32);
  v73 = v69[7];
  if (v71 != v73)
    goto LABEL_118;
  v71 = *((unsigned __int8 *)v66 + 33);
  v73 = v69[8];
  if (v71 != v73)
    goto LABEL_118;
  v71 = *((unsigned __int8 *)v66 + 34);
  v73 = v69[9];
  if (v71 != v73)
    goto LABEL_118;
  v71 = *((unsigned __int8 *)v66 + 35);
  v73 = v69[10];
  if (v71 != v73)
    goto LABEL_118;
  v71 = *((unsigned __int8 *)v66 + 36);
  v73 = v69[11];
  if (v71 != v73)
    goto LABEL_118;
  v71 = *((unsigned __int8 *)v66 + 37);
  v73 = v69[12];
  if (v71 != v73)
    goto LABEL_118;
  v71 = *((unsigned __int8 *)v66 + 38);
  v73 = v69[13];
  if (v71 != v73)
    goto LABEL_118;
  v71 = *((unsigned __int8 *)v66 + 39);
  v73 = v69[14];
  if (v71 != v73)
    goto LABEL_118;
  v71 = *((unsigned __int8 *)v66 + 40);
  v73 = v69[15];
  if (v71 != v73)
    goto LABEL_118;
LABEL_120:
  v77 = (unsigned __int8 *)v65[1];
  v76 = v65[2];
  if ((unint64_t)v77 >= v76)
  {
    v79 = (unsigned __int8 *)*v65;
    v80 = (v77 - v79) >> 4;
    v81 = v80 + 1;
    if (!((unint64_t)(v80 + 1) >> 60))
    {
      v82 = v76 - (_QWORD)v79;
      if (v82 >> 3 > v81)
        v81 = v82 >> 3;
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF0)
        v83 = 0xFFFFFFFFFFFFFFFLL;
      else
        v83 = v81;
      if (!v83)
      {
        v84 = 0;
        v85 = (char *)(16 * v80);
        *(_OWORD *)(16 * v80) = *(_OWORD *)v69;
        v86 = 16 * v80;
        if (v77 == v79)
          goto LABEL_137;
        goto LABEL_133;
      }
      if (!(v83 >> 60))
      {
        v84 = (char *)operator new(16 * v83);
        v85 = &v84[16 * v80];
        *(_OWORD *)v85 = *(_OWORD *)v69;
        v86 = (uint64_t)v85;
        if (v77 == v79)
        {
LABEL_137:
          v65 = v430;
          v78 = v85 + 16;
          *v430 = v86;
          v430[1] = (uint64_t)(v85 + 16);
          v430[2] = (uint64_t)&v84[16 * v83];
          if (!v77)
            goto LABEL_136;
          goto LABEL_135;
        }
        do
        {
LABEL_133:
          *(_OWORD *)(v86 - 16) = *((_OWORD *)v77 - 1);
          v86 -= 16;
          v77 -= 16;
        }
        while (v77 != v79);
        v65 = v430;
        v77 = (unsigned __int8 *)*v430;
        v78 = v85 + 16;
        *v430 = v86;
        v430[1] = (uint64_t)(v85 + 16);
        v430[2] = (uint64_t)&v84[16 * v83];
        if (!v77)
          goto LABEL_136;
LABEL_135:
        operator delete(v77);
        goto LABEL_136;
      }
LABEL_786:
      sub_223174E94();
    }
LABEL_788:
    sub_22316E078();
  }
  *(_OWORD *)v77 = *(_OWORD *)v69;
  v78 = v77 + 16;
LABEL_136:
  v65[1] = (uint64_t)v78;
LABEL_139:
  while (++v67 != v68)
  {
    v66 = (uint64_t **)a2[1];
    v63 = a1[18];
    if (v66)
      goto LABEL_85;
  }
LABEL_140:
  v87 = (unsigned __int8 *)a1[15];
  v88 = (unsigned __int8 *)a1[16];
  v89 = v428;
  if (v87 == v88)
    goto LABEL_461;
  v90 = (uint64_t **)a2[1];
  if (!v90)
    goto LABEL_461;
  v422 = v88;
LABEL_144:
  v91 = *v87;
  while (2)
  {
    v92 = *((unsigned __int8 *)v90 + 25);
    v93 = v91 >= v92;
    if (v91 != v92)
    {
      v94 = *v87;
      goto LABEL_176;
    }
    v94 = v87[1];
    v92 = *((unsigned __int8 *)v90 + 26);
    v93 = v94 >= v92;
    if (v94 != v92)
      goto LABEL_176;
    v94 = v87[2];
    v92 = *((unsigned __int8 *)v90 + 27);
    v93 = v94 >= v92;
    if (v94 != v92)
      goto LABEL_176;
    v94 = v87[3];
    v92 = *((unsigned __int8 *)v90 + 28);
    v93 = v94 >= v92;
    if (v94 != v92
      || (v94 = v87[4], v92 = *((unsigned __int8 *)v90 + 29), v93 = v94 >= v92, v94 != v92)
      || (v94 = v87[5], v92 = *((unsigned __int8 *)v90 + 30), v93 = v94 >= v92, v94 != v92))
    {
LABEL_176:
      if (v93)
      {
LABEL_178:
        if (v92 >= v94)
          goto LABEL_179;
        ++v90;
      }
LABEL_146:
      v90 = (uint64_t **)*v90;
      if (!v90)
        goto LABEL_460;
      continue;
    }
    break;
  }
  v95 = v87[6];
  v96 = *((unsigned __int8 *)v90 + 31);
  if (v95 != v96)
    goto LABEL_163;
  v95 = v87[7];
  v96 = *((unsigned __int8 *)v90 + 32);
  if (v95 != v96)
    goto LABEL_163;
  v95 = v87[8];
  v96 = *((unsigned __int8 *)v90 + 33);
  if (v95 != v96)
    goto LABEL_163;
  v95 = v87[9];
  v96 = *((unsigned __int8 *)v90 + 34);
  if (v95 != v96)
    goto LABEL_163;
  v95 = v87[10];
  v96 = *((unsigned __int8 *)v90 + 35);
  if (v95 != v96)
    goto LABEL_163;
  v95 = v87[11];
  v96 = *((unsigned __int8 *)v90 + 36);
  if (v95 != v96)
    goto LABEL_163;
  v95 = v87[12];
  v96 = *((unsigned __int8 *)v90 + 37);
  if (v95 != v96
    || (v95 = v87[13], v96 = *((unsigned __int8 *)v90 + 38), v95 != v96)
    || (v95 = v87[14], v96 = *((unsigned __int8 *)v90 + 39), v95 != v96)
    || (v95 = v87[15], v96 = *((unsigned __int8 *)v90 + 40), v95 != v96))
  {
LABEL_163:
    if (v95 < v96)
      goto LABEL_146;
  }
  v92 = *((unsigned __int8 *)v90 + 31);
  v94 = v87[6];
  if (v92 != v94)
    goto LABEL_178;
  v92 = *((unsigned __int8 *)v90 + 32);
  v94 = v87[7];
  if (v92 != v94)
    goto LABEL_178;
  v92 = *((unsigned __int8 *)v90 + 33);
  v94 = v87[8];
  if (v92 != v94)
    goto LABEL_178;
  v92 = *((unsigned __int8 *)v90 + 34);
  v94 = v87[9];
  if (v92 != v94)
    goto LABEL_178;
  v92 = *((unsigned __int8 *)v90 + 35);
  v94 = v87[10];
  if (v92 != v94)
    goto LABEL_178;
  v92 = *((unsigned __int8 *)v90 + 36);
  v94 = v87[11];
  if (v92 != v94)
    goto LABEL_178;
  v92 = *((unsigned __int8 *)v90 + 37);
  v94 = v87[12];
  if (v92 != v94)
    goto LABEL_178;
  v92 = *((unsigned __int8 *)v90 + 38);
  v94 = v87[13];
  if (v92 != v94)
    goto LABEL_178;
  v92 = *((unsigned __int8 *)v90 + 39);
  v94 = v87[14];
  if (v92 != v94)
    goto LABEL_178;
  v92 = *((unsigned __int8 *)v90 + 40);
  v94 = v87[15];
  if (v92 != v94)
    goto LABEL_178;
LABEL_179:
  v97 = v438;
  v98 = &v438;
  v99 = &v438;
  if (!v438)
    goto LABEL_187;
  v99 = &v438;
  while (1)
  {
    while (1)
    {
      v98 = (uint64_t **)v97;
      v100 = (unsigned __int8 *)v97 + 25;
      if (((char)sub_22319835C(v87, (unsigned __int8 *)v97 + 25) & 0x80000000) == 0)
        break;
      v97 = *v98;
      v99 = v98;
      if (!*v98)
        goto LABEL_187;
    }
    if (((char)sub_22319835C(v100, v87) & 0x80000000) == 0)
      break;
    v99 = v98 + 1;
    v97 = v98[1];
    if (!v97)
      goto LABEL_187;
  }
  if (!*v99)
  {
LABEL_187:
    v101 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v101 + 25) = *(_OWORD *)v87;
    *(_QWORD *)v101 = 0;
    *((_QWORD *)v101 + 1) = 0;
    *((_QWORD *)v101 + 2) = v98;
    *v99 = (uint64_t *)v101;
    if (*v437)
    {
      v437 = (uint64_t **)*v437;
      v101 = (char *)*v99;
    }
    sub_2231A9A8C(v438, (uint64_t *)v101);
    ++v439;
  }
  v103 = (char *)*v89;
  v102 = (char *)v89[1];
  if ((char *)*v89 != v102)
  {
    while (1)
    {
      v104 = *(_QWORD *)v103 == *(_QWORD *)v87 && *((_QWORD *)v103 + 1) == *((_QWORD *)v87 + 1);
      if (v104)
        break;
      v103 += 16;
      if (v103 == v102)
      {
        v103 = (char *)v89[1];
        break;
      }
    }
  }
  if (v103 == v102)
    goto LABEL_321;
  sub_223C7AE28(&v470);
  if (*(int *)v470[7] > 4)
    goto LABEL_316;
  v105 = *((unsigned __int8 *)v470 + 72);
  v106 = sub_22322F254((uint64_t)v470, "OSLogSurrogateAppender", 1, 0);
  v107 = v106;
  if (!v105 && v106 == 0)
    goto LABEL_316;
  v443 = (uint64_t *)&v470;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v445 = std::chrono::system_clock::now().__d_.__rep_;
  v446 = 4;
  v447 = "unknown file";
  v448 = 842;
  v449 = "unknown function";
  v450 = 0;
  v451 = 0;
  sub_2245664AC(v87, &__s);
  v109 = *v443;
  v110 = (const char *)(*v443 + 16);
  v412 = v110;
  if (*(char *)(*v443 + 39) < 0)
  {
    v110 = *(const char **)(v109 + 16);
    v111 = *(_QWORD *)(v109 + 24);
    v414 = (_QWORD *)*v443;
    v113 = atomic_load((unsigned __int8 *)&qword_255788F58);
    v419 = v105;
    if ((v113 & 1) == 0)
    {
LABEL_450:
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)__p);
        sub_223199C58("com.apple.cv3d", (unint64_t)__p, byte_255788F40);
        if ((_BYTE)v464 && (__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
    }
  }
  else
  {
    v111 = *(unsigned __int8 *)(*v443 + 39);
    v414 = (_QWORD *)*v443;
    v112 = atomic_load((unsigned __int8 *)&qword_255788F58);
    v419 = v105;
    if ((v112 & 1) == 0)
      goto LABEL_450;
  }
  if (byte_255788F40[23] >= 0)
    v114 = byte_255788F40;
  else
    v114 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v115 = byte_255788F40[23];
  else
    v115 = *(_QWORD *)&byte_255788F40[8];
  *(_QWORD *)&v473[0] = os_log_create(v114, v110);
  if (v115 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v115 >= 0x17)
  {
    v117 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v115 | 7) != 0x17)
      v117 = v115 | 7;
    v118 = v117 + 1;
    v116 = (char *)operator new(v117 + 1);
    *(_QWORD *)&v473[1] = v115;
    *((_QWORD *)&v473[1] + 1) = v118 | 0x8000000000000000;
    *((_QWORD *)&v473[0] + 1) = v116;
    goto LABEL_220;
  }
  HIBYTE(v473[1]) = v115;
  v116 = (char *)v473 + 8;
  if (v115)
LABEL_220:
    memmove(v116, v114, v115);
  v116[v115] = 0;
  LOBYTE(v473[2]) = 1;
  if (v111 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v89 = v428;
  if (v111 >= 0x17)
  {
    v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v111 | 7) != 0x17)
      v122 = v111 | 7;
    v123 = v122 + 1;
    v119 = (char *)operator new(v122 + 1);
    *(_QWORD *)&v473[3] = v111;
    *((_QWORD *)&v473[3] + 1) = v123 | 0x8000000000000000;
    *((_QWORD *)&v473[2] + 1) = v119;
  }
  else
  {
    HIBYTE(v473[3]) = v111;
    v119 = (char *)&v473[2] + 8;
    if (!v111)
    {
      BYTE8(v473[2]) = 0;
      LOBYTE(v473[4]) = 1;
      v120 = *(NSObject **)&v473[0];
      if ((SHIBYTE(v473[3]) & 0x80000000) == 0)
        goto LABEL_225;
LABEL_231:
      operator delete(*((void **)&v473[2] + 1));
      v88 = v422;
      v121 = v419;
      if (LOBYTE(v473[2]))
        goto LABEL_232;
      goto LABEL_234;
    }
  }
  memmove(v119, v110, v111);
  v119[v111] = 0;
  LOBYTE(v473[4]) = 1;
  v120 = *(NSObject **)&v473[0];
  if (SHIBYTE(v473[3]) < 0)
    goto LABEL_231;
LABEL_225:
  v88 = v422;
  v121 = v419;
  if (LOBYTE(v473[2]))
  {
LABEL_232:
    if (SHIBYTE(v473[1]) < 0)
      operator delete(*((void **)&v473[0] + 1));
  }
LABEL_234:
  if (*(_QWORD *)&v473[0])
    os_release(*(void **)&v473[0]);
  if (v107 && *(_QWORD *)(v107 + 24))
  {
    v124 = _os_log_pack_size();
    v125 = operator new(v124, (std::align_val_t)8uLL);
    v126 = (_QWORD *)operator new();
    *v126 = &off_24EC1F7F0;
    v126[1] = 0;
    v126[2] = 0;
    v126[3] = v125;
    *(_QWORD *)__p = v125;
    *(_QWORD *)&__p[8] = v125;
    *(_QWORD *)&__p[16] = v126;
    v464 = 0uLL;
    v127 = strlen((const char *)&__s);
    if (v127 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v128 = v127;
    if (v127 >= 0x17)
    {
      v131 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v127 | 7) != 0x17)
        v131 = v127 | 7;
      v132 = v131 + 1;
      v129 = operator new(v131 + 1);
      v461[2] = v132 | 0x8000000000000000;
      v461[0] = v129;
      v461[1] = v128;
    }
    else
    {
      HIBYTE(v461[2]) = v127;
      v129 = v461;
      if (!v127)
        goto LABEL_250;
    }
    memcpy(v129, &__s, v128);
LABEL_250:
    *((_BYTE *)v129 + v128) = 0;
    v133 = v461[0];
    *(_QWORD *)__src = v461[1];
    *(_QWORD *)&__src[7] = *(_QWORD *)((char *)&v461[1] + 7);
    v134 = HIBYTE(v461[2]);
    v135 = operator new(0x38uLL);
    v135[1] = 0;
    v135[2] = 0;
    v135[3] = off_24EC1FA48;
    *v135 = &off_24EC1F9F8;
    v136 = *(_QWORD *)__src;
    v135[4] = v133;
    v135[5] = v136;
    *(_QWORD *)((char *)v135 + 47) = *(_QWORD *)&__src[7];
    *((_BYTE *)v135 + 55) = v134;
    *(_QWORD *)__src = 0;
    *(_QWORD *)&__src[7] = 0;
    v137 = (std::__shared_weak_count *)*((_QWORD *)&v464 + 1);
    *(_QWORD *)&v464 = v135 + 3;
    *((_QWORD *)&v464 + 1) = v135;
    v89 = v428;
    if (v137)
    {
      p_shared_owners = (unint64_t *)&v137->__shared_owners_;
      do
        v139 = __ldaxr(p_shared_owners);
      while (__stlxr(v139 - 1, p_shared_owners));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
    v473[0] = *(_OWORD *)__p;
    v140 = v464;
    *(_QWORD *)&v473[1] = *(_QWORD *)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v141 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v142 = __ldxr(v141);
      while (__stxr(v142 + 1, v141));
    }
    v143 = (std::__shared_weak_count *)*((_QWORD *)&v464 + 1);
    *((_QWORD *)&v473[1] + 1) = v140;
    *(_QWORD *)&v473[2] = *((_QWORD *)&v464 + 1);
    if (*((_QWORD *)&v464 + 1))
    {
      v144 = (unint64_t *)(*((_QWORD *)&v464 + 1) + 8);
      do
        v145 = __ldxr(v144);
      while (__stxr(v145 + 1, v144));
      *((_QWORD *)&v473[2] + 1) = v140;
      do
        v146 = __ldaxr(v144);
      while (__stlxr(v146 - 1, v144));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    else
    {
      *((_QWORD *)&v473[2] + 1) = v140;
    }
    v147 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v148 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
    v150 = *(_QWORD *)&v473[0];
    if (*(char *)(*((_QWORD *)&v473[2] + 1) + 31) >= 0)
      v151 = *((_QWORD *)&v473[2] + 1) + 8;
    else
      v151 = *(_QWORD *)(*((_QWORD *)&v473[2] + 1) + 8);
    v152 = _os_log_pack_fill();
    *(_DWORD *)v152 = 136315138;
    *(_QWORD *)(v152 + 4) = v151;
    v153 = operator new();
    v154 = *((unsigned __int8 *)v414 + 39);
    v155 = v412;
    if ((v154 & 0x80u) != 0)
    {
      v155 = (const char *)v414[2];
      v154 = v414[3];
    }
    *(_QWORD *)v153 = v150;
    *(_OWORD *)(v153 + 8) = *(_OWORD *)((char *)v473 + 8);
    *((_QWORD *)&v473[0] + 1) = 0;
    *(_QWORD *)&v473[1] = 0;
    *(_OWORD *)(v153 + 24) = *(_OWORD *)((char *)&v473[1] + 8);
    *((_QWORD *)&v473[1] + 1) = 0;
    *(_QWORD *)&v473[2] = 0;
    *(_QWORD *)(v153 + 40) = v155;
    *(_QWORD *)(v153 + 48) = v154;
    *(_BYTE *)(v153 + 56) = 16;
    v461[0] = 0;
    *(_QWORD *)__p = v153;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v107 + 24) + 40))(*(_QWORD *)(v107 + 24), __p);
    v156 = *(_QWORD *)__p;
    *(_QWORD *)__p = 0;
    if (v156)
    {
      v157 = *(std::__shared_weak_count **)(v156 + 32);
      if (v157)
      {
        v158 = (unint64_t *)&v157->__shared_owners_;
        do
          v159 = __ldaxr(v158);
        while (__stlxr(v159 - 1, v158));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
      v160 = *(std::__shared_weak_count **)(v156 + 16);
      if (v160)
      {
        v161 = (unint64_t *)&v160->__shared_owners_;
        do
          v162 = __ldaxr(v161);
        while (__stlxr(v162 - 1, v161));
        if (!v162)
        {
          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
          std::__shared_weak_count::__release_weak(v160);
        }
      }
      MEMORY[0x227684CE8](v156, 0x10F0C40B62ED6C6);
      v163 = v461[0];
      v461[0] = 0;
      if (v163)
      {
        v164 = *(std::__shared_weak_count **)(v163 + 32);
        if (v164)
        {
          v165 = (unint64_t *)&v164->__shared_owners_;
          do
            v166 = __ldaxr(v165);
          while (__stlxr(v166 - 1, v165));
          if (!v166)
          {
            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
            std::__shared_weak_count::__release_weak(v164);
          }
        }
        v167 = *(std::__shared_weak_count **)(v163 + 16);
        if (v167)
        {
          v168 = (unint64_t *)&v167->__shared_owners_;
          do
            v169 = __ldaxr(v168);
          while (__stlxr(v169 - 1, v168));
          if (!v169)
          {
            ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
            std::__shared_weak_count::__release_weak(v167);
          }
        }
        MEMORY[0x227684CE8](v163, 0x10F0C40B62ED6C6);
      }
    }
    v170 = *(std::__shared_weak_count **)&v473[2];
    if (*(_QWORD *)&v473[2])
    {
      v171 = (unint64_t *)(*(_QWORD *)&v473[2] + 8);
      do
        v172 = __ldaxr(v171);
      while (__stlxr(v172 - 1, v171));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
        std::__shared_weak_count::__release_weak(v170);
      }
    }
    v173 = *(std::__shared_weak_count **)&v473[1];
    if (*(_QWORD *)&v473[1])
    {
      v174 = (unint64_t *)(*(_QWORD *)&v473[1] + 8);
      do
        v175 = __ldaxr(v174);
      while (__stlxr(v175 - 1, v174));
      if (!v175)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
      }
    }
    if (v419)
    {
LABEL_310:
      sub_2245664AC(v87, v473);
      sub_22322C138((uint64_t)&v443, "GRS: removed pose update keyframe %s", (const char *)v473);
      sub_223182C08((uint64_t)&v443);
    }
  }
  else
  {
    os_log_type_enabled(v120, OS_LOG_TYPE_ERROR);
    LODWORD(v473[0]) = 136315138;
    *(_QWORD *)((char *)v473 + 4) = &__s;
    v130 = (void *)_os_log_send_and_compose_impl();
    if (v130)
      free(v130);
    if (v121)
      goto LABEL_310;
  }
  sub_223182C08((uint64_t)&v443);
  v176 = v451;
  if (v451)
  {
    v177 = (unint64_t *)&v451->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
LABEL_316:
  v180 = (char *)*v89;
  v179 = (char *)v89[1];
  v181 = v179 - (v103 + 16);
  if (v179 != v103 + 16)
    memmove(v103, v103 + 16, v179 - (v103 + 16));
  v182 = v103 - v180;
  v89[1] = (uint64_t)&v103[v181];
  v184 = *v429;
  v183 = v429[1];
  v185 = (uint64_t)&(*v429)[64 * ((v103 - v180) >> 4)];
  v65 = v430;
  if ((char *)(v185 + 64) != v183)
  {
    v186 = ((unint64_t)&v183[-v185 - 128] & 0xFFFFFFFFFFFFFFC0) + 64;
    memmove((void *)v185, (const void *)(v185 + 64), v186);
    v185 = (uint64_t)&v184[4 * v182 + v186];
  }
  v429[1] = (char *)v185;
LABEL_321:
  v188 = (unsigned __int8 *)*v65;
  v187 = (unsigned __int8 *)v65[1];
  if ((unsigned __int8 *)*v65 != v187)
  {
    while (*(_QWORD *)v188 != *(_QWORD *)v87 || *((_QWORD *)v188 + 1) != *((_QWORD *)v87 + 1))
    {
      v188 += 16;
      if (v188 == v187)
      {
        v188 = (unsigned __int8 *)v65[1];
        break;
      }
    }
  }
  if (v188 == v187)
    goto LABEL_460;
  sub_223C7AE28(&v470);
  if (*(int *)v470[7] > 4)
    goto LABEL_447;
  v190 = *((unsigned __int8 *)v470 + 72);
  v191 = sub_22322F254((uint64_t)v470, "OSLogSurrogateAppender", 1, 0);
  v192 = v191;
  if (!v190 && v191 == 0)
    goto LABEL_447;
  v443 = (uint64_t *)&v470;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v445 = std::chrono::system_clock::now().__d_.__rep_;
  v446 = 4;
  v447 = "unknown file";
  v448 = 851;
  v449 = "unknown function";
  v450 = 0;
  v451 = 0;
  sub_2245664AC(v87, &__s);
  v194 = *v443;
  v195 = (const char *)(*v443 + 16);
  v413 = v195;
  if (*(char *)(*v443 + 39) < 0)
  {
    v195 = *(const char **)(v194 + 16);
    v196 = *(_QWORD *)(v194 + 24);
    v415 = (_QWORD *)*v443;
    v198 = atomic_load((unsigned __int8 *)&qword_255788F58);
    v420 = v190;
    if ((v198 & 1) == 0)
    {
LABEL_455:
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)__p);
        sub_223199C58("com.apple.cv3d", (unint64_t)__p, byte_255788F40);
        if ((_BYTE)v464 && (__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
    }
  }
  else
  {
    v196 = *(unsigned __int8 *)(*v443 + 39);
    v415 = (_QWORD *)*v443;
    v197 = atomic_load((unsigned __int8 *)&qword_255788F58);
    v420 = v190;
    if ((v197 & 1) == 0)
      goto LABEL_455;
  }
  if (byte_255788F40[23] >= 0)
    v199 = byte_255788F40;
  else
    v199 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v200 = byte_255788F40[23];
  else
    v200 = *(_QWORD *)&byte_255788F40[8];
  *(_QWORD *)&v473[0] = os_log_create(v199, v195);
  if (v200 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v200 >= 0x17)
  {
    v202 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v200 | 7) != 0x17)
      v202 = v200 | 7;
    v203 = v202 + 1;
    v201 = (char *)operator new(v202 + 1);
    *(_QWORD *)&v473[1] = v200;
    *((_QWORD *)&v473[1] + 1) = v203 | 0x8000000000000000;
    *((_QWORD *)&v473[0] + 1) = v201;
    goto LABEL_351;
  }
  HIBYTE(v473[1]) = v200;
  v201 = (char *)v473 + 8;
  if (v200)
LABEL_351:
    memmove(v201, v199, v200);
  v201[v200] = 0;
  LOBYTE(v473[2]) = 1;
  if (v196 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v89 = v428;
  if (v196 >= 0x17)
  {
    v207 = (v196 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v196 | 7) != 0x17)
      v207 = v196 | 7;
    v208 = v207 + 1;
    v204 = (char *)operator new(v207 + 1);
    *(_QWORD *)&v473[3] = v196;
    *((_QWORD *)&v473[3] + 1) = v208 | 0x8000000000000000;
    *((_QWORD *)&v473[2] + 1) = v204;
  }
  else
  {
    HIBYTE(v473[3]) = v196;
    v204 = (char *)&v473[2] + 8;
    if (!v196)
    {
      BYTE8(v473[2]) = 0;
      LOBYTE(v473[4]) = 1;
      v205 = *(NSObject **)&v473[0];
      if ((SHIBYTE(v473[3]) & 0x80000000) == 0)
        goto LABEL_356;
LABEL_362:
      operator delete(*((void **)&v473[2] + 1));
      v88 = v422;
      v206 = v420;
      if (LOBYTE(v473[2]))
        goto LABEL_363;
      goto LABEL_365;
    }
  }
  memmove(v204, v195, v196);
  v204[v196] = 0;
  LOBYTE(v473[4]) = 1;
  v205 = *(NSObject **)&v473[0];
  if (SHIBYTE(v473[3]) < 0)
    goto LABEL_362;
LABEL_356:
  v88 = v422;
  v206 = v420;
  if (LOBYTE(v473[2]))
  {
LABEL_363:
    if (SHIBYTE(v473[1]) < 0)
      operator delete(*((void **)&v473[0] + 1));
  }
LABEL_365:
  if (*(_QWORD *)&v473[0])
    os_release(*(void **)&v473[0]);
  if (v192 && *(_QWORD *)(v192 + 24))
  {
    v209 = _os_log_pack_size();
    v210 = operator new(v209, (std::align_val_t)8uLL);
    v211 = (_QWORD *)operator new();
    *v211 = &off_24EC1F7F0;
    v211[1] = 0;
    v211[2] = 0;
    v211[3] = v210;
    *(_QWORD *)__p = v210;
    *(_QWORD *)&__p[8] = v210;
    *(_QWORD *)&__p[16] = v211;
    v464 = 0uLL;
    v212 = strlen((const char *)&__s);
    if (v212 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v213 = v212;
    if (v212 >= 0x17)
    {
      v216 = (v212 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v212 | 7) != 0x17)
        v216 = v212 | 7;
      v217 = v216 + 1;
      v214 = operator new(v216 + 1);
      v461[2] = v217 | 0x8000000000000000;
      v461[0] = v214;
      v461[1] = v213;
    }
    else
    {
      HIBYTE(v461[2]) = v212;
      v214 = v461;
      if (!v212)
        goto LABEL_381;
    }
    memcpy(v214, &__s, v213);
LABEL_381:
    *((_BYTE *)v214 + v213) = 0;
    v218 = v461[0];
    *(_QWORD *)__src = v461[1];
    *(_QWORD *)&__src[7] = *(_QWORD *)((char *)&v461[1] + 7);
    v219 = HIBYTE(v461[2]);
    v220 = operator new(0x38uLL);
    v220[1] = 0;
    v220[2] = 0;
    v220[3] = off_24EC1FA48;
    *v220 = &off_24EC1F9F8;
    v221 = *(_QWORD *)__src;
    v220[4] = v218;
    v220[5] = v221;
    *(_QWORD *)((char *)v220 + 47) = *(_QWORD *)&__src[7];
    *((_BYTE *)v220 + 55) = v219;
    *(_QWORD *)__src = 0;
    *(_QWORD *)&__src[7] = 0;
    v222 = (std::__shared_weak_count *)*((_QWORD *)&v464 + 1);
    *(_QWORD *)&v464 = v220 + 3;
    *((_QWORD *)&v464 + 1) = v220;
    v89 = v428;
    if (v222)
    {
      v223 = (unint64_t *)&v222->__shared_owners_;
      do
        v224 = __ldaxr(v223);
      while (__stlxr(v224 - 1, v223));
      if (!v224)
      {
        ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
        std::__shared_weak_count::__release_weak(v222);
      }
    }
    v473[0] = *(_OWORD *)__p;
    v225 = v464;
    *(_QWORD *)&v473[1] = *(_QWORD *)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v226 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v227 = __ldxr(v226);
      while (__stxr(v227 + 1, v226));
    }
    v228 = (std::__shared_weak_count *)*((_QWORD *)&v464 + 1);
    *((_QWORD *)&v473[1] + 1) = v225;
    *(_QWORD *)&v473[2] = *((_QWORD *)&v464 + 1);
    if (*((_QWORD *)&v464 + 1))
    {
      v229 = (unint64_t *)(*((_QWORD *)&v464 + 1) + 8);
      do
        v230 = __ldxr(v229);
      while (__stxr(v230 + 1, v229));
      *((_QWORD *)&v473[2] + 1) = v225;
      do
        v231 = __ldaxr(v229);
      while (__stlxr(v231 - 1, v229));
      if (!v231)
      {
        ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
        std::__shared_weak_count::__release_weak(v228);
      }
    }
    else
    {
      *((_QWORD *)&v473[2] + 1) = v225;
    }
    v232 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v233 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v234 = __ldaxr(v233);
      while (__stlxr(v234 - 1, v233));
      if (!v234)
      {
        ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
        std::__shared_weak_count::__release_weak(v232);
      }
    }
    v235 = *(_QWORD *)&v473[0];
    if (*(char *)(*((_QWORD *)&v473[2] + 1) + 31) >= 0)
      v236 = *((_QWORD *)&v473[2] + 1) + 8;
    else
      v236 = *(_QWORD *)(*((_QWORD *)&v473[2] + 1) + 8);
    v237 = _os_log_pack_fill();
    *(_DWORD *)v237 = 136315138;
    *(_QWORD *)(v237 + 4) = v236;
    v238 = operator new();
    v239 = *((unsigned __int8 *)v415 + 39);
    v240 = v413;
    if ((v239 & 0x80u) != 0)
    {
      v240 = (const char *)v415[2];
      v239 = v415[3];
    }
    *(_QWORD *)v238 = v235;
    *(_OWORD *)(v238 + 8) = *(_OWORD *)((char *)v473 + 8);
    *((_QWORD *)&v473[0] + 1) = 0;
    *(_QWORD *)&v473[1] = 0;
    *(_OWORD *)(v238 + 24) = *(_OWORD *)((char *)&v473[1] + 8);
    *((_QWORD *)&v473[1] + 1) = 0;
    *(_QWORD *)&v473[2] = 0;
    *(_QWORD *)(v238 + 40) = v240;
    *(_QWORD *)(v238 + 48) = v239;
    *(_BYTE *)(v238 + 56) = 16;
    v461[0] = 0;
    *(_QWORD *)__p = v238;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v192 + 24) + 40))(*(_QWORD *)(v192 + 24), __p);
    v241 = *(_QWORD *)__p;
    *(_QWORD *)__p = 0;
    if (v241)
    {
      v242 = *(std::__shared_weak_count **)(v241 + 32);
      if (v242)
      {
        v243 = (unint64_t *)&v242->__shared_owners_;
        do
          v244 = __ldaxr(v243);
        while (__stlxr(v244 - 1, v243));
        if (!v244)
        {
          ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
          std::__shared_weak_count::__release_weak(v242);
        }
      }
      v245 = *(std::__shared_weak_count **)(v241 + 16);
      if (v245)
      {
        v246 = (unint64_t *)&v245->__shared_owners_;
        do
          v247 = __ldaxr(v246);
        while (__stlxr(v247 - 1, v246));
        if (!v247)
        {
          ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
          std::__shared_weak_count::__release_weak(v245);
        }
      }
      MEMORY[0x227684CE8](v241, 0x10F0C40B62ED6C6);
      v248 = v461[0];
      v461[0] = 0;
      if (v248)
      {
        v249 = *(std::__shared_weak_count **)(v248 + 32);
        if (v249)
        {
          v250 = (unint64_t *)&v249->__shared_owners_;
          do
            v251 = __ldaxr(v250);
          while (__stlxr(v251 - 1, v250));
          if (!v251)
          {
            ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
            std::__shared_weak_count::__release_weak(v249);
          }
        }
        v252 = *(std::__shared_weak_count **)(v248 + 16);
        if (v252)
        {
          v253 = (unint64_t *)&v252->__shared_owners_;
          do
            v254 = __ldaxr(v253);
          while (__stlxr(v254 - 1, v253));
          if (!v254)
          {
            ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
            std::__shared_weak_count::__release_weak(v252);
          }
        }
        MEMORY[0x227684CE8](v248, 0x10F0C40B62ED6C6);
      }
    }
    v255 = *(std::__shared_weak_count **)&v473[2];
    if (*(_QWORD *)&v473[2])
    {
      v256 = (unint64_t *)(*(_QWORD *)&v473[2] + 8);
      do
        v257 = __ldaxr(v256);
      while (__stlxr(v257 - 1, v256));
      if (!v257)
      {
        ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
        std::__shared_weak_count::__release_weak(v255);
      }
    }
    v258 = *(std::__shared_weak_count **)&v473[1];
    if (*(_QWORD *)&v473[1])
    {
      v259 = (unint64_t *)(*(_QWORD *)&v473[1] + 8);
      do
        v260 = __ldaxr(v259);
      while (__stlxr(v260 - 1, v259));
      if (!v260)
      {
        ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
        std::__shared_weak_count::__release_weak(v258);
      }
    }
    if (v420)
    {
LABEL_441:
      sub_2245664AC(v87, v473);
      sub_22322C138((uint64_t)&v443, "GRS: removed external keyframe %s", (const char *)v473);
      sub_223182C08((uint64_t)&v443);
    }
  }
  else
  {
    os_log_type_enabled(v205, OS_LOG_TYPE_ERROR);
    LODWORD(v473[0]) = 136315138;
    *(_QWORD *)((char *)v473 + 4) = &__s;
    v215 = (void *)_os_log_send_and_compose_impl();
    if (v215)
      free(v215);
    if (v206)
      goto LABEL_441;
  }
  sub_223182C08((uint64_t)&v443);
  v261 = v451;
  if (v451)
  {
    v262 = (unint64_t *)&v451->__shared_owners_;
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
      std::__shared_weak_count::__release_weak(v261);
    }
  }
LABEL_447:
  v65 = v430;
  v264 = (char *)v430[1];
  v265 = v264 - (char *)(v188 + 16);
  if (v264 != (char *)(v188 + 16))
    memmove(v188, v188 + 16, v264 - (char *)(v188 + 16));
  v430[1] = (uint64_t)&v188[v265];
LABEL_460:
  while (1)
  {
    v87 += 16;
    if (v87 == v88)
      break;
    v90 = (uint64_t **)a2[1];
    if (v90)
      goto LABEL_144;
  }
LABEL_461:
  v266 = (char *)*v89;
  v267 = vcvtps_u32_f32((float)(a2[2] - v439) * 0.9);
  v268 = (v89[1] - *v89) >> 4;
  if (v267 <= 1)
    v269 = 1;
  else
    v269 = v267;
  v270 = (unsigned __int8 *)*v65;
  v271 = (unsigned __int8 *)v65[1];
  v272 = (uint64_t)&v271[-*v65] >> 4;
  v274 = v269 <= v268 || v269 <= v272;
  *v425 = v274;
  if (v274)
  {
    v275 = v269 > v268 || v269 > v272;
    v276 = (uint64_t *)v429;
    if (!v275)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/GenericGlobalReferenceSystem.cpp", 141, (uint64_t)"!(is_pose_update && is_external)", 32, (uint64_t)"Two events cannot coexist", 25, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v270 = (unsigned __int8 *)*v65;
      v271 = (unsigned __int8 *)v65[1];
    }
    sub_223C85278((_QWORD **)&v434, v270, v271);
    sub_223C85278(&v431, (unsigned __int8 *)*v428, (unsigned __int8 *)v428[1]);
    memset(v461, 0, sizeof(v461));
    v462 = 728333672;
    kdebug_trace();
    v277 = 0;
    v460 = 0;
    v459 = 0;
    v458 = &v459;
    if (v269 > v272)
    {
      sub_223475C18(&v458, v434, (unsigned __int8 *)&v435);
      v277 = v460;
    }
    v278 = (unint64_t *)&v436;
    if (v269 > v272)
      v278 = (unint64_t *)&v433;
    sub_223C1C938(a2[2], *v278, v277, v439, 1uLL, vcvtps_u32_f32((float)(a2[2] - (v277 + v439)) * 0.9), v269 <= v272);
    sub_223198030(a7, *(_QWORD **)(a7 + 8));
    *(_QWORD *)a7 = a7 + 8;
    *(_QWORD *)(a7 + 16) = 0;
    *(_QWORD *)(a7 + 8) = 0;
    v281 = (unsigned __int8 *)*a2;
    v280 = (unsigned __int8 *)(a2 + 1);
    v279 = v281;
    if (v281 != v280)
    {
      do
      {
        if (v269 > v272)
          v282 = (uint64_t ***)&v432;
        else
          v282 = (uint64_t ***)&v435;
        v283 = *v282;
        if (v283)
        {
          v284 = v279[25];
          while (1)
          {
            v285 = *((unsigned __int8 *)v283 + 25);
            v286 = v284 >= v285;
            if (v284 != v285)
              break;
            v287 = v279[26];
            v285 = *((unsigned __int8 *)v283 + 26);
            v286 = v287 >= v285;
            if (v287 != v285)
              goto LABEL_519;
            v287 = v279[27];
            v285 = *((unsigned __int8 *)v283 + 27);
            v286 = v287 >= v285;
            if (v287 != v285)
              goto LABEL_519;
            v287 = v279[28];
            v285 = *((unsigned __int8 *)v283 + 28);
            v286 = v287 >= v285;
            if (v287 != v285)
              goto LABEL_519;
            v287 = v279[29];
            v285 = *((unsigned __int8 *)v283 + 29);
            v286 = v287 >= v285;
            if (v287 != v285)
              goto LABEL_519;
            v287 = v279[30];
            v285 = *((unsigned __int8 *)v283 + 30);
            v286 = v287 >= v285;
            if (v287 != v285)
              goto LABEL_519;
            v288 = v279[31];
            v289 = *((unsigned __int8 *)v283 + 31);
            if (v288 != v289)
              goto LABEL_506;
            v288 = v279[32];
            v289 = *((unsigned __int8 *)v283 + 32);
            if (v288 != v289)
              goto LABEL_506;
            v288 = v279[33];
            v289 = *((unsigned __int8 *)v283 + 33);
            if (v288 != v289)
              goto LABEL_506;
            v288 = v279[34];
            v289 = *((unsigned __int8 *)v283 + 34);
            if (v288 != v289)
              goto LABEL_506;
            v288 = v279[35];
            v289 = *((unsigned __int8 *)v283 + 35);
            if (v288 != v289)
              goto LABEL_506;
            v288 = v279[36];
            v289 = *((unsigned __int8 *)v283 + 36);
            if (v288 != v289)
              goto LABEL_506;
            v288 = v279[37];
            v289 = *((unsigned __int8 *)v283 + 37);
            if (v288 != v289
              || (v288 = v279[38], v289 = *((unsigned __int8 *)v283 + 38), v288 != v289)
              || (v288 = v279[39], v289 = *((unsigned __int8 *)v283 + 39), v288 != v289)
              || (v288 = v279[40], v289 = *((unsigned __int8 *)v283 + 40), v288 != v289))
            {
LABEL_506:
              if (v288 < v289)
                goto LABEL_489;
            }
            v285 = *((unsigned __int8 *)v283 + 31);
            v287 = v279[31];
            if (v285 == v287)
            {
              v285 = *((unsigned __int8 *)v283 + 32);
              v287 = v279[32];
              if (v285 == v287)
              {
                v285 = *((unsigned __int8 *)v283 + 33);
                v287 = v279[33];
                if (v285 == v287)
                {
                  v285 = *((unsigned __int8 *)v283 + 34);
                  v287 = v279[34];
                  if (v285 == v287)
                  {
                    v285 = *((unsigned __int8 *)v283 + 35);
                    v287 = v279[35];
                    if (v285 == v287)
                    {
                      v285 = *((unsigned __int8 *)v283 + 36);
                      v287 = v279[36];
                      if (v285 == v287)
                      {
                        v285 = *((unsigned __int8 *)v283 + 37);
                        v287 = v279[37];
                        if (v285 == v287)
                        {
                          v285 = *((unsigned __int8 *)v283 + 38);
                          v287 = v279[38];
                          if (v285 == v287)
                          {
                            v285 = *((unsigned __int8 *)v283 + 39);
                            v287 = v279[39];
                            if (v285 == v287)
                            {
                              v285 = *((unsigned __int8 *)v283 + 40);
                              v287 = v279[40];
                              if (v285 == v287)
                                goto LABEL_524;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_521:
            if (v285 >= v287)
              goto LABEL_524;
            ++v283;
LABEL_489:
            v283 = (uint64_t **)*v283;
            if (!v283)
              goto LABEL_523;
          }
          v287 = v279[25];
LABEL_519:
          if (!v286)
            goto LABEL_489;
          goto LABEL_521;
        }
LABEL_523:
        sub_2231A9984((uint64_t **)a7, v279 + 25, v279 + 25);
LABEL_524:
        v290 = (unsigned __int8 *)*((_QWORD *)v279 + 1);
        if (v290)
        {
          do
          {
            v291 = v290;
            v290 = *(unsigned __int8 **)v290;
          }
          while (v290);
        }
        else
        {
          do
          {
            v291 = (unsigned __int8 *)*((_QWORD *)v279 + 2);
            v104 = *(_QWORD *)v291 == (_QWORD)v279;
            v279 = v291;
          }
          while (!v104);
        }
        v279 = v291;
      }
      while (v291 != v280);
      if (*(_QWORD *)(a7 + 16))
      {
        v410 = v269;
        v411 = v268;
        if (v269 > v272)
          v292 = "Pose Update";
        else
          v292 = "External";
        if (v269 > v272)
          v293 = 11;
        else
          v293 = 8;
        v457 = v293;
        memcpy(v456, v292, v293);
        *((_BYTE *)v456 + v293) = 0;
        v294 = *(uint64_t **)a7;
        v295 = (uint64_t *)(a7 + 8);
        if (*(_QWORD *)a7 != a7 + 8)
        {
          v296 = 0;
          while (1)
          {
            v455[5] = 7;
            strcpy((char *)&v453, "Unknown");
            v297 = v438;
            if (v438)
            {
              v298 = &v438;
              do
              {
                v299 = *((unsigned __int8 *)v297 + 25);
                v300 = *((unsigned __int8 *)v294 + 25);
                if (v299 != v300)
                  goto LABEL_560;
                v299 = *((unsigned __int8 *)v297 + 26);
                v300 = *((unsigned __int8 *)v294 + 26);
                if (v299 != v300)
                  goto LABEL_560;
                v299 = *((unsigned __int8 *)v297 + 27);
                v300 = *((unsigned __int8 *)v294 + 27);
                if (v299 != v300)
                  goto LABEL_560;
                v299 = *((unsigned __int8 *)v297 + 28);
                v300 = *((unsigned __int8 *)v294 + 28);
                if (v299 != v300)
                  goto LABEL_560;
                v299 = *((unsigned __int8 *)v297 + 29);
                v300 = *((unsigned __int8 *)v294 + 29);
                if (v299 != v300)
                  goto LABEL_560;
                v299 = *((unsigned __int8 *)v297 + 30);
                v300 = *((unsigned __int8 *)v294 + 30);
                if (v299 != v300)
                  goto LABEL_560;
                v299 = *((unsigned __int8 *)v297 + 31);
                v300 = *((unsigned __int8 *)v294 + 31);
                if (v299 != v300)
                  goto LABEL_560;
                v299 = *((unsigned __int8 *)v297 + 32);
                v300 = *((unsigned __int8 *)v294 + 32);
                if (v299 != v300)
                  goto LABEL_560;
                v299 = *((unsigned __int8 *)v297 + 33);
                v300 = *((unsigned __int8 *)v294 + 33);
                if (v299 != v300)
                  goto LABEL_560;
                v299 = *((unsigned __int8 *)v297 + 34);
                v300 = *((unsigned __int8 *)v294 + 34);
                if (v299 != v300)
                  goto LABEL_560;
                v299 = *((unsigned __int8 *)v297 + 35);
                v300 = *((unsigned __int8 *)v294 + 35);
                if (v299 != v300)
                  goto LABEL_560;
                v299 = *((unsigned __int8 *)v297 + 36);
                v300 = *((unsigned __int8 *)v294 + 36);
                if (v299 != v300)
                  goto LABEL_560;
                v299 = *((unsigned __int8 *)v297 + 37);
                v300 = *((unsigned __int8 *)v294 + 37);
                if (v299 != v300)
                  goto LABEL_560;
                v299 = *((unsigned __int8 *)v297 + 38);
                v300 = *((unsigned __int8 *)v294 + 38);
                if (v299 == v300
                  && (v299 = *((unsigned __int8 *)v297 + 39), v300 = *((unsigned __int8 *)v294 + 39), v299 == v300)
                  && (v299 = *((unsigned __int8 *)v297 + 40), v300 = *((unsigned __int8 *)v294 + 40), v299 == v300))
                {
                  v298 = (uint64_t **)v297;
                }
                else
                {
LABEL_560:
                  if (v299 < v300)
                    ++v297;
                  else
                    v298 = (uint64_t **)v297;
                }
                v297 = (uint64_t *)*v297;
              }
              while (v297);
              if (v298 != &v438
                && ((char)sub_22319835C((unsigned __int8 *)v294 + 25, (unsigned __int8 *)v298 + 25) & 0x80000000) == 0)
              {
                break;
              }
            }
            v303 = v459;
            if (v459)
            {
              v304 = &v459;
              do
              {
                v305 = (_QWORD **)v303;
                v306 = v304;
                v307 = *((unsigned __int8 *)v303 + 25);
                v308 = *((unsigned __int8 *)v294 + 25);
                if (v307 != v308)
                  goto LABEL_587;
                v307 = *((unsigned __int8 *)v303 + 26);
                v308 = *((unsigned __int8 *)v294 + 26);
                if (v307 != v308)
                  goto LABEL_587;
                v307 = *((unsigned __int8 *)v303 + 27);
                v308 = *((unsigned __int8 *)v294 + 27);
                if (v307 != v308)
                  goto LABEL_587;
                v307 = *((unsigned __int8 *)v303 + 28);
                v308 = *((unsigned __int8 *)v294 + 28);
                if (v307 != v308)
                  goto LABEL_587;
                v307 = *((unsigned __int8 *)v303 + 29);
                v308 = *((unsigned __int8 *)v294 + 29);
                if (v307 != v308)
                  goto LABEL_587;
                v307 = *((unsigned __int8 *)v303 + 30);
                v308 = *((unsigned __int8 *)v294 + 30);
                if (v307 != v308)
                  goto LABEL_587;
                v307 = *((unsigned __int8 *)v303 + 31);
                v308 = *((unsigned __int8 *)v294 + 31);
                if (v307 != v308)
                  goto LABEL_587;
                v307 = *((unsigned __int8 *)v303 + 32);
                v308 = *((unsigned __int8 *)v294 + 32);
                if (v307 != v308)
                  goto LABEL_587;
                v307 = *((unsigned __int8 *)v303 + 33);
                v308 = *((unsigned __int8 *)v294 + 33);
                if (v307 != v308)
                  goto LABEL_587;
                v307 = *((unsigned __int8 *)v303 + 34);
                v308 = *((unsigned __int8 *)v294 + 34);
                if (v307 != v308)
                  goto LABEL_587;
                v307 = *((unsigned __int8 *)v303 + 35);
                v308 = *((unsigned __int8 *)v294 + 35);
                if (v307 != v308)
                  goto LABEL_587;
                v307 = *((unsigned __int8 *)v303 + 36);
                v308 = *((unsigned __int8 *)v294 + 36);
                if (v307 != v308)
                  goto LABEL_587;
                v307 = *((unsigned __int8 *)v303 + 37);
                v308 = *((unsigned __int8 *)v294 + 37);
                if (v307 != v308)
                  goto LABEL_587;
                v307 = *((unsigned __int8 *)v303 + 38);
                v308 = *((unsigned __int8 *)v294 + 38);
                if (v307 == v308
                  && (v307 = *((unsigned __int8 *)v303 + 39), v308 = *((unsigned __int8 *)v294 + 39), v307 == v308)
                  && (v307 = *((unsigned __int8 *)v303 + 40), v308 = *((unsigned __int8 *)v294 + 40), v307 == v308))
                {
                  v309 = 0;
                  v304 = (_QWORD **)v303;
                }
                else
                {
LABEL_587:
                  v310 = v307 >= v308;
                  if (v307 >= v308)
                  {
                    v309 = 0;
                  }
                  else
                  {
                    ++v303;
                    v309 = 1;
                  }
                  if (v310)
                    v304 = v305;
                  else
                    v304 = v306;
                }
                v303 = (_QWORD *)*v303;
              }
              while (v303);
              if (v304 != &v459)
              {
                v311 = (char *)v305 + 25;
                v312 = (char *)v306 + 25;
                v313 = (unsigned __int8 *)(v309 ? v312 : v311);
                if (((char)sub_22319835C((unsigned __int8 *)v294 + 25, v313) & 0x80000000) == 0)
                {
                  if ((v455[5] & 0x80000000) != 0)
                  {
                    v454 = 18;
                    v314 = v453;
                    v302 = (char *)v453 + 18;
                  }
                  else
                  {
                    v455[5] = 18;
                    v314 = &v453;
                    v302 = v455;
                  }
                  v314[8] = 27745;
                  *(_OWORD *)v314 = *(_OWORD *)"Non-graph external";
                  goto LABEL_605;
                }
              }
            }
LABEL_606:
            sub_223C7AE28(&v452);
            if (**(int **)(v452 + 56) > 3
              || (v315 = *(unsigned __int8 *)(v452 + 72),
                  v316 = sub_22322F254(v452, "OSLogSurrogateAppender", 1, 0),
                  v317 = v316,
                  !v315)
              && !v316)
            {
              if ((v455[5] & 0x80000000) == 0)
                goto LABEL_610;
              goto LABEL_762;
            }
            v423 = v315;
            v443 = &v452;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v445 = std::chrono::system_clock::now().__d_.__rep_;
            v446 = 3;
            v447 = "unknown file";
            v448 = 106;
            v449 = "unknown function";
            v450 = 0;
            v451 = 0;
            v319 = *(_QWORD *)(a7 + 16);
            sub_2245664AC((unsigned __int8 *)v294 + 25, __src);
            v421 = v319;
            if (v457 >= 0)
              v320 = v456;
            else
              v320 = (void **)v456[0];
            v321 = (char *)&v453;
            if (v455[5] < 0)
              v321 = (char *)v453;
            v424 = v321;
            v426 = (char *)v320;
            v322 = *v443;
            v323 = (const char *)(*v443 + 16);
            v416 = *v443;
            v417 = v323;
            if (*(char *)(*v443 + 39) < 0)
            {
              v323 = *(const char **)(v322 + 16);
              v324 = *(_QWORD *)(v322 + 24);
              v326 = atomic_load((unsigned __int8 *)&qword_255788F58);
              v418 = (unsigned __int8 *)v294 + 25;
              if ((v326 & 1) != 0)
                goto LABEL_621;
            }
            else
            {
              v324 = *(unsigned __int8 *)(*v443 + 39);
              v325 = atomic_load((unsigned __int8 *)&qword_255788F58);
              v418 = (unsigned __int8 *)v294 + 25;
              if ((v325 & 1) != 0)
                goto LABEL_621;
            }
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)__p);
              sub_223199C58("com.apple.cv3d", (unint64_t)__p, byte_255788F40);
              if ((_BYTE)v464 && (__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
LABEL_621:
            if (byte_255788F40[23] >= 0)
              v327 = byte_255788F40;
            else
              v327 = *(const char **)byte_255788F40;
            if (byte_255788F40[23] >= 0)
              v328 = byte_255788F40[23];
            else
              v328 = *(_QWORD *)&byte_255788F40[8];
            *(_QWORD *)&v473[0] = os_log_create(v327, v323);
            if (v328 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v328 >= 0x17)
            {
              v330 = (v328 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v328 | 7) != 0x17)
                v330 = v328 | 7;
              v331 = v330 + 1;
              v329 = (char *)operator new(v330 + 1);
              *(_QWORD *)&v473[1] = v328;
              *((_QWORD *)&v473[1] + 1) = v331 | 0x8000000000000000;
              *((_QWORD *)&v473[0] + 1) = v329;
LABEL_634:
              memmove(v329, v327, v328);
              goto LABEL_635;
            }
            HIBYTE(v473[1]) = v328;
            v329 = (char *)v473 + 8;
            if (v328)
              goto LABEL_634;
LABEL_635:
            v329[v328] = 0;
            LOBYTE(v473[2]) = 1;
            if (v324 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v324 >= 0x17)
            {
              v334 = (v324 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v324 | 7) != 0x17)
                v334 = v324 | 7;
              v335 = v334 + 1;
              v332 = (char *)operator new(v334 + 1);
              *(_QWORD *)&v473[3] = v324;
              *((_QWORD *)&v473[3] + 1) = v335 | 0x8000000000000000;
              *((_QWORD *)&v473[2] + 1) = v332;
            }
            else
            {
              HIBYTE(v473[3]) = v324;
              v332 = (char *)&v473[2] + 8;
              if (!v324)
              {
                BYTE8(v473[2]) = 0;
                LOBYTE(v473[4]) = 1;
                v333 = *(NSObject **)&v473[0];
                if ((SHIBYTE(v473[3]) & 0x80000000) == 0)
                  goto LABEL_639;
                goto LABEL_645;
              }
            }
            memmove(v332, v323, v324);
            v332[v324] = 0;
            LOBYTE(v473[4]) = 1;
            v333 = *(NSObject **)&v473[0];
            if ((SHIBYTE(v473[3]) & 0x80000000) == 0)
            {
LABEL_639:
              if (!LOBYTE(v473[2]))
                goto LABEL_648;
              goto LABEL_646;
            }
LABEL_645:
            operator delete(*((void **)&v473[2] + 1));
            if (!LOBYTE(v473[2]))
              goto LABEL_648;
LABEL_646:
            if (SHIBYTE(v473[1]) < 0)
              operator delete(*((void **)&v473[0] + 1));
LABEL_648:
            if (*(_QWORD *)&v473[0])
              os_release(*(void **)&v473[0]);
            v336 = v296 + 1;
            if (v317 && *(_QWORD *)(v317 + 24))
            {
              v337 = _os_log_pack_size();
              v338 = (std::__shared_weak_count_vtbl *)operator new(v337, (std::align_val_t)8uLL);
              v339 = (std::__shared_weak_count *)operator new();
              v339->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v339->__shared_owners_ = 0;
              v339->__shared_weak_owners_ = 0;
              v339[1].__vftable = v338;
              *(_QWORD *)&__s = v338;
              *((_QWORD *)&__s + 1) = v338;
              v475 = v339;
              v476 = 0;
              v477 = 0;
              v340 = strlen(__src);
              if (v340 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v341 = v340;
              if (v340 >= 0x17)
              {
                v344 = (v340 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v340 | 7) != 0x17)
                  v344 = v340 | 7;
                v345 = v344 + 1;
                v342 = (uint64_t *)operator new(v344 + 1);
                *((_QWORD *)&v471 + 1) = v345 | 0x8000000000000000;
                v470 = v342;
                *(_QWORD *)&v471 = v341;
              }
              else
              {
                HIBYTE(v471) = v340;
                v342 = (uint64_t *)&v470;
                if (!v340)
                {
LABEL_664:
                  *((_BYTE *)v342 + v341) = 0;
                  v346 = strlen(v426);
                  if (v346 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v347 = v346;
                  if (v346 >= 0x17)
                  {
                    v349 = (v346 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v346 | 7) != 0x17)
                      v349 = v346 | 7;
                    v350 = v349 + 1;
                    v348 = operator new(v349 + 1);
                    *((_QWORD *)&v469 + 1) = v350 | 0x8000000000000000;
                    v468 = v348;
                    *(_QWORD *)&v469 = v347;
                  }
                  else
                  {
                    HIBYTE(v469) = v346;
                    v348 = &v468;
                    if (!v346)
                    {
LABEL_672:
                      *((_BYTE *)v348 + v347) = 0;
                      v351 = strlen(v424);
                      if (v351 > 0x7FFFFFFFFFFFFFF7)
                        sub_22316DBC0();
                      v352 = v351;
                      if (v351 >= 0x17)
                      {
                        v354 = (v351 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v351 | 7) != 0x17)
                          v354 = v351 | 7;
                        v355 = v354 + 1;
                        v353 = operator new(v354 + 1);
                        *((_QWORD *)&v467 + 1) = v355 | 0x8000000000000000;
                        v466 = v353;
                        *(_QWORD *)&v467 = v352;
                      }
                      else
                      {
                        HIBYTE(v467) = v351;
                        v353 = &v466;
                        if (!v351)
                          goto LABEL_680;
                      }
                      memcpy(v353, v424, v352);
LABEL_680:
                      *((_BYTE *)v353 + v352) = 0;
                      *(_QWORD *)&v473[1] = v471;
                      *(_QWORD *)((char *)&v473[1] + 7) = *(_QWORD *)((char *)&v471 + 7);
                      *((_QWORD *)&v473[2] + 1) = v469;
                      *(_QWORD *)((char *)&v473[2] + 15) = *(_QWORD *)((char *)&v469 + 7);
                      *(_QWORD *)((char *)&v473[4] + 7) = *(_QWORD *)((char *)&v467 + 7);
                      *(_QWORD *)&v473[4] = v467;
                      *(_QWORD *)&v473[0] = off_24EC61C80;
                      *((_QWORD *)&v473[0] + 1) = v470;
                      HIBYTE(v473[1]) = HIBYTE(v471);
                      *(_QWORD *)&v473[2] = v468;
                      BYTE7(v473[3]) = HIBYTE(v469);
                      *((_QWORD *)&v473[3] + 1) = v466;
                      HIBYTE(v473[4]) = HIBYTE(v467);
                      v356 = (char *)operator new(0x68uLL);
                      *((_QWORD *)v356 + 1) = 0;
                      *((_QWORD *)v356 + 2) = 0;
                      *(_QWORD *)v356 = &off_24EC61C30;
                      *((_QWORD *)v356 + 3) = off_24EC61C80;
                      *((_OWORD *)v356 + 2) = *(_OWORD *)((char *)v473 + 8);
                      *((_QWORD *)v356 + 6) = *((_QWORD *)&v473[1] + 1);
                      memset((char *)v473 + 8, 0, 24);
                      *(_OWORD *)(v356 + 56) = v473[2];
                      *((_QWORD *)v356 + 9) = *(_QWORD *)&v473[3];
                      memset(&v473[2], 0, 24);
                      v357 = *(_OWORD *)((char *)&v473[3] + 8);
                      *((_QWORD *)v356 + 12) = *((_QWORD *)&v473[4] + 1);
                      *((_OWORD *)v356 + 5) = v357;
                      memset((char *)&v473[3] + 8, 0, 24);
                      v358 = v477;
                      v476 = v356 + 24;
                      v477 = (std::__shared_weak_count *)v356;
                      if (!v358)
                        goto LABEL_684;
                      v359 = (unint64_t *)&v358->__shared_owners_;
                      do
                        v360 = __ldaxr(v359);
                      while (__stlxr(v360 - 1, v359));
                      if (!v360)
                      {
                        ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
                        std::__shared_weak_count::__release_weak(v358);
                        if (SHIBYTE(v473[4]) < 0)
                          goto LABEL_690;
LABEL_685:
                        if ((SBYTE7(v473[3]) & 0x80000000) == 0)
                          goto LABEL_686;
LABEL_691:
                        operator delete(*(void **)&v473[2]);
                        if (SHIBYTE(v473[1]) < 0)
                          goto LABEL_692;
LABEL_687:
                        *(_OWORD *)__p = __s;
                        v362 = v475;
                        v361 = v476;
                        *(_QWORD *)&__p[16] = v475;
                        if (v475)
                        {
LABEL_693:
                          v363 = (unint64_t *)&v362->__shared_owners_;
                          do
                            v364 = __ldxr(v363);
                          while (__stxr(v364 + 1, v363));
                        }
                      }
                      else
                      {
LABEL_684:
                        if ((SHIBYTE(v473[4]) & 0x80000000) == 0)
                          goto LABEL_685;
LABEL_690:
                        operator delete(*((void **)&v473[3] + 1));
                        if (SBYTE7(v473[3]) < 0)
                          goto LABEL_691;
LABEL_686:
                        if ((SHIBYTE(v473[1]) & 0x80000000) == 0)
                          goto LABEL_687;
LABEL_692:
                        operator delete(*((void **)&v473[0] + 1));
                        *(_OWORD *)__p = __s;
                        v362 = v475;
                        v361 = v476;
                        *(_QWORD *)&__p[16] = v475;
                        if (v475)
                          goto LABEL_693;
                      }
                      v365 = v477;
                      *(_QWORD *)&v464 = v361;
                      *((_QWORD *)&v464 + 1) = v477;
                      if (v477)
                      {
                        v366 = (unint64_t *)&v477->__shared_owners_;
                        do
                          v367 = __ldxr(v366);
                        while (__stxr(v367 + 1, v366));
                        v465 = v361;
                        do
                          v368 = __ldaxr(v366);
                        while (__stlxr(v368 - 1, v366));
                        if (!v368)
                        {
                          ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
                          std::__shared_weak_count::__release_weak(v365);
                        }
                      }
                      else
                      {
                        v465 = v361;
                      }
                      v369 = v475;
                      if (v475)
                      {
                        v370 = (unint64_t *)&v475->__shared_owners_;
                        do
                          v371 = __ldaxr(v370);
                        while (__stlxr(v371 - 1, v370));
                        if (!v371)
                        {
                          ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
                          std::__shared_weak_count::__release_weak(v369);
                        }
                      }
                      v372 = *(_QWORD *)__p;
                      if (v465[31] >= 0)
                        v373 = v465 + 8;
                      else
                        v373 = (char *)*((_QWORD *)v465 + 1);
                      if (v465[55] >= 0)
                        v374 = v465 + 32;
                      else
                        v374 = (char *)*((_QWORD *)v465 + 4);
                      if (v465[79] >= 0)
                        v375 = v465 + 56;
                      else
                        v375 = (char *)*((_QWORD *)v465 + 7);
                      v376 = _os_log_pack_fill();
                      *(_DWORD *)v376 = 134219010;
                      *(_QWORD *)(v376 + 4) = v296 + 1;
                      *(_WORD *)(v376 + 12) = 2048;
                      *(_QWORD *)(v376 + 14) = v421;
                      *(_WORD *)(v376 + 22) = 2080;
                      *(_QWORD *)(v376 + 24) = v373;
                      *(_WORD *)(v376 + 32) = 2080;
                      *(_QWORD *)(v376 + 34) = v374;
                      *(_WORD *)(v376 + 42) = 2080;
                      *(_QWORD *)(v376 + 44) = v375;
                      v377 = operator new();
                      v378 = *(unsigned __int8 *)(v416 + 39);
                      v379 = *(const char **)(v416 + 16);
                      v380 = *(_QWORD *)(v416 + 24);
                      v381 = v464;
                      *(_OWORD *)(v377 + 8) = *(_OWORD *)&__p[8];
                      if ((v378 & 0x80u) != 0)
                        v378 = v380;
                      else
                        v379 = v417;
                      *(_QWORD *)v377 = v372;
                      *(_QWORD *)&__p[8] = 0;
                      *(_QWORD *)&__p[16] = 0;
                      *(_OWORD *)(v377 + 24) = v381;
                      v464 = 0uLL;
                      *(_QWORD *)(v377 + 40) = v379;
                      *(_QWORD *)(v377 + 48) = v378;
                      *(_BYTE *)(v377 + 56) = 1;
                      *(_QWORD *)&__s = 0;
                      *(_QWORD *)&v473[0] = v377;
                      (*(void (**)(_QWORD, _OWORD *))(**(_QWORD **)(v317 + 24) + 40))(*(_QWORD *)(v317 + 24), v473);
                      v382 = *(_QWORD *)&v473[0];
                      *(_QWORD *)&v473[0] = 0;
                      if (v382)
                      {
                        v383 = *(std::__shared_weak_count **)(v382 + 32);
                        if (v383)
                        {
                          v384 = (unint64_t *)&v383->__shared_owners_;
                          do
                            v385 = __ldaxr(v384);
                          while (__stlxr(v385 - 1, v384));
                          if (!v385)
                          {
                            ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
                            std::__shared_weak_count::__release_weak(v383);
                          }
                        }
                        v386 = *(std::__shared_weak_count **)(v382 + 16);
                        if (v386)
                        {
                          v387 = (unint64_t *)&v386->__shared_owners_;
                          do
                            v388 = __ldaxr(v387);
                          while (__stlxr(v388 - 1, v387));
                          if (!v388)
                          {
                            ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
                            std::__shared_weak_count::__release_weak(v386);
                          }
                        }
                        MEMORY[0x227684CE8](v382, 0x10F0C40B62ED6C6);
                        v389 = __s;
                        *(_QWORD *)&__s = 0;
                        if (v389)
                        {
                          v390 = *(std::__shared_weak_count **)(v389 + 32);
                          if (v390)
                          {
                            v391 = (unint64_t *)&v390->__shared_owners_;
                            do
                              v392 = __ldaxr(v391);
                            while (__stlxr(v392 - 1, v391));
                            if (!v392)
                            {
                              ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
                              std::__shared_weak_count::__release_weak(v390);
                            }
                          }
                          v393 = *(std::__shared_weak_count **)(v389 + 16);
                          if (v393)
                          {
                            v394 = (unint64_t *)&v393->__shared_owners_;
                            do
                              v395 = __ldaxr(v394);
                            while (__stlxr(v395 - 1, v394));
                            if (!v395)
                            {
                              ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
                              std::__shared_weak_count::__release_weak(v393);
                            }
                          }
                          MEMORY[0x227684CE8](v389, 0x10F0C40B62ED6C6);
                        }
                      }
                      v396 = (std::__shared_weak_count *)*((_QWORD *)&v464 + 1);
                      v295 = (uint64_t *)(a7 + 8);
                      if (!*((_QWORD *)&v464 + 1))
                        goto LABEL_747;
                      v397 = (unint64_t *)(*((_QWORD *)&v464 + 1) + 8);
                      do
                        v398 = __ldaxr(v397);
                      while (__stlxr(v398 - 1, v397));
                      if (!v398)
                      {
                        ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
                        std::__shared_weak_count::__release_weak(v396);
                        v399 = *(std::__shared_weak_count **)&__p[16];
                        if (*(_QWORD *)&__p[16])
                          goto LABEL_748;
                      }
                      else
                      {
LABEL_747:
                        v399 = *(std::__shared_weak_count **)&__p[16];
                        if (*(_QWORD *)&__p[16])
                        {
LABEL_748:
                          v400 = (unint64_t *)&v399->__shared_owners_;
                          do
                            v401 = __ldaxr(v400);
                          while (__stlxr(v401 - 1, v400));
                          if (v401)
                            goto LABEL_751;
                          ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
                          std::__shared_weak_count::__release_weak(v399);
                          v336 = v296 + 1;
                          if (!v423)
                            goto LABEL_757;
LABEL_752:
                          v402 = *(_QWORD *)(a7 + 16);
                          sub_2245664AC(v418, v473);
                          v403 = v456;
                          if (v457 < 0)
                            v403 = (void **)v456[0];
                          v404 = (const char *)&v453;
                          if (v455[5] < 0)
                            v404 = (const char *)v453;
                          sub_22322C138((uint64_t)&v443, "GRS: Invalid-UUID %lu/%lu  uuid: %s type: %s reason: %s", v336, v402, (const char *)v473, (const char *)v403, v404);
                          sub_223182C08((uint64_t)&v443);
                          goto LABEL_757;
                        }
                      }
LABEL_751:
                      v336 = v296 + 1;
                      if (!v423)
                        goto LABEL_757;
                      goto LABEL_752;
                    }
                  }
                  memcpy(v348, v426, v347);
                  goto LABEL_672;
                }
              }
              memcpy(v342, __src, v341);
              goto LABEL_664;
            }
            os_log_type_enabled(v333, OS_LOG_TYPE_INFO);
            LODWORD(v473[0]) = 134219010;
            *(_QWORD *)((char *)v473 + 4) = v296 + 1;
            WORD6(v473[0]) = 2048;
            *(_QWORD *)((char *)v473 + 14) = v421;
            WORD3(v473[1]) = 2080;
            *((_QWORD *)&v473[1] + 1) = __src;
            LOWORD(v473[2]) = 2080;
            *(_QWORD *)((char *)&v473[2] + 2) = v426;
            WORD5(v473[2]) = 2080;
            *(_QWORD *)((char *)&v473[2] + 12) = v424;
            v343 = (void *)_os_log_send_and_compose_impl();
            v295 = (uint64_t *)(a7 + 8);
            if (v343)
              free(v343);
            if (v423)
              goto LABEL_752;
LABEL_757:
            sub_223182C08((uint64_t)&v443);
            v405 = v451;
            if (!v451)
              goto LABEL_761;
            v406 = (unint64_t *)&v451->__shared_owners_;
            do
              v407 = __ldaxr(v406);
            while (__stlxr(v407 - 1, v406));
            if (!v407)
            {
              ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
              std::__shared_weak_count::__release_weak(v405);
              if ((v455[5] & 0x80000000) == 0)
              {
LABEL_610:
                v318 = (uint64_t *)v294[1];
                v65 = v430;
                if (v318)
                  goto LABEL_763;
                goto LABEL_765;
              }
            }
            else
            {
LABEL_761:
              if ((v455[5] & 0x80000000) == 0)
                goto LABEL_610;
            }
LABEL_762:
            operator delete(v453);
            v318 = (uint64_t *)v294[1];
            v65 = v430;
            if (v318)
            {
              do
              {
LABEL_763:
                v408 = v318;
                v318 = (uint64_t *)*v318;
              }
              while (v318);
              goto LABEL_540;
            }
            do
            {
LABEL_765:
              v408 = (uint64_t *)v294[2];
              v104 = *v408 == (_QWORD)v294;
              v294 = v408;
            }
            while (!v104);
LABEL_540:
            ++v296;
            v294 = v408;
            if (v408 == v295)
              goto LABEL_779;
          }
          if ((v455[5] & 0x80000000) != 0)
          {
            v454 = 7;
            v301 = v453;
            v302 = (char *)v453 + 7;
          }
          else
          {
            v455[5] = 7;
            v301 = &v453;
            v302 = (char *)&v453 + 7;
          }
          *(_DWORD *)((char *)v301 + 3) = 1684371055;
          *v301 = 1869440338;
LABEL_605:
          *v302 = 0;
          goto LABEL_606;
        }
LABEL_779:
        if (v457 < 0)
          operator delete(v456[0]);
        v276 = (uint64_t *)v429;
        v269 = v410;
        v268 = v411;
      }
    }
    sub_223198030((uint64_t)&v458, v459);
    kdebug_trace();
    if (v269 > v268)
    {
      v428[1] = *v428;
      v65 = v276;
    }
    v65[1] = *v65;
    sub_223198030((uint64_t)&v431, v432);
    sub_223198030((uint64_t)&v434, v435);
  }
  else
  {
    v89[1] = (uint64_t)v266;
    v429[1] = *v429;
    v65[1] = (uint64_t)v270;
    sub_223198030(a7, *(_QWORD **)(a7 + 8));
    *(_QWORD *)a7 = a7 + 8;
    *(_QWORD *)(a7 + 16) = 0;
    *(_QWORD *)(a7 + 8) = 0;
  }
  sub_223198030((uint64_t)&v437, v438);
  return kdebug_trace();
}

void sub_223C7E27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;

  if (LOBYTE(STACK[0x298]) && SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a64);
  if (SLOBYTE(STACK[0x21F]) < 0)
    operator delete((void *)STACK[0x208]);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  sub_223198030((uint64_t)&STACK[0x238], (_QWORD *)STACK[0x240]);
  sub_2231874DC((uint64_t)&STACK[0x250]);
  sub_223198030((uint64_t)&a50, (_QWORD *)a51);
  sub_223198030((uint64_t)&a53, (_QWORD *)a54);
  sub_223198030((uint64_t)&a56, (_QWORD *)a57);
  sub_2231874DC((uint64_t)&a59);
  _Unwind_Resume(a1);
}

void sub_223C7E650(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, _QWORD *a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, double a10, double a11, double a12, int8x16_t a13)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x2_t v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t *v33;
  int32x2_t *v34;
  int32x4_t v35;
  int8x16_t v36;
  int32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  unsigned __int8 *v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x16_t v66;
  float32x4_t v67;
  int8x16_t v68;
  float32x2_t v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  __float2 v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float v84;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  _OWORD v90[3];
  float32x4_t v91;
  _BYTE v92[32];
  uint64_t v93;
  float32x2_t *v94[3];

  v16 = *a4;
  v17 = a4[1];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (v16 != v17)
  {
    v18 = v17 - v16;
    if ((v18 & 0xFFFFFFFF0) != 0)
    {
      v24 = 0;
      v25.i32[0] = *((_DWORD *)a5 + 2);
      v26 = (float32x2_t)a5[2];
      v27 = (float32x2_t)a5[4];
      v14.i64[0] = a5[6];
      v14.i32[2] = *((_DWORD *)a5 + 14);
      v15.i32[0] = *((_DWORD *)a5 + 10);
      v28 = (int8x16_t)vnegq_f32(v14);
      v29 = vmulq_n_f32(a6, v25.f32[0]);
      v25.i32[1] = *((_DWORD *)a5 + 6);
      v30 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)a5, (int32x2_t)v26), *(float *)v28.i32), (float32x2_t)vzip2_s32(*(int32x2_t *)a5, (int32x2_t)v26), *(float32x2_t *)v14.f32, 1), v25, v14, 2);
      *(float32x2_t *)v31.i8 = vmla_f32(vmls_lane_f32(vmul_f32(v27, *(float32x2_t *)v28.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v27, 1), *(float32x2_t *)v14.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), v15);
      v87 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(a6, *(float32x2_t *)a5, 1), a7, v26, 1), a8, v27, 1), (float32x4_t)0, a9);
      v88 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a6, COERCE_FLOAT(*a5)), a7, v26.f32[0]), a8, v27.f32[0]), (float32x4_t)0, a9);
      v89 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v29, a7, *((float *)a5 + 6)), a8, v15.f32[0]), (float32x4_t)0, a9);
      v32 = (v18 >> 4);
      v86 = vaddq_f32(a9, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(a6, v30.f32[0]), a7, v30, 1), a8, *(float *)v31.i32));
      do
      {
        v33 = *(uint64_t **)(a2 + 8);
        if (!v33)
LABEL_56:
          sub_223198218("map::at:  key not found");
        v34 = (int32x2_t *)(*a3 + (v24 << 6));
        *(int32x2_t *)a7.f32 = *v34;
        *(int32x2_t *)a8.f32 = v34[2];
        v37 = vzip1q_s32((int32x4_t)a7, (int32x4_t)a8);
        v35 = (int32x4_t)a7;
        v35.i32[2] = v34[1].i32[0];
        v36 = (int8x16_t)a8;
        v36.i32[2] = v34[3].i32[0];
        v31.i32[0] = v34[5].i32[0];
        *(int32x2_t *)a13.i8 = v34[4];
        v37.i32[2] = a13.i32[0];
        v40 = vtrn2q_s32(v35, (int32x4_t)v36);
        *(int32x2_t *)v13.f32 = v34[6];
        v13.i32[2] = v34[7].i32[0];
        v38 = (int8x16_t)vnegq_f32(v13);
        v40.i32[2] = a13.i32[1];
        v39 = a13;
        v39.i32[2] = v31.i32[0];
        v41 = vzip2q_s32(v35, (int32x4_t)v36);
        *(float32x2_t *)v42.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*v34, *(int32x2_t *)a8.f32), *(float *)v38.i32), *(float32x2_t *)v40.i8, *(float32x2_t *)v13.f32, 1), *(float32x2_t *)v41.i8, v13, 2);
        v41.i32[2] = v31.i32[0];
        v40.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v40, 0).i32[3];
        v41.i32[2] = vdupq_laneq_s32(v41, 2).u32[0];
        *(float32x2_t *)&v42.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)a13.i8, *(float32x2_t *)v38.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a13.i8, 1), *(float32x2_t *)v13.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL), *(float32x2_t *)v31.i8);
        v43 = (unsigned __int8 *)(*a4 + 16 * v24);
        v44 = *v43;
        while (1)
        {
          v45 = *((unsigned __int8 *)v33 + 28);
          v46 = v44 >= v45;
          if (v44 == v45)
            break;
          v47 = *v43;
LABEL_40:
          if (v46)
          {
LABEL_42:
            if (v45 >= v47)
              goto LABEL_45;
            v33 = (uint64_t *)v33[1];
            if (!v33)
              goto LABEL_56;
          }
          else
          {
LABEL_8:
            v33 = (uint64_t *)*v33;
            if (!v33)
              goto LABEL_56;
          }
        }
        v47 = v43[1];
        v45 = *((unsigned __int8 *)v33 + 29);
        v46 = v47 >= v45;
        if (v47 != v45)
          goto LABEL_40;
        v47 = v43[2];
        v45 = *((unsigned __int8 *)v33 + 30);
        v46 = v47 >= v45;
        if (v47 != v45)
          goto LABEL_40;
        v47 = v43[3];
        v45 = *((unsigned __int8 *)v33 + 31);
        v46 = v47 >= v45;
        if (v47 != v45)
          goto LABEL_40;
        v48 = v43[4];
        v49 = *((unsigned __int8 *)v33 + 32);
        if (v48 != v49)
          goto LABEL_25;
        v48 = v43[5];
        v49 = *((unsigned __int8 *)v33 + 33);
        if (v48 != v49)
          goto LABEL_25;
        v48 = v43[6];
        v49 = *((unsigned __int8 *)v33 + 34);
        if (v48 != v49)
          goto LABEL_25;
        v48 = v43[7];
        v49 = *((unsigned __int8 *)v33 + 35);
        if (v48 != v49)
          goto LABEL_25;
        v48 = v43[8];
        v49 = *((unsigned __int8 *)v33 + 36);
        if (v48 != v49)
          goto LABEL_25;
        v48 = v43[9];
        v49 = *((unsigned __int8 *)v33 + 37);
        if (v48 != v49)
          goto LABEL_25;
        v48 = v43[10];
        v49 = *((unsigned __int8 *)v33 + 38);
        if (v48 != v49)
          goto LABEL_25;
        v48 = v43[11];
        v49 = *((unsigned __int8 *)v33 + 39);
        if (v48 != v49)
          goto LABEL_25;
        v48 = v43[12];
        v49 = *((unsigned __int8 *)v33 + 40);
        if (v48 != v49
          || (v48 = v43[13], v49 = *((unsigned __int8 *)v33 + 41), v48 != v49)
          || (v48 = v43[14], v49 = *((unsigned __int8 *)v33 + 42), v48 != v49)
          || (v48 = v43[15], v49 = *((unsigned __int8 *)v33 + 43), v48 != v49))
        {
LABEL_25:
          if (v48 < v49)
            goto LABEL_8;
        }
        v45 = *((unsigned __int8 *)v33 + 32);
        v47 = v43[4];
        if (v45 != v47)
          goto LABEL_42;
        v45 = *((unsigned __int8 *)v33 + 33);
        v47 = v43[5];
        if (v45 != v47)
          goto LABEL_42;
        v45 = *((unsigned __int8 *)v33 + 34);
        v47 = v43[6];
        if (v45 != v47)
          goto LABEL_42;
        v45 = *((unsigned __int8 *)v33 + 35);
        v47 = v43[7];
        if (v45 != v47)
          goto LABEL_42;
        v45 = *((unsigned __int8 *)v33 + 36);
        v47 = v43[8];
        if (v45 != v47)
          goto LABEL_42;
        v45 = *((unsigned __int8 *)v33 + 37);
        v47 = v43[9];
        if (v45 != v47)
          goto LABEL_42;
        v45 = *((unsigned __int8 *)v33 + 38);
        v47 = v43[10];
        if (v45 != v47)
          goto LABEL_42;
        v45 = *((unsigned __int8 *)v33 + 39);
        v47 = v43[11];
        if (v45 != v47)
          goto LABEL_42;
        v45 = *((unsigned __int8 *)v33 + 40);
        v47 = v43[12];
        if (v45 != v47)
          goto LABEL_42;
        v45 = *((unsigned __int8 *)v33 + 41);
        v47 = v43[13];
        if (v45 != v47)
          goto LABEL_42;
        v45 = *((unsigned __int8 *)v33 + 42);
        v47 = v43[14];
        if (v45 != v47)
          goto LABEL_42;
        v45 = *((unsigned __int8 *)v33 + 43);
        v47 = v43[15];
        if (v45 != v47)
          goto LABEL_42;
LABEL_45:
        v50 = *((float32x4_t *)a5 + 1);
        v51 = *((float32x4_t *)a5 + 2);
        v52 = *((float32x4_t *)a5 + 3);
        v53 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a5, COERCE_FLOAT(*(_OWORD *)((char *)v33 + 44))), v50, *(float32x2_t *)((char *)v33 + 44), 1), v51, *(float32x4_t *)((char *)v33 + 44), 2), v52, *(float32x4_t *)((char *)v33 + 44), 3);
        v54 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a5, COERCE_FLOAT(*(_OWORD *)((char *)v33 + 60))), v50, *(float32x2_t *)((char *)v33 + 60), 1), v51, *(float32x4_t *)((char *)v33 + 60), 2), v52, *(float32x4_t *)((char *)v33 + 60), 3);
        v55 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a5, COERCE_FLOAT(*(_OWORD *)((char *)v33 + 76))), v50, *(float32x2_t *)((char *)v33 + 76), 1), v51, *(float32x4_t *)((char *)v33 + 76), 2), v52, *(float32x4_t *)((char *)v33 + 76), 3);
        v56 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a5, COERCE_FLOAT(*(_OWORD *)((char *)v33 + 92))), v50, *(float32x2_t *)((char *)v33 + 92), 1), v51, *(float32x4_t *)((char *)v33 + 92), 2), v52, *(float32x4_t *)((char *)v33 + 92), 3);
        v57 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v88, v53.f32[0]), v87, *(float32x2_t *)v53.f32, 1), v89, v53, 2), v86, v53, 3);
        v58 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v88, v54.f32[0]), v87, *(float32x2_t *)v54.f32, 1), v89, v54, 2), v86, v54, 3);
        v59 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v88, v55.f32[0]), v87, *(float32x2_t *)v55.f32, 1), v89, v55, 2), v86, v55, 3);
        v60.i64[0] = vzip1q_s32(v37, v40).u64[0];
        v61 = (int8x16_t)vnegq_f32(v42);
        v60.i64[1] = v41.u32[0];
        v62 = (int8x16_t)vtrn2q_s32(v37, v40);
        v62.i32[2] = v41.i32[1];
        v63 = (int8x16_t)vzip2q_s32(v37, v40);
        *(float32x2_t *)v55.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v60.f32, *(float *)v61.i32), *(float32x2_t *)v62.i8, *(float32x2_t *)v42.f32, 1), *(float32x2_t *)v63.i8, v42, 2);
        v63.i32[2] = v41.i32[2];
        v55.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v61.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL), *(float32x2_t *)v42.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)).u32[0]);
        v64.i32[3] = 0;
        v64.i32[0] = v62.i32[0];
        v66 = vextq_s8(vextq_s8(v62, v62, 0xCuLL), v63, 8uLL);
        v65.i64[0] = v66.i64[1];
        *(uint64_t *)((char *)v64.i64 + 4) = v66.i64[0];
        v65.i64[1] = vdupq_laneq_s32((int32x4_t)v63, 2).u32[0];
        v67 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v88, v56.f32[0]), v87, *(float32x2_t *)v56.f32, 1), v89, v56, 2), v86, v56, 3);
        v90[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v60, v57.f32[0]), v64, *(float32x2_t *)v57.f32, 1), v65, v57, 2), v55, v57, 3);
        v90[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v60, v58.f32[0]), v64, *(float32x2_t *)v58.f32, 1), v65, v58, 2), v55, v58, 3);
        v90[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v60, v59.f32[0]), v64, *(float32x2_t *)v59.f32, 1), v65, v59, 2), v55, v59, 3);
        v91 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v60, v67.f32[0]), v64, *(float32x2_t *)v67.f32, 1), v65, v67, 2), v55, v67, 3);
        memset(v92, 0, 24);
        v94[0] = (float32x2_t *)v90;
        v94[1] = 0;
        *(_QWORD *)&v92[24] = v92;
        v93 = 0;
        sub_2236763FC(v94, (float **)&v92[24]);
        v68 = *(int8x16_t *)v92;
        v69 = (float32x2_t)vextq_s8(v68, v68, 8uLL).u64[0];
        v70 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v68.i8, *(float32x2_t *)v68.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v92, 1), *(float32x2_t *)v92, 1), v69, v69).f32[0];
        if (v70 >= 0.0061)
        {
          v75 = sqrtf(v70);
          v84 = v70;
          v85 = *(int8x16_t *)v92;
          v76 = __sincosf_stret(v75);
          v70 = v84;
          v68 = v85;
          v73 = v76.__sinval / v75;
          v71 = (float)(1.0 / v84) * (float)(1.0 - v76.__cosval);
          v72 = (float)(1.0 / v84) * (float)(1.0 - (float)(v76.__sinval / v75));
          if (v84 >= 0.00000149)
            goto LABEL_47;
LABEL_50:
          v74 = (float)(v70 * 0.000033069) + (float)((float)(v70 * 0.0013889) + 0.083333);
          goto LABEL_52;
        }
        v71 = 0.5 - (float)(v70 * (float)((float)(v70 / -720.0) + 0.041667));
        v72 = 0.16667 - (float)(v70 * (float)((float)(v70 / -5040.0) + 0.0083333));
        v73 = 1.0 - (float)(v70 * v72);
        if (v70 < 0.00000149)
          goto LABEL_50;
LABEL_47:
        if (v70 <= 9.0)
          v74 = (float)((float)(v71 * 0.5) - v72) / v73;
        else
          v74 = (float)(v71 + (float)(v73 * -0.5)) / (float)(v70 * v71);
LABEL_52:
        v77 = (float32x4_t)vextq_s8(vextq_s8(v68, v68, 0xCuLL), v68, 8uLL);
        v78 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), v68, 0xCuLL);
        v79 = (int8x16_t)vsubq_f32(vmulq_f32(v77, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v91, (int32x4_t)v91), (int8x16_t)v91, 0xCuLL)), vmulq_f32(v78, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v91, (int8x16_t)v91, 0xCuLL), (int8x16_t)v91, 8uLL)));
        v80.i64[0] = 0xBF000000BF000000;
        v80.i64[1] = 0xBF000000BF000000;
        v31 = vextq_s8(v79, v79, 0xCuLL);
        v81 = vaddq_f32(vaddq_f32(v91, vmulq_f32((float32x4_t)v79, v80)), vmulq_n_f32(vsubq_f32(vmulq_f32(v77, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), v79, 0xCuLL)), vmulq_f32(v78, (float32x4_t)vextq_s8(v31, v79, 8uLL))), v74));
        *(_DWORD *)&v92[20] = v81.i32[2];
        *(_QWORD *)&v92[12] = v81.i64[0];
        v82 = vabsq_f32(*(float32x4_t *)v92);
        v83 = v82;
        v83.i32[3] = -4194304;
        if (vmaxnmvq_f32(v83) > 0.017453
          || (a7 = vabsq_f32(*(float32x4_t *)&v92[16]),
              a8.i64[0] = __PAIR64__(a7.u32[0], v82.u32[3]),
              a8.i64[1] = a7.u32[1] | 0x3F00000000,
              vmaxnmvq_f32(a8) > 0.1))
        {
          sub_2231A9984((uint64_t **)a1, v43, v43);
        }
        ++v24;
      }
      while (v24 != v32);
    }
  }
}

void sub_223C7EE04(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223198030(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_223C7EE1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223198030(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_223C7EE34(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223198030(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_223C7EE4C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CD888);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD888))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.frame");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CD880);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CD888);
  }
  *a1 = qword_2540CD880;
}

void sub_223C7EEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CD888);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CD888);
  _Unwind_Resume(a1);
}

void sub_223C7EF40(uint64_t a1, uint64_t a2, float32x2_t *a3, _QWORD *a4, uint64_t *a5, int32x4_t a6, __n128 a7, float32x4_t a8, double a9, double a10, float32x4_t a11)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  float32x2_t v31;
  float32x2_t v32;
  int8x16_t v33;
  float32x2_t v34;
  __int128 v35;
  int8x16_t v36;
  int8x16_t v37;
  int32x4_t v38;
  int8x16_t v39;
  __int128 v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t **v47;
  uint64_t **v48;
  uint64_t *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  char *v54;
  uint64_t *v55;
  float32x4_t v56;
  char *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;
  char *v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  int v77;
  int8x16_t v78;
  float32x2_t v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  __float2 v86;
  float32x4_t v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x4_t v90;
  unint64_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  _BOOL4 v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  __int128 v107;
  char *v108;
  int v109;
  int64_t v110;
  size_t v111;
  size_t v112;
  double v113;
  size_t v114;
  size_t v115;
  double v116;
  std::string *p_b;
  uint64_t v118;
  uint64_t v119;
  std::string *v120;
  __int128 v121;
  __int128 *p_dst;
  uint64_t v123;
  uint64_t v124;
  const std::string::value_type *v125;
  std::string::size_type v126;
  std::string *v127;
  __int128 v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  float v133;
  uint64_t v134;
  char *v135;
  void **v136;
  void *v137;
  size_t v138;
  __int128 *v139;
  unint64_t v140;
  std::string *v141;
  uint64_t v142;
  uint64_t v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  size_t v147;
  const char *v148;
  unsigned __int8 v149;
  unsigned __int8 v150;
  const char *v151;
  size_t v152;
  std::string::size_type *p_size;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  NSObject *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  size_t v161;
  void *v162;
  _QWORD *v163;
  size_t v164;
  std::string::size_type v165;
  std::string *v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  std::string::size_type v170;
  char v171;
  _QWORD *v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *p_shared_owners;
  unint64_t v176;
  char *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::string::size_type v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  std::string::size_type v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::string::size_type v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  const char *v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  int v222;
  BOOL v223;
  float v224;
  float v225;
  BOOL v226;
  float v227;
  float32x2_t *v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  uint64_t **v233;
  unint64_t v234;
  unint64_t v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float32x4_t v241;
  int8x16_t v242;
  int8x16_t v243;
  int8x16_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  int8x16_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  int8x16_t v252;
  float32x2_t v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  __float2 v261;
  float32x4_t v262;
  float32x4_t v263;
  int8x16_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float v268;
  float32x4_t v269;
  float v270;
  int32x4_t v271;
  int32x4_t v272;
  int8x16_t v273;
  float32x4_t v274;
  int8x16_t v275;
  int8x16_t v276;
  unsigned __int32 v277;
  int8x16_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  uint64_t v283;
  int8x16_t v284;
  float32x2_t v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  __float2 v292;
  float32x4_t v293;
  int8x16_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t **v300;
  BOOL v301;
  _BOOL4 v302;
  int v303;
  unint64_t v304;
  unint64_t v305;
  const char *v306;
  std::string *v307;
  uint64_t v308;
  size_t v309;
  const char *v310;
  unsigned __int8 v311;
  unsigned __int8 v312;
  const char *v313;
  size_t v314;
  uint64_t *v315;
  std::string *v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t *v320;
  NSObject *v321;
  uint64_t v322;
  uint64_t v323;
  float v324;
  float v325;
  float v326;
  float v327;
  size_t v328;
  void *v329;
  _QWORD *v330;
  size_t v331;
  std::string::size_type v332;
  void *v333;
  void *v334;
  int v335;
  std::string *v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  std::string::size_type v340;
  char v341;
  _QWORD *v342;
  uint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  void *v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  std::string::size_type v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  void **v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  uint64_t v388;
  char v393;
  char v394;
  char v395;
  char v396;
  char v397;
  char v398;
  char v399;
  char v400;
  char v401;
  float32x4_t v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  float32x4_t v407;
  float32x4_t v408;
  float32x4_t v409;
  int v410;
  uint64_t v411;
  int32x4_t v412;
  unint64_t v413;
  uint64_t v414;
  int32x4_t v415;
  __int32 v416;
  std::string::size_type v417;
  __int128 v418;
  float32x4_t v419;
  float v420;
  float32x4_t v421;
  __int128 v422;
  _BOOL4 v423;
  float32x4_t v424;
  __int128 v425;
  float v426;
  unsigned int v427;
  float v428;
  float v429;
  _BOOL4 v430;
  float32x4_t v431;
  char __s;
  char *__sa[2];
  char *__se[2];
  unsigned int __sb;
  const char *__sc;
  char *__sf[2];
  char *__sg[2];
  int __sd;
  char *__sh[2];
  _BYTE v441[64];
  void *v442;
  char *v443;
  char *v444;
  void *v445;
  char *v446;
  char *v447;
  uint64_t **v448;
  uint64_t *v449;
  unint64_t v450;
  void *__p[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  char *v453;
  const char *v454;
  int v455;
  const char *v456;
  uint64_t v457;
  std::__shared_weak_count *v458;
  uint64_t v459;
  std::string v460;
  char *v461;
  std::__shared_weak_count *v462;
  std::string __b;
  float32x4_t object[4];
  std::string *v465;
  unint64_t v466;
  void *v467;
  char v468;
  unint64_t v469;
  int v470;
  uint64_t v471;
  uint64_t v472[2];
  __int128 __dst;
  int64_t v474;
  std::string v475;
  __int128 v476;
  char *v477;
  const char *v478;
  unint64_t v479;
  std::__shared_weak_count *v480;
  uint64_t v481;

  v481 = *MEMORY[0x24BDAC8D0];
  v450 = 0;
  v448 = &v449;
  v449 = 0;
  v445 = 0;
  v446 = 0;
  v447 = 0;
  v442 = 0;
  v443 = 0;
  v444 = 0;
  v11 = a5[1] - *a5;
  if (!v11)
    goto LABEL_130;
  v12 = 0;
  v388 = v11 >> 4;
  while (2)
  {
    v14 = *(uint64_t **)(a2 + 8);
    if (!v14)
LABEL_522:
      sub_223198218("map::at:  key not found");
    v15 = (unsigned __int8 *)(*a5 + 16 * v12);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = v15[3];
    v20 = v15[4];
    v21 = v15[5];
    v22 = v15[6];
    v23 = v15[7];
    v24 = v15[8];
    v25 = v15[9];
    v26 = v15[10];
    v27 = v15[11];
    v28 = v15[12];
    v29 = *a4 + (v12 << 6);
    a6.i64[0] = *(_QWORD *)v29;
    a6.i32[2] = *(_DWORD *)(v29 + 8);
    v30 = v15[13];
    a7.n128_u64[0] = *(_QWORD *)(v29 + 16);
    a7.n128_u32[2] = *(_DWORD *)(v29 + 24);
    a8.i32[0] = *(_DWORD *)(v29 + 40);
    v31 = *(float32x2_t *)(v29 + 32);
    v32 = (float32x2_t)vzip1q_s32(a6, (int32x4_t)a7).u64[0];
    a11.i64[0] = *(_QWORD *)(v29 + 48);
    a11.i32[2] = *(_DWORD *)(v29 + 56);
    v33 = (int8x16_t)vnegq_f32(a11);
    v34 = vmul_n_f32(v32, *(float *)v33.i32);
    *(float32x2_t *)&v35 = v32;
    *((_QWORD *)&v35 + 1) = v31.u32[0];
    v36 = (int8x16_t)vtrn2q_s32(a6, (int32x4_t)a7);
    v36.i32[2] = v31.i32[1];
    v37 = (int8x16_t)vzip2q_s32(a6, (int32x4_t)a7);
    *(float32x2_t *)v38.i8 = vmls_laneq_f32(vmls_lane_f32(v34, *(float32x2_t *)v36.i8, *(float32x2_t *)a11.f32, 1), *(float32x2_t *)v37.i8, a11, 2);
    v37.i32[2] = a8.i32[0];
    v39 = vextq_s8(vextq_s8(v36, v36, 0xCuLL), v37, 8uLL);
    v38.u64[1] = (unint64_t)vmla_f32(vmls_lane_f32(vmul_f32(v31, *(float32x2_t *)v33.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v31, 1), *(float32x2_t *)a11.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), *(float32x2_t *)a8.f32);
    HIDWORD(v40) = 0;
    LODWORD(v40) = v36.i32[0];
    *(_QWORD *)((char *)&v40 + 4) = v39.i64[0];
    v422 = v40;
    v41 = v15[14];
    *(_QWORD *)&v40 = v39.i64[1];
    *((_QWORD *)&v40 + 1) = vdupq_laneq_s32((int32x4_t)v37, 2).u32[0];
    v42 = v15[15];
    v425 = v35;
    v412 = v38;
    v38.i32[3] = 1.0;
    v415 = v38;
    v418 = v40;
    while (1)
    {
      while (1)
      {
        v43 = *((unsigned __int8 *)v14 + 28);
        if (v16 == v43)
          break;
        v46 = v16;
        if (v16 >= v43)
          goto LABEL_45;
LABEL_7:
        v14 = (uint64_t *)*v14;
        if (!v14)
          goto LABEL_522;
      }
      v43 = *((unsigned __int8 *)v14 + 29);
      if (v17 != v43)
      {
        v46 = v17;
        if (v17 >= v43)
          goto LABEL_45;
        goto LABEL_7;
      }
      v43 = *((unsigned __int8 *)v14 + 30);
      if (v18 != v43)
      {
        v46 = v18;
        if (v18 >= v43)
          goto LABEL_45;
        goto LABEL_7;
      }
      v43 = *((unsigned __int8 *)v14 + 31);
      if (v19 == v43)
        break;
      v46 = v19;
      if (v19 < v43)
        goto LABEL_7;
LABEL_45:
      if (v43 >= v46)
        goto LABEL_48;
      v14 = (uint64_t *)v14[1];
      if (!v14)
        goto LABEL_522;
    }
    v44 = *((unsigned __int8 *)v14 + 32);
    v45 = v20;
    if (v20 != v44)
      goto LABEL_24;
    v44 = *((unsigned __int8 *)v14 + 33);
    v45 = v21;
    if (v21 != v44)
      goto LABEL_24;
    v44 = *((unsigned __int8 *)v14 + 34);
    v45 = v22;
    if (v22 != v44)
      goto LABEL_24;
    v44 = *((unsigned __int8 *)v14 + 35);
    v45 = v23;
    if (v23 != v44)
      goto LABEL_24;
    v44 = *((unsigned __int8 *)v14 + 36);
    v45 = v24;
    if (v24 != v44)
      goto LABEL_24;
    v44 = *((unsigned __int8 *)v14 + 37);
    v45 = v25;
    if (v25 != v44)
      goto LABEL_24;
    v44 = *((unsigned __int8 *)v14 + 38);
    v45 = v26;
    if (v26 != v44)
      goto LABEL_24;
    v44 = *((unsigned __int8 *)v14 + 39);
    v45 = v27;
    if (v27 != v44)
      goto LABEL_24;
    v44 = *((unsigned __int8 *)v14 + 40);
    v45 = v28;
    if (v28 != v44
      || (v44 = *((unsigned __int8 *)v14 + 41), v45 = v30, v30 != v44)
      || (v44 = *((unsigned __int8 *)v14 + 42), v45 = v41, v41 != v44)
      || (v44 = *((unsigned __int8 *)v14 + 43), v45 = v42, v42 != v44))
    {
LABEL_24:
      if (v45 < v44)
        goto LABEL_7;
    }
    v43 = *((unsigned __int8 *)v14 + 32);
    v46 = v20;
    if (v43 != v20)
      goto LABEL_45;
    v43 = *((unsigned __int8 *)v14 + 33);
    v46 = v21;
    if (v43 != v21)
      goto LABEL_45;
    v43 = *((unsigned __int8 *)v14 + 34);
    v46 = v22;
    if (v43 != v22)
      goto LABEL_45;
    v43 = *((unsigned __int8 *)v14 + 35);
    v46 = v23;
    if (v43 != v23)
      goto LABEL_45;
    v43 = *((unsigned __int8 *)v14 + 36);
    v46 = v24;
    if (v43 != v24)
      goto LABEL_45;
    v43 = *((unsigned __int8 *)v14 + 37);
    v46 = v25;
    if (v43 != v25)
      goto LABEL_45;
    v43 = *((unsigned __int8 *)v14 + 38);
    v46 = v26;
    if (v43 != v26)
      goto LABEL_45;
    v43 = *((unsigned __int8 *)v14 + 39);
    v46 = v27;
    if (v43 != v27)
      goto LABEL_45;
    v43 = *((unsigned __int8 *)v14 + 40);
    v46 = v28;
    if (v43 != v28)
      goto LABEL_45;
    v43 = *((unsigned __int8 *)v14 + 41);
    v46 = v30;
    if (v43 != v30)
      goto LABEL_45;
    v43 = *((unsigned __int8 *)v14 + 42);
    v46 = v41;
    if (v43 != v41)
      goto LABEL_45;
    v43 = *((unsigned __int8 *)v14 + 43);
    v46 = v42;
    if (v43 != v42)
      goto LABEL_45;
LABEL_48:
    v393 = v42;
    v394 = v41;
    v395 = v30;
    v396 = v28;
    v397 = v27;
    v398 = v26;
    v399 = v25;
    v400 = v24;
    v401 = v23;
    __s = v22;
    v402 = *(float32x4_t *)((char *)v14 + 44);
    v403 = *(float32x4_t *)((char *)v14 + 60);
    v404 = *(float32x4_t *)a3->f32;
    v405 = *(float32x4_t *)a3[2].f32;
    v406 = *(float32x4_t *)((char *)v14 + 76);
    v407 = *(float32x4_t *)a3[4].f32;
    v408 = *(float32x4_t *)a3[6].f32;
    v409 = *(float32x4_t *)((char *)v14 + 92);
    v47 = &v449;
    v48 = &v449;
    v49 = v449;
    if (v449)
    {
      while (1)
      {
        v47 = (uint64_t **)v49;
        v50 = *((unsigned __int8 *)v49 + 28);
        if (v16 != v50)
        {
          v53 = v16;
          if (v16 >= v50)
            goto LABEL_88;
          goto LABEL_50;
        }
        v50 = *((unsigned __int8 *)v47 + 29);
        if (v17 != v50)
          break;
        v50 = *((unsigned __int8 *)v47 + 30);
        if (v18 == v50)
        {
          v50 = *((unsigned __int8 *)v47 + 31);
          if (v19 != v50)
          {
            v53 = v19;
            if (v19 >= v50)
              goto LABEL_88;
            goto LABEL_50;
          }
          v51 = *((unsigned __int8 *)v47 + 32);
          v52 = v20;
          if (v20 != v51)
            goto LABEL_67;
          v51 = *((unsigned __int8 *)v47 + 33);
          v52 = v21;
          if (v21 != v51)
            goto LABEL_67;
          v51 = *((unsigned __int8 *)v47 + 34);
          v52 = v22;
          if (v22 != v51)
            goto LABEL_67;
          v51 = *((unsigned __int8 *)v47 + 35);
          v52 = v23;
          if (v23 != v51)
            goto LABEL_67;
          v51 = *((unsigned __int8 *)v47 + 36);
          v52 = v24;
          if (v24 != v51)
            goto LABEL_67;
          v51 = *((unsigned __int8 *)v47 + 37);
          v52 = v25;
          if (v25 != v51)
            goto LABEL_67;
          v51 = *((unsigned __int8 *)v47 + 38);
          v52 = v26;
          if (v26 != v51)
            goto LABEL_67;
          v51 = *((unsigned __int8 *)v47 + 39);
          v52 = v27;
          if (v27 != v51)
            goto LABEL_67;
          v51 = *((unsigned __int8 *)v47 + 40);
          v52 = v28;
          if (v28 != v51
            || (v51 = *((unsigned __int8 *)v47 + 41), v52 = v30, v30 != v51)
            || (v51 = *((unsigned __int8 *)v47 + 42), v52 = v41, v41 != v51)
            || (v51 = *((unsigned __int8 *)v47 + 43), v52 = v42, v42 != v51))
          {
LABEL_67:
            if (v52 < v51)
              goto LABEL_50;
          }
          v50 = *((unsigned __int8 *)v47 + 32);
          v53 = v20;
          if (v50 == v20)
          {
            v50 = *((unsigned __int8 *)v47 + 33);
            v53 = v21;
            if (v50 == v21)
            {
              v50 = *((unsigned __int8 *)v47 + 34);
              v53 = v22;
              if (v50 == v22)
              {
                v50 = *((unsigned __int8 *)v47 + 35);
                v53 = v23;
                if (v50 == v23)
                {
                  v50 = *((unsigned __int8 *)v47 + 36);
                  v53 = v24;
                  if (v50 == v24)
                  {
                    v50 = *((unsigned __int8 *)v47 + 37);
                    v53 = v25;
                    if (v50 == v25)
                    {
                      v50 = *((unsigned __int8 *)v47 + 38);
                      v53 = v26;
                      if (v50 == v26)
                      {
                        v50 = *((unsigned __int8 *)v47 + 39);
                        v53 = v27;
                        if (v50 == v27)
                        {
                          v50 = *((unsigned __int8 *)v47 + 40);
                          v53 = v28;
                          if (v50 == v28)
                          {
                            v50 = *((unsigned __int8 *)v47 + 41);
                            v53 = v30;
                            if (v50 == v30)
                            {
                              v50 = *((unsigned __int8 *)v47 + 42);
                              v53 = v41;
                              if (v50 == v41)
                              {
                                v50 = *((unsigned __int8 *)v47 + 43);
                                v53 = v42;
                                if (v50 == v42)
                                {
LABEL_94:
                                  v54 = (char *)v47;
                                  goto LABEL_95;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_88:
          if (v50 >= v53)
            goto LABEL_94;
          v49 = v47[1];
          if (!v49)
          {
            v48 = v47 + 1;
            goto LABEL_91;
          }
        }
        else
        {
          v53 = v18;
          if (v18 >= v50)
            goto LABEL_88;
LABEL_50:
          v49 = *v47;
          v48 = v47;
          if (!*v47)
            goto LABEL_91;
        }
      }
      v53 = v17;
      if (v17 >= v50)
        goto LABEL_88;
      goto LABEL_50;
    }
LABEL_91:
    v54 = (char *)operator new(0xB0uLL);
    v54[28] = v16;
    v54[29] = v17;
    v54[30] = v18;
    v54[31] = v19;
    v54[32] = v20;
    v54[33] = v21;
    v54[34] = __s;
    v54[35] = v401;
    v54[36] = v400;
    v54[37] = v399;
    v54[38] = v398;
    v54[39] = v397;
    v54[40] = v396;
    v54[41] = v395;
    v54[42] = v394;
    v54[43] = v393;
    *(_OWORD *)(v54 + 92) = unk_22466BAB0;
    *(_OWORD *)(v54 + 76) = xmmword_22466BAA0;
    *(_OWORD *)(v54 + 60) = unk_22466BA90;
    *(_OWORD *)(v54 + 44) = xmmword_22466BA80;
    *(_OWORD *)(v54 + 156) = unk_22466BAB0;
    *(_OWORD *)(v54 + 140) = xmmword_22466BAA0;
    *(_OWORD *)(v54 + 124) = unk_22466BA90;
    *(_OWORD *)(v54 + 108) = xmmword_22466BA80;
    *(_QWORD *)v54 = 0;
    *((_QWORD *)v54 + 1) = 0;
    *((_QWORD *)v54 + 2) = v47;
    *v48 = (uint64_t *)v54;
    v55 = (uint64_t *)v54;
    if (*v448)
    {
      v448 = (uint64_t **)*v448;
      v55 = *v48;
    }
    sub_2231A9A8C(v449, v55);
    ++v450;
LABEL_95:
    a11 = v407;
    a7 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v404, v403.f32[0]), v405, *(float32x2_t *)v403.f32, 1), v407, v403, 2), v408, v403, 3);
    a8 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v404, v406.f32[0]), v405, *(float32x2_t *)v406.f32, 1), v407, v406, 2), v408, v406, 3);
    v56 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v404, v409.f32[0]), v405, *(float32x2_t *)v409.f32, 1), v407, v409, 2), v408, v409, 3);
    *(float32x4_t *)(v54 + 44) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v404, v402.f32[0]), v405, *(float32x2_t *)v402.f32, 1), v407, v402, 2), v408, v402, 3);
    *(__n128 *)(v54 + 60) = a7;
    *(float32x4_t *)(v54 + 76) = a8;
    *(float32x4_t *)(v54 + 92) = v56;
    *(_OWORD *)(v54 + 108) = v425;
    *(_OWORD *)(v54 + 124) = v422;
    *(_OWORD *)(v54 + 140) = v418;
    *(int32x4_t *)(v54 + 156) = v415;
    v57 = v446;
    if (v446 >= v447)
    {
      v59 = (char *)v445;
      v60 = 0xAAAAAAAAAAAAAAABLL * ((v446 - (_BYTE *)v445) >> 2);
      v61 = v60 + 1;
      if (v60 + 1 > 0x1555555555555555)
        sub_22316E078();
      if (0x5555555555555556 * ((v447 - (_BYTE *)v445) >> 2) > v61)
        v61 = 0x5555555555555556 * ((v447 - (_BYTE *)v445) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v447 - (_BYTE *)v445) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v62 = 0x1555555555555555;
      else
        v62 = v61;
      if (v62)
      {
        *(float32x4_t *)__sa = v56;
        if (v62 > 0x1555555555555555)
          sub_223174E94();
        v63 = (char *)operator new(12 * v62);
        v56 = *(float32x4_t *)__sa;
      }
      else
      {
        v63 = 0;
      }
      v64 = &v63[4 * ((v446 - (_BYTE *)v445) >> 2)];
      *(_QWORD *)v64 = v56.i64[0];
      *((_DWORD *)v64 + 2) = v56.i32[2];
      v65 = &v63[12 * v60];
      if (v57 != v59)
      {
        do
        {
          v66 = *(_QWORD *)(v57 - 12);
          v57 -= 12;
          v67 = *((_DWORD *)v57 + 2);
          *(_QWORD *)(v65 - 12) = v66;
          v65 -= 12;
          *((_DWORD *)v65 + 2) = v67;
        }
        while (v57 != v59);
        v57 = (char *)v445;
      }
      v58 = v64 + 12;
      v445 = v65;
      v446 = v64 + 12;
      v447 = &v63[12 * v62];
      if (v57)
        operator delete(v57);
    }
    else
    {
      *((_DWORD *)v446 + 2) = v56.i32[2];
      *(_QWORD *)v57 = v56.i64[0];
      v58 = v57 + 12;
    }
    v446 = v58;
    v68 = v443;
    if (v443 < v444)
    {
      a6 = v412;
      *((_DWORD *)v443 + 2) = v412.i32[2];
      *(_QWORD *)v68 = v412.i64[0];
      v13 = v68 + 12;
    }
    else
    {
      v69 = (char *)v442;
      v70 = 0xAAAAAAAAAAAAAAABLL * ((v443 - (_BYTE *)v442) >> 2);
      v71 = v70 + 1;
      if (v70 + 1 > 0x1555555555555555)
        sub_22316E078();
      if (0x5555555555555556 * ((v444 - (_BYTE *)v442) >> 2) > v71)
        v71 = 0x5555555555555556 * ((v444 - (_BYTE *)v442) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v444 - (_BYTE *)v442) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v72 = 0x1555555555555555;
      else
        v72 = v71;
      if (v72)
      {
        if (v72 > 0x1555555555555555)
          sub_223174E94();
        v73 = (char *)operator new(12 * v72);
      }
      else
      {
        v73 = 0;
      }
      v74 = &v73[4 * ((v443 - (_BYTE *)v442) >> 2)];
      a6 = v412;
      *(_QWORD *)v74 = v412.i64[0];
      *((_DWORD *)v74 + 2) = v412.i32[2];
      v75 = &v73[12 * v70];
      if (v68 != v69)
      {
        do
        {
          v76 = *(_QWORD *)(v68 - 12);
          v68 -= 12;
          v77 = *((_DWORD *)v68 + 2);
          *(_QWORD *)(v75 - 12) = v76;
          v75 -= 12;
          *((_DWORD *)v75 + 2) = v77;
        }
        while (v68 != v69);
        v68 = (char *)v442;
      }
      v13 = v74 + 12;
      v442 = v75;
      v443 = v74 + 12;
      v444 = &v73[12 * v72];
      if (v68)
        operator delete(v68);
    }
    v443 = v13;
    if (++v12 != v388)
      continue;
    break;
  }
  if (v450 > 5)
  {
    sub_223EA75B4((float32x2_t **)&v445, (float32x2_t **)&v442, 0, 0, (uint64_t)v441, (float32x4_t)a6, (float32x4_t)a7, a8, (int8x16_t)a11);
    goto LABEL_131;
  }
LABEL_130:
  memset(&v441[20], 0, 40);
  *(_OWORD *)&v441[4] = 0u;
  *(_DWORD *)v441 = 1065353216;
  *(_DWORD *)&v441[20] = 1065353216;
  *(_DWORD *)&v441[40] = 1065353216;
  *(_DWORD *)&v441[60] = 1065353216;
LABEL_131:
  memset(object, 0, 24);
  v475.__r_.__value_.__r.__words[0] = (std::string::size_type)v441;
  v475.__r_.__value_.__l.__size_ = 0;
  __p[0] = object;
  __p[1] = 0;
  sub_2236763FC((float32x2_t **)&v475, (float **)__p);
  v78 = (int8x16_t)object[0];
  v79 = (float32x2_t)vextq_s8(v78, v78, 8uLL).u64[0];
  v80 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v78.i8, *(float32x2_t *)v78.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)object[0].f32, 1), *(float32x2_t *)object[0].f32, 1), v79, v79).f32[0];
  if (v80 >= 0.0061)
  {
    v85 = sqrtf(v80);
    v426 = v80;
    *(float32x4_t *)__se = object[0];
    v86 = __sincosf_stret(v85);
    v80 = v426;
    v78 = *(int8x16_t *)__se;
    v83 = v86.__sinval / v85;
    v81 = (float)(1.0 / v426) * (float)(1.0 - v86.__cosval);
    v82 = (float)(1.0 / v426) * (float)(1.0 - (float)(v86.__sinval / v85));
    if (v426 >= 0.00000149)
    {
LABEL_133:
      if (v80 <= 9.0)
        v84 = (float)((float)(v81 * 0.5) - v82) / v83;
      else
        v84 = (float)(v81 + (float)(v83 * -0.5)) / (float)(v80 * v81);
      goto LABEL_138;
    }
  }
  else
  {
    v81 = 0.5 - (float)(v80 * (float)((float)(v80 / -720.0) + 0.041667));
    v82 = 0.16667 - (float)(v80 * (float)((float)(v80 / -5040.0) + 0.0083333));
    v83 = 1.0 - (float)(v80 * v82);
    if (v80 >= 0.00000149)
      goto LABEL_133;
  }
  v84 = (float)(v80 * 0.000033069) + (float)((float)(v80 * 0.0013889) + 0.083333);
LABEL_138:
  v87 = (float32x4_t)vextq_s8(vextq_s8(v78, v78, 0xCuLL), v78, 8uLL);
  v93 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78), v78, 0xCuLL);
  v88 = (int8x16_t)vsubq_f32(vmulq_f32(v87, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)&v441[48], *(int32x4_t *)&v441[48]), *(int8x16_t *)&v441[48], 0xCuLL)), vmulq_f32(v93, (float32x4_t)vextq_s8(vextq_s8(*(int8x16_t *)&v441[48], *(int8x16_t *)&v441[48], 0xCuLL), *(int8x16_t *)&v441[48], 8uLL)));
  v89.i64[0] = 0xBF000000BF000000;
  v89.i64[1] = 0xBF000000BF000000;
  v90 = vaddq_f32(vaddq_f32(*(float32x4_t *)&v441[48], vmulq_f32((float32x4_t)v88, v89)), vmulq_n_f32(vsubq_f32(vmulq_f32(v87, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v88, (int32x4_t)v88), v88, 0xCuLL)), vmulq_f32(v93, (float32x4_t)vextq_s8(vextq_s8(v88, v88, 0xCuLL), v88, 8uLL))), v84));
  object[1].i32[1] = v90.i32[2];
  *(uint64_t *)((char *)&object[0].i64[1] + 4) = v90.i64[0];
  v91 = vabsq_f32(object[1]).u64[0];
  v92 = vabsq_f32(object[0]);
  v93.i32[0] = v92.i32[3];
  v416 = v92.i32[3];
  v419 = v92;
  v92.i32[3] = -4194304;
  v427 = HIDWORD(v91);
  __sb = v91;
  if (vmaxnmvq_f32(v92) >= 0.0043633)
  {
    v96 = 0;
  }
  else
  {
    v94 = v93;
    *(uint64_t *)((char *)v94.i64 + 4) = v91;
    v95 = vabsq_f32(v94);
    v95.i32[3] = -4194304;
    v96 = vmaxnmvq_f32(v95) < 0.015;
  }
  sub_223C7EE4C(&v459);
  v423 = v96;
  if (**(int **)(v459 + 56) > 3)
    goto LABEL_330;
  v103 = *(unsigned __int8 *)(v459 + 72);
  v104 = sub_22322F254(v459, "OSLogSurrogateAppender", 1, 0);
  v105 = v104;
  if (!v103 && !v104)
    goto LABEL_330;
  sub_223195210((uint64_t)object);
  v106 = sub_2231813E8((float32x4_t *)object[1].i64, (uint64_t)"GRS: global transformation ", 27);
  v413 = v105;
  v410 = v103;
  *(_QWORD *)&v107 = v419.i64[0];
  *((_QWORD *)&v107 + 1) = __PAIR64__(v416, v419.u32[2]);
  *(_OWORD *)&v475.__r_.__value_.__l.__data_ = v107;
  v475.__r_.__value_.__r.__words[2] = __PAIR64__(v427, __sb);
  v108 = (char *)v106 + *(_QWORD *)(*v106 - 24);
  v109 = *((_DWORD *)v108 + 2);
  v111 = *((_QWORD *)v108 + 2);
  v110 = *((_QWORD *)v108 + 3);
  if (v110)
  {
    if (v110 <= (uint64_t)(v111 + 2))
      v112 = v111 + 2;
    else
      v112 = v110;
    v113 = __exp10((double)-(uint64_t)v111);
    v114 = v112 + ~v111;
    v115 = v114 - 1;
    if (v114 - 1 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v116 = v113;
    if (v115 >= 0x17)
    {
      v118 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v115 | 7) != 0x17)
        v118 = v115 | 7;
      v119 = v118 + 1;
      p_b = (std::string *)operator new(v118 + 1);
      __b.__r_.__value_.__r.__words[2] = v119 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
      __b.__r_.__value_.__l.__size_ = v114 - 1;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v114 - 1;
      p_b = &__b;
      if (v114 == 1)
      {
        LODWORD(v114) = 1;
        goto LABEL_157;
      }
    }
  }
  else
  {
    v116 = __exp10((double)-(uint64_t)v111);
    v115 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v114) = 4;
  }
  memset(p_b, 32, v115);
LABEL_157:
  p_b->__r_.__value_.__s.__data_[v115] = 0;
  v120 = std::string::append(&__b, "0 ", 2uLL);
  v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
  v460.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v460.__r_.__value_.__l.__data_ = v121;
  v120->__r_.__value_.__l.__size_ = 0;
  v120->__r_.__value_.__r.__words[2] = 0;
  v120->__r_.__value_.__r.__words[0] = 0;
  if (v111 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v111 >= 0x17)
  {
    v123 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v111 | 7) != 0x17)
      v123 = v111 | 7;
    v124 = v123 + 1;
    p_dst = (__int128 *)operator new(v123 + 1);
    v474 = v124 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    *((_QWORD *)&__dst + 1) = v111;
    goto LABEL_164;
  }
  HIBYTE(v474) = v111;
  p_dst = &__dst;
  if (v111)
LABEL_164:
    memset(p_dst, 32, v111);
  *((_BYTE *)p_dst + v111) = 0;
  if (v474 >= 0)
    v125 = (const std::string::value_type *)&__dst;
  else
    v125 = (const std::string::value_type *)__dst;
  if (v474 >= 0)
    v126 = HIBYTE(v474);
  else
    v126 = *((_QWORD *)&__dst + 1);
  v127 = std::string::append(&v460, v125, v126);
  v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
  rep = v127->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v128;
  v127->__r_.__value_.__l.__size_ = 0;
  v127->__r_.__value_.__r.__words[2] = 0;
  v127->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v474) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v460.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_173;
LABEL_201:
    operator delete(v460.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_174;
LABEL_202:
    operator delete(__b.__r_.__value_.__l.__data_);
    goto LABEL_174;
  }
  operator delete((void *)__dst);
  if (SHIBYTE(v460.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_201;
LABEL_173:
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_202;
LABEL_174:
  *(uint64_t *)((char *)v106 + *(_QWORD *)(*v106 - 24) + 24) = 0;
  v460.__r_.__value_.__s.__data_[0] = 91;
  sub_2231813E8(v106, (uint64_t)&v460, 1);
  v129 = 0;
  v130 = v106 + 1;
  v131 = v106 + 2;
  v132 = (int)v114 + (int)v111 + 1;
  while (1)
  {
    v133 = *(float *)((char *)&v475.__r_.__value_.__l.__data_ + v129);
    v134 = *v106;
    v135 = (char *)v106 + *(_QWORD *)(*v106 - 24);
    if ((v135[9] & 1) != 0)
    {
      if (v133 != 0.0)
      {
        *((_QWORD *)v135 + 3) = v132;
        *(_DWORD *)((char *)v130 + *(_QWORD *)(v134 - 24)) |= 0x400u;
        *(_QWORD *)((char *)v131 + *(_QWORD *)(v134 - 24)) = (int)v111 - 3;
        std::ostream::operator<<();
        goto LABEL_187;
      }
    }
    else if (fabs(v133) >= v116)
    {
      *((_QWORD *)v135 + 3) = v132;
      *(_DWORD *)((char *)v130 + *(_QWORD *)(v134 - 24)) = *(_DWORD *)((_BYTE *)v130 + *(_QWORD *)(v134 - 24)) & 0xFFFFFEFB | 4;
      *(_DWORD *)((char *)v130 + *(_QWORD *)(v134 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v131 + *(_QWORD *)(v134 - 24)) = (int)v111;
      std::ostream::operator<<();
      goto LABEL_187;
    }
    v136 = rep >= 0 ? __p : (void **)__p[0];
    v137 = rep >= 0 ? (void *)HIBYTE(rep) : __p[1];
    sub_2231813E8(v106, (uint64_t)v136, (uint64_t)v137);
LABEL_187:
    if (v129 == 20)
      break;
    v460.__r_.__value_.__s.__data_[0] = 44;
    sub_2231813E8(v106, (uint64_t)&v460, 1);
    v129 += 4;
  }
  sub_2231813E8(v106, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)v106 + *(_QWORD *)(*v106 - 24) + 8) = v109;
  if (SHIBYTE(rep) < 0)
    operator delete(__p[0]);
  sub_2231813E8(v106, (uint64_t)" is negligible = ", 17);
  std::ostream::operator<<();
  if ((v470 & 0x10) != 0)
  {
    v140 = v469;
    if (v469 < v466)
    {
      v469 = v466;
      v140 = v466;
    }
    v141 = v465;
    v138 = v140 - (_QWORD)v465;
    if (v140 - (unint64_t)v465 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_251;
  }
  else
  {
    if ((v470 & 8) == 0)
    {
      v138 = 0;
      HIBYTE(v474) = 0;
      v139 = &__dst;
      goto LABEL_207;
    }
    v141 = (std::string *)object[2].i64[1];
    v138 = object[3].i64[1] - object[2].i64[1];
    if (object[3].i64[1] - object[2].i64[1] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_251:
      sub_22316DBC0();
  }
  if (v138 >= 0x17)
  {
    v142 = (v138 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v138 | 7) != 0x17)
      v142 = v138 | 7;
    v143 = v142 + 1;
    v139 = (__int128 *)operator new(v142 + 1);
    v474 = v143 | 0x8000000000000000;
    *(_QWORD *)&__dst = v139;
    *((_QWORD *)&__dst + 1) = v138;
    goto LABEL_206;
  }
  HIBYTE(v474) = v138;
  v139 = &__dst;
  if (v138)
LABEL_206:
    memmove(v139, v141, v138);
LABEL_207:
  *((_BYTE *)v139 + v138) = 0;
  __p[0] = &v459;
  __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v453) = 3;
  v454 = "unknown file";
  v455 = 223;
  v458 = 0;
  v456 = "unknown function";
  v457 = 0;
  v144 = (const char *)&__dst;
  if (v474 < 0)
    v144 = (const char *)__dst;
  __sc = v144;
  v145 = *(_QWORD *)__p[0];
  v146 = *(_QWORD *)__p[0] + 16;
  if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
  {
    v148 = *(const char **)(v145 + 16);
    v147 = *(_QWORD *)(v145 + 24);
    v150 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v150 & 1) == 0)
    {
LABEL_528:
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v475);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v475, byte_255788F40);
        if ((_BYTE)v476 && SHIBYTE(v475.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v475.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
    }
  }
  else
  {
    v147 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
    v148 = (const char *)(*(_QWORD *)__p[0] + 16);
    v149 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v149 & 1) == 0)
      goto LABEL_528;
  }
  if (byte_255788F40[23] >= 0)
    v151 = byte_255788F40;
  else
    v151 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v152 = byte_255788F40[23];
  else
    v152 = *(_QWORD *)&byte_255788F40[8];
  v475.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v151, v148);
  p_size = &v475.__r_.__value_.__l.__size_;
  if (v152 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v152 >= 0x17)
  {
    v154 = (v152 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v152 | 7) != 0x17)
      v154 = v152 | 7;
    v155 = v154 + 1;
    p_size = (std::string::size_type *)operator new(v154 + 1);
    v475.__r_.__value_.__r.__words[2] = v152;
    *(_QWORD *)&v476 = v155 | 0x8000000000000000;
    v475.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
    goto LABEL_226;
  }
  BYTE7(v476) = v152;
  if (v152)
LABEL_226:
    memmove(p_size, v151, v152);
  *((_BYTE *)p_size + v152) = 0;
  BYTE8(v476) = 1;
  v156 = (char *)&v477;
  if (v147 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v147 >= 0x17)
  {
    v159 = (v147 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v147 | 7) != 0x17)
      v159 = v147 | 7;
    v160 = v159 + 1;
    v156 = (char *)operator new(v159 + 1);
    v478 = (const char *)v147;
    v479 = v160 | 0x8000000000000000;
    v477 = v156;
  }
  else
  {
    HIBYTE(v479) = v147;
    if (!v147)
    {
      LOBYTE(v477) = 0;
      LOBYTE(v480) = 1;
      v157 = v475.__r_.__value_.__r.__words[0];
      if ((SHIBYTE(v479) & 0x80000000) == 0)
        goto LABEL_231;
LABEL_237:
      operator delete(v477);
      v158 = v413;
      if (BYTE8(v476))
        goto LABEL_238;
      goto LABEL_240;
    }
  }
  memmove(v156, v148, v147);
  v156[v147] = 0;
  LOBYTE(v480) = 1;
  v157 = v475.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v479) < 0)
    goto LABEL_237;
LABEL_231:
  v158 = v413;
  if (BYTE8(v476))
  {
LABEL_238:
    if (SBYTE7(v476) < 0)
      operator delete((void *)v475.__r_.__value_.__l.__size_);
  }
LABEL_240:
  if (v475.__r_.__value_.__r.__words[0])
    os_release(v475.__r_.__value_.__l.__data_);
  if (v158 && *(_QWORD *)(v158 + 24))
  {
    v161 = _os_log_pack_size();
    v162 = operator new(v161, (std::align_val_t)8uLL);
    v163 = (_QWORD *)operator new();
    *v163 = &off_24EC1F7F0;
    v163[1] = 0;
    v163[2] = 0;
    v163[3] = v162;
    v460.__r_.__value_.__r.__words[0] = (std::string::size_type)v162;
    v460.__r_.__value_.__l.__size_ = (std::string::size_type)v162;
    v462 = 0;
    v460.__r_.__value_.__r.__words[2] = (std::string::size_type)v163;
    v461 = 0;
    v164 = strlen(__sc);
    if (v164 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v165 = v164;
    if (v164 >= 0x17)
    {
      v168 = (v164 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v164 | 7) != 0x17)
        v168 = v164 | 7;
      v169 = v168 + 1;
      v166 = (std::string *)operator new(v168 + 1);
      __b.__r_.__value_.__r.__words[2] = v169 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)v166;
      __b.__r_.__value_.__l.__size_ = v165;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v164;
      v166 = &__b;
      if (!v164)
        goto LABEL_256;
    }
    memcpy(v166, __sc, v165);
LABEL_256:
    v166->__r_.__value_.__s.__data_[v165] = 0;
    v472[0] = __b.__r_.__value_.__l.__size_;
    v170 = __b.__r_.__value_.__r.__words[0];
    *(uint64_t *)((char *)v472 + 7) = *(std::string::size_type *)((char *)&__b.__r_.__value_.__r.__words[1] + 7);
    v171 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    v172 = operator new(0x38uLL);
    v172[1] = 0;
    v172[2] = 0;
    v172[3] = off_24EC1FA48;
    *v172 = &off_24EC1F9F8;
    v173 = v472[0];
    v172[4] = v170;
    v172[5] = v173;
    *(_QWORD *)((char *)v172 + 47) = *(uint64_t *)((char *)v472 + 7);
    *((_BYTE *)v172 + 55) = v171;
    memset(v472, 0, 15);
    v174 = v462;
    v461 = (char *)(v172 + 3);
    v462 = (std::__shared_weak_count *)v172;
    if (v174)
    {
      p_shared_owners = (unint64_t *)&v174->__shared_owners_;
      do
        v176 = __ldaxr(p_shared_owners);
      while (__stlxr(v176 - 1, p_shared_owners));
      if (!v176)
      {
        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
        std::__shared_weak_count::__release_weak(v174);
      }
    }
    v475 = v460;
    v177 = v461;
    if (v460.__r_.__value_.__r.__words[2])
    {
      v178 = (unint64_t *)(v460.__r_.__value_.__r.__words[2] + 8);
      do
        v179 = __ldxr(v178);
      while (__stxr(v179 + 1, v178));
    }
    v180 = v462;
    *(_QWORD *)&v476 = v177;
    *((_QWORD *)&v476 + 1) = v462;
    if (v462)
    {
      v181 = (unint64_t *)&v462->__shared_owners_;
      do
        v182 = __ldxr(v181);
      while (__stxr(v182 + 1, v181));
      v477 = v177;
      do
        v183 = __ldaxr(v181);
      while (__stlxr(v183 - 1, v181));
      if (!v183)
      {
        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
        std::__shared_weak_count::__release_weak(v180);
      }
    }
    else
    {
      v477 = v177;
    }
    v184 = (std::__shared_weak_count *)v460.__r_.__value_.__r.__words[2];
    if (v460.__r_.__value_.__r.__words[2])
    {
      v185 = (unint64_t *)(v460.__r_.__value_.__r.__words[2] + 8);
      do
        v186 = __ldaxr(v185);
      while (__stlxr(v186 - 1, v185));
      if (!v186)
      {
        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
        std::__shared_weak_count::__release_weak(v184);
      }
    }
    v187 = v475.__r_.__value_.__r.__words[0];
    if (v477[31] >= 0)
      v188 = v477 + 8;
    else
      v188 = (char *)*((_QWORD *)v477 + 1);
    v189 = _os_log_pack_fill();
    *(_DWORD *)v189 = 136315138;
    *(_QWORD *)(v189 + 4) = v188;
    v190 = operator new();
    v191 = *(unsigned __int8 *)(v145 + 39);
    v192 = *(_QWORD *)(v145 + 16);
    v193 = *(_QWORD *)(v145 + 24);
    v194 = v476;
    *(_OWORD *)(v190 + 8) = *(_OWORD *)&v475.__r_.__value_.__r.__words[1];
    if ((v191 & 0x80u) != 0)
      v191 = v193;
    else
      v192 = v146;
    *(_QWORD *)v190 = v187;
    *(_OWORD *)&v475.__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)(v190 + 24) = v194;
    v476 = 0uLL;
    *(_QWORD *)(v190 + 40) = v192;
    *(_QWORD *)(v190 + 48) = v191;
    *(_BYTE *)(v190 + 56) = 1;
    __b.__r_.__value_.__r.__words[0] = 0;
    v460.__r_.__value_.__r.__words[0] = v190;
    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v158 + 24) + 40))(*(_QWORD *)(v158 + 24), &v460);
    v195 = v460.__r_.__value_.__r.__words[0];
    v460.__r_.__value_.__r.__words[0] = 0;
    v103 = v410;
    if (v195)
    {
      v196 = *(std::__shared_weak_count **)(v195 + 32);
      if (v196)
      {
        v197 = (unint64_t *)&v196->__shared_owners_;
        do
          v198 = __ldaxr(v197);
        while (__stlxr(v198 - 1, v197));
        if (!v198)
        {
          ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
          std::__shared_weak_count::__release_weak(v196);
        }
      }
      v199 = *(std::__shared_weak_count **)(v195 + 16);
      if (v199)
      {
        v200 = (unint64_t *)&v199->__shared_owners_;
        do
          v201 = __ldaxr(v200);
        while (__stlxr(v201 - 1, v200));
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
      }
      MEMORY[0x227684CE8](v195, 0x10F0C40B62ED6C6);
      v202 = __b.__r_.__value_.__r.__words[0];
      __b.__r_.__value_.__r.__words[0] = 0;
      if (v202)
      {
        v203 = *(std::__shared_weak_count **)(v202 + 32);
        if (v203)
        {
          v204 = (unint64_t *)&v203->__shared_owners_;
          do
            v205 = __ldaxr(v204);
          while (__stlxr(v205 - 1, v204));
          if (!v205)
          {
            ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
            std::__shared_weak_count::__release_weak(v203);
          }
        }
        v206 = *(std::__shared_weak_count **)(v202 + 16);
        if (v206)
        {
          v207 = (unint64_t *)&v206->__shared_owners_;
          do
            v208 = __ldaxr(v207);
          while (__stlxr(v208 - 1, v207));
          if (!v208)
          {
            ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
            std::__shared_weak_count::__release_weak(v206);
          }
        }
        MEMORY[0x227684CE8](v202, 0x10F0C40B62ED6C6);
      }
    }
    v209 = (std::__shared_weak_count *)*((_QWORD *)&v476 + 1);
    if (*((_QWORD *)&v476 + 1))
    {
      v210 = (unint64_t *)(*((_QWORD *)&v476 + 1) + 8);
      do
        v211 = __ldaxr(v210);
      while (__stlxr(v211 - 1, v210));
      if (!v211)
      {
        ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
        std::__shared_weak_count::__release_weak(v209);
      }
    }
    v212 = (std::__shared_weak_count *)v475.__r_.__value_.__r.__words[2];
    if (v475.__r_.__value_.__r.__words[2])
    {
      v213 = (unint64_t *)(v475.__r_.__value_.__r.__words[2] + 8);
      do
        v214 = __ldaxr(v213);
      while (__stlxr(v214 - 1, v213));
      if (!v214)
      {
        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
        std::__shared_weak_count::__release_weak(v212);
      }
    }
  }
  else
  {
    os_log_type_enabled(v157, OS_LOG_TYPE_INFO);
    LODWORD(v475.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v475.__r_.__value_.__r.__words + 4) = (std::string::size_type)__sc;
    v167 = (void *)_os_log_send_and_compose_impl();
    if (v167)
      free(v167);
  }
  if (v103)
  {
    v215 = (const char *)&__dst;
    if (v474 < 0)
      v215 = (const char *)__dst;
    sub_22322C138((uint64_t)__p, "%s", v215);
    sub_223182C08((uint64_t)__p);
  }
  sub_223182C08((uint64_t)__p);
  v216 = v458;
  if (v458)
  {
    v217 = (unint64_t *)&v458->__shared_owners_;
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  if (SHIBYTE(v474) < 0)
    operator delete((void *)__dst);
  object[0].i64[0] = *MEMORY[0x24BEDB7F0];
  v219 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)object[0].i64 + *(_QWORD *)(object[0].i64[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  object[1].i64[0] = v219;
  object[1].i64[1] = MEMORY[0x24BEDB848] + 16;
  if (v468 < 0)
    operator delete(v467);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](&v471);
LABEL_330:
  v220 = 0;
  v221 = 0;
  v222 = 0;
  v100.f32[0] = (float)v450;
  do
  {
    if (!v222 && v221 == 4)
      goto LABEL_351;
    v224 = v222 == v221 ? 1.0 : 0.0;
    v225 = *(float *)&v441[v220];
    v226 = v225 < v224;
    if (v225 != v224)
    {
      v99.f32[0] = v225 - v224;
      v227 = v224 - v225;
      if (!v226)
        v227 = v99.f32[0];
      if (v227 > 0.000001)
        goto LABEL_351;
    }
    v223 = v222 <= 2;
    if (v222 <= 2)
      ++v222;
    else
      v222 = 0;
    if (!v223)
      ++v221;
    v220 += 4;
  }
  while (v220 != 64);
  if (!v222 && v221 == 4)
  {
    if (!v96)
      goto LABEL_350;
LABEL_516:
    v228 = a3;
    v231 = *(float32x4_t *)a3[4].f32;
    v232 = *(float32x4_t *)a3[6].f32;
    v229 = *(float32x4_t *)a3->f32;
    v230 = *(float32x4_t *)a3[2].f32;
    goto LABEL_517;
  }
LABEL_351:
  v420 = (float)v450;
  v233 = v448;
  if (v448 != &v449)
  {
    v234 = 0;
    v235 = 0;
    v236 = 0.0;
    v237 = 1.0;
    v238 = 0.0;
    v239 = 0.0;
    v240 = 0.0;
    while (1)
    {
      v97.i64[0] = *(uint64_t *)((char *)v233 + 44);
      v97.i32[2] = *((_DWORD *)v233 + 13);
      v98.i64[0] = *(uint64_t *)((char *)v233 + 60);
      v98.i32[2] = *((_DWORD *)v233 + 17);
      v99.i32[0] = *((_DWORD *)v233 + 21);
      v241.i64[0] = vzip1q_s32((int32x4_t)v97, (int32x4_t)v98).u64[0];
      v101.i64[0] = *(uint64_t *)((char *)v233 + 92);
      v101.i32[2] = *((_DWORD *)v233 + 25);
      v242 = (int8x16_t)vnegq_f32((float32x4_t)v101);
      v243 = (int8x16_t)vtrn2q_s32((int32x4_t)v97, (int32x4_t)v98);
      v243.i32[2] = HIDWORD(*(unint64_t *)((char *)v233 + 76));
      v244 = (int8x16_t)vzip2q_s32((int32x4_t)v97, (int32x4_t)v98);
      *(float32x2_t *)v245.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v241.f32, *(float *)v242.i32), *(float32x2_t *)v243.i8, *(float32x2_t *)v101.i8, 1), *(float32x2_t *)v244.i8, (float32x4_t)v101, 2);
      v244.i32[2] = v99.i32[0];
      v245.i64[1] = __PAIR64__(LODWORD(v237), vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)((char *)v233 + 76), *(float32x2_t *)v242.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)((char *)v233 + 76), 1), *(float32x2_t *)v101.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v242, v242, 8uLL), *(float32x2_t *)v99.f32).u32[0]);
      v246.i32[3] = 0;
      v246.i32[0] = v243.i32[0];
      v248 = vextq_s8(vextq_s8(v243, v243, 0xCuLL), v244, 8uLL);
      v247.i64[0] = v248.i64[1];
      *(uint64_t *)((char *)v246.i64 + 4) = v248.i64[0];
      v247.i64[1] = vdupq_laneq_s32((int32x4_t)v244, 2).u32[0];
      v241.i64[1] = *(uint64_t **)((char *)v233 + 76);
      v249 = *(float32x4_t *)((char *)v233 + 156);
      v250 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v241, COERCE_FLOAT(*(_OWORD *)((char *)v233 + 124))), v246, *(float32x2_t *)((char *)v233 + 124), 1), v247, *(float32x4_t *)((char *)v233 + 124), 2), v245, *(float32x4_t *)((char *)v233 + 124), 3);
      v251 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v241, COERCE_FLOAT(*(_OWORD *)((char *)v233 + 140))), v246, *(float32x2_t *)((char *)v233 + 140), 1), v247, *(float32x4_t *)((char *)v233 + 140), 2), v245, *(float32x4_t *)((char *)v233 + 140), 3);
      object[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v241, COERCE_FLOAT(*(_OWORD *)((char *)v233 + 108))), v246, *(float32x2_t *)((char *)v233 + 108), 1), v247, *(float32x4_t *)((char *)v233 + 108), 2), v245, *(float32x4_t *)((char *)v233 + 108), 3);
      object[1] = v250;
      object[2] = v251;
      object[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v241, v249.f32[0]), v246, *(float32x2_t *)v249.f32, 1), v247, v249, 2), v245, v249, 3);
      memset(&v475, 0, sizeof(v475));
      __p[0] = object;
      __p[1] = 0;
      *(_OWORD *)&v460.__r_.__value_.__l.__data_ = (unint64_t)&v475;
      sub_2236763FC((float32x2_t **)__p, (float **)&v460);
      v252 = *(int8x16_t *)&v475.__r_.__value_.__l.__data_;
      v253 = (float32x2_t)vextq_s8(v252, v252, 8uLL).u64[0];
      v254 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v252.i8, *(float32x2_t *)v252.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v475.__r_.__value_.__l.__data_, 1), (float32x2_t)v475.__r_.__value_.__l.__data_, 1), v253, v253).f32[0];
      if (v254 >= 0.0061)
      {
        v260 = sqrtf(v254);
        v428 = v254;
        *(_OWORD *)__sf = *(_OWORD *)&v475.__r_.__value_.__l.__data_;
        v261 = __sincosf_stret(v260);
        v254 = v428;
        v252 = *(int8x16_t *)__sf;
        v257 = 1.0;
        v258 = v261.__sinval / v260;
        v255 = (float)(1.0 / v428) * (float)(1.0 - v261.__cosval);
        v256 = (float)(1.0 / v428) * (float)(1.0 - (float)(v261.__sinval / v260));
        if (v428 >= 0.00000149)
        {
LABEL_356:
          if (v254 <= 9.0)
            v259 = (float)((float)(v255 * 0.5) - v256) / v258;
          else
            v259 = (float)(v255 + (float)(v258 * -0.5)) / (float)(v254 * v255);
          goto LABEL_361;
        }
      }
      else
      {
        v255 = 0.5 - (float)(v254 * (float)((float)(v254 / -720.0) + 0.041667));
        v256 = 0.16667 - (float)(v254 * (float)((float)(v254 / -5040.0) + 0.0083333));
        v257 = 1.0;
        v258 = 1.0 - (float)(v254 * v256);
        if (v254 >= 0.00000149)
          goto LABEL_356;
      }
      v259 = (float)(v254 * 0.000033069) + (float)((float)(v254 * 0.0013889) + 0.083333);
LABEL_361:
      v262 = (float32x4_t)vextq_s8(vextq_s8(v252, v252, 0xCuLL), v252, 8uLL);
      v263 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v252, (int32x4_t)v252), v252, 0xCuLL);
      v264 = (int8x16_t)vsubq_f32(vmulq_f32(v262, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)object[3], (int32x4_t)object[3]), (int8x16_t)object[3], 0xCuLL)), vmulq_f32(v263, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)object[3], (int8x16_t)object[3], 0xCuLL), (int8x16_t)object[3], 8uLL)));
      v265.i64[0] = 0xBF000000BF000000;
      v265.i64[1] = 0xBF000000BF000000;
      v266 = vaddq_f32(vaddq_f32(object[3], vmulq_f32((float32x4_t)v264, v265)), vmulq_n_f32(vsubq_f32(vmulq_f32(v262, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v264, (int32x4_t)v264), v264, 0xCuLL)), vmulq_f32(v263, (float32x4_t)vextq_s8(vextq_s8(v264, v264, 0xCuLL), v264, 8uLL))), v259));
      HIDWORD(v475.__r_.__value_.__r.__words[2]) = v266.i32[2];
      *(std::string::size_type *)((char *)&v475.__r_.__value_.__r.__words[1] + 4) = v266.i64[0];
      v267 = vabsq_f32(*(float32x4_t *)&v475.__r_.__value_.__l.__data_);
      v267.i32[3] = -4194304;
      v268 = vmaxnmvq_f32(v267);
      v269 = vabsq_f32(v266);
      v269.i32[3] = -4194304;
      v270 = vmaxnmvq_f32(v269);
      v271 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v441, COERCE_FLOAT(*(_OWORD *)((char *)v233 + 44))), *(float32x4_t *)&v441[16], *(float32x2_t *)((char *)v233 + 44), 1), *(float32x4_t *)&v441[32], *(float32x4_t *)((char *)v233 + 44), 2), *(float32x4_t *)&v441[48], *(float32x4_t *)((char *)v233 + 44), 3);
      v272 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v441, COERCE_FLOAT(*(_OWORD *)((char *)v233 + 60))), *(float32x4_t *)&v441[16], *(float32x2_t *)((char *)v233 + 60), 1), *(float32x4_t *)&v441[32], *(float32x4_t *)((char *)v233 + 60), 2), *(float32x4_t *)&v441[48], *(float32x4_t *)((char *)v233 + 60), 3);
      v273 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v441, COERCE_FLOAT(*(_OWORD *)((char *)v233 + 76))), *(float32x4_t *)&v441[16], *(float32x2_t *)((char *)v233 + 76), 1), *(float32x4_t *)&v441[32], *(float32x4_t *)((char *)v233 + 76), 2), *(float32x4_t *)&v441[48], *(float32x4_t *)((char *)v233 + 76), 3);
      v274 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v441, COERCE_FLOAT(*(_OWORD *)((char *)v233 + 92))), *(float32x4_t *)&v441[16], *(float32x2_t *)((char *)v233 + 92), 1), *(float32x4_t *)&v441[32], *(float32x4_t *)((char *)v233 + 92), 2), *(float32x4_t *)&v441[48], *(float32x4_t *)((char *)v233 + 92), 3);
      v262.i64[0] = vzip1q_s32(v271, v272).u64[0];
      v264.i64[0] = v274.i64[0] ^ 0x8000000080000000;
      v262.i64[1] = v273.u32[0];
      v275 = (int8x16_t)vtrn2q_s32(v271, v272);
      v275.i32[2] = v273.i32[1];
      v276 = (int8x16_t)vzip2q_s32(v271, v272);
      *(float32x2_t *)v274.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v262.f32, COERCE_FLOAT(v274.i32[0] ^ 0x80000000)), *(float32x2_t *)v275.i8, (float32x2_t)(v274.i64[0] ^ 0x8000000080000000), 1), *(float32x2_t *)v276.i8, COERCE_FLOAT(v274.i32[2] ^ 0x80000000));
      v276.i32[2] = v273.i32[2];
      v277 = vdupq_laneq_s32((int32x4_t)v276, 2).u32[0];
      v274.i64[1] = __PAIR64__(LODWORD(v257), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v273.i8, *(float32x2_t *)v264.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v264.i8, 1), *(float32x2_t *)v273.i8, 1), (float32x2_t)(v274.i64[1] ^ 0xFFFFFFFF80000000), (float32x2_t)*(_OWORD *)&vextq_s8(v273, v273, 8uLL)).u32[0]);
      v264.i32[0] = v275.i32[0];
      v278 = vextq_s8(vextq_s8(v275, v275, 0xCuLL), v276, 8uLL);
      v264.i32[1] = v278.i32[0];
      v264.i64[1] = v278.u32[1];
      v276.i64[0] = v278.i64[1];
      v276.i64[1] = v277;
      v279 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v262, COERCE_FLOAT(*(_OWORD *)((char *)v233 + 108))), (float32x4_t)v264, *(float32x2_t *)((char *)v233 + 108), 1), (float32x4_t)v276, *(float32x4_t *)((char *)v233 + 108), 2), v274, *(float32x4_t *)((char *)v233 + 108), 3);
      v280 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v262, COERCE_FLOAT(*(_OWORD *)((char *)v233 + 124))), (float32x4_t)v264, *(float32x2_t *)((char *)v233 + 124), 1), (float32x4_t)v276, *(float32x4_t *)((char *)v233 + 124), 2), v274, *(float32x4_t *)((char *)v233 + 124), 3);
      v281 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v262, COERCE_FLOAT(*(_OWORD *)((char *)v233 + 140))), (float32x4_t)v264, *(float32x2_t *)((char *)v233 + 140), 1), (float32x4_t)v276, *(float32x4_t *)((char *)v233 + 140), 2), v274, *(float32x4_t *)((char *)v233 + 140), 3);
      v282 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v262, COERCE_FLOAT(*(_OWORD *)((char *)v233 + 156))), (float32x4_t)v264, *(float32x2_t *)((char *)v233 + 156), 1), (float32x4_t)v276, *(float32x4_t *)((char *)v233 + 156), 2), v274, *(float32x4_t *)((char *)v233 + 156), 3);
      object[0] = v279;
      object[1] = v280;
      object[2] = v281;
      object[3] = v282;
      rep = 0;
      __p[0] = 0;
      __p[1] = 0;
      *(_OWORD *)&v460.__r_.__value_.__l.__data_ = (unint64_t)object;
      v283 = v270 > 0.1 || v268 > 0.017453;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      __b.__r_.__value_.__l.__size_ = 0;
      sub_2236763FC((float32x2_t **)&v460, (float **)&__b);
      v284 = *(int8x16_t *)__p;
      v285 = (float32x2_t)vextq_s8(v284, v284, 8uLL).u64[0];
      v286 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v284.i8, *(float32x2_t *)v284.i8), (float32x2_t)vdup_lane_s32((int32x2_t)__p[0], 1), (float32x2_t)__p[0], 1), v285, v285).f32[0];
      if (v286 >= 0.0061)
      {
        v291 = sqrtf(v286);
        v429 = v286;
        *(_OWORD *)__sg = *(_OWORD *)__p;
        v292 = __sincosf_stret(v291);
        v286 = v429;
        v284 = *(int8x16_t *)__sg;
        v237 = 1.0;
        v289 = v292.__sinval / v291;
        v287 = (float)(1.0 / v429) * (float)(1.0 - v292.__cosval);
        v288 = (float)(1.0 / v429) * (float)(1.0 - (float)(v292.__sinval / v291));
        if (v429 < 0.00000149)
        {
LABEL_369:
          v290 = (float)(v286 * 0.000033069) + (float)((float)(v286 * 0.0013889) + 0.083333);
          goto LABEL_371;
        }
      }
      else
      {
        v287 = 0.5 - (float)(v286 * (float)((float)(v286 / -720.0) + 0.041667));
        v288 = 0.16667 - (float)(v286 * (float)((float)(v286 / -5040.0) + 0.0083333));
        v237 = 1.0;
        v289 = 1.0 - (float)(v286 * v288);
        if (v286 < 0.00000149)
          goto LABEL_369;
      }
      if (v286 <= 9.0)
        v290 = (float)((float)(v287 * 0.5) - v288) / v289;
      else
        v290 = (float)(v287 + (float)(v289 * -0.5)) / (float)(v286 * v287);
LABEL_371:
      v293 = (float32x4_t)vextq_s8(vextq_s8(v284, v284, 0xCuLL), v284, 8uLL);
      v99 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v284, (int32x4_t)v284), v284, 0xCuLL);
      v294 = (int8x16_t)vsubq_f32(vmulq_f32(v293, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)object[3], (int32x4_t)object[3]), (int8x16_t)object[3], 0xCuLL)), vmulq_f32(v99, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)object[3], (int8x16_t)object[3], 0xCuLL), (int8x16_t)object[3], 8uLL)));
      v295.i64[0] = 0xBF000000BF000000;
      v295.i64[1] = 0xBF000000BF000000;
      v101 = vextq_s8(v294, v294, 0xCuLL);
      v98 = vsubq_f32(vmulq_f32(v293, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v294, (int32x4_t)v294), v294, 0xCuLL)), vmulq_f32(v99, (float32x4_t)vextq_s8(v101, v294, 8uLL)));
      v97 = vabsq_f32(*(float32x4_t *)__p);
      v97.i32[3] = -4194304;
      v97.f32[0] = vmaxnmvq_f32(v97);
      v296 = vabsq_f32(vaddq_f32(vaddq_f32(object[3], vmulq_f32((float32x4_t)v294, v295)), vmulq_n_f32(v98, v290)));
      v296.i32[3] = -4194304;
      v297 = vmaxnmvq_f32(v296);
      v298 = v297 > 0.1 || v97.f32[0] > 0.017453;
      v299 = v233[1];
      if (v299)
      {
        do
        {
          v300 = (uint64_t **)v299;
          v299 = (uint64_t *)*v299;
        }
        while (v299);
      }
      else
      {
        do
        {
          v300 = (uint64_t **)v233[2];
          v301 = *v300 == (uint64_t *)v233;
          v233 = v300;
        }
        while (!v301);
      }
      v236 = v236 + v268;
      v238 = v238 + v270;
      v234 += v283;
      v239 = v239 + v97.f32[0];
      v235 += v298;
      v233 = v300;
      v240 = v240 + v297;
      if (v300 == &v449)
        goto LABEL_381;
    }
  }
  v235 = 0;
  v234 = 0;
  v240 = 0.0;
  v239 = 0.0;
  v238 = 0.0;
  v236 = 0.0;
LABEL_381:
  v302 = v234 < v235;
  sub_223C7EE4C(v472);
  if (**(int **)(v472[0] + 56) > 3)
    goto LABEL_515;
  v303 = *(unsigned __int8 *)(v472[0] + 72);
  v304 = sub_22322F254(v472[0], "OSLogSurrogateAppender", 1, 0);
  v305 = v304;
  if (!v303 && !v304)
    goto LABEL_515;
  v475.__r_.__value_.__r.__words[0] = (std::string::size_type)v472;
  v475.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v475.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v476) = 3;
  *((_QWORD *)&v476 + 1) = "unknown file";
  LODWORD(v477) = 278;
  v479 = 0;
  v480 = 0;
  v478 = "unknown function";
  object[1].i32[2] = 0;
  if (v234 >= v235)
    v306 = "true";
  else
    v306 = "false";
  __p[0] = (void *)v306;
  sub_2231C06BC(object, (const char **)__p);
  if (object[1].i32[2] == -1)
    sub_22316DD70();
  __p[0] = &v460;
  ((void (*)(std::string *__return_ptr, void **, float32x4_t *))off_24EC61C08[object[1].u32[2]])(&__b, __p, object);
  if (object[1].i32[2] != -1)
    ((void (*)(void **, float32x4_t *))off_24EC61BF0[object[1].u32[2]])(__p, object);
  v417 = (std::string::size_type)v306;
  __sd = v303;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v307 = &__b;
  else
    v307 = (std::string *)__b.__r_.__value_.__r.__words[0];
  v308 = *(_QWORD *)v475.__r_.__value_.__l.__data_;
  v411 = *(_QWORD *)v475.__r_.__value_.__l.__data_;
  if (*(char *)(*(_QWORD *)v475.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v310 = *(const char **)(v308 + 16);
    v309 = *(_QWORD *)(v308 + 24);
    v414 = v308 + 16;
    v430 = v234 < v235;
    v312 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v312 & 1) == 0)
    {
LABEL_536:
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
        if (object[1].i8[8] && object[1].i8[7] < 0)
          operator delete((void *)object[0].i64[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
    }
  }
  else
  {
    v309 = *(unsigned __int8 *)(*(_QWORD *)v475.__r_.__value_.__l.__data_ + 39);
    v310 = (const char *)(v308 + 16);
    v414 = v308 + 16;
    v430 = v234 < v235;
    v311 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v311 & 1) == 0)
      goto LABEL_536;
  }
  if (byte_255788F40[23] >= 0)
    v313 = byte_255788F40;
  else
    v313 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v314 = byte_255788F40[23];
  else
    v314 = *(_QWORD *)&byte_255788F40[8];
  object[0].i64[0] = (uint64_t)os_log_create(v313, v310);
  v315 = &object[0].i64[1];
  if (v314 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v314 >= 0x17)
  {
    v316 = v307;
    v317 = v305;
    v318 = (v314 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v314 | 7) != 0x17)
      v318 = v314 | 7;
    v319 = v318 + 1;
    v315 = (uint64_t *)operator new(v318 + 1);
    object[1].i64[1] = v319 | 0x8000000000000000;
    object[0].i64[1] = (uint64_t)v315;
    object[1].i64[0] = v314;
    v305 = v317;
    v307 = v316;
    goto LABEL_410;
  }
  object[1].i8[15] = v314;
  if (v314)
LABEL_410:
    memmove(v315, v313, v314);
  *((_BYTE *)v315 + v314) = 0;
  object[2].i8[0] = 1;
  v320 = &object[2].i64[1];
  if (v309 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v309 >= 0x17)
  {
    v322 = (v309 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v309 | 7) != 0x17)
      v322 = v309 | 7;
    v323 = v322 + 1;
    v320 = (uint64_t *)operator new(v322 + 1);
    object[3].i64[1] = v323 | 0x8000000000000000;
    object[2].i64[1] = (uint64_t)v320;
    object[3].i64[0] = v309;
  }
  else
  {
    object[3].i8[15] = v309;
    if (!v309)
    {
      object[2].i8[8] = 0;
      LOBYTE(v465) = 1;
      v321 = object[0].i64[0];
      if ((object[3].i8[15] & 0x80000000) == 0)
        goto LABEL_415;
LABEL_421:
      operator delete((void *)object[2].i64[1]);
      if (object[2].i8[0])
        goto LABEL_422;
      goto LABEL_424;
    }
  }
  memmove(v320, v310, v309);
  *((_BYTE *)v320 + v309) = 0;
  LOBYTE(v465) = 1;
  v321 = object[0].i64[0];
  if (object[3].i8[15] < 0)
    goto LABEL_421;
LABEL_415:
  if (object[2].i8[0])
  {
LABEL_422:
    if (object[1].i8[15] < 0)
      operator delete((void *)object[0].i64[1]);
  }
LABEL_424:
  if (object[0].i64[0])
    os_release((void *)object[0].i64[0]);
  v324 = v236 / v420;
  v325 = v238 / v420;
  v326 = v239 / v420;
  v327 = v240 / v420;
  if (v305 && *(_QWORD *)(v305 + 24))
  {
    v328 = _os_log_pack_size();
    v329 = operator new(v328, (std::align_val_t)8uLL);
    v330 = (_QWORD *)operator new();
    *v330 = &off_24EC1F7F0;
    v330[1] = 0;
    v330[2] = 0;
    v330[3] = v329;
    __p[0] = v329;
    __p[1] = v329;
    v454 = 0;
    rep = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v330;
    v453 = 0;
    v331 = strlen((const char *)v307);
    if (v331 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v332 = v331;
    if (v331 >= 0x17)
    {
      v336 = v307;
      v337 = v305;
      v338 = (v331 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v331 | 7) != 0x17)
        v338 = v331 | 7;
      v339 = v338 + 1;
      v333 = operator new(v338 + 1);
      v460.__r_.__value_.__r.__words[2] = v339 | 0x8000000000000000;
      v460.__r_.__value_.__r.__words[0] = (std::string::size_type)v333;
      v460.__r_.__value_.__l.__size_ = v332;
      v305 = v337;
      v307 = v336;
    }
    else
    {
      *((_BYTE *)&v460.__r_.__value_.__s + 23) = v331;
      v333 = &v460;
      if (!v331)
        goto LABEL_438;
    }
    memcpy(v333, v307, v332);
LABEL_438:
    *((_BYTE *)v333 + v332) = 0;
    *(_QWORD *)&__dst = v460.__r_.__value_.__l.__size_;
    v340 = v460.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)&__dst + 7) = *(std::string::size_type *)((char *)&v460.__r_.__value_.__r.__words[1] + 7);
    v341 = HIBYTE(v460.__r_.__value_.__r.__words[2]);
    v342 = operator new(0x38uLL);
    v342[1] = 0;
    v342[2] = 0;
    v342[3] = off_24EC5C400;
    *v342 = &off_24EC5C3B0;
    v343 = __dst;
    v342[4] = v340;
    v342[5] = v343;
    *(_QWORD *)((char *)v342 + 47) = *(_QWORD *)((char *)&__dst + 7);
    *((_BYTE *)v342 + 55) = v341;
    *(_QWORD *)&__dst = 0;
    *(_QWORD *)((char *)&__dst + 7) = 0;
    v344 = (std::__shared_weak_count *)v454;
    v453 = (char *)(v342 + 3);
    v454 = (const char *)v342;
    if (v344)
    {
      v345 = (unint64_t *)&v344->__shared_owners_;
      do
        v346 = __ldaxr(v345);
      while (__stlxr(v346 - 1, v345));
      if (!v346)
      {
        ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
        std::__shared_weak_count::__release_weak(v344);
      }
    }
    object[0] = *(float32x4_t *)__p;
    v347 = (uint64_t)v453;
    object[1].i64[0] = rep;
    if (rep)
    {
      v348 = (unint64_t *)(rep + 8);
      do
        v349 = __ldxr(v348);
      while (__stxr(v349 + 1, v348));
    }
    v350 = (std::__shared_weak_count *)v454;
    object[1].i64[1] = v347;
    object[2].i64[0] = (uint64_t)v454;
    if (v454)
    {
      v351 = (unint64_t *)(v454 + 8);
      do
        v352 = __ldxr(v351);
      while (__stxr(v352 + 1, v351));
      object[2].i64[1] = v347;
      do
        v353 = __ldaxr(v351);
      while (__stlxr(v353 - 1, v351));
      if (!v353)
      {
        ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
        std::__shared_weak_count::__release_weak(v350);
      }
    }
    else
    {
      object[2].i64[1] = v347;
    }
    v354 = (std::__shared_weak_count *)rep;
    if (rep)
    {
      v355 = (unint64_t *)(rep + 8);
      do
        v356 = __ldaxr(v355);
      while (__stlxr(v356 - 1, v355));
      if (!v356)
      {
        ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
        std::__shared_weak_count::__release_weak(v354);
      }
    }
    v357 = object[0].i64[0];
    if (*(char *)(object[2].i64[1] + 31) >= 0)
      v358 = object[2].i64[1] + 8;
    else
      v358 = *(_QWORD *)(object[2].i64[1] + 8);
    v359 = _os_log_pack_fill();
    *(_DWORD *)v359 = 134219522;
    *(double *)(v359 + 4) = v324;
    *(_WORD *)(v359 + 12) = 2048;
    *(double *)(v359 + 14) = v325;
    *(_WORD *)(v359 + 22) = 2048;
    *(_QWORD *)(v359 + 24) = v234;
    *(_WORD *)(v359 + 32) = 2048;
    *(double *)(v359 + 34) = v326;
    *(_WORD *)(v359 + 42) = 2048;
    *(double *)(v359 + 44) = v327;
    *(_WORD *)(v359 + 52) = 2048;
    *(_QWORD *)(v359 + 54) = v235;
    *(_WORD *)(v359 + 62) = 2080;
    *(_QWORD *)(v359 + 64) = v358;
    v360 = (char *)operator new();
    v361 = *(unsigned __int8 *)(v411 + 39);
    v362 = v414;
    if ((v361 & 0x80u) != 0)
    {
      v362 = *(_QWORD *)(v411 + 16);
      v361 = *(_QWORD *)(v411 + 24);
    }
    *(_QWORD *)v360 = v357;
    *(float32x4_t *)(v360 + 8) = *(float32x4_t *)((char *)object + 8);
    object[0].i64[1] = 0;
    object[1].i64[0] = 0;
    *(float32x4_t *)(v360 + 24) = *(float32x4_t *)((char *)&object[1] + 8);
    object[1].i64[1] = 0;
    object[2].i64[0] = 0;
    *((_QWORD *)v360 + 5) = v362;
    *((_QWORD *)v360 + 6) = v361;
    v360[56] = 1;
    v460.__r_.__value_.__r.__words[0] = 0;
    __p[0] = v360;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v305 + 24) + 40))(*(_QWORD *)(v305 + 24), __p);
    v363 = __p[0];
    __p[0] = 0;
    v335 = __sd;
    if (v363)
    {
      v364 = (std::__shared_weak_count *)*((_QWORD *)v363 + 4);
      if (v364)
      {
        v365 = (unint64_t *)&v364->__shared_owners_;
        do
          v366 = __ldaxr(v365);
        while (__stlxr(v366 - 1, v365));
        if (!v366)
        {
          ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
          std::__shared_weak_count::__release_weak(v364);
        }
      }
      v367 = (std::__shared_weak_count *)*((_QWORD *)v363 + 2);
      if (v367)
      {
        v368 = (unint64_t *)&v367->__shared_owners_;
        do
          v369 = __ldaxr(v368);
        while (__stlxr(v369 - 1, v368));
        if (!v369)
        {
          ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
          std::__shared_weak_count::__release_weak(v367);
        }
      }
      MEMORY[0x227684CE8](v363, 0x10F0C40B62ED6C6);
      v370 = v460.__r_.__value_.__r.__words[0];
      v460.__r_.__value_.__r.__words[0] = 0;
      if (v370)
      {
        v371 = *(std::__shared_weak_count **)(v370 + 32);
        if (v371)
        {
          v372 = (unint64_t *)&v371->__shared_owners_;
          do
            v373 = __ldaxr(v372);
          while (__stlxr(v373 - 1, v372));
          if (!v373)
          {
            ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
            std::__shared_weak_count::__release_weak(v371);
          }
        }
        v374 = *(std::__shared_weak_count **)(v370 + 16);
        if (v374)
        {
          v375 = (unint64_t *)&v374->__shared_owners_;
          do
            v376 = __ldaxr(v375);
          while (__stlxr(v376 - 1, v375));
          if (!v376)
          {
            ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
            std::__shared_weak_count::__release_weak(v374);
          }
        }
        MEMORY[0x227684CE8](v370, 0x10F0C40B62ED6C6);
      }
    }
    v377 = (std::__shared_weak_count *)object[2].i64[0];
    if (object[2].i64[0])
    {
      v378 = (unint64_t *)(object[2].i64[0] + 8);
      do
        v379 = __ldaxr(v378);
      while (__stlxr(v379 - 1, v378));
      if (!v379)
      {
        ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
        std::__shared_weak_count::__release_weak(v377);
      }
    }
    v380 = (std::__shared_weak_count *)object[1].i64[0];
    if (object[1].i64[0])
    {
      v381 = (unint64_t *)(object[1].i64[0] + 8);
      do
        v382 = __ldaxr(v381);
      while (__stlxr(v382 - 1, v381));
      if (!v382)
      {
        ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
        std::__shared_weak_count::__release_weak(v380);
      }
    }
  }
  else
  {
    os_log_type_enabled(v321, OS_LOG_TYPE_INFO);
    object[0].i32[0] = 134219522;
    *(double *)((char *)object[0].i64 + 4) = v324;
    object[0].i16[6] = 2048;
    *(double *)((char *)&object[0].i64[1] + 6) = v325;
    object[1].i16[3] = 2048;
    object[1].i64[1] = v234;
    object[2].i16[0] = 2048;
    *(double *)((char *)object[2].i64 + 2) = v326;
    object[2].i16[5] = 2048;
    *(double *)((char *)&object[2].i64[1] + 4) = v327;
    object[3].i16[2] = 2048;
    *(uint64_t *)((char *)object[3].i64 + 6) = v235;
    object[3].i16[7] = 2080;
    v465 = v307;
    v334 = (void *)_os_log_send_and_compose_impl();
    v335 = __sd;
    if (v334)
      free(v334);
  }
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__b.__r_.__value_.__l.__data_);
    if (v335)
      goto LABEL_501;
  }
  else
  {
    if (!v335)
      goto LABEL_509;
LABEL_501:
    object[1].i32[2] = 0;
    v460.__r_.__value_.__r.__words[0] = v417;
    sub_2231C06BC(object, (const char **)&v460.__r_.__value_.__l.__data_);
    if (object[1].i32[2] == -1)
      sub_22316DD70();
    v460.__r_.__value_.__r.__words[0] = (std::string::size_type)&__b;
    ((void (*)(void **__return_ptr, std::string *, float32x4_t *))off_24EC61C08[object[1].u32[2]])(__p, &v460, object);
    if (object[1].i32[2] != -1)
      ((void (*)(std::string *, float32x4_t *))off_24EC61BF0[object[1].u32[2]])(&v460, object);
    v383 = __p;
    if (rep < 0)
      v383 = (void **)__p[0];
    sub_22322C138((uint64_t)&v475, "VLM:GRS:IGRS [NoRegressionCheck] Baseline (r_error=%f, t_error=%f, #remesh=%zu), New (r_error=%f, t_error=%f, #remesh=%zu), optimize_success=%s", v324, v325, v234, v326, v327, v235, (const char *)v383);
    if (SHIBYTE(rep) < 0)
      operator delete(__p[0]);
    sub_223182C08((uint64_t)&v475);
  }
LABEL_509:
  sub_223182C08((uint64_t)&v475);
  v384 = v480;
  if (v480)
  {
    v385 = (unint64_t *)&v480->__shared_owners_;
    do
      v386 = __ldaxr(v385);
    while (__stlxr(v386 - 1, v385));
    if (!v386)
    {
      ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
      std::__shared_weak_count::__release_weak(v384);
    }
  }
  v302 = v430;
LABEL_515:
  if (v423 || v302)
    goto LABEL_516;
LABEL_350:
  v228 = a3;
  v99 = *(float32x4_t *)a3->f32;
  v100 = *(float32x4_t *)a3[2].f32;
  v101 = *(int8x16_t *)a3[4].f32;
  v102 = *(int8x16_t *)a3[6].f32;
  v229 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v441, COERCE_FLOAT(*(_OWORD *)a3->f32)), *(float32x4_t *)&v441[16], *a3, 1), *(float32x4_t *)&v441[32], *(float32x4_t *)a3->f32, 2), *(float32x4_t *)&v441[48], *(float32x4_t *)a3->f32, 3);
  v230 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v441, v100.f32[0]), *(float32x4_t *)&v441[16], *(float32x2_t *)v100.f32, 1), *(float32x4_t *)&v441[32], v100, 2), *(float32x4_t *)&v441[48], v100, 3);
  v231 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v441, *(float *)v101.i32), *(float32x4_t *)&v441[16], *(float32x2_t *)v101.i8, 1), *(float32x4_t *)&v441[32], (float32x4_t)v101, 2), *(float32x4_t *)&v441[48], (float32x4_t)v101, 3);
  v232 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v441, *(float *)v102.i32), *(float32x4_t *)&v441[16], *(float32x2_t *)v102.i8, 1), *(float32x4_t *)&v441[32], (float32x4_t)v102, 2), *(float32x4_t *)&v441[48], (float32x4_t)v102, 3);
LABEL_517:
  v431 = v230;
  *(float32x4_t *)__sh = v229;
  v421 = v232;
  v424 = v231;
  sub_223C7E650((uint64_t)object, a2, a4, a5, v228, v229, v230, v231, v232, *(double *)v99.i64, *(double *)v100.i64, *(double *)v101.i64, v102);
  *(_OWORD *)a1 = *(_OWORD *)__sh;
  *(float32x4_t *)(a1 + 16) = v431;
  *(float32x4_t *)(a1 + 32) = v424;
  *(float32x4_t *)(a1 + 48) = v421;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_QWORD *)(a1 + 80) = 0;
  sub_223475C18((_QWORD *)(a1 + 64), (unsigned __int8 *)object[0].i64[0], &object[0].u8[8]);
  sub_223198030((uint64_t)object, (_QWORD *)object[0].i64[1]);
  if (v442)
  {
    v443 = (char *)v442;
    operator delete(v442);
  }
  if (v445)
  {
    v446 = (char *)v445;
    operator delete(v445);
  }
  sub_2233FADDC(v449);
}

void sub_223C81D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  void *a69;
  uint64_t v69;

  if (LOBYTE(STACK[0x2B8]) && SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  __cxa_guard_abort(&qword_255788F58);
  if (SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);
  sub_223182DAC(v69 - 240);
  if (a66)
    operator delete(a66);
  if (a69)
    operator delete(a69);
  sub_2233FADDC((_QWORD *)STACK[0x200]);
  _Unwind_Resume(a1);
}

uint64_t sub_223C82108(unsigned int a1, char a2, int a3)
{
  char v5;

  if ((a1 & 0x20) != 0 && a3)
  {
    if ((a1 & 4) != 0
      || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/GenericGlobalReferenceSystem.cpp", 389, (uint64_t)"IsGlobalAnchorInTrack(tracking_status_curr)", 43, (uint64_t)&unk_2245A5947, 0, (void (*)(void **))sub_22457406C))
    {
      return 17;
    }
LABEL_15:
    abort();
  }
  if (((a1 >> 2) & 1) == (a1 & 8) >> 3)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/GenericGlobalReferenceSystem.cpp", 398, (uint64_t)&unk_2245A5947, 0, (uint64_t)"Global anchor cannot be both in track and external", 50, (void (*)(void **))sub_22457406C);
    goto LABEL_15;
  }
  if ((a1 & 4) != 0)
    v5 = 1;
  else
    v5 = 2;
  if ((a1 & 0xC) == 0)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/GenericGlobalReferenceSystem.cpp", 404, (uint64_t)"IsGlobalAnchorExternal(tracking_status_curr)", 44, (uint64_t)&unk_2245A5947, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_15;
    }
    v5 = 2;
  }
  return ((16 * ((v5 ^ a2) & 1)) | v5);
}

uint64_t sub_223C82218(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, _BYTE *a5)
{
  const char *v9;
  uint64_t result;
  _DWORD v11[6];
  int v12;
  std::string v13;
  std::string **v14;
  std::string *v15;
  std::string *v16;
  _DWORD *v17;
  std::string *v18;
  std::string *v19;

  v12 = 0;
  sub_223714EB8(v11, "GRS: expect at most one non-empty! #PU=");
  std::to_string(&v13, *a2);
  v15 = (std::string *)v11;
  v16 = &v13;
  v17 = v11;
  v18 = &v13;
  v19 = &v13;
  if (v12 == -1)
    sub_22316DD70();
  v14 = &v15;
  ((void (*)(std::string ***, _DWORD *))off_24EC61BD8[v12])(&v14, v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v15 = (std::string *)v11;
  v16 = (std::string *)" #EX=";
  v17 = v11;
  v18 = (std::string *)" #EX=";
  v19 = (std::string *)" #EX=";
  if (v12 == -1)
    sub_22316DD70();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  ((void (*)(std::string *, _DWORD *))off_24EC61CC0[v12])(&v13, v11);
  std::to_string(&v13, *a3);
  v15 = (std::string *)v11;
  v16 = &v13;
  v17 = v11;
  v18 = &v13;
  v19 = &v13;
  if (v12 == -1)
    sub_22316DD70();
  v14 = &v15;
  ((void (*)(std::string ***, _DWORD *))off_24EC61BD8[v12])(&v14, v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v15 = (std::string *)v11;
  v16 = (std::string *)" #Tracked KFs=";
  v17 = v11;
  v18 = (std::string *)" #Tracked KFs=";
  v19 = (std::string *)" #Tracked KFs=";
  if (v12 == -1)
    sub_22316DD70();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  ((void (*)(std::string *, _DWORD *))off_24EC61CD8[v12])(&v13, v11);
  std::to_string(&v13, *a4);
  v15 = (std::string *)v11;
  v16 = &v13;
  v17 = v11;
  v18 = &v13;
  v19 = &v13;
  if (v12 == -1)
    sub_22316DD70();
  v14 = &v15;
  ((void (*)(std::string ***, _DWORD *))off_24EC61BD8[v12])(&v14, v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v15 = (std::string *)v11;
  v16 = (std::string *)" Is graph update=";
  v17 = v11;
  v18 = (std::string *)" Is graph update=";
  v19 = (std::string *)" Is graph update=";
  if (v12 == -1)
    sub_22316DD70();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  ((void (*)(std::string *, _DWORD *))off_24EC61CF0[v12])(&v13, v11);
  v9 = "true";
  if (!*a5)
    v9 = "false";
  v14 = (std::string **)v9;
  v15 = (std::string *)v11;
  v16 = (std::string *)&v14;
  v17 = v11;
  v18 = (std::string *)&v14;
  v19 = (std::string *)&v14;
  if (v12 == -1)
    sub_22316DD70();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  ((void (*)(std::string *, _DWORD *))off_24EC61CA8[v12])(&v13, v11);
  if (v12 == -1)
    sub_22316DD70();
  v15 = &v13;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24EC61C08[v12])(&v15, v11);
  if (v12 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24EC61BF0[v12])(&v15, v11);
  return result;
}

void sub_223C82534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_223C82594@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char *a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  void **v16;
  size_t v17;
  size_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  char *v22;
  char v23;
  unint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  unsigned __int8 *v32;
  double v33;
  double v34;
  double v35;
  int8x16_t v36;
  char *v37;
  char *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t **v41;
  char *v42;
  char *v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char *v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unsigned __int8 *v73;
  char *v74;
  unsigned __int8 *v75;
  char *v76;
  unsigned __int8 *v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  float *v82;
  _QWORD *v83;
  void *v84;
  void *v85;
  char *v86;
  BOOL v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t *v91;
  char v93;
  _QWORD *v94;
  uint64_t v95;
  void **v96;
  uint64_t v97;
  unsigned __int8 *v98;
  char *v99;
  _QWORD *v100;
  char *v101;
  char *v102;
  unsigned __int8 *v104;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  void *__p[2];
  __int128 v113;
  int v114;
  unsigned __int8 *v115;
  _QWORD *v116[2];
  unsigned __int8 *v117;
  _QWORD *v118;
  float *__dst;
  _QWORD *v120;
  uint64_t v121;
  unsigned __int8 *v122[2];
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;

  v104 = (unsigned __int8 *)(a1 + 180);
  sub_223A62A3C((unsigned __int8 *)(a1 + 180), (uint64_t)__p);
  if ((SBYTE7(v113) & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  __dst = 0;
  v17 = strnlen((const char *)v16, 8uLL);
  memcpy(&__dst, v16, v17);
  __dst = 0;
  v18 = strnlen((const char *)v16, 8uLL);
  memcpy(&__dst, v16, v18);
  kdebug_trace();
  if (SBYTE7(v113) < 0)
  {
    operator delete(__p[0]);
    if (a8)
      goto LABEL_9;
  }
  else if (a8)
  {
    goto LABEL_9;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/GenericGlobalReferenceSystem.cpp", 764, (uint64_t)"gref_result.has_value() && \"Expect value\"", 41, (uint64_t)&unk_2245A5947, 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_143;
  }
LABEL_9:
  if (*(unsigned __int8 *)(a2 + 192) >= 2u
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/GenericGlobalReferenceSystem.cpp", 767, (uint64_t)"slam_state.slam_mode == SLAMMode::kRegularSLAM || slam_state.slam_mode == SLAMMode::kVisualSLAM", 95, (uint64_t)"Unknown slam mode", 17, (void (*)(void **))sub_22457406C))
  {
LABEL_143:
    abort();
  }
  v19 = (uint64_t *)(a1 + 8);
  if (*(_BYTE *)a2 && *(_BYTE *)(a2 + 1) && !*(_BYTE *)(a2 + 2))
  {
    v20 = *(_DWORD *)(a2 + 4);
    v21 = *(_QWORD *)(a2 + 8);
    v22 = (char *)(a1 + 16);
    if ((v20 != 0) != (*(_BYTE *)(a1 + 16) != 0))
    {
      if (!v20)
        goto LABEL_18;
LABEL_22:
      v24 = v21 & 0xFFFFFFFFFFFFFF00;
      v23 = 1;
      goto LABEL_24;
    }
    if ((a5 & 0x10) != 0 && v20 && *(_BYTE *)(a1 + 16))
      goto LABEL_22;
LABEL_23:
    v21 = *v19;
    v24 = *v19 & 0xFFFFFFFFFFFFFF00;
    v23 = *v22;
    goto LABEL_24;
  }
  v22 = (char *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_23;
LABEL_18:
  LOBYTE(v21) = 0;
  v23 = 0;
  v24 = 0;
LABEL_24:
  *(_QWORD *)(a1 + 8) = v24 | v21;
  *(_BYTE *)(a1 + 16) = v23;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)__p = 0u;
  v113 = 0u;
  v114 = 728333656;
  kdebug_trace();
  v25 = *a7;
  *(_QWORD *)(a9 + 152) = 0;
  *(_QWORD *)(a9 + 144) = a9 + 152;
  *(_OWORD *)(a9 + 72) = 0u;
  *(_QWORD *)(a9 + 160) = 0;
  *(_OWORD *)(a9 + 88) = 0u;
  *(_OWORD *)(a9 + 104) = 0u;
  *(_OWORD *)(a9 + 120) = 0u;
  *(_QWORD *)(a9 + 136) = 0;
  *(_QWORD *)(a9 + 176) = 0;
  *(_QWORD *)(a9 + 168) = a9 + 176;
  *(_QWORD *)(a9 + 184) = 0;
  *(_DWORD *)(a9 + 68) = 4;
  *(_BYTE *)a9 = v25;
  v26 = *(_OWORD *)(a7 + 56);
  v27 = *(_OWORD *)(a7 + 72);
  v28 = *(_OWORD *)(a7 + 88);
  *(_OWORD *)(a9 + 52) = *(_OWORD *)(a7 + 104);
  *(_OWORD *)(a9 + 36) = v28;
  *(_OWORD *)(a9 + 20) = v27;
  *(_OWORD *)(a9 + 4) = v26;
  v29 = a3[2];
  if (!v29 || (v25 & 2) != 0 || (v25 & 0x21) == 0)
    goto LABEL_131;
  v94 = (_QWORD *)(a9 + 144);
  v95 = a9 + 152;
  v96 = (void **)(a9 + 72);
  v97 = a6;
  v93 = v25;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  *(_QWORD *)(a9 + 176) = 0;
  *(_QWORD *)(a9 + 184) = 0;
  *(_QWORD *)(a9 + 168) = a9 + 176;
  if (v29 >> 58)
LABEL_144:
    sub_223257BE4();
  v30 = a4;
  v31 = (char *)operator new(v29 << 6);
  v109 = v31;
  v110 = v31;
  v101 = &v31[64 * v29];
  v111 = v101;
  v32 = (unsigned __int8 *)operator new(16 * v29);
  v106 = v32;
  v107 = v32;
  v102 = (char *)&v32[16 * v29];
  v108 = v102;
  v38 = *(char **)(a2 + 96);
  v37 = *(char **)(a2 + 104);
  v40 = *(unsigned __int8 **)(a2 + 72);
  v39 = *(unsigned __int8 **)(a2 + 80);
  if ((v37 - v38) >> 6 != (v39 - v40) >> 4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/GenericGlobalReferenceSystem.cpp", 686, (uint64_t)"updated_poses.size() == updated_uuids.size()", 44, (uint64_t)&unk_2245A5947, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v40 = *(unsigned __int8 **)(a2 + 72);
    v39 = *(unsigned __int8 **)(a2 + 80);
    v38 = *(char **)(a2 + 96);
    v37 = *(char **)(a2 + 104);
  }
  if (v40 == v39 && v38 == v37)
  {
LABEL_117:
    v42 = v31;
    v73 = v32;
    if (!a3[2])
      goto LABEL_119;
    goto LABEL_118;
  }
  v41 = (uint64_t **)a3[1];
  if (!v41)
  {
    v74 = v38 + 64;
    v75 = v40 + 16;
    do
    {
      do
      {
        v76 = v74;
        v77 = v75;
        v74 += 64;
        v75 += 16;
      }
      while (v77 != v39);
    }
    while (v76 != v37);
    goto LABEL_117;
  }
  v42 = v31;
  v43 = (char *)v32;
  v99 = v37;
  v100 = a3;
  v98 = v39;
  while (2)
  {
    if (!v41)
      goto LABEL_107;
    v44 = *v40;
    while (1)
    {
      v45 = *((unsigned __int8 *)v41 + 28);
      v46 = v44 >= v45;
      if (v44 != v45)
      {
        v47 = *v40;
LABEL_67:
        if (!v46)
          goto LABEL_39;
        goto LABEL_69;
      }
      v47 = v40[1];
      v45 = *((unsigned __int8 *)v41 + 29);
      v46 = v47 >= v45;
      if (v47 != v45)
        goto LABEL_67;
      v47 = v40[2];
      v45 = *((unsigned __int8 *)v41 + 30);
      v46 = v47 >= v45;
      if (v47 != v45)
        goto LABEL_67;
      v47 = v40[3];
      v45 = *((unsigned __int8 *)v41 + 31);
      v46 = v47 >= v45;
      if (v47 != v45)
        goto LABEL_67;
      v47 = v40[4];
      v45 = *((unsigned __int8 *)v41 + 32);
      v46 = v47 >= v45;
      if (v47 != v45)
        goto LABEL_67;
      v47 = v40[5];
      v45 = *((unsigned __int8 *)v41 + 33);
      v46 = v47 >= v45;
      if (v47 != v45)
        goto LABEL_67;
      v47 = v40[6];
      v45 = *((unsigned __int8 *)v41 + 34);
      v46 = v47 >= v45;
      if (v47 != v45)
        goto LABEL_67;
      v47 = v40[7];
      v45 = *((unsigned __int8 *)v41 + 35);
      v46 = v47 >= v45;
      if (v47 != v45)
        goto LABEL_67;
      v48 = v40[8];
      v49 = *((unsigned __int8 *)v41 + 36);
      if (v48 != v49)
        goto LABEL_56;
      v48 = v40[9];
      v49 = *((unsigned __int8 *)v41 + 37);
      if (v48 != v49)
        goto LABEL_56;
      v48 = v40[10];
      v49 = *((unsigned __int8 *)v41 + 38);
      if (v48 != v49)
        goto LABEL_56;
      v48 = v40[11];
      v49 = *((unsigned __int8 *)v41 + 39);
      if (v48 != v49)
        goto LABEL_56;
      v48 = v40[12];
      v49 = *((unsigned __int8 *)v41 + 40);
      if (v48 != v49
        || (v48 = v40[13], v49 = *((unsigned __int8 *)v41 + 41), v48 != v49)
        || (v48 = v40[14], v49 = *((unsigned __int8 *)v41 + 42), v48 != v49)
        || (v48 = v40[15], v49 = *((unsigned __int8 *)v41 + 43), v48 != v49))
      {
LABEL_56:
        if (v48 < v49)
          goto LABEL_39;
      }
      v45 = *((unsigned __int8 *)v41 + 36);
      v47 = v40[8];
      if (v45 == v47)
      {
        v45 = *((unsigned __int8 *)v41 + 37);
        v47 = v40[9];
        if (v45 == v47)
        {
          v45 = *((unsigned __int8 *)v41 + 38);
          v47 = v40[10];
          if (v45 == v47)
          {
            v45 = *((unsigned __int8 *)v41 + 39);
            v47 = v40[11];
            if (v45 == v47)
            {
              v45 = *((unsigned __int8 *)v41 + 40);
              v47 = v40[12];
              if (v45 == v47)
              {
                v45 = *((unsigned __int8 *)v41 + 41);
                v47 = v40[13];
                if (v45 == v47)
                {
                  v45 = *((unsigned __int8 *)v41 + 42);
                  v47 = v40[14];
                  if (v45 == v47)
                  {
                    v45 = *((unsigned __int8 *)v41 + 43);
                    v47 = v40[15];
                    if (v45 == v47)
                      break;
                  }
                }
              }
            }
          }
        }
      }
LABEL_69:
      if (v45 >= v47)
        break;
      ++v41;
LABEL_39:
      v41 = (uint64_t **)*v41;
      if (!v41)
        goto LABEL_107;
    }
    if (v43 >= v102)
    {
      v53 = (v43 - (char *)v32) >> 4;
      v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 60)
        sub_22316E078();
      if ((v102 - (char *)v32) >> 3 > v54)
        v54 = (v102 - (char *)v32) >> 3;
      if ((unint64_t)(v102 - (char *)v32) >= 0x7FFFFFFFFFFFFFF0)
        v55 = 0xFFFFFFFFFFFFFFFLL;
      else
        v55 = v54;
      if (v55)
      {
        if (v55 >> 60)
          goto LABEL_145;
        v56 = (char *)operator new(16 * v55);
        v57 = &v56[16 * v53];
        *(_OWORD *)v57 = *(_OWORD *)v40;
        if (v43 != (char *)v32)
        {
LABEL_82:
          v58 = v57;
          do
          {
            v59 = (uint64_t)(v58 - 16);
            *((_OWORD *)v58 - 1) = *((_OWORD *)v43 - 1);
            v43 -= 16;
            v58 -= 16;
          }
          while (v43 != (char *)v32);
          v43 = v57 + 16;
          v106 = (unsigned __int8 *)v59;
          v102 = &v56[16 * v55];
          v108 = v102;
          if (!v32)
            goto LABEL_86;
LABEL_85:
          operator delete(v32);
LABEL_86:
          v32 = (unsigned __int8 *)v59;
          v37 = v99;
          a3 = v100;
          v39 = v98;
          v107 = (unsigned __int8 *)v43;
          if (v42 >= v101)
            goto LABEL_87;
LABEL_72:
          v50 = *(_OWORD *)v38;
          v51 = *((_OWORD *)v38 + 1);
          v52 = *((_OWORD *)v38 + 3);
          *((_OWORD *)v42 + 2) = *((_OWORD *)v38 + 2);
          *((_OWORD *)v42 + 3) = v52;
          *(_OWORD *)v42 = v50;
          *((_OWORD *)v42 + 1) = v51;
          v42 += 64;
          goto LABEL_106;
        }
      }
      else
      {
        v56 = 0;
        v57 = (char *)(16 * v53);
        *(_OWORD *)(16 * v53) = *(_OWORD *)v40;
        if (v43 != (char *)v32)
          goto LABEL_82;
      }
      v59 = (uint64_t)v57;
      v43 = v57 + 16;
      v106 = (unsigned __int8 *)v57;
      v102 = &v56[16 * v55];
      v108 = v102;
      if (!v32)
        goto LABEL_86;
      goto LABEL_85;
    }
    *(_OWORD *)v43 = *(_OWORD *)v40;
    v43 += 16;
    v107 = (unsigned __int8 *)v43;
    if (v42 < v101)
      goto LABEL_72;
LABEL_87:
    v60 = (v42 - v31) >> 6;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 58)
      goto LABEL_144;
    if ((v101 - v31) >> 5 > v61)
      v61 = (v101 - v31) >> 5;
    if ((unint64_t)(v101 - v31) >= 0x7FFFFFFFFFFFFFC0)
      v62 = 0x3FFFFFFFFFFFFFFLL;
    else
      v62 = v61;
    if (v62)
    {
      if (!(v62 >> 58))
      {
        v63 = (char *)operator new(v62 << 6);
        goto LABEL_100;
      }
LABEL_145:
      sub_223174E94();
    }
    v63 = 0;
LABEL_100:
    v64 = &v63[64 * v60];
    v65 = *(_OWORD *)v38;
    v66 = *((_OWORD *)v38 + 1);
    v67 = *((_OWORD *)v38 + 3);
    *((_OWORD *)v64 + 2) = *((_OWORD *)v38 + 2);
    *((_OWORD *)v64 + 3) = v67;
    *(_OWORD *)v64 = v65;
    *((_OWORD *)v64 + 1) = v66;
    if (v42 == v31)
    {
      v69 = &v63[64 * v60];
      v42 = v64 + 64;
      v109 = v64;
      v101 = &v63[64 * v62];
      v111 = v101;
      if (v31)
        goto LABEL_104;
    }
    else
    {
      v68 = &v63[64 * v60];
      do
      {
        v69 = v68 - 64;
        v70 = *((_OWORD *)v42 - 4);
        v71 = *((_OWORD *)v42 - 3);
        v72 = *((_OWORD *)v42 - 1);
        *((_OWORD *)v68 - 2) = *((_OWORD *)v42 - 2);
        *((_OWORD *)v68 - 1) = v72;
        *((_OWORD *)v68 - 4) = v70;
        *((_OWORD *)v68 - 3) = v71;
        v42 -= 64;
        v68 -= 64;
      }
      while (v42 != v31);
      v42 = v64 + 64;
      v109 = v69;
      v101 = &v63[64 * v62];
      v111 = v101;
      if (v31)
LABEL_104:
        operator delete(v31);
    }
    v31 = v69;
    v37 = v99;
    a3 = v100;
    v39 = v98;
LABEL_106:
    v110 = v42;
LABEL_107:
    v40 += 16;
    v38 += 64;
    if (v40 != v39 || v38 != v37)
    {
      v41 = (uint64_t **)a3[1];
      continue;
    }
    break;
  }
  v32 = v106;
  v73 = v107;
  v30 = a4;
  if (a3[2] != (v107 - v106) >> 4)
  {
LABEL_118:
    sub_223C85278((_QWORD **)&v117, v32, v73);
    v78 = (_QWORD *)*a3;
    v116[0] = 0;
    v116[1] = 0;
    v115 = (unsigned __int8 *)v116;
    sub_223AC2284(&v115, v78, v79, a3 + 1);
    v125 = (unsigned __int8 *)v116;
    v126 = v115;
    v123 = (unsigned __int8 *)&v118;
    v124 = v117;
    v122[0] = (unsigned __int8 *)(a9 + 168);
    v122[1] = (unsigned __int8 *)(a9 + 176);
    sub_2238C59A4(&v126, &v125, &v124, &v123, v122, (uint64_t)&__dst);
    sub_223198030((uint64_t)&v115, v116[0]);
    sub_223198030((uint64_t)&v117, v118);
  }
LABEL_119:
  sub_223C7E650((uint64_t)&__dst, (uint64_t)a3, &v109, (uint64_t *)&v106, v30, *(float32x4_t *)(a7 + 56), *(float32x4_t *)(a7 + 72), *(float32x4_t *)(a7 + 88), *(float32x4_t *)(a7 + 104), v33, v34, v35, v36);
  sub_223198030((uint64_t)v94, *(_QWORD **)(a9 + 152));
  v80 = v120;
  *(_QWORD *)(a9 + 144) = __dst;
  *(_QWORD *)(a9 + 152) = v80;
  v81 = v121;
  *(_QWORD *)(a9 + 160) = v121;
  a6 = v97;
  if (v81)
  {
    v80[2] = v95;
    __dst = (float *)&v120;
    v120 = 0;
    v121 = 0;
    v82 = (float *)(a9 + 4);
    sub_223198030((uint64_t)&__dst, 0);
    v83 = (_QWORD *)(a9 + 72);
    v84 = *v96;
    if (*v96)
      goto LABEL_121;
  }
  else
  {
    *v94 = v95;
    v82 = (float *)(a9 + 4);
    sub_223198030((uint64_t)&__dst, v80);
    v83 = (_QWORD *)(a9 + 72);
    v84 = *v96;
    if (*v96)
    {
LABEL_121:
      *(_QWORD *)(a9 + 80) = v84;
      operator delete(v84);
      *v83 = 0;
      v83[1] = 0;
      v83[2] = 0;
    }
  }
  v85 = *(void **)(a9 + 96);
  v86 = v111;
  *(_QWORD *)(a9 + 72) = v109;
  *(_QWORD *)(a9 + 80) = v42;
  *(_QWORD *)(a9 + 88) = v86;
  v110 = 0;
  v111 = 0;
  v109 = 0;
  if (v85)
  {
    *(_QWORD *)(a9 + 104) = v85;
    operator delete(v85);
    *(_QWORD *)(a9 + 96) = 0;
    *(_QWORD *)(a9 + 104) = 0;
    *(_QWORD *)(a9 + 112) = 0;
  }
  *(_QWORD *)(a9 + 96) = v32;
  *(_QWORD *)(a9 + 104) = v73;
  *(_QWORD *)(a9 + 112) = v108;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  __dst = v82;
  v120 = v30;
  v87 = sub_2231F73E4(&__dst);
  v19 = (uint64_t *)(a1 + 8);
  if ((v93 & 0x20) != 0)
  {
    if (v87 && *(_QWORD *)(a9 + 160) == 0)
      v88 = 4;
    else
      v88 = 3;
LABEL_130:
    *(_DWORD *)(a9 + 68) = v88;
  }
  else if ((v93 & 1) != 0)
  {
    v88 = 2;
    goto LABEL_130;
  }
LABEL_131:
  kdebug_trace();
  v89 = *(_QWORD *)(a1 + 64) + 1;
  *(_QWORD *)(a1 + 64) = v89;
  ++*(_QWORD *)(a1 + 104);
  v90 = *(_DWORD *)(a9 + 68);
  switch(v90)
  {
    case 3:
      ++*(_QWORD *)(a1 + 48);
      v91 = (uint64_t *)(a1 + 88);
      goto LABEL_139;
    case 2:
      ++*(_QWORD *)(a1 + 40);
      v91 = (uint64_t *)(a1 + 80);
      goto LABEL_139;
    case 1:
      v91 = (uint64_t *)(a1 + 72);
      ++*(_QWORD *)(a1 + 32);
      goto LABEL_139;
  }
  if ((*(_BYTE *)a9 & 2) != 0)
  {
    ++*(_QWORD *)(a1 + 56);
    v91 = (uint64_t *)(a1 + 96);
LABEL_139:
    *v91 = v89;
  }
  sub_223C130F4((unsigned __int8 *)a9, (unint64_t *)(a1 + 32), a3, (uint64_t)v19, v104, a6);
  return kdebug_trace();
}

void sub_223C83098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  sub_223198030(v38 - 216, *(_QWORD **)(v38 - 208));
  sub_223198030(v38 - 192, *(_QWORD **)(v38 - 184));
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  sub_223C052EC(v37);
  sub_2231874DC((uint64_t)&a37);
  sub_2231874DC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_223C83138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_2231874DC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_223C8314C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, float32x2_t *a4@<X3>, char a5@<W4>, float32x2_t *a6@<X5>, char a7@<W7>, uint64_t a8@<X8>)
{
  unsigned __int8 *v11;
  void **v12;
  size_t v13;
  size_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int32x4_t v28;
  __n128 v29;
  float32x4_t v30;
  double v31;
  double v32;
  float32x4_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  size_t v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  _OWORD *v51;
  char v52;
  unsigned __int8 *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  char v58;
  char v59;
  float32x2_t *v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  size_t v64;
  void *v65;
  char *v66;
  const void **v67;
  const void *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  const char *v75;
  unsigned __int8 v76;
  const char *v77;
  size_t v78;
  const char *v79;
  _BYTE *v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  size_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  size_t v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  size_t v94;
  size_t v95;
  _QWORD *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  char v102;
  _QWORD *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  char *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  const char *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  char *v156;
  uint64_t v157;
  _BOOL4 v158;
  _BOOL4 v159;
  int v160;
  uint64_t *v161;
  char *v163;
  const void **v164;
  const void *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  const char *v170;
  size_t v171;
  unsigned __int8 v172;
  const char *v173;
  size_t v174;
  const char *v175;
  _BYTE *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  NSObject *v182;
  size_t v183;
  std::__shared_weak_count_vtbl *v184;
  std::__shared_weak_count *v185;
  size_t v186;
  size_t v187;
  _QWORD *v188;
  uint64_t v189;
  void *v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  char v195;
  _QWORD *v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *p_shared_owners;
  unint64_t v200;
  char *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  const char *v216;
  uint64_t v217;
  __int128 v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  _QWORD *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  const char *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  unsigned int v244;
  void **v245;
  uint64_t v246;
  const char *v247;
  int v248;
  uint64_t v249;
  _QWORD *v250;
  char *__sa;
  char *__sb;
  uint64_t v254;
  unsigned __int8 *v255;
  int *v257;
  _QWORD *v261;
  _QWORD *v262[2];
  unsigned __int8 v263;
  _QWORD **v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v269;
  int v270;
  const char *v271;
  int v272;
  const char *v273;
  uint64_t v274;
  std::__shared_weak_count *v275;
  void *v276;
  size_t v277;
  int64_t v278;
  void *__p[2];
  __int128 v280;
  __int128 v281;
  __int128 v282;
  char **v283;
  char *v284;
  uint64_t v285;
  void *v286;
  char v287;
  char *v288;
  int v289;
  _BYTE v290[152];
  uint64_t v291;
  __int128 v292;
  std::__shared_weak_count *v293;
  char *v294;
  std::__shared_weak_count *v295;
  _QWORD *v296;
  __int128 v297;
  _BYTE __dst[24];
  __int128 v299;
  char *v300;
  size_t v301;
  unint64_t v302;
  char v303;
  _QWORD v304[5];

  v304[2] = *MEMORY[0x24BDAC8D0];
  v11 = (unsigned __int8 *)(a1 + 180);
  v12 = __p;
  sub_223A62A3C((unsigned __int8 *)(a1 + 180), (uint64_t)__p);
  if (SBYTE7(v280) < 0)
    v12 = (void **)__p[0];
  *(_QWORD *)__dst = 0;
  v13 = strnlen((const char *)v12, 8uLL);
  memcpy(__dst, v12, v13);
  *(_QWORD *)__dst = 0;
  v14 = strnlen((const char *)v12, 8uLL);
  memcpy(__dst, v12, v14);
  kdebug_trace();
  if (SBYTE7(v280) < 0)
  {
    operator delete(__p[0]);
    if (!a7)
      goto LABEL_8;
  }
  else if (!a7)
  {
    goto LABEL_8;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/GenericGlobalReferenceSystem.cpp", 789, (uint64_t)"!gref_result.has_value() && \"Expect no value\"", 45, (uint64_t)&unk_2245A5947, 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_372;
  }
LABEL_8:
  v15 = *(unsigned __int8 *)(a2 + 192);
  if (v15 >= 2)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/GenericGlobalReferenceSystem.cpp", 792, (uint64_t)"slam_state.slam_mode == SLAMMode::kRegularSLAM || slam_state.slam_mode == SLAMMode::kVisualSLAM", 95, (uint64_t)"Unknown slam mode", 17, (void (*)(void **))sub_22457406C))
    {
      v15 = *(unsigned __int8 *)(a2 + 192);
      goto LABEL_11;
    }
LABEL_372:
    abort();
  }
LABEL_11:
  v16 = (uint64_t *)(a1 + 8);
  v255 = v11;
  if (*(_BYTE *)a2 && *(_BYTE *)(a2 + 1) && !*(_BYTE *)(a2 + 2))
  {
    v18 = (_QWORD *)(a2 + 8);
    v17 = *(_QWORD *)(a2 + 8);
    v19 = *(_DWORD *)(a2 + 4);
    v20 = (unsigned __int8 *)(a1 + 16);
    if ((v19 != 0) != (*(_BYTE *)(a1 + 16) != 0))
    {
      if (!v19)
        goto LABEL_18;
      goto LABEL_22;
    }
    if ((a5 & 0x10) != 0 && v19 && *(_BYTE *)(a1 + 16))
    {
LABEL_22:
      v22 = v17 & 0xFFFFFFFFFFFFFF00;
      v21 = 1;
      goto LABEL_24;
    }
  }
  else
  {
    v18 = (_QWORD *)(a2 + 8);
    v20 = (unsigned __int8 *)(a1 + 16);
    if (*(_BYTE *)(a1 + 16))
    {
LABEL_18:
      LOBYTE(v17) = 0;
      v21 = 0;
      v22 = 0;
      goto LABEL_24;
    }
  }
  v17 = *v16;
  v22 = *v16 & 0xFFFFFFFFFFFFFF00;
  v21 = *v20;
LABEL_24:
  v23 = *(unsigned __int8 *)(a1 + 24);
  v24 = v22 | v17;
  *(_QWORD *)(a1 + 8) = v24;
  *(_BYTE *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 192);
  kdebug_trace();
  *(_OWORD *)(a8 + 4) = xmmword_22466BA80;
  *(_OWORD *)(a8 + 20) = unk_22466BA90;
  *(_OWORD *)(a8 + 36) = xmmword_22466BAA0;
  *(_BYTE *)a8 = 0;
  *(_OWORD *)(a8 + 52) = unk_22466BAB0;
  *(_OWORD *)(a8 + 68) = 0u;
  v257 = (int *)(a8 + 68);
  *(_QWORD *)(a8 + 152) = 0;
  v254 = a8 + 152;
  *(_QWORD *)(a8 + 144) = a8 + 152;
  *(_QWORD *)(a8 + 160) = 0;
  *(_OWORD *)(a8 + 84) = 0u;
  *(_OWORD *)(a8 + 100) = 0u;
  *(_OWORD *)(a8 + 116) = 0u;
  *(_OWORD *)(a8 + 128) = 0u;
  *(_QWORD *)(a8 + 184) = 0;
  *(_QWORD *)(a8 + 176) = 0;
  v26 = (_QWORD *)(a8 + 176);
  *(_QWORD *)(a8 + 168) = a8 + 176;
  if (!a3[2])
  {
    *v26 = 0;
    *(_QWORD *)(a8 + 184) = 0;
    *(_QWORD *)(a8 + 168) = v26;
    __p[1] = 0;
    *(_QWORD *)&v280 = 0;
    __p[0] = &__p[1];
    sub_223198030(a8 + 144, 0);
    v49 = __p[1];
    *(void **)(a8 + 144) = __p[0];
    *(_QWORD *)(a8 + 152) = v49;
    v50 = v280;
    *(_QWORD *)(a8 + 160) = v280;
    if (v50)
    {
      v49[2] = v254;
      __p[0] = &__p[1];
      __p[1] = 0;
      *(_QWORD *)&v280 = 0;
      v49 = 0;
    }
    else
    {
      *(_QWORD *)(a8 + 144) = v254;
    }
    v53 = v255;
    sub_223198030((uint64_t)__p, v49);
    *(_DWORD *)(a8 + 68) = 4;
    v54 = *(_OWORD *)a6[2].f32;
    *(_OWORD *)(a8 + 4) = *(_OWORD *)a6->f32;
    *(_OWORD *)(a8 + 20) = v54;
    v55 = *(_OWORD *)a6[6].f32;
    *(_OWORD *)(a8 + 36) = *(_OWORD *)a6[4].f32;
    *(_OWORD *)(a8 + 52) = v55;
    *(_BYTE *)a8 = 4;
    v56 = *(_QWORD *)(a1 + 64) + 1;
    *(_QWORD *)(a1 + 64) = v56;
    ++*(_QWORD *)(a1 + 104);
    goto LABEL_231;
  }
  v250 = (_QWORD *)(a8 + 144);
  v27 = (_QWORD *)*a3;
  v265 = 0;
  v266 = 0;
  v264 = &v265;
  sub_223AC2284(&v264, v27, v25, a3 + 1);
  v263 = 0;
  v262[0] = 0;
  v262[1] = 0;
  v261 = v262;
  sub_223C7AF1C((_QWORD *)a2, &v264, (char **)(a8 + 72), (uint64_t *)(a8 + 96), (uint64_t *)(a8 + 120), (char *)&v263, (uint64_t)&v261);
  v34 = *(_QWORD *)(a8 + 72);
  v35 = *(_QWORD *)(a8 + 80);
  if (v34 != v35)
  {
    v36 = *(_QWORD *)(a8 + 120);
    v37 = *(_QWORD *)(a8 + 128);
    if (v36 != v37)
    {
      *(_QWORD *)__dst = (v35 - v34) >> 6;
      v267 = (v37 - v36) >> 4;
      *(_QWORD *)&v292 = v266;
      sub_223C82218((uint64_t)__p, (unint64_t *)__dst, (unint64_t *)&v267, (unint64_t *)&v292, &v263);
      if ((SBYTE7(v280) & 0x80u) == 0)
        v245 = __p;
      else
        v245 = (void **)__p[0];
      if ((SBYTE7(v280) & 0x80u) == 0)
        v246 = BYTE7(v280);
      else
        v246 = (uint64_t)__p[1];
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/GenericGlobalReferenceSystem.cpp", 640, (uint64_t)&unk_2245A5947, 0, (uint64_t)v245, v246, (void (*)(void **))sub_22457406C);
      if (SBYTE7(v280) < 0)
        operator delete(__p[0]);
LABEL_381:
      abort();
    }
  }
  if ((_QWORD **)(a8 + 168) != &v261)
    sub_223475EB0(a8 + 168, v261, v262);
  v38 = 0;
  if (*(_BYTE *)a2 && *(_BYTE *)(a2 + 1) && !*(_BYTE *)(a2 + 2))
    v38 = *(_DWORD *)(a2 + 4) != 0;
  v39 = *(_QWORD *)(a8 + 120);
  v40 = *(_QWORD *)(a8 + 128);
  v41 = v263;
  if (!a3[2]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/GenericGlobalReferenceSystem.cpp", 348, (uint64_t)"num_tracked_keyframes != 0", 26, (uint64_t)"expect initialized.", 19, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_381;
  }
  v42 = v21;
  if (!v41)
  {
    *v257 = 4;
    v51 = (_OWORD *)(a8 + 4);
    v16 = (uint64_t *)(a1 + 8);
    v43 = a5;
    goto LABEL_56;
  }
  if (v40 == v39)
  {
    v51 = (_OWORD *)(a8 + 4);
    v16 = (uint64_t *)(a1 + 8);
    if ((a5 & 8) == 0)
    {
      *v257 = 3;
      v52 = 36;
LABEL_74:
      *(_BYTE *)a8 = v52;
      goto LABEL_75;
    }
    *v257 = 2;
    if (v42)
    {
      v52 = 5;
      goto LABEL_74;
    }
    sub_223C7AE28(&v291);
    if (**(int **)(v291 + 56) > 4
      || (v61 = *(unsigned __int8 *)(v291 + 72),
          v62 = sub_22322F254(v291, "OSLogSurrogateAppender", 1, 0),
          v63 = v62,
          !v61)
      && !v62)
    {
LABEL_370:
      v244 = *(_DWORD *)(a8 + 68) & 0xFFFFFFFE;
      *(_BYTE *)a8 = 5;
      v51 = (_OWORD *)(a8 + 4);
      v16 = (uint64_t *)(a1 + 8);
      if (v244 != 2)
        goto LABEL_216;
LABEL_75:
      sub_223C7EF40((uint64_t)__p, (uint64_t)a3, a4, (_QWORD *)(a8 + 72), (uint64_t *)(a8 + 96), v28, v29, v30, v31, v32, v33);
      goto LABEL_218;
    }
    sub_223195210((uint64_t)__p);
    sub_2231813E8(&v280, (uint64_t)"GRS: Relocalization succeeded when slam is bad.", 47);
    v248 = v61;
    if ((v289 & 0x10) != 0)
    {
      v163 = v288;
      if (v288 < v284)
      {
        v288 = v284;
        v163 = v284;
      }
      v164 = (const void **)&v283;
    }
    else
    {
      if ((v289 & 8) == 0)
      {
        v64 = 0;
        HIBYTE(v278) = 0;
        v65 = &v276;
        goto LABEL_249;
      }
      v164 = (const void **)&v281 + 1;
      v163 = (char *)*((_QWORD *)&v282 + 1);
    }
    v165 = *v164;
    v64 = v163 - (_BYTE *)*v164;
    if (v64 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v64 >= 0x17)
    {
      v166 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v64 | 7) != 0x17)
        v166 = v64 | 7;
      v167 = v166 + 1;
      v65 = operator new(v166 + 1);
      v277 = v64;
      v278 = v167 | 0x8000000000000000;
      v276 = v65;
    }
    else
    {
      HIBYTE(v278) = (_BYTE)v163 - *(_BYTE *)v164;
      v65 = &v276;
      if (!v64)
      {
LABEL_249:
        *((_BYTE *)v65 + v64) = 0;
        v267 = (uint64_t)&v291;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v269 = std::chrono::system_clock::now().__d_.__rep_;
        v270 = 4;
        v271 = "unknown file";
        v272 = 435;
        v274 = 0;
        v275 = 0;
        v273 = "unknown function";
        v168 = (char *)&v276;
        if (v278 < 0)
          v168 = (char *)v276;
        __sb = v168;
        v169 = *(_QWORD *)v267;
        v170 = (const char *)(*(_QWORD *)v267 + 16);
        v247 = v170;
        if (*(char *)(*(_QWORD *)v267 + 39) < 0)
        {
          v170 = *(const char **)(v169 + 16);
          v171 = *(_QWORD *)(v169 + 24);
        }
        else
        {
          v171 = *(unsigned __int8 *)(*(_QWORD *)v267 + 39);
        }
        v172 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v172 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)__dst);
          sub_223199C58("com.apple.cv3d", (unint64_t)__dst, byte_255788F40);
          if ((_BYTE)v299 && (__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F40[23] >= 0)
          v173 = byte_255788F40;
        else
          v173 = *(const char **)byte_255788F40;
        if (byte_255788F40[23] >= 0)
          v174 = byte_255788F40[23];
        else
          v174 = *(_QWORD *)&byte_255788F40[8];
        v175 = v170;
        *(_QWORD *)__dst = os_log_create(v173, v170);
        v176 = &__dst[8];
        if (v174 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v174 >= 0x17)
        {
          v177 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v174 | 7) != 0x17)
            v177 = v174 | 7;
          v178 = v177 + 1;
          v176 = operator new(v177 + 1);
          *(_QWORD *)&__dst[16] = v174;
          *(_QWORD *)&v299 = v178 | 0x8000000000000000;
          *(_QWORD *)&__dst[8] = v176;
        }
        else
        {
          BYTE7(v299) = v174;
          if (!v174)
          {
LABEL_269:
            v176[v174] = 0;
            BYTE8(v299) = 1;
            v179 = (char *)&v300;
            if (v171 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v171 >= 0x17)
            {
              v180 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v171 | 7) != 0x17)
                v180 = v171 | 7;
              v181 = v180 + 1;
              v179 = (char *)operator new(v180 + 1);
              v301 = v171;
              v302 = v181 | 0x8000000000000000;
              v300 = v179;
            }
            else
            {
              HIBYTE(v302) = v171;
              if (!v171)
              {
LABEL_277:
                v179[v171] = 0;
                v303 = 1;
                v182 = *(NSObject **)__dst;
                if (SHIBYTE(v302) < 0)
                  operator delete(v300);
                if (BYTE8(v299) && SBYTE7(v299) < 0)
                  operator delete(*(void **)&__dst[8]);
                if (*(_QWORD *)__dst)
                  os_release(*(void **)__dst);
                if (!v63 || !*(_QWORD *)(v63 + 24))
                {
                  os_log_type_enabled(v182, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)__dst = 136315138;
                  *(_QWORD *)&__dst[4] = __sb;
                  v190 = (void *)_os_log_send_and_compose_impl();
                  v191 = v248;
                  if (v190)
                    free(v190);
                  goto LABEL_356;
                }
                v183 = _os_log_pack_size();
                v184 = (std::__shared_weak_count_vtbl *)operator new(v183, (std::align_val_t)8uLL);
                v185 = (std::__shared_weak_count *)operator new();
                v185->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v185->__shared_owners_ = 0;
                v185->__shared_weak_owners_ = 0;
                v185[1].__vftable = v184;
                *(_QWORD *)&v292 = v184;
                *((_QWORD *)&v292 + 1) = v184;
                v294 = 0;
                v295 = 0;
                v293 = v185;
                v186 = strlen(__sb);
                if (v186 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v187 = v186;
                if (v186 >= 0x17)
                {
                  v192 = (v186 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v186 | 7) != 0x17)
                    v192 = v186 | 7;
                  v193 = v192 + 1;
                  v188 = operator new(v192 + 1);
                  *(_QWORD *)&v297 = v187;
                  *((_QWORD *)&v297 + 1) = v193 | 0x8000000000000000;
                  v296 = v188;
                }
                else
                {
                  HIBYTE(v297) = v186;
                  v188 = &v296;
                  if (!v186)
                  {
                    v189 = v169;
                    goto LABEL_296;
                  }
                }
                v189 = v169;
                memcpy(v188, __sb, v187);
LABEL_296:
                *((_BYTE *)v188 + v187) = 0;
                v194 = v296;
                v304[0] = v297;
                *(_QWORD *)((char *)v304 + 7) = *(_QWORD *)((char *)&v297 + 7);
                v195 = HIBYTE(v297);
                v196 = operator new(0x38uLL);
                v196[1] = 0;
                v196[2] = 0;
                v196[3] = off_24EC1FA48;
                *v196 = &off_24EC1F9F8;
                v197 = v304[0];
                v196[4] = v194;
                v196[5] = v197;
                *(_QWORD *)((char *)v196 + 47) = *(_QWORD *)((char *)v304 + 7);
                *((_BYTE *)v196 + 55) = v195;
                v304[0] = 0;
                *(_QWORD *)((char *)v304 + 7) = 0;
                v198 = v295;
                v294 = (char *)(v196 + 3);
                v295 = (std::__shared_weak_count *)v196;
                if (v198)
                {
                  p_shared_owners = (unint64_t *)&v198->__shared_owners_;
                  do
                    v200 = __ldaxr(p_shared_owners);
                  while (__stlxr(v200 - 1, p_shared_owners));
                  if (!v200)
                  {
                    ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                    std::__shared_weak_count::__release_weak(v198);
                  }
                }
                *(_OWORD *)__dst = v292;
                v201 = v294;
                *(_QWORD *)&__dst[16] = v293;
                if (v293)
                {
                  v202 = (unint64_t *)&v293->__shared_owners_;
                  do
                    v203 = __ldxr(v202);
                  while (__stxr(v203 + 1, v202));
                }
                v204 = v295;
                *(_QWORD *)&v299 = v201;
                *((_QWORD *)&v299 + 1) = v295;
                if (v295)
                {
                  v205 = (unint64_t *)&v295->__shared_owners_;
                  do
                    v206 = __ldxr(v205);
                  while (__stxr(v206 + 1, v205));
                  v300 = v201;
                  do
                    v207 = __ldaxr(v205);
                  while (__stlxr(v207 - 1, v205));
                  if (!v207)
                  {
                    ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                    std::__shared_weak_count::__release_weak(v204);
                  }
                }
                else
                {
                  v300 = v201;
                }
                v208 = v293;
                if (v293)
                {
                  v209 = (unint64_t *)&v293->__shared_owners_;
                  do
                    v210 = __ldaxr(v209);
                  while (__stlxr(v210 - 1, v209));
                  if (!v210)
                  {
                    ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                    std::__shared_weak_count::__release_weak(v208);
                  }
                }
                v211 = *(_QWORD *)__dst;
                if (v300[31] >= 0)
                  v212 = v300 + 8;
                else
                  v212 = (char *)*((_QWORD *)v300 + 1);
                v213 = _os_log_pack_fill();
                *(_DWORD *)v213 = 136315138;
                *(_QWORD *)(v213 + 4) = v212;
                v214 = operator new();
                v215 = *(unsigned __int8 *)(v189 + 39);
                v216 = *(const char **)(v189 + 16);
                v217 = *(_QWORD *)(v189 + 24);
                v218 = v299;
                *(_OWORD *)(v214 + 8) = *(_OWORD *)&__dst[8];
                if ((v215 & 0x80u) != 0)
                  v215 = v217;
                else
                  v216 = v247;
                *(_QWORD *)v214 = v211;
                *(_QWORD *)&__dst[8] = 0;
                *(_QWORD *)&__dst[16] = 0;
                *(_OWORD *)(v214 + 24) = v218;
                v299 = 0uLL;
                *(_QWORD *)(v214 + 40) = v216;
                *(_QWORD *)(v214 + 48) = v215;
                *(_BYTE *)(v214 + 56) = 16;
                v296 = 0;
                *(_QWORD *)&v292 = v214;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v63 + 24) + 40))(*(_QWORD *)(v63 + 24), &v292);
                v219 = v292;
                *(_QWORD *)&v292 = 0;
                v191 = v248;
                if (v219)
                {
                  v220 = *(std::__shared_weak_count **)(v219 + 32);
                  if (v220)
                  {
                    v221 = (unint64_t *)&v220->__shared_owners_;
                    do
                      v222 = __ldaxr(v221);
                    while (__stlxr(v222 - 1, v221));
                    if (!v222)
                    {
                      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                      std::__shared_weak_count::__release_weak(v220);
                    }
                  }
                  v223 = *(std::__shared_weak_count **)(v219 + 16);
                  if (v223)
                  {
                    v224 = (unint64_t *)&v223->__shared_owners_;
                    do
                      v225 = __ldaxr(v224);
                    while (__stlxr(v225 - 1, v224));
                    if (!v225)
                    {
                      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                      std::__shared_weak_count::__release_weak(v223);
                    }
                  }
                  MEMORY[0x227684CE8](v219, 0x10F0C40B62ED6C6);
                  v226 = v296;
                  v296 = 0;
                  if (v226)
                  {
                    v227 = (std::__shared_weak_count *)v226[4];
                    if (v227)
                    {
                      v228 = (unint64_t *)&v227->__shared_owners_;
                      do
                        v229 = __ldaxr(v228);
                      while (__stlxr(v229 - 1, v228));
                      if (!v229)
                      {
                        ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                        std::__shared_weak_count::__release_weak(v227);
                      }
                    }
                    v230 = (std::__shared_weak_count *)v226[2];
                    if (v230)
                    {
                      v231 = (unint64_t *)&v230->__shared_owners_;
                      do
                        v232 = __ldaxr(v231);
                      while (__stlxr(v232 - 1, v231));
                      if (!v232)
                      {
                        ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                        std::__shared_weak_count::__release_weak(v230);
                      }
                    }
                    MEMORY[0x227684CE8](v226, 0x10F0C40B62ED6C6);
                  }
                }
                v233 = (std::__shared_weak_count *)*((_QWORD *)&v299 + 1);
                if (*((_QWORD *)&v299 + 1))
                {
                  v234 = (unint64_t *)(*((_QWORD *)&v299 + 1) + 8);
                  do
                    v235 = __ldaxr(v234);
                  while (__stlxr(v235 - 1, v234));
                  if (!v235)
                  {
                    ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                    std::__shared_weak_count::__release_weak(v233);
                  }
                }
                v236 = *(std::__shared_weak_count **)&__dst[16];
                if (*(_QWORD *)&__dst[16])
                {
                  v237 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                  do
                    v238 = __ldaxr(v237);
                  while (__stlxr(v238 - 1, v237));
                  if (!v238)
                  {
                    ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                    std::__shared_weak_count::__release_weak(v236);
                  }
                }
LABEL_356:
                if (v191)
                {
                  v239 = (const char *)&v276;
                  if (v278 < 0)
                    v239 = (const char *)v276;
                  sub_22322C138((uint64_t)&v267, "%s", v239);
                  sub_223182C08((uint64_t)&v267);
                }
                sub_223182C08((uint64_t)&v267);
                v240 = v275;
                if (v275)
                {
                  v241 = (unint64_t *)&v275->__shared_owners_;
                  do
                    v242 = __ldaxr(v241);
                  while (__stlxr(v242 - 1, v241));
                  if (!v242)
                  {
                    ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                    std::__shared_weak_count::__release_weak(v240);
                  }
                }
                if (SHIBYTE(v278) < 0)
                  operator delete(v276);
                __p[0] = *(void **)MEMORY[0x24BEDB7F0];
                v243 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                *(_QWORD *)&v280 = v243;
                *((_QWORD *)&v280 + 1) = MEMORY[0x24BEDB848] + 16;
                if (v287 < 0)
                  operator delete(v286);
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x227684BE0](v290);
                goto LABEL_370;
              }
            }
            memmove(v179, v175, v171);
            goto LABEL_277;
          }
        }
        memmove(v176, v173, v174);
        goto LABEL_269;
      }
    }
    memmove(v65, v165, v64);
    goto LABEL_249;
  }
  v43 = a5;
  if (((!v38 | ((a5 & 8) >> 3)) & 1) == 0)
  {
    sub_223C7AE28(&v291);
    if (**(int **)(v291 + 56) > 4
      || (v44 = *(unsigned __int8 *)(v291 + 72),
          v45 = sub_22322F254(v291, "OSLogSurrogateAppender", 1, 0),
          v46 = v45,
          !v44)
      && !v45)
    {
LABEL_215:
      *(_DWORD *)(a8 + 68) = 1;
      *(_BYTE *)a8 = 24;
      v51 = (_OWORD *)(a8 + 4);
      v16 = (uint64_t *)(a1 + 8);
LABEL_216:
      v60 = a4;
      goto LABEL_217;
    }
    sub_223195210((uint64_t)__p);
    sub_2231813E8(&v280, (uint64_t)"GRS: graph becomes external when SLAM status is good.", 53);
    if ((v289 & 0x10) != 0)
    {
      v66 = v288;
      if (v288 < v284)
      {
        v288 = v284;
        v66 = v284;
      }
      v67 = (const void **)&v283;
    }
    else
    {
      if ((v289 & 8) == 0)
      {
        v47 = 0;
        HIBYTE(v278) = 0;
        v48 = &v276;
        goto LABEL_94;
      }
      v67 = (const void **)&v281 + 1;
      v66 = (char *)*((_QWORD *)&v282 + 1);
    }
    v68 = *v67;
    v47 = v66 - (_BYTE *)*v67;
    if (v47 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v47 >= 0x17)
    {
      v69 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v47 | 7) != 0x17)
        v69 = v47 | 7;
      v70 = v69 + 1;
      v48 = operator new(v69 + 1);
      v277 = v47;
      v278 = v70 | 0x8000000000000000;
      v276 = v48;
    }
    else
    {
      HIBYTE(v278) = (_BYTE)v66 - *(_BYTE *)v67;
      v48 = &v276;
      if (!v47)
      {
LABEL_94:
        *((_BYTE *)v48 + v47) = 0;
        v267 = (uint64_t)&v291;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v269 = std::chrono::system_clock::now().__d_.__rep_;
        v270 = 4;
        v271 = "unknown file";
        v272 = 365;
        v274 = 0;
        v275 = 0;
        v273 = "unknown function";
        v71 = (char *)&v276;
        if (v278 < 0)
          v71 = (char *)v276;
        __sa = v71;
        v72 = *(_QWORD *)v267;
        v73 = *(_QWORD *)v267 + 16;
        if (*(char *)(*(_QWORD *)v267 + 39) < 0)
        {
          v75 = *(const char **)(v72 + 16);
          v74 = *(_QWORD *)(v72 + 24);
        }
        else
        {
          v74 = *(unsigned __int8 *)(*(_QWORD *)v267 + 39);
          v75 = (const char *)(*(_QWORD *)v267 + 16);
        }
        v76 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v76 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)__dst);
          sub_223199C58("com.apple.cv3d", (unint64_t)__dst, byte_255788F40);
          if ((_BYTE)v299 && (__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F40[23] >= 0)
          v77 = byte_255788F40;
        else
          v77 = *(const char **)byte_255788F40;
        if (byte_255788F40[23] >= 0)
          v78 = byte_255788F40[23];
        else
          v78 = *(_QWORD *)&byte_255788F40[8];
        v79 = v75;
        *(_QWORD *)__dst = os_log_create(v77, v75);
        v80 = &__dst[8];
        if (v78 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v78 >= 0x17)
        {
          v249 = v72;
          v81 = v46;
          v82 = v44;
          v83 = v73;
          v84 = v74;
          v85 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v78 | 7) != 0x17)
            v85 = v78 | 7;
          v86 = v85 + 1;
          v80 = operator new(v85 + 1);
          *(_QWORD *)&__dst[16] = v78;
          *(_QWORD *)&v299 = v86 | 0x8000000000000000;
          *(_QWORD *)&__dst[8] = v80;
          v74 = v84;
          v73 = v83;
          v44 = v82;
          v46 = v81;
          v72 = v249;
        }
        else
        {
          BYTE7(v299) = v78;
          if (!v78)
          {
LABEL_114:
            v80[v78] = 0;
            BYTE8(v299) = 1;
            v87 = (char *)&v300;
            if (v74 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v74 >= 0x17)
            {
              v88 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v74 | 7) != 0x17)
                v88 = v74 | 7;
              v89 = v88 + 1;
              v87 = (char *)operator new(v88 + 1);
              v301 = v74;
              v302 = v89 | 0x8000000000000000;
              v300 = v87;
            }
            else
            {
              HIBYTE(v302) = v74;
              if (!v74)
              {
LABEL_122:
                v87[v74] = 0;
                v303 = 1;
                v90 = *(NSObject **)__dst;
                if (SHIBYTE(v302) < 0)
                  operator delete(v300);
                if (BYTE8(v299) && SBYTE7(v299) < 0)
                  operator delete(*(void **)&__dst[8]);
                if (*(_QWORD *)__dst)
                  os_release(*(void **)__dst);
                if (!v46 || !*(_QWORD *)(v46 + 24))
                {
                  os_log_type_enabled(v90, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)__dst = 136315138;
                  *(_QWORD *)&__dst[4] = __sa;
                  v98 = (void *)_os_log_send_and_compose_impl();
                  if (v98)
                    free(v98);
                  goto LABEL_201;
                }
                v91 = _os_log_pack_size();
                v92 = (std::__shared_weak_count_vtbl *)operator new(v91, (std::align_val_t)8uLL);
                v93 = (std::__shared_weak_count *)operator new();
                v93->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v93->__shared_owners_ = 0;
                v93->__shared_weak_owners_ = 0;
                v93[1].__vftable = v92;
                *(_QWORD *)&v292 = v92;
                *((_QWORD *)&v292 + 1) = v92;
                v294 = 0;
                v295 = 0;
                v293 = v93;
                v94 = strlen(__sa);
                if (v94 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v95 = v94;
                if (v94 >= 0x17)
                {
                  v99 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v94 | 7) != 0x17)
                    v99 = v94 | 7;
                  v100 = v99 + 1;
                  v96 = operator new(v99 + 1);
                  *(_QWORD *)&v297 = v95;
                  *((_QWORD *)&v297 + 1) = v100 | 0x8000000000000000;
                  v296 = v96;
                }
                else
                {
                  HIBYTE(v297) = v94;
                  v96 = &v296;
                  if (!v94)
                  {
                    v97 = v72;
                    goto LABEL_141;
                  }
                }
                v97 = v72;
                memcpy(v96, __sa, v95);
LABEL_141:
                *((_BYTE *)v96 + v95) = 0;
                v101 = v296;
                v304[0] = v297;
                *(_QWORD *)((char *)v304 + 7) = *(_QWORD *)((char *)&v297 + 7);
                v102 = HIBYTE(v297);
                v103 = operator new(0x38uLL);
                v103[1] = 0;
                v103[2] = 0;
                v103[3] = off_24EC1FA48;
                *v103 = &off_24EC1F9F8;
                v104 = v304[0];
                v103[4] = v101;
                v103[5] = v104;
                *(_QWORD *)((char *)v103 + 47) = *(_QWORD *)((char *)v304 + 7);
                *((_BYTE *)v103 + 55) = v102;
                v304[0] = 0;
                *(_QWORD *)((char *)v304 + 7) = 0;
                v105 = v295;
                v294 = (char *)(v103 + 3);
                v295 = (std::__shared_weak_count *)v103;
                if (v105)
                {
                  v106 = (unint64_t *)&v105->__shared_owners_;
                  do
                    v107 = __ldaxr(v106);
                  while (__stlxr(v107 - 1, v106));
                  if (!v107)
                  {
                    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                    std::__shared_weak_count::__release_weak(v105);
                  }
                }
                *(_OWORD *)__dst = v292;
                v108 = v294;
                *(_QWORD *)&__dst[16] = v293;
                if (v293)
                {
                  v109 = (unint64_t *)&v293->__shared_owners_;
                  do
                    v110 = __ldxr(v109);
                  while (__stxr(v110 + 1, v109));
                }
                v111 = v295;
                *(_QWORD *)&v299 = v108;
                *((_QWORD *)&v299 + 1) = v295;
                if (v295)
                {
                  v112 = (unint64_t *)&v295->__shared_owners_;
                  do
                    v113 = __ldxr(v112);
                  while (__stxr(v113 + 1, v112));
                  v300 = v108;
                  do
                    v114 = __ldaxr(v112);
                  while (__stlxr(v114 - 1, v112));
                  if (!v114)
                  {
                    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                    std::__shared_weak_count::__release_weak(v111);
                  }
                }
                else
                {
                  v300 = v108;
                }
                v115 = v73;
                v116 = v293;
                if (v293)
                {
                  v117 = (unint64_t *)&v293->__shared_owners_;
                  do
                    v118 = __ldaxr(v117);
                  while (__stlxr(v118 - 1, v117));
                  if (!v118)
                  {
                    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                    std::__shared_weak_count::__release_weak(v116);
                  }
                }
                v119 = *(_QWORD *)__dst;
                if (v300[31] >= 0)
                  v120 = v300 + 8;
                else
                  v120 = (char *)*((_QWORD *)v300 + 1);
                v121 = _os_log_pack_fill();
                *(_DWORD *)v121 = 136315138;
                *(_QWORD *)(v121 + 4) = v120;
                v122 = operator new();
                v123 = *(unsigned __int8 *)(v97 + 39);
                v124 = *(_QWORD *)(v97 + 16);
                v125 = *(_QWORD *)(v97 + 24);
                v126 = v299;
                *(_OWORD *)(v122 + 8) = *(_OWORD *)&__dst[8];
                if ((v123 & 0x80u) != 0)
                  v123 = v125;
                else
                  v124 = v115;
                *(_QWORD *)v122 = v119;
                *(_QWORD *)&__dst[8] = 0;
                *(_QWORD *)&__dst[16] = 0;
                *(_OWORD *)(v122 + 24) = v126;
                v299 = 0uLL;
                *(_QWORD *)(v122 + 40) = v124;
                *(_QWORD *)(v122 + 48) = v123;
                *(_BYTE *)(v122 + 56) = 16;
                v296 = 0;
                *(_QWORD *)&v292 = v122;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v46 + 24) + 40))(*(_QWORD *)(v46 + 24), &v292);
                v127 = v292;
                *(_QWORD *)&v292 = 0;
                if (v127)
                {
                  v128 = *(std::__shared_weak_count **)(v127 + 32);
                  if (v128)
                  {
                    v129 = (unint64_t *)&v128->__shared_owners_;
                    do
                      v130 = __ldaxr(v129);
                    while (__stlxr(v130 - 1, v129));
                    if (!v130)
                    {
                      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                      std::__shared_weak_count::__release_weak(v128);
                    }
                  }
                  v131 = *(std::__shared_weak_count **)(v127 + 16);
                  if (v131)
                  {
                    v132 = (unint64_t *)&v131->__shared_owners_;
                    do
                      v133 = __ldaxr(v132);
                    while (__stlxr(v133 - 1, v132));
                    if (!v133)
                    {
                      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                      std::__shared_weak_count::__release_weak(v131);
                    }
                  }
                  MEMORY[0x227684CE8](v127, 0x10F0C40B62ED6C6);
                  v134 = v296;
                  v296 = 0;
                  if (v134)
                  {
                    v135 = (std::__shared_weak_count *)v134[4];
                    if (v135)
                    {
                      v136 = (unint64_t *)&v135->__shared_owners_;
                      do
                        v137 = __ldaxr(v136);
                      while (__stlxr(v137 - 1, v136));
                      if (!v137)
                      {
                        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                        std::__shared_weak_count::__release_weak(v135);
                      }
                    }
                    v138 = (std::__shared_weak_count *)v134[2];
                    if (v138)
                    {
                      v139 = (unint64_t *)&v138->__shared_owners_;
                      do
                        v140 = __ldaxr(v139);
                      while (__stlxr(v140 - 1, v139));
                      if (!v140)
                      {
                        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                        std::__shared_weak_count::__release_weak(v138);
                      }
                    }
                    MEMORY[0x227684CE8](v134, 0x10F0C40B62ED6C6);
                  }
                }
                v141 = (std::__shared_weak_count *)*((_QWORD *)&v299 + 1);
                if (*((_QWORD *)&v299 + 1))
                {
                  v142 = (unint64_t *)(*((_QWORD *)&v299 + 1) + 8);
                  do
                    v143 = __ldaxr(v142);
                  while (__stlxr(v143 - 1, v142));
                  if (!v143)
                  {
                    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                    std::__shared_weak_count::__release_weak(v141);
                  }
                }
                v144 = *(std::__shared_weak_count **)&__dst[16];
                if (*(_QWORD *)&__dst[16])
                {
                  v145 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                  do
                    v146 = __ldaxr(v145);
                  while (__stlxr(v146 - 1, v145));
                  if (!v146)
                  {
                    ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                    std::__shared_weak_count::__release_weak(v144);
                  }
                }
LABEL_201:
                if (v44)
                {
                  v147 = (const char *)&v276;
                  if (v278 < 0)
                    v147 = (const char *)v276;
                  sub_22322C138((uint64_t)&v267, "%s", v147);
                  sub_223182C08((uint64_t)&v267);
                }
                sub_223182C08((uint64_t)&v267);
                v148 = v275;
                if (v275)
                {
                  v149 = (unint64_t *)&v275->__shared_owners_;
                  do
                    v150 = __ldaxr(v149);
                  while (__stlxr(v150 - 1, v149));
                  if (!v150)
                  {
                    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                    std::__shared_weak_count::__release_weak(v148);
                  }
                }
                if (SHIBYTE(v278) < 0)
                  operator delete(v276);
                __p[0] = *(void **)MEMORY[0x24BEDB7F0];
                v151 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                *(_QWORD *)&v280 = v151;
                *((_QWORD *)&v280 + 1) = MEMORY[0x24BEDB848] + 16;
                if (v287 < 0)
                  operator delete(v286);
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x227684BE0](v290);
                goto LABEL_215;
              }
            }
            memmove(v87, v79, v74);
            goto LABEL_122;
          }
        }
        memmove(v80, v77, v78);
        goto LABEL_114;
      }
    }
    memmove(v48, v68, v47);
    goto LABEL_94;
  }
  if ((a5 & 8) != 0)
    v57 = 4;
  else
    v57 = 1;
  *v257 = v57;
  v51 = (_OWORD *)(a8 + 4);
  v16 = (uint64_t *)(a1 + 8);
  if ((a5 & 8) == 0)
  {
    v58 = 24;
LABEL_70:
    *(_BYTE *)a8 = v58;
    goto LABEL_216;
  }
LABEL_56:
  if ((v43 & 8) != 0 && v42)
  {
    if (v15 == v23 && (uint64_t)(*v18 - v24) <= 5000000000)
      goto LABEL_60;
LABEL_67:
    *(_BYTE *)a8 = 6;
    goto LABEL_68;
  }
  if (v15 != v23)
    goto LABEL_67;
LABEL_60:
  if ((v43 & 4) != 0)
  {
    v58 = 4;
    goto LABEL_70;
  }
  if ((v43 & 8) != 0)
    v59 = 8;
  else
    v59 = v43;
  *(_BYTE *)a8 = v59;
  if ((v59 & 2) == 0)
    goto LABEL_216;
LABEL_68:
  v60 = a6;
LABEL_217:
  v152 = *(_OWORD *)v60[2].f32;
  *(_OWORD *)__p = *(_OWORD *)v60->f32;
  v280 = v152;
  v153 = *(_OWORD *)v60[6].f32;
  v281 = *(_OWORD *)v60[4].f32;
  v282 = v153;
  v284 = 0;
  v285 = 0;
  v283 = &v284;
LABEL_218:
  v154 = v280;
  *v51 = *(_OWORD *)__p;
  v51[1] = v154;
  v155 = v282;
  v51[2] = v281;
  v51[3] = v155;
  sub_223198030((uint64_t)v250, *(_QWORD **)(a8 + 152));
  v156 = v284;
  *(_QWORD *)(a8 + 144) = v283;
  *(_QWORD *)(a8 + 152) = v156;
  v157 = v285;
  *(_QWORD *)(a8 + 160) = v285;
  if (v157)
  {
    *((_QWORD *)v156 + 2) = v254;
    v283 = &v284;
    v284 = 0;
    v285 = 0;
    v156 = 0;
  }
  else
  {
    *v250 = v254;
  }
  v53 = v255;
  sub_223198030((uint64_t)&v283, v156);
  __p[0] = v51;
  __p[1] = a4;
  v158 = sub_2231F73E4((float **)__p);
  v159 = *(_DWORD *)(a8 + 68) == 3 && v158;
  if (v159 && !*(_QWORD *)(a8 + 160))
    *v257 = 4;
  kdebug_trace();
  sub_223198030((uint64_t)&v261, v262[0]);
  sub_223198030((uint64_t)&v264, v265);
  v160 = *v257;
  v56 = *(_QWORD *)(a1 + 64) + 1;
  *(_QWORD *)(a1 + 64) = v56;
  ++*(_QWORD *)(a1 + 104);
  switch(v160)
  {
    case 3:
      ++*(_QWORD *)(a1 + 48);
      v161 = (uint64_t *)(a1 + 88);
      goto LABEL_235;
    case 2:
      ++*(_QWORD *)(a1 + 40);
      v161 = (uint64_t *)(a1 + 80);
      goto LABEL_235;
    case 1:
      v161 = (uint64_t *)(a1 + 72);
      ++*(_QWORD *)(a1 + 32);
LABEL_235:
      *v161 = v56;
      goto LABEL_236;
  }
LABEL_231:
  if ((*(_BYTE *)a8 & 2) != 0)
  {
    ++*(_QWORD *)(a1 + 56);
    v161 = (uint64_t *)(a1 + 96);
    goto LABEL_235;
  }
LABEL_236:
  sub_223C130F4((unsigned __int8 *)a8, (unint64_t *)(a1 + 32), a3, (uint64_t)v16, v53, (uint64_t)a6);
  return kdebug_trace();
}

void sub_223C84D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,_QWORD *a33,uint64_t a34,uint64_t a35,char a36,_QWORD *a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;
  uint64_t v60;

  if (*(_BYTE *)(v60 - 168) && *(char *)(v60 - 169) < 0)
    operator delete(*(void **)(v60 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a39);
  if (a53 < 0)
    operator delete(__p);
  sub_223195348((uint64_t)&a54);
  sub_223198030((uint64_t)&a32, a33);
  sub_223198030((uint64_t)&a36, a37);
  sub_223C052EC(v59);
  sub_2231874DC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_223C84F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_2231874DC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_223C84FA4(uint64_t result)
{
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  if (*(_BYTE *)(result + 16))
    *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t sub_223C84FC4(uint64_t result, _OWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(result + 196);
  *(_OWORD *)(result + 180) = *a2;
  if (!v2)
    *(_BYTE *)(result + 196) = 1;
  return result;
}

void sub_223C84FE8()
{
  JUMPOUT(0x227684CE8);
}

_DWORD *sub_223C84FFC(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC61BF0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t sub_223C850EC(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_223C8515C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC61C30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223C8516C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC61C30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223C8519C(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(*(void **)(a1 + 32));
      return;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_7;
}

void sub_223C85204(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 32));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_8:
    JUMPOUT(0x227684CE8);
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  goto LABEL_8;
}

_QWORD **sub_223C85278(_QWORD **a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t *v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  char *v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  uint64_t v12;
  unsigned __int8 *v13;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = sub_223426D4C(a1, v4, &v13, &v12, v6);
      if (!*(_QWORD *)v7)
      {
        v8 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v8 + 25) = *(_OWORD *)v6;
        v9 = v13;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = v9;
        *(_QWORD *)v7 = v8;
        v10 = (_QWORD *)**a1;
        if (v10)
        {
          *a1 = v10;
          v8 = *(char **)v7;
        }
        sub_2231A9A8C(a1[1], (uint64_t *)v8);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
      }
      v6 += 16;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_223C85354(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223198030(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_223C8536C(uint64_t **a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, std::__shared_weak_count_vtbl ***a5@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  char v16;
  BOOL v17;
  char v18;
  BOOL v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  BOOL v25;
  char v26;
  char v27;
  BOOL v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  const void *v34;
  unsigned int v35;
  void *v36;
  unsigned __int8 v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count_vtbl **v41;
  void **v42;
  void **v43;
  uint64_t v44;
  const char *v45;
  size_t v46;
  unint64_t v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  const char *v50;
  size_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  size_t v59;
  std::__shared_weak_count_vtbl *v60;
  std::__shared_weak_count *v61;
  size_t v62;
  size_t v63;
  _QWORD **p_dst;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  size_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  char *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  void *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count_vtbl **v115;
  const char *v116;
  void **v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl **v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  char v131;
  char v132;
  char v133;
  char v134;
  char v135;
  char v136;
  _DWORD *v137;
  uint64_t *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  const char *v147;
  uint64_t v148;
  int v149;
  std::__shared_weak_count_vtbl **v150;
  char *v151;
  char *__s;
  std::__shared_weak_count_vtbl ***v153;
  void *__p[2];
  char v155;
  void *v156[2];
  char v157;
  __int128 v158;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v160;
  const char *v161;
  int v162;
  const char *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t v166;
  __int128 v167;
  void *v168[2];
  char v169;
  __int128 v170;
  unsigned int v171;
  uint64_t v172;
  _BYTE v173[24];
  __int128 v174;
  char *v175;
  void *v176[2];
  std::__shared_weak_count *v177;
  char *v178;
  std::__shared_weak_count *v179;
  _QWORD *v180;
  __int128 v181;
  _QWORD *__dst;
  __int128 v183;
  _QWORD valuePtr[7];
  unint64_t v185;
  char v186;
  uint64_t v187;

  v187 = *MEMORY[0x24BDAC8D0];
  v172 = a2;
  v171 = a3;
  v9 = (uint64_t *)(a1 + 1);
  v8 = a1[1];
  if (v8)
  {
    v10 = (uint64_t *)(a1 + 1);
    do
    {
      v11 = v8[4];
      v12 = v8[5];
      if (HIDWORD(v12) >= HIDWORD(a2))
        v13 = 1;
      else
        v13 = -1;
      if (HIDWORD(v12) == HIDWORD(a2))
        v13 = 0;
      v14 = (_DWORD)v12 == (_DWORD)a2;
      if (v12 >= a2)
        v15 = 1;
      else
        v15 = -1;
      if (v14)
        v15 = v13;
      if (BYTE4(v11) >= a4)
        v16 = 1;
      else
        v16 = -1;
      if (BYTE4(v11) != a4)
        v15 = v16;
      v17 = (_DWORD)v11 == a3;
      if (v11 >= a3)
        v18 = 1;
      else
        v18 = -1;
      if (v17)
        v18 = v15;
      v19 = (v18 & 0x80) == 0;
      if (v18 < 0)
        v20 = (uint64_t **)(v8 + 1);
      else
        v20 = (uint64_t **)v8;
      if (v19)
        v10 = v8;
      v8 = *v20;
    }
    while (*v20);
    if (v10 != v9)
    {
      v21 = v10[4];
      v22 = v10[5];
      v23 = -1;
      if (HIDWORD(a2) >= HIDWORD(v22))
        v23 = 1;
      if (HIDWORD(a2) == HIDWORD(v22))
        v23 = 0;
      v24 = a2 >= v22;
      v25 = (_DWORD)a2 == (_DWORD)v22;
      v26 = -1;
      if (v24)
        v26 = 1;
      if (!v25)
        v23 = v26;
      v27 = -1;
      if (a4 >= BYTE4(v21))
        v27 = 1;
      if (a4 != BYTE4(v21))
        v23 = v27;
      v28 = (_DWORD)v21 == a3;
      v29 = v21 > a3;
      v30 = -1;
      if (!v29)
        v30 = 1;
      if (!v28)
        v23 = v30;
      if ((v23 & 0x80) == 0)
      {
        *a5 = (std::__shared_weak_count_vtbl **)v10[6];
        v31 = v10[7];
        a5[1] = (std::__shared_weak_count_vtbl **)v31;
        if (v31)
        {
          v32 = (unint64_t *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        return;
      }
    }
  }
  valuePtr[1] = 0;
  valuePtr[2] = 0;
  valuePtr[0] = &valuePtr[1];
  sub_2245314F4(valuePtr, &v158);
  v170 = v158;
  sub_22323DF84((uint64_t)valuePtr, (char *)valuePtr[1]);
  v34 = (const void *)*MEMORY[0x24BDC56E0];
  valuePtr[0] = 0x4024000000000000;
  sub_2236772E4((uint64_t)&v170, v34, valuePtr);
  v160 = 0;
  sub_223C8BD48((uint64_t)v176, (uint64_t)&v158, &v171);
  valuePtr[0] = &v158;
  valuePtr[1] = "-";
  valuePtr[2] = &v158;
  valuePtr[3] = "-";
  valuePtr[4] = "-";
  if (v160 == -1)
    sub_22316DD70();
  *(_QWORD *)v173 = valuePtr;
  ((void (*)(_BYTE *, __int128 *))off_24EC629D0[v160])(v173, &v158);
  sub_2231BFC9C((uint64_t)valuePtr, (uint64_t)&v158, (unsigned int *)&v172);
  if (v160 == -1)
    sub_22316DD70();
  valuePtr[0] = v173;
  ((void (*)(void **__return_ptr, _QWORD *, __int128 *))off_24EC629E8[v160])(v168, valuePtr, &v158);
  if (v160 != -1)
    ((void (*)(_QWORD *, __int128 *))off_24EC629B8[v160])(valuePtr, &v158);
  if (a4)
    v35 = 0;
  else
    v35 = 2;
  LOBYTE(v158) = 0;
  BYTE8(v158) = 0;
  sub_2242A6A74((unsigned int *)&v172, v171, (uint64_t *)v168, v35, (uint64_t)&v158, (uint64_t)valuePtr);
  v167 = *(_OWORD *)valuePtr;
  v36 = operator new(0x28uLL);
  *((_QWORD *)v36 + 1) = 0;
  *((_QWORD *)v36 + 2) = 0;
  *(_QWORD *)v36 = &off_24EC62A10;
  *a5 = sub_2242A7248((std::__shared_weak_count_vtbl **)v36 + 3, (uint64_t)&v170, (uint64_t)&v167);
  a5[1] = (std::__shared_weak_count_vtbl **)v36;
  v37 = atomic_load((unsigned __int8 *)&qword_2540CD8A0);
  if ((v37 & 1) == 0 && __cxa_guard_acquire((__guard *)&qword_2540CD8A0))
  {
    sub_22455F53C(&v158);
    sub_223174DE4(valuePtr, "cv3d.recon.frame");
    sub_2232300E0((uint64_t **)&v158, (uint64_t)valuePtr, &qword_2540CD898);
    if (SHIBYTE(valuePtr[2]) < 0)
      operator delete((void *)valuePtr[0]);
    __cxa_guard_release((__guard *)&qword_2540CD8A0);
  }
  v166 = qword_2540CD898;
  if (**(int **)(qword_2540CD898 + 56) > 3)
    goto LABEL_223;
  v38 = *(unsigned __int8 *)(qword_2540CD898 + 72);
  v39 = sub_22322F254(qword_2540CD898, "OSLogSurrogateAppender", 1, 0);
  v40 = v39;
  if (!v38 && !v39)
    goto LABEL_223;
  *(_QWORD *)&v158 = &v166;
  *((std::chrono::steady_clock::time_point *)&v158 + 1) = std::chrono::steady_clock::now();
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v160 = 3;
  v161 = "unknown file";
  v162 = 57;
  v164 = 0;
  v165 = 0;
  v163 = "unknown function";
  v41 = *a5;
  LODWORD(valuePtr[3]) = 0;
  v153 = a5;
  sub_223C8BD48((uint64_t)v173, (uint64_t)valuePtr, &v171);
  if (LODWORD(valuePtr[3]) == -1)
    sub_22316DD70();
  *(_QWORD *)v173 = v176;
  ((void (*)(void **__return_ptr, _BYTE *, _QWORD *))off_24EC629E8[LODWORD(valuePtr[3])])(v156, v173, valuePtr);
  if (LODWORD(valuePtr[3]) != -1)
    ((void (*)(_BYTE *, _QWORD *))off_24EC629B8[LODWORD(valuePtr[3])])(v173, valuePtr);
  v42 = v156;
  if (v157 < 0)
    v42 = (void **)v156[0];
  __s = (char *)v42;
  LODWORD(valuePtr[3]) = 0;
  sub_2231BFC9C((uint64_t)v173, (uint64_t)valuePtr, (unsigned int *)&v172);
  if (LODWORD(valuePtr[3]) == -1)
    sub_22316DD70();
  *(_QWORD *)v173 = v176;
  ((void (*)(void **__return_ptr, _BYTE *, _QWORD *))off_24EC629E8[LODWORD(valuePtr[3])])(__p, v173, valuePtr);
  if (LODWORD(valuePtr[3]) != -1)
    ((void (*)(_BYTE *, _QWORD *))off_24EC629B8[LODWORD(valuePtr[3])])(v173, valuePtr);
  v149 = v38;
  if (v155 >= 0)
    v43 = __p;
  else
    v43 = (void **)__p[0];
  v44 = *(_QWORD *)v158;
  v45 = (const char *)(*(_QWORD *)v158 + 16);
  v147 = v45;
  v148 = *(_QWORD *)v158;
  v150 = v41;
  v151 = (char *)v43;
  if (*(char *)(*(_QWORD *)v158 + 39) < 0)
  {
    v45 = *(const char **)(v44 + 16);
    v46 = *(_QWORD *)(v44 + 24);
    v47 = v40;
    v49 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v49 & 1) != 0)
      goto LABEL_80;
  }
  else
  {
    v46 = *(unsigned __int8 *)(*(_QWORD *)v158 + 39);
    v47 = v40;
    v48 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v48 & 1) != 0)
      goto LABEL_80;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)valuePtr);
    sub_223199C58("com.apple.cv3d", (unint64_t)valuePtr, &xmmword_255788F40);
    if (LOBYTE(valuePtr[3]) && SHIBYTE(valuePtr[2]) < 0)
      operator delete((void *)valuePtr[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_80:
  if (byte_255788F57 >= 0)
    v50 = (const char *)&xmmword_255788F40;
  else
    v50 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v51 = byte_255788F57;
  else
    v51 = *((_QWORD *)&xmmword_255788F40 + 1);
  valuePtr[0] = os_log_create(v50, v45);
  v52 = &valuePtr[1];
  if (v51 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v51 >= 0x17)
  {
    v53 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v51 | 7) != 0x17)
      v53 = v51 | 7;
    v54 = v53 + 1;
    v52 = operator new(v53 + 1);
    valuePtr[2] = v51;
    valuePtr[3] = v54 | 0x8000000000000000;
    valuePtr[1] = v52;
    goto LABEL_93;
  }
  HIBYTE(valuePtr[3]) = v51;
  if (v51)
LABEL_93:
    memmove(v52, v50, v51);
  *((_BYTE *)v52 + v51) = 0;
  LOBYTE(valuePtr[4]) = 1;
  v55 = &valuePtr[5];
  if (v46 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v46 >= 0x17)
  {
    v57 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17)
      v57 = v46 | 7;
    v58 = v57 + 1;
    v55 = operator new(v57 + 1);
    valuePtr[6] = v46;
    v185 = v58 | 0x8000000000000000;
    valuePtr[5] = v55;
  }
  else
  {
    HIBYTE(v185) = v46;
    if (!v46)
    {
      LOBYTE(valuePtr[5]) = 0;
      v186 = 1;
      v56 = valuePtr[0];
      if ((SHIBYTE(v185) & 0x80000000) == 0)
        goto LABEL_98;
      goto LABEL_104;
    }
  }
  memmove(v55, v45, v46);
  *((_BYTE *)v55 + v46) = 0;
  v186 = 1;
  v56 = valuePtr[0];
  if ((SHIBYTE(v185) & 0x80000000) == 0)
  {
LABEL_98:
    if (!LOBYTE(valuePtr[4]))
      goto LABEL_107;
    goto LABEL_105;
  }
LABEL_104:
  operator delete((void *)valuePtr[5]);
  if (!LOBYTE(valuePtr[4]))
    goto LABEL_107;
LABEL_105:
  if (SHIBYTE(valuePtr[3]) < 0)
    operator delete((void *)valuePtr[1]);
LABEL_107:
  if (valuePtr[0])
    os_release((void *)valuePtr[0]);
  if (v47 && *(_QWORD *)(v47 + 24))
  {
    v59 = _os_log_pack_size();
    v60 = (std::__shared_weak_count_vtbl *)operator new(v59, (std::align_val_t)8uLL);
    v61 = (std::__shared_weak_count *)operator new();
    v61->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v61->__shared_owners_ = 0;
    v61->__shared_weak_owners_ = 0;
    v61[1].__vftable = v60;
    v176[0] = v60;
    v176[1] = v60;
    v178 = 0;
    v179 = 0;
    v177 = v61;
    v62 = strlen(__s);
    if (v62 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v63 = v62;
    if (v62 >= 0x17)
    {
      v66 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v62 | 7) != 0x17)
        v66 = v62 | 7;
      v67 = v66 + 1;
      p_dst = (_QWORD **)operator new(v66 + 1);
      *(_QWORD *)&v183 = v63;
      *((_QWORD *)&v183 + 1) = v67 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v183) = v62;
      p_dst = &__dst;
      if (!v62)
      {
LABEL_121:
        *((_BYTE *)p_dst + v63) = 0;
        v68 = strlen(v151);
        if (v68 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v69 = v68;
        if (v68 >= 0x17)
        {
          v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v68 | 7) != 0x17)
            v71 = v68 | 7;
          v72 = v71 + 1;
          v70 = operator new(v71 + 1);
          *(_QWORD *)&v181 = v69;
          *((_QWORD *)&v181 + 1) = v72 | 0x8000000000000000;
          v180 = v70;
        }
        else
        {
          HIBYTE(v181) = v68;
          v70 = &v180;
          if (!v68)
            goto LABEL_129;
        }
        memcpy(v70, v151, v69);
LABEL_129:
        *((_BYTE *)v70 + v69) = 0;
        valuePtr[1] = __dst;
        valuePtr[2] = v183;
        *(_QWORD *)((char *)&valuePtr[2] + 7) = *(_QWORD *)((char *)&v183 + 7);
        valuePtr[4] = v180;
        valuePtr[5] = v181;
        *(_QWORD *)((char *)&valuePtr[5] + 7) = *(_QWORD *)((char *)&v181 + 7);
        valuePtr[0] = off_24EC24648;
        HIBYTE(valuePtr[3]) = HIBYTE(v183);
        HIBYTE(valuePtr[6]) = HIBYTE(v181);
        v73 = (char *)operator new(0x50uLL);
        *((_QWORD *)v73 + 3) = off_24EC24648;
        *((_QWORD *)v73 + 1) = 0;
        *((_QWORD *)v73 + 2) = 0;
        *(_QWORD *)v73 = &off_24EC245F8;
        *((_OWORD *)v73 + 2) = *(_OWORD *)&valuePtr[1];
        *((_QWORD *)v73 + 6) = valuePtr[3];
        memset(&valuePtr[1], 0, 24);
        *(_OWORD *)(v73 + 56) = *(_OWORD *)&valuePtr[4];
        *((_QWORD *)v73 + 9) = valuePtr[6];
        memset(&valuePtr[4], 0, 24);
        v74 = v179;
        v178 = v73 + 24;
        v179 = (std::__shared_weak_count *)v73;
        if (v74)
        {
          p_shared_owners = (unint64_t *)&v74->__shared_owners_;
          do
            v76 = __ldaxr(p_shared_owners);
          while (__stlxr(v76 - 1, p_shared_owners));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        if (SHIBYTE(valuePtr[6]) < 0)
        {
          operator delete((void *)valuePtr[4]);
          if ((SHIBYTE(valuePtr[3]) & 0x80000000) == 0)
          {
LABEL_136:
            *(_OWORD *)v173 = *(_OWORD *)v176;
            v78 = v177;
            v77 = v178;
            *(_QWORD *)&v173[16] = v177;
            if (!v177)
              goto LABEL_142;
            goto LABEL_140;
          }
        }
        else if ((SHIBYTE(valuePtr[3]) & 0x80000000) == 0)
        {
          goto LABEL_136;
        }
        operator delete((void *)valuePtr[1]);
        *(_OWORD *)v173 = *(_OWORD *)v176;
        v78 = v177;
        v77 = v178;
        *(_QWORD *)&v173[16] = v177;
        if (!v177)
        {
LABEL_142:
          v81 = v179;
          *(_QWORD *)&v174 = v77;
          *((_QWORD *)&v174 + 1) = v179;
          if (v179)
          {
            v82 = (unint64_t *)&v179->__shared_owners_;
            do
              v83 = __ldxr(v82);
            while (__stxr(v83 + 1, v82));
            v175 = v77;
            do
              v84 = __ldaxr(v82);
            while (__stlxr(v84 - 1, v82));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          else
          {
            v175 = v77;
          }
          v85 = v177;
          if (v177)
          {
            v86 = (unint64_t *)&v177->__shared_owners_;
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
          v88 = *(_QWORD *)v173;
          if (v175[31] >= 0)
            v89 = v175 + 8;
          else
            v89 = (char *)*((_QWORD *)v175 + 1);
          if (v175[55] >= 0)
            v90 = v175 + 32;
          else
            v90 = (char *)*((_QWORD *)v175 + 4);
          v91 = _os_log_pack_fill();
          *(_DWORD *)v91 = 134218498;
          *(_QWORD *)(v91 + 4) = v150;
          *(_WORD *)(v91 + 12) = 2080;
          *(_QWORD *)(v91 + 14) = v89;
          *(_WORD *)(v91 + 22) = 2080;
          *(_QWORD *)(v91 + 24) = v90;
          v92 = operator new();
          v93 = *(unsigned __int8 *)(v148 + 39);
          v94 = v147;
          if ((v93 & 0x80u) != 0)
          {
            v94 = *(const char **)(v148 + 16);
            v93 = *(_QWORD *)(v148 + 24);
          }
          *(_QWORD *)v92 = v88;
          *(_OWORD *)(v92 + 8) = *(_OWORD *)&v173[8];
          *(_QWORD *)&v173[8] = 0;
          *(_QWORD *)&v173[16] = 0;
          *(_OWORD *)(v92 + 24) = v174;
          v174 = 0uLL;
          *(_QWORD *)(v92 + 40) = v94;
          *(_QWORD *)(v92 + 48) = v93;
          *(_BYTE *)(v92 + 56) = 1;
          v176[0] = 0;
          valuePtr[0] = v92;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v47 + 24) + 40))(*(_QWORD *)(v47 + 24), valuePtr);
          v95 = valuePtr[0];
          valuePtr[0] = 0;
          a5 = v153;
          if (v95)
          {
            v96 = *(std::__shared_weak_count **)(v95 + 32);
            if (v96)
            {
              v97 = (unint64_t *)&v96->__shared_owners_;
              do
                v98 = __ldaxr(v97);
              while (__stlxr(v98 - 1, v97));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v96);
              }
            }
            v99 = *(std::__shared_weak_count **)(v95 + 16);
            if (v99)
            {
              v100 = (unint64_t *)&v99->__shared_owners_;
              do
                v101 = __ldaxr(v100);
              while (__stlxr(v101 - 1, v100));
              if (!v101)
              {
                ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                std::__shared_weak_count::__release_weak(v99);
              }
            }
            MEMORY[0x227684CE8](v95, 0x10F0C40B62ED6C6);
            v102 = v176[0];
            v176[0] = 0;
            if (v102)
            {
              v103 = (std::__shared_weak_count *)*((_QWORD *)v102 + 4);
              if (v103)
              {
                v104 = (unint64_t *)&v103->__shared_owners_;
                do
                  v105 = __ldaxr(v104);
                while (__stlxr(v105 - 1, v104));
                if (!v105)
                {
                  ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                  std::__shared_weak_count::__release_weak(v103);
                }
              }
              v106 = (std::__shared_weak_count *)*((_QWORD *)v102 + 2);
              if (v106)
              {
                v107 = (unint64_t *)&v106->__shared_owners_;
                do
                  v108 = __ldaxr(v107);
                while (__stlxr(v108 - 1, v107));
                if (!v108)
                {
                  ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                  std::__shared_weak_count::__release_weak(v106);
                }
              }
              MEMORY[0x227684CE8](v102, 0x10F0C40B62ED6C6);
            }
          }
          v109 = (std::__shared_weak_count *)*((_QWORD *)&v174 + 1);
          if (*((_QWORD *)&v174 + 1))
          {
            v110 = (unint64_t *)(*((_QWORD *)&v174 + 1) + 8);
            do
              v111 = __ldaxr(v110);
            while (__stlxr(v111 - 1, v110));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              std::__shared_weak_count::__release_weak(v109);
            }
          }
          v112 = *(std::__shared_weak_count **)&v173[16];
          if (*(_QWORD *)&v173[16])
          {
            v113 = (unint64_t *)(*(_QWORD *)&v173[16] + 8);
            do
              v114 = __ldaxr(v113);
            while (__stlxr(v114 - 1, v113));
            if (!v114)
            {
              ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
              std::__shared_weak_count::__release_weak(v112);
            }
          }
          goto LABEL_196;
        }
LABEL_140:
        v79 = (unint64_t *)&v78->__shared_owners_;
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
        goto LABEL_142;
      }
    }
    memcpy(p_dst, __s, v63);
    goto LABEL_121;
  }
  os_log_type_enabled(v56, OS_LOG_TYPE_INFO);
  LODWORD(valuePtr[0]) = 134218498;
  *(_QWORD *)((char *)valuePtr + 4) = v150;
  WORD2(valuePtr[1]) = 2080;
  *(_QWORD *)((char *)&valuePtr[1] + 6) = __s;
  HIWORD(valuePtr[2]) = 2080;
  valuePtr[3] = v151;
  v65 = (void *)_os_log_send_and_compose_impl();
  a5 = v153;
  if (v65)
    free(v65);
LABEL_196:
  if (v155 < 0)
  {
    operator delete(__p[0]);
    if ((v157 & 0x80000000) == 0)
    {
LABEL_198:
      if (!v149)
        goto LABEL_218;
LABEL_202:
      v115 = *a5;
      LODWORD(valuePtr[3]) = 0;
      sub_223C8BD48((uint64_t)v176, (uint64_t)valuePtr, &v171);
      if (LODWORD(valuePtr[3]) == -1)
        sub_22316DD70();
      v176[0] = &__dst;
      ((void (*)(_BYTE *__return_ptr, void **, _QWORD *))off_24EC629E8[LODWORD(valuePtr[3])])(v173, v176, valuePtr);
      if (LODWORD(valuePtr[3]) != -1)
        ((void (*)(void **, _QWORD *))off_24EC629B8[LODWORD(valuePtr[3])])(v176, valuePtr);
      if (v173[23] >= 0)
        v116 = v173;
      else
        v116 = *(const char **)v173;
      LODWORD(valuePtr[3]) = 0;
      sub_2231BFC9C((uint64_t)&__dst, (uint64_t)valuePtr, (unsigned int *)&v172);
      if (LODWORD(valuePtr[3]) == -1)
        sub_22316DD70();
      __dst = &v180;
      ((void (*)(void **__return_ptr, _QWORD **, _QWORD *))off_24EC629E8[LODWORD(valuePtr[3])])(v176, &__dst, valuePtr);
      if (LODWORD(valuePtr[3]) != -1)
        ((void (*)(_QWORD **, _QWORD *))off_24EC629B8[LODWORD(valuePtr[3])])(&__dst, valuePtr);
      v117 = v176;
      if (SHIBYTE(v177) < 0)
        v117 = (void **)v176[0];
      sub_22322C138((uint64_t)&v158, "New pixel buffer pool %p with format %s and size %s", v115, v116, (const char *)v117);
      if (SHIBYTE(v177) < 0)
        operator delete(v176[0]);
      if ((v173[23] & 0x80000000) != 0)
        operator delete(*(void **)v173);
      sub_223182C08((uint64_t)&v158);
      goto LABEL_218;
    }
  }
  else if ((v157 & 0x80000000) == 0)
  {
    goto LABEL_198;
  }
  operator delete(v156[0]);
  if (v149)
    goto LABEL_202;
LABEL_218:
  sub_223182C08((uint64_t)&v158);
  v118 = v165;
  if (v165)
  {
    v119 = (unint64_t *)&v165->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
LABEL_223:
  v121 = v172;
  LODWORD(valuePtr[0]) = v171;
  BYTE4(valuePtr[0]) = a4;
  v123 = *a5;
  v122 = (std::__shared_weak_count *)a5[1];
  valuePtr[1] = v172;
  valuePtr[2] = v123;
  valuePtr[3] = v122;
  if (v122)
  {
    v124 = (unint64_t *)&v122->__shared_owners_;
    do
      v125 = __ldxr(v124);
    while (__stxr(v125 + 1, v124));
  }
  v126 = (uint64_t *)*v9;
  v127 = v9;
  if (!*v9)
    goto LABEL_263;
  do
  {
    while (1)
    {
      v127 = v126;
      v130 = v126[4];
      if (LODWORD(valuePtr[0]) != (_DWORD)v130)
        break;
      if (BYTE4(valuePtr[0]) == BYTE4(v130))
      {
        v128 = v127[5];
        v129 = (unint64_t)(HIDWORD(v121) < HIDWORD(v128)) << 7;
        if (HIDWORD(v121) == HIDWORD(v128))
          v129 = 0;
        if ((_DWORD)v121 != (_DWORD)v128)
          v129 = (unint64_t)(v121 < v128) << 7;
        if (v129)
          goto LABEL_233;
        if (v128 >= v121)
          v133 = 1;
        else
          v133 = -1;
        if (HIDWORD(v128) >= HIDWORD(v121))
          v134 = 1;
        else
          v134 = -1;
        if (HIDWORD(v121) == HIDWORD(v128))
          v135 = 0;
        else
          v135 = v134;
        if ((_DWORD)v121 == (_DWORD)v128)
          v136 = v135;
        else
          v136 = v133;
        if ((v136 & 0x80) == 0)
          goto LABEL_266;
        goto LABEL_261;
      }
      if (BYTE4(valuePtr[0]) >= BYTE4(v130))
      {
        if (BYTE4(v130) >= BYTE4(valuePtr[0]))
          v131 = 1;
        else
          v131 = -1;
        if ((v131 & 0x80) == 0)
          goto LABEL_266;
        goto LABEL_261;
      }
LABEL_233:
      v126 = (uint64_t *)*v127;
      v9 = v127;
      if (!*v127)
        goto LABEL_263;
    }
    if (LODWORD(valuePtr[0]) < v130)
      goto LABEL_233;
    if (v130 >= LODWORD(valuePtr[0]))
      v132 = 1;
    else
      v132 = -1;
    if ((v132 & 0x80) == 0)
      goto LABEL_266;
LABEL_261:
    v126 = (uint64_t *)v127[1];
  }
  while (v126);
  v9 = v127 + 1;
LABEL_263:
  v137 = operator new(0x40uLL);
  v137[8] = valuePtr[0];
  *((_BYTE *)v137 + 36) = a4;
  *((_QWORD *)v137 + 5) = v121;
  *((_QWORD *)v137 + 6) = v123;
  *((_QWORD *)v137 + 7) = v122;
  valuePtr[2] = 0;
  valuePtr[3] = 0;
  *(_QWORD *)v137 = 0;
  *((_QWORD *)v137 + 1) = 0;
  *((_QWORD *)v137 + 2) = v127;
  *v9 = (uint64_t)v137;
  v138 = (uint64_t *)**a1;
  if (v138)
  {
    *a1 = v138;
    v137 = (_DWORD *)*v9;
  }
  sub_2231A9A8C(a1[1], (uint64_t *)v137);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  v122 = (std::__shared_weak_count *)valuePtr[3];
LABEL_266:
  if (v122)
  {
    v139 = (unint64_t *)&v122->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
      v141 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
      if (*((_QWORD *)&v167 + 1))
        goto LABEL_271;
      goto LABEL_274;
    }
  }
  v141 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
  if (!*((_QWORD *)&v167 + 1))
    goto LABEL_274;
LABEL_271:
  v142 = (unint64_t *)&v141->__shared_owners_;
  do
    v143 = __ldaxr(v142);
  while (__stlxr(v143 - 1, v142));
  if (v143)
  {
LABEL_274:
    if (v169 < 0)
      goto LABEL_275;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
    std::__shared_weak_count::__release_weak(v141);
    if (v169 < 0)
LABEL_275:
      operator delete(v168[0]);
  }
  v144 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
  if (*((_QWORD *)&v170 + 1))
  {
    v145 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
}

void sub_223C86504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  uint64_t v50;

  if (*(_BYTE *)(v50 - 152) && *(char *)(v50 - 153) < 0)
    operator delete(*(void **)(v50 - 176));
  __cxa_guard_abort(&qword_255788F58);
  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  sub_223182DAC((uint64_t)&a31);
  sub_223167354(a18);
  sub_223167354((uint64_t)&a41);
  if (a49 < 0)
  {
    operator delete(a44);
    sub_223167354((uint64_t)&a50);
    _Unwind_Resume(a1);
  }
  sub_223167354((uint64_t)&a50);
  _Unwind_Resume(a1);
}

_QWORD *sub_223C867D8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned __int8 v6;
  unsigned int v7;
  uint64_t v9;
  _QWORD *result;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  std::mutex *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned __int8 v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t **v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  int v56;
  std::string v57;
  void *v58[2];
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD v62[3];
  _QWORD v63[2];
  uint64_t v64;
  char v65;
  CVPixelBufferPoolRef *v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  void *__dst[2];
  uint64_t v71;
  _QWORD v72[3];
  void *__p[2];
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void **v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[22];
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v68 = a1;
  v67 = a2;
  if (a1)
  {
    v6 = atomic_load((unsigned __int8 *)&qword_2540CD890);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD890))
    {
      qword_2540CD8C0 = 0;
      qword_2540CD8B8 = 0;
      qword_2540CD8B0 = (uint64_t)&qword_2540CD8B8;
      __cxa_atexit((void (*)(void *))sub_2232B5FA0, &qword_2540CD8B0, &dword_22314D000);
      __cxa_guard_release(&qword_2540CD890);
    }
    if ((v67 - 1) > 0x25)
      v7 = 0;
    else
      v7 = dword_22466DFBC[v67 - 1] | *(_DWORD *)&a8[4 * v67 - 4];
    sub_223C8536C((uint64_t **)&qword_2540CD8B0, v68, v7, 1u, (std::__shared_weak_count_vtbl ***)&v66);
    sub_2242A7370(v66, (uint64_t)v63);
    if (!v65
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/ImagePool.cpp", 80, (uint64_t)"buffer_opt", 10, (uint64_t)"Failed to create pixel buffer", 29, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v62[0] = &off_24EC715B8;
    v62[1] = v63[1];
    v62[2] = v64;
    if (v64)
    {
      v11 = (unint64_t *)(v64 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    sub_2242AA1D0((uint64_t)v62, &v60);
    if (v61)
    {
      v14 = *v61;
      v13 = (std::__shared_weak_count *)v61[1];
      if (!v13)
        goto LABEL_18;
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        if (v14)
          goto LABEL_20;
      }
      else
      {
LABEL_18:
        if (v14)
          goto LABEL_20;
      }
    }
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/ImagePool.cpp", 83, (uint64_t)"buffer_iosurface", 16, (uint64_t)"Expect IOSurface backed pixel buffer", 36, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
LABEL_20:
    sub_2244E116C((uint64_t)&v60, a3);
    DWORD2(v55) = 0;
    sub_2231A0B14((uint64_t)&v76, (uint64_t)&v54, (unsigned int *)&v67);
    v79 = (void **)&v54;
    *(_QWORD *)&v80 = "-";
    *((_QWORD *)&v80 + 1) = &v54;
    *(_QWORD *)&v81 = "-";
    *((_QWORD *)&v81 + 1) = "-";
    if (DWORD2(v55) == -1)
      sub_22316DD70();
    __p[0] = &v79;
    ((void (*)(void **, __int128 *))off_24EC629D0[DWORD2(v55)])(__p, &v54);
    sub_2231BFC9C((uint64_t)&v79, (uint64_t)&v54, (unsigned int *)&v68);
    if (DWORD2(v55) == -1)
      sub_22316DD70();
    v79 = __p;
    ((void (*)(void **__return_ptr, void ***, __int128 *))off_24EC629E8[DWORD2(v55)])(v58, &v79, &v54);
    if (DWORD2(v55) != -1)
      ((void (*)(void ***, __int128 *))off_24EC629B8[DWORD2(v55)])(&v79, &v54);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v18 = sub_2241471F8();
      v19 = v18[2];
      if (!v19)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v19 = v18[2];
      }
      v20 = *(_QWORD *)(v19 + 64);
      v21 = (std::mutex *)(v20 + 32);
      std::mutex::lock((std::mutex *)(v20 + 32));
      v23 = *(_QWORD *)(v20 + 96);
      v22 = *(_QWORD *)(v20 + 104);
      std::mutex::unlock(v21);
      if (v23 != v22)
      {
        v79 = (void **)"cv3d.recon.";
        *(_QWORD *)&v80 = 11;
        *((_QWORD *)&v80 + 1) = "Stats.PixelBufferPool";
        *(_QWORD *)&v81 = 21;
        sub_2231A9820((uint64_t)&v79, (uint64_t)&v81 + 8, 0, 0, &v57);
        sub_2241471F8();
        v24 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24))
        {
          v54 = 0u;
          v55 = 0u;
          v56 = 728325616;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24))
          {
            if (SHIBYTE(v59) < 0)
            {
              sub_223197FA4(__dst, v58[0], (unint64_t)v58[1]);
            }
            else
            {
              *(_OWORD *)__dst = *(_OWORD *)v58;
              v71 = v59;
            }
            *(_QWORD *)&v69 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            *((_QWORD *)&v69 + 1) = 2;
            v25 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24))
            {
              v26 = atomic_load((unsigned __int8 *)&qword_2540CD8A8);
              if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD8A8))
              {
                qword_2540CD8D8 = 0;
                qword_2540CD8D0 = 0;
                qword_2540CD8C8 = (uint64_t)&qword_2540CD8D0;
                __cxa_atexit((void (*)(void *))sub_223C8C198, &qword_2540CD8C8, &dword_22314D000);
                __cxa_guard_release(&qword_2540CD8A8);
              }
              v27 = sub_223C8C220((const void **)v58, (uint64_t)v58);
              v28 = sub_2242AA04C((uint64_t)v62, 0);
              v29 = v28;
              v31 = (uint64_t **)(v27 + 8);
              v30 = (uint64_t *)v27[8];
              if (v30)
              {
                do
                {
                  while (1)
                  {
                    v32 = (uint64_t **)v30;
                    v33 = v30[4];
                    if (v28 >= v33)
                      break;
                    v30 = *v32;
                    v31 = v32;
                    if (!*v32)
                      goto LABEL_46;
                  }
                  if (v33 >= v28)
                    goto LABEL_49;
                  v30 = v32[1];
                }
                while (v30);
                v31 = v32 + 1;
              }
              else
              {
                v32 = (uint64_t **)(v27 + 8);
              }
LABEL_46:
              v34 = (uint64_t *)operator new(0x28uLL);
              v34[4] = v29;
              *v34 = 0;
              v34[1] = 0;
              v34[2] = (uint64_t)v32;
              *v31 = v34;
              v35 = *(_QWORD *)v27[7];
              if (v35)
              {
                v27[7] = v35;
                v34 = *v31;
              }
              sub_2231A9A8C((uint64_t *)v27[8], v34);
              ++v27[9];
LABEL_49:
              v79 = (void **)sub_223C8C220((const void **)v58, (uint64_t)v58)[9];
              *(_OWORD *)__p = *(_OWORD *)__dst;
              v74 = v71;
              __dst[0] = 0;
              __dst[1] = 0;
              v71 = 0;
              v75 = 1;
              sub_2231AD880((uint64_t *)&v79, (__int128 *)__p, &v69, &v76);
              if (v75 && SHIBYTE(v74) < 0)
                operator delete(__p[0]);
              v36 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 56))(v24);
              v37 = *v36;
              v38 = (std::__shared_weak_count *)v36[1];
              if (v38)
              {
                v39 = (unint64_t *)&v38->__shared_owners_;
                do
                  v40 = __ldxr(v39);
                while (__stxr(v40 + 1, v39));
              }
              v42 = v77;
              v41 = v78;
              v72[0] = &off_24EC6A3B8;
              v72[1] = v77;
              v72[2] = v78;
              v77 = 0;
              v78 = 0;
              v79 = (void **)v37;
              *(_QWORD *)&v80 = v38;
              if (v38)
              {
                v43 = (unint64_t *)&v38->__shared_owners_;
                do
                  v44 = __ldxr(v43);
                while (__stxr(v44 + 1, v43));
              }
              *((_QWORD *)&v80 + 1) = &off_24EC6A3B8;
              *(_QWORD *)&v81 = v42;
              *((_QWORD *)&v81 + 1) = v41;
              if (v41)
              {
                v45 = (unint64_t *)(v41 + 8);
                do
                  v46 = __ldxr(v45);
                while (__stxr(v46 + 1, v45));
              }
              (*(void (**)(uint64_t *, void ***))(*v25 + 16))(v25, &v79);
              sub_2241231D8((uint64_t)&v80 + 8);
              v47 = (std::__shared_weak_count *)v80;
              if ((_QWORD)v80)
              {
                v48 = (unint64_t *)(v80 + 8);
                do
                  v49 = __ldaxr(v48);
                while (__stlxr(v49 - 1, v48));
                if (!v49)
                {
                  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                  std::__shared_weak_count::__release_weak(v47);
                }
              }
              sub_2241231D8((uint64_t)v72);
              if (v38)
              {
                v50 = (unint64_t *)&v38->__shared_owners_;
                do
                  v51 = __ldaxr(v50);
                while (__stlxr(v51 - 1, v50));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                  std::__shared_weak_count::__release_weak(v38);
                }
              }
              sub_2241231D8((uint64_t)&v76);
            }
            if (SHIBYTE(v71) < 0)
              operator delete(__dst[0]);
          }
          kdebug_trace();
        }
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
      }
    }
    v52 = sub_2242A78F0((uint64_t)v62);
    v53 = (char *)&loc_223C86F68 + 4 * word_22466BBF4[sub_223C89FC8(v52)];
    __asm { BR              X10 }
  }
  v9 = operator new();
  v63[0] = &v68;
  sub_2244828E0(a2);
  *(_QWORD *)v9 = &off_24EC1F958;
  *(_OWORD *)(v9 + 8) = v80;
  *(_OWORD *)(v9 + 24) = v81;
  *(_OWORD *)(v9 + 40) = *(_OWORD *)v82;
  *(_QWORD *)(v9 + 54) = *(_QWORD *)&v82[14];
  *(_QWORD *)&v54 = v9;
  *a4 = v9;
  result = (_QWORD *)operator new();
  *result = &off_24EC62A60;
  result[1] = 0;
  result[2] = 0;
  result[3] = v9;
  a4[1] = (uint64_t)result;
  return result;
}

void sub_223C897C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58)
{
  std::__shared_weak_count *v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;

  sub_2241231D8(v59);
  v62 = *(std::__shared_weak_count **)(v60 - 216);
  if (v62)
  {
    p_shared_owners = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldaxr(p_shared_owners);
    while (__stlxr(v64 - 1, p_shared_owners));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  sub_2241231D8((uint64_t)&a49);
  if (v58)
  {
    v65 = (unint64_t *)&v58->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  sub_2241231D8(v60 - 248);
  if (a48 < 0)
    operator delete(__p);
  sub_2231874DC((uint64_t)&a9);
  if (a19 < 0)
    operator delete(a14);
  if (a25 < 0)
    operator delete(a20);
  sub_2244E0FF4(&a26);
  sub_2242A8F3C(&a29);
  sub_2232B6080((uint64_t)&a32);
  sub_223167354((uint64_t)&a37);
  _Unwind_Resume(a1);
}

uint64_t sub_223C89FC8(int a1)
{
  int v1;

  if (a1 > 1278226535)
  {
    if (a1 <= 1647589489)
    {
      if (a1 > 1380410944)
      {
        switch(a1)
        {
          case 1380410945:
            return 0x100000020;
          case 1380411457:
            return 0x10000001FLL;
          case 1647392359:
            return 0x100000002;
        }
        return 0;
      }
      if (a1 != 1278226536)
      {
        if (a1 == 1380401729)
          return 0x10000001DLL;
        return 0;
      }
    }
    else
    {
      if (a1 <= 1717856626)
      {
        if (a1 == 1647589490)
          return 0x100000016;
        if (a1 == 1647719521)
          return 0x100000026;
        v1 = 1717855600;
        goto LABEL_22;
      }
      if (a1 == 1717856627)
        return 0x100000004;
      if (a1 != 1751410032 && a1 != 1751411059)
        return 0;
    }
    return 0x100000003;
  }
  if (a1 <= 843264103)
  {
    if (a1 <= 842285638)
    {
      if (a1 == 24)
        return 0x100000015;
      if (a1 == 32)
        return 0x100000025;
    }
    else
    {
      switch(a1)
      {
        case 842285639:
          return 0x100000011;
        case 843264056:
          return 0x100000005;
        case 843264102:
          return 0x100000008;
      }
    }
    return 0;
  }
  if (a1 > 1111970368)
  {
    if (a1 == 1111970369)
      return 0x100000019;
    if (a1 == 1278226488)
      return 0x100000001;
    v1 = 1278226534;
LABEL_22:
    if (a1 != v1)
      return 0;
    return 0x100000004;
  }
  if (a1 == 843264104)
    return 0x100000007;
  if (a1 == 1094862674)
    return 0x100000021;
  return 0;
}

uint64_t sub_223C8A294(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C8A2FC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8A364()
{
  return 2;
}

uint64_t sub_223C8A36C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_223C8A374@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_223C8A38C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_223C8A40C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8A430(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24EC6F470;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24EC70110[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223C8A4B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE2EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE2EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE2EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE2EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223C8A528(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C8A590(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8A5F8()
{
  return 3;
}

uint64_t sub_223C8A600(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_223C8A608@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_223C8A620(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_223C8A69C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C8A704(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8A76C()
{
  return 4;
}

uint64_t sub_223C8A774(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_223C8A77C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_223C8A794(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_223C8A810(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C8A878(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8A8E0()
{
  return 5;
}

uint64_t sub_223C8A8E8(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_223C8A8F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_223C8A904(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_223C8A984(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8A9A8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24EC6F2C0;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24EC70110[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223C8AA30(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE5EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE5EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE5EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE5EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223C8AAA0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C8AB08(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8AB70()
{
  return 7;
}

uint64_t sub_223C8AB78(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_223C8AB80@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_223C8AB98(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_223C8AC18(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8AC3C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24EC6F6B0;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24EC70110[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223C8ACC4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE7EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE7EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE7EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE7EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223C8AD34(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C8AD9C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8AE04()
{
  return 8;
}

uint64_t sub_223C8AE0C(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_223C8AE14@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_223C8AE2C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_223C8AEAC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8AED0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24EC6F860;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24EC70110[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223C8AF58(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE8EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE8EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE8EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE8EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223C8AFC8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C8B030(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8B098()
{
  return 21;
}

uint64_t sub_223C8B0A0(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_223C8B0A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_223C8B0BC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_223C8B13C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8B160(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24EC6F350;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24EC70110[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223C8B1E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE21EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE21EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE21EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE21EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223C8B258(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C8B2C0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8B328()
{
  return 22;
}

uint64_t sub_223C8B330(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_223C8B338@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_223C8B350(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_223C8B3D0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8B3F4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24EC6F500;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24EC70110[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223C8B47C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE22EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE22EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE22EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE22EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223C8B4EC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C8B554(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8B5BC()
{
  return 25;
}

uint64_t sub_223C8B5C4(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_223C8B5CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_223C8B5E0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_223C8B65C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C8B6C4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8B72C()
{
  return 31;
}

uint64_t sub_223C8B734(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_223C8B73C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_223C8B754(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_223C8B7D0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C8B838(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8B8A0()
{
  return 32;
}

uint64_t sub_223C8B8A8(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_223C8B8B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_223C8B8C8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_223C8B944(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C8B9AC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8BA14()
{
  return 37;
}

uint64_t sub_223C8BA1C(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_223C8BA24@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_223C8BA38(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_223C8BAB8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8BADC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24EC6F3E0;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24EC70110[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223C8BB64(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE37EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE37EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE37EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE37EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223C8BBD4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C8BC3C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8BCA4()
{
  return 38;
}

uint64_t sub_223C8BCAC(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_223C8BCB4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_223C8BCCC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_223C8BD48(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21[0] = v5;
  sub_2244E1FDC((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC629A0[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_223C8BF98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_223C8BFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223C8BFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223C8BFEC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC62A10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223C8BFFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC62A10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223C8C02C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_223C8C08C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C8C0B0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223C8C128(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img5ImageILNS3_6FormatE0ENS3_13DynamicBufferEEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img5ImageILNS3_6FormatE0ENS3_13DynamicBufferEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img5ImageILNS3_6FormatE0ENS3_13DynamicBufferEEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img5ImageILNS3_6FormatE0ENS3_13DynamicBufferEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223C8C198(uint64_t a1)
{
  sub_223C8C1C0(*(char **)(a1 + 8));
  return a1;
}

void sub_223C8C1C0(char *a1)
{
  if (a1)
  {
    sub_223C8C1C0(*(_QWORD *)a1);
    sub_223C8C1C0(*((_QWORD *)a1 + 1));
    sub_2233FADDC(*((_QWORD **)a1 + 8));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t *sub_223C8C220(const void **a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  const void *v5;
  size_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  int v16;
  int v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;

  v3 = qword_2540CD8D0;
  if (qword_2540CD8D0)
  {
    v4 = *((char *)a1 + 23);
    if (v4 >= 0)
      v5 = a1;
    else
      v5 = *a1;
    if (v4 >= 0)
      v6 = *((unsigned __int8 *)a1 + 23);
    else
      v6 = (size_t)a1[1];
    while (1)
    {
      v8 = (uint64_t *)v3;
      v11 = *(const void **)(v3 + 32);
      v9 = v3 + 32;
      v10 = v11;
      v12 = *(char *)(v9 + 23);
      if (v12 >= 0)
        v13 = (const void *)v9;
      else
        v13 = v10;
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(v9 + 23);
      else
        v14 = *(_QWORD *)(v9 + 8);
      if (v14 >= v6)
        v15 = v6;
      else
        v15 = v14;
      v16 = memcmp(v5, v13, v15);
      if (v16)
      {
        if (v16 < 0)
          goto LABEL_8;
LABEL_22:
        v17 = memcmp(v13, v5, v15);
        if (v17)
        {
          if ((v17 & 0x80000000) == 0)
            return v8;
        }
        else if (v14 >= v6)
        {
          return v8;
        }
        v3 = v8[1];
        if (!v3)
        {
          v7 = v8 + 1;
LABEL_28:
          v18 = (uint64_t *)operator new(0x50uLL);
          v19 = v18 + 4;
          if (*(char *)(a2 + 23) < 0)
            goto LABEL_31;
LABEL_29:
          *(_OWORD *)v19 = *(_OWORD *)a2;
          v19[2] = *(_QWORD *)(a2 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v6 >= v14)
          goto LABEL_22;
LABEL_8:
        v3 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_28;
      }
    }
  }
  v7 = &qword_2540CD8D0;
  v8 = &qword_2540CD8D0;
  v18 = (uint64_t *)operator new(0x50uLL);
  v19 = v18 + 4;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_31:
  sub_223197FA4(v19, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_32:
  v18[9] = 0;
  v18[8] = 0;
  v18[7] = (uint64_t)(v18 + 8);
  *v18 = 0;
  v18[1] = 0;
  v18[2] = (uint64_t)v8;
  *v7 = (uint64_t)v18;
  v20 = v18;
  if (*(_QWORD *)qword_2540CD8C8)
  {
    qword_2540CD8C8 = *(_QWORD *)qword_2540CD8C8;
    v20 = (uint64_t *)*v7;
  }
  sub_2231A9A8C((uint64_t *)qword_2540CD8D0, v20);
  ++qword_2540CD8D8;
  return v18;
}

void sub_223C8C3B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223C8C3C8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  BOOL v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  _BOOL4 v21;
  _QWORD v22[3];
  float32x4_t *v23;
  _QWORD v24[3];
  float32x4_t *v25;
  char v26;

  v24[0] = a1;
  v24[1] = a1 + 8;
  v24[2] = a1 + 72;
  v25 = (float32x4_t *)(a1 + 88);
  v22[0] = a2;
  v22[1] = a2 + 8;
  v22[2] = a2 + 72;
  v23 = (float32x4_t *)(a2 + 88);
  result = sub_223C8D524((uint64_t)&v26, (uint64_t)v24, (uint64_t)v22);
  if ((_DWORD)result)
  {
    if (v25[8].i8[0])
      v3 = v23[8].i8[0] == 0;
    else
      v3 = 1;
    if (v3)
    {
      return (v25[8].i8[0] != 0) == (v23[8].i8[0] != 0);
    }
    else
    {
      v4 = vsubq_f32(*v25, *v23);
      v5 = vsubq_f32(v25[1], v23[1]);
      v6 = vsubq_f32(v25[2], v23[2]);
      v7 = vsubq_f32(v25[3], v23[3]);
      v8 = vmulq_f32(v7, v7);
      v9 = vmulq_f32(v6, v6);
      v10 = vmulq_f32(v5, v5);
      v11 = vmulq_f32(v4, v4);
      v8.f32[0] = v8.f32[3]
                + (float)(v8.f32[2]
                        + (float)(v8.f32[1]
                                + (float)(v8.f32[0]
                                        + (float)(v9.f32[3]
                                                + (float)(v9.f32[2]
                                                        + (float)(v9.f32[1]
                                                                + (float)(v9.f32[0]
                                                                        + (float)(v10.f32[3]
                                                                                + (float)(v10.f32[2]
                                                                                        + (float)(v10.f32[1]
                                                                                                + (float)(v10.f32[0] + (float)(v11.f32[3] + (float)(v11.f32[2] + vaddv_f32(*(float32x2_t *)v11.f32))))))))))))));
      v12 = vsubq_f32(v25[4], v23[4]);
      v13 = vsubq_f32(v25[5], v23[5]);
      v14 = vsubq_f32(v25[6], v23[6]);
      v15 = vsubq_f32(v25[7], v23[7]);
      v16 = vmulq_f32(v15, v15);
      v17 = vmulq_f32(v14, v14);
      v18 = vmulq_f32(v13, v13);
      v19 = vmulq_f32(v12, v12);
      v20 = v8.f32[0]
          + (float)(v16.f32[3]
                  + (float)(v16.f32[2]
                          + (float)(v16.f32[1]
                                  + (float)(v16.f32[0]
                                          + (float)(v17.f32[3]
                                                  + (float)(v17.f32[2]
                                                          + (float)(v17.f32[1]
                                                                  + (float)(v17.f32[0]
                                                                          + (float)(v18.f32[3]
                                                                                  + (float)(v18.f32[2]
                                                                                          + (float)(v18.f32[1]
                                                                                                  + (float)(v18.f32[0] + (float)(v19.f32[3] + (float)(v19.f32[2] + vaddv_f32(*(float32x2_t *)v19.f32)))))))))))))));
      v21 = v20 == 0.0;
      if (v20 < 0.0)
        v20 = 0.0 - v20;
      return v20 <= 0.000001 || v21;
    }
  }
  return result;
}

void sub_223C8C5B8(uint64_t a1, __int128 *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int32x4_t v13;
  uint64_t **v14;
  uint64_t *v15;
  int8x16_t v16;
  float32x2_t v17;
  float32x2_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x2_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  double v28;
  float v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x4_t v32;
  char *v33;
  void *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  float *v46;
  float *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  std::mutex *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  _DWORD *v93;
  uint64_t v94;
  void *v95;
  unint64_t v96;
  uint64_t *p_p;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  int32x4_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  int32x4_t v112;
  float32x4_t v113;
  int32x4_t v114;
  float32x2_t v115;
  int8x16_t v116;
  float32x2_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int32x4_t v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  __int128 v125;
  __int128 v126;
  int v127;
  std::string v128;
  __int128 v129;
  _QWORD v130[2];
  std::__shared_weak_count *v131;
  void *__p;
  _BYTE v133[15];
  __int16 v134;
  uint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  _QWORD v138[2];
  _QWORD v139[2];
  void *v140[2];
  __int128 v141;
  std::__shared_weak_count *v142;
  void *v143;
  _BYTE v144[340];
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v4 = sub_2241471F8();
    v5 = v4[2];
    if (!v5)
    {
      v6 = v4;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v5 = v6[2];
    }
    v7 = *(_QWORD *)(v5 + 64);
    v8 = (std::mutex *)(v7 + 32);
    std::mutex::lock((std::mutex *)(v7 + 32));
    v10 = *(_QWORD *)(v7 + 96);
    v9 = *(_QWORD *)(v7 + 104);
    std::mutex::unlock(v8);
    if (v10 != v9)
    {
      v140[0] = "cv3d.recon.";
      v140[1] = (void *)11;
      v141 = *a2;
      sub_2231A9820((uint64_t)v140, (uint64_t)&v142, 0, 0, &v128);
      sub_2241471F8();
      v11 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11))
      {
        v125 = 0u;
        v126 = 0u;
        v127 = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11))
        {
          *(_QWORD *)&v129 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v129 + 1) = 2;
          v12 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11))
          {
            v110 = v11;
            sub_2241498F4((uint64_t)v140, 0);
            v13.i64[0] = *(_QWORD *)(a1 + 8);
            v120 = v13;
            v13.i32[2] = *(_DWORD *)(a1 + 16);
            v112 = v13;
            v13.i64[0] = *(_QWORD *)(a1 + 24);
            v114 = v13;
            v13.i32[2] = *(_DWORD *)(a1 + 32);
            v108 = v13;
            v13.i32[0] = *(_DWORD *)(a1 + 48);
            v123 = *(float32x2_t *)v13.i8;
            v13.i64[0] = *(_QWORD *)(a1 + 40);
            v116 = (int8x16_t)v13;
            v13.i64[0] = *(_QWORD *)(a1 + 56);
            v13.i32[2] = *(_DWORD *)(a1 + 64);
            v118 = (float32x4_t)v13;
            sub_22339E3C8((uint64_t)v140, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) - **(_QWORD **)(a1 + 72)) >> 3));
            sub_22339E3C8((uint64_t)&v142, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) - **(_QWORD **)(a1 + 72)) >> 3));
            *(_DWORD *)&v144[16] = 1;
            v109 = a1;
            v14 = *(uint64_t ***)(a1 + 72);
            v15 = *v14;
            v111 = v14[1];
            if (*v14 != v111)
            {
              v16 = v116;
              v16.i32[2] = v123.i32[0];
              v122 = (float32x2_t)vzip1q_s32(v120, v114).u64[0];
              v17 = (float32x2_t)vtrn2q_s32(v112, v108).u64[0];
              v18 = (float32x2_t)vzip2q_s32(v112, v108).u64[0];
              v19 = (int8x16_t)vdupq_lane_s32((int32x2_t)v17, 1);
              v20 = (int8x16_t)vdupq_lane_s32((int32x2_t)v17, 0);
              v21 = (int8x16_t)vnegq_f32(v118);
              *(float32x2_t *)v22.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v120.i8, *(int32x2_t *)v114.i8), *(float *)v21.i32), v17, *(float32x2_t *)v118.f32, 1), v18, v118, 2);
              *(float32x2_t *)&v22.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v116.i8, *(float32x2_t *)v21.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v116.i8, 1), *(float32x2_t *)v118.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), v123);
              v119 = v22;
              v121 = v18;
              v23 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v116.i8, 1);
              v124 = *(float32x2_t *)v116.i8;
              v115 = (float32x2_t)vextq_s8(v16, v16, 8uLL).u64[0];
              v117 = (float32x2_t)vextq_s8(v20, v19, 0xCuLL).u64[0];
              while (1)
              {
                v24 = v15[1];
                if (v24)
                  break;
LABEL_11:
                v15 += 15;
                if (v15 == v111)
                  goto LABEL_54;
              }
              v25 = *v15;
              v26 = *v15 + 32 * v24;
              while (1)
              {
                v28 = *(double *)(v25 + 16);
                v29 = v28;
                if (v29 <= 0.0)
                  goto LABEL_16;
                LODWORD(v28) = *(_DWORD *)v25;
                v19.i32[0] = *(_DWORD *)(v25 + 4);
                v20.i32[0] = *(_DWORD *)(v25 + 8);
                *(float32x2_t *)v30.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v122, *(float *)v25), v117, *(float *)v19.i32), v121, *(float *)v20.i32);
                v31 = vmla_f32(vmul_f32(v124, *(float32x2_t *)&v28), *(float32x2_t *)v19.i8, v23);
                v19.i32[1] = v115.i32[1];
                *(float32x2_t *)&v30.u32[2] = vmla_f32(v31, *(float32x2_t *)v20.i8, v115);
                v32 = vaddq_f32(v30, v119);
                v33 = (char *)v140[1];
                if (v140[1] >= (void *)v141)
                {
                  v35 = (char *)v140[0];
                  v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)v140[1] - (char *)v140[0]) >> 2);
                  v37 = v36 + 1;
                  if (v36 + 1 > 0x1555555555555555)
                    goto LABEL_131;
                  if (0x5555555555555556 * ((uint64_t)(v141 - (unint64_t)v140[0]) >> 2) > v37)
                    v37 = 0x5555555555555556 * ((uint64_t)(v141 - (unint64_t)v140[0]) >> 2);
                  v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v141 - (unint64_t)v140[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL
                      ? 0x1555555555555555
                      : v37;
                  if (v38)
                  {
                    v113 = v32;
                    LODWORD(v130[0]) = v38;
                    if (HIDWORD(v141) == -1)
                      goto LABEL_130;
                    __p = v130;
                    v39 = ((uint64_t (*)(void **, char *))off_24EC62CD0[HIDWORD(v141)])(&__p, (char *)&v141 + 8);
                    v35 = (char *)v140[0];
                    v33 = (char *)v140[1];
                    v32 = v113;
                  }
                  else
                  {
                    v39 = 0;
                    v40 = 0;
                  }
                  v41 = (_DWORD *)(v39 + 12 * v36);
                  *(_QWORD *)v41 = v32.i64[0];
                  v41[2] = v32.i32[2];
                  v42 = v41;
                  if (v33 != v35)
                  {
                    do
                    {
                      v43 = *(_QWORD *)(v33 - 12);
                      v33 -= 12;
                      v44 = *((_DWORD *)v33 + 2);
                      *(_QWORD *)(v42 - 3) = v43;
                      v42 -= 3;
                      v42[2] = v44;
                    }
                    while (v33 != v35);
                    v35 = (char *)v140[0];
                  }
                  v34 = v41 + 3;
                  v140[0] = v42;
                  v140[1] = v41 + 3;
                  v45 = v141;
                  *(_QWORD *)&v141 = v39 + 12 * v40;
                  if (v35)
                  {
                    __p = v35;
                    *(_DWORD *)v133 = -1431655765 * ((unint64_t)(v45 - (_QWORD)v35) >> 2);
                    if (HIDWORD(v141) == -1)
                      sub_22316DD70();
                    v130[0] = &__p;
                    ((void (*)(_QWORD *, char *))off_24EC62CE0[HIDWORD(v141)])(v130, (char *)&v141 + 8);
                  }
                }
                else
                {
                  *(_QWORD *)v140[1] = v32.i64[0];
                  *((_DWORD *)v33 + 2) = v32.i32[2];
                  v34 = v33 + 12;
                }
                v140[1] = v34;
                v46 = (float *)v143;
                if ((unint64_t)v143 >= *(_QWORD *)v144)
                  break;
                *(float *)v143 = v29;
                v46[1] = v29;
                v27 = v46 + 3;
                v46[2] = v29;
LABEL_15:
                v143 = v27;
LABEL_16:
                v25 += 32;
                if (v25 == v26)
                  goto LABEL_11;
              }
              v47 = (float *)v142;
              v48 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v143 - (_BYTE *)v142) >> 2);
              v49 = v48 + 1;
              if (v48 + 1 > 0x1555555555555555)
LABEL_131:
                sub_22316E078();
              if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)v144 - (_QWORD)v142) >> 2) > v49)
                v49 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)v144 - (_QWORD)v142) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v144 - (_QWORD)v142) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v50 = 0x1555555555555555;
              else
                v50 = v49;
              if (v50)
              {
                LODWORD(v130[0]) = v50;
                if (*(_DWORD *)&v144[12] == -1)
LABEL_130:
                  sub_22316DD70();
                __p = v130;
                v51 = ((uint64_t (*)(void **, _BYTE *))off_24EC62CD0[*(unsigned int *)&v144[12]])(&__p, &v144[8]);
                v47 = (float *)v142;
                v46 = (float *)v143;
                v53 = (float *)(v51 + 12 * v48);
                *v53 = v29;
                v53[1] = v29;
                v53[2] = v29;
                v54 = (uint64_t)v53;
                if (v46 == v47)
                  goto LABEL_50;
              }
              else
              {
                v51 = 0;
                v52 = 0;
                v53 = (float *)(4 * (((_BYTE *)v143 - (_BYTE *)v142) >> 2));
                *v53 = v29;
                v53[1] = v29;
                v53[2] = v29;
                v54 = 12 * v48;
                if (v46 == v47)
                  goto LABEL_50;
              }
              do
              {
                v55 = *(_QWORD *)(v46 - 3);
                v46 -= 3;
                v56 = *((_DWORD *)v46 + 2);
                *(_QWORD *)(v54 - 12) = v55;
                v54 -= 12;
                *(_DWORD *)(v54 + 8) = v56;
              }
              while (v46 != v47);
              v47 = (float *)v142;
LABEL_50:
              v27 = v53 + 3;
              v142 = (std::__shared_weak_count *)v54;
              v143 = v53 + 3;
              v57 = *(_QWORD *)v144;
              *(_QWORD *)v144 = v51 + 12 * v52;
              if (v47)
              {
                __p = v47;
                *(_DWORD *)v133 = -1431655765 * ((unint64_t)(v57 - (_QWORD)v47) >> 2);
                if (*(_DWORD *)&v144[12] == -1)
                  sub_22316DD70();
                v130[0] = &__p;
                ((void (*)(_QWORD *, _BYTE *))off_24EC62CE0[*(unsigned int *)&v144[12]])(v130, &v144[8]);
              }
              goto LABEL_15;
            }
LABEL_54:
            __p = (void *)8026488;
            *(_QWORD *)v133 = v139[0];
            *(_QWORD *)&v133[7] = *(_QWORD *)((char *)v139 + 7);
            v134 = 259;
            v139[0] = 0;
            *(_QWORD *)((char *)v139 + 7) = 0;
            sub_22329F414((uint64_t)v140, (__int128 *)&__p, &v129, &v135);
            if (HIBYTE(v134) && (char)v134 < 0)
              operator delete(__p);
            sub_22316F8F4((uint64_t *)v140);
            v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 56))(v110);
            v59 = *(void **)v58;
            v60 = *(std::__shared_weak_count **)(v58 + 8);
            if (v60)
            {
              p_shared_owners = (unint64_t *)&v60->__shared_owners_;
              do
                v62 = __ldxr(p_shared_owners);
              while (__stxr(v62 + 1, p_shared_owners));
            }
            v64 = v136;
            v63 = v137;
            v130[0] = &off_24EC6A3B8;
            v130[1] = v136;
            v131 = v137;
            v136 = 0;
            v137 = 0;
            v140[0] = v59;
            v140[1] = v60;
            if (v60)
            {
              v65 = (unint64_t *)&v60->__shared_owners_;
              do
                v66 = __ldxr(v65);
              while (__stxr(v66 + 1, v65));
            }
            *(_QWORD *)&v141 = &off_24EC6A3B8;
            *((_QWORD *)&v141 + 1) = v64;
            v142 = v63;
            if (v63)
            {
              v67 = (unint64_t *)&v63->__shared_owners_;
              do
                v68 = __ldxr(v67);
              while (__stxr(v68 + 1, v67));
            }
            (*(void (**)(uint64_t *, void **))(*v12 + 16))(v12, v140);
            v69 = v142;
            a1 = v109;
            if (v142)
            {
              v70 = (unint64_t *)&v142->__shared_owners_;
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
            v72 = (std::__shared_weak_count *)v140[1];
            if (v140[1])
            {
              v73 = (unint64_t *)((char *)v140[1] + 8);
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 - 1, v73));
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v72);
              }
            }
            v75 = v131;
            if (v131)
            {
              v76 = (unint64_t *)&v131->__shared_owners_;
              do
                v77 = __ldaxr(v76);
              while (__stlxr(v77 - 1, v76));
              if (!v77)
              {
                ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                std::__shared_weak_count::__release_weak(v75);
              }
            }
            if (v60)
            {
              v78 = (unint64_t *)&v60->__shared_owners_;
              do
                v79 = __ldaxr(v78);
              while (__stlxr(v79 - 1, v78));
              if (!v79)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
            v80 = v137;
            if (v137)
            {
              v81 = (unint64_t *)&v137->__shared_owners_;
              do
                v82 = __ldaxr(v81);
              while (__stlxr(v82 - 1, v81));
              if (!v82)
              {
                ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                std::__shared_weak_count::__release_weak(v80);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v128.__r_.__value_.__l.__data_);
    }
  }
  v140[0] = "cv3d.recon.";
  v140[1] = (void *)11;
  v141 = *a2;
  sub_2231A9820((uint64_t)v140, (uint64_t)&v142, 0, 0, (std::string *)&__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v83 = sub_2241471F8();
    v84 = v83[2];
    if (!v84)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v84 = v83[2];
    }
    v85 = *(_QWORD *)(v84 + 64);
    v86 = (std::mutex *)(v85 + 32);
    std::mutex::lock((std::mutex *)(v85 + 32));
    v88 = *(_QWORD *)(v85 + 96);
    v87 = *(_QWORD *)(v85 + 104);
    std::mutex::unlock(v86);
    if (v88 != v87)
    {
      sub_2241471F8();
      v89 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v89 + 24))(v89))
      {
        v125 = 0u;
        v126 = 0u;
        v127 = 728325608;
        kdebug_trace();
        v90 = operator new();
        v91 = *(_OWORD *)(a1 + 24);
        *(_OWORD *)v90 = *(_OWORD *)(a1 + 8);
        *(_OWORD *)(v90 + 16) = v91;
        v92 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)(v90 + 32) = *(_OWORD *)(a1 + 40);
        *(_OWORD *)(v90 + 48) = v92;
        *(_DWORD *)(v90 + 128) = 0;
        *(_BYTE *)(v90 + 136) = 4;
        v93 = (_DWORD *)operator new();
        *(_BYTE *)v93 = 0;
        v93[32] = -1;
        v94 = *(unsigned int *)(v90 + 128);
        if ((_DWORD)v94 != -1)
        {
          ((void (*)(uint64_t *, _DWORD *, uint64_t))off_24EC6BD10[v94])(&v135, v93, v90);
          v93[32] = v94;
        }
        *((_BYTE *)v93 + 136) = *(_BYTE *)(v90 + 136);
        v140[0] = v93;
        LOBYTE(v140[1]) = 0;
        LOBYTE(v142) = 0;
        v143 = (void *)8026488;
        *(_QWORD *)v144 = v138[0];
        *(_QWORD *)&v144[7] = *(_QWORD *)((char *)v138 + 7);
        *(_WORD *)&v144[15] = 259;
        v138[0] = 0;
        *(_QWORD *)((char *)v138 + 7) = 0;
        sub_223AA4E7C((double *)&qword_255788F20, v89, (uint64_t)v140, "WtoJ");
        if (v144[16] && (v144[15] & 0x80000000) != 0)
          operator delete(v143);
        if ((_BYTE)v142 && SHIBYTE(v141) < 0)
          operator delete(v140[1]);
        v95 = v140[0];
        v140[0] = 0;
        if (v95)
          MEMORY[0x227684CE8](v95, 0x1000C4072FAA15ELL);
        MEMORY[0x227684CE8](v90, 0x1000C4072FAA15ELL);
        kdebug_trace();
      }
    }
  }
  *(_OWORD *)v140 = 0u;
  v141 = 0u;
  LODWORD(v142) = 728325624;
  kdebug_trace();
  v96 = v134;
  if ((v134 & 0x80u) != 0)
    v96 = *(_QWORD *)v133;
  if (v96 >= 0x11)
  {
    p_p = (uint64_t *)&__p;
    if ((v134 & 0x80u) != 0)
      p_p = (uint64_t *)__p;
    v98 = *p_p;
    v99 = p_p[1];
    v100 = *((unsigned __int8 *)p_p + 16);
    if (v98 == 0x6365722E64337663 && v99 == 0x73746174532E6E6FLL && v100 == 46)
    {
      sub_223187510();
      v103 = operator new();
      v104 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)v103 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(v103 + 16) = v104;
      v105 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(v103 + 32) = *(_OWORD *)(a1 + 40);
      *(_OWORD *)(v103 + 48) = v105;
      *(_DWORD *)(v103 + 128) = 0;
      *(_BYTE *)(v103 + 136) = 4;
      v106 = operator new();
      *(_BYTE *)v106 = 0;
      *(_DWORD *)(v106 + 128) = -1;
      v107 = *(unsigned int *)(v103 + 128);
      if ((_DWORD)v107 != -1)
      {
        ((void (*)(__int128 *, uint64_t, uint64_t))off_24EC6BD10[v107])(&v125, v106, v103);
        *(_DWORD *)(v106 + 128) = v107;
      }
      *(_BYTE *)(v106 + 136) = *(_BYTE *)(v103 + 136);
      MEMORY[0x227684CE8](v106, 0x1000C4072FAA15ELL);
      MEMORY[0x227684CE8](v103, 0x1000C4072FAA15ELL);
    }
  }
  kdebug_trace();
  if ((char)v134 < 0)
    operator delete(__p);
}

void sub_223C8D320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,__int16 a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *p_shared_owners;
  unint64_t v68;

  sub_2241231D8(v62);
  v64 = (std::__shared_weak_count *)a61;
  if (a61)
  {
    v65 = (unint64_t *)(a61 + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  sub_2241231D8((uint64_t)&a46);
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v68 = __ldaxr(p_shared_owners);
    while (__stlxr(v68 - 1, p_shared_owners));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  sub_2241231D8((uint64_t)&a53);
  sub_2231874DC((uint64_t)&a33);
  if (a43 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223C8D524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v5;
  uint64_t result;
  char **v7;
  uint64_t **v8;
  BOOL v9;
  char *v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18[3];

  if (**(_QWORD **)a2 != **(_QWORD **)a3)
    return 0;
  v5 = *(float **)(a3 + 8);
  v18[0] = *(float **)(a2 + 8);
  v18[1] = v5;
  result = sub_2231F73E4(v18);
  if (!(_DWORD)result)
    return result;
  v7 = **(char ****)(a2 + 16);
  v8 = **(uint64_t ****)(a3 + 16);
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
    return (v7 != 0) == (v8 != 0);
  v11 = *v7;
  v10 = *(char **)(**(_QWORD **)(a2 + 16) + 8);
  v12 = *v8;
  if (v10 - v11 != *(_QWORD *)(**(_QWORD **)(a3 + 16) + 8) - (_QWORD)v12)
    return 0;
  if (v11 == v10)
    return 1;
  do
  {
    v13 = *((_QWORD *)v11 + 1);
    v14 = v12[1];
    result = v13 == v14;
    if (v13 != v14)
      break;
    if (v13)
    {
      v15 = *(_QWORD *)v11;
      v16 = *(_QWORD *)v11 + 32 * v13;
      v17 = *v12;
      while (*(float *)v15 == *(float *)v17
           && *(float *)(v15 + 4) == *(float *)(v17 + 4)
           && *(float *)(v15 + 8) == *(float *)(v17 + 8)
           && *(double *)(v15 + 16) == *(double *)(v17 + 16)
           && *(_DWORD *)(v15 + 24) == *(_DWORD *)(v17 + 24))
      {
        v15 += 32;
        v17 += 32;
        if (v15 == v16)
          goto LABEL_21;
      }
      return 0;
    }
LABEL_21:
    v11 += 120;
    v12 += 15;
  }
  while (v11 != v10);
  return result;
}

uint64_t *sub_223C8D690(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD **v5;
  void **v6;
  uint64_t v7;
  __int128 *v8;
  _QWORD **v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 *v16;
  uint64_t *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  void *v24[2];
  unsigned __int8 v25;
  uint64_t v26;
  int v27;
  void **v28;
  int v29;
  void *__p[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v4 = *(uint64_t **)a1;
  if (!*(_BYTE *)a2)
    sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v5 = *(_QWORD ***)(a2 + 8);
  sub_2233025E8(v4, (std::string *)__p);
  if ((SBYTE7(v31) & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((SBYTE7(v31) & 0x80u) == 0)
    v7 = BYTE7(v31);
  else
    v7 = (uint64_t)__p[1];
  sub_2231813E8(*v5, (uint64_t)v6, v7);
  if (SBYTE7(v31) < 0)
  {
    operator delete(__p[0]);
    v8 = *(__int128 **)(a1 + 8);
    if (*(_BYTE *)a2)
      goto LABEL_11;
  }
  else
  {
    v8 = *(__int128 **)(a1 + 8);
    if (*(_BYTE *)a2)
      goto LABEL_11;
  }
  sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
LABEL_11:
  *(_BYTE *)a2 = 0;
  v9 = *(_QWORD ***)(a2 + 8);
  v10 = *v8;
  v11 = v8[1];
  v12 = v8[3];
  v32 = v8[2];
  v33 = v12;
  *(_OWORD *)__p = v10;
  v31 = v11;
  v26 = 0x400000004;
  v27 = 4;
  v28 = __p;
  v29 = 0;
  sub_224505D70((unsigned int *)&v26, v24);
  if ((v25 & 0x80u) == 0)
    v13 = v24;
  else
    v13 = (void **)v24[0];
  if ((v25 & 0x80u) == 0)
    v14 = v25;
  else
    v14 = (uint64_t)v24[1];
  sub_2231813E8(*v9, (uint64_t)v13, v14);
  if ((char)v25 < 0)
  {
    operator delete(v24[0]);
    if (*(_BYTE *)a2)
      goto LABEL_19;
  }
  else if (*(_BYTE *)a2)
  {
    goto LABEL_19;
  }
  sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
LABEL_19:
  *(_BYTE *)a2 = 0;
  v15 = **(_QWORD ***)(a2 + 8);
  sub_2231813E8(v15, (uint64_t)"{", 1);
  std::ostream::operator<<();
  sub_2231813E8(v15, (uint64_t)"}", 1);
  v16 = *(__int128 **)(a1 + 24);
  if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
    v17 = **(uint64_t ***)(a2 + 8);
    if (*((_BYTE *)v16 + 128))
    {
LABEL_21:
      sub_2231813E8(v17, (uint64_t)"\nUser world to vision world transform:\n", 39);
      v18 = *v16;
      v19 = v16[1];
      v20 = v16[3];
      v32 = v16[2];
      v33 = v20;
      *(_OWORD *)__p = v18;
      v31 = v19;
      sub_223C72A90(v17, (uint64_t)__p);
      sub_2231813E8(v17, (uint64_t)"\nMeshing world to vision world transform:\n", 42);
      v21 = v16[5];
      *(_OWORD *)__p = v16[4];
      v31 = v21;
      v22 = v16[7];
      v32 = v16[6];
      v33 = v22;
      return sub_223C72A90(v17, (uint64_t)__p);
    }
  }
  else
  {
    sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
    *(_BYTE *)a2 = 0;
    v17 = **(uint64_t ***)(a2 + 8);
    if (*((_BYTE *)v16 + 128))
      goto LABEL_21;
  }
  return sub_2231813E8(v17, (uint64_t)"nullopt", 7);
}

void sub_223C8D928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223C8D958(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  void *__p;
  __int128 v19;
  _OWORD v20[6];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_223174EBC((char **)a2, 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1));
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    while (1)
    {
      v6 = *v4;
      v7 = v4[1];
      v8 = v7 - *v4;
      v9 = v8 >> 5;
      __p = v20;
      v19 = xmmword_2245B8EB0;
      if ((unint64_t)v8 > 0x60)
        break;
      if (v7 != v6)
        bzero(v20, v8);
      *(_QWORD *)&v19 = v9;
      if (v6 != v7)
        goto LABEL_8;
LABEL_10:
      v16 = *(_QWORD *)(a2 + 8);
      if (v16 >= *(_QWORD *)(a2 + 16))
      {
        *(_QWORD *)(a2 + 8) = sub_223175438((void **)a2, (uint64_t)&__p);
        if (*((_QWORD *)&v19 + 1))
          goto LABEL_14;
      }
      else
      {
        *(_QWORD *)v16 = v16 + 24;
        *(_OWORD *)(v16 + 8) = xmmword_2245B8EB0;
        if (v20 == __p)
        {
          sub_223175068((_QWORD *)v16, (uint64_t *)v20, (uint64_t *)&v20[2 * v19]);
          *(_QWORD *)&v19 = 0;
          *(_QWORD *)(a2 + 8) = v16 + 120;
          if (*((_QWORD *)&v19 + 1))
          {
LABEL_14:
            if (v20 != __p)
              operator delete(__p);
          }
        }
        else
        {
          *(_QWORD *)v16 = __p;
          *(_OWORD *)(v16 + 8) = v19;
          __p = 0;
          v19 = 0uLL;
          *(_QWORD *)(a2 + 8) = v16 + 120;
        }
      }
      v4 += 3;
      if (v4 == v5)
        return;
    }
    sub_223C8E2B4(&v17, &__p, (char *)v20, v9);
    v6 = *v4;
    v7 = v4[1];
    if (*v4 == v7)
      goto LABEL_10;
LABEL_8:
    v10 = 0;
    do
    {
      v11 = v6 + v10;
      v12 = *(_DWORD *)(v6 + v10 + 8);
      v13 = *(_QWORD *)(v6 + v10 + 16);
      v14 = *(_DWORD *)(v6 + v10 + 24);
      v15 = (char *)__p + v10;
      *(_QWORD *)v15 = *(_QWORD *)(v6 + v10);
      *((_DWORD *)v15 + 2) = v12;
      *((_QWORD *)v15 + 2) = v13;
      *((_DWORD *)v15 + 6) = v14;
      v10 += 32;
    }
    while (v11 + 32 != v7);
    goto LABEL_10;
  }
}

void sub_223C8DB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15)
{
  void **v15;
  void *v16;
  BOOL v18;

  if (a15)
    v18 = v16 == __p;
  else
    v18 = 1;
  if (!v18)
    operator delete(__p);
  sub_223167208(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_223C8DBC8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  int v14;
  uint64_t v15;
  int v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD *v43;
  void *__p[2];
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  void *v48;
  size_t v49[2];
  _QWORD v50[14];

  v50[12] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(float64x2_t *)(a1 + 8) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 8));
  *(float64x2_t *)(a1 + 24) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 16));
  *(float64x2_t *)(a1 + 40) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 24));
  *(float64x2_t *)(a1 + 56) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 32));
  *(float64x2_t *)(a1 + 72) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 40));
  *(float64x2_t *)(a1 + 88) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 48));
  *(float64x2_t *)(a1 + 104) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 56));
  *(float64x2_t *)(a1 + 120) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 64));
  v4 = *(uint64_t **)(a2 + 72);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v43 = (_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 160) = 0;
  v5 = v4[1] - *v4;
  if (v5)
  {
    v6 = 0xEEEEEEEEEEEEEEEFLL * (v5 >> 3);
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v7 = (char *)operator new(0x6666666666666668 * (v5 >> 3));
    *(_QWORD *)(a1 + 144) = v7;
    *(_QWORD *)(a1 + 152) = v7;
    *(_QWORD *)(a1 + 160) = &v7[24 * v6];
    v8 = *v4;
    v9 = v4[1];
    if (*v4 != v9)
    {
      do
      {
        v48 = v50;
        *(_OWORD *)v49 = xmmword_2245B8EB0;
        v10 = *(_QWORD *)(v8 + 8);
        v47 = *(uint64_t **)v8;
        v46 = &v47[4 * v10];
        sub_2231759CC(&v48, &v47, &v46);
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        if (v49[0])
        {
          sub_2231B6534((char **)__p, v49[0]);
          if (v49[0])
          {
            v11 = 0;
            v12 = (char *)v48;
            v13 = 32 * v49[0];
            do
            {
              v14 = *(_DWORD *)&v12[v11 + 8];
              v15 = *(_QWORD *)&v12[v11 + 16];
              v16 = *(_DWORD *)&v12[v11 + 24];
              v17 = (char *)__p[0] + v11;
              *(_QWORD *)v17 = *(_QWORD *)&v12[v11];
              *((_DWORD *)v17 + 2) = v14;
              *((_QWORD *)v17 + 2) = v15;
              *((_DWORD *)v17 + 6) = v16;
              v11 += 32;
            }
            while (v13 != v11);
          }
        }
        v19 = *(_QWORD **)(a1 + 152);
        v18 = *(_QWORD *)(a1 + 160);
        if ((unint64_t)v19 >= v18)
        {
          v20 = (_QWORD *)*v43;
          v21 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v19 - *v43) >> 3);
          v22 = v21 + 1;
          if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_22316E078();
          v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v20) >> 3);
          if (2 * v23 > v22)
            v22 = 2 * v23;
          if (v23 >= 0x555555555555555)
            v24 = 0xAAAAAAAAAAAAAAALL;
          else
            v24 = v22;
          if (v24)
          {
            if (v24 > 0xAAAAAAAAAAAAAAALL)
              sub_223174E94();
            v25 = (char *)operator new(24 * v24);
          }
          else
          {
            v25 = 0;
          }
          v26 = &v25[24 * v21];
          *(_OWORD *)v26 = *(_OWORD *)__p;
          *((_QWORD *)v26 + 2) = v45;
          v27 = &v25[24 * v24];
          __p[1] = 0;
          v45 = 0;
          __p[0] = 0;
          v28 = v26 + 24;
          if (v19 == v20)
          {
            *(_QWORD *)(a1 + 144) = v26;
            *(_QWORD *)(a1 + 152) = v28;
            *(_QWORD *)(a1 + 160) = v27;
          }
          else
          {
            do
            {
              v29 = v26;
              *((_QWORD *)v26 - 2) = 0;
              *((_QWORD *)v26 - 1) = 0;
              v30 = *(_OWORD *)(v19 - 3);
              v19 -= 3;
              *(_OWORD *)(v26 - 24) = v30;
              v26 -= 24;
              *((_QWORD *)v29 - 1) = v19[2];
              *v19 = 0;
              v19[1] = 0;
              v19[2] = 0;
            }
            while (v19 != v20);
            v19 = *(_QWORD **)(a1 + 144);
            v31 = *(_QWORD **)(a1 + 152);
            *(_QWORD *)(a1 + 144) = v26;
            *(_QWORD *)(a1 + 152) = v28;
            *(_QWORD *)(a1 + 160) = v27;
            if (v31 != v19)
            {
              v32 = v31;
              do
              {
                v34 = (void *)*(v32 - 3);
                v32 -= 3;
                v33 = v34;
                if (v34)
                {
                  *(v31 - 2) = v33;
                  operator delete(v33);
                }
                v31 = v32;
              }
              while (v32 != v19);
            }
          }
          if (v19)
            operator delete(v19);
          v35 = __p[0];
          *(_QWORD *)(a1 + 152) = v28;
          if (v35)
          {
            __p[1] = v35;
            operator delete(v35);
          }
        }
        else
        {
          *v19 = 0;
          v19[1] = 0;
          v19[2] = 0;
          *(_OWORD *)v19 = *(_OWORD *)__p;
          v19[2] = v45;
          __p[0] = 0;
          __p[1] = 0;
          v45 = 0;
          *(_QWORD *)(a1 + 152) = v19 + 3;
        }
        if (v49[1] && v50 != v48)
          operator delete(v48);
        v8 += 120;
      }
      while (v8 != v9);
    }
  }
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  if (*(_BYTE *)(a2 + 216))
  {
    v36 = *(_OWORD *)(a2 + 88);
    v37 = *(_OWORD *)(a2 + 104);
    v38 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 216) = v38;
    *(_OWORD *)(a1 + 168) = v36;
    *(_OWORD *)(a1 + 184) = v37;
    v39 = *(_OWORD *)(a2 + 152);
    v40 = *(_OWORD *)(a2 + 168);
    v41 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 280) = v41;
    *(_OWORD *)(a1 + 248) = v40;
    *(_OWORD *)(a1 + 232) = v39;
    *(_BYTE *)(a1 + 296) = 1;
  }
  return a1;
}

void sub_223C8DFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  char *v22;
  char *v23;
  void *v24;
  char *v25;
  void *v26;
  void *v27;

  v22 = (char *)*a10;
  if (*a10)
  {
    v23 = *(char **)(v20 + 152);
    v24 = *a10;
    if (v23 != v22)
    {
      v25 = *(char **)(v20 + 152);
      do
      {
        v27 = (void *)*((_QWORD *)v25 - 3);
        v25 -= 24;
        v26 = v27;
        if (v27)
        {
          *((_QWORD *)v23 - 2) = v26;
          operator delete(v26);
        }
        v23 = v25;
      }
      while (v25 != v22);
      v24 = *a10;
    }
    *(_QWORD *)(v20 + 152) = v22;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void sub_223C8E06C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  int32x2_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  int v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  int v25;
  __int128 v26;
  uint64_t v27;

  *(_QWORD *)a2 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_22466E054;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)algn_22466E064;
  *(_OWORD *)(a2 + 40) = xmmword_22466E074;
  *(_OWORD *)(a2 + 56) = unk_22466E084;
  v4 = (std::__shared_weak_count *)operator new(0x30uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC29190;
  v4[1].__shared_owners_ = 0;
  v4[1].__shared_weak_owners_ = 0;
  *(_QWORD *)(a2 + 72) = v4 + 1;
  *(_QWORD *)(a2 + 80) = v4;
  *(_BYTE *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 216) = 0;
  *(_QWORD *)a2 = *(_QWORD *)a1;
  v6 = *(float64x2_t *)(a1 + 120);
  v7 = *(float64x2_t *)(a1 + 104);
  v8 = *(float64x2_t *)(a1 + 88);
  v9 = *(float64x2_t *)(a1 + 72);
  v10 = *(float64x2_t *)(a1 + 56);
  v11 = (int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 40));
  *(float32x4_t *)(a2 + 8) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 8)), *(float64x2_t *)(a1 + 24));
  *(float32x4_t *)(a2 + 24) = vcvt_hight_f32_f64(v11, v10);
  *(float32x4_t *)(a2 + 40) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9), v8);
  *(float32x4_t *)(a2 + 56) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v7), v6);
  sub_223C8D958((uint64_t **)(a1 + 144), (uint64_t)&v26);
  v12 = (char *)operator new(0x30uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_24EC29190;
  v19 = v26;
  *(_OWORD *)(v12 + 24) = v26;
  *((_QWORD *)v12 + 5) = v27;
  *(_QWORD *)(a2 + 72) = v12 + 24;
  *(_QWORD *)(a2 + 80) = v12;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (v20)
  {
    v21 = *(unsigned __int8 *)(a1 + 296);
    if (*(_BYTE *)(a1 + 296))
      goto LABEL_5;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v21 = *(unsigned __int8 *)(a1 + 296);
    if (*(_BYTE *)(a1 + 296))
    {
LABEL_5:
      v23 = *(_OWORD *)(a1 + 232);
      v22 = (_OWORD *)(a1 + 232);
      v19 = v23;
      v17 = *(v22 - 2);
      v16 = *(v22 - 1);
      v24 = *(v22 - 4);
      v18 = *(v22 - 3);
      v14 = v22[2];
      v13 = v22[3];
      v15 = v22[1];
      v25 = *(unsigned __int8 *)(a2 + 216);
      if (v25 == 1)
        goto LABEL_6;
      goto LABEL_11;
    }
  }
  v24 = 0uLL;
  v25 = *(unsigned __int8 *)(a2 + 216);
  if (v25 == v21)
  {
LABEL_6:
    if (v25)
    {
      *(_OWORD *)(a2 + 88) = v24;
      *(_OWORD *)(a2 + 104) = v18;
      *(_OWORD *)(a2 + 120) = v17;
      *(_OWORD *)(a2 + 136) = v16;
      *(_OWORD *)(a2 + 152) = v19;
      *(_OWORD *)(a2 + 168) = v15;
      *(_OWORD *)(a2 + 184) = v14;
      *(_OWORD *)(a2 + 200) = v13;
    }
    return;
  }
LABEL_11:
  if (v25)
  {
    *(_BYTE *)(a2 + 216) = 0;
  }
  else
  {
    *(_OWORD *)(a2 + 88) = v24;
    *(_OWORD *)(a2 + 104) = v18;
    *(_OWORD *)(a2 + 120) = v17;
    *(_OWORD *)(a2 + 136) = v16;
    *(_OWORD *)(a2 + 152) = v19;
    *(_OWORD *)(a2 + 168) = v15;
    *(_OWORD *)(a2 + 184) = v14;
    *(_OWORD *)(a2 + 200) = v13;
    *(_BYTE *)(a2 + 216) = 1;
  }
}

void sub_223C8E284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  sub_223167208(&a9);
  sub_223C79080(v9);
  _Unwind_Resume(a1);
}

void sub_223C8E2A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223C79080(v1);
  _Unwind_Resume(a1);
}

void sub_223C8E2B4(_QWORD *a1, void **a2, char *a3, uint64_t a4)
{
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;

  v4 = 0x3FFFFFFFFFFFFFFLL;
  v5 = (char *)a2[1];
  v6 = (unint64_t)a2[2];
  if (0x3FFFFFFFFFFFFFFLL - v6 < (unint64_t)&v5[a4 - v6])
    goto LABEL_25;
  v8 = v6 >> 61;
  v9 = 8 * v6;
  if (v8 > 4)
    v10 = -1;
  else
    v10 = v9;
  v11 = v9 / 5;
  if (v8)
    v11 = v10;
  v12 = (unint64_t)&v5[a4];
  if (v11 < 0x3FFFFFFFFFFFFFFLL)
    v4 = v11;
  v13 = v12 <= v4 ? v4 : v12;
  if (v13 >> 58)
LABEL_25:
    sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
  v17 = (char *)*a2;
  v18 = (char *)operator new(32 * v13);
  v19 = v18;
  v21 = (char *)*a2;
  v20 = (char *)a2[1];
  v22 = v18;
  if (*a2 != a3)
  {
    v23 = (char *)*a2;
    v22 = v18;
    do
    {
      v24 = *(_QWORD *)v23;
      *((_DWORD *)v22 + 2) = *((_DWORD *)v23 + 2);
      *(_QWORD *)v22 = v24;
      v25 = *((_QWORD *)v23 + 2);
      *((_DWORD *)v22 + 6) = *((_DWORD *)v23 + 6);
      *((_QWORD *)v22 + 2) = v25;
      v22 += 32;
      v23 += 32;
    }
    while (v23 != a3);
  }
  v26 = &v21[32 * (_QWORD)v20];
  if (a4)
    bzero(v22, 32 * a4);
  if (v26 != a3)
  {
    v27 = &v22[32 * a4];
    v28 = a3;
    do
    {
      v29 = *(_QWORD *)v28;
      *((_DWORD *)v27 + 2) = *((_DWORD *)v28 + 2);
      *(_QWORD *)v27 = v29;
      v30 = *((_QWORD *)v28 + 2);
      *((_DWORD *)v27 + 6) = *((_DWORD *)v28 + 6);
      *((_QWORD *)v27 + 2) = v30;
      v28 += 32;
      v27 += 32;
    }
    while (v28 != v26);
  }
  if (v21 && a2 + 3 != *a2)
    operator delete(*a2);
  v31 = (char *)a2[1] + a4;
  *a2 = v19;
  a2[1] = v31;
  a2[2] = (void *)v13;
  *a1 = &v19[a3 - v17];
}

BOOL sub_223C8E448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double v4;
  double v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  _BOOL4 v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  _BOOL8 result;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;

  if (**(_QWORD **)a2 != **(_QWORD **)a3)
    return 0;
  v3 = 0;
  do
  {
    v4 = *(double *)(*(_QWORD *)(a2 + 8) + v3);
    v5 = *(double *)(*(_QWORD *)(a3 + 8) + v3);
    if (v4 != v5)
      break;
    v21 = v3 == 120;
    v3 += 8;
  }
  while (!v21);
  if (v4 != v5)
    return 0;
  v7 = *(char **)(*(_QWORD *)(a2 + 16) + 8);
  v6 = *(char **)(*(_QWORD *)(a2 + 16) + 16);
  v8 = *(_QWORD **)(*(_QWORD *)(a3 + 16) + 8);
  if (v6 - v7 != *(_QWORD *)(*(_QWORD *)(a3 + 16) + 16) - (_QWORD)v8)
    return 0;
  while (v7 != v6)
  {
    v10 = *(_QWORD *)v7;
    v9 = *((_QWORD *)v7 + 1);
    if (v9 - *(_QWORD *)v7 != v8[1] - *v8)
      return 0;
    if (v10 != v9)
    {
      v11 = *v8 + 8;
      v12 = v10 + 8;
      do
      {
        v13 = v12 - 8;
        v14 = *(float *)(v12 - 8);
        v15 = *(float *)(v11 - 8);
        v16 = v14 == v15;
        if (v14 == v15)
        {
          v17 = *(float *)(v12 - 4);
          v18 = *(float *)(v11 - 4);
          v16 = v17 == v18;
          if (v17 == v18)
            v16 = *(float *)v12 == *(float *)v11;
        }
        if (!v16 || *(double *)(v12 + 8) != *(double *)(v11 + 8) || *(_DWORD *)(v12 + 16) != *(_DWORD *)(v11 + 16))
          return 0;
        v11 += 32;
        v12 += 32;
      }
      while (v13 + 32 != v9);
    }
    v7 += 24;
    v8 += 3;
  }
  v19 = *(_QWORD *)(a2 + 24);
  v20 = *(_QWORD *)(a3 + 24);
  if (*(_BYTE *)(v19 + 128))
    v21 = *(_BYTE *)(v20 + 128) == 0;
  else
    v21 = 1;
  if (v21)
    return (*(_BYTE *)(v19 + 128) != 0) == (*(_BYTE *)(v20 + 128) != 0);
  v23 = 0;
  do
  {
    v24 = *(float *)(v19 + v23);
    v25 = *(float *)(v20 + v23);
    if (v24 != v25)
      break;
    v21 = v23 == 60;
    v23 += 4;
  }
  while (!v21);
  if (v24 != v25)
    return 0;
  v26 = 0;
  v27 = v19 + 64;
  v28 = v20 + 64;
  do
  {
    v29 = *(float *)(v27 + v26);
    v30 = *(float *)(v28 + v26);
    result = v29 == v30;
    if (v29 != v30)
      break;
    v21 = v26 == 60;
    v26 += 4;
  }
  while (!v21);
  return result;
}

uint64_t sub_223C8E608(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t *v15;

  v10 = a2;
  v11 = "{";
  v12 = a2;
  v13 = "{";
  v14 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **))off_24EC62CF0[v3])(&v15);
  sub_223208764((uint64_t)&v10, a2, a3);
  v10 = a2;
  v11 = ",";
  v12 = a2;
  v13 = ",";
  v14 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_24EC62CF0[v6])(&v15, a2);
  sub_223208764((uint64_t)&v10, a2, a3 + 1);
  v10 = a2;
  v11 = ",";
  v12 = a2;
  v13 = ",";
  v14 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_24EC62CF0[v7])(&v15, a2);
  sub_223208764((uint64_t)&v10, a2, a3 + 2);
  v10 = a2;
  v11 = "}";
  v12 = a2;
  v13 = "}";
  v14 = "}";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
LABEL_6:
    sub_22316DD70();
  v15 = &v10;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24EC62CF0[v8])(&v15, a2);
}

void **sub_223C8E758(void **a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  int64_t v5;
  unint64_t v6;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  int *v15;
  char *i;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  void *v46;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  void *__p[2];
  char *v52;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *a2;
  v3 = a2[1];
  v5 = (char *)v3 - (char *)*a2;
  if (v3 != *a2)
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 3);
    if (v6 > 0x666666666666666)
      sub_22316E078();
    v8 = (char *)operator new(v5);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[40 * v6];
    v4 = *a2;
    v3 = a2[1];
  }
  if (v4 != v3)
  {
    v48 = v3;
    while (1)
    {
      v49 = *v4;
      v50 = *((_DWORD *)v4 + 2);
      v52 = 0;
      *(_OWORD *)__p = 0uLL;
      v11 = v4[2];
      v10 = v4[3];
      v12 = v10 - v11;
      if (v10 != v11)
        break;
      i = 0;
LABEL_32:
      v31 = (char *)a1[1];
      v30 = (unint64_t)a1[2];
      if ((unint64_t)v31 < v30)
      {
        v9 = v48;
        *((_DWORD *)v31 + 2) = v50;
        *(_QWORD *)v31 = v49;
        *((_QWORD *)v31 + 3) = 0;
        *((_QWORD *)v31 + 4) = 0;
        *((_QWORD *)v31 + 2) = 0;
        *((_OWORD *)v31 + 1) = *(_OWORD *)__p;
        *((_QWORD *)v31 + 4) = v52;
        a1[1] = v31 + 40;
      }
      else
      {
        v32 = (char *)*a1;
        v33 = 0xCCCCCCCCCCCCCCCDLL * ((v31 - (_BYTE *)*a1) >> 3);
        v34 = v33 + 1;
        if (v33 + 1 > 0x666666666666666)
          sub_22316E078();
        v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v30 - (_QWORD)v32) >> 3);
        if (2 * v35 > v34)
          v34 = 2 * v35;
        if (v35 >= 0x333333333333333)
          v36 = 0x666666666666666;
        else
          v36 = v34;
        if (v36 > 0x666666666666666)
          sub_223174E94();
        v37 = (char *)operator new(40 * v36);
        v38 = &v37[40 * v33];
        *(_QWORD *)v38 = v49;
        v39 = &v37[40 * v36];
        *((_DWORD *)v38 + 2) = v50;
        *((void **)v38 + 2) = __p[0];
        *((_QWORD *)v38 + 3) = i;
        *((_QWORD *)v38 + 4) = v52;
        v40 = v38 + 40;
        if (v31 == v32)
        {
          *a1 = v38;
          a1[1] = v40;
          a1[2] = v39;
          v9 = v48;
        }
        else
        {
          v41 = 0;
          v9 = v48;
          do
          {
            v42 = &v38[v41];
            v43 = &v31[v41];
            v44 = *(_QWORD *)&v31[v41 - 40];
            *((_DWORD *)v42 - 8) = *(_DWORD *)&v31[v41 - 32];
            *((_QWORD *)v42 - 5) = v44;
            *(_OWORD *)(v42 - 24) = *(_OWORD *)&v31[v41 - 24];
            *((_QWORD *)v42 - 1) = *(_QWORD *)&v31[v41 - 8];
            *((_QWORD *)v43 - 3) = 0;
            *((_QWORD *)v43 - 2) = 0;
            *((_QWORD *)v43 - 1) = 0;
            v41 -= 40;
          }
          while (&v31[v41] != v32);
          v31 = (char *)*a1;
          v45 = (char *)a1[1];
          *a1 = &v38[v41];
          a1[1] = v40;
          a1[2] = v39;
          while (v45 != v31)
          {
            v46 = (void *)*((_QWORD *)v45 - 3);
            if (v46)
            {
              *((_QWORD *)v45 - 2) = v46;
              operator delete(v46);
            }
            v45 -= 40;
          }
        }
        if (v31)
          operator delete(v31);
        a1[1] = v40;
      }
      v4 += 5;
      if (v4 == v9)
        return a1;
    }
    if (v12 < 0)
      sub_22316E078();
    v13 = (char *)operator new(v10 - v11);
    __p[0] = v13;
    __p[1] = v13;
    v52 = &v13[32 * (v12 >> 5)];
    v15 = (int *)v4[2];
    v14 = (int *)v4[3];
    for (i = v13; ; v13 = i)
    {
      if (v15 == v14)
        goto LABEL_32;
      v18 = *v15;
      v17 = v15[1];
      v19 = v15[2];
      v20 = *((_QWORD *)v15 + 2);
      v21 = v15[6];
      if (v13 < v52)
      {
        *(_DWORD *)v13 = v18;
        *((_DWORD *)v13 + 1) = v17;
        *((_DWORD *)v13 + 2) = v19;
        *((_QWORD *)v13 + 2) = v20;
        i = v13 + 32;
        *((_DWORD *)v13 + 6) = v21;
        goto LABEL_12;
      }
      v22 = (char *)__p[0];
      v23 = (v13 - (char *)__p[0]) >> 5;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 59)
        sub_22316E078();
      v25 = v52 - (char *)__p[0];
      if ((v52 - (char *)__p[0]) >> 4 > v24)
        v24 = v25 >> 4;
      v26 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v24;
      if (v26)
      {
        if (v26 >> 59)
          sub_223174E94();
        v27 = (char *)operator new(32 * v26);
      }
      else
      {
        v27 = 0;
      }
      v28 = &v27[32 * v23];
      *(_DWORD *)v28 = v18;
      *((_DWORD *)v28 + 1) = v17;
      *((_DWORD *)v28 + 2) = v19;
      *((_QWORD *)v28 + 2) = v20;
      *((_DWORD *)v28 + 6) = v21;
      i = v28 + 32;
      if (v13 == __p[0])
        break;
      do
      {
        v29 = *((_OWORD *)v13 - 2);
        *(_OWORD *)(v28 - 20) = *(_OWORD *)(v13 - 20);
        *((_OWORD *)v28 - 2) = v29;
        v28 -= 32;
        v13 -= 32;
      }
      while (v13 != __p[0]);
      __p[0] = v28;
      v52 = &v27[32 * v26];
      if (v22)
        goto LABEL_30;
LABEL_12:
      __p[1] = i;
      v15 += 8;
    }
    __p[0] = v28;
    v52 = &v27[32 * v26];
    v22 = v13;
LABEL_30:
    operator delete(v22);
    goto LABEL_12;
  }
  return a1;
}

void sub_223C8EB4C(_Unwind_Exception *a1)
{
  void **v1;

  sub_22319A750(v1);
  _Unwind_Resume(a1);
}

void sub_223C8EB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void **v13;

  if (__p)
    operator delete(__p);
  sub_22319A750(v13);
  _Unwind_Resume(a1);
}

double sub_223C8EBA8@<D0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  uint64_t *v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  void *__p[2];
  char *v35;
  char *v36;
  char *v37;
  char *v38;

  v3 = a1[1] - *a1;
  v31 = 0;
  v30 = 0uLL;
  sub_22380992C((uint64_t)&v30, 0xCCCCCCCCCCCCCCCDLL * v3);
  v4 = *a1;
  v28 = a1[1];
  if (*a1 != v28)
  {
    while (1)
    {
      __p[0] = 0;
      __p[1] = 0;
      v35 = 0;
      v6 = *v4;
      v33 = *((_DWORD *)v4 + 2);
      v32 = v6;
      v7 = v4[2];
      v8 = v4[3];
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v9 = v8 - v7;
      if (v8 != v7)
        break;
      __p[0] = 0;
      __p[1] = 0;
      v35 = 0;
      v25 = *((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1) < v31)
        goto LABEL_3;
LABEL_27:
      *((_QWORD *)&v30 + 1) = sub_223809A4C((void **)&v30, (uint64_t)&v32);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
LABEL_4:
      v4 += 5;
      if (v4 == v28)
        goto LABEL_29;
    }
    if (v9 < 0)
      sub_22316E078();
    v10 = (char *)operator new(v8 - v7);
    v36 = v10;
    v37 = v10;
    v38 = &v10[32 * (v9 >> 5)];
    while (1)
    {
      while (1)
      {
        while (1)
        {
          *(_QWORD *)&v11 = *(_QWORD *)v7;
          DWORD2(v11) = *(_DWORD *)(v7 + 8);
          v12 = *(_QWORD *)(v7 + 16);
          v13 = *(_DWORD *)(v7 + 24);
          if (v10 >= v38)
            break;
          *((_DWORD *)v10 + 2) = DWORD2(v11);
          *(_QWORD *)v10 = v11;
          *((_QWORD *)v10 + 2) = v12;
          *((_DWORD *)v10 + 6) = v13;
          v10 += 32;
          v37 = v10;
          v7 += 32;
          if (v7 == v8)
            goto LABEL_24;
        }
        v14 = v36;
        v15 = (v10 - v36) >> 5;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 59)
          sub_22316E078();
        v17 = v38 - v36;
        if ((v38 - v36) >> 4 > v16)
          v16 = v17 >> 4;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
          v18 = 0x7FFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18 >> 59)
          sub_223174E94();
        v29 = v11;
        v19 = (char *)operator new(32 * v18);
        v20 = &v19[32 * v15];
        HIDWORD(v11) = HIDWORD(v29);
        *((_DWORD *)v20 + 2) = DWORD2(v29);
        *(_QWORD *)v20 = v29;
        *((_QWORD *)v20 + 2) = v12;
        *((_DWORD *)v20 + 6) = v13;
        v21 = v20 + 32;
        if (v10 != v14)
          break;
        v36 = &v19[32 * v15];
        v38 = &v19[32 * v18];
        v14 = v10;
LABEL_23:
        operator delete(v14);
        v10 = v21;
        v37 = v21;
        v7 += 32;
        if (v7 == v8)
        {
LABEL_24:
          __p[0] = v36;
          __p[1] = v10;
          v35 = v38;
          v25 = *((_QWORD *)&v30 + 1);
          if (*((_QWORD *)&v30 + 1) >= v31)
            goto LABEL_27;
LABEL_3:
          v5 = v32;
          *(_DWORD *)(v25 + 8) = v33;
          *(_QWORD *)v25 = v5;
          *(_QWORD *)(v25 + 24) = 0;
          *(_QWORD *)(v25 + 32) = 0;
          *(_QWORD *)(v25 + 16) = 0;
          *(_OWORD *)(v25 + 16) = *(_OWORD *)__p;
          *(_QWORD *)(v25 + 32) = v35;
          *((_QWORD *)&v30 + 1) = v25 + 40;
          goto LABEL_4;
        }
      }
      do
      {
        v22 = *((_QWORD *)v10 - 4);
        v10 -= 32;
        v23 = *((_DWORD *)v10 + 2);
        *((_QWORD *)v20 - 4) = v22;
        v20 -= 32;
        *((_DWORD *)v20 + 2) = v23;
        v24 = *((_QWORD *)v10 + 2);
        *((_DWORD *)v20 + 6) = *((_DWORD *)v10 + 6);
        *((_QWORD *)v20 + 2) = v24;
      }
      while (v10 != v14);
      v36 = v20;
      v38 = &v19[32 * v18];
      if (v14)
        goto LABEL_23;
      v10 = v21;
      v37 = v21;
      v7 += 32;
      if (v7 == v8)
        goto LABEL_24;
    }
  }
LABEL_29:
  result = *(double *)&v30;
  *(_OWORD *)a2 = v30;
  *(_QWORD *)(a2 + 16) = v31;
  return result;
}

void sub_223C8EEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  char *v27;
  char *v28;
  void *v29;

  if (__p)
  {
    v27 = a16;
    v28 = __p;
    if (a16 != __p)
    {
      do
      {
        v29 = (void *)*((_QWORD *)v27 - 3);
        if (v29)
        {
          *((_QWORD *)v27 - 2) = v29;
          operator delete(v29);
        }
        v27 -= 40;
      }
      while (v27 != __p);
      v28 = __p;
    }
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223C8EF84(_QWORD *result, _BYTE *a2)
{
  const char *v2;
  uint64_t v3;

  switch(*a2)
  {
    case 0:
      v2 = "{ KeyVolEventKeyframeCreated }";
      v3 = 30;
      goto LABEL_3;
    case 1:
      v2 = "{ KeyVolEventContentUpdate }";
      v3 = 28;
      goto LABEL_3;
    case 2:
      v2 = "{ KeyVolEventPersistence }";
      v3 = 26;
      goto LABEL_3;
    case 3:
      v2 = "{ KeyVolEventLoopClosure }";
      v3 = 26;
      goto LABEL_3;
    case 4:
      v2 = "{ KeyVolEventAnchorExternal }";
      v3 = 29;
      goto LABEL_3;
    case 5:
      v2 = "{ KeyVolEventKeyframeDeleted }";
      v3 = 30;
      goto LABEL_3;
    case 6:
      v2 = "{ KeyVolEventNoUpdate }";
      v3 = 23;
LABEL_3:
      result = sub_2231813E8(result, (uint64_t)v2, v3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_223C8F01C(int a1)
{
  uint64_t result;
  std::string *v3;
  std::string::size_type size;
  std::string v5;
  char v6;

  v6 = a1;
  result = 0;
  switch(a1)
  {
    case 0:
      result = 6;
      break;
    case 4:
    case 12:
      result = 3;
      break;
    case 6:
    case 14:
      result = 2;
      break;
    case 8:
      result = 1;
      break;
    case 9:
      return result;
    case 16:
      result = 4;
      break;
    case 32:
      result = 5;
      break;
    default:
      sub_223C8F150("Unidentified state ", &v6);
      if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v3 = &v5;
      else
        v3 = (std::string *)v5.__r_.__value_.__r.__words[0];
      if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v5.__r_.__value_.__r.__words[2]);
      else
        size = v5.__r_.__value_.__l.__size_;
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyVolInterface.cpp", 92, (uint64_t)"", 0, (uint64_t)v3, size, (void (*)(void **))sub_22457406C);
      std::string::~string(&v5);
      abort();
  }
  return result;
}

void sub_223C8F134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223C8F150(char *__s, char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  char v6;
  char *v7;

  v5 = 0;
  sub_223C8F630(v4, __s);
  sub_22356F9F4((uint64_t)&v7, (uint64_t)v4, a2);
  if (v5 == -1)
    sub_22316DD70();
  v7 = &v6;
  result = ((uint64_t (*)(char **, _DWORD *))off_24EC62D20[v5])(&v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(char **, _DWORD *))off_24EC62D08[v5])(&v7, v4);
  return result;
}

void sub_223C8F1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223C8F20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223C8F220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223C8F234(int a1, int a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t result;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x24BDAC8D0];
  v3 = sub_223C8F01C(a1);
  v4 = sub_223C8F01C(a2);
  v6[0] = 0x1010101010101;
  if (!*((_BYTE *)v6 + v3)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyVolInterface.cpp", 178, (uint64_t)"IsValidEvent(cur_ev)", 20, (uint64_t)"Not a legitimate current event", 30, (void (*)(void **))sub_22457406C)|| (v6[0] = 0x1010101010101, !*((_BYTE *)v6 + v4))&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyVolInterface.cpp", 179, (uint64_t)"IsValidEvent(in_ev)", 19, (uint64_t)"Not a legitimate in event", 25, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (byte_22466E0BC[8 * v3 - v3 + v4] == 7)
    return 0;
  if (v3 != 5)
    return 2;
  result = 1;
  if ((v4 & 5) != 1 && (v4 & 6) != 4 && v4 && v4 != 2)
    return 2;
  return result;
}

uint64_t sub_223C8F394(int a1, int a2)
{
  int v3;
  int v4;
  uint64_t v5;
  std::string *v7;
  std::string::size_type size;
  std::string v9;
  char v10;
  char v11;

  v3 = sub_223C8F01C(a1);
  v11 = v3;
  v4 = sub_223C8F01C(a2);
  v10 = v4;
  v5 = byte_22466E0BC[8 * v3 - v3 + v4];
  if ((_DWORD)v5 == 7)
  {
    sub_223C8F4B8("⛔️⛔️⛔️ Invalid result current event = ", &v11, (uint64_t)" in event = ", &v10);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v9;
    else
      v7 = (std::string *)v9.__r_.__value_.__r.__words[0];
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    else
      size = v9.__r_.__value_.__l.__size_;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyVolInterface.cpp", 202, (uint64_t)"", 0, (uint64_t)v7, size, (void (*)(void **))sub_22457406C);
    std::string::~string(&v9);
LABEL_12:
    abort();
  }
  if (v5 >= 7
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyVolInterface.cpp", 213, (uint64_t)"result_ev < kTable.size()", 25, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_12;
  }
  return byte_22466E0ED[v5];
}

void sub_223C8F49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223C8F4B8(char *__s, _BYTE *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;
  char v8;
  _DWORD v9[6];
  int v10;
  _QWORD v11[5];
  _QWORD *v12;

  v10 = 0;
  sub_223C8F720(v9, __s);
  sub_223AB73E8((uint64_t)&v8, (uint64_t)v9, a2);
  v11[0] = v9;
  v11[1] = a3;
  v11[2] = v9;
  v11[3] = a3;
  v11[4] = a3;
  if (v10 == -1)
    sub_22316DD70();
  v12 = v11;
  ((void (*)(_QWORD **, _DWORD *))off_24EC62D38[v10])(&v12, v9);
  sub_223AB73E8((uint64_t)v11, (uint64_t)v9, a4);
  if (v10 == -1)
    sub_22316DD70();
  v11[0] = &v12;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC62D20[v10])(v11, v9);
  if (v10 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC62D08[v10])(v11, v9);
  return result;
}

void sub_223C8F5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223C8F5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223C8F5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223C8F608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223C8F61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_223C8F630(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC62D08[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_223C8F720(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC62D08[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_223C8F810(uint64_t **a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned __int8 *v33;
  BOOL v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t *v38;
  uint64_t **v39;
  unsigned __int8 *v40;
  uint64_t **v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned __int8 *v45;
  BOOL v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  size_t v58;
  const char *v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  const char *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  const char *v68;
  size_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  size_t v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  char *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count_vtbl *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *on_zero_shared_weak;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *on_zero_shared;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  int v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  int v122;
  int v123;
  void *v124;
  int v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unsigned __int8 *v130;
  uint64_t *v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  size_t v138;
  uint64_t v139;
  unsigned __int8 v140;
  const char *v141;
  size_t v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  NSObject *v149;
  size_t v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  char *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count_vtbl *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  int v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  uint64_t v172;
  __int128 v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  int v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  int v195;
  int v196;
  void *v197;
  int v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  unsigned __int8 *v203;
  uint64_t v204;
  const char *v205;
  size_t v206;
  _BYTE *v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE *v210;
  uint64_t v211;
  uint64_t v212;
  NSObject *v213;
  size_t v214;
  std::__shared_weak_count_vtbl *v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  char *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count_vtbl *v227;
  char *v228;
  char *v229;
  uint64_t v230;
  int v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  __int128 v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count_vtbl *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  int v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  int v259;
  int v260;
  void *v261;
  int v262;
  uint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t *v273;
  const char *__src;
  const char *__srca;
  const char *__srcb;
  int v277;
  int v278;
  int v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unsigned __int8 *v283;
  uint64_t **v284;
  unsigned __int8 *v285;
  unsigned __int8 **v286;
  char *v287;
  uint64_t *v288;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v290;
  int v291;
  const char *v292;
  int v293;
  const char *v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  uint64_t v297;
  uint64_t **v298;
  uint64_t *v299;
  uint64_t v300;
  char v301[8];
  _QWORD *v302[2];
  std::__shared_weak_count_vtbl *v303;
  std::__shared_weak_count_vtbl *v304;
  std::__shared_weak_count *v305;
  char *v306;
  char *v307;
  char v308[37];
  char __s[37];
  _BYTE v310[56];
  unint64_t v311;
  char v312;
  std::__shared_weak_count_vtbl *v313;
  __int128 v314;
  __int128 v315;
  char *v316;
  uint64_t v317;

  v317 = *MEMORY[0x24BDAC8D0];
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  v5 = *a2;
  v286 = a2;
  v6 = a2[1];
  if (v5 == v6 || *a3 == a3[1])
    return;
  v7 = a1;
  sub_223C91D90((uint64_t)v301, v5, v6, (uint64_t)a3);
  v299 = 0;
  v300 = 0;
  v298 = &v299;
  v9 = *v286;
  v8 = v286[1];
  if (*v286 == v8)
    goto LABEL_73;
  v10 = v302[0];
  if (!v302[0])
    goto LABEL_73;
  v11 = 0;
LABEL_7:
  v12 = *v9;
  while (1)
  {
    v13 = *((unsigned __int8 *)v10 + 25);
    v14 = v12 >= v13;
    if (v12 != v13)
    {
      v15 = *v9;
LABEL_40:
      if (!v14)
        goto LABEL_8;
      goto LABEL_42;
    }
    v15 = v9[1];
    v13 = *((unsigned __int8 *)v10 + 26);
    v14 = v15 >= v13;
    if (v15 != v13)
      goto LABEL_40;
    v15 = v9[2];
    v13 = *((unsigned __int8 *)v10 + 27);
    v14 = v15 >= v13;
    if (v15 != v13)
      goto LABEL_40;
    v15 = v9[3];
    v13 = *((unsigned __int8 *)v10 + 28);
    v14 = v15 >= v13;
    if (v15 != v13)
      goto LABEL_40;
    v16 = v9[4];
    v17 = *((unsigned __int8 *)v10 + 29);
    if (v16 != v17)
      goto LABEL_25;
    v16 = v9[5];
    v17 = *((unsigned __int8 *)v10 + 30);
    if (v16 != v17)
      goto LABEL_25;
    v16 = v9[6];
    v17 = *((unsigned __int8 *)v10 + 31);
    if (v16 != v17)
      goto LABEL_25;
    v16 = v9[7];
    v17 = *((unsigned __int8 *)v10 + 32);
    if (v16 != v17)
      goto LABEL_25;
    v16 = v9[8];
    v17 = *((unsigned __int8 *)v10 + 33);
    if (v16 != v17)
      goto LABEL_25;
    v16 = v9[9];
    v17 = *((unsigned __int8 *)v10 + 34);
    if (v16 != v17)
      goto LABEL_25;
    v16 = v9[10];
    v17 = *((unsigned __int8 *)v10 + 35);
    if (v16 != v17)
      goto LABEL_25;
    v16 = v9[11];
    v17 = *((unsigned __int8 *)v10 + 36);
    if (v16 != v17)
      goto LABEL_25;
    v16 = v9[12];
    v17 = *((unsigned __int8 *)v10 + 37);
    if (v16 != v17
      || (v16 = v9[13], v17 = *((unsigned __int8 *)v10 + 38), v16 != v17)
      || (v16 = v9[14], v17 = *((unsigned __int8 *)v10 + 39), v16 != v17)
      || (v16 = v9[15], v17 = *((unsigned __int8 *)v10 + 40), v16 != v17))
    {
LABEL_25:
      if (v16 < v17)
        goto LABEL_8;
    }
    v13 = *((unsigned __int8 *)v10 + 29);
    v15 = v9[4];
    if (v13 == v15)
    {
      v13 = *((unsigned __int8 *)v10 + 30);
      v15 = v9[5];
      if (v13 == v15)
      {
        v13 = *((unsigned __int8 *)v10 + 31);
        v15 = v9[6];
        if (v13 == v15)
        {
          v13 = *((unsigned __int8 *)v10 + 32);
          v15 = v9[7];
          if (v13 == v15)
          {
            v13 = *((unsigned __int8 *)v10 + 33);
            v15 = v9[8];
            if (v13 == v15)
            {
              v13 = *((unsigned __int8 *)v10 + 34);
              v15 = v9[9];
              if (v13 == v15)
              {
                v13 = *((unsigned __int8 *)v10 + 35);
                v15 = v9[10];
                if (v13 == v15)
                {
                  v13 = *((unsigned __int8 *)v10 + 36);
                  v15 = v9[11];
                  if (v13 == v15)
                  {
                    v13 = *((unsigned __int8 *)v10 + 37);
                    v15 = v9[12];
                    if (v13 == v15)
                    {
                      v13 = *((unsigned __int8 *)v10 + 38);
                      v15 = v9[13];
                      if (v13 == v15)
                      {
                        v13 = *((unsigned __int8 *)v10 + 39);
                        v15 = v9[14];
                        if (v13 == v15)
                        {
                          v13 = *((unsigned __int8 *)v10 + 40);
                          v15 = v9[15];
                          if (v13 == v15)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_42:
    if (v13 >= v15)
      break;
    ++v10;
LABEL_8:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_72;
  }
  v18 = v299;
  v19 = &v299;
  v20 = &v299;
  if (v299)
  {
    v19 = &v299;
    while (1)
    {
      while (1)
      {
        v20 = (uint64_t **)v18;
        v21 = *((unsigned __int8 *)v18 + 28);
        v22 = v12;
        if (v12 == v21)
        {
          v22 = v9[1];
          v21 = *((unsigned __int8 *)v20 + 29);
          if (v22 == v21)
          {
            v22 = v9[2];
            v21 = *((unsigned __int8 *)v20 + 30);
            if (v22 == v21)
            {
              v22 = v9[3];
              v21 = *((unsigned __int8 *)v20 + 31);
              if (v22 == v21)
              {
                v22 = v9[4];
                v21 = *((unsigned __int8 *)v20 + 32);
                if (v22 == v21)
                {
                  v22 = v9[5];
                  v21 = *((unsigned __int8 *)v20 + 33);
                  if (v22 == v21)
                  {
                    v22 = v9[6];
                    v21 = *((unsigned __int8 *)v20 + 34);
                    if (v22 == v21)
                    {
                      v22 = v9[7];
                      v21 = *((unsigned __int8 *)v20 + 35);
                      if (v22 == v21)
                      {
                        v22 = v9[8];
                        v21 = *((unsigned __int8 *)v20 + 36);
                        if (v22 == v21)
                        {
                          v22 = v9[9];
                          v21 = *((unsigned __int8 *)v20 + 37);
                          if (v22 == v21)
                          {
                            v22 = v9[10];
                            v21 = *((unsigned __int8 *)v20 + 38);
                            if (v22 == v21)
                            {
                              v22 = v9[11];
                              v21 = *((unsigned __int8 *)v20 + 39);
                              if (v22 == v21)
                              {
                                v22 = v9[12];
                                v21 = *((unsigned __int8 *)v20 + 40);
                                if (v22 == v21)
                                {
                                  v22 = v9[13];
                                  v21 = *((unsigned __int8 *)v20 + 41);
                                  if (v22 == v21)
                                  {
                                    v22 = v9[14];
                                    v21 = *((unsigned __int8 *)v20 + 42);
                                    if (v22 == v21)
                                    {
                                      v22 = v9[15];
                                      v21 = *((unsigned __int8 *)v20 + 43);
                                      if (v22 == v21)
                                        break;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v22 >= v21)
          break;
        v18 = *v20;
        v19 = v20;
        if (!*v20)
          goto LABEL_69;
      }
      if (((char)sub_22319835C((unsigned __int8 *)v20 + 28, v9) & 0x80000000) == 0)
        break;
      v19 = v20 + 1;
      v18 = v20[1];
      if (!v18)
        goto LABEL_69;
      v12 = *v9;
    }
    if (*v19)
      goto LABEL_72;
  }
LABEL_69:
  v23 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v23 + 28) = *(_OWORD *)v9;
  *((_DWORD *)v23 + 11) = v11;
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = v20;
  *v19 = (uint64_t *)v23;
  if (*v298)
  {
    v298 = (uint64_t **)*v298;
    v23 = (char *)*v19;
  }
  sub_2231A9A8C(v299, (uint64_t *)v23);
  ++v300;
LABEL_72:
  while (1)
  {
    v9 += 232;
    if (v9 == v8)
      break;
    ++v11;
    v10 = v302[0];
    if (v302[0])
      goto LABEL_7;
  }
LABEL_73:
  v24 = *a3;
  v25 = a3[1];
  if (v24 != v25)
  {
    v26 = (unsigned __int8 *)v302[0];
    if (v302[0])
    {
      v283 = v25;
      v284 = v7;
LABEL_77:
      v27 = (unsigned __int8 *)v302;
      do
      {
        v28 = v26;
        v29 = v27;
        v30 = v26[25];
        v31 = *v24;
        if (v30 != v31)
          goto LABEL_95;
        v30 = v28[26];
        v31 = v24[1];
        if (v30 != v31)
          goto LABEL_95;
        v30 = v28[27];
        v31 = v24[2];
        if (v30 != v31)
          goto LABEL_95;
        v30 = v28[28];
        v31 = v24[3];
        if (v30 != v31)
          goto LABEL_95;
        v30 = v28[29];
        v31 = v24[4];
        if (v30 != v31)
          goto LABEL_95;
        v30 = v28[30];
        v31 = v24[5];
        if (v30 != v31)
          goto LABEL_95;
        v30 = v28[31];
        v31 = v24[6];
        if (v30 != v31)
          goto LABEL_95;
        v30 = v28[32];
        v31 = v24[7];
        if (v30 != v31)
          goto LABEL_95;
        v30 = v28[33];
        v31 = v24[8];
        if (v30 != v31)
          goto LABEL_95;
        v30 = v28[34];
        v31 = v24[9];
        if (v30 != v31)
          goto LABEL_95;
        v30 = v28[35];
        v31 = v24[10];
        if (v30 != v31)
          goto LABEL_95;
        v30 = v28[36];
        v31 = v24[11];
        if (v30 != v31)
          goto LABEL_95;
        v30 = v28[37];
        v31 = v24[12];
        if (v30 != v31)
          goto LABEL_95;
        v30 = v28[38];
        v31 = v24[13];
        if (v30 == v31 && (v30 = v28[39], v31 = v24[14], v30 == v31) && (v30 = v28[40], v31 = v24[15], v30 == v31))
        {
          v32 = 0;
          v33 = v28;
          v27 = v28;
        }
        else
        {
LABEL_95:
          v34 = v30 >= v31;
          v33 = v28 + 8;
          if (v34)
          {
            v33 = v28;
            v32 = 0;
          }
          else
          {
            v32 = 1;
          }
          if (v34)
            v27 = v28;
        }
        v26 = *(unsigned __int8 **)v33;
      }
      while (v26);
      if (v27 != (unsigned __int8 *)v302)
      {
        v35 = v28 + 25;
        v36 = v29 + 25;
        v37 = v32 ? v36 : v35;
        if (((char)sub_22319835C(v24, v37) & 0x80000000) == 0)
        {
          v38 = v299;
          if (!v299)
            goto LABEL_139;
          v39 = &v299;
          do
          {
            v40 = (unsigned __int8 *)v38;
            v41 = v39;
            v42 = *((unsigned __int8 *)v38 + 28);
            v43 = *v24;
            if (v42 != v43)
              goto LABEL_125;
            v42 = v40[29];
            v43 = v24[1];
            if (v42 != v43)
              goto LABEL_125;
            v42 = v40[30];
            v43 = v24[2];
            if (v42 != v43)
              goto LABEL_125;
            v42 = v40[31];
            v43 = v24[3];
            if (v42 != v43)
              goto LABEL_125;
            v42 = v40[32];
            v43 = v24[4];
            if (v42 != v43)
              goto LABEL_125;
            v42 = v40[33];
            v43 = v24[5];
            if (v42 != v43)
              goto LABEL_125;
            v42 = v40[34];
            v43 = v24[6];
            if (v42 != v43)
              goto LABEL_125;
            v42 = v40[35];
            v43 = v24[7];
            if (v42 != v43)
              goto LABEL_125;
            v42 = v40[36];
            v43 = v24[8];
            if (v42 != v43)
              goto LABEL_125;
            v42 = v40[37];
            v43 = v24[9];
            if (v42 != v43)
              goto LABEL_125;
            v42 = v40[38];
            v43 = v24[10];
            if (v42 != v43)
              goto LABEL_125;
            v42 = v40[39];
            v43 = v24[11];
            if (v42 != v43)
              goto LABEL_125;
            v42 = v40[40];
            v43 = v24[12];
            if (v42 != v43)
              goto LABEL_125;
            v42 = v40[41];
            v43 = v24[13];
            if (v42 == v43 && (v42 = v40[42], v43 = v24[14], v42 == v43) && (v42 = v40[43], v43 = v24[15], v42 == v43))
            {
              v44 = 0;
              v45 = v40;
              v39 = (uint64_t **)v40;
            }
            else
            {
LABEL_125:
              v46 = v42 >= v43;
              if (v42 < v43)
                v45 = v40 + 8;
              else
                v45 = v40;
              v44 = !v46;
              if (v46)
                v39 = (uint64_t **)v40;
            }
            v38 = *(uint64_t **)v45;
          }
          while (v38);
          if (v39 == &v299
            || ((v47 = v40 + 28, v48 = (unsigned __int8 *)v41 + 28, !v44) ? (v49 = v47) : (v49 = v48),
                (char)sub_22319835C(v24, v49) < 0))
          {
LABEL_139:
            v39 = &v299;
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyframeBacklogger.cpp", 63, (uint64_t)"iter != pending_kf_uuid_to_idx.end()", 36, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
          }
          v50 = *((_DWORD *)v39 + 11);
          v51 = *v286;
          v285 = &(*v286)[232 * v50];
          v52 = v285 + 16;
          v53 = sub_223C8F234(v285[16], v24[240]);
          if (v53 != 1)
          {
            if (v53)
              goto LABEL_251;
            sub_223C91FE4(&v297);
            if (**(int **)(v297 + 56) > 3)
              goto LABEL_250;
            v54 = *(unsigned __int8 *)(v297 + 72);
            v55 = sub_22322F254(v297, "OSLogSurrogateAppender", 1, 0);
            if (!v54 && !v55)
              goto LABEL_250;
            v280 = v55;
            v288 = &v297;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v290 = std::chrono::system_clock::now().__d_.__rep_;
            v291 = 3;
            v292 = "unknown file";
            v293 = 77;
            v294 = "unknown function";
            v295 = 0;
            v296 = 0;
            sub_2245664AC(v24, __s);
            v56 = *((_QWORD *)v24 + 13);
            sub_2245664AC(v285, v308);
            v287 = v308;
            v57 = *v288;
            if (*(char *)(*v288 + 39) < 0)
            {
              v59 = *(const char **)(v57 + 16);
              v58 = *(_QWORD *)(v57 + 24);
            }
            else
            {
              v58 = *(unsigned __int8 *)(*v288 + 39);
              v59 = (const char *)(*v288 + 16);
            }
            v267 = *v288;
            v269 = *v288 + 16;
            v66 = &v51[232 * v50];
            v67 = *((_QWORD *)v66 + 3);
            v271 = (uint64_t *)(v66 + 24);
            LOBYTE(v66) = atomic_load((unsigned __int8 *)&qword_255788F58);
            v277 = v54;
            if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)&v313);
              sub_223199C58("com.apple.cv3d", (unint64_t)&v313, byte_255788F40);
              if ((_BYTE)v315 && SHIBYTE(v314) < 0)
                operator delete(v313);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
            if (byte_255788F40[23] >= 0)
              v68 = byte_255788F40;
            else
              v68 = *(const char **)byte_255788F40;
            if (byte_255788F40[23] >= 0)
              v69 = byte_255788F40[23];
            else
              v69 = *(_QWORD *)&byte_255788F40[8];
            *(_QWORD *)v310 = os_log_create(v68, v59);
            if (v69 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            __src = v59;
            if (v69 >= 0x17)
            {
              v71 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v69 | 7) != 0x17)
                v71 = v69 | 7;
              v72 = v71 + 1;
              v70 = operator new(v71 + 1);
              *(_QWORD *)&v310[16] = v69;
              *(_QWORD *)&v310[24] = v72 | 0x8000000000000000;
              *(_QWORD *)&v310[8] = v70;
            }
            else
            {
              v310[31] = v69;
              v70 = &v310[8];
              if (!v69)
              {
LABEL_168:
                v70[v69] = 0;
                v310[32] = 1;
                if (v58 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                if (v58 >= 0x17)
                {
                  v74 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v58 | 7) != 0x17)
                    v74 = v58 | 7;
                  v75 = v74 + 1;
                  v73 = operator new(v74 + 1);
                  *(_QWORD *)&v310[48] = v58;
                  v311 = v75 | 0x8000000000000000;
                  *(_QWORD *)&v310[40] = v73;
                }
                else
                {
                  HIBYTE(v311) = v58;
                  v73 = &v310[40];
                  if (!v58)
                  {
LABEL_176:
                    v73[v58] = 0;
                    v312 = 1;
                    v76 = *(NSObject **)v310;
                    if (SHIBYTE(v311) < 0)
                      operator delete(*(void **)&v310[40]);
                    if (v310[32] && (v310[31] & 0x80000000) != 0)
                      operator delete(*(void **)&v310[8]);
                    if (*(_QWORD *)v310)
                      os_release(*(void **)v310);
                    if (v280 && *(_QWORD *)(v280 + 24))
                    {
                      v77 = _os_log_pack_size();
                      v78 = (std::__shared_weak_count_vtbl *)operator new(v77, (std::align_val_t)8uLL);
                      v79 = (std::__shared_weak_count *)operator new();
                      v79->__shared_owners_ = 0;
                      p_shared_owners = (unint64_t *)&v79->__shared_owners_;
                      v79->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                      v79->__shared_weak_owners_ = 0;
                      v79[1].__vftable = v78;
                      v303 = v78;
                      v304 = v78;
                      v305 = v79;
                      v306 = 0;
                      v307 = 0;
                      sub_223C99520((uint64_t)v310, __s, (const char **)&v287);
                      v81 = (char *)operator new(0x58uLL);
                      v82 = (std::__shared_weak_count *)v81;
                      *((_QWORD *)v81 + 1) = 0;
                      v83 = (unint64_t *)(v81 + 8);
                      *((_QWORD *)v81 + 2) = 0;
                      *(_QWORD *)v81 = &off_24EC62DE8;
                      *((_QWORD *)v81 + 3) = off_24EC62E38;
                      *((_OWORD *)v81 + 2) = *(_OWORD *)&v310[8];
                      *((_QWORD *)v81 + 6) = *(_QWORD *)&v310[24];
                      *(_OWORD *)(v81 + 56) = *(_OWORD *)&v310[32];
                      *((_QWORD *)v81 + 9) = *(_QWORD *)&v310[48];
                      v306 = v81 + 24;
                      v307 = v81;
                      v313 = v78;
                      *(_QWORD *)&v314 = v78;
                      *((_QWORD *)&v314 + 1) = v79;
                      do
                        v84 = __ldxr(p_shared_owners);
                      while (__stxr(v84 + 1, p_shared_owners));
                      *(_QWORD *)&v315 = v81 + 24;
                      *((_QWORD *)&v315 + 1) = v81;
                      do
                        v85 = __ldxr(v83);
                      while (__stxr(v85 + 1, v83));
                      v316 = v81 + 24;
                      do
                        v86 = __ldaxr(v83);
                      while (__stlxr(v86 - 1, v83));
                      if (!v86)
                      {
                        (*(void (**)(char *))(*(_QWORD *)v81 + 16))(v81);
                        std::__shared_weak_count::__release_weak(v82);
                      }
                      v87 = v305;
                      if (v305)
                      {
                        v88 = (unint64_t *)&v305->__shared_owners_;
                        do
                          v89 = __ldaxr(v88);
                        while (__stlxr(v89 - 1, v88));
                        if (!v89)
                        {
                          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                          std::__shared_weak_count::__release_weak(v87);
                        }
                      }
                      v90 = v313;
                      if (v316[31] >= 0)
                        v91 = v316 + 8;
                      else
                        v91 = (char *)*((_QWORD *)v316 + 1);
                      if (v316[55] >= 0)
                        v92 = v316 + 32;
                      else
                        v92 = (char *)*((_QWORD *)v316 + 4);
                      v93 = _os_log_pack_fill();
                      v94 = v24[240];
                      v95 = *v52;
                      *(_DWORD *)v93 = 136316418;
                      *(_QWORD *)(v93 + 4) = v91;
                      *(_WORD *)(v93 + 12) = 1024;
                      *(_DWORD *)(v93 + 14) = v94;
                      *(_WORD *)(v93 + 18) = 2048;
                      *(double *)(v93 + 20) = (double)v56 / 1000000000.0;
                      *(_WORD *)(v93 + 28) = 2080;
                      *(_QWORD *)(v93 + 30) = v92;
                      *(_WORD *)(v93 + 38) = 1024;
                      *(_DWORD *)(v93 + 40) = v95;
                      *(_WORD *)(v93 + 44) = 2048;
                      *(double *)(v93 + 46) = (double)v67 / 1000000000.0;
                      v96 = operator new();
                      v97 = *(unsigned __int8 *)(v267 + 39);
                      v98 = *(_QWORD *)(v267 + 16);
                      v99 = *(_QWORD *)(v267 + 24);
                      v100 = v315;
                      *(_OWORD *)(v96 + 8) = v314;
                      if ((v97 & 0x80u) != 0)
                        v97 = v99;
                      else
                        v98 = v269;
                      *(_QWORD *)v96 = v90;
                      v314 = 0uLL;
                      *(_OWORD *)(v96 + 24) = v100;
                      v315 = 0uLL;
                      *(_QWORD *)(v96 + 40) = v98;
                      *(_QWORD *)(v96 + 48) = v97;
                      *(_BYTE *)(v96 + 56) = 1;
                      v303 = 0;
                      *(_QWORD *)v310 = v96;
                      v7 = v284;
                      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v280 + 24) + 40))(*(_QWORD *)(v280 + 24), v310);
                      v101 = *(_QWORD *)v310;
                      *(_QWORD *)v310 = 0;
                      if (v101)
                      {
                        v102 = *(std::__shared_weak_count **)(v101 + 32);
                        if (v102)
                        {
                          v103 = (unint64_t *)&v102->__shared_owners_;
                          do
                            v104 = __ldaxr(v103);
                          while (__stlxr(v104 - 1, v103));
                          if (!v104)
                          {
                            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                            std::__shared_weak_count::__release_weak(v102);
                          }
                        }
                        v105 = *(std::__shared_weak_count **)(v101 + 16);
                        if (v105)
                        {
                          v106 = (unint64_t *)&v105->__shared_owners_;
                          do
                            v107 = __ldaxr(v106);
                          while (__stlxr(v107 - 1, v106));
                          if (!v107)
                          {
                            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                            std::__shared_weak_count::__release_weak(v105);
                          }
                        }
                        MEMORY[0x227684CE8](v101, 0x10F0C40B62ED6C6);
                        v108 = v303;
                        v303 = 0;
                        if (v108)
                        {
                          on_zero_shared_weak = (std::__shared_weak_count *)v108->__on_zero_shared_weak;
                          if (on_zero_shared_weak)
                          {
                            v110 = (unint64_t *)&on_zero_shared_weak->__shared_owners_;
                            do
                              v111 = __ldaxr(v110);
                            while (__stlxr(v111 - 1, v110));
                            if (!v111)
                            {
                              ((void (*)(std::__shared_weak_count *))on_zero_shared_weak->__on_zero_shared)(on_zero_shared_weak);
                              std::__shared_weak_count::__release_weak(on_zero_shared_weak);
                            }
                          }
                          on_zero_shared = (std::__shared_weak_count *)v108->__on_zero_shared;
                          if (on_zero_shared)
                          {
                            v113 = (unint64_t *)&on_zero_shared->__shared_owners_;
                            do
                              v114 = __ldaxr(v113);
                            while (__stlxr(v114 - 1, v113));
                            if (!v114)
                            {
                              ((void (*)(std::__shared_weak_count *))on_zero_shared->__on_zero_shared)(on_zero_shared);
                              std::__shared_weak_count::__release_weak(on_zero_shared);
                            }
                          }
                          MEMORY[0x227684CE8](v108, 0x10F0C40B62ED6C6);
                        }
                      }
                      v115 = (std::__shared_weak_count *)*((_QWORD *)&v315 + 1);
                      v116 = v277;
                      if (*((_QWORD *)&v315 + 1))
                      {
                        v117 = (unint64_t *)(*((_QWORD *)&v315 + 1) + 8);
                        do
                          v118 = __ldaxr(v117);
                        while (__stlxr(v118 - 1, v117));
                        if (!v118)
                        {
                          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                          std::__shared_weak_count::__release_weak(v115);
                        }
                      }
                      v119 = (std::__shared_weak_count *)*((_QWORD *)&v314 + 1);
                      if (*((_QWORD *)&v314 + 1))
                      {
                        v120 = (unint64_t *)(*((_QWORD *)&v314 + 1) + 8);
                        do
                          v121 = __ldaxr(v120);
                        while (__stlxr(v121 - 1, v120));
                        if (!v121)
                        {
                          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                          std::__shared_weak_count::__release_weak(v119);
                        }
                      }
                    }
                    else
                    {
                      os_log_type_enabled(v76, OS_LOG_TYPE_INFO);
                      v122 = v24[240];
                      v123 = *v52;
                      *(_DWORD *)v310 = 136316418;
                      *(_QWORD *)&v310[4] = __s;
                      *(_WORD *)&v310[12] = 1024;
                      *(_DWORD *)&v310[14] = v122;
                      *(_WORD *)&v310[18] = 2048;
                      *(double *)&v310[20] = (double)v56 / 1000000000.0;
                      *(_WORD *)&v310[28] = 2080;
                      *(_QWORD *)&v310[30] = v287;
                      *(_WORD *)&v310[38] = 1024;
                      *(_DWORD *)&v310[40] = v123;
                      *(_WORD *)&v310[44] = 2048;
                      *(double *)&v310[46] = (double)v67 / 1000000000.0;
                      v124 = (void *)_os_log_send_and_compose_impl();
                      v7 = v284;
                      v116 = v277;
                      if (v124)
                        free(v124);
                    }
                    if (v116)
                    {
                      sub_2245664AC(v24, v310);
                      v125 = v24[240];
                      v126 = *((_QWORD *)v24 + 13);
                      sub_2245664AC(v285, &v313);
                      sub_22322C138((uint64_t)&v288, "GRS:MBL Exclude keyframe because: Input keyframe {%s} state {%hhu} timestamp {%lf} is not compatible with current keyframe {%s} state {%d} timestamp {%lf}.", v310, v125, (double)v126 / 1000000000.0, (const char *)&v313, *v52, (double)*v271 / 1000000000.0);
                      sub_223182C08((uint64_t)&v288);
                    }
                    sub_223182C08((uint64_t)&v288);
                    v127 = v296;
                    if (v296)
                    {
                      v128 = (unint64_t *)&v296->__shared_owners_;
                      do
                        v129 = __ldaxr(v128);
                      while (__stlxr(v129 - 1, v128));
                      if (!v129)
                      {
                        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                        std::__shared_weak_count::__release_weak(v127);
                      }
                    }
                    v25 = v283;
LABEL_250:
                    sub_2231A9984(v7, v24, v24);
LABEL_251:
                    v130 = &v51[232 * v50];
                    v132 = *((_QWORD *)v130 + 3);
                    v131 = (uint64_t *)(v130 + 24);
                    if (v132 <= *((_QWORD *)v24 + 13))
                      goto LABEL_469;
                    sub_223C91FE4(&v297);
                    if (**(int **)(v297 + 56) <= 3)
                    {
                      v133 = *(unsigned __int8 *)(v297 + 72);
                      v134 = sub_22322F254(v297, "OSLogSurrogateAppender", 1, 0);
                      if (v133 || v134)
                      {
                        v282 = v134;
                        v288 = &v297;
                        rep = std::chrono::steady_clock::now().__d_.__rep_;
                        v290 = std::chrono::system_clock::now().__d_.__rep_;
                        v291 = 3;
                        v292 = "unknown file";
                        v293 = 99;
                        v294 = "unknown function";
                        v295 = 0;
                        v296 = 0;
                        sub_2245664AC(v24, __s);
                        v135 = *((_QWORD *)v24 + 13);
                        sub_2245664AC(v285, v308);
                        v287 = v308;
                        v136 = *v288;
                        v137 = (const char *)(*v288 + 16);
                        __srca = v137;
                        if (*(char *)(*v288 + 39) < 0)
                        {
                          v137 = *(const char **)(v136 + 16);
                          v138 = *(_QWORD *)(v136 + 24);
                        }
                        else
                        {
                          v138 = *(unsigned __int8 *)(*v288 + 39);
                        }
                        v272 = *v288;
                        v139 = *v131;
                        v140 = atomic_load((unsigned __int8 *)&qword_255788F58);
                        v278 = v133;
                        if ((v140 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
                        {
                          sub_224568628((uint64_t)&v313);
                          sub_223199C58("com.apple.cv3d", (unint64_t)&v313, byte_255788F40);
                          if ((_BYTE)v315 && SHIBYTE(v314) < 0)
                            operator delete(v313);
                          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
                          __cxa_guard_release(&qword_255788F58);
                        }
                        if (byte_255788F40[23] >= 0)
                          v141 = byte_255788F40;
                        else
                          v141 = *(const char **)byte_255788F40;
                        if (byte_255788F40[23] >= 0)
                          v142 = byte_255788F40[23];
                        else
                          v142 = *(_QWORD *)&byte_255788F40[8];
                        *(_QWORD *)v310 = os_log_create(v141, v137);
                        if (v142 > 0x7FFFFFFFFFFFFFF7)
                          sub_22316DBC0();
                        if (v142 >= 0x17)
                        {
                          v144 = (v142 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v142 | 7) != 0x17)
                            v144 = v142 | 7;
                          v145 = v144 + 1;
                          v143 = operator new(v144 + 1);
                          *(_QWORD *)&v310[16] = v142;
                          *(_QWORD *)&v310[24] = v145 | 0x8000000000000000;
                          *(_QWORD *)&v310[8] = v143;
                        }
                        else
                        {
                          v310[31] = v142;
                          v143 = &v310[8];
                          if (!v142)
                          {
LABEL_273:
                            v143[v142] = 0;
                            v310[32] = 1;
                            if (v138 > 0x7FFFFFFFFFFFFFF7)
                              sub_22316DBC0();
                            if (v138 >= 0x17)
                            {
                              v147 = (v138 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v138 | 7) != 0x17)
                                v147 = v138 | 7;
                              v148 = v147 + 1;
                              v146 = operator new(v147 + 1);
                              *(_QWORD *)&v310[48] = v138;
                              v311 = v148 | 0x8000000000000000;
                              *(_QWORD *)&v310[40] = v146;
                            }
                            else
                            {
                              HIBYTE(v311) = v138;
                              v146 = &v310[40];
                              if (!v138)
                              {
LABEL_281:
                                v146[v138] = 0;
                                v312 = 1;
                                v149 = *(NSObject **)v310;
                                if (SHIBYTE(v311) < 0)
                                  operator delete(*(void **)&v310[40]);
                                if (v310[32] && (v310[31] & 0x80000000) != 0)
                                  operator delete(*(void **)&v310[8]);
                                if (*(_QWORD *)v310)
                                  os_release(*(void **)v310);
                                if (v282 && *(_QWORD *)(v282 + 24))
                                {
                                  v150 = _os_log_pack_size();
                                  v151 = (std::__shared_weak_count_vtbl *)operator new(v150, (std::align_val_t)8uLL);
                                  v152 = (std::__shared_weak_count *)operator new();
                                  v152->__shared_owners_ = 0;
                                  v153 = (unint64_t *)&v152->__shared_owners_;
                                  v152->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                                  v152->__shared_weak_owners_ = 0;
                                  v152[1].__vftable = v151;
                                  v303 = v151;
                                  v304 = v151;
                                  v305 = v152;
                                  v306 = 0;
                                  v307 = 0;
                                  sub_223C99520((uint64_t)v310, __s, (const char **)&v287);
                                  v154 = (char *)operator new(0x58uLL);
                                  v155 = (std::__shared_weak_count *)v154;
                                  *((_QWORD *)v154 + 1) = 0;
                                  v156 = (unint64_t *)(v154 + 8);
                                  *((_QWORD *)v154 + 2) = 0;
                                  *(_QWORD *)v154 = &off_24EC62DE8;
                                  *((_QWORD *)v154 + 3) = off_24EC62E38;
                                  *((_OWORD *)v154 + 2) = *(_OWORD *)&v310[8];
                                  *((_QWORD *)v154 + 6) = *(_QWORD *)&v310[24];
                                  *(_OWORD *)(v154 + 56) = *(_OWORD *)&v310[32];
                                  *((_QWORD *)v154 + 9) = *(_QWORD *)&v310[48];
                                  v306 = v154 + 24;
                                  v307 = v154;
                                  v313 = v151;
                                  *(_QWORD *)&v314 = v151;
                                  *((_QWORD *)&v314 + 1) = v152;
                                  do
                                    v157 = __ldxr(v153);
                                  while (__stxr(v157 + 1, v153));
                                  *(_QWORD *)&v315 = v154 + 24;
                                  *((_QWORD *)&v315 + 1) = v154;
                                  do
                                    v158 = __ldxr(v156);
                                  while (__stxr(v158 + 1, v156));
                                  v316 = v154 + 24;
                                  do
                                    v159 = __ldaxr(v156);
                                  while (__stlxr(v159 - 1, v156));
                                  if (!v159)
                                  {
                                    (*(void (**)(char *))(*(_QWORD *)v154 + 16))(v154);
                                    std::__shared_weak_count::__release_weak(v155);
                                  }
                                  v160 = v305;
                                  if (v305)
                                  {
                                    v161 = (unint64_t *)&v305->__shared_owners_;
                                    do
                                      v162 = __ldaxr(v161);
                                    while (__stlxr(v162 - 1, v161));
                                    if (!v162)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                                      std::__shared_weak_count::__release_weak(v160);
                                    }
                                  }
                                  v163 = v313;
                                  if (v316[31] >= 0)
                                    v164 = v316 + 8;
                                  else
                                    v164 = (char *)*((_QWORD *)v316 + 1);
                                  if (v316[55] >= 0)
                                    v165 = v316 + 32;
                                  else
                                    v165 = (char *)*((_QWORD *)v316 + 4);
                                  v166 = _os_log_pack_fill();
                                  v167 = v24[240];
                                  v168 = *v52;
                                  *(_DWORD *)v166 = 136316418;
                                  *(_QWORD *)(v166 + 4) = v164;
                                  *(_WORD *)(v166 + 12) = 1024;
                                  *(_DWORD *)(v166 + 14) = v167;
                                  *(_WORD *)(v166 + 18) = 2048;
                                  *(double *)(v166 + 20) = (double)v135 / 1000000000.0;
                                  *(_WORD *)(v166 + 28) = 2080;
                                  *(_QWORD *)(v166 + 30) = v165;
                                  *(_WORD *)(v166 + 38) = 1024;
                                  *(_DWORD *)(v166 + 40) = v168;
                                  *(_WORD *)(v166 + 44) = 2048;
                                  *(double *)(v166 + 46) = (double)v139 / 1000000000.0;
                                  v169 = operator new();
                                  v170 = *(unsigned __int8 *)(v272 + 39);
                                  v171 = *(const char **)(v272 + 16);
                                  v172 = *(_QWORD *)(v272 + 24);
                                  v173 = v315;
                                  *(_OWORD *)(v169 + 8) = v314;
                                  if ((v170 & 0x80u) != 0)
                                    v170 = v172;
                                  else
                                    v171 = __srca;
                                  *(_QWORD *)v169 = v163;
                                  v314 = 0uLL;
                                  *(_OWORD *)(v169 + 24) = v173;
                                  v315 = 0uLL;
                                  *(_QWORD *)(v169 + 40) = v171;
                                  *(_QWORD *)(v169 + 48) = v170;
                                  *(_BYTE *)(v169 + 56) = 1;
                                  v303 = 0;
                                  *(_QWORD *)v310 = v169;
                                  v7 = v284;
                                  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v282 + 24) + 40))(*(_QWORD *)(v282 + 24), v310);
                                  v174 = *(_QWORD *)v310;
                                  *(_QWORD *)v310 = 0;
                                  if (v174)
                                  {
                                    v175 = *(std::__shared_weak_count **)(v174 + 32);
                                    if (v175)
                                    {
                                      v176 = (unint64_t *)&v175->__shared_owners_;
                                      do
                                        v177 = __ldaxr(v176);
                                      while (__stlxr(v177 - 1, v176));
                                      if (!v177)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                                        std::__shared_weak_count::__release_weak(v175);
                                      }
                                    }
                                    v178 = *(std::__shared_weak_count **)(v174 + 16);
                                    if (v178)
                                    {
                                      v179 = (unint64_t *)&v178->__shared_owners_;
                                      do
                                        v180 = __ldaxr(v179);
                                      while (__stlxr(v180 - 1, v179));
                                      if (!v180)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                                        std::__shared_weak_count::__release_weak(v178);
                                      }
                                    }
                                    MEMORY[0x227684CE8](v174, 0x10F0C40B62ED6C6);
                                    v181 = v303;
                                    v303 = 0;
                                    if (v181)
                                    {
                                      v182 = (std::__shared_weak_count *)v181->__on_zero_shared_weak;
                                      if (v182)
                                      {
                                        v183 = (unint64_t *)&v182->__shared_owners_;
                                        do
                                          v184 = __ldaxr(v183);
                                        while (__stlxr(v184 - 1, v183));
                                        if (!v184)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                                          std::__shared_weak_count::__release_weak(v182);
                                        }
                                      }
                                      v185 = (std::__shared_weak_count *)v181->__on_zero_shared;
                                      if (v185)
                                      {
                                        v186 = (unint64_t *)&v185->__shared_owners_;
                                        do
                                          v187 = __ldaxr(v186);
                                        while (__stlxr(v187 - 1, v186));
                                        if (!v187)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                                          std::__shared_weak_count::__release_weak(v185);
                                        }
                                      }
                                      MEMORY[0x227684CE8](v181, 0x10F0C40B62ED6C6);
                                    }
                                  }
                                  v188 = (std::__shared_weak_count *)*((_QWORD *)&v315 + 1);
                                  v189 = v278;
                                  if (*((_QWORD *)&v315 + 1))
                                  {
                                    v190 = (unint64_t *)(*((_QWORD *)&v315 + 1) + 8);
                                    do
                                      v191 = __ldaxr(v190);
                                    while (__stlxr(v191 - 1, v190));
                                    if (!v191)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                                      std::__shared_weak_count::__release_weak(v188);
                                    }
                                  }
                                  v192 = (std::__shared_weak_count *)*((_QWORD *)&v314 + 1);
                                  if (*((_QWORD *)&v314 + 1))
                                  {
                                    v193 = (unint64_t *)(*((_QWORD *)&v314 + 1) + 8);
                                    do
                                      v194 = __ldaxr(v193);
                                    while (__stlxr(v194 - 1, v193));
                                    if (!v194)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                                      std::__shared_weak_count::__release_weak(v192);
                                    }
                                  }
                                }
                                else
                                {
                                  os_log_type_enabled(v149, OS_LOG_TYPE_INFO);
                                  v195 = v24[240];
                                  v189 = v278;
                                  v196 = *v52;
                                  *(_DWORD *)v310 = 136316418;
                                  *(_QWORD *)&v310[4] = __s;
                                  *(_WORD *)&v310[12] = 1024;
                                  *(_DWORD *)&v310[14] = v195;
                                  *(_WORD *)&v310[18] = 2048;
                                  *(double *)&v310[20] = (double)v135 / 1000000000.0;
                                  *(_WORD *)&v310[28] = 2080;
                                  *(_QWORD *)&v310[30] = v287;
                                  *(_WORD *)&v310[38] = 1024;
                                  *(_DWORD *)&v310[40] = v196;
                                  *(_WORD *)&v310[44] = 2048;
                                  *(double *)&v310[46] = (double)v139 / 1000000000.0;
                                  v197 = (void *)_os_log_send_and_compose_impl();
                                  v7 = v284;
                                  if (v197)
                                    free(v197);
                                }
                                if (v189)
                                {
                                  sub_2245664AC(v24, v310);
                                  v198 = v24[240];
                                  v199 = *((_QWORD *)v24 + 13);
                                  sub_2245664AC(v285, &v313);
                                  sub_22322C138((uint64_t)&v288, "GRS:MBL Exclude keyframe because: Input keyframe {%s} state {%d} timestamp {%lf} update time is earlier than {%s} state {%d} timestamp {%lf}.", v310, v198, (double)v199 / 1000000000.0, (const char *)&v313, *v52, (double)*v131 / 1000000000.0);
                                  sub_223182C08((uint64_t)&v288);
                                }
                                sub_223182C08((uint64_t)&v288);
                                v200 = v296;
                                if (v296)
                                {
                                  v201 = (unint64_t *)&v296->__shared_owners_;
                                  do
                                    v202 = __ldaxr(v201);
                                  while (__stlxr(v202 - 1, v201));
                                  if (!v202)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                                    std::__shared_weak_count::__release_weak(v200);
                                  }
                                }
                                v25 = v283;
                                goto LABEL_355;
                              }
                            }
                            memmove(v146, v137, v138);
                            goto LABEL_281;
                          }
                        }
                        memmove(v143, v141, v142);
                        goto LABEL_273;
                      }
                    }
LABEL_355:
                    sub_2231A9984(v7, v24, v24);
                    goto LABEL_469;
                  }
                }
                memmove(v73, __src, v58);
                goto LABEL_176;
              }
            }
            memmove(v70, v68, v69);
            goto LABEL_168;
          }
          sub_223C91FE4(&v297);
          if (**(int **)(v297 + 56) > 3)
            goto LABEL_251;
          v60 = *(unsigned __int8 *)(v297 + 72);
          v61 = sub_22322F254(v297, "OSLogSurrogateAppender", 1, 0);
          if (!v60 && !v61)
            goto LABEL_251;
          v281 = v61;
          v288 = &v297;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v290 = std::chrono::system_clock::now().__d_.__rep_;
          v291 = 3;
          v292 = "unknown file";
          v293 = 87;
          v294 = "unknown function";
          v295 = 0;
          v296 = 0;
          sub_2245664AC(v24, __s);
          v62 = *((_QWORD *)v24 + 13);
          sub_2245664AC(v285, v308);
          v287 = v308;
          v63 = *v288;
          if (*(char *)(*v288 + 39) < 0)
          {
            v65 = *(const char **)(v63 + 16);
            v64 = *(_QWORD *)(v63 + 24);
          }
          else
          {
            v64 = *(unsigned __int8 *)(*v288 + 39);
            v65 = (const char *)(*v288 + 16);
          }
          v268 = *v288;
          v270 = *v288 + 16;
          v203 = &v51[232 * v50];
          v204 = *((_QWORD *)v203 + 3);
          v273 = (uint64_t *)(v203 + 24);
          LOBYTE(v203) = atomic_load((unsigned __int8 *)&qword_255788F58);
          v279 = v60;
          if ((v203 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)&v313);
            sub_223199C58("com.apple.cv3d", (unint64_t)&v313, byte_255788F40);
            if ((_BYTE)v315 && SHIBYTE(v314) < 0)
              operator delete(v313);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
          if (byte_255788F40[23] >= 0)
            v205 = byte_255788F40;
          else
            v205 = *(const char **)byte_255788F40;
          if (byte_255788F40[23] >= 0)
            v206 = byte_255788F40[23];
          else
            v206 = *(_QWORD *)&byte_255788F40[8];
          *(_QWORD *)v310 = os_log_create(v205, v65);
          if (v206 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          __srcb = v65;
          if (v206 >= 0x17)
          {
            v208 = (v206 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v206 | 7) != 0x17)
              v208 = v206 | 7;
            v209 = v208 + 1;
            v207 = operator new(v208 + 1);
            *(_QWORD *)&v310[16] = v206;
            *(_QWORD *)&v310[24] = v209 | 0x8000000000000000;
            *(_QWORD *)&v310[8] = v207;
          }
          else
          {
            v310[31] = v206;
            v207 = &v310[8];
            if (!v206)
            {
LABEL_372:
              v207[v206] = 0;
              v310[32] = 1;
              if (v64 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v64 >= 0x17)
              {
                v211 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v64 | 7) != 0x17)
                  v211 = v64 | 7;
                v212 = v211 + 1;
                v210 = operator new(v211 + 1);
                *(_QWORD *)&v310[48] = v64;
                v311 = v212 | 0x8000000000000000;
                *(_QWORD *)&v310[40] = v210;
              }
              else
              {
                HIBYTE(v311) = v64;
                v210 = &v310[40];
                if (!v64)
                  goto LABEL_380;
              }
              memmove(v210, __srcb, v64);
LABEL_380:
              v210[v64] = 0;
              v312 = 1;
              v213 = *(NSObject **)v310;
              if (SHIBYTE(v311) < 0)
                operator delete(*(void **)&v310[40]);
              if (v310[32] && (v310[31] & 0x80000000) != 0)
                operator delete(*(void **)&v310[8]);
              if (*(_QWORD *)v310)
                os_release(*(void **)v310);
              if (v281 && *(_QWORD *)(v281 + 24))
              {
                v214 = _os_log_pack_size();
                v215 = (std::__shared_weak_count_vtbl *)operator new(v214, (std::align_val_t)8uLL);
                v216 = (std::__shared_weak_count *)operator new();
                v216->__shared_owners_ = 0;
                v217 = (unint64_t *)&v216->__shared_owners_;
                v216->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v216->__shared_weak_owners_ = 0;
                v216[1].__vftable = v215;
                v303 = v215;
                v304 = v215;
                v305 = v216;
                v306 = 0;
                v307 = 0;
                sub_223C99520((uint64_t)v310, __s, (const char **)&v287);
                v218 = (char *)operator new(0x58uLL);
                v219 = (std::__shared_weak_count *)v218;
                *((_QWORD *)v218 + 1) = 0;
                v220 = (unint64_t *)(v218 + 8);
                *((_QWORD *)v218 + 2) = 0;
                *(_QWORD *)v218 = &off_24EC62DE8;
                *((_QWORD *)v218 + 3) = off_24EC62E38;
                *((_OWORD *)v218 + 2) = *(_OWORD *)&v310[8];
                *((_QWORD *)v218 + 6) = *(_QWORD *)&v310[24];
                *(_OWORD *)(v218 + 56) = *(_OWORD *)&v310[32];
                *((_QWORD *)v218 + 9) = *(_QWORD *)&v310[48];
                v306 = v218 + 24;
                v307 = v218;
                v313 = v215;
                *(_QWORD *)&v314 = v215;
                *((_QWORD *)&v314 + 1) = v216;
                do
                  v221 = __ldxr(v217);
                while (__stxr(v221 + 1, v217));
                *(_QWORD *)&v315 = v218 + 24;
                *((_QWORD *)&v315 + 1) = v218;
                do
                  v222 = __ldxr(v220);
                while (__stxr(v222 + 1, v220));
                v316 = v218 + 24;
                do
                  v223 = __ldaxr(v220);
                while (__stlxr(v223 - 1, v220));
                if (!v223)
                {
                  (*(void (**)(char *))(*(_QWORD *)v218 + 16))(v218);
                  std::__shared_weak_count::__release_weak(v219);
                }
                v224 = v305;
                if (v305)
                {
                  v225 = (unint64_t *)&v305->__shared_owners_;
                  do
                    v226 = __ldaxr(v225);
                  while (__stlxr(v226 - 1, v225));
                  if (!v226)
                  {
                    ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                    std::__shared_weak_count::__release_weak(v224);
                  }
                }
                v227 = v313;
                if (v316[31] >= 0)
                  v228 = v316 + 8;
                else
                  v228 = (char *)*((_QWORD *)v316 + 1);
                if (v316[55] >= 0)
                  v229 = v316 + 32;
                else
                  v229 = (char *)*((_QWORD *)v316 + 4);
                v230 = _os_log_pack_fill();
                v231 = v24[240];
                v232 = *v52;
                *(_DWORD *)v230 = 136316418;
                *(_QWORD *)(v230 + 4) = v228;
                *(_WORD *)(v230 + 12) = 1024;
                *(_DWORD *)(v230 + 14) = v231;
                *(_WORD *)(v230 + 18) = 2048;
                *(double *)(v230 + 20) = (double)v62 / 1000000000.0;
                *(_WORD *)(v230 + 28) = 2080;
                *(_QWORD *)(v230 + 30) = v229;
                *(_WORD *)(v230 + 38) = 1024;
                *(_DWORD *)(v230 + 40) = v232;
                *(_WORD *)(v230 + 44) = 2048;
                *(double *)(v230 + 46) = (double)v204 / 1000000000.0;
                v233 = operator new();
                v234 = *(unsigned __int8 *)(v268 + 39);
                v235 = *(_QWORD *)(v268 + 16);
                v236 = *(_QWORD *)(v268 + 24);
                v237 = v315;
                *(_OWORD *)(v233 + 8) = v314;
                if ((v234 & 0x80u) != 0)
                  v234 = v236;
                else
                  v235 = v270;
                *(_QWORD *)v233 = v227;
                v314 = 0uLL;
                *(_OWORD *)(v233 + 24) = v237;
                v315 = 0uLL;
                *(_QWORD *)(v233 + 40) = v235;
                *(_QWORD *)(v233 + 48) = v234;
                *(_BYTE *)(v233 + 56) = 1;
                v303 = 0;
                *(_QWORD *)v310 = v233;
                v7 = v284;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v281 + 24) + 40))(*(_QWORD *)(v281 + 24), v310);
                v238 = *(_QWORD *)v310;
                *(_QWORD *)v310 = 0;
                if (v238)
                {
                  v239 = *(std::__shared_weak_count **)(v238 + 32);
                  if (v239)
                  {
                    v240 = (unint64_t *)&v239->__shared_owners_;
                    do
                      v241 = __ldaxr(v240);
                    while (__stlxr(v241 - 1, v240));
                    if (!v241)
                    {
                      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
                      std::__shared_weak_count::__release_weak(v239);
                    }
                  }
                  v242 = *(std::__shared_weak_count **)(v238 + 16);
                  if (v242)
                  {
                    v243 = (unint64_t *)&v242->__shared_owners_;
                    do
                      v244 = __ldaxr(v243);
                    while (__stlxr(v244 - 1, v243));
                    if (!v244)
                    {
                      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                      std::__shared_weak_count::__release_weak(v242);
                    }
                  }
                  MEMORY[0x227684CE8](v238, 0x10F0C40B62ED6C6);
                  v245 = v303;
                  v303 = 0;
                  if (v245)
                  {
                    v246 = (std::__shared_weak_count *)v245->__on_zero_shared_weak;
                    if (v246)
                    {
                      v247 = (unint64_t *)&v246->__shared_owners_;
                      do
                        v248 = __ldaxr(v247);
                      while (__stlxr(v248 - 1, v247));
                      if (!v248)
                      {
                        ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                        std::__shared_weak_count::__release_weak(v246);
                      }
                    }
                    v249 = (std::__shared_weak_count *)v245->__on_zero_shared;
                    if (v249)
                    {
                      v250 = (unint64_t *)&v249->__shared_owners_;
                      do
                        v251 = __ldaxr(v250);
                      while (__stlxr(v251 - 1, v250));
                      if (!v251)
                      {
                        ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
                        std::__shared_weak_count::__release_weak(v249);
                      }
                    }
                    MEMORY[0x227684CE8](v245, 0x10F0C40B62ED6C6);
                  }
                }
                v252 = (std::__shared_weak_count *)*((_QWORD *)&v315 + 1);
                v253 = v279;
                if (*((_QWORD *)&v315 + 1))
                {
                  v254 = (unint64_t *)(*((_QWORD *)&v315 + 1) + 8);
                  do
                    v255 = __ldaxr(v254);
                  while (__stlxr(v255 - 1, v254));
                  if (!v255)
                  {
                    ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                    std::__shared_weak_count::__release_weak(v252);
                  }
                }
                v256 = (std::__shared_weak_count *)*((_QWORD *)&v314 + 1);
                if (*((_QWORD *)&v314 + 1))
                {
                  v257 = (unint64_t *)(*((_QWORD *)&v314 + 1) + 8);
                  do
                    v258 = __ldaxr(v257);
                  while (__stlxr(v258 - 1, v257));
                  if (!v258)
                  {
                    ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                    std::__shared_weak_count::__release_weak(v256);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v213, OS_LOG_TYPE_INFO);
                v259 = v24[240];
                v260 = *v52;
                *(_DWORD *)v310 = 136316418;
                *(_QWORD *)&v310[4] = __s;
                *(_WORD *)&v310[12] = 1024;
                *(_DWORD *)&v310[14] = v259;
                *(_WORD *)&v310[18] = 2048;
                *(double *)&v310[20] = (double)v62 / 1000000000.0;
                *(_WORD *)&v310[28] = 2080;
                *(_QWORD *)&v310[30] = v287;
                *(_WORD *)&v310[38] = 1024;
                *(_DWORD *)&v310[40] = v260;
                *(_WORD *)&v310[44] = 2048;
                *(double *)&v310[46] = (double)v204 / 1000000000.0;
                v261 = (void *)_os_log_send_and_compose_impl();
                v7 = v284;
                v253 = v279;
                if (v261)
                  free(v261);
              }
              if (v253)
              {
                sub_2245664AC(v24, v310);
                v262 = v24[240];
                v263 = *((_QWORD *)v24 + 13);
                sub_2245664AC(v285, &v313);
                sub_22322C138((uint64_t)&v288, "GRS:MBL Unexpected update: Input keyframe {%s} state {%hhu} timestamp {%lf} is compatible (but not expected) with current keyframe {%s} state {%d} timestamp {%lf}.", v310, v262, (double)v263 / 1000000000.0, (const char *)&v313, *v52, (double)*v273 / 1000000000.0);
                sub_223182C08((uint64_t)&v288);
              }
              sub_223182C08((uint64_t)&v288);
              v264 = v296;
              if (v296)
              {
                v265 = (unint64_t *)&v296->__shared_owners_;
                do
                  v266 = __ldaxr(v265);
                while (__stlxr(v266 - 1, v265));
                if (!v266)
                {
                  ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                  std::__shared_weak_count::__release_weak(v264);
                }
              }
              v25 = v283;
              goto LABEL_251;
            }
          }
          memmove(v207, v205, v206);
          goto LABEL_372;
        }
      }
LABEL_469:
      while (1)
      {
        v24 += 248;
        if (v24 == v25)
          break;
        v26 = (unsigned __int8 *)v302[0];
        if (v302[0])
          goto LABEL_77;
      }
    }
  }
  sub_223198030((uint64_t)&v298, v299);
  sub_223198030((uint64_t)v301, v302[0]);
}

void sub_223C91ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,_QWORD *a49,uint64_t a50,char a51,_QWORD *a52)
{
  uint64_t v52;

  if (*(_BYTE *)(v52 - 160))
  {
    if (*(char *)(v52 - 161) < 0)
      operator delete(*(void **)(v52 - 184));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a38);
  sub_223198030((uint64_t)&a48, a49);
  sub_223198030((uint64_t)&a51, a52);
  sub_223198030(a32, *(_QWORD **)(a32 + 8));
  _Unwind_Resume(a1);
}

void sub_223C91D90(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  _OWORD *v7;
  unsigned __int8 *v8;
  char *v9;
  unsigned __int8 *v10;
  _OWORD *v11;
  _OWORD *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  char *v15;
  unsigned __int8 *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _OWORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  v22 = 0;
  v20 = (uint64_t *)&v21;
  if (a2 != a3)
  {
    v7 = a2;
    do
    {
      v25[0] = *v7;
      v8 = sub_223426D4C(&v20, (uint64_t *)&v21, (unsigned __int8 **)&v17, (uint64_t *)&v24, (unsigned __int8 *)v25);
      if (!*(_QWORD *)v8)
      {
        v9 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v9 + 25) = v25[0];
        v10 = (unsigned __int8 *)v17;
        *(_QWORD *)v9 = 0;
        *((_QWORD *)v9 + 1) = 0;
        *((_QWORD *)v9 + 2) = v10;
        *(_QWORD *)v8 = v9;
        if (*v20)
        {
          v20 = (uint64_t *)*v20;
          v9 = *(char **)v8;
        }
        sub_2231A9A8C(v21, (uint64_t *)v9);
        ++v22;
      }
      v7 = (_OWORD *)((char *)v7 + 232);
    }
    while (v7 != a3);
  }
  v11 = *(_OWORD **)a4;
  v12 = *(_OWORD **)(a4 + 8);
  v18 = 0;
  v19 = 0;
  v17 = &v18;
  if (v11 == v12)
  {
    v13 = (unsigned __int8 *)&v18;
  }
  else
  {
    do
    {
      v25[0] = *v11;
      v14 = sub_223426D4C(&v17, (uint64_t *)&v18, &v24, &v23, (unsigned __int8 *)v25);
      if (!*(_QWORD *)v14)
      {
        v15 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v15 + 25) = v25[0];
        v16 = v24;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = v16;
        *(_QWORD *)v14 = v15;
        if (*v17)
        {
          v17 = (uint64_t **)*v17;
          v15 = *(char **)v14;
        }
        sub_2231A9A8C(v18, (uint64_t *)v15);
        ++v19;
      }
      v11 = (_OWORD *)((char *)v11 + 248);
    }
    while (v11 != v12);
    v13 = (unsigned __int8 *)v17;
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  sub_22388A4A4((uint64_t)v20, (unsigned __int8 *)&v21, v13, (unsigned __int8 *)&v18, (unsigned __int8 *)a1, (uint64_t *)(a1 + 8), (unsigned __int8 **)v25);
  sub_223198030((uint64_t)&v17, v18);
  sub_223198030((uint64_t)&v20, v21);
}

void sub_223C91F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12, _QWORD *a13)
{
  uint64_t v13;

  sub_223198030(v13, *(_QWORD **)(v13 + 8));
  sub_223198030((uint64_t)&a9, a10);
  sub_223198030((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_223C91FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_223198030((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_223C91FE4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CD8E8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD8E8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CD8E0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CD8E8);
  }
  *a1 = qword_2540CD8E0;
}

void sub_223C92080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CD8E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CD8E8);
  _Unwind_Resume(a1);
}

void sub_223C920D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v10;
  char *i;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  char *j;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *k;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  char *m;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  char *v84;

  v10 = *(char **)a2;
  for (i = *(char **)(a2 + 8); i != v10; i -= 248)
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)i - 28);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  *(_QWORD *)(a2 + 8) = v10;
  v15 = *(char **)a3;
  for (j = *(char **)(a3 + 8); j != v15; j -= 248)
  {
    v17 = (std::__shared_weak_count *)*((_QWORD *)j - 28);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  *(_QWORD *)(a3 + 8) = v15;
  v20 = *(char **)a4;
  for (k = *(char **)(a4 + 8); k != v20; k -= 248)
  {
    v22 = (std::__shared_weak_count *)*((_QWORD *)k - 28);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  *(_QWORD *)(a4 + 8) = v20;
  v25 = *(char **)a5;
  for (m = *(char **)(a5 + 8); m != v25; m -= 248)
  {
    v27 = (std::__shared_weak_count *)*((_QWORD *)m - 28);
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  *(_QWORD *)(a5 + 8) = v25;
  v30 = *a1;
  v31 = a1[1];
  while (v30 != v31)
  {
    if ((sub_223C8F01C(*(unsigned __int8 *)(v30 + 240)) & 0xFE) == 4)
    {
      v32 = *(_QWORD *)(a2 + 8);
      if (v32 >= *(_QWORD *)(a2 + 16))
      {
        *(_QWORD *)(a2 + 8) = sub_22356EF88((char **)a2, v30);
        v30 += 248;
      }
      else
      {
        *(_OWORD *)v32 = *(_OWORD *)v30;
        v33 = *(_QWORD *)(v30 + 24);
        *(_QWORD *)(v32 + 16) = *(_QWORD *)(v30 + 16);
        *(_QWORD *)(v32 + 24) = v33;
        if (v33)
        {
          v34 = (unint64_t *)(v33 + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        v36 = *(_OWORD *)(v30 + 32);
        v37 = *(_OWORD *)(v30 + 48);
        v38 = *(_OWORD *)(v30 + 80);
        *(_OWORD *)(v32 + 64) = *(_OWORD *)(v30 + 64);
        *(_OWORD *)(v32 + 80) = v38;
        *(_OWORD *)(v32 + 32) = v36;
        *(_OWORD *)(v32 + 48) = v37;
        *(_OWORD *)(v32 + 96) = *(_OWORD *)(v30 + 96);
        v39 = *(_OWORD *)(v30 + 112);
        v40 = *(_OWORD *)(v30 + 128);
        v41 = *(_OWORD *)(v30 + 160);
        *(_OWORD *)(v32 + 144) = *(_OWORD *)(v30 + 144);
        *(_OWORD *)(v32 + 160) = v41;
        *(_OWORD *)(v32 + 112) = v39;
        *(_OWORD *)(v32 + 128) = v40;
        v42 = *(_OWORD *)(v30 + 176);
        v43 = *(_OWORD *)(v30 + 192);
        v44 = *(_OWORD *)(v30 + 224);
        *(_OWORD *)(v32 + 208) = *(_OWORD *)(v30 + 208);
        *(_OWORD *)(v32 + 224) = v44;
        *(_OWORD *)(v32 + 176) = v42;
        *(_OWORD *)(v32 + 192) = v43;
        *(_WORD *)(v32 + 240) = *(_WORD *)(v30 + 240);
        *(_QWORD *)(a2 + 8) = v32 + 248;
        v30 += 248;
      }
    }
    else if (sub_223C8F01C(*(unsigned __int8 *)(v30 + 240)))
    {
      if ((sub_223C8F01C(*(unsigned __int8 *)(v30 + 240)) & 0xFE) == 2)
      {
        v45 = *(_QWORD *)(a4 + 8);
        if (v45 >= *(_QWORD *)(a4 + 16))
        {
          *(_QWORD *)(a4 + 8) = sub_22356EF88((char **)a4, v30);
          v30 += 248;
        }
        else
        {
          *(_OWORD *)v45 = *(_OWORD *)v30;
          v46 = *(_QWORD *)(v30 + 24);
          *(_QWORD *)(v45 + 16) = *(_QWORD *)(v30 + 16);
          *(_QWORD *)(v45 + 24) = v46;
          if (v46)
          {
            v47 = (unint64_t *)(v46 + 8);
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
          }
          v49 = *(_OWORD *)(v30 + 32);
          v50 = *(_OWORD *)(v30 + 48);
          v51 = *(_OWORD *)(v30 + 80);
          *(_OWORD *)(v45 + 64) = *(_OWORD *)(v30 + 64);
          *(_OWORD *)(v45 + 80) = v51;
          *(_OWORD *)(v45 + 32) = v49;
          *(_OWORD *)(v45 + 48) = v50;
          *(_OWORD *)(v45 + 96) = *(_OWORD *)(v30 + 96);
          v52 = *(_OWORD *)(v30 + 112);
          v53 = *(_OWORD *)(v30 + 128);
          v54 = *(_OWORD *)(v30 + 160);
          *(_OWORD *)(v45 + 144) = *(_OWORD *)(v30 + 144);
          *(_OWORD *)(v45 + 160) = v54;
          *(_OWORD *)(v45 + 112) = v52;
          *(_OWORD *)(v45 + 128) = v53;
          v55 = *(_OWORD *)(v30 + 176);
          v56 = *(_OWORD *)(v30 + 192);
          v57 = *(_OWORD *)(v30 + 224);
          *(_OWORD *)(v45 + 208) = *(_OWORD *)(v30 + 208);
          *(_OWORD *)(v45 + 224) = v57;
          *(_OWORD *)(v45 + 176) = v55;
          *(_OWORD *)(v45 + 192) = v56;
          *(_WORD *)(v45 + 240) = *(_WORD *)(v30 + 240);
          *(_QWORD *)(a4 + 8) = v45 + 248;
          v30 += 248;
        }
      }
      else
      {
        v71 = *(_QWORD *)(a5 + 8);
        if (v71 >= *(_QWORD *)(a5 + 16))
        {
          v84 = sub_22356EF88((char **)a5, v30);
        }
        else
        {
          *(_OWORD *)v71 = *(_OWORD *)v30;
          v72 = *(_QWORD *)(v30 + 24);
          *(_QWORD *)(v71 + 16) = *(_QWORD *)(v30 + 16);
          *(_QWORD *)(v71 + 24) = v72;
          if (v72)
          {
            v73 = (unint64_t *)(v72 + 8);
            do
              v74 = __ldxr(v73);
            while (__stxr(v74 + 1, v73));
          }
          v75 = *(_OWORD *)(v30 + 32);
          v76 = *(_OWORD *)(v30 + 48);
          v77 = *(_OWORD *)(v30 + 80);
          *(_OWORD *)(v71 + 64) = *(_OWORD *)(v30 + 64);
          *(_OWORD *)(v71 + 80) = v77;
          *(_OWORD *)(v71 + 32) = v75;
          *(_OWORD *)(v71 + 48) = v76;
          *(_OWORD *)(v71 + 96) = *(_OWORD *)(v30 + 96);
          v78 = *(_OWORD *)(v30 + 112);
          v79 = *(_OWORD *)(v30 + 128);
          v80 = *(_OWORD *)(v30 + 160);
          *(_OWORD *)(v71 + 144) = *(_OWORD *)(v30 + 144);
          *(_OWORD *)(v71 + 160) = v80;
          *(_OWORD *)(v71 + 112) = v78;
          *(_OWORD *)(v71 + 128) = v79;
          v81 = *(_OWORD *)(v30 + 176);
          v82 = *(_OWORD *)(v30 + 192);
          v83 = *(_OWORD *)(v30 + 224);
          *(_OWORD *)(v71 + 208) = *(_OWORD *)(v30 + 208);
          *(_OWORD *)(v71 + 224) = v83;
          *(_OWORD *)(v71 + 176) = v81;
          *(_OWORD *)(v71 + 192) = v82;
          *(_WORD *)(v71 + 240) = *(_WORD *)(v30 + 240);
          v84 = (char *)(v71 + 248);
        }
        *(_QWORD *)(a5 + 8) = v84;
        v30 += 248;
      }
    }
    else
    {
      v58 = *(_QWORD *)(a3 + 8);
      if (v58 >= *(_QWORD *)(a3 + 16))
      {
        *(_QWORD *)(a3 + 8) = sub_22356EF88((char **)a3, v30);
        v30 += 248;
      }
      else
      {
        *(_OWORD *)v58 = *(_OWORD *)v30;
        v59 = *(_QWORD *)(v30 + 24);
        *(_QWORD *)(v58 + 16) = *(_QWORD *)(v30 + 16);
        *(_QWORD *)(v58 + 24) = v59;
        if (v59)
        {
          v60 = (unint64_t *)(v59 + 8);
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
        v62 = *(_OWORD *)(v30 + 32);
        v63 = *(_OWORD *)(v30 + 48);
        v64 = *(_OWORD *)(v30 + 80);
        *(_OWORD *)(v58 + 64) = *(_OWORD *)(v30 + 64);
        *(_OWORD *)(v58 + 80) = v64;
        *(_OWORD *)(v58 + 32) = v62;
        *(_OWORD *)(v58 + 48) = v63;
        *(_OWORD *)(v58 + 96) = *(_OWORD *)(v30 + 96);
        v65 = *(_OWORD *)(v30 + 112);
        v66 = *(_OWORD *)(v30 + 128);
        v67 = *(_OWORD *)(v30 + 160);
        *(_OWORD *)(v58 + 144) = *(_OWORD *)(v30 + 144);
        *(_OWORD *)(v58 + 160) = v67;
        *(_OWORD *)(v58 + 112) = v65;
        *(_OWORD *)(v58 + 128) = v66;
        v68 = *(_OWORD *)(v30 + 176);
        v69 = *(_OWORD *)(v30 + 192);
        v70 = *(_OWORD *)(v30 + 224);
        *(_OWORD *)(v58 + 208) = *(_OWORD *)(v30 + 208);
        *(_OWORD *)(v58 + 224) = v70;
        *(_OWORD *)(v58 + 176) = v68;
        *(_OWORD *)(v58 + 192) = v69;
        *(_WORD *)(v58 + 240) = *(_WORD *)(v30 + 240);
        *(_QWORD *)(a3 + 8) = v58 + 248;
        v30 += 248;
      }
    }
  }
}

uint64_t sub_223C92514(int a1, unsigned __int8 *a2, char a3, uint64_t a4, uint64_t *a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  char *p_p;
  uint64_t v17;
  unsigned __int8 v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  __int128 *v23;
  uint64_t v24;
  char v25;
  size_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  const char *v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  const char *v42;
  size_t v43;
  _BYTE *v44;
  uint64_t v45;
  unint64_t v46;
  const char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  size_t v56;
  std::__shared_weak_count_vtbl *v57;
  std::__shared_weak_count *v58;
  size_t v59;
  size_t v60;
  _BYTE **v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  char v66;
  _QWORD *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  void *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  _BYTE *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  const char *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  const char *v113;
  _QWORD v114[3];
  int v115;
  const char *v116;
  int v117;
  const char *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *__dst[2];
  int64_t v122;
  void *v123[2];
  _QWORD v124[3];
  const void *v125;
  uint64_t v126;
  const void *v127;
  unint64_t v128;
  void *v129;
  char v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  void *__p;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  std::__shared_weak_count *v139;
  char *v140;
  std::__shared_weak_count *v141;
  _BYTE *v142;
  __int128 v143;
  _BYTE v144[24];
  __int128 v145;
  void *v146[2];
  unint64_t v147;
  char v148;
  _QWORD v149[5];

  v149[2] = *MEMORY[0x24BDAC8D0];
  v9 = sub_223C8F01C(a1);
  __p = 0;
  v136 = 0;
  v137 = 0;
  if (v9 != 4)
  {
    if (v9 != 2)
      goto LABEL_44;
    v12 = *(_QWORD *)(a4 + 8);
    v10 = a4 + 8;
    v11 = v12;
    if (!v12)
      goto LABEL_13;
    v13 = v10;
    do
    {
      v14 = sub_22319835C((unsigned __int8 *)(v11 + 25), a2);
      if (v14 >= 0)
        v15 = (uint64_t *)v11;
      else
        v15 = (uint64_t *)(v11 + 8);
      if (v14 >= 0)
        v13 = v11;
      v11 = *v15;
    }
    while (*v15);
    if (v13 == v10 || (char)sub_22319835C(a2, (unsigned __int8 *)(v13 + 25)) < 0)
LABEL_13:
      v13 = v10;
    if (SHIBYTE(v137) < 0)
    {
      v136 = 11;
      p_p = (char *)__p;
    }
    else
    {
      HIBYTE(v137) = 11;
      p_p = (char *)&__p;
    }
    strcpy(p_p, "persistence");
    v28 = *a5;
    if (v13 != v10)
      ++v28;
    *a5 = v28;
    if (v13 == v10)
      goto LABEL_44;
LABEL_19:
    v18 = atomic_load((unsigned __int8 *)&qword_2540CD8F8);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD8F8))
    {
      sub_22455F53C(v144);
      sub_223174DE4(v123, "cv3d.recon.frame");
      sub_2232300E0((uint64_t **)v144, (uint64_t)v123, &qword_2540CD8F0);
      if (SHIBYTE(v124[0]) < 0)
        operator delete(v123[0]);
      __cxa_guard_release(&qword_2540CD8F8);
    }
    v134 = qword_2540CD8F0;
    if (**(int **)(qword_2540CD8F0 + 56) > 3
      || ((v19 = *(unsigned __int8 *)(qword_2540CD8F0 + 72),
           v20 = sub_22322F254(qword_2540CD8F0, "OSLogSurrogateAppender", 1, 0),
           v21 = v20,
           !v19)
        ? (v22 = v20 == 0)
        : (v22 = 0),
          v22))
    {
LABEL_184:
      v29 = 1;
      if ((SHIBYTE(v137) & 0x80000000) == 0)
        return v29;
      goto LABEL_45;
    }
    sub_223195210((uint64_t)v123);
    v115 = 0;
    sub_223701EA8(v114, "GRS: mute ");
    *(_QWORD *)v144 = v114;
    *(_QWORD *)&v144[8] = &__p;
    *(_QWORD *)&v144[16] = v114;
    *(_QWORD *)&v145 = &__p;
    *((_QWORD *)&v145 + 1) = &__p;
    if (v115 == -1)
      sub_22316DD70();
    v142 = v144;
    ((void (*)(_BYTE **, _QWORD *))off_24EC62E78[v115])(&v142, v114);
    *(_QWORD *)v144 = v114;
    *(_QWORD *)&v144[8] = " pending keyframe ";
    *(_QWORD *)&v144[16] = v114;
    *(_QWORD *)&v145 = " pending keyframe ";
    *((_QWORD *)&v145 + 1) = " pending keyframe ";
    if (v115 == -1)
      sub_22316DD70();
    v142 = v144;
    ((void (*)(_BYTE **, _QWORD *))off_24EC62E90[v115])(&v142, v114);
    sub_22319B83C((uint64_t)v144, (uint64_t)v114, a2);
    if (v115 == -1)
      sub_22316DD70();
    *(_QWORD *)v144 = &v142;
    ((void (*)(__int128 *__return_ptr, _BYTE *, _QWORD *))off_24EC62EA8[v115])(&v138, v144, v114);
    if (v115 != -1)
      ((void (*)(_BYTE *, _QWORD *))off_24EC62E60[v115])(v144, v114);
    if (SHIBYTE(v139) >= 0)
      v23 = &v138;
    else
      v23 = (__int128 *)v138;
    if (SHIBYTE(v139) >= 0)
      v24 = HIBYTE(v139);
    else
      v24 = *((_QWORD *)&v138 + 1);
    sub_2231813E8(v124, (uint64_t)v23, v24);
    if (SHIBYTE(v139) < 0)
    {
      operator delete((void *)v138);
      v25 = v132;
      if ((v132 & 0x10) == 0)
      {
LABEL_38:
        if ((v25 & 8) == 0)
        {
          v26 = 0;
          HIBYTE(v122) = 0;
          v27 = __dst;
          goto LABEL_58;
        }
        v32 = v125;
        v26 = v126 - (_QWORD)v125;
        if ((unint64_t)(v126 - (_QWORD)v125) > 0x7FFFFFFFFFFFFFF7)
LABEL_103:
          sub_22316DBC0();
LABEL_51:
        if (v26 >= 0x17)
        {
          v33 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v26 | 7) != 0x17)
            v33 = v26 | 7;
          v34 = v33 + 1;
          v27 = (void **)operator new(v33 + 1);
          __dst[1] = (void *)v26;
          v122 = v34 | 0x8000000000000000;
          __dst[0] = v27;
        }
        else
        {
          HIBYTE(v122) = v26;
          v27 = __dst;
          if (!v26)
          {
LABEL_58:
            *((_BYTE *)v27 + v26) = 0;
            v114[0] = &v134;
            v114[1] = std::chrono::steady_clock::now().__d_.__rep_;
            v114[2] = std::chrono::system_clock::now().__d_.__rep_;
            v115 = 3;
            v116 = "unknown file";
            v117 = 283;
            v119 = 0;
            v120 = 0;
            v118 = "unknown function";
            if (v122 >= 0)
              v35 = (const char *)__dst;
            else
              v35 = (const char *)__dst[0];
            v36 = *(_QWORD *)v114[0];
            v37 = *(_QWORD *)v114[0] + 16;
            if (*(char *)(*(_QWORD *)v114[0] + 39) < 0)
            {
              v39 = *(const char **)(v36 + 16);
              v38 = *(_QWORD *)(v36 + 24);
              v41 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v41 & 1) != 0)
                goto LABEL_65;
            }
            else
            {
              v38 = *(unsigned __int8 *)(*(_QWORD *)v114[0] + 39);
              v39 = (const char *)(*(_QWORD *)v114[0] + 16);
              v40 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v40 & 1) != 0)
                goto LABEL_65;
            }
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)v144);
              sub_223199C58("com.apple.cv3d", (unint64_t)v144, &xmmword_255788F40);
              if ((_BYTE)v145 && (v144[23] & 0x80000000) != 0)
                operator delete(*(void **)v144);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
LABEL_65:
            if (byte_255788F57 >= 0)
              v42 = (const char *)&xmmword_255788F40;
            else
              v42 = (const char *)xmmword_255788F40;
            if (byte_255788F57 >= 0)
              v43 = byte_255788F57;
            else
              v43 = *((_QWORD *)&xmmword_255788F40 + 1);
            *(_QWORD *)v144 = os_log_create(v42, v39);
            v44 = &v144[8];
            if (v43 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v43 >= 0x17)
            {
              v113 = v39;
              v45 = v36;
              v46 = v21;
              v47 = v35;
              v48 = v37;
              v49 = v19;
              v50 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v43 | 7) != 0x17)
                v50 = v43 | 7;
              v51 = v50 + 1;
              v44 = operator new(v50 + 1);
              *(_QWORD *)&v144[16] = v43;
              *(_QWORD *)&v145 = v51 | 0x8000000000000000;
              *(_QWORD *)&v144[8] = v44;
              v19 = v49;
              v37 = v48;
              v35 = v47;
              v21 = v46;
              v36 = v45;
              v39 = v113;
            }
            else
            {
              BYTE7(v145) = v43;
              if (!v43)
              {
LABEL_79:
                v44[v43] = 0;
                BYTE8(v145) = 1;
                v52 = v146;
                if (v38 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                if (v38 >= 0x17)
                {
                  v53 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v38 | 7) != 0x17)
                    v53 = v38 | 7;
                  v54 = v53 + 1;
                  v52 = (void **)operator new(v53 + 1);
                  v146[1] = (void *)v38;
                  v147 = v54 | 0x8000000000000000;
                  v146[0] = v52;
                }
                else
                {
                  HIBYTE(v147) = v38;
                  if (!v38)
                  {
LABEL_87:
                    *((_BYTE *)v52 + v38) = 0;
                    v148 = 1;
                    v55 = *(NSObject **)v144;
                    if (SHIBYTE(v147) < 0)
                      operator delete(v146[0]);
                    if (BYTE8(v145) && SBYTE7(v145) < 0)
                      operator delete(*(void **)&v144[8]);
                    if (*(_QWORD *)v144)
                      os_release(*(void **)v144);
                    if (!v21 || !*(_QWORD *)(v21 + 24))
                    {
                      os_log_type_enabled(v55, OS_LOG_TYPE_INFO);
                      *(_DWORD *)v144 = 136315138;
                      *(_QWORD *)&v144[4] = v35;
                      v62 = (void *)_os_log_send_and_compose_impl();
                      if (v62)
                        free(v62);
                      goto LABEL_170;
                    }
                    v56 = _os_log_pack_size();
                    v57 = (std::__shared_weak_count_vtbl *)operator new(v56, (std::align_val_t)8uLL);
                    v58 = (std::__shared_weak_count *)operator new();
                    v58->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                    v58->__shared_owners_ = 0;
                    v58->__shared_weak_owners_ = 0;
                    v58[1].__vftable = v57;
                    *(_QWORD *)&v138 = v57;
                    *((_QWORD *)&v138 + 1) = v57;
                    v140 = 0;
                    v141 = 0;
                    v139 = v58;
                    v59 = strlen(v35);
                    if (v59 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    v60 = v59;
                    if (v59 >= 0x17)
                    {
                      v63 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v59 | 7) != 0x17)
                        v63 = v59 | 7;
                      v64 = v63 + 1;
                      v61 = (_BYTE **)operator new(v63 + 1);
                      *(_QWORD *)&v143 = v60;
                      *((_QWORD *)&v143 + 1) = v64 | 0x8000000000000000;
                      v142 = v61;
                    }
                    else
                    {
                      HIBYTE(v143) = v59;
                      v61 = &v142;
                      if (!v59)
                      {
LABEL_108:
                        *((_BYTE *)v61 + v60) = 0;
                        v65 = v142;
                        v149[0] = v143;
                        *(_QWORD *)((char *)v149 + 7) = *(_QWORD *)((char *)&v143 + 7);
                        v66 = HIBYTE(v143);
                        v67 = operator new(0x38uLL);
                        v67[1] = 0;
                        v67[2] = 0;
                        v67[3] = off_24EC1FA48;
                        *v67 = &off_24EC1F9F8;
                        v68 = v149[0];
                        v67[4] = v65;
                        v67[5] = v68;
                        *(_QWORD *)((char *)v67 + 47) = *(_QWORD *)((char *)v149 + 7);
                        *((_BYTE *)v67 + 55) = v66;
                        v149[0] = 0;
                        *(_QWORD *)((char *)v149 + 7) = 0;
                        v69 = v141;
                        v140 = (char *)(v67 + 3);
                        v141 = (std::__shared_weak_count *)v67;
                        if (v69)
                        {
                          p_shared_owners = (unint64_t *)&v69->__shared_owners_;
                          do
                            v71 = __ldaxr(p_shared_owners);
                          while (__stlxr(v71 - 1, p_shared_owners));
                          if (!v71)
                          {
                            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                            std::__shared_weak_count::__release_weak(v69);
                          }
                        }
                        *(_OWORD *)v144 = v138;
                        v72 = v140;
                        *(_QWORD *)&v144[16] = v139;
                        if (v139)
                        {
                          v73 = (unint64_t *)&v139->__shared_owners_;
                          do
                            v74 = __ldxr(v73);
                          while (__stxr(v74 + 1, v73));
                        }
                        v75 = v141;
                        *(_QWORD *)&v145 = v72;
                        *((_QWORD *)&v145 + 1) = v141;
                        if (v141)
                        {
                          v76 = (unint64_t *)&v141->__shared_owners_;
                          do
                            v77 = __ldxr(v76);
                          while (__stxr(v77 + 1, v76));
                          v146[0] = v72;
                          do
                            v78 = __ldaxr(v76);
                          while (__stlxr(v78 - 1, v76));
                          if (!v78)
                          {
                            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                            std::__shared_weak_count::__release_weak(v75);
                          }
                        }
                        else
                        {
                          v146[0] = v72;
                        }
                        v79 = v139;
                        if (v139)
                        {
                          v80 = (unint64_t *)&v139->__shared_owners_;
                          do
                            v81 = __ldaxr(v80);
                          while (__stlxr(v81 - 1, v80));
                          if (!v81)
                          {
                            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                            std::__shared_weak_count::__release_weak(v79);
                          }
                        }
                        v82 = *(_QWORD *)v144;
                        if (*((char *)v146[0] + 31) >= 0)
                          v83 = (char *)v146[0] + 8;
                        else
                          v83 = (char *)*((_QWORD *)v146[0] + 1);
                        v84 = _os_log_pack_fill();
                        *(_DWORD *)v84 = 136315138;
                        *(_QWORD *)(v84 + 4) = v83;
                        v85 = operator new();
                        v86 = *(unsigned __int8 *)(v36 + 39);
                        if ((v86 & 0x80u) == 0)
                          v87 = v37;
                        else
                          v87 = *(_QWORD *)(v36 + 16);
                        if ((v86 & 0x80u) != 0)
                          v86 = *(_QWORD *)(v36 + 24);
                        *(_QWORD *)v85 = v82;
                        *(_OWORD *)(v85 + 8) = *(_OWORD *)&v144[8];
                        *(_QWORD *)&v144[8] = 0;
                        *(_QWORD *)&v144[16] = 0;
                        *(_OWORD *)(v85 + 24) = v145;
                        v145 = 0uLL;
                        *(_QWORD *)(v85 + 40) = v87;
                        *(_QWORD *)(v85 + 48) = v86;
                        *(_BYTE *)(v85 + 56) = 1;
                        v142 = 0;
                        *(_QWORD *)&v138 = v85;
                        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v21 + 24) + 40))(*(_QWORD *)(v21 + 24), &v138);
                        v88 = v138;
                        *(_QWORD *)&v138 = 0;
                        if (v88)
                        {
                          v89 = *(std::__shared_weak_count **)(v88 + 32);
                          if (v89)
                          {
                            v90 = (unint64_t *)&v89->__shared_owners_;
                            do
                              v91 = __ldaxr(v90);
                            while (__stlxr(v91 - 1, v90));
                            if (!v91)
                            {
                              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                              std::__shared_weak_count::__release_weak(v89);
                            }
                          }
                          v92 = *(std::__shared_weak_count **)(v88 + 16);
                          if (v92)
                          {
                            v93 = (unint64_t *)&v92->__shared_owners_;
                            do
                              v94 = __ldaxr(v93);
                            while (__stlxr(v94 - 1, v93));
                            if (!v94)
                            {
                              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                              std::__shared_weak_count::__release_weak(v92);
                            }
                          }
                          MEMORY[0x227684CE8](v88, 0x10F0C40B62ED6C6);
                          v95 = v142;
                          v142 = 0;
                          if (v95)
                          {
                            v96 = (std::__shared_weak_count *)*((_QWORD *)v95 + 4);
                            if (v96)
                            {
                              v97 = (unint64_t *)&v96->__shared_owners_;
                              do
                                v98 = __ldaxr(v97);
                              while (__stlxr(v98 - 1, v97));
                              if (!v98)
                              {
                                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                                std::__shared_weak_count::__release_weak(v96);
                              }
                            }
                            v99 = (std::__shared_weak_count *)*((_QWORD *)v95 + 2);
                            if (v99)
                            {
                              v100 = (unint64_t *)&v99->__shared_owners_;
                              do
                                v101 = __ldaxr(v100);
                              while (__stlxr(v101 - 1, v100));
                              if (!v101)
                              {
                                ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                                std::__shared_weak_count::__release_weak(v99);
                              }
                            }
                            MEMORY[0x227684CE8](v95, 0x10F0C40B62ED6C6);
                          }
                        }
                        v102 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
                        if (*((_QWORD *)&v145 + 1))
                        {
                          v103 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
                          do
                            v104 = __ldaxr(v103);
                          while (__stlxr(v104 - 1, v103));
                          if (!v104)
                          {
                            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                            std::__shared_weak_count::__release_weak(v102);
                          }
                        }
                        v105 = *(std::__shared_weak_count **)&v144[16];
                        if (*(_QWORD *)&v144[16])
                        {
                          v106 = (unint64_t *)(*(_QWORD *)&v144[16] + 8);
                          do
                            v107 = __ldaxr(v106);
                          while (__stlxr(v107 - 1, v106));
                          if (!v107)
                          {
                            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                            std::__shared_weak_count::__release_weak(v105);
                          }
                        }
LABEL_170:
                        if (v19)
                        {
                          v108 = (const char *)__dst;
                          if (v122 < 0)
                            v108 = (const char *)__dst[0];
                          sub_22322C138((uint64_t)v114, "%s", v108);
                          sub_223182C08((uint64_t)v114);
                        }
                        sub_223182C08((uint64_t)v114);
                        v109 = v120;
                        if (v120)
                        {
                          v110 = (unint64_t *)&v120->__shared_owners_;
                          do
                            v111 = __ldaxr(v110);
                          while (__stlxr(v111 - 1, v110));
                          if (!v111)
                          {
                            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                            std::__shared_weak_count::__release_weak(v109);
                          }
                        }
                        if (SHIBYTE(v122) < 0)
                          operator delete(__dst[0]);
                        v123[0] = *(void **)MEMORY[0x24BEDB7F0];
                        v112 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                        *(void **)((char *)v123 + *((_QWORD *)v123[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                        v124[0] = v112;
                        v124[1] = MEMORY[0x24BEDB848] + 16;
                        if (v130 < 0)
                          operator delete(v129);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x227684BE0](&v133);
                        goto LABEL_184;
                      }
                    }
                    memcpy(v61, v35, v60);
                    goto LABEL_108;
                  }
                }
                memmove(v52, v39, v38);
                goto LABEL_87;
              }
            }
            memmove(v44, v42, v43);
            goto LABEL_79;
          }
        }
        memmove(v27, v32, v26);
        goto LABEL_58;
      }
    }
    else
    {
      v25 = v132;
      if ((v132 & 0x10) == 0)
        goto LABEL_38;
    }
    v31 = v131;
    if (v131 < v128)
    {
      v131 = v128;
      v31 = v128;
    }
    v32 = v127;
    v26 = v31 - (_QWORD)v127;
    if (v31 - (unint64_t)v127 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_103;
    goto LABEL_51;
  }
  HIBYTE(v137) = 8;
  __p = (void *)0x6C616E7265747865;
  v17 = a5[1];
  if ((a3 & 3) != 0)
    ++v17;
  a5[1] = v17;
  if ((a3 & 3) != 0)
    goto LABEL_19;
LABEL_44:
  v29 = 0;
  if (SHIBYTE(v137) < 0)
LABEL_45:
    operator delete(__p);
  return v29;
}

void sub_223C9322C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  uint64_t v68;

  if (*(_BYTE *)(v68 - 168) && *(char *)(v68 - 169) < 0)
    operator delete(*(void **)(v68 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a12);
  if (a26 < 0)
    operator delete(__p);
  sub_223195348((uint64_t)&a27);
  if (a68 < 0)
    operator delete(a63);
  _Unwind_Resume(a1);
}

unint64_t sub_223C933E0(uint64_t a1, char a2, float *a3, char a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  float32x4_t v39;
  float32x2_t v40;
  char *i;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  float32x2_t *v45;
  float32x2_t *v46;
  int64_t v47;
  unint64_t v48;
  float32x4_t *v49;
  float *v50;
  float *v51;
  unint64_t v52;
  float *v53;
  unint64_t v54;
  float32x4_t *v55;
  uint64_t v56;
  unint64_t v57;
  float v58;
  int v59;
  float32x2_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float *v63;
  uint64_t v64;
  uint64_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int8x16_t v72;
  float32x2_t v73;
  float v74;
  float v75;
  int32x4_t v76;
  float *f32;
  int32x4_t v78;
  int32x4_t v84;
  unint64_t v85;
  int32x4_t v86;
  float *v87;
  __int128 v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  float *v92;
  char *v93;
  unsigned int v94;
  char *v95;
  _OWORD *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _OWORD *v112;
  char *v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  char *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  char *v127;
  char *v128;
  char *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  char *v139;
  void *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  char *v144;
  _BYTE *v145;
  _OWORD *v146;
  char *v147;
  char *v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  char *v170;
  void *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  char *v175;
  char *v176;
  void *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  float32x2_t *v181;
  float32x2_t *v182;
  void *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  char *v187;
  char *v188;
  void *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  float *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  float32x4_t v205;
  void *__p;
  char *v207;
  unint64_t v208;
  void *v209;
  char *v210;
  unint64_t v211;
  void *v212;
  char *v213;
  uint64_t v214;
  void *v215;
  float32x2_t *v216;
  uint64_t v217;
  void *v218;
  char *v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  void **v224;

  v221 = 0;
  v222 = 0;
  v223 = 0;
  v218 = 0;
  v219 = 0;
  v220 = 0;
  v215 = 0;
  v216 = 0;
  v217 = 0;
  v212 = 0;
  v213 = 0;
  v214 = 0;
  v209 = 0;
  v210 = 0;
  v211 = 0;
  v11 = *a5;
  v10 = a5[1];
  sub_223C920D8(a5, (uint64_t)&v221, (uint64_t)&v218, (uint64_t)&v215, (uint64_t)&v212);
  v12 = (uint64_t)v221;
  v13 = *a5;
  v14 = a5[1];
  v203 = v221;
  v204 = v222;
  if (v14 == *a5)
  {
    v15 = v222;
  }
  else
  {
    do
    {
      v16 = *(std::__shared_weak_count **)(v14 - 224);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v14 -= 248;
    }
    while (v14 != v13);
    v12 = (uint64_t)v221;
    v15 = v222;
  }
  a5[1] = v13;
  while ((char *)v12 != v15)
  {
    if (v13 < a5[2])
    {
      *(_OWORD *)v13 = *(_OWORD *)v12;
      *(_OWORD *)(v13 + 16) = *(_OWORD *)(v12 + 16);
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = 0;
      v19 = *(_OWORD *)(v12 + 32);
      v20 = *(_OWORD *)(v12 + 48);
      v21 = *(_OWORD *)(v12 + 80);
      *(_OWORD *)(v13 + 64) = *(_OWORD *)(v12 + 64);
      *(_OWORD *)(v13 + 80) = v21;
      *(_OWORD *)(v13 + 32) = v19;
      *(_OWORD *)(v13 + 48) = v20;
      *(_OWORD *)(v13 + 96) = *(_OWORD *)(v12 + 96);
      v22 = *(_OWORD *)(v12 + 112);
      v23 = *(_OWORD *)(v12 + 128);
      v24 = *(_OWORD *)(v12 + 160);
      *(_OWORD *)(v13 + 144) = *(_OWORD *)(v12 + 144);
      *(_OWORD *)(v13 + 160) = v24;
      *(_OWORD *)(v13 + 112) = v22;
      *(_OWORD *)(v13 + 128) = v23;
      v25 = *(_OWORD *)(v12 + 176);
      v26 = *(_OWORD *)(v12 + 192);
      v27 = *(_OWORD *)(v12 + 224);
      *(_OWORD *)(v13 + 208) = *(_OWORD *)(v12 + 208);
      *(_OWORD *)(v13 + 224) = v27;
      *(_OWORD *)(v13 + 176) = v25;
      *(_OWORD *)(v13 + 192) = v26;
      *(_WORD *)(v13 + 240) = *(_WORD *)(v12 + 240);
      v13 += 248;
    }
    else
    {
      v13 = (unint64_t)sub_22356F1F8((void **)a5, v12);
    }
    a5[1] = v13;
    v12 += 248;
  }
  v28 = v218;
  v29 = v219;
  while (v28 != (_OWORD *)v29)
  {
    if (v13 < a5[2])
    {
      *(_OWORD *)v13 = *v28;
      *(_OWORD *)(v13 + 16) = v28[1];
      *((_QWORD *)v28 + 2) = 0;
      *((_QWORD *)v28 + 3) = 0;
      v30 = v28[2];
      v31 = v28[3];
      v32 = v28[5];
      *(_OWORD *)(v13 + 64) = v28[4];
      *(_OWORD *)(v13 + 80) = v32;
      *(_OWORD *)(v13 + 32) = v30;
      *(_OWORD *)(v13 + 48) = v31;
      *(_OWORD *)(v13 + 96) = v28[6];
      v33 = v28[7];
      v34 = v28[8];
      v35 = v28[10];
      *(_OWORD *)(v13 + 144) = v28[9];
      *(_OWORD *)(v13 + 160) = v35;
      *(_OWORD *)(v13 + 112) = v33;
      *(_OWORD *)(v13 + 128) = v34;
      v36 = v28[11];
      v37 = v28[12];
      v38 = v28[14];
      *(_OWORD *)(v13 + 208) = v28[13];
      *(_OWORD *)(v13 + 224) = v38;
      *(_OWORD *)(v13 + 176) = v36;
      *(_OWORD *)(v13 + 192) = v37;
      *(_WORD *)(v13 + 240) = *((_WORD *)v28 + 120);
      v13 += 248;
    }
    else
    {
      v13 = (unint64_t)sub_22356F1F8((void **)a5, (uint64_t)v28);
    }
    a5[1] = v13;
    v28 = (_OWORD *)((char *)v28 + 248);
  }
  if (v215 != v216)
  {
    __p = 0;
    v208 = 0;
    kdebug_trace();
    v207 = 0;
    for (i = v210; i != v209; i -= 248)
    {
      v42 = (std::__shared_weak_count *)*((_QWORD *)i - 28);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
    }
    v201 = v11;
    v202 = v10;
    v210 = (char *)v209;
    v46 = (float32x2_t *)v215;
    v45 = v216;
    v47 = (char *)v216 - (_BYTE *)v215;
    if (v216 == v215)
    {
      v50 = 0;
      v51 = 0;
      if (!a2)
        goto LABEL_59;
    }
    else
    {
      v48 = v47 / 248;
      if ((unint64_t)(v47 / 248) >> 61)
        sub_22316E078();
      v49 = (float32x4_t *)operator new(8 * v48);
      v50 = (float *)v49;
      v51 = &v49->f32[2 * v48];
      v52 = (v48 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v53 = (float *)v49;
      if (v52 < 7)
        goto LABEL_174;
      v54 = v52 + 1;
      v53 = &v49->f32[2 * (v54 & 0x3FFFFFFFFFFFFFF8)];
      v55 = v49 + 2;
      v39.i64[0] = 0xFFFFFFFF00000000;
      v39.i64[1] = 0xFFFFFFFF00000000;
      v56 = v54 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        v55[-2] = v39;
        v55[-1] = v39;
        *v55 = v39;
        v55[1] = v39;
        v55 += 4;
        v56 -= 8;
      }
      while (v56);
      if (v54 != (v54 & 0x3FFFFFFFFFFFFFF8))
      {
LABEL_174:
        do
        {
          *(_QWORD *)v53 = 0xFFFFFFFF00000000;
          v53 += 2;
        }
        while (v53 != v51);
      }
      if (!a2)
      {
        if (v48 >= 8)
        {
          v57 = v48 & 0xFFFFFFFFFFFFFFF8;
          v76 = (int32x4_t)xmmword_2246499B0;
          f32 = v49[2].f32;
          v78.i64[0] = 0x400000004;
          v78.i64[1] = 0x400000004;
          __asm { FMOV            V3.4S, #1.0 }
          v84.i64[0] = 0x800000008;
          v84.i64[1] = 0x800000008;
          v85 = v48 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v86 = vaddq_s32(v76, v78);
            v87 = f32 - 8;
            v88 = _Q3;
            vst2q_f32(v87, *(float32x4x2_t *)(&v76 - 1));
            vst2q_f32(f32, *(float32x4x2_t *)&_Q3);
            v76 = vaddq_s32(v76, v84);
            f32 += 16;
            v85 -= 8;
          }
          while (v85);
          if (v48 == v57)
          {
LABEL_59:
            v90 = 126 - 2 * __clz(((char *)v51 - (char *)v50) >> 3);
            v224 = &v215;
            if (v51 == v50)
              v91 = 0;
            else
              v91 = v90;
            sub_223C98140(v50, v51, (uint64_t **)&v224, v91, 1);
            v11 = v201;
            v10 = v202;
            if (v51 != v50)
            {
              v92 = v50;
              do
              {
                v94 = *((_DWORD *)v92 + 1);
                v95 = (char *)v215;
                v96 = (char *)v215 + 248 * v94;
                if (*v92 >= 3.4028e38)
                {
                  v112 = v210;
                  if ((unint64_t)v210 >= v211)
                  {
                    v93 = sub_22356EF88((char **)&v209, (uint64_t)v96);
                  }
                  else
                  {
                    *(_OWORD *)v210 = *v96;
                    v113 = &v95[248 * v94];
                    *((_QWORD *)v112 + 2) = *((_QWORD *)v113 + 2);
                    v114 = *((_QWORD *)v113 + 3);
                    *((_QWORD *)v112 + 3) = v114;
                    if (v114)
                    {
                      v115 = (unint64_t *)(v114 + 8);
                      do
                        v116 = __ldxr(v115);
                      while (__stxr(v116 + 1, v115));
                    }
                    v117 = &v95[248 * v94];
                    v118 = *((_OWORD *)v117 + 2);
                    v119 = *((_OWORD *)v117 + 3);
                    v120 = *((_OWORD *)v117 + 5);
                    v112[4] = *((_OWORD *)v117 + 4);
                    v112[5] = v120;
                    v112[2] = v118;
                    v112[3] = v119;
                    v112[6] = *((_OWORD *)v117 + 6);
                    v121 = *((_OWORD *)v117 + 7);
                    v122 = *((_OWORD *)v117 + 8);
                    v123 = *((_OWORD *)v117 + 10);
                    v112[9] = *((_OWORD *)v117 + 9);
                    v112[10] = v123;
                    v112[7] = v121;
                    v112[8] = v122;
                    v124 = *((_OWORD *)v117 + 11);
                    v125 = *((_OWORD *)v117 + 12);
                    v126 = *((_OWORD *)v117 + 14);
                    v112[13] = *((_OWORD *)v117 + 13);
                    v112[14] = v126;
                    v112[11] = v124;
                    v112[12] = v125;
                    *((_WORD *)v112 + 120) = *((_WORD *)v117 + 120);
                    v93 = (char *)v112 + 248;
                  }
                  v210 = v93;
                }
                else
                {
                  v97 = v207;
                  if ((unint64_t)v207 >= v208)
                  {
                    v207 = sub_22356EF88((char **)&__p, (uint64_t)v96);
                  }
                  else
                  {
                    *(_OWORD *)v207 = *v96;
                    v98 = &v95[248 * v94];
                    *((_QWORD *)v97 + 2) = *((_QWORD *)v98 + 2);
                    v99 = *((_QWORD *)v98 + 3);
                    *((_QWORD *)v97 + 3) = v99;
                    if (v99)
                    {
                      v100 = (unint64_t *)(v99 + 8);
                      do
                        v101 = __ldxr(v100);
                      while (__stxr(v101 + 1, v100));
                    }
                    v102 = &v95[248 * v94];
                    v103 = *((_OWORD *)v102 + 2);
                    v104 = *((_OWORD *)v102 + 3);
                    v105 = *((_OWORD *)v102 + 5);
                    *((_OWORD *)v97 + 4) = *((_OWORD *)v102 + 4);
                    *((_OWORD *)v97 + 5) = v105;
                    *((_OWORD *)v97 + 2) = v103;
                    *((_OWORD *)v97 + 3) = v104;
                    *((_OWORD *)v97 + 6) = *((_OWORD *)v102 + 6);
                    v106 = *((_OWORD *)v102 + 7);
                    v107 = *((_OWORD *)v102 + 8);
                    v108 = *((_OWORD *)v102 + 10);
                    *((_OWORD *)v97 + 9) = *((_OWORD *)v102 + 9);
                    *((_OWORD *)v97 + 10) = v108;
                    *((_OWORD *)v97 + 7) = v106;
                    *((_OWORD *)v97 + 8) = v107;
                    v109 = *((_OWORD *)v102 + 11);
                    v110 = *((_OWORD *)v102 + 12);
                    v111 = *((_OWORD *)v102 + 14);
                    *((_OWORD *)v97 + 13) = *((_OWORD *)v102 + 13);
                    *((_OWORD *)v97 + 14) = v111;
                    *((_OWORD *)v97 + 11) = v109;
                    *((_OWORD *)v97 + 12) = v110;
                    *((_WORD *)v97 + 120) = *((_WORD *)v102 + 120);
                    v207 = v97 + 248;
                  }
                }
                v92 += 2;
              }
              while (v92 != v51);
            }
            kdebug_trace();
            if (v50)
              operator delete(v50);
            v127 = (char *)__p;
            v128 = v207;
            if (__p != v207)
            {
              v129 = (char *)a5[1];
              do
              {
                if ((unint64_t)v129 < a5[2])
                {
                  *(_OWORD *)v129 = *(_OWORD *)v127;
                  *((_OWORD *)v129 + 1) = *((_OWORD *)v127 + 1);
                  *((_QWORD *)v127 + 2) = 0;
                  *((_QWORD *)v127 + 3) = 0;
                  v130 = *((_OWORD *)v127 + 2);
                  v131 = *((_OWORD *)v127 + 3);
                  v132 = *((_OWORD *)v127 + 5);
                  *((_OWORD *)v129 + 4) = *((_OWORD *)v127 + 4);
                  *((_OWORD *)v129 + 5) = v132;
                  *((_OWORD *)v129 + 2) = v130;
                  *((_OWORD *)v129 + 3) = v131;
                  *((_OWORD *)v129 + 6) = *((_OWORD *)v127 + 6);
                  v133 = *((_OWORD *)v127 + 7);
                  v134 = *((_OWORD *)v127 + 8);
                  v135 = *((_OWORD *)v127 + 10);
                  *((_OWORD *)v129 + 9) = *((_OWORD *)v127 + 9);
                  *((_OWORD *)v129 + 10) = v135;
                  *((_OWORD *)v129 + 7) = v133;
                  *((_OWORD *)v129 + 8) = v134;
                  v136 = *((_OWORD *)v127 + 11);
                  v137 = *((_OWORD *)v127 + 12);
                  v138 = *((_OWORD *)v127 + 14);
                  *((_OWORD *)v129 + 13) = *((_OWORD *)v127 + 13);
                  *((_OWORD *)v129 + 14) = v138;
                  *((_OWORD *)v129 + 11) = v136;
                  *((_OWORD *)v129 + 12) = v137;
                  *((_WORD *)v129 + 120) = *((_WORD *)v127 + 120);
                  v129 += 248;
                }
                else
                {
                  v129 = sub_22356F1F8((void **)a5, (uint64_t)v127);
                }
                a5[1] = (uint64_t)v129;
                v127 += 248;
              }
              while (v127 != v128);
              v127 = (char *)__p;
            }
            if (v127)
            {
              v139 = v207;
              v140 = v127;
              if (v207 != v127)
              {
                do
                {
                  v141 = (std::__shared_weak_count *)*((_QWORD *)v139 - 28);
                  if (v141)
                  {
                    v142 = (unint64_t *)&v141->__shared_owners_;
                    do
                      v143 = __ldaxr(v142);
                    while (__stlxr(v143 - 1, v142));
                    if (!v143)
                    {
                      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                      std::__shared_weak_count::__release_weak(v141);
                    }
                  }
                  v139 -= 248;
                }
                while (v139 != v127);
                v140 = __p;
              }
              v207 = v127;
              operator delete(v140);
            }
            goto LABEL_99;
          }
        }
        else
        {
          v57 = 0;
        }
        v89 = &v49->i8[8 * v57 + 4];
        do
        {
          *((_DWORD *)v89 - 1) = 1065353216;
          *(_DWORD *)v89 = v57++;
          v89 += 8;
        }
        while (v48 != v57);
        goto LABEL_59;
      }
    }
    if (a4)
    {
      v58 = *a3 * *a3;
      if (v45 == v46)
        goto LABEL_59;
    }
    else
    {
      v58 = 3.4028e38;
      if (v45 == v46)
        goto LABEL_59;
    }
    v59 = 0;
    v39.i64[0] = *(_QWORD *)(a1 + 48);
    v60.i32[0] = *(_DWORD *)(a1 + 8);
    v39.i32[2] = *(_DWORD *)(a1 + 56);
    v61 = (int8x16_t)vsubq_f32((float32x4_t)xmmword_22466E100, v39);
    v40.i32[0] = *(_DWORD *)(a1 + 40);
    v60.i32[1] = *(_DWORD *)(a1 + 24);
    *(float32x2_t *)v62.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)a1, *(int32x2_t *)(a1 + 16)), *(float *)v61.i32), (float32x2_t)vzip2_s32(*(int32x2_t *)a1, *(int32x2_t *)(a1 + 16)), *(float32x2_t *)v61.i8, 1), v60, (float32x4_t)v61, 2);
    *(float32x2_t *)&v62.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 32), *(float32x2_t *)v61.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1), *(float32x2_t *)(a1 + 32), 1), (float32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL), v40);
    v205 = v62;
    v200 = v50;
    v63 = v50 + 1;
    do
    {
      v64 = (uint64_t)v46[2];
      if (!v64)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyframeBacklogger.cpp", 207, (uint64_t)"kf_data.keyframe", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v64 = (uint64_t)v46[2];
      }
      v65 = sub_2231CC494(v64);
      v66.f32[0] = (float)(*(float *)(v65 + 12) + *(float *)(v65 + 8)) * 0.5;
      v67.i32[0] = v46[5].i32[0];
      v68.i32[0] = v46[7].i32[0];
      v69.i32[0] = v46[9].i32[0];
      *(float32x2_t *)v70.f32 = vmla_n_f32(vmla_f32(vmul_f32(v46[4], 0), 0, v46[6]), v46[8], v66.f32[0]);
      *(float32x2_t *)&v70.u32[2] = vmla_f32(vmla_f32(vmul_f32(v67, 0), 0, v68), v66, v69);
      *(float32x2_t *)v71.f32 = v46[10];
      v71.i32[2] = v46[11].i32[0];
      v72 = (int8x16_t)vsubq_f32(v205, vaddq_f32(v71, v70));
      v73 = (float32x2_t)vextq_s8(v72, v72, 8uLL).u64[0];
      v74 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v72.i8, *(float32x2_t *)v72.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v72.i8, 1), *(float32x2_t *)v72.i8, 1), v73, v73).f32[0];
      v75 = 3.4028e38;
      if (v74 < v58)
        v75 = v74;
      *(v63 - 1) = v75;
      *(_DWORD *)v63 = v59;
      v63 += 2;
      v46 += 31;
      ++v59;
    }
    while (v46 != v45);
    v50 = v200;
    goto LABEL_59;
  }
LABEL_99:
  v145 = v209;
  v144 = v210;
  v146 = v212;
  v147 = v213;
  if (v212 == v213)
  {
    v159 = v210;
    v158 = (char *)v209;
    if (v209 == v210)
      goto LABEL_114;
    goto LABEL_108;
  }
  v148 = (char *)a5[1];
  do
  {
    if ((unint64_t)v148 < a5[2])
    {
      *(_OWORD *)v148 = *v146;
      *((_OWORD *)v148 + 1) = v146[1];
      *((_QWORD *)v146 + 2) = 0;
      *((_QWORD *)v146 + 3) = 0;
      v149 = v146[2];
      v150 = v146[3];
      v151 = v146[5];
      *((_OWORD *)v148 + 4) = v146[4];
      *((_OWORD *)v148 + 5) = v151;
      *((_OWORD *)v148 + 2) = v149;
      *((_OWORD *)v148 + 3) = v150;
      *((_OWORD *)v148 + 6) = v146[6];
      v152 = v146[7];
      v153 = v146[8];
      v154 = v146[10];
      *((_OWORD *)v148 + 9) = v146[9];
      *((_OWORD *)v148 + 10) = v154;
      *((_OWORD *)v148 + 7) = v152;
      *((_OWORD *)v148 + 8) = v153;
      v155 = v146[11];
      v156 = v146[12];
      v157 = v146[14];
      *((_OWORD *)v148 + 13) = v146[13];
      *((_OWORD *)v148 + 14) = v157;
      *((_OWORD *)v148 + 11) = v155;
      *((_OWORD *)v148 + 12) = v156;
      *((_WORD *)v148 + 120) = *((_WORD *)v146 + 120);
      v148 += 248;
    }
    else
    {
      v148 = sub_22356F1F8((void **)a5, (uint64_t)v146);
    }
    a5[1] = (uint64_t)v148;
    v146 = (_OWORD *)((char *)v146 + 248);
  }
  while (v146 != (_OWORD *)v147);
  v158 = (char *)v209;
  v159 = v210;
  if (v209 != v210)
  {
LABEL_108:
    v160 = (char *)a5[1];
    do
    {
      if ((unint64_t)v160 < a5[2])
      {
        *(_OWORD *)v160 = *(_OWORD *)v158;
        *((_OWORD *)v160 + 1) = *((_OWORD *)v158 + 1);
        *((_QWORD *)v158 + 2) = 0;
        *((_QWORD *)v158 + 3) = 0;
        v161 = *((_OWORD *)v158 + 2);
        v162 = *((_OWORD *)v158 + 3);
        v163 = *((_OWORD *)v158 + 5);
        *((_OWORD *)v160 + 4) = *((_OWORD *)v158 + 4);
        *((_OWORD *)v160 + 5) = v163;
        *((_OWORD *)v160 + 2) = v161;
        *((_OWORD *)v160 + 3) = v162;
        *((_OWORD *)v160 + 6) = *((_OWORD *)v158 + 6);
        v164 = *((_OWORD *)v158 + 7);
        v165 = *((_OWORD *)v158 + 8);
        v166 = *((_OWORD *)v158 + 10);
        *((_OWORD *)v160 + 9) = *((_OWORD *)v158 + 9);
        *((_OWORD *)v160 + 10) = v166;
        *((_OWORD *)v160 + 7) = v164;
        *((_OWORD *)v160 + 8) = v165;
        v167 = *((_OWORD *)v158 + 11);
        v168 = *((_OWORD *)v158 + 12);
        v169 = *((_OWORD *)v158 + 14);
        *((_OWORD *)v160 + 13) = *((_OWORD *)v158 + 13);
        *((_OWORD *)v160 + 14) = v169;
        *((_OWORD *)v160 + 11) = v167;
        *((_OWORD *)v160 + 12) = v168;
        *((_WORD *)v160 + 120) = *((_WORD *)v158 + 120);
        v160 += 248;
      }
      else
      {
        v160 = sub_22356F1F8((void **)a5, (uint64_t)v158);
      }
      a5[1] = (uint64_t)v160;
      v158 += 248;
    }
    while (v158 != v159);
    v159 = (char *)v209;
  }
LABEL_114:
  if (v159)
  {
    v170 = v210;
    v171 = v159;
    if (v210 != v159)
    {
      do
      {
        v172 = (std::__shared_weak_count *)*((_QWORD *)v170 - 28);
        if (v172)
        {
          v173 = (unint64_t *)&v172->__shared_owners_;
          do
            v174 = __ldaxr(v173);
          while (__stlxr(v174 - 1, v173));
          if (!v174)
          {
            ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
            std::__shared_weak_count::__release_weak(v172);
          }
        }
        v170 -= 248;
      }
      while (v170 != v159);
      v171 = v209;
    }
    v210 = v159;
    operator delete(v171);
  }
  v175 = (char *)v212;
  if (v212)
  {
    v176 = v213;
    v177 = v212;
    if (v213 != v212)
    {
      do
      {
        v178 = (std::__shared_weak_count *)*((_QWORD *)v176 - 28);
        if (v178)
        {
          v179 = (unint64_t *)&v178->__shared_owners_;
          do
            v180 = __ldaxr(v179);
          while (__stlxr(v180 - 1, v179));
          if (!v180)
          {
            ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
            std::__shared_weak_count::__release_weak(v178);
          }
        }
        v176 -= 248;
      }
      while (v176 != v175);
      v177 = v212;
    }
    v213 = v175;
    operator delete(v177);
  }
  v181 = (float32x2_t *)v215;
  if (v215)
  {
    v182 = v216;
    v183 = v215;
    if (v216 != v215)
    {
      do
      {
        v184 = (std::__shared_weak_count *)v182[-28];
        if (v184)
        {
          v185 = (unint64_t *)&v184->__shared_owners_;
          do
            v186 = __ldaxr(v185);
          while (__stlxr(v186 - 1, v185));
          if (!v186)
          {
            ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
            std::__shared_weak_count::__release_weak(v184);
          }
        }
        v182 -= 31;
      }
      while (v182 != v181);
      v183 = v215;
    }
    v216 = v181;
    operator delete(v183);
  }
  v187 = (char *)v218;
  if (v218)
  {
    v188 = v219;
    v189 = v218;
    if (v219 != v218)
    {
      do
      {
        v190 = (std::__shared_weak_count *)*((_QWORD *)v188 - 28);
        if (v190)
        {
          v191 = (unint64_t *)&v190->__shared_owners_;
          do
            v192 = __ldaxr(v191);
          while (__stlxr(v192 - 1, v191));
          if (!v192)
          {
            ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
            std::__shared_weak_count::__release_weak(v190);
          }
        }
        v188 -= 248;
      }
      while (v188 != v187);
      v189 = v218;
    }
    v219 = v187;
    operator delete(v189);
  }
  v193 = v221;
  if (v221)
  {
    v194 = v222;
    v195 = v221;
    if (v222 != v221)
    {
      do
      {
        v196 = (std::__shared_weak_count *)*((_QWORD *)v194 - 28);
        if (v196)
        {
          v197 = (unint64_t *)&v196->__shared_owners_;
          do
            v198 = __ldaxr(v197);
          while (__stlxr(v198 - 1, v197));
          if (!v198)
          {
            ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
            std::__shared_weak_count::__release_weak(v196);
          }
        }
        v194 -= 248;
      }
      while (v194 != v193);
      v195 = v221;
    }
    v222 = v193;
    operator delete(v195);
  }
  return (-1108378657 * ((unint64_t)(v204 - v203) >> 3)) | ((unint64_t)(-1108378657 * ((unint64_t)(v10 - v11) >> 3)
                                                                                                  + 1108378657 * ((unint64_t)(v144 - v145) >> 3)) << 32);
}

void sub_223C94098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29)
{
  uint64_t v29;

  sub_223473EA8(&a17);
  sub_223473EA8(&a20);
  sub_223473EA8(&a23);
  sub_223473EA8(&a26);
  sub_223473EA8(&a29);
  sub_223473EA8((void **)(v29 - 152));
  _Unwind_Resume(a1);
}

unint64_t sub_223C94118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  _BYTE *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD *v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  char *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  char *v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  void *__p;
  char *v80;
  uint64_t v81;
  void *v82;
  char *v83;
  uint64_t v84;
  void *v85;
  char *v86;
  uint64_t v87;
  void *v88;
  char *v89;
  uint64_t v90;

  v88 = 0;
  v89 = 0;
  v90 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  __p = 0;
  v80 = 0;
  v81 = 0;
  sub_223C920D8(a5, (uint64_t)&v88, (uint64_t)&v85, (uint64_t)&v82, (uint64_t)&__p);
  v7 = v88;
  v6 = v89;
  v8 = *a5;
  v9 = a5[1];
  v10 = v9 - *a5;
  if (v9 == *a5)
  {
    v11 = v89;
    v12 = v88;
  }
  else
  {
    do
    {
      v13 = *(std::__shared_weak_count **)(v9 - 224);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v9 -= 248;
    }
    while (v9 != v8);
    v12 = v88;
    v11 = v89;
  }
  a5[1] = v8;
  while (v12 != v11)
  {
    if (v8 < a5[2])
    {
      *(_OWORD *)v8 = *v12;
      *(_OWORD *)(v8 + 16) = v12[1];
      *((_QWORD *)v12 + 2) = 0;
      *((_QWORD *)v12 + 3) = 0;
      v16 = v12[2];
      v17 = v12[3];
      v18 = v12[5];
      *(_OWORD *)(v8 + 64) = v12[4];
      *(_OWORD *)(v8 + 80) = v18;
      *(_OWORD *)(v8 + 32) = v16;
      *(_OWORD *)(v8 + 48) = v17;
      *(_OWORD *)(v8 + 96) = v12[6];
      v19 = v12[7];
      v20 = v12[8];
      v21 = v12[10];
      *(_OWORD *)(v8 + 144) = v12[9];
      *(_OWORD *)(v8 + 160) = v21;
      *(_OWORD *)(v8 + 112) = v19;
      *(_OWORD *)(v8 + 128) = v20;
      v22 = v12[11];
      v23 = v12[12];
      v24 = v12[14];
      *(_OWORD *)(v8 + 208) = v12[13];
      *(_OWORD *)(v8 + 224) = v24;
      *(_OWORD *)(v8 + 176) = v22;
      *(_OWORD *)(v8 + 192) = v23;
      *(_WORD *)(v8 + 240) = *((_WORD *)v12 + 120);
      v8 += 248;
    }
    else
    {
      v8 = (unint64_t)sub_22356F1F8((void **)a5, (uint64_t)v12);
    }
    a5[1] = v8;
    v12 = (_OWORD *)((char *)v12 + 248);
  }
  v25 = v85;
  v26 = v86;
  while (v25 != v26)
  {
    if (v8 < a5[2])
    {
      *(_OWORD *)v8 = *v25;
      *(_OWORD *)(v8 + 16) = v25[1];
      *((_QWORD *)v25 + 2) = 0;
      *((_QWORD *)v25 + 3) = 0;
      v27 = v25[2];
      v28 = v25[3];
      v29 = v25[5];
      *(_OWORD *)(v8 + 64) = v25[4];
      *(_OWORD *)(v8 + 80) = v29;
      *(_OWORD *)(v8 + 32) = v27;
      *(_OWORD *)(v8 + 48) = v28;
      *(_OWORD *)(v8 + 96) = v25[6];
      v30 = v25[7];
      v31 = v25[8];
      v32 = v25[10];
      *(_OWORD *)(v8 + 144) = v25[9];
      *(_OWORD *)(v8 + 160) = v32;
      *(_OWORD *)(v8 + 112) = v30;
      *(_OWORD *)(v8 + 128) = v31;
      v33 = v25[11];
      v34 = v25[12];
      v35 = v25[14];
      *(_OWORD *)(v8 + 208) = v25[13];
      *(_OWORD *)(v8 + 224) = v35;
      *(_OWORD *)(v8 + 176) = v33;
      *(_OWORD *)(v8 + 192) = v34;
      *(_WORD *)(v8 + 240) = *((_WORD *)v25 + 120);
      v8 += 248;
    }
    else
    {
      v8 = (unint64_t)sub_22356F1F8((void **)a5, (uint64_t)v25);
    }
    a5[1] = v8;
    v25 = (_OWORD *)((char *)v25 + 248);
  }
  v36 = v82;
  v37 = v83;
  while (v36 != v37)
  {
    if (v8 < a5[2])
    {
      *(_OWORD *)v8 = *v36;
      *(_OWORD *)(v8 + 16) = v36[1];
      *((_QWORD *)v36 + 2) = 0;
      *((_QWORD *)v36 + 3) = 0;
      v38 = v36[2];
      v39 = v36[3];
      v40 = v36[5];
      *(_OWORD *)(v8 + 64) = v36[4];
      *(_OWORD *)(v8 + 80) = v40;
      *(_OWORD *)(v8 + 32) = v38;
      *(_OWORD *)(v8 + 48) = v39;
      *(_OWORD *)(v8 + 96) = v36[6];
      v41 = v36[7];
      v42 = v36[8];
      v43 = v36[10];
      *(_OWORD *)(v8 + 144) = v36[9];
      *(_OWORD *)(v8 + 160) = v43;
      *(_OWORD *)(v8 + 112) = v41;
      *(_OWORD *)(v8 + 128) = v42;
      v44 = v36[11];
      v45 = v36[12];
      v46 = v36[14];
      *(_OWORD *)(v8 + 208) = v36[13];
      *(_OWORD *)(v8 + 224) = v46;
      *(_OWORD *)(v8 + 176) = v44;
      *(_OWORD *)(v8 + 192) = v45;
      *(_WORD *)(v8 + 240) = *((_WORD *)v36 + 120);
      v8 += 248;
    }
    else
    {
      v8 = (unint64_t)sub_22356F1F8((void **)a5, (uint64_t)v36);
    }
    a5[1] = v8;
    v36 = (_OWORD *)((char *)v36 + 248);
  }
  v47 = (char *)__p;
  v48 = v80;
  if (__p == v80)
  {
    if (!__p)
      goto LABEL_30;
  }
  else
  {
    do
    {
      while (v8 < a5[2])
      {
        *(_OWORD *)v8 = *(_OWORD *)v47;
        *(_OWORD *)(v8 + 16) = *((_OWORD *)v47 + 1);
        *((_QWORD *)v47 + 2) = 0;
        *((_QWORD *)v47 + 3) = 0;
        v52 = *((_OWORD *)v47 + 2);
        v53 = *((_OWORD *)v47 + 3);
        v54 = *((_OWORD *)v47 + 5);
        *(_OWORD *)(v8 + 64) = *((_OWORD *)v47 + 4);
        *(_OWORD *)(v8 + 80) = v54;
        *(_OWORD *)(v8 + 32) = v52;
        *(_OWORD *)(v8 + 48) = v53;
        *(_OWORD *)(v8 + 96) = *((_OWORD *)v47 + 6);
        v55 = *((_OWORD *)v47 + 7);
        v56 = *((_OWORD *)v47 + 8);
        v57 = *((_OWORD *)v47 + 10);
        *(_OWORD *)(v8 + 144) = *((_OWORD *)v47 + 9);
        *(_OWORD *)(v8 + 160) = v57;
        *(_OWORD *)(v8 + 112) = v55;
        *(_OWORD *)(v8 + 128) = v56;
        v58 = *((_OWORD *)v47 + 11);
        v59 = *((_OWORD *)v47 + 12);
        v60 = *((_OWORD *)v47 + 14);
        *(_OWORD *)(v8 + 208) = *((_OWORD *)v47 + 13);
        *(_OWORD *)(v8 + 224) = v60;
        *(_OWORD *)(v8 + 176) = v58;
        *(_OWORD *)(v8 + 192) = v59;
        *(_WORD *)(v8 + 240) = *((_WORD *)v47 + 120);
        v8 += 248;
        a5[1] = v8;
        v47 += 248;
        if (v47 == v48)
          goto LABEL_37;
      }
      v8 = (unint64_t)sub_22356F1F8((void **)a5, (uint64_t)v47);
      a5[1] = v8;
      v47 += 248;
    }
    while (v47 != v48);
LABEL_37:
    v47 = (char *)__p;
    if (!__p)
    {
LABEL_30:
      v49 = (char *)v82;
      if (!v82)
        goto LABEL_31;
LABEL_48:
      v65 = v83;
      if (v83 == v49)
      {
        v83 = v49;
        operator delete(v49);
        v50 = (char *)v85;
        if (v85)
          goto LABEL_58;
      }
      else
      {
        do
        {
          v66 = (std::__shared_weak_count *)*((_QWORD *)v65 - 28);
          if (v66)
          {
            v67 = (unint64_t *)&v66->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          v65 -= 248;
        }
        while (v65 != v49);
        v83 = v49;
        operator delete(v82);
        v50 = (char *)v85;
        if (v85)
          goto LABEL_58;
      }
LABEL_32:
      v51 = (char *)v88;
      if (!v88)
        return (-1108378657 * ((unint64_t)(v6 - v7) >> 3)) | ((unint64_t)(-1108378657 * (v10 >> 3)) << 32);
      goto LABEL_68;
    }
  }
  v61 = v80;
  if (v80 == v47)
  {
    v80 = v47;
    operator delete(v47);
    v49 = (char *)v82;
    if (v82)
      goto LABEL_48;
  }
  else
  {
    do
    {
      v62 = (std::__shared_weak_count *)*((_QWORD *)v61 - 28);
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v61 -= 248;
    }
    while (v61 != v47);
    v80 = v47;
    operator delete(__p);
    v49 = (char *)v82;
    if (v82)
      goto LABEL_48;
  }
LABEL_31:
  v50 = (char *)v85;
  if (!v85)
    goto LABEL_32;
LABEL_58:
  v69 = v86;
  if (v86 == v50)
  {
    v86 = v50;
    operator delete(v50);
    v51 = (char *)v88;
    if (!v88)
      return (-1108378657 * ((unint64_t)(v6 - v7) >> 3)) | ((unint64_t)(-1108378657
                                                                                                  * (v10 >> 3)) << 32);
    goto LABEL_68;
  }
  do
  {
    v70 = (std::__shared_weak_count *)*((_QWORD *)v69 - 28);
    if (v70)
    {
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v69 -= 248;
  }
  while (v69 != v50);
  v86 = v50;
  operator delete(v85);
  v51 = (char *)v88;
  if (v88)
  {
LABEL_68:
    v73 = v89;
    v74 = v51;
    if (v89 != v51)
    {
      do
      {
        v75 = (std::__shared_weak_count *)*((_QWORD *)v73 - 28);
        if (v75)
        {
          v76 = (unint64_t *)&v75->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        v73 -= 248;
      }
      while (v73 != v51);
      v74 = v88;
    }
    v89 = v51;
    operator delete(v74);
  }
  return (-1108378657 * ((unint64_t)(v6 - v7) >> 3)) | ((unint64_t)(-1108378657
                                                                                              * (v10 >> 3)) << 32);
}

void sub_223C94674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18)
{
  sub_223473EA8(&a9);
  sub_223473EA8(&a12);
  sub_223473EA8(&a15);
  sub_223473EA8(&a18);
  _Unwind_Resume(a1);
}

double sub_223C946B0(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  return result;
}

void sub_223C946C4(_QWORD *a1, uint64_t *a2, int a3)
{
  unint64_t v3;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char *v9;
  uint64_t *v10;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  char *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  int v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned __int8 *v46;
  BOOL v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint8x8_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v58;
  uint64_t v60;
  _QWORD *v61;
  float v62;
  uint64_t v63;
  _QWORD *v64;
  _BOOL8 v65;
  unint64_t v66;
  unint64_t v67;
  size_t prime;
  unint64_t v69;
  uint8x8_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char *v85;
  uint64_t *v86;
  _OWORD *v87;
  _OWORD *v88;
  _OWORD *v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  BOOL v93;
  char *v94;
  char *v95;
  unsigned __int8 *v96;
  int v97;
  unsigned __int8 *v98;
  uint64_t v99;
  int v100;
  unsigned __int8 *v101;
  int v102;
  BOOL v103;
  char v104;
  char v106;
  char *v107;
  char **v108;
  char **v109;
  unint64_t v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  char *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  unsigned __int8 *v140;
  char *v141;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  unsigned int v146;
  unsigned int v147;
  unsigned __int8 *v148;
  _QWORD *v149;
  _QWORD *v150;
  void *v151;
  char *v152;
  char *v153;
  void *v154;
  std::__shared_weak_count *v155;
  unint64_t *p_shared_owners;
  unint64_t v157;
  char *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  char *v168;
  char *v169;
  unsigned __int8 *v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  unsigned __int8 *v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  unsigned __int8 *v192;
  unsigned __int8 *v193;
  unsigned __int8 *v194;
  unsigned int v195;
  unsigned int v196;
  unsigned __int8 *v197;
  unsigned __int8 *v199;
  unsigned __int8 v200;
  uint64_t v201;
  unsigned __int8 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  unsigned __int8 **v207;
  void *__p;
  char *v209;
  unint64_t v210;
  unsigned __int8 *v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;

  v224 = *MEMORY[0x24BDAC8D0];
  v6 = (unsigned __int8 **)(a1 + 1);
  if (!a3)
  {
    sub_223260C0C(&__p, a2);
    v35 = (unsigned __int8 *)a1[1];
    v34 = (unsigned __int8 *)a1[2];
    if (v35 == v34)
      goto LABEL_267;
LABEL_44:
    v207 = v6;
    sub_223C91D90((uint64_t)&v216, v35, v34, (uint64_t)&__p);
    v220 = 0u;
    v221 = 0u;
    LODWORD(v222) = 1065353216;
    v36 = (unsigned __int8 *)a1[1];
    v37 = (unsigned __int8 *)a1[2];
    if (v36 != v37)
    {
      v38 = (unsigned __int8 *)*((_QWORD *)&v216 + 1);
      if (*((_QWORD *)&v216 + 1))
      {
        v39 = 0;
LABEL_48:
        v40 = (unsigned __int8 *)&v216 + 8;
        do
        {
          v41 = v38;
          v42 = v40;
          v43 = v38[25];
          v44 = *v36;
          if (v43 != v44)
            goto LABEL_66;
          v43 = v41[26];
          v44 = v36[1];
          if (v43 != v44)
            goto LABEL_66;
          v43 = v41[27];
          v44 = v36[2];
          if (v43 != v44)
            goto LABEL_66;
          v43 = v41[28];
          v44 = v36[3];
          if (v43 != v44)
            goto LABEL_66;
          v43 = v41[29];
          v44 = v36[4];
          if (v43 != v44)
            goto LABEL_66;
          v43 = v41[30];
          v44 = v36[5];
          if (v43 != v44)
            goto LABEL_66;
          v43 = v41[31];
          v44 = v36[6];
          if (v43 != v44)
            goto LABEL_66;
          v43 = v41[32];
          v44 = v36[7];
          if (v43 != v44)
            goto LABEL_66;
          v43 = v41[33];
          v44 = v36[8];
          if (v43 != v44)
            goto LABEL_66;
          v43 = v41[34];
          v44 = v36[9];
          if (v43 != v44)
            goto LABEL_66;
          v43 = v41[35];
          v44 = v36[10];
          if (v43 != v44)
            goto LABEL_66;
          v43 = v41[36];
          v44 = v36[11];
          if (v43 != v44)
            goto LABEL_66;
          v43 = v41[37];
          v44 = v36[12];
          if (v43 != v44)
            goto LABEL_66;
          v43 = v41[38];
          v44 = v36[13];
          if (v43 == v44 && (v43 = v41[39], v44 = v36[14], v43 == v44) && (v43 = v41[40], v44 = v36[15], v43 == v44))
          {
            v45 = 0;
            v46 = v41;
            v40 = v41;
          }
          else
          {
LABEL_66:
            v47 = v43 >= v44;
            v46 = v41 + 8;
            if (v47)
            {
              v46 = v41;
              v45 = 0;
            }
            else
            {
              v45 = 1;
            }
            if (v47)
              v40 = v41;
          }
          v38 = *(unsigned __int8 **)v46;
        }
        while (v38);
        if (v40 != (unsigned __int8 *)((char *)&v216 + 8))
        {
          v48 = v41 + 25;
          v49 = v42 + 25;
          v50 = v45 ? v49 : v48;
          if (((char)sub_22319835C(v36, v50) & 0x80000000) == 0)
          {
            v51 = sub_22456636C(v36);
            v52 = v51;
            v53 = *((_QWORD *)&v220 + 1);
            if (*((_QWORD *)&v220 + 1))
            {
              v54 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v220 + 8));
              v54.i16[0] = vaddlv_u8(v54);
              if (v54.u32[0] > 1uLL)
              {
                v3 = v51;
                if (v51 >= *((_QWORD *)&v220 + 1))
                  v3 = v51 % *((_QWORD *)&v220 + 1);
              }
              else
              {
                v3 = (*((_QWORD *)&v220 + 1) - 1) & v51;
              }
              v55 = *(_QWORD **)(v220 + 8 * v3);
              if (v55)
              {
                v56 = (_QWORD *)*v55;
                if (v56)
                {
                  if (v54.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v60 = v56[1];
                      if (v60 == v51)
                      {
                        if (v56[2] == *(_QWORD *)v36 && v56[3] == *((_QWORD *)v36 + 1))
                          goto LABEL_143;
                      }
                      else if ((v60 & (*((_QWORD *)&v220 + 1) - 1)) != v3)
                      {
                        goto LABEL_103;
                      }
                      v56 = (_QWORD *)*v56;
                      if (!v56)
                        goto LABEL_103;
                    }
                  }
                  do
                  {
                    v58 = v56[1];
                    if (v58 == v51)
                    {
                      if (v56[2] == *(_QWORD *)v36 && v56[3] == *((_QWORD *)v36 + 1))
                        goto LABEL_143;
                    }
                    else
                    {
                      if (v58 >= *((_QWORD *)&v220 + 1))
                        v58 %= *((_QWORD *)&v220 + 1);
                      if (v58 != v3)
                        break;
                    }
                    v56 = (_QWORD *)*v56;
                  }
                  while (v56);
                }
              }
            }
LABEL_103:
            v61 = operator new(0x28uLL);
            *v61 = 0;
            v61[1] = v52;
            *((_OWORD *)v61 + 1) = *(_OWORD *)v36;
            *((_DWORD *)v61 + 8) = v39;
            v62 = (float)(unint64_t)(*((_QWORD *)&v221 + 1) + 1);
            if (v53 && (float)(*(float *)&v222 * (float)v53) >= v62)
            {
              v63 = v220;
              v64 = *(_QWORD **)(v220 + 8 * v3);
              if (v64)
              {
LABEL_106:
                *v61 = *v64;
                goto LABEL_141;
              }
            }
            else
            {
              v65 = (v53 & (v53 - 1)) != 0;
              if (v53 < 3)
                v65 = 1;
              v66 = v65 | (2 * v53);
              v67 = vcvtps_u32_f32(v62 / *(float *)&v222);
              if (v66 <= v67)
                prime = v67;
              else
                prime = v66;
              if (prime == 1)
              {
                prime = 2;
              }
              else if ((prime & (prime - 1)) != 0)
              {
                prime = std::__next_prime(prime);
                v53 = *((_QWORD *)&v220 + 1);
              }
              if (prime > v53)
                goto LABEL_117;
              if (prime < v53)
              {
                v69 = vcvtps_u32_f32((float)*((unint64_t *)&v221 + 1) / *(float *)&v222);
                if (v53 < 3
                  || (v70 = (uint8x8_t)vcnt_s8((int8x8_t)v53), v70.i16[0] = vaddlv_u8(v70), v70.u32[0] > 1uLL))
                {
                  v69 = std::__next_prime(v69);
                }
                else
                {
                  v71 = 1 << -(char)__clz(v69 - 1);
                  if (v69 >= 2)
                    v69 = v71;
                }
                if (prime <= v69)
                  prime = v69;
                if (prime < v53)
LABEL_117:
                  sub_2231B0668((uint64_t)&v220, prime);
              }
              v53 = *((_QWORD *)&v220 + 1);
              v72 = *((_QWORD *)&v220 + 1) - 1;
              if ((v53 & (v53 - 1)) != 0)
              {
                if (v52 >= *((_QWORD *)&v220 + 1))
                {
                  v3 = v52 % *((_QWORD *)&v220 + 1);
                  v63 = v220;
                  v64 = *(_QWORD **)(v220 + 8 * (v52 % *((_QWORD *)&v220 + 1)));
                  if (v64)
                    goto LABEL_106;
                }
                else
                {
                  v3 = v52;
                  v63 = v220;
                  v64 = *(_QWORD **)(v220 + 8 * v52);
                  if (v64)
                    goto LABEL_106;
                }
              }
              else
              {
                v3 = v72 & v52;
                v63 = v220;
                v64 = *(_QWORD **)(v220 + 8 * (v72 & v52));
                if (v64)
                  goto LABEL_106;
              }
            }
            *v61 = v221;
            *(_QWORD *)&v221 = v61;
            *(_QWORD *)(v63 + 8 * v3) = &v221;
            if (!*v61)
            {
LABEL_142:
              ++*((_QWORD *)&v221 + 1);
              goto LABEL_143;
            }
            v73 = *(_QWORD *)(*v61 + 8);
            if ((v53 & (v53 - 1)) != 0)
            {
              if (v73 >= v53)
                v73 %= v53;
            }
            else
            {
              v73 &= v53 - 1;
            }
            v64 = (_QWORD *)(v220 + 8 * v73);
LABEL_141:
            *v64 = v61;
            goto LABEL_142;
          }
        }
LABEL_143:
        while (1)
        {
          v36 += 232;
          if (v36 == v37)
            break;
          ++v39;
          v38 = (unsigned __int8 *)*((_QWORD *)&v216 + 1);
          if (*((_QWORD *)&v216 + 1))
            goto LABEL_48;
        }
      }
    }
    *((_QWORD *)&v212 + 1) = 0;
    *(_QWORD *)&v213 = 0;
    *(_QWORD *)&v212 = (char *)&v212 + 8;
    v74 = (unsigned __int8 *)__p;
    v75 = (unsigned __int8 *)v209;
    if (__p != v209)
    {
      do
      {
        v86 = (uint64_t *)*((_QWORD *)&v216 + 1);
        if (*((_QWORD *)&v216 + 1))
        {
          v87 = (__int128 *)((char *)&v216 + 8);
          do
          {
            v88 = v86;
            v89 = v87;
            v90 = *((unsigned __int8 *)v86 + 25);
            v91 = *v74;
            if (v90 != v91)
              goto LABEL_168;
            v90 = *((unsigned __int8 *)v86 + 26);
            v91 = v74[1];
            if (v90 != v91)
              goto LABEL_168;
            v90 = *((unsigned __int8 *)v86 + 27);
            v91 = v74[2];
            if (v90 != v91)
              goto LABEL_168;
            v90 = *((unsigned __int8 *)v86 + 28);
            v91 = v74[3];
            if (v90 != v91)
              goto LABEL_168;
            v90 = *((unsigned __int8 *)v86 + 29);
            v91 = v74[4];
            if (v90 != v91)
              goto LABEL_168;
            v90 = *((unsigned __int8 *)v86 + 30);
            v91 = v74[5];
            if (v90 != v91)
              goto LABEL_168;
            v90 = *((unsigned __int8 *)v86 + 31);
            v91 = v74[6];
            if (v90 != v91)
              goto LABEL_168;
            v90 = *((unsigned __int8 *)v86 + 32);
            v91 = v74[7];
            if (v90 != v91)
              goto LABEL_168;
            v90 = *((unsigned __int8 *)v86 + 33);
            v91 = v74[8];
            if (v90 != v91)
              goto LABEL_168;
            v90 = *((unsigned __int8 *)v86 + 34);
            v91 = v74[9];
            if (v90 != v91)
              goto LABEL_168;
            v90 = *((unsigned __int8 *)v86 + 35);
            v91 = v74[10];
            if (v90 != v91)
              goto LABEL_168;
            v90 = *((unsigned __int8 *)v86 + 36);
            v91 = v74[11];
            if (v90 != v91)
              goto LABEL_168;
            v90 = *((unsigned __int8 *)v86 + 37);
            v91 = v74[12];
            if (v90 != v91)
              goto LABEL_168;
            v90 = *((unsigned __int8 *)v86 + 38);
            v91 = v74[13];
            if (v90 == v91
              && (v90 = *((unsigned __int8 *)v86 + 39), v91 = v74[14], v90 == v91)
              && (v90 = *((unsigned __int8 *)v86 + 40), v91 = v74[15], v90 == v91))
            {
              v92 = 0;
              v87 = v86;
            }
            else
            {
LABEL_168:
              v93 = v90 >= v91;
              if (v90 >= v91)
              {
                v92 = 0;
              }
              else
              {
                ++v86;
                v92 = 1;
              }
              if (v93)
                v87 = v88;
              else
                v87 = v89;
            }
            v86 = (uint64_t *)*v86;
          }
          while (v86);
          if (v87 != (__int128 *)((char *)&v216 + 8))
          {
            v94 = (char *)v88 + 25;
            v95 = (char *)v89 + 25;
            v96 = (unsigned __int8 *)(v92 ? v95 : v94);
            if (((char)sub_22319835C(v74, v96) & 0x80000000) == 0)
            {
              v211 = v74;
              v97 = *((_DWORD *)sub_2238F1DD0((uint64_t)&v220, (uint64_t)v74, (uint64_t)&unk_2245BA939, (_OWORD **)&v211)
                    + 8);
              v98 = *v207;
              v99 = (uint64_t)&(*v207)[232 * v97];
              v100 = sub_223C8F394(*(unsigned __int8 *)(v99 + 16), v74[240]);
              *(_BYTE *)(v99 + 16) = v100;
              v101 = &v98[232 * v97];
              v102 = v74[241];
              if (v101[224])
                v103 = v102 == 0;
              else
                v103 = 1;
              v104 = !v103;
              if (v102 == 2 || v101[224] == 2)
                v106 = 2;
              else
                v106 = v104;
              v101[224] = v106;
              if (!v100)
              {
                v107 = (char *)*((_QWORD *)&v212 + 1);
                v108 = (char **)&v212 + 1;
                v109 = (char **)&v212 + 1;
                if (!*((_QWORD *)&v212 + 1))
                  goto LABEL_216;
                v109 = (char **)&v212 + 1;
                while (1)
                {
                  while (1)
                  {
                    v108 = (char **)v107;
                    v140 = (unsigned __int8 *)(v107 + 25);
                    if (((char)sub_22319835C(v74, (unsigned __int8 *)v107 + 25) & 0x80000000) == 0)
                      break;
                    v107 = *v108;
                    v109 = v108;
                    if (!*v108)
                      goto LABEL_216;
                  }
                  if (((char)sub_22319835C(v140, v74) & 0x80000000) == 0)
                    break;
                  v109 = v108 + 1;
                  v107 = v108[1];
                  if (!v107)
                    goto LABEL_216;
                }
                if (!*v109)
                {
LABEL_216:
                  v141 = (char *)operator new(0x30uLL);
                  *(_OWORD *)(v141 + 25) = *(_OWORD *)v74;
                  *(_QWORD *)v141 = 0;
                  *((_QWORD *)v141 + 1) = 0;
                  *((_QWORD *)v141 + 2) = v108;
                  *v109 = v141;
                  if (*(_QWORD *)v212)
                  {
                    *(_QWORD *)&v212 = *(_QWORD *)v212;
                    v141 = *v109;
                  }
                  sub_2231A9A8C(*((uint64_t **)&v212 + 1), (uint64_t *)v141);
                  *(_QWORD *)&v213 = v213 + 1;
                }
              }
              goto LABEL_148;
            }
          }
        }
        v111 = (unsigned __int8 *)a1[2];
        v110 = a1[3];
        if ((unint64_t)v111 < v110)
        {
          *(_OWORD *)v111 = *(_OWORD *)v74;
          v111[16] = v74[240];
          *((_QWORD *)v111 + 3) = *((_QWORD *)v74 + 13);
          v76 = *((_OWORD *)v74 + 2);
          v77 = *((_OWORD *)v74 + 3);
          v78 = *((_OWORD *)v74 + 5);
          *((_OWORD *)v111 + 4) = *((_OWORD *)v74 + 4);
          *((_OWORD *)v111 + 5) = v78;
          *((_OWORD *)v111 + 2) = v76;
          *((_OWORD *)v111 + 3) = v77;
          v79 = *((_OWORD *)v74 + 7);
          v80 = *((_OWORD *)v74 + 8);
          v81 = *((_OWORD *)v74 + 10);
          *((_OWORD *)v111 + 8) = *((_OWORD *)v74 + 9);
          *((_OWORD *)v111 + 9) = v81;
          *((_OWORD *)v111 + 6) = v79;
          *((_OWORD *)v111 + 7) = v80;
          v82 = *((_OWORD *)v74 + 11);
          v83 = *((_OWORD *)v74 + 12);
          v84 = *((_OWORD *)v74 + 14);
          *((_OWORD *)v111 + 12) = *((_OWORD *)v74 + 13);
          *((_OWORD *)v111 + 13) = v84;
          *((_OWORD *)v111 + 10) = v82;
          *((_OWORD *)v111 + 11) = v83;
          v111[224] = v74[241];
          v85 = (char *)(v111 + 232);
        }
        else
        {
          v112 = *v207;
          v113 = 0x34F72C234F72C235 * ((v111 - *v207) >> 3);
          v114 = v113 + 1;
          if ((unint64_t)(v113 + 1) > 0x11A7B9611A7B961)
            sub_22316E078();
          v115 = 0x34F72C234F72C235 * ((uint64_t)(v110 - (_QWORD)v112) >> 3);
          if (2 * v115 > v114)
            v114 = 2 * v115;
          if (v115 >= 0x8D3DCB08D3DCB0)
            v116 = 0x11A7B9611A7B961;
          else
            v116 = v114;
          if (v116 > 0x11A7B9611A7B961)
            sub_223174E94();
          v117 = (char *)operator new(232 * v116);
          v118 = &v117[232 * v113];
          *(_OWORD *)v118 = *(_OWORD *)v74;
          v118[16] = v74[240];
          *((_QWORD *)v118 + 3) = *((_QWORD *)v74 + 13);
          v119 = *((_OWORD *)v74 + 2);
          v120 = *((_OWORD *)v74 + 3);
          v121 = *((_OWORD *)v74 + 5);
          *((_OWORD *)v118 + 4) = *((_OWORD *)v74 + 4);
          *((_OWORD *)v118 + 5) = v121;
          *((_OWORD *)v118 + 2) = v119;
          *((_OWORD *)v118 + 3) = v120;
          v122 = *((_OWORD *)v74 + 7);
          v123 = *((_OWORD *)v74 + 8);
          v124 = *((_OWORD *)v74 + 10);
          *((_OWORD *)v118 + 8) = *((_OWORD *)v74 + 9);
          *((_OWORD *)v118 + 9) = v124;
          *((_OWORD *)v118 + 6) = v122;
          *((_OWORD *)v118 + 7) = v123;
          v125 = *((_OWORD *)v74 + 11);
          v126 = *((_OWORD *)v74 + 12);
          v127 = *((_OWORD *)v74 + 14);
          *((_OWORD *)v118 + 12) = *((_OWORD *)v74 + 13);
          *((_OWORD *)v118 + 13) = v127;
          *((_OWORD *)v118 + 10) = v125;
          *((_OWORD *)v118 + 11) = v126;
          v118[224] = v74[241];
          if (v111 != v112)
          {
            v128 = 0;
            do
            {
              v129 = &v118[v128];
              v130 = *(_OWORD *)&v111[v128 - 232];
              *(_OWORD *)(v129 - 216) = *(_OWORD *)&v111[v128 - 216];
              *(_OWORD *)(v129 - 232) = v130;
              v131 = *(_OWORD *)&v111[v128 - 200];
              v132 = *(_OWORD *)&v111[v128 - 184];
              v133 = *(_OWORD *)&v111[v128 - 168];
              *(_OWORD *)(v129 - 152) = *(_OWORD *)&v111[v128 - 152];
              *(_OWORD *)(v129 - 168) = v133;
              *(_OWORD *)(v129 - 184) = v132;
              *(_OWORD *)(v129 - 200) = v131;
              v134 = *(_OWORD *)&v111[v128 - 136];
              v135 = *(_OWORD *)&v111[v128 - 120];
              v136 = *(_OWORD *)&v111[v128 - 104];
              *(_OWORD *)(v129 - 88) = *(_OWORD *)&v111[v128 - 88];
              *(_OWORD *)(v129 - 104) = v136;
              *(_OWORD *)(v129 - 120) = v135;
              *(_OWORD *)(v129 - 136) = v134;
              v137 = *(_OWORD *)&v111[v128 - 72];
              v138 = *(_OWORD *)&v111[v128 - 56];
              v139 = *(_OWORD *)&v111[v128 - 40];
              *(_OWORD *)(v129 - 24) = *(_OWORD *)&v111[v128 - 24];
              *(_OWORD *)(v129 - 40) = v139;
              *(_OWORD *)(v129 - 56) = v138;
              *(_OWORD *)(v129 - 72) = v137;
              *(v129 - 8) = v111[v128 - 8];
              v128 -= 232;
            }
            while (&v111[v128] != v112);
            v85 = v118 + 232;
            a1[1] = &v118[v128];
            a1[2] = v118 + 232;
            a1[3] = &v117[232 * v116];
            if (!v112)
              goto LABEL_147;
LABEL_214:
            operator delete(v112);
            goto LABEL_147;
          }
          v85 = v118 + 232;
          a1[1] = v118;
          a1[2] = v118 + 232;
          a1[3] = &v117[232 * v116];
          if (v112)
            goto LABEL_214;
        }
LABEL_147:
        a1[2] = v85;
LABEL_148:
        v74 += 248;
      }
      while (v74 != v75);
    }
    v142 = (unsigned __int8 *)a1[1];
    v143 = (unsigned __int8 *)a1[2];
    if (v143 == v142)
      goto LABEL_248;
    v144 = (unsigned __int8 *)*((_QWORD *)&v212 + 1);
    if (*((_QWORD *)&v212 + 1))
    {
LABEL_223:
      v145 = (unsigned __int8 *)&v212 + 8;
      do
      {
        v146 = v144[25];
        v147 = *v142;
        if (v146 != v147)
          goto LABEL_241;
        v146 = v144[26];
        v147 = v142[1];
        if (v146 != v147)
          goto LABEL_241;
        v146 = v144[27];
        v147 = v142[2];
        if (v146 != v147)
          goto LABEL_241;
        v146 = v144[28];
        v147 = v142[3];
        if (v146 != v147)
          goto LABEL_241;
        v146 = v144[29];
        v147 = v142[4];
        if (v146 != v147)
          goto LABEL_241;
        v146 = v144[30];
        v147 = v142[5];
        if (v146 != v147)
          goto LABEL_241;
        v146 = v144[31];
        v147 = v142[6];
        if (v146 != v147)
          goto LABEL_241;
        v146 = v144[32];
        v147 = v142[7];
        if (v146 != v147)
          goto LABEL_241;
        v146 = v144[33];
        v147 = v142[8];
        if (v146 != v147)
          goto LABEL_241;
        v146 = v144[34];
        v147 = v142[9];
        if (v146 != v147)
          goto LABEL_241;
        v146 = v144[35];
        v147 = v142[10];
        if (v146 != v147)
          goto LABEL_241;
        v146 = v144[36];
        v147 = v142[11];
        if (v146 != v147)
          goto LABEL_241;
        v146 = v144[37];
        v147 = v142[12];
        if (v146 != v147)
          goto LABEL_241;
        v146 = v144[38];
        v147 = v142[13];
        if (v146 == v147
          && (v146 = v144[39], v147 = v142[14], v146 == v147)
          && (v146 = v144[40], v147 = v142[15], v146 == v147))
        {
          v145 = v144;
        }
        else
        {
LABEL_241:
          if (v146 < v147)
            v144 += 8;
          else
            v145 = v144;
        }
        v144 = *(unsigned __int8 **)v144;
      }
      while (v144);
      if (v145 == (unsigned __int8 *)((char *)&v212 + 8) || (char)sub_22319835C(v142, v145 + 25) < 0)
      {
        while (1)
        {
          v142 += 232;
          if (v142 == v143)
            break;
          v144 = (unsigned __int8 *)*((_QWORD *)&v212 + 1);
          if (*((_QWORD *)&v212 + 1))
            goto LABEL_223;
        }
LABEL_248:
        v148 = v143;
LABEL_249:
        if (v148 != (unsigned __int8 *)a1[2])
          a1[2] = v148;
        sub_223198030((uint64_t)&v212, *((_QWORD **)&v212 + 1));
        v149 = (_QWORD *)v221;
        if ((_QWORD)v221)
        {
          do
          {
            v150 = (_QWORD *)*v149;
            operator delete(v149);
            v149 = v150;
          }
          while (v150);
        }
        v151 = (void *)v220;
        *(_QWORD *)&v220 = 0;
        if (v151)
          operator delete(v151);
        sub_223198030((uint64_t)&v216, *((_QWORD **)&v216 + 1));
        goto LABEL_256;
      }
    }
    else
    {
      v142 += 232 * ((v143 - v142 - 232) / 0xE8uLL) + 232;
      v148 = (unsigned __int8 *)a1[2];
      if (v142 == v143)
        goto LABEL_249;
    }
    v181 = v142 + 232;
    if (v142 + 232 == v143)
    {
      v148 = v142;
    }
    else
    {
      v148 = v142;
      do
      {
        v192 = v181;
        v193 = (unsigned __int8 *)*((_QWORD *)&v212 + 1);
        if (!*((_QWORD *)&v212 + 1))
          goto LABEL_289;
        v194 = (unsigned __int8 *)&v212 + 8;
        do
        {
          v195 = v193[25];
          v196 = *v192;
          if (v195 != v196)
            goto LABEL_310;
          v195 = v193[26];
          v196 = v142[233];
          if (v195 != v196)
            goto LABEL_310;
          v195 = v193[27];
          v196 = v142[234];
          if (v195 != v196)
            goto LABEL_310;
          v195 = v193[28];
          v196 = v142[235];
          if (v195 != v196)
            goto LABEL_310;
          v195 = v193[29];
          v196 = v142[236];
          if (v195 != v196)
            goto LABEL_310;
          v195 = v193[30];
          v196 = v142[237];
          if (v195 != v196)
            goto LABEL_310;
          v195 = v193[31];
          v196 = v142[238];
          if (v195 != v196)
            goto LABEL_310;
          v195 = v193[32];
          v196 = v142[239];
          if (v195 != v196)
            goto LABEL_310;
          v195 = v193[33];
          v196 = v142[240];
          if (v195 != v196)
            goto LABEL_310;
          v195 = v193[34];
          v196 = v142[241];
          if (v195 != v196)
            goto LABEL_310;
          v195 = v193[35];
          v196 = v142[242];
          if (v195 != v196)
            goto LABEL_310;
          v195 = v193[36];
          v196 = v142[243];
          if (v195 != v196)
            goto LABEL_310;
          v195 = v193[37];
          v196 = v142[244];
          if (v195 != v196)
            goto LABEL_310;
          v195 = v193[38];
          v196 = v142[245];
          if (v195 == v196
            && (v195 = v193[39], v196 = v142[246], v195 == v196)
            && (v195 = v193[40], v196 = v142[247], v195 == v196))
          {
            v194 = v193;
          }
          else
          {
LABEL_310:
            if (v195 < v196)
              v193 += 8;
            else
              v194 = v193;
          }
          v193 = *(unsigned __int8 **)v193;
        }
        while (v193);
        if (v194 == (unsigned __int8 *)((char *)&v212 + 8) || (char)sub_22319835C(v192, v194 + 25) < 0)
        {
LABEL_289:
          v182 = *((_OWORD *)v192 + 1);
          *(_OWORD *)v148 = *(_OWORD *)v192;
          *((_OWORD *)v148 + 1) = v182;
          v183 = *(_OWORD *)(v142 + 264);
          v184 = *(_OWORD *)(v142 + 280);
          v185 = *(_OWORD *)(v142 + 312);
          *((_OWORD *)v148 + 4) = *(_OWORD *)(v142 + 296);
          *((_OWORD *)v148 + 5) = v185;
          *((_OWORD *)v148 + 2) = v183;
          *((_OWORD *)v148 + 3) = v184;
          v186 = *(_OWORD *)(v142 + 328);
          v187 = *(_OWORD *)(v142 + 344);
          v188 = *(_OWORD *)(v142 + 376);
          *((_OWORD *)v148 + 8) = *(_OWORD *)(v142 + 360);
          *((_OWORD *)v148 + 9) = v188;
          *((_OWORD *)v148 + 6) = v186;
          *((_OWORD *)v148 + 7) = v187;
          v189 = *(_OWORD *)(v142 + 392);
          v190 = *(_OWORD *)(v142 + 408);
          v191 = *(_OWORD *)(v142 + 440);
          *((_OWORD *)v148 + 12) = *(_OWORD *)(v142 + 424);
          *((_OWORD *)v148 + 13) = v191;
          *((_OWORD *)v148 + 10) = v189;
          *((_OWORD *)v148 + 11) = v190;
          v148[224] = v142[456];
          v148 += 232;
        }
        v181 = v192 + 232;
        v142 = v192;
      }
      while (v192 + 232 != v143);
    }
    goto LABEL_249;
  }
  sub_223C8F810((uint64_t **)&v220, v6, (unsigned __int8 **)a2);
  __p = 0;
  v209 = 0;
  v210 = 0;
  v8 = (unsigned __int8 *)*a2;
  v7 = (unsigned __int8 *)a2[1];
  if ((unsigned __int8 *)*a2 != v7)
  {
    do
    {
      v10 = (uint64_t *)*((_QWORD *)&v220 + 1);
      if (!*((_QWORD *)&v220 + 1))
        goto LABEL_38;
      v11 = (__int128 *)((char *)&v220 + 8);
      do
      {
        v12 = v10;
        v13 = v11;
        v14 = *((unsigned __int8 *)v10 + 25);
        v15 = *v8;
        if (v14 != v15)
          goto LABEL_26;
        v14 = *((unsigned __int8 *)v10 + 26);
        v15 = v8[1];
        if (v14 != v15)
          goto LABEL_26;
        v14 = *((unsigned __int8 *)v10 + 27);
        v15 = v8[2];
        if (v14 != v15)
          goto LABEL_26;
        v14 = *((unsigned __int8 *)v10 + 28);
        v15 = v8[3];
        if (v14 != v15)
          goto LABEL_26;
        v14 = *((unsigned __int8 *)v10 + 29);
        v15 = v8[4];
        if (v14 != v15)
          goto LABEL_26;
        v14 = *((unsigned __int8 *)v10 + 30);
        v15 = v8[5];
        if (v14 != v15)
          goto LABEL_26;
        v14 = *((unsigned __int8 *)v10 + 31);
        v15 = v8[6];
        if (v14 != v15)
          goto LABEL_26;
        v14 = *((unsigned __int8 *)v10 + 32);
        v15 = v8[7];
        if (v14 != v15)
          goto LABEL_26;
        v14 = *((unsigned __int8 *)v10 + 33);
        v15 = v8[8];
        if (v14 != v15)
          goto LABEL_26;
        v14 = *((unsigned __int8 *)v10 + 34);
        v15 = v8[9];
        if (v14 != v15)
          goto LABEL_26;
        v14 = *((unsigned __int8 *)v10 + 35);
        v15 = v8[10];
        if (v14 != v15)
          goto LABEL_26;
        v14 = *((unsigned __int8 *)v10 + 36);
        v15 = v8[11];
        if (v14 != v15)
          goto LABEL_26;
        v14 = *((unsigned __int8 *)v10 + 37);
        v15 = v8[12];
        if (v14 != v15)
          goto LABEL_26;
        v14 = *((unsigned __int8 *)v10 + 38);
        v15 = v8[13];
        if (v14 == v15
          && (v14 = *((unsigned __int8 *)v10 + 39), v15 = v8[14], v14 == v15)
          && (v14 = *((unsigned __int8 *)v10 + 40), v15 = v8[15], v14 == v15))
        {
          v16 = 0;
          v11 = v10;
        }
        else
        {
LABEL_26:
          _CF = v14 >= v15;
          if (v14 >= v15)
          {
            v16 = 0;
          }
          else
          {
            ++v10;
            v16 = 1;
          }
          if (_CF)
            v11 = v12;
          else
            v11 = v13;
        }
        v10 = (uint64_t *)*v10;
      }
      while (v10);
      if (v11 == (__int128 *)((char *)&v220 + 8)
        || ((v18 = (unsigned __int8 *)v12 + 25, v19 = (unsigned __int8 *)v13 + 25, !v16) ? (v20 = v18) : (v20 = v19),
            (char)sub_22319835C(v8, v20) < 0))
      {
LABEL_38:
        v21 = v209;
        if ((unint64_t)v209 >= v210)
        {
          v9 = sub_22356EF88((char **)&__p, (uint64_t)v8);
        }
        else
        {
          *(_OWORD *)v209 = *(_OWORD *)v8;
          *((_QWORD *)v21 + 2) = *((_QWORD *)v8 + 2);
          v22 = *((_QWORD *)v8 + 3);
          *((_QWORD *)v21 + 3) = v22;
          if (v22)
          {
            v23 = (unint64_t *)(v22 + 8);
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          v25 = *((_OWORD *)v8 + 2);
          v26 = *((_OWORD *)v8 + 3);
          v27 = *((_OWORD *)v8 + 5);
          *((_OWORD *)v21 + 4) = *((_OWORD *)v8 + 4);
          *((_OWORD *)v21 + 5) = v27;
          *((_OWORD *)v21 + 2) = v25;
          *((_OWORD *)v21 + 3) = v26;
          *((_OWORD *)v21 + 6) = *((_OWORD *)v8 + 6);
          v28 = *((_OWORD *)v8 + 7);
          v29 = *((_OWORD *)v8 + 8);
          v30 = *((_OWORD *)v8 + 10);
          *((_OWORD *)v21 + 9) = *((_OWORD *)v8 + 9);
          *((_OWORD *)v21 + 10) = v30;
          *((_OWORD *)v21 + 7) = v28;
          *((_OWORD *)v21 + 8) = v29;
          v31 = *((_OWORD *)v8 + 11);
          v32 = *((_OWORD *)v8 + 12);
          v33 = *((_OWORD *)v8 + 14);
          *((_OWORD *)v21 + 13) = *((_OWORD *)v8 + 13);
          *((_OWORD *)v21 + 14) = v33;
          *((_OWORD *)v21 + 11) = v31;
          *((_OWORD *)v21 + 12) = v32;
          *((_WORD *)v21 + 120) = *((_WORD *)v8 + 120);
          v9 = v21 + 248;
        }
        v209 = v9;
      }
      v8 += 248;
    }
    while (v8 != v7);
  }
  sub_223198030((uint64_t)&v220, *((_QWORD **)&v220 + 1));
  v35 = (unsigned __int8 *)a1[1];
  v34 = (unsigned __int8 *)a1[2];
  if (v35 != v34)
    goto LABEL_44;
LABEL_267:
  v158 = (char *)__p;
  v152 = v209;
  if (v209 != __p)
  {
    v159 = 0xEF7BDEF7BDEF7BDFLL * ((v209 - (_BYTE *)__p) >> 3);
    v160 = 0x34F72C234F72C235 * ((uint64_t)(a1[3] - (_QWORD)v35) >> 3);
    if (v160 >= v159)
    {
      v197 = &v35[0x842108421084218 * ((v209 - (_BYTE *)__p) >> 3)];
      __asm { FMOV            V5.2S, #1.0 }
      do
      {
        *((_QWORD *)v35 + 28) = 0;
        *((_OWORD *)v35 + 12) = 0uLL;
        *((_OWORD *)v35 + 13) = 0uLL;
        *((_OWORD *)v35 + 10) = 0uLL;
        *((_OWORD *)v35 + 11) = 0uLL;
        *((_OWORD *)v35 + 8) = 0uLL;
        *((_OWORD *)v35 + 9) = 0uLL;
        *((_OWORD *)v35 + 6) = 0uLL;
        *((_OWORD *)v35 + 7) = 0uLL;
        *((_OWORD *)v35 + 4) = 0uLL;
        *((_OWORD *)v35 + 5) = 0uLL;
        *((_OWORD *)v35 + 2) = 0uLL;
        *((_OWORD *)v35 + 3) = 0uLL;
        *(_OWORD *)v35 = 0uLL;
        *((_OWORD *)v35 + 1) = 0uLL;
        *((_OWORD *)v35 + 4) = xmmword_22466E188;
        *((_OWORD *)v35 + 5) = unk_22466E198;
        *((_OWORD *)v35 + 2) = xmmword_22466E168;
        *((_OWORD *)v35 + 3) = unk_22466E178;
        *(_OWORD *)(v35 + 116) = 0uLL;
        *(_OWORD *)(v35 + 132) = 0uLL;
        *(_OWORD *)(v35 + 100) = 0uLL;
        *(_QWORD *)(v35 + 148) = 0;
        *((_DWORD *)v35 + 24) = 1065353216;
        *((_DWORD *)v35 + 29) = 1065353216;
        *((_DWORD *)v35 + 34) = 1065353216;
        *(_OWORD *)(v35 + 180) = 0uLL;
        *(_OWORD *)(v35 + 196) = 0uLL;
        *(_OWORD *)(v35 + 164) = 0uLL;
        *(_QWORD *)(v35 + 212) = 0;
        *(_QWORD *)(v35 + 156) = _D5;
        *((_DWORD *)v35 + 45) = 1065353216;
        *((_DWORD *)v35 + 50) = 1065353216;
        *((_DWORD *)v35 + 55) = 1065353216;
        v35 += 232;
      }
      while (v35 != v197);
      a1[2] = v197;
    }
    else
    {
      if (v159 > 0x11A7B9611A7B961)
        sub_22316E078();
      v161 = 0x69EE58469EE5846ALL * ((uint64_t)(a1[3] - (_QWORD)v35) >> 3);
      if (v161 <= v159)
        v161 = 0xEF7BDEF7BDEF7BDFLL * ((v209 - (_BYTE *)__p) >> 3);
      if (v160 >= 0x8D3DCB08D3DCB0)
        v162 = 0x11A7B9611A7B961;
      else
        v162 = v161;
      if (v162 > 0x11A7B9611A7B961)
        sub_223174E94();
      v163 = (char *)operator new(232 * v162);
      v164 = &v163[232 * v159];
      __asm { FMOV            V5.2S, #1.0 }
      v168 = v163;
      do
      {
        *((_QWORD *)v168 + 28) = 0;
        *((_OWORD *)v168 + 12) = 0uLL;
        *((_OWORD *)v168 + 13) = 0uLL;
        *((_OWORD *)v168 + 10) = 0uLL;
        *((_OWORD *)v168 + 11) = 0uLL;
        *((_OWORD *)v168 + 8) = 0uLL;
        *((_OWORD *)v168 + 9) = 0uLL;
        *((_OWORD *)v168 + 6) = 0uLL;
        *((_OWORD *)v168 + 7) = 0uLL;
        *((_OWORD *)v168 + 4) = 0uLL;
        *((_OWORD *)v168 + 5) = 0uLL;
        *((_OWORD *)v168 + 2) = 0uLL;
        *((_OWORD *)v168 + 3) = 0uLL;
        *(_OWORD *)v168 = 0uLL;
        *((_OWORD *)v168 + 1) = 0uLL;
        *((_OWORD *)v168 + 4) = xmmword_22466E188;
        *((_OWORD *)v168 + 5) = unk_22466E198;
        *((_OWORD *)v168 + 2) = xmmword_22466E168;
        *((_OWORD *)v168 + 3) = unk_22466E178;
        *(_OWORD *)(v168 + 116) = 0uLL;
        *(_OWORD *)(v168 + 132) = 0uLL;
        *(_OWORD *)(v168 + 100) = 0uLL;
        *(_QWORD *)(v168 + 148) = 0;
        *((_DWORD *)v168 + 24) = 1065353216;
        *((_DWORD *)v168 + 29) = 1065353216;
        *((_DWORD *)v168 + 34) = 1065353216;
        *(_OWORD *)(v168 + 180) = 0uLL;
        *(_OWORD *)(v168 + 196) = 0uLL;
        *(_OWORD *)(v168 + 164) = 0uLL;
        *(_QWORD *)(v168 + 212) = 0;
        *(_QWORD *)(v168 + 156) = _D5;
        *((_DWORD *)v168 + 45) = 1065353216;
        *((_DWORD *)v168 + 50) = 1065353216;
        *((_DWORD *)v168 + 55) = 1065353216;
        v168 += 232;
      }
      while (v168 != v164);
      v169 = &v163[232 * v162];
      v170 = *v6;
      if (v35 != *v6)
      {
        do
        {
          v171 = *(_OWORD *)(v35 - 232);
          *(_OWORD *)(v163 - 216) = *(_OWORD *)(v35 - 216);
          *(_OWORD *)(v163 - 232) = v171;
          v172 = *(_OWORD *)(v35 - 200);
          v173 = *(_OWORD *)(v35 - 184);
          v174 = *(_OWORD *)(v35 - 168);
          *(_OWORD *)(v163 - 152) = *(_OWORD *)(v35 - 152);
          *(_OWORD *)(v163 - 168) = v174;
          *(_OWORD *)(v163 - 184) = v173;
          *(_OWORD *)(v163 - 200) = v172;
          v175 = *(_OWORD *)(v35 - 136);
          v176 = *(_OWORD *)(v35 - 120);
          v177 = *(_OWORD *)(v35 - 104);
          *(_OWORD *)(v163 - 88) = *(_OWORD *)(v35 - 88);
          *(_OWORD *)(v163 - 104) = v177;
          *(_OWORD *)(v163 - 120) = v176;
          *(_OWORD *)(v163 - 136) = v175;
          v178 = *(_OWORD *)(v35 - 72);
          v179 = *(_OWORD *)(v35 - 56);
          v180 = *(_OWORD *)(v35 - 40);
          *(_OWORD *)(v163 - 24) = *(_OWORD *)(v35 - 24);
          *(_OWORD *)(v163 - 40) = v180;
          *(_OWORD *)(v163 - 56) = v179;
          *(_OWORD *)(v163 - 72) = v178;
          *(v163 - 8) = *(v35 - 8);
          v163 -= 232;
          v35 -= 232;
        }
        while (v35 != v170);
        v35 = *v6;
      }
      a1[1] = v163;
      a1[2] = v164;
      a1[3] = v169;
      if (v35)
      {
        operator delete(v35);
        v158 = (char *)__p;
        v152 = v209;
      }
    }
    if (v158 != v152)
    {
      v199 = *v6;
      do
      {
        v200 = v158[240];
        v201 = *((_QWORD *)v158 + 13);
        v220 = *((_OWORD *)v158 + 2);
        v221 = *((_OWORD *)v158 + 3);
        v222 = *((_OWORD *)v158 + 4);
        v223 = *((_OWORD *)v158 + 5);
        v216 = *((_OWORD *)v158 + 7);
        v217 = *((_OWORD *)v158 + 8);
        v218 = *((_OWORD *)v158 + 9);
        v219 = *((_OWORD *)v158 + 10);
        v212 = *((_OWORD *)v158 + 11);
        v213 = *((_OWORD *)v158 + 12);
        v214 = *((_OWORD *)v158 + 13);
        v215 = *((_OWORD *)v158 + 14);
        v202 = v158[241];
        v203 = *(_OWORD *)v158;
        v158 += 248;
        *(_OWORD *)v199 = v203;
        v199[16] = v200;
        *((_QWORD *)v199 + 3) = v201;
        *((_OWORD *)v199 + 5) = v223;
        *((_OWORD *)v199 + 4) = v222;
        *((_OWORD *)v199 + 3) = v221;
        *((_OWORD *)v199 + 2) = v220;
        *((_OWORD *)v199 + 9) = v219;
        *((_OWORD *)v199 + 8) = v218;
        *((_OWORD *)v199 + 7) = v217;
        *((_OWORD *)v199 + 6) = v216;
        v204 = v212;
        v205 = v213;
        v206 = v215;
        *((_OWORD *)v199 + 12) = v214;
        *((_OWORD *)v199 + 13) = v206;
        *((_OWORD *)v199 + 10) = v204;
        *((_OWORD *)v199 + 11) = v205;
        v199[224] = v202;
        v199 += 232;
      }
      while (v158 != v152);
LABEL_256:
      v152 = (char *)__p;
    }
  }
  if (v152)
  {
    v153 = v209;
    v154 = v152;
    if (v209 != v152)
    {
      do
      {
        v155 = (std::__shared_weak_count *)*((_QWORD *)v153 - 28);
        if (v155)
        {
          p_shared_owners = (unint64_t *)&v155->__shared_owners_;
          do
            v157 = __ldaxr(p_shared_owners);
          while (__stlxr(v157 - 1, p_shared_owners));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
            std::__shared_weak_count::__release_weak(v155);
          }
        }
        v153 -= 248;
      }
      while (v153 != v152);
      v154 = __p;
    }
    v209 = v152;
    operator delete(v154);
  }
}

void sub_223C95B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223473EA8((void **)va);
  _Unwind_Resume(a1);
}

void sub_223C95B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223473EA8((void **)va);
  _Unwind_Resume(a1);
}

void sub_223C95BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,_QWORD *a26)
{
  void *v26;
  uint64_t v27;

  operator delete(v26);
  sub_22322E828(v27 - 176);
  sub_223198030((uint64_t)&a25, a26);
  sub_223473EA8(&a12);
  _Unwind_Resume(a1);
}

void sub_223C95C34(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  void *v63;
  void *v65[2];
  void *__p[2];
  int v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[128];
  __int16 v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_OWORD *)v65 = 0u;
  *(_OWORD *)__p = 0u;
  v67 = 1065353216;
  v6 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v7 = 0;
    do
    {
      *(_QWORD *)&v68 = v6;
      *((_DWORD *)sub_2238F1DD0((uint64_t)v65, v6, (uint64_t)&unk_2245BA939, (_OWORD **)&v68) + 8) = v7;
      v6 += 248;
      ++v7;
    }
    while (v6 != v5);
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v8 != v9)
  {
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      v25 = sub_223C8F01C(*(unsigned __int8 *)(v8 + 16));
      *(_QWORD *)&v68 = 0x1010101010101;
      v26 = v25;
      if (!*((_BYTE *)&v68 + v25)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyVolInterface.cpp", 55, (uint64_t)"IsValidEvent(event)", 19, (uint64_t)"Not a legitimate event", 22, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      *(_QWORD *)&v68 = 16843009;
      if (*((_BYTE *)&v68 + v26))
      {
        v27 = sub_22342DA5C(v65, v8);
        if (v27)
        {
          v28 = *((unsigned int *)v27 + 8);
          v29 = *a2;
          if (0xEF7BDEF7BDEF7BDFLL * ((a2[1] - *a2) >> 3) <= v28)
            sub_2236C5448();
          v30 = (_OWORD *)(v29 + 248 * v28);
          v31 = *(_QWORD *)(a3 + 8);
          if (v31 >= *(_QWORD *)(a3 + 16))
          {
            v15 = sub_22356EF88((char **)a3, (uint64_t)v30);
          }
          else
          {
            *(_OWORD *)v31 = *v30;
            v32 = v29 + 248 * v28;
            *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
            v33 = *(_QWORD *)(v32 + 24);
            *(_QWORD *)(v31 + 24) = v33;
            if (v33)
            {
              v34 = (unint64_t *)(v33 + 8);
              do
                v35 = __ldxr(v34);
              while (__stxr(v35 + 1, v34));
            }
            v36 = v29 + 248 * v28;
            v37 = *(_OWORD *)(v36 + 32);
            v38 = *(_OWORD *)(v36 + 48);
            v39 = *(_OWORD *)(v36 + 80);
            *(_OWORD *)(v31 + 64) = *(_OWORD *)(v36 + 64);
            *(_OWORD *)(v31 + 80) = v39;
            *(_OWORD *)(v31 + 32) = v37;
            *(_OWORD *)(v31 + 48) = v38;
            *(_OWORD *)(v31 + 96) = *(_OWORD *)(v36 + 96);
            v40 = *(_OWORD *)(v36 + 112);
            v41 = *(_OWORD *)(v36 + 128);
            v42 = *(_OWORD *)(v36 + 160);
            *(_OWORD *)(v31 + 144) = *(_OWORD *)(v36 + 144);
            *(_OWORD *)(v31 + 160) = v42;
            *(_OWORD *)(v31 + 112) = v40;
            *(_OWORD *)(v31 + 128) = v41;
            v43 = *(_OWORD *)(v36 + 176);
            v44 = *(_OWORD *)(v36 + 192);
            v45 = *(_OWORD *)(v36 + 224);
            *(_OWORD *)(v31 + 208) = *(_OWORD *)(v36 + 208);
            *(_OWORD *)(v31 + 224) = v45;
            *(_OWORD *)(v31 + 176) = v43;
            *(_OWORD *)(v31 + 192) = v44;
            *(_WORD *)(v31 + 240) = *(_WORD *)(v36 + 240);
            v15 = (char *)(v31 + 248);
          }
          *(_QWORD *)(a3 + 8) = v15;
          *(v15 - 8) = *(_BYTE *)(v8 + 16);
          v16 = *(_OWORD *)(v8 + 32);
          v17 = *(_OWORD *)(v8 + 48);
          v18 = *(_OWORD *)(v8 + 64);
          *(_OWORD *)(v15 - 168) = *(_OWORD *)(v8 + 80);
          *(_OWORD *)(v15 - 184) = v18;
          *(_OWORD *)(v15 - 200) = v17;
          *(_OWORD *)(v15 - 216) = v16;
          v19 = *(_OWORD *)(v8 + 96);
          v20 = *(_OWORD *)(v8 + 112);
          v21 = *(_OWORD *)(v8 + 128);
          *(_OWORD *)(v15 - 88) = *(_OWORD *)(v8 + 144);
          *(_OWORD *)(v15 - 104) = v21;
          *(_OWORD *)(v15 - 120) = v20;
          *(_OWORD *)(v15 - 136) = v19;
          v22 = *(_OWORD *)(v8 + 160);
          v23 = *(_OWORD *)(v8 + 176);
          v24 = *(_OWORD *)(v8 + 192);
          *(_OWORD *)(v15 - 24) = *(_OWORD *)(v8 + 208);
          *(_OWORD *)(v15 - 40) = v24;
          *(_OWORD *)(v15 - 56) = v23;
          *(_OWORD *)(v15 - 72) = v22;
        }
      }
      else
      {
        v70 = xmmword_224668DF8;
        v71 = unk_224668E08;
        v72 = xmmword_224668E18;
        v73 = unk_224668E28;
        memset(&v75[20], 0, 40);
        *(_OWORD *)&v75[4] = 0u;
        v74 = 0uLL;
        *(_DWORD *)v75 = 1065353216;
        *(_DWORD *)&v75[20] = 1065353216;
        *(_DWORD *)&v75[40] = 1065353216;
        memset(&v75[84], 0, 40);
        *(_OWORD *)&v75[68] = 0u;
        *(_QWORD *)&v75[60] = _D8;
        *(_DWORD *)&v75[84] = 1065353216;
        *(_DWORD *)&v75[104] = 1065353216;
        *(_DWORD *)&v75[124] = 1065353216;
        v69 = 0uLL;
        v68 = *(_OWORD *)v8;
        v76 = 288;
        v46 = (char *)operator new(0x240uLL);
        sub_223894E6C((uint64_t)v46);
        *(_QWORD *)&v69 = v46 + 24;
        *((_QWORD *)&v69 + 1) = v46;
        v47 = *(_QWORD *)(a3 + 8);
        if (v47 >= *(_QWORD *)(a3 + 16))
        {
          v57 = sub_22356F1F8((void **)a3, (uint64_t)&v68);
          v58 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
          *(_QWORD *)(a3 + 8) = v57;
          if (v58)
          {
            p_shared_owners = (unint64_t *)&v58->__shared_owners_;
            do
              v60 = __ldaxr(p_shared_owners);
            while (__stlxr(v60 - 1, p_shared_owners));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
        }
        else
        {
          *(_OWORD *)v47 = v68;
          *(_OWORD *)(v47 + 16) = v69;
          v69 = 0uLL;
          v48 = v73;
          v50 = v70;
          v49 = v71;
          *(_OWORD *)(v47 + 64) = v72;
          *(_OWORD *)(v47 + 80) = v48;
          *(_OWORD *)(v47 + 32) = v50;
          *(_OWORD *)(v47 + 48) = v49;
          *(_OWORD *)(v47 + 96) = v74;
          v52 = *(_OWORD *)&v75[32];
          v51 = *(_OWORD *)&v75[48];
          v53 = *(_OWORD *)&v75[16];
          *(_OWORD *)(v47 + 112) = *(_OWORD *)v75;
          *(_OWORD *)(v47 + 128) = v53;
          *(_OWORD *)(v47 + 144) = v52;
          *(_OWORD *)(v47 + 160) = v51;
          v55 = *(_OWORD *)&v75[96];
          v54 = *(_OWORD *)&v75[112];
          v56 = *(_OWORD *)&v75[80];
          *(_OWORD *)(v47 + 176) = *(_OWORD *)&v75[64];
          *(_OWORD *)(v47 + 192) = v56;
          *(_OWORD *)(v47 + 208) = v55;
          *(_OWORD *)(v47 + 224) = v54;
          *(_WORD *)(v47 + 240) = v76;
          *(_QWORD *)(a3 + 8) = v47 + 248;
        }
      }
      v8 += 232;
    }
    while (v8 != v9);
  }
  v61 = __p[0];
  if (__p[0])
  {
    do
    {
      v62 = (_QWORD *)*v61;
      operator delete(v61);
      v61 = v62;
    }
    while (v62);
  }
  v63 = v65[0];
  v65[0] = 0;
  if (v63)
    operator delete(v63);
}

void sub_223C96080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void **v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_223198118((uint64_t)va1);
  sub_22322E828((uint64_t)va);
  sub_223473EA8(v5);
  _Unwind_Resume(a1);
}

void sub_223C960B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void **v5;
  va_list va;

  va_start(va, a5);
  sub_22322E828((uint64_t)va);
  sub_223473EA8(v5);
  _Unwind_Resume(a1);
}

void sub_223C960E4(uint64_t a1, _QWORD *a2, char a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t *v25;
  uint64_t **v26;
  unsigned int v27;
  unsigned int v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  int32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  unsigned __int32 v40;
  int8x16_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v46;
  const char *v47;
  size_t v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  const char *v51;
  size_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  std::__shared_weak_count_vtbl *v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  char *v64;
  unint64_t *v65;
  unint64_t *v66;
  unint64_t *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  char *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t i;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  _QWORD *v103;
  std::__shared_weak_count *v104;
  unsigned __int8 *v105;
  const char *v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t *v109;
  uint64_t v110;
  _QWORD v111[3];
  int v112;
  const char *v113;
  int v114;
  const char *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  char v121;
  __int128 v122;
  size_t v123;
  unint64_t v124;
  char v125;
  void *v126[2];
  unint64_t v127;
  char v128;
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  if ((a3 & 0x23) != 0)
  {
    if ((a3 & 2) != 0)
    {
      v89 = *(_QWORD *)(a1 + 8);
      v90 = *(_QWORD *)(a1 + 16);
      if (v89 == v90)
      {
LABEL_169:
        v89 = v90;
      }
      else
      {
        while (!sub_223C8F01C(*(unsigned __int8 *)(v89 + 16)))
        {
          v89 += 232;
          if (v89 == v90)
            goto LABEL_169;
        }
        if (v89 != v90)
        {
          for (i = v89 + 232; i != v90; i += 232)
          {
            if (!sub_223C8F01C(*(unsigned __int8 *)(i + 16)))
            {
              v92 = *(_OWORD *)(i + 16);
              *(_OWORD *)v89 = *(_OWORD *)i;
              *(_OWORD *)(v89 + 16) = v92;
              v93 = *(_OWORD *)(i + 32);
              v94 = *(_OWORD *)(i + 48);
              v95 = *(_OWORD *)(i + 80);
              *(_OWORD *)(v89 + 64) = *(_OWORD *)(i + 64);
              *(_OWORD *)(v89 + 80) = v95;
              *(_OWORD *)(v89 + 32) = v93;
              *(_OWORD *)(v89 + 48) = v94;
              v96 = *(_OWORD *)(i + 96);
              v97 = *(_OWORD *)(i + 112);
              v98 = *(_OWORD *)(i + 144);
              *(_OWORD *)(v89 + 128) = *(_OWORD *)(i + 128);
              *(_OWORD *)(v89 + 144) = v98;
              *(_OWORD *)(v89 + 96) = v96;
              *(_OWORD *)(v89 + 112) = v97;
              v99 = *(_OWORD *)(i + 160);
              v100 = *(_OWORD *)(i + 176);
              v101 = *(_OWORD *)(i + 208);
              *(_OWORD *)(v89 + 192) = *(_OWORD *)(i + 192);
              *(_OWORD *)(v89 + 208) = v101;
              *(_OWORD *)(v89 + 160) = v99;
              *(_OWORD *)(v89 + 176) = v100;
              *(_BYTE *)(v89 + 224) = *(_BYTE *)(i + 224);
              v89 += 232;
            }
          }
        }
      }
      if (v89 != *(_QWORD *)(a1 + 16))
        *(_QWORD *)(a1 + 16) = v89;
    }
    else
    {
      v109 = 0;
      v110 = 0;
      v108 = &v109;
      v4 = (unsigned __int8 *)a2[9];
      v5 = (unsigned __int8 *)a2[10];
      v6 = (__int128 *)a2[12];
      v7 = (__int128 *)a2[13];
      if (v4 != v5 || v6 != v7)
      {
        while (1)
        {
          v9 = v109;
          v10 = &v109;
          v11 = &v109;
          if (v109)
            break;
LABEL_46:
          v18 = (char *)operator new(0x70uLL);
          *(_OWORD *)(v18 + 28) = *(_OWORD *)v4;
          v19 = *v6;
          v20 = v6[1];
          v21 = v6[2];
          *(_OWORD *)(v18 + 92) = v6[3];
          *(_OWORD *)(v18 + 76) = v21;
          *(_OWORD *)(v18 + 60) = v20;
          *(_OWORD *)(v18 + 44) = v19;
          *(_QWORD *)v18 = 0;
          *((_QWORD *)v18 + 1) = 0;
          *((_QWORD *)v18 + 2) = v11;
          *v10 = (uint64_t *)v18;
          if (*v108)
          {
            v108 = (uint64_t **)*v108;
            v18 = (char *)*v10;
          }
          sub_2231A9A8C(v109, (uint64_t *)v18);
          ++v110;
LABEL_49:
          v4 += 16;
          v6 += 4;
          if (v4 == v5 && v6 == v7)
            goto LABEL_51;
        }
        v12 = *v4;
        while (1)
        {
          v11 = (uint64_t **)v9;
          v13 = *((unsigned __int8 *)v9 + 28);
          v14 = v12 >= v13;
          if (v12 != v13)
            break;
          v15 = v4[1];
          v13 = *((unsigned __int8 *)v11 + 29);
          v14 = v15 >= v13;
          if (v15 == v13
            && (v15 = v4[2], v13 = *((unsigned __int8 *)v11 + 30), v14 = v15 >= v13, v15 == v13)
            && (v15 = v4[3], v13 = *((unsigned __int8 *)v11 + 31), v14 = v15 >= v13, v15 == v13))
          {
            v16 = v4[4];
            v17 = *((unsigned __int8 *)v11 + 32);
            if (v16 == v17)
            {
              v16 = v4[5];
              v17 = *((unsigned __int8 *)v11 + 33);
              if (v16 == v17)
              {
                v16 = v4[6];
                v17 = *((unsigned __int8 *)v11 + 34);
                if (v16 == v17)
                {
                  v16 = v4[7];
                  v17 = *((unsigned __int8 *)v11 + 35);
                  if (v16 == v17)
                  {
                    v16 = v4[8];
                    v17 = *((unsigned __int8 *)v11 + 36);
                    if (v16 == v17)
                    {
                      v16 = v4[9];
                      v17 = *((unsigned __int8 *)v11 + 37);
                      if (v16 == v17)
                      {
                        v16 = v4[10];
                        v17 = *((unsigned __int8 *)v11 + 38);
                        if (v16 == v17)
                        {
                          v16 = v4[11];
                          v17 = *((unsigned __int8 *)v11 + 39);
                          if (v16 == v17)
                          {
                            v16 = v4[12];
                            v17 = *((unsigned __int8 *)v11 + 40);
                            if (v16 == v17)
                            {
                              v16 = v4[13];
                              v17 = *((unsigned __int8 *)v11 + 41);
                              if (v16 == v17)
                              {
                                v16 = v4[14];
                                v17 = *((unsigned __int8 *)v11 + 42);
                                if (v16 == v17)
                                {
                                  v16 = v4[15];
                                  v17 = *((unsigned __int8 *)v11 + 43);
                                  if (v16 == v17)
                                    goto LABEL_27;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (v16 >= v17)
            {
LABEL_27:
              v13 = *((unsigned __int8 *)v11 + 32);
              v15 = v4[4];
              if (v13 == v15)
              {
                v13 = *((unsigned __int8 *)v11 + 33);
                v15 = v4[5];
                if (v13 == v15)
                {
                  v13 = *((unsigned __int8 *)v11 + 34);
                  v15 = v4[6];
                  if (v13 == v15)
                  {
                    v13 = *((unsigned __int8 *)v11 + 35);
                    v15 = v4[7];
                    if (v13 == v15)
                    {
                      v13 = *((unsigned __int8 *)v11 + 36);
                      v15 = v4[8];
                      if (v13 == v15)
                      {
                        v13 = *((unsigned __int8 *)v11 + 37);
                        v15 = v4[9];
                        if (v13 == v15)
                        {
                          v13 = *((unsigned __int8 *)v11 + 38);
                          v15 = v4[10];
                          if (v13 == v15)
                          {
                            v13 = *((unsigned __int8 *)v11 + 39);
                            v15 = v4[11];
                            if (v13 == v15)
                            {
                              v13 = *((unsigned __int8 *)v11 + 40);
                              v15 = v4[12];
                              if (v13 == v15)
                              {
                                v13 = *((unsigned __int8 *)v11 + 41);
                                v15 = v4[13];
                                if (v13 == v15)
                                {
                                  v13 = *((unsigned __int8 *)v11 + 42);
                                  v15 = v4[14];
                                  if (v13 == v15)
                                  {
                                    v13 = *((unsigned __int8 *)v11 + 43);
                                    v15 = v4[15];
                                    if (v13 == v15)
                                      goto LABEL_49;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_43;
            }
LABEL_9:
            v9 = *v11;
            v10 = v11;
            if (!*v11)
              goto LABEL_46;
          }
          else
          {
LABEL_41:
            if (!v14)
              goto LABEL_9;
LABEL_43:
            if (v13 >= v15)
              goto LABEL_49;
            v9 = v11[1];
            if (!v9)
            {
              v10 = v11 + 1;
              goto LABEL_46;
            }
          }
        }
        v15 = *v4;
        goto LABEL_41;
      }
LABEL_51:
      v22 = *(unsigned __int8 **)(a1 + 8);
      v23 = *(unsigned __int8 **)(a1 + 16);
      if (v22 != v23)
      {
        v105 = *(unsigned __int8 **)(a1 + 16);
        do
        {
          v24 = sub_223C8F01C(v22[16]);
          v25 = v109;
          if (!v109)
            goto LABEL_53;
          v26 = &v109;
          do
          {
            v27 = *((unsigned __int8 *)v25 + 28);
            v28 = *v22;
            if (v27 != v28)
              goto LABEL_75;
            v27 = *((unsigned __int8 *)v25 + 29);
            v28 = v22[1];
            if (v27 != v28)
              goto LABEL_75;
            v27 = *((unsigned __int8 *)v25 + 30);
            v28 = v22[2];
            if (v27 != v28)
              goto LABEL_75;
            v27 = *((unsigned __int8 *)v25 + 31);
            v28 = v22[3];
            if (v27 != v28)
              goto LABEL_75;
            v27 = *((unsigned __int8 *)v25 + 32);
            v28 = v22[4];
            if (v27 != v28)
              goto LABEL_75;
            v27 = *((unsigned __int8 *)v25 + 33);
            v28 = v22[5];
            if (v27 != v28)
              goto LABEL_75;
            v27 = *((unsigned __int8 *)v25 + 34);
            v28 = v22[6];
            if (v27 != v28)
              goto LABEL_75;
            v27 = *((unsigned __int8 *)v25 + 35);
            v28 = v22[7];
            if (v27 != v28)
              goto LABEL_75;
            v27 = *((unsigned __int8 *)v25 + 36);
            v28 = v22[8];
            if (v27 != v28)
              goto LABEL_75;
            v27 = *((unsigned __int8 *)v25 + 37);
            v28 = v22[9];
            if (v27 != v28)
              goto LABEL_75;
            v27 = *((unsigned __int8 *)v25 + 38);
            v28 = v22[10];
            if (v27 != v28)
              goto LABEL_75;
            v27 = *((unsigned __int8 *)v25 + 39);
            v28 = v22[11];
            if (v27 != v28)
              goto LABEL_75;
            v27 = *((unsigned __int8 *)v25 + 40);
            v28 = v22[12];
            if (v27 != v28)
              goto LABEL_75;
            v27 = *((unsigned __int8 *)v25 + 41);
            v28 = v22[13];
            if (v27 == v28
              && (v27 = *((unsigned __int8 *)v25 + 42), v28 = v22[14], v27 == v28)
              && (v27 = *((unsigned __int8 *)v25 + 43), v28 = v22[15], v27 == v28))
            {
              v26 = (uint64_t **)v25;
            }
            else
            {
LABEL_75:
              if (v27 < v28)
                ++v25;
              else
                v26 = (uint64_t **)v25;
            }
            v25 = (uint64_t *)*v25;
          }
          while (v25);
          if (v26 == &v109 || (char)sub_22319835C(v22, (unsigned __int8 *)v26 + 28) < 0)
          {
LABEL_53:
            if (!v24)
            {
              sub_223C91FE4(&v118);
              if (**(int **)(v118 + 56) > 4)
                goto LABEL_55;
              v42 = *(unsigned __int8 *)(v118 + 72);
              v43 = sub_22322F254(v118, "OSLogSurrogateAppender", 1, 0);
              v44 = v43;
              if (!v42 && v43 == 0)
                goto LABEL_55;
              v111[0] = &v118;
              v111[1] = std::chrono::steady_clock::now().__d_.__rep_;
              v111[2] = std::chrono::system_clock::now().__d_.__rep_;
              v112 = 4;
              v113 = "unknown file";
              v114 = 511;
              v115 = "unknown function";
              v116 = 0;
              v117 = 0;
              v46 = *(_QWORD *)v111[0];
              v47 = (const char *)(*(_QWORD *)v111[0] + 16);
              v106 = v47;
              v107 = *(_QWORD *)v111[0];
              if (*(char *)(*(_QWORD *)v111[0] + 39) < 0)
              {
                v47 = *(const char **)(v46 + 16);
                v48 = *(_QWORD *)(v46 + 24);
                v50 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v50 & 1) == 0)
                {
LABEL_161:
                  if (__cxa_guard_acquire(&qword_255788F58))
                  {
                    sub_224568628((uint64_t)&v119);
                    if (v121)
                    {
                      *(_OWORD *)byte_255788F40 = v119;
                      *(_QWORD *)&byte_255788F40[16] = v120;
                    }
                    else
                    {
                      byte_255788F40[23] = 14;
                      strcpy(byte_255788F40, "com.apple.cv3d");
                    }
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
                    __cxa_guard_release(&qword_255788F58);
                    v23 = v105;
                  }
                }
              }
              else
              {
                v48 = *(unsigned __int8 *)(*(_QWORD *)v111[0] + 39);
                v49 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v49 & 1) == 0)
                  goto LABEL_161;
              }
              if (byte_255788F40[23] >= 0)
                v51 = byte_255788F40;
              else
                v51 = *(const char **)byte_255788F40;
              if (byte_255788F40[23] >= 0)
                v52 = byte_255788F40[23];
              else
                v52 = *(_QWORD *)&byte_255788F40[8];
              *(_QWORD *)&v122 = os_log_create(v51, v47);
              if (v52 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v52 >= 0x17)
              {
                v54 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v52 | 7) != 0x17)
                  v54 = v52 | 7;
                v55 = v54 + 1;
                v53 = (char *)operator new(v54 + 1);
                v123 = v52;
                v124 = v55 | 0x8000000000000000;
                *((_QWORD *)&v122 + 1) = v53;
                v23 = v105;
              }
              else
              {
                HIBYTE(v124) = v52;
                v53 = (char *)&v122 + 8;
                if (!v52)
                {
LABEL_105:
                  v53[v52] = 0;
                  v125 = 1;
                  if (v48 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  if (v48 >= 0x17)
                  {
                    v58 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v48 | 7) != 0x17)
                      v58 = v48 | 7;
                    v59 = v58 + 1;
                    v56 = (void **)operator new(v58 + 1);
                    v126[1] = (void *)v48;
                    v127 = v59 | 0x8000000000000000;
                    v126[0] = v56;
                  }
                  else
                  {
                    HIBYTE(v127) = v48;
                    v56 = v126;
                    if (!v48)
                    {
                      LOBYTE(v126[0]) = 0;
                      v128 = 1;
                      v57 = v122;
                      if ((SHIBYTE(v127) & 0x80000000) == 0)
                        goto LABEL_109;
LABEL_115:
                      operator delete(v126[0]);
                      if (v125)
                        goto LABEL_116;
                      goto LABEL_118;
                    }
                  }
                  memmove(v56, v47, v48);
                  *((_BYTE *)v56 + v48) = 0;
                  v128 = 1;
                  v57 = v122;
                  if (SHIBYTE(v127) < 0)
                    goto LABEL_115;
LABEL_109:
                  if (v125)
                  {
LABEL_116:
                    if (SHIBYTE(v124) < 0)
                      operator delete(*((void **)&v122 + 1));
                  }
LABEL_118:
                  if ((_QWORD)v122)
                    os_release((void *)v122);
                  if (v44 && *(_QWORD *)(v44 + 24))
                  {
                    v60 = _os_log_pack_size();
                    v61 = (std::__shared_weak_count_vtbl *)operator new(v60, (std::align_val_t)8uLL);
                    v62 = (std::__shared_weak_count *)operator new();
                    v62->__shared_owners_ = 0;
                    p_shared_owners = (unint64_t *)&v62->__shared_owners_;
                    v62->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                    v62->__shared_weak_owners_ = 0;
                    v62[1].__vftable = v61;
                    v104 = v62;
                    v64 = (char *)operator new(0x28uLL);
                    strcpy(v64, "New keyframe is not tracked in slam yet");
                    v65 = (unint64_t *)operator new(0x38uLL);
                    v66 = v65;
                    v65[1] = 0;
                    v67 = v65 + 1;
                    v65[2] = 0;
                    v65[3] = (unint64_t)off_24EC1FA48;
                    v103 = v65 + 3;
                    *v65 = (unint64_t)&off_24EC1F9F8;
                    v65[4] = (unint64_t)v64;
                    v68 = v65 + 4;
                    v65[5] = 39;
                    v65[6] = 0x8000000000000028;
                    do
                      v69 = __ldxr(p_shared_owners);
                    while (__stxr(v69 + 1, p_shared_owners));
                    do
                      v70 = __ldxr(v67);
                    while (__stxr(v70 + 1, v67));
                    do
                      v71 = __ldaxr(v67);
                    while (__stlxr(v71 - 1, v67));
                    if (!v71)
                    {
                      (*(void (**)(unint64_t *))(*v65 + 16))(v65);
                      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v66);
                    }
                    do
                      v72 = __ldaxr(p_shared_owners);
                    while (__stlxr(v72 - 1, p_shared_owners));
                    if (!v72)
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                    if (*((char *)v66 + 55) >= 0)
                      v73 = v68;
                    else
                      v73 = (_QWORD *)v66[4];
                    v74 = _os_log_pack_fill();
                    *(_DWORD *)v74 = 136380675;
                    *(_QWORD *)(v74 + 4) = v73;
                    v75 = operator new();
                    v76 = *(unsigned __int8 *)(v107 + 39);
                    v77 = v106;
                    if ((v76 & 0x80u) != 0)
                    {
                      v77 = *(const char **)(v107 + 16);
                      v76 = *(_QWORD *)(v107 + 24);
                    }
                    *(_QWORD *)v75 = v61;
                    *(_QWORD *)(v75 + 8) = v61;
                    *(_QWORD *)(v75 + 16) = v104;
                    *(_QWORD *)(v75 + 24) = v103;
                    *(_QWORD *)(v75 + 32) = v66;
                    *(_QWORD *)(v75 + 40) = v77;
                    *(_QWORD *)(v75 + 48) = v76;
                    *(_BYTE *)(v75 + 56) = 16;
                    *(_QWORD *)&v122 = v75;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v44 + 24) + 40))(*(_QWORD *)(v44 + 24), &v122);
                    v78 = v122;
                    *(_QWORD *)&v122 = 0;
                    v23 = v105;
                    if (v78)
                    {
                      v79 = *(std::__shared_weak_count **)(v78 + 32);
                      if (v79)
                      {
                        v80 = (unint64_t *)&v79->__shared_owners_;
                        do
                          v81 = __ldaxr(v80);
                        while (__stlxr(v81 - 1, v80));
                        if (!v81)
                        {
                          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                          std::__shared_weak_count::__release_weak(v79);
                        }
                      }
                      v82 = *(std::__shared_weak_count **)(v78 + 16);
                      if (v82)
                      {
                        v83 = (unint64_t *)&v82->__shared_owners_;
                        do
                          v84 = __ldaxr(v83);
                        while (__stlxr(v84 - 1, v83));
                        if (!v84)
                        {
                          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                          std::__shared_weak_count::__release_weak(v82);
                        }
                      }
                      MEMORY[0x227684CE8](v78, 0x10F0C40B62ED6C6);
                    }
                    if (v42)
                    {
                      LODWORD(v122) = 136380675;
                      *(_QWORD *)((char *)&v122 + 4) = "New keyframe is not tracked in slam yet";
                      LODWORD(v102) = 12;
                      goto LABEL_152;
                    }
                    goto LABEL_154;
                  }
                  os_log_type_enabled(v57, OS_LOG_TYPE_ERROR);
                  if (v42)
                  {
                    LODWORD(v122) = 136380675;
                    *(_QWORD *)((char *)&v122 + 4) = "New keyframe is not tracked in slam yet";
                    LODWORD(v102) = 12;
LABEL_152:
                    v85 = (char *)_os_log_send_and_compose_impl();
                    sub_22322C138((uint64_t)v111, v85, &v122, v102);
                    sub_223182C08((uint64_t)v111);
                    if (!v85)
                    {
LABEL_154:
                      sub_223182C08((uint64_t)v111);
                      v86 = v117;
                      if (v117)
                      {
                        v87 = (unint64_t *)&v117->__shared_owners_;
                        do
                          v88 = __ldaxr(v87);
                        while (__stlxr(v88 - 1, v87));
                        if (!v88)
                        {
                          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                          std::__shared_weak_count::__release_weak(v86);
                        }
                      }
                      goto LABEL_55;
                    }
                  }
                  else
                  {
                    LODWORD(v122) = 136380675;
                    *(_QWORD *)((char *)&v122 + 4) = "New keyframe is not tracked in slam yet";
                    v85 = (char *)_os_log_send_and_compose_impl();
                    if (!v85)
                      goto LABEL_154;
                  }
                  free(v85);
                  goto LABEL_154;
                }
              }
              memmove(v53, v51, v52);
              goto LABEL_105;
            }
            v22[16] = 32;
          }
          else
          {
            v29 = *(float32x4_t *)((char *)v26 + 44);
            v30 = *(float32x4_t *)((char *)v26 + 60);
            v31 = *(float32x4_t *)((char *)v26 + 76);
            v32 = *(float32x4_t *)((char *)v26 + 92);
            v33 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(*((_OWORD *)v22 + 6))), v30, *(float32x2_t *)(v22 + 96), 1), v31, *((float32x4_t *)v22 + 6), 2), v32, *((float32x4_t *)v22 + 6), 3);
            v34 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(*((_OWORD *)v22 + 7))), v30, *(float32x2_t *)(v22 + 112), 1), v31, *((float32x4_t *)v22 + 7), 2), v32, *((float32x4_t *)v22 + 7), 3);
            v35 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(*((_OWORD *)v22 + 8))), v30, *(float32x2_t *)(v22 + 128), 1), v31, *((float32x4_t *)v22 + 8), 2), v32, *((float32x4_t *)v22 + 8), 3);
            v36 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(*((_OWORD *)v22 + 9))), v30, *(float32x2_t *)(v22 + 144), 1), v31, *((float32x4_t *)v22 + 9), 2), v32, *((float32x4_t *)v22 + 9), 3);
            v30.i64[0] = vzip1q_s32(v33, v34).u64[0];
            v36.i64[0] ^= 0x8000000080000000;
            v30.i64[1] = v35.u32[0];
            v37 = vtrn2q_s32(v33, v34);
            v38 = (int8x16_t)v37;
            v38.i32[2] = v35.i32[1];
            *(float32x2_t *)v31.f32 = vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v30.f32, v36.f32[0]), *(float32x2_t *)v37.i8, *(float32x2_t *)v36.f32, 1);
            v39 = (int8x16_t)vzip2q_s32(v33, v34);
            *(float32x2_t *)v31.f32 = vmla_n_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v39.i8, COERCE_FLOAT(v36.i32[2] ^ 0x80000000));
            v39.i32[2] = v35.i32[2];
            v40 = vdupq_laneq_s32((int32x4_t)v39, 2).u32[0];
            v31.i64[1] = __PAIR64__(1.0, vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v36.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.f32, 1), *(float32x2_t *)v35.i8, 1), (float32x2_t)(v36.i64[1] ^ 0xFFFFFFFF80000000), (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)).u32[0]);
            v36.i32[0] = v38.i32[0];
            v41 = vextq_s8(vextq_s8(v38, v38, 0xCuLL), v39, 8uLL);
            v36.i32[1] = v41.i32[0];
            v36.i64[1] = v41.u32[1];
            v34.i64[0] = v41.i64[1];
            v34.i64[1] = v40;
            *((float32x4_t *)v22 + 2) = v30;
            *((float32x4_t *)v22 + 3) = v36;
            *((int32x4_t *)v22 + 4) = v34;
            *((float32x4_t *)v22 + 5) = v31;
          }
LABEL_55:
          v22 += 232;
        }
        while (v22 != v23);
      }
      sub_223198030((uint64_t)&v108, v109);
    }
  }
}

void sub_223C96F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,_QWORD *a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35)
{
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;

  __cxa_guard_abort(&qword_255788F58);
  sub_223182C08((uint64_t)&a27);
  v36 = a35;
  if (a35)
  {
    p_shared_owners = (unint64_t *)&a35->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_223198030((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

void sub_223C97160(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __n128 v73;
  char *v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  uint64_t v79;
  __n128 v82;
  char *v83;
  __n128 v84;
  void *__p;
  char *v86;
  _QWORD v87[2];
  _QWORD v88[2];

  v9 = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  v10 = a1 + 112;
  a7[1] = 0;
  a7[2] = 0;
  *a7 = 0;
  if ((a2 & 4) == 0)
    goto LABEL_70;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  if (v12 == v13)
  {
LABEL_6:
    v17 = v13;
  }
  else
  {
    while (1)
    {
      LOBYTE(__p) = *(_BYTE *)(v12 + 16);
      LOBYTE(v88[0]) = a2;
      v16 = *(_QWORD *)(a1 + 72);
      if (!v16)
LABEL_71:
        sub_223198474();
      if (((*(uint64_t (**)(uint64_t, void **, uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v16 + 48))(v16, &__p, v12, v88, a5, v10) & 1) != 0)break;
      v12 += 232;
      if (v12 == v13)
        goto LABEL_6;
    }
    v17 = v13;
    if (v12 != v13)
    {
      v61 = v12 + 232;
      v17 = v12;
      while (v61 != v13)
      {
        LOBYTE(__p) = *(_BYTE *)(v61 + 16);
        LOBYTE(v88[0]) = a2;
        v62 = *(_QWORD *)(a1 + 72);
        if (!v62)
          goto LABEL_71;
        if (((*(uint64_t (**)(uint64_t, void **, uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v62 + 48))(v62, &__p, v61, v88, a5, v10) & 1) == 0)
        {
          v63 = *(_OWORD *)(v61 + 16);
          *(_OWORD *)v17 = *(_OWORD *)v61;
          *(_OWORD *)(v17 + 16) = v63;
          v64 = *(_OWORD *)(v61 + 32);
          v65 = *(_OWORD *)(v61 + 48);
          v66 = *(_OWORD *)(v61 + 80);
          *(_OWORD *)(v17 + 64) = *(_OWORD *)(v61 + 64);
          *(_OWORD *)(v17 + 80) = v66;
          *(_OWORD *)(v17 + 32) = v64;
          *(_OWORD *)(v17 + 48) = v65;
          v67 = *(_OWORD *)(v61 + 96);
          v68 = *(_OWORD *)(v61 + 112);
          v69 = *(_OWORD *)(v61 + 144);
          *(_OWORD *)(v17 + 128) = *(_OWORD *)(v61 + 128);
          *(_OWORD *)(v17 + 144) = v69;
          *(_OWORD *)(v17 + 96) = v67;
          *(_OWORD *)(v17 + 112) = v68;
          v70 = *(_OWORD *)(v61 + 160);
          v71 = *(_OWORD *)(v61 + 176);
          v72 = *(_OWORD *)(v61 + 208);
          *(_OWORD *)(v17 + 192) = *(_OWORD *)(v61 + 192);
          *(_OWORD *)(v17 + 208) = v72;
          *(_OWORD *)(v17 + 160) = v70;
          *(_OWORD *)(v17 + 176) = v71;
          *(_BYTE *)(v17 + 224) = *(_BYTE *)(v61 + 224);
          v17 += 232;
        }
        v61 += 232;
      }
    }
  }
  if (v17 != *(_QWORD *)(a1 + 16))
    *(_QWORD *)(a1 + 16) = v17;
  v18 = *(unsigned __int8 *)(a1 + 40);
  sub_223C95C34(a1, a6, (uint64_t)&__p);
  v19 = a1 + 36;
  if (!(_DWORD)v18)
    v19 = 0;
  v88[0] = a3;
  v88[1] = a4;
  v87[0] = v19;
  v87[1] = v18;
  v20 = *(_QWORD *)(a1 + 104);
  if (!v20)
    sub_223198474();
  v21 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, void **))(*(_QWORD *)v20 + 48))(v20, v88, v87, &__p);
  v22 = *(_DWORD *)(a1 + 32) + v21;
  if (v22 >= HIDWORD(v21))
    v23 = HIDWORD(v21);
  else
    v23 = v22;
  v84 = 0uLL;
  v83 = 0;
  v24 = (char *)__p;
  if ((_DWORD)v23)
  {
    v25 = 248 * v23;
    v26 = (char *)operator new(248 * v23);
    v27 = v26;
    v28 = 0;
    v29 = (unint64_t)&v26[248 * v23];
    do
    {
      v30 = &v24[v28];
      v31 = &v26[v28];
      *(_OWORD *)v31 = *(_OWORD *)&v24[v28];
      *((_OWORD *)v31 + 1) = *(_OWORD *)&v24[v28 + 16];
      *((_QWORD *)v30 + 2) = 0;
      *((_QWORD *)v30 + 3) = 0;
      v32 = *(_OWORD *)&v24[v28 + 32];
      v33 = *(_OWORD *)&v24[v28 + 48];
      v34 = *(_OWORD *)&v24[v28 + 80];
      *((_OWORD *)v31 + 4) = *(_OWORD *)&v24[v28 + 64];
      *((_OWORD *)v31 + 5) = v34;
      *((_OWORD *)v31 + 2) = v32;
      *((_OWORD *)v31 + 3) = v33;
      *((_OWORD *)v31 + 6) = *(_OWORD *)&v24[v28 + 96];
      v35 = *(_OWORD *)&v24[v28 + 112];
      v36 = *(_OWORD *)&v24[v28 + 128];
      v37 = *(_OWORD *)&v24[v28 + 160];
      *((_OWORD *)v31 + 9) = *(_OWORD *)&v24[v28 + 144];
      *((_OWORD *)v31 + 10) = v37;
      *((_OWORD *)v31 + 7) = v35;
      *((_OWORD *)v31 + 8) = v36;
      v38 = *(_OWORD *)&v24[v28 + 176];
      v39 = *(_OWORD *)&v24[v28 + 192];
      v40 = *(_OWORD *)&v24[v28 + 224];
      *((_OWORD *)v31 + 13) = *(_OWORD *)&v24[v28 + 208];
      *((_OWORD *)v31 + 14) = v40;
      *((_OWORD *)v31 + 11) = v38;
      *((_OWORD *)v31 + 12) = v39;
      *((_WORD *)v31 + 120) = *(_WORD *)&v24[v28 + 240];
      v28 += 248;
    }
    while (v31 + 248 != (char *)v29);
    v83 = v26;
    v84.n128_u64[0] = (unint64_t)&v26[248 * v23];
    v84.n128_u64[1] = v84.n128_u64[0];
    v41 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(a1 + 8) != v41)
    {
      v42 = *(_QWORD *)(a1 + 8);
      do
      {
        v43 = 0;
        while (*(_QWORD *)&v26[v43] != *(_QWORD *)v42 || *(_QWORD *)&v26[v43 + 8] != *(_QWORD *)(v42 + 8))
        {
          v43 += 248;
          if (v25 == v43)
            goto LABEL_21;
        }
        if (v25 != v43)
          goto LABEL_31;
LABEL_21:
        v42 += 232;
      }
      while (v42 != v41);
    }
    goto LABEL_58;
  }
  v45 = *(_QWORD *)(a1 + 8);
  v41 = *(_QWORD *)(a1 + 16);
  if (v45 == v41)
  {
    v27 = 0;
    v29 = 0;
  }
  else
  {
    v29 = 0;
    v27 = 0;
    v42 = v45 + 232 * ((v41 - v45 - 232) / 0xE8uLL) + 232;
LABEL_31:
    if (v42 == v41)
      goto LABEL_58;
    v46 = v42 + 232;
    if (v42 + 232 != v41)
    {
      v47 = v42;
      do
      {
        v58 = v46;
        if (!(_DWORD)v23)
          goto LABEL_34;
        v59 = v27;
        while (*v59 != *(_QWORD *)v58 || v59[1] != *(_QWORD *)(v58 + 8))
        {
          v59 += 31;
          if (v59 == (_QWORD *)v29)
            goto LABEL_34;
        }
        if (v59 == (_QWORD *)v29)
        {
LABEL_34:
          v48 = *(_OWORD *)(v58 + 16);
          *(_OWORD *)v47 = *(_OWORD *)v58;
          *(_OWORD *)(v47 + 16) = v48;
          v49 = *(_OWORD *)(v42 + 264);
          v50 = *(_OWORD *)(v42 + 280);
          v51 = *(_OWORD *)(v42 + 312);
          *(_OWORD *)(v47 + 64) = *(_OWORD *)(v42 + 296);
          *(_OWORD *)(v47 + 80) = v51;
          *(_OWORD *)(v47 + 32) = v49;
          *(_OWORD *)(v47 + 48) = v50;
          v52 = *(_OWORD *)(v42 + 328);
          v53 = *(_OWORD *)(v42 + 344);
          v54 = *(_OWORD *)(v42 + 376);
          *(_OWORD *)(v47 + 128) = *(_OWORD *)(v42 + 360);
          *(_OWORD *)(v47 + 144) = v54;
          *(_OWORD *)(v47 + 96) = v52;
          *(_OWORD *)(v47 + 112) = v53;
          v55 = *(_OWORD *)(v42 + 392);
          v56 = *(_OWORD *)(v42 + 408);
          v57 = *(_OWORD *)(v42 + 440);
          *(_OWORD *)(v47 + 192) = *(_OWORD *)(v42 + 424);
          *(_OWORD *)(v47 + 208) = v57;
          *(_OWORD *)(v47 + 160) = v55;
          *(_OWORD *)(v47 + 176) = v56;
          *(_BYTE *)(v47 + 224) = *(_BYTE *)(v42 + 456);
          v47 += 232;
        }
        v46 = v58 + 232;
        v42 = v58;
      }
      while (v58 + 232 != v41);
      if (v47 == *(_QWORD *)(a1 + 16))
        goto LABEL_58;
      goto LABEL_57;
    }
    v47 = v42;
    if (v42 != v41)
LABEL_57:
      *(_QWORD *)(a1 + 16) = v47;
  }
LABEL_58:
  v73 = (__n128)vdupq_n_s64(v29);
  if (v24)
  {
    v74 = v86;
    v75 = v24;
    if (v86 != v24)
    {
      do
      {
        v76 = (std::__shared_weak_count *)*((_QWORD *)v74 - 28);
        if (v76)
        {
          p_shared_owners = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(p_shared_owners);
          while (__stlxr(v78 - 1, p_shared_owners));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v76->__on_zero_shared)(v76, v73);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        v74 -= 248;
      }
      while (v74 != v24);
      v75 = __p;
      v73 = v84;
      v27 = v83;
    }
    v82 = v73;
    v86 = v24;
    operator delete(v75);
    v73 = v82;
  }
  *a7 = v27;
  *(__n128 *)(a7 + 1) = v73;
  v9 = -1108378657 * ((v73.n128_u64[0] - (unint64_t)v27) >> 3);
LABEL_70:
  v79 = 1332920885 * ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  *(_QWORD *)(a1 + 128) = v9;
  *(_QWORD *)(a1 + 136) = v79;
}

void sub_223C976EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void **v5;
  void *v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_223473EA8((void **)va);
  sub_223473EA8((void **)va1);
  sub_223473EA8(v5);
  _Unwind_Resume(a1);
}

void sub_223C97718(_Unwind_Exception *a1)
{
  void **v1;

  sub_223473EA8(v1);
  _Unwind_Resume(a1);
}

void sub_223C9772C(_Unwind_Exception *a1)
{
  void **v1;

  sub_223473EA8(v1);
  _Unwind_Resume(a1);
}

void sub_223C97740(_Unwind_Exception *a1)
{
  void **v1;

  sub_223473EA8(v1);
  _Unwind_Resume(a1);
}

void sub_223C97754(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  const char *v10;
  size_t v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  int v64;
  const char *v65;
  int v66;
  const char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE object[24];
  __int128 v74;
  void *__p[2];
  unint64_t v76;
  char v77;
  uint64_t v78;

  v4 = (_QWORD *)a3;
  v78 = *MEMORY[0x24BDAC8D0];
  sub_223C95C34(a1, a2, a3);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
  sub_223C91FE4(&v70);
  if (**(int **)(v70 + 56) > 3)
    return;
  v5 = *(unsigned __int8 *)(v70 + 72);
  v6 = sub_22322F254(v70, "OSLogSurrogateAppender", 1, 0);
  v7 = v6;
  if (!v5 && v6 == 0)
    return;
  v63[0] = &v70;
  v63[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v63[2] = std::chrono::system_clock::now().__d_.__rep_;
  v64 = 3;
  v65 = "unknown file";
  v66 = 576;
  v68 = 0;
  v69 = 0;
  v67 = "unknown function";
  v9 = v70;
  v10 = (const char *)(v70 + 16);
  v60 = v70 + 16;
  if (*(char *)(v70 + 39) < 0)
  {
    v10 = *(const char **)(v70 + 16);
    v11 = *(_QWORD *)(v70 + 24);
  }
  else
  {
    v11 = *(unsigned __int8 *)(v70 + 39);
  }
  v61 = *v4;
  v62 = v4[1];
  v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
    if ((_BYTE)v74 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F40[23] >= 0)
    v13 = byte_255788F40;
  else
    v13 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v14 = byte_255788F40[23];
  else
    v14 = *(_QWORD *)&byte_255788F40[8];
  *(_QWORD *)object = os_log_create(v13, v10);
  v15 = &object[8];
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v14 >= 0x17)
  {
    v59 = v4;
    v16 = v5;
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v15 = operator new(v17 + 1);
    *(_QWORD *)&object[16] = v14;
    *(_QWORD *)&v74 = v18 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v15;
    v5 = v16;
    v4 = v59;
    goto LABEL_23;
  }
  BYTE7(v74) = v14;
  if (v14)
LABEL_23:
    memmove(v15, v13, v14);
  v15[v14] = 0;
  BYTE8(v74) = 1;
  v19 = __p;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v11 >= 0x17)
  {
    v21 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v21 = v11 | 7;
    v22 = v21 + 1;
    v19 = operator new(v21 + 1);
    __p[1] = (void *)v11;
    v76 = v22 | 0x8000000000000000;
    __p[0] = v19;
  }
  else
  {
    HIBYTE(v76) = v11;
    if (!v11)
    {
      LOBYTE(__p[0]) = 0;
      v77 = 1;
      v20 = *(NSObject **)object;
      if ((SHIBYTE(v76) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v19, v10, v11);
  *((_BYTE *)v19 + v11) = 0;
  v77 = 1;
  v20 = *(NSObject **)object;
  if ((SHIBYTE(v76) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v74))
      goto LABEL_37;
LABEL_35:
    if (SBYTE7(v74) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(__p[0]);
  if (BYTE8(v74))
    goto LABEL_35;
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v7 && *(_QWORD *)(v7 + 24))
  {
    v23 = _os_log_pack_size();
    v24 = (std::__shared_weak_count_vtbl *)operator new(v23, (std::align_val_t)8uLL);
    v25 = (std::__shared_weak_count *)operator new();
    v26 = v25;
    v25->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v25->__shared_weak_owners_ = 0;
    v25[1].__vftable = v24;
    *(_QWORD *)object = v24;
    *(_QWORD *)&object[8] = v24;
    *(_QWORD *)&object[16] = v25;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
    v74 = 0uLL;
    __p[0] = 0;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v26);
    }
    v30 = *(_QWORD *)object;
    v31 = _os_log_pack_fill();
    *(_DWORD *)v31 = 134217984;
    *(_QWORD *)(v31 + 4) = 0xEF7BDEF7BDEF7BDFLL * ((v62 - v61) >> 3);
    v32 = operator new();
    v33 = *(unsigned __int8 *)(v9 + 39);
    v34 = v60;
    if ((v33 & 0x80u) != 0)
    {
      v34 = *(_QWORD *)(v9 + 16);
      v33 = *(_QWORD *)(v9 + 24);
    }
    *(_QWORD *)v32 = v30;
    *(_OWORD *)(v32 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v32 + 24) = v74;
    v74 = 0uLL;
    *(_QWORD *)(v32 + 40) = v34;
    *(_QWORD *)(v32 + 48) = v33;
    *(_BYTE *)(v32 + 56) = 1;
    v71 = 0;
    v72 = v32;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), &v72);
    v35 = v72;
    v72 = 0;
    if (v35)
    {
      v36 = *(std::__shared_weak_count **)(v35 + 32);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = *(std::__shared_weak_count **)(v35 + 16);
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      MEMORY[0x227684CE8](v35, 0x10F0C40B62ED6C6);
      v42 = v71;
      v71 = 0;
      if (v42)
      {
        v43 = *(std::__shared_weak_count **)(v42 + 32);
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v46 = *(std::__shared_weak_count **)(v42 + 16);
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        MEMORY[0x227684CE8](v42, 0x10F0C40B62ED6C6);
      }
    }
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
    if (*((_QWORD *)&v74 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v53 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
  }
  else
  {
    os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134217984;
    *(_QWORD *)&object[4] = 0xEF7BDEF7BDEF7BDFLL * ((v62 - v61) >> 3);
    v55 = (void *)_os_log_send_and_compose_impl();
    if (v55)
      free(v55);
  }
  if (v5)
  {
    sub_22322C138((uint64_t)v63, "VLM:MBL Flush %zu pending keyframes", 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v4[1] - *v4) >> 3));
    sub_223182C08((uint64_t)v63);
  }
  sub_223182C08((uint64_t)v63);
  v56 = v69;
  if (v69)
  {
    v57 = (unint64_t *)&v69->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
}

void sub_223C97EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,int a26,__int16 a27,char a28,char a29,void *__p,void *a31,int a32,__int16 a33,char a34,char a35,char a36,int a37,__int16 a38,char a39,char a40)
{
  if (a36)
  {
    if (a35 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a15);
  sub_223473EA8(a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_223C97FCC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  *a1 = &off_24EC62D60;
  v2 = a1 + 10;
  v3 = (_QWORD *)a1[13];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[9];
  if (v5 == a1 + 6)
  {
    v6 = 4;
    v5 = a1 + 6;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (void *)a1[1];
  if (v7)
  {
    a1[2] = v7;
    operator delete(v7);
  }
  return a1;
}

void sub_223C98068(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  *a1 = &off_24EC62D60;
  v2 = a1 + 10;
  v3 = (_QWORD *)a1[13];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[9];
  if (v5 == a1 + 6)
  {
    v6 = 4;
    v5 = a1 + 6;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (void *)a1[1];
  if (v7)
  {
    a1[2] = v7;
    operator delete(v7);
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C98114(uint64_t a1)
{
  return 0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
}

uint64_t sub_223C98138(uint64_t a1)
{
  return a1 + 112;
}

float *sub_223C98140(float *result, float *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t v8;
  float *v9;
  unint64_t i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  float *v15;
  uint64_t v16;
  uint64_t *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  unint64_t v24;
  float *j;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  float v29;
  float v30;
  BOOL v32;
  float v33;
  float v34;
  float v35;
  float *v36;
  float v37;
  uint64_t v38;
  uint64_t *v39;
  float v40;
  float v41;
  float v42;
  float *v43;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  float v50;
  unsigned int v51;
  uint64_t v52;
  _QWORD *v53;
  float v54;
  int64_t v55;
  int64_t v56;
  unint64_t v57;
  int64_t v58;
  uint64_t v59;
  unint64_t v60;
  float v61;
  uint64_t v62;
  unint64_t v63;
  float v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  float v87;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float v93;
  unsigned int v94;
  uint64_t v95;
  float v96;
  float v97;
  float *v98;
  float *v99;
  float *v100;

  v8 = (uint64_t)result;
LABEL_2:
  v9 = a2 - 2;
  v98 = a2 - 6;
  v99 = a2 - 4;
  i = v8;
  v100 = a2;
  while (2)
  {
    v8 = i;
    v11 = (uint64_t)a2 - i;
    v12 = (uint64_t)((uint64_t)a2 - i) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v42 = *(a2 - 2);
        if (vabds_f32(v42, *(float *)i) >= 0.00000011921)
        {
          if (v42 >= *(float *)i)
            return result;
        }
        else if (*(_QWORD *)(**a3 + 248 * *((unsigned int *)a2 - 1) + 104) >= *(_QWORD *)(**a3
                                                                                           + 248
                                                                                           * *(unsigned int *)(i + 4)
                                                                                           + 104))
        {
          return result;
        }
        v91 = *(_QWORD *)i;
        *(_QWORD *)i = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v91;
        return result;
      case 3uLL:
        return sub_223C98F5C((float *)i, (uint64_t *)(i + 8), v9, a3);
      case 4uLL:
        return sub_223C993B4((float *)i, (uint64_t *)(i + 8), (uint64_t *)(i + 16), (uint64_t *)v9, a3);
      case 5uLL:
        return sub_223C98D90((float *)i, (uint64_t *)(i + 8), (uint64_t *)(i + 16), (uint64_t *)(i + 24), (uint64_t *)v9, a3);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if ((float *)i != a2)
            {
              v55 = (v12 - 2) >> 1;
              v56 = v55;
              while (1)
              {
                v58 = v56;
                if (v55 < v56)
                  goto LABEL_127;
                v59 = (2 * v56) | 1;
                v60 = i + 8 * v59;
                if (2 * v58 + 2 < (uint64_t)v12)
                {
                  v61 = *(float *)(v60 + 8);
                  if (vabds_f32(*(float *)v60, v61) >= 0.00000011921)
                  {
                    if (*(float *)v60 >= v61)
                      goto LABEL_135;
LABEL_134:
                    v60 += 8;
                    v59 = 2 * v58 + 2;
                    goto LABEL_135;
                  }
                  v62 = **a3;
                  result = *(float **)(v62 + 248 * *(unsigned int *)(v60 + 4) + 104);
                  if ((uint64_t)result < *(_QWORD *)(v62 + 248 * *(unsigned int *)(v60 + 12) + 104))
                    goto LABEL_134;
                }
LABEL_135:
                v63 = i + 8 * v58;
                v64 = *(float *)v63;
                v65 = *(_DWORD *)(v63 + 4);
                if (vabds_f32(*(float *)v60, *(float *)v63) >= 0.00000011921)
                {
                  if (*(float *)v60 >= v64)
                  {
LABEL_139:
                    *(_QWORD *)v63 = *(_QWORD *)v60;
                    if (v55 < v59)
                    {
LABEL_125:
                      v57 = v60;
LABEL_126:
                      *(float *)v57 = v64;
                      *(_DWORD *)(v57 + 4) = v65;
                      goto LABEL_127;
                    }
                    while (2)
                    {
                      v68 = 2 * v59;
                      v59 = (2 * v59) | 1;
                      v57 = i + 8 * v59;
                      v69 = v68 + 2;
                      if (v69 < (uint64_t)v12)
                      {
                        result = (float *)(v57 + 8);
                        v70 = *(float *)(v57 + 8);
                        if (vabds_f32(*(float *)v57, v70) >= 0.00000011921)
                        {
                          if (*(float *)v57 < v70)
                            goto LABEL_148;
                        }
                        else
                        {
                          if (*(_QWORD *)(**a3 + 248 * *(unsigned int *)(v57 + 4) + 104) >= *(_QWORD *)(**a3 + 248 * *(unsigned int *)(v57 + 12) + 104))
                            goto LABEL_149;
LABEL_148:
                          v57 += 8;
                          v59 = v69;
                        }
                      }
LABEL_149:
                      if (vabds_f32(*(float *)v57, v64) >= 0.00000011921)
                      {
                        if (*(float *)v57 < v64)
                          goto LABEL_125;
                      }
                      else
                      {
                        v71 = **a3;
                        v72 = *(_QWORD *)(v71 + 248 * *(unsigned int *)(v57 + 4) + 104);
                        result = *(float **)(v71 + 248 * v65 + 104);
                        if (v72 < (uint64_t)result)
                          goto LABEL_125;
                      }
                      *(_QWORD *)v60 = *(_QWORD *)v57;
                      v60 = v57;
                      if (v55 < v59)
                        goto LABEL_126;
                      continue;
                    }
                  }
                }
                else
                {
                  v66 = **a3;
                  v67 = *(_QWORD *)(v66 + 248 * *(unsigned int *)(v60 + 4) + 104);
                  result = *(float **)(v66 + 248 * v65 + 104);
                  if (v67 >= (uint64_t)result)
                    goto LABEL_139;
                }
LABEL_127:
                v56 = v58 - 1;
                if (!v58)
                {
                  v73 = (unint64_t)v11 >> 3;
                  while (1)
                  {
                    v75 = 0;
                    v76 = *(_QWORD *)i;
                    v77 = i;
                    do
                    {
                      v78 = (_QWORD *)v77;
                      v77 += 8 * v75 + 8;
                      v79 = 2 * v75;
                      v75 = (2 * v75) | 1;
                      v80 = v79 + 2;
                      if (v80 < v73)
                      {
                        v81 = *(float *)(v77 + 8);
                        if (vabds_f32(*(float *)v77, v81) >= 0.00000011921)
                        {
                          if (*(float *)v77 < v81)
                          {
LABEL_156:
                            v77 += 8;
                            v75 = v80;
                          }
                        }
                        else
                        {
                          v82 = **a3;
                          result = *(float **)(v82 + 248 * *(unsigned int *)(v77 + 4) + 104);
                          if ((uint64_t)result < *(_QWORD *)(v82 + 248 * *(unsigned int *)(v77 + 12) + 104))
                            goto LABEL_156;
                        }
                      }
                      *v78 = *(_QWORD *)v77;
                    }
                    while (v75 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
                    a2 -= 2;
                    if ((float *)v77 == a2)
                    {
                      *(_QWORD *)v77 = v76;
                    }
                    else
                    {
                      *(_QWORD *)v77 = *(_QWORD *)a2;
                      *(_QWORD *)a2 = v76;
                      v83 = v77 - i + 8;
                      if (v83 >= 9)
                      {
                        v84 = ((unint64_t)v83 >> 3) - 2;
                        v85 = v84 >> 1;
                        v86 = i + 8 * (v84 >> 1);
                        v87 = *(float *)v77;
                        v88 = *(_DWORD *)(v77 + 4);
                        if (vabds_f32(*(float *)v86, *(float *)v77) >= 0.00000011921)
                        {
                          if (*(float *)v86 < v87)
                            goto LABEL_170;
                        }
                        else if (*(_QWORD *)(**a3 + 248 * *(unsigned int *)(v86 + 4) + 104) < *(_QWORD *)(**a3 + 248 * v88 + 104))
                        {
LABEL_170:
                          *(_QWORD *)v77 = *(_QWORD *)v86;
                          if (v84 >= 2)
                          {
                            while (1)
                            {
                              v89 = v85 - 1;
                              v85 = (v85 - 1) >> 1;
                              v90 = i + 8 * v85;
                              if (vabds_f32(*(float *)v90, v87) >= 0.00000011921)
                              {
                                if (*(float *)v90 >= v87)
                                  break;
                              }
                              else if (*(_QWORD *)(**a3 + 248 * *(unsigned int *)(v90 + 4) + 104) >= *(_QWORD *)(**a3 + 248 * v88 + 104))
                              {
                                break;
                              }
                              *(_QWORD *)v86 = *(_QWORD *)v90;
                              v86 = i + 8 * v85;
                              if (v89 <= 1)
                                goto LABEL_177;
                            }
                          }
                          v90 = v86;
LABEL_177:
                          *(float *)v90 = v87;
                          *(_DWORD *)(v90 + 4) = v88;
                        }
                      }
                    }
                    if (v73-- <= 2)
                      return result;
                  }
                }
              }
            }
            return result;
          }
          v13 = v12 >> 1;
          v14 = (uint64_t *)(i + 8 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x401)
          {
            sub_223C98F5C((float *)v8, (uint64_t *)(v8 + 8 * (v12 >> 1)), v9, a3);
            v15 = (float *)(v8 + 8 * v13);
            sub_223C98F5C((float *)(v8 + 8), (uint64_t *)v15 - 1, v99, a3);
            sub_223C98F5C((float *)(v8 + 16), (uint64_t *)(v8 + 8 + 8 * v13), v98, a3);
            result = sub_223C98F5C(v15 - 2, v14, (float *)(v8 + 8 + 8 * v13), a3);
            v16 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            a2 = v100;
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_12;
            goto LABEL_8;
          }
          result = sub_223C98F5C((float *)(v8 + 8 * (v12 >> 1)), (uint64_t *)v8, v9, a3);
          --a4;
          if ((a5 & 1) == 0)
          {
LABEL_8:
            v17 = *a3;
            v18 = *(float *)(v8 - 8);
            v19 = *(_DWORD *)(v8 + 4);
            if (vabds_f32(v18, *(float *)v8) >= 0.00000011921)
            {
              if (v18 < *(float *)v8)
                goto LABEL_14;
            }
            else if (*(_QWORD *)(*v17 + 248 * *(unsigned int *)(v8 - 4) + 104) < *(_QWORD *)(*v17 + 248 * v19 + 104))
            {
              goto LABEL_14;
            }
            v33 = *(float *)v8;
            v34 = *(float *)v8;
            v35 = *v9;
            if (vabds_f32(*(float *)v8, *v9) >= 0.00000011921)
            {
              if (v35 > v34)
              {
LABEL_56:
                for (i = v8 + 8; ; i += 8)
                {
                  if (vabds_f32(v34, *(float *)i) >= 0.00000011921)
                  {
                    if (*(float *)i > v34)
                      goto LABEL_69;
                  }
                  else if (*(_QWORD *)(*v17 + 248 * v19 + 104) < *(_QWORD *)(*v17
                                                                              + 248 * *(unsigned int *)(i + 4)
                                                                              + 104))
                  {
                    goto LABEL_69;
                  }
                }
              }
            }
            else if (*(_QWORD *)(*v17 + 248 * v19 + 104) < *(_QWORD *)(*v17 + 248 * *((unsigned int *)a2 - 1) + 104))
            {
              goto LABEL_56;
            }
            for (i = v8 + 8; i < (unint64_t)a2; i += 8)
            {
              if (vabds_f32(v34, *(float *)i) >= 0.00000011921)
              {
                if (*(float *)i > v34)
                  break;
              }
              else if (*(_QWORD *)(*v17 + 248 * v19 + 104) < *(_QWORD *)(*v17 + 248 * *(unsigned int *)(i + 4) + 104))
              {
                break;
              }
            }
LABEL_69:
            v36 = a2;
            if (i >= (unint64_t)a2)
              goto LABEL_85;
            v36 = v9;
            while (vabds_f32(v34, v35) >= 0.00000011921)
            {
              if (v35 <= v34)
                goto LABEL_85;
LABEL_72:
              v37 = *(v36 - 2);
              v36 -= 2;
              v35 = v37;
            }
            if (*(_QWORD *)(*v17 + 248 * v19 + 104) < *(_QWORD *)(*v17 + 248 * *((unsigned int *)v36 + 1) + 104))
              goto LABEL_72;
LABEL_85:
            while (i < (unint64_t)v36)
            {
              v38 = *(_QWORD *)i;
              *(_QWORD *)i = *(_QWORD *)v36;
              i += 8;
              *(_QWORD *)v36 = v38;
              v39 = *a3;
              while (vabds_f32(v34, *(float *)i) >= 0.00000011921)
              {
                if (*(float *)i > v34)
                  goto LABEL_83;
LABEL_78:
                i += 8;
              }
              if (*(_QWORD *)(*v39 + 248 * v19 + 104) >= *(_QWORD *)(*v39 + 248 * *(unsigned int *)(i + 4) + 104))
                goto LABEL_78;
              do
              {
LABEL_83:
                while (1)
                {
                  v40 = *(v36 - 2);
                  v36 -= 2;
                  v41 = v40;
                  if (vabds_f32(v34, v40) < 0.00000011921)
                    break;
                  if (v41 <= v34)
                    goto LABEL_85;
                }
              }
              while (*(_QWORD *)(*v39 + 248 * v19 + 104) < *(_QWORD *)(*v39 + 248 * *((unsigned int *)v36 + 1) + 104));
            }
            if (i - 8 != v8)
              *(_QWORD *)v8 = *(_QWORD *)(i - 8);
            a5 = 0;
            *(float *)(i - 8) = v33;
            *(_DWORD *)(i - 4) = v19;
            continue;
          }
LABEL_12:
          v19 = *(_DWORD *)(v8 + 4);
          v17 = *a3;
LABEL_14:
          v20 = 0;
          v21 = *(float *)v8;
          v22 = *(float *)v8;
          while (2)
          {
            v23 = *(float *)(v8 + v20 + 8);
            if (vabds_f32(v23, v22) >= 0.00000011921)
            {
              if (v23 >= v22)
                goto LABEL_19;
LABEL_16:
              v20 += 8;
              continue;
            }
            break;
          }
          if (*(_QWORD *)(*v17 + 248 * *(unsigned int *)(v8 + v20 + 12) + 104) < *(_QWORD *)(*v17 + 248 * v19 + 104))
            goto LABEL_16;
LABEL_19:
          v24 = v8 + v20 + 8;
          j = v9;
          if (v20)
          {
            while (1)
            {
              if (vabds_f32(*j, v22) >= 0.00000011921)
              {
                if (*j < v22)
                  goto LABEL_26;
              }
              else if (*(_QWORD *)(*v17 + 248 * *((unsigned int *)j + 1) + 104) < *(_QWORD *)(*v17 + 248 * v19 + 104))
              {
                goto LABEL_26;
              }
              j -= 2;
            }
          }
          j = a2;
          if (v24 < (unint64_t)a2)
          {
            for (j = v9; ; j -= 2)
            {
              if (vabds_f32(*j, v22) >= 0.00000011921)
              {
                if (*j < v22 || v24 >= (unint64_t)j)
                  break;
              }
              else if (v24 >= (unint64_t)j
                     || *(_QWORD *)(*v17 + 248 * *((unsigned int *)j + 1) + 104) < *(_QWORD *)(*v17 + 248 * v19 + 104))
              {
                break;
              }
            }
          }
LABEL_26:
          i = v8 + v20 + 8;
          if (v24 < (unint64_t)j)
          {
            v26 = (unint64_t)j;
            do
            {
              v27 = *(_QWORD *)i;
              *(_QWORD *)i = *(_QWORD *)v26;
              i += 8;
              *(_QWORD *)v26 = v27;
              v28 = *a3;
              while (vabds_f32(*(float *)i, v22) >= 0.00000011921)
              {
                if (*(float *)i >= v22)
                  goto LABEL_36;
LABEL_31:
                i += 8;
              }
              if (*(_QWORD *)(*v28 + 248 * *(unsigned int *)(i + 4) + 104) < *(_QWORD *)(*v28 + 248 * v19 + 104))
                goto LABEL_31;
              do
              {
LABEL_36:
                while (1)
                {
                  v29 = *(float *)(v26 - 8);
                  v26 -= 8;
                  v30 = v29;
                  if (vabds_f32(v29, v22) < 0.00000011921)
                    break;
                  if (v30 < v22)
                    goto LABEL_28;
                }
              }
              while (*(_QWORD *)(*v28 + 248 * *(unsigned int *)(v26 + 4) + 104) >= *(_QWORD *)(*v28
                                                                                                + 248 * v19
                                                                                                + 104));
LABEL_28:
              ;
            }
            while (i < v26);
          }
          if (i - 8 != v8)
            *(_QWORD *)v8 = *(_QWORD *)(i - 8);
          *(float *)(i - 8) = v21;
          *(_DWORD *)(i - 4) = v19;
          if (v24 < (unint64_t)j)
            goto LABEL_53;
          v32 = sub_223C99114(v8, i - 8, a3);
          result = (float *)sub_223C99114(i, (uint64_t)a2, a3);
          if (!(_DWORD)result)
          {
            if (v32)
              continue;
LABEL_53:
            result = (float *)sub_223C98140(v8, i - 8, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = (float *)(i - 8);
          if (v32)
            return result;
          goto LABEL_2;
        }
        v43 = (float *)(i + 8);
        v45 = (float *)i == a2 || v43 == a2;
        if ((a5 & 1) != 0)
        {
          if (v45)
            return result;
          v46 = 0;
          v47 = i;
LABEL_111:
          v49 = v47;
          v47 = (unint64_t)v43;
          v50 = *(float *)(v49 + 8);
          v51 = *(_DWORD *)(v49 + 12);
          if (vabds_f32(v50, *(float *)v49) >= 0.00000011921)
          {
            if (v50 >= *(float *)v49)
              goto LABEL_110;
          }
          else if (*(_QWORD *)(**a3 + 248 * v51 + 104) >= *(_QWORD *)(**a3 + 248 * *(unsigned int *)(v49 + 4) + 104))
          {
            goto LABEL_110;
          }
          *(_QWORD *)(v49 + 8) = *(_QWORD *)v49;
          v48 = i;
          if (v49 == i)
            goto LABEL_109;
          v52 = v46;
          while (1)
          {
            v53 = (_QWORD *)(i + v52);
            v54 = *(float *)(i + v52 - 8);
            if (vabds_f32(v50, v54) >= 0.00000011921)
            {
              if (v54 <= v50)
              {
                v48 = i + v52;
LABEL_109:
                *(float *)v48 = v50;
                *(_DWORD *)(v48 + 4) = v51;
LABEL_110:
                v43 = (float *)(v47 + 8);
                v46 += 8;
                if ((float *)(v47 + 8) == a2)
                  return result;
                goto LABEL_111;
              }
            }
            else if (*(_QWORD *)(**a3 + 248 * v51 + 104) >= *(_QWORD *)(**a3
                                                                         + 248 * *((unsigned int *)v53 - 1)
                                                                         + 104))
            {
              v48 = v49;
              goto LABEL_109;
            }
            v49 -= 8;
            *v53 = *(v53 - 1);
            v52 -= 8;
            if (!v52)
            {
              v48 = i;
              goto LABEL_109;
            }
          }
        }
        if (!v45)
        {
          do
          {
            v92 = v8;
            v8 = (uint64_t)v43;
            v93 = *(float *)(v92 + 8);
            v94 = *(_DWORD *)(v92 + 12);
            if (vabds_f32(v93, *(float *)v92) >= 0.00000011921)
            {
              if (v93 < *(float *)v92)
              {
                do
                {
LABEL_190:
                  while (1)
                  {
                    v95 = v92;
                    *(_QWORD *)(v92 + 8) = *(_QWORD *)v92;
                    v96 = *(float *)(v92 - 8);
                    v92 -= 8;
                    v97 = v96;
                    if (vabds_f32(v93, v96) < 0.00000011921)
                      break;
                    if (v97 <= v93)
                      goto LABEL_182;
                  }
                }
                while (*(_QWORD *)(**a3 + 248 * v94 + 104) < *(_QWORD *)(**a3
                                                                          + 248 * *(unsigned int *)(v95 - 4)
                                                                          + 104));
LABEL_182:
                *(float *)v95 = v93;
                *(_DWORD *)(v95 + 4) = v94;
              }
            }
            else if (*(_QWORD *)(**a3 + 248 * v94 + 104) < *(_QWORD *)(**a3 + 248 * *(unsigned int *)(v92 + 4) + 104))
            {
              goto LABEL_190;
            }
            v43 = (float *)(v8 + 8);
          }
          while ((float *)(v8 + 8) != a2);
        }
        return result;
    }
  }
}

float *sub_223C98D90(float *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD **a6)
{
  float *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = sub_223C993B4(a1, a2, a3, a4, a6);
  if (vabds_f32(*(float *)a5, *(float *)a4) >= 0.00000011921)
  {
    if (*(float *)a5 >= *(float *)a4)
      return result;
  }
  else if (*(_QWORD *)(**a6 + 248 * *((unsigned int *)a5 + 1) + 104) >= *(_QWORD *)(**a6
                                                                                     + 248 * *((unsigned int *)a4 + 1)
                                                                                     + 104))
  {
    return result;
  }
  v13 = *a4;
  *a4 = *a5;
  *a5 = v13;
  if (vabds_f32(*(float *)a4, *(float *)a3) >= 0.00000011921)
  {
    if (*(float *)a4 >= *(float *)a3)
      return result;
  }
  else if (*(_QWORD *)(**a6 + 248 * *((unsigned int *)a4 + 1) + 104) >= *(_QWORD *)(**a6
                                                                                     + 248 * *((unsigned int *)a3 + 1)
                                                                                     + 104))
  {
    return result;
  }
  v14 = *a3;
  *a3 = *a4;
  *a4 = v14;
  if (vabds_f32(*(float *)a3, *(float *)a2) >= 0.00000011921)
  {
    if (*(float *)a3 >= *(float *)a2)
      return result;
  }
  else if (*(_QWORD *)(**a6 + 248 * *((unsigned int *)a3 + 1) + 104) >= *(_QWORD *)(**a6
                                                                                     + 248 * *((unsigned int *)a2 + 1)
                                                                                     + 104))
  {
    return result;
  }
  v15 = *a2;
  *a2 = *a3;
  *a3 = v15;
  if (vabds_f32(*(float *)a2, *a1) >= 0.00000011921)
  {
    if (*(float *)a2 < *a1)
    {
LABEL_17:
      v16 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *a2;
      *a2 = v16;
    }
  }
  else if (*(_QWORD *)(**a6 + 248 * *((unsigned int *)a2 + 1) + 104) < *(_QWORD *)(**a6
                                                                                    + 248 * *((unsigned int *)a1 + 1)
                                                                                    + 104))
  {
    goto LABEL_17;
  }
  return result;
}

float *sub_223C98F5C(float *result, uint64_t *a2, float *a3, _QWORD **a4)
{
  _QWORD *v4;
  float v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a4;
  v5 = *(float *)a2;
  v6 = *((_DWORD *)a2 + 1);
  if (vabds_f32(*(float *)a2, *result) >= 0.00000011921)
  {
    if (v5 >= *result)
      goto LABEL_3;
LABEL_7:
    if (vabds_f32(*a3, v5) >= 0.00000011921)
    {
      if (*a3 >= v5)
      {
LABEL_9:
        v7 = *(_QWORD *)result;
        *(_QWORD *)result = *a2;
        *a2 = v7;
        if (vabds_f32(*a3, *(float *)&v7) >= 0.00000011921)
        {
          if (*a3 >= *(float *)&v7)
            return result;
        }
        else if (*(_QWORD *)(**a4 + 248 * *((unsigned int *)a3 + 1) + 104) >= *(_QWORD *)(**a4
                                                                                           + 248 * HIDWORD(v7)
                                                                                           + 104))
        {
          return result;
        }
        *a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v7;
        return result;
      }
    }
    else if (*(_QWORD *)(*v4 + 248 * *((unsigned int *)a3 + 1) + 104) >= *(_QWORD *)(*v4 + 248 * v6 + 104))
    {
      goto LABEL_9;
    }
    v9 = *(_QWORD *)result;
    *(_QWORD *)result = *(_QWORD *)a3;
    *(_QWORD *)a3 = v9;
    return result;
  }
  if (*(_QWORD *)(*v4 + 248 * v6 + 104) < *(_QWORD *)(*v4 + 248 * *((unsigned int *)result + 1) + 104))
    goto LABEL_7;
LABEL_3:
  if (vabds_f32(*a3, v5) >= 0.00000011921)
  {
    if (*a3 >= v5)
      return result;
  }
  else if (*(_QWORD *)(*v4 + 248 * *((unsigned int *)a3 + 1) + 104) >= *(_QWORD *)(*v4 + 248 * v6 + 104))
  {
    return result;
  }
  v8 = *a2;
  *a2 = *(_QWORD *)a3;
  *(_QWORD *)a3 = v8;
  if (vabds_f32(*(float *)a2, *result) >= 0.00000011921)
  {
    if (*(float *)a2 < *result)
    {
LABEL_21:
      v10 = *(_QWORD *)result;
      *(_QWORD *)result = *a2;
      *a2 = v10;
    }
  }
  else if (*(_QWORD *)(**a4 + 248 * *((unsigned int *)a2 + 1) + 104) < *(_QWORD *)(**a4
                                                                                    + 248
                                                                                    * *((unsigned int *)result + 1)
                                                                                    + 104))
  {
    goto LABEL_21;
  }
  return result;
}

BOOL sub_223C99114(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;

  v6 = (a2 - a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v18 = *(float *)(a2 - 8);
      if (vabds_f32(v18, *(float *)a1) >= 0.00000011921)
      {
        if (v18 >= *(float *)a1)
          return result;
      }
      else if (*(_QWORD *)(**a3 + 248 * *(unsigned int *)(a2 - 4) + 104) >= *(_QWORD *)(**a3
                                                                                         + 248
                                                                                         * *(unsigned int *)(a1 + 4)
                                                                                         + 104))
      {
        return result;
      }
      v19 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 8) = v19;
      return result;
    case 3:
      sub_223C98F5C((float *)a1, (uint64_t *)(a1 + 8), (float *)(a2 - 8), a3);
      return 1;
    case 4:
      sub_223C993B4((float *)a1, (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 16), (uint64_t *)(a2 - 8), a3);
      return 1;
    case 5:
      sub_223C98D90((float *)a1, (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 8), a3);
      return 1;
    default:
      v8 = a1 + 16;
      sub_223C98F5C((float *)a1, (uint64_t *)(a1 + 8), (float *)(a1 + 16), a3);
      v9 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (2)
  {
    v13 = *(float *)v9;
    v14 = *(_DWORD *)(v9 + 4);
    if (vabds_f32(*(float *)v9, *(float *)v8) >= 0.00000011921)
    {
      if (v13 >= *(float *)v8)
        goto LABEL_7;
    }
    else if (*(_QWORD *)(**a3 + 248 * v14 + 104) >= *(_QWORD *)(**a3 + 248 * *(unsigned int *)(v8 + 4) + 104))
    {
      goto LABEL_7;
    }
    *(_QWORD *)v9 = *(_QWORD *)v8;
    v12 = a1;
    if (v8 == a1)
      goto LABEL_6;
    v15 = v10;
    while (1)
    {
      v16 = a1 + v15;
      v17 = *(float *)(a1 + v15 + 8);
      if (vabds_f32(v13, v17) < 0.00000011921)
        break;
      if (v17 <= v13)
      {
        v12 = v8;
        goto LABEL_6;
      }
LABEL_15:
      v8 -= 8;
      *(_QWORD *)(v16 + 16) = *(_QWORD *)(v16 + 8);
      v15 -= 8;
      if (v15 == -16)
      {
        v12 = a1;
        goto LABEL_6;
      }
    }
    if (*(_QWORD *)(**a3 + 248 * v14 + 104) < *(_QWORD *)(**a3 + 248 * *(unsigned int *)(v16 + 12) + 104))
      goto LABEL_15;
    v12 = a1 + v15 + 16;
LABEL_6:
    *(float *)v12 = v13;
    *(_DWORD *)(v12 + 4) = v14;
    if (++v11 == 8)
      return v9 + 8 == a2;
LABEL_7:
    v8 = v9;
    v10 += 8;
    v9 += 8;
    if (v9 != a2)
      continue;
    return 1;
  }
}

float *sub_223C993B4(float *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD **a5)
{
  float *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = sub_223C98F5C(a1, a2, (float *)a3, a5);
  if (vabds_f32(*(float *)a4, *(float *)a3) >= 0.00000011921)
  {
    if (*(float *)a4 >= *(float *)a3)
      return result;
  }
  else if (*(_QWORD *)(**a5 + 248 * *((unsigned int *)a4 + 1) + 104) >= *(_QWORD *)(**a5
                                                                                     + 248 * *((unsigned int *)a3 + 1)
                                                                                     + 104))
  {
    return result;
  }
  v11 = *a3;
  *a3 = *a4;
  *a4 = v11;
  if (vabds_f32(*(float *)a3, *(float *)a2) >= 0.00000011921)
  {
    if (*(float *)a3 >= *(float *)a2)
      return result;
  }
  else if (*(_QWORD *)(**a5 + 248 * *((unsigned int *)a3 + 1) + 104) >= *(_QWORD *)(**a5
                                                                                     + 248 * *((unsigned int *)a2 + 1)
                                                                                     + 104))
  {
    return result;
  }
  v12 = *a2;
  *a2 = *a3;
  *a3 = v12;
  if (vabds_f32(*(float *)a2, *a1) >= 0.00000011921)
  {
    if (*(float *)a2 < *a1)
    {
LABEL_13:
      v13 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *a2;
      *a2 = v13;
    }
  }
  else if (*(_QWORD *)(**a5 + 248 * *((unsigned int *)a2 + 1) + 104) < *(_QWORD *)(**a5
                                                                                    + 248 * *((unsigned int *)a1 + 1)
                                                                                    + 104))
  {
    goto LABEL_13;
  }
  return result;
}

unint64_t sub_223C99520(uint64_t a1, char *__s, const char **a3)
{
  size_t v6;
  size_t v7;
  _QWORD *p_dst;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t result;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  _QWORD *__dst;
  __int128 v25;

  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = operator new(v9 + 1);
    *(_QWORD *)&v25 = v7;
    *((_QWORD *)&v25 + 1) = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v25) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  *((_BYTE *)p_dst + v7) = 0;
  v11 = *a3;
  result = strlen(*a3);
  if (result > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v13 = result;
  if (result >= 0x17)
  {
    v15 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v15 = result | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v16 | 0x8000000000000000;
    v22 = v14;
  }
  else
  {
    HIBYTE(v23) = result;
    v14 = &v22;
    if (!result)
      goto LABEL_17;
  }
  result = (unint64_t)memcpy(v14, v11, v13);
LABEL_17:
  *((_BYTE *)v14 + v13) = 0;
  v17 = HIBYTE(v25);
  v18 = HIBYTE(v23);
  v19 = __dst;
  v20 = v25;
  *(_QWORD *)a1 = off_24EC62E38;
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)&v25 + 7);
  *(_BYTE *)(a1 + 31) = v17;
  v21 = v23;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v21;
  *(_QWORD *)(a1 + 47) = *(_QWORD *)((char *)&v23 + 7);
  *(_BYTE *)(a1 + 55) = v18;
  return result;
}

void sub_223C996A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223C996BC(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_223C99714(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC62DE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223C99724(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC62DE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223C99754(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)(a1 + 32));
    return;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_5;
}

void sub_223C997A4(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x227684CE8);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

_DWORD *sub_223C99800(_DWORD ***a1)
{
  return sub_223C84FFC(**a1, (char *)(*a1)[1]);
}

void sub_223C9980C(uint64_t a1, uint64_t a2)
{
  sub_223C9981C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_223C9981C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC62E60[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_223C999D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_223C99A14(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_223C99B0C((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_223C99B04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_223C99B0C(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_223C99D08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223C99D1C(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v57[28];
  _BYTE v58[64];
  int v59;
  _QWORD v60[2];
  std::__shared_weak_count *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  __int16 v66;
  uint64_t (**v67)();
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  __int16 v75;

  v4 = (_OWORD *)(a1 + 8);
  *(_QWORD *)v57 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v57[8]);
  sub_22416BD7C((uint64_t)v4, (uint64_t)v57, 0);
  v5 = *(std::__shared_weak_count **)&v57[16];
  if (*(_QWORD *)&v57[16])
  {
    v6 = (unint64_t *)(*(_QWORD *)&v57[16] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)v57 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v57[8]);
  sub_22416BD7C(a1 + 112, (uint64_t)v57, 0);
  v8 = *(std::__shared_weak_count **)&v57[16];
  if (*(_QWORD *)&v57[16])
  {
    v9 = (unint64_t *)(*(_QWORD *)&v57[16] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)v57 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v57[8]);
  sub_22416BD7C(a1 + 216, (uint64_t)v57, 0);
  v11 = *(std::__shared_weak_count **)&v57[16];
  if (*(_QWORD *)&v57[16])
  {
    v12 = (unint64_t *)(*(_QWORD *)&v57[16] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_DWORD *)(a1 + 240) = 0;
  *(_QWORD *)v57 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v57[8]);
  sub_22416BD7C(a1 + 320, (uint64_t)v57, 0);
  v14 = *(std::__shared_weak_count **)&v57[16];
  if (*(_QWORD *)&v57[16])
  {
    v15 = (unint64_t *)(*(_QWORD *)&v57[16] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_DWORD *)(a1 + 344) = 0;
  *(_QWORD *)v57 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v57[8]);
  sub_22416BD7C(a1 + 424, (uint64_t)v57, 0);
  v17 = *(std::__shared_weak_count **)&v57[16];
  if (!*(_QWORD *)&v57[16])
    goto LABEL_25;
  v18 = (unint64_t *)(*(_QWORD *)&v57[16] + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    *(_DWORD *)(a1 + 448) = 0;
    v20 = *a2;
    if (!*a2)
      goto LABEL_35;
  }
  else
  {
LABEL_25:
    *(_DWORD *)(a1 + 448) = 0;
    v20 = *a2;
    if (!*a2)
      goto LABEL_35;
  }
  sub_223C9A690((uint64_t)v57, v20, &word_22466E2E4);
  *v4 = *(_OWORD *)v57;
  *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)&v57[12];
  v21 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v21 == -1)
  {
    if (v59 == -1)
      goto LABEL_35;
  }
  else if (v59 == -1)
  {
    ((void (*)(uint64_t (***)(), uint64_t))off_24EC62EC0[v21])(&v67, a1 + 40);
    *(_DWORD *)(a1 + 104) = -1;
    goto LABEL_33;
  }
  v67 = (uint64_t (**)())(a1 + 40);
  ((void (*)(uint64_t (***)()))off_24EC62ED0[v59])(&v67);
LABEL_33:
  if (v59 != -1)
    ((void (*)(uint64_t (***)(), _BYTE *))off_24EC62EC0[v59])(&v67, v58);
LABEL_35:
  v22 = a2[2];
  if (!v22)
    goto LABEL_43;
  sub_223C9A690((uint64_t)v57, v22, word_22466E2E6);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)v57;
  *(_OWORD *)(a1 + 124) = *(_OWORD *)&v57[12];
  v23 = *(unsigned int *)(a1 + 208);
  if ((_DWORD)v23 == -1)
  {
    if (v59 == -1)
      goto LABEL_43;
  }
  else if (v59 == -1)
  {
    ((void (*)(uint64_t (***)(), uint64_t))off_24EC62EC0[v23])(&v67, a1 + 144);
    *(_DWORD *)(a1 + 208) = -1;
    goto LABEL_41;
  }
  v67 = (uint64_t (**)())(a1 + 144);
  ((void (*)(uint64_t (***)()))off_24EC62ED0[v59])(&v67);
LABEL_41:
  if (v59 != -1)
    ((void (*)(uint64_t (***)(), _BYTE *))off_24EC62EC0[v59])(&v67, v58);
LABEL_43:
  v24 = a2[4];
  if (!v24)
    goto LABEL_83;
  v67 = &off_24EC21DF8;
  sub_2237212D0(v24, &v68);
  v60[0] = &off_24EC1F8C8;
  v30 = v68;
  v31 = v69;
  if (v69)
  {
    p_shared_owners = (unint64_t *)&v69->__shared_owners_;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
    v34 = v71;
    v35 = v72;
    v36 = v70;
    v37 = v75;
    do
      v38 = __ldxr(p_shared_owners);
    while (__stxr(v38 + 1, p_shared_owners));
    do
      v39 = __ldxr(p_shared_owners);
    while (__stxr(v39 + 1, p_shared_owners));
  }
  else
  {
    v34 = v71;
    v35 = v72;
    v36 = v70;
    v37 = v75;
  }
  v60[1] = v30;
  v61 = v31;
  v62 = v34;
  v63 = 4 * v35;
  v64 = v36;
  v65 = 32;
  v66 = v37;
  if (v31)
  {
    v40 = (unint64_t *)&v31->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    do
      v42 = __ldaxr(v40);
    while (__stlxr(v42 - 1, v40));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v74)
    v43 = v73 == 0;
  else
    v43 = 1;
  if (v43)
    v44 = 65537;
  else
    v44 = 65542;
  sub_22416BFE0((uint64_t)v57, (uint64_t)v60, v44, v25, v26, v27, v28, v29);
  v45 = v61;
  if (v61)
  {
    v46 = (unint64_t *)&v61->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v69;
  if (v69)
  {
    v49 = (unint64_t *)&v69->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  *(_OWORD *)(a1 + 216) = *(_OWORD *)v57;
  *(_OWORD *)(a1 + 228) = *(_OWORD *)&v57[12];
  v51 = *(unsigned int *)(a1 + 312);
  if ((_DWORD)v51 == -1)
  {
    if (v59 == -1)
      goto LABEL_83;
  }
  else if (v59 == -1)
  {
    ((void (*)(uint64_t (***)(), uint64_t))off_24EC62EC0[v51])(&v67, a1 + 248);
    *(_DWORD *)(a1 + 312) = -1;
    goto LABEL_81;
  }
  v67 = (uint64_t (**)())(a1 + 248);
  ((void (*)(uint64_t (***)()))off_24EC62ED0[v59])(&v67);
LABEL_81:
  if (v59 != -1)
    ((void (*)(uint64_t (***)(), _BYTE *))off_24EC62EC0[v59])(&v67, v58);
LABEL_83:
  v52 = a2[6];
  if (!v52)
    goto LABEL_91;
  sub_223C9A898((uint64_t)v57, v52, &word_22466E2EA);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)v57;
  *(_OWORD *)(a1 + 332) = *(_OWORD *)&v57[12];
  v53 = *(unsigned int *)(a1 + 416);
  if ((_DWORD)v53 == -1)
  {
    if (v59 == -1)
      goto LABEL_91;
  }
  else if (v59 == -1)
  {
    ((void (*)(uint64_t (***)(), uint64_t))off_24EC62EC0[v53])(&v67, a1 + 352);
    *(_DWORD *)(a1 + 416) = -1;
    goto LABEL_89;
  }
  v67 = (uint64_t (**)())(a1 + 352);
  ((void (*)(uint64_t (***)()))off_24EC62ED0[v59])(&v67);
LABEL_89:
  if (v59 != -1)
    ((void (*)(uint64_t (***)(), _BYTE *))off_24EC62EC0[v59])(&v67, v58);
LABEL_91:
  v54 = a2[8];
  if (!v54)
    return a1;
  sub_223C9A898((uint64_t)v57, v54, word_22466E2EC);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)v57;
  *(_OWORD *)(a1 + 436) = *(_OWORD *)&v57[12];
  v55 = *(unsigned int *)(a1 + 520);
  if ((_DWORD)v55 == -1)
  {
    if (v59 == -1)
      return a1;
  }
  else if (v59 == -1)
  {
    ((void (*)(uint64_t (***)(), uint64_t))off_24EC62EC0[v55])(&v67, a1 + 456);
    *(_DWORD *)(a1 + 520) = -1;
    goto LABEL_97;
  }
  v67 = (uint64_t (**)())(a1 + 456);
  ((void (*)(uint64_t (***)()))off_24EC62ED0[v59])(&v67);
LABEL_97:
  if (v59 != -1)
    ((void (*)(uint64_t (***)(), _BYTE *))off_24EC62EC0[v59])(&v67, v58);
  return a1;
}

void sub_223C9A498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_22319A588((uint64_t)&a9);
  sub_22319A588(v13);
  sub_22319A588(v12);
  sub_22319A588(v11);
  sub_22319A588(v10);
  sub_22319A588(v9);
  _Unwind_Resume(a1);
}

void sub_223C9A514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  JUMPOUT(0x223C9A4ECLL);
}

void sub_223C9A554()
{
  JUMPOUT(0x223C9A4ECLL);
}

void sub_223C9A55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  JUMPOUT(0x223C9A4F4);
}

void sub_223C9A59C()
{
  JUMPOUT(0x223C9A4F4);
}

void sub_223C9A5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  JUMPOUT(0x223C9A4FCLL);
}

void sub_223C9A5E4()
{
  JUMPOUT(0x223C9A4FCLL);
}

void sub_223C9A5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
      sub_22319A588(v11);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x223C9A504);
}

void sub_223C9A638(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319A588(v1);
  _Unwind_Resume(a1);
}

void sub_223C9A64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223C9A690(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD v30[2];
  std::__shared_weak_count *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  uint64_t (**v37)();
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  __int16 v43;

  v37 = &off_24EC200A8;
  sub_2231A3AA0(a2, &v38);
  v30[0] = &off_24EC1F8C8;
  v10 = v38;
  v11 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = v42;
    v16 = v40;
    v15 = v41;
    v17 = v43;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  else
  {
    v14 = v42;
    v16 = v40;
    v15 = v41;
    v17 = v43;
  }
  v30[1] = v10;
  v31 = v11;
  v32 = v15;
  v33 = 2 * v14;
  v34 = v16;
  v35 = 3;
  v36 = v17;
  if (!v11)
    goto LABEL_16;
  v20 = (unint64_t *)&v11->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!(_DWORD)v41)
      goto LABEL_20;
  }
  else
  {
LABEL_16:
    if (!(_DWORD)v41)
    {
LABEL_20:
      v23 = 1;
      goto LABEL_21;
    }
  }
  if (!HIDWORD(v41))
    goto LABEL_20;
  v23 = *a3;
LABEL_21:
  sub_22416BFE0(a1, (uint64_t)v30, v23 | 0x10000, v5, v6, v7, v8, v9);
  v24 = v31;
  if (v31)
  {
    v25 = (unint64_t *)&v31->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v39;
  if (v39)
  {
    v28 = (unint64_t *)&v39->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_223C9A87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_22319A5E0((uint64_t)&a9);
  sub_22319EF60((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_223C9A898(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD v30[2];
  std::__shared_weak_count *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  uint64_t (**v37)();
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  __int16 v43;

  v37 = &off_24EC21230;
  sub_2231BE6D4(a2, &v38);
  v30[0] = &off_24EC1F8C8;
  v10 = v38;
  v11 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = v42;
    v16 = v40;
    v15 = v41;
    v17 = v43;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  else
  {
    v14 = v42;
    v16 = v40;
    v15 = v41;
    v17 = v43;
  }
  v30[1] = v10;
  v31 = v11;
  v32 = v15;
  v33 = 4 * v14;
  v34 = v16;
  v35 = 4;
  v36 = v17;
  if (!v11)
    goto LABEL_16;
  v20 = (unint64_t *)&v11->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!(_DWORD)v41)
      goto LABEL_20;
  }
  else
  {
LABEL_16:
    if (!(_DWORD)v41)
    {
LABEL_20:
      v23 = 1;
      goto LABEL_21;
    }
  }
  if (!HIDWORD(v41))
    goto LABEL_20;
  v23 = *a3;
LABEL_21:
  sub_22416BFE0(a1, (uint64_t)v30, v23 | 0x10000, v5, v6, v7, v8, v9);
  v24 = v31;
  if (v31)
  {
    v25 = (unint64_t *)&v31->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v39;
  if (v39)
  {
    v28 = (unint64_t *)&v39->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_223C9AA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_22319A5E0((uint64_t)&a9);
  sub_2231BD9DC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_223C9AAA4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v12;
  int32x2_t v13;
  int8x16_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  __int16 v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  __int16 v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  int v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  __int16 v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v75;
  int v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  __int16 v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  void **v93;
  void **v94;
  char *v95;
  char *v96;
  void *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  __int128 v103;
  void *v104;
  int v106;
  int v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  __int16 v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  __int128 v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  __int128 v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  int v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  __int16 v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  __int128 v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  __int128 v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  __int128 v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  int v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  int v185;
  __int16 v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  __int128 v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  int v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  int v206;
  __int16 v207;
  unint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  __int128 v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  int v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  int v227;
  __int16 v228;
  unint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  __int128 v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  __int16 v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  __int16 v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  __int16 v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  __int16 v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  __int16 v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  __int128 v326;
  __int128 v327;
  uint64_t v328;
  uint64_t v329;
  _OWORD v330[2];
  int v331;
  char v332;
  uint64_t v333[10];
  uint64_t (**v334)();
  __int128 v335;
  _OWORD v336[2];
  _BYTE v337[24];
  _OWORD v338[2];
  uint64_t (**v339)();
  __int128 v340;
  _OWORD v341[2];
  uint64_t (**v342)();
  __int128 v343;
  _OWORD v344[2];
  uint64_t (**v345)();
  __int128 v346;
  _OWORD v347[2];
  uint64_t (**v348)();
  __int128 v349;
  _OWORD v350[2];
  _BYTE v351[56];
  _BYTE v352[24];
  _OWORD v353[2];
  uint64_t (**v354)();
  __int128 v355;
  _BYTE v356[32];
  uint64_t (**v357)();
  __int128 v358;
  _OWORD v359[2];
  uint64_t (**v360)();
  __int128 v361;
  _BYTE v362[32];
  uint64_t (**v363)();
  __int128 v364;
  _OWORD v365[2];
  uint64_t (**v366)();
  uint64_t v367;
  std::__shared_weak_count *v368;
  __int128 v369;
  uint64_t v370;
  __int16 v371;
  uint64_t (**v372)();
  uint64_t v373;
  std::__shared_weak_count *v374;
  __int128 v375;
  uint64_t v376;
  __int16 v377;
  uint64_t (**v378)();
  uint64_t v379;
  std::__shared_weak_count *v380;
  __int128 v381;
  uint64_t v382;
  __int16 v383;
  uint64_t (**v384)();
  __int128 v385;
  _BYTE v386[26];
  uint64_t (**v387)();
  _BYTE v388[44];
  __int16 v389;
  uint64_t (**v390)();
  _BYTE v391[44];
  __int16 v392;
  uint64_t (**v393)();
  __int128 v394;
  _OWORD v395[2];
  uint64_t (**v396)();
  __int128 v397;
  _OWORD v398[2];
  uint64_t (**v399)();
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int16 v404;
  uint64_t (**v405)();
  __int128 v406;
  _BYTE v407[32];
  __int128 v408;
  uint64_t v409;
  __int16 v410;
  uint64_t v411;

  v411 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(float32x2_t *)(a1 + 24);
  v7 = *(float32x2_t *)(a1 + 32);
  __asm { FMOV            V2.2S, #1.0 }
  v12 = vdiv_f32(_D2, v6);
  v13 = vzip1_s32((int32x2_t)v6, (int32x2_t)v7);
  v14.i64[0] = v13.u32[0];
  v14.i64[1] = v13.u32[1];
  *(int8x16_t *)(v5 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v6, (int32x2_t)v7), 0x20uLL), v14);
  *(float32x2_t *)(v5 + 32) = v12;
  *(float32x2_t *)(v5 + 40) = vmul_f32(v12, vneg_f32(v7));
  *(_DWORD *)(v5 + 48) = v6.i32[0];
  *(_QWORD *)(v5 + 56) = 0;
  *(_DWORD *)(v5 + 52) = 0;
  *(_DWORD *)(v5 + 64) = v6.i32[1];
  *(_DWORD *)(v5 + 68) = 0;
  *(float32x2_t *)(v5 + 72) = v7;
  *(_DWORD *)(v5 + 80) = 1065353216;
  *(_QWORD *)(v5 + 88) = v4;
  v15 = *(_QWORD *)(a1 + 48);
  memset(v365, 0, sizeof(v365));
  *(_QWORD *)&v362[24] = 1;
  *(_OWORD *)&v362[8] = 0u;
  memset(v359, 0, sizeof(v359));
  *(_OWORD *)&v356[8] = 0u;
  *(_QWORD *)&v356[24] = 1;
  memset(v353, 0, sizeof(v353));
  *(_QWORD *)&v351[48] = 1;
  *(_QWORD *)v351 = &off_24EC1F8C8;
  memset(&v351[8], 0, 40);
  *(_QWORD *)v352 = &off_24EC1F8C8;
  *(_QWORD *)&v352[8] = 0;
  *(_QWORD *)&v353[0] = 0;
  *(_QWORD *)&v352[16] = 0;
  DWORD2(v353[0]) = 0;
  DWORD2(v353[1]) = 1;
  v354 = &off_24EC1F8C8;
  v355 = 0uLL;
  *(_QWORD *)v356 = 0;
  *(_DWORD *)&v356[8] = 0;
  v357 = &off_24EC1F8C8;
  v358 = 0uLL;
  *(_QWORD *)&v359[0] = 0;
  DWORD2(v359[0]) = 0;
  DWORD2(v359[1]) = 1;
  v360 = &off_24EC1F8C8;
  v361 = 0uLL;
  *(_DWORD *)&v362[8] = 0;
  *(_QWORD *)v362 = 0;
  v363 = &off_24EC1F8C8;
  v364 = 0uLL;
  DWORD2(v365[0]) = 0;
  *(_QWORD *)&v365[0] = 0;
  DWORD2(v365[1]) = 1;
  v16 = *(_DWORD *)(a1 + 232);
  if (v16)
  {
    if (v16 != 1)
      goto LABEL_473;
    v405 = &off_24EC1F8C8;
    sub_2231F47D4(a1 + 168, (uint64_t)&v406);
  }
  else
  {
    v405 = &off_24EC1F8C8;
    v17 = *(_QWORD *)(a1 + 176);
    v18 = *(std::__shared_weak_count **)(a1 + 184);
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
      v21 = *(_QWORD *)(a1 + 208);
      v22 = *(_DWORD *)(a1 + 216);
      v23 = *(_WORD *)(a1 + 220);
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 208);
      v22 = *(_DWORD *)(a1 + 216);
      v23 = *(_WORD *)(a1 + 220);
    }
    *(_QWORD *)&v406 = v17;
    *((_QWORD *)&v406 + 1) = v18;
    *(_QWORD *)v407 = *(_QWORD *)(a1 + 192);
    *(_DWORD *)&v407[8] = *(_DWORD *)(a1 + 200);
    *(_QWORD *)&v407[16] = v21;
    *(_DWORD *)&v407[24] = v22;
    *(_WORD *)&v407[28] = v23;
    if (v18)
    {
      v25 = (unint64_t *)&v18->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  v27 = v406;
  v406 = 0uLL;
  *(_OWORD *)&v351[8] = v27;
  *(_OWORD *)&v351[24] = *(_OWORD *)v407;
  *(_OWORD *)&v351[38] = *(_OWORD *)&v407[14];
  v28 = *(_DWORD *)(a1 + 336);
  if (v28)
  {
    if (v28 != 1)
      goto LABEL_473;
    v405 = &off_24EC1F8C8;
    sub_2231F47D4(a1 + 272, (uint64_t)&v406);
  }
  else
  {
    v405 = &off_24EC1F8C8;
    v29 = *(_QWORD *)(a1 + 280);
    v30 = *(std::__shared_weak_count **)(a1 + 288);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      v33 = *(_QWORD *)(a1 + 312);
      v34 = *(_DWORD *)(a1 + 320);
      v35 = *(_WORD *)(a1 + 324);
      do
        v36 = __ldxr(v31);
      while (__stxr(v36 + 1, v31));
    }
    else
    {
      v33 = *(_QWORD *)(a1 + 312);
      v34 = *(_DWORD *)(a1 + 320);
      v35 = *(_WORD *)(a1 + 324);
    }
    *(_QWORD *)&v406 = v29;
    *((_QWORD *)&v406 + 1) = v30;
    *(_QWORD *)v407 = *(_QWORD *)(a1 + 296);
    *(_DWORD *)&v407[8] = *(_DWORD *)(a1 + 304);
    *(_QWORD *)&v407[16] = v33;
    *(_DWORD *)&v407[24] = v34;
    *(_WORD *)&v407[28] = v35;
    if (v30)
    {
      v37 = (unint64_t *)&v30->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  v39 = v406;
  v406 = 0uLL;
  *(_OWORD *)&v352[8] = v39;
  v353[0] = *(_OWORD *)v407;
  *(_OWORD *)((char *)v353 + 14) = *(_OWORD *)&v407[14];
  v40 = *(_DWORD *)(a1 + 440);
  if (v40)
  {
    if (v40 != 1)
      goto LABEL_473;
    v405 = &off_24EC1F8C8;
    sub_2231F47D4(a1 + 376, (uint64_t)&v406);
  }
  else
  {
    v405 = &off_24EC1F8C8;
    v41 = *(_QWORD *)(a1 + 384);
    v42 = *(std::__shared_weak_count **)(a1 + 392);
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
      v45 = *(_QWORD *)(a1 + 416);
      v46 = *(_DWORD *)(a1 + 424);
      v47 = *(_WORD *)(a1 + 428);
      do
        v48 = __ldxr(v43);
      while (__stxr(v48 + 1, v43));
    }
    else
    {
      v45 = *(_QWORD *)(a1 + 416);
      v46 = *(_DWORD *)(a1 + 424);
      v47 = *(_WORD *)(a1 + 428);
    }
    *(_QWORD *)&v406 = v41;
    *((_QWORD *)&v406 + 1) = v42;
    *(_QWORD *)v407 = *(_QWORD *)(a1 + 400);
    *(_DWORD *)&v407[8] = *(_DWORD *)(a1 + 408);
    *(_QWORD *)&v407[16] = v45;
    *(_DWORD *)&v407[24] = v46;
    *(_WORD *)&v407[28] = v47;
    if (v42)
    {
      v49 = (unint64_t *)&v42->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }
  v51 = v406;
  v406 = 0uLL;
  v355 = v51;
  *(_OWORD *)v356 = *(_OWORD *)v407;
  *(_OWORD *)&v356[14] = *(_OWORD *)&v407[14];
  v52 = *(_DWORD *)(a1 + 544);
  if (v52)
  {
    if (v52 != 1)
      goto LABEL_473;
    v405 = &off_24EC1F8C8;
    sub_2231F47D4(a1 + 480, (uint64_t)&v406);
  }
  else
  {
    v405 = &off_24EC1F8C8;
    v53 = *(_QWORD *)(a1 + 488);
    v54 = *(std::__shared_weak_count **)(a1 + 496);
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
      v57 = *(_QWORD *)(a1 + 520);
      v58 = *(_DWORD *)(a1 + 528);
      v59 = *(_WORD *)(a1 + 532);
      do
        v60 = __ldxr(v55);
      while (__stxr(v60 + 1, v55));
    }
    else
    {
      v57 = *(_QWORD *)(a1 + 520);
      v58 = *(_DWORD *)(a1 + 528);
      v59 = *(_WORD *)(a1 + 532);
    }
    *(_QWORD *)&v406 = v53;
    *((_QWORD *)&v406 + 1) = v54;
    *(_QWORD *)v407 = *(_QWORD *)(a1 + 504);
    *(_DWORD *)&v407[8] = *(_DWORD *)(a1 + 512);
    *(_QWORD *)&v407[16] = v57;
    *(_DWORD *)&v407[24] = v58;
    *(_WORD *)&v407[28] = v59;
    if (v54)
    {
      v61 = (unint64_t *)&v54->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  v63 = v406;
  v406 = 0uLL;
  v358 = v63;
  v359[0] = *(_OWORD *)v407;
  *(_OWORD *)((char *)v359 + 14) = *(_OWORD *)&v407[14];
  v64 = *(_DWORD *)(a1 + 648);
  if (v64)
  {
    if (v64 != 1)
      goto LABEL_473;
    v405 = &off_24EC1F8C8;
    sub_2231F47D4(a1 + 584, (uint64_t)&v406);
  }
  else
  {
    v405 = &off_24EC1F8C8;
    v65 = *(_QWORD *)(a1 + 592);
    v66 = *(std::__shared_weak_count **)(a1 + 600);
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
      v69 = *(_QWORD *)(a1 + 624);
      v70 = *(_DWORD *)(a1 + 632);
      v71 = *(_WORD *)(a1 + 636);
      do
        v72 = __ldxr(v67);
      while (__stxr(v72 + 1, v67));
    }
    else
    {
      v69 = *(_QWORD *)(a1 + 624);
      v70 = *(_DWORD *)(a1 + 632);
      v71 = *(_WORD *)(a1 + 636);
    }
    *(_QWORD *)&v406 = v65;
    *((_QWORD *)&v406 + 1) = v66;
    *(_QWORD *)v407 = *(_QWORD *)(a1 + 608);
    *(_DWORD *)&v407[8] = *(_DWORD *)(a1 + 616);
    *(_QWORD *)&v407[16] = v69;
    *(_DWORD *)&v407[24] = v70;
    *(_WORD *)&v407[28] = v71;
    if (v66)
    {
      v73 = (unint64_t *)&v66->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
  }
  v75 = v406;
  v406 = 0uLL;
  v361 = v75;
  *(_OWORD *)&v362[14] = *(_OWORD *)&v407[14];
  *(_OWORD *)v362 = *(_OWORD *)v407;
  v76 = *(_DWORD *)(a1 + 752);
  if (v76)
  {
    if (v76 == 1)
    {
      v405 = &off_24EC1F8C8;
      sub_2231F47D4(a1 + 688, (uint64_t)&v406);
      goto LABEL_91;
    }
LABEL_473:
    sub_22316DD70();
  }
  v405 = &off_24EC1F8C8;
  v77 = *(_QWORD *)(a1 + 696);
  v78 = *(std::__shared_weak_count **)(a1 + 704);
  if (v78)
  {
    v79 = (unint64_t *)&v78->__shared_owners_;
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
    v81 = *(_QWORD *)(a1 + 728);
    v82 = *(_DWORD *)(a1 + 736);
    v83 = *(_WORD *)(a1 + 740);
    do
      v84 = __ldxr(v79);
    while (__stxr(v84 + 1, v79));
  }
  else
  {
    v81 = *(_QWORD *)(a1 + 728);
    v82 = *(_DWORD *)(a1 + 736);
    v83 = *(_WORD *)(a1 + 740);
  }
  *(_QWORD *)&v406 = v77;
  *((_QWORD *)&v406 + 1) = v78;
  *(_QWORD *)v407 = *(_QWORD *)(a1 + 712);
  *(_DWORD *)&v407[8] = *(_DWORD *)(a1 + 720);
  *(_QWORD *)&v407[16] = v81;
  *(_DWORD *)&v407[24] = v82;
  *(_WORD *)&v407[28] = v83;
  if (v78)
  {
    v85 = (unint64_t *)&v78->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
LABEL_91:
  v328 = a2;
  v87 = v406;
  v406 = 0uLL;
  v364 = v87;
  v329 = a1;
  *(_OWORD *)((char *)v365 + 14) = *(_OWORD *)&v407[14];
  v365[0] = *(_OWORD *)v407;
  v335 = *(_OWORD *)&v351[8];
  *(_QWORD *)&v351[8] = 0;
  *(_QWORD *)&v351[16] = 0;
  v336[0] = *(_OWORD *)&v351[24];
  *(_OWORD *)((char *)v336 + 14) = *(_OWORD *)&v351[38];
  v334 = &off_24EC1F8C8;
  *(_QWORD *)v337 = &off_24EC1F8C8;
  v88 = *(_OWORD *)&v352[8];
  *(_QWORD *)&v352[8] = 0;
  *(_QWORD *)&v352[16] = 0;
  *(_OWORD *)((char *)v338 + 14) = *(_OWORD *)((char *)v353 + 14);
  *(_OWORD *)&v337[8] = v88;
  v338[0] = v353[0];
  v340 = v355;
  v355 = 0uLL;
  *(_OWORD *)((char *)v341 + 14) = *(_OWORD *)&v356[14];
  v341[0] = *(_OWORD *)v356;
  v339 = &off_24EC1F8C8;
  v342 = &off_24EC1F8C8;
  v89 = v358;
  v358 = 0uLL;
  *(_OWORD *)((char *)v344 + 14) = *(_OWORD *)((char *)v359 + 14);
  v343 = v89;
  v344[0] = v359[0];
  v346 = v361;
  v361 = 0uLL;
  *(_OWORD *)((char *)v347 + 14) = *(_OWORD *)&v362[14];
  v347[0] = *(_OWORD *)v362;
  v345 = &off_24EC1F8C8;
  v348 = &off_24EC1F8C8;
  v90 = v364;
  v364 = 0uLL;
  *(_OWORD *)((char *)v350 + 14) = *(_OWORD *)((char *)v365 + 14);
  v349 = v90;
  v350[0] = *(_OWORD *)v407;
  sub_223C9DBC8(v351);
  sub_2231D2404(a2, v15, (uint64_t)&v334);
  sub_223C9DBC8(&v334);
  v91 = a1;
  v92 = *(unsigned __int8 *)(a1 + 16);
  *(_QWORD *)v351 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v351[8] = v92;
  sub_2231CBAC0(a2, v351);
  sub_223C8EBA8((uint64_t **)(a1 + 80), (uint64_t)v351);
  v93 = (void **)sub_2231D0490(a2);
  v94 = v93;
  v95 = (char *)*v93;
  if (*v93)
  {
    v96 = (char *)v93[1];
    v97 = *v93;
    if (v96 != v95)
    {
      do
      {
        v98 = (void *)*((_QWORD *)v96 - 3);
        if (v98)
        {
          *((_QWORD *)v96 - 2) = v98;
          operator delete(v98);
        }
        v96 -= 40;
      }
      while (v96 != v95);
      v97 = *v94;
    }
    v94[1] = v95;
    operator delete(v97);
    *v94 = 0;
    v94[1] = 0;
    v94[2] = 0;
  }
  *(_OWORD *)v94 = *(_OWORD *)v351;
  v94[2] = *(void **)&v351[16];
  v99 = *(_QWORD *)(v329 + 64);
  v100 = *(_QWORD *)(v329 + 72);
  v101 = (_QWORD *)sub_2231CC494(v328);
  *v101 = v99;
  v101[1] = v100;
  sub_223CA786C((unint64_t *)(v329 + 104), (int *)v351);
  v102 = sub_2231D04FC(v328);
  v103 = *(_OWORD *)v351;
  *(_OWORD *)(v102 + 12) = *(_OWORD *)&v351[12];
  *(_OWORD *)v102 = v103;
  *(_OWORD *)(v102 + 56) = *(_OWORD *)v352;
  v104 = *(void **)(v102 + 40);
  if (!v104)
  {
    *(_QWORD *)(v102 + 32) = *(_QWORD *)&v351[32];
    goto LABEL_112;
  }
  if (*(_DWORD *)(v102 + 60))
    _ZF = *(_DWORD *)(v102 + 56) == 0;
  else
    _ZF = 1;
  if (_ZF)
    v106 = 0;
  else
    v106 = *(_DWORD *)(v102 + 60);
  if (v106 * (((381774871 * (unint64_t)(*(_QWORD *)(v102 + 64) >> 34)) >> 32) >> 2) != -1)
  {
    *(_QWORD *)(v102 + 32) = *(_QWORD *)&v351[32];
LABEL_111:
    free(v104);
    goto LABEL_112;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v104 = *(void **)(v102 + 40);
  *(_QWORD *)(v102 + 32) = *(_QWORD *)&v351[32];
  if (v104)
    goto LABEL_111;
LABEL_112:
  *(_QWORD *)(v102 + 40) = *(_QWORD *)&v351[40];
  *(_QWORD *)(v102 + 48) = *(_QWORD *)&v351[48];
  *(_QWORD *)&v351[32] = 0;
  *(_QWORD *)&v351[40] = 0;
  if (!*(_BYTE *)(v329 + 1288))
    goto LABEL_454;
  v396 = &off_24EC200A8;
  v397 = 0u;
  memset(v398, 0, 26);
  v334 = &off_24EC1FE80;
  sub_2231DC6C8(&v335);
  v107 = *(_DWORD *)(v329 + 864);
  if (v107)
  {
    if (v107 != 1)
      sub_22316DD70();
    v387 = &off_24EC1F8C8;
    sub_2231F47D4(v329 + 800, (uint64_t)v388);
  }
  else
  {
    v387 = &off_24EC1F8C8;
    v108 = *(_QWORD *)(v329 + 808);
    v109 = *(std::__shared_weak_count **)(v329 + 816);
    if (v109)
    {
      v110 = (unint64_t *)&v109->__shared_owners_;
      do
        v111 = __ldxr(v110);
      while (__stxr(v111 + 1, v110));
      v112 = *(_QWORD *)(v329 + 840);
      v113 = *(_DWORD *)(v329 + 848);
      v114 = *(_WORD *)(v329 + 852);
      do
        v115 = __ldxr(v110);
      while (__stxr(v115 + 1, v110));
    }
    else
    {
      v112 = *(_QWORD *)(v329 + 840);
      v113 = *(_DWORD *)(v329 + 848);
      v114 = *(_WORD *)(v329 + 852);
    }
    *(_QWORD *)v388 = v108;
    *(_QWORD *)&v388[8] = v109;
    *(_QWORD *)&v388[16] = *(_QWORD *)(v329 + 824);
    *(_DWORD *)&v388[24] = *(_DWORD *)(v329 + 832);
    *(_QWORD *)&v388[32] = v112;
    *(_DWORD *)&v388[40] = v113;
    v389 = v114;
    if (v109)
    {
      v116 = (unint64_t *)&v109->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
  }
  if (*(_DWORD *)&v388[16] && *(_DWORD *)&v388[20])
  {
    if (*(_DWORD *)&v388[40] == 3)
    {
      *(_QWORD *)v351 = &off_24EC200A8;
      sub_223C9DD6C((uint64_t)&v387, (uint64_t)&v351[8]);
      v118 = *(_OWORD *)&v351[8];
      *(_QWORD *)&v351[8] = 0;
      *(_QWORD *)&v351[16] = 0;
      v119 = (std::__shared_weak_count *)*((_QWORD *)&v397 + 1);
      v397 = v118;
      if (v119)
      {
        v120 = (unint64_t *)&v119->__shared_owners_;
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
      v398[0] = *(_OWORD *)&v351[24];
      *(_OWORD *)((char *)v398 + 10) = *(_OWORD *)&v351[34];
      v122 = *(std::__shared_weak_count **)&v351[16];
      if (*(_QWORD *)&v351[16])
      {
        v123 = (unint64_t *)(*(_QWORD *)&v351[16] + 8);
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        goto LABEL_163;
      }
    }
    else
    {
      LOBYTE(v406) = 0;
      v407[0] = 0;
      v407[8] = 0;
      v407[24] = 0;
      LOBYTE(v408) = 1;
      DWORD2(v408) = 0;
      sub_22432B21C((uint64_t)&v387, 3u, (uint64_t)&v399);
      *(_QWORD *)v351 = &off_24EC1FE80;
      sub_223AAE704((uint64_t)&v399, (uint64_t)&v351[8]);
      v125 = *(_OWORD *)&v351[8];
      *(_QWORD *)&v351[8] = 0;
      *(_QWORD *)&v351[16] = 0;
      v126 = (std::__shared_weak_count *)*((_QWORD *)&v335 + 1);
      v335 = v125;
      if (v126)
      {
        v127 = (unint64_t *)&v126->__shared_owners_;
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
      }
      v336[0] = *(_OWORD *)&v351[24];
      v336[1] = *(_OWORD *)&v351[40];
      *(_OWORD *)v337 = *(_OWORD *)v352;
      v129 = *(std::__shared_weak_count **)&v351[16];
      *(_QWORD *)&v337[16] = *(_QWORD *)&v352[16];
      LOWORD(v338[0]) = v353[0];
      if (*(_QWORD *)&v351[16])
      {
        v130 = (unint64_t *)(*(_QWORD *)&v351[16] + 8);
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
          std::__shared_weak_count::__release_weak(v129);
        }
      }
      v132 = (std::__shared_weak_count *)*((_QWORD *)&v400 + 1);
      if (*((_QWORD *)&v400 + 1))
      {
        v133 = (unint64_t *)(*((_QWORD *)&v400 + 1) + 8);
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
      }
      *(_QWORD *)v351 = &off_24EC200A8;
      sub_223AA92B0((uint64_t)&v334, (uint64_t *)&v351[8]);
      v135 = *(_OWORD *)&v351[8];
      *(_QWORD *)&v351[8] = 0;
      *(_QWORD *)&v351[16] = 0;
      v136 = (std::__shared_weak_count *)*((_QWORD *)&v397 + 1);
      v397 = v135;
      if (v136)
      {
        v137 = (unint64_t *)&v136->__shared_owners_;
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
      v398[0] = *(_OWORD *)&v351[24];
      *(_OWORD *)((char *)v398 + 10) = *(_OWORD *)&v351[34];
      v122 = *(std::__shared_weak_count **)&v351[16];
      if (*(_QWORD *)&v351[16])
      {
        v139 = (unint64_t *)(*(_QWORD *)&v351[16] + 8);
        do
          v124 = __ldaxr(v139);
        while (__stlxr(v124 - 1, v139));
LABEL_163:
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
    }
  }
  v140 = *(std::__shared_weak_count **)&v388[8];
  if (*(_QWORD *)&v388[8])
  {
    v141 = (unint64_t *)(*(_QWORD *)&v388[8] + 8);
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v393 = &off_24EC200A8;
  v394 = 0u;
  memset(v395, 0, 26);
  v405 = &off_24EC1FE80;
  sub_2231DC6C8(&v406);
  v143 = *(_DWORD *)(v329 + 968);
  if (v143)
  {
    if (v143 != 1)
      sub_22316DD70();
    v390 = &off_24EC1F8C8;
    sub_2231F47D4(v329 + 904, (uint64_t)v391);
  }
  else
  {
    v390 = &off_24EC1F8C8;
    v144 = *(_QWORD *)(v329 + 912);
    v145 = *(std::__shared_weak_count **)(v329 + 920);
    if (v145)
    {
      v146 = (unint64_t *)&v145->__shared_owners_;
      do
        v147 = __ldxr(v146);
      while (__stxr(v147 + 1, v146));
      v148 = *(_QWORD *)(v329 + 944);
      v149 = *(_DWORD *)(v329 + 952);
      v150 = *(_WORD *)(v329 + 956);
      do
        v151 = __ldxr(v146);
      while (__stxr(v151 + 1, v146));
    }
    else
    {
      v148 = *(_QWORD *)(v329 + 944);
      v149 = *(_DWORD *)(v329 + 952);
      v150 = *(_WORD *)(v329 + 956);
    }
    *(_QWORD *)v391 = v144;
    *(_QWORD *)&v391[8] = v145;
    *(_QWORD *)&v391[16] = *(_QWORD *)(v329 + 928);
    *(_DWORD *)&v391[24] = *(_DWORD *)(v329 + 936);
    *(_QWORD *)&v391[32] = v148;
    *(_DWORD *)&v391[40] = v149;
    v392 = v150;
    if (v145)
    {
      v152 = (unint64_t *)&v145->__shared_owners_;
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
  }
  if (*(_DWORD *)&v391[16] && *(_DWORD *)&v391[20])
  {
    if (*(_DWORD *)&v391[40] == 3)
    {
      *(_QWORD *)v351 = &off_24EC200A8;
      sub_223C9DD6C((uint64_t)&v390, (uint64_t)&v351[8]);
      v154 = *(_OWORD *)&v351[8];
      *(_QWORD *)&v351[8] = 0;
      *(_QWORD *)&v351[16] = 0;
      v155 = (std::__shared_weak_count *)*((_QWORD *)&v394 + 1);
      v394 = v154;
      if (v155)
      {
        v156 = (unint64_t *)&v155->__shared_owners_;
        do
          v157 = __ldaxr(v156);
        while (__stlxr(v157 - 1, v156));
        if (!v157)
        {
          ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
          std::__shared_weak_count::__release_weak(v155);
        }
      }
      v395[0] = *(_OWORD *)&v351[24];
      *(_OWORD *)((char *)v395 + 10) = *(_OWORD *)&v351[34];
      v158 = *(std::__shared_weak_count **)&v351[16];
      if (*(_QWORD *)&v351[16])
      {
        v159 = (unint64_t *)(*(_QWORD *)&v351[16] + 8);
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        goto LABEL_220;
      }
    }
    else
    {
      LOBYTE(v400) = 0;
      LOBYTE(v401) = 0;
      BYTE8(v401) = 0;
      BYTE8(v402) = 0;
      LOBYTE(v403) = 1;
      DWORD2(v403) = 0;
      sub_22432B21C((uint64_t)&v390, 3u, (uint64_t)&v387);
      *(_QWORD *)v351 = &off_24EC1FE80;
      sub_223AAE704((uint64_t)&v387, (uint64_t)&v351[8]);
      v161 = *(_OWORD *)&v351[8];
      *(_QWORD *)&v351[8] = 0;
      *(_QWORD *)&v351[16] = 0;
      v162 = (std::__shared_weak_count *)*((_QWORD *)&v406 + 1);
      v406 = v161;
      if (v162)
      {
        v163 = (unint64_t *)&v162->__shared_owners_;
        do
          v164 = __ldaxr(v163);
        while (__stlxr(v164 - 1, v163));
        if (!v164)
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
        }
      }
      *(_OWORD *)v407 = *(_OWORD *)&v351[24];
      *(_OWORD *)&v407[16] = *(_OWORD *)&v351[40];
      v408 = *(_OWORD *)v352;
      v165 = *(std::__shared_weak_count **)&v351[16];
      v409 = *(_QWORD *)&v352[16];
      v410 = v353[0];
      if (*(_QWORD *)&v351[16])
      {
        v166 = (unint64_t *)(*(_QWORD *)&v351[16] + 8);
        do
          v167 = __ldaxr(v166);
        while (__stlxr(v167 - 1, v166));
        if (!v167)
        {
          ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
          std::__shared_weak_count::__release_weak(v165);
        }
      }
      v168 = *(std::__shared_weak_count **)&v388[8];
      if (*(_QWORD *)&v388[8])
      {
        v169 = (unint64_t *)(*(_QWORD *)&v388[8] + 8);
        do
          v170 = __ldaxr(v169);
        while (__stlxr(v170 - 1, v169));
        if (!v170)
        {
          ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
          std::__shared_weak_count::__release_weak(v168);
        }
      }
      *(_QWORD *)v351 = &off_24EC200A8;
      sub_223AA92B0((uint64_t)&v405, (uint64_t *)&v351[8]);
      v171 = *(_OWORD *)&v351[8];
      *(_QWORD *)&v351[8] = 0;
      *(_QWORD *)&v351[16] = 0;
      v172 = (std::__shared_weak_count *)*((_QWORD *)&v394 + 1);
      v394 = v171;
      if (v172)
      {
        v173 = (unint64_t *)&v172->__shared_owners_;
        do
          v174 = __ldaxr(v173);
        while (__stlxr(v174 - 1, v173));
        if (!v174)
        {
          ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
          std::__shared_weak_count::__release_weak(v172);
        }
      }
      v395[0] = *(_OWORD *)&v351[24];
      *(_OWORD *)((char *)v395 + 10) = *(_OWORD *)&v351[34];
      v158 = *(std::__shared_weak_count **)&v351[16];
      if (*(_QWORD *)&v351[16])
      {
        v175 = (unint64_t *)(*(_QWORD *)&v351[16] + 8);
        do
          v160 = __ldaxr(v175);
        while (__stlxr(v160 - 1, v175));
LABEL_220:
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
          std::__shared_weak_count::__release_weak(v158);
        }
      }
    }
  }
  v176 = *(std::__shared_weak_count **)&v391[8];
  if (*(_QWORD *)&v391[8])
  {
    v177 = (unint64_t *)(*(_QWORD *)&v391[8] + 8);
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  *(_QWORD *)v351 = &off_24EC21DF8;
  sub_2238B68A8((uint64_t)&v351[8]);
  v179 = *(_DWORD *)(v329 + 1072);
  if (v179)
  {
    if (v179 != 1)
      sub_22316DD70();
    v387 = &off_24EC1F8C8;
    sub_2231F47D4(v329 + 1008, (uint64_t)v388);
  }
  else
  {
    v387 = &off_24EC1F8C8;
    v180 = *(_QWORD *)(v329 + 1016);
    v181 = *(std::__shared_weak_count **)(v329 + 1024);
    if (v181)
    {
      v182 = (unint64_t *)&v181->__shared_owners_;
      do
        v183 = __ldxr(v182);
      while (__stxr(v183 + 1, v182));
      v184 = *(_QWORD *)(v329 + 1048);
      v185 = *(_DWORD *)(v329 + 1056);
      v186 = *(_WORD *)(v329 + 1060);
      do
        v187 = __ldxr(v182);
      while (__stxr(v187 + 1, v182));
    }
    else
    {
      v184 = *(_QWORD *)(v329 + 1048);
      v185 = *(_DWORD *)(v329 + 1056);
      v186 = *(_WORD *)(v329 + 1060);
    }
    *(_QWORD *)v388 = v180;
    *(_QWORD *)&v388[8] = v181;
    *(_QWORD *)&v388[16] = *(_QWORD *)(v329 + 1032);
    *(_DWORD *)&v388[24] = *(_DWORD *)(v329 + 1040);
    *(_QWORD *)&v388[32] = v184;
    *(_DWORD *)&v388[40] = v185;
    v389 = v186;
    if (v181)
    {
      v188 = (unint64_t *)&v181->__shared_owners_;
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
        std::__shared_weak_count::__release_weak(v181);
      }
    }
  }
  if (*(_DWORD *)&v388[16] && *(_DWORD *)&v388[20])
  {
    v399 = &off_24EC21DF8;
    sub_223C9E064((uint64_t)&v387, (uint64_t)&v400);
    v190 = v400;
    v400 = 0uLL;
    v191 = *(std::__shared_weak_count **)&v351[16];
    *(_OWORD *)&v351[8] = v190;
    if (v191)
    {
      v192 = (unint64_t *)&v191->__shared_owners_;
      do
        v193 = __ldaxr(v192);
      while (__stlxr(v193 - 1, v192));
      if (!v193)
      {
        ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
        std::__shared_weak_count::__release_weak(v191);
      }
    }
    *(_OWORD *)&v351[24] = v401;
    *(_OWORD *)&v351[40] = v402;
    *(_OWORD *)v352 = v403;
    *(_WORD *)&v352[16] = v404;
    v194 = (std::__shared_weak_count *)*((_QWORD *)&v400 + 1);
    if (*((_QWORD *)&v400 + 1))
    {
      v195 = (unint64_t *)(*((_QWORD *)&v400 + 1) + 8);
      do
        v196 = __ldaxr(v195);
      while (__stlxr(v196 - 1, v195));
      if (!v196)
      {
        ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
        std::__shared_weak_count::__release_weak(v194);
      }
    }
  }
  v197 = *(std::__shared_weak_count **)&v388[8];
  if (*(_QWORD *)&v388[8])
  {
    v198 = (unint64_t *)(*(_QWORD *)&v388[8] + 8);
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  v387 = &off_24EC21230;
  memset(v388, 0, 42);
  v200 = *(_DWORD *)(v329 + 1176);
  if (v200)
  {
    if (v200 != 1)
      sub_22316DD70();
    v399 = &off_24EC1F8C8;
    sub_2231F47D4(v329 + 1112, (uint64_t)&v400);
  }
  else
  {
    v399 = &off_24EC1F8C8;
    v201 = *(_QWORD *)(v329 + 1120);
    v202 = *(std::__shared_weak_count **)(v329 + 1128);
    if (v202)
    {
      v203 = (unint64_t *)&v202->__shared_owners_;
      do
        v204 = __ldxr(v203);
      while (__stxr(v204 + 1, v203));
      v205 = *(_QWORD *)(v329 + 1152);
      v206 = *(_DWORD *)(v329 + 1160);
      v207 = *(_WORD *)(v329 + 1164);
      do
        v208 = __ldxr(v203);
      while (__stxr(v208 + 1, v203));
    }
    else
    {
      v205 = *(_QWORD *)(v329 + 1152);
      v206 = *(_DWORD *)(v329 + 1160);
      v207 = *(_WORD *)(v329 + 1164);
    }
    *(_QWORD *)&v400 = v201;
    *((_QWORD *)&v400 + 1) = v202;
    *(_QWORD *)&v401 = *(_QWORD *)(v329 + 1136);
    DWORD2(v401) = *(_DWORD *)(v329 + 1144);
    *(_QWORD *)&v402 = v205;
    DWORD2(v402) = v206;
    WORD6(v402) = v207;
    if (v202)
    {
      v209 = (unint64_t *)&v202->__shared_owners_;
      do
        v210 = __ldaxr(v209);
      while (__stlxr(v210 - 1, v209));
      if (!v210)
      {
        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
        std::__shared_weak_count::__release_weak(v202);
      }
    }
  }
  if ((_DWORD)v401 && DWORD1(v401))
  {
    v390 = &off_24EC21230;
    sub_223C795C4((uint64_t)&v399, (uint64_t)v391);
    v211 = *(_OWORD *)v391;
    *(_OWORD *)v391 = 0uLL;
    v212 = *(std::__shared_weak_count **)&v388[8];
    *(_OWORD *)v388 = v211;
    if (v212)
    {
      v213 = (unint64_t *)&v212->__shared_owners_;
      do
        v214 = __ldaxr(v213);
      while (__stlxr(v214 - 1, v213));
      if (!v214)
      {
        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
        std::__shared_weak_count::__release_weak(v212);
      }
    }
    *(_OWORD *)&v388[16] = *(_OWORD *)&v391[16];
    *(_OWORD *)&v388[26] = *(_OWORD *)&v391[26];
    v215 = *(std::__shared_weak_count **)&v391[8];
    if (*(_QWORD *)&v391[8])
    {
      v216 = (unint64_t *)(*(_QWORD *)&v391[8] + 8);
      do
        v217 = __ldaxr(v216);
      while (__stlxr(v217 - 1, v216));
      if (!v217)
      {
        ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
        std::__shared_weak_count::__release_weak(v215);
      }
    }
  }
  v218 = (std::__shared_weak_count *)*((_QWORD *)&v400 + 1);
  if (*((_QWORD *)&v400 + 1))
  {
    v219 = (unint64_t *)(*((_QWORD *)&v400 + 1) + 8);
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
  v390 = &off_24EC21230;
  memset(v391, 0, 42);
  v221 = *(_DWORD *)(v329 + 1280);
  if (v221)
  {
    if (v221 != 1)
      sub_22316DD70();
    v399 = &off_24EC1F8C8;
    sub_2231F47D4(v329 + 1216, (uint64_t)&v400);
  }
  else
  {
    v399 = &off_24EC1F8C8;
    v222 = *(_QWORD *)(v329 + 1224);
    v223 = *(std::__shared_weak_count **)(v329 + 1232);
    if (v223)
    {
      v224 = (unint64_t *)&v223->__shared_owners_;
      do
        v225 = __ldxr(v224);
      while (__stxr(v225 + 1, v224));
      v226 = *(_QWORD *)(v329 + 1256);
      v227 = *(_DWORD *)(v329 + 1264);
      v228 = *(_WORD *)(v329 + 1268);
      do
        v229 = __ldxr(v224);
      while (__stxr(v229 + 1, v224));
    }
    else
    {
      v226 = *(_QWORD *)(v329 + 1256);
      v227 = *(_DWORD *)(v329 + 1264);
      v228 = *(_WORD *)(v329 + 1268);
    }
    *(_QWORD *)&v400 = v222;
    *((_QWORD *)&v400 + 1) = v223;
    *(_QWORD *)&v401 = *(_QWORD *)(v329 + 1240);
    DWORD2(v401) = *(_DWORD *)(v329 + 1248);
    *(_QWORD *)&v402 = v226;
    DWORD2(v402) = v227;
    WORD6(v402) = v228;
    if (v223)
    {
      v230 = (unint64_t *)&v223->__shared_owners_;
      do
        v231 = __ldaxr(v230);
      while (__stlxr(v231 - 1, v230));
      if (!v231)
      {
        ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
        std::__shared_weak_count::__release_weak(v223);
      }
    }
  }
  if (!(_DWORD)v401 || !DWORD1(v401))
    goto LABEL_317;
  v384 = &off_24EC21230;
  sub_223C795C4((uint64_t)&v399, (uint64_t)&v385);
  v232 = v385;
  v385 = 0uLL;
  v233 = *(std::__shared_weak_count **)&v391[8];
  *(_OWORD *)v391 = v232;
  if (v233)
  {
    v234 = (unint64_t *)&v233->__shared_owners_;
    do
      v235 = __ldaxr(v234);
    while (__stlxr(v235 - 1, v234));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
  *(_OWORD *)&v391[16] = *(_OWORD *)v386;
  *(_OWORD *)&v391[26] = *(_OWORD *)&v386[10];
  v236 = (std::__shared_weak_count *)*((_QWORD *)&v385 + 1);
  if (!*((_QWORD *)&v385 + 1))
    goto LABEL_317;
  v237 = (unint64_t *)(*((_QWORD *)&v385 + 1) + 8);
  do
    v238 = __ldaxr(v237);
  while (__stlxr(v238 - 1, v237));
  if (!v238)
  {
    ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
    std::__shared_weak_count::__release_weak(v236);
    v239 = (std::__shared_weak_count *)*((_QWORD *)&v400 + 1);
    if (!*((_QWORD *)&v400 + 1))
      goto LABEL_321;
  }
  else
  {
LABEL_317:
    v239 = (std::__shared_weak_count *)*((_QWORD *)&v400 + 1);
    if (!*((_QWORD *)&v400 + 1))
      goto LABEL_321;
  }
  v240 = (unint64_t *)&v239->__shared_owners_;
  do
    v241 = __ldaxr(v240);
  while (__stlxr(v241 - 1, v240));
  if (!v241)
  {
    ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
    std::__shared_weak_count::__release_weak(v239);
    v384 = &off_24EC200A8;
    v243 = (std::__shared_weak_count *)*((_QWORD *)&v397 + 1);
    v242 = v397;
    if (*((_QWORD *)&v397 + 1))
      goto LABEL_322;
LABEL_388:
    v385 = v242;
    *(_OWORD *)v386 = v398[0];
    *(_QWORD *)&v386[16] = *(_QWORD *)&v398[1];
    *(_WORD *)&v386[24] = WORD4(v398[1]);
    v378 = &off_24EC200A8;
    v252 = (std::__shared_weak_count *)*((_QWORD *)&v394 + 1);
    v251 = v394;
    if (*((_QWORD *)&v394 + 1))
      goto LABEL_335;
LABEL_389:
    v379 = v251;
    v380 = 0;
    v381 = v395[0];
    v382 = *(_QWORD *)&v395[1];
    v383 = WORD4(v395[1]);
    v399 = &off_24EC21DF8;
    v260 = *(_QWORD *)&v351[8];
    v261 = *(std::__shared_weak_count **)&v351[16];
    if (*(_QWORD *)&v351[16])
      goto LABEL_348;
LABEL_390:
    v400 = v260;
    v401 = *(_OWORD *)&v351[24];
    v402 = *(_OWORD *)&v351[40];
    v403 = *(_OWORD *)v352;
    v404 = *(_WORD *)&v352[16];
    v372 = &off_24EC21230;
    v270 = *(std::__shared_weak_count **)&v388[8];
    v269 = *(_QWORD *)v388;
    if (*(_QWORD *)&v388[8])
      goto LABEL_361;
LABEL_391:
    v373 = v269;
    v374 = 0;
    v375 = *(_OWORD *)&v388[16];
    v376 = *(_QWORD *)&v388[32];
    v377 = *(_WORD *)&v388[40];
    v366 = &off_24EC21230;
    v279 = *(std::__shared_weak_count **)&v391[8];
    v278 = *(_QWORD *)v391;
    if (!*(_QWORD *)&v391[8])
      goto LABEL_392;
LABEL_374:
    v280 = (unint64_t *)&v279->__shared_owners_;
    do
      v281 = __ldxr(v280);
    while (__stxr(v281 + 1, v280));
    v282 = *(_WORD *)&v391[40];
    do
      v283 = __ldxr(v280);
    while (__stxr(v283 + 1, v280));
    v369 = *(_OWORD *)&v391[16];
    v370 = *(_QWORD *)&v391[32];
    do
      v284 = __ldxr(v280);
    while (__stxr(v284 + 1, v280));
    v367 = v278;
    v368 = v279;
    v371 = v282;
    v91 = v329;
    do
      v285 = __ldaxr(v280);
    while (__stlxr(v285 - 1, v280));
    if (!v285)
    {
      ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
      std::__shared_weak_count::__release_weak(v279);
    }
    do
      v286 = __ldaxr(v280);
    while (__stlxr(v286 - 1, v280));
    if (!v286)
    {
      ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
      std::__shared_weak_count::__release_weak(v279);
    }
    goto LABEL_393;
  }
LABEL_321:
  v384 = &off_24EC200A8;
  v243 = (std::__shared_weak_count *)*((_QWORD *)&v397 + 1);
  v242 = v397;
  if (!*((_QWORD *)&v397 + 1))
    goto LABEL_388;
LABEL_322:
  v244 = (unint64_t *)&v243->__shared_owners_;
  do
    v245 = __ldxr(v244);
  while (__stxr(v245 + 1, v244));
  v246 = WORD4(v398[1]);
  do
    v247 = __ldxr(v244);
  while (__stxr(v247 + 1, v244));
  *(_OWORD *)v386 = v398[0];
  *(_QWORD *)&v386[16] = *(_QWORD *)&v398[1];
  do
    v248 = __ldxr(v244);
  while (__stxr(v248 + 1, v244));
  *(_QWORD *)&v385 = v242;
  *((_QWORD *)&v385 + 1) = v243;
  *(_WORD *)&v386[24] = v246;
  do
    v249 = __ldaxr(v244);
  while (__stlxr(v249 - 1, v244));
  if (!v249)
  {
    ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
    std::__shared_weak_count::__release_weak(v243);
  }
  do
    v250 = __ldaxr(v244);
  while (__stlxr(v250 - 1, v244));
  if (!v250)
  {
    ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
    std::__shared_weak_count::__release_weak(v243);
    v378 = &off_24EC200A8;
    v252 = (std::__shared_weak_count *)*((_QWORD *)&v394 + 1);
    v251 = v394;
    if (*((_QWORD *)&v394 + 1))
      goto LABEL_335;
    goto LABEL_389;
  }
  v378 = &off_24EC200A8;
  v252 = (std::__shared_weak_count *)*((_QWORD *)&v394 + 1);
  v251 = v394;
  if (!*((_QWORD *)&v394 + 1))
    goto LABEL_389;
LABEL_335:
  v253 = (unint64_t *)&v252->__shared_owners_;
  do
    v254 = __ldxr(v253);
  while (__stxr(v254 + 1, v253));
  v255 = WORD4(v395[1]);
  do
    v256 = __ldxr(v253);
  while (__stxr(v256 + 1, v253));
  v381 = v395[0];
  v382 = *(_QWORD *)&v395[1];
  do
    v257 = __ldxr(v253);
  while (__stxr(v257 + 1, v253));
  v379 = v251;
  v380 = v252;
  v383 = v255;
  do
    v258 = __ldaxr(v253);
  while (__stlxr(v258 - 1, v253));
  if (!v258)
  {
    ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
    std::__shared_weak_count::__release_weak(v252);
  }
  do
    v259 = __ldaxr(v253);
  while (__stlxr(v259 - 1, v253));
  if (!v259)
  {
    ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
    std::__shared_weak_count::__release_weak(v252);
    v399 = &off_24EC21DF8;
    v260 = *(_QWORD *)&v351[8];
    v261 = *(std::__shared_weak_count **)&v351[16];
    if (*(_QWORD *)&v351[16])
      goto LABEL_348;
    goto LABEL_390;
  }
  v399 = &off_24EC21DF8;
  v260 = *(_QWORD *)&v351[8];
  v261 = *(std::__shared_weak_count **)&v351[16];
  if (!*(_QWORD *)&v351[16])
    goto LABEL_390;
LABEL_348:
  v262 = (unint64_t *)&v261->__shared_owners_;
  do
    v263 = __ldxr(v262);
  while (__stxr(v263 + 1, v262));
  v264 = *(_WORD *)&v352[16];
  do
    v265 = __ldxr(v262);
  while (__stxr(v265 + 1, v262));
  v401 = *(_OWORD *)&v351[24];
  v402 = *(_OWORD *)&v351[40];
  v403 = *(_OWORD *)v352;
  do
    v266 = __ldxr(v262);
  while (__stxr(v266 + 1, v262));
  *(_QWORD *)&v400 = v260;
  *((_QWORD *)&v400 + 1) = v261;
  v404 = v264;
  do
    v267 = __ldaxr(v262);
  while (__stlxr(v267 - 1, v262));
  if (!v267)
  {
    ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
    std::__shared_weak_count::__release_weak(v261);
  }
  do
    v268 = __ldaxr(v262);
  while (__stlxr(v268 - 1, v262));
  if (!v268)
  {
    ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
    std::__shared_weak_count::__release_weak(v261);
    v372 = &off_24EC21230;
    v270 = *(std::__shared_weak_count **)&v388[8];
    v269 = *(_QWORD *)v388;
    if (*(_QWORD *)&v388[8])
      goto LABEL_361;
    goto LABEL_391;
  }
  v372 = &off_24EC21230;
  v270 = *(std::__shared_weak_count **)&v388[8];
  v269 = *(_QWORD *)v388;
  if (!*(_QWORD *)&v388[8])
    goto LABEL_391;
LABEL_361:
  v271 = (unint64_t *)&v270->__shared_owners_;
  do
    v272 = __ldxr(v271);
  while (__stxr(v272 + 1, v271));
  v273 = *(_WORD *)&v388[40];
  do
    v274 = __ldxr(v271);
  while (__stxr(v274 + 1, v271));
  v375 = *(_OWORD *)&v388[16];
  v376 = *(_QWORD *)&v388[32];
  do
    v275 = __ldxr(v271);
  while (__stxr(v275 + 1, v271));
  v373 = v269;
  v374 = v270;
  v377 = v273;
  do
    v276 = __ldaxr(v271);
  while (__stlxr(v276 - 1, v271));
  if (!v276)
  {
    ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
    std::__shared_weak_count::__release_weak(v270);
  }
  do
    v277 = __ldaxr(v271);
  while (__stlxr(v277 - 1, v271));
  if (!v277)
  {
    ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
    std::__shared_weak_count::__release_weak(v270);
    v366 = &off_24EC21230;
    v279 = *(std::__shared_weak_count **)&v391[8];
    v278 = *(_QWORD *)v391;
    if (!*(_QWORD *)&v391[8])
      goto LABEL_392;
    goto LABEL_374;
  }
  v366 = &off_24EC21230;
  v279 = *(std::__shared_weak_count **)&v391[8];
  v278 = *(_QWORD *)v391;
  if (*(_QWORD *)&v391[8])
    goto LABEL_374;
LABEL_392:
  v367 = v278;
  v368 = 0;
  v369 = *(_OWORD *)&v391[16];
  v370 = *(_QWORD *)&v391[32];
  v371 = *(_WORD *)&v391[40];
  v91 = v329;
LABEL_393:
  sub_2231CE19C(v333, &v384, &v378, &v399, &v372, &v366);
  v287 = v368;
  if (v368)
  {
    v288 = (unint64_t *)&v368->__shared_owners_;
    do
      v289 = __ldaxr(v288);
    while (__stlxr(v289 - 1, v288));
    if (!v289)
    {
      ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
      std::__shared_weak_count::__release_weak(v287);
    }
  }
  v290 = v374;
  if (v374)
  {
    v291 = (unint64_t *)&v374->__shared_owners_;
    do
      v292 = __ldaxr(v291);
    while (__stlxr(v292 - 1, v291));
    if (!v292)
    {
      ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
      std::__shared_weak_count::__release_weak(v290);
    }
  }
  v293 = (std::__shared_weak_count *)*((_QWORD *)&v400 + 1);
  if (*((_QWORD *)&v400 + 1))
  {
    v294 = (unint64_t *)(*((_QWORD *)&v400 + 1) + 8);
    do
      v295 = __ldaxr(v294);
    while (__stlxr(v295 - 1, v294));
    if (!v295)
    {
      ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
      std::__shared_weak_count::__release_weak(v293);
    }
  }
  v296 = v380;
  if (v380)
  {
    v297 = (unint64_t *)&v380->__shared_owners_;
    do
      v298 = __ldaxr(v297);
    while (__stlxr(v298 - 1, v297));
    if (!v298)
    {
      ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
      std::__shared_weak_count::__release_weak(v296);
    }
  }
  v299 = (std::__shared_weak_count *)*((_QWORD *)&v385 + 1);
  if (*((_QWORD *)&v385 + 1))
  {
    v300 = (unint64_t *)(*((_QWORD *)&v385 + 1) + 8);
    do
      v301 = __ldaxr(v300);
    while (__stlxr(v301 - 1, v300));
    if (!v301)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
  v302 = *(std::__shared_weak_count **)&v391[8];
  if (*(_QWORD *)&v391[8])
  {
    v303 = (unint64_t *)(*(_QWORD *)&v391[8] + 8);
    do
      v304 = __ldaxr(v303);
    while (__stlxr(v304 - 1, v303));
    if (!v304)
    {
      ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
      std::__shared_weak_count::__release_weak(v302);
    }
  }
  v305 = *(std::__shared_weak_count **)&v388[8];
  if (*(_QWORD *)&v388[8])
  {
    v306 = (unint64_t *)(*(_QWORD *)&v388[8] + 8);
    do
      v307 = __ldaxr(v306);
    while (__stlxr(v307 - 1, v306));
    if (!v307)
    {
      ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
      std::__shared_weak_count::__release_weak(v305);
    }
  }
  v308 = *(std::__shared_weak_count **)&v351[16];
  if (*(_QWORD *)&v351[16])
  {
    v309 = (unint64_t *)(*(_QWORD *)&v351[16] + 8);
    do
      v310 = __ldaxr(v309);
    while (__stlxr(v310 - 1, v309));
    if (!v310)
    {
      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
      std::__shared_weak_count::__release_weak(v308);
    }
  }
  v311 = (std::__shared_weak_count *)*((_QWORD *)&v406 + 1);
  if (*((_QWORD *)&v406 + 1))
  {
    v312 = (unint64_t *)(*((_QWORD *)&v406 + 1) + 8);
    do
      v313 = __ldaxr(v312);
    while (__stlxr(v313 - 1, v312));
    if (!v313)
    {
      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
      std::__shared_weak_count::__release_weak(v311);
    }
  }
  v314 = (std::__shared_weak_count *)*((_QWORD *)&v394 + 1);
  if (*((_QWORD *)&v394 + 1))
  {
    v315 = (unint64_t *)(*((_QWORD *)&v394 + 1) + 8);
    do
      v316 = __ldaxr(v315);
    while (__stlxr(v316 - 1, v315));
    if (!v316)
    {
      ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
      std::__shared_weak_count::__release_weak(v314);
    }
  }
  v317 = (std::__shared_weak_count *)*((_QWORD *)&v335 + 1);
  if (*((_QWORD *)&v335 + 1))
  {
    v318 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
    do
      v319 = __ldaxr(v318);
    while (__stlxr(v319 - 1, v318));
    if (!v319)
    {
      ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
      std::__shared_weak_count::__release_weak(v317);
    }
  }
  v320 = (std::__shared_weak_count *)*((_QWORD *)&v397 + 1);
  if (*((_QWORD *)&v397 + 1))
  {
    v321 = (unint64_t *)(*((_QWORD *)&v397 + 1) + 8);
    do
      v322 = __ldaxr(v321);
    while (__stlxr(v322 - 1, v321));
    if (!v322)
    {
      ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
      std::__shared_weak_count::__release_weak(v320);
    }
  }
  sub_2231CE15C(v328, v333);
  sub_2231DC94C(v333);
LABEL_454:
  sub_2231CD94C(v328, *(_QWORD *)(v91 + 1296));
  sub_22319ED0C(v351, v91 + 1304);
  sub_2231CDA18(v328, (uint64_t)v351);
  v323 = *(std::__shared_weak_count **)&v351[8];
  if (!*(_QWORD *)&v351[8])
    goto LABEL_458;
  v324 = (unint64_t *)(*(_QWORD *)&v351[8] + 8);
  do
    v325 = __ldaxr(v324);
  while (__stlxr(v325 - 1, v324));
  if (v325)
  {
LABEL_458:
    if (!*(_BYTE *)(v91 + 1356))
      return;
    goto LABEL_459;
  }
  ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
  std::__shared_weak_count::__release_weak(v323);
  if (*(_BYTE *)(v91 + 1356))
  {
LABEL_459:
    v326 = *(_OWORD *)(v91 + 1320);
    v327 = *(_OWORD *)(v91 + 1336);
    v331 = *(_DWORD *)(v91 + 1352);
    v330[1] = v327;
    v330[0] = v326;
    v332 = 1;
    sub_2231CD95C(v328, (uint64_t)v330);
  }
}

void sub_223C9CE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  sub_22319A5E0((uint64_t)&STACK[0x478]);
  sub_223167354(a11);
  sub_22319EF60((uint64_t)&STACK[0x4B0]);
  sub_223167354(a12);
  sub_22319EF60((uint64_t)&STACK[0x4E8]);
  sub_2231CE350(a14);
  _Unwind_Resume(a1);
}

void sub_223C9CF90()
{
  JUMPOUT(0x223C9CF60);
}

void sub_223C9CF98()
{
  JUMPOUT(0x223C9CF60);
}

void sub_223C9CFA0()
{
  JUMPOUT(0x223C9CF68);
}

void sub_223C9CFA8()
{
  JUMPOUT(0x223C9CF70);
}

void sub_223C9CFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  sub_22319EF60((uint64_t)&STACK[0x4E8]);
  sub_2231CE350(a14);
  _Unwind_Resume(a1);
}

void sub_223C9CFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  sub_223167354((uint64_t)&STACK[0x200]);
  sub_2231CE350(a14);
  _Unwind_Resume(a1);
}

void sub_223C9CFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  sub_2231CE350(a14);
  _Unwind_Resume(a1);
}

void sub_223C9CFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  sub_2231CE350(a14);
  _Unwind_Resume(a1);
}

void sub_223C9D010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  sub_2231CE350(a14);
  _Unwind_Resume(a1);
}

void sub_223C9D024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  sub_2231CE350(a14);
  _Unwind_Resume(a1);
}

void sub_223C9D038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  sub_22319A750((void **)&STACK[0x200]);
  sub_2231CE350(a14);
  _Unwind_Resume(a1);
}

void sub_223C9D054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  sub_2231CE350(a14);
  _Unwind_Resume(a1);
}

void sub_223C9D068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  sub_2231CE350(a14);
  _Unwind_Resume(a1);
}

void sub_223C9D07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  sub_223C9DBC8(&a31);
  _Unwind_Resume(a1);
}

void sub_223C9D090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  sub_2231CFA24((uint64_t)&STACK[0x200]);
  sub_2231CE350(a14);
  _Unwind_Resume(a1);
}

void sub_223C9D0AC(_Unwind_Exception *a1)
{
  sub_223C9DBC8(&STACK[0x200]);
  _Unwind_Resume(a1);
}

__n128 sub_223C9D0C0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  _QWORD v14[69];

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 32) = xmmword_22466E2F0;
  *(_OWORD *)(a2 + 48) = unk_22466E300;
  *(_OWORD *)(a2 + 64) = xmmword_22466E310;
  *(_OWORD *)(a2 + 80) = unk_22466E320;
  *(_OWORD *)(a2 + 132) = 0u;
  *(_OWORD *)(a2 + 148) = 0u;
  *(_OWORD *)(a2 + 116) = 0u;
  *(_QWORD *)(a2 + 164) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 112) = 1065353216;
  *(_DWORD *)(a2 + 132) = 1065353216;
  *(_DWORD *)(a2 + 152) = 1065353216;
  *(_OWORD *)(a2 + 196) = 0u;
  *(_OWORD *)(a2 + 212) = 0u;
  *(_QWORD *)(a2 + 228) = 0;
  *(_OWORD *)(a2 + 180) = 0u;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a2 + 172) = _D0;
  *(_DWORD *)(a2 + 196) = 1065353216;
  *(_DWORD *)(a2 + 216) = 1065353216;
  *(_DWORD *)(a2 + 236) = 1065353216;
  *(_WORD *)(a2 + 240) = 256;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  if (*(_BYTE *)(a1 + 1376))
  {
    sub_223C9AAA4(a1 + 16, (uint64_t)v14);
    v9 = operator new(0x240uLL);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = &off_24EC20F48;
    *(_QWORD *)(a2 + 16) = sub_2231D1070((uint64_t)(v9 + 3), (uint64_t)v14);
    *(_QWORD *)(a2 + 24) = v9;
    sub_2231CE350(v14);
  }
  v10 = *(_OWORD *)(a1 + 1384);
  v11 = *(_OWORD *)(a1 + 1400);
  v12 = *(_OWORD *)(a1 + 1432);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 1416);
  *(_OWORD *)(a2 + 80) = v12;
  *(_OWORD *)(a2 + 32) = v10;
  *(_OWORD *)(a2 + 48) = v11;
  result = *(__n128 *)(a1 + 1448);
  *(__n128 *)(a2 + 96) = result;
  *(_BYTE *)(a2 + 240) = *(_BYTE *)(a1 + 1464);
  return result;
}

void sub_223C9D1D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_2231CE350((uint64_t *)va);
  sub_223198118(v2);
  _Unwind_Resume(a1);
}

void sub_223C9D1EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223198118(v1);
  _Unwind_Resume(a1);
}

uint64_t (***sub_223C9D200(uint64_t a1, unsigned int a2))()
{
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  __int16 v23;
  __int16 v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  __int16 v40;
  __int16 v41;
  uint64_t v42;
  int v43;
  __int16 v57;
  __int16 v76;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  BOOL v91;
  uint64_t (**v92)();
  uint64_t (***v93)();
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (***v108)();
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t (***result)();
  uint64_t v127;
  uint64_t v128;
  __int16 v129;
  uint64_t (**v130)();
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t (***v133)();
  int v134;
  uint64_t v135;
  int v136;
  __int16 v137;
  uint64_t (**v138)();
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t (***v141)();
  int v142;
  int v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  char v147;
  char v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 9)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyframeBundleSample.cpp", 165, (uint64_t)"version <= 8", 12, (uint64_t)"Fix only applies to versions less than or equal to 8", 52, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
  else if (a2 != 8)
  {
    v133 = 0;
    goto LABEL_100;
  }
  v3 = *(_DWORD *)(a1 + 96);
  if (v3)
  {
    if (v3 != 1)
      sub_22316DD70();
    v130 = &off_24EC1F8C8;
    sub_2231F47D4(a1 + 32, (uint64_t)&v131);
  }
  else
  {
    v130 = &off_24EC1F8C8;
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_QWORD *)(a1 + 72);
      v9 = *(_DWORD *)(a1 + 80);
      v10 = *(_WORD *)(a1 + 84);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 72);
      v9 = *(_DWORD *)(a1 + 80);
      v10 = *(_WORD *)(a1 + 84);
    }
    v131 = v4;
    v132 = v5;
    v133 = *(uint64_t (****)())(a1 + 56);
    v134 = *(_DWORD *)(a1 + 64);
    v135 = v8;
    v136 = v9;
    v137 = v10;
    if (v5)
    {
      v12 = (unint64_t *)&v5->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  v138 = &off_24EC1FD28;
  sub_2231A0534((uint64_t)&v130, (uint64_t)&v139);
  v14 = v139;
  if (v139)
  {
    v15 = v140;
    if (!v140)
      goto LABEL_32;
    v16 = (unint64_t *)&v140->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    v14 = v139;
    v19 = v140;
    if (!v140)
      goto LABEL_32;
    v20 = (unint64_t *)&v140->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if (v148)
      {
LABEL_33:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v14 + 96))(&v128, v14, 0);
        v23 = 31743;
        v24 = -1025;
        if (!v142)
          goto LABEL_82;
        goto LABEL_37;
      }
    }
    else
    {
LABEL_32:
      if (v148)
        goto LABEL_33;
    }
  }
  v128 = 0;
  v23 = 31743;
  v24 = -1025;
  if (!v142)
    goto LABEL_82;
LABEL_37:
  v25 = v143;
  if (v143)
  {
    v26 = v144;
    if (v144)
    {
      v28 = v145;
      v27 = v146;
      v29 = v141;
      if (v147 && v141)
      {
        v30 = v139;
        v31 = v140;
        if (v140)
        {
          v32 = (unint64_t *)&v140->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
          do
            v34 = __ldaxr(v32);
          while (__stlxr(v34 - 1, v32));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v30 + 88))(v30, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v29 = v141;
      }
      v35 = v25 - 1;
      v36 = 2 * v28;
      v37 = v26 - 1;
      if (v26 == 1)
      {
        v40 = 31743;
        v41 = -1025;
      }
      else
      {
        v38 = 2 * v27;
        if (v25 == 1)
        {
          v40 = 31743;
          v41 = -1025;
          do
          {
            _H0 = *((_WORD *)v29 + 1);
            _H1 = v40;
            __asm
            {
              FCVT            S2, H0
              FCVT            S0, H1
            }
            if (_S2 < _S0)
              v40 = *((_WORD *)v29 + 1);
            _H0 = v41;
            __asm { FCVT            S0, H0 }
            if (_S2 > _S0)
              v41 = *((_WORD *)v29 + 1);
            v29 = (uint64_t (***)())((char *)v29 + v38);
            --v37;
          }
          while (v37);
        }
        else
        {
          v39 = 0;
          v40 = 31743;
          v41 = -1025;
          do
          {
            v42 = 2;
            v43 = v25 - 1;
            do
            {
              _H0 = *(_WORD *)((char *)v29 + v42);
              _H1 = v40;
              __asm
              {
                FCVT            S2, H0
                FCVT            S0, H1
              }
              if (_S2 < _S0)
                v40 = *(_WORD *)((char *)v29 + v42);
              _H0 = v41;
              __asm { FCVT            S0, H0 }
              if (_S2 > _S0)
                v41 = *(_WORD *)((char *)v29 + v42);
              v42 += v36;
              --v43;
            }
            while (v43);
            _H0 = *(_WORD *)((char *)v29 + v42);
            _H1 = v40;
            __asm { FCVT            S2, H0 }
            v57 = _H0;
            __asm { FCVT            S0, H1 }
            if (_S2 < _S0)
              v40 = v57;
            _H0 = v41;
            __asm { FCVT            S0, H0 }
            if (_S2 > _S0)
              v41 = v57;
            v29 = (uint64_t (***)())((char *)v29 + v38);
            ++v39;
          }
          while (v39 != v37);
        }
      }
      if (v25 != 1)
      {
        do
        {
          _H0 = *((_WORD *)v29 + 1);
          _H1 = v40;
          __asm
          {
            FCVT            S2, H0
            FCVT            S0, H1
          }
          if (_S2 < _S0)
            v40 = *((_WORD *)v29 + 1);
          _H0 = v41;
          __asm { FCVT            S0, H0 }
          if (_S2 > _S0)
            v41 = *((_WORD *)v29 + 1);
          v29 = (uint64_t (***)())((char *)v29 + v36);
          --v35;
        }
        while (v35);
      }
      _H0 = *((_WORD *)v29 + 1);
      _H1 = v40;
      __asm { FCVT            S2, H0 }
      v76 = _H0;
      __asm { FCVT            S0, H1 }
      if (_S2 >= _S0)
        v23 = v40;
      else
        v23 = v76;
      _H0 = v41;
      __asm { FCVT            S0, H0 }
      if (_S2 > _S0)
        v24 = v76;
      else
        v24 = v41;
    }
  }
LABEL_82:
  v80 = v128;
  v128 = 0;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  v81 = v140;
  if (v140)
  {
    v82 = (unint64_t *)&v140->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v132;
  if (v132)
  {
    v85 = (unint64_t *)&v132->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  _H0 = v23;
  _H1 = v24;
  __asm { FCVT            S1, H1 }
  v133 = 0;
  __asm { FCVT            S0, H0 }
  if (!_ZF & _CF)
    v91 = 1;
  else
    v91 = _S0 < 0.00010002;
  if (v91)
  {
    v92 = &off_24EC62F80;
    goto LABEL_101;
  }
LABEL_100:
  v92 = &off_24EC62EF0;
LABEL_101:
  v138 = v92;
  v141 = &v138;
  sub_223C9E544(&v138, &v130);
  v93 = v141;
  if (v141 == &v138)
  {
    v94 = 4;
    v93 = &v138;
  }
  else
  {
    if (!v141)
      goto LABEL_106;
    v94 = 5;
  }
  (*v93)[v94]();
LABEL_106:
  if (*(_DWORD *)(a1 + 96) != 1)
    sub_22316DD70();
  v138 = &off_24EC22560;
  sub_2231E184C(a1 + 32, &v139);
  v95 = v139;
  if (v139)
  {
    v96 = v140;
    if (!v140)
      goto LABEL_119;
    v97 = (unint64_t *)&v140->__shared_owners_;
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
    do
      v99 = __ldaxr(v97);
    while (__stlxr(v99 - 1, v97));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
    v95 = v139;
    v100 = v140;
    if (!v140)
      goto LABEL_119;
    v101 = (unint64_t *)&v140->__shared_owners_;
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
    do
      v103 = __ldaxr(v101);
    while (__stlxr(v103 - 1, v101));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
      if (v148)
      {
LABEL_120:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v95 + 96))(&v128, v95, 1);
        if (!v142)
          goto LABEL_152;
        goto LABEL_124;
      }
    }
    else
    {
LABEL_119:
      if (v148)
        goto LABEL_120;
    }
  }
  v128 = 0;
  if (!v142)
    goto LABEL_152;
LABEL_124:
  v104 = v143;
  if (v143)
  {
    v105 = v144;
    if (v144)
    {
      v107 = v145;
      v106 = v146;
      v108 = v141;
      if (v147 && v141)
      {
        v109 = v139;
        v110 = v140;
        if (v140)
        {
          v111 = (unint64_t *)&v140->__shared_owners_;
          do
            v112 = __ldxr(v111);
          while (__stxr(v112 + 1, v111));
          do
            v113 = __ldaxr(v111);
          while (__stlxr(v113 - 1, v111));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
          }
        }
        (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v109 + 88))(v109, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v108 = v141;
      }
      v114 = v104 - 1;
      v115 = 2 * v107;
      v116 = v105 - 1;
      if (v116)
      {
        if (v114)
        {
          v117 = 0;
          v118 = 2 * v106;
          while (1)
          {
            v119 = 2;
            v120 = v114;
            do
            {
              v129 = *(_WORD *)((char *)v108 + v119);
              if (!v133)
                goto LABEL_165;
              *(_WORD *)((char *)v108 + v119) = ((uint64_t (*)(uint64_t (***)(), __int16 *))(*v133)[6])(v133, &v129);
              v119 += v115;
              --v120;
            }
            while (v120);
            v129 = *(_WORD *)((char *)v108 + v119);
            if (!v133)
              break;
            *(_WORD *)((char *)v108 + v119) = ((uint64_t (*)(uint64_t (***)(), __int16 *))(*v133)[6])(v133, &v129);
            v108 = (uint64_t (***)())((char *)v108 + v118);
            if (++v117 == v116)
              goto LABEL_147;
          }
        }
        else
        {
          v121 = 2 * v106;
          while (1)
          {
            v129 = *((_WORD *)v108 + 1);
            if (!v133)
              break;
            *((_WORD *)v108 + 1) = ((uint64_t (*)(uint64_t (***)(), __int16 *))(*v133)[6])(v133, &v129);
            v108 = (uint64_t (***)())((char *)v108 + v121);
            if (!--v116)
              goto LABEL_147;
          }
        }
      }
      else
      {
LABEL_147:
        if (v114)
        {
          while (1)
          {
            v129 = *((_WORD *)v108 + 1);
            if (!v133)
              break;
            *((_WORD *)v108 + 1) = ((uint64_t (*)(uint64_t (***)(), __int16 *))(*v133)[6])(v133, &v129);
            v108 = (uint64_t (***)())((char *)v108 + v115);
            if (!--v114)
              goto LABEL_150;
          }
        }
        else
        {
LABEL_150:
          v129 = *((_WORD *)v108 + 1);
          if (v133)
          {
            *((_WORD *)v108 + 1) = ((uint64_t (*)(uint64_t (***)(), __int16 *))(*v133)[6])(v133, &v129);
            goto LABEL_152;
          }
        }
      }
LABEL_165:
      sub_223198474();
    }
  }
LABEL_152:
  v122 = v128;
  v128 = 0;
  if (v122)
    (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
  v123 = v140;
  if (v140)
  {
    v124 = (unint64_t *)&v140->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
      result = v133;
      if (v133 != &v130)
        goto LABEL_159;
LABEL_162:
      v127 = 4;
      result = &v130;
      return (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*result)[v127])(result);
    }
  }
  result = v133;
  if (v133 == &v130)
    goto LABEL_162;
LABEL_159:
  if (!result)
    return result;
  v127 = 5;
  return (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*result)[v127])(result);
}

void sub_223C9DAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  sub_22319EFF0((uint64_t)va1);
  sub_22319A5E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223C9DB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, uint64_t *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_2231E17E4((uint64_t)va1);
  if (v8 == (uint64_t *)va)
  {
    (*(void (**)(void))(v4 + 32))();
    _Unwind_Resume(a1);
  }
  if (!v8)
    _Unwind_Resume(a1);
  (*(void (**)(void))(*v8 + 40))();
  _Unwind_Resume(a1);
}

_QWORD *sub_223C9DBC8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = (std::__shared_weak_count *)a1[37];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[30];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[30];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[23];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[16];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[16];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[9];
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v17 = (std::__shared_weak_count *)a1[2];
      if (v17)
        goto LABEL_26;
      return a1;
    }
  }
  v17 = (std::__shared_weak_count *)a1[2];
  if (!v17)
    return a1;
LABEL_26:
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_223C9DD6C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223C9DFEC(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_223C9DFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_223C9DFEC(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_22320F578();
  v3 = sub_2231A29BC();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

void sub_223C9E064(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 32)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223C9E368(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  v16 = v15 | (4 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 4;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_223C9E31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_223C9E368(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_223C73794();
  v3 = sub_2231A29BC();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

void sub_223C9E3E4()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223C9E3F8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC62EF0;
  return result;
}

void sub_223C9E41C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC62EF0;
}

uint64_t sub_223C9E434(uint64_t a1, __int16 *a2)
{
  unsigned int v12;

  _H0 = *a2;
  __asm { FCVT            S0, H0 }
  if (_S0 <= 0.00010002)
    return 15360;
  if (_S0 >= 0.010002)
    return 0;
  _S0 = (float)(sqrtf(_S0) + -0.010002) / -0.090027;
  __asm
  {
    FCVT            H0, S0
    FCVT            S0, H0
  }
  *(float *)&_S0 = _S0 + 1.0;
  __asm
  {
    FCVT            H0, S0
    FCVT            S2, H0
  }
  v12 = _S0;
  if (_S2 > 1.0)
    v12 = 15360;
  if (_S2 >= 0.0)
    return v12;
  else
    return 0;
}

uint64_t sub_223C9E4CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon5frame37FixLegacyKeyframeConfidenceConversionERNS_3kit5imgio11ImageSampleILj2EEEjE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon5frame37FixLegacyKeyframeConfidenceConversionERNS_3kit5imgio11ImageSampleILj2EEEjE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon5frame37FixLegacyKeyframeConfidenceConversionERNS_3kit5imgio11ImageSampleILj2EEEjE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon5frame37FixLegacyKeyframeConfidenceConversionERNS_3kit5imgio11ImageSampleILj2EEEjE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223C9E538()
{
  return &unk_24EC62F60;
}

_QWORD *sub_223C9E544(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_223C9E6D8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_22316DC48(a1);
}

void sub_223C9E6E8()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223C9E6FC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC62F80;
  return result;
}

void sub_223C9E720(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC62F80;
}

uint64_t sub_223C9E738(uint64_t a1, unsigned __int16 *a2)
{
  _H0 = *a2;
  __asm { FCVT            S0, H0 }
  if (_S0 > 0.010002)
    return *a2;
  else
    return 0;
}

uint64_t sub_223C9E75C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon5frame37FixLegacyKeyframeConfidenceConversionERNS_3kit5imgio11ImageSampleILj2EEEjE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon5frame37FixLegacyKeyframeConfidenceConversionERNS_3kit5imgio11ImageSampleILj2EEEjE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon5frame37FixLegacyKeyframeConfidenceConversionERNS_3kit5imgio11ImageSampleILj2EEEjE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon5frame37FixLegacyKeyframeConfidenceConversionERNS_3kit5imgio11ImageSampleILj2EEEjE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223C9E7C8()
{
  return &unk_24EC62FE0;
}

uint64_t sub_223C9E7D4(uint64_t result, _QWORD *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  BOOL v13;

  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)result = result + 8;
  v3 = (unsigned __int8 *)(a2 + 1);
  v4 = (unsigned __int8 *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v6 = (uint64_t **)result;
    do
    {
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 7);
      if (v7)
      {
        result = a3[8];
        v8 = v4 + 56;
        do
        {
          v9 = v7[25];
          v10 = *a3;
          if (v9 != v10)
            goto LABEL_23;
          v9 = v7[26];
          v10 = a3[1];
          if (v9 != v10)
            goto LABEL_23;
          v9 = v7[27];
          v10 = a3[2];
          if (v9 != v10)
            goto LABEL_23;
          v9 = v7[28];
          v10 = a3[3];
          if (v9 != v10)
            goto LABEL_23;
          v9 = v7[29];
          v10 = a3[4];
          if (v9 != v10)
            goto LABEL_23;
          v9 = v7[30];
          v10 = a3[5];
          if (v9 != v10)
            goto LABEL_23;
          v9 = v7[31];
          v10 = a3[6];
          if (v9 != v10)
            goto LABEL_23;
          v9 = v7[32];
          v10 = a3[7];
          if (v9 != v10)
            goto LABEL_23;
          v9 = v7[33];
          v10 = a3[8];
          if (v9 != (_DWORD)result)
            goto LABEL_23;
          v9 = v7[34];
          v10 = a3[9];
          if (v9 != v10)
            goto LABEL_23;
          v9 = v7[35];
          v10 = a3[10];
          if (v9 != v10)
            goto LABEL_23;
          v9 = v7[36];
          v10 = a3[11];
          if (v9 != v10)
            goto LABEL_23;
          v9 = v7[37];
          v10 = a3[12];
          if (v9 != v10)
            goto LABEL_23;
          v9 = v7[38];
          v10 = a3[13];
          if (v9 == v10 && (v9 = v7[39], v10 = a3[14], v9 == v10) && (v9 = v7[40], v10 = a3[15], v9 == v10))
          {
            v8 = v7;
          }
          else
          {
LABEL_23:
            if (v9 < v10)
              v7 += 8;
            else
              v8 = v7;
          }
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
        if (v8 != v4 + 56)
        {
          result = sub_22319835C(a3, v8 + 25);
          if (((char)result & 0x80000000) == 0)
            result = (uint64_t)sub_2231A9984(v6, v4 + 32, (_OWORD *)v4 + 2);
        }
      }
      v11 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(unsigned __int8 **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v4;
          v4 = v12;
        }
        while (!v13);
      }
      v4 = v12;
    }
    while (v12 != v3);
  }
  return result;
}

void sub_223C9EA14(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223198030(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_223C9EA2C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t **a3)
{
  unsigned __int8 *v3;
  uint64_t **v4;
  _OWORD *v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  _DWORD *v18;
  _DWORD *v19;
  char **v20;
  char *v21;
  char **v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  uint64_t v31;
  char *v32;
  BOOL v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _BYTE *v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t **v47;
  _QWORD **v49;
  _QWORD *v50[2];

  if (a1 != a2)
  {
    v3 = a1;
    v47 = a3 + 1;
    while (1)
    {
      v50[0] = 0;
      v50[1] = 0;
      v49 = v50;
      v4 = v47;
      v5 = v47;
      v6 = *v47;
      if (*v47)
        break;
LABEL_45:
      v13 = operator new(0x48uLL);
      v13[2] = *(_OWORD *)v3;
      *((_QWORD *)v13 + 8) = 0;
      *((_QWORD *)v13 + 7) = 0;
      *((_QWORD *)v13 + 6) = (char *)v13 + 56;
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = v5;
      *v4 = (uint64_t *)v13;
      v14 = (uint64_t *)**a3;
      v15 = (uint64_t *)v13;
      if (v14)
      {
        *a3 = v14;
        v15 = *v4;
      }
      sub_2231A9A8C(a3[1], v15);
      a3[2] = (uint64_t *)((char *)a3[2] + 1);
      sub_223198030((uint64_t)&v49, v50[0]);
      v5 = v13;
LABEL_49:
      v17 = (unsigned __int8 *)*((_QWORD *)v3 + 3);
      v16 = (unsigned __int8 *)*((_QWORD *)v3 + 4);
      v19 = (_DWORD *)*((_QWORD *)v3 + 6);
      v18 = (_DWORD *)*((_QWORD *)v3 + 7);
      if (v17 != v16 || v19 != v18)
      {
        v20 = (char **)v5 + 7;
        while (1)
        {
          v21 = *v20;
          v22 = (char **)v5 + 7;
          v23 = (char *)v5 + 56;
          if (*v20)
            break;
LABEL_89:
          v30 = (char *)operator new(0x30uLL);
          *(_OWORD *)(v30 + 28) = *(_OWORD *)v17;
          *((_DWORD *)v30 + 11) = *v19;
          *(_QWORD *)v30 = 0;
          *((_QWORD *)v30 + 1) = 0;
          *((_QWORD *)v30 + 2) = v23;
          *v22 = v30;
          v31 = **((_QWORD **)v5 + 6);
          if (v31)
          {
            *((_QWORD *)v5 + 6) = v31;
            v30 = *v22;
          }
          v32 = *v20;
          v33 = v30 == *v20;
          v30[24] = v33;
          if (!v33)
          {
            do
            {
              v34 = *((_QWORD *)v30 + 2);
              if (*(_BYTE *)(v34 + 24))
                break;
              v35 = *(char **)(v34 + 16);
              v36 = *(_QWORD *)v35;
              if (*(_QWORD *)v35 == v34)
              {
                v39 = *((_QWORD *)v35 + 1);
                if (!v39 || (v40 = *(unsigned __int8 *)(v39 + 24), v37 = (_BYTE *)(v39 + 24), v40))
                {
                  if (*(char **)v34 == v30)
                  {
                    *(_BYTE *)(v34 + 24) = 1;
                    v35[24] = 0;
                    v43 = *(_QWORD *)(v34 + 8);
                    *(_QWORD *)v35 = v43;
                    if (v43)
                      goto LABEL_106;
                  }
                  else
                  {
                    v41 = *(uint64_t **)(v34 + 8);
                    v42 = *v41;
                    *(_QWORD *)(v34 + 8) = *v41;
                    if (v42)
                    {
                      *(_QWORD *)(v42 + 16) = v34;
                      v35 = *(char **)(v34 + 16);
                    }
                    v41[2] = (uint64_t)v35;
                    *(_QWORD *)(*(_QWORD *)(v34 + 16) + 8 * (**(_QWORD **)(v34 + 16) != v34)) = v41;
                    *v41 = v34;
                    *(_QWORD *)(v34 + 16) = v41;
                    v35 = (char *)v41[2];
                    v34 = *(_QWORD *)v35;
                    *((_BYTE *)v41 + 24) = 1;
                    v35[24] = 0;
                    v43 = *(_QWORD *)(v34 + 8);
                    *(_QWORD *)v35 = v43;
                    if (v43)
LABEL_106:
                      *(_QWORD *)(v43 + 16) = v35;
                  }
                  *(_QWORD *)(v34 + 16) = *((_QWORD *)v35 + 2);
                  *(_QWORD *)(*((_QWORD *)v35 + 2) + 8 * (**((_QWORD **)v35 + 2) != (_QWORD)v35)) = v34;
                  *(_QWORD *)(v34 + 8) = v35;
LABEL_112:
                  *((_QWORD *)v35 + 2) = v34;
                  break;
                }
              }
              else if (!v36 || (v38 = *(unsigned __int8 *)(v36 + 24), v37 = (_BYTE *)(v36 + 24), v38))
              {
                if (*(char **)v34 == v30)
                {
                  v45 = *((_QWORD *)v30 + 1);
                  *(_QWORD *)v34 = v45;
                  if (v45)
                  {
                    *(_QWORD *)(v45 + 16) = v34;
                    v35 = *(char **)(v34 + 16);
                  }
                  *((_QWORD *)v30 + 2) = v35;
                  *(_QWORD *)(*(_QWORD *)(v34 + 16) + 8 * (**(_QWORD **)(v34 + 16) != v34)) = v30;
                  *((_QWORD *)v30 + 1) = v34;
                  *(_QWORD *)(v34 + 16) = v30;
                  v35 = (char *)*((_QWORD *)v30 + 2);
                  v30[24] = 1;
                  v35[24] = 0;
                  v34 = *((_QWORD *)v35 + 1);
                  v44 = *(char **)v34;
                  *((_QWORD *)v35 + 1) = *(_QWORD *)v34;
                  if (v44)
LABEL_110:
                    *((_QWORD *)v44 + 2) = v35;
                }
                else
                {
                  *(_BYTE *)(v34 + 24) = 1;
                  v35[24] = 0;
                  v34 = *((_QWORD *)v35 + 1);
                  v44 = *(char **)v34;
                  *((_QWORD *)v35 + 1) = *(_QWORD *)v34;
                  if (v44)
                    goto LABEL_110;
                }
                *(_QWORD *)(v34 + 16) = *((_QWORD *)v35 + 2);
                *(_QWORD *)(*((_QWORD *)v35 + 2) + 8 * (**((_QWORD **)v35 + 2) != (_QWORD)v35)) = v34;
                *(_QWORD *)v34 = v35;
                goto LABEL_112;
              }
              *(_BYTE *)(v34 + 24) = 1;
              v30 = v35;
              v35[24] = v35 == v32;
              *v37 = 1;
            }
            while (v35 != v32);
          }
          ++*((_QWORD *)v5 + 8);
LABEL_114:
          v17 += 16;
          ++v19;
          if (v17 == v16 && v19 == v18)
            goto LABEL_3;
        }
        v24 = *v17;
        while (2)
        {
          while (2)
          {
            v23 = v21;
            v25 = v21[28];
            v26 = v24 >= v25;
            if (v24 == v25)
            {
              v27 = v17[1];
              v25 = v23[29];
              v26 = v27 >= v25;
              if (v27 == v25)
              {
                v27 = v17[2];
                v25 = v23[30];
                v26 = v27 >= v25;
                if (v27 == v25)
                {
                  v27 = v17[3];
                  v25 = v23[31];
                  v26 = v27 >= v25;
                  if (v27 == v25)
                  {
                    v27 = v17[4];
                    v25 = v23[32];
                    v26 = v27 >= v25;
                    if (v27 == v25)
                    {
                      v27 = v17[5];
                      v25 = v23[33];
                      v26 = v27 >= v25;
                      if (v27 == v25)
                      {
                        v28 = v17[6];
                        v29 = v23[34];
                        if (v28 != v29)
                          goto LABEL_71;
                        v28 = v17[7];
                        v29 = v23[35];
                        if (v28 != v29)
                          goto LABEL_71;
                        v28 = v17[8];
                        v29 = v23[36];
                        if (v28 != v29)
                          goto LABEL_71;
                        v28 = v17[9];
                        v29 = v23[37];
                        if (v28 != v29)
                          goto LABEL_71;
                        v28 = v17[10];
                        v29 = v23[38];
                        if (v28 != v29)
                          goto LABEL_71;
                        v28 = v17[11];
                        v29 = v23[39];
                        if (v28 != v29)
                          goto LABEL_71;
                        v28 = v17[12];
                        v29 = v23[40];
                        if (v28 != v29
                          || (v28 = v17[13], v29 = v23[41], v28 != v29)
                          || (v28 = v17[14], v29 = v23[42], v28 != v29)
                          || (v28 = v17[15], v29 = v23[43], v28 != v29))
                        {
LABEL_71:
                          if (v28 < v29)
                          {
LABEL_54:
                            v21 = *(char **)v23;
                            v22 = (char **)v23;
                            if (!*(_QWORD *)v23)
                              goto LABEL_89;
                            continue;
                          }
                        }
                        v25 = v23[34];
                        v27 = v17[6];
                        if (v25 == v27)
                        {
                          v25 = v23[35];
                          v27 = v17[7];
                          if (v25 == v27)
                          {
                            v25 = v23[36];
                            v27 = v17[8];
                            if (v25 == v27)
                            {
                              v25 = v23[37];
                              v27 = v17[9];
                              if (v25 == v27)
                              {
                                v25 = v23[38];
                                v27 = v17[10];
                                if (v25 == v27)
                                {
                                  v25 = v23[39];
                                  v27 = v17[11];
                                  if (v25 == v27)
                                  {
                                    v25 = v23[40];
                                    v27 = v17[12];
                                    if (v25 == v27)
                                    {
                                      v25 = v23[41];
                                      v27 = v17[13];
                                      if (v25 == v27)
                                      {
                                        v25 = v23[42];
                                        v27 = v17[14];
                                        if (v25 == v27)
                                        {
                                          v25 = v23[43];
                                          v27 = v17[15];
                                          if (v25 == v27)
                                            goto LABEL_114;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        goto LABEL_86;
                      }
                    }
                  }
                }
              }
            }
            else
            {
              v27 = *v17;
            }
            break;
          }
          if (!v26)
            goto LABEL_54;
LABEL_86:
          if (v25 >= v27)
            goto LABEL_114;
          v21 = (char *)*((_QWORD *)v23 + 1);
          if (!v21)
          {
            v22 = (char **)(v23 + 8);
            goto LABEL_89;
          }
          continue;
        }
      }
LABEL_3:
      v3 += 360;
      if (v3 == a2)
        return;
    }
    v7 = *v3;
    while (1)
    {
      while (1)
      {
        v5 = v6;
        v8 = *((unsigned __int8 *)v6 + 32);
        v9 = v7 >= v8;
        if (v7 == v8)
          break;
        v10 = *v3;
LABEL_40:
        if (v9)
          goto LABEL_42;
LABEL_6:
        v6 = *(uint64_t **)v5;
        v4 = (uint64_t **)v5;
        if (!*(_QWORD *)v5)
          goto LABEL_45;
      }
      v10 = v3[1];
      v8 = *((unsigned __int8 *)v5 + 33);
      v9 = v10 >= v8;
      if (v10 != v8)
        goto LABEL_40;
      v11 = v3[2];
      v12 = *((unsigned __int8 *)v5 + 34);
      if (v11 != v12)
        goto LABEL_23;
      v11 = v3[3];
      v12 = *((unsigned __int8 *)v5 + 35);
      if (v11 != v12)
        goto LABEL_23;
      v11 = v3[4];
      v12 = *((unsigned __int8 *)v5 + 36);
      if (v11 != v12)
        goto LABEL_23;
      v11 = v3[5];
      v12 = *((unsigned __int8 *)v5 + 37);
      if (v11 != v12)
        goto LABEL_23;
      v11 = v3[6];
      v12 = *((unsigned __int8 *)v5 + 38);
      if (v11 != v12)
        goto LABEL_23;
      v11 = v3[7];
      v12 = *((unsigned __int8 *)v5 + 39);
      if (v11 != v12)
        goto LABEL_23;
      v11 = v3[8];
      v12 = *((unsigned __int8 *)v5 + 40);
      if (v11 != v12)
        goto LABEL_23;
      v11 = v3[9];
      v12 = *((unsigned __int8 *)v5 + 41);
      if (v11 != v12)
        goto LABEL_23;
      v11 = v3[10];
      v12 = *((unsigned __int8 *)v5 + 42);
      if (v11 != v12)
        goto LABEL_23;
      v11 = v3[11];
      v12 = *((unsigned __int8 *)v5 + 43);
      if (v11 != v12)
        goto LABEL_23;
      v11 = v3[12];
      v12 = *((unsigned __int8 *)v5 + 44);
      if (v11 != v12
        || (v11 = v3[13], v12 = *((unsigned __int8 *)v5 + 45), v11 != v12)
        || (v11 = v3[14], v12 = *((unsigned __int8 *)v5 + 46), v11 != v12)
        || (v11 = v3[15], v12 = *((unsigned __int8 *)v5 + 47), v11 != v12))
      {
LABEL_23:
        if (v11 < v12)
          goto LABEL_6;
      }
      v8 = *((unsigned __int8 *)v5 + 34);
      v10 = v3[2];
      if (v8 == v10)
      {
        v8 = *((unsigned __int8 *)v5 + 35);
        v10 = v3[3];
        if (v8 == v10)
        {
          v8 = *((unsigned __int8 *)v5 + 36);
          v10 = v3[4];
          if (v8 == v10)
          {
            v8 = *((unsigned __int8 *)v5 + 37);
            v10 = v3[5];
            if (v8 == v10)
            {
              v8 = *((unsigned __int8 *)v5 + 38);
              v10 = v3[6];
              if (v8 == v10)
              {
                v8 = *((unsigned __int8 *)v5 + 39);
                v10 = v3[7];
                if (v8 == v10)
                {
                  v8 = *((unsigned __int8 *)v5 + 40);
                  v10 = v3[8];
                  if (v8 == v10)
                  {
                    v8 = *((unsigned __int8 *)v5 + 41);
                    v10 = v3[9];
                    if (v8 == v10)
                    {
                      v8 = *((unsigned __int8 *)v5 + 42);
                      v10 = v3[10];
                      if (v8 == v10)
                      {
                        v8 = *((unsigned __int8 *)v5 + 43);
                        v10 = v3[11];
                        if (v8 == v10)
                        {
                          v8 = *((unsigned __int8 *)v5 + 44);
                          v10 = v3[12];
                          if (v8 == v10)
                          {
                            v8 = *((unsigned __int8 *)v5 + 45);
                            v10 = v3[13];
                            if (v8 == v10)
                            {
                              v8 = *((unsigned __int8 *)v5 + 46);
                              v10 = v3[14];
                              if (v8 == v10)
                              {
                                v8 = *((unsigned __int8 *)v5 + 47);
                                v10 = v3[15];
                                if (v8 == v10)
                                {
LABEL_48:
                                  sub_223198030((uint64_t)&v49, 0);
                                  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyframeClusterProvider.cpp", 84, (uint64_t)"ret && \"emplace failed\"", 23, (uint64_t)&unk_2245A645F, 0, (void (*)(void **))sub_22457406C))
                                  {
                                    abort();
                                  }
                                  goto LABEL_49;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_42:
      if (v8 >= v10)
        goto LABEL_48;
      v6 = (uint64_t *)*((_QWORD *)v5 + 1);
      if (!v6)
      {
        v4 = (uint64_t **)v5 + 1;
        goto LABEL_45;
      }
    }
  }
}

void sub_223C9F1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_223198030((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_223C9F1D8(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, unsigned __int8 **a3@<X2>, int32x4_t *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  char **v10;
  int32x4_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int8x16_t v14;
  float32x2_t v15;
  float32x2_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  uint64_t **v21;
  uint64_t **v22;
  unsigned int v23;
  uint64_t *v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t *v33;
  unsigned __int8 *v34;
  uint64_t *v35;
  uint64_t **v36;
  uint64_t **v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  _OWORD *v44;
  uint64_t *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  _QWORD **v57;
  _QWORD **v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  _QWORD *v62;
  unsigned int v63;
  _QWORD **v64;
  BOOL v65;
  int v66;
  _QWORD *v67;
  _QWORD **v68;
  unsigned int v69;
  unsigned int v70;
  _QWORD **v71;
  unsigned int v72;
  _QWORD **v73;
  _QWORD **v74;
  _QWORD **v75;
  _QWORD **v76;
  _QWORD **v77;
  _QWORD **v78;
  _QWORD **v79;
  _QWORD **v80;
  _QWORD **v81;
  _QWORD **v82;
  _QWORD **v83;
  _QWORD **v84;
  _QWORD **v85;
  _QWORD **v86;
  char *v87;
  char **v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  BOOL v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  char *v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  char *v100;
  BOOL v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  _BYTE *v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  void **v113;
  char **v114;
  char **v115;
  char *v116;
  unsigned int v117;
  unsigned int v118;
  BOOL v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  _BYTE *v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  _QWORD *v137;
  _QWORD **v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  unsigned int v142;
  _QWORD **v143;
  BOOL v144;
  int v145;
  _QWORD *v146;
  _QWORD **v147;
  unsigned int v148;
  unsigned int v149;
  _QWORD **v150;
  unsigned int v151;
  _QWORD **v152;
  _QWORD **v153;
  _QWORD **v154;
  _QWORD **v155;
  _QWORD **v156;
  _QWORD **v157;
  _QWORD **v158;
  _QWORD **v159;
  _QWORD **v160;
  _QWORD **v161;
  _QWORD **v162;
  _QWORD **v163;
  _QWORD **v164;
  _QWORD **v165;
  float *v166;
  unsigned __int8 *v167;
  unsigned int v168;
  unsigned int v169;
  BOOL v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  uint64_t v174;
  char *v175;
  char **v176;
  unsigned int v177;
  unsigned int v178;
  BOOL v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  char *v183;
  char *v184;
  _QWORD *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  _BYTE *v191;
  int v192;
  uint64_t v193;
  int v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  void **v199;
  char **v200;
  char **v201;
  char *v202;
  unsigned int v203;
  unsigned int v204;
  BOOL v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  char *v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  _BYTE *v215;
  int v216;
  uint64_t v217;
  int v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t *v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  unsigned __int8 *v227;
  _QWORD *v228;
  unsigned __int8 *v229;
  _QWORD *v230;
  uint64_t v231;
  unsigned __int8 *v232;
  unsigned __int8 *v233;
  unsigned int v234;
  unsigned int v235;
  unsigned __int8 *v236;
  unsigned __int8 *v237;
  unsigned __int8 *v238;
  uint64_t v239;
  unsigned __int8 *v240;
  uint64_t v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  int v246;
  char **v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  char *v254;
  char *v255;
  char *v256;
  _QWORD *v257;
  char *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  _BYTE *v262;
  int v263;
  uint64_t v264;
  int v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  void **v270;
  char **v271;
  char **v272;
  char *v273;
  unsigned int v274;
  unsigned int v275;
  BOOL v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  char *v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  _BYTE *v286;
  int v287;
  uint64_t v288;
  int v289;
  uint64_t *v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  uint64_t *v294;
  uint64_t **v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  int v302;
  char **v303;
  uint64_t v304;
  char *v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  char *v310;
  char *v311;
  char *v312;
  _QWORD *v313;
  char *v314;
  uint64_t v315;
  char *v316;
  uint64_t v317;
  _BYTE *v318;
  int v319;
  uint64_t v320;
  int v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t v324;
  char *v325;
  void **v326;
  char **v327;
  char **v328;
  char *v329;
  unsigned int v330;
  unsigned int v331;
  BOOL v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int v335;
  char *v336;
  uint64_t v337;
  char *v338;
  uint64_t v339;
  char *v340;
  uint64_t v341;
  _BYTE *v342;
  int v343;
  uint64_t v344;
  int v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  uint64_t *v350;
  uint64_t **v351;
  uint64_t v352;
  uint64_t v353;
  unsigned __int8 *v354;
  unsigned __int8 *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  char **v359;
  uint64_t v360;
  char **v361;
  char *v362;
  char *v363;
  char **v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  _QWORD *v368;
  _QWORD *v369;
  _QWORD *v370;
  _QWORD *v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  char *v375;
  char **v376;
  unint64_t v377;
  uint64_t v378;
  _QWORD *v379;
  _QWORD *v380;
  _QWORD *v381;
  unsigned __int8 **v382;
  unsigned __int8 *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  _QWORD **v389;
  int v390;
  int v391;
  int v392;
  int v393;
  unsigned __int8 **v394;
  int v395;
  int v396;
  int v397;
  int v398;
  uint64_t **v399;
  int v400;
  int v401;
  int32x4_t v402;
  float32x2_t v403;
  int v404;
  int v405;
  int32x4_t v406;
  float32x2_t v407;
  int v408;
  int v409;
  int8x16_t v410;
  float32x4_t v411;
  int v412;
  int v413;
  int32x4_t v414;
  float32x2_t v415;
  char **v416;
  float32x2_t v417;
  _OWORD *v418;
  int v419;
  int v420;
  int32x4_t v421;
  float32x2_t v422;
  _QWORD **v423;
  float32x4_t v424;
  float32x2_t v425;
  uint64_t *v426;
  int v427;
  int v428;
  char **v429;
  float32x2_t v431;
  float32x2_t v432;
  unsigned __int8 *v433;
  int v434;
  int v435;
  uint64_t *v436;
  unsigned __int8 *v437;
  uint64_t v438;
  _QWORD **v439;
  _QWORD *v440;
  uint64_t v441;
  _QWORD **v442;
  _QWORD *v443;
  uint64_t v444;
  uint64_t **v445;
  uint64_t *v446;
  _QWORD *v447;
  uint64_t **v448;
  uint64_t *v449;
  uint64_t v450;

  kdebug_trace();
  v394 = a2;
  if (!a5
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/KeyframeClusterProvider.cpp", 101, (uint64_t)"room_boundary_result.has_value()", 32, (uint64_t)&unk_2245A645F, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 24) = a6 + 32;
  v399 = (uint64_t **)(a6 + 24);
  *(_QWORD *)a6 = a6 + 8;
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a6 + 56) = 0;
  v10 = (char **)(a6 + 56);
  *(_QWORD *)(a6 + 48) = a6 + 56;
  v423 = (_QWORD **)(a6 + 48);
  *(_QWORD *)(a6 + 64) = 0;
  *(_QWORD *)(a6 + 80) = 0;
  v429 = (char **)(a6 + 80);
  *(_QWORD *)(a6 + 72) = a6 + 80;
  v389 = (_QWORD **)(a6 + 72);
  *(_QWORD *)(a6 + 104) = 0;
  *(_QWORD *)(a6 + 88) = 0;
  *(_QWORD *)(a6 + 96) = a6 + 104;
  *(_QWORD *)(a6 + 112) = 0;
  v11 = a4[7];
  *(_BYTE *)(a6 + 136) = a4[8].i8[0];
  *(int32x4_t *)(a6 + 120) = v11;
  v437 = 0;
  v438 = 0;
  v11.i64[0] = a4[3].i64[0];
  v421 = v11;
  v11.i32[2] = a4[3].i32[2];
  v406 = v11;
  v436 = (uint64_t *)&v437;
  v11.i64[0] = a4[4].i64[0];
  v414 = v11;
  v11.i32[2] = a4[4].i32[2];
  v402 = v11;
  v11.i32[0] = a4[5].i32[2];
  v431 = *(float32x2_t *)v11.i8;
  v11.i64[0] = a4[5].i64[0];
  v410 = (int8x16_t)v11;
  v11.i64[0] = a4[6].i64[0];
  v11.i32[2] = a4[6].i32[2];
  v424 = (float32x4_t)v11;
  sub_223475E64((uint64_t)&v436, 0);
  v437 = 0;
  v438 = 0;
  v436 = (uint64_t *)&v437;
  v449 = 0;
  v450 = 0;
  v448 = &v449;
  v12 = *a3;
  v13 = a3[1];
  v382 = a3;
  if (*a3 != v13)
  {
    v14 = v410;
    v14.i32[2] = v431.i32[0];
    v417 = (float32x2_t)vzip1q_s32(v421, v414).u64[0];
    v15 = (float32x2_t)vtrn2q_s32(v406, v402).u64[0];
    v16 = (float32x2_t)vzip2q_s32(v406, v402).u64[0];
    v17 = (int8x16_t)vnegq_f32(v424);
    *(float32x2_t *)v18.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v421.i8, *(int32x2_t *)v414.i8), *(float *)v17.i32), v15, *(float32x2_t *)v424.f32, 1), v16, v424, 2);
    *(float32x2_t *)&v18.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v410.i8, *(float32x2_t *)v17.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v410.i8, 1), *(float32x2_t *)v424.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), v431);
    v411 = v18;
    v415 = v16;
    v19 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1);
    v422 = *(float32x2_t *)v14.i8;
    v403 = (float32x2_t)vextq_s8(v14, v14, 8uLL).u64[0];
    v407 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v15, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v15, 1), 0xCuLL).u64[0];
    while (1)
    {
      v20 = *(float32x2_t *)(v12 + 80);
      v425 = v20;
      v20.i32[0] = *((_DWORD *)v12 + 22);
      v432 = v20;
      v21 = &v449;
      v22 = &v449;
      if (v449)
        break;
LABEL_44:
      v30 = (char *)operator new(0x38uLL);
      *(float32x2_t *)v31.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v417, v425.f32[0]), v407, v425, 1), v415, v432.f32[0]);
      *(float32x2_t *)&v31.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v422, v425), v19, v425, 1), v432, v403);
      v32 = vaddq_f32(v31, v411);
      *(_OWORD *)(v30 + 28) = *(_OWORD *)v12;
      *((_DWORD *)v30 + 13) = v32.i32[2];
      *(_QWORD *)(v30 + 44) = v32.i64[0];
      *(_QWORD *)v30 = 0;
      *((_QWORD *)v30 + 1) = 0;
      *((_QWORD *)v30 + 2) = v22;
      *v21 = (uint64_t *)v30;
      if (*v448)
      {
        v448 = (uint64_t **)*v448;
        v30 = (char *)*v21;
      }
      sub_2231A9A8C(v449, (uint64_t *)v30);
      ++v450;
LABEL_6:
      v12 += 248;
      if (v12 == v13)
        goto LABEL_46;
    }
    v23 = *v12;
    v24 = v449;
    while (1)
    {
      v22 = (uint64_t **)v24;
      v25 = *((unsigned __int8 *)v24 + 28);
      v26 = v23 >= v25;
      if (v23 != v25)
        break;
      v27 = v12[1];
      v25 = *((unsigned __int8 *)v22 + 29);
      v26 = v27 >= v25;
      if (v27 != v25)
        goto LABEL_39;
      v27 = v12[2];
      v25 = *((unsigned __int8 *)v22 + 30);
      v26 = v27 >= v25;
      if (v27 != v25)
        goto LABEL_39;
      v27 = v12[3];
      v25 = *((unsigned __int8 *)v22 + 31);
      v26 = v27 >= v25;
      if (v27 != v25)
        goto LABEL_39;
      v27 = v12[4];
      v25 = *((unsigned __int8 *)v22 + 32);
      v26 = v27 >= v25;
      if (v27 == v25 && (v27 = v12[5], v25 = *((unsigned __int8 *)v22 + 33), v26 = v27 >= v25, v27 == v25))
      {
        v28 = v12[6];
        v29 = *((unsigned __int8 *)v22 + 34);
        if (v28 == v29)
        {
          v28 = v12[7];
          v29 = *((unsigned __int8 *)v22 + 35);
          if (v28 == v29)
          {
            v28 = v12[8];
            v29 = *((unsigned __int8 *)v22 + 36);
            if (v28 == v29)
            {
              v28 = v12[9];
              v29 = *((unsigned __int8 *)v22 + 37);
              if (v28 == v29)
              {
                v28 = v12[10];
                v29 = *((unsigned __int8 *)v22 + 38);
                if (v28 == v29)
                {
                  v28 = v12[11];
                  v29 = *((unsigned __int8 *)v22 + 39);
                  if (v28 == v29)
                  {
                    v28 = v12[12];
                    v29 = *((unsigned __int8 *)v22 + 40);
                    if (v28 == v29)
                    {
                      v28 = v12[13];
                      v29 = *((unsigned __int8 *)v22 + 41);
                      if (v28 == v29)
                      {
                        v28 = v12[14];
                        v29 = *((unsigned __int8 *)v22 + 42);
                        if (v28 == v29)
                        {
                          v28 = v12[15];
                          v29 = *((unsigned __int8 *)v22 + 43);
                          if (v28 == v29)
                            goto LABEL_27;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v28 >= v29)
        {
LABEL_27:
          v25 = *((unsigned __int8 *)v22 + 34);
          v27 = v12[6];
          if (v25 == v27)
          {
            v25 = *((unsigned __int8 *)v22 + 35);
            v27 = v12[7];
            if (v25 == v27)
            {
              v25 = *((unsigned __int8 *)v22 + 36);
              v27 = v12[8];
              if (v25 == v27)
              {
                v25 = *((unsigned __int8 *)v22 + 37);
                v27 = v12[9];
                if (v25 == v27)
                {
                  v25 = *((unsigned __int8 *)v22 + 38);
                  v27 = v12[10];
                  if (v25 == v27)
                  {
                    v25 = *((unsigned __int8 *)v22 + 39);
                    v27 = v12[11];
                    if (v25 == v27)
                    {
                      v25 = *((unsigned __int8 *)v22 + 40);
                      v27 = v12[12];
                      if (v25 == v27)
                      {
                        v25 = *((unsigned __int8 *)v22 + 41);
                        v27 = v12[13];
                        if (v25 == v27)
                        {
                          v25 = *((unsigned __int8 *)v22 + 42);
                          v27 = v12[14];
                          if (v25 == v27)
                          {
                            v25 = *((unsigned __int8 *)v22 + 43);
                            v27 = v12[15];
                            if (v25 == v27)
                              goto LABEL_6;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          goto LABEL_41;
        }
LABEL_9:
        v24 = *v22;
        v21 = v22;
        if (!*v22)
          goto LABEL_44;
      }
      else
      {
LABEL_39:
        if (!v26)
          goto LABEL_9;
LABEL_41:
        if (v25 >= v27)
          goto LABEL_6;
        v24 = v22[1];
        if (!v24)
        {
          v21 = v22 + 1;
          goto LABEL_44;
        }
      }
    }
    v27 = *v12;
    goto LABEL_39;
  }
LABEL_46:
  LOBYTE(v439) = 0;
  v445 = &v436;
  v446 = (uint64_t *)&v448;
  v447 = &v439;
  sub_223CA3098((uint64_t)&v442, a4->i64[0], a4->i64[1], (uint64_t)&v445);
  v416 = (char **)(a6 + 56);
  sub_223CA3098((uint64_t)&v442, a4[1].i64[1], a4[2].i64[0], (uint64_t)&v445);
  sub_2233FADDC(v449);
  sub_223198030(a6, *(_QWORD **)(a6 + 8));
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)a6 = a6 + 8;
  sub_223198030((uint64_t)v399, *(_QWORD **)(a6 + 32));
  *(_QWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a6 + 24) = a6 + 32;
  sub_223475E64((uint64_t)v423, *(_QWORD **)(a6 + 56));
  *(_QWORD *)(a6 + 56) = 0;
  *(_QWORD *)(a6 + 64) = 0;
  *(_QWORD *)(a6 + 48) = v10;
  sub_223475E64((uint64_t)v389, *(_QWORD **)(a6 + 80));
  *(_QWORD *)(a6 + 80) = 0;
  *(_QWORD *)(a6 + 88) = 0;
  *(_QWORD *)(a6 + 72) = v429;
  v446 = 0;
  v447 = 0;
  v445 = &v446;
  sub_223C9EA2C((unsigned __int8 *)a4->i64[0], (unsigned __int8 *)a4->i64[1], (uint64_t **)&v445);
  sub_223C9EA2C((unsigned __int8 *)a4[1].i64[1], (unsigned __int8 *)a4[2].i64[0], (uint64_t **)&v445);
  v33 = v436;
  if (v436 != (uint64_t *)&v437)
  {
    v34 = (unsigned __int8 *)(a1 + 16);
    do
    {
      v433 = (unsigned __int8 *)(v33 + 4);
      v35 = v446;
      v36 = &v446;
      v37 = &v446;
      if (!v446)
        goto LABEL_86;
      v38 = *((unsigned __int8 *)v33 + 32);
      do
      {
        while (1)
        {
          v36 = (uint64_t **)v35;
          v39 = *((unsigned __int8 *)v35 + 32);
          v40 = v38 >= v39;
          if (v38 != v39)
          {
            v41 = *((unsigned __int8 *)v33 + 32);
            goto LABEL_81;
          }
          v41 = *((unsigned __int8 *)v33 + 33);
          v39 = *((unsigned __int8 *)v36 + 33);
          v40 = v41 >= v39;
          if (v41 == v39)
          {
            v41 = *((unsigned __int8 *)v33 + 34);
            v39 = *((unsigned __int8 *)v36 + 34);
            v40 = v41 >= v39;
            if (v41 == v39)
            {
              v41 = *((unsigned __int8 *)v33 + 35);
              v39 = *((unsigned __int8 *)v36 + 35);
              v40 = v41 >= v39;
              if (v41 == v39)
              {
                v41 = *((unsigned __int8 *)v33 + 36);
                v39 = *((unsigned __int8 *)v36 + 36);
                v40 = v41 >= v39;
                if (v41 == v39)
                {
                  v41 = *((unsigned __int8 *)v33 + 37);
                  v39 = *((unsigned __int8 *)v36 + 37);
                  v40 = v41 >= v39;
                  if (v41 == v39)
                    break;
                }
              }
            }
          }
LABEL_81:
          if (v40)
            goto LABEL_83;
LABEL_51:
          v35 = *v36;
          v37 = v36;
          if (!*v36)
            goto LABEL_86;
        }
        v42 = *((unsigned __int8 *)v33 + 38);
        v43 = *((unsigned __int8 *)v36 + 38);
        if (v42 != v43)
          goto LABEL_68;
        v42 = *((unsigned __int8 *)v33 + 39);
        v43 = *((unsigned __int8 *)v36 + 39);
        if (v42 != v43)
          goto LABEL_68;
        v42 = *((unsigned __int8 *)v33 + 40);
        v43 = *((unsigned __int8 *)v36 + 40);
        if (v42 != v43)
          goto LABEL_68;
        v42 = *((unsigned __int8 *)v33 + 41);
        v43 = *((unsigned __int8 *)v36 + 41);
        if (v42 != v43)
          goto LABEL_68;
        v42 = *((unsigned __int8 *)v33 + 42);
        v43 = *((unsigned __int8 *)v36 + 42);
        if (v42 != v43)
          goto LABEL_68;
        v42 = *((unsigned __int8 *)v33 + 43);
        v43 = *((unsigned __int8 *)v36 + 43);
        if (v42 != v43)
          goto LABEL_68;
        v42 = *((unsigned __int8 *)v33 + 44);
        v43 = *((unsigned __int8 *)v36 + 44);
        if (v42 != v43
          || (v42 = *((unsigned __int8 *)v33 + 45), v43 = *((unsigned __int8 *)v36 + 45), v42 != v43)
          || (v42 = *((unsigned __int8 *)v33 + 46), v43 = *((unsigned __int8 *)v36 + 46), v42 != v43)
          || (v42 = *((unsigned __int8 *)v33 + 47), v43 = *((unsigned __int8 *)v36 + 47), v42 != v43))
        {
LABEL_68:
          if (v42 < v43)
            goto LABEL_51;
        }
        v39 = *((unsigned __int8 *)v36 + 38);
        v41 = *((unsigned __int8 *)v33 + 38);
        if (v39 == v41)
        {
          v39 = *((unsigned __int8 *)v36 + 39);
          v41 = *((unsigned __int8 *)v33 + 39);
          if (v39 == v41)
          {
            v39 = *((unsigned __int8 *)v36 + 40);
            v41 = *((unsigned __int8 *)v33 + 40);
            if (v39 == v41)
            {
              v39 = *((unsigned __int8 *)v36 + 41);
              v41 = *((unsigned __int8 *)v33 + 41);
              if (v39 == v41)
              {
                v39 = *((unsigned __int8 *)v36 + 42);
                v41 = *((unsigned __int8 *)v33 + 42);
                if (v39 == v41)
                {
                  v39 = *((unsigned __int8 *)v36 + 43);
                  v41 = *((unsigned __int8 *)v33 + 43);
                  if (v39 == v41)
                  {
                    v39 = *((unsigned __int8 *)v36 + 44);
                    v41 = *((unsigned __int8 *)v33 + 44);
                    if (v39 == v41)
                    {
                      v39 = *((unsigned __int8 *)v36 + 45);
                      v41 = *((unsigned __int8 *)v33 + 45);
                      if (v39 == v41)
                      {
                        v39 = *((unsigned __int8 *)v36 + 46);
                        v41 = *((unsigned __int8 *)v33 + 46);
                        if (v39 == v41)
                        {
                          v39 = *((unsigned __int8 *)v36 + 47);
                          v41 = *((unsigned __int8 *)v33 + 47);
                          if (v39 == v41)
                          {
LABEL_90:
                            v44 = v36;
                            v46 = *(unsigned __int8 **)v34;
                            if (!*(_QWORD *)v34)
                              goto LABEL_152;
                            goto LABEL_91;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_83:
        if (v39 >= v41)
          goto LABEL_90;
        v35 = v36[1];
      }
      while (v35);
      v37 = v36 + 1;
LABEL_86:
      v44 = operator new(0x48uLL);
      v44[2] = *(_OWORD *)v433;
      *((_QWORD *)v44 + 8) = 0;
      *((_QWORD *)v44 + 7) = 0;
      *((_QWORD *)v44 + 6) = (char *)v44 + 56;
      *(_QWORD *)v44 = 0;
      *((_QWORD *)v44 + 1) = 0;
      *((_QWORD *)v44 + 2) = v36;
      *v37 = (uint64_t *)v44;
      v45 = (uint64_t *)v44;
      if (*v445)
      {
        v445 = (uint64_t **)*v445;
        v45 = *v37;
      }
      sub_2231A9A8C(v446, v45);
      v447 = (_QWORD *)((char *)v447 + 1);
      v46 = *(unsigned __int8 **)v34;
      if (!*(_QWORD *)v34)
      {
LABEL_152:
        sub_2231A9984((uint64_t **)a6, v433, v433);
        v443 = 0;
        v444 = 0;
        v442 = &v443;
        v440 = 0;
        v441 = 0;
        v57 = &v440;
        v439 = &v440;
        goto LABEL_154;
      }
LABEL_91:
      v47 = v34;
      do
      {
        v48 = v46[32];
        v49 = *((unsigned __int8 *)v33 + 32);
        if (v48 != v49)
          goto LABEL_109;
        v48 = v46[33];
        v49 = *((unsigned __int8 *)v33 + 33);
        if (v48 != v49)
          goto LABEL_109;
        v48 = v46[34];
        v49 = *((unsigned __int8 *)v33 + 34);
        if (v48 != v49)
          goto LABEL_109;
        v48 = v46[35];
        v49 = *((unsigned __int8 *)v33 + 35);
        if (v48 != v49)
          goto LABEL_109;
        v48 = v46[36];
        v49 = *((unsigned __int8 *)v33 + 36);
        if (v48 != v49)
          goto LABEL_109;
        v48 = v46[37];
        v49 = *((unsigned __int8 *)v33 + 37);
        if (v48 != v49)
          goto LABEL_109;
        v48 = v46[38];
        v49 = *((unsigned __int8 *)v33 + 38);
        if (v48 != v49)
          goto LABEL_109;
        v48 = v46[39];
        v49 = *((unsigned __int8 *)v33 + 39);
        if (v48 != v49)
          goto LABEL_109;
        v48 = v46[40];
        v49 = *((unsigned __int8 *)v33 + 40);
        if (v48 != v49)
          goto LABEL_109;
        v48 = v46[41];
        v49 = *((unsigned __int8 *)v33 + 41);
        if (v48 != v49)
          goto LABEL_109;
        v48 = v46[42];
        v49 = *((unsigned __int8 *)v33 + 42);
        if (v48 != v49)
          goto LABEL_109;
        v48 = v46[43];
        v49 = *((unsigned __int8 *)v33 + 43);
        if (v48 != v49)
          goto LABEL_109;
        v48 = v46[44];
        v49 = *((unsigned __int8 *)v33 + 44);
        if (v48 != v49)
          goto LABEL_109;
        v48 = v46[45];
        v49 = *((unsigned __int8 *)v33 + 45);
        if (v48 == v49
          && (v48 = v46[46], v49 = *((unsigned __int8 *)v33 + 46), v48 == v49)
          && (v48 = v46[47], v49 = *((unsigned __int8 *)v33 + 47), v48 == v49))
        {
          v47 = v46;
        }
        else
        {
LABEL_109:
          if (v48 < v49)
            v46 += 8;
          else
            v47 = v46;
        }
        v46 = *(unsigned __int8 **)v46;
      }
      while (v46);
      if (v47 == v34 || (char)sub_22319835C(v433, v47 + 32) < 0)
        goto LABEL_152;
      v443 = 0;
      v444 = 0;
      v442 = &v443;
      v50 = *(unsigned __int8 **)v34;
      if (!*(_QWORD *)v34)
LABEL_1071:
        sub_223198218("map::at:  key not found");
      v51 = *v433;
      while (2)
      {
        while (2)
        {
          v52 = v50[32];
          v53 = v51 >= v52;
          if (v51 != v52)
          {
            v54 = *v433;
LABEL_147:
            if (!v53)
              goto LABEL_117;
LABEL_149:
            if (v52 >= v54)
              goto LABEL_153;
            v50 = (unsigned __int8 *)*((_QWORD *)v50 + 1);
            if (!v50)
              goto LABEL_1071;
            continue;
          }
          break;
        }
        v54 = *((unsigned __int8 *)v33 + 33);
        v52 = v50[33];
        v53 = v54 >= v52;
        if (v54 != v52)
          goto LABEL_147;
        v54 = *((unsigned __int8 *)v33 + 34);
        v52 = v50[34];
        v53 = v54 >= v52;
        if (v54 != v52)
          goto LABEL_147;
        v54 = *((unsigned __int8 *)v33 + 35);
        v52 = v50[35];
        v53 = v54 >= v52;
        if (v54 != v52)
          goto LABEL_147;
        v54 = *((unsigned __int8 *)v33 + 36);
        v52 = v50[36];
        v53 = v54 >= v52;
        if (v54 != v52)
          goto LABEL_147;
        v54 = *((unsigned __int8 *)v33 + 37);
        v52 = v50[37];
        v53 = v54 >= v52;
        if (v54 != v52)
          goto LABEL_147;
        v55 = *((unsigned __int8 *)v33 + 38);
        v56 = v50[38];
        if (v55 != v56)
          goto LABEL_134;
        v55 = *((unsigned __int8 *)v33 + 39);
        v56 = v50[39];
        if (v55 != v56)
          goto LABEL_134;
        v55 = *((unsigned __int8 *)v33 + 40);
        v56 = v50[40];
        if (v55 != v56)
          goto LABEL_134;
        v55 = *((unsigned __int8 *)v33 + 41);
        v56 = v50[41];
        if (v55 != v56)
          goto LABEL_134;
        v55 = *((unsigned __int8 *)v33 + 42);
        v56 = v50[42];
        if (v55 != v56)
          goto LABEL_134;
        v55 = *((unsigned __int8 *)v33 + 43);
        v56 = v50[43];
        if (v55 != v56)
          goto LABEL_134;
        v55 = *((unsigned __int8 *)v33 + 44);
        v56 = v50[44];
        if (v55 != v56
          || (v55 = *((unsigned __int8 *)v33 + 45), v56 = v50[45], v55 != v56)
          || (v55 = *((unsigned __int8 *)v33 + 46), v56 = v50[46], v55 != v56)
          || (v55 = *((unsigned __int8 *)v33 + 47), v56 = v50[47], v55 != v56))
        {
LABEL_134:
          if (v55 < v56)
          {
LABEL_117:
            v50 = *(unsigned __int8 **)v50;
            if (!v50)
              goto LABEL_1071;
            continue;
          }
        }
        break;
      }
      v52 = v50[38];
      v54 = *((unsigned __int8 *)v33 + 38);
      if (v52 != v54)
        goto LABEL_149;
      v52 = v50[39];
      v54 = *((unsigned __int8 *)v33 + 39);
      if (v52 != v54)
        goto LABEL_149;
      v52 = v50[40];
      v54 = *((unsigned __int8 *)v33 + 40);
      if (v52 != v54)
        goto LABEL_149;
      v52 = v50[41];
      v54 = *((unsigned __int8 *)v33 + 41);
      if (v52 != v54)
        goto LABEL_149;
      v52 = v50[42];
      v54 = *((unsigned __int8 *)v33 + 42);
      if (v52 != v54)
        goto LABEL_149;
      v52 = v50[43];
      v54 = *((unsigned __int8 *)v33 + 43);
      if (v52 != v54)
        goto LABEL_149;
      v52 = v50[44];
      v54 = *((unsigned __int8 *)v33 + 44);
      if (v52 != v54)
        goto LABEL_149;
      v52 = v50[45];
      v54 = *((unsigned __int8 *)v33 + 45);
      if (v52 != v54)
        goto LABEL_149;
      v52 = v50[46];
      v54 = *((unsigned __int8 *)v33 + 46);
      if (v52 != v54)
        goto LABEL_149;
      v52 = v50[47];
      v54 = *((unsigned __int8 *)v33 + 47);
      if (v52 != v54)
        goto LABEL_149;
LABEL_153:
      v440 = 0;
      v441 = 0;
      v439 = &v440;
      sub_223475C18(&v439, *((unsigned __int8 **)v50 + 6), v50 + 56);
      v57 = v439;
LABEL_154:
      v418 = v44;
      v426 = v33 + 7;
      sub_22388A4A4((uint64_t)v57, (unsigned __int8 *)&v440, (unsigned __int8 *)v33[6], (unsigned __int8 *)v33 + 56, (unsigned __int8 *)&v442, (uint64_t *)&v443, (unsigned __int8 **)&v448);
      v58 = v439;
      if (v439 != &v440)
      {
LABEL_160:
        v62 = v443;
        if (v443)
        {
          v63 = *((unsigned __int8 *)v58 + 25);
          v64 = &v443;
          do
          {
            while (1)
            {
              v67 = v62;
              v68 = v64;
              v69 = *((unsigned __int8 *)v62 + 25);
              v70 = *((unsigned __int8 *)v58 + 25);
              if (v69 != v63)
                break;
              v69 = *((unsigned __int8 *)v62 + 26);
              v70 = *((unsigned __int8 *)v58 + 26);
              if (v69 != v70)
                break;
              v69 = *((unsigned __int8 *)v62 + 27);
              v70 = *((unsigned __int8 *)v58 + 27);
              if (v69 != v70)
                break;
              v69 = *((unsigned __int8 *)v62 + 28);
              v70 = *((unsigned __int8 *)v58 + 28);
              if (v69 != v70)
                break;
              v69 = *((unsigned __int8 *)v62 + 29);
              v70 = *((unsigned __int8 *)v58 + 29);
              if (v69 != v70)
                break;
              v69 = *((unsigned __int8 *)v62 + 30);
              v70 = *((unsigned __int8 *)v58 + 30);
              if (v69 != v70)
                break;
              v69 = *((unsigned __int8 *)v62 + 31);
              v70 = *((unsigned __int8 *)v58 + 31);
              if (v69 != v70)
                break;
              v69 = *((unsigned __int8 *)v62 + 32);
              v70 = *((unsigned __int8 *)v58 + 32);
              if (v69 != v70)
                break;
              v69 = *((unsigned __int8 *)v62 + 33);
              v70 = *((unsigned __int8 *)v58 + 33);
              if (v69 != v70)
                break;
              v69 = *((unsigned __int8 *)v62 + 34);
              v70 = *((unsigned __int8 *)v58 + 34);
              if (v69 != v70)
                break;
              v69 = *((unsigned __int8 *)v62 + 35);
              v70 = *((unsigned __int8 *)v58 + 35);
              if (v69 != v70)
                break;
              v69 = *((unsigned __int8 *)v62 + 36);
              v70 = *((unsigned __int8 *)v58 + 36);
              if (v69 != v70)
                break;
              v69 = *((unsigned __int8 *)v62 + 37);
              v70 = *((unsigned __int8 *)v58 + 37);
              if (v69 != v70)
                break;
              v69 = *((unsigned __int8 *)v62 + 38);
              v70 = *((unsigned __int8 *)v58 + 38);
              if (v69 != v70)
                break;
              v69 = *((unsigned __int8 *)v62 + 39);
              v70 = *((unsigned __int8 *)v58 + 39);
              if (v69 != v70)
                break;
              v69 = *((unsigned __int8 *)v62 + 40);
              v70 = *((unsigned __int8 *)v58 + 40);
              if (v69 != v70)
                break;
              v66 = 0;
              v64 = (_QWORD **)v62;
              v62 = (_QWORD *)*v62;
              if (!*v67)
                goto LABEL_186;
            }
            v65 = v69 >= v70;
            if (v69 >= v70)
            {
              v66 = 0;
            }
            else
            {
              ++v62;
              v66 = 1;
            }
            if (v65)
              v64 = (_QWORD **)v67;
            else
              v64 = v68;
            v62 = (_QWORD *)*v62;
          }
          while (v62);
LABEL_186:
          if (v64 != &v443)
          {
            v71 = v66 ? v68 : (_QWORD **)v67;
            v72 = *((unsigned __int8 *)v71 + 25);
            if (v63 == v72)
            {
              v73 = v66 ? v68 : (_QWORD **)v67;
              v63 = *((unsigned __int8 *)v58 + 26);
              v72 = *((unsigned __int8 *)v73 + 26);
              if (v63 == v72)
              {
                v74 = v66 ? v68 : (_QWORD **)v67;
                v63 = *((unsigned __int8 *)v58 + 27);
                v72 = *((unsigned __int8 *)v74 + 27);
                if (v63 == v72)
                {
                  v75 = v66 ? v68 : (_QWORD **)v67;
                  v63 = *((unsigned __int8 *)v58 + 28);
                  v72 = *((unsigned __int8 *)v75 + 28);
                  if (v63 == v72)
                  {
                    v76 = v66 ? v68 : (_QWORD **)v67;
                    v63 = *((unsigned __int8 *)v58 + 29);
                    v72 = *((unsigned __int8 *)v76 + 29);
                    if (v63 == v72)
                    {
                      v77 = v66 ? v68 : (_QWORD **)v67;
                      v63 = *((unsigned __int8 *)v58 + 30);
                      v72 = *((unsigned __int8 *)v77 + 30);
                      if (v63 == v72)
                      {
                        v78 = v66 ? v68 : (_QWORD **)v67;
                        v63 = *((unsigned __int8 *)v58 + 31);
                        v72 = *((unsigned __int8 *)v78 + 31);
                        if (v63 == v72)
                        {
                          v79 = v66 ? v68 : (_QWORD **)v67;
                          v63 = *((unsigned __int8 *)v58 + 32);
                          v72 = *((unsigned __int8 *)v79 + 32);
                          if (v63 == v72)
                          {
                            v80 = v66 ? v68 : (_QWORD **)v67;
                            v63 = *((unsigned __int8 *)v58 + 33);
                            v72 = *((unsigned __int8 *)v80 + 33);
                            if (v63 == v72)
                            {
                              v81 = v66 ? v68 : (_QWORD **)v67;
                              v63 = *((unsigned __int8 *)v58 + 34);
                              v72 = *((unsigned __int8 *)v81 + 34);
                              if (v63 == v72)
                              {
                                v82 = v66 ? v68 : (_QWORD **)v67;
                                v63 = *((unsigned __int8 *)v58 + 35);
                                v72 = *((unsigned __int8 *)v82 + 35);
                                if (v63 == v72)
                                {
                                  v83 = v66 ? v68 : (_QWORD **)v67;
                                  v63 = *((unsigned __int8 *)v58 + 36);
                                  v72 = *((unsigned __int8 *)v83 + 36);
                                  if (v63 == v72)
                                  {
                                    v84 = v66 ? v68 : (_QWORD **)v67;
                                    v63 = *((unsigned __int8 *)v58 + 37);
                                    v72 = *((unsigned __int8 *)v84 + 37);
                                    if (v63 == v72)
                                    {
                                      v85 = v66 ? v68 : (_QWORD **)v67;
                                      v63 = *((unsigned __int8 *)v58 + 38);
                                      v72 = *((unsigned __int8 *)v85 + 38);
                                      if (v63 == v72)
                                      {
                                        v86 = v66 ? v68 : (_QWORD **)v67;
                                        v63 = *((unsigned __int8 *)v58 + 39);
                                        v72 = *((unsigned __int8 *)v86 + 39);
                                        if (v63 == v72)
                                        {
                                          if (v66)
                                            v67 = v68;
                                          v63 = *((unsigned __int8 *)v58 + 40);
                                          v72 = *((unsigned __int8 *)v67 + 40);
                                          if (v63 == v72)
                                            goto LABEL_376;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (v63 >= v72)
              goto LABEL_376;
          }
        }
        v87 = *v10;
        v88 = (char **)(a6 + 56);
        v89 = a6 + 56;
        if (!*v10)
          goto LABEL_288;
        v90 = *v433;
        while (2)
        {
          while (2)
          {
            v89 = (uint64_t)v87;
            v91 = v87[32];
            v92 = v90 >= v91;
            if (v90 == v91)
            {
              v93 = *((unsigned __int8 *)v33 + 33);
              v91 = *(unsigned __int8 *)(v89 + 33);
              v92 = v93 >= v91;
              if (v93 == v91)
              {
                v93 = *((unsigned __int8 *)v33 + 34);
                v91 = *(unsigned __int8 *)(v89 + 34);
                v92 = v93 >= v91;
                if (v93 == v91)
                {
                  v93 = *((unsigned __int8 *)v33 + 35);
                  v91 = *(unsigned __int8 *)(v89 + 35);
                  v92 = v93 >= v91;
                  if (v93 == v91)
                  {
                    v93 = *((unsigned __int8 *)v33 + 36);
                    v91 = *(unsigned __int8 *)(v89 + 36);
                    v92 = v93 >= v91;
                    if (v93 == v91)
                    {
                      v93 = *((unsigned __int8 *)v33 + 37);
                      v91 = *(unsigned __int8 *)(v89 + 37);
                      v92 = v93 >= v91;
                      if (v93 == v91)
                      {
                        v94 = *((unsigned __int8 *)v33 + 38);
                        v95 = *(unsigned __int8 *)(v89 + 38);
                        if (v94 != v95)
                          goto LABEL_270;
                        v94 = *((unsigned __int8 *)v33 + 39);
                        v95 = *(unsigned __int8 *)(v89 + 39);
                        if (v94 != v95)
                          goto LABEL_270;
                        v94 = *((unsigned __int8 *)v33 + 40);
                        v95 = *(unsigned __int8 *)(v89 + 40);
                        if (v94 != v95)
                          goto LABEL_270;
                        v94 = *((unsigned __int8 *)v33 + 41);
                        v95 = *(unsigned __int8 *)(v89 + 41);
                        if (v94 != v95)
                          goto LABEL_270;
                        v94 = *((unsigned __int8 *)v33 + 42);
                        v95 = *(unsigned __int8 *)(v89 + 42);
                        if (v94 != v95)
                          goto LABEL_270;
                        v94 = *((unsigned __int8 *)v33 + 43);
                        v95 = *(unsigned __int8 *)(v89 + 43);
                        if (v94 != v95)
                          goto LABEL_270;
                        v94 = *((unsigned __int8 *)v33 + 44);
                        v95 = *(unsigned __int8 *)(v89 + 44);
                        if (v94 != v95
                          || (v94 = *((unsigned __int8 *)v33 + 45), v95 = *(unsigned __int8 *)(v89 + 45), v94 != v95)
                          || (v94 = *((unsigned __int8 *)v33 + 46), v95 = *(unsigned __int8 *)(v89 + 46), v94 != v95)
                          || (v94 = *((unsigned __int8 *)v33 + 47), v95 = *(unsigned __int8 *)(v89 + 47), v94 != v95))
                        {
LABEL_270:
                          if (v94 < v95)
                          {
LABEL_253:
                            v87 = *(char **)v89;
                            v88 = (char **)v89;
                            if (!*(_QWORD *)v89)
                              goto LABEL_288;
                            continue;
                          }
                        }
                        v91 = *(unsigned __int8 *)(v89 + 38);
                        v93 = *((unsigned __int8 *)v33 + 38);
                        if (v91 == v93)
                        {
                          v91 = *(unsigned __int8 *)(v89 + 39);
                          v93 = *((unsigned __int8 *)v33 + 39);
                          if (v91 == v93)
                          {
                            v91 = *(unsigned __int8 *)(v89 + 40);
                            v93 = *((unsigned __int8 *)v33 + 40);
                            if (v91 == v93)
                            {
                              v91 = *(unsigned __int8 *)(v89 + 41);
                              v93 = *((unsigned __int8 *)v33 + 41);
                              if (v91 == v93)
                              {
                                v91 = *(unsigned __int8 *)(v89 + 42);
                                v93 = *((unsigned __int8 *)v33 + 42);
                                if (v91 == v93)
                                {
                                  v91 = *(unsigned __int8 *)(v89 + 43);
                                  v93 = *((unsigned __int8 *)v33 + 43);
                                  if (v91 == v93)
                                  {
                                    v91 = *(unsigned __int8 *)(v89 + 44);
                                    v93 = *((unsigned __int8 *)v33 + 44);
                                    if (v91 == v93)
                                    {
                                      v91 = *(unsigned __int8 *)(v89 + 45);
                                      v93 = *((unsigned __int8 *)v33 + 45);
                                      if (v91 == v93)
                                      {
                                        v91 = *(unsigned __int8 *)(v89 + 46);
                                        v93 = *((unsigned __int8 *)v33 + 46);
                                        if (v91 == v93)
                                        {
                                          v91 = *(unsigned __int8 *)(v89 + 47);
                                          v93 = *((unsigned __int8 *)v33 + 47);
                                          if (v91 == v93)
                                          {
LABEL_307:
                                            v97 = (char *)v89;
                                            v113 = (void **)(v89 + 56);
                                            v112 = *(char **)(v89 + 56);
                                            v114 = (char **)(v89 + 56);
                                            v115 = (char **)(v89 + 56);
                                            if (v112)
                                              goto LABEL_315;
LABEL_351:
                                            v123 = (char *)operator new(0x30uLL);
                                            *(_OWORD *)(v123 + 25) = *(_OWORD *)((char *)v58 + 25);
                                            *(_QWORD *)v123 = 0;
                                            *((_QWORD *)v123 + 1) = 0;
                                            *((_QWORD *)v123 + 2) = v115;
                                            *v114 = v123;
                                            v124 = **((_QWORD **)v97 + 6);
                                            if (v124)
                                            {
                                              *((_QWORD *)v97 + 6) = v124;
                                              v123 = *v114;
                                            }
                                            v125 = (char *)*v113;
                                            v101 = v123 == *v113;
                                            v123[24] = v101;
                                            if (!v101)
                                            {
                                              do
                                              {
                                                v126 = *((_QWORD *)v123 + 2);
                                                if (*(_BYTE *)(v126 + 24))
                                                  break;
                                                v127 = *(char **)(v126 + 16);
                                                v128 = *(_QWORD *)v127;
                                                if (*(_QWORD *)v127 == v126)
                                                {
                                                  v131 = *((_QWORD *)v127 + 1);
                                                  if (!v131
                                                    || (v132 = *(unsigned __int8 *)(v131 + 24),
                                                        v129 = (_BYTE *)(v131 + 24),
                                                        v132))
                                                  {
                                                    if (*(char **)v126 == v123)
                                                    {
                                                      *(_BYTE *)(v126 + 24) = 1;
                                                      v127[24] = 0;
                                                      v135 = *(_QWORD *)(v126 + 8);
                                                      *(_QWORD *)v127 = v135;
                                                      if (v135)
                                                        goto LABEL_368;
                                                    }
                                                    else
                                                    {
                                                      v133 = *(uint64_t **)(v126 + 8);
                                                      v134 = *v133;
                                                      *(_QWORD *)(v126 + 8) = *v133;
                                                      if (v134)
                                                      {
                                                        *(_QWORD *)(v134 + 16) = v126;
                                                        v127 = *(char **)(v126 + 16);
                                                      }
                                                      v133[2] = (uint64_t)v127;
                                                      *(_QWORD *)(*(_QWORD *)(v126 + 16)
                                                                + 8 * (**(_QWORD **)(v126 + 16) != v126)) = v133;
                                                      *v133 = v126;
                                                      *(_QWORD *)(v126 + 16) = v133;
                                                      v127 = (char *)v133[2];
                                                      v126 = *(_QWORD *)v127;
                                                      *((_BYTE *)v133 + 24) = 1;
                                                      v127[24] = 0;
                                                      v135 = *(_QWORD *)(v126 + 8);
                                                      *(_QWORD *)v127 = v135;
                                                      if (v135)
LABEL_368:
                                                        *(_QWORD *)(v135 + 16) = v127;
                                                    }
                                                    *(_QWORD *)(v126 + 16) = *((_QWORD *)v127 + 2);
                                                    *(_QWORD *)(*((_QWORD *)v127 + 2)
                                                              + 8 * (**((_QWORD **)v127 + 2) != (_QWORD)v127)) = v126;
                                                    *(_QWORD *)(v126 + 8) = v127;
LABEL_374:
                                                    *((_QWORD *)v127 + 2) = v126;
                                                    break;
                                                  }
                                                }
                                                else if (!v128
                                                       || (v130 = *(unsigned __int8 *)(v128 + 24),
                                                           v129 = (_BYTE *)(v128 + 24),
                                                           v130))
                                                {
                                                  if (*(char **)v126 == v123)
                                                  {
                                                    v140 = *((_QWORD *)v123 + 1);
                                                    *(_QWORD *)v126 = v140;
                                                    if (v140)
                                                    {
                                                      *(_QWORD *)(v140 + 16) = v126;
                                                      v127 = *(char **)(v126 + 16);
                                                    }
                                                    *((_QWORD *)v123 + 2) = v127;
                                                    *(_QWORD *)(*(_QWORD *)(v126 + 16)
                                                              + 8 * (**(_QWORD **)(v126 + 16) != v126)) = v123;
                                                    *((_QWORD *)v123 + 1) = v126;
                                                    *(_QWORD *)(v126 + 16) = v123;
                                                    v127 = (char *)*((_QWORD *)v123 + 2);
                                                    v123[24] = 1;
                                                    v127[24] = 0;
                                                    v126 = *((_QWORD *)v127 + 1);
                                                    v136 = *(char **)v126;
                                                    *((_QWORD *)v127 + 1) = *(_QWORD *)v126;
                                                    if (v136)
LABEL_372:
                                                      *((_QWORD *)v136 + 2) = v127;
                                                  }
                                                  else
                                                  {
                                                    *(_BYTE *)(v126 + 24) = 1;
                                                    v127[24] = 0;
                                                    v126 = *((_QWORD *)v127 + 1);
                                                    v136 = *(char **)v126;
                                                    *((_QWORD *)v127 + 1) = *(_QWORD *)v126;
                                                    if (v136)
                                                      goto LABEL_372;
                                                  }
                                                  *(_QWORD *)(v126 + 16) = *((_QWORD *)v127 + 2);
                                                  *(_QWORD *)(*((_QWORD *)v127 + 2)
                                                            + 8 * (**((_QWORD **)v127 + 2) != (_QWORD)v127)) = v126;
                                                  *(_QWORD *)v126 = v127;
                                                  goto LABEL_374;
                                                }
                                                *(_BYTE *)(v126 + 24) = 1;
                                                v123 = v127;
                                                v127[24] = v127 == v125;
                                                *v129 = 1;
                                              }
                                              while (v127 != v125);
                                            }
                                            ++*((_QWORD *)v97 + 8);
LABEL_376:
                                            v137 = v58[1];
                                            if (v137)
                                            {
                                              do
                                              {
                                                v138 = (_QWORD **)v137;
                                                v137 = (_QWORD *)*v137;
                                              }
                                              while (v137);
                                            }
                                            else
                                            {
                                              do
                                              {
                                                v138 = (_QWORD **)v58[2];
                                                v101 = *v138 == v58;
                                                v58 = v138;
                                              }
                                              while (!v101);
                                            }
                                            v58 = v138;
                                            if (v138 == &v440)
                                              goto LABEL_155;
                                            goto LABEL_160;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        goto LABEL_285;
                      }
                    }
                  }
                }
              }
            }
            else
            {
              v93 = *v433;
            }
            break;
          }
          if (!v92)
            goto LABEL_253;
LABEL_285:
          if (v91 >= v93)
            goto LABEL_307;
          v87 = *(char **)(v89 + 8);
          if (!v87)
          {
            v88 = (char **)(v89 + 8);
LABEL_288:
            v96 = (char *)operator new(0x48uLL);
            v97 = v96;
            *((_OWORD *)v96 + 2) = *(_OWORD *)v433;
            *((_QWORD *)v96 + 8) = 0;
            *((_QWORD *)v96 + 7) = 0;
            *((_QWORD *)v96 + 6) = v96 + 56;
            *(_QWORD *)v96 = 0;
            *((_QWORD *)v96 + 1) = 0;
            *((_QWORD *)v96 + 2) = v89;
            *v88 = v96;
            v98 = (_QWORD *)**v423;
            v99 = v96;
            if (v98)
            {
              *v423 = v98;
              v99 = *v88;
            }
            v100 = *v10;
            v101 = v99 == *v10;
            v99[24] = v101;
            if (v101)
              goto LABEL_314;
            while (1)
            {
              v102 = *((_QWORD *)v99 + 2);
              if (*(_BYTE *)(v102 + 24))
                goto LABEL_314;
              v103 = *(char **)(v102 + 16);
              v104 = *(_QWORD *)v103;
              if (*(_QWORD *)v103 == v102)
              {
                v107 = *((_QWORD *)v103 + 1);
                if (!v107 || (v108 = *(unsigned __int8 *)(v107 + 24), v105 = (_BYTE *)(v107 + 24), v108))
                {
                  if (*(char **)v102 == v99)
                  {
                    *(_BYTE *)(v102 + 24) = 1;
                    v103[24] = 0;
                    v111 = *(_QWORD *)(v102 + 8);
                    *(_QWORD *)v103 = v111;
                    if (v111)
                      goto LABEL_305;
                  }
                  else
                  {
                    v109 = *(uint64_t **)(v102 + 8);
                    v110 = *v109;
                    *(_QWORD *)(v102 + 8) = *v109;
                    if (v110)
                    {
                      *(_QWORD *)(v110 + 16) = v102;
                      v103 = *(char **)(v102 + 16);
                    }
                    v109[2] = (uint64_t)v103;
                    *(_QWORD *)(*(_QWORD *)(v102 + 16) + 8 * (**(_QWORD **)(v102 + 16) != v102)) = v109;
                    *v109 = v102;
                    *(_QWORD *)(v102 + 16) = v109;
                    v103 = (char *)v109[2];
                    v102 = *(_QWORD *)v103;
                    *((_BYTE *)v109 + 24) = 1;
                    v103[24] = 0;
                    v111 = *(_QWORD *)(v102 + 8);
                    *(_QWORD *)v103 = v111;
                    if (v111)
LABEL_305:
                      *(_QWORD *)(v111 + 16) = v103;
                  }
                  *(_QWORD *)(v102 + 16) = *((_QWORD *)v103 + 2);
                  *(_QWORD *)(*((_QWORD *)v103 + 2) + 8 * (**((_QWORD **)v103 + 2) != (_QWORD)v103)) = v102;
                  *(_QWORD *)(v102 + 8) = v103;
LABEL_313:
                  *((_QWORD *)v103 + 2) = v102;
LABEL_314:
                  ++*(_QWORD *)(a6 + 64);
                  v113 = (void **)(v96 + 56);
                  v112 = (char *)*((_QWORD *)v96 + 7);
                  v114 = (char **)(v96 + 56);
                  v115 = (char **)(v96 + 56);
                  if (!v112)
                    goto LABEL_351;
LABEL_315:
                  v117 = *((unsigned __int8 *)v58 + 25);
                  while (2)
                  {
                    while (2)
                    {
                      v115 = (char **)v112;
                      v118 = v112[25];
                      v119 = v117 >= v118;
                      if (v117 == v118)
                      {
                        v120 = *((unsigned __int8 *)v58 + 26);
                        v118 = *((unsigned __int8 *)v115 + 26);
                        v119 = v120 >= v118;
                        if (v120 == v118)
                        {
                          v120 = *((unsigned __int8 *)v58 + 27);
                          v118 = *((unsigned __int8 *)v115 + 27);
                          v119 = v120 >= v118;
                          if (v120 == v118)
                          {
                            v120 = *((unsigned __int8 *)v58 + 28);
                            v118 = *((unsigned __int8 *)v115 + 28);
                            v119 = v120 >= v118;
                            if (v120 == v118)
                            {
                              v120 = *((unsigned __int8 *)v58 + 29);
                              v118 = *((unsigned __int8 *)v115 + 29);
                              v119 = v120 >= v118;
                              if (v120 == v118)
                              {
                                v120 = *((unsigned __int8 *)v58 + 30);
                                v118 = *((unsigned __int8 *)v115 + 30);
                                v119 = v120 >= v118;
                                if (v120 == v118)
                                {
                                  v121 = *((unsigned __int8 *)v58 + 31);
                                  v122 = *((unsigned __int8 *)v115 + 31);
                                  if (v121 != v122)
                                    goto LABEL_333;
                                  v121 = *((unsigned __int8 *)v58 + 32);
                                  v122 = *((unsigned __int8 *)v115 + 32);
                                  if (v121 != v122)
                                    goto LABEL_333;
                                  v121 = *((unsigned __int8 *)v58 + 33);
                                  v122 = *((unsigned __int8 *)v115 + 33);
                                  if (v121 != v122)
                                    goto LABEL_333;
                                  v121 = *((unsigned __int8 *)v58 + 34);
                                  v122 = *((unsigned __int8 *)v115 + 34);
                                  if (v121 != v122)
                                    goto LABEL_333;
                                  v121 = *((unsigned __int8 *)v58 + 35);
                                  v122 = *((unsigned __int8 *)v115 + 35);
                                  if (v121 != v122)
                                    goto LABEL_333;
                                  v121 = *((unsigned __int8 *)v58 + 36);
                                  v122 = *((unsigned __int8 *)v115 + 36);
                                  if (v121 != v122)
                                    goto LABEL_333;
                                  v121 = *((unsigned __int8 *)v58 + 37);
                                  v122 = *((unsigned __int8 *)v115 + 37);
                                  if (v121 != v122
                                    || (v121 = *((unsigned __int8 *)v58 + 38),
                                        v122 = *((unsigned __int8 *)v115 + 38),
                                        v121 != v122)
                                    || (v121 = *((unsigned __int8 *)v58 + 39),
                                        v122 = *((unsigned __int8 *)v115 + 39),
                                        v121 != v122)
                                    || (v121 = *((unsigned __int8 *)v58 + 40),
                                        v122 = *((unsigned __int8 *)v115 + 40),
                                        v121 != v122))
                                  {
LABEL_333:
                                    if (v121 < v122)
                                    {
LABEL_316:
                                      v112 = *v115;
                                      v114 = v115;
                                      if (!*v115)
                                        goto LABEL_351;
                                      continue;
                                    }
                                  }
                                  v118 = *((unsigned __int8 *)v115 + 31);
                                  v120 = *((unsigned __int8 *)v58 + 31);
                                  if (v118 == v120)
                                  {
                                    v118 = *((unsigned __int8 *)v115 + 32);
                                    v120 = *((unsigned __int8 *)v58 + 32);
                                    if (v118 == v120)
                                    {
                                      v118 = *((unsigned __int8 *)v115 + 33);
                                      v120 = *((unsigned __int8 *)v58 + 33);
                                      if (v118 == v120)
                                      {
                                        v118 = *((unsigned __int8 *)v115 + 34);
                                        v120 = *((unsigned __int8 *)v58 + 34);
                                        if (v118 == v120)
                                        {
                                          v118 = *((unsigned __int8 *)v115 + 35);
                                          v120 = *((unsigned __int8 *)v58 + 35);
                                          if (v118 == v120)
                                          {
                                            v118 = *((unsigned __int8 *)v115 + 36);
                                            v120 = *((unsigned __int8 *)v58 + 36);
                                            if (v118 == v120)
                                            {
                                              v118 = *((unsigned __int8 *)v115 + 37);
                                              v120 = *((unsigned __int8 *)v58 + 37);
                                              if (v118 == v120)
                                              {
                                                v118 = *((unsigned __int8 *)v115 + 38);
                                                v120 = *((unsigned __int8 *)v58 + 38);
                                                if (v118 == v120)
                                                {
                                                  v118 = *((unsigned __int8 *)v115 + 39);
                                                  v120 = *((unsigned __int8 *)v58 + 39);
                                                  if (v118 == v120)
                                                  {
                                                    v118 = *((unsigned __int8 *)v115 + 40);
                                                    v120 = *((unsigned __int8 *)v58 + 40);
                                                    if (v118 == v120)
                                                      goto LABEL_376;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  goto LABEL_348;
                                }
                              }
                            }
                          }
                        }
                      }
                      else
                      {
                        v120 = *((unsigned __int8 *)v58 + 25);
                      }
                      break;
                    }
                    if (!v119)
                      goto LABEL_316;
LABEL_348:
                    if (v118 >= v120)
                      goto LABEL_376;
                    v112 = v115[1];
                    if (!v112)
                    {
                      v114 = v115 + 1;
                      goto LABEL_351;
                    }
                    continue;
                  }
                }
              }
              else if (!v104 || (v106 = *(unsigned __int8 *)(v104 + 24), v105 = (_BYTE *)(v104 + 24), v106))
              {
                if (*(char **)v102 == v99)
                {
                  v139 = *((_QWORD *)v99 + 1);
                  *(_QWORD *)v102 = v139;
                  if (v139)
                  {
                    *(_QWORD *)(v139 + 16) = v102;
                    v103 = *(char **)(v102 + 16);
                  }
                  *((_QWORD *)v99 + 2) = v103;
                  *(_QWORD *)(*(_QWORD *)(v102 + 16) + 8 * (**(_QWORD **)(v102 + 16) != v102)) = v99;
                  *((_QWORD *)v99 + 1) = v102;
                  *(_QWORD *)(v102 + 16) = v99;
                  v103 = (char *)*((_QWORD *)v99 + 2);
                  v99[24] = 1;
                  v103[24] = 0;
                  v102 = *((_QWORD *)v103 + 1);
                  v116 = *(char **)v102;
                  *((_QWORD *)v103 + 1) = *(_QWORD *)v102;
                  if (v116)
LABEL_311:
                    *((_QWORD *)v116 + 2) = v103;
                }
                else
                {
                  *(_BYTE *)(v102 + 24) = 1;
                  v103[24] = 0;
                  v102 = *((_QWORD *)v103 + 1);
                  v116 = *(char **)v102;
                  *((_QWORD *)v103 + 1) = *(_QWORD *)v102;
                  if (v116)
                    goto LABEL_311;
                }
                *(_QWORD *)(v102 + 16) = *((_QWORD *)v103 + 2);
                *(_QWORD *)(*((_QWORD *)v103 + 2) + 8 * (**((_QWORD **)v103 + 2) != (_QWORD)v103)) = v102;
                *(_QWORD *)v102 = v103;
                goto LABEL_313;
              }
              *(_BYTE *)(v102 + 24) = 1;
              v99 = v103;
              v103[24] = v103 == v100;
              *v105 = 1;
              if (v103 == v100)
                goto LABEL_314;
            }
          }
          continue;
        }
      }
LABEL_155:
      v59 = (uint64_t *)v33[6];
      if (v59 != v426)
      {
        do
        {
          v141 = v443;
          if (v443)
          {
            v142 = *((unsigned __int8 *)v59 + 25);
            v143 = &v443;
            do
            {
              while (1)
              {
                v146 = v141;
                v147 = v143;
                v148 = *((unsigned __int8 *)v141 + 25);
                v149 = *((unsigned __int8 *)v59 + 25);
                if (v148 != v142)
                  break;
                v148 = *((unsigned __int8 *)v141 + 26);
                v149 = *((unsigned __int8 *)v59 + 26);
                if (v148 != v149)
                  break;
                v148 = *((unsigned __int8 *)v141 + 27);
                v149 = *((unsigned __int8 *)v59 + 27);
                if (v148 != v149)
                  break;
                v148 = *((unsigned __int8 *)v141 + 28);
                v149 = *((unsigned __int8 *)v59 + 28);
                if (v148 != v149)
                  break;
                v148 = *((unsigned __int8 *)v141 + 29);
                v149 = *((unsigned __int8 *)v59 + 29);
                if (v148 != v149)
                  break;
                v148 = *((unsigned __int8 *)v141 + 30);
                v149 = *((unsigned __int8 *)v59 + 30);
                if (v148 != v149)
                  break;
                v148 = *((unsigned __int8 *)v141 + 31);
                v149 = *((unsigned __int8 *)v59 + 31);
                if (v148 != v149)
                  break;
                v148 = *((unsigned __int8 *)v141 + 32);
                v149 = *((unsigned __int8 *)v59 + 32);
                if (v148 != v149)
                  break;
                v148 = *((unsigned __int8 *)v141 + 33);
                v149 = *((unsigned __int8 *)v59 + 33);
                if (v148 != v149)
                  break;
                v148 = *((unsigned __int8 *)v141 + 34);
                v149 = *((unsigned __int8 *)v59 + 34);
                if (v148 != v149)
                  break;
                v148 = *((unsigned __int8 *)v141 + 35);
                v149 = *((unsigned __int8 *)v59 + 35);
                if (v148 != v149)
                  break;
                v148 = *((unsigned __int8 *)v141 + 36);
                v149 = *((unsigned __int8 *)v59 + 36);
                if (v148 != v149)
                  break;
                v148 = *((unsigned __int8 *)v141 + 37);
                v149 = *((unsigned __int8 *)v59 + 37);
                if (v148 != v149)
                  break;
                v148 = *((unsigned __int8 *)v141 + 38);
                v149 = *((unsigned __int8 *)v59 + 38);
                if (v148 != v149)
                  break;
                v148 = *((unsigned __int8 *)v141 + 39);
                v149 = *((unsigned __int8 *)v59 + 39);
                if (v148 != v149)
                  break;
                v148 = *((unsigned __int8 *)v141 + 40);
                v149 = *((unsigned __int8 *)v59 + 40);
                if (v148 != v149)
                  break;
                v145 = 0;
                v143 = (_QWORD **)v141;
                v141 = (_QWORD *)*v141;
                if (!*v146)
                  goto LABEL_421;
              }
              v144 = v148 >= v149;
              if (v148 >= v149)
              {
                v145 = 0;
              }
              else
              {
                ++v141;
                v145 = 1;
              }
              if (v144)
                v143 = (_QWORD **)v146;
              else
                v143 = v147;
              v141 = (_QWORD *)*v141;
            }
            while (v141);
LABEL_421:
            if (v143 != &v443)
            {
              v150 = v145 ? v147 : (_QWORD **)v146;
              v151 = *((unsigned __int8 *)v150 + 25);
              if (v142 == v151)
              {
                v152 = v145 ? v147 : (_QWORD **)v146;
                v142 = *((unsigned __int8 *)v59 + 26);
                v151 = *((unsigned __int8 *)v152 + 26);
                if (v142 == v151)
                {
                  v153 = v145 ? v147 : (_QWORD **)v146;
                  v142 = *((unsigned __int8 *)v59 + 27);
                  v151 = *((unsigned __int8 *)v153 + 27);
                  if (v142 == v151)
                  {
                    v154 = v145 ? v147 : (_QWORD **)v146;
                    v142 = *((unsigned __int8 *)v59 + 28);
                    v151 = *((unsigned __int8 *)v154 + 28);
                    if (v142 == v151)
                    {
                      v155 = v145 ? v147 : (_QWORD **)v146;
                      v142 = *((unsigned __int8 *)v59 + 29);
                      v151 = *((unsigned __int8 *)v155 + 29);
                      if (v142 == v151)
                      {
                        v156 = v145 ? v147 : (_QWORD **)v146;
                        v142 = *((unsigned __int8 *)v59 + 30);
                        v151 = *((unsigned __int8 *)v156 + 30);
                        if (v142 == v151)
                        {
                          v157 = v145 ? v147 : (_QWORD **)v146;
                          v142 = *((unsigned __int8 *)v59 + 31);
                          v151 = *((unsigned __int8 *)v157 + 31);
                          if (v142 == v151)
                          {
                            v158 = v145 ? v147 : (_QWORD **)v146;
                            v142 = *((unsigned __int8 *)v59 + 32);
                            v151 = *((unsigned __int8 *)v158 + 32);
                            if (v142 == v151)
                            {
                              v159 = v145 ? v147 : (_QWORD **)v146;
                              v142 = *((unsigned __int8 *)v59 + 33);
                              v151 = *((unsigned __int8 *)v159 + 33);
                              if (v142 == v151)
                              {
                                v160 = v145 ? v147 : (_QWORD **)v146;
                                v142 = *((unsigned __int8 *)v59 + 34);
                                v151 = *((unsigned __int8 *)v160 + 34);
                                if (v142 == v151)
                                {
                                  v161 = v145 ? v147 : (_QWORD **)v146;
                                  v142 = *((unsigned __int8 *)v59 + 35);
                                  v151 = *((unsigned __int8 *)v161 + 35);
                                  if (v142 == v151)
                                  {
                                    v162 = v145 ? v147 : (_QWORD **)v146;
                                    v142 = *((unsigned __int8 *)v59 + 36);
                                    v151 = *((unsigned __int8 *)v162 + 36);
                                    if (v142 == v151)
                                    {
                                      v163 = v145 ? v147 : (_QWORD **)v146;
                                      v142 = *((unsigned __int8 *)v59 + 37);
                                      v151 = *((unsigned __int8 *)v163 + 37);
                                      if (v142 == v151)
                                      {
                                        v164 = v145 ? v147 : (_QWORD **)v146;
                                        v142 = *((unsigned __int8 *)v59 + 38);
                                        v151 = *((unsigned __int8 *)v164 + 38);
                                        if (v142 == v151)
                                        {
                                          v165 = v145 ? v147 : (_QWORD **)v146;
                                          v142 = *((unsigned __int8 *)v59 + 39);
                                          v151 = *((unsigned __int8 *)v165 + 39);
                                          if (v142 == v151)
                                          {
                                            if (v145)
                                              v146 = v147;
                                            v142 = *((unsigned __int8 *)v59 + 40);
                                            v151 = *((unsigned __int8 *)v146 + 40);
                                            if (v142 == v151)
                                              goto LABEL_649;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (v142 >= v151)
                goto LABEL_649;
            }
          }
          v166 = (float *)*((_QWORD *)v418 + 7);
          if (!v166)
LABEL_1070:
            sub_223198218("map::at:  key not found");
          v167 = (unsigned __int8 *)v59 + 25;
          v168 = *((unsigned __int8 *)v59 + 25);
          while (1)
          {
            v169 = *((unsigned __int8 *)v166 + 28);
            v170 = v168 >= v169;
            if (v168 == v169)
              break;
            v171 = *((unsigned __int8 *)v59 + 25);
LABEL_518:
            if (v170)
            {
LABEL_520:
              if (v169 >= v171)
                goto LABEL_523;
              v166 = (float *)*((_QWORD *)v166 + 1);
              if (!v166)
                goto LABEL_1070;
            }
            else
            {
LABEL_488:
              v166 = *(float **)v166;
              if (!v166)
                goto LABEL_1070;
            }
          }
          v171 = *((unsigned __int8 *)v59 + 26);
          v169 = *((unsigned __int8 *)v166 + 29);
          v170 = v171 >= v169;
          if (v171 != v169)
            goto LABEL_518;
          v171 = *((unsigned __int8 *)v59 + 27);
          v169 = *((unsigned __int8 *)v166 + 30);
          v170 = v171 >= v169;
          if (v171 != v169)
            goto LABEL_518;
          v171 = *((unsigned __int8 *)v59 + 28);
          v169 = *((unsigned __int8 *)v166 + 31);
          v170 = v171 >= v169;
          if (v171 != v169)
            goto LABEL_518;
          v171 = *((unsigned __int8 *)v59 + 29);
          v169 = *((unsigned __int8 *)v166 + 32);
          v170 = v171 >= v169;
          if (v171 != v169)
            goto LABEL_518;
          v171 = *((unsigned __int8 *)v59 + 30);
          v169 = *((unsigned __int8 *)v166 + 33);
          v170 = v171 >= v169;
          if (v171 != v169)
            goto LABEL_518;
          v172 = *((unsigned __int8 *)v59 + 31);
          v173 = *((unsigned __int8 *)v166 + 34);
          if (v172 != v173)
            goto LABEL_505;
          v172 = *((unsigned __int8 *)v59 + 32);
          v173 = *((unsigned __int8 *)v166 + 35);
          if (v172 != v173)
            goto LABEL_505;
          v172 = *((unsigned __int8 *)v59 + 33);
          v173 = *((unsigned __int8 *)v166 + 36);
          if (v172 != v173)
            goto LABEL_505;
          v172 = *((unsigned __int8 *)v59 + 34);
          v173 = *((unsigned __int8 *)v166 + 37);
          if (v172 != v173)
            goto LABEL_505;
          v172 = *((unsigned __int8 *)v59 + 35);
          v173 = *((unsigned __int8 *)v166 + 38);
          if (v172 != v173)
            goto LABEL_505;
          v172 = *((unsigned __int8 *)v59 + 36);
          v173 = *((unsigned __int8 *)v166 + 39);
          if (v172 != v173)
            goto LABEL_505;
          v172 = *((unsigned __int8 *)v59 + 37);
          v173 = *((unsigned __int8 *)v166 + 40);
          if (v172 != v173
            || (v172 = *((unsigned __int8 *)v59 + 38), v173 = *((unsigned __int8 *)v166 + 41), v172 != v173)
            || (v172 = *((unsigned __int8 *)v59 + 39), v173 = *((unsigned __int8 *)v166 + 42), v172 != v173)
            || (v172 = *((unsigned __int8 *)v59 + 40), v173 = *((unsigned __int8 *)v166 + 43), v172 != v173))
          {
LABEL_505:
            if (v172 < v173)
              goto LABEL_488;
          }
          v169 = *((unsigned __int8 *)v166 + 34);
          v171 = *((unsigned __int8 *)v59 + 31);
          if (v169 != v171)
            goto LABEL_520;
          v169 = *((unsigned __int8 *)v166 + 35);
          v171 = *((unsigned __int8 *)v59 + 32);
          if (v169 != v171)
            goto LABEL_520;
          v169 = *((unsigned __int8 *)v166 + 36);
          v171 = *((unsigned __int8 *)v59 + 33);
          if (v169 != v171)
            goto LABEL_520;
          v169 = *((unsigned __int8 *)v166 + 37);
          v171 = *((unsigned __int8 *)v59 + 34);
          if (v169 != v171)
            goto LABEL_520;
          v169 = *((unsigned __int8 *)v166 + 38);
          v171 = *((unsigned __int8 *)v59 + 35);
          if (v169 != v171)
            goto LABEL_520;
          v169 = *((unsigned __int8 *)v166 + 39);
          v171 = *((unsigned __int8 *)v59 + 36);
          if (v169 != v171)
            goto LABEL_520;
          v169 = *((unsigned __int8 *)v166 + 40);
          v171 = *((unsigned __int8 *)v59 + 37);
          if (v169 != v171)
            goto LABEL_520;
          v169 = *((unsigned __int8 *)v166 + 41);
          v171 = *((unsigned __int8 *)v59 + 38);
          if (v169 != v171)
            goto LABEL_520;
          v169 = *((unsigned __int8 *)v166 + 42);
          v171 = *((unsigned __int8 *)v59 + 39);
          if (v169 != v171)
            goto LABEL_520;
          v169 = *((unsigned __int8 *)v166 + 43);
          v171 = *((unsigned __int8 *)v59 + 40);
          if (v169 != v171)
            goto LABEL_520;
LABEL_523:
          if (v166[11] <= 1.0)
            goto LABEL_649;
          v174 = a6 + 80;
          v175 = *v429;
          v176 = (char **)(a6 + 80);
          if (!*v429)
            goto LABEL_561;
          v177 = *v433;
          while (2)
          {
            while (2)
            {
              v174 = (uint64_t)v175;
              v178 = v175[32];
              v179 = v177 >= v178;
              if (v177 != v178)
              {
                v180 = *v433;
LABEL_556:
                if (!v179)
                  goto LABEL_526;
LABEL_558:
                if (v178 >= v180)
                  goto LABEL_580;
                v175 = *(char **)(v174 + 8);
                if (!v175)
                {
                  v176 = (char **)(v174 + 8);
LABEL_561:
                  v183 = (char *)operator new(0x48uLL);
                  v184 = v183;
                  *((_OWORD *)v183 + 2) = *(_OWORD *)v433;
                  *((_QWORD *)v183 + 8) = 0;
                  *((_QWORD *)v183 + 7) = 0;
                  *((_QWORD *)v183 + 6) = v183 + 56;
                  *(_QWORD *)v183 = 0;
                  *((_QWORD *)v183 + 1) = 0;
                  *((_QWORD *)v183 + 2) = v174;
                  *v176 = v183;
                  v185 = (_QWORD *)**v389;
                  v186 = v183;
                  if (v185)
                  {
                    *v389 = v185;
                    v186 = *v176;
                  }
                  v187 = *v429;
                  v101 = v186 == *v429;
                  v186[24] = v101;
                  if (v101)
                    goto LABEL_587;
                  while (1)
                  {
                    v188 = *((_QWORD *)v186 + 2);
                    if (*(_BYTE *)(v188 + 24))
                      goto LABEL_587;
                    v189 = *(char **)(v188 + 16);
                    v190 = *(_QWORD *)v189;
                    if (*(_QWORD *)v189 == v188)
                    {
                      v193 = *((_QWORD *)v189 + 1);
                      if (!v193 || (v194 = *(unsigned __int8 *)(v193 + 24), v191 = (_BYTE *)(v193 + 24), v194))
                      {
                        if (*(char **)v188 == v186)
                        {
                          *(_BYTE *)(v188 + 24) = 1;
                          v189[24] = 0;
                          v197 = *(_QWORD *)(v188 + 8);
                          *(_QWORD *)v189 = v197;
                          if (v197)
                            goto LABEL_578;
                        }
                        else
                        {
                          v195 = *(uint64_t **)(v188 + 8);
                          v196 = *v195;
                          *(_QWORD *)(v188 + 8) = *v195;
                          if (v196)
                          {
                            *(_QWORD *)(v196 + 16) = v188;
                            v189 = *(char **)(v188 + 16);
                          }
                          v195[2] = (uint64_t)v189;
                          *(_QWORD *)(*(_QWORD *)(v188 + 16) + 8 * (**(_QWORD **)(v188 + 16) != v188)) = v195;
                          *v195 = v188;
                          *(_QWORD *)(v188 + 16) = v195;
                          v189 = (char *)v195[2];
                          v188 = *(_QWORD *)v189;
                          *((_BYTE *)v195 + 24) = 1;
                          v189[24] = 0;
                          v197 = *(_QWORD *)(v188 + 8);
                          *(_QWORD *)v189 = v197;
                          if (v197)
LABEL_578:
                            *(_QWORD *)(v197 + 16) = v189;
                        }
                        *(_QWORD *)(v188 + 16) = *((_QWORD *)v189 + 2);
                        *(_QWORD *)(*((_QWORD *)v189 + 2) + 8 * (**((_QWORD **)v189 + 2) != (_QWORD)v189)) = v188;
                        *(_QWORD *)(v188 + 8) = v189;
LABEL_586:
                        *((_QWORD *)v189 + 2) = v188;
LABEL_587:
                        ++*(_QWORD *)(a6 + 88);
                        v199 = (void **)(v183 + 56);
                        v198 = (char *)*((_QWORD *)v183 + 7);
                        v200 = (char **)(v183 + 56);
                        v201 = (char **)(v183 + 56);
                        if (!v198)
                          goto LABEL_624;
LABEL_588:
                        v203 = *v167;
                        while (2)
                        {
                          while (2)
                          {
                            v201 = (char **)v198;
                            v204 = v198[25];
                            v205 = v203 >= v204;
                            if (v203 == v204)
                            {
                              v206 = *((unsigned __int8 *)v59 + 26);
                              v204 = *((unsigned __int8 *)v201 + 26);
                              v205 = v206 >= v204;
                              if (v206 == v204)
                              {
                                v206 = *((unsigned __int8 *)v59 + 27);
                                v204 = *((unsigned __int8 *)v201 + 27);
                                v205 = v206 >= v204;
                                if (v206 == v204)
                                {
                                  v206 = *((unsigned __int8 *)v59 + 28);
                                  v204 = *((unsigned __int8 *)v201 + 28);
                                  v205 = v206 >= v204;
                                  if (v206 == v204)
                                  {
                                    v206 = *((unsigned __int8 *)v59 + 29);
                                    v204 = *((unsigned __int8 *)v201 + 29);
                                    v205 = v206 >= v204;
                                    if (v206 == v204)
                                    {
                                      v206 = *((unsigned __int8 *)v59 + 30);
                                      v204 = *((unsigned __int8 *)v201 + 30);
                                      v205 = v206 >= v204;
                                      if (v206 == v204)
                                      {
                                        v207 = *((unsigned __int8 *)v59 + 31);
                                        v208 = *((unsigned __int8 *)v201 + 31);
                                        if (v207 != v208)
                                          goto LABEL_606;
                                        v207 = *((unsigned __int8 *)v59 + 32);
                                        v208 = *((unsigned __int8 *)v201 + 32);
                                        if (v207 != v208)
                                          goto LABEL_606;
                                        v207 = *((unsigned __int8 *)v59 + 33);
                                        v208 = *((unsigned __int8 *)v201 + 33);
                                        if (v207 != v208)
                                          goto LABEL_606;
                                        v207 = *((unsigned __int8 *)v59 + 34);
                                        v208 = *((unsigned __int8 *)v201 + 34);
                                        if (v207 != v208)
                                          goto LABEL_606;
                                        v207 = *((unsigned __int8 *)v59 + 35);
                                        v208 = *((unsigned __int8 *)v201 + 35);
                                        if (v207 != v208)
                                          goto LABEL_606;
                                        v207 = *((unsigned __int8 *)v59 + 36);
                                        v208 = *((unsigned __int8 *)v201 + 36);
                                        if (v207 != v208)
                                          goto LABEL_606;
                                        v207 = *((unsigned __int8 *)v59 + 37);
                                        v208 = *((unsigned __int8 *)v201 + 37);
                                        if (v207 != v208
                                          || (v207 = *((unsigned __int8 *)v59 + 38),
                                              v208 = *((unsigned __int8 *)v201 + 38),
                                              v207 != v208)
                                          || (v207 = *((unsigned __int8 *)v59 + 39),
                                              v208 = *((unsigned __int8 *)v201 + 39),
                                              v207 != v208)
                                          || (v207 = *((unsigned __int8 *)v59 + 40),
                                              v208 = *((unsigned __int8 *)v201 + 40),
                                              v207 != v208))
                                        {
LABEL_606:
                                          if (v207 < v208)
                                          {
LABEL_589:
                                            v198 = *v201;
                                            v200 = v201;
                                            if (!*v201)
                                              goto LABEL_624;
                                            continue;
                                          }
                                        }
                                        v204 = *((unsigned __int8 *)v201 + 31);
                                        v206 = *((unsigned __int8 *)v59 + 31);
                                        if (v204 == v206)
                                        {
                                          v204 = *((unsigned __int8 *)v201 + 32);
                                          v206 = *((unsigned __int8 *)v59 + 32);
                                          if (v204 == v206)
                                          {
                                            v204 = *((unsigned __int8 *)v201 + 33);
                                            v206 = *((unsigned __int8 *)v59 + 33);
                                            if (v204 == v206)
                                            {
                                              v204 = *((unsigned __int8 *)v201 + 34);
                                              v206 = *((unsigned __int8 *)v59 + 34);
                                              if (v204 == v206)
                                              {
                                                v204 = *((unsigned __int8 *)v201 + 35);
                                                v206 = *((unsigned __int8 *)v59 + 35);
                                                if (v204 == v206)
                                                {
                                                  v204 = *((unsigned __int8 *)v201 + 36);
                                                  v206 = *((unsigned __int8 *)v59 + 36);
                                                  if (v204 == v206)
                                                  {
                                                    v204 = *((unsigned __int8 *)v201 + 37);
                                                    v206 = *((unsigned __int8 *)v59 + 37);
                                                    if (v204 == v206)
                                                    {
                                                      v204 = *((unsigned __int8 *)v201 + 38);
                                                      v206 = *((unsigned __int8 *)v59 + 38);
                                                      if (v204 == v206)
                                                      {
                                                        v204 = *((unsigned __int8 *)v201 + 39);
                                                        v206 = *((unsigned __int8 *)v59 + 39);
                                                        if (v204 == v206)
                                                        {
                                                          v204 = *((unsigned __int8 *)v201 + 40);
                                                          v206 = *((unsigned __int8 *)v59 + 40);
                                                          if (v204 == v206)
                                                            goto LABEL_649;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                        goto LABEL_621;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            else
                            {
                              v206 = *v167;
                            }
                            break;
                          }
                          if (!v205)
                            goto LABEL_589;
LABEL_621:
                          if (v204 >= v206)
                            goto LABEL_649;
                          v198 = v201[1];
                          if (!v198)
                          {
                            v200 = v201 + 1;
                            goto LABEL_624;
                          }
                          continue;
                        }
                      }
                    }
                    else if (!v190 || (v192 = *(unsigned __int8 *)(v190 + 24), v191 = (_BYTE *)(v190 + 24), v192))
                    {
                      if (*(char **)v188 == v186)
                      {
                        v225 = *((_QWORD *)v186 + 1);
                        *(_QWORD *)v188 = v225;
                        if (v225)
                        {
                          *(_QWORD *)(v225 + 16) = v188;
                          v189 = *(char **)(v188 + 16);
                        }
                        *((_QWORD *)v186 + 2) = v189;
                        *(_QWORD *)(*(_QWORD *)(v188 + 16) + 8 * (**(_QWORD **)(v188 + 16) != v188)) = v186;
                        *((_QWORD *)v186 + 1) = v188;
                        *(_QWORD *)(v188 + 16) = v186;
                        v189 = (char *)*((_QWORD *)v186 + 2);
                        v186[24] = 1;
                        v189[24] = 0;
                        v188 = *((_QWORD *)v189 + 1);
                        v202 = *(char **)v188;
                        *((_QWORD *)v189 + 1) = *(_QWORD *)v188;
                        if (v202)
LABEL_584:
                          *((_QWORD *)v202 + 2) = v189;
                      }
                      else
                      {
                        *(_BYTE *)(v188 + 24) = 1;
                        v189[24] = 0;
                        v188 = *((_QWORD *)v189 + 1);
                        v202 = *(char **)v188;
                        *((_QWORD *)v189 + 1) = *(_QWORD *)v188;
                        if (v202)
                          goto LABEL_584;
                      }
                      *(_QWORD *)(v188 + 16) = *((_QWORD *)v189 + 2);
                      *(_QWORD *)(*((_QWORD *)v189 + 2) + 8 * (**((_QWORD **)v189 + 2) != (_QWORD)v189)) = v188;
                      *(_QWORD *)v188 = v189;
                      goto LABEL_586;
                    }
                    *(_BYTE *)(v188 + 24) = 1;
                    v186 = v189;
                    v189[24] = v189 == v187;
                    *v191 = 1;
                    if (v189 == v187)
                      goto LABEL_587;
                  }
                }
                continue;
              }
              break;
            }
            v180 = *((unsigned __int8 *)v33 + 33);
            v178 = *(unsigned __int8 *)(v174 + 33);
            v179 = v180 >= v178;
            if (v180 != v178)
              goto LABEL_556;
            v180 = *((unsigned __int8 *)v33 + 34);
            v178 = *(unsigned __int8 *)(v174 + 34);
            v179 = v180 >= v178;
            if (v180 != v178)
              goto LABEL_556;
            v180 = *((unsigned __int8 *)v33 + 35);
            v178 = *(unsigned __int8 *)(v174 + 35);
            v179 = v180 >= v178;
            if (v180 != v178)
              goto LABEL_556;
            v180 = *((unsigned __int8 *)v33 + 36);
            v178 = *(unsigned __int8 *)(v174 + 36);
            v179 = v180 >= v178;
            if (v180 != v178)
              goto LABEL_556;
            v180 = *((unsigned __int8 *)v33 + 37);
            v178 = *(unsigned __int8 *)(v174 + 37);
            v179 = v180 >= v178;
            if (v180 != v178)
              goto LABEL_556;
            v181 = *((unsigned __int8 *)v33 + 38);
            v182 = *(unsigned __int8 *)(v174 + 38);
            if (v181 != v182)
              goto LABEL_543;
            v181 = *((unsigned __int8 *)v33 + 39);
            v182 = *(unsigned __int8 *)(v174 + 39);
            if (v181 != v182)
              goto LABEL_543;
            v181 = *((unsigned __int8 *)v33 + 40);
            v182 = *(unsigned __int8 *)(v174 + 40);
            if (v181 != v182)
              goto LABEL_543;
            v181 = *((unsigned __int8 *)v33 + 41);
            v182 = *(unsigned __int8 *)(v174 + 41);
            if (v181 != v182)
              goto LABEL_543;
            v181 = *((unsigned __int8 *)v33 + 42);
            v182 = *(unsigned __int8 *)(v174 + 42);
            if (v181 != v182)
              goto LABEL_543;
            v181 = *((unsigned __int8 *)v33 + 43);
            v182 = *(unsigned __int8 *)(v174 + 43);
            if (v181 != v182)
              goto LABEL_543;
            v181 = *((unsigned __int8 *)v33 + 44);
            v182 = *(unsigned __int8 *)(v174 + 44);
            if (v181 != v182
              || (v181 = *((unsigned __int8 *)v33 + 45), v182 = *(unsigned __int8 *)(v174 + 45), v181 != v182)
              || (v181 = *((unsigned __int8 *)v33 + 46), v182 = *(unsigned __int8 *)(v174 + 46), v181 != v182)
              || (v181 = *((unsigned __int8 *)v33 + 47), v182 = *(unsigned __int8 *)(v174 + 47), v181 != v182))
            {
LABEL_543:
              if (v181 < v182)
              {
LABEL_526:
                v175 = *(char **)v174;
                v176 = (char **)v174;
                if (!*(_QWORD *)v174)
                  goto LABEL_561;
                continue;
              }
            }
            break;
          }
          v178 = *(unsigned __int8 *)(v174 + 38);
          v180 = *((unsigned __int8 *)v33 + 38);
          if (v178 != v180)
            goto LABEL_558;
          v178 = *(unsigned __int8 *)(v174 + 39);
          v180 = *((unsigned __int8 *)v33 + 39);
          if (v178 != v180)
            goto LABEL_558;
          v178 = *(unsigned __int8 *)(v174 + 40);
          v180 = *((unsigned __int8 *)v33 + 40);
          if (v178 != v180)
            goto LABEL_558;
          v178 = *(unsigned __int8 *)(v174 + 41);
          v180 = *((unsigned __int8 *)v33 + 41);
          if (v178 != v180)
            goto LABEL_558;
          v178 = *(unsigned __int8 *)(v174 + 42);
          v180 = *((unsigned __int8 *)v33 + 42);
          if (v178 != v180)
            goto LABEL_558;
          v178 = *(unsigned __int8 *)(v174 + 43);
          v180 = *((unsigned __int8 *)v33 + 43);
          if (v178 != v180)
            goto LABEL_558;
          v178 = *(unsigned __int8 *)(v174 + 44);
          v180 = *((unsigned __int8 *)v33 + 44);
          if (v178 != v180)
            goto LABEL_558;
          v178 = *(unsigned __int8 *)(v174 + 45);
          v180 = *((unsigned __int8 *)v33 + 45);
          if (v178 != v180)
            goto LABEL_558;
          v178 = *(unsigned __int8 *)(v174 + 46);
          v180 = *((unsigned __int8 *)v33 + 46);
          if (v178 != v180)
            goto LABEL_558;
          v178 = *(unsigned __int8 *)(v174 + 47);
          v180 = *((unsigned __int8 *)v33 + 47);
          if (v178 != v180)
            goto LABEL_558;
LABEL_580:
          v184 = (char *)v174;
          v199 = (void **)(v174 + 56);
          v198 = *(char **)(v174 + 56);
          v200 = (char **)(v174 + 56);
          v201 = (char **)(v174 + 56);
          if (v198)
            goto LABEL_588;
LABEL_624:
          v209 = (char *)operator new(0x30uLL);
          *(_OWORD *)(v209 + 25) = *(_OWORD *)v167;
          *(_QWORD *)v209 = 0;
          *((_QWORD *)v209 + 1) = 0;
          *((_QWORD *)v209 + 2) = v201;
          *v200 = v209;
          v210 = **((_QWORD **)v184 + 6);
          if (v210)
          {
            *((_QWORD *)v184 + 6) = v210;
            v209 = *v200;
          }
          v211 = (char *)*v199;
          v101 = v209 == *v199;
          v209[24] = v101;
          if (!v101)
          {
            do
            {
              v212 = *((_QWORD *)v209 + 2);
              if (*(_BYTE *)(v212 + 24))
                break;
              v213 = *(char **)(v212 + 16);
              v214 = *(_QWORD *)v213;
              if (*(_QWORD *)v213 == v212)
              {
                v217 = *((_QWORD *)v213 + 1);
                if (!v217 || (v218 = *(unsigned __int8 *)(v217 + 24), v215 = (_BYTE *)(v217 + 24), v218))
                {
                  if (*(char **)v212 == v209)
                  {
                    *(_BYTE *)(v212 + 24) = 1;
                    v213[24] = 0;
                    v221 = *(_QWORD *)(v212 + 8);
                    *(_QWORD *)v213 = v221;
                    if (v221)
                      goto LABEL_641;
                  }
                  else
                  {
                    v219 = *(uint64_t **)(v212 + 8);
                    v220 = *v219;
                    *(_QWORD *)(v212 + 8) = *v219;
                    if (v220)
                    {
                      *(_QWORD *)(v220 + 16) = v212;
                      v213 = *(char **)(v212 + 16);
                    }
                    v219[2] = (uint64_t)v213;
                    *(_QWORD *)(*(_QWORD *)(v212 + 16) + 8 * (**(_QWORD **)(v212 + 16) != v212)) = v219;
                    *v219 = v212;
                    *(_QWORD *)(v212 + 16) = v219;
                    v213 = (char *)v219[2];
                    v212 = *(_QWORD *)v213;
                    *((_BYTE *)v219 + 24) = 1;
                    v213[24] = 0;
                    v221 = *(_QWORD *)(v212 + 8);
                    *(_QWORD *)v213 = v221;
                    if (v221)
LABEL_641:
                      *(_QWORD *)(v221 + 16) = v213;
                  }
                  *(_QWORD *)(v212 + 16) = *((_QWORD *)v213 + 2);
                  *(_QWORD *)(*((_QWORD *)v213 + 2) + 8 * (**((_QWORD **)v213 + 2) != (_QWORD)v213)) = v212;
                  *(_QWORD *)(v212 + 8) = v213;
LABEL_647:
                  *((_QWORD *)v213 + 2) = v212;
                  break;
                }
              }
              else if (!v214 || (v216 = *(unsigned __int8 *)(v214 + 24), v215 = (_BYTE *)(v214 + 24), v216))
              {
                if (*(char **)v212 == v209)
                {
                  v226 = *((_QWORD *)v209 + 1);
                  *(_QWORD *)v212 = v226;
                  if (v226)
                  {
                    *(_QWORD *)(v226 + 16) = v212;
                    v213 = *(char **)(v212 + 16);
                  }
                  *((_QWORD *)v209 + 2) = v213;
                  *(_QWORD *)(*(_QWORD *)(v212 + 16) + 8 * (**(_QWORD **)(v212 + 16) != v212)) = v209;
                  *((_QWORD *)v209 + 1) = v212;
                  *(_QWORD *)(v212 + 16) = v209;
                  v213 = (char *)*((_QWORD *)v209 + 2);
                  v209[24] = 1;
                  v213[24] = 0;
                  v212 = *((_QWORD *)v213 + 1);
                  v222 = *(char **)v212;
                  *((_QWORD *)v213 + 1) = *(_QWORD *)v212;
                  if (v222)
LABEL_645:
                    *((_QWORD *)v222 + 2) = v213;
                }
                else
                {
                  *(_BYTE *)(v212 + 24) = 1;
                  v213[24] = 0;
                  v212 = *((_QWORD *)v213 + 1);
                  v222 = *(char **)v212;
                  *((_QWORD *)v213 + 1) = *(_QWORD *)v212;
                  if (v222)
                    goto LABEL_645;
                }
                *(_QWORD *)(v212 + 16) = *((_QWORD *)v213 + 2);
                *(_QWORD *)(*((_QWORD *)v213 + 2) + 8 * (**((_QWORD **)v213 + 2) != (_QWORD)v213)) = v212;
                *(_QWORD *)v212 = v213;
                goto LABEL_647;
              }
              *(_BYTE *)(v212 + 24) = 1;
              v209 = v213;
              v213[24] = v213 == v211;
              *v215 = 1;
            }
            while (v213 != v211);
          }
          ++*((_QWORD *)v184 + 8);
LABEL_649:
          v223 = (uint64_t *)v59[1];
          if (v223)
          {
            do
            {
              v224 = v223;
              v223 = (uint64_t *)*v223;
            }
            while (v223);
          }
          else
          {
            do
            {
              v224 = (uint64_t *)v59[2];
              v101 = *v224 == (_QWORD)v59;
              v59 = v224;
            }
            while (!v101);
          }
          v59 = v224;
        }
        while (v224 != v426);
      }
      sub_223198030((uint64_t)&v439, v440);
      sub_223198030((uint64_t)&v442, v443);
      v60 = (uint64_t *)v33[1];
      if (v60)
      {
        do
        {
          v61 = v60;
          v60 = (uint64_t *)*v60;
        }
        while (v60);
      }
      else
      {
        do
        {
          v61 = (uint64_t *)v33[2];
          v101 = *v61 == (_QWORD)v33;
          v33 = v61;
        }
        while (!v101);
      }
      v33 = v61;
      v34 = (unsigned __int8 *)(a1 + 16);
    }
    while (v61 != (uint64_t *)&v437);
  }
  v227 = *(unsigned __int8 **)(a1 + 8);
  v228 = (_QWORD *)(a6 + 48);
  if (v227 != (unsigned __int8 *)(a1 + 16))
  {
    do
    {
      v232 = v437;
      if (!v437)
        goto LABEL_699;
      v233 = (unsigned __int8 *)&v437;
      do
      {
        v234 = v232[32];
        v235 = v227[32];
        if (v234 != v235)
          goto LABEL_693;
        v234 = v232[33];
        v235 = v227[33];
        if (v234 != v235)
          goto LABEL_693;
        v234 = v232[34];
        v235 = v227[34];
        if (v234 != v235)
          goto LABEL_693;
        v234 = v232[35];
        v235 = v227[35];
        if (v234 != v235)
          goto LABEL_693;
        v234 = v232[36];
        v235 = v227[36];
        if (v234 != v235)
          goto LABEL_693;
        v234 = v232[37];
        v235 = v227[37];
        if (v234 != v235)
          goto LABEL_693;
        v234 = v232[38];
        v235 = v227[38];
        if (v234 != v235)
          goto LABEL_693;
        v234 = v232[39];
        v235 = v227[39];
        if (v234 != v235)
          goto LABEL_693;
        v234 = v232[40];
        v235 = v227[40];
        if (v234 != v235)
          goto LABEL_693;
        v234 = v232[41];
        v235 = v227[41];
        if (v234 != v235)
          goto LABEL_693;
        v234 = v232[42];
        v235 = v227[42];
        if (v234 != v235)
          goto LABEL_693;
        v234 = v232[43];
        v235 = v227[43];
        if (v234 != v235)
          goto LABEL_693;
        v234 = v232[44];
        v235 = v227[44];
        if (v234 != v235)
          goto LABEL_693;
        v234 = v232[45];
        v235 = v227[45];
        if (v234 == v235
          && (v234 = v232[46], v235 = v227[46], v234 == v235)
          && (v234 = v232[47], v235 = v227[47], v234 == v235))
        {
          v233 = v232;
        }
        else
        {
LABEL_693:
          if (v234 < v235)
            v232 += 8;
          else
            v233 = v232;
        }
        v232 = *(unsigned __int8 **)v232;
      }
      while (v232);
      if (v233 == (unsigned __int8 *)&v437 || (char)sub_22319835C(v227 + 32, v233 + 32) < 0)
      {
LABEL_699:
        sub_223475C18((_QWORD *)(a6 + 96), *((unsigned __int8 **)v227 + 6), v227 + 56);
        sub_2231A9984(v399, v227 + 32, (_OWORD *)v227 + 2);
      }
      v236 = (unsigned __int8 *)*((_QWORD *)v227 + 1);
      if (v236)
      {
        do
        {
          v237 = v236;
          v236 = *(unsigned __int8 **)v236;
        }
        while (v236);
      }
      else
      {
        do
        {
          v237 = (unsigned __int8 *)*((_QWORD *)v227 + 2);
          v101 = *(_QWORD *)v237 == (_QWORD)v227;
          v227 = v237;
        }
        while (!v101);
      }
      v227 = v237;
    }
    while (v237 != (unsigned __int8 *)(a1 + 16));
  }
  sub_223CA38D4(v446);
  sub_223C1E3F8((char *)&v436, a6);
  v229 = *v394;
  v384 = v394[1];
  v230 = (_QWORD *)(a6 + 56);
  if (*v394 != v384)
  {
    v385 = 0;
    v386 = 0;
    v231 = 0;
    while (1)
    {
      if (sub_223C8F01C(v229[240]) > 3)
        goto LABEL_715;
      sub_223C9E7D4((uint64_t)&v448, &v436, v229);
      v238 = (unsigned __int8 *)v448;
      if (!v450)
        ++v231;
      v239 = v386;
      if (v450)
        v239 = v386 + 1;
      v386 = v239;
      v387 = v231;
      if (v448 != &v449)
        break;
LABEL_714:
      sub_223198030((uint64_t)&v448, v449);
      v230 = (_QWORD *)(a6 + 56);
      v228 = (_QWORD *)(a6 + 48);
      v231 = v387;
LABEL_715:
      if ((sub_223C8F01C(v229[240]) & 6) != 4)
        goto LABEL_707;
      sub_223C9E7D4((uint64_t)&v448, &v436, v229);
      v240 = (unsigned __int8 *)v448;
      if (!v450)
        ++v231;
      v388 = v231;
      v241 = v385;
      if (v450)
        v241 = v385 + 1;
      v385 = v241;
      if (v448 != &v449)
      {
        while (1)
        {
          v298 = v240[25];
          v299 = v240[26];
          v300 = v240[27];
          v301 = v240[28];
          v302 = v240[29];
          v435 = v240[30];
          v428 = v240[31];
          v420 = v240[32];
          v413 = v240[33];
          v409 = v240[34];
          v405 = v240[35];
          v401 = v240[36];
          v398 = v240[37];
          v393 = v240[39];
          v396 = v240[38];
          v391 = v240[40];
          v303 = (char **)(a6 + 56);
          v304 = a6 + 56;
          v305 = *v416;
          if (*v416)
            break;
LABEL_918:
          v310 = (char *)operator new(0x48uLL);
          v311 = v310;
          v310[32] = v298;
          v310[33] = v299;
          v310[34] = v300;
          v310[35] = v301;
          v310[36] = v302;
          v310[37] = v435;
          v310[38] = v428;
          v310[39] = v420;
          v310[40] = v413;
          v310[41] = v409;
          v310[42] = v405;
          v310[43] = v401;
          v310[44] = v398;
          v310[45] = v396;
          v310[46] = v393;
          v310[47] = v391;
          *((_QWORD *)v310 + 8) = 0;
          *((_QWORD *)v310 + 7) = 0;
          *((_QWORD *)v310 + 6) = v310 + 56;
          *(_QWORD *)v310 = 0;
          *((_QWORD *)v310 + 1) = 0;
          *((_QWORD *)v310 + 2) = v304;
          *v303 = v310;
          v312 = v310;
          v313 = (_QWORD *)**v423;
          if (v313)
          {
            *v423 = v313;
            v312 = *v303;
          }
          v314 = *v416;
          v101 = v312 == *v416;
          v312[24] = v101;
          if (!v101)
          {
            do
            {
              v315 = *((_QWORD *)v312 + 2);
              if (*(_BYTE *)(v315 + 24))
                break;
              v316 = *(char **)(v315 + 16);
              v317 = *(_QWORD *)v316;
              if (*(_QWORD *)v316 == v315)
              {
                v320 = *((_QWORD *)v316 + 1);
                if (!v320 || (v321 = *(unsigned __int8 *)(v320 + 24), v318 = (_BYTE *)(v320 + 24), v321))
                {
                  if (*(char **)v315 == v312)
                  {
                    *(_BYTE *)(v315 + 24) = 1;
                    v316[24] = 0;
                    v324 = *(_QWORD *)(v315 + 8);
                    *(_QWORD *)v316 = v324;
                    if (v324)
                      goto LABEL_935;
                  }
                  else
                  {
                    v322 = *(uint64_t **)(v315 + 8);
                    v323 = *v322;
                    *(_QWORD *)(v315 + 8) = *v322;
                    if (v323)
                    {
                      *(_QWORD *)(v323 + 16) = v315;
                      v316 = *(char **)(v315 + 16);
                    }
                    v322[2] = (uint64_t)v316;
                    *(_QWORD *)(*(_QWORD *)(v315 + 16) + 8 * (**(_QWORD **)(v315 + 16) != v315)) = v322;
                    *v322 = v315;
                    *(_QWORD *)(v315 + 16) = v322;
                    v316 = (char *)v322[2];
                    v315 = *(_QWORD *)v316;
                    *((_BYTE *)v322 + 24) = 1;
                    v316[24] = 0;
                    v324 = *(_QWORD *)(v315 + 8);
                    *(_QWORD *)v316 = v324;
                    if (v324)
LABEL_935:
                      *(_QWORD *)(v324 + 16) = v316;
                  }
                  *(_QWORD *)(v315 + 16) = *((_QWORD *)v316 + 2);
                  *(_QWORD *)(*((_QWORD *)v316 + 2) + 8 * (**((_QWORD **)v316 + 2) != (_QWORD)v316)) = v315;
                  *(_QWORD *)(v315 + 8) = v316;
LABEL_943:
                  *((_QWORD *)v316 + 2) = v315;
                  break;
                }
              }
              else if (!v317 || (v319 = *(unsigned __int8 *)(v317 + 24), v318 = (_BYTE *)(v317 + 24), v319))
              {
                if (*(char **)v315 == v312)
                {
                  v352 = *((_QWORD *)v312 + 1);
                  *(_QWORD *)v315 = v352;
                  if (v352)
                  {
                    *(_QWORD *)(v352 + 16) = v315;
                    v316 = *(char **)(v315 + 16);
                  }
                  *((_QWORD *)v312 + 2) = v316;
                  *(_QWORD *)(*(_QWORD *)(v315 + 16) + 8 * (**(_QWORD **)(v315 + 16) != v315)) = v312;
                  *((_QWORD *)v312 + 1) = v315;
                  *(_QWORD *)(v315 + 16) = v312;
                  v316 = (char *)*((_QWORD *)v312 + 2);
                  v312[24] = 1;
                  v316[24] = 0;
                  v315 = *((_QWORD *)v316 + 1);
                  v329 = *(char **)v315;
                  *((_QWORD *)v316 + 1) = *(_QWORD *)v315;
                  if (v329)
LABEL_941:
                    *((_QWORD *)v329 + 2) = v316;
                }
                else
                {
                  *(_BYTE *)(v315 + 24) = 1;
                  v316[24] = 0;
                  v315 = *((_QWORD *)v316 + 1);
                  v329 = *(char **)v315;
                  *((_QWORD *)v316 + 1) = *(_QWORD *)v315;
                  if (v329)
                    goto LABEL_941;
                }
                *(_QWORD *)(v315 + 16) = *((_QWORD *)v316 + 2);
                *(_QWORD *)(*((_QWORD *)v316 + 2) + 8 * (**((_QWORD **)v316 + 2) != (_QWORD)v316)) = v315;
                *(_QWORD *)v315 = v316;
                goto LABEL_943;
              }
              *(_BYTE *)(v315 + 24) = 1;
              v312 = v316;
              v316[24] = v316 == v314;
              *v318 = 1;
            }
            while (v316 != v314);
          }
          ++*(_QWORD *)(a6 + 64);
          v326 = (void **)(v310 + 56);
          v325 = (char *)*((_QWORD *)v310 + 7);
          v327 = (char **)(v310 + 56);
          v328 = (char **)(v310 + 56);
          if (v325)
          {
LABEL_945:
            v330 = *v229;
            while (1)
            {
              v328 = (char **)v325;
              v331 = v325[25];
              v332 = v330 >= v331;
              if (v330 != v331)
                break;
              v333 = v229[1];
              v331 = *((unsigned __int8 *)v328 + 26);
              v332 = v333 >= v331;
              if (v333 == v331
                && (v333 = v229[2], v331 = *((unsigned __int8 *)v328 + 27), v332 = v333 >= v331, v333 == v331)
                && (v333 = v229[3], v331 = *((unsigned __int8 *)v328 + 28), v332 = v333 >= v331, v333 == v331))
              {
                v334 = v229[4];
                v335 = *((unsigned __int8 *)v328 + 29);
                if (v334 == v335)
                {
                  v334 = v229[5];
                  v335 = *((unsigned __int8 *)v328 + 30);
                  if (v334 == v335)
                  {
                    v334 = v229[6];
                    v335 = *((unsigned __int8 *)v328 + 31);
                    if (v334 == v335)
                    {
                      v334 = v229[7];
                      v335 = *((unsigned __int8 *)v328 + 32);
                      if (v334 == v335)
                      {
                        v334 = v229[8];
                        v335 = *((unsigned __int8 *)v328 + 33);
                        if (v334 == v335)
                        {
                          v334 = v229[9];
                          v335 = *((unsigned __int8 *)v328 + 34);
                          if (v334 == v335)
                          {
                            v334 = v229[10];
                            v335 = *((unsigned __int8 *)v328 + 35);
                            if (v334 == v335)
                            {
                              v334 = v229[11];
                              v335 = *((unsigned __int8 *)v328 + 36);
                              if (v334 == v335)
                              {
                                v334 = v229[12];
                                v335 = *((unsigned __int8 *)v328 + 37);
                                if (v334 == v335)
                                {
                                  v334 = v229[13];
                                  v335 = *((unsigned __int8 *)v328 + 38);
                                  if (v334 == v335)
                                  {
                                    v334 = v229[14];
                                    v335 = *((unsigned __int8 *)v328 + 39);
                                    if (v334 == v335)
                                    {
                                      v334 = v229[15];
                                      v335 = *((unsigned __int8 *)v328 + 40);
                                      if (v334 == v335)
                                        goto LABEL_964;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (v334 >= v335)
                {
LABEL_964:
                  v331 = *((unsigned __int8 *)v328 + 29);
                  v333 = v229[4];
                  if (v331 == v333)
                  {
                    v331 = *((unsigned __int8 *)v328 + 30);
                    v333 = v229[5];
                    if (v331 == v333)
                    {
                      v331 = *((unsigned __int8 *)v328 + 31);
                      v333 = v229[6];
                      if (v331 == v333)
                      {
                        v331 = *((unsigned __int8 *)v328 + 32);
                        v333 = v229[7];
                        if (v331 == v333)
                        {
                          v331 = *((unsigned __int8 *)v328 + 33);
                          v333 = v229[8];
                          if (v331 == v333)
                          {
                            v331 = *((unsigned __int8 *)v328 + 34);
                            v333 = v229[9];
                            if (v331 == v333)
                            {
                              v331 = *((unsigned __int8 *)v328 + 35);
                              v333 = v229[10];
                              if (v331 == v333)
                              {
                                v331 = *((unsigned __int8 *)v328 + 36);
                                v333 = v229[11];
                                if (v331 == v333)
                                {
                                  v331 = *((unsigned __int8 *)v328 + 37);
                                  v333 = v229[12];
                                  if (v331 == v333)
                                  {
                                    v331 = *((unsigned __int8 *)v328 + 38);
                                    v333 = v229[13];
                                    if (v331 == v333)
                                    {
                                      v331 = *((unsigned __int8 *)v328 + 39);
                                      v333 = v229[14];
                                      if (v331 == v333)
                                      {
                                        v331 = *((unsigned __int8 *)v328 + 40);
                                        v333 = v229[15];
                                        if (v331 == v333)
                                          goto LABEL_1008;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  goto LABEL_980;
                }
LABEL_946:
                v325 = *v328;
                v327 = v328;
                if (!*v328)
                  goto LABEL_983;
              }
              else
              {
LABEL_978:
                if (!v332)
                  goto LABEL_946;
LABEL_980:
                if (v331 >= v333)
                  goto LABEL_1008;
                v325 = v328[1];
                if (!v325)
                {
                  v327 = v328 + 1;
                  goto LABEL_983;
                }
              }
            }
            v333 = *v229;
            goto LABEL_978;
          }
LABEL_983:
          v336 = (char *)operator new(0x30uLL);
          *(_OWORD *)(v336 + 25) = *(_OWORD *)v229;
          *(_QWORD *)v336 = 0;
          *((_QWORD *)v336 + 1) = 0;
          *((_QWORD *)v336 + 2) = v328;
          *v327 = v336;
          v337 = **((_QWORD **)v311 + 6);
          if (v337)
          {
            *((_QWORD *)v311 + 6) = v337;
            v336 = *v327;
          }
          v338 = (char *)*v326;
          v101 = v336 == *v326;
          v336[24] = v101;
          if (!v101)
          {
            do
            {
              v339 = *((_QWORD *)v336 + 2);
              if (*(_BYTE *)(v339 + 24))
                break;
              v340 = *(char **)(v339 + 16);
              v341 = *(_QWORD *)v340;
              if (*(_QWORD *)v340 == v339)
              {
                v344 = *((_QWORD *)v340 + 1);
                if (!v344 || (v345 = *(unsigned __int8 *)(v344 + 24), v342 = (_BYTE *)(v344 + 24), v345))
                {
                  if (*(char **)v339 == v336)
                  {
                    *(_BYTE *)(v339 + 24) = 1;
                    v340[24] = 0;
                    v348 = *(_QWORD *)(v339 + 8);
                    *(_QWORD *)v340 = v348;
                    if (v348)
                      goto LABEL_1000;
                  }
                  else
                  {
                    v346 = *(uint64_t **)(v339 + 8);
                    v347 = *v346;
                    *(_QWORD *)(v339 + 8) = *v346;
                    if (v347)
                    {
                      *(_QWORD *)(v347 + 16) = v339;
                      v340 = *(char **)(v339 + 16);
                    }
                    v346[2] = (uint64_t)v340;
                    *(_QWORD *)(*(_QWORD *)(v339 + 16) + 8 * (**(_QWORD **)(v339 + 16) != v339)) = v346;
                    *v346 = v339;
                    *(_QWORD *)(v339 + 16) = v346;
                    v340 = (char *)v346[2];
                    v339 = *(_QWORD *)v340;
                    *((_BYTE *)v346 + 24) = 1;
                    v340[24] = 0;
                    v348 = *(_QWORD *)(v339 + 8);
                    *(_QWORD *)v340 = v348;
                    if (v348)
LABEL_1000:
                      *(_QWORD *)(v348 + 16) = v340;
                  }
                  *(_QWORD *)(v339 + 16) = *((_QWORD *)v340 + 2);
                  *(_QWORD *)(*((_QWORD *)v340 + 2) + 8 * (**((_QWORD **)v340 + 2) != (_QWORD)v340)) = v339;
                  *(_QWORD *)(v339 + 8) = v340;
LABEL_1006:
                  *((_QWORD *)v340 + 2) = v339;
                  break;
                }
              }
              else if (!v341 || (v343 = *(unsigned __int8 *)(v341 + 24), v342 = (_BYTE *)(v341 + 24), v343))
              {
                if (*(char **)v339 == v336)
                {
                  v353 = *((_QWORD *)v336 + 1);
                  *(_QWORD *)v339 = v353;
                  if (v353)
                  {
                    *(_QWORD *)(v353 + 16) = v339;
                    v340 = *(char **)(v339 + 16);
                  }
                  *((_QWORD *)v336 + 2) = v340;
                  *(_QWORD *)(*(_QWORD *)(v339 + 16) + 8 * (**(_QWORD **)(v339 + 16) != v339)) = v336;
                  *((_QWORD *)v336 + 1) = v339;
                  *(_QWORD *)(v339 + 16) = v336;
                  v340 = (char *)*((_QWORD *)v336 + 2);
                  v336[24] = 1;
                  v340[24] = 0;
                  v339 = *((_QWORD *)v340 + 1);
                  v349 = *(char **)v339;
                  *((_QWORD *)v340 + 1) = *(_QWORD *)v339;
                  if (v349)
LABEL_1004:
                    *((_QWORD *)v349 + 2) = v340;
                }
                else
                {
                  *(_BYTE *)(v339 + 24) = 1;
                  v340[24] = 0;
                  v339 = *((_QWORD *)v340 + 1);
                  v349 = *(char **)v339;
                  *((_QWORD *)v340 + 1) = *(_QWORD *)v339;
                  if (v349)
                    goto LABEL_1004;
                }
                *(_QWORD *)(v339 + 16) = *((_QWORD *)v340 + 2);
                *(_QWORD *)(*((_QWORD *)v340 + 2) + 8 * (**((_QWORD **)v340 + 2) != (_QWORD)v340)) = v339;
                *(_QWORD *)v339 = v340;
                goto LABEL_1006;
              }
              *(_BYTE *)(v339 + 24) = 1;
              v336 = v340;
              v340[24] = v340 == v338;
              *v342 = 1;
            }
            while (v340 != v338);
          }
          ++*((_QWORD *)v311 + 8);
LABEL_1008:
          v350 = (uint64_t *)*((_QWORD *)v240 + 1);
          if (v350)
          {
            do
            {
              v351 = (uint64_t **)v350;
              v350 = (uint64_t *)*v350;
            }
            while (v350);
          }
          else
          {
            do
            {
              v351 = (uint64_t **)*((_QWORD *)v240 + 2);
              v101 = *v351 == (uint64_t *)v240;
              v240 = (unsigned __int8 *)v351;
            }
            while (!v101);
          }
          v240 = (unsigned __int8 *)v351;
          if (v351 == &v449)
            goto LABEL_706;
        }
        while (1)
        {
          while (1)
          {
            v304 = (uint64_t)v305;
            v306 = v305[32];
            if (v298 == v306)
              break;
            v309 = v240[25];
            if (v298 >= v306)
              goto LABEL_915;
LABEL_877:
            v305 = *(char **)v304;
            v303 = (char **)v304;
            if (!*(_QWORD *)v304)
              goto LABEL_918;
          }
          v306 = *(unsigned __int8 *)(v304 + 33);
          if (v299 != v306)
          {
            v309 = v240[26];
            if (v299 >= v306)
              goto LABEL_915;
            goto LABEL_877;
          }
          v306 = *(unsigned __int8 *)(v304 + 34);
          if (v300 != v306)
          {
            v309 = v240[27];
            if (v300 >= v306)
              goto LABEL_915;
            goto LABEL_877;
          }
          v306 = *(unsigned __int8 *)(v304 + 35);
          if (v301 != v306)
          {
            v309 = v240[28];
            if (v301 >= v306)
              goto LABEL_915;
            goto LABEL_877;
          }
          v307 = *(unsigned __int8 *)(v304 + 36);
          v308 = v240[29];
          if (v302 != v307)
            goto LABEL_894;
          v307 = *(unsigned __int8 *)(v304 + 37);
          v308 = v240[30];
          if (v435 != v307)
            goto LABEL_894;
          v307 = *(unsigned __int8 *)(v304 + 38);
          v308 = v240[31];
          if (v428 != v307)
            goto LABEL_894;
          v307 = *(unsigned __int8 *)(v304 + 39);
          v308 = v240[32];
          if (v420 != v307)
            goto LABEL_894;
          v307 = *(unsigned __int8 *)(v304 + 40);
          v308 = v240[33];
          if (v413 != v307)
            goto LABEL_894;
          v307 = *(unsigned __int8 *)(v304 + 41);
          v308 = v240[34];
          if (v409 != v307)
            goto LABEL_894;
          v307 = *(unsigned __int8 *)(v304 + 42);
          v308 = v240[35];
          if (v405 != v307)
            goto LABEL_894;
          v307 = *(unsigned __int8 *)(v304 + 43);
          v308 = v240[36];
          if (v401 != v307)
            goto LABEL_894;
          v307 = *(unsigned __int8 *)(v304 + 44);
          v308 = v240[37];
          if (v398 != v307
            || (v307 = *(unsigned __int8 *)(v304 + 45), v308 = v240[38], v396 != v307)
            || (v307 = *(unsigned __int8 *)(v304 + 46), v308 = v240[39], v393 != v307)
            || (v307 = *(unsigned __int8 *)(v304 + 47), v308 = v240[40], v391 != v307))
          {
LABEL_894:
            if (v308 < v307)
              goto LABEL_877;
          }
          v306 = *(unsigned __int8 *)(v304 + 36);
          v309 = v240[29];
          if (v306 == v302)
          {
            v306 = *(unsigned __int8 *)(v304 + 37);
            v309 = v240[30];
            if (v306 == v435)
            {
              v306 = *(unsigned __int8 *)(v304 + 38);
              v309 = v240[31];
              if (v306 == v428)
              {
                v306 = *(unsigned __int8 *)(v304 + 39);
                v309 = v240[32];
                if (v306 == v420)
                {
                  v306 = *(unsigned __int8 *)(v304 + 40);
                  v309 = v240[33];
                  if (v306 == v413)
                  {
                    v306 = *(unsigned __int8 *)(v304 + 41);
                    v309 = v240[34];
                    if (v306 == v409)
                    {
                      v306 = *(unsigned __int8 *)(v304 + 42);
                      v309 = v240[35];
                      if (v306 == v405)
                      {
                        v306 = *(unsigned __int8 *)(v304 + 43);
                        v309 = v240[36];
                        if (v306 == v401)
                        {
                          v306 = *(unsigned __int8 *)(v304 + 44);
                          v309 = v240[37];
                          if (v306 == v398)
                          {
                            v306 = *(unsigned __int8 *)(v304 + 45);
                            v309 = v240[38];
                            if (v306 == v396)
                            {
                              v306 = *(unsigned __int8 *)(v304 + 46);
                              v309 = v240[39];
                              if (v306 == v393)
                              {
                                v306 = *(unsigned __int8 *)(v304 + 47);
                                v309 = v240[40];
                                if (v306 == v391)
                                {
LABEL_937:
                                  v311 = (char *)v304;
                                  v326 = (void **)(v304 + 56);
                                  v325 = *(char **)(v304 + 56);
                                  v327 = (char **)(v304 + 56);
                                  v328 = (char **)(v304 + 56);
                                  if (!v325)
                                    goto LABEL_983;
                                  goto LABEL_945;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_915:
          if (v306 >= v309)
            goto LABEL_937;
          v305 = *(char **)(v304 + 8);
          if (!v305)
          {
            v303 = (char **)(v304 + 8);
            goto LABEL_918;
          }
        }
      }
LABEL_706:
      sub_223198030((uint64_t)&v448, v449);
      v230 = (_QWORD *)(a6 + 56);
      v228 = (_QWORD *)(a6 + 48);
      v231 = v388;
LABEL_707:
      v229 += 248;
      if (v229 == v384)
        goto LABEL_1027;
    }
    while (1)
    {
      v242 = v238[25];
      v243 = v238[26];
      v244 = v238[27];
      v245 = v238[28];
      v246 = v238[29];
      v434 = v238[30];
      v427 = v238[31];
      v419 = v238[32];
      v412 = v238[33];
      v408 = v238[34];
      v404 = v238[35];
      v400 = v238[36];
      v397 = v238[37];
      v392 = v238[39];
      v395 = v238[38];
      v390 = v238[40];
      v247 = (char **)(a6 + 80);
      v248 = a6 + 80;
      v249 = (uint64_t)*v429;
      if (*v429)
        break;
LABEL_766:
      v254 = (char *)operator new(0x48uLL);
      v255 = v254;
      v254[32] = v242;
      v254[33] = v243;
      v254[34] = v244;
      v254[35] = v245;
      v254[36] = v246;
      v254[37] = v434;
      v254[38] = v427;
      v254[39] = v419;
      v254[40] = v412;
      v254[41] = v408;
      v254[42] = v404;
      v254[43] = v400;
      v254[44] = v397;
      v254[45] = v395;
      v254[46] = v392;
      v254[47] = v390;
      *((_QWORD *)v254 + 8) = 0;
      *((_QWORD *)v254 + 7) = 0;
      *((_QWORD *)v254 + 6) = v254 + 56;
      *(_QWORD *)v254 = 0;
      *((_QWORD *)v254 + 1) = 0;
      *((_QWORD *)v254 + 2) = v248;
      *v247 = v254;
      v256 = v254;
      v257 = (_QWORD *)**v389;
      if (v257)
      {
        *v389 = v257;
        v256 = *v247;
      }
      v258 = *v429;
      v101 = v256 == *v429;
      v256[24] = v101;
      if (!v101)
      {
        do
        {
          v259 = *((_QWORD *)v256 + 2);
          if (*(_BYTE *)(v259 + 24))
            break;
          v260 = *(char **)(v259 + 16);
          v261 = *(_QWORD *)v260;
          if (*(_QWORD *)v260 == v259)
          {
            v264 = *((_QWORD *)v260 + 1);
            if (!v264 || (v265 = *(unsigned __int8 *)(v264 + 24), v262 = (_BYTE *)(v264 + 24), v265))
            {
              if (*(char **)v259 == v256)
              {
                *(_BYTE *)(v259 + 24) = 1;
                v260[24] = 0;
                v268 = *(_QWORD *)(v259 + 8);
                *(_QWORD *)v260 = v268;
                if (v268)
                  goto LABEL_783;
              }
              else
              {
                v266 = *(uint64_t **)(v259 + 8);
                v267 = *v266;
                *(_QWORD *)(v259 + 8) = *v266;
                if (v267)
                {
                  *(_QWORD *)(v267 + 16) = v259;
                  v260 = *(char **)(v259 + 16);
                }
                v266[2] = (uint64_t)v260;
                *(_QWORD *)(*(_QWORD *)(v259 + 16) + 8 * (**(_QWORD **)(v259 + 16) != v259)) = v266;
                *v266 = v259;
                *(_QWORD *)(v259 + 16) = v266;
                v260 = (char *)v266[2];
                v259 = *(_QWORD *)v260;
                *((_BYTE *)v266 + 24) = 1;
                v260[24] = 0;
                v268 = *(_QWORD *)(v259 + 8);
                *(_QWORD *)v260 = v268;
                if (v268)
LABEL_783:
                  *(_QWORD *)(v268 + 16) = v260;
              }
              *(_QWORD *)(v259 + 16) = *((_QWORD *)v260 + 2);
              *(_QWORD *)(*((_QWORD *)v260 + 2) + 8 * (**((_QWORD **)v260 + 2) != (_QWORD)v260)) = v259;
              *(_QWORD *)(v259 + 8) = v260;
LABEL_791:
              *((_QWORD *)v260 + 2) = v259;
              break;
            }
          }
          else if (!v261 || (v263 = *(unsigned __int8 *)(v261 + 24), v262 = (_BYTE *)(v261 + 24), v263))
          {
            if (*(char **)v259 == v256)
            {
              v296 = *((_QWORD *)v256 + 1);
              *(_QWORD *)v259 = v296;
              if (v296)
              {
                *(_QWORD *)(v296 + 16) = v259;
                v260 = *(char **)(v259 + 16);
              }
              *((_QWORD *)v256 + 2) = v260;
              *(_QWORD *)(*(_QWORD *)(v259 + 16) + 8 * (**(_QWORD **)(v259 + 16) != v259)) = v256;
              *((_QWORD *)v256 + 1) = v259;
              *(_QWORD *)(v259 + 16) = v256;
              v260 = (char *)*((_QWORD *)v256 + 2);
              v256[24] = 1;
              v260[24] = 0;
              v259 = *((_QWORD *)v260 + 1);
              v273 = *(char **)v259;
              *((_QWORD *)v260 + 1) = *(_QWORD *)v259;
              if (v273)
LABEL_789:
                *((_QWORD *)v273 + 2) = v260;
            }
            else
            {
              *(_BYTE *)(v259 + 24) = 1;
              v260[24] = 0;
              v259 = *((_QWORD *)v260 + 1);
              v273 = *(char **)v259;
              *((_QWORD *)v260 + 1) = *(_QWORD *)v259;
              if (v273)
                goto LABEL_789;
            }
            *(_QWORD *)(v259 + 16) = *((_QWORD *)v260 + 2);
            *(_QWORD *)(*((_QWORD *)v260 + 2) + 8 * (**((_QWORD **)v260 + 2) != (_QWORD)v260)) = v259;
            *(_QWORD *)v259 = v260;
            goto LABEL_791;
          }
          *(_BYTE *)(v259 + 24) = 1;
          v256 = v260;
          v260[24] = v260 == v258;
          *v262 = 1;
        }
        while (v260 != v258);
      }
      ++*(_QWORD *)(a6 + 88);
      v270 = (void **)(v254 + 56);
      v269 = (char *)*((_QWORD *)v254 + 7);
      v271 = (char **)(v254 + 56);
      v272 = (char **)(v254 + 56);
      if (v269)
      {
LABEL_793:
        v274 = *v229;
        while (1)
        {
          v272 = (char **)v269;
          v275 = v269[25];
          v276 = v274 >= v275;
          if (v274 != v275)
            break;
          v277 = v229[1];
          v275 = *((unsigned __int8 *)v272 + 26);
          v276 = v277 >= v275;
          if (v277 == v275
            && (v277 = v229[2], v275 = *((unsigned __int8 *)v272 + 27), v276 = v277 >= v275, v277 == v275)
            && (v277 = v229[3], v275 = *((unsigned __int8 *)v272 + 28), v276 = v277 >= v275, v277 == v275))
          {
            v278 = v229[4];
            v279 = *((unsigned __int8 *)v272 + 29);
            if (v278 == v279)
            {
              v278 = v229[5];
              v279 = *((unsigned __int8 *)v272 + 30);
              if (v278 == v279)
              {
                v278 = v229[6];
                v279 = *((unsigned __int8 *)v272 + 31);
                if (v278 == v279)
                {
                  v278 = v229[7];
                  v279 = *((unsigned __int8 *)v272 + 32);
                  if (v278 == v279)
                  {
                    v278 = v229[8];
                    v279 = *((unsigned __int8 *)v272 + 33);
                    if (v278 == v279)
                    {
                      v278 = v229[9];
                      v279 = *((unsigned __int8 *)v272 + 34);
                      if (v278 == v279)
                      {
                        v278 = v229[10];
                        v279 = *((unsigned __int8 *)v272 + 35);
                        if (v278 == v279)
                        {
                          v278 = v229[11];
                          v279 = *((unsigned __int8 *)v272 + 36);
                          if (v278 == v279)
                          {
                            v278 = v229[12];
                            v279 = *((unsigned __int8 *)v272 + 37);
                            if (v278 == v279)
                            {
                              v278 = v229[13];
                              v279 = *((unsigned __int8 *)v272 + 38);
                              if (v278 == v279)
                              {
                                v278 = v229[14];
                                v279 = *((unsigned __int8 *)v272 + 39);
                                if (v278 == v279)
                                {
                                  v278 = v229[15];
                                  v279 = *((unsigned __int8 *)v272 + 40);
                                  if (v278 == v279)
                                    goto LABEL_812;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (v278 >= v279)
            {
LABEL_812:
              v275 = *((unsigned __int8 *)v272 + 29);
              v277 = v229[4];
              if (v275 == v277)
              {
                v275 = *((unsigned __int8 *)v272 + 30);
                v277 = v229[5];
                if (v275 == v277)
                {
                  v275 = *((unsigned __int8 *)v272 + 31);
                  v277 = v229[6];
                  if (v275 == v277)
                  {
                    v275 = *((unsigned __int8 *)v272 + 32);
                    v277 = v229[7];
                    if (v275 == v277)
                    {
                      v275 = *((unsigned __int8 *)v272 + 33);
                      v277 = v229[8];
                      if (v275 == v277)
                      {
                        v275 = *((unsigned __int8 *)v272 + 34);
                        v277 = v229[9];
                        if (v275 == v277)
                        {
                          v275 = *((unsigned __int8 *)v272 + 35);
                          v277 = v229[10];
                          if (v275 == v277)
                          {
                            v275 = *((unsigned __int8 *)v272 + 36);
                            v277 = v229[11];
                            if (v275 == v277)
                            {
                              v275 = *((unsigned __int8 *)v272 + 37);
                              v277 = v229[12];
                              if (v275 == v277)
                              {
                                v275 = *((unsigned __int8 *)v272 + 38);
                                v277 = v229[13];
                                if (v275 == v277)
                                {
                                  v275 = *((unsigned __int8 *)v272 + 39);
                                  v277 = v229[14];
                                  if (v275 == v277)
                                  {
                                    v275 = *((unsigned __int8 *)v272 + 40);
                                    v277 = v229[15];
                                    if (v275 == v277)
                                      goto LABEL_856;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_828;
            }
LABEL_794:
            v269 = *v272;
            v271 = v272;
            if (!*v272)
              goto LABEL_831;
          }
          else
          {
LABEL_826:
            if (!v276)
              goto LABEL_794;
LABEL_828:
            if (v275 >= v277)
              goto LABEL_856;
            v269 = v272[1];
            if (!v269)
            {
              v271 = v272 + 1;
              goto LABEL_831;
            }
          }
        }
        v277 = *v229;
        goto LABEL_826;
      }
LABEL_831:
      v280 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v280 + 25) = *(_OWORD *)v229;
      *(_QWORD *)v280 = 0;
      *((_QWORD *)v280 + 1) = 0;
      *((_QWORD *)v280 + 2) = v272;
      *v271 = v280;
      v281 = **((_QWORD **)v255 + 6);
      if (v281)
      {
        *((_QWORD *)v255 + 6) = v281;
        v280 = *v271;
      }
      v282 = (char *)*v270;
      v101 = v280 == *v270;
      v280[24] = v101;
      if (!v101)
      {
        do
        {
          v283 = *((_QWORD *)v280 + 2);
          if (*(_BYTE *)(v283 + 24))
            break;
          v284 = *(char **)(v283 + 16);
          v285 = *(_QWORD *)v284;
          if (*(_QWORD *)v284 == v283)
          {
            v288 = *((_QWORD *)v284 + 1);
            if (!v288 || (v289 = *(unsigned __int8 *)(v288 + 24), v286 = (_BYTE *)(v288 + 24), v289))
            {
              if (*(char **)v283 == v280)
              {
                *(_BYTE *)(v283 + 24) = 1;
                v284[24] = 0;
                v292 = *(_QWORD *)(v283 + 8);
                *(_QWORD *)v284 = v292;
                if (v292)
                  goto LABEL_848;
              }
              else
              {
                v290 = *(uint64_t **)(v283 + 8);
                v291 = *v290;
                *(_QWORD *)(v283 + 8) = *v290;
                if (v291)
                {
                  *(_QWORD *)(v291 + 16) = v283;
                  v284 = *(char **)(v283 + 16);
                }
                v290[2] = (uint64_t)v284;
                *(_QWORD *)(*(_QWORD *)(v283 + 16) + 8 * (**(_QWORD **)(v283 + 16) != v283)) = v290;
                *v290 = v283;
                *(_QWORD *)(v283 + 16) = v290;
                v284 = (char *)v290[2];
                v283 = *(_QWORD *)v284;
                *((_BYTE *)v290 + 24) = 1;
                v284[24] = 0;
                v292 = *(_QWORD *)(v283 + 8);
                *(_QWORD *)v284 = v292;
                if (v292)
LABEL_848:
                  *(_QWORD *)(v292 + 16) = v284;
              }
              *(_QWORD *)(v283 + 16) = *((_QWORD *)v284 + 2);
              *(_QWORD *)(*((_QWORD *)v284 + 2) + 8 * (**((_QWORD **)v284 + 2) != (_QWORD)v284)) = v283;
              *(_QWORD *)(v283 + 8) = v284;
LABEL_854:
              *((_QWORD *)v284 + 2) = v283;
              break;
            }
          }
          else if (!v285 || (v287 = *(unsigned __int8 *)(v285 + 24), v286 = (_BYTE *)(v285 + 24), v287))
          {
            if (*(char **)v283 == v280)
            {
              v297 = *((_QWORD *)v280 + 1);
              *(_QWORD *)v283 = v297;
              if (v297)
              {
                *(_QWORD *)(v297 + 16) = v283;
                v284 = *(char **)(v283 + 16);
              }
              *((_QWORD *)v280 + 2) = v284;
              *(_QWORD *)(*(_QWORD *)(v283 + 16) + 8 * (**(_QWORD **)(v283 + 16) != v283)) = v280;
              *((_QWORD *)v280 + 1) = v283;
              *(_QWORD *)(v283 + 16) = v280;
              v284 = (char *)*((_QWORD *)v280 + 2);
              v280[24] = 1;
              v284[24] = 0;
              v283 = *((_QWORD *)v284 + 1);
              v293 = *(char **)v283;
              *((_QWORD *)v284 + 1) = *(_QWORD *)v283;
              if (v293)
LABEL_852:
                *((_QWORD *)v293 + 2) = v284;
            }
            else
            {
              *(_BYTE *)(v283 + 24) = 1;
              v284[24] = 0;
              v283 = *((_QWORD *)v284 + 1);
              v293 = *(char **)v283;
              *((_QWORD *)v284 + 1) = *(_QWORD *)v283;
              if (v293)
                goto LABEL_852;
            }
            *(_QWORD *)(v283 + 16) = *((_QWORD *)v284 + 2);
            *(_QWORD *)(*((_QWORD *)v284 + 2) + 8 * (**((_QWORD **)v284 + 2) != (_QWORD)v284)) = v283;
            *(_QWORD *)v283 = v284;
            goto LABEL_854;
          }
          *(_BYTE *)(v283 + 24) = 1;
          v280 = v284;
          v284[24] = v284 == v282;
          *v286 = 1;
        }
        while (v284 != v282);
      }
      ++*((_QWORD *)v255 + 8);
LABEL_856:
      v294 = (uint64_t *)*((_QWORD *)v238 + 1);
      if (v294)
      {
        do
        {
          v295 = (uint64_t **)v294;
          v294 = (uint64_t *)*v294;
        }
        while (v294);
      }
      else
      {
        do
        {
          v295 = (uint64_t **)*((_QWORD *)v238 + 2);
          v101 = *v295 == (uint64_t *)v238;
          v238 = (unsigned __int8 *)v295;
        }
        while (!v101);
      }
      v238 = (unsigned __int8 *)v295;
      if (v295 == &v449)
        goto LABEL_714;
    }
    while (1)
    {
      while (1)
      {
        v248 = v249;
        v250 = *(unsigned __int8 *)(v249 + 32);
        if (v242 == v250)
          break;
        v253 = v238[25];
        if (v242 >= v250)
          goto LABEL_763;
LABEL_725:
        v249 = *(_QWORD *)v248;
        v247 = (char **)v248;
        if (!*(_QWORD *)v248)
          goto LABEL_766;
      }
      v250 = *(unsigned __int8 *)(v248 + 33);
      if (v243 != v250)
      {
        v253 = v238[26];
        if (v243 >= v250)
          goto LABEL_763;
        goto LABEL_725;
      }
      v250 = *(unsigned __int8 *)(v248 + 34);
      if (v244 != v250)
      {
        v253 = v238[27];
        if (v244 >= v250)
          goto LABEL_763;
        goto LABEL_725;
      }
      v250 = *(unsigned __int8 *)(v248 + 35);
      if (v245 != v250)
      {
        v253 = v238[28];
        if (v245 >= v250)
          goto LABEL_763;
        goto LABEL_725;
      }
      v251 = *(unsigned __int8 *)(v248 + 36);
      v252 = v238[29];
      if (v246 != v251)
        goto LABEL_742;
      v251 = *(unsigned __int8 *)(v248 + 37);
      v252 = v238[30];
      if (v434 != v251)
        goto LABEL_742;
      v251 = *(unsigned __int8 *)(v248 + 38);
      v252 = v238[31];
      if (v427 != v251)
        goto LABEL_742;
      v251 = *(unsigned __int8 *)(v248 + 39);
      v252 = v238[32];
      if (v419 != v251)
        goto LABEL_742;
      v251 = *(unsigned __int8 *)(v248 + 40);
      v252 = v238[33];
      if (v412 != v251)
        goto LABEL_742;
      v251 = *(unsigned __int8 *)(v248 + 41);
      v252 = v238[34];
      if (v408 != v251)
        goto LABEL_742;
      v251 = *(unsigned __int8 *)(v248 + 42);
      v252 = v238[35];
      if (v404 != v251)
        goto LABEL_742;
      v251 = *(unsigned __int8 *)(v248 + 43);
      v252 = v238[36];
      if (v400 != v251)
        goto LABEL_742;
      v251 = *(unsigned __int8 *)(v248 + 44);
      v252 = v238[37];
      if (v397 != v251
        || (v251 = *(unsigned __int8 *)(v248 + 45), v252 = v238[38], v395 != v251)
        || (v251 = *(unsigned __int8 *)(v248 + 46), v252 = v238[39], v392 != v251)
        || (v251 = *(unsigned __int8 *)(v248 + 47), v252 = v238[40], v390 != v251))
      {
LABEL_742:
        if (v252 < v251)
          goto LABEL_725;
      }
      v250 = *(unsigned __int8 *)(v248 + 36);
      v253 = v238[29];
      if (v250 == v246)
      {
        v250 = *(unsigned __int8 *)(v248 + 37);
        v253 = v238[30];
        if (v250 == v434)
        {
          v250 = *(unsigned __int8 *)(v248 + 38);
          v253 = v238[31];
          if (v250 == v427)
          {
            v250 = *(unsigned __int8 *)(v248 + 39);
            v253 = v238[32];
            if (v250 == v419)
            {
              v250 = *(unsigned __int8 *)(v248 + 40);
              v253 = v238[33];
              if (v250 == v412)
              {
                v250 = *(unsigned __int8 *)(v248 + 41);
                v253 = v238[34];
                if (v250 == v408)
                {
                  v250 = *(unsigned __int8 *)(v248 + 42);
                  v253 = v238[35];
                  if (v250 == v404)
                  {
                    v250 = *(unsigned __int8 *)(v248 + 43);
                    v253 = v238[36];
                    if (v250 == v400)
                    {
                      v250 = *(unsigned __int8 *)(v248 + 44);
                      v253 = v238[37];
                      if (v250 == v397)
                      {
                        v250 = *(unsigned __int8 *)(v248 + 45);
                        v253 = v238[38];
                        if (v250 == v395)
                        {
                          v250 = *(unsigned __int8 *)(v248 + 46);
                          v253 = v238[39];
                          if (v250 == v392)
                          {
                            v250 = *(unsigned __int8 *)(v248 + 47);
                            v253 = v238[40];
                            if (v250 == v390)
                            {
LABEL_785:
                              v255 = (char *)v248;
                              v270 = (void **)(v248 + 56);
                              v269 = *(char **)(v248 + 56);
                              v271 = (char **)(v248 + 56);
                              v272 = (char **)(v248 + 56);
                              if (!v269)
                                goto LABEL_831;
                              goto LABEL_793;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_763:
      if (v250 >= v253)
        goto LABEL_785;
      v249 = *(_QWORD *)(v248 + 8);
      if (!v249)
      {
        v247 = (char **)(v248 + 8);
        goto LABEL_766;
      }
    }
  }
  v231 = 0;
  v385 = 0;
  v386 = 0;
LABEL_1027:
  if ((uint64_t **)(a1 + 8) != &v436)
    sub_223476408((uint64_t **)(a1 + 8), v436, (uint64_t *)&v437);
  v355 = *v382;
  v354 = v382[1];
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
  v356 = *(_QWORD *)(a6 + 16);
  v357 = *(_QWORD *)(a6 + 40);
  v358 = *(_QWORD *)(a1 + 48) + v357;
  *(_QWORD *)(a1 + 40) += v356;
  *(_QWORD *)(a1 + 48) = v358;
  v359 = *(char ***)(a6 + 72);
  if (v359 == v429)
  {
    v360 = 0;
  }
  else
  {
    v360 = 0;
    v361 = *(char ***)(a6 + 72);
    do
    {
      v362 = v361[1];
      v363 = (char *)v361;
      if (v362)
      {
        do
        {
          v364 = (char **)v362;
          v362 = *(char **)v362;
        }
        while (v362);
      }
      else
      {
        do
        {
          v364 = (char **)*((_QWORD *)v363 + 2);
          v101 = *v364 == v363;
          v363 = (char *)v364;
        }
        while (!v101);
      }
      v360 += (uint64_t)v361[8];
      v361 = v364;
    }
    while (v364 != v429);
  }
  v365 = v354 - v355;
  *(_QWORD *)(a1 + 56) = v360;
  v366 = (_QWORD *)*v228;
  if ((_QWORD *)*v228 == v230)
  {
    v367 = 0;
  }
  else
  {
    v367 = 0;
    v368 = (_QWORD *)*v228;
    do
    {
      v369 = (_QWORD *)v368[1];
      v370 = v368;
      if (v369)
      {
        do
        {
          v371 = v369;
          v369 = (_QWORD *)*v369;
        }
        while (v369);
      }
      else
      {
        do
        {
          v371 = (_QWORD *)v370[2];
          v101 = *v371 == (_QWORD)v370;
          v370 = v371;
        }
        while (!v101);
      }
      v367 += v368[8];
      v368 = v371;
    }
    while (v371 != v230);
  }
  v372 = v365 >> 3;
  *(_QWORD *)(a1 + 64) = v367;
  if (v359 == v429)
  {
    v373 = 0;
  }
  else
  {
    v373 = 0;
    do
    {
      v374 = v359[1];
      v375 = (char *)v359;
      if (v374)
      {
        do
        {
          v376 = (char **)v374;
          v374 = *(char **)v374;
        }
        while (v374);
      }
      else
      {
        do
        {
          v376 = (char **)*((_QWORD *)v375 + 2);
          v101 = *v376 == v375;
          v375 = (char *)v376;
        }
        while (!v101);
      }
      v373 += (uint64_t)v359[8];
      v359 = v376;
    }
    while (v376 != v429);
  }
  v377 = 0xEF7BDEF7BDEF7BDFLL * v372;
  *(_QWORD *)(a1 + 72) = v373 - v386;
  if (v366 == v230)
  {
    v378 = 0;
  }
  else
  {
    v378 = 0;
    do
    {
      v379 = (_QWORD *)v366[1];
      v380 = v366;
      if (v379)
      {
        do
        {
          v381 = v379;
          v379 = (_QWORD *)*v379;
        }
        while (v379);
      }
      else
      {
        do
        {
          v381 = (_QWORD *)v380[2];
          v101 = *v381 == (_QWORD)v380;
          v380 = v381;
        }
        while (!v101);
      }
      v378 += v366[8];
      v366 = v381;
    }
    while (v381 != v230);
  }
  *(_QWORD *)(a1 + 80) = v378 - v385;
  *(_QWORD *)(a1 + 88) = v231;
  *(_QWORD *)(a1 + 96) = v356;
  *(_QWORD *)(a1 + 104) = v357;
  *(_QWORD *)(a1 + 112) = v377;
  sub_223C09454((_QWORD *)(a1 + 8));
  sub_223C09D90((uint64_t *)(a1 + 32));
  kdebug_trace();
  sub_223475E64((uint64_t)&v436, v437);
}

void sub_223CA2FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_QWORD **a38)
{
  uint64_t v38;

  sub_223475E64(v38 - 240, *(_QWORD **)(v38 - 232));
  sub_2234759A4(a38);
  _Unwind_Resume(a1);
}

__n128 sub_223CA3098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t *v7;
  float32x2_t v8;
  float32x2_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unint64_t v12;
  uint64_t *v13;
  char **v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  float v24;
  float v25;
  _BOOL4 v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  char **v30;
  char **v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  char *v40;
  BOOL v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  __n128 result;
  __n128 v56;
  _OWORD *v58;

  v4 = *(uint64_t ***)a4;
  v56 = *(__n128 *)(a4 + 8);
  if (a2 != a3)
  {
    v5 = a2;
    v6 = (unint64_t *)(v56.n128_u64[0] + 8);
    do
    {
      v58 = (_OWORD *)v5;
      v7 = sub_223C237C8(v4, (unsigned __int8 *)v5, (uint64_t)&unk_2245BA939, &v58);
      v11 = *(unsigned __int8 **)(v5 + 24);
      v10 = *(unsigned __int8 **)(v5 + 32);
      if (v11 != v10)
      {
        v12 = *v6;
        if (*v6)
        {
          v13 = v7;
          v14 = (char **)(v7 + 7);
LABEL_8:
          v15 = *v11;
          v16 = v56.n128_u64[0] + 8;
          do
          {
            while (1)
            {
              v17 = *(unsigned __int8 *)(v12 + 28);
              v18 = *v11;
              if (v17 != v15)
                break;
              v17 = *(unsigned __int8 *)(v12 + 29);
              v18 = v11[1];
              if (v17 != v18)
                break;
              v17 = *(unsigned __int8 *)(v12 + 30);
              v18 = v11[2];
              if (v17 != v18)
                break;
              v17 = *(unsigned __int8 *)(v12 + 31);
              v18 = v11[3];
              if (v17 != v18)
                break;
              v17 = *(unsigned __int8 *)(v12 + 32);
              v18 = v11[4];
              if (v17 != v18)
                break;
              v17 = *(unsigned __int8 *)(v12 + 33);
              v18 = v11[5];
              if (v17 != v18)
                break;
              v17 = *(unsigned __int8 *)(v12 + 34);
              v18 = v11[6];
              if (v17 != v18)
                break;
              v17 = *(unsigned __int8 *)(v12 + 35);
              v18 = v11[7];
              if (v17 != v18)
                break;
              v17 = *(unsigned __int8 *)(v12 + 36);
              v18 = v11[8];
              if (v17 != v18)
                break;
              v17 = *(unsigned __int8 *)(v12 + 37);
              v18 = v11[9];
              if (v17 != v18)
                break;
              v17 = *(unsigned __int8 *)(v12 + 38);
              v18 = v11[10];
              if (v17 != v18)
                break;
              v17 = *(unsigned __int8 *)(v12 + 39);
              v18 = v11[11];
              if (v17 != v18)
                break;
              v17 = *(unsigned __int8 *)(v12 + 40);
              v18 = v11[12];
              if (v17 != v18)
                break;
              v17 = *(unsigned __int8 *)(v12 + 41);
              v18 = v11[13];
              if (v17 != v18)
                break;
              v17 = *(unsigned __int8 *)(v12 + 42);
              v18 = v11[14];
              if (v17 != v18)
                break;
              v17 = *(unsigned __int8 *)(v12 + 43);
              v18 = v11[15];
              if (v17 != v18)
                break;
              v16 = v12;
              v12 = *(_QWORD *)v12;
              if (!v12)
                goto LABEL_30;
            }
            if (v17 < v18)
              v12 += 8;
            else
              v16 = v12;
            v12 = *(_QWORD *)v12;
          }
          while (v12);
LABEL_30:
          if ((unint64_t *)v16 != v6)
          {
            v19 = *(unsigned __int8 *)(v16 + 28);
            if (v15 == v19)
            {
              v15 = v11[1];
              v19 = *(unsigned __int8 *)(v16 + 29);
              if (v15 == v19)
              {
                v15 = v11[2];
                v19 = *(unsigned __int8 *)(v16 + 30);
                if (v15 == v19)
                {
                  v15 = v11[3];
                  v19 = *(unsigned __int8 *)(v16 + 31);
                  if (v15 == v19)
                  {
                    v15 = v11[4];
                    v19 = *(unsigned __int8 *)(v16 + 32);
                    if (v15 == v19)
                    {
                      v15 = v11[5];
                      v19 = *(unsigned __int8 *)(v16 + 33);
                      if (v15 == v19)
                      {
                        v15 = v11[6];
                        v19 = *(unsigned __int8 *)(v16 + 34);
                        if (v15 == v19)
                        {
                          v15 = v11[7];
                          v19 = *(unsigned __int8 *)(v16 + 35);
                          if (v15 == v19)
                          {
                            v15 = v11[8];
                            v19 = *(unsigned __int8 *)(v16 + 36);
                            if (v15 == v19)
                            {
                              v15 = v11[9];
                              v19 = *(unsigned __int8 *)(v16 + 37);
                              if (v15 == v19)
                              {
                                v15 = v11[10];
                                v19 = *(unsigned __int8 *)(v16 + 38);
                                if (v15 == v19)
                                {
                                  v15 = v11[11];
                                  v19 = *(unsigned __int8 *)(v16 + 39);
                                  if (v15 == v19)
                                  {
                                    v15 = v11[12];
                                    v19 = *(unsigned __int8 *)(v16 + 40);
                                    if (v15 == v19)
                                    {
                                      v15 = v11[13];
                                      v19 = *(unsigned __int8 *)(v16 + 41);
                                      if (v15 == v19)
                                      {
                                        v15 = v11[14];
                                        v19 = *(unsigned __int8 *)(v16 + 42);
                                        if (v15 == v19)
                                        {
                                          v15 = v11[15];
                                          v19 = *(unsigned __int8 *)(v16 + 43);
                                          if (v15 == v19)
                                            goto LABEL_48;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (v15 >= v19)
            {
LABEL_48:
              v20 = *(_QWORD *)(v5 + 72);
              v21 = *(std::__shared_weak_count **)(v5 + 80);
              if (v21)
              {
                p_shared_owners = (unint64_t *)&v21->__shared_owners_;
                do
                  v23 = __ldxr(p_shared_owners);
                while (__stxr(v23 + 1, p_shared_owners));
              }
              if (!v20)
              {
                v26 = 1;
                if (v21)
                  goto LABEL_58;
                goto LABEL_61;
              }
              v8.i32[0] = *(_DWORD *)(v16 + 52);
              v24 = *(float *)(v20 + 96);
              v9.i32[0] = *(_DWORD *)(v20 + 140);
              v25 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(v20 + 132), *(float32x2_t *)(v16 + 44)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v16 + 44), 1), *(float32x2_t *)(v20 + 132), 1), v8, v9).f32[0];
              v26 = v25 <= (float)(v24 + *(float *)(v20 + 100)) && v25 >= v24;
              if (!v21)
                goto LABEL_61;
LABEL_58:
              v27 = (unint64_t *)&v21->__shared_owners_;
              do
                v28 = __ldaxr(v27);
              while (__stlxr(v28 - 1, v27));
              if (v28)
              {
LABEL_61:
                if (!v26)
                  goto LABEL_132;
              }
              else
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
                if (!v26)
                  goto LABEL_132;
              }
              v29 = *v14;
              v30 = v14;
              v31 = v14;
              if (!*v14)
                goto LABEL_101;
              v32 = *v11;
              while (2)
              {
                while (2)
                {
                  v31 = (char **)v29;
                  v33 = v29[25];
                  v34 = v32 >= v33;
                  if (v32 == v33)
                  {
                    v35 = v11[1];
                    v33 = *((unsigned __int8 *)v31 + 26);
                    v34 = v35 >= v33;
                    if (v35 == v33)
                    {
                      v35 = v11[2];
                      v33 = *((unsigned __int8 *)v31 + 27);
                      v34 = v35 >= v33;
                      if (v35 == v33)
                      {
                        v35 = v11[3];
                        v33 = *((unsigned __int8 *)v31 + 28);
                        v34 = v35 >= v33;
                        if (v35 == v33)
                        {
                          v35 = v11[4];
                          v33 = *((unsigned __int8 *)v31 + 29);
                          v34 = v35 >= v33;
                          if (v35 == v33)
                          {
                            v35 = v11[5];
                            v33 = *((unsigned __int8 *)v31 + 30);
                            v34 = v35 >= v33;
                            if (v35 == v33)
                            {
                              v36 = v11[6];
                              v37 = *((unsigned __int8 *)v31 + 31);
                              if (v36 != v37)
                                goto LABEL_83;
                              v36 = v11[7];
                              v37 = *((unsigned __int8 *)v31 + 32);
                              if (v36 != v37)
                                goto LABEL_83;
                              v36 = v11[8];
                              v37 = *((unsigned __int8 *)v31 + 33);
                              if (v36 != v37)
                                goto LABEL_83;
                              v36 = v11[9];
                              v37 = *((unsigned __int8 *)v31 + 34);
                              if (v36 != v37)
                                goto LABEL_83;
                              v36 = v11[10];
                              v37 = *((unsigned __int8 *)v31 + 35);
                              if (v36 != v37)
                                goto LABEL_83;
                              v36 = v11[11];
                              v37 = *((unsigned __int8 *)v31 + 36);
                              if (v36 != v37)
                                goto LABEL_83;
                              v36 = v11[12];
                              v37 = *((unsigned __int8 *)v31 + 37);
                              if (v36 != v37
                                || (v36 = v11[13], v37 = *((unsigned __int8 *)v31 + 38), v36 != v37)
                                || (v36 = v11[14], v37 = *((unsigned __int8 *)v31 + 39), v36 != v37)
                                || (v36 = v11[15], v37 = *((unsigned __int8 *)v31 + 40), v36 != v37))
                              {
LABEL_83:
                                if (v36 < v37)
                                {
LABEL_66:
                                  v29 = *v31;
                                  v30 = v31;
                                  if (!*v31)
                                    goto LABEL_101;
                                  continue;
                                }
                              }
                              v33 = *((unsigned __int8 *)v31 + 31);
                              v35 = v11[6];
                              if (v33 == v35)
                              {
                                v33 = *((unsigned __int8 *)v31 + 32);
                                v35 = v11[7];
                                if (v33 == v35)
                                {
                                  v33 = *((unsigned __int8 *)v31 + 33);
                                  v35 = v11[8];
                                  if (v33 == v35)
                                  {
                                    v33 = *((unsigned __int8 *)v31 + 34);
                                    v35 = v11[9];
                                    if (v33 == v35)
                                    {
                                      v33 = *((unsigned __int8 *)v31 + 35);
                                      v35 = v11[10];
                                      if (v33 == v35)
                                      {
                                        v33 = *((unsigned __int8 *)v31 + 36);
                                        v35 = v11[11];
                                        if (v33 == v35)
                                        {
                                          v33 = *((unsigned __int8 *)v31 + 37);
                                          v35 = v11[12];
                                          if (v33 == v35)
                                          {
                                            v33 = *((unsigned __int8 *)v31 + 38);
                                            v35 = v11[13];
                                            if (v33 == v35)
                                            {
                                              v33 = *((unsigned __int8 *)v31 + 39);
                                              v35 = v11[14];
                                              if (v33 == v35)
                                              {
                                                v33 = *((unsigned __int8 *)v31 + 40);
                                                v35 = v11[15];
                                                if (v33 == v35)
                                                  goto LABEL_132;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              goto LABEL_98;
                            }
                          }
                        }
                      }
                    }
                  }
                  else
                  {
                    v35 = *v11;
                  }
                  break;
                }
                if (!v34)
                  goto LABEL_66;
LABEL_98:
                if (v33 >= v35)
                  break;
                v29 = v31[1];
                if (!v29)
                {
                  v30 = v31 + 1;
LABEL_101:
                  v38 = (char *)operator new(0x30uLL);
                  *(_OWORD *)(v38 + 25) = *(_OWORD *)v11;
                  *(_QWORD *)v38 = 0;
                  *((_QWORD *)v38 + 1) = 0;
                  *((_QWORD *)v38 + 2) = v31;
                  *v30 = v38;
                  v39 = *(_QWORD *)v13[6];
                  if (v39)
                  {
                    v13[6] = v39;
                    v38 = *v30;
                  }
                  v40 = *v14;
                  v41 = v38 == *v14;
                  v38[24] = v41;
                  if (v41)
                    goto LABEL_125;
                  while (1)
                  {
                    v42 = *((_QWORD *)v38 + 2);
                    if (*(_BYTE *)(v42 + 24))
                      goto LABEL_125;
                    v43 = *(char **)(v42 + 16);
                    v44 = *(_QWORD *)v43;
                    if (*(_QWORD *)v43 == v42)
                    {
                      v47 = *((_QWORD *)v43 + 1);
                      if (!v47 || (v48 = *(unsigned __int8 *)(v47 + 24), v45 = (_BYTE *)(v47 + 24), v48))
                      {
                        if (*(char **)v42 == v38)
                        {
                          *(_BYTE *)(v42 + 24) = 1;
                          v43[24] = 0;
                          v51 = *(_QWORD *)(v42 + 8);
                          *(_QWORD *)v43 = v51;
                          if (v51)
                            goto LABEL_118;
                        }
                        else
                        {
                          v49 = *(uint64_t **)(v42 + 8);
                          v50 = *v49;
                          *(_QWORD *)(v42 + 8) = *v49;
                          if (v50)
                          {
                            *(_QWORD *)(v50 + 16) = v42;
                            v43 = *(char **)(v42 + 16);
                          }
                          v49[2] = (uint64_t)v43;
                          *(_QWORD *)(*(_QWORD *)(v42 + 16) + 8 * (**(_QWORD **)(v42 + 16) != v42)) = v49;
                          *v49 = v42;
                          *(_QWORD *)(v42 + 16) = v49;
                          v43 = (char *)v49[2];
                          v42 = *(_QWORD *)v43;
                          *((_BYTE *)v49 + 24) = 1;
                          v43[24] = 0;
                          v51 = *(_QWORD *)(v42 + 8);
                          *(_QWORD *)v43 = v51;
                          if (v51)
LABEL_118:
                            *(_QWORD *)(v51 + 16) = v43;
                        }
                        *(_QWORD *)(v42 + 16) = *((_QWORD *)v43 + 2);
                        *(_QWORD *)(*((_QWORD *)v43 + 2) + 8 * (**((_QWORD **)v43 + 2) != (_QWORD)v43)) = v42;
                        *(_QWORD *)(v42 + 8) = v43;
LABEL_124:
                        *((_QWORD *)v43 + 2) = v42;
LABEL_125:
                        ++v13[8];
                        goto LABEL_132;
                      }
                    }
                    else if (!v44 || (v46 = *(unsigned __int8 *)(v44 + 24), v45 = (_BYTE *)(v44 + 24), v46))
                    {
                      if (*(char **)v42 == v38)
                      {
                        v53 = *((_QWORD *)v38 + 1);
                        *(_QWORD *)v42 = v53;
                        if (v53)
                        {
                          *(_QWORD *)(v53 + 16) = v42;
                          v43 = *(char **)(v42 + 16);
                        }
                        *((_QWORD *)v38 + 2) = v43;
                        *(_QWORD *)(*(_QWORD *)(v42 + 16) + 8 * (**(_QWORD **)(v42 + 16) != v42)) = v38;
                        *((_QWORD *)v38 + 1) = v42;
                        *(_QWORD *)(v42 + 16) = v38;
                        v43 = (char *)*((_QWORD *)v38 + 2);
                        v38[24] = 1;
                        v43[24] = 0;
                        v42 = *((_QWORD *)v43 + 1);
                        v52 = *(char **)v42;
                        *((_QWORD *)v43 + 1) = *(_QWORD *)v42;
                        if (v52)
LABEL_122:
                          *((_QWORD *)v52 + 2) = v43;
                      }
                      else
                      {
                        *(_BYTE *)(v42 + 24) = 1;
                        v43[24] = 0;
                        v42 = *((_QWORD *)v43 + 1);
                        v52 = *(char **)v42;
                        *((_QWORD *)v43 + 1) = *(_QWORD *)v42;
                        if (v52)
                          goto LABEL_122;
                      }
                      *(_QWORD *)(v42 + 16) = *((_QWORD *)v43 + 2);
                      *(_QWORD *)(*((_QWORD *)v43 + 2) + 8 * (**((_QWORD **)v43 + 2) != (_QWORD)v43)) = v42;
                      *(_QWORD *)v42 = v43;
                      goto LABEL_124;
                    }
                    *(_BYTE *)(v42 + 24) = 1;
                    v38 = v43;
                    v43[24] = v43 == v40;
                    *v45 = 1;
                    if (v43 == v40)
                      goto LABEL_125;
                  }
                }
                continue;
              }
            }
          }
LABEL_132:
          while (1)
          {
            v11 += 16;
            if (v11 == v10)
              break;
            v12 = *v6;
            if (*v6)
              goto LABEL_8;
          }
        }
      }
      v5 += 360;
    }
    while (v5 != a3);
  }
  *(_QWORD *)a1 = v4;
  result = v56;
  *(__n128 *)(a1 + 8) = v56;
  return result;
}

uint64_t sub_223CA385C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC63010;
  sub_223475E64(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_223CA3890(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC63010;
  sub_223475E64(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x227684CE8);
}

void sub_223CA38D4(_QWORD *a1)
{
  if (a1)
  {
    sub_223CA38D4(*a1);
    sub_223CA38D4(a1[1]);
    sub_223198030((uint64_t)(a1 + 6), (_QWORD *)a1[7]);
    operator delete(a1);
  }
}

void sub_223CA3918(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  unint64_t v9;
  int32x4_t v10;
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  BOOL v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  BOOL v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  BOOL v29;
  int v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int *v34;
  float32x4_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v51;
  int16x8_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _DWORD *v59;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v73;
  unint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  int16x8_t *v79;
  float32x4_t *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint16x4_t *v100;
  uint16x4_t v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  _DWORD *v105;
  _DWORD *v106;
  _DWORD *v107;
  _DWORD *v108;
  int v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  unint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  _BYTE *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  float32x4_t *v134;
  float32x4_t *v135;
  unint64_t v136;
  float32x4_t v137;
  char v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t *v163;
  uint64_t v164;
  uint64_t *v165;
  unsigned int v166;
  unsigned int *v167;
  uint64_t *v168;
  __int32 v169;
  int v170;
  uint64_t v171;
  int v172;
  int v173;
  int v174;
  int v175;
  float32x2_t *v176;
  float v177;
  int v178;
  unsigned int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  __int32 v183;
  uint64_t (**v184)();
  uint64_t v185;
  std::__shared_weak_count *v186;
  uint64_t v187;
  int v188;
  int v189;
  int v190;
  int v191;
  uint64_t (**v192)();
  uint64_t v193;
  std::__shared_weak_count *v194;
  uint64_t v195;
  int v196;
  int v197;
  int v198;
  int v199;
  uint64_t (**v200)();
  uint64_t v201;
  std::__shared_weak_count *v202;
  uint64_t v203;
  int v204;
  int v205;
  int v206;
  int v207;
  uint64_t (**v208)();
  uint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  int v212;
  int v213;
  int v214;
  int v215;
  char v216[16];
  std::__shared_weak_count *v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  int v221;
  char v222[16];
  std::__shared_weak_count *v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  int v227;
  _QWORD *v228;
  int v229;
  _QWORD v230[2];

  v176 = (float32x2_t *)sub_2231D0224(a1);
  v169 = v176[11].i32[0];
  v159 = v176[11].u32[1];
  kdebug_trace();
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0x100000000;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = 0x100000000;
  *(_QWORD *)(a4 + 64) = 0;
  v168 = (uint64_t *)(a4 + 64);
  *(_QWORD *)(a4 + 88) = 0x100000000;
  v171 = a4 + 88;
  *(_QWORD *)(a4 + 96) = 0;
  v162 = (unint64_t *)(a4 + 96);
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 80) = 0;
  *(_QWORD *)(a4 + 104) = 0;
  *(_QWORD *)(a4 + 112) = 0;
  *(_QWORD *)(a4 + 128) = 0;
  v163 = (unint64_t *)(a4 + 128);
  *(_QWORD *)(a4 + 120) = 0x100000000;
  *(_QWORD *)(a4 + 136) = 0;
  *(_QWORD *)(a4 + 144) = 0;
  *(_QWORD *)(a4 + 224) = 0;
  *(_QWORD *)(a4 + 152) = 0x100000000;
  *(_QWORD *)(a4 + 160) = 0;
  v161 = a4 + 160;
  *(_QWORD *)(a4 + 168) = 0;
  *(_QWORD *)(a4 + 176) = 0;
  *(_QWORD *)(a4 + 184) = 0x100000000;
  *(_QWORD *)(a4 + 192) = 0;
  *(_QWORD *)(a4 + 200) = 0;
  *(_QWORD *)(a4 + 208) = 0;
  *(_QWORD *)(a4 + 216) = 0x100000000;
  *(_QWORD *)(a4 + 232) = 0;
  *(_QWORD *)(a4 + 240) = 0;
  *(_QWORD *)(a4 + 256) = 0;
  v160 = a4 + 256;
  *(_QWORD *)(a4 + 248) = 0x100000000;
  *(_QWORD *)(a4 + 264) = 0;
  *(_QWORD *)(a4 + 272) = 0;
  *(_QWORD *)(a4 + 280) = 0x100000000;
  *(_QWORD *)(a4 + 288) = 0;
  *(_QWORD *)(a4 + 296) = 0;
  *(_QWORD *)(a4 + 304) = 0;
  *(_QWORD *)(a4 + 312) = 0x100000000;
  *(_QWORD *)(a4 + 320) = 0;
  *(_QWORD *)(a4 + 328) = 0;
  *(_QWORD *)(a4 + 336) = 0;
  *(_QWORD *)(a4 + 344) = 0x100000000;
  *(_QWORD *)(a4 + 352) = 0;
  *(_QWORD *)(a4 + 360) = 0;
  *(_QWORD *)(a4 + 368) = 0;
  *(_QWORD *)(a4 + 376) = 0x100000000;
  *(_QWORD *)(a4 + 384) = 0;
  *(_QWORD *)(a4 + 392) = 0;
  *(_QWORD *)(a4 + 400) = 0;
  *(_QWORD *)(a4 + 408) = 0x100000000;
  *(_QWORD *)(a4 + 416) = 0;
  *(_QWORD *)(a4 + 424) = 0;
  *(_QWORD *)(a4 + 432) = 0;
  *(_QWORD *)(a4 + 440) = 0x100000000;
  if (!(_DWORD)a2
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/PointCloud.cpp", 37, (uint64_t)"stride > 0", 10, (uint64_t)"stride must be > 0", 18, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v8 = v159 * v169 / a2;
  if (v8 >= a2)
  {
    v9 = v8 / a2;
    sub_22339E3C8(a4, v9);
    sub_223674C80((uint64_t)v168, v9);
    sub_2231D3D90(a1, (uint64_t)v222);
    sub_2231D4288(a1, (uint64_t)v216);
    v10.i64[0] = v225;
    v10.i64[1] = v219;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v10))) & 1) != 0
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/PointCloud.cpp", 48, (uint64_t)"!depth.Empty() && !confidence.Empty()", 37, (uint64_t)"Keyframe must have valid depth and confidence", 45, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2231D432C(a1, (uint64_t)&v208);
    v11 = a3;
    v12 = a3 & 0xFF00;
    if ((a3 & 0xFF00) == 0 || (a3 & 2) != 0)
    {
      if (v212)
        _ZF = v213 == 0;
      else
        _ZF = 1;
      v15 = !_ZF;
      v175 = v15;
      v13 = v210;
      if (!v210)
        goto LABEL_20;
    }
    else
    {
      v175 = 0;
      v13 = v210;
      if (!v210)
        goto LABEL_20;
    }
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (v175)
        goto LABEL_21;
      goto LABEL_23;
    }
LABEL_20:
    if (v175)
    {
LABEL_21:
      sub_2231D432C(a1, (uint64_t)&v208);
      sub_22339E3C8((uint64_t)v163, v9);
LABEL_24:
      sub_2231D48A8(a1, (uint64_t)&v200);
      if (!v12 || (v11 & 4) != 0)
      {
        if (v204)
          v19 = v205 == 0;
        else
          v19 = 1;
        v20 = !v19;
        v174 = v20;
        v18 = v202;
        if (!v202)
          goto LABEL_38;
      }
      else
      {
        v174 = 0;
        v18 = v202;
        if (!v202)
          goto LABEL_38;
      }
      v21 = (unint64_t *)&v18->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if (v174)
          goto LABEL_39;
        goto LABEL_41;
      }
LABEL_38:
      if (v174)
      {
LABEL_39:
        sub_2231D48A8(a1, (uint64_t)&v200);
        sub_22339E3C8((uint64_t)v162, v9);
LABEL_42:
        sub_2231D494C(a1, (uint64_t)&v192);
        if (!v12 || (v11 & 1) != 0)
        {
          if (v196)
            v24 = v197 == 0;
          else
            v24 = 1;
          v25 = !v24;
          v173 = v25;
          v23 = v194;
          if (!v194)
            goto LABEL_56;
        }
        else
        {
          v173 = 0;
          v23 = v194;
          if (!v194)
            goto LABEL_56;
        }
        v26 = (unint64_t *)&v23->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
          if (v173)
            goto LABEL_57;
          goto LABEL_59;
        }
LABEL_56:
        if (v173)
        {
LABEL_57:
          sub_2231D494C(a1, (uint64_t)&v192);
          sub_223674E10(v161, v9);
LABEL_60:
          sub_2231D4E60(a1, (uint64_t)&v184);
          if (!v12 || (v11 & 0x10) != 0)
          {
            if (v188)
              v29 = v189 == 0;
            else
              v29 = 1;
            v30 = !v29;
            v172 = v30;
            v28 = v186;
            if (!v186)
              goto LABEL_74;
          }
          else
          {
            v172 = 0;
            v28 = v186;
            if (!v186)
              goto LABEL_74;
          }
          v31 = (unint64_t *)&v28->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
            if (v172)
              goto LABEL_75;
            goto LABEL_77;
          }
LABEL_74:
          if (v172)
          {
LABEL_75:
            sub_2231D4E60(a1, (uint64_t)&v184);
            v33 = v169;
            sub_223674E10(v160, v9);
            goto LABEL_78;
          }
LABEL_77:
          v184 = &off_24EC204C0;
          sub_223212780((uint64_t)&v185);
          v33 = v169;
LABEL_78:
          v34 = (unsigned int *)sub_2231D04FC(a1);
          v165 = (uint64_t *)(a4 + 352);
          v36 = *v34;
          v167 = v34;
          if (!v12 || (v11 & 0x20) != 0)
          {
            v37 = 0;
            if (v36)
            {
              v38 = v34[1];
              v178 = 0;
              v158 = 0;
              if (v38)
              {
                if (v36 > v159
                  && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/PointCloud.cpp", 97, (uint64_t)"scene_type_block_height > 0", 27, (uint64_t)"scene_type_block_height must be > 0", 35, (void (*)(void **))sub_22457406C)|| v38 > v33&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/PointCloud.cpp", 98, (uint64_t)"scene_type_block_width > 0", 26, (uint64_t)"scene_type_block_width must be > 0", 34, (void (*)(void **))sub_22457406C))
                {
                  abort();
                }
                sub_223674E10((uint64_t)v165, v9);
                v158 = v159 / v36;
                v178 = 1;
                v37 = v33 / v38;
              }
              if (!v159)
                goto LABEL_188;
            }
            else
            {
              v178 = 0;
              v158 = 0;
              if (!v159)
                goto LABEL_188;
            }
          }
          else
          {
            v37 = 0;
            v178 = 0;
            v158 = 0;
            if (!v159)
            {
LABEL_188:
              kdebug_trace();
              v140 = v186;
              if (v186)
              {
                v141 = (unint64_t *)&v186->__shared_owners_;
                do
                  v142 = __ldaxr(v141);
                while (__stlxr(v142 - 1, v141));
                if (!v142)
                {
                  ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                  std::__shared_weak_count::__release_weak(v140);
                }
              }
              v143 = v194;
              if (v194)
              {
                v144 = (unint64_t *)&v194->__shared_owners_;
                do
                  v145 = __ldaxr(v144);
                while (__stlxr(v145 - 1, v144));
                if (!v145)
                {
                  ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                  std::__shared_weak_count::__release_weak(v143);
                }
              }
              v146 = v202;
              if (v202)
              {
                v147 = (unint64_t *)&v202->__shared_owners_;
                do
                  v148 = __ldaxr(v147);
                while (__stlxr(v148 - 1, v147));
                if (!v148)
                {
                  ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                  std::__shared_weak_count::__release_weak(v146);
                }
              }
              v149 = v210;
              if (v210)
              {
                v150 = (unint64_t *)&v210->__shared_owners_;
                do
                  v151 = __ldaxr(v150);
                while (__stlxr(v151 - 1, v150));
                if (!v151)
                {
                  ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                  std::__shared_weak_count::__release_weak(v149);
                }
              }
              v152 = v217;
              if (v217)
              {
                v153 = (unint64_t *)&v217->__shared_owners_;
                do
                  v154 = __ldaxr(v153);
                while (__stlxr(v154 - 1, v153));
                if (!v154)
                {
                  ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                  std::__shared_weak_count::__release_weak(v152);
                }
              }
              v155 = v223;
              if (v223)
              {
                v156 = (unint64_t *)&v223->__shared_owners_;
                do
                  v157 = __ldaxr(v156);
                while (__stlxr(v157 - 1, v156));
                if (!v157)
                {
                  ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                  std::__shared_weak_count::__release_weak(v155);
                }
              }
              return;
            }
          }
          if (!v33)
            goto LABEL_188;
          v39 = 0;
          v164 = a4 + 376;
          v166 = v37;
LABEL_93:
          LOBYTE(v40) = v178;
          if (v178)
            v40 = v39 / v158;
          v41 = 0;
          v42 = v226;
          v43 = v224 + 2 * v227 * v39;
          v179 = v39;
          v180 = v220;
          v181 = v218 + 2 * v221 * v39;
          v177 = (float)v39;
          v170 = v40;
          while (1)
          {
            _H0 = *(_WORD *)(v43 + 2 * v41 * v42);
            __asm { FCVT            S0, H0 }
            if (_S0 <= 0.0 || _S0 <= -65504.0)
              goto LABEL_98;
            v51 = v41 * v180;
            _H1 = *(_WORD *)(v181 + 2 * v51);
            __asm { FCVT            S1, H1 }
            if (_S1 <= 0.0)
              goto LABEL_98;
            v35.f32[0] = (float)v41;
            v35.f32[1] = v177;
            *(float32x2_t *)v35.f32 = vadd_f32(vmul_f32(v176[4], *(float32x2_t *)v35.f32), v176[5]);
            v35.i32[2] = 1.0;
            v54 = (int16x8_t)vmulq_n_f32(v35, _S0);
            v183 = v54.i32[2];
            v182 = v54.i64[0];
            v55 = *(_QWORD *)(a4 + 8);
            if (v55 >= *(_QWORD *)(a4 + 16))
            {
              v57 = sub_2233B3A8C((unint64_t *)a4, &v182);
            }
            else
            {
              v56 = v182;
              *(_DWORD *)(v55 + 8) = v183;
              *(_QWORD *)v55 = v56;
              v57 = v55 + 12;
            }
            *(_QWORD *)(a4 + 8) = v57;
            v59 = *(_DWORD **)(a4 + 72);
            v58 = *(_QWORD *)(a4 + 80);
            if ((unint64_t)v59 < v58)
            {
              _H0 = *(_WORD *)(v181 + 2 * v51);
              __asm { FCVT            S0, H0 }
              *v59 = _S0;
              v62 = v59 + 1;
              goto LABEL_130;
            }
            v63 = *v168;
            v64 = (uint64_t)v59 - *v168;
            v65 = v64 >> 2;
            v66 = (v64 >> 2) + 1;
            if (v66 >> 62)
              sub_22316E078();
            v67 = v58 - v63;
            if (v67 >> 1 > v66)
              v66 = v67 >> 1;
            _CF = (unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL;
            v68 = 0x3FFFFFFFFFFFFFFFLL;
            if (!_CF)
              v68 = v66;
            if (v68)
            {
              LODWORD(v230[0]) = v68;
              v69 = *(unsigned int *)(a4 + 92);
              if ((_DWORD)v69 == -1)
                sub_22316DD70();
              v228 = v230;
              v70 = ((uint64_t (*)(_QWORD **, uint64_t))off_24EC63050[v69])(&v228, v171);
              v63 = *(_QWORD *)(a4 + 64);
              v59 = *(_DWORD **)(a4 + 72);
            }
            else
            {
              v70 = 0;
              v71 = 0;
            }
            _H0 = *(_WORD *)(v181 + 2 * v51);
            v73 = (_DWORD *)(v70 + 4 * v65);
            __asm { FCVT            S0, H0 }
            *v73 = _S0;
            v62 = v73 + 1;
            if (v59 != (_DWORD *)v63)
            {
              v75 = (unint64_t)v59 - v63 - 4;
              if (v75 < 0x2C)
              {
                v76 = v59;
                goto LABEL_126;
              }
              if ((unint64_t)v59 - v70 - v64 < 0x20)
              {
                v76 = v59;
                do
                {
LABEL_126:
                  v82 = *--v76;
                  *--v73 = v82;
                }
                while (v76 != (_DWORD *)v63);
                goto LABEL_127;
              }
              v77 = (v75 >> 2) + 1;
              v78 = 4 * (v77 & 0x7FFFFFFFFFFFFFF8);
              v76 = &v59[v78 / 0xFFFFFFFFFFFFFFFCLL];
              v73 = (_DWORD *)((char *)v73 - v78);
              v79 = (int16x8_t *)(v70 + 4 * v65 - 16);
              v80 = (float32x4_t *)(v59 - 4);
              v81 = v77 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v35 = v80[-1];
                v54 = *(int16x8_t *)v80;
                v79[-1] = (int16x8_t)v35;
                *v79 = v54;
                v79 -= 2;
                v80 -= 2;
                v81 -= 8;
              }
              while (v81);
              if (v77 != (v77 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_126;
            }
LABEL_127:
            *(_QWORD *)(a4 + 64) = v73;
            *(_QWORD *)(a4 + 72) = v62;
            v83 = *(_QWORD *)(a4 + 80);
            *(_QWORD *)(a4 + 80) = v70 + 4 * v71;
            if (v63)
            {
              v228 = (_QWORD *)v63;
              v229 = (unint64_t)(v83 - v63) >> 2;
              v84 = *(unsigned int *)(a4 + 92);
              if ((_DWORD)v84 == -1)
                sub_22316DD70();
              v230[0] = &v228;
              ((void (*)(_QWORD *, uint64_t))off_24EC63060[v84])(v230, v171);
            }
LABEL_130:
            *(_QWORD *)(a4 + 72) = v62;
            if (v175)
            {
              v85 = v211 + 2 * (v214 * v41 + v215 * v179);
              _H0 = *(_WORD *)(v85 + 4);
              __asm { FCVT            S0, H0 }
              v35.i32[0] = *(_DWORD *)v85;
              v35 = vcvtq_f32_f16(*(float16x4_t *)v35.f32);
              v228 = (_QWORD *)v35.i64[0];
              v229 = _S0;
              v88 = *(_QWORD *)(a4 + 136);
              if (v88 >= *(_QWORD *)(a4 + 144))
              {
                v90 = sub_2233B2838(v163, (uint64_t *)&v228);
              }
              else
              {
                v89 = (uint64_t)v228;
                *(_DWORD *)(v88 + 8) = v229;
                *(_QWORD *)v88 = v89;
                v90 = v88 + 12;
              }
              *(_QWORD *)(a4 + 136) = v90;
            }
            if (v174)
            {
              v91 = v203 + 2 * (v206 * v41 + v207 * v179);
              _H0 = *(_WORD *)(v91 + 4);
              __asm { FCVT            S0, H0 }
              v35.i32[0] = *(_DWORD *)v91;
              v35 = vcvtq_f32_f16(*(float16x4_t *)v35.f32);
              v228 = (_QWORD *)v35.i64[0];
              v229 = _S0;
              v94 = *(_QWORD *)(a4 + 104);
              if (v94 >= *(_QWORD *)(a4 + 112))
              {
                v96 = sub_2233B2838(v162, (uint64_t *)&v228);
              }
              else
              {
                v95 = (uint64_t)v228;
                *(_DWORD *)(v94 + 8) = v229;
                *(_QWORD *)v94 = v95;
                v96 = v94 + 12;
              }
              *(_QWORD *)(a4 + 104) = v96;
            }
            if (v173)
            {
              v97 = v198;
              v98 = v199;
              v99 = v195;
              if (!v195
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v100 = (uint16x4_t *)(v99 + 2 * (v97 * v41 + v98 * v179));
              v101 = *v100;
              if (v100->u8[0] <= BYTE6(*(unint64_t *)v100))
                v101 = (uint16x4_t)HIWORD(*(unint64_t *)v100);
              v102 = *(_QWORD *)&v101 >> 8;
              LOBYTE(v228) = v102;
              v103 = *(_BYTE **)(a4 + 168);
              if ((unint64_t)v103 >= *(_QWORD *)(a4 + 176))
              {
                v104 = sub_223B7CAB0(v161, &v228);
              }
              else
              {
                *v103 = v102;
                v104 = (uint64_t)(v103 + 1);
              }
              *(_QWORD *)(a4 + 168) = v104;
              *(uint16x4_t *)v54.i8 = vshr_n_u16(*v100, 8uLL);
              LODWORD(v228) = vmovn_s16(v54).u32[0];
              v105 = *(_DWORD **)(a4 + 200);
              if ((unint64_t)v105 >= *(_QWORD *)(a4 + 208))
              {
                v106 = sub_223CA49BC(a4 + 192, &v228);
              }
              else
              {
                *v105 = (_DWORD)v228;
                v106 = v105 + 1;
              }
              *(_QWORD *)(a4 + 200) = v106;
              *(uint16x4_t *)v54.i8 = *v100;
              LODWORD(v228) = vmovn_s16(v54).u32[0];
              v107 = *(_DWORD **)(a4 + 232);
              if ((unint64_t)v107 >= *(_QWORD *)(a4 + 240))
              {
                v108 = sub_223CA49BC(a4 + 224, &v228);
              }
              else
              {
                *v107 = (_DWORD)v228;
                v108 = v107 + 1;
              }
              *(_QWORD *)(a4 + 232) = v108;
            }
            if (v172)
            {
              v109 = v190;
              v110 = v191;
              v111 = v187;
              if (!v187
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v112 = *(_QWORD *)(v111 + 2 * (v109 * v41 + v110 * v179));
              if (v112 <= BYTE6(v112))
                v112 >>= 48;
              v113 = v112 >> 8;
              LOBYTE(v228) = v113;
              v114 = *(_BYTE **)(a4 + 264);
              if ((unint64_t)v114 >= *(_QWORD *)(a4 + 272))
              {
                v115 = sub_223B7CAB0(v160, &v228);
              }
              else
              {
                *v114 = v113;
                v115 = (uint64_t)(v114 + 1);
              }
              *(_QWORD *)(a4 + 264) = v115;
            }
            if (!v178)
              goto LABEL_98;
            v116 = a2;
            v117 = *(_BYTE *)(*((_QWORD *)v167 + 5)
                            + 180 * (v167[2] * v170 + v167[3] * (v41 / v166))
                            + 132);
            v119 = *(_BYTE **)(a4 + 360);
            v118 = *(_QWORD *)(a4 + 368);
            if ((unint64_t)v119 < v118)
            {
              *v119 = v117;
              v44 = (uint64_t)(v119 + 1);
              a2 = v116;
              v33 = v169;
              goto LABEL_97;
            }
            v120 = *v165;
            v121 = &v119[-*v165];
            v122 = (unint64_t)(v121 + 1);
            if ((uint64_t)(v121 + 1) < 0)
              sub_22316E078();
            v123 = v118 - v120;
            if (2 * v123 > v122)
              v122 = 2 * v123;
            _CF = v123 >= 0x3FFFFFFFFFFFFFFFLL;
            v124 = 0x7FFFFFFFFFFFFFFFLL;
            if (!_CF)
              v124 = v122;
            if (v124)
            {
              LODWORD(v230[0]) = v124;
              v125 = *(unsigned int *)(a4 + 380);
              if ((_DWORD)v125 == -1)
                sub_22316DD70();
              v228 = v230;
              v126 = ((uint64_t (*)(_QWORD **, uint64_t))off_24EC63070[v125])(&v228, v164);
              v128 = &v121[v126];
              v121[v126] = v117;
              v44 = (uint64_t)&v121[v126 + 1];
              v129 = *(_QWORD *)(a4 + 352);
              v130 = *(_QWORD *)(a4 + 360);
              v131 = v130 - v129;
              if (v130 == v129)
              {
LABEL_177:
                a2 = v116;
                v33 = v169;
                *(_QWORD *)(a4 + 352) = v128;
                *(_QWORD *)(a4 + 360) = v44;
                v132 = *(_QWORD *)(a4 + 368);
                *(_QWORD *)(a4 + 368) = v126 + v127;
                if (v130)
                  goto LABEL_185;
                goto LABEL_97;
              }
            }
            else
            {
              v126 = 0;
              v127 = 0;
              v128 = &v119[-*v165];
              *v121 = v117;
              v44 = (uint64_t)(v121 + 1);
              v129 = *(_QWORD *)(a4 + 352);
              v130 = *(_QWORD *)(a4 + 360);
              v131 = v130 - v129;
              if (v130 == v129)
                goto LABEL_177;
            }
            a2 = v116;
            if (v131 < 0x20)
            {
              v33 = v169;
              do
              {
LABEL_183:
                v138 = *(_BYTE *)--v130;
                *--v128 = v138;
              }
              while (v130 != v129);
              goto LABEL_184;
            }
            v33 = v169;
            if ((unint64_t)(v120 - (_QWORD)&v119[v126] + v130) < 0x20)
              goto LABEL_183;
            v133 = v130 - (v131 & 0xFFFFFFFFFFFFFFE0);
            v128 -= v131 & 0xFFFFFFFFFFFFFFE0;
            v134 = (float32x4_t *)&v121[v126 - 16];
            v135 = (float32x4_t *)(v130 - 16);
            v136 = v131 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v35 = v135[-1];
              v137 = *v135;
              v134[-1] = v35;
              *v134 = v137;
              v134 -= 2;
              v135 -= 2;
              v136 -= 32;
            }
            while (v136);
            v130 = v133;
            if (v131 != (v131 & 0xFFFFFFFFFFFFFFE0))
              goto LABEL_183;
LABEL_184:
            v130 = *v165;
            *(_QWORD *)(a4 + 352) = v128;
            *(_QWORD *)(a4 + 360) = v44;
            v132 = *(_QWORD *)(a4 + 368);
            *(_QWORD *)(a4 + 368) = v126 + v127;
            if (v130)
            {
LABEL_185:
              v228 = (_QWORD *)v130;
              v229 = v132 - v130;
              v139 = *(unsigned int *)(a4 + 380);
              if ((_DWORD)v139 == -1)
                sub_22316DD70();
              v230[0] = &v228;
              ((void (*)(_QWORD *, uint64_t))off_24EC63080[v139])(v230, v164);
            }
LABEL_97:
            *(_QWORD *)(a4 + 360) = v44;
LABEL_98:
            v41 += a2;
            if (v41 >= v33)
            {
              v39 = v179 + a2;
              if (v179 + a2 >= v159)
                goto LABEL_188;
              goto LABEL_93;
            }
          }
        }
LABEL_59:
        v192 = &off_24EC204C0;
        sub_223212780((uint64_t)&v193);
        goto LABEL_60;
      }
LABEL_41:
      v200 = &off_24EC25150;
      sub_223210C10((uint64_t)&v201);
      goto LABEL_42;
    }
LABEL_23:
    v208 = &off_24EC25150;
    sub_223210C10((uint64_t)&v209);
    goto LABEL_24;
  }
}

void sub_223CA4870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t *v67;
  uint64_t v68;

  sub_22319F500((uint64_t)&a37);
  sub_22319F500((uint64_t)&a47);
  sub_2231D4840((uint64_t)&a57);
  sub_2231D4840((uint64_t)&a67);
  sub_22319EF60(v68 - 224);
  sub_22319EF60(v68 - 168);
  sub_22326055C(v67);
  _Unwind_Resume(a1);
}

_DWORD *sub_223CA49BC(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  _QWORD **v16;
  _QWORD **v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD **v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD **v30;
  int v31;
  _QWORD *v32;

  v2 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v3 = v2 >> 2;
  v4 = (v2 >> 2) + 1;
  if (v4 >> 62)
    sub_22316E078();
  v7 = a1 + 24;
  v8 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
  if (v8 >> 1 > v4)
    v4 = v8 >> 1;
  v9 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
  v10 = 0x3FFFFFFFFFFFFFFFLL;
  if (!v9)
    v10 = v4;
  if (v10)
  {
    LODWORD(v32) = v10;
    v11 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v11 == -1)
      sub_22316DD70();
    v30 = &v32;
    v12 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC63090[v11])(&v30, v7);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = (_DWORD *)(v12 + 4 * v3);
  *v14 = *a2;
  v15 = v14 + 1;
  v16 = *(_QWORD ***)a1;
  v17 = *(_QWORD ***)(a1 + 8);
  if (v17 != *(_QWORD ***)a1)
  {
    v18 = (unint64_t)v17 - *(_QWORD *)a1 - 4;
    if (v18 < 0x2C)
      goto LABEL_27;
    if ((unint64_t)v17 - v12 - v2 < 0x20)
      goto LABEL_27;
    v19 = (v18 >> 2) + 1;
    v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
    v21 = (_QWORD **)((char *)v17 - v20);
    v14 = (_DWORD *)((char *)v14 - v20);
    v22 = (_OWORD *)(v12 + 4 * v3 - 16);
    v23 = (__int128 *)(v17 - 2);
    v24 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v25 = *v23;
      *(v22 - 1) = *(v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 2;
      v24 -= 8;
    }
    while (v24);
    v17 = v21;
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        v26 = *((_DWORD *)v17 - 1);
        v17 = (_QWORD **)((char *)v17 - 4);
        *--v14 = v26;
      }
      while (v17 != v16);
    }
    v17 = *(_QWORD ***)a1;
  }
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v15;
  v27 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12 + 4 * v13;
  if (v17)
  {
    v30 = v17;
    v31 = (unint64_t)(v27 - (_QWORD)v17) >> 2;
    v28 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v28 == -1)
      sub_22316DD70();
    v32 = &v30;
    ((void (*)(_QWORD **, uint64_t))off_24EC630A0[v28])(&v32, v7);
  }
  return v15;
}

void *sub_223CA4B74(unsigned int **a1)
{
  return operator new(4 * **a1);
}

vm_address_t sub_223CA4BA0(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 1023) & 0x1FFFFFC00;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 4 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

uint64_t sub_223CA4C1C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_OWORD *)(a1 + 12) = xmmword_22466E7EC;
  *(_OWORD *)(a1 + 28) = *(_OWORD *)algn_22466E7FC;
  *(_OWORD *)(a1 + 44) = xmmword_22466E80C;
  *(_QWORD *)a1 = &off_24EC630C0;
  *(_DWORD *)(a1 + 8) = 0;
  v7 = a1 + 8;
  *(_OWORD *)(a1 + 60) = unk_22466E81C;
  if (*(_BYTE *)(a2 + 560))
  {
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 497);
    *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 496);
  }
  v8 = 0;
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 272);
  v9 = *(_OWORD *)(a2 + 144);
  v10 = *(_OWORD *)(a2 + 160);
  v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 60) = v11;
  *(_OWORD *)(a1 + 12) = v9;
  *(_OWORD *)(a1 + 28) = v10;
  if (*(_BYTE *)(a2 + 560))
  {
    if (*(_BYTE *)(a2 + 880))
    {
      if (*(_BYTE *)(a2 + 976))
      {
        v8 = 0;
        if (*(_BYTE *)(a2 + 497))
        {
          if (*(_BYTE *)(a2 + 272))
            v8 = *(_BYTE *)(a2 + 524) != 0;
        }
      }
    }
  }
  *(_BYTE *)(a1 + 11) = v8;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  v12 = *a3;
  if (*a3)
  {
    *a3 = 0;
  }
  else
  {
    v12 = operator new();
    v19 = 0;
    sub_223C03D00(v12, v7, &v19);
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  }
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *a4;
  if (*a4)
  {
    *a4 = 0;
    v15 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v14;
    if (v15)
LABEL_17:
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    v17 = *(_QWORD *)(a2 + 540);
    v18 = operator new();
    *(_QWORD *)v18 = &off_24EC62D60;
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 24) = 0;
    *(_DWORD *)(v18 + 32) = 5;
    *(_BYTE *)(v18 + 36) = 0;
    *(_BYTE *)(v18 + 40) = 0;
    if ((v17 & 0xFF00000000) != 0)
    {
      *(_DWORD *)(v18 + 36) = v17;
      *(_BYTE *)(v18 + 40) = 1;
    }
    *(_QWORD *)(v18 + 48) = &off_24EC5FA58;
    *(_QWORD *)(v18 + 72) = v18 + 48;
    *(_QWORD *)(v18 + 56) = sub_223B242D8;
    *(_QWORD *)(v18 + 80) = &off_24EC5FB08;
    *(_QWORD *)(v18 + 104) = v18 + 80;
    *(_QWORD *)(v18 + 88) = sub_223C933E0;
    *(_OWORD *)(v18 + 112) = 0u;
    *(_OWORD *)(v18 + 128) = 0u;
    v15 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v18;
    if (v15)
      goto LABEL_17;
  }
  return a1;
}

void sub_223CA4E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 16))(a10);
  MEMORY[0x227684CE8](v11, 0x10A1C403F94ABF1);
  v13 = *(_QWORD *)(v10 + 112);
  *(_QWORD *)(v10 + 112) = 0;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(_QWORD *)(v10 + 80);
    *(_QWORD *)(v10 + 80) = 0;
    if (!v14)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else
  {
    v14 = *(_QWORD *)(v10 + 80);
    *(_QWORD *)(v10 + 80) = 0;
    if (!v14)
      goto LABEL_5;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

_QWORD *sub_223CA4EE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24EC630C0;
  v2 = a1[14];
  a1[14] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[10];
  a1[10] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_223CA4F3C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24EC630C0;
  v2 = a1[14];
  a1[14] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[10];
  a1[10] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x227684CE8);
}

void sub_223CA4FA8(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  void *__p[2];
  uint64_t v38;

  kdebug_trace();
  __p[0] = 0;
  __p[1] = 0;
  v38 = 0;
  if (((a5 >> 6) & 1) != 0)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 112) + 64))(&v35, *(_QWORD *)(a2 + 112), a6);
    v14 = (char *)__p[0];
    if (!__p[0])
      goto LABEL_28;
    v15 = (char *)__p[1];
    v16 = __p[0];
    if (__p[1] == __p[0])
      goto LABEL_27;
    do
    {
      v17 = (std::__shared_weak_count *)*((_QWORD *)v15 - 28);
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v15 -= 248;
    }
    while (v15 != v14);
    goto LABEL_26;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) & 1) != 0)
  {
    v12 = 0;
    v13 = 0;
  }
  else
  {
    if (!*(_BYTE *)(a2 + 184))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/ReferenceSystemManager.cpp", 108, (uint64_t)"latest_user_world_to_rawframe_camera_.has_value()", 49, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      if (!*(_BYTE *)(a2 + 184))
        sub_22324A974();
    }
    v12 = a2 + 120;
    v13 = 1;
  }
  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a2 + 112) + 48))(&v35, *(_QWORD *)(a2 + 112), a5, v12, v13, a3, a6);
  v14 = (char *)__p[0];
  if (__p[0])
  {
    v20 = (char *)__p[1];
    v16 = __p[0];
    if (__p[1] == __p[0])
      goto LABEL_27;
    do
    {
      v21 = (std::__shared_weak_count *)*((_QWORD *)v20 - 28);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v20 -= 248;
    }
    while (v20 != v14);
LABEL_26:
    v16 = __p[0];
LABEL_27:
    __p[1] = v14;
    operator delete(v16);
  }
LABEL_28:
  *(_OWORD *)__p = v35;
  v38 = v36;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a2 + 80) + 40))(*(_QWORD *)(a2 + 80), __p);
  v24 = (_OWORD *)*a1;
  v25 = (_OWORD *)a1[1];
  if ((_OWORD *)*a1 != v25)
  {
    do
    {
      v26 = *a4;
      v27 = a4[1];
      v28 = a4[3];
      v24[13] = a4[2];
      v24[14] = v28;
      v24[11] = v26;
      v24[12] = v27;
      v24 = (_OWORD *)((char *)v24 + 248);
    }
    while (v24 != v25);
  }
  kdebug_trace();
  v29 = (char *)__p[0];
  if (__p[0])
  {
    v30 = (char *)__p[1];
    v31 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v32 = (std::__shared_weak_count *)*((_QWORD *)v30 - 28);
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v30 -= 248;
      }
      while (v30 != v29);
      v31 = __p[0];
    }
    __p[1] = v29;
    operator delete(v31);
  }
}

void sub_223CA52DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223473EA8((void **)va);
  _Unwind_Resume(a1);
}

void sub_223CA52F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223473EA8((void **)va);
  _Unwind_Resume(a1);
}

void sub_223CA5304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223473EA8((void **)va);
  _Unwind_Resume(a1);
}

void sub_223CA5318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223473EA8((void **)va);
  _Unwind_Resume(a1);
}

void sub_223CA5330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223473EA8((void **)va);
  _Unwind_Resume(a1);
}

void sub_223CA5348(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  char *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15[4];
  _QWORD **v16;
  _QWORD *v17[2];
  void *v18;
  char *v19;
  void *__p;
  void *v21;
  _QWORD **v22;
  _QWORD *v23[2];
  _QWORD **v24;
  _QWORD *v25[2];
  __int16 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[25];

  v26 = 256;
  v27 = 0;
  v29 = 0;
  v28 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  memset(v39, 0, sizeof(v39));
  v25[0] = 0;
  v25[1] = 0;
  v23[1] = 0;
  v24 = v25;
  v22 = v23;
  v23[0] = 0;
  (*(void (**)(_QWORD, __int16 *, uint64_t))(**(_QWORD **)(a1 + 112) + 56))(*(_QWORD *)(a1 + 112), &v26, 64);
  v17[0] = 0;
  v17[1] = 0;
  v16 = v17;
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_OWORD *)(v6 + 144);
  v15[0] = *(_OWORD *)(v6 + 128);
  v15[1] = v7;
  v8 = *(_OWORD *)(v6 + 176);
  v15[2] = *(_OWORD *)(v6 + 160);
  v15[3] = v8;
  sub_223CA4FA8(&v18, a1, (uint64_t)&v16, v15, *(unsigned __int8 *)(v6 + 192), a2);
  sub_223198030((uint64_t)&v16, v17[0]);
  sub_223260C0C(a3, (uint64_t *)&v18);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  v9 = (char *)v18;
  if (v18)
  {
    v10 = v19;
    v11 = v18;
    if (v19 != v18)
    {
      do
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 28);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v10 -= 248;
      }
      while (v10 != v9);
      v11 = v18;
    }
    v19 = v9;
    operator delete(v11);
  }
  sub_223198030((uint64_t)&v22, v23[0]);
  sub_223198030((uint64_t)&v24, v25[0]);
}

void sub_223CA54E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,_QWORD *a27,uint64_t a28,char a29,_QWORD *a30)
{
  sub_22347D774(&a20);
  sub_223198030((uint64_t)&a26, a27);
  sub_223198030((uint64_t)&a29, a30);
  _Unwind_Resume(a1);
}

void sub_223CA5530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _OWORD *a9, char a10)
{
  const char *p_p;
  size_t v18;
  char v19;
  const void *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t *v43;
  uint64_t **v44;
  unsigned __int8 *v45;
  uint64_t **v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned __int8 *v50;
  BOOL v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char *v68;
  uint64_t *v69;
  uint64_t *v70;
  unsigned __int8 *v71;
  uint64_t *v72;
  unsigned int v73;
  unsigned int v74;
  BOOL v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t **v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  void **v92;
  uint64_t v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void *v98;
  char *v99;
  char *v100;
  char *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  __int128 __dst;
  unint64_t v109;
  __int128 v110;
  uint64_t v111;
  void *__p;
  _QWORD *v113;
  uint64_t v114;
  _QWORD v115[3];
  _QWORD **v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t **v119;
  uint64_t *v120;
  uint64_t v121;

  v107 = (unsigned __int8 *)(a2 + 88);
  sub_223A62A3C((unsigned __int8 *)(a2 + 88), (uint64_t)&__p);
  if (v114 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  *(_QWORD *)&__dst = 0;
  v18 = strnlen(p_p, 8uLL);
  memcpy(&__dst, p_p, v18);
  kdebug_trace();
  if (SHIBYTE(v114) < 0)
    operator delete(__p);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v20 = *(const void **)(a2 + 80);
  if ((v19 & 1) != 0)
  {
    if ((!v20
       || !__dynamic_cast(v20, (const struct __class_type_info *)&unk_24EC60A98, (const struct __class_type_info *)&unk_24EC60AA8, 0))&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/ReferenceSystemManager.cpp", 157, (uint64_t)"dynamic_cast<GlobalCoordinateManager*>(coordinate_manager_.get())", 65, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| (_BYTE)a7&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/ReferenceSystemManager.cpp", 158, (uint64_t)"!gref_result.has_value()", 24, (uint64_t)"",
           0,
           (void (*)(void **))sub_22457406C))
    {
LABEL_159:
      abort();
    }
  }
  else if (v20
         && __dynamic_cast(v20, (const struct __class_type_info *)&unk_24EC60A98, (const struct __class_type_info *)&unk_24EC60AA8, 0)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/ReferenceSystemManager.cpp", 154, (uint64_t)"!dynamic_cast<GlobalCoordinateManager*>(coordinate_manager_.get())", 66, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| !(_BYTE)a7&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/ReferenceSystemManager.cpp", 155, (uint64_t)"gref_result.has_value()", 23, (uint64_t)"",
              0,
              (void (*)(void **))sub_22457406C))
  {
    goto LABEL_159;
  }
  sub_223485264(a1);
  v21 = *(_QWORD *)(a2 + 80);
  v22 = *(_QWORD **)(v21 + 80);
  v117 = 0;
  v118 = 0;
  v116 = &v117;
  sub_223AC2284(&v116, v22, v23, (_QWORD *)(v21 + 88));
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a2 + 80) + 16))(&__p, *(_QWORD *)(a2 + 80), a5, a6, a7);
  v24 = *(_QWORD *)(a2 + 80);
  v25 = *(_BYTE *)(v24 + 192);
  *(_BYTE *)(a1 + 1) = v25;
  v26 = *(_OWORD *)(v24 + 128);
  v27 = *(_OWORD *)(v24 + 144);
  v28 = *(_OWORD *)(v24 + 160);
  *(_OWORD *)(a1 + 52) = *(_OWORD *)(v24 + 176);
  *(_OWORD *)(a1 + 36) = v28;
  *(_OWORD *)(a1 + 20) = v27;
  *(_OWORD *)(a1 + 4) = v26;
  *(_BYTE *)a1 = *(_BYTE *)(v24 + 193);
  if ((v25 & 2) != 0)
  {
    sub_223198030((uint64_t)&v116, v117);
    v117 = 0;
    v118 = 0;
    v116 = &v117;
    (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 112) + 16))(*(_QWORD *)(a2 + 112));
  }
  if (a10)
  {
    v29 = *(unsigned __int8 *)(a2 + 184);
    v30 = a9[2];
    v31 = a9[3];
    v32 = a9[1];
    *(_OWORD *)(a2 + 120) = *a9;
    *(_OWORD *)(a2 + 168) = v31;
    *(_OWORD *)(a2 + 152) = v30;
    *(_OWORD *)(a2 + 136) = v32;
    if (!v29)
      *(_BYTE *)(a2 + 184) = 1;
  }
  v33 = *(_BYTE *)(a1 + 1);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a2 + 112) + 56))(*(_QWORD *)(a2 + 112), a5, v33);
  if ((v33 & 0x40) == 0)
  {
    v34 = *(_QWORD *)(a2 + 112);
    sub_223C1D0F0(v115, (uint64_t)&__dst);
    (*(void (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)v34 + 40))(v34, &__dst, 0);
    v35 = __dst;
    if ((_QWORD)__dst)
    {
      v36 = *((_QWORD *)&__dst + 1);
      v37 = (void *)__dst;
      if (*((_QWORD *)&__dst + 1) != (_QWORD)__dst)
      {
        do
        {
          v38 = *(std::__shared_weak_count **)(v36 - 224);
          if (v38)
          {
            p_shared_owners = (unint64_t *)&v38->__shared_owners_;
            do
              v40 = __ldaxr(p_shared_owners);
            while (__stlxr(v40 - 1, p_shared_owners));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          v36 -= 248;
        }
        while (v36 != v35);
        v37 = (void *)__dst;
      }
      *((_QWORD *)&__dst + 1) = v35;
      operator delete(v37);
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 112) + 40))(*(_QWORD *)(a2 + 112), a3, 1);
    __dst = 0uLL;
    v109 = 0;
    v120 = 0;
    v121 = 0;
    v119 = &v120;
    sub_223475C18(&v119, (unsigned __int8 *)__p, (unsigned __int8 *)&v113);
    if (v114)
    {
      v41 = *(unsigned __int8 **)a4;
      v42 = *(unsigned __int8 **)(a4 + 8);
      if (*(unsigned __int8 **)a4 != v42)
      {
        v43 = v120;
        if (v120)
        {
LABEL_38:
          v44 = &v120;
          do
          {
            v45 = (unsigned __int8 *)v43;
            v46 = v44;
            v47 = *((unsigned __int8 *)v43 + 25);
            v48 = *v41;
            if (v47 != v48)
              goto LABEL_56;
            v47 = v45[26];
            v48 = v41[1];
            if (v47 != v48)
              goto LABEL_56;
            v47 = v45[27];
            v48 = v41[2];
            if (v47 != v48)
              goto LABEL_56;
            v47 = v45[28];
            v48 = v41[3];
            if (v47 != v48)
              goto LABEL_56;
            v47 = v45[29];
            v48 = v41[4];
            if (v47 != v48)
              goto LABEL_56;
            v47 = v45[30];
            v48 = v41[5];
            if (v47 != v48)
              goto LABEL_56;
            v47 = v45[31];
            v48 = v41[6];
            if (v47 != v48)
              goto LABEL_56;
            v47 = v45[32];
            v48 = v41[7];
            if (v47 != v48)
              goto LABEL_56;
            v47 = v45[33];
            v48 = v41[8];
            if (v47 != v48)
              goto LABEL_56;
            v47 = v45[34];
            v48 = v41[9];
            if (v47 != v48)
              goto LABEL_56;
            v47 = v45[35];
            v48 = v41[10];
            if (v47 != v48)
              goto LABEL_56;
            v47 = v45[36];
            v48 = v41[11];
            if (v47 != v48)
              goto LABEL_56;
            v47 = v45[37];
            v48 = v41[12];
            if (v47 != v48)
              goto LABEL_56;
            v47 = v45[38];
            v48 = v41[13];
            if (v47 == v48 && (v47 = v45[39], v48 = v41[14], v47 == v48) && (v47 = v45[40], v48 = v41[15], v47 == v48))
            {
              v49 = 0;
              v50 = v45;
              v44 = (uint64_t **)v45;
            }
            else
            {
LABEL_56:
              v51 = v47 >= v48;
              v50 = v45 + 8;
              if (v51)
              {
                v50 = v45;
                v49 = 0;
              }
              else
              {
                v49 = 1;
              }
              if (v51)
                v44 = (uint64_t **)v45;
            }
            v43 = *(uint64_t **)v50;
          }
          while (v43);
          if (v44 != &v120)
          {
            v52 = v45 + 25;
            v53 = (unsigned __int8 *)v46 + 25;
            v54 = v49 ? v53 : v52;
            if (((char)sub_22319835C(v41, v54) & 0x80000000) == 0)
            {
              v55 = *((_QWORD *)&__dst + 1);
              if (*((_QWORD *)&__dst + 1) >= v109)
              {
                v68 = sub_22356EF88((char **)&__dst, (uint64_t)v41);
              }
              else
              {
                **((_OWORD **)&__dst + 1) = *(_OWORD *)v41;
                *(_QWORD *)(v55 + 16) = *((_QWORD *)v41 + 2);
                v56 = *((_QWORD *)v41 + 3);
                *(_QWORD *)(v55 + 24) = v56;
                if (v56)
                {
                  v57 = (unint64_t *)(v56 + 8);
                  do
                    v58 = __ldxr(v57);
                  while (__stxr(v58 + 1, v57));
                }
                v59 = *((_OWORD *)v41 + 2);
                v60 = *((_OWORD *)v41 + 3);
                v61 = *((_OWORD *)v41 + 5);
                *(_OWORD *)(v55 + 64) = *((_OWORD *)v41 + 4);
                *(_OWORD *)(v55 + 80) = v61;
                *(_OWORD *)(v55 + 32) = v59;
                *(_OWORD *)(v55 + 48) = v60;
                *(_OWORD *)(v55 + 96) = *((_OWORD *)v41 + 6);
                v62 = *((_OWORD *)v41 + 7);
                v63 = *((_OWORD *)v41 + 8);
                v64 = *((_OWORD *)v41 + 10);
                *(_OWORD *)(v55 + 144) = *((_OWORD *)v41 + 9);
                *(_OWORD *)(v55 + 160) = v64;
                *(_OWORD *)(v55 + 112) = v62;
                *(_OWORD *)(v55 + 128) = v63;
                v65 = *((_OWORD *)v41 + 11);
                v66 = *((_OWORD *)v41 + 12);
                v67 = *((_OWORD *)v41 + 14);
                *(_OWORD *)(v55 + 208) = *((_OWORD *)v41 + 13);
                *(_OWORD *)(v55 + 224) = v67;
                *(_OWORD *)(v55 + 176) = v65;
                *(_OWORD *)(v55 + 192) = v66;
                *(_WORD *)(v55 + 240) = *((_WORD *)v41 + 120);
                v68 = (char *)(v55 + 248);
              }
              *((_QWORD *)&__dst + 1) = v68;
              *(v68 - 8) = 4;
              v69 = v120;
              if (v120)
              {
                v70 = (uint64_t *)&v120;
                do
                {
                  v71 = (unsigned __int8 *)v69;
                  v72 = v70;
                  v73 = *((unsigned __int8 *)v69 + 25);
                  v74 = *v41;
                  if (v73 != v74)
                    goto LABEL_92;
                  v73 = v71[26];
                  v74 = v41[1];
                  if (v73 != v74)
                    goto LABEL_92;
                  v73 = v71[27];
                  v74 = v41[2];
                  if (v73 != v74)
                    goto LABEL_92;
                  v73 = v71[28];
                  v74 = v41[3];
                  if (v73 != v74)
                    goto LABEL_92;
                  v73 = v71[29];
                  v74 = v41[4];
                  if (v73 != v74)
                    goto LABEL_92;
                  v73 = v71[30];
                  v74 = v41[5];
                  if (v73 != v74)
                    goto LABEL_92;
                  v73 = v71[31];
                  v74 = v41[6];
                  if (v73 != v74)
                    goto LABEL_92;
                  v73 = v71[32];
                  v74 = v41[7];
                  if (v73 != v74)
                    goto LABEL_92;
                  v73 = v71[33];
                  v74 = v41[8];
                  if (v73 != v74)
                    goto LABEL_92;
                  v73 = v71[34];
                  v74 = v41[9];
                  if (v73 != v74)
                    goto LABEL_92;
                  v73 = v71[35];
                  v74 = v41[10];
                  if (v73 != v74)
                    goto LABEL_92;
                  v73 = v71[36];
                  v74 = v41[11];
                  if (v73 != v74)
                    goto LABEL_92;
                  v73 = v71[37];
                  v74 = v41[12];
                  if (v73 != v74)
                    goto LABEL_92;
                  v73 = v71[38];
                  v74 = v41[13];
                  if (v73 == v74
                    && (v73 = v71[39], v74 = v41[14], v73 == v74)
                    && (v73 = v71[40], v74 = v41[15], v73 == v74))
                  {
                    v75 = 0;
                    v76 = v71 + 8;
                    v77 = v71;
                    v70 = (uint64_t *)v71;
                  }
                  else
                  {
LABEL_92:
                    v75 = v73 < v74;
                    v76 = v71 + 8;
                    if (v73 >= v74)
                      v77 = v71;
                    else
                      v77 = v71 + 8;
                    if (!v75)
                      v70 = (uint64_t *)v71;
                  }
                  v69 = *(uint64_t **)v77;
                }
                while (v69);
                if (v70 != (uint64_t *)&v120)
                {
                  v78 = v71 + 25;
                  v79 = v75 ? (unsigned __int8 *)v72 + 25 : v78;
                  if (((char)sub_22319835C(v41, v79) & 0x80000000) == 0)
                  {
                    v80 = (unsigned __int8 *)(v72 + 1);
                    if (!v75)
                      v80 = v76;
                    v81 = *(uint64_t **)v80;
                    v82 = v70;
                    if (*(_QWORD *)v80)
                    {
                      do
                      {
                        v83 = (uint64_t **)v81;
                        v81 = (uint64_t *)*v81;
                      }
                      while (v81);
                    }
                    else
                    {
                      do
                      {
                        v83 = (uint64_t **)v82[2];
                        v84 = *v83 == v82;
                        v82 = (uint64_t *)v83;
                      }
                      while (!v84);
                    }
                    if (v119 == (uint64_t **)v70)
                      v119 = v83;
                    --v121;
                    sub_2231AFE60(v120, v70);
                    operator delete(v70);
                  }
                }
              }
            }
          }
          while (1)
          {
            v41 += 248;
            if (v41 == v42)
              break;
            v43 = v120;
            if (v120)
              goto LABEL_38;
          }
        }
      }
    }
    (*(void (**)(_QWORD, __int128 *, uint64_t))(**(_QWORD **)(a2 + 112) + 40))(*(_QWORD *)(a2 + 112), &__dst, 1);
    sub_223198030((uint64_t)&v119, v120);
    v85 = __dst;
    if ((_QWORD)__dst)
    {
      v86 = *((_QWORD *)&__dst + 1);
      v87 = (void *)__dst;
      if (*((_QWORD *)&__dst + 1) != (_QWORD)__dst)
      {
        do
        {
          v88 = *(std::__shared_weak_count **)(v86 - 224);
          if (v88)
          {
            v89 = (unint64_t *)&v88->__shared_owners_;
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
          v86 -= 248;
        }
        while (v86 != v85);
        v87 = (void *)__dst;
      }
      *((_QWORD *)&__dst + 1) = v85;
      operator delete(v87);
    }
  }
  sub_223CA4FA8(&__dst, a2, (uint64_t)&v116, (__int128 *)(a1 + 4), *(unsigned __int8 *)(a1 + 1), a4);
  v92 = (void **)(a1 + 72);
  v91 = *(_QWORD *)(a1 + 72);
  if (v91)
  {
    v93 = *(_QWORD *)(a1 + 80);
    v94 = *(void **)(a1 + 72);
    if (v93 != v91)
    {
      do
      {
        v95 = *(std::__shared_weak_count **)(v93 - 224);
        if (v95)
        {
          v96 = (unint64_t *)&v95->__shared_owners_;
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        v93 -= 248;
      }
      while (v93 != v91);
      v94 = *v92;
    }
    *(_QWORD *)(a1 + 80) = v91;
    operator delete(v94);
    *v92 = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  v98 = *(void **)(a1 + 96);
  *(_OWORD *)(a1 + 72) = __dst;
  *(_QWORD *)(a1 + 88) = v109;
  v109 = 0;
  __dst = 0uLL;
  if (v98)
  {
    *(_QWORD *)(a1 + 104) = v98;
    operator delete(v98);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    v99 = (char *)__dst;
  }
  else
  {
    v99 = 0;
  }
  *(_OWORD *)(a1 + 96) = v110;
  *(_QWORD *)(a1 + 112) = v111;
  v111 = 0;
  v110 = 0uLL;
  if (v99)
  {
    v100 = (char *)*((_QWORD *)&__dst + 1);
    v101 = v99;
    if (*((char **)&__dst + 1) != v99)
    {
      do
      {
        v102 = (std::__shared_weak_count *)*((_QWORD *)v100 - 28);
        if (v102)
        {
          v103 = (unint64_t *)&v102->__shared_owners_;
          do
            v104 = __ldaxr(v103);
          while (__stlxr(v104 - 1, v103));
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
          }
        }
        v100 -= 248;
      }
      while (v100 != v99);
      v101 = (char *)__dst;
    }
    *((_QWORD *)&__dst + 1) = v99;
    operator delete(v101);
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 80) + 24))(*(_QWORD *)(a2 + 80), a1 + 72);
  v105 = *(_QWORD *)(a2 + 80);
  if (a1 + 120 != v105 + 80)
    sub_223481728((uint64_t **)(a1 + 120), *(_QWORD **)(v105 + 80), (_QWORD *)(v105 + 88));
  kdebug_trace();
  v106 = *(_QWORD *)(a2 + 112);
  sub_223A62A3C(v107, (uint64_t)&__dst);
  sub_223C0F4D4(a4, v106, (uint64_t)&__dst);
  if (SHIBYTE(v109) < 0)
    operator delete((void *)__dst);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2))
    sub_223C1B154(*(unsigned __int8 *)(a1 + 1), v114);
  sub_223198030((uint64_t)v115, (_QWORD *)v115[1]);
  sub_223198030((uint64_t)&__p, v113);
  sub_223198030((uint64_t)&v116, v117);
}

void sub_223CA6028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,_QWORD *a30)
{
  uint64_t v30;
  uint64_t v31;

  sub_223198030(v31 - 112, *(_QWORD **)(v31 - 104));
  sub_223473EA8(&__p);
  sub_223473758((uint64_t)&a23);
  sub_223198030((uint64_t)&a29, a30);
  sub_22347D81C(v30);
  _Unwind_Resume(a1);
}

void sub_223CA60B4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/ReferenceSystemManager.cpp", 214, (uint64_t)"!IsGlobalReferenceSystem() && \"Should Not be called from global reference system\"", 81, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223CA5530(a8, a1, a2, a3, a4, a5, 1, v16, a6, a7);
}

_QWORD *sub_223CA6178(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;

  v7 = *a3;
  if (*a3)
  {
    *a3 = 0;
    v24 = (_QWORD *)v7;
    v8 = *a4;
    if (*a4)
    {
LABEL_3:
      *a4 = 0;
      v9 = v8;
      goto LABEL_16;
    }
  }
  else
  {
    v19 = 0;
    v10 = *(unsigned __int8 *)(a2 + 560);
    if (*(_BYTE *)(a2 + 560))
    {
      LOBYTE(v19) = *(_BYTE *)(a2 + 497);
      BYTE1(v19) = *(_BYTE *)(a2 + 496);
    }
    v11 = 0;
    v12 = *(unsigned __int8 *)(a2 + 272);
    BYTE2(v19) = *(_BYTE *)(a2 + 272);
    v13 = *(_OWORD *)(a2 + 160);
    v20 = *(_OWORD *)(a2 + 144);
    v21 = v13;
    v14 = *(_OWORD *)(a2 + 192);
    v22 = *(_OWORD *)(a2 + 176);
    v23 = v14;
    if (v10)
    {
      if (*(_BYTE *)(a2 + 880))
      {
        if (*(_BYTE *)(a2 + 976))
        {
          v11 = 0;
          if (v12)
          {
            if (*(_BYTE *)(a2 + 497))
              v11 = *(_BYTE *)(a2 + 524) != 0;
          }
        }
      }
    }
    HIBYTE(v19) = v11;
    v15 = (_QWORD *)operator new();
    v16 = operator new();
    *(_OWORD *)(v16 + 128) = 0u;
    *(_OWORD *)(v16 + 144) = 0u;
    *(_OWORD *)(v16 + 160) = 0u;
    *(_OWORD *)(v16 + 176) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    *(_OWORD *)(v16 + 112) = 0u;
    *(_OWORD *)(v16 + 64) = 0u;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 116) = xmmword_224668DA0;
    *(_OWORD *)(v16 + 132) = unk_224668DB0;
    *(_OWORD *)(v16 + 148) = xmmword_224668DC0;
    *(_QWORD *)(v16 + 192) = 0;
    *(_OWORD *)(v16 + 164) = unk_224668DD0;
    *(_QWORD *)v16 = off_24EC61B98;
    v25 = v16;
    sub_223C03D00((uint64_t)v15, (uint64_t)&v19, &v25);
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
    *v15 = &off_24EC60A68;
    v24 = v15;
    v8 = *a4;
    if (*a4)
      goto LABEL_3;
  }
  v9 = operator new();
  *(_QWORD *)v9 = &off_24EC62D60;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_DWORD *)(v9 + 32) = 4096;
  *(_BYTE *)(v9 + 36) = 0;
  *(_BYTE *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 48) = &off_24EC5FA58;
  *(_QWORD *)(v9 + 72) = v9 + 48;
  *(_QWORD *)(v9 + 56) = sub_223C92514;
  *(_QWORD *)(v9 + 80) = &off_24EC5FB08;
  *(_QWORD *)(v9 + 104) = v9 + 80;
  *(_QWORD *)(v9 + 88) = sub_223C94118;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
LABEL_16:
  v18 = v9;
  sub_223CA4C1C((uint64_t)a1, a2, (uint64_t *)&v24, &v18);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (v24)
    (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  *a1 = &off_24EC630F8;
  return a1;
}

void sub_223CA63D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 - 40);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  MEMORY[0x227684CE8](v1, 0x10A1C403F94ABF1);
  _Unwind_Resume(a1);
}

void sub_223CA641C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  v11 = *(_QWORD *)(v9 - 48);
  if (!v11)
    _Unwind_Resume(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(a1);
}

_QWORD *sub_223CA6458(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24EC630C0;
  v2 = a1[14];
  a1[14] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[10];
  a1[10] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_223CA64B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24EC630C0;
  v2 = a1[14];
  a1[14] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[10];
  a1[10] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x227684CE8);
}

void sub_223CA6520(_QWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  __int128 v28;
  __int128 v29;
  _OWORD *v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  char *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unsigned __int8 v47[4];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  void *v52;
  char *v53;
  void *__p;
  void *v55;
  _QWORD *v56[3];
  _QWORD *v57[3];
  char *v58;
  _BYTE v59[20];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  void *v69[5];
  char *v70;
  char *v71;
  unint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;

  v70 = 0;
  v71 = 0;
  v72 = 0;
  v10 = *a4;
  v11 = a4[1];
  while (v10 != v11)
  {
    if (sub_223C8F01C(*(unsigned __int8 *)(v10 + 240)) != 3)
    {
      v13 = v71;
      if ((unint64_t)v71 >= v72)
      {
        v12 = sub_22356EF88(&v70, v10);
      }
      else
      {
        *(_OWORD *)v71 = *(_OWORD *)v10;
        *((_QWORD *)v13 + 2) = *(_QWORD *)(v10 + 16);
        v14 = *(_QWORD *)(v10 + 24);
        *((_QWORD *)v13 + 3) = v14;
        if (v14)
        {
          v15 = (unint64_t *)(v14 + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        v17 = *(_OWORD *)(v10 + 32);
        v18 = *(_OWORD *)(v10 + 48);
        v19 = *(_OWORD *)(v10 + 80);
        *((_OWORD *)v13 + 4) = *(_OWORD *)(v10 + 64);
        *((_OWORD *)v13 + 5) = v19;
        *((_OWORD *)v13 + 2) = v17;
        *((_OWORD *)v13 + 3) = v18;
        *((_OWORD *)v13 + 6) = *(_OWORD *)(v10 + 96);
        v20 = *(_OWORD *)(v10 + 112);
        v21 = *(_OWORD *)(v10 + 128);
        v22 = *(_OWORD *)(v10 + 160);
        *((_OWORD *)v13 + 9) = *(_OWORD *)(v10 + 144);
        *((_OWORD *)v13 + 10) = v22;
        *((_OWORD *)v13 + 7) = v20;
        *((_OWORD *)v13 + 8) = v21;
        v23 = *(_OWORD *)(v10 + 176);
        v24 = *(_OWORD *)(v10 + 192);
        v25 = *(_OWORD *)(v10 + 224);
        *((_OWORD *)v13 + 13) = *(_OWORD *)(v10 + 208);
        *((_OWORD *)v13 + 14) = v25;
        *((_OWORD *)v13 + 11) = v23;
        *((_OWORD *)v13 + 12) = v24;
        *((_WORD *)v13 + 120) = *(_WORD *)(v10 + 240);
        v12 = v13 + 248;
      }
      v71 = v12;
    }
    v10 += 248;
  }
  v73 = 0;
  v74 = 0;
  v75 = 0;
  if (*(_BYTE *)(a2 + 1608))
  {
    *(_OWORD *)v59 = *(_OWORD *)(a2 + 1408);
    *(_DWORD *)&v59[16] = *(_DWORD *)(a2 + 1424);
    sub_223258368(&v60, a2 + 1432);
    LOBYTE(v69[3]) = *(_BYTE *)(a2 + 1600);
  }
  else
  {
    *(_WORD *)v59 = 256;
    v59[2] = 0;
    *(_OWORD *)&v59[4] = 0uLL;
    v60 = 0u;
    v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    memset(v69, 0, 25);
  }
  if ((((uint64_t (*)(_QWORD **))(*a1)[4])(a1) & 1) == 0
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/ReferenceSystemManager.cpp", 237, (uint64_t)"IsGlobalReferenceSystem()", 25, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223CA5530((uint64_t)v47, (uint64_t)a1, (uint64_t)&v70, a3, (uint64_t)v59, 0, 0, v26, 0, 0);
  v27 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*a1[14] + 72))(a1[14]);
  sub_223C1EFBC(v47, v27);
  *(_BYTE *)a5 = v47[1];
  sub_22347F1D8((_QWORD *)(a5 + 8), (uint64_t *)&v52);
  *(_OWORD *)(a5 + 56) = v48;
  *(_OWORD *)(a5 + 72) = v49;
  *(_OWORD *)(a5 + 88) = v50;
  *(_OWORD *)(a5 + 104) = v51;
  if (*(_BYTE *)(a2 + 1744))
  {
    v28 = v49;
    *(_OWORD *)(a2 + 1680) = v48;
    *(_OWORD *)(a2 + 1696) = v28;
    v29 = v51;
    *(_OWORD *)(a2 + 1712) = v50;
    *(_OWORD *)(a2 + 1728) = v29;
  }
  v30 = (_OWORD *)*a4;
  v31 = (_OWORD *)a4[1];
  if ((_OWORD *)*a4 != v31)
  {
    do
    {
      v32 = v48;
      v33 = v49;
      v34 = v51;
      v30[13] = v50;
      v30[14] = v34;
      v30[11] = v32;
      v30[12] = v33;
      v30 = (_OWORD *)((char *)v30 + 248);
    }
    while (v30 != v31);
  }
  sub_223480A2C(&v58);
  sub_223198030((uint64_t)v57, v57[1]);
  sub_223198030((uint64_t)v56, v56[1]);
  if (__p)
  {
    v55 = __p;
    operator delete(__p);
  }
  v35 = (char *)v52;
  if (v52)
  {
    v36 = v53;
    v37 = v52;
    if (v53 != v52)
    {
      do
      {
        v38 = (std::__shared_weak_count *)*((_QWORD *)v36 - 28);
        if (v38)
        {
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v36 -= 248;
      }
      while (v36 != v35);
      v37 = v52;
    }
    v53 = v35;
    operator delete(v37);
  }
  if (v69[0])
  {
    v69[1] = v69[0];
    operator delete(v69[0]);
  }
  if (*((_QWORD *)&v67 + 1))
  {
    *(_QWORD *)&v68 = *((_QWORD *)&v67 + 1);
    operator delete(*((void **)&v67 + 1));
  }
  if ((_QWORD)v66)
  {
    *((_QWORD *)&v66 + 1) = v66;
    operator delete((void *)v66);
  }
  if (*((_QWORD *)&v64 + 1))
  {
    *(_QWORD *)&v65 = *((_QWORD *)&v64 + 1);
    operator delete(*((void **)&v64 + 1));
  }
  if ((_QWORD)v63)
  {
    *((_QWORD *)&v63 + 1) = v63;
    operator delete((void *)v63);
  }
  if (*((_QWORD *)&v61 + 1))
  {
    *(_QWORD *)&v62 = *((_QWORD *)&v61 + 1);
    operator delete(*((void **)&v61 + 1));
  }
  if ((_QWORD)v60)
  {
    *((_QWORD *)&v60 + 1) = v60;
    operator delete((void *)v60);
  }
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
  v41 = v70;
  if (v70)
  {
    v42 = v71;
    v43 = v70;
    if (v71 != v70)
    {
      do
      {
        v44 = (std::__shared_weak_count *)*((_QWORD *)v42 - 28);
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v42 -= 248;
      }
      while (v42 != v41);
      v43 = v70;
    }
    v71 = v41;
    operator delete(v43);
  }
}

void sub_223CA695C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22347D774((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_223CA6970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  sub_22347D81C((uint64_t)va);
  sub_223255CAC((uint64_t)&STACK[0x948]);
  sub_22347D774((void **)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_223CA69A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223473EA8((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_223CA69B4()
{
  return 0;
}

uint64_t sub_223CA69BC()
{
  return 1;
}

int32x4_t sub_223CA69C4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, uint32x4_t a4@<Q0>)
{
  uint64_t v5;
  BOOL v7;
  float32x4_t v8;
  _BOOL4 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __guard *v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  const char *v25;
  size_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  const char *v29;
  size_t v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  NSObject *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  os_log_t v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  const char *v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  NSObject *v73;
  __int128 v74;
  int v75;
  const char *v76;
  int v77;
  const char *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  NSObject *v94;
  __int128 v95;
  int v96;
  const char *v97;
  int v98;
  const char *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  int8x16_t v116;
  int32x4_t result;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  const char *v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  uint16x4_t v129;
  int v130;
  uint64_t *v131;
  __int128 v132;
  int v133;
  const char *v134;
  int v135;
  const char *v136;
  void *v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  void *v140;
  std::__shared_weak_count *v141;
  char v142;
  char v143;
  uint64_t v144;
  os_log_t v145;
  __int128 v146;
  __int128 v147;
  void **v148;
  size_t v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  uint64_t v152;

  v5 = a1;
  v152 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 32))
    v7 = *(_DWORD *)(a1 + 36) == 0;
  else
    v7 = 1;
  if (v7
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/SceneTypeBundle.cpp", 59, (uint64_t)"(semantic.Width() >= 1 && semantic.Height() >= 1)", 49, (uint64_t)"Image size is too small", 23, (void (*)(void **))sub_22457406C)|| (v130 = 0, v8 = 0uLL, memset(&v129, 0, 80), !a2)&& (v9 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/SceneTypeBundle.cpp", 40, (uint64_t)"stride > 0", 10, (uint64_t)"Stride must be >0", 17, (void (*)(void **))sub_22457406C), v8 = 0uLL, v9))
  {
    abort();
  }
  v120 = *(unsigned int *)(v5 + 36);
  if ((_DWORD)v120)
  {
    v10 = *(unsigned int *)(v5 + 32);
    if ((_DWORD)v10)
    {
      v118 = a3;
      v11 = 0;
      v12 = 0;
      v13 = &qword_2540CD000;
      v122 = a2;
      v119 = v5;
      v123 = *(unsigned int *)(v5 + 32);
      while (1)
      {
        v14 = 0;
        v15 = *(_DWORD *)(v5 + 40);
        v121 = v12;
        v16 = *(_QWORD *)(v5 + 24) + (*(_DWORD *)(v5 + 44) * v12);
        v128 = v15;
        v127 = v16;
        do
        {
          while (1)
          {
            v17 = *(unsigned __int8 *)(v16 + (v15 * v14));
            if (v17 > 0x29)
              break;
            ++v129.i16[v17];
            ++v11;
            v14 += a2;
            if (v14 >= v10)
              goto LABEL_12;
          }
          v18 = atomic_load((unsigned __int8 *)&qword_2540CD908);
          if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD908))
          {
            sub_22455F53C(&v131);
            sub_223174DE4(&v145, "cv3d.recon.frame");
            sub_2232300E0(&v131, (uint64_t)&v145, &qword_2540CD900);
            if (SHIBYTE(v146) < 0)
              operator delete(v145);
            __cxa_guard_release(&qword_2540CD908);
            a2 = v122;
            v13 = &qword_2540CD000;
          }
          v19 = v13[288];
          v139 = v19;
          if (**(int **)(v19 + 56) <= 2)
          {
            v20 = *(unsigned __int8 *)(v19 + 72);
            v21 = sub_22322F254(v19, "OSLogSurrogateAppender", 1, 0);
            v22 = v21;
            if (v20 || v21 != 0)
            {
              v125 = v20;
              v126 = v11;
              v131 = &v139;
              *(std::chrono::steady_clock::time_point *)&v132 = std::chrono::steady_clock::now();
              *((std::chrono::system_clock::time_point *)&v132 + 1) = std::chrono::system_clock::now();
              v133 = 2;
              v134 = "unknown file";
              v135 = 67;
              v136 = "unknown function";
              v137 = 0;
              v138 = 0;
              v24 = *v131;
              v25 = (const char *)(*v131 + 16);
              v124 = v25;
              if (*(char *)(*v131 + 39) < 0)
              {
                v25 = *(const char **)(v24 + 16);
                v26 = *(_QWORD *)(v24 + 24);
                v28 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v28 & 1) == 0)
                {
LABEL_169:
                  if (__cxa_guard_acquire(&qword_255788F58))
                  {
                    sub_224568628((uint64_t)&v140);
                    sub_223199C58("com.apple.cv3d", (unint64_t)&v140, byte_255788F40);
                    if (v143 && v142 < 0)
                      operator delete(v140);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
                    __cxa_guard_release(&qword_255788F58);
                    a2 = v122;
                  }
                }
              }
              else
              {
                v26 = *(unsigned __int8 *)(*v131 + 39);
                v27 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v27 & 1) == 0)
                  goto LABEL_169;
              }
              if (byte_255788F40[23] >= 0)
                v29 = byte_255788F40;
              else
                v29 = *(const char **)byte_255788F40;
              if (byte_255788F40[23] >= 0)
                v30 = byte_255788F40[23];
              else
                v30 = *(_QWORD *)&byte_255788F40[8];
              v145 = os_log_create(v29, v25);
              if (v30 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v30 >= 0x17)
              {
                v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v30 | 7) != 0x17)
                  v32 = v30 | 7;
                v33 = v32 + 1;
                v31 = (__int128 *)operator new(v32 + 1);
                *((_QWORD *)&v146 + 1) = v30;
                *(_QWORD *)&v147 = v33 | 0x8000000000000000;
                *(_QWORD *)&v146 = v31;
                a2 = v122;
              }
              else
              {
                BYTE7(v147) = v30;
                v31 = &v146;
                if (!v30)
                {
LABEL_40:
                  *((_BYTE *)v31 + v30) = 0;
                  BYTE8(v147) = 1;
                  if (v26 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  if (v26 >= 0x17)
                  {
                    v36 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v26 | 7) != 0x17)
                      v36 = v26 | 7;
                    v37 = v36 + 1;
                    v34 = (void **)operator new(v36 + 1);
                    v149 = v26;
                    v150 = v37 | 0x8000000000000000;
                    v148 = v34;
                  }
                  else
                  {
                    HIBYTE(v150) = v26;
                    v34 = (void **)&v148;
                    if (!v26)
                    {
                      LOBYTE(v148) = 0;
                      LOBYTE(v151) = 1;
                      v35 = v145;
                      if ((SHIBYTE(v150) & 0x80000000) == 0)
                        goto LABEL_44;
LABEL_50:
                      operator delete(v148);
                      v13 = &qword_2540CD000;
                      if (BYTE8(v147))
                        goto LABEL_51;
                      goto LABEL_53;
                    }
                  }
                  memmove(v34, v25, v26);
                  *((_BYTE *)v34 + v26) = 0;
                  LOBYTE(v151) = 1;
                  v35 = v145;
                  if (SHIBYTE(v150) < 0)
                    goto LABEL_50;
LABEL_44:
                  v13 = &qword_2540CD000;
                  if (BYTE8(v147))
                  {
LABEL_51:
                    if (SBYTE7(v147) < 0)
                      operator delete((void *)v146);
                  }
LABEL_53:
                  if (v145)
                    os_release(v145);
                  if (v22 && *(_QWORD *)(v22 + 24))
                  {
                    v38 = _os_log_pack_size();
                    v39 = operator new(v38, (std::align_val_t)8uLL);
                    v40 = (std::__shared_weak_count *)operator new();
                    v41 = v40;
                    v40->__shared_owners_ = 0;
                    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
                    v40->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                    v40->__shared_weak_owners_ = 0;
                    v40[1].__vftable = (std::__shared_weak_count_vtbl *)v39;
                    v145 = v39;
                    *(_QWORD *)&v146 = v39;
                    *((_QWORD *)&v146 + 1) = v40;
                    do
                      v43 = __ldxr(p_shared_owners);
                    while (__stxr(v43 + 1, p_shared_owners));
                    v147 = 0uLL;
                    v148 = 0;
                    do
                      v44 = __ldaxr(p_shared_owners);
                    while (__stlxr(v44 - 1, p_shared_owners));
                    if (!v44)
                    {
                      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                      std::__shared_weak_count::__release_weak(v41);
                    }
                    v45 = v145;
                    v46 = (_DWORD *)_os_log_pack_fill();
                    *v46 = 67109120;
                    v46[1] = v17;
                    v47 = (char *)operator new();
                    v48 = *(unsigned __int8 *)(v24 + 39);
                    v49 = v124;
                    if ((v48 & 0x80u) != 0)
                    {
                      v49 = *(const char **)(v24 + 16);
                      v48 = *(_QWORD *)(v24 + 24);
                    }
                    *(_QWORD *)v47 = v45;
                    *(_OWORD *)(v47 + 8) = v146;
                    v146 = 0uLL;
                    *(_OWORD *)(v47 + 24) = v147;
                    v147 = 0uLL;
                    *((_QWORD *)v47 + 5) = v49;
                    *((_QWORD *)v47 + 6) = v48;
                    v47[56] = 2;
                    v144 = 0;
                    v140 = v47;
                    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v22 + 24) + 40))(*(_QWORD *)(v22 + 24), &v140);
                    v50 = v140;
                    v140 = 0;
                    v11 = v126;
                    v10 = v123;
                    if (v50)
                    {
                      v51 = (std::__shared_weak_count *)*((_QWORD *)v50 + 4);
                      if (!v51)
                        goto LABEL_70;
                      v52 = (unint64_t *)&v51->__shared_owners_;
                      do
                        v53 = __ldaxr(v52);
                      while (__stlxr(v53 - 1, v52));
                      if (!v53)
                      {
                        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                        std::__shared_weak_count::__release_weak(v51);
                        v54 = (std::__shared_weak_count *)*((_QWORD *)v50 + 2);
                        if (v54)
                        {
LABEL_71:
                          v55 = (unint64_t *)&v54->__shared_owners_;
                          do
                            v56 = __ldaxr(v55);
                          while (__stlxr(v56 - 1, v55));
                          if (!v56)
                          {
                            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                            std::__shared_weak_count::__release_weak(v54);
                          }
                        }
                      }
                      else
                      {
LABEL_70:
                        v54 = (std::__shared_weak_count *)*((_QWORD *)v50 + 2);
                        if (v54)
                          goto LABEL_71;
                      }
                      MEMORY[0x227684CE8](v50, 0x10F0C40B62ED6C6);
                      v58 = v144;
                      v144 = 0;
                      if (v58)
                      {
                        v59 = *(std::__shared_weak_count **)(v58 + 32);
                        if (!v59)
                          goto LABEL_83;
                        v60 = (unint64_t *)&v59->__shared_owners_;
                        do
                          v61 = __ldaxr(v60);
                        while (__stlxr(v61 - 1, v60));
                        if (!v61)
                        {
                          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                          std::__shared_weak_count::__release_weak(v59);
                          v62 = *(std::__shared_weak_count **)(v58 + 16);
                          if (v62)
                          {
LABEL_84:
                            v63 = (unint64_t *)&v62->__shared_owners_;
                            do
                              v64 = __ldaxr(v63);
                            while (__stlxr(v64 - 1, v63));
                            if (!v64)
                            {
                              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                              std::__shared_weak_count::__release_weak(v62);
                            }
                          }
                        }
                        else
                        {
LABEL_83:
                          v62 = *(std::__shared_weak_count **)(v58 + 16);
                          if (v62)
                            goto LABEL_84;
                        }
                        MEMORY[0x227684CE8](v58, 0x10F0C40B62ED6C6);
                      }
                    }
                    v65 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
                    if (!*((_QWORD *)&v147 + 1))
                      goto LABEL_94;
                    v66 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
                    do
                      v67 = __ldaxr(v66);
                    while (__stlxr(v67 - 1, v66));
                    if (!v67)
                    {
                      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                      std::__shared_weak_count::__release_weak(v65);
                      v68 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
                      if (*((_QWORD *)&v146 + 1))
                      {
LABEL_95:
                        v69 = (unint64_t *)&v68->__shared_owners_;
                        do
                          v70 = __ldaxr(v69);
                        while (__stlxr(v70 - 1, v69));
                        if (!v70)
                        {
                          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                          std::__shared_weak_count::__release_weak(v68);
                        }
                      }
                    }
                    else
                    {
LABEL_94:
                      v68 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
                      if (*((_QWORD *)&v146 + 1))
                        goto LABEL_95;
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG);
                    LODWORD(v145) = 67109120;
                    HIDWORD(v145) = v17;
                    v57 = (void *)_os_log_send_and_compose_impl();
                    v11 = v126;
                    v10 = v123;
                    if (v57)
                      free(v57);
                  }
                  if (!v125)
                    goto LABEL_128;
                  sub_22322C138((uint64_t)&v131, "Invalid semantic label %d", v17);
                  v71 = v131;
                  if (!v131)
                    goto LABEL_128;
                  v72 = (unint64_t)v137;
                  if (!v137)
                    goto LABEL_128;
                  v73 = (*v131 + 16);
                  if (*(char *)(*v131 + 39) < 0)
                    v73 = v73->isa;
                  v74 = v132;
                  v75 = v133;
                  v76 = v134;
                  v77 = v135;
                  v78 = v136;
                  v79 = v138;
                  v140 = v137;
                  v141 = v138;
                  if (v138)
                  {
                    v80 = (unint64_t *)&v138->__shared_owners_;
                    do
                      v81 = __ldxr(v80);
                    while (__stxr(v81 + 1, v80));
                    v146 = v74;
                    LODWORD(v147) = v75;
                    *((_QWORD *)&v147 + 1) = v76;
                    LODWORD(v148) = v77;
                    v149 = (size_t)v78;
                    v150 = v72;
                    v151 = v79;
                    do
                      v82 = __ldxr(v80);
                    while (__stxr(v82 + 1, v80));
                    v145 = v73;
                    v83 = *v71;
                    if (v75 < **(_DWORD **)(*v71 + 56))
                    {
LABEL_111:
                      if (!v79)
                        goto LABEL_118;
LABEL_115:
                      v84 = (unint64_t *)&v79->__shared_owners_;
                      do
                        v85 = __ldaxr(v84);
                      while (__stlxr(v85 - 1, v84));
                      if (v85)
                      {
LABEL_118:
                        v86 = v141;
                        if (v141)
                          goto LABEL_119;
                      }
                      else
                      {
                        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                        std::__shared_weak_count::__release_weak(v79);
                        v86 = v141;
                        if (v141)
                        {
LABEL_119:
                          v87 = (unint64_t *)&v86->__shared_owners_;
                          do
                            v88 = __ldaxr(v87);
                          while (__stlxr(v88 - 1, v87));
                          if (!v88)
                          {
                            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                            std::__shared_weak_count::__release_weak(v86);
                          }
                        }
                      }
                      v89 = v138;
                      v137 = 0;
                      v138 = 0;
                      if (!v89)
                        goto LABEL_128;
                      v90 = (unint64_t *)&v89->__shared_owners_;
                      do
                        v91 = __ldaxr(v90);
                      while (__stlxr(v91 - 1, v90));
                      if (v91)
                      {
LABEL_128:
                        v92 = v131;
                        if (v131)
                          goto LABEL_129;
                        goto LABEL_156;
                      }
                      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                      std::__shared_weak_count::__release_weak(v89);
                      v92 = v131;
                      if (!v131)
                        goto LABEL_156;
LABEL_129:
                      v93 = (unint64_t)v137;
                      if (!v137)
                      {
LABEL_156:
                        v113 = v138;
                        if (v138)
                        {
                          v114 = (unint64_t *)&v138->__shared_owners_;
                          do
                            v115 = __ldaxr(v114);
                          while (__stlxr(v115 - 1, v114));
                          if (!v115)
                          {
                            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                            std::__shared_weak_count::__release_weak(v113);
                          }
                        }
                        goto LABEL_161;
                      }
                      v94 = (*v92 + 16);
                      if (*(char *)(*v92 + 39) < 0)
                        v94 = v94->isa;
                      v95 = v132;
                      v96 = v133;
                      v97 = v134;
                      v98 = v135;
                      v99 = v136;
                      v100 = v138;
                      v140 = v137;
                      v141 = v138;
                      if (v138)
                      {
                        v101 = (unint64_t *)&v138->__shared_owners_;
                        do
                          v102 = __ldxr(v101);
                        while (__stxr(v102 + 1, v101));
                        v146 = v95;
                        LODWORD(v147) = v96;
                        *((_QWORD *)&v147 + 1) = v97;
                        LODWORD(v148) = v98;
                        v149 = (size_t)v99;
                        v150 = v93;
                        v151 = v100;
                        do
                          v103 = __ldxr(v101);
                        while (__stxr(v103 + 1, v101));
                        v145 = v94;
                        v104 = *v92;
                        if (v96 < **(_DWORD **)(*v92 + 56))
                        {
LABEL_138:
                          if (!v100)
                            goto LABEL_145;
LABEL_142:
                          v105 = (unint64_t *)&v100->__shared_owners_;
                          do
                            v106 = __ldaxr(v105);
                          while (__stlxr(v106 - 1, v105));
                          if (v106)
                          {
LABEL_145:
                            v107 = v141;
                            if (v141)
                              goto LABEL_146;
                          }
                          else
                          {
                            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                            std::__shared_weak_count::__release_weak(v100);
                            v107 = v141;
                            if (v141)
                            {
LABEL_146:
                              v108 = (unint64_t *)&v107->__shared_owners_;
                              do
                                v109 = __ldaxr(v108);
                              while (__stlxr(v109 - 1, v108));
                              if (!v109)
                              {
                                ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                                std::__shared_weak_count::__release_weak(v107);
                              }
                            }
                          }
                          v110 = v138;
                          v137 = 0;
                          v138 = 0;
                          if (!v110)
                            goto LABEL_161;
                          v111 = (unint64_t *)&v110->__shared_owners_;
                          do
                            v112 = __ldaxr(v111);
                          while (__stlxr(v112 - 1, v111));
                          if (!v112)
                          {
                            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                            std::__shared_weak_count::__release_weak(v110);
                          }
                          goto LABEL_156;
                        }
                      }
                      else
                      {
                        v146 = v132;
                        LODWORD(v147) = v133;
                        *((_QWORD *)&v147 + 1) = v134;
                        LODWORD(v148) = v135;
                        v149 = (size_t)v136;
                        v150 = (unint64_t)v137;
                        v151 = 0;
                        v145 = v94;
                        v104 = *v92;
                        if (v133 < **(_DWORD **)(*v92 + 56))
                          goto LABEL_138;
                      }
                      sub_22323003C(v104, (uint64_t)&v145);
                      v100 = v151;
                      if (!v151)
                        goto LABEL_145;
                      goto LABEL_142;
                    }
                  }
                  else
                  {
                    v146 = v132;
                    LODWORD(v147) = v133;
                    *((_QWORD *)&v147 + 1) = v134;
                    LODWORD(v148) = v135;
                    v149 = (size_t)v136;
                    v150 = (unint64_t)v137;
                    v151 = 0;
                    v145 = v73;
                    v83 = *v131;
                    if (v133 < **(_DWORD **)(*v131 + 56))
                      goto LABEL_111;
                  }
                  sub_22323003C(v83, (uint64_t)&v145);
                  v79 = v151;
                  if (!v151)
                    goto LABEL_118;
                  goto LABEL_115;
                }
              }
              memmove(v31, v29, v30);
              goto LABEL_40;
            }
          }
LABEL_161:
          ++v129.i16[0];
          v15 = v128;
          v16 = v127;
          v14 += a2;
        }
        while (v14 < v10);
LABEL_12:
        v12 = v121 + a2;
        v5 = v119;
        if (v121 + a2 >= v120)
        {
          a4 = vmovl_u16(v129);
          v8 = vcvtq_f32_u32(a4);
          a3 = v118;
          goto LABEL_176;
        }
      }
    }
  }
  v11 = 0;
LABEL_176:
  *(float *)a4.i32 = (float)v11;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v116 = (int8x16_t)vdivq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.i8, 0));
  result = vuzp2q_s32((int32x4_t)v116, (int32x4_t)vextq_s8(v116, v116, 4uLL));
  *(int32x4_t *)(a3 + 4) = result;
  return result;
}

void sub_223CA7690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  if (*(_BYTE *)(v40 - 192))
  {
    if (*(char *)(v40 - 193) < 0)
      operator delete(*(void **)(v40 - 216));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_223CA76D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 153) < 0)
  {
    operator delete(*(void **)(v1 - 176));
    __cxa_guard_abort(&qword_2540CD908);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CD908);
  _Unwind_Resume(a1);
}

void sub_223CA7714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  sub_223197DCC(v40 - 176);
  sub_223167354(v40 - 216);
  sub_223182DAC((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_223CA7738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  if (a2)
  {
    sub_223197DCC(v40 - 176);
    sub_223167354(v40 - 216);
    sub_22316DC48(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223CA786C@<X0>(unint64_t *a1@<X0>, int *a2@<X8>)
{
  unint64_t v4;
  BOOL v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  int v13;
  int v14;
  int v15;
  int v16;
  int i;
  uint64_t v18;
  char v19;
  int v20;
  char v21;
  int v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31[2];
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int v40;
  char v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v44 = 0;
  v43 = 0;
  v45 = 0;
  v32 = vdupq_n_s32(0x3CF83E10u);
  v33 = v32;
  v34 = v32;
  v35 = v32;
  v36 = v32;
  v37 = v32;
  v38 = v32;
  v39 = v32;
  v40 = 1022901776;
  v41 = 32;
  v42 = 0;
  v46 = 0;
  v47 = 1065353216;
  v48 = 0;
  if (HIDWORD(v4))
    v5 = (_DWORD)v4 == 0;
  else
    v5 = 1;
  v6 = v5;
  if (v5)
    v7 = 0;
  else
    v7 = v4;
  v8 = v4 << 32;
  if (v5)
    v8 = 0;
  *(_QWORD *)a2 = v7;
  *((_QWORD *)a2 + 1) = v8 | (v7 != 0);
  *((_BYTE *)a2 + 16) = 0;
  *((_BYTE *)a2 + 24) = 0;
  if (!(_DWORD)v7)
    v6 = 1;
  if (v6)
    v9 = 0;
  else
    v9 = v7;
  v30 = v9;
  v31[0] = v8 | (v7 != 0);
  v10 = 180 * HIDWORD(v8);
  if ((v10 & (v10 - 1)) != 0)
    v11 = 4;
  else
    v11 = v10;
  result = sub_2232071B8((_QWORD *)a2 + 4, &v30, v31, 1, (__int128 *)v32.i8, 1, v11);
  v13 = *a2;
  if (*a2)
  {
    v14 = a2[1];
    if (v14)
    {
      v15 = 0;
      v16 = 0;
LABEL_23:
      for (i = 0; i != v14; ++i)
      {
        v18 = a1[1] + 180 * (v15 + i);
        v34 = *(int32x4_t *)(v18 + 80);
        v35 = *(int32x4_t *)(v18 + 96);
        v36 = *(int32x4_t *)(v18 + 112);
        v37.i32[0] = *(_DWORD *)(v18 + 128);
        v32 = *(int32x4_t *)(v18 + 48);
        v33 = *(int32x4_t *)(v18 + 64);
        v19 = *(_BYTE *)(v18 + 132);
        v20 = *(_DWORD *)(v18 + 160);
        v21 = *(_BYTE *)(v18 + 164);
        result = *(_QWORD **)(v18 + 168);
        v22 = a2[2];
        v23 = a2[3];
        *(_DWORD *)((char *)&v31[1] + 3) = *(_DWORD *)(v18 + 176);
        v24 = *((_QWORD *)a2 + 5) + 180 * (v22 * v16 + v23 * i);
        v25 = *(_OWORD *)v18;
        v26 = *(_OWORD *)(v18 + 16);
        *(unint64_t *)((char *)v31 + 3) = (unint64_t)result;
        v27 = *(_OWORD *)(v18 + 32);
        v28 = *(_OWORD *)(v18 + 136);
        v29 = *(_QWORD *)(v18 + 152);
        *(_OWORD *)v24 = v25;
        *(_OWORD *)(v24 + 16) = v26;
        *(_OWORD *)(v24 + 32) = v27;
        *(int32x4_t *)(v24 + 64) = v33;
        *(int32x4_t *)(v24 + 48) = v32;
        *(int32x4_t *)(v24 + 96) = v35;
        *(int32x4_t *)(v24 + 80) = v34;
        *(int32x4_t *)(v24 + 112) = v36;
        LODWORD(v18) = v37.i32[0];
        *(_BYTE *)(v24 + 132) = v19;
        *(_OWORD *)(v24 + 136) = v28;
        *(_QWORD *)(v24 + 152) = v29;
        *(_DWORD *)(v24 + 160) = v20;
        *(_BYTE *)(v24 + 164) = v21;
        *(_DWORD *)(v24 + 128) = v18;
        *(_QWORD *)(v24 + 172) = *(unint64_t *)((char *)v31 + 7);
        *(_QWORD *)(v24 + 165) = v31[0];
      }
      v15 += i;
      while (++v16 != v13)
      {
        v14 = a2[1];
        if (v14)
          goto LABEL_23;
      }
    }
  }
  return result;
}

void sub_223CA7ACC(uint64_t a1, uint64_t a2, _BYTE *a3, const char **a4)
{
  uint64_t v6;
  unsigned __int16 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char *v16;
  void **v17;
  uint64_t v18;
  size_t v19;
  const char *v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  unsigned __int8 v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  std::string *v39;
  std::string::size_type size;
  size_t v41;
  void *v42;
  unsigned __int8 v43;
  const char *v44;
  size_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  size_t v53;
  std::__shared_weak_count_vtbl *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::string::size_type v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  const char **v75;
  uint64_t v76;
  int v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  void *v97;
  const char *v98;
  const char *v99;
  std::string *v100;
  const char *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  const void **v106;
  unsigned __int8 v107;
  const char *v108;
  size_t v109;
  _BYTE *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  void **v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  char *v118;
  size_t v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *p_shared_owners;
  char *v123;
  std::__shared_weak_count *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  int v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::string::size_type v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  void *v162;
  std::string *p_p;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t *v167;
  const void *v168;
  uint64_t v169;
  uint64_t v170;
  void **v171;
  uint64_t v172;
  uint64_t v173;
  size_t v174;
  const char *v175;
  unsigned __int8 v176;
  const char *v177;
  size_t v178;
  _BYTE *v179;
  uint64_t v180;
  unint64_t v181;
  void **v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  NSObject *v190;
  size_t v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  size_t v194;
  size_t v195;
  void *v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  char v201;
  char *v202;
  const char *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  void *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  void **v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  const char *v248;
  uint64_t v249;
  int v250;
  const char **v251;
  uint64_t v252;
  char *__s;
  char *__sa;
  char *__sb;
  std::string __p;
  __int128 v257;
  char *v258;
  const char *v259;
  uint64_t v260;
  std::__shared_weak_count *v261;
  const char *v262;
  void *__dst[2];
  int64_t v264;
  int **v265;
  __int128 v266;
  std::__shared_weak_count *v267;
  char *v268;
  std::__shared_weak_count *v269;
  void *v270;
  __int128 v271;
  _BYTE object[24];
  unint64_t v273;
  void *v274[2];
  size_t v275;
  __int128 v276;
  unint64_t v277;
  void *v278;
  char v279;
  unint64_t v280;
  int v281;
  uint64_t v282;
  _BYTE v283[24];
  __int128 v284;
  uint64_t v285;
  __int128 v286;
  const char *v287;
  uint64_t v288;
  uint64_t v289;
  const char *v290[5];

  v6 = a2;
  v290[2] = *(const char **)MEMORY[0x24BDAC8D0];
  v8 = sub_22379EDA0(a1, a2);
  if (v8 < 0x100u)
  {
    if (sub_22452B568(a1, v6))
    {
      sub_224527BAC(v6, (CFStringRef *)object);
      sub_223CC1B5C((uint64_t)&v270, a1, *(void **)object);
      v9 = *(std::__shared_weak_count **)&object[8];
      if (*(_QWORD *)&object[8])
      {
        v10 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      sub_223CA9D94(v290);
      if (**((int **)v290[0] + 7) > 5
        || ((v12 = *((unsigned __int8 *)v290[0] + 72),
             v13 = sub_22322F254((uint64_t)v290[0], "OSLogSurrogateAppender", 1, 0),
             v14 = v13,
             !v12)
          ? (v15 = v13 == 0)
          : (v15 = 0),
            v15))
      {
LABEL_287:
        if (BYTE8(v271))
        {
          v102 = (std::__shared_weak_count *)v271;
          if ((_QWORD)v271)
          {
            v167 = (unint64_t *)(v271 + 8);
            do
              v104 = __ldaxr(v167);
            while (__stlxr(v104 - 1, v167));
LABEL_291:
            if (!v104)
            {
              ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
              std::__shared_weak_count::__release_weak(v102);
            }
            return;
          }
        }
        return;
      }
      *(_QWORD *)v283 = v290;
      *(std::chrono::steady_clock::time_point *)&v283[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v283[16] = std::chrono::system_clock::now();
      LODWORD(v284) = 5;
      *((_QWORD *)&v284 + 1) = "unknown file";
      LODWORD(v285) = 96;
      *((_QWORD *)&v286 + 1) = 0;
      v287 = 0;
      *(_QWORD *)&v286 = "unknown function";
      if (*(char *)(v6 + 23) >= 0)
        v16 = (char *)v6;
      else
        v16 = *(char **)v6;
      LODWORD(v273) = 0;
      sub_223CC1C9C((uint64_t)object, (CFTypeRef *)&v270);
      if ((_DWORD)v273 == -1)
        sub_22316DD70();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v266;
      ((void (*)(void **__return_ptr, std::string *, _BYTE *))off_24EC63160[v273])(__dst, &__p, object);
      if ((_DWORD)v273 != -1)
        ((void (*)(std::string *, _BYTE *))off_24EC63148[v273])(&__p, object);
      v17 = __dst;
      if (v264 < 0)
        v17 = (void **)__dst[0];
      v265 = (int **)v17;
      v262 = "BOOL";
      v18 = **(_QWORD **)v283;
      __s = **(char ***)v283;
      if (*(char *)(**(_QWORD **)v283 + 39) < 0)
      {
        v20 = *(const char **)(v18 + 16);
        v19 = *(_QWORD *)(v18 + 24);
      }
      else
      {
        v19 = *(unsigned __int8 *)(**(_QWORD **)v283 + 39);
        v20 = (const char *)(v18 + 16);
      }
      v252 = v18 + 16;
      v107 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v107 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v273 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v108 = (const char *)&xmmword_255788F40;
      else
        v108 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v109 = byte_255788F57;
      else
        v109 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v108, v20);
      v110 = &object[8];
      if (v109 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v109 >= 0x17)
      {
        v111 = v12;
        v112 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v109 | 7) != 0x17)
          v112 = v109 | 7;
        v113 = v112 + 1;
        v110 = operator new(v112 + 1);
        *(_QWORD *)&object[16] = v109;
        v273 = v113 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v110;
        v12 = v111;
      }
      else
      {
        HIBYTE(v273) = v109;
        if (!v109)
        {
LABEL_193:
          v110[v109] = 0;
          LOBYTE(v274[0]) = 1;
          v114 = &v274[1];
          if (v19 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v19 >= 0x17)
          {
            v115 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v19 | 7) != 0x17)
              v115 = v19 | 7;
            v116 = v115 + 1;
            v114 = (void **)operator new(v115 + 1);
            v275 = v19;
            *(_QWORD *)&v276 = v116 | 0x8000000000000000;
            v274[1] = v114;
          }
          else
          {
            BYTE7(v276) = v19;
            if (!v19)
              goto LABEL_201;
          }
          memmove(v114, v20, v19);
LABEL_201:
          *((_BYTE *)v114 + v19) = 0;
          BYTE8(v276) = 1;
          v117 = *(NSObject **)object;
          if (SBYTE7(v276) < 0)
            operator delete(v274[1]);
          if (LOBYTE(v274[0]) && SHIBYTE(v273) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v14 && *(_QWORD *)(v14 + 24))
          {
            v118 = v16;
            v119 = _os_log_pack_size();
            v120 = (std::__shared_weak_count_vtbl *)operator new(v119, (std::align_val_t)8uLL);
            v121 = (std::__shared_weak_count *)operator new();
            v121->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v121->__shared_owners_;
            v121->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v121->__shared_weak_owners_ = 0;
            v121[1].__vftable = v120;
            *(_QWORD *)&v266 = v120;
            *((_QWORD *)&v266 + 1) = v120;
            v268 = 0;
            v269 = 0;
            v267 = v121;
            sub_223CC18F4((uint64_t)object, v118, (const char **)&v265, &v262);
            v123 = (char *)operator new(0x68uLL);
            v124 = (std::__shared_weak_count *)v123;
            *((_QWORD *)v123 + 3) = off_24EC206F8;
            *(_QWORD *)v123 = &off_24EC206A8;
            *((_QWORD *)v123 + 6) = v273;
            v125 = v277;
            *((_QWORD *)v123 + 9) = v275;
            *((_QWORD *)v123 + 1) = 0;
            v126 = (unint64_t *)(v123 + 8);
            *((_QWORD *)v123 + 2) = 0;
            *((_OWORD *)v123 + 2) = *(_OWORD *)&object[8];
            *(_OWORD *)(v123 + 56) = *(_OWORD *)v274;
            *((_QWORD *)v123 + 12) = v125;
            *((_OWORD *)v123 + 5) = v276;
            v268 = v123 + 24;
            v269 = (std::__shared_weak_count *)v123;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v120;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v120;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v121;
            do
              v127 = __ldxr(p_shared_owners);
            while (__stxr(v127 + 1, p_shared_owners));
            *(_QWORD *)&v257 = v123 + 24;
            *((_QWORD *)&v257 + 1) = v123;
            do
              v128 = __ldxr(v126);
            while (__stxr(v128 + 1, v126));
            v258 = v123 + 24;
            do
              v129 = __ldaxr(v126);
            while (__stlxr(v129 - 1, v126));
            if (!v129)
            {
              (*(void (**)(char *))(*(_QWORD *)v123 + 16))(v123);
              std::__shared_weak_count::__release_weak(v124);
            }
            v130 = v12;
            v131 = v267;
            if (v267)
            {
              v132 = (unint64_t *)&v267->__shared_owners_;
              do
                v133 = __ldaxr(v132);
              while (__stlxr(v133 - 1, v132));
              if (!v133)
              {
                ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                std::__shared_weak_count::__release_weak(v131);
              }
            }
            v134 = __p.__r_.__value_.__r.__words[0];
            if (v258[31] >= 0)
              v135 = v258 + 8;
            else
              v135 = (char *)*((_QWORD *)v258 + 1);
            if (v258[55] >= 0)
              v136 = v258 + 32;
            else
              v136 = (char *)*((_QWORD *)v258 + 4);
            if (v258[79] >= 0)
              v137 = v258 + 56;
            else
              v137 = (char *)*((_QWORD *)v258 + 7);
            v138 = _os_log_pack_fill();
            *(_DWORD *)v138 = 136315650;
            *(_QWORD *)(v138 + 4) = v135;
            *(_WORD *)(v138 + 12) = 2080;
            *(_QWORD *)(v138 + 14) = v136;
            *(_WORD *)(v138 + 22) = 2080;
            *(_QWORD *)(v138 + 24) = v137;
            v139 = operator new();
            v140 = __s[39];
            v141 = v252;
            if ((v140 & 0x80u) != 0)
            {
              v141 = *((_QWORD *)__s + 2);
              v140 = *((_QWORD *)__s + 3);
            }
            *(_QWORD *)v139 = v134;
            *(_OWORD *)(v139 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
            *(_OWORD *)(v139 + 24) = v257;
            v257 = 0uLL;
            *(_QWORD *)(v139 + 40) = v141;
            *(_QWORD *)(v139 + 48) = v140;
            *(_BYTE *)(v139 + 56) = 16;
            *(_QWORD *)&v266 = 0;
            *(_QWORD *)object = v139;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v14 + 24) + 40))(*(_QWORD *)(v14 + 24), object);
            v12 = v130;
            v142 = *(_QWORD *)object;
            *(_QWORD *)object = 0;
            if (v142)
            {
              v143 = *(std::__shared_weak_count **)(v142 + 32);
              if (v143)
              {
                v144 = (unint64_t *)&v143->__shared_owners_;
                do
                  v145 = __ldaxr(v144);
                while (__stlxr(v145 - 1, v144));
                if (!v145)
                {
                  ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                  std::__shared_weak_count::__release_weak(v143);
                }
              }
              v146 = *(std::__shared_weak_count **)(v142 + 16);
              if (v146)
              {
                v147 = (unint64_t *)&v146->__shared_owners_;
                do
                  v148 = __ldaxr(v147);
                while (__stlxr(v148 - 1, v147));
                if (!v148)
                {
                  ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                  std::__shared_weak_count::__release_weak(v146);
                }
              }
              MEMORY[0x227684CE8](v142, 0x10F0C40B62ED6C6);
              v149 = v266;
              *(_QWORD *)&v266 = 0;
              if (v149)
              {
                v150 = *(std::__shared_weak_count **)(v149 + 32);
                if (v150)
                {
                  v151 = (unint64_t *)&v150->__shared_owners_;
                  do
                    v152 = __ldaxr(v151);
                  while (__stlxr(v152 - 1, v151));
                  if (!v152)
                  {
                    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                    std::__shared_weak_count::__release_weak(v150);
                  }
                }
                v153 = *(std::__shared_weak_count **)(v149 + 16);
                if (v153)
                {
                  v154 = (unint64_t *)&v153->__shared_owners_;
                  do
                    v155 = __ldaxr(v154);
                  while (__stlxr(v155 - 1, v154));
                  if (!v155)
                  {
                    ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                    std::__shared_weak_count::__release_weak(v153);
                  }
                }
                MEMORY[0x227684CE8](v149, 0x10F0C40B62ED6C6);
              }
            }
            v156 = (std::__shared_weak_count *)*((_QWORD *)&v257 + 1);
            if (*((_QWORD *)&v257 + 1))
            {
              v157 = (unint64_t *)(*((_QWORD *)&v257 + 1) + 8);
              do
                v158 = __ldaxr(v157);
              while (__stlxr(v158 - 1, v157));
              if (!v158)
              {
                ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                std::__shared_weak_count::__release_weak(v156);
              }
            }
            v159 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
            if (__p.__r_.__value_.__r.__words[2])
            {
              v160 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
              do
                v161 = __ldaxr(v160);
              while (__stlxr(v161 - 1, v160));
              if (!v161)
              {
                ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                std::__shared_weak_count::__release_weak(v159);
              }
            }
          }
          else
          {
            os_log_type_enabled(v117, OS_LOG_TYPE_ERROR);
            *(_DWORD *)object = 136315650;
            *(_QWORD *)&object[4] = v16;
            *(_WORD *)&object[12] = 2080;
            *(_QWORD *)&object[14] = v265;
            *(_WORD *)&object[22] = 2080;
            v273 = (unint64_t)v262;
            v162 = (void *)_os_log_send_and_compose_impl();
            if (v162)
              free(v162);
          }
          if (SHIBYTE(v264) < 0)
            operator delete(__dst[0]);
          if (v12)
          {
            if (*(char *)(v6 + 23) < 0)
              v6 = *(_QWORD *)v6;
            LODWORD(v273) = 0;
            sub_223CC1C9C((uint64_t)object, (CFTypeRef *)&v270);
            if ((_DWORD)v273 == -1)
              sub_22316DD70();
            *(_QWORD *)&v266 = __dst;
            ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24EC63160[v273])(&__p, &v266, object);
            if ((_DWORD)v273 != -1)
              ((void (*)(__int128 *, _BYTE *))off_24EC63148[v273])(&v266, object);
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            sub_22322C138((uint64_t)v283, "Error while getting value for key \"%s\" and value %s expecting type %s", (const char *)v6, (const char *)p_p, "BOOL");
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            sub_223182C08((uint64_t)v283);
          }
          sub_223182C08((uint64_t)v283);
          v164 = (std::__shared_weak_count *)v287;
          if (v287)
          {
            v165 = (unint64_t *)(v287 + 8);
            do
              v166 = __ldaxr(v165);
            while (__stlxr(v166 - 1, v165));
            if (!v166)
            {
              ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
              std::__shared_weak_count::__release_weak(v164);
            }
          }
          goto LABEL_287;
        }
      }
      memmove(v110, v108, v109);
      goto LABEL_193;
    }
    sub_223CA9D94(&v265);
    if (*v265[7] > 3)
      return;
    v33 = *((unsigned __int8 *)v265 + 72);
    v34 = sub_22322F254((uint64_t)v265, "OSLogSurrogateAppender", 1, 0);
    v35 = v34;
    if (!v33 && v34 == 0)
      return;
    sub_223195210((uint64_t)object);
    *(_QWORD *)v283 = "Key not found in dictionary \"";
    *(_QWORD *)&v283[8] = 29;
    v37 = *(unsigned __int8 *)(v6 + 23);
    if ((v37 & 0x80u) == 0)
      v38 = v6;
    else
      v38 = *(_QWORD *)v6;
    if ((v37 & 0x80u) != 0)
      v37 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)&v283[16] = v38;
    *(_QWORD *)&v284 = v37;
    *((_QWORD *)&v284 + 1) = "\" for variable \"";
    v285 = 16;
    v286 = *(_OWORD *)a4;
    v287 = "\"";
    v288 = 1;
    sub_2231A9820((uint64_t)v283, (uint64_t)&v289, 0, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = &__p;
    else
      v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_2231813E8(&object[16], (uint64_t)v39, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v281 & 0x10) != 0)
    {
      v105 = v280;
      if (v280 < v277)
      {
        v280 = v277;
        v105 = v277;
      }
      v106 = (const void **)&v276 + 1;
    }
    else
    {
      if ((v281 & 8) == 0)
      {
        v41 = 0;
        HIBYTE(v264) = 0;
        v42 = __dst;
        goto LABEL_302;
      }
      v106 = (const void **)&v274[1];
      v105 = v276;
    }
    v168 = *v106;
    v41 = v105 - (_QWORD)*v106;
    if (v41 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v41 >= 0x17)
    {
      v169 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v41 | 7) != 0x17)
        v169 = v41 | 7;
      v170 = v169 + 1;
      v42 = operator new(v169 + 1);
      __dst[1] = (void *)v41;
      v264 = v170 | 0x8000000000000000;
      __dst[0] = v42;
    }
    else
    {
      HIBYTE(v264) = v105 - *(_BYTE *)v106;
      v42 = __dst;
      if (!v41)
      {
LABEL_302:
        *((_BYTE *)v42 + v41) = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v265;
        __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v257) = 3;
        *((_QWORD *)&v257 + 1) = "unknown file";
        LODWORD(v258) = 99;
        v260 = 0;
        v261 = 0;
        v259 = "unknown function";
        if (v264 >= 0)
          v171 = __dst;
        else
          v171 = (void **)__dst[0];
        v172 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
        v173 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
        if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v175 = *(const char **)(v172 + 16);
          v174 = *(_QWORD *)(v172 + 24);
        }
        else
        {
          v174 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
          v175 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
        }
        v176 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v176 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v283);
          sub_223199C58("com.apple.cv3d", (unint64_t)v283, &xmmword_255788F40);
          if ((_BYTE)v284 && (v283[23] & 0x80000000) != 0)
            operator delete(*(void **)v283);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v177 = (const char *)&xmmword_255788F40;
        else
          v177 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v178 = byte_255788F57;
        else
          v178 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)v283 = os_log_create(v177, v175);
        v179 = &v283[8];
        if (v178 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v178 >= 0x17)
        {
          __sb = (char *)v175;
          v180 = v172;
          v181 = v35;
          v182 = v171;
          v183 = v33;
          v184 = v173;
          v185 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v178 | 7) != 0x17)
            v185 = v178 | 7;
          v186 = v185 + 1;
          v179 = operator new(v185 + 1);
          *(_QWORD *)&v283[16] = v178;
          *(_QWORD *)&v284 = v186 | 0x8000000000000000;
          *(_QWORD *)&v283[8] = v179;
          v173 = v184;
          v33 = v183;
          v171 = v182;
          v35 = v181;
          v172 = v180;
          v175 = __sb;
        }
        else
        {
          BYTE7(v284) = v178;
          if (!v178)
          {
LABEL_323:
            v179[v178] = 0;
            BYTE8(v284) = 1;
            v187 = &v285;
            if (v174 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v174 >= 0x17)
            {
              v188 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v174 | 7) != 0x17)
                v188 = v174 | 7;
              v189 = v188 + 1;
              v187 = (uint64_t *)operator new(v188 + 1);
              *(_QWORD *)&v286 = v174;
              *((_QWORD *)&v286 + 1) = v189 | 0x8000000000000000;
              v285 = (uint64_t)v187;
            }
            else
            {
              HIBYTE(v286) = v174;
              if (!v174)
              {
LABEL_331:
                *((_BYTE *)v187 + v174) = 0;
                LOBYTE(v287) = 1;
                v190 = *(NSObject **)v283;
                if (SHIBYTE(v286) < 0)
                  operator delete((void *)v285);
                if (BYTE8(v284) && SBYTE7(v284) < 0)
                  operator delete(*(void **)&v283[8]);
                if (*(_QWORD *)v283)
                  os_release(*(void **)v283);
                if (!v35 || !*(_QWORD *)(v35 + 24))
                {
                  os_log_type_enabled(v190, OS_LOG_TYPE_INFO);
                  *(_DWORD *)v283 = 136315138;
                  *(_QWORD *)&v283[4] = v171;
                  v197 = (void *)_os_log_send_and_compose_impl();
                  if (v197)
                    free(v197);
                  goto LABEL_412;
                }
                v191 = _os_log_pack_size();
                v192 = (std::__shared_weak_count_vtbl *)operator new(v191, (std::align_val_t)8uLL);
                v193 = (std::__shared_weak_count *)operator new();
                v193->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v193->__shared_owners_ = 0;
                v193->__shared_weak_owners_ = 0;
                v193[1].__vftable = v192;
                *(_QWORD *)&v266 = v192;
                *((_QWORD *)&v266 + 1) = v192;
                v268 = 0;
                v269 = 0;
                v267 = v193;
                v194 = strlen((const char *)v171);
                if (v194 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v195 = v194;
                if (v194 >= 0x17)
                {
                  v198 = (v194 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v194 | 7) != 0x17)
                    v198 = v194 | 7;
                  v199 = v198 + 1;
                  v196 = operator new(v198 + 1);
                  *(_QWORD *)&v271 = v195;
                  *((_QWORD *)&v271 + 1) = v199 | 0x8000000000000000;
                  v270 = v196;
                }
                else
                {
                  HIBYTE(v271) = v194;
                  v196 = &v270;
                  if (!v194)
                  {
LABEL_350:
                    *((_BYTE *)v196 + v195) = 0;
                    v200 = v270;
                    v290[0] = (const char *)v271;
                    *(const char **)((char *)v290 + 7) = *(const char **)((char *)&v271 + 7);
                    v201 = HIBYTE(v271);
                    v202 = (char *)operator new(0x38uLL);
                    *((_QWORD *)v202 + 1) = 0;
                    *((_QWORD *)v202 + 2) = 0;
                    *((_QWORD *)v202 + 3) = off_24EC1FA48;
                    *(_QWORD *)v202 = &off_24EC1F9F8;
                    v203 = v290[0];
                    *((_QWORD *)v202 + 4) = v200;
                    *((_QWORD *)v202 + 5) = v203;
                    *(const char **)(v202 + 47) = *(const char **)((char *)v290 + 7);
                    v202[55] = v201;
                    memset(v290, 0, 15);
                    v204 = v269;
                    v268 = v202 + 24;
                    v269 = (std::__shared_weak_count *)v202;
                    if (v204)
                    {
                      v205 = (unint64_t *)&v204->__shared_owners_;
                      do
                        v206 = __ldaxr(v205);
                      while (__stlxr(v206 - 1, v205));
                      if (!v206)
                      {
                        ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                        std::__shared_weak_count::__release_weak(v204);
                      }
                    }
                    *(_OWORD *)v283 = v266;
                    v207 = (uint64_t)v268;
                    *(_QWORD *)&v283[16] = v267;
                    if (v267)
                    {
                      v208 = (unint64_t *)&v267->__shared_owners_;
                      do
                        v209 = __ldxr(v208);
                      while (__stxr(v209 + 1, v208));
                    }
                    v210 = v269;
                    *(_QWORD *)&v284 = v207;
                    *((_QWORD *)&v284 + 1) = v269;
                    if (v269)
                    {
                      v211 = (unint64_t *)&v269->__shared_owners_;
                      do
                        v212 = __ldxr(v211);
                      while (__stxr(v212 + 1, v211));
                      v285 = v207;
                      do
                        v213 = __ldaxr(v211);
                      while (__stlxr(v213 - 1, v211));
                      if (!v213)
                      {
                        ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                        std::__shared_weak_count::__release_weak(v210);
                      }
                    }
                    else
                    {
                      v285 = v207;
                    }
                    v214 = v267;
                    if (v267)
                    {
                      v215 = (unint64_t *)&v267->__shared_owners_;
                      do
                        v216 = __ldaxr(v215);
                      while (__stlxr(v216 - 1, v215));
                      if (!v216)
                      {
                        ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                        std::__shared_weak_count::__release_weak(v214);
                      }
                    }
                    v217 = *(_QWORD *)v283;
                    if (*(char *)(v285 + 31) >= 0)
                      v218 = (char *)(v285 + 8);
                    else
                      v218 = *(char **)(v285 + 8);
                    v219 = _os_log_pack_fill();
                    *(_DWORD *)v219 = 136315138;
                    *(_QWORD *)(v219 + 4) = v218;
                    v220 = operator new();
                    v221 = *(unsigned __int8 *)(v172 + 39);
                    if ((v221 & 0x80u) == 0)
                      v222 = v173;
                    else
                      v222 = *(_QWORD *)(v172 + 16);
                    if ((v221 & 0x80u) != 0)
                      v221 = *(_QWORD *)(v172 + 24);
                    *(_QWORD *)v220 = v217;
                    *(_OWORD *)(v220 + 8) = *(_OWORD *)&v283[8];
                    *(_QWORD *)&v283[8] = 0;
                    *(_QWORD *)&v283[16] = 0;
                    *(_OWORD *)(v220 + 24) = v284;
                    v284 = 0uLL;
                    *(_QWORD *)(v220 + 40) = v222;
                    *(_QWORD *)(v220 + 48) = v221;
                    *(_BYTE *)(v220 + 56) = 1;
                    v270 = 0;
                    *(_QWORD *)&v266 = v220;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v35 + 24) + 40))(*(_QWORD *)(v35 + 24), &v266);
                    v223 = v266;
                    *(_QWORD *)&v266 = 0;
                    if (v223)
                    {
                      v224 = *(std::__shared_weak_count **)(v223 + 32);
                      if (v224)
                      {
                        v225 = (unint64_t *)&v224->__shared_owners_;
                        do
                          v226 = __ldaxr(v225);
                        while (__stlxr(v226 - 1, v225));
                        if (!v226)
                        {
                          ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                          std::__shared_weak_count::__release_weak(v224);
                        }
                      }
                      v227 = *(std::__shared_weak_count **)(v223 + 16);
                      if (v227)
                      {
                        v228 = (unint64_t *)&v227->__shared_owners_;
                        do
                          v229 = __ldaxr(v228);
                        while (__stlxr(v229 - 1, v228));
                        if (!v229)
                        {
                          ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                          std::__shared_weak_count::__release_weak(v227);
                        }
                      }
                      MEMORY[0x227684CE8](v223, 0x10F0C40B62ED6C6);
                      v230 = v270;
                      v270 = 0;
                      if (v230)
                      {
                        v231 = (std::__shared_weak_count *)*((_QWORD *)v230 + 4);
                        if (v231)
                        {
                          v232 = (unint64_t *)&v231->__shared_owners_;
                          do
                            v233 = __ldaxr(v232);
                          while (__stlxr(v233 - 1, v232));
                          if (!v233)
                          {
                            ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                            std::__shared_weak_count::__release_weak(v231);
                          }
                        }
                        v234 = (std::__shared_weak_count *)*((_QWORD *)v230 + 2);
                        if (v234)
                        {
                          v235 = (unint64_t *)&v234->__shared_owners_;
                          do
                            v236 = __ldaxr(v235);
                          while (__stlxr(v236 - 1, v235));
                          if (!v236)
                          {
                            ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                            std::__shared_weak_count::__release_weak(v234);
                          }
                        }
                        MEMORY[0x227684CE8](v230, 0x10F0C40B62ED6C6);
                      }
                    }
                    v237 = (std::__shared_weak_count *)*((_QWORD *)&v284 + 1);
                    if (*((_QWORD *)&v284 + 1))
                    {
                      v238 = (unint64_t *)(*((_QWORD *)&v284 + 1) + 8);
                      do
                        v239 = __ldaxr(v238);
                      while (__stlxr(v239 - 1, v238));
                      if (!v239)
                      {
                        ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                        std::__shared_weak_count::__release_weak(v237);
                      }
                    }
                    v240 = *(std::__shared_weak_count **)&v283[16];
                    if (*(_QWORD *)&v283[16])
                    {
                      v241 = (unint64_t *)(*(_QWORD *)&v283[16] + 8);
                      do
                        v242 = __ldaxr(v241);
                      while (__stlxr(v242 - 1, v241));
                      if (!v242)
                      {
                        ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                        std::__shared_weak_count::__release_weak(v240);
                      }
                    }
LABEL_412:
                    if (v33)
                    {
                      v243 = __dst;
                      if (v264 < 0)
                        v243 = (void **)__dst[0];
                      sub_22322C138((uint64_t)&__p, "%s", (const char *)v243);
                      sub_223182C08((uint64_t)&__p);
                    }
                    sub_223182C08((uint64_t)&__p);
                    v244 = v261;
                    if (v261)
                    {
                      v245 = (unint64_t *)&v261->__shared_owners_;
                      do
                        v246 = __ldaxr(v245);
                      while (__stlxr(v246 - 1, v245));
                      if (!v246)
                      {
                        ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                        std::__shared_weak_count::__release_weak(v244);
                      }
                    }
                    if (SHIBYTE(v264) < 0)
                      operator delete(__dst[0]);
                    *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
                    v247 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&object[16] = v247;
                    v273 = MEMORY[0x24BEDB848] + 16;
                    if (v279 < 0)
                      operator delete(v278);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x227684BE0](&v282);
                    return;
                  }
                }
                memcpy(v196, v171, v195);
                goto LABEL_350;
              }
            }
            memmove(v187, v175, v174);
            goto LABEL_331;
          }
        }
        memmove(v179, v177, v178);
        goto LABEL_323;
      }
    }
    memmove(v42, v168, v41);
    goto LABEL_302;
  }
  *a3 = v8;
  sub_223CA9D94(__dst);
  if (**((int **)__dst[0] + 7) > 4)
    return;
  v21 = *((unsigned __int8 *)__dst[0] + 72);
  v22 = sub_22322F254((uint64_t)__dst[0], "OSLogSurrogateAppender", 1, 0);
  v23 = v22;
  if (!v21 && v22 == 0)
    return;
  *(_QWORD *)v283 = __dst;
  *(std::chrono::steady_clock::time_point *)&v283[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v283[16] = std::chrono::system_clock::now();
  LODWORD(v284) = 4;
  *((_QWORD *)&v284 + 1) = "unknown file";
  LODWORD(v285) = 91;
  *((_QWORD *)&v286 + 1) = 0;
  v287 = 0;
  *(_QWORD *)&v286 = "unknown function";
  v25 = (char *)*a4;
  LODWORD(v273) = 0;
  if (*a3)
    v26 = "true";
  else
    v26 = "false";
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  sub_2231C06BC(object, (const char **)&__p.__r_.__value_.__l.__data_);
  if ((_DWORD)v273 == -1)
    sub_22316DD70();
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v266;
  ((void (*)(void **__return_ptr, std::string *, _BYTE *))off_24EC63160[v273])(&v270, &__p, object);
  if ((_DWORD)v273 != -1)
    ((void (*)(std::string *, _BYTE *))off_24EC63148[v273])(&__p, object);
  __sa = v25;
  v27 = (const char *)&v270;
  if (v271 < 0)
    v27 = (const char *)v270;
  v290[0] = v27;
  if (*(char *)(v6 + 23) >= 0)
    v28 = (const char *)v6;
  else
    v28 = *(const char **)v6;
  v265 = (int **)v28;
  v29 = **(_QWORD **)v283;
  v30 = (const char *)(**(_QWORD **)v283 + 16);
  v248 = v30;
  v249 = **(_QWORD **)v283;
  if (*(char *)(**(_QWORD **)v283 + 39) < 0)
  {
    v30 = *(const char **)(v29 + 16);
    v31 = *(_QWORD *)(v29 + 24);
    v250 = v21;
    v251 = a4;
    v43 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v43 & 1) != 0)
      goto LABEL_64;
  }
  else
  {
    v31 = *(unsigned __int8 *)(**(_QWORD **)v283 + 39);
    v250 = v21;
    v251 = a4;
    v32 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v32 & 1) != 0)
      goto LABEL_64;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if ((_BYTE)v273 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_64:
  if (byte_255788F57 >= 0)
    v44 = (const char *)&xmmword_255788F40;
  else
    v44 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v45 = byte_255788F57;
  else
    v45 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)object = os_log_create(v44, v30);
  v46 = &object[8];
  if (v45 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v45 >= 0x17)
  {
    v47 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v47 = v45 | 7;
    v48 = v47 + 1;
    v46 = operator new(v47 + 1);
    *(_QWORD *)&object[16] = v45;
    v273 = v48 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v46;
    goto LABEL_77;
  }
  HIBYTE(v273) = v45;
  if (v45)
LABEL_77:
    memmove(v46, v44, v45);
  v46[v45] = 0;
  LOBYTE(v274[0]) = 1;
  v49 = &v274[1];
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v31 >= 0x17)
  {
    v50 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v50 = v31 | 7;
    v51 = v50 + 1;
    v49 = (void **)operator new(v50 + 1);
    v275 = v31;
    *(_QWORD *)&v276 = v51 | 0x8000000000000000;
    v274[1] = v49;
    goto LABEL_85;
  }
  BYTE7(v276) = v31;
  if (v31)
LABEL_85:
    memmove(v49, v30, v31);
  *((_BYTE *)v49 + v31) = 0;
  BYTE8(v276) = 1;
  v52 = *(NSObject **)object;
  if (SBYTE7(v276) < 0)
    operator delete(v274[1]);
  if (LOBYTE(v274[0]) && SHIBYTE(v273) < 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v23 && *(_QWORD *)(v23 + 24))
  {
    v53 = _os_log_pack_size();
    v54 = (std::__shared_weak_count_vtbl *)operator new(v53, (std::align_val_t)8uLL);
    v55 = (std::__shared_weak_count *)operator new();
    v55->__shared_owners_ = 0;
    v56 = (unint64_t *)&v55->__shared_owners_;
    v55->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v55->__shared_weak_owners_ = 0;
    v55[1].__vftable = v54;
    *(_QWORD *)&v266 = v54;
    *((_QWORD *)&v266 + 1) = v54;
    v268 = 0;
    v269 = 0;
    v267 = v55;
    sub_223CC18F4((uint64_t)object, __sa, v290, (const char **)&v265);
    v57 = (char *)operator new(0x68uLL);
    v58 = (std::__shared_weak_count *)v57;
    *((_QWORD *)v57 + 3) = off_24EC206F8;
    *(_QWORD *)v57 = &off_24EC206A8;
    *((_QWORD *)v57 + 6) = v273;
    v59 = v277;
    *((_QWORD *)v57 + 9) = v275;
    *((_QWORD *)v57 + 1) = 0;
    v60 = (unint64_t *)(v57 + 8);
    *((_QWORD *)v57 + 2) = 0;
    *((_OWORD *)v57 + 2) = *(_OWORD *)&object[8];
    *(_OWORD *)(v57 + 56) = *(_OWORD *)v274;
    *((_QWORD *)v57 + 12) = v59;
    *((_OWORD *)v57 + 5) = v276;
    v268 = v57 + 24;
    v269 = (std::__shared_weak_count *)v57;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v54;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v55;
    do
      v61 = __ldxr(v56);
    while (__stxr(v61 + 1, v56));
    *(_QWORD *)&v257 = v57 + 24;
    *((_QWORD *)&v257 + 1) = v57;
    do
      v62 = __ldxr(v60);
    while (__stxr(v62 + 1, v60));
    v258 = v57 + 24;
    do
      v63 = __ldaxr(v60);
    while (__stlxr(v63 - 1, v60));
    if (!v63)
    {
      (*(void (**)(char *))(*(_QWORD *)v57 + 16))(v57);
      std::__shared_weak_count::__release_weak(v58);
    }
    v64 = v267;
    if (v267)
    {
      v65 = (unint64_t *)&v267->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = __p.__r_.__value_.__r.__words[0];
    if (v258[31] >= 0)
      v68 = v258 + 8;
    else
      v68 = (char *)*((_QWORD *)v258 + 1);
    if (v258[55] >= 0)
      v69 = v258 + 32;
    else
      v69 = (char *)*((_QWORD *)v258 + 4);
    if (v258[79] >= 0)
      v70 = v258 + 56;
    else
      v70 = (char *)*((_QWORD *)v258 + 7);
    v71 = _os_log_pack_fill();
    *(_DWORD *)v71 = 136315650;
    *(_QWORD *)(v71 + 4) = v68;
    *(_WORD *)(v71 + 12) = 2080;
    *(_QWORD *)(v71 + 14) = v69;
    *(_WORD *)(v71 + 22) = 2080;
    *(_QWORD *)(v71 + 24) = v70;
    v72 = operator new();
    v73 = *(unsigned __int8 *)(v249 + 39);
    v74 = v248;
    if ((v73 & 0x80u) != 0)
    {
      v74 = *(const char **)(v249 + 16);
      v73 = *(_QWORD *)(v249 + 24);
    }
    *(_QWORD *)v72 = v67;
    *(_OWORD *)(v72 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)(v72 + 24) = v257;
    v257 = 0uLL;
    *(_QWORD *)(v72 + 40) = v74;
    *(_QWORD *)(v72 + 48) = v73;
    *(_BYTE *)(v72 + 56) = 16;
    *(_QWORD *)&v266 = 0;
    *(_QWORD *)object = v72;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v23 + 24) + 40))(*(_QWORD *)(v23 + 24), object);
    v75 = v251;
    v76 = *(_QWORD *)object;
    *(_QWORD *)object = 0;
    v77 = v250;
    if (v76)
    {
      v78 = *(std::__shared_weak_count **)(v76 + 32);
      if (v78)
      {
        v79 = (unint64_t *)&v78->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = *(std::__shared_weak_count **)(v76 + 16);
      if (v81)
      {
        v82 = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      MEMORY[0x227684CE8](v76, 0x10F0C40B62ED6C6);
      v84 = v266;
      *(_QWORD *)&v266 = 0;
      if (v84)
      {
        v85 = *(std::__shared_weak_count **)(v84 + 32);
        if (v85)
        {
          v86 = (unint64_t *)&v85->__shared_owners_;
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        v88 = *(std::__shared_weak_count **)(v84 + 16);
        if (v88)
        {
          v89 = (unint64_t *)&v88->__shared_owners_;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        MEMORY[0x227684CE8](v84, 0x10F0C40B62ED6C6);
      }
    }
    v91 = (std::__shared_weak_count *)*((_QWORD *)&v257 + 1);
    if (*((_QWORD *)&v257 + 1))
    {
      v92 = (unint64_t *)(*((_QWORD *)&v257 + 1) + 8);
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    v94 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v95 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
  }
  else
  {
    os_log_type_enabled(v52, OS_LOG_TYPE_ERROR);
    *(_DWORD *)object = 136315650;
    *(_QWORD *)&object[4] = __sa;
    *(_WORD *)&object[12] = 2080;
    *(const char **)&object[14] = v290[0];
    *(_WORD *)&object[22] = 2080;
    v273 = (unint64_t)v265;
    v97 = (void *)_os_log_send_and_compose_impl();
    v75 = v251;
    v77 = v250;
    if (v97)
      free(v97);
  }
  if (SHIBYTE(v271) < 0)
    operator delete(v270);
  if (v77)
  {
    v98 = *v75;
    LODWORD(v273) = 0;
    v99 = "true";
    if (!*a3)
      v99 = "false";
    *(_QWORD *)&v266 = v99;
    sub_2231C06BC(object, (const char **)&v266);
    if ((_DWORD)v273 == -1)
      sub_22316DD70();
    *(_QWORD *)&v266 = &v270;
    ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24EC63160[v273])(&__p, &v266, object);
    if ((_DWORD)v273 != -1)
      ((void (*)(__int128 *, _BYTE *))off_24EC63148[v273])(&v266, object);
    v100 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v100 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (*(char *)(v6 + 23) >= 0)
      v101 = (const char *)v6;
    else
      v101 = *(const char **)v6;
    sub_22322C138((uint64_t)v283, "Overriding variable \"%s\" with value %s from key \"%s\"", v98, (const char *)v100, v101);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_223182C08((uint64_t)v283);
  }
  sub_223182C08((uint64_t)v283);
  v102 = (std::__shared_weak_count *)v287;
  if (v287)
  {
    v103 = (unint64_t *)(v287 + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    goto LABEL_291;
  }
}

void sub_223CA98F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,void *a49,int a50,__int16 a51,char a52,char a53,char a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (a54 && a53 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  if (a35 < 0)
  {
    operator delete(a30);
    sub_223182DAC(v58 - 208);
    sub_223224234((uint64_t)&a42);
    _Unwind_Resume(a1);
  }
  sub_223182DAC(v58 - 208);
  sub_223224234((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_223CA9CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223224234((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223CA9CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *object,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  uint64_t v46;

  if (a46 && a45 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  if (SHIBYTE(a38) < 0)
  {
    operator delete(a36);
    sub_223182DAC(v46 - 208);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223CA9D4CLL);
}

void sub_223CA9D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  sub_22319B964((uint64_t)&a39);
  sub_223182DAC(v39 - 208);
  _Unwind_Resume(a1);
}

void sub_223CA9D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223224234((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223CA9D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_223167354((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_223CA9D88(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_223CA9D94(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CD918);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD918))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CD910);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CD918);
  }
  *a1 = qword_2540CD910;
}

void sub_223CA9E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CD918);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CD918);
  _Unwind_Resume(a1);
}

void sub_223CA9E88(uint64_t a1, uint64_t a2, int *a3, const char **a4)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  size_t v18;
  unsigned __int8 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  char *v27;
  void **v28;
  uint64_t v29;
  size_t v30;
  const char *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  std::string *v38;
  std::string::size_type size;
  size_t v40;
  void *v41;
  unsigned __int8 v42;
  const char *v43;
  size_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  size_t v52;
  std::__shared_weak_count_vtbl *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  char *v56;
  std::__shared_weak_count *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::string::size_type v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  const char **v74;
  uint64_t v75;
  int v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  void *v94;
  const char *v95;
  const char *v96;
  const char *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  const void **v102;
  unsigned __int8 v103;
  const char *v104;
  size_t v105;
  _BYTE *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  void **v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  char *v114;
  size_t v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *p_shared_owners;
  char *v119;
  std::__shared_weak_count *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::string::size_type v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  void *v158;
  std::string *p_p;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v163;
  const void *v164;
  uint64_t v165;
  uint64_t v166;
  void **v167;
  uint64_t v168;
  uint64_t v169;
  size_t v170;
  const char *v171;
  unsigned __int8 v172;
  const char *v173;
  size_t v174;
  _BYTE *v175;
  uint64_t v176;
  unint64_t v177;
  void **v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  NSObject *v186;
  size_t v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  size_t v190;
  size_t v191;
  void *v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  char v197;
  char *v198;
  const char *v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  void *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  void **v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  const char *v244;
  uint64_t v245;
  int v246;
  const char **v247;
  uint64_t v248;
  char *__s;
  char *__sa;
  char *__sb;
  std::string __p;
  __int128 v253;
  char *v254;
  const char *v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  const char *v258;
  void *__dst[2];
  int64_t v260;
  int **v261;
  __int128 v262;
  std::__shared_weak_count *v263;
  char *v264;
  std::__shared_weak_count *v265;
  void *v266;
  __int128 v267;
  _BYTE object[24];
  unint64_t v269;
  void *v270[2];
  size_t v271;
  __int128 v272;
  unint64_t v273;
  void *v274;
  char v275;
  unint64_t v276;
  int v277;
  uint64_t v278;
  _BYTE v279[24];
  __int128 v280;
  uint64_t v281;
  __int128 v282;
  const char *v283;
  uint64_t v284;
  uint64_t v285;
  const char *v286[5];

  v6 = a2;
  v286[2] = *(const char **)MEMORY[0x24BDAC8D0];
  v8 = sub_223CC1200(a1, a2);
  if ((v8 & 0xFF00000000) == 0)
  {
    if (sub_22452B568(a1, v6))
    {
      sub_224527BAC(v6, (CFStringRef *)object);
      sub_223CC1B5C((uint64_t)&v266, a1, *(void **)object);
      v20 = *(std::__shared_weak_count **)&object[8];
      if (*(_QWORD *)&object[8])
      {
        v21 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      sub_223CA9D94(v286);
      if (**((int **)v286[0] + 7) > 5
        || ((v23 = *((unsigned __int8 *)v286[0] + 72),
             v24 = sub_22322F254((uint64_t)v286[0], "OSLogSurrogateAppender", 1, 0),
             v25 = v24,
             !v23)
          ? (v26 = v24 == 0)
          : (v26 = 0),
            v26))
      {
LABEL_279:
        if (BYTE8(v267))
        {
          v98 = (std::__shared_weak_count *)v267;
          if ((_QWORD)v267)
          {
            v163 = (unint64_t *)(v267 + 8);
            do
              v100 = __ldaxr(v163);
            while (__stlxr(v100 - 1, v163));
LABEL_283:
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
            return;
          }
        }
        return;
      }
      *(_QWORD *)v279 = v286;
      *(std::chrono::steady_clock::time_point *)&v279[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v279[16] = std::chrono::system_clock::now();
      LODWORD(v280) = 5;
      *((_QWORD *)&v280 + 1) = "unknown file";
      LODWORD(v281) = 96;
      *((_QWORD *)&v282 + 1) = 0;
      v283 = 0;
      *(_QWORD *)&v282 = "unknown function";
      if (*(char *)(v6 + 23) >= 0)
        v27 = (char *)v6;
      else
        v27 = *(char **)v6;
      LODWORD(v269) = 0;
      sub_223CC1C9C((uint64_t)object, (CFTypeRef *)&v266);
      if ((_DWORD)v269 == -1)
        sub_22316DD70();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v262;
      ((void (*)(void **__return_ptr, std::string *, _BYTE *))off_24EC63160[v269])(__dst, &__p, object);
      if ((_DWORD)v269 != -1)
        ((void (*)(std::string *, _BYTE *))off_24EC63148[v269])(&__p, object);
      v28 = __dst;
      if (v260 < 0)
        v28 = (void **)__dst[0];
      v261 = (int **)v28;
      v258 = "int32";
      v29 = **(_QWORD **)v279;
      __sa = **(char ***)v279;
      if (*(char *)(**(_QWORD **)v279 + 39) < 0)
      {
        v31 = *(const char **)(v29 + 16);
        v30 = *(_QWORD *)(v29 + 24);
      }
      else
      {
        v30 = *(unsigned __int8 *)(**(_QWORD **)v279 + 39);
        v31 = (const char *)(v29 + 16);
      }
      v248 = v29 + 16;
      v103 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v103 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v269 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v104 = (const char *)&xmmword_255788F40;
      else
        v104 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v105 = byte_255788F57;
      else
        v105 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v104, v31);
      v106 = &object[8];
      if (v105 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v105 >= 0x17)
      {
        v107 = v23;
        v108 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v105 | 7) != 0x17)
          v108 = v105 | 7;
        v109 = v108 + 1;
        v106 = operator new(v108 + 1);
        *(_QWORD *)&object[16] = v105;
        v269 = v109 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v106;
        v23 = v107;
      }
      else
      {
        HIBYTE(v269) = v105;
        if (!v105)
        {
LABEL_185:
          v106[v105] = 0;
          LOBYTE(v270[0]) = 1;
          v110 = &v270[1];
          if (v30 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v30 >= 0x17)
          {
            v111 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v30 | 7) != 0x17)
              v111 = v30 | 7;
            v112 = v111 + 1;
            v110 = (void **)operator new(v111 + 1);
            v271 = v30;
            *(_QWORD *)&v272 = v112 | 0x8000000000000000;
            v270[1] = v110;
          }
          else
          {
            BYTE7(v272) = v30;
            if (!v30)
              goto LABEL_193;
          }
          memmove(v110, v31, v30);
LABEL_193:
          *((_BYTE *)v110 + v30) = 0;
          BYTE8(v272) = 1;
          v113 = *(NSObject **)object;
          if (SBYTE7(v272) < 0)
            operator delete(v270[1]);
          if (LOBYTE(v270[0]) && SHIBYTE(v269) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v25 && *(_QWORD *)(v25 + 24))
          {
            v114 = v27;
            v115 = _os_log_pack_size();
            v116 = (std::__shared_weak_count_vtbl *)operator new(v115, (std::align_val_t)8uLL);
            v117 = (std::__shared_weak_count *)operator new();
            v117->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v117->__shared_owners_;
            v117->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v117->__shared_weak_owners_ = 0;
            v117[1].__vftable = v116;
            *(_QWORD *)&v262 = v116;
            *((_QWORD *)&v262 + 1) = v116;
            v264 = 0;
            v265 = 0;
            v263 = v117;
            sub_223CC18F4((uint64_t)object, v114, (const char **)&v261, &v258);
            v119 = (char *)operator new(0x68uLL);
            v120 = (std::__shared_weak_count *)v119;
            *((_QWORD *)v119 + 3) = off_24EC206F8;
            *(_QWORD *)v119 = &off_24EC206A8;
            *((_QWORD *)v119 + 6) = v269;
            v121 = v273;
            *((_QWORD *)v119 + 9) = v271;
            *((_QWORD *)v119 + 1) = 0;
            v122 = (unint64_t *)(v119 + 8);
            *((_QWORD *)v119 + 2) = 0;
            *((_OWORD *)v119 + 2) = *(_OWORD *)&object[8];
            *(_OWORD *)(v119 + 56) = *(_OWORD *)v270;
            *((_QWORD *)v119 + 12) = v121;
            *((_OWORD *)v119 + 5) = v272;
            v264 = v119 + 24;
            v265 = (std::__shared_weak_count *)v119;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v116;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v117;
            do
              v123 = __ldxr(p_shared_owners);
            while (__stxr(v123 + 1, p_shared_owners));
            *(_QWORD *)&v253 = v119 + 24;
            *((_QWORD *)&v253 + 1) = v119;
            do
              v124 = __ldxr(v122);
            while (__stxr(v124 + 1, v122));
            v254 = v119 + 24;
            do
              v125 = __ldaxr(v122);
            while (__stlxr(v125 - 1, v122));
            if (!v125)
            {
              (*(void (**)(char *))(*(_QWORD *)v119 + 16))(v119);
              std::__shared_weak_count::__release_weak(v120);
            }
            v126 = v23;
            v127 = v263;
            if (v263)
            {
              v128 = (unint64_t *)&v263->__shared_owners_;
              do
                v129 = __ldaxr(v128);
              while (__stlxr(v129 - 1, v128));
              if (!v129)
              {
                ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                std::__shared_weak_count::__release_weak(v127);
              }
            }
            v130 = __p.__r_.__value_.__r.__words[0];
            if (v254[31] >= 0)
              v131 = v254 + 8;
            else
              v131 = (char *)*((_QWORD *)v254 + 1);
            if (v254[55] >= 0)
              v132 = v254 + 32;
            else
              v132 = (char *)*((_QWORD *)v254 + 4);
            if (v254[79] >= 0)
              v133 = v254 + 56;
            else
              v133 = (char *)*((_QWORD *)v254 + 7);
            v134 = _os_log_pack_fill();
            *(_DWORD *)v134 = 136315650;
            *(_QWORD *)(v134 + 4) = v131;
            *(_WORD *)(v134 + 12) = 2080;
            *(_QWORD *)(v134 + 14) = v132;
            *(_WORD *)(v134 + 22) = 2080;
            *(_QWORD *)(v134 + 24) = v133;
            v135 = operator new();
            v136 = __sa[39];
            v137 = v248;
            if ((v136 & 0x80u) != 0)
            {
              v137 = *((_QWORD *)__sa + 2);
              v136 = *((_QWORD *)__sa + 3);
            }
            *(_QWORD *)v135 = v130;
            *(_OWORD *)(v135 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
            *(_OWORD *)(v135 + 24) = v253;
            v253 = 0uLL;
            *(_QWORD *)(v135 + 40) = v137;
            *(_QWORD *)(v135 + 48) = v136;
            *(_BYTE *)(v135 + 56) = 16;
            *(_QWORD *)&v262 = 0;
            *(_QWORD *)object = v135;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v25 + 24) + 40))(*(_QWORD *)(v25 + 24), object);
            v23 = v126;
            v138 = *(_QWORD *)object;
            *(_QWORD *)object = 0;
            if (v138)
            {
              v139 = *(std::__shared_weak_count **)(v138 + 32);
              if (v139)
              {
                v140 = (unint64_t *)&v139->__shared_owners_;
                do
                  v141 = __ldaxr(v140);
                while (__stlxr(v141 - 1, v140));
                if (!v141)
                {
                  ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                  std::__shared_weak_count::__release_weak(v139);
                }
              }
              v142 = *(std::__shared_weak_count **)(v138 + 16);
              if (v142)
              {
                v143 = (unint64_t *)&v142->__shared_owners_;
                do
                  v144 = __ldaxr(v143);
                while (__stlxr(v144 - 1, v143));
                if (!v144)
                {
                  ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                  std::__shared_weak_count::__release_weak(v142);
                }
              }
              MEMORY[0x227684CE8](v138, 0x10F0C40B62ED6C6);
              v145 = v262;
              *(_QWORD *)&v262 = 0;
              if (v145)
              {
                v146 = *(std::__shared_weak_count **)(v145 + 32);
                if (v146)
                {
                  v147 = (unint64_t *)&v146->__shared_owners_;
                  do
                    v148 = __ldaxr(v147);
                  while (__stlxr(v148 - 1, v147));
                  if (!v148)
                  {
                    ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                    std::__shared_weak_count::__release_weak(v146);
                  }
                }
                v149 = *(std::__shared_weak_count **)(v145 + 16);
                if (v149)
                {
                  v150 = (unint64_t *)&v149->__shared_owners_;
                  do
                    v151 = __ldaxr(v150);
                  while (__stlxr(v151 - 1, v150));
                  if (!v151)
                  {
                    ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                    std::__shared_weak_count::__release_weak(v149);
                  }
                }
                MEMORY[0x227684CE8](v145, 0x10F0C40B62ED6C6);
              }
            }
            v152 = (std::__shared_weak_count *)*((_QWORD *)&v253 + 1);
            if (*((_QWORD *)&v253 + 1))
            {
              v153 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
              do
                v154 = __ldaxr(v153);
              while (__stlxr(v154 - 1, v153));
              if (!v154)
              {
                ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                std::__shared_weak_count::__release_weak(v152);
              }
            }
            v155 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
            if (__p.__r_.__value_.__r.__words[2])
            {
              v156 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
              do
                v157 = __ldaxr(v156);
              while (__stlxr(v157 - 1, v156));
              if (!v157)
              {
                ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                std::__shared_weak_count::__release_weak(v155);
              }
            }
          }
          else
          {
            os_log_type_enabled(v113, OS_LOG_TYPE_ERROR);
            *(_DWORD *)object = 136315650;
            *(_QWORD *)&object[4] = v27;
            *(_WORD *)&object[12] = 2080;
            *(_QWORD *)&object[14] = v261;
            *(_WORD *)&object[22] = 2080;
            v269 = (unint64_t)v258;
            v158 = (void *)_os_log_send_and_compose_impl();
            if (v158)
              free(v158);
          }
          if (SHIBYTE(v260) < 0)
            operator delete(__dst[0]);
          if (v23)
          {
            if (*(char *)(v6 + 23) < 0)
              v6 = *(_QWORD *)v6;
            LODWORD(v269) = 0;
            sub_223CC1C9C((uint64_t)object, (CFTypeRef *)&v266);
            if ((_DWORD)v269 == -1)
              sub_22316DD70();
            *(_QWORD *)&v262 = __dst;
            ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24EC63160[v269])(&__p, &v262, object);
            if ((_DWORD)v269 != -1)
              ((void (*)(__int128 *, _BYTE *))off_24EC63148[v269])(&v262, object);
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            sub_22322C138((uint64_t)v279, "Error while getting value for key \"%s\" and value %s expecting type %s", (const char *)v6, (const char *)p_p, "int32");
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            sub_223182C08((uint64_t)v279);
          }
          sub_223182C08((uint64_t)v279);
          v160 = (std::__shared_weak_count *)v283;
          if (v283)
          {
            v161 = (unint64_t *)(v283 + 8);
            do
              v162 = __ldaxr(v161);
            while (__stlxr(v162 - 1, v161));
            if (!v162)
            {
              ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
              std::__shared_weak_count::__release_weak(v160);
            }
          }
          goto LABEL_279;
        }
      }
      memmove(v106, v104, v105);
      goto LABEL_185;
    }
    sub_223CA9D94(&v261);
    if (*v261[7] > 3)
      return;
    v32 = *((unsigned __int8 *)v261 + 72);
    v33 = sub_22322F254((uint64_t)v261, "OSLogSurrogateAppender", 1, 0);
    v34 = v33;
    if (!v32 && v33 == 0)
      return;
    sub_223195210((uint64_t)object);
    *(_QWORD *)v279 = "Key not found in dictionary \"";
    *(_QWORD *)&v279[8] = 29;
    v36 = *(unsigned __int8 *)(v6 + 23);
    if ((v36 & 0x80u) == 0)
      v37 = v6;
    else
      v37 = *(_QWORD *)v6;
    if ((v36 & 0x80u) != 0)
      v36 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)&v279[16] = v37;
    *(_QWORD *)&v280 = v36;
    *((_QWORD *)&v280 + 1) = "\" for variable \"";
    v281 = 16;
    v282 = *(_OWORD *)a4;
    v283 = "\"";
    v284 = 1;
    sub_2231A9820((uint64_t)v279, (uint64_t)&v285, 0, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = &__p;
    else
      v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_2231813E8(&object[16], (uint64_t)v38, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v277 & 0x10) != 0)
    {
      v101 = v276;
      if (v276 < v273)
      {
        v276 = v273;
        v101 = v273;
      }
      v102 = (const void **)&v272 + 1;
    }
    else
    {
      if ((v277 & 8) == 0)
      {
        v40 = 0;
        HIBYTE(v260) = 0;
        v41 = __dst;
        goto LABEL_294;
      }
      v102 = (const void **)&v270[1];
      v101 = v272;
    }
    v164 = *v102;
    v40 = v101 - (_QWORD)*v102;
    if (v40 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v40 >= 0x17)
    {
      v165 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17)
        v165 = v40 | 7;
      v166 = v165 + 1;
      v41 = operator new(v165 + 1);
      __dst[1] = (void *)v40;
      v260 = v166 | 0x8000000000000000;
      __dst[0] = v41;
    }
    else
    {
      HIBYTE(v260) = v101 - *(_BYTE *)v102;
      v41 = __dst;
      if (!v40)
      {
LABEL_294:
        *((_BYTE *)v41 + v40) = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v261;
        __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v253) = 3;
        *((_QWORD *)&v253 + 1) = "unknown file";
        LODWORD(v254) = 99;
        v256 = 0;
        v257 = 0;
        v255 = "unknown function";
        if (v260 >= 0)
          v167 = __dst;
        else
          v167 = (void **)__dst[0];
        v168 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
        v169 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
        if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v171 = *(const char **)(v168 + 16);
          v170 = *(_QWORD *)(v168 + 24);
        }
        else
        {
          v170 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
          v171 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
        }
        v172 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v172 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v279);
          sub_223199C58("com.apple.cv3d", (unint64_t)v279, &xmmword_255788F40);
          if ((_BYTE)v280 && (v279[23] & 0x80000000) != 0)
            operator delete(*(void **)v279);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v173 = (const char *)&xmmword_255788F40;
        else
          v173 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v174 = byte_255788F57;
        else
          v174 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)v279 = os_log_create(v173, v171);
        v175 = &v279[8];
        if (v174 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v174 >= 0x17)
        {
          __sb = (char *)v171;
          v176 = v168;
          v177 = v34;
          v178 = v167;
          v179 = v32;
          v180 = v169;
          v181 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v174 | 7) != 0x17)
            v181 = v174 | 7;
          v182 = v181 + 1;
          v175 = operator new(v181 + 1);
          *(_QWORD *)&v279[16] = v174;
          *(_QWORD *)&v280 = v182 | 0x8000000000000000;
          *(_QWORD *)&v279[8] = v175;
          v169 = v180;
          v32 = v179;
          v167 = v178;
          v34 = v177;
          v168 = v176;
          v171 = __sb;
        }
        else
        {
          BYTE7(v280) = v174;
          if (!v174)
          {
LABEL_315:
            v175[v174] = 0;
            BYTE8(v280) = 1;
            v183 = &v281;
            if (v170 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v170 >= 0x17)
            {
              v184 = (v170 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v170 | 7) != 0x17)
                v184 = v170 | 7;
              v185 = v184 + 1;
              v183 = (uint64_t *)operator new(v184 + 1);
              *(_QWORD *)&v282 = v170;
              *((_QWORD *)&v282 + 1) = v185 | 0x8000000000000000;
              v281 = (uint64_t)v183;
            }
            else
            {
              HIBYTE(v282) = v170;
              if (!v170)
              {
LABEL_323:
                *((_BYTE *)v183 + v170) = 0;
                LOBYTE(v283) = 1;
                v186 = *(NSObject **)v279;
                if (SHIBYTE(v282) < 0)
                  operator delete((void *)v281);
                if (BYTE8(v280) && SBYTE7(v280) < 0)
                  operator delete(*(void **)&v279[8]);
                if (*(_QWORD *)v279)
                  os_release(*(void **)v279);
                if (!v34 || !*(_QWORD *)(v34 + 24))
                {
                  os_log_type_enabled(v186, OS_LOG_TYPE_INFO);
                  *(_DWORD *)v279 = 136315138;
                  *(_QWORD *)&v279[4] = v167;
                  v193 = (void *)_os_log_send_and_compose_impl();
                  if (v193)
                    free(v193);
                  goto LABEL_404;
                }
                v187 = _os_log_pack_size();
                v188 = (std::__shared_weak_count_vtbl *)operator new(v187, (std::align_val_t)8uLL);
                v189 = (std::__shared_weak_count *)operator new();
                v189->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v189->__shared_owners_ = 0;
                v189->__shared_weak_owners_ = 0;
                v189[1].__vftable = v188;
                *(_QWORD *)&v262 = v188;
                *((_QWORD *)&v262 + 1) = v188;
                v264 = 0;
                v265 = 0;
                v263 = v189;
                v190 = strlen((const char *)v167);
                if (v190 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v191 = v190;
                if (v190 >= 0x17)
                {
                  v194 = (v190 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v190 | 7) != 0x17)
                    v194 = v190 | 7;
                  v195 = v194 + 1;
                  v192 = operator new(v194 + 1);
                  *(_QWORD *)&v267 = v191;
                  *((_QWORD *)&v267 + 1) = v195 | 0x8000000000000000;
                  v266 = v192;
                }
                else
                {
                  HIBYTE(v267) = v190;
                  v192 = &v266;
                  if (!v190)
                  {
LABEL_342:
                    *((_BYTE *)v192 + v191) = 0;
                    v196 = v266;
                    v286[0] = (const char *)v267;
                    *(const char **)((char *)v286 + 7) = *(const char **)((char *)&v267 + 7);
                    v197 = HIBYTE(v267);
                    v198 = (char *)operator new(0x38uLL);
                    *((_QWORD *)v198 + 1) = 0;
                    *((_QWORD *)v198 + 2) = 0;
                    *((_QWORD *)v198 + 3) = off_24EC1FA48;
                    *(_QWORD *)v198 = &off_24EC1F9F8;
                    v199 = v286[0];
                    *((_QWORD *)v198 + 4) = v196;
                    *((_QWORD *)v198 + 5) = v199;
                    *(const char **)(v198 + 47) = *(const char **)((char *)v286 + 7);
                    v198[55] = v197;
                    memset(v286, 0, 15);
                    v200 = v265;
                    v264 = v198 + 24;
                    v265 = (std::__shared_weak_count *)v198;
                    if (v200)
                    {
                      v201 = (unint64_t *)&v200->__shared_owners_;
                      do
                        v202 = __ldaxr(v201);
                      while (__stlxr(v202 - 1, v201));
                      if (!v202)
                      {
                        ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                        std::__shared_weak_count::__release_weak(v200);
                      }
                    }
                    *(_OWORD *)v279 = v262;
                    v203 = (uint64_t)v264;
                    *(_QWORD *)&v279[16] = v263;
                    if (v263)
                    {
                      v204 = (unint64_t *)&v263->__shared_owners_;
                      do
                        v205 = __ldxr(v204);
                      while (__stxr(v205 + 1, v204));
                    }
                    v206 = v265;
                    *(_QWORD *)&v280 = v203;
                    *((_QWORD *)&v280 + 1) = v265;
                    if (v265)
                    {
                      v207 = (unint64_t *)&v265->__shared_owners_;
                      do
                        v208 = __ldxr(v207);
                      while (__stxr(v208 + 1, v207));
                      v281 = v203;
                      do
                        v209 = __ldaxr(v207);
                      while (__stlxr(v209 - 1, v207));
                      if (!v209)
                      {
                        ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                        std::__shared_weak_count::__release_weak(v206);
                      }
                    }
                    else
                    {
                      v281 = v203;
                    }
                    v210 = v263;
                    if (v263)
                    {
                      v211 = (unint64_t *)&v263->__shared_owners_;
                      do
                        v212 = __ldaxr(v211);
                      while (__stlxr(v212 - 1, v211));
                      if (!v212)
                      {
                        ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                        std::__shared_weak_count::__release_weak(v210);
                      }
                    }
                    v213 = *(_QWORD *)v279;
                    if (*(char *)(v281 + 31) >= 0)
                      v214 = (char *)(v281 + 8);
                    else
                      v214 = *(char **)(v281 + 8);
                    v215 = _os_log_pack_fill();
                    *(_DWORD *)v215 = 136315138;
                    *(_QWORD *)(v215 + 4) = v214;
                    v216 = operator new();
                    v217 = *(unsigned __int8 *)(v168 + 39);
                    if ((v217 & 0x80u) == 0)
                      v218 = v169;
                    else
                      v218 = *(_QWORD *)(v168 + 16);
                    if ((v217 & 0x80u) != 0)
                      v217 = *(_QWORD *)(v168 + 24);
                    *(_QWORD *)v216 = v213;
                    *(_OWORD *)(v216 + 8) = *(_OWORD *)&v279[8];
                    *(_QWORD *)&v279[8] = 0;
                    *(_QWORD *)&v279[16] = 0;
                    *(_OWORD *)(v216 + 24) = v280;
                    v280 = 0uLL;
                    *(_QWORD *)(v216 + 40) = v218;
                    *(_QWORD *)(v216 + 48) = v217;
                    *(_BYTE *)(v216 + 56) = 1;
                    v266 = 0;
                    *(_QWORD *)&v262 = v216;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v34 + 24) + 40))(*(_QWORD *)(v34 + 24), &v262);
                    v219 = v262;
                    *(_QWORD *)&v262 = 0;
                    if (v219)
                    {
                      v220 = *(std::__shared_weak_count **)(v219 + 32);
                      if (v220)
                      {
                        v221 = (unint64_t *)&v220->__shared_owners_;
                        do
                          v222 = __ldaxr(v221);
                        while (__stlxr(v222 - 1, v221));
                        if (!v222)
                        {
                          ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                          std::__shared_weak_count::__release_weak(v220);
                        }
                      }
                      v223 = *(std::__shared_weak_count **)(v219 + 16);
                      if (v223)
                      {
                        v224 = (unint64_t *)&v223->__shared_owners_;
                        do
                          v225 = __ldaxr(v224);
                        while (__stlxr(v225 - 1, v224));
                        if (!v225)
                        {
                          ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                          std::__shared_weak_count::__release_weak(v223);
                        }
                      }
                      MEMORY[0x227684CE8](v219, 0x10F0C40B62ED6C6);
                      v226 = v266;
                      v266 = 0;
                      if (v226)
                      {
                        v227 = (std::__shared_weak_count *)*((_QWORD *)v226 + 4);
                        if (v227)
                        {
                          v228 = (unint64_t *)&v227->__shared_owners_;
                          do
                            v229 = __ldaxr(v228);
                          while (__stlxr(v229 - 1, v228));
                          if (!v229)
                          {
                            ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                            std::__shared_weak_count::__release_weak(v227);
                          }
                        }
                        v230 = (std::__shared_weak_count *)*((_QWORD *)v226 + 2);
                        if (v230)
                        {
                          v231 = (unint64_t *)&v230->__shared_owners_;
                          do
                            v232 = __ldaxr(v231);
                          while (__stlxr(v232 - 1, v231));
                          if (!v232)
                          {
                            ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                            std::__shared_weak_count::__release_weak(v230);
                          }
                        }
                        MEMORY[0x227684CE8](v226, 0x10F0C40B62ED6C6);
                      }
                    }
                    v233 = (std::__shared_weak_count *)*((_QWORD *)&v280 + 1);
                    if (*((_QWORD *)&v280 + 1))
                    {
                      v234 = (unint64_t *)(*((_QWORD *)&v280 + 1) + 8);
                      do
                        v235 = __ldaxr(v234);
                      while (__stlxr(v235 - 1, v234));
                      if (!v235)
                      {
                        ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                        std::__shared_weak_count::__release_weak(v233);
                      }
                    }
                    v236 = *(std::__shared_weak_count **)&v279[16];
                    if (*(_QWORD *)&v279[16])
                    {
                      v237 = (unint64_t *)(*(_QWORD *)&v279[16] + 8);
                      do
                        v238 = __ldaxr(v237);
                      while (__stlxr(v238 - 1, v237));
                      if (!v238)
                      {
                        ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                        std::__shared_weak_count::__release_weak(v236);
                      }
                    }
LABEL_404:
                    if (v32)
                    {
                      v239 = __dst;
                      if (v260 < 0)
                        v239 = (void **)__dst[0];
                      sub_22322C138((uint64_t)&__p, "%s", (const char *)v239);
                      sub_223182C08((uint64_t)&__p);
                    }
                    sub_223182C08((uint64_t)&__p);
                    v240 = v257;
                    if (v257)
                    {
                      v241 = (unint64_t *)&v257->__shared_owners_;
                      do
                        v242 = __ldaxr(v241);
                      while (__stlxr(v242 - 1, v241));
                      if (!v242)
                      {
                        ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                        std::__shared_weak_count::__release_weak(v240);
                      }
                    }
                    if (SHIBYTE(v260) < 0)
                      operator delete(__dst[0]);
                    *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
                    v243 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&object[16] = v243;
                    v269 = MEMORY[0x24BEDB848] + 16;
                    if (v275 < 0)
                      operator delete(v274);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x227684BE0](&v278);
                    return;
                  }
                }
                memcpy(v192, v167, v191);
                goto LABEL_342;
              }
            }
            memmove(v183, v171, v170);
            goto LABEL_323;
          }
        }
        memmove(v175, v173, v174);
        goto LABEL_315;
      }
    }
    memmove(v41, v164, v40);
    goto LABEL_294;
  }
  *a3 = v8;
  sub_223CA9D94(__dst);
  if (**((int **)__dst[0] + 7) <= 4)
  {
    v9 = *((unsigned __int8 *)__dst[0] + 72);
    v10 = sub_22322F254((uint64_t)__dst[0], "OSLogSurrogateAppender", 1, 0);
    v11 = v10;
    if (v9 || v10 != 0)
    {
      *(_QWORD *)v279 = __dst;
      *(std::chrono::steady_clock::time_point *)&v279[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v279[16] = std::chrono::system_clock::now();
      LODWORD(v280) = 4;
      *((_QWORD *)&v280 + 1) = "unknown file";
      LODWORD(v281) = 91;
      *((_QWORD *)&v282 + 1) = 0;
      v283 = 0;
      *(_QWORD *)&v282 = "unknown function";
      v13 = (char *)*a4;
      sub_223A9EC04(a3);
      v247 = a4;
      __s = v13;
      if (v267 >= 0)
        v14 = (const char *)&v266;
      else
        v14 = (const char *)v266;
      v286[0] = v14;
      if (*(char *)(v6 + 23) >= 0)
        v15 = (const char *)v6;
      else
        v15 = *(const char **)v6;
      v261 = (int **)v15;
      v16 = **(_QWORD **)v279;
      v17 = (const char *)(**(_QWORD **)v279 + 16);
      v244 = v17;
      if (*(char *)(**(_QWORD **)v279 + 39) < 0)
      {
        v17 = *(const char **)(v16 + 16);
        v18 = *(_QWORD *)(v16 + 24);
        v245 = **(_QWORD **)v279;
        v246 = v9;
        v42 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v42 & 1) != 0)
          goto LABEL_59;
      }
      else
      {
        v18 = *(unsigned __int8 *)(**(_QWORD **)v279 + 39);
        v245 = **(_QWORD **)v279;
        v246 = v9;
        v19 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v19 & 1) != 0)
          goto LABEL_59;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v269 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_59:
      if (byte_255788F57 >= 0)
        v43 = (const char *)&xmmword_255788F40;
      else
        v43 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v44 = byte_255788F57;
      else
        v44 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v43, v17);
      v45 = &object[8];
      if (v44 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v44 >= 0x17)
      {
        v46 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v44 | 7) != 0x17)
          v46 = v44 | 7;
        v47 = v46 + 1;
        v45 = operator new(v46 + 1);
        *(_QWORD *)&object[16] = v44;
        v269 = v47 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v45;
      }
      else
      {
        HIBYTE(v269) = v44;
        if (!v44)
        {
LABEL_73:
          v45[v44] = 0;
          LOBYTE(v270[0]) = 1;
          v48 = &v270[1];
          if (v18 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v18 >= 0x17)
          {
            v49 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v18 | 7) != 0x17)
              v49 = v18 | 7;
            v50 = v49 + 1;
            v48 = (void **)operator new(v49 + 1);
            v271 = v18;
            *(_QWORD *)&v272 = v50 | 0x8000000000000000;
            v270[1] = v48;
          }
          else
          {
            BYTE7(v272) = v18;
            if (!v18)
            {
LABEL_81:
              *((_BYTE *)v48 + v18) = 0;
              BYTE8(v272) = 1;
              v51 = *(NSObject **)object;
              if (SBYTE7(v272) < 0)
                operator delete(v270[1]);
              if (LOBYTE(v270[0]) && SHIBYTE(v269) < 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v11 && *(_QWORD *)(v11 + 24))
              {
                v52 = _os_log_pack_size();
                v53 = (std::__shared_weak_count_vtbl *)operator new(v52, (std::align_val_t)8uLL);
                v54 = (std::__shared_weak_count *)operator new();
                v54->__shared_owners_ = 0;
                v55 = (unint64_t *)&v54->__shared_owners_;
                v54->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v54->__shared_weak_owners_ = 0;
                v54[1].__vftable = v53;
                *(_QWORD *)&v262 = v53;
                *((_QWORD *)&v262 + 1) = v53;
                v264 = 0;
                v265 = 0;
                v263 = v54;
                sub_223CC18F4((uint64_t)object, __s, v286, (const char **)&v261);
                v56 = (char *)operator new(0x68uLL);
                v57 = (std::__shared_weak_count *)v56;
                *((_QWORD *)v56 + 3) = off_24EC206F8;
                *(_QWORD *)v56 = &off_24EC206A8;
                *((_QWORD *)v56 + 6) = v269;
                v58 = v273;
                *((_QWORD *)v56 + 9) = v271;
                *((_QWORD *)v56 + 1) = 0;
                v59 = (unint64_t *)(v56 + 8);
                *((_QWORD *)v56 + 2) = 0;
                *((_OWORD *)v56 + 2) = *(_OWORD *)&object[8];
                *(_OWORD *)(v56 + 56) = *(_OWORD *)v270;
                *((_QWORD *)v56 + 12) = v58;
                *((_OWORD *)v56 + 5) = v272;
                v264 = v56 + 24;
                v265 = (std::__shared_weak_count *)v56;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)v53;
                __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v54;
                do
                  v60 = __ldxr(v55);
                while (__stxr(v60 + 1, v55));
                *(_QWORD *)&v253 = v56 + 24;
                *((_QWORD *)&v253 + 1) = v56;
                do
                  v61 = __ldxr(v59);
                while (__stxr(v61 + 1, v59));
                v254 = v56 + 24;
                do
                  v62 = __ldaxr(v59);
                while (__stlxr(v62 - 1, v59));
                if (!v62)
                {
                  (*(void (**)(char *))(*(_QWORD *)v56 + 16))(v56);
                  std::__shared_weak_count::__release_weak(v57);
                }
                v63 = v263;
                if (v263)
                {
                  v64 = (unint64_t *)&v263->__shared_owners_;
                  do
                    v65 = __ldaxr(v64);
                  while (__stlxr(v65 - 1, v64));
                  if (!v65)
                  {
                    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                    std::__shared_weak_count::__release_weak(v63);
                  }
                }
                v66 = __p.__r_.__value_.__r.__words[0];
                if (v254[31] >= 0)
                  v67 = v254 + 8;
                else
                  v67 = (char *)*((_QWORD *)v254 + 1);
                if (v254[55] >= 0)
                  v68 = v254 + 32;
                else
                  v68 = (char *)*((_QWORD *)v254 + 4);
                if (v254[79] >= 0)
                  v69 = v254 + 56;
                else
                  v69 = (char *)*((_QWORD *)v254 + 7);
                v70 = _os_log_pack_fill();
                *(_DWORD *)v70 = 136315650;
                *(_QWORD *)(v70 + 4) = v67;
                *(_WORD *)(v70 + 12) = 2080;
                *(_QWORD *)(v70 + 14) = v68;
                *(_WORD *)(v70 + 22) = 2080;
                *(_QWORD *)(v70 + 24) = v69;
                v71 = operator new();
                v72 = *(unsigned __int8 *)(v245 + 39);
                v73 = v244;
                if ((v72 & 0x80u) != 0)
                {
                  v73 = *(const char **)(v245 + 16);
                  v72 = *(_QWORD *)(v245 + 24);
                }
                *(_QWORD *)v71 = v66;
                *(_OWORD *)(v71 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
                *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v71 + 24) = v253;
                v253 = 0uLL;
                *(_QWORD *)(v71 + 40) = v73;
                *(_QWORD *)(v71 + 48) = v72;
                *(_BYTE *)(v71 + 56) = 16;
                *(_QWORD *)&v262 = 0;
                *(_QWORD *)object = v71;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), object);
                v74 = v247;
                v75 = *(_QWORD *)object;
                *(_QWORD *)object = 0;
                v76 = v246;
                if (v75)
                {
                  v77 = *(std::__shared_weak_count **)(v75 + 32);
                  if (v77)
                  {
                    v78 = (unint64_t *)&v77->__shared_owners_;
                    do
                      v79 = __ldaxr(v78);
                    while (__stlxr(v79 - 1, v78));
                    if (!v79)
                    {
                      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                      std::__shared_weak_count::__release_weak(v77);
                    }
                  }
                  v80 = *(std::__shared_weak_count **)(v75 + 16);
                  if (v80)
                  {
                    v81 = (unint64_t *)&v80->__shared_owners_;
                    do
                      v82 = __ldaxr(v81);
                    while (__stlxr(v82 - 1, v81));
                    if (!v82)
                    {
                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                      std::__shared_weak_count::__release_weak(v80);
                    }
                  }
                  MEMORY[0x227684CE8](v75, 0x10F0C40B62ED6C6);
                  v83 = v262;
                  *(_QWORD *)&v262 = 0;
                  if (v83)
                  {
                    v84 = *(std::__shared_weak_count **)(v83 + 32);
                    if (v84)
                    {
                      v85 = (unint64_t *)&v84->__shared_owners_;
                      do
                        v86 = __ldaxr(v85);
                      while (__stlxr(v86 - 1, v85));
                      if (!v86)
                      {
                        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                        std::__shared_weak_count::__release_weak(v84);
                      }
                    }
                    v87 = *(std::__shared_weak_count **)(v83 + 16);
                    if (v87)
                    {
                      v88 = (unint64_t *)&v87->__shared_owners_;
                      do
                        v89 = __ldaxr(v88);
                      while (__stlxr(v89 - 1, v88));
                      if (!v89)
                      {
                        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                        std::__shared_weak_count::__release_weak(v87);
                      }
                    }
                    MEMORY[0x227684CE8](v83, 0x10F0C40B62ED6C6);
                  }
                }
                if (*((_QWORD *)&v253 + 1))
                {
                  v90 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
                  do
                    v91 = __ldaxr(v90);
                  while (__stlxr(v91 - 1, v90));
                  if (!v91)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v253 + 1) + 16))(*((_QWORD *)&v253 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v253 + 1));
                  }
                }
                if (__p.__r_.__value_.__r.__words[2])
                {
                  v92 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                  do
                    v93 = __ldaxr(v92);
                  while (__stlxr(v93 - 1, v92));
                  if (!v93)
                  {
                    (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__r.__words[2] + 16))(__p.__r_.__value_.__r.__words[2]);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2]);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v51, OS_LOG_TYPE_ERROR);
                *(_DWORD *)object = 136315650;
                *(_QWORD *)&object[4] = __s;
                *(_WORD *)&object[12] = 2080;
                *(const char **)&object[14] = v286[0];
                *(_WORD *)&object[22] = 2080;
                v269 = (unint64_t)v261;
                v94 = (void *)_os_log_send_and_compose_impl();
                v74 = v247;
                v76 = v246;
                if (v94)
                  free(v94);
              }
              if (SHIBYTE(v267) < 0)
              {
                operator delete(v266);
                if (!v76)
                {
LABEL_162:
                  sub_223182C08((uint64_t)v279);
                  v98 = (std::__shared_weak_count *)v283;
                  if (!v283)
                    return;
                  v99 = (unint64_t *)(v283 + 8);
                  do
                    v100 = __ldaxr(v99);
                  while (__stlxr(v100 - 1, v99));
                  goto LABEL_283;
                }
              }
              else if (!v76)
              {
                goto LABEL_162;
              }
              v95 = *v74;
              sub_223A9EC04(a3);
              if (object[23] >= 0)
                v96 = object;
              else
                v96 = *(const char **)object;
              if (*(char *)(v6 + 23) >= 0)
                v97 = (const char *)v6;
              else
                v97 = *(const char **)v6;
              sub_22322C138((uint64_t)v279, "Overriding variable \"%s\" with value %s from key \"%s\"", v95, v96, v97);
              if ((object[23] & 0x80000000) != 0)
                operator delete(*(void **)object);
              sub_223182C08((uint64_t)v279);
              goto LABEL_162;
            }
          }
          memmove(v48, v17, v18);
          goto LABEL_81;
        }
      }
      memmove(v45, v43, v44);
      goto LABEL_73;
    }
  }
}

void sub_223CABBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,void *a49,int a50,__int16 a51,char a52,char a53,char a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (a54 && a53 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  if (a35 < 0)
  {
    operator delete(a30);
    sub_223182DAC(v58 - 208);
    sub_223224234((uint64_t)&a42);
    _Unwind_Resume(a1);
  }
  sub_223182DAC(v58 - 208);
  sub_223224234((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_223CABF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223224234((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223CABF4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223182DAC(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_223CABF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  if (a44 < 0)
  {
    operator delete(__p);
    sub_223182DAC(v44 - 208);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223CAC01CLL);
}

void sub_223CABF84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223182DAC(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_223CABFA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223182DAC(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_223CABFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223224234((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223CABFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_223167354((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_223CABFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *object,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  uint64_t v46;

  if (a46 && a45 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  if (SHIBYTE(a38) < 0)
    operator delete(a36);
  sub_223182DAC(v46 - 208);
  _Unwind_Resume(a1);
}

void sub_223CAC02C(void *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x223CAC044);
}

void sub_223CAC040(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_223CAC04C(uint64_t a1, uint64_t a2, unsigned int *a3, const char **a4)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  size_t v18;
  unsigned __int8 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  char *v27;
  void **v28;
  uint64_t v29;
  size_t v30;
  const char *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  std::string *v38;
  std::string::size_type size;
  size_t v40;
  void *v41;
  unsigned __int8 v42;
  const char *v43;
  size_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  size_t v52;
  std::__shared_weak_count_vtbl *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  char *v56;
  std::__shared_weak_count *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::string::size_type v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  const char **v74;
  uint64_t v75;
  int v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  void *v94;
  const char *v95;
  const char *v96;
  const char *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  const void **v102;
  unsigned __int8 v103;
  const char *v104;
  size_t v105;
  _BYTE *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  void **v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  char *v114;
  size_t v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *p_shared_owners;
  char *v119;
  std::__shared_weak_count *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::string::size_type v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  void *v158;
  std::string *p_p;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v163;
  const void *v164;
  uint64_t v165;
  uint64_t v166;
  void **v167;
  uint64_t v168;
  uint64_t v169;
  size_t v170;
  const char *v171;
  unsigned __int8 v172;
  const char *v173;
  size_t v174;
  _BYTE *v175;
  uint64_t v176;
  unint64_t v177;
  void **v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  NSObject *v186;
  size_t v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  size_t v190;
  size_t v191;
  void *v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  char v197;
  char *v198;
  const char *v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  void *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  void **v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  const char *v244;
  uint64_t v245;
  int v246;
  const char **v247;
  uint64_t v248;
  char *__s;
  char *__sa;
  char *__sb;
  std::string __p;
  __int128 v253;
  char *v254;
  const char *v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  const char *v258;
  void *__dst[2];
  int64_t v260;
  int **v261;
  __int128 v262;
  std::__shared_weak_count *v263;
  char *v264;
  std::__shared_weak_count *v265;
  void *v266;
  __int128 v267;
  _BYTE object[24];
  unint64_t v269;
  void *v270[2];
  size_t v271;
  __int128 v272;
  unint64_t v273;
  void *v274;
  char v275;
  unint64_t v276;
  int v277;
  uint64_t v278;
  _BYTE v279[24];
  __int128 v280;
  uint64_t v281;
  __int128 v282;
  const char *v283;
  uint64_t v284;
  uint64_t v285;
  const char *v286[5];

  v6 = a2;
  v286[2] = *(const char **)MEMORY[0x24BDAC8D0];
  v8 = sub_223CC13B4(a1, a2);
  if ((v8 & 0xFF00000000) == 0)
  {
    if (sub_22452B568(a1, v6))
    {
      sub_224527BAC(v6, (CFStringRef *)object);
      sub_223CC1B5C((uint64_t)&v266, a1, *(void **)object);
      v20 = *(std::__shared_weak_count **)&object[8];
      if (*(_QWORD *)&object[8])
      {
        v21 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      sub_223CA9D94(v286);
      if (**((int **)v286[0] + 7) > 5
        || ((v23 = *((unsigned __int8 *)v286[0] + 72),
             v24 = sub_22322F254((uint64_t)v286[0], "OSLogSurrogateAppender", 1, 0),
             v25 = v24,
             !v23)
          ? (v26 = v24 == 0)
          : (v26 = 0),
            v26))
      {
LABEL_279:
        if (BYTE8(v267))
        {
          v98 = (std::__shared_weak_count *)v267;
          if ((_QWORD)v267)
          {
            v163 = (unint64_t *)(v267 + 8);
            do
              v100 = __ldaxr(v163);
            while (__stlxr(v100 - 1, v163));
LABEL_283:
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
            return;
          }
        }
        return;
      }
      *(_QWORD *)v279 = v286;
      *(std::chrono::steady_clock::time_point *)&v279[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v279[16] = std::chrono::system_clock::now();
      LODWORD(v280) = 5;
      *((_QWORD *)&v280 + 1) = "unknown file";
      LODWORD(v281) = 96;
      *((_QWORD *)&v282 + 1) = 0;
      v283 = 0;
      *(_QWORD *)&v282 = "unknown function";
      if (*(char *)(v6 + 23) >= 0)
        v27 = (char *)v6;
      else
        v27 = *(char **)v6;
      LODWORD(v269) = 0;
      sub_223CC1C9C((uint64_t)object, (CFTypeRef *)&v266);
      if ((_DWORD)v269 == -1)
        sub_22316DD70();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v262;
      ((void (*)(void **__return_ptr, std::string *, _BYTE *))off_24EC63160[v269])(__dst, &__p, object);
      if ((_DWORD)v269 != -1)
        ((void (*)(std::string *, _BYTE *))off_24EC63148[v269])(&__p, object);
      v28 = __dst;
      if (v260 < 0)
        v28 = (void **)__dst[0];
      v261 = (int **)v28;
      v258 = "uint32";
      v29 = **(_QWORD **)v279;
      __sa = **(char ***)v279;
      if (*(char *)(**(_QWORD **)v279 + 39) < 0)
      {
        v31 = *(const char **)(v29 + 16);
        v30 = *(_QWORD *)(v29 + 24);
      }
      else
      {
        v30 = *(unsigned __int8 *)(**(_QWORD **)v279 + 39);
        v31 = (const char *)(v29 + 16);
      }
      v248 = v29 + 16;
      v103 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v103 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v269 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v104 = (const char *)&xmmword_255788F40;
      else
        v104 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v105 = byte_255788F57;
      else
        v105 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v104, v31);
      v106 = &object[8];
      if (v105 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v105 >= 0x17)
      {
        v107 = v23;
        v108 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v105 | 7) != 0x17)
          v108 = v105 | 7;
        v109 = v108 + 1;
        v106 = operator new(v108 + 1);
        *(_QWORD *)&object[16] = v105;
        v269 = v109 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v106;
        v23 = v107;
      }
      else
      {
        HIBYTE(v269) = v105;
        if (!v105)
        {
LABEL_185:
          v106[v105] = 0;
          LOBYTE(v270[0]) = 1;
          v110 = &v270[1];
          if (v30 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v30 >= 0x17)
          {
            v111 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v30 | 7) != 0x17)
              v111 = v30 | 7;
            v112 = v111 + 1;
            v110 = (void **)operator new(v111 + 1);
            v271 = v30;
            *(_QWORD *)&v272 = v112 | 0x8000000000000000;
            v270[1] = v110;
          }
          else
          {
            BYTE7(v272) = v30;
            if (!v30)
              goto LABEL_193;
          }
          memmove(v110, v31, v30);
LABEL_193:
          *((_BYTE *)v110 + v30) = 0;
          BYTE8(v272) = 1;
          v113 = *(NSObject **)object;
          if (SBYTE7(v272) < 0)
            operator delete(v270[1]);
          if (LOBYTE(v270[0]) && SHIBYTE(v269) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v25 && *(_QWORD *)(v25 + 24))
          {
            v114 = v27;
            v115 = _os_log_pack_size();
            v116 = (std::__shared_weak_count_vtbl *)operator new(v115, (std::align_val_t)8uLL);
            v117 = (std::__shared_weak_count *)operator new();
            v117->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v117->__shared_owners_;
            v117->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v117->__shared_weak_owners_ = 0;
            v117[1].__vftable = v116;
            *(_QWORD *)&v262 = v116;
            *((_QWORD *)&v262 + 1) = v116;
            v264 = 0;
            v265 = 0;
            v263 = v117;
            sub_223CC18F4((uint64_t)object, v114, (const char **)&v261, &v258);
            v119 = (char *)operator new(0x68uLL);
            v120 = (std::__shared_weak_count *)v119;
            *((_QWORD *)v119 + 3) = off_24EC206F8;
            *(_QWORD *)v119 = &off_24EC206A8;
            *((_QWORD *)v119 + 6) = v269;
            v121 = v273;
            *((_QWORD *)v119 + 9) = v271;
            *((_QWORD *)v119 + 1) = 0;
            v122 = (unint64_t *)(v119 + 8);
            *((_QWORD *)v119 + 2) = 0;
            *((_OWORD *)v119 + 2) = *(_OWORD *)&object[8];
            *(_OWORD *)(v119 + 56) = *(_OWORD *)v270;
            *((_QWORD *)v119 + 12) = v121;
            *((_OWORD *)v119 + 5) = v272;
            v264 = v119 + 24;
            v265 = (std::__shared_weak_count *)v119;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v116;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v117;
            do
              v123 = __ldxr(p_shared_owners);
            while (__stxr(v123 + 1, p_shared_owners));
            *(_QWORD *)&v253 = v119 + 24;
            *((_QWORD *)&v253 + 1) = v119;
            do
              v124 = __ldxr(v122);
            while (__stxr(v124 + 1, v122));
            v254 = v119 + 24;
            do
              v125 = __ldaxr(v122);
            while (__stlxr(v125 - 1, v122));
            if (!v125)
            {
              (*(void (**)(char *))(*(_QWORD *)v119 + 16))(v119);
              std::__shared_weak_count::__release_weak(v120);
            }
            v126 = v23;
            v127 = v263;
            if (v263)
            {
              v128 = (unint64_t *)&v263->__shared_owners_;
              do
                v129 = __ldaxr(v128);
              while (__stlxr(v129 - 1, v128));
              if (!v129)
              {
                ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                std::__shared_weak_count::__release_weak(v127);
              }
            }
            v130 = __p.__r_.__value_.__r.__words[0];
            if (v254[31] >= 0)
              v131 = v254 + 8;
            else
              v131 = (char *)*((_QWORD *)v254 + 1);
            if (v254[55] >= 0)
              v132 = v254 + 32;
            else
              v132 = (char *)*((_QWORD *)v254 + 4);
            if (v254[79] >= 0)
              v133 = v254 + 56;
            else
              v133 = (char *)*((_QWORD *)v254 + 7);
            v134 = _os_log_pack_fill();
            *(_DWORD *)v134 = 136315650;
            *(_QWORD *)(v134 + 4) = v131;
            *(_WORD *)(v134 + 12) = 2080;
            *(_QWORD *)(v134 + 14) = v132;
            *(_WORD *)(v134 + 22) = 2080;
            *(_QWORD *)(v134 + 24) = v133;
            v135 = operator new();
            v136 = __sa[39];
            v137 = v248;
            if ((v136 & 0x80u) != 0)
            {
              v137 = *((_QWORD *)__sa + 2);
              v136 = *((_QWORD *)__sa + 3);
            }
            *(_QWORD *)v135 = v130;
            *(_OWORD *)(v135 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
            *(_OWORD *)(v135 + 24) = v253;
            v253 = 0uLL;
            *(_QWORD *)(v135 + 40) = v137;
            *(_QWORD *)(v135 + 48) = v136;
            *(_BYTE *)(v135 + 56) = 16;
            *(_QWORD *)&v262 = 0;
            *(_QWORD *)object = v135;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v25 + 24) + 40))(*(_QWORD *)(v25 + 24), object);
            v23 = v126;
            v138 = *(_QWORD *)object;
            *(_QWORD *)object = 0;
            if (v138)
            {
              v139 = *(std::__shared_weak_count **)(v138 + 32);
              if (v139)
              {
                v140 = (unint64_t *)&v139->__shared_owners_;
                do
                  v141 = __ldaxr(v140);
                while (__stlxr(v141 - 1, v140));
                if (!v141)
                {
                  ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                  std::__shared_weak_count::__release_weak(v139);
                }
              }
              v142 = *(std::__shared_weak_count **)(v138 + 16);
              if (v142)
              {
                v143 = (unint64_t *)&v142->__shared_owners_;
                do
                  v144 = __ldaxr(v143);
                while (__stlxr(v144 - 1, v143));
                if (!v144)
                {
                  ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                  std::__shared_weak_count::__release_weak(v142);
                }
              }
              MEMORY[0x227684CE8](v138, 0x10F0C40B62ED6C6);
              v145 = v262;
              *(_QWORD *)&v262 = 0;
              if (v145)
              {
                v146 = *(std::__shared_weak_count **)(v145 + 32);
                if (v146)
                {
                  v147 = (unint64_t *)&v146->__shared_owners_;
                  do
                    v148 = __ldaxr(v147);
                  while (__stlxr(v148 - 1, v147));
                  if (!v148)
                  {
                    ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                    std::__shared_weak_count::__release_weak(v146);
                  }
                }
                v149 = *(std::__shared_weak_count **)(v145 + 16);
                if (v149)
                {
                  v150 = (unint64_t *)&v149->__shared_owners_;
                  do
                    v151 = __ldaxr(v150);
                  while (__stlxr(v151 - 1, v150));
                  if (!v151)
                  {
                    ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                    std::__shared_weak_count::__release_weak(v149);
                  }
                }
                MEMORY[0x227684CE8](v145, 0x10F0C40B62ED6C6);
              }
            }
            v152 = (std::__shared_weak_count *)*((_QWORD *)&v253 + 1);
            if (*((_QWORD *)&v253 + 1))
            {
              v153 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
              do
                v154 = __ldaxr(v153);
              while (__stlxr(v154 - 1, v153));
              if (!v154)
              {
                ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                std::__shared_weak_count::__release_weak(v152);
              }
            }
            v155 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
            if (__p.__r_.__value_.__r.__words[2])
            {
              v156 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
              do
                v157 = __ldaxr(v156);
              while (__stlxr(v157 - 1, v156));
              if (!v157)
              {
                ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                std::__shared_weak_count::__release_weak(v155);
              }
            }
          }
          else
          {
            os_log_type_enabled(v113, OS_LOG_TYPE_ERROR);
            *(_DWORD *)object = 136315650;
            *(_QWORD *)&object[4] = v27;
            *(_WORD *)&object[12] = 2080;
            *(_QWORD *)&object[14] = v261;
            *(_WORD *)&object[22] = 2080;
            v269 = (unint64_t)v258;
            v158 = (void *)_os_log_send_and_compose_impl();
            if (v158)
              free(v158);
          }
          if (SHIBYTE(v260) < 0)
            operator delete(__dst[0]);
          if (v23)
          {
            if (*(char *)(v6 + 23) < 0)
              v6 = *(_QWORD *)v6;
            LODWORD(v269) = 0;
            sub_223CC1C9C((uint64_t)object, (CFTypeRef *)&v266);
            if ((_DWORD)v269 == -1)
              sub_22316DD70();
            *(_QWORD *)&v262 = __dst;
            ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24EC63160[v269])(&__p, &v262, object);
            if ((_DWORD)v269 != -1)
              ((void (*)(__int128 *, _BYTE *))off_24EC63148[v269])(&v262, object);
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            sub_22322C138((uint64_t)v279, "Error while getting value for key \"%s\" and value %s expecting type %s", (const char *)v6, (const char *)p_p, "uint32");
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            sub_223182C08((uint64_t)v279);
          }
          sub_223182C08((uint64_t)v279);
          v160 = (std::__shared_weak_count *)v283;
          if (v283)
          {
            v161 = (unint64_t *)(v283 + 8);
            do
              v162 = __ldaxr(v161);
            while (__stlxr(v162 - 1, v161));
            if (!v162)
            {
              ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
              std::__shared_weak_count::__release_weak(v160);
            }
          }
          goto LABEL_279;
        }
      }
      memmove(v106, v104, v105);
      goto LABEL_185;
    }
    sub_223CA9D94(&v261);
    if (*v261[7] > 3)
      return;
    v32 = *((unsigned __int8 *)v261 + 72);
    v33 = sub_22322F254((uint64_t)v261, "OSLogSurrogateAppender", 1, 0);
    v34 = v33;
    if (!v32 && v33 == 0)
      return;
    sub_223195210((uint64_t)object);
    *(_QWORD *)v279 = "Key not found in dictionary \"";
    *(_QWORD *)&v279[8] = 29;
    v36 = *(unsigned __int8 *)(v6 + 23);
    if ((v36 & 0x80u) == 0)
      v37 = v6;
    else
      v37 = *(_QWORD *)v6;
    if ((v36 & 0x80u) != 0)
      v36 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)&v279[16] = v37;
    *(_QWORD *)&v280 = v36;
    *((_QWORD *)&v280 + 1) = "\" for variable \"";
    v281 = 16;
    v282 = *(_OWORD *)a4;
    v283 = "\"";
    v284 = 1;
    sub_2231A9820((uint64_t)v279, (uint64_t)&v285, 0, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = &__p;
    else
      v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_2231813E8(&object[16], (uint64_t)v38, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v277 & 0x10) != 0)
    {
      v101 = v276;
      if (v276 < v273)
      {
        v276 = v273;
        v101 = v273;
      }
      v102 = (const void **)&v272 + 1;
    }
    else
    {
      if ((v277 & 8) == 0)
      {
        v40 = 0;
        HIBYTE(v260) = 0;
        v41 = __dst;
        goto LABEL_294;
      }
      v102 = (const void **)&v270[1];
      v101 = v272;
    }
    v164 = *v102;
    v40 = v101 - (_QWORD)*v102;
    if (v40 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v40 >= 0x17)
    {
      v165 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17)
        v165 = v40 | 7;
      v166 = v165 + 1;
      v41 = operator new(v165 + 1);
      __dst[1] = (void *)v40;
      v260 = v166 | 0x8000000000000000;
      __dst[0] = v41;
    }
    else
    {
      HIBYTE(v260) = v101 - *(_BYTE *)v102;
      v41 = __dst;
      if (!v40)
      {
LABEL_294:
        *((_BYTE *)v41 + v40) = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v261;
        __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v253) = 3;
        *((_QWORD *)&v253 + 1) = "unknown file";
        LODWORD(v254) = 99;
        v256 = 0;
        v257 = 0;
        v255 = "unknown function";
        if (v260 >= 0)
          v167 = __dst;
        else
          v167 = (void **)__dst[0];
        v168 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
        v169 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
        if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v171 = *(const char **)(v168 + 16);
          v170 = *(_QWORD *)(v168 + 24);
        }
        else
        {
          v170 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
          v171 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
        }
        v172 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v172 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v279);
          sub_223199C58("com.apple.cv3d", (unint64_t)v279, &xmmword_255788F40);
          if ((_BYTE)v280 && (v279[23] & 0x80000000) != 0)
            operator delete(*(void **)v279);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v173 = (const char *)&xmmword_255788F40;
        else
          v173 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v174 = byte_255788F57;
        else
          v174 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)v279 = os_log_create(v173, v171);
        v175 = &v279[8];
        if (v174 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v174 >= 0x17)
        {
          __sb = (char *)v171;
          v176 = v168;
          v177 = v34;
          v178 = v167;
          v179 = v32;
          v180 = v169;
          v181 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v174 | 7) != 0x17)
            v181 = v174 | 7;
          v182 = v181 + 1;
          v175 = operator new(v181 + 1);
          *(_QWORD *)&v279[16] = v174;
          *(_QWORD *)&v280 = v182 | 0x8000000000000000;
          *(_QWORD *)&v279[8] = v175;
          v169 = v180;
          v32 = v179;
          v167 = v178;
          v34 = v177;
          v168 = v176;
          v171 = __sb;
        }
        else
        {
          BYTE7(v280) = v174;
          if (!v174)
          {
LABEL_315:
            v175[v174] = 0;
            BYTE8(v280) = 1;
            v183 = &v281;
            if (v170 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v170 >= 0x17)
            {
              v184 = (v170 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v170 | 7) != 0x17)
                v184 = v170 | 7;
              v185 = v184 + 1;
              v183 = (uint64_t *)operator new(v184 + 1);
              *(_QWORD *)&v282 = v170;
              *((_QWORD *)&v282 + 1) = v185 | 0x8000000000000000;
              v281 = (uint64_t)v183;
            }
            else
            {
              HIBYTE(v282) = v170;
              if (!v170)
              {
LABEL_323:
                *((_BYTE *)v183 + v170) = 0;
                LOBYTE(v283) = 1;
                v186 = *(NSObject **)v279;
                if (SHIBYTE(v282) < 0)
                  operator delete((void *)v281);
                if (BYTE8(v280) && SBYTE7(v280) < 0)
                  operator delete(*(void **)&v279[8]);
                if (*(_QWORD *)v279)
                  os_release(*(void **)v279);
                if (!v34 || !*(_QWORD *)(v34 + 24))
                {
                  os_log_type_enabled(v186, OS_LOG_TYPE_INFO);
                  *(_DWORD *)v279 = 136315138;
                  *(_QWORD *)&v279[4] = v167;
                  v193 = (void *)_os_log_send_and_compose_impl();
                  if (v193)
                    free(v193);
                  goto LABEL_404;
                }
                v187 = _os_log_pack_size();
                v188 = (std::__shared_weak_count_vtbl *)operator new(v187, (std::align_val_t)8uLL);
                v189 = (std::__shared_weak_count *)operator new();
                v189->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v189->__shared_owners_ = 0;
                v189->__shared_weak_owners_ = 0;
                v189[1].__vftable = v188;
                *(_QWORD *)&v262 = v188;
                *((_QWORD *)&v262 + 1) = v188;
                v264 = 0;
                v265 = 0;
                v263 = v189;
                v190 = strlen((const char *)v167);
                if (v190 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v191 = v190;
                if (v190 >= 0x17)
                {
                  v194 = (v190 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v190 | 7) != 0x17)
                    v194 = v190 | 7;
                  v195 = v194 + 1;
                  v192 = operator new(v194 + 1);
                  *(_QWORD *)&v267 = v191;
                  *((_QWORD *)&v267 + 1) = v195 | 0x8000000000000000;
                  v266 = v192;
                }
                else
                {
                  HIBYTE(v267) = v190;
                  v192 = &v266;
                  if (!v190)
                  {
LABEL_342:
                    *((_BYTE *)v192 + v191) = 0;
                    v196 = v266;
                    v286[0] = (const char *)v267;
                    *(const char **)((char *)v286 + 7) = *(const char **)((char *)&v267 + 7);
                    v197 = HIBYTE(v267);
                    v198 = (char *)operator new(0x38uLL);
                    *((_QWORD *)v198 + 1) = 0;
                    *((_QWORD *)v198 + 2) = 0;
                    *((_QWORD *)v198 + 3) = off_24EC1FA48;
                    *(_QWORD *)v198 = &off_24EC1F9F8;
                    v199 = v286[0];
                    *((_QWORD *)v198 + 4) = v196;
                    *((_QWORD *)v198 + 5) = v199;
                    *(const char **)(v198 + 47) = *(const char **)((char *)v286 + 7);
                    v198[55] = v197;
                    memset(v286, 0, 15);
                    v200 = v265;
                    v264 = v198 + 24;
                    v265 = (std::__shared_weak_count *)v198;
                    if (v200)
                    {
                      v201 = (unint64_t *)&v200->__shared_owners_;
                      do
                        v202 = __ldaxr(v201);
                      while (__stlxr(v202 - 1, v201));
                      if (!v202)
                      {
                        ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                        std::__shared_weak_count::__release_weak(v200);
                      }
                    }
                    *(_OWORD *)v279 = v262;
                    v203 = (uint64_t)v264;
                    *(_QWORD *)&v279[16] = v263;
                    if (v263)
                    {
                      v204 = (unint64_t *)&v263->__shared_owners_;
                      do
                        v205 = __ldxr(v204);
                      while (__stxr(v205 + 1, v204));
                    }
                    v206 = v265;
                    *(_QWORD *)&v280 = v203;
                    *((_QWORD *)&v280 + 1) = v265;
                    if (v265)
                    {
                      v207 = (unint64_t *)&v265->__shared_owners_;
                      do
                        v208 = __ldxr(v207);
                      while (__stxr(v208 + 1, v207));
                      v281 = v203;
                      do
                        v209 = __ldaxr(v207);
                      while (__stlxr(v209 - 1, v207));
                      if (!v209)
                      {
                        ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                        std::__shared_weak_count::__release_weak(v206);
                      }
                    }
                    else
                    {
                      v281 = v203;
                    }
                    v210 = v263;
                    if (v263)
                    {
                      v211 = (unint64_t *)&v263->__shared_owners_;
                      do
                        v212 = __ldaxr(v211);
                      while (__stlxr(v212 - 1, v211));
                      if (!v212)
                      {
                        ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                        std::__shared_weak_count::__release_weak(v210);
                      }
                    }
                    v213 = *(_QWORD *)v279;
                    if (*(char *)(v281 + 31) >= 0)
                      v214 = (char *)(v281 + 8);
                    else
                      v214 = *(char **)(v281 + 8);
                    v215 = _os_log_pack_fill();
                    *(_DWORD *)v215 = 136315138;
                    *(_QWORD *)(v215 + 4) = v214;
                    v216 = operator new();
                    v217 = *(unsigned __int8 *)(v168 + 39);
                    if ((v217 & 0x80u) == 0)
                      v218 = v169;
                    else
                      v218 = *(_QWORD *)(v168 + 16);
                    if ((v217 & 0x80u) != 0)
                      v217 = *(_QWORD *)(v168 + 24);
                    *(_QWORD *)v216 = v213;
                    *(_OWORD *)(v216 + 8) = *(_OWORD *)&v279[8];
                    *(_QWORD *)&v279[8] = 0;
                    *(_QWORD *)&v279[16] = 0;
                    *(_OWORD *)(v216 + 24) = v280;
                    v280 = 0uLL;
                    *(_QWORD *)(v216 + 40) = v218;
                    *(_QWORD *)(v216 + 48) = v217;
                    *(_BYTE *)(v216 + 56) = 1;
                    v266 = 0;
                    *(_QWORD *)&v262 = v216;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v34 + 24) + 40))(*(_QWORD *)(v34 + 24), &v262);
                    v219 = v262;
                    *(_QWORD *)&v262 = 0;
                    if (v219)
                    {
                      v220 = *(std::__shared_weak_count **)(v219 + 32);
                      if (v220)
                      {
                        v221 = (unint64_t *)&v220->__shared_owners_;
                        do
                          v222 = __ldaxr(v221);
                        while (__stlxr(v222 - 1, v221));
                        if (!v222)
                        {
                          ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                          std::__shared_weak_count::__release_weak(v220);
                        }
                      }
                      v223 = *(std::__shared_weak_count **)(v219 + 16);
                      if (v223)
                      {
                        v224 = (unint64_t *)&v223->__shared_owners_;
                        do
                          v225 = __ldaxr(v224);
                        while (__stlxr(v225 - 1, v224));
                        if (!v225)
                        {
                          ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                          std::__shared_weak_count::__release_weak(v223);
                        }
                      }
                      MEMORY[0x227684CE8](v219, 0x10F0C40B62ED6C6);
                      v226 = v266;
                      v266 = 0;
                      if (v226)
                      {
                        v227 = (std::__shared_weak_count *)*((_QWORD *)v226 + 4);
                        if (v227)
                        {
                          v228 = (unint64_t *)&v227->__shared_owners_;
                          do
                            v229 = __ldaxr(v228);
                          while (__stlxr(v229 - 1, v228));
                          if (!v229)
                          {
                            ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                            std::__shared_weak_count::__release_weak(v227);
                          }
                        }
                        v230 = (std::__shared_weak_count *)*((_QWORD *)v226 + 2);
                        if (v230)
                        {
                          v231 = (unint64_t *)&v230->__shared_owners_;
                          do
                            v232 = __ldaxr(v231);
                          while (__stlxr(v232 - 1, v231));
                          if (!v232)
                          {
                            ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                            std::__shared_weak_count::__release_weak(v230);
                          }
                        }
                        MEMORY[0x227684CE8](v226, 0x10F0C40B62ED6C6);
                      }
                    }
                    v233 = (std::__shared_weak_count *)*((_QWORD *)&v280 + 1);
                    if (*((_QWORD *)&v280 + 1))
                    {
                      v234 = (unint64_t *)(*((_QWORD *)&v280 + 1) + 8);
                      do
                        v235 = __ldaxr(v234);
                      while (__stlxr(v235 - 1, v234));
                      if (!v235)
                      {
                        ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                        std::__shared_weak_count::__release_weak(v233);
                      }
                    }
                    v236 = *(std::__shared_weak_count **)&v279[16];
                    if (*(_QWORD *)&v279[16])
                    {
                      v237 = (unint64_t *)(*(_QWORD *)&v279[16] + 8);
                      do
                        v238 = __ldaxr(v237);
                      while (__stlxr(v238 - 1, v237));
                      if (!v238)
                      {
                        ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                        std::__shared_weak_count::__release_weak(v236);
                      }
                    }
LABEL_404:
                    if (v32)
                    {
                      v239 = __dst;
                      if (v260 < 0)
                        v239 = (void **)__dst[0];
                      sub_22322C138((uint64_t)&__p, "%s", (const char *)v239);
                      sub_223182C08((uint64_t)&__p);
                    }
                    sub_223182C08((uint64_t)&__p);
                    v240 = v257;
                    if (v257)
                    {
                      v241 = (unint64_t *)&v257->__shared_owners_;
                      do
                        v242 = __ldaxr(v241);
                      while (__stlxr(v242 - 1, v241));
                      if (!v242)
                      {
                        ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                        std::__shared_weak_count::__release_weak(v240);
                      }
                    }
                    if (SHIBYTE(v260) < 0)
                      operator delete(__dst[0]);
                    *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
                    v243 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&object[16] = v243;
                    v269 = MEMORY[0x24BEDB848] + 16;
                    if (v275 < 0)
                      operator delete(v274);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x227684BE0](&v278);
                    return;
                  }
                }
                memcpy(v192, v167, v191);
                goto LABEL_342;
              }
            }
            memmove(v183, v171, v170);
            goto LABEL_323;
          }
        }
        memmove(v175, v173, v174);
        goto LABEL_315;
      }
    }
    memmove(v41, v164, v40);
    goto LABEL_294;
  }
  *a3 = v8;
  sub_223CA9D94(__dst);
  if (**((int **)__dst[0] + 7) <= 4)
  {
    v9 = *((unsigned __int8 *)__dst[0] + 72);
    v10 = sub_22322F254((uint64_t)__dst[0], "OSLogSurrogateAppender", 1, 0);
    v11 = v10;
    if (v9 || v10 != 0)
    {
      *(_QWORD *)v279 = __dst;
      *(std::chrono::steady_clock::time_point *)&v279[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v279[16] = std::chrono::system_clock::now();
      LODWORD(v280) = 4;
      *((_QWORD *)&v280 + 1) = "unknown file";
      LODWORD(v281) = 91;
      *((_QWORD *)&v282 + 1) = 0;
      v283 = 0;
      *(_QWORD *)&v282 = "unknown function";
      v13 = (char *)*a4;
      sub_2231C4FB4(a3);
      v247 = a4;
      __s = v13;
      if (v267 >= 0)
        v14 = (const char *)&v266;
      else
        v14 = (const char *)v266;
      v286[0] = v14;
      if (*(char *)(v6 + 23) >= 0)
        v15 = (const char *)v6;
      else
        v15 = *(const char **)v6;
      v261 = (int **)v15;
      v16 = **(_QWORD **)v279;
      v17 = (const char *)(**(_QWORD **)v279 + 16);
      v244 = v17;
      if (*(char *)(**(_QWORD **)v279 + 39) < 0)
      {
        v17 = *(const char **)(v16 + 16);
        v18 = *(_QWORD *)(v16 + 24);
        v245 = **(_QWORD **)v279;
        v246 = v9;
        v42 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v42 & 1) != 0)
          goto LABEL_59;
      }
      else
      {
        v18 = *(unsigned __int8 *)(**(_QWORD **)v279 + 39);
        v245 = **(_QWORD **)v279;
        v246 = v9;
        v19 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v19 & 1) != 0)
          goto LABEL_59;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v269 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_59:
      if (byte_255788F57 >= 0)
        v43 = (const char *)&xmmword_255788F40;
      else
        v43 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v44 = byte_255788F57;
      else
        v44 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v43, v17);
      v45 = &object[8];
      if (v44 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v44 >= 0x17)
      {
        v46 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v44 | 7) != 0x17)
          v46 = v44 | 7;
        v47 = v46 + 1;
        v45 = operator new(v46 + 1);
        *(_QWORD *)&object[16] = v44;
        v269 = v47 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v45;
      }
      else
      {
        HIBYTE(v269) = v44;
        if (!v44)
        {
LABEL_73:
          v45[v44] = 0;
          LOBYTE(v270[0]) = 1;
          v48 = &v270[1];
          if (v18 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v18 >= 0x17)
          {
            v49 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v18 | 7) != 0x17)
              v49 = v18 | 7;
            v50 = v49 + 1;
            v48 = (void **)operator new(v49 + 1);
            v271 = v18;
            *(_QWORD *)&v272 = v50 | 0x8000000000000000;
            v270[1] = v48;
          }
          else
          {
            BYTE7(v272) = v18;
            if (!v18)
            {
LABEL_81:
              *((_BYTE *)v48 + v18) = 0;
              BYTE8(v272) = 1;
              v51 = *(NSObject **)object;
              if (SBYTE7(v272) < 0)
                operator delete(v270[1]);
              if (LOBYTE(v270[0]) && SHIBYTE(v269) < 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v11 && *(_QWORD *)(v11 + 24))
              {
                v52 = _os_log_pack_size();
                v53 = (std::__shared_weak_count_vtbl *)operator new(v52, (std::align_val_t)8uLL);
                v54 = (std::__shared_weak_count *)operator new();
                v54->__shared_owners_ = 0;
                v55 = (unint64_t *)&v54->__shared_owners_;
                v54->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v54->__shared_weak_owners_ = 0;
                v54[1].__vftable = v53;
                *(_QWORD *)&v262 = v53;
                *((_QWORD *)&v262 + 1) = v53;
                v264 = 0;
                v265 = 0;
                v263 = v54;
                sub_223CC18F4((uint64_t)object, __s, v286, (const char **)&v261);
                v56 = (char *)operator new(0x68uLL);
                v57 = (std::__shared_weak_count *)v56;
                *((_QWORD *)v56 + 3) = off_24EC206F8;
                *(_QWORD *)v56 = &off_24EC206A8;
                *((_QWORD *)v56 + 6) = v269;
                v58 = v273;
                *((_QWORD *)v56 + 9) = v271;
                *((_QWORD *)v56 + 1) = 0;
                v59 = (unint64_t *)(v56 + 8);
                *((_QWORD *)v56 + 2) = 0;
                *((_OWORD *)v56 + 2) = *(_OWORD *)&object[8];
                *(_OWORD *)(v56 + 56) = *(_OWORD *)v270;
                *((_QWORD *)v56 + 12) = v58;
                *((_OWORD *)v56 + 5) = v272;
                v264 = v56 + 24;
                v265 = (std::__shared_weak_count *)v56;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)v53;
                __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v54;
                do
                  v60 = __ldxr(v55);
                while (__stxr(v60 + 1, v55));
                *(_QWORD *)&v253 = v56 + 24;
                *((_QWORD *)&v253 + 1) = v56;
                do
                  v61 = __ldxr(v59);
                while (__stxr(v61 + 1, v59));
                v254 = v56 + 24;
                do
                  v62 = __ldaxr(v59);
                while (__stlxr(v62 - 1, v59));
                if (!v62)
                {
                  (*(void (**)(char *))(*(_QWORD *)v56 + 16))(v56);
                  std::__shared_weak_count::__release_weak(v57);
                }
                v63 = v263;
                if (v263)
                {
                  v64 = (unint64_t *)&v263->__shared_owners_;
                  do
                    v65 = __ldaxr(v64);
                  while (__stlxr(v65 - 1, v64));
                  if (!v65)
                  {
                    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                    std::__shared_weak_count::__release_weak(v63);
                  }
                }
                v66 = __p.__r_.__value_.__r.__words[0];
                if (v254[31] >= 0)
                  v67 = v254 + 8;
                else
                  v67 = (char *)*((_QWORD *)v254 + 1);
                if (v254[55] >= 0)
                  v68 = v254 + 32;
                else
                  v68 = (char *)*((_QWORD *)v254 + 4);
                if (v254[79] >= 0)
                  v69 = v254 + 56;
                else
                  v69 = (char *)*((_QWORD *)v254 + 7);
                v70 = _os_log_pack_fill();
                *(_DWORD *)v70 = 136315650;
                *(_QWORD *)(v70 + 4) = v67;
                *(_WORD *)(v70 + 12) = 2080;
                *(_QWORD *)(v70 + 14) = v68;
                *(_WORD *)(v70 + 22) = 2080;
                *(_QWORD *)(v70 + 24) = v69;
                v71 = operator new();
                v72 = *(unsigned __int8 *)(v245 + 39);
                v73 = v244;
                if ((v72 & 0x80u) != 0)
                {
                  v73 = *(const char **)(v245 + 16);
                  v72 = *(_QWORD *)(v245 + 24);
                }
                *(_QWORD *)v71 = v66;
                *(_OWORD *)(v71 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
                *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v71 + 24) = v253;
                v253 = 0uLL;
                *(_QWORD *)(v71 + 40) = v73;
                *(_QWORD *)(v71 + 48) = v72;
                *(_BYTE *)(v71 + 56) = 16;
                *(_QWORD *)&v262 = 0;
                *(_QWORD *)object = v71;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), object);
                v74 = v247;
                v75 = *(_QWORD *)object;
                *(_QWORD *)object = 0;
                v76 = v246;
                if (v75)
                {
                  v77 = *(std::__shared_weak_count **)(v75 + 32);
                  if (v77)
                  {
                    v78 = (unint64_t *)&v77->__shared_owners_;
                    do
                      v79 = __ldaxr(v78);
                    while (__stlxr(v79 - 1, v78));
                    if (!v79)
                    {
                      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                      std::__shared_weak_count::__release_weak(v77);
                    }
                  }
                  v80 = *(std::__shared_weak_count **)(v75 + 16);
                  if (v80)
                  {
                    v81 = (unint64_t *)&v80->__shared_owners_;
                    do
                      v82 = __ldaxr(v81);
                    while (__stlxr(v82 - 1, v81));
                    if (!v82)
                    {
                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                      std::__shared_weak_count::__release_weak(v80);
                    }
                  }
                  MEMORY[0x227684CE8](v75, 0x10F0C40B62ED6C6);
                  v83 = v262;
                  *(_QWORD *)&v262 = 0;
                  if (v83)
                  {
                    v84 = *(std::__shared_weak_count **)(v83 + 32);
                    if (v84)
                    {
                      v85 = (unint64_t *)&v84->__shared_owners_;
                      do
                        v86 = __ldaxr(v85);
                      while (__stlxr(v86 - 1, v85));
                      if (!v86)
                      {
                        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                        std::__shared_weak_count::__release_weak(v84);
                      }
                    }
                    v87 = *(std::__shared_weak_count **)(v83 + 16);
                    if (v87)
                    {
                      v88 = (unint64_t *)&v87->__shared_owners_;
                      do
                        v89 = __ldaxr(v88);
                      while (__stlxr(v89 - 1, v88));
                      if (!v89)
                      {
                        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                        std::__shared_weak_count::__release_weak(v87);
                      }
                    }
                    MEMORY[0x227684CE8](v83, 0x10F0C40B62ED6C6);
                  }
                }
                if (*((_QWORD *)&v253 + 1))
                {
                  v90 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
                  do
                    v91 = __ldaxr(v90);
                  while (__stlxr(v91 - 1, v90));
                  if (!v91)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v253 + 1) + 16))(*((_QWORD *)&v253 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v253 + 1));
                  }
                }
                if (__p.__r_.__value_.__r.__words[2])
                {
                  v92 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                  do
                    v93 = __ldaxr(v92);
                  while (__stlxr(v93 - 1, v92));
                  if (!v93)
                  {
                    (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__r.__words[2] + 16))(__p.__r_.__value_.__r.__words[2]);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2]);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v51, OS_LOG_TYPE_ERROR);
                *(_DWORD *)object = 136315650;
                *(_QWORD *)&object[4] = __s;
                *(_WORD *)&object[12] = 2080;
                *(const char **)&object[14] = v286[0];
                *(_WORD *)&object[22] = 2080;
                v269 = (unint64_t)v261;
                v94 = (void *)_os_log_send_and_compose_impl();
                v74 = v247;
                v76 = v246;
                if (v94)
                  free(v94);
              }
              if (SHIBYTE(v267) < 0)
              {
                operator delete(v266);
                if (!v76)
                {
LABEL_162:
                  sub_223182C08((uint64_t)v279);
                  v98 = (std::__shared_weak_count *)v283;
                  if (!v283)
                    return;
                  v99 = (unint64_t *)(v283 + 8);
                  do
                    v100 = __ldaxr(v99);
                  while (__stlxr(v100 - 1, v99));
                  goto LABEL_283;
                }
              }
              else if (!v76)
              {
                goto LABEL_162;
              }
              v95 = *v74;
              sub_2231C4FB4(a3);
              if (object[23] >= 0)
                v96 = object;
              else
                v96 = *(const char **)object;
              if (*(char *)(v6 + 23) >= 0)
                v97 = (const char *)v6;
              else
                v97 = *(const char **)v6;
              sub_22322C138((uint64_t)v279, "Overriding variable \"%s\" with value %s from key \"%s\"", v95, v96, v97);
              if ((object[23] & 0x80000000) != 0)
                operator delete(*(void **)object);
              sub_223182C08((uint64_t)v279);
              goto LABEL_162;
            }
          }
          memmove(v48, v17, v18);
          goto LABEL_81;
        }
      }
      memmove(v45, v43, v44);
      goto LABEL_73;
    }
  }
}

void sub_223CADD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,void *a49,int a50,__int16 a51,char a52,char a53,char a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (a54 && a53 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  if (a35 < 0)
  {
    operator delete(a30);
    sub_223182DAC(v58 - 208);
    sub_223224234((uint64_t)&a42);
    _Unwind_Resume(a1);
  }
  sub_223182DAC(v58 - 208);
  sub_223224234((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_223CAE0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223224234((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223CAE110(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223182DAC(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_223CAE124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  if (a44 < 0)
  {
    operator delete(__p);
    sub_223182DAC(v44 - 208);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223CAE1E0);
}

void sub_223CAE148(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223182DAC(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_223CAE164(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223182DAC(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_223CAE178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223224234((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223CAE18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_223167354((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_223CAE1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *object,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  uint64_t v46;

  if (a46 && a45 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  if (SHIBYTE(a38) < 0)
    operator delete(a36);
  sub_223182DAC(v46 - 208);
  _Unwind_Resume(a1);
}

void sub_223CAE1F0(void *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x223CAE208);
}

void sub_223CAE204(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_223CAE210(uint64_t a1, uint64_t a2, float *a3, const char **a4)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  size_t v18;
  unsigned __int8 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  char *v27;
  void **v28;
  uint64_t v29;
  size_t v30;
  const char *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  std::string *v38;
  std::string::size_type size;
  size_t v40;
  void *v41;
  unsigned __int8 v42;
  const char *v43;
  size_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  size_t v52;
  std::__shared_weak_count_vtbl *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  char *v56;
  std::__shared_weak_count *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::string::size_type v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  const char **v74;
  uint64_t v75;
  int v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  const char *v97;
  std::string *v98;
  const char *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  const void **v104;
  unsigned __int8 v105;
  const char *v106;
  size_t v107;
  _BYTE *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  void **v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  char *v116;
  size_t v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *p_shared_owners;
  char *v121;
  std::__shared_weak_count *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  int v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::string::size_type v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  void *v160;
  std::string *p_p;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  const void *v166;
  uint64_t v167;
  uint64_t v168;
  void **v169;
  uint64_t v170;
  uint64_t v171;
  size_t v172;
  const char *v173;
  unsigned __int8 v174;
  const char *v175;
  size_t v176;
  _BYTE *v177;
  uint64_t v178;
  unint64_t v179;
  void **v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  NSObject *v188;
  size_t v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  size_t v192;
  size_t v193;
  void *v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  char v199;
  char *v200;
  const char *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  void *v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  void **v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  uint64_t v245;
  const char *v246;
  uint64_t v247;
  int v248;
  const char **v249;
  uint64_t v250;
  char *__s;
  char *__sa;
  char *__sb;
  std::string __p;
  __int128 v255;
  char *v256;
  const char *v257;
  uint64_t v258;
  std::__shared_weak_count *v259;
  const char *v260;
  void *__dst[2];
  int64_t v262;
  int **v263;
  __int128 v264;
  std::__shared_weak_count *v265;
  char *v266;
  std::__shared_weak_count *v267;
  void *v268;
  __int128 v269;
  _BYTE object[24];
  unint64_t v271;
  void *v272[2];
  size_t v273;
  __int128 v274;
  unint64_t v275;
  void *v276;
  char v277;
  unint64_t v278;
  int v279;
  uint64_t v280;
  _BYTE v281[24];
  __int128 v282;
  uint64_t v283;
  __int128 v284;
  const char *v285;
  uint64_t v286;
  uint64_t v287;
  const char *v288[5];

  v6 = a2;
  v288[2] = *(const char **)MEMORY[0x24BDAC8D0];
  v8 = sub_223CC1568(a1, a2);
  if ((v8 & 0xFF00000000) == 0)
  {
    if (sub_22452B568(a1, v6))
    {
      sub_224527BAC(v6, (CFStringRef *)object);
      sub_223CC1B5C((uint64_t)&v268, a1, *(void **)object);
      v20 = *(std::__shared_weak_count **)&object[8];
      if (*(_QWORD *)&object[8])
      {
        v21 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      sub_223CA9D94(v288);
      if (**((int **)v288[0] + 7) > 5
        || ((v23 = *((unsigned __int8 *)v288[0] + 72),
             v24 = sub_22322F254((uint64_t)v288[0], "OSLogSurrogateAppender", 1, 0),
             v25 = v24,
             !v23)
          ? (v26 = v24 == 0)
          : (v26 = 0),
            v26))
      {
LABEL_283:
        if (BYTE8(v269))
        {
          v100 = (std::__shared_weak_count *)v269;
          if ((_QWORD)v269)
          {
            v165 = (unint64_t *)(v269 + 8);
            do
              v102 = __ldaxr(v165);
            while (__stlxr(v102 - 1, v165));
LABEL_287:
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
            return;
          }
        }
        return;
      }
      *(_QWORD *)v281 = v288;
      *(std::chrono::steady_clock::time_point *)&v281[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v281[16] = std::chrono::system_clock::now();
      LODWORD(v282) = 5;
      *((_QWORD *)&v282 + 1) = "unknown file";
      LODWORD(v283) = 96;
      *((_QWORD *)&v284 + 1) = 0;
      v285 = 0;
      *(_QWORD *)&v284 = "unknown function";
      if (*(char *)(v6 + 23) >= 0)
        v27 = (char *)v6;
      else
        v27 = *(char **)v6;
      LODWORD(v271) = 0;
      sub_223CC1C9C((uint64_t)object, (CFTypeRef *)&v268);
      if ((_DWORD)v271 == -1)
        sub_22316DD70();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v264;
      ((void (*)(void **__return_ptr, std::string *, _BYTE *))off_24EC63160[v271])(__dst, &__p, object);
      if ((_DWORD)v271 != -1)
        ((void (*)(std::string *, _BYTE *))off_24EC63148[v271])(&__p, object);
      v28 = __dst;
      if (v262 < 0)
        v28 = (void **)__dst[0];
      v263 = (int **)v28;
      v260 = "float32";
      v29 = **(_QWORD **)v281;
      __sa = **(char ***)v281;
      if (*(char *)(**(_QWORD **)v281 + 39) < 0)
      {
        v31 = *(const char **)(v29 + 16);
        v30 = *(_QWORD *)(v29 + 24);
      }
      else
      {
        v30 = *(unsigned __int8 *)(**(_QWORD **)v281 + 39);
        v31 = (const char *)(v29 + 16);
      }
      v250 = v29 + 16;
      v105 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v105 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v271 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v106 = (const char *)&xmmword_255788F40;
      else
        v106 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v107 = byte_255788F57;
      else
        v107 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v106, v31);
      v108 = &object[8];
      if (v107 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v107 >= 0x17)
      {
        v109 = v23;
        v110 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v107 | 7) != 0x17)
          v110 = v107 | 7;
        v111 = v110 + 1;
        v108 = operator new(v110 + 1);
        *(_QWORD *)&object[16] = v107;
        v271 = v111 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v108;
        v23 = v109;
      }
      else
      {
        HIBYTE(v271) = v107;
        if (!v107)
        {
LABEL_189:
          v108[v107] = 0;
          LOBYTE(v272[0]) = 1;
          v112 = &v272[1];
          if (v30 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v30 >= 0x17)
          {
            v113 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v30 | 7) != 0x17)
              v113 = v30 | 7;
            v114 = v113 + 1;
            v112 = (void **)operator new(v113 + 1);
            v273 = v30;
            *(_QWORD *)&v274 = v114 | 0x8000000000000000;
            v272[1] = v112;
          }
          else
          {
            BYTE7(v274) = v30;
            if (!v30)
              goto LABEL_197;
          }
          memmove(v112, v31, v30);
LABEL_197:
          *((_BYTE *)v112 + v30) = 0;
          BYTE8(v274) = 1;
          v115 = *(NSObject **)object;
          if (SBYTE7(v274) < 0)
            operator delete(v272[1]);
          if (LOBYTE(v272[0]) && SHIBYTE(v271) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v25 && *(_QWORD *)(v25 + 24))
          {
            v116 = v27;
            v117 = _os_log_pack_size();
            v118 = (std::__shared_weak_count_vtbl *)operator new(v117, (std::align_val_t)8uLL);
            v119 = (std::__shared_weak_count *)operator new();
            v119->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v119->__shared_owners_;
            v119->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v119->__shared_weak_owners_ = 0;
            v119[1].__vftable = v118;
            *(_QWORD *)&v264 = v118;
            *((_QWORD *)&v264 + 1) = v118;
            v266 = 0;
            v267 = 0;
            v265 = v119;
            sub_223CC18F4((uint64_t)object, v116, (const char **)&v263, &v260);
            v121 = (char *)operator new(0x68uLL);
            v122 = (std::__shared_weak_count *)v121;
            *((_QWORD *)v121 + 3) = off_24EC206F8;
            *(_QWORD *)v121 = &off_24EC206A8;
            *((_QWORD *)v121 + 6) = v271;
            v123 = v275;
            *((_QWORD *)v121 + 9) = v273;
            *((_QWORD *)v121 + 1) = 0;
            v124 = (unint64_t *)(v121 + 8);
            *((_QWORD *)v121 + 2) = 0;
            *((_OWORD *)v121 + 2) = *(_OWORD *)&object[8];
            *(_OWORD *)(v121 + 56) = *(_OWORD *)v272;
            *((_QWORD *)v121 + 12) = v123;
            *((_OWORD *)v121 + 5) = v274;
            v266 = v121 + 24;
            v267 = (std::__shared_weak_count *)v121;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v118;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v118;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v119;
            do
              v125 = __ldxr(p_shared_owners);
            while (__stxr(v125 + 1, p_shared_owners));
            *(_QWORD *)&v255 = v121 + 24;
            *((_QWORD *)&v255 + 1) = v121;
            do
              v126 = __ldxr(v124);
            while (__stxr(v126 + 1, v124));
            v256 = v121 + 24;
            do
              v127 = __ldaxr(v124);
            while (__stlxr(v127 - 1, v124));
            if (!v127)
            {
              (*(void (**)(char *))(*(_QWORD *)v121 + 16))(v121);
              std::__shared_weak_count::__release_weak(v122);
            }
            v128 = v23;
            v129 = v265;
            if (v265)
            {
              v130 = (unint64_t *)&v265->__shared_owners_;
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            v132 = __p.__r_.__value_.__r.__words[0];
            if (v256[31] >= 0)
              v133 = v256 + 8;
            else
              v133 = (char *)*((_QWORD *)v256 + 1);
            if (v256[55] >= 0)
              v134 = v256 + 32;
            else
              v134 = (char *)*((_QWORD *)v256 + 4);
            if (v256[79] >= 0)
              v135 = v256 + 56;
            else
              v135 = (char *)*((_QWORD *)v256 + 7);
            v136 = _os_log_pack_fill();
            *(_DWORD *)v136 = 136315650;
            *(_QWORD *)(v136 + 4) = v133;
            *(_WORD *)(v136 + 12) = 2080;
            *(_QWORD *)(v136 + 14) = v134;
            *(_WORD *)(v136 + 22) = 2080;
            *(_QWORD *)(v136 + 24) = v135;
            v137 = operator new();
            v138 = __sa[39];
            v139 = v250;
            if ((v138 & 0x80u) != 0)
            {
              v139 = *((_QWORD *)__sa + 2);
              v138 = *((_QWORD *)__sa + 3);
            }
            *(_QWORD *)v137 = v132;
            *(_OWORD *)(v137 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
            *(_OWORD *)(v137 + 24) = v255;
            v255 = 0uLL;
            *(_QWORD *)(v137 + 40) = v139;
            *(_QWORD *)(v137 + 48) = v138;
            *(_BYTE *)(v137 + 56) = 16;
            *(_QWORD *)&v264 = 0;
            *(_QWORD *)object = v137;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v25 + 24) + 40))(*(_QWORD *)(v25 + 24), object);
            v23 = v128;
            v140 = *(_QWORD *)object;
            *(_QWORD *)object = 0;
            if (v140)
            {
              v141 = *(std::__shared_weak_count **)(v140 + 32);
              if (v141)
              {
                v142 = (unint64_t *)&v141->__shared_owners_;
                do
                  v143 = __ldaxr(v142);
                while (__stlxr(v143 - 1, v142));
                if (!v143)
                {
                  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                  std::__shared_weak_count::__release_weak(v141);
                }
              }
              v144 = *(std::__shared_weak_count **)(v140 + 16);
              if (v144)
              {
                v145 = (unint64_t *)&v144->__shared_owners_;
                do
                  v146 = __ldaxr(v145);
                while (__stlxr(v146 - 1, v145));
                if (!v146)
                {
                  ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                  std::__shared_weak_count::__release_weak(v144);
                }
              }
              MEMORY[0x227684CE8](v140, 0x10F0C40B62ED6C6);
              v147 = v264;
              *(_QWORD *)&v264 = 0;
              if (v147)
              {
                v148 = *(std::__shared_weak_count **)(v147 + 32);
                if (v148)
                {
                  v149 = (unint64_t *)&v148->__shared_owners_;
                  do
                    v150 = __ldaxr(v149);
                  while (__stlxr(v150 - 1, v149));
                  if (!v150)
                  {
                    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                    std::__shared_weak_count::__release_weak(v148);
                  }
                }
                v151 = *(std::__shared_weak_count **)(v147 + 16);
                if (v151)
                {
                  v152 = (unint64_t *)&v151->__shared_owners_;
                  do
                    v153 = __ldaxr(v152);
                  while (__stlxr(v153 - 1, v152));
                  if (!v153)
                  {
                    ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                    std::__shared_weak_count::__release_weak(v151);
                  }
                }
                MEMORY[0x227684CE8](v147, 0x10F0C40B62ED6C6);
              }
            }
            v154 = (std::__shared_weak_count *)*((_QWORD *)&v255 + 1);
            if (*((_QWORD *)&v255 + 1))
            {
              v155 = (unint64_t *)(*((_QWORD *)&v255 + 1) + 8);
              do
                v156 = __ldaxr(v155);
              while (__stlxr(v156 - 1, v155));
              if (!v156)
              {
                ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                std::__shared_weak_count::__release_weak(v154);
              }
            }
            v157 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
            if (__p.__r_.__value_.__r.__words[2])
            {
              v158 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
              do
                v159 = __ldaxr(v158);
              while (__stlxr(v159 - 1, v158));
              if (!v159)
              {
                ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                std::__shared_weak_count::__release_weak(v157);
              }
            }
          }
          else
          {
            os_log_type_enabled(v115, OS_LOG_TYPE_ERROR);
            *(_DWORD *)object = 136315650;
            *(_QWORD *)&object[4] = v27;
            *(_WORD *)&object[12] = 2080;
            *(_QWORD *)&object[14] = v263;
            *(_WORD *)&object[22] = 2080;
            v271 = (unint64_t)v260;
            v160 = (void *)_os_log_send_and_compose_impl();
            if (v160)
              free(v160);
          }
          if (SHIBYTE(v262) < 0)
            operator delete(__dst[0]);
          if (v23)
          {
            if (*(char *)(v6 + 23) < 0)
              v6 = *(_QWORD *)v6;
            LODWORD(v271) = 0;
            sub_223CC1C9C((uint64_t)object, (CFTypeRef *)&v268);
            if ((_DWORD)v271 == -1)
              sub_22316DD70();
            *(_QWORD *)&v264 = __dst;
            ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24EC63160[v271])(&__p, &v264, object);
            if ((_DWORD)v271 != -1)
              ((void (*)(__int128 *, _BYTE *))off_24EC63148[v271])(&v264, object);
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            sub_22322C138((uint64_t)v281, "Error while getting value for key \"%s\" and value %s expecting type %s", (const char *)v6, (const char *)p_p, "float32");
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            sub_223182C08((uint64_t)v281);
          }
          sub_223182C08((uint64_t)v281);
          v162 = (std::__shared_weak_count *)v285;
          if (v285)
          {
            v163 = (unint64_t *)(v285 + 8);
            do
              v164 = __ldaxr(v163);
            while (__stlxr(v164 - 1, v163));
            if (!v164)
            {
              ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
              std::__shared_weak_count::__release_weak(v162);
            }
          }
          goto LABEL_283;
        }
      }
      memmove(v108, v106, v107);
      goto LABEL_189;
    }
    sub_223CA9D94(&v263);
    if (*v263[7] > 3)
      return;
    v32 = *((unsigned __int8 *)v263 + 72);
    v33 = sub_22322F254((uint64_t)v263, "OSLogSurrogateAppender", 1, 0);
    v34 = v33;
    if (!v32 && v33 == 0)
      return;
    sub_223195210((uint64_t)object);
    *(_QWORD *)v281 = "Key not found in dictionary \"";
    *(_QWORD *)&v281[8] = 29;
    v36 = *(unsigned __int8 *)(v6 + 23);
    if ((v36 & 0x80u) == 0)
      v37 = v6;
    else
      v37 = *(_QWORD *)v6;
    if ((v36 & 0x80u) != 0)
      v36 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)&v281[16] = v37;
    *(_QWORD *)&v282 = v36;
    *((_QWORD *)&v282 + 1) = "\" for variable \"";
    v283 = 16;
    v284 = *(_OWORD *)a4;
    v285 = "\"";
    v286 = 1;
    sub_2231A9820((uint64_t)v281, (uint64_t)&v287, 0, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = &__p;
    else
      v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_2231813E8(&object[16], (uint64_t)v38, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v279 & 0x10) != 0)
    {
      v103 = v278;
      if (v278 < v275)
      {
        v278 = v275;
        v103 = v275;
      }
      v104 = (const void **)&v274 + 1;
    }
    else
    {
      if ((v279 & 8) == 0)
      {
        v40 = 0;
        HIBYTE(v262) = 0;
        v41 = __dst;
        goto LABEL_298;
      }
      v104 = (const void **)&v272[1];
      v103 = v274;
    }
    v166 = *v104;
    v40 = v103 - (_QWORD)*v104;
    if (v40 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v40 >= 0x17)
    {
      v167 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17)
        v167 = v40 | 7;
      v168 = v167 + 1;
      v41 = operator new(v167 + 1);
      __dst[1] = (void *)v40;
      v262 = v168 | 0x8000000000000000;
      __dst[0] = v41;
    }
    else
    {
      HIBYTE(v262) = v103 - *(_BYTE *)v104;
      v41 = __dst;
      if (!v40)
      {
LABEL_298:
        *((_BYTE *)v41 + v40) = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v263;
        __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v255) = 3;
        *((_QWORD *)&v255 + 1) = "unknown file";
        LODWORD(v256) = 99;
        v258 = 0;
        v259 = 0;
        v257 = "unknown function";
        if (v262 >= 0)
          v169 = __dst;
        else
          v169 = (void **)__dst[0];
        v170 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
        v171 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
        if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v173 = *(const char **)(v170 + 16);
          v172 = *(_QWORD *)(v170 + 24);
        }
        else
        {
          v172 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
          v173 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
        }
        v174 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v174 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v281);
          sub_223199C58("com.apple.cv3d", (unint64_t)v281, &xmmword_255788F40);
          if ((_BYTE)v282 && (v281[23] & 0x80000000) != 0)
            operator delete(*(void **)v281);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v175 = (const char *)&xmmword_255788F40;
        else
          v175 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v176 = byte_255788F57;
        else
          v176 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)v281 = os_log_create(v175, v173);
        v177 = &v281[8];
        if (v176 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v176 >= 0x17)
        {
          __sb = (char *)v173;
          v178 = v170;
          v179 = v34;
          v180 = v169;
          v181 = v32;
          v182 = v171;
          v183 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v176 | 7) != 0x17)
            v183 = v176 | 7;
          v184 = v183 + 1;
          v177 = operator new(v183 + 1);
          *(_QWORD *)&v281[16] = v176;
          *(_QWORD *)&v282 = v184 | 0x8000000000000000;
          *(_QWORD *)&v281[8] = v177;
          v171 = v182;
          v32 = v181;
          v169 = v180;
          v34 = v179;
          v170 = v178;
          v173 = __sb;
        }
        else
        {
          BYTE7(v282) = v176;
          if (!v176)
          {
LABEL_319:
            v177[v176] = 0;
            BYTE8(v282) = 1;
            v185 = &v283;
            if (v172 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v172 >= 0x17)
            {
              v186 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v172 | 7) != 0x17)
                v186 = v172 | 7;
              v187 = v186 + 1;
              v185 = (uint64_t *)operator new(v186 + 1);
              *(_QWORD *)&v284 = v172;
              *((_QWORD *)&v284 + 1) = v187 | 0x8000000000000000;
              v283 = (uint64_t)v185;
            }
            else
            {
              HIBYTE(v284) = v172;
              if (!v172)
              {
LABEL_327:
                *((_BYTE *)v185 + v172) = 0;
                LOBYTE(v285) = 1;
                v188 = *(NSObject **)v281;
                if (SHIBYTE(v284) < 0)
                  operator delete((void *)v283);
                if (BYTE8(v282) && SBYTE7(v282) < 0)
                  operator delete(*(void **)&v281[8]);
                if (*(_QWORD *)v281)
                  os_release(*(void **)v281);
                if (!v34 || !*(_QWORD *)(v34 + 24))
                {
                  os_log_type_enabled(v188, OS_LOG_TYPE_INFO);
                  *(_DWORD *)v281 = 136315138;
                  *(_QWORD *)&v281[4] = v169;
                  v195 = (void *)_os_log_send_and_compose_impl();
                  if (v195)
                    free(v195);
                  goto LABEL_408;
                }
                v189 = _os_log_pack_size();
                v190 = (std::__shared_weak_count_vtbl *)operator new(v189, (std::align_val_t)8uLL);
                v191 = (std::__shared_weak_count *)operator new();
                v191->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v191->__shared_owners_ = 0;
                v191->__shared_weak_owners_ = 0;
                v191[1].__vftable = v190;
                *(_QWORD *)&v264 = v190;
                *((_QWORD *)&v264 + 1) = v190;
                v266 = 0;
                v267 = 0;
                v265 = v191;
                v192 = strlen((const char *)v169);
                if (v192 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v193 = v192;
                if (v192 >= 0x17)
                {
                  v196 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v192 | 7) != 0x17)
                    v196 = v192 | 7;
                  v197 = v196 + 1;
                  v194 = operator new(v196 + 1);
                  *(_QWORD *)&v269 = v193;
                  *((_QWORD *)&v269 + 1) = v197 | 0x8000000000000000;
                  v268 = v194;
                }
                else
                {
                  HIBYTE(v269) = v192;
                  v194 = &v268;
                  if (!v192)
                  {
LABEL_346:
                    *((_BYTE *)v194 + v193) = 0;
                    v198 = v268;
                    v288[0] = (const char *)v269;
                    *(const char **)((char *)v288 + 7) = *(const char **)((char *)&v269 + 7);
                    v199 = HIBYTE(v269);
                    v200 = (char *)operator new(0x38uLL);
                    *((_QWORD *)v200 + 1) = 0;
                    *((_QWORD *)v200 + 2) = 0;
                    *((_QWORD *)v200 + 3) = off_24EC1FA48;
                    *(_QWORD *)v200 = &off_24EC1F9F8;
                    v201 = v288[0];
                    *((_QWORD *)v200 + 4) = v198;
                    *((_QWORD *)v200 + 5) = v201;
                    *(const char **)(v200 + 47) = *(const char **)((char *)v288 + 7);
                    v200[55] = v199;
                    memset(v288, 0, 15);
                    v202 = v267;
                    v266 = v200 + 24;
                    v267 = (std::__shared_weak_count *)v200;
                    if (v202)
                    {
                      v203 = (unint64_t *)&v202->__shared_owners_;
                      do
                        v204 = __ldaxr(v203);
                      while (__stlxr(v204 - 1, v203));
                      if (!v204)
                      {
                        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                        std::__shared_weak_count::__release_weak(v202);
                      }
                    }
                    *(_OWORD *)v281 = v264;
                    v205 = (uint64_t)v266;
                    *(_QWORD *)&v281[16] = v265;
                    if (v265)
                    {
                      v206 = (unint64_t *)&v265->__shared_owners_;
                      do
                        v207 = __ldxr(v206);
                      while (__stxr(v207 + 1, v206));
                    }
                    v208 = v267;
                    *(_QWORD *)&v282 = v205;
                    *((_QWORD *)&v282 + 1) = v267;
                    if (v267)
                    {
                      v209 = (unint64_t *)&v267->__shared_owners_;
                      do
                        v210 = __ldxr(v209);
                      while (__stxr(v210 + 1, v209));
                      v283 = v205;
                      do
                        v211 = __ldaxr(v209);
                      while (__stlxr(v211 - 1, v209));
                      if (!v211)
                      {
                        ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                        std::__shared_weak_count::__release_weak(v208);
                      }
                    }
                    else
                    {
                      v283 = v205;
                    }
                    v212 = v265;
                    if (v265)
                    {
                      v213 = (unint64_t *)&v265->__shared_owners_;
                      do
                        v214 = __ldaxr(v213);
                      while (__stlxr(v214 - 1, v213));
                      if (!v214)
                      {
                        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                        std::__shared_weak_count::__release_weak(v212);
                      }
                    }
                    v215 = *(_QWORD *)v281;
                    if (*(char *)(v283 + 31) >= 0)
                      v216 = (char *)(v283 + 8);
                    else
                      v216 = *(char **)(v283 + 8);
                    v217 = _os_log_pack_fill();
                    *(_DWORD *)v217 = 136315138;
                    *(_QWORD *)(v217 + 4) = v216;
                    v218 = operator new();
                    v219 = *(unsigned __int8 *)(v170 + 39);
                    if ((v219 & 0x80u) == 0)
                      v220 = v171;
                    else
                      v220 = *(_QWORD *)(v170 + 16);
                    if ((v219 & 0x80u) != 0)
                      v219 = *(_QWORD *)(v170 + 24);
                    *(_QWORD *)v218 = v215;
                    *(_OWORD *)(v218 + 8) = *(_OWORD *)&v281[8];
                    *(_QWORD *)&v281[8] = 0;
                    *(_QWORD *)&v281[16] = 0;
                    *(_OWORD *)(v218 + 24) = v282;
                    v282 = 0uLL;
                    *(_QWORD *)(v218 + 40) = v220;
                    *(_QWORD *)(v218 + 48) = v219;
                    *(_BYTE *)(v218 + 56) = 1;
                    v268 = 0;
                    *(_QWORD *)&v264 = v218;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v34 + 24) + 40))(*(_QWORD *)(v34 + 24), &v264);
                    v221 = v264;
                    *(_QWORD *)&v264 = 0;
                    if (v221)
                    {
                      v222 = *(std::__shared_weak_count **)(v221 + 32);
                      if (v222)
                      {
                        v223 = (unint64_t *)&v222->__shared_owners_;
                        do
                          v224 = __ldaxr(v223);
                        while (__stlxr(v224 - 1, v223));
                        if (!v224)
                        {
                          ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
                          std::__shared_weak_count::__release_weak(v222);
                        }
                      }
                      v225 = *(std::__shared_weak_count **)(v221 + 16);
                      if (v225)
                      {
                        v226 = (unint64_t *)&v225->__shared_owners_;
                        do
                          v227 = __ldaxr(v226);
                        while (__stlxr(v227 - 1, v226));
                        if (!v227)
                        {
                          ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                          std::__shared_weak_count::__release_weak(v225);
                        }
                      }
                      MEMORY[0x227684CE8](v221, 0x10F0C40B62ED6C6);
                      v228 = v268;
                      v268 = 0;
                      if (v228)
                      {
                        v229 = (std::__shared_weak_count *)*((_QWORD *)v228 + 4);
                        if (v229)
                        {
                          v230 = (unint64_t *)&v229->__shared_owners_;
                          do
                            v231 = __ldaxr(v230);
                          while (__stlxr(v231 - 1, v230));
                          if (!v231)
                          {
                            ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                            std::__shared_weak_count::__release_weak(v229);
                          }
                        }
                        v232 = (std::__shared_weak_count *)*((_QWORD *)v228 + 2);
                        if (v232)
                        {
                          v233 = (unint64_t *)&v232->__shared_owners_;
                          do
                            v234 = __ldaxr(v233);
                          while (__stlxr(v234 - 1, v233));
                          if (!v234)
                          {
                            ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                            std::__shared_weak_count::__release_weak(v232);
                          }
                        }
                        MEMORY[0x227684CE8](v228, 0x10F0C40B62ED6C6);
                      }
                    }
                    v235 = (std::__shared_weak_count *)*((_QWORD *)&v282 + 1);
                    if (*((_QWORD *)&v282 + 1))
                    {
                      v236 = (unint64_t *)(*((_QWORD *)&v282 + 1) + 8);
                      do
                        v237 = __ldaxr(v236);
                      while (__stlxr(v237 - 1, v236));
                      if (!v237)
                      {
                        ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                        std::__shared_weak_count::__release_weak(v235);
                      }
                    }
                    v238 = *(std::__shared_weak_count **)&v281[16];
                    if (*(_QWORD *)&v281[16])
                    {
                      v239 = (unint64_t *)(*(_QWORD *)&v281[16] + 8);
                      do
                        v240 = __ldaxr(v239);
                      while (__stlxr(v240 - 1, v239));
                      if (!v240)
                      {
                        ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                        std::__shared_weak_count::__release_weak(v238);
                      }
                    }
LABEL_408:
                    if (v32)
                    {
                      v241 = __dst;
                      if (v262 < 0)
                        v241 = (void **)__dst[0];
                      sub_22322C138((uint64_t)&__p, "%s", (const char *)v241);
                      sub_223182C08((uint64_t)&__p);
                    }
                    sub_223182C08((uint64_t)&__p);
                    v242 = v259;
                    if (v259)
                    {
                      v243 = (unint64_t *)&v259->__shared_owners_;
                      do
                        v244 = __ldaxr(v243);
                      while (__stlxr(v244 - 1, v243));
                      if (!v244)
                      {
                        ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                        std::__shared_weak_count::__release_weak(v242);
                      }
                    }
                    if (SHIBYTE(v262) < 0)
                      operator delete(__dst[0]);
                    *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
                    v245 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&object[16] = v245;
                    v271 = MEMORY[0x24BEDB848] + 16;
                    if (v277 < 0)
                      operator delete(v276);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x227684BE0](&v280);
                    return;
                  }
                }
                memcpy(v194, v169, v193);
                goto LABEL_346;
              }
            }
            memmove(v185, v173, v172);
            goto LABEL_327;
          }
        }
        memmove(v177, v175, v176);
        goto LABEL_319;
      }
    }
    memmove(v41, v166, v40);
    goto LABEL_298;
  }
  *(_DWORD *)a3 = v8;
  sub_223CA9D94(__dst);
  if (**((int **)__dst[0] + 7) <= 4)
  {
    v9 = *((unsigned __int8 *)__dst[0] + 72);
    v10 = sub_22322F254((uint64_t)__dst[0], "OSLogSurrogateAppender", 1, 0);
    v11 = v10;
    if (v9 || v10 != 0)
    {
      *(_QWORD *)v281 = __dst;
      *(std::chrono::steady_clock::time_point *)&v281[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v281[16] = std::chrono::system_clock::now();
      LODWORD(v282) = 4;
      *((_QWORD *)&v282 + 1) = "unknown file";
      LODWORD(v283) = 91;
      *((_QWORD *)&v284 + 1) = 0;
      v285 = 0;
      *(_QWORD *)&v284 = "unknown function";
      v13 = (char *)*a4;
      LODWORD(v271) = 0;
      sub_223208764((uint64_t)&__p, (uint64_t)object, a3);
      if ((_DWORD)v271 == -1)
        sub_22316DD70();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v264;
      ((void (*)(void **__return_ptr, std::string *, _BYTE *))off_24EC63160[v271])(&v268, &__p, object);
      if ((_DWORD)v271 != -1)
        ((void (*)(std::string *, _BYTE *))off_24EC63148[v271])(&__p, object);
      __s = v13;
      v14 = (const char *)&v268;
      if (v269 < 0)
        v14 = (const char *)v268;
      v288[0] = v14;
      if (*(char *)(v6 + 23) >= 0)
        v15 = (const char *)v6;
      else
        v15 = *(const char **)v6;
      v263 = (int **)v15;
      v16 = **(_QWORD **)v281;
      v17 = (const char *)(**(_QWORD **)v281 + 16);
      v246 = v17;
      v247 = **(_QWORD **)v281;
      if (*(char *)(**(_QWORD **)v281 + 39) < 0)
      {
        v17 = *(const char **)(v16 + 16);
        v18 = *(_QWORD *)(v16 + 24);
        v248 = v9;
        v249 = a4;
        v42 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v42 & 1) != 0)
          goto LABEL_61;
      }
      else
      {
        v18 = *(unsigned __int8 *)(**(_QWORD **)v281 + 39);
        v248 = v9;
        v249 = a4;
        v19 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v19 & 1) != 0)
          goto LABEL_61;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v271 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_61:
      if (byte_255788F57 >= 0)
        v43 = (const char *)&xmmword_255788F40;
      else
        v43 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v44 = byte_255788F57;
      else
        v44 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v43, v17);
      v45 = &object[8];
      if (v44 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v44 >= 0x17)
      {
        v46 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v44 | 7) != 0x17)
          v46 = v44 | 7;
        v47 = v46 + 1;
        v45 = operator new(v46 + 1);
        *(_QWORD *)&object[16] = v44;
        v271 = v47 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v45;
      }
      else
      {
        HIBYTE(v271) = v44;
        if (!v44)
        {
LABEL_75:
          v45[v44] = 0;
          LOBYTE(v272[0]) = 1;
          v48 = &v272[1];
          if (v18 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v18 >= 0x17)
          {
            v49 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v18 | 7) != 0x17)
              v49 = v18 | 7;
            v50 = v49 + 1;
            v48 = (void **)operator new(v49 + 1);
            v273 = v18;
            *(_QWORD *)&v274 = v50 | 0x8000000000000000;
            v272[1] = v48;
          }
          else
          {
            BYTE7(v274) = v18;
            if (!v18)
            {
LABEL_83:
              *((_BYTE *)v48 + v18) = 0;
              BYTE8(v274) = 1;
              v51 = *(NSObject **)object;
              if (SBYTE7(v274) < 0)
                operator delete(v272[1]);
              if (LOBYTE(v272[0]) && SHIBYTE(v271) < 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v11 && *(_QWORD *)(v11 + 24))
              {
                v52 = _os_log_pack_size();
                v53 = (std::__shared_weak_count_vtbl *)operator new(v52, (std::align_val_t)8uLL);
                v54 = (std::__shared_weak_count *)operator new();
                v54->__shared_owners_ = 0;
                v55 = (unint64_t *)&v54->__shared_owners_;
                v54->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v54->__shared_weak_owners_ = 0;
                v54[1].__vftable = v53;
                *(_QWORD *)&v264 = v53;
                *((_QWORD *)&v264 + 1) = v53;
                v266 = 0;
                v267 = 0;
                v265 = v54;
                sub_223CC18F4((uint64_t)object, __s, v288, (const char **)&v263);
                v56 = (char *)operator new(0x68uLL);
                v57 = (std::__shared_weak_count *)v56;
                *((_QWORD *)v56 + 3) = off_24EC206F8;
                *(_QWORD *)v56 = &off_24EC206A8;
                *((_QWORD *)v56 + 6) = v271;
                v58 = v275;
                *((_QWORD *)v56 + 9) = v273;
                *((_QWORD *)v56 + 1) = 0;
                v59 = (unint64_t *)(v56 + 8);
                *((_QWORD *)v56 + 2) = 0;
                *((_OWORD *)v56 + 2) = *(_OWORD *)&object[8];
                *(_OWORD *)(v56 + 56) = *(_OWORD *)v272;
                *((_QWORD *)v56 + 12) = v58;
                *((_OWORD *)v56 + 5) = v274;
                v266 = v56 + 24;
                v267 = (std::__shared_weak_count *)v56;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)v53;
                __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v54;
                do
                  v60 = __ldxr(v55);
                while (__stxr(v60 + 1, v55));
                *(_QWORD *)&v255 = v56 + 24;
                *((_QWORD *)&v255 + 1) = v56;
                do
                  v61 = __ldxr(v59);
                while (__stxr(v61 + 1, v59));
                v256 = v56 + 24;
                do
                  v62 = __ldaxr(v59);
                while (__stlxr(v62 - 1, v59));
                if (!v62)
                {
                  (*(void (**)(char *))(*(_QWORD *)v56 + 16))(v56);
                  std::__shared_weak_count::__release_weak(v57);
                }
                v63 = v265;
                if (v265)
                {
                  v64 = (unint64_t *)&v265->__shared_owners_;
                  do
                    v65 = __ldaxr(v64);
                  while (__stlxr(v65 - 1, v64));
                  if (!v65)
                  {
                    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                    std::__shared_weak_count::__release_weak(v63);
                  }
                }
                v66 = __p.__r_.__value_.__r.__words[0];
                if (v256[31] >= 0)
                  v67 = v256 + 8;
                else
                  v67 = (char *)*((_QWORD *)v256 + 1);
                if (v256[55] >= 0)
                  v68 = v256 + 32;
                else
                  v68 = (char *)*((_QWORD *)v256 + 4);
                if (v256[79] >= 0)
                  v69 = v256 + 56;
                else
                  v69 = (char *)*((_QWORD *)v256 + 7);
                v70 = _os_log_pack_fill();
                *(_DWORD *)v70 = 136315650;
                *(_QWORD *)(v70 + 4) = v67;
                *(_WORD *)(v70 + 12) = 2080;
                *(_QWORD *)(v70 + 14) = v68;
                *(_WORD *)(v70 + 22) = 2080;
                *(_QWORD *)(v70 + 24) = v69;
                v71 = operator new();
                v72 = *(unsigned __int8 *)(v247 + 39);
                v73 = v246;
                if ((v72 & 0x80u) != 0)
                {
                  v73 = *(const char **)(v247 + 16);
                  v72 = *(_QWORD *)(v247 + 24);
                }
                *(_QWORD *)v71 = v66;
                *(_OWORD *)(v71 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
                *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v71 + 24) = v255;
                v255 = 0uLL;
                *(_QWORD *)(v71 + 40) = v73;
                *(_QWORD *)(v71 + 48) = v72;
                *(_BYTE *)(v71 + 56) = 16;
                *(_QWORD *)&v264 = 0;
                *(_QWORD *)object = v71;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), object);
                v74 = v249;
                v75 = *(_QWORD *)object;
                *(_QWORD *)object = 0;
                v76 = v248;
                if (v75)
                {
                  v77 = *(std::__shared_weak_count **)(v75 + 32);
                  if (v77)
                  {
                    v78 = (unint64_t *)&v77->__shared_owners_;
                    do
                      v79 = __ldaxr(v78);
                    while (__stlxr(v79 - 1, v78));
                    if (!v79)
                    {
                      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                      std::__shared_weak_count::__release_weak(v77);
                    }
                  }
                  v80 = *(std::__shared_weak_count **)(v75 + 16);
                  if (v80)
                  {
                    v81 = (unint64_t *)&v80->__shared_owners_;
                    do
                      v82 = __ldaxr(v81);
                    while (__stlxr(v82 - 1, v81));
                    if (!v82)
                    {
                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                      std::__shared_weak_count::__release_weak(v80);
                    }
                  }
                  MEMORY[0x227684CE8](v75, 0x10F0C40B62ED6C6);
                  v83 = v264;
                  *(_QWORD *)&v264 = 0;
                  if (v83)
                  {
                    v84 = *(std::__shared_weak_count **)(v83 + 32);
                    if (v84)
                    {
                      v85 = (unint64_t *)&v84->__shared_owners_;
                      do
                        v86 = __ldaxr(v85);
                      while (__stlxr(v86 - 1, v85));
                      if (!v86)
                      {
                        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                        std::__shared_weak_count::__release_weak(v84);
                      }
                    }
                    v87 = *(std::__shared_weak_count **)(v83 + 16);
                    if (v87)
                    {
                      v88 = (unint64_t *)&v87->__shared_owners_;
                      do
                        v89 = __ldaxr(v88);
                      while (__stlxr(v89 - 1, v88));
                      if (!v89)
                      {
                        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                        std::__shared_weak_count::__release_weak(v87);
                      }
                    }
                    MEMORY[0x227684CE8](v83, 0x10F0C40B62ED6C6);
                  }
                }
                v90 = (std::__shared_weak_count *)*((_QWORD *)&v255 + 1);
                if (*((_QWORD *)&v255 + 1))
                {
                  v91 = (unint64_t *)(*((_QWORD *)&v255 + 1) + 8);
                  do
                    v92 = __ldaxr(v91);
                  while (__stlxr(v92 - 1, v91));
                  if (!v92)
                  {
                    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                    std::__shared_weak_count::__release_weak(v90);
                  }
                }
                v93 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
                if (__p.__r_.__value_.__r.__words[2])
                {
                  v94 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                  do
                    v95 = __ldaxr(v94);
                  while (__stlxr(v95 - 1, v94));
                  if (!v95)
                  {
                    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                    std::__shared_weak_count::__release_weak(v93);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v51, OS_LOG_TYPE_ERROR);
                *(_DWORD *)object = 136315650;
                *(_QWORD *)&object[4] = __s;
                *(_WORD *)&object[12] = 2080;
                *(const char **)&object[14] = v288[0];
                *(_WORD *)&object[22] = 2080;
                v271 = (unint64_t)v263;
                v96 = (void *)_os_log_send_and_compose_impl();
                v74 = v249;
                v76 = v248;
                if (v96)
                  free(v96);
              }
              if (SHIBYTE(v269) < 0)
              {
                operator delete(v268);
                if (!v76)
                {
LABEL_166:
                  sub_223182C08((uint64_t)v281);
                  v100 = (std::__shared_weak_count *)v285;
                  if (!v285)
                    return;
                  v101 = (unint64_t *)(v285 + 8);
                  do
                    v102 = __ldaxr(v101);
                  while (__stlxr(v102 - 1, v101));
                  goto LABEL_287;
                }
              }
              else if (!v76)
              {
                goto LABEL_166;
              }
              v97 = *v74;
              LODWORD(v271) = 0;
              sub_223208764((uint64_t)&v264, (uint64_t)object, a3);
              if ((_DWORD)v271 == -1)
                sub_22316DD70();
              *(_QWORD *)&v264 = &v268;
              ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24EC63160[v271])(&__p, &v264, object);
              if ((_DWORD)v271 != -1)
                ((void (*)(__int128 *, _BYTE *))off_24EC63148[v271])(&v264, object);
              v98 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v98 = (std::string *)__p.__r_.__value_.__r.__words[0];
              if (*(char *)(v6 + 23) >= 0)
                v99 = (const char *)v6;
              else
                v99 = *(const char **)v6;
              sub_22322C138((uint64_t)v281, "Overriding variable \"%s\" with value %s from key \"%s\"", v97, (const char *)v98, v99);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              sub_223182C08((uint64_t)v281);
              goto LABEL_166;
            }
          }
          memmove(v48, v17, v18);
          goto LABEL_83;
        }
      }
      memmove(v45, v43, v44);
      goto LABEL_75;
    }
  }
}

void sub_223CB0004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,void *a49,int a50,__int16 a51,char a52,char a53,char a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (a54 && a53 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  if (a35 < 0)
  {
    operator delete(a30);
    sub_223182DAC(v58 - 208);
    sub_223224234((uint64_t)&a42);
    _Unwind_Resume(a1);
  }
  sub_223182DAC(v58 - 208);
  sub_223224234((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_223CB0388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223224234((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223CB03A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223182DAC(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_223CB03B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a22 < 0)
  {
    operator delete(__p);
    sub_223182DAC(v22 - 208);
    _Unwind_Resume(a1);
  }
  sub_223182DAC(v22 - 208);
  _Unwind_Resume(a1);
}

void sub_223CB03EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223224234((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223CB0400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_223167354((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_223CB0418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *object,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  uint64_t v46;

  if (a46 && a45 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  if (SHIBYTE(a38) < 0)
  {
    operator delete(a36);
    sub_223182DAC(v46 - 208);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223CB0484);
}

void sub_223CB0468(void *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x223CB049CLL);
}

void sub_223CB0478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_22319B964((uint64_t)&a39);
  JUMPOUT(0x223CB0484);
}

void sub_223CB0498(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_223CB04A4(uint64_t a1, uint64_t a2, uint64_t *a3, const char **a4)
{
  uint64_t v6;
  unint64_t v8;
  char v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  char *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  unsigned __int8 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  char *v28;
  void **v29;
  const char *v30;
  uint64_t v31;
  size_t v32;
  const char *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  char *v39;
  std::string *v40;
  std::string::size_type size;
  size_t v42;
  void *v43;
  unsigned __int8 v44;
  const char *v45;
  size_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  size_t v54;
  std::__shared_weak_count_vtbl *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  char *v58;
  std::__shared_weak_count *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::string::size_type v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  const char **v76;
  uint64_t v77;
  int v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  const char *v97;
  const char *v98;
  const char *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  const void **v104;
  unsigned __int8 v105;
  const char *v106;
  size_t v107;
  _BYTE *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  void **v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  size_t v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  char *v120;
  std::__shared_weak_count *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::string::size_type v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  void *v159;
  int v160;
  std::string::size_type v161;
  std::string *p_p;
  const char *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t *v167;
  const void *v168;
  uint64_t v169;
  uint64_t v170;
  void **v171;
  uint64_t v172;
  uint64_t v173;
  size_t v174;
  const char *v175;
  unsigned __int8 v176;
  const char *v177;
  size_t v178;
  _BYTE *v179;
  uint64_t v180;
  unint64_t v181;
  void **v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  NSObject *v190;
  size_t v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  size_t v194;
  size_t v195;
  void *v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  char v201;
  char *v202;
  const char *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  void *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  void **v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  const char *v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  const char **v252;
  uint64_t v253;
  char *__s;
  char *__sa;
  std::string __p;
  __int128 v257;
  char *v258;
  const char *v259;
  uint64_t v260;
  std::__shared_weak_count *v261;
  const char *v262;
  void *__dst[2];
  int64_t v264;
  int **v265;
  __int128 v266;
  std::__shared_weak_count *v267;
  char *v268;
  std::__shared_weak_count *v269;
  void *v270;
  __int128 v271;
  _BYTE object[24];
  unint64_t v273;
  void *v274[2];
  size_t v275;
  __int128 v276;
  unint64_t v277;
  void *v278;
  char v279;
  unint64_t v280;
  int v281;
  uint64_t v282;
  _BYTE v283[24];
  __int128 v284;
  uint64_t v285;
  __int128 v286;
  const char *v287;
  uint64_t v288;
  uint64_t v289;
  const char *v290[5];

  v6 = a2;
  v290[2] = *(const char **)MEMORY[0x24BDAC8D0];
  v8 = sub_223763054(a1, a2);
  if (!v9)
  {
    if (sub_22452B568(a1, v6))
    {
      sub_224527BAC(v6, (CFStringRef *)object);
      sub_223CC1B5C((uint64_t)&v270, a1, *(void **)object);
      v21 = *(std::__shared_weak_count **)&object[8];
      if (*(_QWORD *)&object[8])
      {
        v22 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_223CA9D94(v290);
      if (**((int **)v290[0] + 7) > 5
        || ((v24 = *((unsigned __int8 *)v290[0] + 72),
             v25 = sub_22322F254((uint64_t)v290[0], "OSLogSurrogateAppender", 1, 0),
             v26 = v25,
             !v24)
          ? (v27 = v25 == 0)
          : (v27 = 0),
            v27))
      {
LABEL_285:
        if (BYTE8(v271))
        {
          v100 = (std::__shared_weak_count *)v271;
          if ((_QWORD)v271)
          {
            v167 = (unint64_t *)(v271 + 8);
            do
              v102 = __ldaxr(v167);
            while (__stlxr(v102 - 1, v167));
LABEL_289:
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
            return;
          }
        }
        return;
      }
      *(_QWORD *)v283 = v290;
      *(std::chrono::steady_clock::time_point *)&v283[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v283[16] = std::chrono::system_clock::now();
      LODWORD(v284) = 5;
      *((_QWORD *)&v284 + 1) = "unknown file";
      LODWORD(v285) = 96;
      *((_QWORD *)&v286 + 1) = 0;
      v287 = 0;
      *(_QWORD *)&v286 = "unknown function";
      if (*(char *)(v6 + 23) >= 0)
        v28 = (char *)v6;
      else
        v28 = *(char **)v6;
      LODWORD(v273) = 0;
      sub_223CC1C9C((uint64_t)object, (CFTypeRef *)&v270);
      if ((_DWORD)v273 == -1)
        sub_22316DD70();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v266;
      ((void (*)(void **__return_ptr, std::string *, _BYTE *))off_24EC63160[v273])(__dst, &__p, object);
      if ((_DWORD)v273 != -1)
        ((void (*)(std::string *, _BYTE *))off_24EC63148[v273])(&__p, object);
      v29 = __dst;
      if (v264 < 0)
        v29 = (void **)__dst[0];
      v265 = (int **)v29;
      sub_223CC1F40();
      if (byte_2540CDAAF >= 0)
        v30 = (const char *)&xmmword_2540CDA98;
      else
        v30 = (const char *)xmmword_2540CDA98;
      v262 = v30;
      v31 = **(_QWORD **)v283;
      v253 = **(_QWORD **)v283;
      if (*(char *)(**(_QWORD **)v283 + 39) < 0)
      {
        v33 = *(const char **)(v31 + 16);
        v32 = *(_QWORD *)(v31 + 24);
      }
      else
      {
        v32 = *(unsigned __int8 *)(**(_QWORD **)v283 + 39);
        v33 = (const char *)(v31 + 16);
      }
      v251 = v31 + 16;
      v105 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v105 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v273 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v106 = (const char *)&xmmword_255788F40;
      else
        v106 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v107 = byte_255788F57;
      else
        v107 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v106, v33);
      v108 = &object[8];
      if (v107 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v107 >= 0x17)
      {
        v109 = v24;
        v110 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v107 | 7) != 0x17)
          v110 = v107 | 7;
        v111 = v110 + 1;
        v108 = operator new(v110 + 1);
        *(_QWORD *)&object[16] = v107;
        v273 = v111 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v108;
        v24 = v109;
      }
      else
      {
        HIBYTE(v273) = v107;
        if (!v107)
        {
LABEL_188:
          v108[v107] = 0;
          LOBYTE(v274[0]) = 1;
          v112 = &v274[1];
          if (v32 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v32 >= 0x17)
          {
            v113 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17)
              v113 = v32 | 7;
            v114 = v113 + 1;
            v112 = (void **)operator new(v113 + 1);
            v275 = v32;
            *(_QWORD *)&v276 = v114 | 0x8000000000000000;
            v274[1] = v112;
          }
          else
          {
            BYTE7(v276) = v32;
            if (!v32)
              goto LABEL_196;
          }
          memmove(v112, v33, v32);
LABEL_196:
          *((_BYTE *)v112 + v32) = 0;
          BYTE8(v276) = 1;
          v115 = *(NSObject **)object;
          if (SBYTE7(v276) < 0)
            operator delete(v274[1]);
          if (LOBYTE(v274[0]) && SHIBYTE(v273) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v26 && *(_QWORD *)(v26 + 24))
          {
            v116 = _os_log_pack_size();
            v117 = (std::__shared_weak_count_vtbl *)operator new(v116, (std::align_val_t)8uLL);
            v118 = (std::__shared_weak_count *)operator new();
            v118->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v118->__shared_owners_;
            v118->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v118->__shared_weak_owners_ = 0;
            v118[1].__vftable = v117;
            *(_QWORD *)&v266 = v117;
            *((_QWORD *)&v266 + 1) = v117;
            v268 = 0;
            v269 = 0;
            v267 = v118;
            sub_223CC18F4((uint64_t)object, v28, (const char **)&v265, &v262);
            v120 = (char *)operator new(0x68uLL);
            v121 = (std::__shared_weak_count *)v120;
            *((_QWORD *)v120 + 3) = off_24EC206F8;
            *(_QWORD *)v120 = &off_24EC206A8;
            *((_QWORD *)v120 + 6) = v273;
            v122 = v277;
            *((_QWORD *)v120 + 9) = v275;
            *((_QWORD *)v120 + 1) = 0;
            v123 = (unint64_t *)(v120 + 8);
            *((_QWORD *)v120 + 2) = 0;
            *((_OWORD *)v120 + 2) = *(_OWORD *)&object[8];
            *(_OWORD *)(v120 + 56) = *(_OWORD *)v274;
            *((_QWORD *)v120 + 12) = v122;
            *((_OWORD *)v120 + 5) = v276;
            v268 = v120 + 24;
            v269 = (std::__shared_weak_count *)v120;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v117;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v117;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v118;
            do
              v124 = __ldxr(p_shared_owners);
            while (__stxr(v124 + 1, p_shared_owners));
            *(_QWORD *)&v257 = v120 + 24;
            *((_QWORD *)&v257 + 1) = v120;
            do
              v125 = __ldxr(v123);
            while (__stxr(v125 + 1, v123));
            v258 = v120 + 24;
            do
              v126 = __ldaxr(v123);
            while (__stlxr(v126 - 1, v123));
            if (!v126)
            {
              (*(void (**)(char *))(*(_QWORD *)v120 + 16))(v120);
              std::__shared_weak_count::__release_weak(v121);
            }
            v127 = v24;
            v128 = v267;
            if (v267)
            {
              v129 = (unint64_t *)&v267->__shared_owners_;
              do
                v130 = __ldaxr(v129);
              while (__stlxr(v130 - 1, v129));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                std::__shared_weak_count::__release_weak(v128);
              }
            }
            v131 = __p.__r_.__value_.__r.__words[0];
            if (v258[31] >= 0)
              v132 = v258 + 8;
            else
              v132 = (char *)*((_QWORD *)v258 + 1);
            if (v258[55] >= 0)
              v133 = v258 + 32;
            else
              v133 = (char *)*((_QWORD *)v258 + 4);
            if (v258[79] >= 0)
              v134 = v258 + 56;
            else
              v134 = (char *)*((_QWORD *)v258 + 7);
            v135 = _os_log_pack_fill();
            *(_DWORD *)v135 = 136315650;
            *(_QWORD *)(v135 + 4) = v132;
            *(_WORD *)(v135 + 12) = 2080;
            *(_QWORD *)(v135 + 14) = v133;
            *(_WORD *)(v135 + 22) = 2080;
            *(_QWORD *)(v135 + 24) = v134;
            v136 = operator new();
            v137 = *(unsigned __int8 *)(v253 + 39);
            v138 = v251;
            if ((v137 & 0x80u) != 0)
            {
              v138 = *(_QWORD *)(v253 + 16);
              v137 = *(_QWORD *)(v253 + 24);
            }
            *(_QWORD *)v136 = v131;
            *(_OWORD *)(v136 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
            *(_OWORD *)(v136 + 24) = v257;
            v257 = 0uLL;
            *(_QWORD *)(v136 + 40) = v138;
            *(_QWORD *)(v136 + 48) = v137;
            *(_BYTE *)(v136 + 56) = 16;
            *(_QWORD *)&v266 = 0;
            *(_QWORD *)object = v136;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v26 + 24) + 40))(*(_QWORD *)(v26 + 24), object);
            v24 = v127;
            v139 = *(_QWORD *)object;
            *(_QWORD *)object = 0;
            if (v139)
            {
              v140 = *(std::__shared_weak_count **)(v139 + 32);
              if (v140)
              {
                v141 = (unint64_t *)&v140->__shared_owners_;
                do
                  v142 = __ldaxr(v141);
                while (__stlxr(v142 - 1, v141));
                if (!v142)
                {
                  ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                  std::__shared_weak_count::__release_weak(v140);
                }
              }
              v143 = *(std::__shared_weak_count **)(v139 + 16);
              if (v143)
              {
                v144 = (unint64_t *)&v143->__shared_owners_;
                do
                  v145 = __ldaxr(v144);
                while (__stlxr(v145 - 1, v144));
                if (!v145)
                {
                  ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                  std::__shared_weak_count::__release_weak(v143);
                }
              }
              MEMORY[0x227684CE8](v139, 0x10F0C40B62ED6C6);
              v146 = v266;
              *(_QWORD *)&v266 = 0;
              if (v146)
              {
                v147 = *(std::__shared_weak_count **)(v146 + 32);
                if (v147)
                {
                  v148 = (unint64_t *)&v147->__shared_owners_;
                  do
                    v149 = __ldaxr(v148);
                  while (__stlxr(v149 - 1, v148));
                  if (!v149)
                  {
                    ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                    std::__shared_weak_count::__release_weak(v147);
                  }
                }
                v150 = *(std::__shared_weak_count **)(v146 + 16);
                if (v150)
                {
                  v151 = (unint64_t *)&v150->__shared_owners_;
                  do
                    v152 = __ldaxr(v151);
                  while (__stlxr(v152 - 1, v151));
                  if (!v152)
                  {
                    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                    std::__shared_weak_count::__release_weak(v150);
                  }
                }
                MEMORY[0x227684CE8](v146, 0x10F0C40B62ED6C6);
              }
            }
            v153 = (std::__shared_weak_count *)*((_QWORD *)&v257 + 1);
            if (*((_QWORD *)&v257 + 1))
            {
              v154 = (unint64_t *)(*((_QWORD *)&v257 + 1) + 8);
              do
                v155 = __ldaxr(v154);
              while (__stlxr(v155 - 1, v154));
              if (!v155)
              {
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v153);
              }
            }
            v156 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
            if (__p.__r_.__value_.__r.__words[2])
            {
              v157 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
              do
                v158 = __ldaxr(v157);
              while (__stlxr(v158 - 1, v157));
              if (!v158)
              {
                ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                std::__shared_weak_count::__release_weak(v156);
              }
            }
          }
          else
          {
            os_log_type_enabled(v115, OS_LOG_TYPE_ERROR);
            *(_DWORD *)object = 136315650;
            *(_QWORD *)&object[4] = v28;
            *(_WORD *)&object[12] = 2080;
            *(_QWORD *)&object[14] = v265;
            *(_WORD *)&object[22] = 2080;
            v273 = (unint64_t)v262;
            v159 = (void *)_os_log_send_and_compose_impl();
            if (v159)
              free(v159);
          }
          if (SHIBYTE(v264) < 0)
            operator delete(__dst[0]);
          if (v24)
          {
            if (*(char *)(v6 + 23) < 0)
              v6 = *(_QWORD *)v6;
            LODWORD(v273) = 0;
            sub_223CC1C9C((uint64_t)object, (CFTypeRef *)&v270);
            if ((_DWORD)v273 == -1)
              sub_22316DD70();
            *(_QWORD *)&v266 = __dst;
            ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24EC63160[v273])(&__p, &v266, object);
            if ((_DWORD)v273 != -1)
              ((void (*)(__int128 *, _BYTE *))off_24EC63148[v273])(&v266, object);
            v160 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            v161 = __p.__r_.__value_.__r.__words[0];
            sub_223CC1F40();
            p_p = &__p;
            if (v160 < 0)
              p_p = (std::string *)v161;
            if (byte_2540CDAAF >= 0)
              v163 = (const char *)&xmmword_2540CDA98;
            else
              v163 = (const char *)xmmword_2540CDA98;
            sub_22322C138((uint64_t)v283, "Error while getting value for key \"%s\" and value %s expecting type %s", (const char *)v6, (const char *)p_p, v163);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            sub_223182C08((uint64_t)v283);
          }
          sub_223182C08((uint64_t)v283);
          v164 = (std::__shared_weak_count *)v287;
          if (v287)
          {
            v165 = (unint64_t *)(v287 + 8);
            do
              v166 = __ldaxr(v165);
            while (__stlxr(v166 - 1, v165));
            if (!v166)
            {
              ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
              std::__shared_weak_count::__release_weak(v164);
            }
          }
          goto LABEL_285;
        }
      }
      memmove(v108, v106, v107);
      goto LABEL_188;
    }
    sub_223CA9D94(&v265);
    if (*v265[7] > 3)
      return;
    v34 = *((unsigned __int8 *)v265 + 72);
    v35 = sub_22322F254((uint64_t)v265, "OSLogSurrogateAppender", 1, 0);
    v36 = v35;
    if (!v34 && v35 == 0)
      return;
    sub_223195210((uint64_t)object);
    *(_QWORD *)v283 = "Key not found in dictionary \"";
    *(_QWORD *)&v283[8] = 29;
    v38 = *(unsigned __int8 *)(v6 + 23);
    if ((v38 & 0x80u) == 0)
      v39 = (char *)v6;
    else
      v39 = *(char **)v6;
    if ((v38 & 0x80u) != 0)
      v38 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)&v283[16] = v39;
    *(_QWORD *)&v284 = v38;
    *((_QWORD *)&v284 + 1) = "\" for variable \"";
    v285 = 16;
    v286 = *(_OWORD *)a4;
    v287 = "\"";
    v288 = 1;
    sub_2231A9820((uint64_t)v283, (uint64_t)&v289, 0, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = &__p;
    else
      v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_2231813E8(&object[16], (uint64_t)v40, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v281 & 0x10) != 0)
    {
      v103 = v280;
      if (v280 < v277)
      {
        v280 = v277;
        v103 = v277;
      }
      v104 = (const void **)&v276 + 1;
    }
    else
    {
      if ((v281 & 8) == 0)
      {
        v42 = 0;
        HIBYTE(v264) = 0;
        v43 = __dst;
        goto LABEL_300;
      }
      v104 = (const void **)&v274[1];
      v103 = v276;
    }
    v168 = *v104;
    v42 = v103 - (_QWORD)*v104;
    if (v42 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v42 >= 0x17)
    {
      v169 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v42 | 7) != 0x17)
        v169 = v42 | 7;
      v170 = v169 + 1;
      v43 = operator new(v169 + 1);
      __dst[1] = (void *)v42;
      v264 = v170 | 0x8000000000000000;
      __dst[0] = v43;
    }
    else
    {
      HIBYTE(v264) = v103 - *(_BYTE *)v104;
      v43 = __dst;
      if (!v42)
      {
LABEL_300:
        *((_BYTE *)v43 + v42) = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v265;
        __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v257) = 3;
        *((_QWORD *)&v257 + 1) = "unknown file";
        LODWORD(v258) = 99;
        v260 = 0;
        v261 = 0;
        v259 = "unknown function";
        if (v264 >= 0)
          v171 = __dst;
        else
          v171 = (void **)__dst[0];
        v172 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
        v173 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
        if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v175 = *(const char **)(v172 + 16);
          v174 = *(_QWORD *)(v172 + 24);
        }
        else
        {
          v174 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
          v175 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
        }
        v176 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v176 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v283);
          sub_223199C58("com.apple.cv3d", (unint64_t)v283, &xmmword_255788F40);
          if ((_BYTE)v284 && (v283[23] & 0x80000000) != 0)
            operator delete(*(void **)v283);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v177 = (const char *)&xmmword_255788F40;
        else
          v177 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v178 = byte_255788F57;
        else
          v178 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)v283 = os_log_create(v177, v175);
        v179 = &v283[8];
        if (v178 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v178 >= 0x17)
        {
          __sa = (char *)v175;
          v180 = v172;
          v181 = v36;
          v182 = v171;
          v183 = v34;
          v184 = v173;
          v185 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v178 | 7) != 0x17)
            v185 = v178 | 7;
          v186 = v185 + 1;
          v179 = operator new(v185 + 1);
          *(_QWORD *)&v283[16] = v178;
          *(_QWORD *)&v284 = v186 | 0x8000000000000000;
          *(_QWORD *)&v283[8] = v179;
          v173 = v184;
          v34 = v183;
          v171 = v182;
          v36 = v181;
          v172 = v180;
          v175 = __sa;
        }
        else
        {
          BYTE7(v284) = v178;
          if (!v178)
          {
LABEL_321:
            v179[v178] = 0;
            BYTE8(v284) = 1;
            v187 = &v285;
            if (v174 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v174 >= 0x17)
            {
              v188 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v174 | 7) != 0x17)
                v188 = v174 | 7;
              v189 = v188 + 1;
              v187 = (uint64_t *)operator new(v188 + 1);
              *(_QWORD *)&v286 = v174;
              *((_QWORD *)&v286 + 1) = v189 | 0x8000000000000000;
              v285 = (uint64_t)v187;
            }
            else
            {
              HIBYTE(v286) = v174;
              if (!v174)
              {
LABEL_329:
                *((_BYTE *)v187 + v174) = 0;
                LOBYTE(v287) = 1;
                v190 = *(NSObject **)v283;
                if (SHIBYTE(v286) < 0)
                  operator delete((void *)v285);
                if (BYTE8(v284) && SBYTE7(v284) < 0)
                  operator delete(*(void **)&v283[8]);
                if (*(_QWORD *)v283)
                  os_release(*(void **)v283);
                if (!v36 || !*(_QWORD *)(v36 + 24))
                {
                  os_log_type_enabled(v190, OS_LOG_TYPE_INFO);
                  *(_DWORD *)v283 = 136315138;
                  *(_QWORD *)&v283[4] = v171;
                  v197 = (void *)_os_log_send_and_compose_impl();
                  if (v197)
                    free(v197);
                  goto LABEL_410;
                }
                v191 = _os_log_pack_size();
                v192 = (std::__shared_weak_count_vtbl *)operator new(v191, (std::align_val_t)8uLL);
                v193 = (std::__shared_weak_count *)operator new();
                v193->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v193->__shared_owners_ = 0;
                v193->__shared_weak_owners_ = 0;
                v193[1].__vftable = v192;
                *(_QWORD *)&v266 = v192;
                *((_QWORD *)&v266 + 1) = v192;
                v268 = 0;
                v269 = 0;
                v267 = v193;
                v194 = strlen((const char *)v171);
                if (v194 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v195 = v194;
                if (v194 >= 0x17)
                {
                  v198 = (v194 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v194 | 7) != 0x17)
                    v198 = v194 | 7;
                  v199 = v198 + 1;
                  v196 = operator new(v198 + 1);
                  *(_QWORD *)&v271 = v195;
                  *((_QWORD *)&v271 + 1) = v199 | 0x8000000000000000;
                  v270 = v196;
                }
                else
                {
                  HIBYTE(v271) = v194;
                  v196 = &v270;
                  if (!v194)
                  {
LABEL_348:
                    *((_BYTE *)v196 + v195) = 0;
                    v200 = v270;
                    v290[0] = (const char *)v271;
                    *(const char **)((char *)v290 + 7) = *(const char **)((char *)&v271 + 7);
                    v201 = HIBYTE(v271);
                    v202 = (char *)operator new(0x38uLL);
                    *((_QWORD *)v202 + 1) = 0;
                    *((_QWORD *)v202 + 2) = 0;
                    *((_QWORD *)v202 + 3) = off_24EC1FA48;
                    *(_QWORD *)v202 = &off_24EC1F9F8;
                    v203 = v290[0];
                    *((_QWORD *)v202 + 4) = v200;
                    *((_QWORD *)v202 + 5) = v203;
                    *(const char **)(v202 + 47) = *(const char **)((char *)v290 + 7);
                    v202[55] = v201;
                    memset(v290, 0, 15);
                    v204 = v269;
                    v268 = v202 + 24;
                    v269 = (std::__shared_weak_count *)v202;
                    if (v204)
                    {
                      v205 = (unint64_t *)&v204->__shared_owners_;
                      do
                        v206 = __ldaxr(v205);
                      while (__stlxr(v206 - 1, v205));
                      if (!v206)
                      {
                        ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                        std::__shared_weak_count::__release_weak(v204);
                      }
                    }
                    *(_OWORD *)v283 = v266;
                    v207 = (uint64_t)v268;
                    *(_QWORD *)&v283[16] = v267;
                    if (v267)
                    {
                      v208 = (unint64_t *)&v267->__shared_owners_;
                      do
                        v209 = __ldxr(v208);
                      while (__stxr(v209 + 1, v208));
                    }
                    v210 = v269;
                    *(_QWORD *)&v284 = v207;
                    *((_QWORD *)&v284 + 1) = v269;
                    if (v269)
                    {
                      v211 = (unint64_t *)&v269->__shared_owners_;
                      do
                        v212 = __ldxr(v211);
                      while (__stxr(v212 + 1, v211));
                      v285 = v207;
                      do
                        v213 = __ldaxr(v211);
                      while (__stlxr(v213 - 1, v211));
                      if (!v213)
                      {
                        ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                        std::__shared_weak_count::__release_weak(v210);
                      }
                    }
                    else
                    {
                      v285 = v207;
                    }
                    v214 = v267;
                    if (v267)
                    {
                      v215 = (unint64_t *)&v267->__shared_owners_;
                      do
                        v216 = __ldaxr(v215);
                      while (__stlxr(v216 - 1, v215));
                      if (!v216)
                      {
                        ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                        std::__shared_weak_count::__release_weak(v214);
                      }
                    }
                    v217 = *(_QWORD *)v283;
                    if (*(char *)(v285 + 31) >= 0)
                      v218 = (char *)(v285 + 8);
                    else
                      v218 = *(char **)(v285 + 8);
                    v219 = _os_log_pack_fill();
                    *(_DWORD *)v219 = 136315138;
                    *(_QWORD *)(v219 + 4) = v218;
                    v220 = operator new();
                    v221 = *(unsigned __int8 *)(v172 + 39);
                    if ((v221 & 0x80u) == 0)
                      v222 = v173;
                    else
                      v222 = *(_QWORD *)(v172 + 16);
                    if ((v221 & 0x80u) != 0)
                      v221 = *(_QWORD *)(v172 + 24);
                    *(_QWORD *)v220 = v217;
                    *(_OWORD *)(v220 + 8) = *(_OWORD *)&v283[8];
                    *(_QWORD *)&v283[8] = 0;
                    *(_QWORD *)&v283[16] = 0;
                    *(_OWORD *)(v220 + 24) = v284;
                    v284 = 0uLL;
                    *(_QWORD *)(v220 + 40) = v222;
                    *(_QWORD *)(v220 + 48) = v221;
                    *(_BYTE *)(v220 + 56) = 1;
                    v270 = 0;
                    *(_QWORD *)&v266 = v220;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v36 + 24) + 40))(*(_QWORD *)(v36 + 24), &v266);
                    v223 = v266;
                    *(_QWORD *)&v266 = 0;
                    if (v223)
                    {
                      v224 = *(std::__shared_weak_count **)(v223 + 32);
                      if (v224)
                      {
                        v225 = (unint64_t *)&v224->__shared_owners_;
                        do
                          v226 = __ldaxr(v225);
                        while (__stlxr(v226 - 1, v225));
                        if (!v226)
                        {
                          ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                          std::__shared_weak_count::__release_weak(v224);
                        }
                      }
                      v227 = *(std::__shared_weak_count **)(v223 + 16);
                      if (v227)
                      {
                        v228 = (unint64_t *)&v227->__shared_owners_;
                        do
                          v229 = __ldaxr(v228);
                        while (__stlxr(v229 - 1, v228));
                        if (!v229)
                        {
                          ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                          std::__shared_weak_count::__release_weak(v227);
                        }
                      }
                      MEMORY[0x227684CE8](v223, 0x10F0C40B62ED6C6);
                      v230 = v270;
                      v270 = 0;
                      if (v230)
                      {
                        v231 = (std::__shared_weak_count *)*((_QWORD *)v230 + 4);
                        if (v231)
                        {
                          v232 = (unint64_t *)&v231->__shared_owners_;
                          do
                            v233 = __ldaxr(v232);
                          while (__stlxr(v233 - 1, v232));
                          if (!v233)
                          {
                            ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                            std::__shared_weak_count::__release_weak(v231);
                          }
                        }
                        v234 = (std::__shared_weak_count *)*((_QWORD *)v230 + 2);
                        if (v234)
                        {
                          v235 = (unint64_t *)&v234->__shared_owners_;
                          do
                            v236 = __ldaxr(v235);
                          while (__stlxr(v236 - 1, v235));
                          if (!v236)
                          {
                            ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                            std::__shared_weak_count::__release_weak(v234);
                          }
                        }
                        MEMORY[0x227684CE8](v230, 0x10F0C40B62ED6C6);
                      }
                    }
                    v237 = (std::__shared_weak_count *)*((_QWORD *)&v284 + 1);
                    if (*((_QWORD *)&v284 + 1))
                    {
                      v238 = (unint64_t *)(*((_QWORD *)&v284 + 1) + 8);
                      do
                        v239 = __ldaxr(v238);
                      while (__stlxr(v239 - 1, v238));
                      if (!v239)
                      {
                        ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                        std::__shared_weak_count::__release_weak(v237);
                      }
                    }
                    v240 = *(std::__shared_weak_count **)&v283[16];
                    if (*(_QWORD *)&v283[16])
                    {
                      v241 = (unint64_t *)(*(_QWORD *)&v283[16] + 8);
                      do
                        v242 = __ldaxr(v241);
                      while (__stlxr(v242 - 1, v241));
                      if (!v242)
                      {
                        ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                        std::__shared_weak_count::__release_weak(v240);
                      }
                    }
LABEL_410:
                    if (v34)
                    {
                      v243 = __dst;
                      if (v264 < 0)
                        v243 = (void **)__dst[0];
                      sub_22322C138((uint64_t)&__p, "%s", (const char *)v243);
                      sub_223182C08((uint64_t)&__p);
                    }
                    sub_223182C08((uint64_t)&__p);
                    v244 = v261;
                    if (v261)
                    {
                      v245 = (unint64_t *)&v261->__shared_owners_;
                      do
                        v246 = __ldaxr(v245);
                      while (__stlxr(v246 - 1, v245));
                      if (!v246)
                      {
                        ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                        std::__shared_weak_count::__release_weak(v244);
                      }
                    }
                    if (SHIBYTE(v264) < 0)
                      operator delete(__dst[0]);
                    *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
                    v247 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&object[16] = v247;
                    v273 = MEMORY[0x24BEDB848] + 16;
                    if (v279 < 0)
                      operator delete(v278);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x227684BE0](&v282);
                    return;
                  }
                }
                memcpy(v196, v171, v195);
                goto LABEL_348;
              }
            }
            memmove(v187, v175, v174);
            goto LABEL_329;
          }
        }
        memmove(v179, v177, v178);
        goto LABEL_321;
      }
    }
    memmove(v43, v168, v42);
    goto LABEL_300;
  }
  *a3 = v8;
  sub_223CA9D94(__dst);
  if (**((int **)__dst[0] + 7) <= 4)
  {
    v10 = *((unsigned __int8 *)__dst[0] + 72);
    v11 = sub_22322F254((uint64_t)__dst[0], "OSLogSurrogateAppender", 1, 0);
    v12 = v11;
    if (v10 || v11 != 0)
    {
      *(_QWORD *)v283 = __dst;
      *(std::chrono::steady_clock::time_point *)&v283[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v283[16] = std::chrono::system_clock::now();
      LODWORD(v284) = 4;
      *((_QWORD *)&v284 + 1) = "unknown file";
      LODWORD(v285) = 91;
      *((_QWORD *)&v286 + 1) = 0;
      v287 = 0;
      *(_QWORD *)&v286 = "unknown function";
      v14 = (char *)*a4;
      sub_223C2A5F0(a3);
      v252 = a4;
      __s = v14;
      if (v271 >= 0)
        v15 = (const char *)&v270;
      else
        v15 = (const char *)v270;
      v290[0] = v15;
      if (*(char *)(v6 + 23) >= 0)
        v16 = (const char *)v6;
      else
        v16 = *(const char **)v6;
      v265 = (int **)v16;
      v17 = **(_QWORD **)v283;
      v18 = (const char *)(**(_QWORD **)v283 + 16);
      v248 = v18;
      if (*(char *)(**(_QWORD **)v283 + 39) < 0)
      {
        v18 = *(const char **)(v17 + 16);
        v19 = *(_QWORD *)(v17 + 24);
        v249 = **(_QWORD **)v283;
        v250 = v10;
        v44 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v44 & 1) != 0)
          goto LABEL_62;
      }
      else
      {
        v19 = *(unsigned __int8 *)(**(_QWORD **)v283 + 39);
        v249 = **(_QWORD **)v283;
        v250 = v10;
        v20 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v20 & 1) != 0)
          goto LABEL_62;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v273 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_62:
      if (byte_255788F57 >= 0)
        v45 = (const char *)&xmmword_255788F40;
      else
        v45 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v46 = byte_255788F57;
      else
        v46 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v45, v18);
      v47 = &object[8];
      if (v46 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v46 >= 0x17)
      {
        v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v46 | 7) != 0x17)
          v48 = v46 | 7;
        v49 = v48 + 1;
        v47 = operator new(v48 + 1);
        *(_QWORD *)&object[16] = v46;
        v273 = v49 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v47;
      }
      else
      {
        HIBYTE(v273) = v46;
        if (!v46)
        {
LABEL_76:
          v47[v46] = 0;
          LOBYTE(v274[0]) = 1;
          v50 = &v274[1];
          if (v19 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v19 >= 0x17)
          {
            v51 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v19 | 7) != 0x17)
              v51 = v19 | 7;
            v52 = v51 + 1;
            v50 = (void **)operator new(v51 + 1);
            v275 = v19;
            *(_QWORD *)&v276 = v52 | 0x8000000000000000;
            v274[1] = v50;
          }
          else
          {
            BYTE7(v276) = v19;
            if (!v19)
            {
LABEL_84:
              *((_BYTE *)v50 + v19) = 0;
              BYTE8(v276) = 1;
              v53 = *(NSObject **)object;
              if (SBYTE7(v276) < 0)
                operator delete(v274[1]);
              if (LOBYTE(v274[0]) && SHIBYTE(v273) < 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v12 && *(_QWORD *)(v12 + 24))
              {
                v54 = _os_log_pack_size();
                v55 = (std::__shared_weak_count_vtbl *)operator new(v54, (std::align_val_t)8uLL);
                v56 = (std::__shared_weak_count *)operator new();
                v56->__shared_owners_ = 0;
                v57 = (unint64_t *)&v56->__shared_owners_;
                v56->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v56->__shared_weak_owners_ = 0;
                v56[1].__vftable = v55;
                *(_QWORD *)&v266 = v55;
                *((_QWORD *)&v266 + 1) = v55;
                v268 = 0;
                v269 = 0;
                v267 = v56;
                sub_223CC18F4((uint64_t)object, __s, v290, (const char **)&v265);
                v58 = (char *)operator new(0x68uLL);
                v59 = (std::__shared_weak_count *)v58;
                *((_QWORD *)v58 + 3) = off_24EC206F8;
                *(_QWORD *)v58 = &off_24EC206A8;
                *((_QWORD *)v58 + 6) = v273;
                v60 = v277;
                *((_QWORD *)v58 + 9) = v275;
                *((_QWORD *)v58 + 1) = 0;
                v61 = (unint64_t *)(v58 + 8);
                *((_QWORD *)v58 + 2) = 0;
                *((_OWORD *)v58 + 2) = *(_OWORD *)&object[8];
                *(_OWORD *)(v58 + 56) = *(_OWORD *)v274;
                *((_QWORD *)v58 + 12) = v60;
                *((_OWORD *)v58 + 5) = v276;
                v268 = v58 + 24;
                v269 = (std::__shared_weak_count *)v58;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)v55;
                __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v56;
                do
                  v62 = __ldxr(v57);
                while (__stxr(v62 + 1, v57));
                *(_QWORD *)&v257 = v58 + 24;
                *((_QWORD *)&v257 + 1) = v58;
                do
                  v63 = __ldxr(v61);
                while (__stxr(v63 + 1, v61));
                v258 = v58 + 24;
                do
                  v64 = __ldaxr(v61);
                while (__stlxr(v64 - 1, v61));
                if (!v64)
                {
                  (*(void (**)(char *))(*(_QWORD *)v58 + 16))(v58);
                  std::__shared_weak_count::__release_weak(v59);
                }
                v65 = v267;
                if (v267)
                {
                  v66 = (unint64_t *)&v267->__shared_owners_;
                  do
                    v67 = __ldaxr(v66);
                  while (__stlxr(v67 - 1, v66));
                  if (!v67)
                  {
                    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                    std::__shared_weak_count::__release_weak(v65);
                  }
                }
                v68 = __p.__r_.__value_.__r.__words[0];
                if (v258[31] >= 0)
                  v69 = v258 + 8;
                else
                  v69 = (char *)*((_QWORD *)v258 + 1);
                if (v258[55] >= 0)
                  v70 = v258 + 32;
                else
                  v70 = (char *)*((_QWORD *)v258 + 4);
                if (v258[79] >= 0)
                  v71 = v258 + 56;
                else
                  v71 = (char *)*((_QWORD *)v258 + 7);
                v72 = _os_log_pack_fill();
                *(_DWORD *)v72 = 136315650;
                *(_QWORD *)(v72 + 4) = v69;
                *(_WORD *)(v72 + 12) = 2080;
                *(_QWORD *)(v72 + 14) = v70;
                *(_WORD *)(v72 + 22) = 2080;
                *(_QWORD *)(v72 + 24) = v71;
                v73 = operator new();
                v74 = *(unsigned __int8 *)(v249 + 39);
                v75 = v248;
                if ((v74 & 0x80u) != 0)
                {
                  v75 = *(const char **)(v249 + 16);
                  v74 = *(_QWORD *)(v249 + 24);
                }
                *(_QWORD *)v73 = v68;
                *(_OWORD *)(v73 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
                *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v73 + 24) = v257;
                v257 = 0uLL;
                *(_QWORD *)(v73 + 40) = v75;
                *(_QWORD *)(v73 + 48) = v74;
                *(_BYTE *)(v73 + 56) = 16;
                *(_QWORD *)&v266 = 0;
                *(_QWORD *)object = v73;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v12 + 24) + 40))(*(_QWORD *)(v12 + 24), object);
                v76 = v252;
                v77 = *(_QWORD *)object;
                *(_QWORD *)object = 0;
                v78 = v250;
                if (v77)
                {
                  v79 = *(std::__shared_weak_count **)(v77 + 32);
                  if (v79)
                  {
                    v80 = (unint64_t *)&v79->__shared_owners_;
                    do
                      v81 = __ldaxr(v80);
                    while (__stlxr(v81 - 1, v80));
                    if (!v81)
                    {
                      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                      std::__shared_weak_count::__release_weak(v79);
                    }
                  }
                  v82 = *(std::__shared_weak_count **)(v77 + 16);
                  if (v82)
                  {
                    v83 = (unint64_t *)&v82->__shared_owners_;
                    do
                      v84 = __ldaxr(v83);
                    while (__stlxr(v84 - 1, v83));
                    if (!v84)
                    {
                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                      std::__shared_weak_count::__release_weak(v82);
                    }
                  }
                  MEMORY[0x227684CE8](v77, 0x10F0C40B62ED6C6);
                  v85 = v266;
                  *(_QWORD *)&v266 = 0;
                  if (v85)
                  {
                    v86 = *(std::__shared_weak_count **)(v85 + 32);
                    if (v86)
                    {
                      v87 = (unint64_t *)&v86->__shared_owners_;
                      do
                        v88 = __ldaxr(v87);
                      while (__stlxr(v88 - 1, v87));
                      if (!v88)
                      {
                        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                        std::__shared_weak_count::__release_weak(v86);
                      }
                    }
                    v89 = *(std::__shared_weak_count **)(v85 + 16);
                    if (v89)
                    {
                      v90 = (unint64_t *)&v89->__shared_owners_;
                      do
                        v91 = __ldaxr(v90);
                      while (__stlxr(v91 - 1, v90));
                      if (!v91)
                      {
                        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                        std::__shared_weak_count::__release_weak(v89);
                      }
                    }
                    MEMORY[0x227684CE8](v85, 0x10F0C40B62ED6C6);
                  }
                }
                if (*((_QWORD *)&v257 + 1))
                {
                  v92 = (unint64_t *)(*((_QWORD *)&v257 + 1) + 8);
                  do
                    v93 = __ldaxr(v92);
                  while (__stlxr(v93 - 1, v92));
                  if (!v93)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v257 + 1) + 16))(*((_QWORD *)&v257 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v257 + 1));
                  }
                }
                if (__p.__r_.__value_.__r.__words[2])
                {
                  v94 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                  do
                    v95 = __ldaxr(v94);
                  while (__stlxr(v95 - 1, v94));
                  if (!v95)
                  {
                    (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__r.__words[2] + 16))(__p.__r_.__value_.__r.__words[2]);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2]);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v53, OS_LOG_TYPE_ERROR);
                *(_DWORD *)object = 136315650;
                *(_QWORD *)&object[4] = __s;
                *(_WORD *)&object[12] = 2080;
                *(const char **)&object[14] = v290[0];
                *(_WORD *)&object[22] = 2080;
                v273 = (unint64_t)v265;
                v96 = (void *)_os_log_send_and_compose_impl();
                v76 = v252;
                v78 = v250;
                if (v96)
                  free(v96);
              }
              if (SHIBYTE(v271) < 0)
              {
                operator delete(v270);
                if (!v78)
                {
LABEL_165:
                  sub_223182C08((uint64_t)v283);
                  v100 = (std::__shared_weak_count *)v287;
                  if (!v287)
                    return;
                  v101 = (unint64_t *)(v287 + 8);
                  do
                    v102 = __ldaxr(v101);
                  while (__stlxr(v102 - 1, v101));
                  goto LABEL_289;
                }
              }
              else if (!v78)
              {
                goto LABEL_165;
              }
              v97 = *v76;
              sub_223C2A5F0(a3);
              if (object[23] >= 0)
                v98 = object;
              else
                v98 = *(const char **)object;
              if (*(char *)(v6 + 23) >= 0)
                v99 = (const char *)v6;
              else
                v99 = *(const char **)v6;
              sub_22322C138((uint64_t)v283, "Overriding variable \"%s\" with value %s from key \"%s\"", v97, v98, v99);
              if ((object[23] & 0x80000000) != 0)
                operator delete(*(void **)object);
              sub_223182C08((uint64_t)v283);
              goto LABEL_165;
            }
          }
          memmove(v50, v18, v19);
          goto LABEL_84;
        }
      }
      memmove(v47, v45, v46);
      goto LABEL_76;
    }
  }
}

void sub_223CB21F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,void *a49,int a50,__int16 a51,char a52,char a53,char a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (a54 && a53 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  if (a35 < 0)
  {
    operator delete(a30);
    sub_223182DAC(v58 - 208);
    sub_223224234((uint64_t)&a42);
    _Unwind_Resume(a1);
  }
  sub_223182DAC(v58 - 208);
  sub_223224234((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_223CB2574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223224234((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223CB258C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223182DAC(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_223CB25A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  if (a44 < 0)
  {
    operator delete(__p);
    sub_223182DAC(v44 - 208);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223CB265CLL);
}

void sub_223CB25C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223182DAC(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_223CB25E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223182DAC(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_223CB25F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223224234((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223CB2608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_223167354((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_223CB261C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *object,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  uint64_t v46;

  if (a46 && a45 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  if (SHIBYTE(a38) < 0)
    operator delete(a36);
  sub_223182DAC(v46 - 208);
  _Unwind_Resume(a1);
}

void sub_223CB266C(void *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x223CB2684);
}

void sub_223CB2680(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_223CB268C(uint64_t a1, uint64_t a2, uint64_t a3, const char **a4)
{
  uint64_t v6;
  const void *v8;
  CFDictionaryRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  const __CFNumber *v14;
  CFTypeID TypeID;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  char *v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  size_t v29;
  unsigned __int8 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  char *v38;
  void **v39;
  const char *v40;
  uint64_t v41;
  size_t v42;
  const char *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  std::string *v49;
  std::string::size_type size;
  size_t v51;
  void *v52;
  unsigned __int8 v53;
  const char *v54;
  size_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  const char **v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  size_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  char *v68;
  std::__shared_weak_count *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::string::size_type v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  int v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void *v107;
  const char *v108;
  std::string *v109;
  const char *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  const void **v115;
  unsigned __int8 v116;
  const char *v117;
  size_t v118;
  _BYTE *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  void **v123;
  uint64_t v124;
  uint64_t v125;
  NSObject *v126;
  size_t v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  char *v131;
  std::__shared_weak_count *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::string::size_type v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  void *v169;
  int v170;
  std::string::size_type v171;
  std::string *p_value;
  const char *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t *v177;
  const void *v178;
  uint64_t v179;
  uint64_t v180;
  void **v181;
  uint64_t v182;
  uint64_t v183;
  size_t v184;
  const char *v185;
  unsigned __int8 v186;
  const char *v187;
  size_t v188;
  _BYTE *v189;
  uint64_t v190;
  unint64_t v191;
  void **v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  NSObject *v200;
  size_t v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  size_t v204;
  size_t v205;
  void *v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  char v211;
  char *v212;
  const char *v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  void *v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  void **v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  uint64_t v257;
  const char *v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  char *__s;
  char *__sa;
  const char **v264;
  int v265;
  const char *v266;
  std::string value;
  __int128 v268;
  char *v269;
  const char *v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  const char *v273;
  void *__dst[2];
  int64_t v275;
  int **v276;
  __int128 v277;
  std::__shared_weak_count *v278;
  char *v279;
  std::__shared_weak_count *v280;
  void *v281;
  __int128 v282;
  _BYTE key[24];
  unint64_t v284;
  void *__p[2];
  size_t v286;
  __int128 v287;
  unint64_t v288;
  void *v289;
  char v290;
  unint64_t v291;
  int v292;
  uint64_t v293;
  _BYTE valuePtr[24];
  __int128 v295;
  uint64_t v296;
  __int128 v297;
  const char *v298;
  uint64_t v299;
  uint64_t v300;
  const char *v301[5];

  v6 = a2;
  v301[2] = *(const char **)MEMORY[0x24BDAC8D0];
  sub_224527BAC(a2, (CFStringRef *)key);
  v8 = *(const void **)key;
  v9 = *(CFDictionaryRef *)a1;
  v10 = *(std::__shared_weak_count **)(a1 + 8);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (v9)
        goto LABEL_7;
LABEL_16:
      v16 = 0;
      v17 = *(std::__shared_weak_count **)&key[8];
      if (!*(_QWORD *)&key[8])
        goto LABEL_20;
      goto LABEL_17;
    }
  }
  if (!v9)
    goto LABEL_16;
LABEL_7:
  value.__r_.__value_.__r.__words[0] = 0;
  if (v8
    && CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, v8, (const void **)&value.__r_.__value_.__l.__data_)
    && (v14 = (const __CFNumber *)value.__r_.__value_.__r.__words[0]) != 0
    && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v14) == TypeID))
  {
    *(_QWORD *)valuePtr = 0;
    CFNumberGetValue(v14, kCFNumberNSIntegerType, valuePtr);
    LOBYTE(v9) = valuePtr[0];
    v16 = 1;
    v17 = *(std::__shared_weak_count **)&key[8];
    if (!*(_QWORD *)&key[8])
      goto LABEL_20;
  }
  else
  {
    v16 = 0;
    LOBYTE(v9) = 0;
    v17 = *(std::__shared_weak_count **)&key[8];
    if (!*(_QWORD *)&key[8])
      goto LABEL_20;
  }
LABEL_17:
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (v16)
      goto LABEL_21;
LABEL_38:
    if (sub_22452B568(a1, v6))
    {
      sub_224527BAC(v6, (CFStringRef *)key);
      sub_223CC1B5C((uint64_t)&v281, a1, *(void **)key);
      v31 = *(std::__shared_weak_count **)&key[8];
      if (*(_QWORD *)&key[8])
      {
        v32 = (unint64_t *)(*(_QWORD *)&key[8] + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      sub_223CA9D94(v301);
      if (**((int **)v301[0] + 7) > 5
        || ((v34 = *((unsigned __int8 *)v301[0] + 72),
             v35 = sub_22322F254((uint64_t)v301[0], "OSLogSurrogateAppender", 1, 0),
             v36 = v35,
             !v34)
          ? (v37 = v35 == 0)
          : (v37 = 0),
            v37))
      {
LABEL_307:
        if (BYTE8(v282))
        {
          v111 = (std::__shared_weak_count *)v282;
          if ((_QWORD)v282)
          {
            v177 = (unint64_t *)(v282 + 8);
            do
              v113 = __ldaxr(v177);
            while (__stlxr(v113 - 1, v177));
LABEL_311:
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
            return;
          }
        }
        return;
      }
      *(_QWORD *)valuePtr = v301;
      *(std::chrono::steady_clock::time_point *)&valuePtr[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&valuePtr[16] = std::chrono::system_clock::now();
      LODWORD(v295) = 5;
      *((_QWORD *)&v295 + 1) = "unknown file";
      LODWORD(v296) = 96;
      *((_QWORD *)&v297 + 1) = 0;
      v298 = 0;
      *(_QWORD *)&v297 = "unknown function";
      if (*(char *)(v6 + 23) >= 0)
        v38 = (char *)v6;
      else
        v38 = *(char **)v6;
      LODWORD(v284) = 0;
      sub_223CC1C9C((uint64_t)key, (CFTypeRef *)&v281);
      if ((_DWORD)v284 == -1)
        sub_22316DD70();
      value.__r_.__value_.__r.__words[0] = (std::string::size_type)&v277;
      ((void (*)(void **__return_ptr, std::string *, _BYTE *))off_24EC63160[v284])(__dst, &value, key);
      if ((_DWORD)v284 != -1)
        ((void (*)(std::string *, _BYTE *))off_24EC63148[v284])(&value, key);
      v39 = __dst;
      if (v275 < 0)
        v39 = (void **)__dst[0];
      v276 = (int **)v39;
      sub_223CC341C();
      if (byte_2540CDC47 >= 0)
        v40 = (const char *)&xmmword_2540CDC30;
      else
        v40 = (const char *)xmmword_2540CDC30;
      v273 = v40;
      v41 = **(_QWORD **)valuePtr;
      if (*(char *)(**(_QWORD **)valuePtr + 39) < 0)
      {
        v43 = *(const char **)(v41 + 16);
        v42 = *(_QWORD *)(v41 + 24);
      }
      else
      {
        v42 = *(unsigned __int8 *)(**(_QWORD **)valuePtr + 39);
        v43 = (const char *)(v41 + 16);
      }
      v261 = v41 + 16;
      __sa = **(char ***)valuePtr;
      v116 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v116 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)key);
        sub_223199C58("com.apple.cv3d", (unint64_t)key, &xmmword_255788F40);
        if ((_BYTE)v284 && (key[23] & 0x80000000) != 0)
          operator delete(*(void **)key);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v117 = (const char *)&xmmword_255788F40;
      else
        v117 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v118 = byte_255788F57;
      else
        v118 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)key = os_log_create(v117, v43);
      v119 = &key[8];
      if (v118 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v118 >= 0x17)
      {
        v120 = v34;
        v121 = (v118 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v118 | 7) != 0x17)
          v121 = v118 | 7;
        v122 = v121 + 1;
        v119 = operator new(v121 + 1);
        *(_QWORD *)&key[16] = v118;
        v284 = v122 | 0x8000000000000000;
        *(_QWORD *)&key[8] = v119;
        v34 = v120;
      }
      else
      {
        HIBYTE(v284) = v118;
        if (!v118)
        {
LABEL_210:
          v119[v118] = 0;
          LOBYTE(__p[0]) = 1;
          v123 = &__p[1];
          if (v42 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v42 >= 0x17)
          {
            v124 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v42 | 7) != 0x17)
              v124 = v42 | 7;
            v125 = v124 + 1;
            v123 = (void **)operator new(v124 + 1);
            v286 = v42;
            *(_QWORD *)&v287 = v125 | 0x8000000000000000;
            __p[1] = v123;
          }
          else
          {
            BYTE7(v287) = v42;
            if (!v42)
              goto LABEL_218;
          }
          memmove(v123, v43, v42);
LABEL_218:
          *((_BYTE *)v123 + v42) = 0;
          BYTE8(v287) = 1;
          v126 = *(NSObject **)key;
          if (SBYTE7(v287) < 0)
            operator delete(__p[1]);
          if (LOBYTE(__p[0]) && SHIBYTE(v284) < 0)
            operator delete(*(void **)&key[8]);
          if (*(_QWORD *)key)
            os_release(*(void **)key);
          if (v36 && *(_QWORD *)(v36 + 24))
          {
            v127 = _os_log_pack_size();
            v128 = (std::__shared_weak_count_vtbl *)operator new(v127, (std::align_val_t)8uLL);
            v129 = (std::__shared_weak_count *)operator new();
            v129->__shared_owners_ = 0;
            v130 = (unint64_t *)&v129->__shared_owners_;
            v129->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v129->__shared_weak_owners_ = 0;
            v129[1].__vftable = v128;
            *(_QWORD *)&v277 = v128;
            *((_QWORD *)&v277 + 1) = v128;
            v279 = 0;
            v280 = 0;
            v278 = v129;
            sub_223CC18F4((uint64_t)key, v38, (const char **)&v276, &v273);
            v131 = (char *)operator new(0x68uLL);
            v132 = (std::__shared_weak_count *)v131;
            *((_QWORD *)v131 + 3) = off_24EC206F8;
            *(_QWORD *)v131 = &off_24EC206A8;
            *((_QWORD *)v131 + 6) = v284;
            v133 = v288;
            *((_QWORD *)v131 + 9) = v286;
            *((_QWORD *)v131 + 1) = 0;
            v134 = (unint64_t *)(v131 + 8);
            *((_QWORD *)v131 + 2) = 0;
            *((_OWORD *)v131 + 2) = *(_OWORD *)&key[8];
            *(_OWORD *)(v131 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v131 + 12) = v133;
            *((_OWORD *)v131 + 5) = v287;
            v279 = v131 + 24;
            v280 = (std::__shared_weak_count *)v131;
            value.__r_.__value_.__r.__words[0] = (std::string::size_type)v128;
            value.__r_.__value_.__l.__size_ = (std::string::size_type)v128;
            value.__r_.__value_.__r.__words[2] = (std::string::size_type)v129;
            do
              v135 = __ldxr(v130);
            while (__stxr(v135 + 1, v130));
            *(_QWORD *)&v268 = v131 + 24;
            *((_QWORD *)&v268 + 1) = v131;
            do
              v136 = __ldxr(v134);
            while (__stxr(v136 + 1, v134));
            v269 = v131 + 24;
            do
              v137 = __ldaxr(v134);
            while (__stlxr(v137 - 1, v134));
            if (!v137)
            {
              (*(void (**)(char *))(*(_QWORD *)v131 + 16))(v131);
              std::__shared_weak_count::__release_weak(v132);
            }
            v265 = v34;
            v138 = v278;
            if (v278)
            {
              v139 = (unint64_t *)&v278->__shared_owners_;
              do
                v140 = __ldaxr(v139);
              while (__stlxr(v140 - 1, v139));
              if (!v140)
              {
                ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                std::__shared_weak_count::__release_weak(v138);
              }
            }
            v141 = value.__r_.__value_.__r.__words[0];
            if (v269[31] >= 0)
              v142 = v269 + 8;
            else
              v142 = (char *)*((_QWORD *)v269 + 1);
            if (v269[55] >= 0)
              v143 = v269 + 32;
            else
              v143 = (char *)*((_QWORD *)v269 + 4);
            if (v269[79] >= 0)
              v144 = v269 + 56;
            else
              v144 = (char *)*((_QWORD *)v269 + 7);
            v145 = _os_log_pack_fill();
            *(_DWORD *)v145 = 136315650;
            *(_QWORD *)(v145 + 4) = v142;
            *(_WORD *)(v145 + 12) = 2080;
            *(_QWORD *)(v145 + 14) = v143;
            *(_WORD *)(v145 + 22) = 2080;
            *(_QWORD *)(v145 + 24) = v144;
            v146 = operator new();
            v147 = __sa[39];
            v148 = v261;
            if ((v147 & 0x80u) != 0)
            {
              v148 = *((_QWORD *)__sa + 2);
              v147 = *((_QWORD *)__sa + 3);
            }
            *(_QWORD *)v146 = v141;
            *(_OWORD *)(v146 + 8) = *(_OWORD *)&value.__r_.__value_.__r.__words[1];
            *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
            *(_OWORD *)(v146 + 24) = v268;
            v268 = 0uLL;
            *(_QWORD *)(v146 + 40) = v148;
            *(_QWORD *)(v146 + 48) = v147;
            *(_BYTE *)(v146 + 56) = 16;
            *(_QWORD *)&v277 = 0;
            *(_QWORD *)key = v146;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v36 + 24) + 40))(*(_QWORD *)(v36 + 24), key);
            v34 = v265;
            v149 = *(_QWORD *)key;
            *(_QWORD *)key = 0;
            if (v149)
            {
              v150 = *(std::__shared_weak_count **)(v149 + 32);
              if (v150)
              {
                v151 = (unint64_t *)&v150->__shared_owners_;
                do
                  v152 = __ldaxr(v151);
                while (__stlxr(v152 - 1, v151));
                if (!v152)
                {
                  ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                  std::__shared_weak_count::__release_weak(v150);
                }
              }
              v153 = *(std::__shared_weak_count **)(v149 + 16);
              if (v153)
              {
                v154 = (unint64_t *)&v153->__shared_owners_;
                do
                  v155 = __ldaxr(v154);
                while (__stlxr(v155 - 1, v154));
                if (!v155)
                {
                  ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                  std::__shared_weak_count::__release_weak(v153);
                }
              }
              MEMORY[0x227684CE8](v149, 0x10F0C40B62ED6C6);
              v156 = v277;
              *(_QWORD *)&v277 = 0;
              if (v156)
              {
                v157 = *(std::__shared_weak_count **)(v156 + 32);
                if (v157)
                {
                  v158 = (unint64_t *)&v157->__shared_owners_;
                  do
                    v159 = __ldaxr(v158);
                  while (__stlxr(v159 - 1, v158));
                  if (!v159)
                  {
                    ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                    std::__shared_weak_count::__release_weak(v157);
                  }
                }
                v160 = *(std::__shared_weak_count **)(v156 + 16);
                if (v160)
                {
                  v161 = (unint64_t *)&v160->__shared_owners_;
                  do
                    v162 = __ldaxr(v161);
                  while (__stlxr(v162 - 1, v161));
                  if (!v162)
                  {
                    ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                    std::__shared_weak_count::__release_weak(v160);
                  }
                }
                MEMORY[0x227684CE8](v156, 0x10F0C40B62ED6C6);
              }
            }
            v163 = (std::__shared_weak_count *)*((_QWORD *)&v268 + 1);
            if (*((_QWORD *)&v268 + 1))
            {
              v164 = (unint64_t *)(*((_QWORD *)&v268 + 1) + 8);
              do
                v165 = __ldaxr(v164);
              while (__stlxr(v165 - 1, v164));
              if (!v165)
              {
                ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                std::__shared_weak_count::__release_weak(v163);
              }
            }
            v166 = (std::__shared_weak_count *)value.__r_.__value_.__r.__words[2];
            if (value.__r_.__value_.__r.__words[2])
            {
              v167 = (unint64_t *)(value.__r_.__value_.__r.__words[2] + 8);
              do
                v168 = __ldaxr(v167);
              while (__stlxr(v168 - 1, v167));
              if (!v168)
              {
                ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                std::__shared_weak_count::__release_weak(v166);
              }
            }
          }
          else
          {
            os_log_type_enabled(v126, OS_LOG_TYPE_ERROR);
            *(_DWORD *)key = 136315650;
            *(_QWORD *)&key[4] = v38;
            *(_WORD *)&key[12] = 2080;
            *(_QWORD *)&key[14] = v276;
            *(_WORD *)&key[22] = 2080;
            v284 = (unint64_t)v273;
            v169 = (void *)_os_log_send_and_compose_impl();
            if (v169)
              free(v169);
          }
          if (SHIBYTE(v275) < 0)
            operator delete(__dst[0]);
          if (v34)
          {
            if (*(char *)(v6 + 23) < 0)
              v6 = *(_QWORD *)v6;
            LODWORD(v284) = 0;
            sub_223CC1C9C((uint64_t)key, (CFTypeRef *)&v281);
            if ((_DWORD)v284 == -1)
              sub_22316DD70();
            *(_QWORD *)&v277 = __dst;
            ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24EC63160[v284])(&value, &v277, key);
            if ((_DWORD)v284 != -1)
              ((void (*)(__int128 *, _BYTE *))off_24EC63148[v284])(&v277, key);
            v170 = SHIBYTE(value.__r_.__value_.__r.__words[2]);
            v171 = value.__r_.__value_.__r.__words[0];
            sub_223CC341C();
            p_value = &value;
            if (v170 < 0)
              p_value = (std::string *)v171;
            if (byte_2540CDC47 >= 0)
              v173 = (const char *)&xmmword_2540CDC30;
            else
              v173 = (const char *)xmmword_2540CDC30;
            sub_22322C138((uint64_t)valuePtr, "Error while getting value for key \"%s\" and value %s expecting type %s", (const char *)v6, (const char *)p_value, v173);
            if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
              operator delete(value.__r_.__value_.__l.__data_);
            sub_223182C08((uint64_t)valuePtr);
          }
          sub_223182C08((uint64_t)valuePtr);
          v174 = (std::__shared_weak_count *)v298;
          if (v298)
          {
            v175 = (unint64_t *)(v298 + 8);
            do
              v176 = __ldaxr(v175);
            while (__stlxr(v176 - 1, v175));
            if (!v176)
            {
              ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
              std::__shared_weak_count::__release_weak(v174);
            }
          }
          goto LABEL_307;
        }
      }
      memmove(v119, v117, v118);
      goto LABEL_210;
    }
    sub_223CA9D94(&v276);
    if (*v276[7] > 3)
      return;
    v44 = *((unsigned __int8 *)v276 + 72);
    v45 = sub_22322F254((uint64_t)v276, "OSLogSurrogateAppender", 1, 0);
    v46 = v45;
    if (!v44 && !v45)
      return;
    sub_223195210((uint64_t)key);
    *(_QWORD *)valuePtr = "Key not found in dictionary \"";
    *(_QWORD *)&valuePtr[8] = 29;
    v47 = *(unsigned __int8 *)(v6 + 23);
    if ((v47 & 0x80u) == 0)
      v48 = (char *)v6;
    else
      v48 = *(char **)v6;
    if ((v47 & 0x80u) != 0)
      v47 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)&valuePtr[16] = v48;
    *(_QWORD *)&v295 = v47;
    *((_QWORD *)&v295 + 1) = "\" for variable \"";
    v296 = 16;
    v297 = *(_OWORD *)a4;
    v298 = "\"";
    v299 = 1;
    sub_2231A9820((uint64_t)valuePtr, (uint64_t)&v300, 0, 0, &value);
    if ((value.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = &value;
    else
      v49 = (std::string *)value.__r_.__value_.__r.__words[0];
    if ((value.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(value.__r_.__value_.__r.__words[2]);
    else
      size = value.__r_.__value_.__l.__size_;
    sub_2231813E8(&key[16], (uint64_t)v49, size);
    if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
      operator delete(value.__r_.__value_.__l.__data_);
    if ((v292 & 0x10) != 0)
    {
      v114 = v291;
      if (v291 < v288)
      {
        v291 = v288;
        v114 = v288;
      }
      v115 = (const void **)&v287 + 1;
    }
    else
    {
      if ((v292 & 8) == 0)
      {
        v51 = 0;
        HIBYTE(v275) = 0;
        v52 = __dst;
        goto LABEL_322;
      }
      v115 = (const void **)&__p[1];
      v114 = v287;
    }
    v178 = *v115;
    v51 = v114 - (_QWORD)*v115;
    if (v51 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v51 >= 0x17)
    {
      v179 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v51 | 7) != 0x17)
        v179 = v51 | 7;
      v180 = v179 + 1;
      v52 = operator new(v179 + 1);
      __dst[1] = (void *)v51;
      v275 = v180 | 0x8000000000000000;
      __dst[0] = v52;
    }
    else
    {
      HIBYTE(v275) = v114 - *(_BYTE *)v115;
      v52 = __dst;
      if (!v51)
      {
LABEL_322:
        *((_BYTE *)v52 + v51) = 0;
        value.__r_.__value_.__r.__words[0] = (std::string::size_type)&v276;
        value.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        value.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v268) = 3;
        *((_QWORD *)&v268 + 1) = "unknown file";
        LODWORD(v269) = 99;
        v271 = 0;
        v272 = 0;
        v270 = "unknown function";
        if (v275 >= 0)
          v181 = __dst;
        else
          v181 = (void **)__dst[0];
        v182 = *(_QWORD *)value.__r_.__value_.__l.__data_;
        v183 = *(_QWORD *)value.__r_.__value_.__l.__data_ + 16;
        if (*(char *)(*(_QWORD *)value.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v185 = *(const char **)(v182 + 16);
          v184 = *(_QWORD *)(v182 + 24);
        }
        else
        {
          v184 = *(unsigned __int8 *)(*(_QWORD *)value.__r_.__value_.__l.__data_ + 39);
          v185 = (const char *)(*(_QWORD *)value.__r_.__value_.__l.__data_ + 16);
        }
        v186 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v186 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)valuePtr);
          sub_223199C58("com.apple.cv3d", (unint64_t)valuePtr, &xmmword_255788F40);
          if ((_BYTE)v295 && (valuePtr[23] & 0x80000000) != 0)
            operator delete(*(void **)valuePtr);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v187 = (const char *)&xmmword_255788F40;
        else
          v187 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v188 = byte_255788F57;
        else
          v188 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)valuePtr = os_log_create(v187, v185);
        v189 = &valuePtr[8];
        if (v188 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v188 >= 0x17)
        {
          v266 = v185;
          v190 = v182;
          v191 = v46;
          v192 = v181;
          v193 = v44;
          v194 = v183;
          v195 = (v188 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v188 | 7) != 0x17)
            v195 = v188 | 7;
          v196 = v195 + 1;
          v189 = operator new(v195 + 1);
          *(_QWORD *)&valuePtr[16] = v188;
          *(_QWORD *)&v295 = v196 | 0x8000000000000000;
          *(_QWORD *)&valuePtr[8] = v189;
          v183 = v194;
          v44 = v193;
          v181 = v192;
          v46 = v191;
          v182 = v190;
          v185 = v266;
        }
        else
        {
          BYTE7(v295) = v188;
          if (!v188)
          {
LABEL_343:
            v189[v188] = 0;
            BYTE8(v295) = 1;
            v197 = &v296;
            if (v184 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v184 >= 0x17)
            {
              v198 = (v184 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v184 | 7) != 0x17)
                v198 = v184 | 7;
              v199 = v198 + 1;
              v197 = (uint64_t *)operator new(v198 + 1);
              *(_QWORD *)&v297 = v184;
              *((_QWORD *)&v297 + 1) = v199 | 0x8000000000000000;
              v296 = (uint64_t)v197;
            }
            else
            {
              HIBYTE(v297) = v184;
              if (!v184)
              {
LABEL_351:
                *((_BYTE *)v197 + v184) = 0;
                LOBYTE(v298) = 1;
                v200 = *(NSObject **)valuePtr;
                if (SHIBYTE(v297) < 0)
                  operator delete((void *)v296);
                if (BYTE8(v295) && SBYTE7(v295) < 0)
                  operator delete(*(void **)&valuePtr[8]);
                if (*(_QWORD *)valuePtr)
                  os_release(*(void **)valuePtr);
                if (!v46 || !*(_QWORD *)(v46 + 24))
                {
                  os_log_type_enabled(v200, OS_LOG_TYPE_INFO);
                  *(_DWORD *)valuePtr = 136315138;
                  *(_QWORD *)&valuePtr[4] = v181;
                  v207 = (void *)_os_log_send_and_compose_impl();
                  if (v207)
                    free(v207);
                  goto LABEL_432;
                }
                v201 = _os_log_pack_size();
                v202 = (std::__shared_weak_count_vtbl *)operator new(v201, (std::align_val_t)8uLL);
                v203 = (std::__shared_weak_count *)operator new();
                v203->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v203->__shared_owners_ = 0;
                v203->__shared_weak_owners_ = 0;
                v203[1].__vftable = v202;
                *(_QWORD *)&v277 = v202;
                *((_QWORD *)&v277 + 1) = v202;
                v279 = 0;
                v280 = 0;
                v278 = v203;
                v204 = strlen((const char *)v181);
                if (v204 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v205 = v204;
                if (v204 >= 0x17)
                {
                  v208 = (v204 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v204 | 7) != 0x17)
                    v208 = v204 | 7;
                  v209 = v208 + 1;
                  v206 = operator new(v208 + 1);
                  *(_QWORD *)&v282 = v205;
                  *((_QWORD *)&v282 + 1) = v209 | 0x8000000000000000;
                  v281 = v206;
                }
                else
                {
                  HIBYTE(v282) = v204;
                  v206 = &v281;
                  if (!v204)
                  {
LABEL_370:
                    *((_BYTE *)v206 + v205) = 0;
                    v210 = v281;
                    v301[0] = (const char *)v282;
                    *(const char **)((char *)v301 + 7) = *(const char **)((char *)&v282 + 7);
                    v211 = HIBYTE(v282);
                    v212 = (char *)operator new(0x38uLL);
                    *((_QWORD *)v212 + 1) = 0;
                    *((_QWORD *)v212 + 2) = 0;
                    *((_QWORD *)v212 + 3) = off_24EC1FA48;
                    *(_QWORD *)v212 = &off_24EC1F9F8;
                    v213 = v301[0];
                    *((_QWORD *)v212 + 4) = v210;
                    *((_QWORD *)v212 + 5) = v213;
                    *(const char **)(v212 + 47) = *(const char **)((char *)v301 + 7);
                    v212[55] = v211;
                    memset(v301, 0, 15);
                    v214 = v280;
                    v279 = v212 + 24;
                    v280 = (std::__shared_weak_count *)v212;
                    if (v214)
                    {
                      v215 = (unint64_t *)&v214->__shared_owners_;
                      do
                        v216 = __ldaxr(v215);
                      while (__stlxr(v216 - 1, v215));
                      if (!v216)
                      {
                        ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                        std::__shared_weak_count::__release_weak(v214);
                      }
                    }
                    *(_OWORD *)valuePtr = v277;
                    v217 = (uint64_t)v279;
                    *(_QWORD *)&valuePtr[16] = v278;
                    if (v278)
                    {
                      v218 = (unint64_t *)&v278->__shared_owners_;
                      do
                        v219 = __ldxr(v218);
                      while (__stxr(v219 + 1, v218));
                    }
                    v220 = v280;
                    *(_QWORD *)&v295 = v217;
                    *((_QWORD *)&v295 + 1) = v280;
                    if (v280)
                    {
                      v221 = (unint64_t *)&v280->__shared_owners_;
                      do
                        v222 = __ldxr(v221);
                      while (__stxr(v222 + 1, v221));
                      v296 = v217;
                      do
                        v223 = __ldaxr(v221);
                      while (__stlxr(v223 - 1, v221));
                      if (!v223)
                      {
                        ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                        std::__shared_weak_count::__release_weak(v220);
                      }
                    }
                    else
                    {
                      v296 = v217;
                    }
                    v224 = v278;
                    if (v278)
                    {
                      v225 = (unint64_t *)&v278->__shared_owners_;
                      do
                        v226 = __ldaxr(v225);
                      while (__stlxr(v226 - 1, v225));
                      if (!v226)
                      {
                        ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                        std::__shared_weak_count::__release_weak(v224);
                      }
                    }
                    v227 = *(_QWORD *)valuePtr;
                    if (*(char *)(v296 + 31) >= 0)
                      v228 = (char *)(v296 + 8);
                    else
                      v228 = *(char **)(v296 + 8);
                    v229 = _os_log_pack_fill();
                    *(_DWORD *)v229 = 136315138;
                    *(_QWORD *)(v229 + 4) = v228;
                    v230 = operator new();
                    v231 = *(unsigned __int8 *)(v182 + 39);
                    if ((v231 & 0x80u) == 0)
                      v232 = v183;
                    else
                      v232 = *(_QWORD *)(v182 + 16);
                    if ((v231 & 0x80u) != 0)
                      v231 = *(_QWORD *)(v182 + 24);
                    *(_QWORD *)v230 = v227;
                    *(_OWORD *)(v230 + 8) = *(_OWORD *)&valuePtr[8];
                    *(_QWORD *)&valuePtr[8] = 0;
                    *(_QWORD *)&valuePtr[16] = 0;
                    *(_OWORD *)(v230 + 24) = v295;
                    v295 = 0uLL;
                    *(_QWORD *)(v230 + 40) = v232;
                    *(_QWORD *)(v230 + 48) = v231;
                    *(_BYTE *)(v230 + 56) = 1;
                    v281 = 0;
                    *(_QWORD *)&v277 = v230;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v46 + 24) + 40))(*(_QWORD *)(v46 + 24), &v277);
                    v233 = v277;
                    *(_QWORD *)&v277 = 0;
                    if (v233)
                    {
                      v234 = *(std::__shared_weak_count **)(v233 + 32);
                      if (v234)
                      {
                        v235 = (unint64_t *)&v234->__shared_owners_;
                        do
                          v236 = __ldaxr(v235);
                        while (__stlxr(v236 - 1, v235));
                        if (!v236)
                        {
                          ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                          std::__shared_weak_count::__release_weak(v234);
                        }
                      }
                      v237 = *(std::__shared_weak_count **)(v233 + 16);
                      if (v237)
                      {
                        v238 = (unint64_t *)&v237->__shared_owners_;
                        do
                          v239 = __ldaxr(v238);
                        while (__stlxr(v239 - 1, v238));
                        if (!v239)
                        {
                          ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                          std::__shared_weak_count::__release_weak(v237);
                        }
                      }
                      MEMORY[0x227684CE8](v233, 0x10F0C40B62ED6C6);
                      v240 = v281;
                      v281 = 0;
                      if (v240)
                      {
                        v241 = (std::__shared_weak_count *)*((_QWORD *)v240 + 4);
                        if (v241)
                        {
                          v242 = (unint64_t *)&v241->__shared_owners_;
                          do
                            v243 = __ldaxr(v242);
                          while (__stlxr(v243 - 1, v242));
                          if (!v243)
                          {
                            ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                            std::__shared_weak_count::__release_weak(v241);
                          }
                        }
                        v244 = (std::__shared_weak_count *)*((_QWORD *)v240 + 2);
                        if (v244)
                        {
                          v245 = (unint64_t *)&v244->__shared_owners_;
                          do
                            v246 = __ldaxr(v245);
                          while (__stlxr(v246 - 1, v245));
                          if (!v246)
                          {
                            ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                            std::__shared_weak_count::__release_weak(v244);
                          }
                        }
                        MEMORY[0x227684CE8](v240, 0x10F0C40B62ED6C6);
                      }
                    }
                    v247 = (std::__shared_weak_count *)*((_QWORD *)&v295 + 1);
                    if (*((_QWORD *)&v295 + 1))
                    {
                      v248 = (unint64_t *)(*((_QWORD *)&v295 + 1) + 8);
                      do
                        v249 = __ldaxr(v248);
                      while (__stlxr(v249 - 1, v248));
                      if (!v249)
                      {
                        ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                        std::__shared_weak_count::__release_weak(v247);
                      }
                    }
                    v250 = *(std::__shared_weak_count **)&valuePtr[16];
                    if (*(_QWORD *)&valuePtr[16])
                    {
                      v251 = (unint64_t *)(*(_QWORD *)&valuePtr[16] + 8);
                      do
                        v252 = __ldaxr(v251);
                      while (__stlxr(v252 - 1, v251));
                      if (!v252)
                      {
                        ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                        std::__shared_weak_count::__release_weak(v250);
                      }
                    }
LABEL_432:
                    if (v44)
                    {
                      v253 = __dst;
                      if (v275 < 0)
                        v253 = (void **)__dst[0];
                      sub_22322C138((uint64_t)&value, "%s", (const char *)v253);
                      sub_223182C08((uint64_t)&value);
                    }
                    sub_223182C08((uint64_t)&value);
                    v254 = v272;
                    if (v272)
                    {
                      v255 = (unint64_t *)&v272->__shared_owners_;
                      do
                        v256 = __ldaxr(v255);
                      while (__stlxr(v256 - 1, v255));
                      if (!v256)
                      {
                        ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                        std::__shared_weak_count::__release_weak(v254);
                      }
                    }
                    if (SHIBYTE(v275) < 0)
                      operator delete(__dst[0]);
                    *(_QWORD *)key = *MEMORY[0x24BEDB7F0];
                    v257 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)&key[*(_QWORD *)(*(_QWORD *)key - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&key[16] = v257;
                    v284 = MEMORY[0x24BEDB848] + 16;
                    if (v290 < 0)
                      operator delete(v289);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x227684BE0](&v293);
                    return;
                  }
                }
                memcpy(v206, v181, v205);
                goto LABEL_370;
              }
            }
            memmove(v197, v185, v184);
            goto LABEL_351;
          }
        }
        memmove(v189, v187, v188);
        goto LABEL_343;
      }
    }
    memmove(v52, v178, v51);
    goto LABEL_322;
  }
LABEL_20:
  if (!v16)
    goto LABEL_38;
LABEL_21:
  *(_WORD *)a3 = v9 | 0x100;
  sub_223CA9D94(__dst);
  if (**((int **)__dst[0] + 7) <= 4)
  {
    v20 = *((unsigned __int8 *)__dst[0] + 72);
    v21 = sub_22322F254((uint64_t)__dst[0], "OSLogSurrogateAppender", 1, 0);
    v22 = v21;
    if (v20 || v21 != 0)
    {
      *(_QWORD *)valuePtr = __dst;
      *(std::chrono::steady_clock::time_point *)&valuePtr[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&valuePtr[16] = std::chrono::system_clock::now();
      LODWORD(v295) = 4;
      *((_QWORD *)&v295 + 1) = "unknown file";
      LODWORD(v296) = 91;
      *((_QWORD *)&v297 + 1) = 0;
      v298 = 0;
      *(_QWORD *)&v297 = "unknown function";
      v24 = (char *)*a4;
      LODWORD(v284) = 0;
      sub_223CC3310((uint64_t)key, *(_BYTE *)a3, *(_BYTE *)(a3 + 1));
      if ((_DWORD)v284 == -1)
        sub_22316DD70();
      value.__r_.__value_.__r.__words[0] = (std::string::size_type)&v277;
      ((void (*)(void **__return_ptr, std::string *, _BYTE *))off_24EC63160[v284])(&v281, &value, key);
      if ((_DWORD)v284 != -1)
        ((void (*)(std::string *, _BYTE *))off_24EC63148[v284])(&value, key);
      __s = v24;
      v25 = (const char *)&v281;
      if (v282 < 0)
        v25 = (const char *)v281;
      v301[0] = v25;
      if (*(char *)(v6 + 23) >= 0)
        v26 = (const char *)v6;
      else
        v26 = *(const char **)v6;
      v276 = (int **)v26;
      v27 = **(_QWORD **)valuePtr;
      v28 = (const char *)(**(_QWORD **)valuePtr + 16);
      v258 = v28;
      v259 = **(_QWORD **)valuePtr;
      if (*(char *)(**(_QWORD **)valuePtr + 39) < 0)
      {
        v28 = *(const char **)(v27 + 16);
        v29 = *(_QWORD *)(v27 + 24);
        v260 = v20;
        v264 = a4;
        v53 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v53 & 1) != 0)
          goto LABEL_82;
      }
      else
      {
        v29 = *(unsigned __int8 *)(**(_QWORD **)valuePtr + 39);
        v260 = v20;
        v264 = a4;
        v30 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v30 & 1) != 0)
          goto LABEL_82;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)key);
        sub_223199C58("com.apple.cv3d", (unint64_t)key, &xmmword_255788F40);
        if ((_BYTE)v284 && (key[23] & 0x80000000) != 0)
          operator delete(*(void **)key);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_82:
      if (byte_255788F57 >= 0)
        v54 = (const char *)&xmmword_255788F40;
      else
        v54 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v55 = byte_255788F57;
      else
        v55 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)key = os_log_create(v54, v28);
      v56 = &key[8];
      if (v55 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v55 >= 0x17)
      {
        v57 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v55 | 7) != 0x17)
          v57 = v55 | 7;
        v58 = v57 + 1;
        v56 = operator new(v57 + 1);
        *(_QWORD *)&key[16] = v55;
        v284 = v58 | 0x8000000000000000;
        *(_QWORD *)&key[8] = v56;
      }
      else
      {
        HIBYTE(v284) = v55;
        if (!v55)
        {
LABEL_96:
          v56[v55] = 0;
          LOBYTE(__p[0]) = 1;
          v59 = &__p[1];
          if (v29 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v60 = v264;
          if (v29 >= 0x17)
          {
            v61 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v29 | 7) != 0x17)
              v61 = v29 | 7;
            v62 = v61 + 1;
            v59 = (void **)operator new(v61 + 1);
            v286 = v29;
            *(_QWORD *)&v287 = v62 | 0x8000000000000000;
            __p[1] = v59;
          }
          else
          {
            BYTE7(v287) = v29;
            if (!v29)
            {
LABEL_104:
              *((_BYTE *)v59 + v29) = 0;
              BYTE8(v287) = 1;
              v63 = *(NSObject **)key;
              if (SBYTE7(v287) < 0)
                operator delete(__p[1]);
              if (LOBYTE(__p[0]) && SHIBYTE(v284) < 0)
                operator delete(*(void **)&key[8]);
              if (*(_QWORD *)key)
                os_release(*(void **)key);
              if (v22 && *(_QWORD *)(v22 + 24))
              {
                v64 = _os_log_pack_size();
                v65 = (std::__shared_weak_count_vtbl *)operator new(v64, (std::align_val_t)8uLL);
                v66 = (std::__shared_weak_count *)operator new();
                v66->__shared_owners_ = 0;
                v67 = (unint64_t *)&v66->__shared_owners_;
                v66->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v66->__shared_weak_owners_ = 0;
                v66[1].__vftable = v65;
                *(_QWORD *)&v277 = v65;
                *((_QWORD *)&v277 + 1) = v65;
                v279 = 0;
                v280 = 0;
                v278 = v66;
                sub_223CC18F4((uint64_t)key, __s, v301, (const char **)&v276);
                v68 = (char *)operator new(0x68uLL);
                v69 = (std::__shared_weak_count *)v68;
                *((_QWORD *)v68 + 3) = off_24EC206F8;
                *(_QWORD *)v68 = &off_24EC206A8;
                *((_QWORD *)v68 + 6) = v284;
                v70 = v288;
                *((_QWORD *)v68 + 9) = v286;
                *((_QWORD *)v68 + 1) = 0;
                v71 = (unint64_t *)(v68 + 8);
                *((_QWORD *)v68 + 2) = 0;
                *((_OWORD *)v68 + 2) = *(_OWORD *)&key[8];
                *(_OWORD *)(v68 + 56) = *(_OWORD *)__p;
                *((_QWORD *)v68 + 12) = v70;
                *((_OWORD *)v68 + 5) = v287;
                v279 = v68 + 24;
                v280 = (std::__shared_weak_count *)v68;
                value.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
                value.__r_.__value_.__l.__size_ = (std::string::size_type)v65;
                value.__r_.__value_.__r.__words[2] = (std::string::size_type)v66;
                do
                  v72 = __ldxr(v67);
                while (__stxr(v72 + 1, v67));
                *(_QWORD *)&v268 = v68 + 24;
                *((_QWORD *)&v268 + 1) = v68;
                do
                  v73 = __ldxr(v71);
                while (__stxr(v73 + 1, v71));
                v269 = v68 + 24;
                do
                  v74 = __ldaxr(v71);
                while (__stlxr(v74 - 1, v71));
                if (!v74)
                {
                  (*(void (**)(char *))(*(_QWORD *)v68 + 16))(v68);
                  std::__shared_weak_count::__release_weak(v69);
                }
                v75 = v278;
                if (v278)
                {
                  v76 = (unint64_t *)&v278->__shared_owners_;
                  do
                    v77 = __ldaxr(v76);
                  while (__stlxr(v77 - 1, v76));
                  if (!v77)
                  {
                    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                    std::__shared_weak_count::__release_weak(v75);
                  }
                }
                v78 = value.__r_.__value_.__r.__words[0];
                if (v269[31] >= 0)
                  v79 = v269 + 8;
                else
                  v79 = (char *)*((_QWORD *)v269 + 1);
                if (v269[55] >= 0)
                  v80 = v269 + 32;
                else
                  v80 = (char *)*((_QWORD *)v269 + 4);
                if (v269[79] >= 0)
                  v81 = v269 + 56;
                else
                  v81 = (char *)*((_QWORD *)v269 + 7);
                v82 = _os_log_pack_fill();
                *(_DWORD *)v82 = 136315650;
                *(_QWORD *)(v82 + 4) = v79;
                *(_WORD *)(v82 + 12) = 2080;
                *(_QWORD *)(v82 + 14) = v80;
                *(_WORD *)(v82 + 22) = 2080;
                *(_QWORD *)(v82 + 24) = v81;
                v83 = operator new();
                v84 = *(unsigned __int8 *)(v259 + 39);
                v85 = v258;
                if ((v84 & 0x80u) != 0)
                {
                  v85 = *(const char **)(v259 + 16);
                  v84 = *(_QWORD *)(v259 + 24);
                }
                *(_QWORD *)v83 = v78;
                *(_OWORD *)(v83 + 8) = *(_OWORD *)&value.__r_.__value_.__r.__words[1];
                *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v83 + 24) = v268;
                v268 = 0uLL;
                *(_QWORD *)(v83 + 40) = v85;
                *(_QWORD *)(v83 + 48) = v84;
                *(_BYTE *)(v83 + 56) = 16;
                *(_QWORD *)&v277 = 0;
                *(_QWORD *)key = v83;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v22 + 24) + 40))(*(_QWORD *)(v22 + 24), key);
                v60 = v264;
                v86 = *(_QWORD *)key;
                *(_QWORD *)key = 0;
                v87 = v260;
                if (v86)
                {
                  v88 = *(std::__shared_weak_count **)(v86 + 32);
                  if (v88)
                  {
                    v89 = (unint64_t *)&v88->__shared_owners_;
                    do
                      v90 = __ldaxr(v89);
                    while (__stlxr(v90 - 1, v89));
                    if (!v90)
                    {
                      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                      std::__shared_weak_count::__release_weak(v88);
                    }
                  }
                  v91 = *(std::__shared_weak_count **)(v86 + 16);
                  if (v91)
                  {
                    v92 = (unint64_t *)&v91->__shared_owners_;
                    do
                      v93 = __ldaxr(v92);
                    while (__stlxr(v93 - 1, v92));
                    if (!v93)
                    {
                      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                      std::__shared_weak_count::__release_weak(v91);
                    }
                  }
                  MEMORY[0x227684CE8](v86, 0x10F0C40B62ED6C6);
                  v94 = v277;
                  *(_QWORD *)&v277 = 0;
                  if (v94)
                  {
                    v95 = *(std::__shared_weak_count **)(v94 + 32);
                    if (v95)
                    {
                      v96 = (unint64_t *)&v95->__shared_owners_;
                      do
                        v97 = __ldaxr(v96);
                      while (__stlxr(v97 - 1, v96));
                      if (!v97)
                      {
                        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                        std::__shared_weak_count::__release_weak(v95);
                      }
                    }
                    v98 = *(std::__shared_weak_count **)(v94 + 16);
                    if (v98)
                    {
                      v99 = (unint64_t *)&v98->__shared_owners_;
                      do
                        v100 = __ldaxr(v99);
                      while (__stlxr(v100 - 1, v99));
                      if (!v100)
                      {
                        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                        std::__shared_weak_count::__release_weak(v98);
                      }
                    }
                    MEMORY[0x227684CE8](v94, 0x10F0C40B62ED6C6);
                  }
                }
                v101 = (std::__shared_weak_count *)*((_QWORD *)&v268 + 1);
                if (*((_QWORD *)&v268 + 1))
                {
                  v102 = (unint64_t *)(*((_QWORD *)&v268 + 1) + 8);
                  do
                    v103 = __ldaxr(v102);
                  while (__stlxr(v103 - 1, v102));
                  if (!v103)
                  {
                    ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                    std::__shared_weak_count::__release_weak(v101);
                  }
                }
                v104 = (std::__shared_weak_count *)value.__r_.__value_.__r.__words[2];
                if (value.__r_.__value_.__r.__words[2])
                {
                  v105 = (unint64_t *)(value.__r_.__value_.__r.__words[2] + 8);
                  do
                    v106 = __ldaxr(v105);
                  while (__stlxr(v106 - 1, v105));
                  if (!v106)
                  {
                    ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                    std::__shared_weak_count::__release_weak(v104);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
                *(_DWORD *)key = 136315650;
                *(_QWORD *)&key[4] = __s;
                *(_WORD *)&key[12] = 2080;
                *(const char **)&key[14] = v301[0];
                *(_WORD *)&key[22] = 2080;
                v284 = (unint64_t)v276;
                v107 = (void *)_os_log_send_and_compose_impl();
                v87 = v260;
                if (v107)
                  free(v107);
              }
              if (SHIBYTE(v282) < 0)
              {
                operator delete(v281);
                if (!v87)
                {
LABEL_187:
                  sub_223182C08((uint64_t)valuePtr);
                  v111 = (std::__shared_weak_count *)v298;
                  if (!v298)
                    return;
                  v112 = (unint64_t *)(v298 + 8);
                  do
                    v113 = __ldaxr(v112);
                  while (__stlxr(v113 - 1, v112));
                  goto LABEL_311;
                }
              }
              else if (!v87)
              {
                goto LABEL_187;
              }
              v108 = *v60;
              LODWORD(v284) = 0;
              sub_223CC3310((uint64_t)key, *(_BYTE *)a3, *(_BYTE *)(a3 + 1));
              if ((_DWORD)v284 == -1)
                sub_22316DD70();
              *(_QWORD *)&v277 = &v281;
              ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24EC63160[v284])(&value, &v277, key);
              if ((_DWORD)v284 != -1)
                ((void (*)(__int128 *, _BYTE *))off_24EC63148[v284])(&v277, key);
              v109 = &value;
              if ((value.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v109 = (std::string *)value.__r_.__value_.__r.__words[0];
              if (*(char *)(v6 + 23) >= 0)
                v110 = (const char *)v6;
              else
                v110 = *(const char **)v6;
              sub_22322C138((uint64_t)valuePtr, "Overriding variable \"%s\" with value %s from key \"%s\"", v108, (const char *)v109, v110);
              if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
                operator delete(value.__r_.__value_.__l.__data_);
              sub_223182C08((uint64_t)valuePtr);
              goto LABEL_187;
            }
          }
          memmove(v59, v28, v29);
          goto LABEL_104;
        }
      }
      memmove(v56, v54, v55);
      goto LABEL_96;
    }
  }
}

void sub_223CB45B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,void *a49,int a50,__int16 a51,char a52,char a53,char a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (a54 && a53 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  if (a35 < 0)
  {
    operator delete(a30);
    sub_223182DAC(v58 - 208);
    sub_223224234((uint64_t)&a42);
    _Unwind_Resume(a1);
  }
  sub_223182DAC(v58 - 208);
  sub_223224234((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_223CB4934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223224234((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223CB494C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223182DAC(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_223CB4960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a22 < 0)
  {
    operator delete(__p);
    sub_223182DAC(v22 - 208);
    _Unwind_Resume(a1);
  }
  sub_223182DAC(v22 - 208);
  _Unwind_Resume(a1);
}

void sub_223CB4998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223224234((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223CB49AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_223167354((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_223CB49C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *object,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  uint64_t v46;

  if (a46 && a45 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  if (SHIBYTE(a38) < 0)
  {
    operator delete(a36);
    sub_223182DAC(v46 - 208);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223CB4A30);
}

void sub_223CB4A14(void *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x223CB4A5CLL);
}

void sub_223CB4A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_22319B964((uint64_t)&a39);
  JUMPOUT(0x223CB4A30);
}

void sub_223CB4A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_223167354((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_223CB4A58(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_223CB4A64(uint64_t a1, uint64_t a2, uint64_t a3, const char **a4)
{
  uint64_t v6;
  unsigned __int16 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char *v16;
  void **v17;
  const char *v18;
  uint64_t v19;
  size_t v20;
  const char *v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  char *v26;
  const char *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  char *v33;
  std::string *v34;
  std::string::size_type size;
  size_t v36;
  void *v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  size_t v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  const char *v45;
  size_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  size_t v54;
  std::__shared_weak_count_vtbl *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  char *v58;
  std::__shared_weak_count *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::string::size_type v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  const char **v76;
  uint64_t v77;
  int v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void *v98;
  const char *v99;
  const char *v100;
  unint64_t v101;
  const void **v102;
  std::string *v103;
  const char *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unsigned __int8 v108;
  const char *v109;
  size_t v110;
  _BYTE *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  void **v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  size_t v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *p_shared_owners;
  char *v123;
  std::__shared_weak_count *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::string::size_type v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  void *v161;
  int v162;
  std::string::size_type v163;
  std::string *p_p;
  const char *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t *v169;
  const void *v170;
  uint64_t v171;
  uint64_t v172;
  void **v173;
  uint64_t v174;
  uint64_t v175;
  size_t v176;
  const char *v177;
  unsigned __int8 v178;
  const char *v179;
  size_t v180;
  _BYTE *v181;
  uint64_t v182;
  unint64_t v183;
  void **v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  NSObject *v192;
  size_t v193;
  std::__shared_weak_count_vtbl *v194;
  std::__shared_weak_count *v195;
  size_t v196;
  size_t v197;
  void *v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  char v203;
  char *v204;
  const char *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  void *v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  void **v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t v249;
  const char *v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  const char **v255;
  char *__s;
  int __sa;
  char *__sb;
  std::string __p;
  __int128 v260;
  char *v261;
  const char *v262;
  uint64_t v263;
  std::__shared_weak_count *v264;
  const char *v265;
  void *__dst[2];
  int64_t v267;
  int **v268;
  __int128 v269;
  std::__shared_weak_count *v270;
  char *v271;
  std::__shared_weak_count *v272;
  void *v273;
  __int128 v274;
  _BYTE object[24];
  unint64_t v276;
  void *v277[2];
  size_t v278;
  __int128 v279;
  unint64_t v280;
  void *v281;
  char v282;
  unint64_t v283;
  int v284;
  uint64_t v285;
  _BYTE v286[24];
  __int128 v287;
  uint64_t v288;
  __int128 v289;
  const char *v290;
  uint64_t v291;
  uint64_t v292;
  const char *v293[5];

  v6 = a2;
  v293[2] = *(const char **)MEMORY[0x24BDAC8D0];
  v8 = sub_22379EDA0(a1, a2);
  if (v8 < 0x100u)
  {
    if (sub_22452B568(a1, v6))
    {
      sub_224527BAC(v6, (CFStringRef *)object);
      sub_223CC1B5C((uint64_t)&v273, a1, *(void **)object);
      v9 = *(std::__shared_weak_count **)&object[8];
      if (*(_QWORD *)&object[8])
      {
        v10 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      sub_223CA9D94(v293);
      if (**((int **)v293[0] + 7) > 5
        || ((v12 = *((unsigned __int8 *)v293[0] + 72),
             v13 = sub_22322F254((uint64_t)v293[0], "OSLogSurrogateAppender", 1, 0),
             v14 = v13,
             !v12)
          ? (v15 = v13 == 0)
          : (v15 = 0),
            v15))
      {
LABEL_299:
        if (BYTE8(v274))
        {
          v105 = (std::__shared_weak_count *)v274;
          if ((_QWORD)v274)
          {
            v169 = (unint64_t *)(v274 + 8);
            do
              v107 = __ldaxr(v169);
            while (__stlxr(v107 - 1, v169));
LABEL_303:
            if (!v107)
            {
              ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
              std::__shared_weak_count::__release_weak(v105);
            }
            return;
          }
        }
        return;
      }
      *(_QWORD *)v286 = v293;
      *(std::chrono::steady_clock::time_point *)&v286[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v286[16] = std::chrono::system_clock::now();
      LODWORD(v287) = 5;
      *((_QWORD *)&v287 + 1) = "unknown file";
      LODWORD(v288) = 96;
      *((_QWORD *)&v289 + 1) = 0;
      v290 = 0;
      *(_QWORD *)&v289 = "unknown function";
      if (*(char *)(v6 + 23) >= 0)
        v16 = (char *)v6;
      else
        v16 = *(char **)v6;
      LODWORD(v276) = 0;
      sub_223CC1C9C((uint64_t)object, (CFTypeRef *)&v273);
      if ((_DWORD)v276 == -1)
        sub_22316DD70();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v269;
      ((void (*)(void **__return_ptr, std::string *, _BYTE *))off_24EC63160[v276])(__dst, &__p, object);
      if ((_DWORD)v276 != -1)
        ((void (*)(std::string *, _BYTE *))off_24EC63148[v276])(&__p, object);
      v17 = __dst;
      if (v267 < 0)
        v17 = (void **)__dst[0];
      v268 = (int **)v17;
      sub_223CC389C();
      if (byte_2540CDCBF >= 0)
        v18 = (const char *)&xmmword_2540CDCA8;
      else
        v18 = (const char *)xmmword_2540CDCA8;
      v265 = v18;
      v19 = **(_QWORD **)v286;
      v254 = **(_QWORD **)v286;
      if (*(char *)(**(_QWORD **)v286 + 39) < 0)
      {
        v21 = *(const char **)(v19 + 16);
        v20 = *(_QWORD *)(v19 + 24);
      }
      else
      {
        v20 = *(unsigned __int8 *)(**(_QWORD **)v286 + 39);
        v21 = (const char *)(v19 + 16);
      }
      v253 = v19 + 16;
      v108 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v108 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v276 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v109 = (const char *)&xmmword_255788F40;
      else
        v109 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v110 = byte_255788F57;
      else
        v110 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v109, v21);
      v111 = &object[8];
      if (v110 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v110 >= 0x17)
      {
        v112 = v12;
        v113 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v110 | 7) != 0x17)
          v113 = v110 | 7;
        v114 = v113 + 1;
        v111 = operator new(v113 + 1);
        *(_QWORD *)&object[16] = v110;
        v276 = v114 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v111;
        v12 = v112;
      }
      else
      {
        HIBYTE(v276) = v110;
        if (!v110)
        {
LABEL_202:
          v111[v110] = 0;
          LOBYTE(v277[0]) = 1;
          v115 = &v277[1];
          if (v20 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v20 >= 0x17)
          {
            v116 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v20 | 7) != 0x17)
              v116 = v20 | 7;
            v117 = v116 + 1;
            v115 = (void **)operator new(v116 + 1);
            v278 = v20;
            *(_QWORD *)&v279 = v117 | 0x8000000000000000;
            v277[1] = v115;
          }
          else
          {
            BYTE7(v279) = v20;
            if (!v20)
              goto LABEL_210;
          }
          memmove(v115, v21, v20);
LABEL_210:
          *((_BYTE *)v115 + v20) = 0;
          BYTE8(v279) = 1;
          v118 = *(NSObject **)object;
          if (SBYTE7(v279) < 0)
            operator delete(v277[1]);
          if (LOBYTE(v277[0]) && SHIBYTE(v276) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v14 && *(_QWORD *)(v14 + 24))
          {
            v119 = _os_log_pack_size();
            v120 = (std::__shared_weak_count_vtbl *)operator new(v119, (std::align_val_t)8uLL);
            v121 = (std::__shared_weak_count *)operator new();
            v121->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v121->__shared_owners_;
            v121->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v121->__shared_weak_owners_ = 0;
            v121[1].__vftable = v120;
            *(_QWORD *)&v269 = v120;
            *((_QWORD *)&v269 + 1) = v120;
            v271 = 0;
            v272 = 0;
            v270 = v121;
            sub_223CC18F4((uint64_t)object, v16, (const char **)&v268, &v265);
            v123 = (char *)operator new(0x68uLL);
            v124 = (std::__shared_weak_count *)v123;
            *((_QWORD *)v123 + 3) = off_24EC206F8;
            *(_QWORD *)v123 = &off_24EC206A8;
            *((_QWORD *)v123 + 6) = v276;
            v125 = v280;
            *((_QWORD *)v123 + 9) = v278;
            *((_QWORD *)v123 + 1) = 0;
            v126 = (unint64_t *)(v123 + 8);
            *((_QWORD *)v123 + 2) = 0;
            *((_OWORD *)v123 + 2) = *(_OWORD *)&object[8];
            *(_OWORD *)(v123 + 56) = *(_OWORD *)v277;
            *((_QWORD *)v123 + 12) = v125;
            *((_OWORD *)v123 + 5) = v279;
            v271 = v123 + 24;
            v272 = (std::__shared_weak_count *)v123;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v120;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v120;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v121;
            do
              v127 = __ldxr(p_shared_owners);
            while (__stxr(v127 + 1, p_shared_owners));
            *(_QWORD *)&v260 = v123 + 24;
            *((_QWORD *)&v260 + 1) = v123;
            do
              v128 = __ldxr(v126);
            while (__stxr(v128 + 1, v126));
            v261 = v123 + 24;
            do
              v129 = __ldaxr(v126);
            while (__stlxr(v129 - 1, v126));
            if (!v129)
            {
              (*(void (**)(char *))(*(_QWORD *)v123 + 16))(v123);
              std::__shared_weak_count::__release_weak(v124);
            }
            __sa = v12;
            v130 = v270;
            if (v270)
            {
              v131 = (unint64_t *)&v270->__shared_owners_;
              do
                v132 = __ldaxr(v131);
              while (__stlxr(v132 - 1, v131));
              if (!v132)
              {
                ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                std::__shared_weak_count::__release_weak(v130);
              }
            }
            v133 = __p.__r_.__value_.__r.__words[0];
            if (v261[31] >= 0)
              v134 = v261 + 8;
            else
              v134 = (char *)*((_QWORD *)v261 + 1);
            if (v261[55] >= 0)
              v135 = v261 + 32;
            else
              v135 = (char *)*((_QWORD *)v261 + 4);
            if (v261[79] >= 0)
              v136 = v261 + 56;
            else
              v136 = (char *)*((_QWORD *)v261 + 7);
            v137 = _os_log_pack_fill();
            *(_DWORD *)v137 = 136315650;
            *(_QWORD *)(v137 + 4) = v134;
            *(_WORD *)(v137 + 12) = 2080;
            *(_QWORD *)(v137 + 14) = v135;
            *(_WORD *)(v137 + 22) = 2080;
            *(_QWORD *)(v137 + 24) = v136;
            v138 = operator new();
            v139 = *(unsigned __int8 *)(v254 + 39);
            v140 = v253;
            if ((v139 & 0x80u) != 0)
            {
              v140 = *(_QWORD *)(v254 + 16);
              v139 = *(_QWORD *)(v254 + 24);
            }
            *(_QWORD *)v138 = v133;
            *(_OWORD *)(v138 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
            *(_OWORD *)(v138 + 24) = v260;
            v260 = 0uLL;
            *(_QWORD *)(v138 + 40) = v140;
            *(_QWORD *)(v138 + 48) = v139;
            *(_BYTE *)(v138 + 56) = 16;
            *(_QWORD *)&v269 = 0;
            *(_QWORD *)object = v138;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v14 + 24) + 40))(*(_QWORD *)(v14 + 24), object);
            v12 = __sa;
            v141 = *(_QWORD *)object;
            *(_QWORD *)object = 0;
            if (v141)
            {
              v142 = *(std::__shared_weak_count **)(v141 + 32);
              if (v142)
              {
                v143 = (unint64_t *)&v142->__shared_owners_;
                do
                  v144 = __ldaxr(v143);
                while (__stlxr(v144 - 1, v143));
                if (!v144)
                {
                  ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                  std::__shared_weak_count::__release_weak(v142);
                }
              }
              v145 = *(std::__shared_weak_count **)(v141 + 16);
              if (v145)
              {
                v146 = (unint64_t *)&v145->__shared_owners_;
                do
                  v147 = __ldaxr(v146);
                while (__stlxr(v147 - 1, v146));
                if (!v147)
                {
                  ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                  std::__shared_weak_count::__release_weak(v145);
                }
              }
              MEMORY[0x227684CE8](v141, 0x10F0C40B62ED6C6);
              v148 = v269;
              *(_QWORD *)&v269 = 0;
              if (v148)
              {
                v149 = *(std::__shared_weak_count **)(v148 + 32);
                if (v149)
                {
                  v150 = (unint64_t *)&v149->__shared_owners_;
                  do
                    v151 = __ldaxr(v150);
                  while (__stlxr(v151 - 1, v150));
                  if (!v151)
                  {
                    ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                    std::__shared_weak_count::__release_weak(v149);
                  }
                }
                v152 = *(std::__shared_weak_count **)(v148 + 16);
                if (v152)
                {
                  v153 = (unint64_t *)&v152->__shared_owners_;
                  do
                    v154 = __ldaxr(v153);
                  while (__stlxr(v154 - 1, v153));
                  if (!v154)
                  {
                    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                    std::__shared_weak_count::__release_weak(v152);
                  }
                }
                MEMORY[0x227684CE8](v148, 0x10F0C40B62ED6C6);
              }
            }
            v155 = (std::__shared_weak_count *)*((_QWORD *)&v260 + 1);
            if (*((_QWORD *)&v260 + 1))
            {
              v156 = (unint64_t *)(*((_QWORD *)&v260 + 1) + 8);
              do
                v157 = __ldaxr(v156);
              while (__stlxr(v157 - 1, v156));
              if (!v157)
              {
                ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                std::__shared_weak_count::__release_weak(v155);
              }
            }
            v158 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
            if (__p.__r_.__value_.__r.__words[2])
            {
              v159 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
              do
                v160 = __ldaxr(v159);
              while (__stlxr(v160 - 1, v159));
              if (!v160)
              {
                ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                std::__shared_weak_count::__release_weak(v158);
              }
            }
          }
          else
          {
            os_log_type_enabled(v118, OS_LOG_TYPE_ERROR);
            *(_DWORD *)object = 136315650;
            *(_QWORD *)&object[4] = v16;
            *(_WORD *)&object[12] = 2080;
            *(_QWORD *)&object[14] = v268;
            *(_WORD *)&object[22] = 2080;
            v276 = (unint64_t)v265;
            v161 = (void *)_os_log_send_and_compose_impl();
            if (v161)
              free(v161);
          }
          if (SHIBYTE(v267) < 0)
            operator delete(__dst[0]);
          if (v12)
          {
            if (*(char *)(v6 + 23) < 0)
              v6 = *(_QWORD *)v6;
            LODWORD(v276) = 0;
            sub_223CC1C9C((uint64_t)object, (CFTypeRef *)&v273);
            if ((_DWORD)v276 == -1)
              sub_22316DD70();
            *(_QWORD *)&v269 = __dst;
            ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24EC63160[v276])(&__p, &v269, object);
            if ((_DWORD)v276 != -1)
              ((void (*)(__int128 *, _BYTE *))off_24EC63148[v276])(&v269, object);
            v162 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            v163 = __p.__r_.__value_.__r.__words[0];
            sub_223CC389C();
            p_p = &__p;
            if (v162 < 0)
              p_p = (std::string *)v163;
            if (byte_2540CDCBF >= 0)
              v165 = (const char *)&xmmword_2540CDCA8;
            else
              v165 = (const char *)xmmword_2540CDCA8;
            sub_22322C138((uint64_t)v286, "Error while getting value for key \"%s\" and value %s expecting type %s", (const char *)v6, (const char *)p_p, v165);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            sub_223182C08((uint64_t)v286);
          }
          sub_223182C08((uint64_t)v286);
          v166 = (std::__shared_weak_count *)v290;
          if (v290)
          {
            v167 = (unint64_t *)(v290 + 8);
            do
              v168 = __ldaxr(v167);
            while (__stlxr(v168 - 1, v167));
            if (!v168)
            {
              ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
              std::__shared_weak_count::__release_weak(v166);
            }
          }
          goto LABEL_299;
        }
      }
      memmove(v111, v109, v110);
      goto LABEL_202;
    }
    sub_223CA9D94(&v268);
    if (*v268[7] > 3)
      return;
    v28 = *((unsigned __int8 *)v268 + 72);
    v29 = sub_22322F254((uint64_t)v268, "OSLogSurrogateAppender", 1, 0);
    v30 = v29;
    if (!v28 && v29 == 0)
      return;
    sub_223195210((uint64_t)object);
    *(_QWORD *)v286 = "Key not found in dictionary \"";
    *(_QWORD *)&v286[8] = 29;
    v32 = *(unsigned __int8 *)(v6 + 23);
    if ((v32 & 0x80u) == 0)
      v33 = (char *)v6;
    else
      v33 = *(char **)v6;
    if ((v32 & 0x80u) != 0)
      v32 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)&v286[16] = v33;
    *(_QWORD *)&v287 = v32;
    *((_QWORD *)&v287 + 1) = "\" for variable \"";
    v288 = 16;
    v289 = *(_OWORD *)a4;
    v290 = "\"";
    v291 = 1;
    sub_2231A9820((uint64_t)v286, (uint64_t)&v292, 0, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &__p;
    else
      v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_2231813E8(&object[16], (uint64_t)v34, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v284 & 0x10) != 0)
    {
      v101 = v283;
      if (v283 < v280)
      {
        v283 = v280;
        v101 = v280;
      }
      v102 = (const void **)&v279 + 1;
    }
    else
    {
      if ((v284 & 8) == 0)
      {
        v36 = 0;
        HIBYTE(v267) = 0;
        v37 = __dst;
        goto LABEL_314;
      }
      v102 = (const void **)&v277[1];
      v101 = v279;
    }
    v170 = *v102;
    v36 = v101 - (_QWORD)*v102;
    if (v36 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v36 >= 0x17)
    {
      v171 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v36 | 7) != 0x17)
        v171 = v36 | 7;
      v172 = v171 + 1;
      v37 = operator new(v171 + 1);
      __dst[1] = (void *)v36;
      v267 = v172 | 0x8000000000000000;
      __dst[0] = v37;
    }
    else
    {
      HIBYTE(v267) = v101 - *(_BYTE *)v102;
      v37 = __dst;
      if (!v36)
      {
LABEL_314:
        *((_BYTE *)v37 + v36) = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v268;
        __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v260) = 3;
        *((_QWORD *)&v260 + 1) = "unknown file";
        LODWORD(v261) = 99;
        v263 = 0;
        v264 = 0;
        v262 = "unknown function";
        if (v267 >= 0)
          v173 = __dst;
        else
          v173 = (void **)__dst[0];
        v174 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
        v175 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
        if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v177 = *(const char **)(v174 + 16);
          v176 = *(_QWORD *)(v174 + 24);
        }
        else
        {
          v176 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
          v177 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
        }
        v178 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v178 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v286);
          sub_223199C58("com.apple.cv3d", (unint64_t)v286, &xmmword_255788F40);
          if ((_BYTE)v287 && (v286[23] & 0x80000000) != 0)
            operator delete(*(void **)v286);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v179 = (const char *)&xmmword_255788F40;
        else
          v179 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v180 = byte_255788F57;
        else
          v180 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)v286 = os_log_create(v179, v177);
        v181 = &v286[8];
        if (v180 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v180 >= 0x17)
        {
          __sb = (char *)v177;
          v182 = v174;
          v183 = v30;
          v184 = v173;
          v185 = v28;
          v186 = v175;
          v187 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v180 | 7) != 0x17)
            v187 = v180 | 7;
          v188 = v187 + 1;
          v181 = operator new(v187 + 1);
          *(_QWORD *)&v286[16] = v180;
          *(_QWORD *)&v287 = v188 | 0x8000000000000000;
          *(_QWORD *)&v286[8] = v181;
          v175 = v186;
          v28 = v185;
          v173 = v184;
          v30 = v183;
          v174 = v182;
          v177 = __sb;
        }
        else
        {
          BYTE7(v287) = v180;
          if (!v180)
          {
LABEL_335:
            v181[v180] = 0;
            BYTE8(v287) = 1;
            v189 = &v288;
            if (v176 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v176 >= 0x17)
            {
              v190 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v176 | 7) != 0x17)
                v190 = v176 | 7;
              v191 = v190 + 1;
              v189 = (uint64_t *)operator new(v190 + 1);
              *(_QWORD *)&v289 = v176;
              *((_QWORD *)&v289 + 1) = v191 | 0x8000000000000000;
              v288 = (uint64_t)v189;
            }
            else
            {
              HIBYTE(v289) = v176;
              if (!v176)
              {
LABEL_343:
                *((_BYTE *)v189 + v176) = 0;
                LOBYTE(v290) = 1;
                v192 = *(NSObject **)v286;
                if (SHIBYTE(v289) < 0)
                  operator delete((void *)v288);
                if (BYTE8(v287) && SBYTE7(v287) < 0)
                  operator delete(*(void **)&v286[8]);
                if (*(_QWORD *)v286)
                  os_release(*(void **)v286);
                if (!v30 || !*(_QWORD *)(v30 + 24))
                {
                  os_log_type_enabled(v192, OS_LOG_TYPE_INFO);
                  *(_DWORD *)v286 = 136315138;
                  *(_QWORD *)&v286[4] = v173;
                  v199 = (void *)_os_log_send_and_compose_impl();
                  if (v199)
                    free(v199);
                  goto LABEL_424;
                }
                v193 = _os_log_pack_size();
                v194 = (std::__shared_weak_count_vtbl *)operator new(v193, (std::align_val_t)8uLL);
                v195 = (std::__shared_weak_count *)operator new();
                v195->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v195->__shared_owners_ = 0;
                v195->__shared_weak_owners_ = 0;
                v195[1].__vftable = v194;
                *(_QWORD *)&v269 = v194;
                *((_QWORD *)&v269 + 1) = v194;
                v271 = 0;
                v272 = 0;
                v270 = v195;
                v196 = strlen((const char *)v173);
                if (v196 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v197 = v196;
                if (v196 >= 0x17)
                {
                  v200 = (v196 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v196 | 7) != 0x17)
                    v200 = v196 | 7;
                  v201 = v200 + 1;
                  v198 = operator new(v200 + 1);
                  *(_QWORD *)&v274 = v197;
                  *((_QWORD *)&v274 + 1) = v201 | 0x8000000000000000;
                  v273 = v198;
                }
                else
                {
                  HIBYTE(v274) = v196;
                  v198 = &v273;
                  if (!v196)
                  {
LABEL_362:
                    *((_BYTE *)v198 + v197) = 0;
                    v202 = v273;
                    v293[0] = (const char *)v274;
                    *(const char **)((char *)v293 + 7) = *(const char **)((char *)&v274 + 7);
                    v203 = HIBYTE(v274);
                    v204 = (char *)operator new(0x38uLL);
                    *((_QWORD *)v204 + 1) = 0;
                    *((_QWORD *)v204 + 2) = 0;
                    *((_QWORD *)v204 + 3) = off_24EC1FA48;
                    *(_QWORD *)v204 = &off_24EC1F9F8;
                    v205 = v293[0];
                    *((_QWORD *)v204 + 4) = v202;
                    *((_QWORD *)v204 + 5) = v205;
                    *(const char **)(v204 + 47) = *(const char **)((char *)v293 + 7);
                    v204[55] = v203;
                    memset(v293, 0, 15);
                    v206 = v272;
                    v271 = v204 + 24;
                    v272 = (std::__shared_weak_count *)v204;
                    if (v206)
                    {
                      v207 = (unint64_t *)&v206->__shared_owners_;
                      do
                        v208 = __ldaxr(v207);
                      while (__stlxr(v208 - 1, v207));
                      if (!v208)
                      {
                        ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                        std::__shared_weak_count::__release_weak(v206);
                      }
                    }
                    *(_OWORD *)v286 = v269;
                    v209 = (uint64_t)v271;
                    *(_QWORD *)&v286[16] = v270;
                    if (v270)
                    {
                      v210 = (unint64_t *)&v270->__shared_owners_;
                      do
                        v211 = __ldxr(v210);
                      while (__stxr(v211 + 1, v210));
                    }
                    v212 = v272;
                    *(_QWORD *)&v287 = v209;
                    *((_QWORD *)&v287 + 1) = v272;
                    if (v272)
                    {
                      v213 = (unint64_t *)&v272->__shared_owners_;
                      do
                        v214 = __ldxr(v213);
                      while (__stxr(v214 + 1, v213));
                      v288 = v209;
                      do
                        v215 = __ldaxr(v213);
                      while (__stlxr(v215 - 1, v213));
                      if (!v215)
                      {
                        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                        std::__shared_weak_count::__release_weak(v212);
                      }
                    }
                    else
                    {
                      v288 = v209;
                    }
                    v216 = v270;
                    if (v270)
                    {
                      v217 = (unint64_t *)&v270->__shared_owners_;
                      do
                        v218 = __ldaxr(v217);
                      while (__stlxr(v218 - 1, v217));
                      if (!v218)
                      {
                        ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                        std::__shared_weak_count::__release_weak(v216);
                      }
                    }
                    v219 = *(_QWORD *)v286;
                    if (*(char *)(v288 + 31) >= 0)
                      v220 = (char *)(v288 + 8);
                    else
                      v220 = *(char **)(v288 + 8);
                    v221 = _os_log_pack_fill();
                    *(_DWORD *)v221 = 136315138;
                    *(_QWORD *)(v221 + 4) = v220;
                    v222 = operator new();
                    v223 = *(unsigned __int8 *)(v174 + 39);
                    if ((v223 & 0x80u) == 0)
                      v224 = v175;
                    else
                      v224 = *(_QWORD *)(v174 + 16);
                    if ((v223 & 0x80u) != 0)
                      v223 = *(_QWORD *)(v174 + 24);
                    *(_QWORD *)v222 = v219;
                    *(_OWORD *)(v222 + 8) = *(_OWORD *)&v286[8];
                    *(_QWORD *)&v286[8] = 0;
                    *(_QWORD *)&v286[16] = 0;
                    *(_OWORD *)(v222 + 24) = v287;
                    v287 = 0uLL;
                    *(_QWORD *)(v222 + 40) = v224;
                    *(_QWORD *)(v222 + 48) = v223;
                    *(_BYTE *)(v222 + 56) = 1;
                    v273 = 0;
                    *(_QWORD *)&v269 = v222;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v30 + 24) + 40))(*(_QWORD *)(v30 + 24), &v269);
                    v225 = v269;
                    *(_QWORD *)&v269 = 0;
                    if (v225)
                    {
                      v226 = *(std::__shared_weak_count **)(v225 + 32);
                      if (v226)
                      {
                        v227 = (unint64_t *)&v226->__shared_owners_;
                        do
                          v228 = __ldaxr(v227);
                        while (__stlxr(v228 - 1, v227));
                        if (!v228)
                        {
                          ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                          std::__shared_weak_count::__release_weak(v226);
                        }
                      }
                      v229 = *(std::__shared_weak_count **)(v225 + 16);
                      if (v229)
                      {
                        v230 = (unint64_t *)&v229->__shared_owners_;
                        do
                          v231 = __ldaxr(v230);
                        while (__stlxr(v231 - 1, v230));
                        if (!v231)
                        {
                          ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                          std::__shared_weak_count::__release_weak(v229);
                        }
                      }
                      MEMORY[0x227684CE8](v225, 0x10F0C40B62ED6C6);
                      v232 = v273;
                      v273 = 0;
                      if (v232)
                      {
                        v233 = (std::__shared_weak_count *)*((_QWORD *)v232 + 4);
                        if (v233)
                        {
                          v234 = (unint64_t *)&v233->__shared_owners_;
                          do
                            v235 = __ldaxr(v234);
                          while (__stlxr(v235 - 1, v234));
                          if (!v235)
                          {
                            ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                            std::__shared_weak_count::__release_weak(v233);
                          }
                        }
                        v236 = (std::__shared_weak_count *)*((_QWORD *)v232 + 2);
                        if (v236)
                        {
                          v237 = (unint64_t *)&v236->__shared_owners_;
                          do
                            v238 = __ldaxr(v237);
                          while (__stlxr(v238 - 1, v237));
                          if (!v238)
                          {
                            ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                            std::__shared_weak_count::__release_weak(v236);
                          }
                        }
                        MEMORY[0x227684CE8](v232, 0x10F0C40B62ED6C6);
                      }
                    }
                    v239 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
                    if (*((_QWORD *)&v287 + 1))
                    {
                      v240 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
                      do
                        v241 = __ldaxr(v240);
                      while (__stlxr(v241 - 1, v240));
                      if (!v241)
                      {
                        ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
                        std::__shared_weak_count::__release_weak(v239);
                      }
                    }
                    v242 = *(std::__shared_weak_count **)&v286[16];
                    if (*(_QWORD *)&v286[16])
                    {
                      v243 = (unint64_t *)(*(_QWORD *)&v286[16] + 8);
                      do
                        v244 = __ldaxr(v243);
                      while (__stlxr(v244 - 1, v243));
                      if (!v244)
                      {
                        ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                        std::__shared_weak_count::__release_weak(v242);
                      }
                    }
LABEL_424:
                    if (v28)
                    {
                      v245 = __dst;
                      if (v267 < 0)
                        v245 = (void **)__dst[0];
                      sub_22322C138((uint64_t)&__p, "%s", (const char *)v245);
                      sub_223182C08((uint64_t)&__p);
                    }
                    sub_223182C08((uint64_t)&__p);
                    v246 = v264;
                    if (v264)
                    {
                      v247 = (unint64_t *)&v264->__shared_owners_;
                      do
                        v248 = __ldaxr(v247);
                      while (__stlxr(v248 - 1, v247));
                      if (!v248)
                      {
                        ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                        std::__shared_weak_count::__release_weak(v246);
                      }
                    }
                    if (SHIBYTE(v267) < 0)
                      operator delete(__dst[0]);
                    *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
                    v249 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&object[16] = v249;
                    v276 = MEMORY[0x24BEDB848] + 16;
                    if (v282 < 0)
                      operator delete(v281);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x227684BE0](&v285);
                    return;
                  }
                }
                memcpy(v198, v173, v197);
                goto LABEL_362;
              }
            }
            memmove(v189, v177, v176);
            goto LABEL_343;
          }
        }
        memmove(v181, v179, v180);
        goto LABEL_335;
      }
    }
    memmove(v37, v170, v36);
    goto LABEL_314;
  }
  *(_WORD *)a3 = v8 | 0x100;
  sub_223CA9D94(__dst);
  if (**((int **)__dst[0] + 7) > 4)
    return;
  v22 = *((unsigned __int8 *)__dst[0] + 72);
  v23 = sub_22322F254((uint64_t)__dst[0], "OSLogSurrogateAppender", 1, 0);
  v24 = v23;
  if (!v22 && v23 == 0)
    return;
  *(_QWORD *)v286 = __dst;
  *(std::chrono::steady_clock::time_point *)&v286[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v286[16] = std::chrono::system_clock::now();
  LODWORD(v287) = 4;
  *((_QWORD *)&v287 + 1) = "unknown file";
  LODWORD(v288) = 91;
  *((_QWORD *)&v289 + 1) = 0;
  v290 = 0;
  *(_QWORD *)&v289 = "unknown function";
  v26 = (char *)*a4;
  LODWORD(v276) = 0;
  if (*(_BYTE *)(a3 + 1))
  {
    if (*(_BYTE *)a3)
      v27 = "true";
    else
      v27 = "false";
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
    sub_2231C06BC(object, (const char **)&__p.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_2231A0D14(object, "nullopt");
  }
  if ((_DWORD)v276 == -1)
    sub_22316DD70();
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v269;
  ((void (*)(void **__return_ptr, std::string *, _BYTE *))off_24EC63160[v276])(&v273, &__p, object);
  if ((_DWORD)v276 != -1)
    ((void (*)(std::string *, _BYTE *))off_24EC63148[v276])(&__p, object);
  __s = v26;
  v38 = (const char *)&v273;
  if (v274 < 0)
    v38 = (const char *)v273;
  v293[0] = v38;
  if (*(char *)(v6 + 23) >= 0)
    v39 = (const char *)v6;
  else
    v39 = *(const char **)v6;
  v268 = (int **)v39;
  v40 = **(_QWORD **)v286;
  v41 = (const char *)(**(_QWORD **)v286 + 16);
  v250 = v41;
  v251 = **(_QWORD **)v286;
  if (*(char *)(**(_QWORD **)v286 + 39) < 0)
  {
    v41 = *(const char **)(v40 + 16);
    v42 = *(_QWORD *)(v40 + 24);
    v252 = v22;
    v255 = a4;
    v44 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v44 & 1) != 0)
      goto LABEL_70;
  }
  else
  {
    v42 = *(unsigned __int8 *)(**(_QWORD **)v286 + 39);
    v252 = v22;
    v255 = a4;
    v43 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v43 & 1) != 0)
      goto LABEL_70;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if ((_BYTE)v276 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_70:
  if (byte_255788F57 >= 0)
    v45 = (const char *)&xmmword_255788F40;
  else
    v45 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v46 = byte_255788F57;
  else
    v46 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)object = os_log_create(v45, v41);
  v47 = &object[8];
  if (v46 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v46 >= 0x17)
  {
    v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17)
      v48 = v46 | 7;
    v49 = v48 + 1;
    v47 = operator new(v48 + 1);
    *(_QWORD *)&object[16] = v46;
    v276 = v49 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v47;
    goto LABEL_83;
  }
  HIBYTE(v276) = v46;
  if (v46)
LABEL_83:
    memmove(v47, v45, v46);
  v47[v46] = 0;
  LOBYTE(v277[0]) = 1;
  v50 = &v277[1];
  if (v42 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v42 >= 0x17)
  {
    v51 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17)
      v51 = v42 | 7;
    v52 = v51 + 1;
    v50 = (void **)operator new(v51 + 1);
    v278 = v42;
    *(_QWORD *)&v279 = v52 | 0x8000000000000000;
    v277[1] = v50;
    goto LABEL_91;
  }
  BYTE7(v279) = v42;
  if (v42)
LABEL_91:
    memmove(v50, v41, v42);
  *((_BYTE *)v50 + v42) = 0;
  BYTE8(v279) = 1;
  v53 = *(NSObject **)object;
  if (SBYTE7(v279) < 0)
    operator delete(v277[1]);
  if (LOBYTE(v277[0]) && SHIBYTE(v276) < 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v24 && *(_QWORD *)(v24 + 24))
  {
    v54 = _os_log_pack_size();
    v55 = (std::__shared_weak_count_vtbl *)operator new(v54, (std::align_val_t)8uLL);
    v56 = (std::__shared_weak_count *)operator new();
    v56->__shared_owners_ = 0;
    v57 = (unint64_t *)&v56->__shared_owners_;
    v56->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v56->__shared_weak_owners_ = 0;
    v56[1].__vftable = v55;
    *(_QWORD *)&v269 = v55;
    *((_QWORD *)&v269 + 1) = v55;
    v271 = 0;
    v272 = 0;
    v270 = v56;
    sub_223CC18F4((uint64_t)object, __s, v293, (const char **)&v268);
    v58 = (char *)operator new(0x68uLL);
    v59 = (std::__shared_weak_count *)v58;
    *((_QWORD *)v58 + 3) = off_24EC206F8;
    *(_QWORD *)v58 = &off_24EC206A8;
    *((_QWORD *)v58 + 6) = v276;
    v60 = v280;
    *((_QWORD *)v58 + 9) = v278;
    *((_QWORD *)v58 + 1) = 0;
    v61 = (unint64_t *)(v58 + 8);
    *((_QWORD *)v58 + 2) = 0;
    *((_OWORD *)v58 + 2) = *(_OWORD *)&object[8];
    *(_OWORD *)(v58 + 56) = *(_OWORD *)v277;
    *((_QWORD *)v58 + 12) = v60;
    *((_OWORD *)v58 + 5) = v279;
    v271 = v58 + 24;
    v272 = (std::__shared_weak_count *)v58;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v55;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v56;
    do
      v62 = __ldxr(v57);
    while (__stxr(v62 + 1, v57));
    *(_QWORD *)&v260 = v58 + 24;
    *((_QWORD *)&v260 + 1) = v58;
    do
      v63 = __ldxr(v61);
    while (__stxr(v63 + 1, v61));
    v261 = v58 + 24;
    do
      v64 = __ldaxr(v61);
    while (__stlxr(v64 - 1, v61));
    if (!v64)
    {
      (*(void (**)(char *))(*(_QWORD *)v58 + 16))(v58);
      std::__shared_weak_count::__release_weak(v59);
    }
    v65 = v270;
    if (v270)
    {
      v66 = (unint64_t *)&v270->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    v68 = __p.__r_.__value_.__r.__words[0];
    if (v261[31] >= 0)
      v69 = v261 + 8;
    else
      v69 = (char *)*((_QWORD *)v261 + 1);
    if (v261[55] >= 0)
      v70 = v261 + 32;
    else
      v70 = (char *)*((_QWORD *)v261 + 4);
    if (v261[79] >= 0)
      v71 = v261 + 56;
    else
      v71 = (char *)*((_QWORD *)v261 + 7);
    v72 = _os_log_pack_fill();
    *(_DWORD *)v72 = 136315650;
    *(_QWORD *)(v72 + 4) = v69;
    *(_WORD *)(v72 + 12) = 2080;
    *(_QWORD *)(v72 + 14) = v70;
    *(_WORD *)(v72 + 22) = 2080;
    *(_QWORD *)(v72 + 24) = v71;
    v73 = operator new();
    v74 = *(unsigned __int8 *)(v251 + 39);
    v75 = v250;
    if ((v74 & 0x80u) != 0)
    {
      v75 = *(const char **)(v251 + 16);
      v74 = *(_QWORD *)(v251 + 24);
    }
    *(_QWORD *)v73 = v68;
    *(_OWORD *)(v73 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)(v73 + 24) = v260;
    v260 = 0uLL;
    *(_QWORD *)(v73 + 40) = v75;
    *(_QWORD *)(v73 + 48) = v74;
    *(_BYTE *)(v73 + 56) = 16;
    *(_QWORD *)&v269 = 0;
    *(_QWORD *)object = v73;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v24 + 24) + 40))(*(_QWORD *)(v24 + 24), object);
    v76 = v255;
    v77 = *(_QWORD *)object;
    *(_QWORD *)object = 0;
    v78 = v252;
    if (v77)
    {
      v79 = *(std::__shared_weak_count **)(v77 + 32);
      if (v79)
      {
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v82 = *(std::__shared_weak_count **)(v77 + 16);
      if (v82)
      {
        v83 = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      MEMORY[0x227684CE8](v77, 0x10F0C40B62ED6C6);
      v85 = v269;
      *(_QWORD *)&v269 = 0;
      if (v85)
      {
        v86 = *(std::__shared_weak_count **)(v85 + 32);
        if (v86)
        {
          v87 = (unint64_t *)&v86->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        v89 = *(std::__shared_weak_count **)(v85 + 16);
        if (v89)
        {
          v90 = (unint64_t *)&v89->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        MEMORY[0x227684CE8](v85, 0x10F0C40B62ED6C6);
      }
    }
    v92 = (std::__shared_weak_count *)*((_QWORD *)&v260 + 1);
    if (*((_QWORD *)&v260 + 1))
    {
      v93 = (unint64_t *)(*((_QWORD *)&v260 + 1) + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    v95 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v96 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
  }
  else
  {
    os_log_type_enabled(v53, OS_LOG_TYPE_ERROR);
    *(_DWORD *)object = 136315650;
    *(_QWORD *)&object[4] = __s;
    *(_WORD *)&object[12] = 2080;
    *(const char **)&object[14] = v293[0];
    *(_WORD *)&object[22] = 2080;
    v276 = (unint64_t)v268;
    v98 = (void *)_os_log_send_and_compose_impl();
    v76 = v255;
    v78 = v252;
    if (v98)
      free(v98);
  }
  if (SHIBYTE(v274) < 0)
    operator delete(v273);
  if (v78)
  {
    v99 = *v76;
    LODWORD(v276) = 0;
    if (*(_BYTE *)(a3 + 1))
    {
      v100 = "true";
      if (!*(_BYTE *)a3)
        v100 = "false";
      *(_QWORD *)&v269 = v100;
      sub_2231C06BC(object, (const char **)&v269);
    }
    else
    {
      sub_2231A0D14(object, "nullopt");
    }
    if ((_DWORD)v276 == -1)
      sub_22316DD70();
    *(_QWORD *)&v269 = &v273;
    ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24EC63160[v276])(&__p, &v269, object);
    if ((_DWORD)v276 != -1)
      ((void (*)(__int128 *, _BYTE *))off_24EC63148[v276])(&v269, object);
    v103 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (*(char *)(v6 + 23) >= 0)
      v104 = (const char *)v6;
    else
      v104 = *(const char **)v6;
    sub_22322C138((uint64_t)v286, "Overriding variable \"%s\" with value %s from key \"%s\"", v99, (const char *)v103, v104);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_223182C08((uint64_t)v286);
  }
  sub_223182C08((uint64_t)v286);
  v105 = (std::__shared_weak_count *)v290;
  if (v290)
  {
    v106 = (unint64_t *)(v290 + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    goto LABEL_303;
  }
}

void sub_223CB68F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,void *a49,int a50,__int16 a51,char a52,char a53,char a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (a54 && a53 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  if (a35 < 0)
  {
    operator delete(a30);
    sub_223182DAC(v58 - 208);
    sub_223224234((uint64_t)&a42);
    _Unwind_Resume(a1);
  }
  sub_223182DAC(v58 - 208);
  sub_223224234((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_223CB6CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223224234((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223CB6CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *object,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  uint64_t v46;

  if (a46 && a45 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  if (SHIBYTE(a38) < 0)
  {
    operator delete(a36);
    sub_223182DAC(v46 - 208);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223CB6D50);
}

void sub_223CB6D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  sub_22319B964((uint64_t)&a39);
  sub_223182DAC(v39 - 208);
  _Unwind_Resume(a1);
}

void sub_223CB6D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223224234((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223CB6D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_223167354((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_223CB6D8C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_223CB6D98(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v6;
  std::__shared_weak_count *size;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  char *v15;
  void **v16;
  const char *v17;
  uint64_t v18;
  size_t v19;
  const char *v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  size_t v29;
  unsigned __int8 v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  const char *v35;
  std::string *v36;
  std::string::size_type v37;
  size_t v38;
  void *v39;
  unsigned __int8 v40;
  const char *v41;
  size_t v42;
  std::string::size_type *p_size;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  size_t v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  char *v54;
  std::__shared_weak_count *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::string::size_type v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  const char **v72;
  std::string::size_type v73;
  int v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  const char *v93;
  std::string *p_object;
  const char *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  const void **v100;
  unsigned __int8 v101;
  const char *v102;
  size_t v103;
  std::string::size_type *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  void **v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  size_t v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  char *v116;
  std::__shared_weak_count *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  int v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::string::size_type v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  std::string::size_type v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  void *v155;
  int v156;
  std::string::size_type v157;
  std::string *p_p;
  const char *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v163;
  const void *v164;
  uint64_t v165;
  uint64_t v166;
  void **v167;
  uint64_t v168;
  uint64_t v169;
  size_t v170;
  const char *v171;
  unsigned __int8 v172;
  const char *v173;
  size_t v174;
  _BYTE *v175;
  uint64_t v176;
  unint64_t v177;
  void **v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  NSObject *v186;
  size_t v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  size_t v190;
  size_t v191;
  void *v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  char v197;
  char *v198;
  const char *v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  void *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  void **v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::string::size_type v243;
  const char *v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  const char **v249;
  char *__s;
  char *__sa;
  std::string __p;
  __int128 v253;
  char *v254;
  const char *v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  const char *v258;
  void *__dst[2];
  int64_t v260;
  int **v261;
  std::string v262;
  char v263;
  __int128 v264;
  std::__shared_weak_count *v265;
  char *v266;
  std::__shared_weak_count *v267;
  void *v268;
  __int128 v269;
  std::string object;
  unint64_t v271;
  void *v272[2];
  size_t v273;
  __int128 v274;
  unint64_t v275;
  void *v276;
  char v277;
  unint64_t v278;
  int v279;
  uint64_t v280;
  _BYTE v281[24];
  __int128 v282;
  uint64_t v283;
  __int128 v284;
  const char *v285;
  uint64_t v286;
  uint64_t v287;
  const char *v288[5];

  v6 = a2;
  v288[2] = *(const char **)MEMORY[0x24BDAC8D0];
  sub_22379F0FC(a1, a2, &v262);
  if (v263)
  {
    if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&object, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
    else
      object = v262;
    LOBYTE(v271) = 1;
    if (*(_BYTE *)(a3 + 24))
    {
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(std::string *)a3 = object;
    }
    else
    {
      *(std::string *)a3 = object;
      *(_BYTE *)(a3 + 24) = 1;
    }
    sub_223CA9D94(__dst);
    if (**((int **)__dst[0] + 7) > 4
      || (v21 = *((unsigned __int8 *)__dst[0] + 72),
          v22 = sub_22322F254((uint64_t)__dst[0], "OSLogSurrogateAppender", 1, 0),
          v23 = v22,
          !v21)
      && !v22)
    {
LABEL_295:
      if (!v263)
        return;
      goto LABEL_296;
    }
    *(_QWORD *)v281 = __dst;
    *(std::chrono::steady_clock::time_point *)&v281[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v281[16] = std::chrono::system_clock::now();
    LODWORD(v282) = 4;
    *((_QWORD *)&v282 + 1) = "unknown file";
    LODWORD(v283) = 91;
    *((_QWORD *)&v284 + 1) = 0;
    v285 = 0;
    *(_QWORD *)&v284 = "unknown function";
    v24 = *a4;
    sub_223CB8F80((__int128 *)a3);
    v249 = (const char **)a4;
    __s = v24;
    if (v269 >= 0)
      v25 = (const char *)&v268;
    else
      v25 = (const char *)v268;
    v288[0] = v25;
    if (*(char *)(v6 + 23) >= 0)
      v26 = (const char *)v6;
    else
      v26 = *(const char **)v6;
    v261 = (int **)v26;
    v27 = **(_QWORD **)v281;
    v28 = (const char *)(**(_QWORD **)v281 + 16);
    v244 = v28;
    if (*(char *)(**(_QWORD **)v281 + 39) < 0)
    {
      v28 = *(const char **)(v27 + 16);
      v29 = *(_QWORD *)(v27 + 24);
      v245 = **(_QWORD **)v281;
      v246 = v21;
      v40 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v40 & 1) != 0)
        goto LABEL_66;
    }
    else
    {
      v29 = *(unsigned __int8 *)(**(_QWORD **)v281 + 39);
      v245 = **(_QWORD **)v281;
      v246 = v21;
      v30 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v30 & 1) != 0)
        goto LABEL_66;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
      if ((_BYTE)v271 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
        operator delete(object.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_66:
    if (byte_255788F57 >= 0)
      v41 = (const char *)&xmmword_255788F40;
    else
      v41 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v42 = byte_255788F57;
    else
      v42 = *((_QWORD *)&xmmword_255788F40 + 1);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v41, v28);
    p_size = &object.__r_.__value_.__l.__size_;
    if (v42 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v42 >= 0x17)
    {
      v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v42 | 7) != 0x17)
        v44 = v42 | 7;
      v45 = v44 + 1;
      p_size = (std::string::size_type *)operator new(v44 + 1);
      object.__r_.__value_.__r.__words[2] = v42;
      v271 = v45 | 0x8000000000000000;
      object.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
    }
    else
    {
      HIBYTE(v271) = v42;
      if (!v42)
      {
LABEL_80:
        *((_BYTE *)p_size + v42) = 0;
        LOBYTE(v272[0]) = 1;
        v46 = &v272[1];
        if (v29 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v29 >= 0x17)
        {
          v47 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v29 | 7) != 0x17)
            v47 = v29 | 7;
          v48 = v47 + 1;
          v46 = (void **)operator new(v47 + 1);
          v273 = v29;
          *(_QWORD *)&v274 = v48 | 0x8000000000000000;
          v272[1] = v46;
        }
        else
        {
          BYTE7(v274) = v29;
          if (!v29)
          {
LABEL_88:
            *((_BYTE *)v46 + v29) = 0;
            BYTE8(v274) = 1;
            v49 = object.__r_.__value_.__r.__words[0];
            if (SBYTE7(v274) < 0)
              operator delete(v272[1]);
            if (LOBYTE(v272[0]) && SHIBYTE(v271) < 0)
              operator delete((void *)object.__r_.__value_.__l.__size_);
            if (object.__r_.__value_.__r.__words[0])
              os_release(object.__r_.__value_.__l.__data_);
            if (v23 && *(_QWORD *)(v23 + 24))
            {
              v50 = _os_log_pack_size();
              v51 = (std::__shared_weak_count_vtbl *)operator new(v50, (std::align_val_t)8uLL);
              v52 = (std::__shared_weak_count *)operator new();
              v52->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v52->__shared_owners_;
              v52->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v52->__shared_weak_owners_ = 0;
              v52[1].__vftable = v51;
              *(_QWORD *)&v264 = v51;
              *((_QWORD *)&v264 + 1) = v51;
              v266 = 0;
              v267 = 0;
              v265 = v52;
              sub_223CC18F4((uint64_t)&object, __s, v288, (const char **)&v261);
              v54 = (char *)operator new(0x68uLL);
              v55 = (std::__shared_weak_count *)v54;
              *((_QWORD *)v54 + 3) = off_24EC206F8;
              *(_QWORD *)v54 = &off_24EC206A8;
              *((_QWORD *)v54 + 6) = v271;
              v56 = v275;
              *((_QWORD *)v54 + 9) = v273;
              *((_QWORD *)v54 + 1) = 0;
              v57 = (unint64_t *)(v54 + 8);
              *((_QWORD *)v54 + 2) = 0;
              *((_OWORD *)v54 + 2) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
              *(_OWORD *)(v54 + 56) = *(_OWORD *)v272;
              *((_QWORD *)v54 + 12) = v56;
              *((_OWORD *)v54 + 5) = v274;
              v266 = v54 + 24;
              v267 = (std::__shared_weak_count *)v54;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
              __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v52;
              do
                v58 = __ldxr(p_shared_owners);
              while (__stxr(v58 + 1, p_shared_owners));
              *(_QWORD *)&v253 = v54 + 24;
              *((_QWORD *)&v253 + 1) = v54;
              do
                v59 = __ldxr(v57);
              while (__stxr(v59 + 1, v57));
              v254 = v54 + 24;
              do
                v60 = __ldaxr(v57);
              while (__stlxr(v60 - 1, v57));
              if (!v60)
              {
                (*(void (**)(char *))(*(_QWORD *)v54 + 16))(v54);
                std::__shared_weak_count::__release_weak(v55);
              }
              v61 = v265;
              if (v265)
              {
                v62 = (unint64_t *)&v265->__shared_owners_;
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
              }
              v64 = __p.__r_.__value_.__r.__words[0];
              if (v254[31] >= 0)
                v65 = v254 + 8;
              else
                v65 = (char *)*((_QWORD *)v254 + 1);
              if (v254[55] >= 0)
                v66 = v254 + 32;
              else
                v66 = (char *)*((_QWORD *)v254 + 4);
              if (v254[79] >= 0)
                v67 = v254 + 56;
              else
                v67 = (char *)*((_QWORD *)v254 + 7);
              v68 = _os_log_pack_fill();
              *(_DWORD *)v68 = 136315650;
              *(_QWORD *)(v68 + 4) = v65;
              *(_WORD *)(v68 + 12) = 2080;
              *(_QWORD *)(v68 + 14) = v66;
              *(_WORD *)(v68 + 22) = 2080;
              *(_QWORD *)(v68 + 24) = v67;
              v69 = operator new();
              v70 = *(unsigned __int8 *)(v245 + 39);
              v71 = v244;
              if ((v70 & 0x80u) != 0)
              {
                v71 = *(const char **)(v245 + 16);
                v70 = *(_QWORD *)(v245 + 24);
              }
              *(_QWORD *)v69 = v64;
              *(_OWORD *)(v69 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
              *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
              *(_OWORD *)(v69 + 24) = v253;
              v253 = 0uLL;
              *(_QWORD *)(v69 + 40) = v71;
              *(_QWORD *)(v69 + 48) = v70;
              *(_BYTE *)(v69 + 56) = 16;
              *(_QWORD *)&v264 = 0;
              object.__r_.__value_.__r.__words[0] = v69;
              (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v23 + 24) + 40))(*(_QWORD *)(v23 + 24), &object);
              v72 = v249;
              v73 = object.__r_.__value_.__r.__words[0];
              object.__r_.__value_.__r.__words[0] = 0;
              v74 = v246;
              if (v73)
              {
                v75 = *(std::__shared_weak_count **)(v73 + 32);
                if (v75)
                {
                  v76 = (unint64_t *)&v75->__shared_owners_;
                  do
                    v77 = __ldaxr(v76);
                  while (__stlxr(v77 - 1, v76));
                  if (!v77)
                  {
                    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                    std::__shared_weak_count::__release_weak(v75);
                  }
                }
                v78 = *(std::__shared_weak_count **)(v73 + 16);
                if (v78)
                {
                  v79 = (unint64_t *)&v78->__shared_owners_;
                  do
                    v80 = __ldaxr(v79);
                  while (__stlxr(v80 - 1, v79));
                  if (!v80)
                  {
                    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                    std::__shared_weak_count::__release_weak(v78);
                  }
                }
                MEMORY[0x227684CE8](v73, 0x10F0C40B62ED6C6);
                v81 = v264;
                *(_QWORD *)&v264 = 0;
                if (v81)
                {
                  v82 = *(std::__shared_weak_count **)(v81 + 32);
                  if (v82)
                  {
                    v83 = (unint64_t *)&v82->__shared_owners_;
                    do
                      v84 = __ldaxr(v83);
                    while (__stlxr(v84 - 1, v83));
                    if (!v84)
                    {
                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                      std::__shared_weak_count::__release_weak(v82);
                    }
                  }
                  v85 = *(std::__shared_weak_count **)(v81 + 16);
                  if (v85)
                  {
                    v86 = (unint64_t *)&v85->__shared_owners_;
                    do
                      v87 = __ldaxr(v86);
                    while (__stlxr(v87 - 1, v86));
                    if (!v87)
                    {
                      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                      std::__shared_weak_count::__release_weak(v85);
                    }
                  }
                  MEMORY[0x227684CE8](v81, 0x10F0C40B62ED6C6);
                }
              }
              if (*((_QWORD *)&v253 + 1))
              {
                v88 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
                do
                  v89 = __ldaxr(v88);
                while (__stlxr(v89 - 1, v88));
                if (!v89)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v253 + 1) + 16))(*((_QWORD *)&v253 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v253 + 1));
                }
              }
              if (__p.__r_.__value_.__r.__words[2])
              {
                v90 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                do
                  v91 = __ldaxr(v90);
                while (__stlxr(v91 - 1, v90));
                if (!v91)
                {
                  (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__r.__words[2] + 16))(__p.__r_.__value_.__r.__words[2]);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2]);
                }
              }
            }
            else
            {
              os_log_type_enabled(v49, OS_LOG_TYPE_ERROR);
              LODWORD(object.__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)__s;
              WORD2(object.__r_.__value_.__r.__words[1]) = 2080;
              *(const char **)((char *)&object.__r_.__value_.__r.__words[1] + 6) = v288[0];
              HIWORD(object.__r_.__value_.__r.__words[2]) = 2080;
              v271 = (unint64_t)v261;
              v92 = (void *)_os_log_send_and_compose_impl();
              v72 = v249;
              v74 = v246;
              if (v92)
                free(v92);
            }
            if (SHIBYTE(v269) < 0)
            {
              operator delete(v268);
              if (!v74)
              {
LABEL_169:
                sub_223182C08((uint64_t)v281);
                v96 = (std::__shared_weak_count *)v285;
                if (!v285)
                  goto LABEL_295;
                v97 = (unint64_t *)(v285 + 8);
                do
                  v98 = __ldaxr(v97);
                while (__stlxr(v98 - 1, v97));
LABEL_293:
                if (!v98)
                {
                  ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                  std::__shared_weak_count::__release_weak(v96);
                }
                goto LABEL_295;
              }
            }
            else if (!v74)
            {
              goto LABEL_169;
            }
            v93 = *v72;
            sub_223CB8F80((__int128 *)a3);
            if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_object = &object;
            else
              p_object = (std::string *)object.__r_.__value_.__r.__words[0];
            if (*(char *)(v6 + 23) >= 0)
              v95 = (const char *)v6;
            else
              v95 = *(const char **)v6;
            sub_22322C138((uint64_t)v281, "Overriding variable \"%s\" with value %s from key \"%s\"", v93, (const char *)p_object, v95);
            if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
              operator delete(object.__r_.__value_.__l.__data_);
            sub_223182C08((uint64_t)v281);
            goto LABEL_169;
          }
        }
        memmove(v46, v28, v29);
        goto LABEL_88;
      }
    }
    memmove(p_size, v41, v42);
    goto LABEL_80;
  }
  if (sub_22452B568(a1, v6))
  {
    sub_224527BAC(v6, (CFStringRef *)&object);
    sub_223CC1B5C((uint64_t)&v268, a1, object.__r_.__value_.__l.__data_);
    size = (std::__shared_weak_count *)object.__r_.__value_.__l.__size_;
    if (object.__r_.__value_.__l.__size_)
    {
      v9 = (unint64_t *)(object.__r_.__value_.__l.__size_ + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    sub_223CA9D94(v288);
    if (**((int **)v288[0] + 7) > 5)
      goto LABEL_289;
    v11 = *((unsigned __int8 *)v288[0] + 72);
    v12 = sub_22322F254((uint64_t)v288[0], "OSLogSurrogateAppender", 1, 0);
    v13 = v12;
    if (!v11 && v12 == 0)
      goto LABEL_289;
    *(_QWORD *)v281 = v288;
    *(std::chrono::steady_clock::time_point *)&v281[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v281[16] = std::chrono::system_clock::now();
    LODWORD(v282) = 5;
    *((_QWORD *)&v282 + 1) = "unknown file";
    LODWORD(v283) = 96;
    *((_QWORD *)&v284 + 1) = 0;
    v285 = 0;
    *(_QWORD *)&v284 = "unknown function";
    if (*(char *)(v6 + 23) >= 0)
      v15 = (char *)v6;
    else
      v15 = *(char **)v6;
    LODWORD(v271) = 0;
    sub_223CC1C9C((uint64_t)&object, (CFTypeRef *)&v268);
    if ((_DWORD)v271 == -1)
      sub_22316DD70();
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v264;
    ((void (*)(void **__return_ptr, std::string *, std::string *))off_24EC63160[v271])(__dst, &__p, &object);
    if ((_DWORD)v271 != -1)
      ((void (*)(std::string *, std::string *))off_24EC63148[v271])(&__p, &object);
    v16 = __dst;
    if (v260 < 0)
      v16 = (void **)__dst[0];
    v261 = (int **)v16;
    sub_223CC3C0C();
    if (byte_2540CDD37 >= 0)
      v17 = (const char *)&xmmword_2540CDD20;
    else
      v17 = (const char *)xmmword_2540CDD20;
    v258 = v17;
    v18 = **(_QWORD **)v281;
    v248 = **(_QWORD **)v281;
    if (*(char *)(**(_QWORD **)v281 + 39) < 0)
    {
      v20 = *(const char **)(v18 + 16);
      v19 = *(_QWORD *)(v18 + 24);
    }
    else
    {
      v19 = *(unsigned __int8 *)(**(_QWORD **)v281 + 39);
      v20 = (const char *)(v18 + 16);
    }
    v247 = v18 + 16;
    v101 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v101 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
      if ((_BYTE)v271 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
        operator delete(object.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v102 = (const char *)&xmmword_255788F40;
    else
      v102 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v103 = byte_255788F57;
    else
      v103 = *((_QWORD *)&xmmword_255788F40 + 1);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v102, v20);
    v104 = &object.__r_.__value_.__l.__size_;
    if (v103 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v103 >= 0x17)
    {
      v105 = v11;
      v106 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v103 | 7) != 0x17)
        v106 = v103 | 7;
      v107 = v106 + 1;
      v104 = (std::string::size_type *)operator new(v106 + 1);
      object.__r_.__value_.__r.__words[2] = v103;
      v271 = v107 | 0x8000000000000000;
      object.__r_.__value_.__l.__size_ = (std::string::size_type)v104;
      v11 = v105;
    }
    else
    {
      HIBYTE(v271) = v103;
      if (!v103)
      {
LABEL_192:
        *((_BYTE *)v104 + v103) = 0;
        LOBYTE(v272[0]) = 1;
        v108 = &v272[1];
        if (v19 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v19 >= 0x17)
        {
          v109 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v109 = v19 | 7;
          v110 = v109 + 1;
          v108 = (void **)operator new(v109 + 1);
          v273 = v19;
          *(_QWORD *)&v274 = v110 | 0x8000000000000000;
          v272[1] = v108;
        }
        else
        {
          BYTE7(v274) = v19;
          if (!v19)
            goto LABEL_200;
        }
        memmove(v108, v20, v19);
LABEL_200:
        *((_BYTE *)v108 + v19) = 0;
        BYTE8(v274) = 1;
        v111 = object.__r_.__value_.__r.__words[0];
        if (SBYTE7(v274) < 0)
          operator delete(v272[1]);
        if (LOBYTE(v272[0]) && SHIBYTE(v271) < 0)
          operator delete((void *)object.__r_.__value_.__l.__size_);
        if (object.__r_.__value_.__r.__words[0])
          os_release(object.__r_.__value_.__l.__data_);
        if (v13 && *(_QWORD *)(v13 + 24))
        {
          v112 = _os_log_pack_size();
          v113 = (std::__shared_weak_count_vtbl *)operator new(v112, (std::align_val_t)8uLL);
          v114 = (std::__shared_weak_count *)operator new();
          v114->__shared_owners_ = 0;
          v115 = (unint64_t *)&v114->__shared_owners_;
          v114->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v114->__shared_weak_owners_ = 0;
          v114[1].__vftable = v113;
          *(_QWORD *)&v264 = v113;
          *((_QWORD *)&v264 + 1) = v113;
          v266 = 0;
          v267 = 0;
          v265 = v114;
          sub_223CC18F4((uint64_t)&object, v15, (const char **)&v261, &v258);
          v116 = (char *)operator new(0x68uLL);
          v117 = (std::__shared_weak_count *)v116;
          *((_QWORD *)v116 + 3) = off_24EC206F8;
          *(_QWORD *)v116 = &off_24EC206A8;
          *((_QWORD *)v116 + 6) = v271;
          v118 = v275;
          *((_QWORD *)v116 + 9) = v273;
          *((_QWORD *)v116 + 1) = 0;
          v119 = (unint64_t *)(v116 + 8);
          *((_QWORD *)v116 + 2) = 0;
          *((_OWORD *)v116 + 2) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
          *(_OWORD *)(v116 + 56) = *(_OWORD *)v272;
          *((_QWORD *)v116 + 12) = v118;
          *((_OWORD *)v116 + 5) = v274;
          v266 = v116 + 24;
          v267 = (std::__shared_weak_count *)v116;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v113;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v114;
          do
            v120 = __ldxr(v115);
          while (__stxr(v120 + 1, v115));
          *(_QWORD *)&v253 = v116 + 24;
          *((_QWORD *)&v253 + 1) = v116;
          do
            v121 = __ldxr(v119);
          while (__stxr(v121 + 1, v119));
          v254 = v116 + 24;
          do
            v122 = __ldaxr(v119);
          while (__stlxr(v122 - 1, v119));
          if (!v122)
          {
            (*(void (**)(char *))(*(_QWORD *)v116 + 16))(v116);
            std::__shared_weak_count::__release_weak(v117);
          }
          v123 = v11;
          v124 = v265;
          if (v265)
          {
            v125 = (unint64_t *)&v265->__shared_owners_;
            do
              v126 = __ldaxr(v125);
            while (__stlxr(v126 - 1, v125));
            if (!v126)
            {
              ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
              std::__shared_weak_count::__release_weak(v124);
            }
          }
          v127 = __p.__r_.__value_.__r.__words[0];
          if (v254[31] >= 0)
            v128 = v254 + 8;
          else
            v128 = (char *)*((_QWORD *)v254 + 1);
          if (v254[55] >= 0)
            v129 = v254 + 32;
          else
            v129 = (char *)*((_QWORD *)v254 + 4);
          if (v254[79] >= 0)
            v130 = v254 + 56;
          else
            v130 = (char *)*((_QWORD *)v254 + 7);
          v131 = _os_log_pack_fill();
          *(_DWORD *)v131 = 136315650;
          *(_QWORD *)(v131 + 4) = v128;
          *(_WORD *)(v131 + 12) = 2080;
          *(_QWORD *)(v131 + 14) = v129;
          *(_WORD *)(v131 + 22) = 2080;
          *(_QWORD *)(v131 + 24) = v130;
          v132 = operator new();
          v133 = *(unsigned __int8 *)(v248 + 39);
          v134 = v247;
          if ((v133 & 0x80u) != 0)
          {
            v134 = *(_QWORD *)(v248 + 16);
            v133 = *(_QWORD *)(v248 + 24);
          }
          *(_QWORD *)v132 = v127;
          *(_OWORD *)(v132 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
          *(_OWORD *)(v132 + 24) = v253;
          v253 = 0uLL;
          *(_QWORD *)(v132 + 40) = v134;
          *(_QWORD *)(v132 + 48) = v133;
          *(_BYTE *)(v132 + 56) = 16;
          *(_QWORD *)&v264 = 0;
          object.__r_.__value_.__r.__words[0] = v132;
          (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v13 + 24) + 40))(*(_QWORD *)(v13 + 24), &object);
          v11 = v123;
          v135 = object.__r_.__value_.__r.__words[0];
          object.__r_.__value_.__r.__words[0] = 0;
          if (v135)
          {
            v136 = *(std::__shared_weak_count **)(v135 + 32);
            if (v136)
            {
              v137 = (unint64_t *)&v136->__shared_owners_;
              do
                v138 = __ldaxr(v137);
              while (__stlxr(v138 - 1, v137));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                std::__shared_weak_count::__release_weak(v136);
              }
            }
            v139 = *(std::__shared_weak_count **)(v135 + 16);
            if (v139)
            {
              v140 = (unint64_t *)&v139->__shared_owners_;
              do
                v141 = __ldaxr(v140);
              while (__stlxr(v141 - 1, v140));
              if (!v141)
              {
                ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                std::__shared_weak_count::__release_weak(v139);
              }
            }
            MEMORY[0x227684CE8](v135, 0x10F0C40B62ED6C6);
            v142 = v264;
            *(_QWORD *)&v264 = 0;
            if (v142)
            {
              v143 = *(std::__shared_weak_count **)(v142 + 32);
              if (v143)
              {
                v144 = (unint64_t *)&v143->__shared_owners_;
                do
                  v145 = __ldaxr(v144);
                while (__stlxr(v145 - 1, v144));
                if (!v145)
                {
                  ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                  std::__shared_weak_count::__release_weak(v143);
                }
              }
              v146 = *(std::__shared_weak_count **)(v142 + 16);
              if (v146)
              {
                v147 = (unint64_t *)&v146->__shared_owners_;
                do
                  v148 = __ldaxr(v147);
                while (__stlxr(v148 - 1, v147));
                if (!v148)
                {
                  ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                  std::__shared_weak_count::__release_weak(v146);
                }
              }
              MEMORY[0x227684CE8](v142, 0x10F0C40B62ED6C6);
            }
          }
          v149 = (std::__shared_weak_count *)*((_QWORD *)&v253 + 1);
          if (*((_QWORD *)&v253 + 1))
          {
            v150 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
            do
              v151 = __ldaxr(v150);
            while (__stlxr(v151 - 1, v150));
            if (!v151)
            {
              ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
              std::__shared_weak_count::__release_weak(v149);
            }
          }
          v152 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
          if (__p.__r_.__value_.__r.__words[2])
          {
            v153 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
            do
              v154 = __ldaxr(v153);
            while (__stlxr(v154 - 1, v153));
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
              std::__shared_weak_count::__release_weak(v152);
            }
          }
        }
        else
        {
          os_log_type_enabled(v111, OS_LOG_TYPE_ERROR);
          LODWORD(object.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
          WORD2(object.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&object.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v261;
          HIWORD(object.__r_.__value_.__r.__words[2]) = 2080;
          v271 = (unint64_t)v258;
          v155 = (void *)_os_log_send_and_compose_impl();
          if (v155)
            free(v155);
        }
        if (SHIBYTE(v260) < 0)
          operator delete(__dst[0]);
        if (v11)
        {
          if (*(char *)(v6 + 23) < 0)
            v6 = *(_QWORD *)v6;
          LODWORD(v271) = 0;
          sub_223CC1C9C((uint64_t)&object, (CFTypeRef *)&v268);
          if ((_DWORD)v271 == -1)
            sub_22316DD70();
          *(_QWORD *)&v264 = __dst;
          ((void (*)(std::string *__return_ptr, __int128 *, std::string *))off_24EC63160[v271])(&__p, &v264, &object);
          if ((_DWORD)v271 != -1)
            ((void (*)(__int128 *, std::string *))off_24EC63148[v271])(&v264, &object);
          v156 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          v157 = __p.__r_.__value_.__r.__words[0];
          sub_223CC3C0C();
          p_p = &__p;
          if (v156 < 0)
            p_p = (std::string *)v157;
          if (byte_2540CDD37 >= 0)
            v159 = (const char *)&xmmword_2540CDD20;
          else
            v159 = (const char *)xmmword_2540CDD20;
          sub_22322C138((uint64_t)v281, "Error while getting value for key \"%s\" and value %s expecting type %s", (const char *)v6, (const char *)p_p, v159);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          sub_223182C08((uint64_t)v281);
        }
        sub_223182C08((uint64_t)v281);
        v160 = (std::__shared_weak_count *)v285;
        if (v285)
        {
          v161 = (unint64_t *)(v285 + 8);
          do
            v162 = __ldaxr(v161);
          while (__stlxr(v162 - 1, v161));
          if (!v162)
          {
            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
            std::__shared_weak_count::__release_weak(v160);
          }
        }
LABEL_289:
        if (!BYTE8(v269))
          goto LABEL_295;
        v96 = (std::__shared_weak_count *)v269;
        if (!(_QWORD)v269)
          goto LABEL_295;
        v163 = (unint64_t *)(v269 + 8);
        do
          v98 = __ldaxr(v163);
        while (__stlxr(v98 - 1, v163));
        goto LABEL_293;
      }
    }
    memmove(v104, v102, v103);
    goto LABEL_192;
  }
  sub_223CA9D94(&v261);
  if (*v261[7] > 3)
    goto LABEL_295;
  v31 = *((unsigned __int8 *)v261 + 72);
  v32 = sub_22322F254((uint64_t)v261, "OSLogSurrogateAppender", 1, 0);
  v33 = v32;
  if (!v31 && !v32)
    goto LABEL_295;
  sub_223195210((uint64_t)&object);
  *(_QWORD *)v281 = "Key not found in dictionary \"";
  *(_QWORD *)&v281[8] = 29;
  v34 = *(unsigned __int8 *)(v6 + 23);
  if ((v34 & 0x80u) == 0)
    v35 = (const char *)v6;
  else
    v35 = *(const char **)v6;
  if ((v34 & 0x80u) != 0)
    v34 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)&v281[16] = v35;
  *(_QWORD *)&v282 = v34;
  *((_QWORD *)&v282 + 1) = "\" for variable \"";
  v283 = 16;
  v284 = *(_OWORD *)a4;
  v285 = "\"";
  v286 = 1;
  sub_2231A9820((uint64_t)v281, (uint64_t)&v287, 0, 0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &__p;
  else
    v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v37 = __p.__r_.__value_.__l.__size_;
  sub_2231813E8(&object.__r_.__value_.__r.__words[2], (uint64_t)v36, v37);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v279 & 0x10) != 0)
  {
    v99 = v278;
    if (v278 < v275)
    {
      v278 = v275;
      v99 = v275;
    }
    v100 = (const void **)&v274 + 1;
  }
  else
  {
    if ((v279 & 8) == 0)
    {
      v38 = 0;
      HIBYTE(v260) = 0;
      v39 = __dst;
      goto LABEL_308;
    }
    v100 = (const void **)&v272[1];
    v99 = v274;
  }
  v164 = *v100;
  v38 = v99 - (_QWORD)*v100;
  if (v38 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v38 >= 0x17)
  {
    v165 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v165 = v38 | 7;
    v166 = v165 + 1;
    v39 = operator new(v165 + 1);
    __dst[1] = (void *)v38;
    v260 = v166 | 0x8000000000000000;
    __dst[0] = v39;
    goto LABEL_307;
  }
  HIBYTE(v260) = v99 - *(_BYTE *)v100;
  v39 = __dst;
  if (v38)
LABEL_307:
    memmove(v39, v164, v38);
LABEL_308:
  *((_BYTE *)v39 + v38) = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v261;
  __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v253) = 3;
  *((_QWORD *)&v253 + 1) = "unknown file";
  LODWORD(v254) = 99;
  v256 = 0;
  v257 = 0;
  v255 = "unknown function";
  if (v260 >= 0)
    v167 = __dst;
  else
    v167 = (void **)__dst[0];
  v168 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
  v169 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
  if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v171 = *(const char **)(v168 + 16);
    v170 = *(_QWORD *)(v168 + 24);
  }
  else
  {
    v170 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
    v171 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
  }
  v172 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v172 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v281);
    sub_223199C58("com.apple.cv3d", (unint64_t)v281, &xmmword_255788F40);
    if ((_BYTE)v282 && (v281[23] & 0x80000000) != 0)
      operator delete(*(void **)v281);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v173 = (const char *)&xmmword_255788F40;
  else
    v173 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v174 = byte_255788F57;
  else
    v174 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v281 = os_log_create(v173, v171);
  v175 = &v281[8];
  if (v174 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v174 >= 0x17)
  {
    __sa = (char *)v171;
    v176 = v168;
    v177 = v33;
    v178 = v167;
    v179 = v31;
    v180 = v169;
    v181 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v174 | 7) != 0x17)
      v181 = v174 | 7;
    v182 = v181 + 1;
    v175 = operator new(v181 + 1);
    *(_QWORD *)&v281[16] = v174;
    *(_QWORD *)&v282 = v182 | 0x8000000000000000;
    *(_QWORD *)&v281[8] = v175;
    v169 = v180;
    v31 = v179;
    v167 = v178;
    v33 = v177;
    v168 = v176;
    v171 = __sa;
    goto LABEL_328;
  }
  BYTE7(v282) = v174;
  if (v174)
LABEL_328:
    memmove(v175, v173, v174);
  v175[v174] = 0;
  BYTE8(v282) = 1;
  v183 = &v283;
  if (v170 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v170 >= 0x17)
  {
    v184 = (v170 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v170 | 7) != 0x17)
      v184 = v170 | 7;
    v185 = v184 + 1;
    v183 = (uint64_t *)operator new(v184 + 1);
    *(_QWORD *)&v284 = v170;
    *((_QWORD *)&v284 + 1) = v185 | 0x8000000000000000;
    v283 = (uint64_t)v183;
    goto LABEL_336;
  }
  HIBYTE(v284) = v170;
  if (v170)
LABEL_336:
    memmove(v183, v171, v170);
  *((_BYTE *)v183 + v170) = 0;
  LOBYTE(v285) = 1;
  v186 = *(NSObject **)v281;
  if (SHIBYTE(v284) < 0)
    operator delete((void *)v283);
  if (BYTE8(v282) && SBYTE7(v282) < 0)
    operator delete(*(void **)&v281[8]);
  if (*(_QWORD *)v281)
    os_release(*(void **)v281);
  if (v33 && *(_QWORD *)(v33 + 24))
  {
    v187 = _os_log_pack_size();
    v188 = (std::__shared_weak_count_vtbl *)operator new(v187, (std::align_val_t)8uLL);
    v189 = (std::__shared_weak_count *)operator new();
    v189->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v189->__shared_owners_ = 0;
    v189->__shared_weak_owners_ = 0;
    v189[1].__vftable = v188;
    *(_QWORD *)&v264 = v188;
    *((_QWORD *)&v264 + 1) = v188;
    v266 = 0;
    v267 = 0;
    v265 = v189;
    v190 = strlen((const char *)v167);
    if (v190 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v191 = v190;
    if (v190 >= 0x17)
    {
      v194 = (v190 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v190 | 7) != 0x17)
        v194 = v190 | 7;
      v195 = v194 + 1;
      v192 = operator new(v194 + 1);
      *(_QWORD *)&v269 = v191;
      *((_QWORD *)&v269 + 1) = v195 | 0x8000000000000000;
      v268 = v192;
    }
    else
    {
      HIBYTE(v269) = v190;
      v192 = &v268;
      if (!v190)
      {
LABEL_356:
        *((_BYTE *)v192 + v191) = 0;
        v196 = v268;
        v288[0] = (const char *)v269;
        *(const char **)((char *)v288 + 7) = *(const char **)((char *)&v269 + 7);
        v197 = HIBYTE(v269);
        v198 = (char *)operator new(0x38uLL);
        *((_QWORD *)v198 + 1) = 0;
        *((_QWORD *)v198 + 2) = 0;
        *((_QWORD *)v198 + 3) = off_24EC1FA48;
        *(_QWORD *)v198 = &off_24EC1F9F8;
        v199 = v288[0];
        *((_QWORD *)v198 + 4) = v196;
        *((_QWORD *)v198 + 5) = v199;
        *(const char **)(v198 + 47) = *(const char **)((char *)v288 + 7);
        v198[55] = v197;
        memset(v288, 0, 15);
        v200 = v267;
        v266 = v198 + 24;
        v267 = (std::__shared_weak_count *)v198;
        if (v200)
        {
          v201 = (unint64_t *)&v200->__shared_owners_;
          do
            v202 = __ldaxr(v201);
          while (__stlxr(v202 - 1, v201));
          if (!v202)
          {
            ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
            std::__shared_weak_count::__release_weak(v200);
          }
        }
        *(_OWORD *)v281 = v264;
        v203 = (uint64_t)v266;
        *(_QWORD *)&v281[16] = v265;
        if (v265)
        {
          v204 = (unint64_t *)&v265->__shared_owners_;
          do
            v205 = __ldxr(v204);
          while (__stxr(v205 + 1, v204));
        }
        v206 = v267;
        *(_QWORD *)&v282 = v203;
        *((_QWORD *)&v282 + 1) = v267;
        if (v267)
        {
          v207 = (unint64_t *)&v267->__shared_owners_;
          do
            v208 = __ldxr(v207);
          while (__stxr(v208 + 1, v207));
          v283 = v203;
          do
            v209 = __ldaxr(v207);
          while (__stlxr(v209 - 1, v207));
          if (!v209)
          {
            ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
            std::__shared_weak_count::__release_weak(v206);
          }
        }
        else
        {
          v283 = v203;
        }
        v210 = v265;
        if (v265)
        {
          v211 = (unint64_t *)&v265->__shared_owners_;
          do
            v212 = __ldaxr(v211);
          while (__stlxr(v212 - 1, v211));
          if (!v212)
          {
            ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
            std::__shared_weak_count::__release_weak(v210);
          }
        }
        v213 = *(_QWORD *)v281;
        if (*(char *)(v283 + 31) >= 0)
          v214 = (char *)(v283 + 8);
        else
          v214 = *(char **)(v283 + 8);
        v215 = _os_log_pack_fill();
        *(_DWORD *)v215 = 136315138;
        *(_QWORD *)(v215 + 4) = v214;
        v216 = operator new();
        v217 = *(unsigned __int8 *)(v168 + 39);
        if ((v217 & 0x80u) == 0)
          v218 = v169;
        else
          v218 = *(_QWORD *)(v168 + 16);
        if ((v217 & 0x80u) != 0)
          v217 = *(_QWORD *)(v168 + 24);
        *(_QWORD *)v216 = v213;
        *(_OWORD *)(v216 + 8) = *(_OWORD *)&v281[8];
        *(_QWORD *)&v281[8] = 0;
        *(_QWORD *)&v281[16] = 0;
        *(_OWORD *)(v216 + 24) = v282;
        v282 = 0uLL;
        *(_QWORD *)(v216 + 40) = v218;
        *(_QWORD *)(v216 + 48) = v217;
        *(_BYTE *)(v216 + 56) = 1;
        v268 = 0;
        *(_QWORD *)&v264 = v216;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v33 + 24) + 40))(*(_QWORD *)(v33 + 24), &v264);
        v219 = v264;
        *(_QWORD *)&v264 = 0;
        if (v219)
        {
          v220 = *(std::__shared_weak_count **)(v219 + 32);
          if (v220)
          {
            v221 = (unint64_t *)&v220->__shared_owners_;
            do
              v222 = __ldaxr(v221);
            while (__stlxr(v222 - 1, v221));
            if (!v222)
            {
              ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
              std::__shared_weak_count::__release_weak(v220);
            }
          }
          v223 = *(std::__shared_weak_count **)(v219 + 16);
          if (v223)
          {
            v224 = (unint64_t *)&v223->__shared_owners_;
            do
              v225 = __ldaxr(v224);
            while (__stlxr(v225 - 1, v224));
            if (!v225)
            {
              ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
              std::__shared_weak_count::__release_weak(v223);
            }
          }
          MEMORY[0x227684CE8](v219, 0x10F0C40B62ED6C6);
          v226 = v268;
          v268 = 0;
          if (v226)
          {
            v227 = (std::__shared_weak_count *)*((_QWORD *)v226 + 4);
            if (v227)
            {
              v228 = (unint64_t *)&v227->__shared_owners_;
              do
                v229 = __ldaxr(v228);
              while (__stlxr(v229 - 1, v228));
              if (!v229)
              {
                ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                std::__shared_weak_count::__release_weak(v227);
              }
            }
            v230 = (std::__shared_weak_count *)*((_QWORD *)v226 + 2);
            if (v230)
            {
              v231 = (unint64_t *)&v230->__shared_owners_;
              do
                v232 = __ldaxr(v231);
              while (__stlxr(v232 - 1, v231));
              if (!v232)
              {
                ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                std::__shared_weak_count::__release_weak(v230);
              }
            }
            MEMORY[0x227684CE8](v226, 0x10F0C40B62ED6C6);
          }
        }
        v233 = (std::__shared_weak_count *)*((_QWORD *)&v282 + 1);
        if (*((_QWORD *)&v282 + 1))
        {
          v234 = (unint64_t *)(*((_QWORD *)&v282 + 1) + 8);
          do
            v235 = __ldaxr(v234);
          while (__stlxr(v235 - 1, v234));
          if (!v235)
          {
            ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
            std::__shared_weak_count::__release_weak(v233);
          }
        }
        v236 = *(std::__shared_weak_count **)&v281[16];
        if (*(_QWORD *)&v281[16])
        {
          v237 = (unint64_t *)(*(_QWORD *)&v281[16] + 8);
          do
            v238 = __ldaxr(v237);
          while (__stlxr(v238 - 1, v237));
          if (!v238)
          {
            ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
            std::__shared_weak_count::__release_weak(v236);
          }
        }
        goto LABEL_418;
      }
    }
    memcpy(v192, v167, v191);
    goto LABEL_356;
  }
  os_log_type_enabled(v186, OS_LOG_TYPE_INFO);
  *(_DWORD *)v281 = 136315138;
  *(_QWORD *)&v281[4] = v167;
  v193 = (void *)_os_log_send_and_compose_impl();
  if (v193)
    free(v193);
LABEL_418:
  if (v31)
  {
    v239 = __dst;
    if (v260 < 0)
      v239 = (void **)__dst[0];
    sub_22322C138((uint64_t)&__p, "%s", (const char *)v239);
    sub_223182C08((uint64_t)&__p);
  }
  sub_223182C08((uint64_t)&__p);
  v240 = v257;
  if (v257)
  {
    v241 = (unint64_t *)&v257->__shared_owners_;
    do
      v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }
  if (SHIBYTE(v260) < 0)
    operator delete(__dst[0]);
  object.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
  v243 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words
                            + *(_QWORD *)(object.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                                 + 64);
  object.__r_.__value_.__r.__words[2] = v243;
  v271 = MEMORY[0x24BEDB848] + 16;
  if (v277 < 0)
    operator delete(v276);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](&v280);
  if (v263)
  {
LABEL_296:
    if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v262.__r_.__value_.__l.__data_);
  }
}

void sub_223CB8B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *__p,void *a50,int a51,__int16 a52,char a53,char a54,char a55)
{
  uint64_t v55;

  if (a55 && a54 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  if (a32 < 0)
    operator delete(a27);
  sub_223182DAC(v55 - 208);
  sub_223224234((uint64_t)&a46);
  if (a40)
  {
    if (a39 < 0)
    {
      operator delete(a34);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223CB8F80(__int128 *a1)
{
  int v1;
  uint64_t result;
  __int128 v3;
  uint64_t v4;
  int v5;
  char v6;
  char *v7;

  v5 = 0;
  if (*((_BYTE *)a1 + 24))
  {
    v5 = -1;
    if (*((char *)a1 + 23) < 0)
    {
      sub_223197FA4(&v3, *(void **)a1, *((_QWORD *)a1 + 1));
    }
    else
    {
      v3 = *a1;
      v4 = *((_QWORD *)a1 + 2);
    }
    v1 = 1;
    v5 = 1;
  }
  else
  {
    sub_2231A0D14(&v3, "nullopt");
    v1 = v5;
    if (v5 == -1)
      sub_22316DD70();
  }
  v7 = &v6;
  result = ((uint64_t (*)(char **, __int128 *))off_24EC63160[v1])(&v7, &v3);
  if (v5 != -1)
    return ((uint64_t (*)(char **, __int128 *))off_24EC63148[v5])(&v7, &v3);
  return result;
}

void sub_223CB9054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223CB906C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223CB9080(uint64_t a1, uint64_t a2, uint64_t a3, const char **a4)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  size_t v18;
  unsigned __int8 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  char *v27;
  void **v28;
  const char *v29;
  uint64_t v30;
  size_t v31;
  const char *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  char *v38;
  std::string *v39;
  std::string::size_type size;
  size_t v41;
  void *v42;
  unsigned __int8 v43;
  const char *v44;
  size_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  size_t v53;
  std::__shared_weak_count_vtbl *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::string::size_type v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  const char **v75;
  uint64_t v76;
  int v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  void *v97;
  const char *v98;
  std::string *v99;
  const char *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  const void **v105;
  unsigned __int8 v106;
  const char *v107;
  size_t v108;
  _BYTE *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  void **v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  size_t v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *p_shared_owners;
  char *v121;
  std::__shared_weak_count *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::string::size_type v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  void *v159;
  int v160;
  std::string::size_type v161;
  std::string *p_p;
  const char *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t *v167;
  const void *v168;
  uint64_t v169;
  uint64_t v170;
  void **v171;
  uint64_t v172;
  uint64_t v173;
  size_t v174;
  const char *v175;
  unsigned __int8 v176;
  const char *v177;
  size_t v178;
  _BYTE *v179;
  uint64_t v180;
  unint64_t v181;
  void **v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  NSObject *v190;
  size_t v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  size_t v194;
  size_t v195;
  void *v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  char v201;
  char *v202;
  const char *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  void *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  void **v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  const char *v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  const char **v252;
  uint64_t v253;
  char *__s;
  int __sa;
  char *__sb;
  std::string __p;
  __int128 v258;
  char *v259;
  const char *v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  const char *v263;
  void *__dst[2];
  int64_t v265;
  int **v266;
  __int128 v267;
  std::__shared_weak_count *v268;
  char *v269;
  std::__shared_weak_count *v270;
  void *v271;
  __int128 v272;
  _BYTE object[24];
  unint64_t v274;
  void *v275[2];
  size_t v276;
  __int128 v277;
  unint64_t v278;
  void *v279;
  char v280;
  unint64_t v281;
  int v282;
  uint64_t v283;
  _BYTE v284[24];
  __int128 v285;
  uint64_t v286;
  __int128 v287;
  const char *v288;
  uint64_t v289;
  uint64_t v290;
  const char *v291[5];

  v6 = a2;
  v291[2] = *(const char **)MEMORY[0x24BDAC8D0];
  v8 = sub_223CC13B4(a1, a2);
  if ((v8 & 0xFF00000000) == 0)
  {
    if (sub_22452B568(a1, v6))
    {
      sub_224527BAC(v6, (CFStringRef *)object);
      sub_223CC1B5C((uint64_t)&v271, a1, *(void **)object);
      v20 = *(std::__shared_weak_count **)&object[8];
      if (*(_QWORD *)&object[8])
      {
        v21 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      sub_223CA9D94(v291);
      if (**((int **)v291[0] + 7) > 5
        || ((v23 = *((unsigned __int8 *)v291[0] + 72),
             v24 = sub_22322F254((uint64_t)v291[0], "OSLogSurrogateAppender", 1, 0),
             v25 = v24,
             !v23)
          ? (v26 = v24 == 0)
          : (v26 = 0),
            v26))
      {
LABEL_289:
        if (BYTE8(v272))
        {
          v101 = (std::__shared_weak_count *)v272;
          if ((_QWORD)v272)
          {
            v167 = (unint64_t *)(v272 + 8);
            do
              v103 = __ldaxr(v167);
            while (__stlxr(v103 - 1, v167));
LABEL_293:
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
            return;
          }
        }
        return;
      }
      *(_QWORD *)v284 = v291;
      *(std::chrono::steady_clock::time_point *)&v284[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v284[16] = std::chrono::system_clock::now();
      LODWORD(v285) = 5;
      *((_QWORD *)&v285 + 1) = "unknown file";
      LODWORD(v286) = 96;
      *((_QWORD *)&v287 + 1) = 0;
      v288 = 0;
      *(_QWORD *)&v287 = "unknown function";
      if (*(char *)(v6 + 23) >= 0)
        v27 = (char *)v6;
      else
        v27 = *(char **)v6;
      LODWORD(v274) = 0;
      sub_223CC1C9C((uint64_t)object, (CFTypeRef *)&v271);
      if ((_DWORD)v274 == -1)
        sub_22316DD70();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v267;
      ((void (*)(void **__return_ptr, std::string *, _BYTE *))off_24EC63160[v274])(__dst, &__p, object);
      if ((_DWORD)v274 != -1)
        ((void (*)(std::string *, _BYTE *))off_24EC63148[v274])(&__p, object);
      v28 = __dst;
      if (v265 < 0)
        v28 = (void **)__dst[0];
      v266 = (int **)v28;
      sub_223CC4190();
      if (byte_2540CDDAF >= 0)
        v29 = (const char *)&xmmword_2540CDD98;
      else
        v29 = (const char *)xmmword_2540CDD98;
      v263 = v29;
      v30 = **(_QWORD **)v284;
      v253 = **(_QWORD **)v284;
      if (*(char *)(**(_QWORD **)v284 + 39) < 0)
      {
        v32 = *(const char **)(v30 + 16);
        v31 = *(_QWORD *)(v30 + 24);
      }
      else
      {
        v31 = *(unsigned __int8 *)(**(_QWORD **)v284 + 39);
        v32 = (const char *)(v30 + 16);
      }
      v251 = v30 + 16;
      v106 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v106 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v274 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v107 = (const char *)&xmmword_255788F40;
      else
        v107 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v108 = byte_255788F57;
      else
        v108 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v107, v32);
      v109 = &object[8];
      if (v108 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v108 >= 0x17)
      {
        v110 = v23;
        v111 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v108 | 7) != 0x17)
          v111 = v108 | 7;
        v112 = v111 + 1;
        v109 = operator new(v111 + 1);
        *(_QWORD *)&object[16] = v108;
        v274 = v112 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v109;
        v23 = v110;
      }
      else
      {
        HIBYTE(v274) = v108;
        if (!v108)
        {
LABEL_192:
          v109[v108] = 0;
          LOBYTE(v275[0]) = 1;
          v113 = &v275[1];
          if (v31 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v31 >= 0x17)
          {
            v114 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v31 | 7) != 0x17)
              v114 = v31 | 7;
            v115 = v114 + 1;
            v113 = (void **)operator new(v114 + 1);
            v276 = v31;
            *(_QWORD *)&v277 = v115 | 0x8000000000000000;
            v275[1] = v113;
          }
          else
          {
            BYTE7(v277) = v31;
            if (!v31)
              goto LABEL_200;
          }
          memmove(v113, v32, v31);
LABEL_200:
          *((_BYTE *)v113 + v31) = 0;
          BYTE8(v277) = 1;
          v116 = *(NSObject **)object;
          if (SBYTE7(v277) < 0)
            operator delete(v275[1]);
          if (LOBYTE(v275[0]) && SHIBYTE(v274) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v25 && *(_QWORD *)(v25 + 24))
          {
            v117 = _os_log_pack_size();
            v118 = (std::__shared_weak_count_vtbl *)operator new(v117, (std::align_val_t)8uLL);
            v119 = (std::__shared_weak_count *)operator new();
            v119->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v119->__shared_owners_;
            v119->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v119->__shared_weak_owners_ = 0;
            v119[1].__vftable = v118;
            *(_QWORD *)&v267 = v118;
            *((_QWORD *)&v267 + 1) = v118;
            v269 = 0;
            v270 = 0;
            v268 = v119;
            sub_223CC18F4((uint64_t)object, v27, (const char **)&v266, &v263);
            v121 = (char *)operator new(0x68uLL);
            v122 = (std::__shared_weak_count *)v121;
            *((_QWORD *)v121 + 3) = off_24EC206F8;
            *(_QWORD *)v121 = &off_24EC206A8;
            *((_QWORD *)v121 + 6) = v274;
            v123 = v278;
            *((_QWORD *)v121 + 9) = v276;
            *((_QWORD *)v121 + 1) = 0;
            v124 = (unint64_t *)(v121 + 8);
            *((_QWORD *)v121 + 2) = 0;
            *((_OWORD *)v121 + 2) = *(_OWORD *)&object[8];
            *(_OWORD *)(v121 + 56) = *(_OWORD *)v275;
            *((_QWORD *)v121 + 12) = v123;
            *((_OWORD *)v121 + 5) = v277;
            v269 = v121 + 24;
            v270 = (std::__shared_weak_count *)v121;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v118;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v118;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v119;
            do
              v125 = __ldxr(p_shared_owners);
            while (__stxr(v125 + 1, p_shared_owners));
            *(_QWORD *)&v258 = v121 + 24;
            *((_QWORD *)&v258 + 1) = v121;
            do
              v126 = __ldxr(v124);
            while (__stxr(v126 + 1, v124));
            v259 = v121 + 24;
            do
              v127 = __ldaxr(v124);
            while (__stlxr(v127 - 1, v124));
            if (!v127)
            {
              (*(void (**)(char *))(*(_QWORD *)v121 + 16))(v121);
              std::__shared_weak_count::__release_weak(v122);
            }
            __sa = v23;
            v128 = v268;
            if (v268)
            {
              v129 = (unint64_t *)&v268->__shared_owners_;
              do
                v130 = __ldaxr(v129);
              while (__stlxr(v130 - 1, v129));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                std::__shared_weak_count::__release_weak(v128);
              }
            }
            v131 = __p.__r_.__value_.__r.__words[0];
            if (v259[31] >= 0)
              v132 = v259 + 8;
            else
              v132 = (char *)*((_QWORD *)v259 + 1);
            if (v259[55] >= 0)
              v133 = v259 + 32;
            else
              v133 = (char *)*((_QWORD *)v259 + 4);
            if (v259[79] >= 0)
              v134 = v259 + 56;
            else
              v134 = (char *)*((_QWORD *)v259 + 7);
            v135 = _os_log_pack_fill();
            *(_DWORD *)v135 = 136315650;
            *(_QWORD *)(v135 + 4) = v132;
            *(_WORD *)(v135 + 12) = 2080;
            *(_QWORD *)(v135 + 14) = v133;
            *(_WORD *)(v135 + 22) = 2080;
            *(_QWORD *)(v135 + 24) = v134;
            v136 = operator new();
            v137 = *(unsigned __int8 *)(v253 + 39);
            v138 = v251;
            if ((v137 & 0x80u) != 0)
            {
              v138 = *(_QWORD *)(v253 + 16);
              v137 = *(_QWORD *)(v253 + 24);
            }
            *(_QWORD *)v136 = v131;
            *(_OWORD *)(v136 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
            *(_OWORD *)(v136 + 24) = v258;
            v258 = 0uLL;
            *(_QWORD *)(v136 + 40) = v138;
            *(_QWORD *)(v136 + 48) = v137;
            *(_BYTE *)(v136 + 56) = 16;
            *(_QWORD *)&v267 = 0;
            *(_QWORD *)object = v136;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v25 + 24) + 40))(*(_QWORD *)(v25 + 24), object);
            v23 = __sa;
            v139 = *(_QWORD *)object;
            *(_QWORD *)object = 0;
            if (v139)
            {
              v140 = *(std::__shared_weak_count **)(v139 + 32);
              if (v140)
              {
                v141 = (unint64_t *)&v140->__shared_owners_;
                do
                  v142 = __ldaxr(v141);
                while (__stlxr(v142 - 1, v141));
                if (!v142)
                {
                  ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                  std::__shared_weak_count::__release_weak(v140);
                }
              }
              v143 = *(std::__shared_weak_count **)(v139 + 16);
              if (v143)
              {
                v144 = (unint64_t *)&v143->__shared_owners_;
                do
                  v145 = __ldaxr(v144);
                while (__stlxr(v145 - 1, v144));
                if (!v145)
                {
                  ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                  std::__shared_weak_count::__release_weak(v143);
                }
              }
              MEMORY[0x227684CE8](v139, 0x10F0C40B62ED6C6);
              v146 = v267;
              *(_QWORD *)&v267 = 0;
              if (v146)
              {
                v147 = *(std::__shared_weak_count **)(v146 + 32);
                if (v147)
                {
                  v148 = (unint64_t *)&v147->__shared_owners_;
                  do
                    v149 = __ldaxr(v148);
                  while (__stlxr(v149 - 1, v148));
                  if (!v149)
                  {
                    ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                    std::__shared_weak_count::__release_weak(v147);
                  }
                }
                v150 = *(std::__shared_weak_count **)(v146 + 16);
                if (v150)
                {
                  v151 = (unint64_t *)&v150->__shared_owners_;
                  do
                    v152 = __ldaxr(v151);
                  while (__stlxr(v152 - 1, v151));
                  if (!v152)
                  {
                    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                    std::__shared_weak_count::__release_weak(v150);
                  }
                }
                MEMORY[0x227684CE8](v146, 0x10F0C40B62ED6C6);
              }
            }
            v153 = (std::__shared_weak_count *)*((_QWORD *)&v258 + 1);
            if (*((_QWORD *)&v258 + 1))
            {
              v154 = (unint64_t *)(*((_QWORD *)&v258 + 1) + 8);
              do
                v155 = __ldaxr(v154);
              while (__stlxr(v155 - 1, v154));
              if (!v155)
              {
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v153);
              }
            }
            v156 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
            if (__p.__r_.__value_.__r.__words[2])
            {
              v157 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
              do
                v158 = __ldaxr(v157);
              while (__stlxr(v158 - 1, v157));
              if (!v158)
              {
                ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                std::__shared_weak_count::__release_weak(v156);
              }
            }
          }
          else
          {
            os_log_type_enabled(v116, OS_LOG_TYPE_ERROR);
            *(_DWORD *)object = 136315650;
            *(_QWORD *)&object[4] = v27;
            *(_WORD *)&object[12] = 2080;
            *(_QWORD *)&object[14] = v266;
            *(_WORD *)&object[22] = 2080;
            v274 = (unint64_t)v263;
            v159 = (void *)_os_log_send_and_compose_impl();
            if (v159)
              free(v159);
          }
          if (SHIBYTE(v265) < 0)
            operator delete(__dst[0]);
          if (v23)
          {
            if (*(char *)(v6 + 23) < 0)
              v6 = *(_QWORD *)v6;
            LODWORD(v274) = 0;
            sub_223CC1C9C((uint64_t)object, (CFTypeRef *)&v271);
            if ((_DWORD)v274 == -1)
              sub_22316DD70();
            *(_QWORD *)&v267 = __dst;
            ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24EC63160[v274])(&__p, &v267, object);
            if ((_DWORD)v274 != -1)
              ((void (*)(__int128 *, _BYTE *))off_24EC63148[v274])(&v267, object);
            v160 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            v161 = __p.__r_.__value_.__r.__words[0];
            sub_223CC4190();
            p_p = &__p;
            if (v160 < 0)
              p_p = (std::string *)v161;
            if (byte_2540CDDAF >= 0)
              v163 = (const char *)&xmmword_2540CDD98;
            else
              v163 = (const char *)xmmword_2540CDD98;
            sub_22322C138((uint64_t)v284, "Error while getting value for key \"%s\" and value %s expecting type %s", (const char *)v6, (const char *)p_p, v163);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            sub_223182C08((uint64_t)v284);
          }
          sub_223182C08((uint64_t)v284);
          v164 = (std::__shared_weak_count *)v288;
          if (v288)
          {
            v165 = (unint64_t *)(v288 + 8);
            do
              v166 = __ldaxr(v165);
            while (__stlxr(v166 - 1, v165));
            if (!v166)
            {
              ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
              std::__shared_weak_count::__release_weak(v164);
            }
          }
          goto LABEL_289;
        }
      }
      memmove(v109, v107, v108);
      goto LABEL_192;
    }
    sub_223CA9D94(&v266);
    if (*v266[7] > 3)
      return;
    v33 = *((unsigned __int8 *)v266 + 72);
    v34 = sub_22322F254((uint64_t)v266, "OSLogSurrogateAppender", 1, 0);
    v35 = v34;
    if (!v33 && v34 == 0)
      return;
    sub_223195210((uint64_t)object);
    *(_QWORD *)v284 = "Key not found in dictionary \"";
    *(_QWORD *)&v284[8] = 29;
    v37 = *(unsigned __int8 *)(v6 + 23);
    if ((v37 & 0x80u) == 0)
      v38 = (char *)v6;
    else
      v38 = *(char **)v6;
    if ((v37 & 0x80u) != 0)
      v37 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)&v284[16] = v38;
    *(_QWORD *)&v285 = v37;
    *((_QWORD *)&v285 + 1) = "\" for variable \"";
    v286 = 16;
    v287 = *(_OWORD *)a4;
    v288 = "\"";
    v289 = 1;
    sub_2231A9820((uint64_t)v284, (uint64_t)&v290, 0, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = &__p;
    else
      v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_2231813E8(&object[16], (uint64_t)v39, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v282 & 0x10) != 0)
    {
      v104 = v281;
      if (v281 < v278)
      {
        v281 = v278;
        v104 = v278;
      }
      v105 = (const void **)&v277 + 1;
    }
    else
    {
      if ((v282 & 8) == 0)
      {
        v41 = 0;
        HIBYTE(v265) = 0;
        v42 = __dst;
        goto LABEL_304;
      }
      v105 = (const void **)&v275[1];
      v104 = v277;
    }
    v168 = *v105;
    v41 = v104 - (_QWORD)*v105;
    if (v41 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v41 >= 0x17)
    {
      v169 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v41 | 7) != 0x17)
        v169 = v41 | 7;
      v170 = v169 + 1;
      v42 = operator new(v169 + 1);
      __dst[1] = (void *)v41;
      v265 = v170 | 0x8000000000000000;
      __dst[0] = v42;
    }
    else
    {
      HIBYTE(v265) = v104 - *(_BYTE *)v105;
      v42 = __dst;
      if (!v41)
      {
LABEL_304:
        *((_BYTE *)v42 + v41) = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v266;
        __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v258) = 3;
        *((_QWORD *)&v258 + 1) = "unknown file";
        LODWORD(v259) = 99;
        v261 = 0;
        v262 = 0;
        v260 = "unknown function";
        if (v265 >= 0)
          v171 = __dst;
        else
          v171 = (void **)__dst[0];
        v172 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
        v173 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
        if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v175 = *(const char **)(v172 + 16);
          v174 = *(_QWORD *)(v172 + 24);
        }
        else
        {
          v174 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
          v175 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
        }
        v176 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v176 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v284);
          sub_223199C58("com.apple.cv3d", (unint64_t)v284, &xmmword_255788F40);
          if ((_BYTE)v285 && (v284[23] & 0x80000000) != 0)
            operator delete(*(void **)v284);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v177 = (const char *)&xmmword_255788F40;
        else
          v177 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v178 = byte_255788F57;
        else
          v178 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)v284 = os_log_create(v177, v175);
        v179 = &v284[8];
        if (v178 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v178 >= 0x17)
        {
          __sb = (char *)v175;
          v180 = v172;
          v181 = v35;
          v182 = v171;
          v183 = v33;
          v184 = v173;
          v185 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v178 | 7) != 0x17)
            v185 = v178 | 7;
          v186 = v185 + 1;
          v179 = operator new(v185 + 1);
          *(_QWORD *)&v284[16] = v178;
          *(_QWORD *)&v285 = v186 | 0x8000000000000000;
          *(_QWORD *)&v284[8] = v179;
          v173 = v184;
          v33 = v183;
          v171 = v182;
          v35 = v181;
          v172 = v180;
          v175 = __sb;
        }
        else
        {
          BYTE7(v285) = v178;
          if (!v178)
          {
LABEL_325:
            v179[v178] = 0;
            BYTE8(v285) = 1;
            v187 = &v286;
            if (v174 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v174 >= 0x17)
            {
              v188 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v174 | 7) != 0x17)
                v188 = v174 | 7;
              v189 = v188 + 1;
              v187 = (uint64_t *)operator new(v188 + 1);
              *(_QWORD *)&v287 = v174;
              *((_QWORD *)&v287 + 1) = v189 | 0x8000000000000000;
              v286 = (uint64_t)v187;
            }
            else
            {
              HIBYTE(v287) = v174;
              if (!v174)
              {
LABEL_333:
                *((_BYTE *)v187 + v174) = 0;
                LOBYTE(v288) = 1;
                v190 = *(NSObject **)v284;
                if (SHIBYTE(v287) < 0)
                  operator delete((void *)v286);
                if (BYTE8(v285) && SBYTE7(v285) < 0)
                  operator delete(*(void **)&v284[8]);
                if (*(_QWORD *)v284)
                  os_release(*(void **)v284);
                if (!v35 || !*(_QWORD *)(v35 + 24))
                {
                  os_log_type_enabled(v190, OS_LOG_TYPE_INFO);
                  *(_DWORD *)v284 = 136315138;
                  *(_QWORD *)&v284[4] = v171;
                  v197 = (void *)_os_log_send_and_compose_impl();
                  if (v197)
                    free(v197);
                  goto LABEL_414;
                }
                v191 = _os_log_pack_size();
                v192 = (std::__shared_weak_count_vtbl *)operator new(v191, (std::align_val_t)8uLL);
                v193 = (std::__shared_weak_count *)operator new();
                v193->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v193->__shared_owners_ = 0;
                v193->__shared_weak_owners_ = 0;
                v193[1].__vftable = v192;
                *(_QWORD *)&v267 = v192;
                *((_QWORD *)&v267 + 1) = v192;
                v269 = 0;
                v270 = 0;
                v268 = v193;
                v194 = strlen((const char *)v171);
                if (v194 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v195 = v194;
                if (v194 >= 0x17)
                {
                  v198 = (v194 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v194 | 7) != 0x17)
                    v198 = v194 | 7;
                  v199 = v198 + 1;
                  v196 = operator new(v198 + 1);
                  *(_QWORD *)&v272 = v195;
                  *((_QWORD *)&v272 + 1) = v199 | 0x8000000000000000;
                  v271 = v196;
                }
                else
                {
                  HIBYTE(v272) = v194;
                  v196 = &v271;
                  if (!v194)
                  {
LABEL_352:
                    *((_BYTE *)v196 + v195) = 0;
                    v200 = v271;
                    v291[0] = (const char *)v272;
                    *(const char **)((char *)v291 + 7) = *(const char **)((char *)&v272 + 7);
                    v201 = HIBYTE(v272);
                    v202 = (char *)operator new(0x38uLL);
                    *((_QWORD *)v202 + 1) = 0;
                    *((_QWORD *)v202 + 2) = 0;
                    *((_QWORD *)v202 + 3) = off_24EC1FA48;
                    *(_QWORD *)v202 = &off_24EC1F9F8;
                    v203 = v291[0];
                    *((_QWORD *)v202 + 4) = v200;
                    *((_QWORD *)v202 + 5) = v203;
                    *(const char **)(v202 + 47) = *(const char **)((char *)v291 + 7);
                    v202[55] = v201;
                    memset(v291, 0, 15);
                    v204 = v270;
                    v269 = v202 + 24;
                    v270 = (std::__shared_weak_count *)v202;
                    if (v204)
                    {
                      v205 = (unint64_t *)&v204->__shared_owners_;
                      do
                        v206 = __ldaxr(v205);
                      while (__stlxr(v206 - 1, v205));
                      if (!v206)
                      {
                        ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                        std::__shared_weak_count::__release_weak(v204);
                      }
                    }
                    *(_OWORD *)v284 = v267;
                    v207 = (uint64_t)v269;
                    *(_QWORD *)&v284[16] = v268;
                    if (v268)
                    {
                      v208 = (unint64_t *)&v268->__shared_owners_;
                      do
                        v209 = __ldxr(v208);
                      while (__stxr(v209 + 1, v208));
                    }
                    v210 = v270;
                    *(_QWORD *)&v285 = v207;
                    *((_QWORD *)&v285 + 1) = v270;
                    if (v270)
                    {
                      v211 = (unint64_t *)&v270->__shared_owners_;
                      do
                        v212 = __ldxr(v211);
                      while (__stxr(v212 + 1, v211));
                      v286 = v207;
                      do
                        v213 = __ldaxr(v211);
                      while (__stlxr(v213 - 1, v211));
                      if (!v213)
                      {
                        ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                        std::__shared_weak_count::__release_weak(v210);
                      }
                    }
                    else
                    {
                      v286 = v207;
                    }
                    v214 = v268;
                    if (v268)
                    {
                      v215 = (unint64_t *)&v268->__shared_owners_;
                      do
                        v216 = __ldaxr(v215);
                      while (__stlxr(v216 - 1, v215));
                      if (!v216)
                      {
                        ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                        std::__shared_weak_count::__release_weak(v214);
                      }
                    }
                    v217 = *(_QWORD *)v284;
                    if (*(char *)(v286 + 31) >= 0)
                      v218 = (char *)(v286 + 8);
                    else
                      v218 = *(char **)(v286 + 8);
                    v219 = _os_log_pack_fill();
                    *(_DWORD *)v219 = 136315138;
                    *(_QWORD *)(v219 + 4) = v218;
                    v220 = operator new();
                    v221 = *(unsigned __int8 *)(v172 + 39);
                    if ((v221 & 0x80u) == 0)
                      v222 = v173;
                    else
                      v222 = *(_QWORD *)(v172 + 16);
                    if ((v221 & 0x80u) != 0)
                      v221 = *(_QWORD *)(v172 + 24);
                    *(_QWORD *)v220 = v217;
                    *(_OWORD *)(v220 + 8) = *(_OWORD *)&v284[8];
                    *(_QWORD *)&v284[8] = 0;
                    *(_QWORD *)&v284[16] = 0;
                    *(_OWORD *)(v220 + 24) = v285;
                    v285 = 0uLL;
                    *(_QWORD *)(v220 + 40) = v222;
                    *(_QWORD *)(v220 + 48) = v221;
                    *(_BYTE *)(v220 + 56) = 1;
                    v271 = 0;
                    *(_QWORD *)&v267 = v220;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v35 + 24) + 40))(*(_QWORD *)(v35 + 24), &v267);
                    v223 = v267;
                    *(_QWORD *)&v267 = 0;
                    if (v223)
                    {
                      v224 = *(std::__shared_weak_count **)(v223 + 32);
                      if (v224)
                      {
                        v225 = (unint64_t *)&v224->__shared_owners_;
                        do
                          v226 = __ldaxr(v225);
                        while (__stlxr(v226 - 1, v225));
                        if (!v226)
                        {
                          ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                          std::__shared_weak_count::__release_weak(v224);
                        }
                      }
                      v227 = *(std::__shared_weak_count **)(v223 + 16);
                      if (v227)
                      {
                        v228 = (unint64_t *)&v227->__shared_owners_;
                        do
                          v229 = __ldaxr(v228);
                        while (__stlxr(v229 - 1, v228));
                        if (!v229)
                        {
                          ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                          std::__shared_weak_count::__release_weak(v227);
                        }
                      }
                      MEMORY[0x227684CE8](v223, 0x10F0C40B62ED6C6);
                      v230 = v271;
                      v271 = 0;
                      if (v230)
                      {
                        v231 = (std::__shared_weak_count *)*((_QWORD *)v230 + 4);
                        if (v231)
                        {
                          v232 = (unint64_t *)&v231->__shared_owners_;
                          do
                            v233 = __ldaxr(v232);
                          while (__stlxr(v233 - 1, v232));
                          if (!v233)
                          {
                            ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                            std::__shared_weak_count::__release_weak(v231);
                          }
                        }
                        v234 = (std::__shared_weak_count *)*((_QWORD *)v230 + 2);
                        if (v234)
                        {
                          v235 = (unint64_t *)&v234->__shared_owners_;
                          do
                            v236 = __ldaxr(v235);
                          while (__stlxr(v236 - 1, v235));
                          if (!v236)
                          {
                            ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                            std::__shared_weak_count::__release_weak(v234);
                          }
                        }
                        MEMORY[0x227684CE8](v230, 0x10F0C40B62ED6C6);
                      }
                    }
                    v237 = (std::__shared_weak_count *)*((_QWORD *)&v285 + 1);
                    if (*((_QWORD *)&v285 + 1))
                    {
                      v238 = (unint64_t *)(*((_QWORD *)&v285 + 1) + 8);
                      do
                        v239 = __ldaxr(v238);
                      while (__stlxr(v239 - 1, v238));
                      if (!v239)
                      {
                        ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                        std::__shared_weak_count::__release_weak(v237);
                      }
                    }
                    v240 = *(std::__shared_weak_count **)&v284[16];
                    if (*(_QWORD *)&v284[16])
                    {
                      v241 = (unint64_t *)(*(_QWORD *)&v284[16] + 8);
                      do
                        v242 = __ldaxr(v241);
                      while (__stlxr(v242 - 1, v241));
                      if (!v242)
                      {
                        ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                        std::__shared_weak_count::__release_weak(v240);
                      }
                    }
LABEL_414:
                    if (v33)
                    {
                      v243 = __dst;
                      if (v265 < 0)
                        v243 = (void **)__dst[0];
                      sub_22322C138((uint64_t)&__p, "%s", (const char *)v243);
                      sub_223182C08((uint64_t)&__p);
                    }
                    sub_223182C08((uint64_t)&__p);
                    v244 = v262;
                    if (v262)
                    {
                      v245 = (unint64_t *)&v262->__shared_owners_;
                      do
                        v246 = __ldaxr(v245);
                      while (__stlxr(v246 - 1, v245));
                      if (!v246)
                      {
                        ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                        std::__shared_weak_count::__release_weak(v244);
                      }
                    }
                    if (SHIBYTE(v265) < 0)
                      operator delete(__dst[0]);
                    *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
                    v247 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&object[16] = v247;
                    v274 = MEMORY[0x24BEDB848] + 16;
                    if (v280 < 0)
                      operator delete(v279);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x227684BE0](&v283);
                    return;
                  }
                }
                memcpy(v196, v171, v195);
                goto LABEL_352;
              }
            }
            memmove(v187, v175, v174);
            goto LABEL_333;
          }
        }
        memmove(v179, v177, v178);
        goto LABEL_325;
      }
    }
    memmove(v42, v168, v41);
    goto LABEL_304;
  }
  *(_DWORD *)a3 = v8;
  *(_BYTE *)(a3 + 4) = 1;
  sub_223CA9D94(__dst);
  if (**((int **)__dst[0] + 7) <= 4)
  {
    v9 = *((unsigned __int8 *)__dst[0] + 72);
    v10 = sub_22322F254((uint64_t)__dst[0], "OSLogSurrogateAppender", 1, 0);
    v11 = v10;
    if (v9 || v10 != 0)
    {
      *(_QWORD *)v284 = __dst;
      *(std::chrono::steady_clock::time_point *)&v284[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v284[16] = std::chrono::system_clock::now();
      LODWORD(v285) = 4;
      *((_QWORD *)&v285 + 1) = "unknown file";
      LODWORD(v286) = 91;
      *((_QWORD *)&v287 + 1) = 0;
      v288 = 0;
      *(_QWORD *)&v287 = "unknown function";
      v13 = (char *)*a4;
      LODWORD(v274) = 0;
      sub_223CC4084((uint64_t)&__p, (uint64_t)object, a3);
      if ((_DWORD)v274 == -1)
        sub_22316DD70();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v267;
      ((void (*)(void **__return_ptr, std::string *, _BYTE *))off_24EC63160[v274])(&v271, &__p, object);
      if ((_DWORD)v274 != -1)
        ((void (*)(std::string *, _BYTE *))off_24EC63148[v274])(&__p, object);
      __s = v13;
      v14 = (const char *)&v271;
      if (v272 < 0)
        v14 = (const char *)v271;
      v291[0] = v14;
      if (*(char *)(v6 + 23) >= 0)
        v15 = (const char *)v6;
      else
        v15 = *(const char **)v6;
      v266 = (int **)v15;
      v16 = **(_QWORD **)v284;
      v17 = (const char *)(**(_QWORD **)v284 + 16);
      v248 = v17;
      v249 = **(_QWORD **)v284;
      if (*(char *)(**(_QWORD **)v284 + 39) < 0)
      {
        v17 = *(const char **)(v16 + 16);
        v18 = *(_QWORD *)(v16 + 24);
        v250 = v9;
        v252 = a4;
        v43 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v43 & 1) != 0)
          goto LABEL_64;
      }
      else
      {
        v18 = *(unsigned __int8 *)(**(_QWORD **)v284 + 39);
        v250 = v9;
        v252 = a4;
        v19 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v19 & 1) != 0)
          goto LABEL_64;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v274 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_64:
      if (byte_255788F57 >= 0)
        v44 = (const char *)&xmmword_255788F40;
      else
        v44 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v45 = byte_255788F57;
      else
        v45 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v44, v17);
      v46 = &object[8];
      if (v45 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v45 >= 0x17)
      {
        v47 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v45 | 7) != 0x17)
          v47 = v45 | 7;
        v48 = v47 + 1;
        v46 = operator new(v47 + 1);
        *(_QWORD *)&object[16] = v45;
        v274 = v48 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v46;
      }
      else
      {
        HIBYTE(v274) = v45;
        if (!v45)
        {
LABEL_78:
          v46[v45] = 0;
          LOBYTE(v275[0]) = 1;
          v49 = &v275[1];
          if (v18 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v18 >= 0x17)
          {
            v50 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v18 | 7) != 0x17)
              v50 = v18 | 7;
            v51 = v50 + 1;
            v49 = (void **)operator new(v50 + 1);
            v276 = v18;
            *(_QWORD *)&v277 = v51 | 0x8000000000000000;
            v275[1] = v49;
          }
          else
          {
            BYTE7(v277) = v18;
            if (!v18)
            {
LABEL_86:
              *((_BYTE *)v49 + v18) = 0;
              BYTE8(v277) = 1;
              v52 = *(NSObject **)object;
              if (SBYTE7(v277) < 0)
                operator delete(v275[1]);
              if (LOBYTE(v275[0]) && SHIBYTE(v274) < 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v11 && *(_QWORD *)(v11 + 24))
              {
                v53 = _os_log_pack_size();
                v54 = (std::__shared_weak_count_vtbl *)operator new(v53, (std::align_val_t)8uLL);
                v55 = (std::__shared_weak_count *)operator new();
                v55->__shared_owners_ = 0;
                v56 = (unint64_t *)&v55->__shared_owners_;
                v55->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v55->__shared_weak_owners_ = 0;
                v55[1].__vftable = v54;
                *(_QWORD *)&v267 = v54;
                *((_QWORD *)&v267 + 1) = v54;
                v269 = 0;
                v270 = 0;
                v268 = v55;
                sub_223CC18F4((uint64_t)object, __s, v291, (const char **)&v266);
                v57 = (char *)operator new(0x68uLL);
                v58 = (std::__shared_weak_count *)v57;
                *((_QWORD *)v57 + 3) = off_24EC206F8;
                *(_QWORD *)v57 = &off_24EC206A8;
                *((_QWORD *)v57 + 6) = v274;
                v59 = v278;
                *((_QWORD *)v57 + 9) = v276;
                *((_QWORD *)v57 + 1) = 0;
                v60 = (unint64_t *)(v57 + 8);
                *((_QWORD *)v57 + 2) = 0;
                *((_OWORD *)v57 + 2) = *(_OWORD *)&object[8];
                *(_OWORD *)(v57 + 56) = *(_OWORD *)v275;
                *((_QWORD *)v57 + 12) = v59;
                *((_OWORD *)v57 + 5) = v277;
                v269 = v57 + 24;
                v270 = (std::__shared_weak_count *)v57;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)v54;
                __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v55;
                do
                  v61 = __ldxr(v56);
                while (__stxr(v61 + 1, v56));
                *(_QWORD *)&v258 = v57 + 24;
                *((_QWORD *)&v258 + 1) = v57;
                do
                  v62 = __ldxr(v60);
                while (__stxr(v62 + 1, v60));
                v259 = v57 + 24;
                do
                  v63 = __ldaxr(v60);
                while (__stlxr(v63 - 1, v60));
                if (!v63)
                {
                  (*(void (**)(char *))(*(_QWORD *)v57 + 16))(v57);
                  std::__shared_weak_count::__release_weak(v58);
                }
                v64 = v268;
                if (v268)
                {
                  v65 = (unint64_t *)&v268->__shared_owners_;
                  do
                    v66 = __ldaxr(v65);
                  while (__stlxr(v66 - 1, v65));
                  if (!v66)
                  {
                    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                    std::__shared_weak_count::__release_weak(v64);
                  }
                }
                v67 = __p.__r_.__value_.__r.__words[0];
                if (v259[31] >= 0)
                  v68 = v259 + 8;
                else
                  v68 = (char *)*((_QWORD *)v259 + 1);
                if (v259[55] >= 0)
                  v69 = v259 + 32;
                else
                  v69 = (char *)*((_QWORD *)v259 + 4);
                if (v259[79] >= 0)
                  v70 = v259 + 56;
                else
                  v70 = (char *)*((_QWORD *)v259 + 7);
                v71 = _os_log_pack_fill();
                *(_DWORD *)v71 = 136315650;
                *(_QWORD *)(v71 + 4) = v68;
                *(_WORD *)(v71 + 12) = 2080;
                *(_QWORD *)(v71 + 14) = v69;
                *(_WORD *)(v71 + 22) = 2080;
                *(_QWORD *)(v71 + 24) = v70;
                v72 = operator new();
                v73 = *(unsigned __int8 *)(v249 + 39);
                v74 = v248;
                if ((v73 & 0x80u) != 0)
                {
                  v74 = *(const char **)(v249 + 16);
                  v73 = *(_QWORD *)(v249 + 24);
                }
                *(_QWORD *)v72 = v67;
                *(_OWORD *)(v72 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
                *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v72 + 24) = v258;
                v258 = 0uLL;
                *(_QWORD *)(v72 + 40) = v74;
                *(_QWORD *)(v72 + 48) = v73;
                *(_BYTE *)(v72 + 56) = 16;
                *(_QWORD *)&v267 = 0;
                *(_QWORD *)object = v72;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), object);
                v75 = v252;
                v76 = *(_QWORD *)object;
                *(_QWORD *)object = 0;
                v77 = v250;
                if (v76)
                {
                  v78 = *(std::__shared_weak_count **)(v76 + 32);
                  if (v78)
                  {
                    v79 = (unint64_t *)&v78->__shared_owners_;
                    do
                      v80 = __ldaxr(v79);
                    while (__stlxr(v80 - 1, v79));
                    if (!v80)
                    {
                      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                      std::__shared_weak_count::__release_weak(v78);
                    }
                  }
                  v81 = *(std::__shared_weak_count **)(v76 + 16);
                  if (v81)
                  {
                    v82 = (unint64_t *)&v81->__shared_owners_;
                    do
                      v83 = __ldaxr(v82);
                    while (__stlxr(v83 - 1, v82));
                    if (!v83)
                    {
                      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                      std::__shared_weak_count::__release_weak(v81);
                    }
                  }
                  MEMORY[0x227684CE8](v76, 0x10F0C40B62ED6C6);
                  v84 = v267;
                  *(_QWORD *)&v267 = 0;
                  if (v84)
                  {
                    v85 = *(std::__shared_weak_count **)(v84 + 32);
                    if (v85)
                    {
                      v86 = (unint64_t *)&v85->__shared_owners_;
                      do
                        v87 = __ldaxr(v86);
                      while (__stlxr(v87 - 1, v86));
                      if (!v87)
                      {
                        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                        std::__shared_weak_count::__release_weak(v85);
                      }
                    }
                    v88 = *(std::__shared_weak_count **)(v84 + 16);
                    if (v88)
                    {
                      v89 = (unint64_t *)&v88->__shared_owners_;
                      do
                        v90 = __ldaxr(v89);
                      while (__stlxr(v90 - 1, v89));
                      if (!v90)
                      {
                        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                        std::__shared_weak_count::__release_weak(v88);
                      }
                    }
                    MEMORY[0x227684CE8](v84, 0x10F0C40B62ED6C6);
                  }
                }
                v91 = (std::__shared_weak_count *)*((_QWORD *)&v258 + 1);
                if (*((_QWORD *)&v258 + 1))
                {
                  v92 = (unint64_t *)(*((_QWORD *)&v258 + 1) + 8);
                  do
                    v93 = __ldaxr(v92);
                  while (__stlxr(v93 - 1, v92));
                  if (!v93)
                  {
                    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                    std::__shared_weak_count::__release_weak(v91);
                  }
                }
                v94 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
                if (__p.__r_.__value_.__r.__words[2])
                {
                  v95 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                  do
                    v96 = __ldaxr(v95);
                  while (__stlxr(v96 - 1, v95));
                  if (!v96)
                  {
                    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                    std::__shared_weak_count::__release_weak(v94);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v52, OS_LOG_TYPE_ERROR);
                *(_DWORD *)object = 136315650;
                *(_QWORD *)&object[4] = __s;
                *(_WORD *)&object[12] = 2080;
                *(const char **)&object[14] = v291[0];
                *(_WORD *)&object[22] = 2080;
                v274 = (unint64_t)v266;
                v97 = (void *)_os_log_send_and_compose_impl();
                v75 = v252;
                v77 = v250;
                if (v97)
                  free(v97);
              }
              if (SHIBYTE(v272) < 0)
              {
                operator delete(v271);
                if (!v77)
                {
LABEL_169:
                  sub_223182C08((uint64_t)v284);
                  v101 = (std::__shared_weak_count *)v288;
                  if (!v288)
                    return;
                  v102 = (unint64_t *)(v288 + 8);
                  do
                    v103 = __ldaxr(v102);
                  while (__stlxr(v103 - 1, v102));
                  goto LABEL_293;
                }
              }
              else if (!v77)
              {
                goto LABEL_169;
              }
              v98 = *v75;
              LODWORD(v274) = 0;
              sub_223CC4084((uint64_t)&v267, (uint64_t)object, a3);
              if ((_DWORD)v274 == -1)
                sub_22316DD70();
              *(_QWORD *)&v267 = &v271;
              ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24EC63160[v274])(&__p, &v267, object);
              if ((_DWORD)v274 != -1)
                ((void (*)(__int128 *, _BYTE *))off_24EC63148[v274])(&v267, object);
              v99 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v99 = (std::string *)__p.__r_.__value_.__r.__words[0];
              if (*(char *)(v6 + 23) >= 0)
                v100 = (const char *)v6;
              else
                v100 = *(const char **)v6;
              sub_22322C138((uint64_t)v284, "Overriding variable \"%s\" with value %s from key \"%s\"", v98, (const char *)v99, v100);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              sub_223182C08((uint64_t)v284);
              goto LABEL_169;
            }
          }
          memmove(v49, v17, v18);
          goto LABEL_86;
        }
      }
      memmove(v46, v44, v45);
      goto LABEL_78;
    }
  }
}

void sub_223CBAE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,void *a49,int a50,__int16 a51,char a52,char a53,char a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (a54 && a53 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  if (a35 < 0)
  {
    operator delete(a30);
    sub_223182DAC(v58 - 208);
    sub_223224234((uint64_t)&a42);
    _Unwind_Resume(a1);
  }
  sub_223182DAC(v58 - 208);
  sub_223224234((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_223CBB21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223224234((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223CBB234(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223182DAC(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_223CBB248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a22 < 0)
  {
    operator delete(__p);
    sub_223182DAC(v22 - 208);
    _Unwind_Resume(a1);
  }
  sub_223182DAC(v22 - 208);
  _Unwind_Resume(a1);
}

void sub_223CBB280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223224234((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223CBB294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_223167354((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_223CBB2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *object,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  uint64_t v46;

  if (a46 && a45 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  if (SHIBYTE(a38) < 0)
  {
    operator delete(a36);
    sub_223182DAC(v46 - 208);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223CBB318);
}

void sub_223CBB2FC(void *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x223CBB330);
}

void sub_223CBB30C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_22319B964((uint64_t)&a39);
  JUMPOUT(0x223CBB318);
}

void sub_223CBB32C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_223CBB338(uint64_t a1, uint64_t a2, uint64_t a3, const char **a4)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  char *v21;
  void **v22;
  const char *v23;
  uint64_t v24;
  size_t v25;
  const char *v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  char *v32;
  std::string *v33;
  std::string::size_type size;
  size_t v35;
  void *v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  size_t v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  const char *v44;
  size_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  size_t v53;
  std::__shared_weak_count_vtbl *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::string::size_type v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  const char **v75;
  uint64_t v76;
  int v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  void *v97;
  const char *v98;
  std::string *v99;
  const char *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  const void **v105;
  unsigned __int8 v106;
  const char *v107;
  size_t v108;
  _BYTE *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  void **v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  size_t v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *p_shared_owners;
  char *v121;
  std::__shared_weak_count *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::string::size_type v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  void *v159;
  int v160;
  std::string::size_type v161;
  std::string *p_p;
  const char *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t *v167;
  const void *v168;
  uint64_t v169;
  uint64_t v170;
  void **v171;
  uint64_t v172;
  uint64_t v173;
  size_t v174;
  const char *v175;
  unsigned __int8 v176;
  const char *v177;
  size_t v178;
  _BYTE *v179;
  uint64_t v180;
  unint64_t v181;
  void **v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  NSObject *v190;
  size_t v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  size_t v194;
  size_t v195;
  void *v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  char v201;
  char *v202;
  const char *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  void *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  void **v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  const char *v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  const char **v253;
  char *__s;
  int __sa;
  char *__sb;
  std::string __p;
  __int128 v258;
  char *v259;
  const char *v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  const char *v263;
  void *__dst[2];
  int64_t v265;
  int **v266;
  __int128 v267;
  std::__shared_weak_count *v268;
  char *v269;
  std::__shared_weak_count *v270;
  void *v271;
  __int128 v272;
  _BYTE object[24];
  unint64_t v274;
  void *v275[2];
  size_t v276;
  __int128 v277;
  unint64_t v278;
  void *v279;
  char v280;
  unint64_t v281;
  int v282;
  uint64_t v283;
  _BYTE v284[24];
  __int128 v285;
  uint64_t v286;
  __int128 v287;
  const char *v288;
  uint64_t v289;
  uint64_t v290;
  const char *v291[5];

  v6 = a2;
  v291[2] = *(const char **)MEMORY[0x24BDAC8D0];
  v8 = sub_223CC1568(a1, a2);
  if ((v8 & 0xFF00000000) == 0)
  {
    if (sub_22452B568(a1, v6))
    {
      sub_224527BAC(v6, (CFStringRef *)object);
      sub_223CC1B5C((uint64_t)&v271, a1, *(void **)object);
      v14 = *(std::__shared_weak_count **)&object[8];
      if (*(_QWORD *)&object[8])
      {
        v15 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      sub_223CA9D94(v291);
      if (**((int **)v291[0] + 7) > 5
        || ((v17 = *((unsigned __int8 *)v291[0] + 72),
             v18 = sub_22322F254((uint64_t)v291[0], "OSLogSurrogateAppender", 1, 0),
             v19 = v18,
             !v17)
          ? (v20 = v18 == 0)
          : (v20 = 0),
            v20))
      {
LABEL_295:
        if (BYTE8(v272))
        {
          v101 = (std::__shared_weak_count *)v272;
          if ((_QWORD)v272)
          {
            v167 = (unint64_t *)(v272 + 8);
            do
              v103 = __ldaxr(v167);
            while (__stlxr(v103 - 1, v167));
LABEL_299:
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
            return;
          }
        }
        return;
      }
      *(_QWORD *)v284 = v291;
      *(std::chrono::steady_clock::time_point *)&v284[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v284[16] = std::chrono::system_clock::now();
      LODWORD(v285) = 5;
      *((_QWORD *)&v285 + 1) = "unknown file";
      LODWORD(v286) = 96;
      *((_QWORD *)&v287 + 1) = 0;
      v288 = 0;
      *(_QWORD *)&v287 = "unknown function";
      if (*(char *)(v6 + 23) >= 0)
        v21 = (char *)v6;
      else
        v21 = *(char **)v6;
      LODWORD(v274) = 0;
      sub_223CC1C9C((uint64_t)object, (CFTypeRef *)&v271);
      if ((_DWORD)v274 == -1)
        sub_22316DD70();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v267;
      ((void (*)(void **__return_ptr, std::string *, _BYTE *))off_24EC63160[v274])(__dst, &__p, object);
      if ((_DWORD)v274 != -1)
        ((void (*)(std::string *, _BYTE *))off_24EC63148[v274])(&__p, object);
      v22 = __dst;
      if (v265 < 0)
        v22 = (void **)__dst[0];
      v266 = (int **)v22;
      sub_223CC4608();
      if (byte_2540CDE27 >= 0)
        v23 = (const char *)&xmmword_2540CDE10;
      else
        v23 = (const char *)xmmword_2540CDE10;
      v263 = v23;
      v24 = **(_QWORD **)v284;
      v252 = **(_QWORD **)v284;
      if (*(char *)(**(_QWORD **)v284 + 39) < 0)
      {
        v26 = *(const char **)(v24 + 16);
        v25 = *(_QWORD *)(v24 + 24);
      }
      else
      {
        v25 = *(unsigned __int8 *)(**(_QWORD **)v284 + 39);
        v26 = (const char *)(v24 + 16);
      }
      v251 = v24 + 16;
      v106 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v106 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v274 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v107 = (const char *)&xmmword_255788F40;
      else
        v107 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v108 = byte_255788F57;
      else
        v108 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v107, v26);
      v109 = &object[8];
      if (v108 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v108 >= 0x17)
      {
        v110 = v17;
        v111 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v108 | 7) != 0x17)
          v111 = v108 | 7;
        v112 = v111 + 1;
        v109 = operator new(v111 + 1);
        *(_QWORD *)&object[16] = v108;
        v274 = v112 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v109;
        v17 = v110;
      }
      else
      {
        HIBYTE(v274) = v108;
        if (!v108)
        {
LABEL_198:
          v109[v108] = 0;
          LOBYTE(v275[0]) = 1;
          v113 = &v275[1];
          if (v25 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v25 >= 0x17)
          {
            v114 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v25 | 7) != 0x17)
              v114 = v25 | 7;
            v115 = v114 + 1;
            v113 = (void **)operator new(v114 + 1);
            v276 = v25;
            *(_QWORD *)&v277 = v115 | 0x8000000000000000;
            v275[1] = v113;
          }
          else
          {
            BYTE7(v277) = v25;
            if (!v25)
              goto LABEL_206;
          }
          memmove(v113, v26, v25);
LABEL_206:
          *((_BYTE *)v113 + v25) = 0;
          BYTE8(v277) = 1;
          v116 = *(NSObject **)object;
          if (SBYTE7(v277) < 0)
            operator delete(v275[1]);
          if (LOBYTE(v275[0]) && SHIBYTE(v274) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v19 && *(_QWORD *)(v19 + 24))
          {
            v117 = _os_log_pack_size();
            v118 = (std::__shared_weak_count_vtbl *)operator new(v117, (std::align_val_t)8uLL);
            v119 = (std::__shared_weak_count *)operator new();
            v119->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v119->__shared_owners_;
            v119->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v119->__shared_weak_owners_ = 0;
            v119[1].__vftable = v118;
            *(_QWORD *)&v267 = v118;
            *((_QWORD *)&v267 + 1) = v118;
            v269 = 0;
            v270 = 0;
            v268 = v119;
            sub_223CC18F4((uint64_t)object, v21, (const char **)&v266, &v263);
            v121 = (char *)operator new(0x68uLL);
            v122 = (std::__shared_weak_count *)v121;
            *((_QWORD *)v121 + 3) = off_24EC206F8;
            *(_QWORD *)v121 = &off_24EC206A8;
            *((_QWORD *)v121 + 6) = v274;
            v123 = v278;
            *((_QWORD *)v121 + 9) = v276;
            *((_QWORD *)v121 + 1) = 0;
            v124 = (unint64_t *)(v121 + 8);
            *((_QWORD *)v121 + 2) = 0;
            *((_OWORD *)v121 + 2) = *(_OWORD *)&object[8];
            *(_OWORD *)(v121 + 56) = *(_OWORD *)v275;
            *((_QWORD *)v121 + 12) = v123;
            *((_OWORD *)v121 + 5) = v277;
            v269 = v121 + 24;
            v270 = (std::__shared_weak_count *)v121;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v118;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v118;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v119;
            do
              v125 = __ldxr(p_shared_owners);
            while (__stxr(v125 + 1, p_shared_owners));
            *(_QWORD *)&v258 = v121 + 24;
            *((_QWORD *)&v258 + 1) = v121;
            do
              v126 = __ldxr(v124);
            while (__stxr(v126 + 1, v124));
            v259 = v121 + 24;
            do
              v127 = __ldaxr(v124);
            while (__stlxr(v127 - 1, v124));
            if (!v127)
            {
              (*(void (**)(char *))(*(_QWORD *)v121 + 16))(v121);
              std::__shared_weak_count::__release_weak(v122);
            }
            __sa = v17;
            v128 = v268;
            if (v268)
            {
              v129 = (unint64_t *)&v268->__shared_owners_;
              do
                v130 = __ldaxr(v129);
              while (__stlxr(v130 - 1, v129));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                std::__shared_weak_count::__release_weak(v128);
              }
            }
            v131 = __p.__r_.__value_.__r.__words[0];
            if (v259[31] >= 0)
              v132 = v259 + 8;
            else
              v132 = (char *)*((_QWORD *)v259 + 1);
            if (v259[55] >= 0)
              v133 = v259 + 32;
            else
              v133 = (char *)*((_QWORD *)v259 + 4);
            if (v259[79] >= 0)
              v134 = v259 + 56;
            else
              v134 = (char *)*((_QWORD *)v259 + 7);
            v135 = _os_log_pack_fill();
            *(_DWORD *)v135 = 136315650;
            *(_QWORD *)(v135 + 4) = v132;
            *(_WORD *)(v135 + 12) = 2080;
            *(_QWORD *)(v135 + 14) = v133;
            *(_WORD *)(v135 + 22) = 2080;
            *(_QWORD *)(v135 + 24) = v134;
            v136 = operator new();
            v137 = *(unsigned __int8 *)(v252 + 39);
            v138 = v251;
            if ((v137 & 0x80u) != 0)
            {
              v138 = *(_QWORD *)(v252 + 16);
              v137 = *(_QWORD *)(v252 + 24);
            }
            *(_QWORD *)v136 = v131;
            *(_OWORD *)(v136 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
            *(_OWORD *)(v136 + 24) = v258;
            v258 = 0uLL;
            *(_QWORD *)(v136 + 40) = v138;
            *(_QWORD *)(v136 + 48) = v137;
            *(_BYTE *)(v136 + 56) = 16;
            *(_QWORD *)&v267 = 0;
            *(_QWORD *)object = v136;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v19 + 24) + 40))(*(_QWORD *)(v19 + 24), object);
            v17 = __sa;
            v139 = *(_QWORD *)object;
            *(_QWORD *)object = 0;
            if (v139)
            {
              v140 = *(std::__shared_weak_count **)(v139 + 32);
              if (v140)
              {
                v141 = (unint64_t *)&v140->__shared_owners_;
                do
                  v142 = __ldaxr(v141);
                while (__stlxr(v142 - 1, v141));
                if (!v142)
                {
                  ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                  std::__shared_weak_count::__release_weak(v140);
                }
              }
              v143 = *(std::__shared_weak_count **)(v139 + 16);
              if (v143)
              {
                v144 = (unint64_t *)&v143->__shared_owners_;
                do
                  v145 = __ldaxr(v144);
                while (__stlxr(v145 - 1, v144));
                if (!v145)
                {
                  ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                  std::__shared_weak_count::__release_weak(v143);
                }
              }
              MEMORY[0x227684CE8](v139, 0x10F0C40B62ED6C6);
              v146 = v267;
              *(_QWORD *)&v267 = 0;
              if (v146)
              {
                v147 = *(std::__shared_weak_count **)(v146 + 32);
                if (v147)
                {
                  v148 = (unint64_t *)&v147->__shared_owners_;
                  do
                    v149 = __ldaxr(v148);
                  while (__stlxr(v149 - 1, v148));
                  if (!v149)
                  {
                    ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                    std::__shared_weak_count::__release_weak(v147);
                  }
                }
                v150 = *(std::__shared_weak_count **)(v146 + 16);
                if (v150)
                {
                  v151 = (unint64_t *)&v150->__shared_owners_;
                  do
                    v152 = __ldaxr(v151);
                  while (__stlxr(v152 - 1, v151));
                  if (!v152)
                  {
                    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                    std::__shared_weak_count::__release_weak(v150);
                  }
                }
                MEMORY[0x227684CE8](v146, 0x10F0C40B62ED6C6);
              }
            }
            v153 = (std::__shared_weak_count *)*((_QWORD *)&v258 + 1);
            if (*((_QWORD *)&v258 + 1))
            {
              v154 = (unint64_t *)(*((_QWORD *)&v258 + 1) + 8);
              do
                v155 = __ldaxr(v154);
              while (__stlxr(v155 - 1, v154));
              if (!v155)
              {
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v153);
              }
            }
            v156 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
            if (__p.__r_.__value_.__r.__words[2])
            {
              v157 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
              do
                v158 = __ldaxr(v157);
              while (__stlxr(v158 - 1, v157));
              if (!v158)
              {
                ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                std::__shared_weak_count::__release_weak(v156);
              }
            }
          }
          else
          {
            os_log_type_enabled(v116, OS_LOG_TYPE_ERROR);
            *(_DWORD *)object = 136315650;
            *(_QWORD *)&object[4] = v21;
            *(_WORD *)&object[12] = 2080;
            *(_QWORD *)&object[14] = v266;
            *(_WORD *)&object[22] = 2080;
            v274 = (unint64_t)v263;
            v159 = (void *)_os_log_send_and_compose_impl();
            if (v159)
              free(v159);
          }
          if (SHIBYTE(v265) < 0)
            operator delete(__dst[0]);
          if (v17)
          {
            if (*(char *)(v6 + 23) < 0)
              v6 = *(_QWORD *)v6;
            LODWORD(v274) = 0;
            sub_223CC1C9C((uint64_t)object, (CFTypeRef *)&v271);
            if ((_DWORD)v274 == -1)
              sub_22316DD70();
            *(_QWORD *)&v267 = __dst;
            ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24EC63160[v274])(&__p, &v267, object);
            if ((_DWORD)v274 != -1)
              ((void (*)(__int128 *, _BYTE *))off_24EC63148[v274])(&v267, object);
            v160 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            v161 = __p.__r_.__value_.__r.__words[0];
            sub_223CC4608();
            p_p = &__p;
            if (v160 < 0)
              p_p = (std::string *)v161;
            if (byte_2540CDE27 >= 0)
              v163 = (const char *)&xmmword_2540CDE10;
            else
              v163 = (const char *)xmmword_2540CDE10;
            sub_22322C138((uint64_t)v284, "Error while getting value for key \"%s\" and value %s expecting type %s", (const char *)v6, (const char *)p_p, v163);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            sub_223182C08((uint64_t)v284);
          }
          sub_223182C08((uint64_t)v284);
          v164 = (std::__shared_weak_count *)v288;
          if (v288)
          {
            v165 = (unint64_t *)(v288 + 8);
            do
              v166 = __ldaxr(v165);
            while (__stlxr(v166 - 1, v165));
            if (!v166)
            {
              ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
              std::__shared_weak_count::__release_weak(v164);
            }
          }
          goto LABEL_295;
        }
      }
      memmove(v109, v107, v108);
      goto LABEL_198;
    }
    sub_223CA9D94(&v266);
    if (*v266[7] > 3)
      return;
    v27 = *((unsigned __int8 *)v266 + 72);
    v28 = sub_22322F254((uint64_t)v266, "OSLogSurrogateAppender", 1, 0);
    v29 = v28;
    if (!v27 && v28 == 0)
      return;
    sub_223195210((uint64_t)object);
    *(_QWORD *)v284 = "Key not found in dictionary \"";
    *(_QWORD *)&v284[8] = 29;
    v31 = *(unsigned __int8 *)(v6 + 23);
    if ((v31 & 0x80u) == 0)
      v32 = (char *)v6;
    else
      v32 = *(char **)v6;
    if ((v31 & 0x80u) != 0)
      v31 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)&v284[16] = v32;
    *(_QWORD *)&v285 = v31;
    *((_QWORD *)&v285 + 1) = "\" for variable \"";
    v286 = 16;
    v287 = *(_OWORD *)a4;
    v288 = "\"";
    v289 = 1;
    sub_2231A9820((uint64_t)v284, (uint64_t)&v290, 0, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &__p;
    else
      v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_2231813E8(&object[16], (uint64_t)v33, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v282 & 0x10) != 0)
    {
      v104 = v281;
      if (v281 < v278)
      {
        v281 = v278;
        v104 = v278;
      }
      v105 = (const void **)&v277 + 1;
    }
    else
    {
      if ((v282 & 8) == 0)
      {
        v35 = 0;
        HIBYTE(v265) = 0;
        v36 = __dst;
        goto LABEL_310;
      }
      v105 = (const void **)&v275[1];
      v104 = v277;
    }
    v168 = *v105;
    v35 = v104 - (_QWORD)*v105;
    if (v35 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v35 >= 0x17)
    {
      v169 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v169 = v35 | 7;
      v170 = v169 + 1;
      v36 = operator new(v169 + 1);
      __dst[1] = (void *)v35;
      v265 = v170 | 0x8000000000000000;
      __dst[0] = v36;
    }
    else
    {
      HIBYTE(v265) = v104 - *(_BYTE *)v105;
      v36 = __dst;
      if (!v35)
      {
LABEL_310:
        *((_BYTE *)v36 + v35) = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v266;
        __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v258) = 3;
        *((_QWORD *)&v258 + 1) = "unknown file";
        LODWORD(v259) = 99;
        v261 = 0;
        v262 = 0;
        v260 = "unknown function";
        if (v265 >= 0)
          v171 = __dst;
        else
          v171 = (void **)__dst[0];
        v172 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
        v173 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
        if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v175 = *(const char **)(v172 + 16);
          v174 = *(_QWORD *)(v172 + 24);
        }
        else
        {
          v174 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
          v175 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
        }
        v176 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v176 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v284);
          sub_223199C58("com.apple.cv3d", (unint64_t)v284, &xmmword_255788F40);
          if ((_BYTE)v285 && (v284[23] & 0x80000000) != 0)
            operator delete(*(void **)v284);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v177 = (const char *)&xmmword_255788F40;
        else
          v177 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v178 = byte_255788F57;
        else
          v178 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)v284 = os_log_create(v177, v175);
        v179 = &v284[8];
        if (v178 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v178 >= 0x17)
        {
          __sb = (char *)v175;
          v180 = v172;
          v181 = v29;
          v182 = v171;
          v183 = v27;
          v184 = v173;
          v185 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v178 | 7) != 0x17)
            v185 = v178 | 7;
          v186 = v185 + 1;
          v179 = operator new(v185 + 1);
          *(_QWORD *)&v284[16] = v178;
          *(_QWORD *)&v285 = v186 | 0x8000000000000000;
          *(_QWORD *)&v284[8] = v179;
          v173 = v184;
          v27 = v183;
          v171 = v182;
          v29 = v181;
          v172 = v180;
          v175 = __sb;
        }
        else
        {
          BYTE7(v285) = v178;
          if (!v178)
          {
LABEL_331:
            v179[v178] = 0;
            BYTE8(v285) = 1;
            v187 = &v286;
            if (v174 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v174 >= 0x17)
            {
              v188 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v174 | 7) != 0x17)
                v188 = v174 | 7;
              v189 = v188 + 1;
              v187 = (uint64_t *)operator new(v188 + 1);
              *(_QWORD *)&v287 = v174;
              *((_QWORD *)&v287 + 1) = v189 | 0x8000000000000000;
              v286 = (uint64_t)v187;
            }
            else
            {
              HIBYTE(v287) = v174;
              if (!v174)
              {
LABEL_339:
                *((_BYTE *)v187 + v174) = 0;
                LOBYTE(v288) = 1;
                v190 = *(NSObject **)v284;
                if (SHIBYTE(v287) < 0)
                  operator delete((void *)v286);
                if (BYTE8(v285) && SBYTE7(v285) < 0)
                  operator delete(*(void **)&v284[8]);
                if (*(_QWORD *)v284)
                  os_release(*(void **)v284);
                if (!v29 || !*(_QWORD *)(v29 + 24))
                {
                  os_log_type_enabled(v190, OS_LOG_TYPE_INFO);
                  *(_DWORD *)v284 = 136315138;
                  *(_QWORD *)&v284[4] = v171;
                  v197 = (void *)_os_log_send_and_compose_impl();
                  if (v197)
                    free(v197);
                  goto LABEL_420;
                }
                v191 = _os_log_pack_size();
                v192 = (std::__shared_weak_count_vtbl *)operator new(v191, (std::align_val_t)8uLL);
                v193 = (std::__shared_weak_count *)operator new();
                v193->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v193->__shared_owners_ = 0;
                v193->__shared_weak_owners_ = 0;
                v193[1].__vftable = v192;
                *(_QWORD *)&v267 = v192;
                *((_QWORD *)&v267 + 1) = v192;
                v269 = 0;
                v270 = 0;
                v268 = v193;
                v194 = strlen((const char *)v171);
                if (v194 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v195 = v194;
                if (v194 >= 0x17)
                {
                  v198 = (v194 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v194 | 7) != 0x17)
                    v198 = v194 | 7;
                  v199 = v198 + 1;
                  v196 = operator new(v198 + 1);
                  *(_QWORD *)&v272 = v195;
                  *((_QWORD *)&v272 + 1) = v199 | 0x8000000000000000;
                  v271 = v196;
                }
                else
                {
                  HIBYTE(v272) = v194;
                  v196 = &v271;
                  if (!v194)
                  {
LABEL_358:
                    *((_BYTE *)v196 + v195) = 0;
                    v200 = v271;
                    v291[0] = (const char *)v272;
                    *(const char **)((char *)v291 + 7) = *(const char **)((char *)&v272 + 7);
                    v201 = HIBYTE(v272);
                    v202 = (char *)operator new(0x38uLL);
                    *((_QWORD *)v202 + 1) = 0;
                    *((_QWORD *)v202 + 2) = 0;
                    *((_QWORD *)v202 + 3) = off_24EC1FA48;
                    *(_QWORD *)v202 = &off_24EC1F9F8;
                    v203 = v291[0];
                    *((_QWORD *)v202 + 4) = v200;
                    *((_QWORD *)v202 + 5) = v203;
                    *(const char **)(v202 + 47) = *(const char **)((char *)v291 + 7);
                    v202[55] = v201;
                    memset(v291, 0, 15);
                    v204 = v270;
                    v269 = v202 + 24;
                    v270 = (std::__shared_weak_count *)v202;
                    if (v204)
                    {
                      v205 = (unint64_t *)&v204->__shared_owners_;
                      do
                        v206 = __ldaxr(v205);
                      while (__stlxr(v206 - 1, v205));
                      if (!v206)
                      {
                        ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                        std::__shared_weak_count::__release_weak(v204);
                      }
                    }
                    *(_OWORD *)v284 = v267;
                    v207 = (uint64_t)v269;
                    *(_QWORD *)&v284[16] = v268;
                    if (v268)
                    {
                      v208 = (unint64_t *)&v268->__shared_owners_;
                      do
                        v209 = __ldxr(v208);
                      while (__stxr(v209 + 1, v208));
                    }
                    v210 = v270;
                    *(_QWORD *)&v285 = v207;
                    *((_QWORD *)&v285 + 1) = v270;
                    if (v270)
                    {
                      v211 = (unint64_t *)&v270->__shared_owners_;
                      do
                        v212 = __ldxr(v211);
                      while (__stxr(v212 + 1, v211));
                      v286 = v207;
                      do
                        v213 = __ldaxr(v211);
                      while (__stlxr(v213 - 1, v211));
                      if (!v213)
                      {
                        ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                        std::__shared_weak_count::__release_weak(v210);
                      }
                    }
                    else
                    {
                      v286 = v207;
                    }
                    v214 = v268;
                    if (v268)
                    {
                      v215 = (unint64_t *)&v268->__shared_owners_;
                      do
                        v216 = __ldaxr(v215);
                      while (__stlxr(v216 - 1, v215));
                      if (!v216)
                      {
                        ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                        std::__shared_weak_count::__release_weak(v214);
                      }
                    }
                    v217 = *(_QWORD *)v284;
                    if (*(char *)(v286 + 31) >= 0)
                      v218 = (char *)(v286 + 8);
                    else
                      v218 = *(char **)(v286 + 8);
                    v219 = _os_log_pack_fill();
                    *(_DWORD *)v219 = 136315138;
                    *(_QWORD *)(v219 + 4) = v218;
                    v220 = operator new();
                    v221 = *(unsigned __int8 *)(v172 + 39);
                    if ((v221 & 0x80u) == 0)
                      v222 = v173;
                    else
                      v222 = *(_QWORD *)(v172 + 16);
                    if ((v221 & 0x80u) != 0)
                      v221 = *(_QWORD *)(v172 + 24);
                    *(_QWORD *)v220 = v217;
                    *(_OWORD *)(v220 + 8) = *(_OWORD *)&v284[8];
                    *(_QWORD *)&v284[8] = 0;
                    *(_QWORD *)&v284[16] = 0;
                    *(_OWORD *)(v220 + 24) = v285;
                    v285 = 0uLL;
                    *(_QWORD *)(v220 + 40) = v222;
                    *(_QWORD *)(v220 + 48) = v221;
                    *(_BYTE *)(v220 + 56) = 1;
                    v271 = 0;
                    *(_QWORD *)&v267 = v220;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v29 + 24) + 40))(*(_QWORD *)(v29 + 24), &v267);
                    v223 = v267;
                    *(_QWORD *)&v267 = 0;
                    if (v223)
                    {
                      v224 = *(std::__shared_weak_count **)(v223 + 32);
                      if (v224)
                      {
                        v225 = (unint64_t *)&v224->__shared_owners_;
                        do
                          v226 = __ldaxr(v225);
                        while (__stlxr(v226 - 1, v225));
                        if (!v226)
                        {
                          ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                          std::__shared_weak_count::__release_weak(v224);
                        }
                      }
                      v227 = *(std::__shared_weak_count **)(v223 + 16);
                      if (v227)
                      {
                        v228 = (unint64_t *)&v227->__shared_owners_;
                        do
                          v229 = __ldaxr(v228);
                        while (__stlxr(v229 - 1, v228));
                        if (!v229)
                        {
                          ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                          std::__shared_weak_count::__release_weak(v227);
                        }
                      }
                      MEMORY[0x227684CE8](v223, 0x10F0C40B62ED6C6);
                      v230 = v271;
                      v271 = 0;
                      if (v230)
                      {
                        v231 = (std::__shared_weak_count *)*((_QWORD *)v230 + 4);
                        if (v231)
                        {
                          v232 = (unint64_t *)&v231->__shared_owners_;
                          do
                            v233 = __ldaxr(v232);
                          while (__stlxr(v233 - 1, v232));
                          if (!v233)
                          {
                            ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                            std::__shared_weak_count::__release_weak(v231);
                          }
                        }
                        v234 = (std::__shared_weak_count *)*((_QWORD *)v230 + 2);
                        if (v234)
                        {
                          v235 = (unint64_t *)&v234->__shared_owners_;
                          do
                            v236 = __ldaxr(v235);
                          while (__stlxr(v236 - 1, v235));
                          if (!v236)
                          {
                            ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                            std::__shared_weak_count::__release_weak(v234);
                          }
                        }
                        MEMORY[0x227684CE8](v230, 0x10F0C40B62ED6C6);
                      }
                    }
                    v237 = (std::__shared_weak_count *)*((_QWORD *)&v285 + 1);
                    if (*((_QWORD *)&v285 + 1))
                    {
                      v238 = (unint64_t *)(*((_QWORD *)&v285 + 1) + 8);
                      do
                        v239 = __ldaxr(v238);
                      while (__stlxr(v239 - 1, v238));
                      if (!v239)
                      {
                        ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                        std::__shared_weak_count::__release_weak(v237);
                      }
                    }
                    v240 = *(std::__shared_weak_count **)&v284[16];
                    if (*(_QWORD *)&v284[16])
                    {
                      v241 = (unint64_t *)(*(_QWORD *)&v284[16] + 8);
                      do
                        v242 = __ldaxr(v241);
                      while (__stlxr(v242 - 1, v241));
                      if (!v242)
                      {
                        ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                        std::__shared_weak_count::__release_weak(v240);
                      }
                    }
LABEL_420:
                    if (v27)
                    {
                      v243 = __dst;
                      if (v265 < 0)
                        v243 = (void **)__dst[0];
                      sub_22322C138((uint64_t)&__p, "%s", (const char *)v243);
                      sub_223182C08((uint64_t)&__p);
                    }
                    sub_223182C08((uint64_t)&__p);
                    v244 = v262;
                    if (v262)
                    {
                      v245 = (unint64_t *)&v262->__shared_owners_;
                      do
                        v246 = __ldaxr(v245);
                      while (__stlxr(v246 - 1, v245));
                      if (!v246)
                      {
                        ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                        std::__shared_weak_count::__release_weak(v244);
                      }
                    }
                    if (SHIBYTE(v265) < 0)
                      operator delete(__dst[0]);
                    *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
                    v247 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&object[16] = v247;
                    v274 = MEMORY[0x24BEDB848] + 16;
                    if (v280 < 0)
                      operator delete(v279);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x227684BE0](&v283);
                    return;
                  }
                }
                memcpy(v196, v171, v195);
                goto LABEL_358;
              }
            }
            memmove(v187, v175, v174);
            goto LABEL_339;
          }
        }
        memmove(v179, v177, v178);
        goto LABEL_331;
      }
    }
    memmove(v36, v168, v35);
    goto LABEL_310;
  }
  *(_DWORD *)a3 = v8;
  *(_BYTE *)(a3 + 4) = 1;
  sub_223CA9D94(__dst);
  if (**((int **)__dst[0] + 7) <= 4)
  {
    v9 = *((unsigned __int8 *)__dst[0] + 72);
    v10 = sub_22322F254((uint64_t)__dst[0], "OSLogSurrogateAppender", 1, 0);
    v11 = v10;
    if (v9 || v10 != 0)
    {
      *(_QWORD *)v284 = __dst;
      *(std::chrono::steady_clock::time_point *)&v284[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v284[16] = std::chrono::system_clock::now();
      LODWORD(v285) = 4;
      *((_QWORD *)&v285 + 1) = "unknown file";
      LODWORD(v286) = 91;
      *((_QWORD *)&v287 + 1) = 0;
      v288 = 0;
      *(_QWORD *)&v287 = "unknown function";
      v13 = (char *)*a4;
      LODWORD(v274) = 0;
      if (*(_BYTE *)(a3 + 4))
        sub_223208764((uint64_t)&__p, (uint64_t)object, (float *)a3);
      else
        sub_2231A0D14(object, "nullopt");
      if ((_DWORD)v274 == -1)
        sub_22316DD70();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v267;
      ((void (*)(void **__return_ptr, std::string *, _BYTE *))off_24EC63160[v274])(&v271, &__p, object);
      if ((_DWORD)v274 != -1)
        ((void (*)(std::string *, _BYTE *))off_24EC63148[v274])(&__p, object);
      __s = v13;
      v37 = (const char *)&v271;
      if (v272 < 0)
        v37 = (const char *)v271;
      v291[0] = v37;
      if (*(char *)(v6 + 23) >= 0)
        v38 = (const char *)v6;
      else
        v38 = *(const char **)v6;
      v266 = (int **)v38;
      v39 = **(_QWORD **)v284;
      v40 = (const char *)(**(_QWORD **)v284 + 16);
      v248 = v40;
      v249 = **(_QWORD **)v284;
      if (*(char *)(**(_QWORD **)v284 + 39) < 0)
      {
        v40 = *(const char **)(v39 + 16);
        v41 = *(_QWORD *)(v39 + 24);
        v250 = v9;
        v253 = a4;
        v43 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v43 & 1) != 0)
          goto LABEL_67;
      }
      else
      {
        v41 = *(unsigned __int8 *)(**(_QWORD **)v284 + 39);
        v250 = v9;
        v253 = a4;
        v42 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v42 & 1) != 0)
          goto LABEL_67;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v274 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_67:
      if (byte_255788F57 >= 0)
        v44 = (const char *)&xmmword_255788F40;
      else
        v44 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v45 = byte_255788F57;
      else
        v45 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v44, v40);
      v46 = &object[8];
      if (v45 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v45 >= 0x17)
      {
        v47 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v45 | 7) != 0x17)
          v47 = v45 | 7;
        v48 = v47 + 1;
        v46 = operator new(v47 + 1);
        *(_QWORD *)&object[16] = v45;
        v274 = v48 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v46;
      }
      else
      {
        HIBYTE(v274) = v45;
        if (!v45)
        {
LABEL_81:
          v46[v45] = 0;
          LOBYTE(v275[0]) = 1;
          v49 = &v275[1];
          if (v41 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v41 >= 0x17)
          {
            v50 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v41 | 7) != 0x17)
              v50 = v41 | 7;
            v51 = v50 + 1;
            v49 = (void **)operator new(v50 + 1);
            v276 = v41;
            *(_QWORD *)&v277 = v51 | 0x8000000000000000;
            v275[1] = v49;
          }
          else
          {
            BYTE7(v277) = v41;
            if (!v41)
            {
LABEL_89:
              *((_BYTE *)v49 + v41) = 0;
              BYTE8(v277) = 1;
              v52 = *(NSObject **)object;
              if (SBYTE7(v277) < 0)
                operator delete(v275[1]);
              if (LOBYTE(v275[0]) && SHIBYTE(v274) < 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v11 && *(_QWORD *)(v11 + 24))
              {
                v53 = _os_log_pack_size();
                v54 = (std::__shared_weak_count_vtbl *)operator new(v53, (std::align_val_t)8uLL);
                v55 = (std::__shared_weak_count *)operator new();
                v55->__shared_owners_ = 0;
                v56 = (unint64_t *)&v55->__shared_owners_;
                v55->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v55->__shared_weak_owners_ = 0;
                v55[1].__vftable = v54;
                *(_QWORD *)&v267 = v54;
                *((_QWORD *)&v267 + 1) = v54;
                v269 = 0;
                v270 = 0;
                v268 = v55;
                sub_223CC18F4((uint64_t)object, __s, v291, (const char **)&v266);
                v57 = (char *)operator new(0x68uLL);
                v58 = (std::__shared_weak_count *)v57;
                *((_QWORD *)v57 + 3) = off_24EC206F8;
                *(_QWORD *)v57 = &off_24EC206A8;
                *((_QWORD *)v57 + 6) = v274;
                v59 = v278;
                *((_QWORD *)v57 + 9) = v276;
                *((_QWORD *)v57 + 1) = 0;
                v60 = (unint64_t *)(v57 + 8);
                *((_QWORD *)v57 + 2) = 0;
                *((_OWORD *)v57 + 2) = *(_OWORD *)&object[8];
                *(_OWORD *)(v57 + 56) = *(_OWORD *)v275;
                *((_QWORD *)v57 + 12) = v59;
                *((_OWORD *)v57 + 5) = v277;
                v269 = v57 + 24;
                v270 = (std::__shared_weak_count *)v57;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)v54;
                __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v55;
                do
                  v61 = __ldxr(v56);
                while (__stxr(v61 + 1, v56));
                *(_QWORD *)&v258 = v57 + 24;
                *((_QWORD *)&v258 + 1) = v57;
                do
                  v62 = __ldxr(v60);
                while (__stxr(v62 + 1, v60));
                v259 = v57 + 24;
                do
                  v63 = __ldaxr(v60);
                while (__stlxr(v63 - 1, v60));
                if (!v63)
                {
                  (*(void (**)(char *))(*(_QWORD *)v57 + 16))(v57);
                  std::__shared_weak_count::__release_weak(v58);
                }
                v64 = v268;
                if (v268)
                {
                  v65 = (unint64_t *)&v268->__shared_owners_;
                  do
                    v66 = __ldaxr(v65);
                  while (__stlxr(v66 - 1, v65));
                  if (!v66)
                  {
                    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                    std::__shared_weak_count::__release_weak(v64);
                  }
                }
                v67 = __p.__r_.__value_.__r.__words[0];
                if (v259[31] >= 0)
                  v68 = v259 + 8;
                else
                  v68 = (char *)*((_QWORD *)v259 + 1);
                if (v259[55] >= 0)
                  v69 = v259 + 32;
                else
                  v69 = (char *)*((_QWORD *)v259 + 4);
                if (v259[79] >= 0)
                  v70 = v259 + 56;
                else
                  v70 = (char *)*((_QWORD *)v259 + 7);
                v71 = _os_log_pack_fill();
                *(_DWORD *)v71 = 136315650;
                *(_QWORD *)(v71 + 4) = v68;
                *(_WORD *)(v71 + 12) = 2080;
                *(_QWORD *)(v71 + 14) = v69;
                *(_WORD *)(v71 + 22) = 2080;
                *(_QWORD *)(v71 + 24) = v70;
                v72 = operator new();
                v73 = *(unsigned __int8 *)(v249 + 39);
                v74 = v248;
                if ((v73 & 0x80u) != 0)
                {
                  v74 = *(const char **)(v249 + 16);
                  v73 = *(_QWORD *)(v249 + 24);
                }
                *(_QWORD *)v72 = v67;
                *(_OWORD *)(v72 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
                *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v72 + 24) = v258;
                v258 = 0uLL;
                *(_QWORD *)(v72 + 40) = v74;
                *(_QWORD *)(v72 + 48) = v73;
                *(_BYTE *)(v72 + 56) = 16;
                *(_QWORD *)&v267 = 0;
                *(_QWORD *)object = v72;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), object);
                v75 = v253;
                v76 = *(_QWORD *)object;
                *(_QWORD *)object = 0;
                v77 = v250;
                if (v76)
                {
                  v78 = *(std::__shared_weak_count **)(v76 + 32);
                  if (v78)
                  {
                    v79 = (unint64_t *)&v78->__shared_owners_;
                    do
                      v80 = __ldaxr(v79);
                    while (__stlxr(v80 - 1, v79));
                    if (!v80)
                    {
                      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                      std::__shared_weak_count::__release_weak(v78);
                    }
                  }
                  v81 = *(std::__shared_weak_count **)(v76 + 16);
                  if (v81)
                  {
                    v82 = (unint64_t *)&v81->__shared_owners_;
                    do
                      v83 = __ldaxr(v82);
                    while (__stlxr(v83 - 1, v82));
                    if (!v83)
                    {
                      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                      std::__shared_weak_count::__release_weak(v81);
                    }
                  }
                  MEMORY[0x227684CE8](v76, 0x10F0C40B62ED6C6);
                  v84 = v267;
                  *(_QWORD *)&v267 = 0;
                  if (v84)
                  {
                    v85 = *(std::__shared_weak_count **)(v84 + 32);
                    if (v85)
                    {
                      v86 = (unint64_t *)&v85->__shared_owners_;
                      do
                        v87 = __ldaxr(v86);
                      while (__stlxr(v87 - 1, v86));
                      if (!v87)
                      {
                        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                        std::__shared_weak_count::__release_weak(v85);
                      }
                    }
                    v88 = *(std::__shared_weak_count **)(v84 + 16);
                    if (v88)
                    {
                      v89 = (unint64_t *)&v88->__shared_owners_;
                      do
                        v90 = __ldaxr(v89);
                      while (__stlxr(v90 - 1, v89));
                      if (!v90)
                      {
                        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                        std::__shared_weak_count::__release_weak(v88);
                      }
                    }
                    MEMORY[0x227684CE8](v84, 0x10F0C40B62ED6C6);
                  }
                }
                v91 = (std::__shared_weak_count *)*((_QWORD *)&v258 + 1);
                if (*((_QWORD *)&v258 + 1))
                {
                  v92 = (unint64_t *)(*((_QWORD *)&v258 + 1) + 8);
                  do
                    v93 = __ldaxr(v92);
                  while (__stlxr(v93 - 1, v92));
                  if (!v93)
                  {
                    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                    std::__shared_weak_count::__release_weak(v91);
                  }
                }
                v94 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
                if (__p.__r_.__value_.__r.__words[2])
                {
                  v95 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                  do
                    v96 = __ldaxr(v95);
                  while (__stlxr(v96 - 1, v95));
                  if (!v96)
                  {
                    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                    std::__shared_weak_count::__release_weak(v94);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v52, OS_LOG_TYPE_ERROR);
                *(_DWORD *)object = 136315650;
                *(_QWORD *)&object[4] = __s;
                *(_WORD *)&object[12] = 2080;
                *(const char **)&object[14] = v291[0];
                *(_WORD *)&object[22] = 2080;
                v274 = (unint64_t)v266;
                v97 = (void *)_os_log_send_and_compose_impl();
                v75 = v253;
                v77 = v250;
                if (v97)
                  free(v97);
              }
              if (SHIBYTE(v272) < 0)
              {
                operator delete(v271);
                if (!v77)
                {
LABEL_175:
                  sub_223182C08((uint64_t)v284);
                  v101 = (std::__shared_weak_count *)v288;
                  if (!v288)
                    return;
                  v102 = (unint64_t *)(v288 + 8);
                  do
                    v103 = __ldaxr(v102);
                  while (__stlxr(v103 - 1, v102));
                  goto LABEL_299;
                }
              }
              else if (!v77)
              {
                goto LABEL_175;
              }
              v98 = *v75;
              LODWORD(v274) = 0;
              if (*(_BYTE *)(a3 + 4))
                sub_223208764((uint64_t)&v267, (uint64_t)object, (float *)a3);
              else
                sub_2231A0D14(object, "nullopt");
              if ((_DWORD)v274 == -1)
                sub_22316DD70();
              *(_QWORD *)&v267 = &v271;
              ((void (*)(std::string *__return_ptr, __int128 *, _BYTE *))off_24EC63160[v274])(&__p, &v267, object);
              if ((_DWORD)v274 != -1)
                ((void (*)(__int128 *, _BYTE *))off_24EC63148[v274])(&v267, object);
              v99 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v99 = (std::string *)__p.__r_.__value_.__r.__words[0];
              if (*(char *)(v6 + 23) >= 0)
                v100 = (const char *)v6;
              else
                v100 = *(const char **)v6;
              sub_22322C138((uint64_t)v284, "Overriding variable \"%s\" with value %s from key \"%s\"", v98, (const char *)v99, v100);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              sub_223182C08((uint64_t)v284);
              goto LABEL_175;
            }
          }
          memmove(v49, v40, v41);
          goto LABEL_89;
        }
      }
      memmove(v46, v44, v45);
      goto LABEL_81;
    }
  }
}

void sub_223CBD198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,void *a49,int a50,__int16 a51,char a52,char a53,char a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (a54 && a53 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  if (a35 < 0)
  {
    operator delete(a30);
    sub_223182DAC(v58 - 208);
    sub_223224234((uint64_t)&a42);
    _Unwind_Resume(a1);
  }
  sub_223182DAC(v58 - 208);
  sub_223224234((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_223CBD51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223224234((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223CBD534(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223182DAC(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_223CBD548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a22 < 0)
  {
    operator delete(__p);
    sub_223182DAC(v22 - 208);
    _Unwind_Resume(a1);
  }
  sub_223182DAC(v22 - 208);
  _Unwind_Resume(a1);
}

void sub_223CBD580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223224234((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223CBD594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_223167354((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_223CBD5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *object,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  uint64_t v46;

  if (a46 && a45 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  if (SHIBYTE(a38) < 0)
  {
    operator delete(a36);
    sub_223182DAC(v46 - 208);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223CBD618);
}

void sub_223CBD5FC(void *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x223CBD630);
}

void sub_223CBD60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_22319B964((uint64_t)&a39);
  JUMPOUT(0x223CBD618);
}

void sub_223CBD62C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_223CBD638(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v5;
  CFIndex v7;
  CFIndex v8;
  CFStringRef v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  CFDictionaryRef v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  std::string *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::value_type *v24;
  int v25;
  char v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  char *v30;
  std::string::size_type v31;
  char *v32;
  std::string *v33;
  uint64_t v34;
  const char *v35;
  size_t v36;
  unsigned __int8 v37;
  const char *v38;
  size_t v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  size_t v48;
  std::__shared_weak_count_vtbl *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  size_t v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  size_t v58;
  size_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  char *shared_owners;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  const char *v78;
  void *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  const char *v86;
  std::string *v87;
  std::string::size_type v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  BOOL v98;
  char *v99;
  const char *v100;
  const char *v101;
  uint64_t v102;
  const char *v103;
  size_t v104;
  unsigned __int8 v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  std::string *v111;
  std::string::size_type size;
  char v113;
  size_t v114;
  __int128 *v115;
  uint64_t v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  unint64_t v121;
  const void *v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  const char *v127;
  size_t v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  const char *v131;
  size_t v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  NSObject *v139;
  size_t v140;
  void *v141;
  _QWORD *v142;
  size_t v143;
  size_t v144;
  _BYTE *v145;
  void *v146;
  int v147;
  unsigned __int8 v148;
  const char *v149;
  size_t v150;
  void **v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  NSObject *v157;
  size_t v158;
  void *v159;
  _QWORD *v160;
  unint64_t *v161;
  char *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  size_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::string::size_type v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  void *v180;
  int v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  void *v201;
  int v202;
  std::string::size_type v203;
  std::string *v204;
  const char *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  const char *v212;
  const char *v213;
  uint64_t v214;
  const char *v215;
  size_t v216;
  unsigned __int8 v217;
  const char *v218;
  size_t v219;
  void **v220;
  _OWORD *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  NSObject *v227;
  size_t v228;
  void *v229;
  _QWORD *v230;
  unint64_t *v231;
  char *v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  size_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  _OWORD *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::string::size_type v243;
  char *v244;
  char *v245;
  char *v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  const char *v250;
  void *v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  void *v271;
  const char *v272;
  std::string *v273;
  const char *v274;
  unint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char v279;
  char *v280;
  const char *v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  const char *v300;
  uint64_t v301;
  __int128 v302;
  uint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  const char *v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  void *v327;
  int v328;
  std::__shared_weak_count_vtbl *v329;
  const char *v330;
  uint64_t v331;
  std::string::size_type v332;
  char *v333;
  char *v334;
  const char *v335;
  char *__s;
  char __sb;
  int __sa;
  char *v339;
  char *v340;
  _OWORD *v341;
  int v342;
  const char *v343;
  unint64_t v344;
  char *v346;
  int v347;
  std::string v348;
  __int128 v349;
  char *v350;
  const char *v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  const char *v354;
  const char *v355;
  _BYTE __dst[24];
  char *v357;
  std::__shared_weak_count *v358;
  void *value[3];
  unint64_t v360;
  __int128 v361;
  size_t v362;
  __int128 v363;
  unint64_t v364;
  void *v365;
  char v366;
  unint64_t v367;
  int v368;
  uint64_t v369;
  __int128 v370;
  int64_t v371;
  _BYTE v372[24];
  __int128 v373;
  uint64_t v374;
  __int128 v375;
  const char *v376;
  uint64_t v377;
  const char *v378[2];
  _BYTE v379[24];
  uint64_t v380;

  v5 = a2;
  v380 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)a2, v8, 0x8000100u, 0);
  v10 = (std::__shared_weak_count *)operator new();
  v11 = v10;
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6D470;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v9;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
    v16 = *(CFDictionaryRef *)a1;
    v15 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v15)
      goto LABEL_15;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
    v16 = *(CFDictionaryRef *)a1;
    v15 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v15)
      goto LABEL_15;
  }
  v17 = (unint64_t *)&v15->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (v19)
  {
LABEL_15:
    if (!v16)
      goto LABEL_20;
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (!v16)
    goto LABEL_20;
LABEL_16:
  value[0] = 0;
  if (v9 && CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, v9, (const void **)value))
  {
    sub_224527CB8((CFIndex)value[0], &v348);
    goto LABEL_21;
  }
LABEL_20:
  v348.__r_.__value_.__s.__data_[0] = 0;
  LOBYTE(v349) = 0;
  do
LABEL_21:
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (v20)
  {
    if (!(_BYTE)v349)
    {
LABEL_186:
      if (sub_22452B568(a1, v5))
      {
        sub_224527BAC(v5, (CFStringRef *)value);
        sub_223CC1B5C((uint64_t)v379, a1, value[0]);
        v92 = (std::__shared_weak_count *)value[1];
        if (value[1])
        {
          v93 = (unint64_t *)((char *)value[1] + 8);
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        sub_223CA9D94(v378);
        if (**((int **)v378[0] + 7) > 5
          || ((v95 = *((unsigned __int8 *)v378[0] + 72),
               v96 = sub_22322F254((uint64_t)v378[0], "OSLogSurrogateAppender", 1, 0),
               v97 = v96,
               !v95)
            ? (v98 = v96 == 0)
            : (v98 = 0),
              v98))
        {
LABEL_401:
          if (v379[16])
          {
            v209 = *(std::__shared_weak_count **)&v379[8];
            if (*(_QWORD *)&v379[8])
            {
              v210 = (unint64_t *)(*(_QWORD *)&v379[8] + 8);
              do
                v211 = __ldaxr(v210);
              while (__stlxr(v211 - 1, v210));
LABEL_531:
              if (!v211)
              {
                ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                std::__shared_weak_count::__release_weak(v209);
              }
              return;
            }
          }
          return;
        }
        *(_QWORD *)v372 = v378;
        *(std::chrono::steady_clock::time_point *)&v372[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v372[16] = std::chrono::system_clock::now();
        LODWORD(v373) = 5;
        *((_QWORD *)&v373 + 1) = "unknown file";
        LODWORD(v374) = 96;
        *((_QWORD *)&v375 + 1) = 0;
        v376 = 0;
        *(_QWORD *)&v375 = "unknown function";
        if (*(char *)(v5 + 23) >= 0)
          v99 = (char *)v5;
        else
          v99 = *(char **)v5;
        LODWORD(v360) = 0;
        sub_223CC1C9C((uint64_t)value, (CFTypeRef *)v379);
        if ((_DWORD)v360 == -1)
          sub_22316DD70();
        v348.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
        ((void (*)(__int128 *__return_ptr, std::string *, void **))off_24EC63160[v360])(&v370, &v348, value);
        if ((_DWORD)v360 != -1)
          ((void (*)(std::string *, void **))off_24EC63148[v360])(&v348, value);
        v346 = v99;
        v342 = v95;
        v100 = (const char *)&v370;
        if (v371 < 0)
          v100 = (const char *)v370;
        v355 = v100;
        sub_223CC4A88();
        if (byte_2540CDE9F >= 0)
          v101 = (const char *)&xmmword_2540CDE88;
        else
          v101 = (const char *)xmmword_2540CDE88;
        v354 = v101;
        v102 = **(_QWORD **)v372;
        v103 = (const char *)(**(_QWORD **)v372 + 16);
        v340 = (char *)v103;
        if (*(char *)(**(_QWORD **)v372 + 39) < 0)
        {
          v103 = *(const char **)(v102 + 16);
          v104 = *(_QWORD *)(v102 + 24);
          v148 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v148 & 1) != 0)
            goto LABEL_290;
        }
        else
        {
          v104 = *(unsigned __int8 *)(**(_QWORD **)v372 + 39);
          v105 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v105 & 1) != 0)
            goto LABEL_290;
        }
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)value);
          sub_223199C58("com.apple.cv3d", (unint64_t)value, &xmmword_255788F40);
          if ((_BYTE)v360 && SHIBYTE(value[2]) < 0)
            operator delete(value[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
LABEL_290:
        if (byte_255788F57 >= 0)
          v149 = (const char *)&xmmword_255788F40;
        else
          v149 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v150 = byte_255788F57;
        else
          v150 = *((_QWORD *)&xmmword_255788F40 + 1);
        value[0] = os_log_create(v149, v103);
        v151 = &value[1];
        if (v150 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v150 >= 0x17)
        {
          v152 = (v150 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v150 | 7) != 0x17)
            v152 = v150 | 7;
          v153 = v152 + 1;
          v151 = (void **)operator new(v152 + 1);
          value[2] = (void *)v150;
          v360 = v153 | 0x8000000000000000;
          value[1] = v151;
        }
        else
        {
          HIBYTE(v360) = v150;
          if (!v150)
          {
LABEL_304:
            *((_BYTE *)v151 + v150) = 0;
            LOBYTE(v361) = 1;
            v154 = (char *)&v361 + 8;
            if (v104 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v104 >= 0x17)
            {
              v155 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v104 | 7) != 0x17)
                v155 = v104 | 7;
              v156 = v155 + 1;
              v154 = (char *)operator new(v155 + 1);
              v362 = v104;
              *(_QWORD *)&v363 = v156 | 0x8000000000000000;
              *((_QWORD *)&v361 + 1) = v154;
            }
            else
            {
              BYTE7(v363) = v104;
              if (!v104)
                goto LABEL_312;
            }
            memmove(v154, v103, v104);
LABEL_312:
            v154[v104] = 0;
            BYTE8(v363) = 1;
            v157 = value[0];
            if (SBYTE7(v363) < 0)
              operator delete(*((void **)&v361 + 1));
            if ((_BYTE)v361 && SHIBYTE(v360) < 0)
              operator delete(value[1]);
            if (value[0])
              os_release(value[0]);
            if (v97 && *(_QWORD *)(v97 + 24))
            {
              v158 = _os_log_pack_size();
              v159 = operator new(v158, (std::align_val_t)8uLL);
              v160 = (_QWORD *)operator new();
              v160[1] = 0;
              v161 = v160 + 1;
              *v160 = &off_24EC1F7F0;
              v160[2] = 0;
              v160[3] = v159;
              *(_QWORD *)__dst = v159;
              *(_QWORD *)&__dst[8] = v159;
              v357 = 0;
              v358 = 0;
              *(_QWORD *)&__dst[16] = v160;
              sub_223CC18F4((uint64_t)value, v346, &v355, &v354);
              v162 = (char *)operator new(0x68uLL);
              v163 = (std::__shared_weak_count *)v162;
              *((_QWORD *)v162 + 1) = 0;
              v164 = (unint64_t *)(v162 + 8);
              *(_QWORD *)v162 = &off_24EC206A8;
              *((_QWORD *)v162 + 3) = off_24EC206F8;
              v165 = v362;
              *((_QWORD *)v162 + 6) = v360;
              *((_QWORD *)v162 + 2) = 0;
              *((_OWORD *)v162 + 2) = *(_OWORD *)&value[1];
              *(_OWORD *)(v162 + 56) = v361;
              *((_QWORD *)v162 + 9) = v165;
              *((_QWORD *)v162 + 12) = v364;
              *((_OWORD *)v162 + 5) = v363;
              v357 = v162 + 24;
              v358 = (std::__shared_weak_count *)v162;
              v348.__r_.__value_.__r.__words[0] = (std::string::size_type)v159;
              v348.__r_.__value_.__l.__size_ = (std::string::size_type)v159;
              v348.__r_.__value_.__r.__words[2] = (std::string::size_type)v160;
              do
                v166 = __ldxr(v161);
              while (__stxr(v166 + 1, v161));
              *(_QWORD *)&v349 = v162 + 24;
              *((_QWORD *)&v349 + 1) = v162;
              do
                v167 = __ldxr(v164);
              while (__stxr(v167 + 1, v164));
              v350 = v162 + 24;
              do
                v168 = __ldaxr(v164);
              while (__stlxr(v168 - 1, v164));
              if (!v168)
              {
                (*(void (**)(char *))(*(_QWORD *)v162 + 16))(v162);
                std::__shared_weak_count::__release_weak(v163);
              }
              v169 = *(std::__shared_weak_count **)&__dst[16];
              if (*(_QWORD *)&__dst[16])
              {
                v170 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                do
                  v171 = __ldaxr(v170);
                while (__stlxr(v171 - 1, v170));
                if (!v171)
                {
                  ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                  std::__shared_weak_count::__release_weak(v169);
                }
              }
              v172 = v348.__r_.__value_.__r.__words[0];
              if (v350[31] >= 0)
                v173 = v350 + 8;
              else
                v173 = (char *)*((_QWORD *)v350 + 1);
              if (v350[55] >= 0)
                v174 = v350 + 32;
              else
                v174 = (char *)*((_QWORD *)v350 + 4);
              if (v350[79] >= 0)
                v175 = v350 + 56;
              else
                v175 = (char *)*((_QWORD *)v350 + 7);
              v176 = _os_log_pack_fill();
              *(_DWORD *)v176 = 136315650;
              *(_QWORD *)(v176 + 4) = v173;
              *(_WORD *)(v176 + 12) = 2080;
              *(_QWORD *)(v176 + 14) = v174;
              *(_WORD *)(v176 + 22) = 2080;
              *(_QWORD *)(v176 + 24) = v175;
              v177 = (char *)operator new();
              v178 = *(unsigned __int8 *)(v102 + 39);
              v179 = v340;
              if ((v178 & 0x80u) != 0)
              {
                v179 = *(char **)(v102 + 16);
                v178 = *(_QWORD *)(v102 + 24);
              }
              *(_QWORD *)v177 = v172;
              *(_OWORD *)(v177 + 8) = *(_OWORD *)&v348.__r_.__value_.__r.__words[1];
              *(_OWORD *)&v348.__r_.__value_.__r.__words[1] = 0uLL;
              *(_OWORD *)(v177 + 24) = v349;
              v349 = 0uLL;
              *((_QWORD *)v177 + 5) = v179;
              *((_QWORD *)v177 + 6) = v178;
              v177[56] = 16;
              *(_QWORD *)__dst = 0;
              value[0] = v177;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v97 + 24) + 40))(*(_QWORD *)(v97 + 24), value);
              v180 = value[0];
              value[0] = 0;
              v181 = v342;
              if (v180)
              {
                v182 = (std::__shared_weak_count *)*((_QWORD *)v180 + 4);
                if (v182)
                {
                  v183 = (unint64_t *)&v182->__shared_owners_;
                  do
                    v184 = __ldaxr(v183);
                  while (__stlxr(v184 - 1, v183));
                  if (!v184)
                  {
                    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                    std::__shared_weak_count::__release_weak(v182);
                  }
                }
                v185 = (std::__shared_weak_count *)*((_QWORD *)v180 + 2);
                if (v185)
                {
                  v186 = (unint64_t *)&v185->__shared_owners_;
                  do
                    v187 = __ldaxr(v186);
                  while (__stlxr(v187 - 1, v186));
                  if (!v187)
                  {
                    ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                    std::__shared_weak_count::__release_weak(v185);
                  }
                }
                MEMORY[0x227684CE8](v180, 0x10F0C40B62ED6C6);
                v188 = *(_QWORD *)__dst;
                *(_QWORD *)__dst = 0;
                if (v188)
                {
                  v189 = *(std::__shared_weak_count **)(v188 + 32);
                  if (v189)
                  {
                    v190 = (unint64_t *)&v189->__shared_owners_;
                    do
                      v191 = __ldaxr(v190);
                    while (__stlxr(v191 - 1, v190));
                    if (!v191)
                    {
                      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                      std::__shared_weak_count::__release_weak(v189);
                    }
                  }
                  v192 = *(std::__shared_weak_count **)(v188 + 16);
                  if (v192)
                  {
                    v193 = (unint64_t *)&v192->__shared_owners_;
                    do
                      v194 = __ldaxr(v193);
                    while (__stlxr(v194 - 1, v193));
                    if (!v194)
                    {
                      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                      std::__shared_weak_count::__release_weak(v192);
                    }
                  }
                  MEMORY[0x227684CE8](v188, 0x10F0C40B62ED6C6);
                }
              }
              v195 = (std::__shared_weak_count *)*((_QWORD *)&v349 + 1);
              if (*((_QWORD *)&v349 + 1))
              {
                v196 = (unint64_t *)(*((_QWORD *)&v349 + 1) + 8);
                do
                  v197 = __ldaxr(v196);
                while (__stlxr(v197 - 1, v196));
                if (!v197)
                {
                  ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                  std::__shared_weak_count::__release_weak(v195);
                }
              }
              v198 = (std::__shared_weak_count *)v348.__r_.__value_.__r.__words[2];
              if (v348.__r_.__value_.__r.__words[2])
              {
                v199 = (unint64_t *)(v348.__r_.__value_.__r.__words[2] + 8);
                do
                  v200 = __ldaxr(v199);
                while (__stlxr(v200 - 1, v199));
                if (!v200)
                {
                  ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                  std::__shared_weak_count::__release_weak(v198);
                }
              }
            }
            else
            {
              os_log_type_enabled(v157, OS_LOG_TYPE_ERROR);
              LODWORD(value[0]) = 136315650;
              *(void **)((char *)value + 4) = v346;
              WORD2(value[1]) = 2080;
              *(void **)((char *)&value[1] + 6) = (void *)v355;
              HIWORD(value[2]) = 2080;
              v360 = (unint64_t)v354;
              v201 = (void *)_os_log_send_and_compose_impl();
              v181 = v95;
              if (v201)
                free(v201);
            }
            if (SHIBYTE(v371) < 0)
              operator delete((void *)v370);
            if (v181)
            {
              if (*(char *)(v5 + 23) < 0)
                v5 = *(_QWORD *)v5;
              LODWORD(v360) = 0;
              sub_223CC1C9C((uint64_t)value, (CFTypeRef *)v379);
              if ((_DWORD)v360 == -1)
                sub_22316DD70();
              *(_QWORD *)__dst = &v370;
              ((void (*)(std::string *__return_ptr, _BYTE *, void **))off_24EC63160[v360])(&v348, __dst, value);
              if ((_DWORD)v360 != -1)
                ((void (*)(_BYTE *, void **))off_24EC63148[v360])(__dst, value);
              v202 = SHIBYTE(v348.__r_.__value_.__r.__words[2]);
              v203 = v348.__r_.__value_.__r.__words[0];
              sub_223CC4A88();
              v204 = &v348;
              if (v202 < 0)
                v204 = (std::string *)v203;
              if (byte_2540CDE9F >= 0)
                v205 = (const char *)&xmmword_2540CDE88;
              else
                v205 = (const char *)xmmword_2540CDE88;
              sub_22322C138((uint64_t)v372, "Error while getting value for key \"%s\" and value %s expecting type %s", (const char *)v5, (const char *)v204, v205);
              if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v348.__r_.__value_.__l.__data_);
              sub_223182C08((uint64_t)v372);
            }
            sub_223182C08((uint64_t)v372);
            v206 = (std::__shared_weak_count *)v376;
            if (v376)
            {
              v207 = (unint64_t *)(v376 + 8);
              do
                v208 = __ldaxr(v207);
              while (__stlxr(v208 - 1, v207));
              if (!v208)
              {
                ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                std::__shared_weak_count::__release_weak(v206);
              }
            }
            goto LABEL_401;
          }
        }
        memmove(v151, v149, v150);
        goto LABEL_304;
      }
      sub_223CA9D94(&v355);
      if (**((int **)v355 + 7) > 3)
        return;
      v106 = *((unsigned __int8 *)v355 + 72);
      v107 = sub_22322F254((uint64_t)v355, "OSLogSurrogateAppender", 1, 0);
      v108 = v107;
      if (!v106 && !v107)
        return;
      sub_223195210((uint64_t)value);
      *(_QWORD *)v372 = "Key not found in dictionary \"";
      *(_QWORD *)&v372[8] = 29;
      v109 = *(unsigned __int8 *)(v5 + 23);
      if ((v109 & 0x80u) == 0)
        v110 = v5;
      else
        v110 = *(_QWORD *)v5;
      if ((v109 & 0x80u) != 0)
        v109 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)&v372[16] = v110;
      *(_QWORD *)&v373 = v109;
      *((_QWORD *)&v373 + 1) = "\" for variable \"";
      v374 = 16;
      v375 = *a4;
      v376 = "\"";
      v377 = 1;
      sub_2231A9820((uint64_t)v372, (uint64_t)v378, 0, 0, &v348);
      if ((v348.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v111 = &v348;
      else
        v111 = (std::string *)v348.__r_.__value_.__r.__words[0];
      if ((v348.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v348.__r_.__value_.__r.__words[2]);
      else
        size = v348.__r_.__value_.__l.__size_;
      sub_2231813E8(&value[2], (uint64_t)v111, size);
      if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v348.__r_.__value_.__l.__data_);
        v113 = v368;
        v347 = v106;
        if ((v368 & 0x10) == 0)
        {
LABEL_227:
          if ((v113 & 8) == 0)
          {
            v114 = 0;
            HIBYTE(v371) = 0;
            v115 = &v370;
            goto LABEL_245;
          }
          v122 = (const void *)*((_QWORD *)&v361 + 1);
          v114 = v363 - *((_QWORD *)&v361 + 1);
          if ((_QWORD)v363 - *((_QWORD *)&v361 + 1) > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_515:
            sub_22316DBC0();
LABEL_238:
          if (v114 >= 0x17)
          {
            v123 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v114 | 7) != 0x17)
              v123 = v114 | 7;
            v124 = v123 + 1;
            v115 = (__int128 *)operator new(v123 + 1);
            *((_QWORD *)&v370 + 1) = v114;
            v371 = v124 | 0x8000000000000000;
            *(_QWORD *)&v370 = v115;
          }
          else
          {
            HIBYTE(v371) = v114;
            v115 = &v370;
            if (!v114)
            {
LABEL_245:
              *((_BYTE *)v115 + v114) = 0;
              v348.__r_.__value_.__r.__words[0] = (std::string::size_type)&v355;
              v348.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
              v348.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
              LODWORD(v349) = 3;
              *((_QWORD *)&v349 + 1) = "unknown file";
              LODWORD(v350) = 99;
              v352 = 0;
              v353 = 0;
              v351 = "unknown function";
              if (v371 >= 0)
                v125 = (const char *)&v370;
              else
                v125 = (const char *)v370;
              v126 = *(_QWORD *)v348.__r_.__value_.__l.__data_;
              v127 = (const char *)(*(_QWORD *)v348.__r_.__value_.__l.__data_ + 16);
              v343 = v127;
              if (*(char *)(*(_QWORD *)v348.__r_.__value_.__l.__data_ + 39) < 0)
              {
                v127 = *(const char **)(v126 + 16);
                v128 = *(_QWORD *)(v126 + 24);
                v130 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v130 & 1) != 0)
                  goto LABEL_252;
              }
              else
              {
                v128 = *(unsigned __int8 *)(*(_QWORD *)v348.__r_.__value_.__l.__data_ + 39);
                v129 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v129 & 1) != 0)
                  goto LABEL_252;
              }
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)v372);
                sub_223199C58("com.apple.cv3d", (unint64_t)v372, &xmmword_255788F40);
                if ((_BYTE)v373 && (v372[23] & 0x80000000) != 0)
                  operator delete(*(void **)v372);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
              }
LABEL_252:
              if (byte_255788F57 >= 0)
                v131 = (const char *)&xmmword_255788F40;
              else
                v131 = (const char *)xmmword_255788F40;
              if (byte_255788F57 >= 0)
                v132 = byte_255788F57;
              else
                v132 = *((_QWORD *)&xmmword_255788F40 + 1);
              *(_QWORD *)v372 = os_log_create(v131, v127);
              v133 = &v372[8];
              if (v132 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v132 >= 0x17)
              {
                v134 = (v132 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v132 | 7) != 0x17)
                  v134 = v132 | 7;
                v135 = v134 + 1;
                v133 = operator new(v134 + 1);
                *(_QWORD *)&v372[16] = v132;
                *(_QWORD *)&v373 = v135 | 0x8000000000000000;
                *(_QWORD *)&v372[8] = v133;
              }
              else
              {
                BYTE7(v373) = v132;
                if (!v132)
                {
LABEL_266:
                  v133[v132] = 0;
                  BYTE8(v373) = 1;
                  v136 = &v374;
                  if (v128 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  if (v128 >= 0x17)
                  {
                    v137 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v128 | 7) != 0x17)
                      v137 = v128 | 7;
                    v138 = v137 + 1;
                    v136 = (uint64_t *)operator new(v137 + 1);
                    *(_QWORD *)&v375 = v128;
                    *((_QWORD *)&v375 + 1) = v138 | 0x8000000000000000;
                    v374 = (uint64_t)v136;
                  }
                  else
                  {
                    HIBYTE(v375) = v128;
                    if (!v128)
                    {
LABEL_274:
                      *((_BYTE *)v136 + v128) = 0;
                      LOBYTE(v376) = 1;
                      v139 = *(NSObject **)v372;
                      if (SHIBYTE(v375) < 0)
                        operator delete((void *)v374);
                      if (BYTE8(v373) && SBYTE7(v373) < 0)
                        operator delete(*(void **)&v372[8]);
                      if (*(_QWORD *)v372)
                        os_release(*(void **)v372);
                      if (!v108 || !*(_QWORD *)(v108 + 24))
                      {
                        os_log_type_enabled(v139, OS_LOG_TYPE_INFO);
                        *(_DWORD *)v372 = 136315138;
                        *(_QWORD *)&v372[4] = v125;
                        v146 = (void *)_os_log_send_and_compose_impl();
                        v147 = v347;
                        if (v146)
                          free(v146);
                        goto LABEL_597;
                      }
                      v140 = _os_log_pack_size();
                      v141 = operator new(v140, (std::align_val_t)8uLL);
                      v142 = (_QWORD *)operator new();
                      *v142 = &off_24EC1F7F0;
                      v142[1] = 0;
                      v142[2] = 0;
                      v142[3] = v141;
                      *(_QWORD *)__dst = v141;
                      *(_QWORD *)&__dst[8] = v141;
                      v357 = 0;
                      v358 = 0;
                      *(_QWORD *)&__dst[16] = v142;
                      v143 = strlen(v125);
                      if (v143 > 0x7FFFFFFFFFFFFFF7)
                        sub_22316DBC0();
                      v144 = v143;
                      if (v143 >= 0x17)
                      {
                        v276 = (v143 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v143 | 7) != 0x17)
                          v276 = v143 | 7;
                        v277 = v276 + 1;
                        v145 = operator new(v276 + 1);
                        *(_QWORD *)&v379[8] = v144;
                        *(_QWORD *)&v379[16] = v277 | 0x8000000000000000;
                        *(_QWORD *)v379 = v145;
                      }
                      else
                      {
                        v379[23] = v143;
                        v145 = v379;
                        if (!v143)
                        {
LABEL_537:
                          v145[v144] = 0;
                          v278 = *(_QWORD *)v379;
                          v378[0] = *(const char **)&v379[8];
                          *(const char **)((char *)v378 + 7) = *(const char **)&v379[15];
                          v279 = v379[23];
                          v280 = (char *)operator new(0x38uLL);
                          *((_QWORD *)v280 + 1) = 0;
                          *((_QWORD *)v280 + 2) = 0;
                          *((_QWORD *)v280 + 3) = off_24EC1FA48;
                          *(_QWORD *)v280 = &off_24EC1F9F8;
                          v281 = v378[0];
                          *((_QWORD *)v280 + 4) = v278;
                          *((_QWORD *)v280 + 5) = v281;
                          *(const char **)(v280 + 47) = *(const char **)((char *)v378 + 7);
                          v280[55] = v279;
                          memset(v378, 0, 15);
                          v282 = v358;
                          v357 = v280 + 24;
                          v358 = (std::__shared_weak_count *)v280;
                          if (v282)
                          {
                            v283 = (unint64_t *)&v282->__shared_owners_;
                            do
                              v284 = __ldaxr(v283);
                            while (__stlxr(v284 - 1, v283));
                            if (!v284)
                            {
                              ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                              std::__shared_weak_count::__release_weak(v282);
                            }
                          }
                          *(_OWORD *)v372 = *(_OWORD *)__dst;
                          v285 = (uint64_t)v357;
                          *(_QWORD *)&v372[16] = *(_QWORD *)&__dst[16];
                          if (*(_QWORD *)&__dst[16])
                          {
                            v286 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                            do
                              v287 = __ldxr(v286);
                            while (__stxr(v287 + 1, v286));
                          }
                          v288 = v358;
                          *(_QWORD *)&v373 = v285;
                          *((_QWORD *)&v373 + 1) = v358;
                          if (v358)
                          {
                            v289 = (unint64_t *)&v358->__shared_owners_;
                            do
                              v290 = __ldxr(v289);
                            while (__stxr(v290 + 1, v289));
                            v374 = v285;
                            do
                              v291 = __ldaxr(v289);
                            while (__stlxr(v291 - 1, v289));
                            if (!v291)
                            {
                              ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                              std::__shared_weak_count::__release_weak(v288);
                            }
                          }
                          else
                          {
                            v374 = v285;
                          }
                          v292 = *(std::__shared_weak_count **)&__dst[16];
                          if (*(_QWORD *)&__dst[16])
                          {
                            v293 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                            do
                              v294 = __ldaxr(v293);
                            while (__stlxr(v294 - 1, v293));
                            if (!v294)
                            {
                              ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                              std::__shared_weak_count::__release_weak(v292);
                            }
                          }
                          v295 = *(_QWORD *)v372;
                          if (*(char *)(v374 + 31) >= 0)
                            v296 = (char *)(v374 + 8);
                          else
                            v296 = *(char **)(v374 + 8);
                          v297 = _os_log_pack_fill();
                          *(_DWORD *)v297 = 136315138;
                          *(_QWORD *)(v297 + 4) = v296;
                          v298 = operator new();
                          v299 = *(unsigned __int8 *)(v126 + 39);
                          v300 = *(const char **)(v126 + 16);
                          v301 = *(_QWORD *)(v126 + 24);
                          v302 = v373;
                          *(_OWORD *)(v298 + 8) = *(_OWORD *)&v372[8];
                          if ((v299 & 0x80u) != 0)
                            v299 = v301;
                          else
                            v300 = v343;
                          *(_QWORD *)v298 = v295;
                          *(_QWORD *)&v372[8] = 0;
                          *(_QWORD *)&v372[16] = 0;
                          *(_OWORD *)(v298 + 24) = v302;
                          v373 = 0uLL;
                          *(_QWORD *)(v298 + 40) = v300;
                          *(_QWORD *)(v298 + 48) = v299;
                          *(_BYTE *)(v298 + 56) = 1;
                          *(_QWORD *)v379 = 0;
                          *(_QWORD *)__dst = v298;
                          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v108 + 24) + 40))(*(_QWORD *)(v108 + 24), __dst);
                          v303 = *(_QWORD *)__dst;
                          *(_QWORD *)__dst = 0;
                          if (v303)
                          {
                            v304 = *(std::__shared_weak_count **)(v303 + 32);
                            if (v304)
                            {
                              v305 = (unint64_t *)&v304->__shared_owners_;
                              do
                                v306 = __ldaxr(v305);
                              while (__stlxr(v306 - 1, v305));
                              if (!v306)
                              {
                                ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
                                std::__shared_weak_count::__release_weak(v304);
                              }
                            }
                            v307 = *(std::__shared_weak_count **)(v303 + 16);
                            if (v307)
                            {
                              v308 = (unint64_t *)&v307->__shared_owners_;
                              do
                                v309 = __ldaxr(v308);
                              while (__stlxr(v309 - 1, v308));
                              if (!v309)
                              {
                                ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
                                std::__shared_weak_count::__release_weak(v307);
                              }
                            }
                            MEMORY[0x227684CE8](v303, 0x10F0C40B62ED6C6);
                            v310 = *(_QWORD *)v379;
                            *(_QWORD *)v379 = 0;
                            if (v310)
                            {
                              v311 = *(std::__shared_weak_count **)(v310 + 32);
                              if (v311)
                              {
                                v312 = (unint64_t *)&v311->__shared_owners_;
                                do
                                  v313 = __ldaxr(v312);
                                while (__stlxr(v313 - 1, v312));
                                if (!v313)
                                {
                                  ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                                  std::__shared_weak_count::__release_weak(v311);
                                }
                              }
                              v314 = *(std::__shared_weak_count **)(v310 + 16);
                              if (v314)
                              {
                                v315 = (unint64_t *)&v314->__shared_owners_;
                                do
                                  v316 = __ldaxr(v315);
                                while (__stlxr(v316 - 1, v315));
                                if (!v316)
                                {
                                  ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                                  std::__shared_weak_count::__release_weak(v314);
                                }
                              }
                              MEMORY[0x227684CE8](v310, 0x10F0C40B62ED6C6);
                            }
                          }
                          v317 = (std::__shared_weak_count *)*((_QWORD *)&v373 + 1);
                          v147 = v347;
                          if (*((_QWORD *)&v373 + 1))
                          {
                            v318 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
                            do
                              v319 = __ldaxr(v318);
                            while (__stlxr(v319 - 1, v318));
                            if (!v319)
                            {
                              ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                              std::__shared_weak_count::__release_weak(v317);
                            }
                          }
                          v320 = *(std::__shared_weak_count **)&v372[16];
                          if (*(_QWORD *)&v372[16])
                          {
                            v321 = (unint64_t *)(*(_QWORD *)&v372[16] + 8);
                            do
                              v322 = __ldaxr(v321);
                            while (__stlxr(v322 - 1, v321));
                            if (!v322)
                            {
                              ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
                              std::__shared_weak_count::__release_weak(v320);
                            }
                          }
LABEL_597:
                          if (v147)
                          {
                            v323 = (const char *)&v370;
                            if (v371 < 0)
                              v323 = (const char *)v370;
                            sub_22322C138((uint64_t)&v348, "%s", v323);
                            sub_223182C08((uint64_t)&v348);
                          }
                          sub_223182C08((uint64_t)&v348);
                          v324 = v353;
                          if (v353)
                          {
                            v325 = (unint64_t *)&v353->__shared_owners_;
                            do
                              v326 = __ldaxr(v325);
                            while (__stlxr(v326 - 1, v325));
                            if (!v326)
                            {
                              ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                              std::__shared_weak_count::__release_weak(v324);
                            }
                          }
                          if (SHIBYTE(v371) < 0)
                            operator delete((void *)v370);
                          value[0] = *(void **)MEMORY[0x24BEDB7F0];
                          v327 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
                          *(void **)((char *)value + *((_QWORD *)value[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                          value[2] = v327;
                          v360 = MEMORY[0x24BEDB848] + 16;
                          if (v366 < 0)
                            operator delete(v365);
                          std::streambuf::~streambuf();
                          std::iostream::~basic_iostream();
                          MEMORY[0x227684BE0](&v369);
                          return;
                        }
                      }
                      memcpy(v145, v125, v144);
                      goto LABEL_537;
                    }
                  }
                  memmove(v136, v127, v128);
                  goto LABEL_274;
                }
              }
              memmove(v133, v131, v132);
              goto LABEL_266;
            }
          }
          memmove(v115, v122, v114);
          goto LABEL_245;
        }
      }
      else
      {
        v113 = v368;
        v347 = v106;
        if ((v368 & 0x10) == 0)
          goto LABEL_227;
      }
      v121 = v367;
      if (v367 < v364)
      {
        v367 = v364;
        v121 = v364;
      }
      v122 = (const void *)*((_QWORD *)&v363 + 1);
      v114 = v121 - *((_QWORD *)&v363 + 1);
      if (v121 - *((_QWORD *)&v363 + 1) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_515;
      goto LABEL_238;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!(_BYTE)v349)
      goto LABEL_186;
  }
  if ((SHIBYTE(v348.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) == 42)
    {
      v21 = &v348;
      if ((v348.__r_.__value_.__s.__data_[0] & 0xFE) != 0x30)
        goto LABEL_612;
      goto LABEL_32;
    }
LABEL_79:
    sub_223CA9D94(v378);
    if (**((int **)v378[0] + 7) > 5)
      goto LABEL_182;
    v28 = *((unsigned __int8 *)v378[0] + 72);
    v29 = sub_22322F254((uint64_t)v378[0], "OSLogSurrogateAppender", 1, 0);
    v30 = (char *)v29;
    if (!v28 && !v29)
      goto LABEL_182;
    *(_QWORD *)v372 = v378;
    *(std::chrono::steady_clock::time_point *)&v372[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v372[16] = std::chrono::system_clock::now();
    LODWORD(v373) = 5;
    *((_QWORD *)&v373 + 1) = "unknown file";
    LODWORD(v374) = 55;
    *((_QWORD *)&v375 + 1) = 0;
    v376 = 0;
    *(_QWORD *)&v375 = "unknown function";
    v31 = HIBYTE(v348.__r_.__value_.__r.__words[2]);
    if (*(char *)(v5 + 23) >= 0)
      v32 = (char *)v5;
    else
      v32 = *(char **)v5;
    v333 = v32;
    v33 = &v348;
    if ((v348.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v33 = (std::string *)v348.__r_.__value_.__r.__words[0];
    __s = (char *)v33;
    if ((v348.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v31 = v348.__r_.__value_.__l.__size_;
    v332 = v31;
    v34 = **(_QWORD **)v372;
    v35 = (const char *)(**(_QWORD **)v372 + 16);
    v330 = v35;
    if (*(char *)(**(_QWORD **)v372 + 39) < 0)
    {
      v35 = *(const char **)(v34 + 16);
      v36 = *(_QWORD *)(v34 + 24);
    }
    else
    {
      v36 = *(unsigned __int8 *)(**(_QWORD **)v372 + 39);
    }
    v331 = **(_QWORD **)v372;
    v339 = v30;
    v341 = a4;
    v37 = atomic_load((unsigned __int8 *)&qword_255788F58);
    v38 = (const char *)&xmmword_255788F40;
    if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)value);
      if ((_BYTE)v360)
      {
        xmmword_255788F40 = *(_OWORD *)value;
        unk_255788F50 = value[2];
      }
      else
      {
        byte_255788F57 = 14;
        strcpy((char *)&xmmword_255788F40, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
    {
      v39 = byte_255788F57;
    }
    else
    {
      v39 = *((_QWORD *)&xmmword_255788F40 + 1);
      v38 = (const char *)xmmword_255788F40;
    }
    value[0] = os_log_create(v38, v35);
    v40 = &value[1];
    if (v39 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v39 >= 0x17)
    {
      v41 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v39 | 7) != 0x17)
        v41 = v39 | 7;
      v42 = v41 + 1;
      v40 = (void **)operator new(v41 + 1);
      value[2] = (void *)v39;
      v360 = v42 | 0x8000000000000000;
      value[1] = v40;
    }
    else
    {
      HIBYTE(v360) = v39;
      if (!v39)
      {
LABEL_104:
        *((_BYTE *)v40 + v39) = 0;
        LOBYTE(v361) = 1;
        v43 = (char *)&v361 + 8;
        if (v36 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        a4 = v341;
        if (v36 >= 0x17)
        {
          v45 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v36 | 7) != 0x17)
            v45 = v36 | 7;
          v46 = v45 + 1;
          v43 = (char *)operator new(v45 + 1);
          v362 = v36;
          *(_QWORD *)&v363 = v46 | 0x8000000000000000;
          *((_QWORD *)&v361 + 1) = v43;
          v44 = v339;
        }
        else
        {
          BYTE7(v363) = v36;
          v44 = v339;
          if (!v36)
          {
LABEL_112:
            v43[v36] = 0;
            BYTE8(v363) = 1;
            v47 = value[0];
            if (SBYTE7(v363) < 0)
              operator delete(*((void **)&v361 + 1));
            if ((_BYTE)v361 && SHIBYTE(v360) < 0)
              operator delete(value[1]);
            if (value[0])
              os_release(value[0]);
            if (!v44 || !*((_QWORD *)v44 + 3))
            {
              os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
              LODWORD(value[0]) = 136315906;
              *(void **)((char *)value + 4) = __s;
              WORD2(value[1]) = 2080;
              *(void **)((char *)&value[1] + 6) = v333;
              HIWORD(value[2]) = 2048;
              v360 = 42;
              LOWORD(v361) = 2048;
              *(_QWORD *)((char *)&v361 + 2) = v332;
              v55 = (void *)_os_log_send_and_compose_impl();
              if (v55)
                free(v55);
              if (!v28)
                goto LABEL_177;
LABEL_169:
              if (*(char *)(v5 + 23) >= 0)
                v86 = (const char *)v5;
              else
                v86 = *(const char **)v5;
              v87 = &v348;
              if ((v348.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v87 = (std::string *)v348.__r_.__value_.__r.__words[0];
              v88 = HIBYTE(v348.__r_.__value_.__r.__words[2]);
              if ((v348.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v88 = v348.__r_.__value_.__l.__size_;
              sub_22322C138((uint64_t)v372, "Error while converting \"%s\" to bitset for key \"%s\". Expected size %zu, got size %zu.", (const char *)v87, v86, 0x2AuLL, v88);
              sub_223182C08((uint64_t)v372);
LABEL_177:
              sub_223182C08((uint64_t)v372);
              v89 = (std::__shared_weak_count *)v376;
              if (v376)
              {
                v90 = (unint64_t *)(v376 + 8);
                do
                  v91 = __ldaxr(v90);
                while (__stlxr(v91 - 1, v90));
                if (!v91)
                {
                  ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                  std::__shared_weak_count::__release_weak(v89);
                }
              }
LABEL_182:
              LOBYTE(v22) = 0;
              v27 = 0;
              v26 = 1;
              if (!(_BYTE)v349)
                goto LABEL_185;
              goto LABEL_183;
            }
            v48 = _os_log_pack_size();
            v49 = (std::__shared_weak_count_vtbl *)operator new(v48, (std::align_val_t)8uLL);
            v50 = (std::__shared_weak_count *)operator new();
            v50->__shared_owners_ = 0;
            v51 = (unint64_t *)&v50->__shared_owners_;
            v50->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v50->__shared_weak_owners_ = 0;
            v50[1].__vftable = v49;
            v52 = strlen(__s);
            if (v52 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v53 = (void *)v52;
            v329 = v49;
            if (v52 >= 0x17)
            {
              v56 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v52 | 7) != 0x17)
                v56 = v52 | 7;
              v57 = v56 + 1;
              v54 = operator new(v56 + 1);
              value[1] = v53;
              value[2] = (void *)(v57 | 0x8000000000000000);
              value[0] = v54;
            }
            else
            {
              HIBYTE(value[2]) = v52;
              v54 = value;
              if (!v52)
              {
LABEL_133:
                *((_BYTE *)v53 + (_QWORD)v54) = 0;
                v58 = strlen(v333);
                if (v58 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v59 = v58;
                v328 = v28;
                if (v58 >= 0x17)
                {
                  v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v58 | 7) != 0x17)
                    v61 = v58 | 7;
                  v62 = v61 + 1;
                  v60 = operator new(v61 + 1);
                  *(_QWORD *)&__dst[8] = v59;
                  *(_QWORD *)&__dst[16] = v62 | 0x8000000000000000;
                  *(_QWORD *)__dst = v60;
                }
                else
                {
                  __dst[23] = v58;
                  v60 = __dst;
                  if (!v58)
                    goto LABEL_141;
                }
                memcpy(v60, v333, v59);
LABEL_141:
                v60[v59] = 0;
                v63 = HIBYTE(value[2]);
                __sb = __dst[23];
                v64 = value[0];
                *(void **)v379 = value[1];
                *(void **)&v379[7] = *(void **)((char *)&value[1] + 7);
                *(_QWORD *)&v370 = *(_QWORD *)&__dst[8];
                v65 = *(_QWORD *)__dst;
                *(_QWORD *)((char *)&v370 + 7) = *(_QWORD *)&__dst[15];
                v66 = operator new(0x58uLL);
                v67 = (std::__shared_weak_count *)v66;
                v66[1] = 0;
                v68 = v66 + 1;
                v66[2] = 0;
                *v66 = &off_24EC370D8;
                v66[3] = off_24EC37128;
                v334 = (char *)(v66 + 3);
                v66[4] = v64;
                shared_owners = (char *)(v66 + 4);
                v66[5] = *(_QWORD *)v379;
                *(_QWORD *)((char *)v66 + 47) = *(_QWORD *)&v379[7];
                v66[7] = v65;
                v70 = (char *)(v66 + 7);
                *((_BYTE *)v66 + 55) = v63;
                v66[8] = v370;
                *(_QWORD *)((char *)v66 + 71) = *(_QWORD *)((char *)&v370 + 7);
                *((_BYTE *)v66 + 79) = __sb;
                do
                  v71 = __ldxr(v51);
                while (__stxr(v71 + 1, v51));
                do
                  v72 = __ldxr(v68);
                while (__stxr(v72 + 1, v68));
                do
                  v73 = __ldaxr(v68);
                while (__stlxr(v73 - 1, v68));
                if (!v73)
                {
                  (*(void (**)(_QWORD *))(*v66 + 16))(v66);
                  std::__shared_weak_count::__release_weak(v67);
                }
                do
                  v74 = __ldaxr(v51);
                while (__stlxr(v74 - 1, v51));
                if (!v74)
                {
                  ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                  std::__shared_weak_count::__release_weak(v50);
                }
                if (SHIBYTE(v67[2].__vftable) < 0)
                  shared_owners = (char *)v67[1].__shared_owners_;
                if (SHIBYTE(v67[3].__vftable) < 0)
                  v70 = (char *)v67[2].__shared_owners_;
                v75 = _os_log_pack_fill();
                *(_DWORD *)v75 = 136315906;
                *(_QWORD *)(v75 + 4) = shared_owners;
                *(_WORD *)(v75 + 12) = 2080;
                *(_QWORD *)(v75 + 14) = v70;
                *(_WORD *)(v75 + 22) = 2048;
                *(_QWORD *)(v75 + 24) = 42;
                *(_WORD *)(v75 + 32) = 2048;
                *(_QWORD *)(v75 + 34) = v332;
                v76 = (_QWORD *)operator new();
                v77 = *(unsigned __int8 *)(v331 + 39);
                v78 = v330;
                if ((v77 & 0x80u) != 0)
                {
                  v78 = *(const char **)(v331 + 16);
                  v77 = *(_QWORD *)(v331 + 24);
                }
                *v76 = v329;
                v76[1] = v329;
                v76[2] = v50;
                v76[3] = v334;
                v76[4] = v67;
                v76[5] = v78;
                v76[6] = v77;
                *((_BYTE *)v76 + 56) = 16;
                value[0] = v76;
                (*(void (**)(_QWORD, void **))(**((_QWORD **)v339 + 3) + 40))(*((_QWORD *)v339 + 3), value);
                v79 = value[0];
                value[0] = 0;
                a4 = v341;
                if (v79)
                {
                  v80 = (std::__shared_weak_count *)*((_QWORD *)v79 + 4);
                  if (v80)
                  {
                    v81 = (unint64_t *)&v80->__shared_owners_;
                    do
                      v82 = __ldaxr(v81);
                    while (__stlxr(v82 - 1, v81));
                    if (!v82)
                    {
                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                      std::__shared_weak_count::__release_weak(v80);
                    }
                  }
                  v83 = (std::__shared_weak_count *)*((_QWORD *)v79 + 2);
                  if (v83)
                  {
                    v84 = (unint64_t *)&v83->__shared_owners_;
                    do
                      v85 = __ldaxr(v84);
                    while (__stlxr(v85 - 1, v84));
                    if (!v85)
                    {
                      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                      std::__shared_weak_count::__release_weak(v83);
                    }
                  }
                  MEMORY[0x227684CE8](v79, 0x10F0C40B62ED6C6);
                }
                if (!v328)
                  goto LABEL_177;
                goto LABEL_169;
              }
            }
            memcpy(v54, __s, (size_t)v53);
            goto LABEL_133;
          }
        }
        memmove(v43, v35, v36);
        goto LABEL_112;
      }
    }
    memmove(v40, v38, v39);
    goto LABEL_104;
  }
  if (v348.__r_.__value_.__l.__size_ != 42)
    goto LABEL_79;
  v21 = (std::string *)v348.__r_.__value_.__r.__words[0];
  if ((*v348.__r_.__value_.__l.__data_ & 0xFE) != 0x30)
    goto LABEL_612;
LABEL_32:
  if ((v21->__r_.__value_.__s.__data_[1] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[2] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[3] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[4] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[5] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[6] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[7] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[8] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[9] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[10] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[11] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[12] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[13] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[14] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[15] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[16] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[17] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[18] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[19] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[20] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[21] & 0xFE) != 0x30
    || (v21->__r_.__value_.__s.__data_[22] & 0xFE) != 0x30
    || (*((_BYTE *)&v21->__r_.__value_.__s + 23) & 0xFE) != 0x30
    || (v21[1].__r_.__value_.__s.__data_[0] & 0xFE) != 0x30
    || (v21[1].__r_.__value_.__s.__data_[1] & 0xFE) != 0x30
    || (v21[1].__r_.__value_.__s.__data_[2] & 0xFE) != 0x30
    || (v21[1].__r_.__value_.__s.__data_[3] & 0xFE) != 0x30
    || (v21[1].__r_.__value_.__s.__data_[4] & 0xFE) != 0x30
    || (v21[1].__r_.__value_.__s.__data_[5] & 0xFE) != 0x30
    || (v21[1].__r_.__value_.__s.__data_[6] & 0xFE) != 0x30
    || (v21[1].__r_.__value_.__s.__data_[7] & 0xFE) != 0x30
    || (v21[1].__r_.__value_.__s.__data_[8] & 0xFE) != 0x30
    || (v21[1].__r_.__value_.__s.__data_[9] & 0xFE) != 0x30
    || (v21[1].__r_.__value_.__s.__data_[10] & 0xFE) != 0x30
    || (v21[1].__r_.__value_.__s.__data_[11] & 0xFE) != 0x30
    || (v21[1].__r_.__value_.__s.__data_[12] & 0xFE) != 0x30
    || (v21[1].__r_.__value_.__s.__data_[13] & 0xFE) != 0x30
    || (v21[1].__r_.__value_.__s.__data_[14] & 0xFE) != 0x30
    || (v21[1].__r_.__value_.__s.__data_[15] & 0xFE) != 0x30
    || (v21[1].__r_.__value_.__s.__data_[16] & 0xFE) != 0x30
    || (v21[1].__r_.__value_.__s.__data_[17] & 0xFE) != 0x30)
  {
LABEL_612:
    sub_223CC1708();
  }
  v22 = 0;
  v23 = 0;
  v24 = &v21[1].__r_.__value_.__s.__data_[17];
  do
  {
    v25 = *v24--;
    if (v25 == 49)
      v22 |= 1 << v23;
    else
      v22 &= ~(1 << v23);
    ++v23;
  }
  while (v23 != 42);
  v26 = 0;
  v27 = v22 & 0xFFFFFFFFFFFFFF00;
LABEL_183:
  if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v348.__r_.__value_.__l.__data_);
LABEL_185:
  if ((v26 & 1) != 0)
    goto LABEL_186;
  v116 = a3;
  *(_QWORD *)a3 = v27 | v22;
  *(_BYTE *)(a3 + 8) = 1;
  sub_223CA9D94(&v370);
  if (**(int **)(v370 + 56) > 4)
    return;
  v117 = *(unsigned __int8 *)(v370 + 72);
  v118 = sub_22322F254(v370, "OSLogSurrogateAppender", 1, 0);
  v119 = v118;
  if (!v117 && !v118)
    return;
  *(_QWORD *)v372 = &v370;
  *(std::chrono::steady_clock::time_point *)&v372[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v372[16] = std::chrono::system_clock::now();
  LODWORD(v373) = 4;
  *((_QWORD *)&v373 + 1) = "unknown file";
  LODWORD(v374) = 91;
  *((_QWORD *)&v375 + 1) = 0;
  v376 = 0;
  *(_QWORD *)&v375 = "unknown function";
  v120 = *(char **)a4;
  LODWORD(v360) = 0;
  if (*(_BYTE *)(a3 + 8))
    sub_223CC2A40((unsigned int *)value, (_QWORD *)a3);
  else
    sub_2231A0D14(value, "nullopt");
  if ((_DWORD)v360 == -1)
    sub_22316DD70();
  v348.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
  ((void (*)(_BYTE *__return_ptr, std::string *, void **))off_24EC63160[v360])(v379, &v348, value);
  if ((_DWORD)v360 != -1)
    ((void (*)(std::string *, void **))off_24EC63148[v360])(&v348, value);
  v344 = v119;
  v212 = v379;
  if (v379[23] < 0)
    v212 = *(const char **)v379;
  v378[0] = v212;
  if (*(char *)(v5 + 23) >= 0)
    v213 = (const char *)v5;
  else
    v213 = *(const char **)v5;
  v355 = v213;
  v214 = **(_QWORD **)v372;
  v215 = (const char *)(**(_QWORD **)v372 + 16);
  v335 = v215;
  if (*(char *)(**(_QWORD **)v372 + 39) < 0)
  {
    v215 = *(const char **)(v214 + 16);
    v216 = *(_QWORD *)(v214 + 24);
  }
  else
  {
    v216 = *(unsigned __int8 *)(**(_QWORD **)v372 + 39);
  }
  __sa = v117;
  v217 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v217 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)value);
    sub_223199C58("com.apple.cv3d", (unint64_t)value, &xmmword_255788F40);
    if ((_BYTE)v360 && SHIBYTE(value[2]) < 0)
      operator delete(value[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
    v116 = a3;
  }
  if (byte_255788F57 >= 0)
    v218 = (const char *)&xmmword_255788F40;
  else
    v218 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v219 = byte_255788F57;
  else
    v219 = *((_QWORD *)&xmmword_255788F40 + 1);
  value[0] = os_log_create(v218, v215);
  v220 = &value[1];
  if (v219 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v219 >= 0x17)
  {
    v221 = a4;
    v222 = (v219 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v219 | 7) != 0x17)
      v222 = v219 | 7;
    v223 = v222 + 1;
    v220 = (void **)operator new(v222 + 1);
    value[2] = (void *)v219;
    v360 = v223 | 0x8000000000000000;
    value[1] = v220;
    a4 = v221;
    v116 = a3;
    goto LABEL_432;
  }
  HIBYTE(v360) = v219;
  if (v219)
LABEL_432:
    memmove(v220, v218, v219);
  *((_BYTE *)v220 + v219) = 0;
  LOBYTE(v361) = 1;
  v224 = (char *)&v361 + 8;
  if (v216 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v216 >= 0x17)
  {
    v225 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17)
      v225 = v216 | 7;
    v226 = v225 + 1;
    v224 = (char *)operator new(v225 + 1);
    v362 = v216;
    *(_QWORD *)&v363 = v226 | 0x8000000000000000;
    *((_QWORD *)&v361 + 1) = v224;
    goto LABEL_440;
  }
  BYTE7(v363) = v216;
  if (v216)
LABEL_440:
    memmove(v224, v215, v216);
  v224[v216] = 0;
  BYTE8(v363) = 1;
  v227 = value[0];
  if (SBYTE7(v363) < 0)
    operator delete(*((void **)&v361 + 1));
  if ((_BYTE)v361 && SHIBYTE(v360) < 0)
    operator delete(value[1]);
  if (value[0])
    os_release(value[0]);
  if (v344 && *(_QWORD *)(v344 + 24))
  {
    v228 = _os_log_pack_size();
    v229 = operator new(v228, (std::align_val_t)8uLL);
    v230 = (_QWORD *)operator new();
    v230[1] = 0;
    v231 = v230 + 1;
    *v230 = &off_24EC1F7F0;
    v230[2] = 0;
    v230[3] = v229;
    *(_QWORD *)__dst = v229;
    *(_QWORD *)&__dst[8] = v229;
    v357 = 0;
    v358 = 0;
    *(_QWORD *)&__dst[16] = v230;
    sub_223CC18F4((uint64_t)value, v120, v378, &v355);
    v232 = (char *)operator new(0x68uLL);
    v233 = (std::__shared_weak_count *)v232;
    *((_QWORD *)v232 + 1) = 0;
    v234 = (unint64_t *)(v232 + 8);
    *(_QWORD *)v232 = &off_24EC206A8;
    *((_QWORD *)v232 + 3) = off_24EC206F8;
    v235 = v362;
    *((_QWORD *)v232 + 6) = v360;
    *((_QWORD *)v232 + 2) = 0;
    *((_OWORD *)v232 + 2) = *(_OWORD *)&value[1];
    *(_OWORD *)(v232 + 56) = v361;
    *((_QWORD *)v232 + 9) = v235;
    *((_QWORD *)v232 + 12) = v364;
    *((_OWORD *)v232 + 5) = v363;
    v357 = v232 + 24;
    v358 = (std::__shared_weak_count *)v232;
    v348.__r_.__value_.__r.__words[0] = (std::string::size_type)v229;
    v348.__r_.__value_.__l.__size_ = (std::string::size_type)v229;
    v348.__r_.__value_.__r.__words[2] = (std::string::size_type)v230;
    do
      v236 = __ldxr(v231);
    while (__stxr(v236 + 1, v231));
    *(_QWORD *)&v349 = v232 + 24;
    *((_QWORD *)&v349 + 1) = v232;
    do
      v237 = __ldxr(v234);
    while (__stxr(v237 + 1, v234));
    v350 = v232 + 24;
    do
      v238 = __ldaxr(v234);
    while (__stlxr(v238 - 1, v234));
    if (!v238)
    {
      (*(void (**)(char *))(*(_QWORD *)v232 + 16))(v232);
      std::__shared_weak_count::__release_weak(v233);
    }
    v239 = a4;
    v240 = *(std::__shared_weak_count **)&__dst[16];
    if (*(_QWORD *)&__dst[16])
    {
      v241 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
      do
        v242 = __ldaxr(v241);
      while (__stlxr(v242 - 1, v241));
      if (!v242)
      {
        ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
        std::__shared_weak_count::__release_weak(v240);
      }
    }
    v243 = v348.__r_.__value_.__r.__words[0];
    if (v350[31] >= 0)
      v244 = v350 + 8;
    else
      v244 = (char *)*((_QWORD *)v350 + 1);
    if (v350[55] >= 0)
      v245 = v350 + 32;
    else
      v245 = (char *)*((_QWORD *)v350 + 4);
    if (v350[79] >= 0)
      v246 = v350 + 56;
    else
      v246 = (char *)*((_QWORD *)v350 + 7);
    v247 = _os_log_pack_fill();
    *(_DWORD *)v247 = 136315650;
    *(_QWORD *)(v247 + 4) = v244;
    *(_WORD *)(v247 + 12) = 2080;
    *(_QWORD *)(v247 + 14) = v245;
    *(_WORD *)(v247 + 22) = 2080;
    *(_QWORD *)(v247 + 24) = v246;
    v248 = (char *)operator new();
    v249 = *(unsigned __int8 *)(v214 + 39);
    v250 = v335;
    if ((v249 & 0x80u) != 0)
    {
      v250 = *(const char **)(v214 + 16);
      v249 = *(_QWORD *)(v214 + 24);
    }
    *(_QWORD *)v248 = v243;
    *(_OWORD *)(v248 + 8) = *(_OWORD *)&v348.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v348.__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)(v248 + 24) = v349;
    v349 = 0uLL;
    *((_QWORD *)v248 + 5) = v250;
    *((_QWORD *)v248 + 6) = v249;
    v248[56] = 16;
    *(_QWORD *)__dst = 0;
    value[0] = v248;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v344 + 24) + 40))(*(_QWORD *)(v344 + 24), value);
    a4 = v239;
    v251 = value[0];
    value[0] = 0;
    if (v251)
    {
      v252 = (std::__shared_weak_count *)*((_QWORD *)v251 + 4);
      if (v252)
      {
        v253 = (unint64_t *)&v252->__shared_owners_;
        do
          v254 = __ldaxr(v253);
        while (__stlxr(v254 - 1, v253));
        if (!v254)
        {
          ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
          std::__shared_weak_count::__release_weak(v252);
        }
      }
      v255 = (std::__shared_weak_count *)*((_QWORD *)v251 + 2);
      if (v255)
      {
        v256 = (unint64_t *)&v255->__shared_owners_;
        do
          v257 = __ldaxr(v256);
        while (__stlxr(v257 - 1, v256));
        if (!v257)
        {
          ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
          std::__shared_weak_count::__release_weak(v255);
        }
      }
      MEMORY[0x227684CE8](v251, 0x10F0C40B62ED6C6);
      v258 = *(_QWORD *)__dst;
      *(_QWORD *)__dst = 0;
      if (v258)
      {
        v259 = *(std::__shared_weak_count **)(v258 + 32);
        if (v259)
        {
          v260 = (unint64_t *)&v259->__shared_owners_;
          do
            v261 = __ldaxr(v260);
          while (__stlxr(v261 - 1, v260));
          if (!v261)
          {
            ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
            std::__shared_weak_count::__release_weak(v259);
          }
        }
        v262 = *(std::__shared_weak_count **)(v258 + 16);
        if (v262)
        {
          v263 = (unint64_t *)&v262->__shared_owners_;
          do
            v264 = __ldaxr(v263);
          while (__stlxr(v264 - 1, v263));
          if (!v264)
          {
            ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
            std::__shared_weak_count::__release_weak(v262);
          }
        }
        MEMORY[0x227684CE8](v258, 0x10F0C40B62ED6C6);
      }
    }
    v265 = (std::__shared_weak_count *)*((_QWORD *)&v349 + 1);
    v116 = a3;
    if (*((_QWORD *)&v349 + 1))
    {
      v266 = (unint64_t *)(*((_QWORD *)&v349 + 1) + 8);
      do
        v267 = __ldaxr(v266);
      while (__stlxr(v267 - 1, v266));
      if (!v267)
      {
        ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
        std::__shared_weak_count::__release_weak(v265);
      }
    }
    v268 = (std::__shared_weak_count *)v348.__r_.__value_.__r.__words[2];
    if (v348.__r_.__value_.__r.__words[2])
    {
      v269 = (unint64_t *)(v348.__r_.__value_.__r.__words[2] + 8);
      do
        v270 = __ldaxr(v269);
      while (__stlxr(v270 - 1, v269));
      if (!v270)
      {
        ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
        std::__shared_weak_count::__release_weak(v268);
      }
    }
  }
  else
  {
    os_log_type_enabled(v227, OS_LOG_TYPE_ERROR);
    LODWORD(value[0]) = 136315650;
    *(void **)((char *)value + 4) = v120;
    WORD2(value[1]) = 2080;
    *(const char **)((char *)&value[1] + 6) = v378[0];
    HIWORD(value[2]) = 2080;
    v360 = (unint64_t)v355;
    v271 = (void *)_os_log_send_and_compose_impl();
    if (v271)
      free(v271);
  }
  if ((v379[23] & 0x80000000) != 0)
    operator delete(*(void **)v379);
  if (__sa)
  {
    v272 = *(const char **)a4;
    LODWORD(v360) = 0;
    if (*(_BYTE *)(v116 + 8))
      sub_223CC2A40((unsigned int *)value, (_QWORD *)v116);
    else
      sub_2231A0D14(value, "nullopt");
    if ((_DWORD)v360 == -1)
      sub_22316DD70();
    *(_QWORD *)__dst = v379;
    ((void (*)(std::string *__return_ptr, _BYTE *, void **))off_24EC63160[v360])(&v348, __dst, value);
    if ((_DWORD)v360 != -1)
      ((void (*)(_BYTE *, void **))off_24EC63148[v360])(__dst, value);
    v273 = &v348;
    if ((v348.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v273 = (std::string *)v348.__r_.__value_.__r.__words[0];
    if (*(char *)(v5 + 23) >= 0)
      v274 = (const char *)v5;
    else
      v274 = *(const char **)v5;
    sub_22322C138((uint64_t)v372, "Overriding variable \"%s\" with value %s from key \"%s\"", v272, (const char *)v273, v274);
    if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v348.__r_.__value_.__l.__data_);
    sub_223182C08((uint64_t)v372);
  }
  sub_223182C08((uint64_t)v372);
  v209 = (std::__shared_weak_count *)v376;
  if (v376)
  {
    v275 = (unint64_t *)(v376 + 8);
    do
      v211 = __ldaxr(v275);
    while (__stlxr(v211 - 1, v275));
    goto LABEL_531;
  }
}

void sub_223CC0190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,_Unwind_Exception *exception_object,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,void *a47,int a48,__int16 a49,char a50,char a51,char a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (a52 && a51 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  if (*(char *)(v56 - 105) < 0)
  {
    operator delete(*(void **)(v56 - 128));
    sub_223182DAC(v56 - 224);
    _Unwind_Resume(a1);
  }
  sub_223182DAC(v56 - 224);
  _Unwind_Resume(a1);
}

void sub_223CC07E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223CC0814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_Unwind_Exception *exception_object)
{
  uint64_t v23;

  sub_223224234(v23 - 128);
  _Unwind_Resume(a1);
}

void sub_223CC0828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223CC0858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_Unwind_Exception *exception_object)
{
  uint64_t v23;

  sub_223224234(v23 - 128);
  _Unwind_Resume(a1);
}

void sub_223CC086C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_Unwind_Exception *exception_object,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_223167354((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_223CC0880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_Unwind_Exception *exception_object)
{
  unint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t v25;

  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 - 1, v23));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223CC08F8);
}

void sub_223CC08B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223CC08C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  const void *v23;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (v23)
      CFRelease(v23);
    __cxa_rethrow();
  }
  JUMPOUT(0x223CC08F8);
}

void sub_223CC08E4()
{
  __cxa_end_catch();
  JUMPOUT(0x223CC08F8);
}

void sub_223CC08F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_Unwind_Exception *exception_object)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_22316DC48(a1);
}

void sub_223CC11E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  __cxa_end_catch();
  if (a32)
  {
    if (a31 < 0)
    {
      operator delete(a26);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x223CC08F8);
}

uint64_t sub_223CC1200(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  CFDictionaryRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  const __CFNumber *v9;
  CFTypeID TypeID;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *key;
  std::__shared_weak_count *v16;
  void *value;
  uint64_t valuePtr;

  sub_224527BAC(a2, (CFStringRef *)&key);
  v3 = (uint64_t)key;
  v5 = *(CFDictionaryRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
LABEL_6:
    if (v5)
      goto LABEL_7;
LABEL_14:
    v3 = 0;
    v11 = v16;
    if (!v16)
      return v3 & 0x100000000 | v5;
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (!v5)
    goto LABEL_14;
LABEL_7:
  value = 0;
  if (v3)
  {
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, (const void *)v3, (const void **)&value))
    {
      v9 = (const __CFNumber *)value;
      if (value && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v9) == TypeID))
      {
        valuePtr = 0;
        CFNumberGetValue(v9, kCFNumberNSIntegerType, &valuePtr);
        v3 = 0x100000000;
        LOBYTE(v5) = valuePtr;
        v11 = v16;
        if (!v16)
          return v3 & 0x100000000 | v5;
      }
      else
      {
        v3 = 0;
        LOBYTE(v5) = 0;
        v11 = v16;
        if (!v16)
          return v3 & 0x100000000 | v5;
      }
    }
    else
    {
      v3 = 0;
      LOBYTE(v5) = 0;
      v11 = v16;
      if (!v16)
        return v3 & 0x100000000 | v5;
    }
  }
  else
  {
    LOBYTE(v5) = 0;
    v11 = v16;
    if (!v16)
      return v3 & 0x100000000 | v5;
  }
LABEL_21:
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v3 & 0x100000000 | v5;
}

void sub_223CC13A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223CC13B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  CFDictionaryRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  const __CFNumber *v9;
  CFTypeID TypeID;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *key;
  std::__shared_weak_count *v16;
  void *value;
  uint64_t valuePtr;

  sub_224527BAC(a2, (CFStringRef *)&key);
  v3 = (uint64_t)key;
  v5 = *(CFDictionaryRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
LABEL_6:
    if (v5)
      goto LABEL_7;
LABEL_14:
    v3 = 0;
    v11 = v16;
    if (!v16)
      return v3 & 0x100000000 | v5;
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (!v5)
    goto LABEL_14;
LABEL_7:
  value = 0;
  if (v3)
  {
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, (const void *)v3, (const void **)&value))
    {
      v9 = (const __CFNumber *)value;
      if (value && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v9) == TypeID))
      {
        valuePtr = 0;
        CFNumberGetValue(v9, kCFNumberNSIntegerType, &valuePtr);
        v3 = 0x100000000;
        LOBYTE(v5) = valuePtr;
        v11 = v16;
        if (!v16)
          return v3 & 0x100000000 | v5;
      }
      else
      {
        v3 = 0;
        LOBYTE(v5) = 0;
        v11 = v16;
        if (!v16)
          return v3 & 0x100000000 | v5;
      }
    }
    else
    {
      v3 = 0;
      LOBYTE(v5) = 0;
      v11 = v16;
      if (!v16)
        return v3 & 0x100000000 | v5;
    }
  }
  else
  {
    LOBYTE(v5) = 0;
    v11 = v16;
    if (!v16)
      return v3 & 0x100000000 | v5;
  }
LABEL_21:
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v3 & 0x100000000 | v5;
}

void sub_223CC1554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223CC1568(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  CFDictionaryRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  const __CFNumber *v9;
  CFTypeID TypeID;
  unsigned int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *key;
  std::__shared_weak_count *v17;
  void *value;
  int valuePtr;

  sub_224527BAC(a2, (CFStringRef *)&key);
  v3 = (uint64_t)key;
  v5 = *(CFDictionaryRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
LABEL_6:
    if (v5)
      goto LABEL_7;
LABEL_14:
    v11 = 0;
    v3 = 0;
    v12 = v17;
    if (!v17)
      return v3 & 0x100000000 | v11 & 0xFFFFFF00 | v5;
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (!v5)
    goto LABEL_14;
LABEL_7:
  value = 0;
  if (v3)
  {
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, (const void *)v3, (const void **)&value))
    {
      v9 = (const __CFNumber *)value;
      if (value && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v9) == TypeID))
      {
        valuePtr = 0;
        CFNumberGetValue(v9, kCFNumberFloatType, &valuePtr);
        v3 = 0x100000000;
        LOBYTE(v5) = valuePtr;
        v11 = valuePtr & 0xFFFFFF00;
        v12 = v17;
        if (!v17)
          return v3 & 0x100000000 | v11 & 0xFFFFFF00 | v5;
      }
      else
      {
        v3 = 0;
        LOBYTE(v5) = 0;
        v11 = 0;
        v12 = v17;
        if (!v17)
          return v3 & 0x100000000 | v11 & 0xFFFFFF00 | v5;
      }
    }
    else
    {
      v11 = 0;
      v3 = 0;
      LOBYTE(v5) = 0;
      v12 = v17;
      if (!v17)
        return v3 & 0x100000000 | v11 & 0xFFFFFF00 | v5;
    }
  }
  else
  {
    v11 = 0;
    LOBYTE(v5) = 0;
    v12 = v17;
    if (!v17)
      return v3 & 0x100000000 | v11 & 0xFFFFFF00 | v5;
  }
LABEL_21:
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return v3 & 0x100000000 | v11 & 0xFFFFFF00 | v5;
}

void sub_223CC16F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223CC1708()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_223315C18(exception, "bitset string ctor has invalid argument");
  __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
}

void sub_223CC1744(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_223CC1758(uint64_t a1, char *__s, const char **a3)
{
  size_t v6;
  size_t v7;
  _QWORD *p_dst;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t result;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  _QWORD *__dst;
  __int128 v25;

  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = operator new(v9 + 1);
    *(_QWORD *)&v25 = v7;
    *((_QWORD *)&v25 + 1) = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v25) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  *((_BYTE *)p_dst + v7) = 0;
  v11 = *a3;
  result = strlen(*a3);
  if (result > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v13 = result;
  if (result >= 0x17)
  {
    v15 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v15 = result | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v16 | 0x8000000000000000;
    v22 = v14;
  }
  else
  {
    HIBYTE(v23) = result;
    v14 = &v22;
    if (!result)
      goto LABEL_17;
  }
  result = (unint64_t)memcpy(v14, v11, v13);
LABEL_17:
  *((_BYTE *)v14 + v13) = 0;
  v17 = HIBYTE(v25);
  v18 = HIBYTE(v23);
  v19 = __dst;
  v20 = v25;
  *(_QWORD *)a1 = off_24EC20780;
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)&v25 + 7);
  *(_BYTE *)(a1 + 31) = v17;
  v21 = v23;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v21;
  *(_QWORD *)(a1 + 47) = *(_QWORD *)((char *)&v23 + 7);
  *(_BYTE *)(a1 + 55) = v18;
  return result;
}

void sub_223CC18D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_223CC18F4(uint64_t a1, char *__s, const char **a3, const char **a4)
{
  size_t v8;
  size_t v9;
  _QWORD *p_dst;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  size_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  unint64_t result;
  size_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33;
  _QWORD *v34;
  __int128 v35;
  _QWORD *__dst;
  __int128 v37;

  v8 = strlen(__s);
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = operator new(v11 + 1);
    *(_QWORD *)&v37 = v9;
    *((_QWORD *)&v37 + 1) = v12 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v37) = v8;
  p_dst = &__dst;
  if (v8)
LABEL_8:
    memcpy(p_dst, __s, v9);
  *((_BYTE *)p_dst + v9) = 0;
  v13 = *a3;
  v14 = strlen(*a3);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    *(_QWORD *)&v35 = v15;
    *((_QWORD *)&v35 + 1) = v18 | 0x8000000000000000;
    v34 = v16;
    goto LABEL_16;
  }
  HIBYTE(v35) = v14;
  v16 = &v34;
  if (v14)
LABEL_16:
    memcpy(v16, v13, v15);
  *((_BYTE *)v16 + v15) = 0;
  v19 = *a4;
  result = strlen(*a4);
  if (result > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v21 = result;
  if (result >= 0x17)
  {
    v23 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v23 = result | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    *(_QWORD *)&v33 = v21;
    *((_QWORD *)&v33 + 1) = v24 | 0x8000000000000000;
    v32 = v22;
  }
  else
  {
    HIBYTE(v33) = result;
    v22 = &v32;
    if (!result)
      goto LABEL_25;
  }
  result = (unint64_t)memcpy(v22, v19, v21);
LABEL_25:
  *((_BYTE *)v22 + v21) = 0;
  v25 = HIBYTE(v37);
  v26 = HIBYTE(v35);
  v27 = HIBYTE(v33);
  v28 = __dst;
  v29 = v37;
  *(_QWORD *)a1 = off_24EC206F8;
  *(_QWORD *)(a1 + 8) = v28;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)&v37 + 7);
  *(_BYTE *)(a1 + 31) = v25;
  v30 = v35;
  *(_QWORD *)(a1 + 32) = v34;
  *(_QWORD *)(a1 + 40) = v30;
  *(_QWORD *)(a1 + 47) = *(_QWORD *)((char *)&v35 + 7);
  *(_BYTE *)(a1 + 55) = v26;
  v31 = v33;
  *(_QWORD *)(a1 + 56) = v32;
  *(_QWORD *)(a1 + 64) = v31;
  *(_QWORD *)(a1 + 71) = *(_QWORD *)((char *)&v33 + 7);
  *(_BYTE *)(a1 + 79) = v27;
  return result;
}

void sub_223CC1B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  _Unwind_Resume(exception_object);
}

void sub_223CC1B5C(uint64_t a1, uint64_t a2, void *key)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char v18;
  void *value;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v7 = *(CFDictionaryRef *)a2;
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
LABEL_6:
    if (v7)
      goto LABEL_7;
LABEL_21:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!v7)
    goto LABEL_21;
LABEL_7:
  value = 0;
  if (key && CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a2, key, (const void **)&value))
  {
    sub_2231A74D8(&v20, value);
    v12 = v20;
    v11 = v21;
    if (v21)
    {
      v13 = (unint64_t *)&v21->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      v15 = v21;
      if (v21)
      {
        v16 = (unint64_t *)&v21->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v11;
    v18 = 1;
  }
  else
  {
    v18 = 0;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 16) = v18;
}

void sub_223CC1C9C(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  int v5;
  size_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__dst[2];
  unint64_t v19;
  _QWORD v20[5];
  _QWORD *v21;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_223195210(v4);
  v20[0] = v4;
  sub_224532A28((_QWORD *)(v4 + 16), *a2);
  v5 = *(_DWORD *)(v4 + 120);
  if ((v5 & 0x10) != 0)
  {
    v8 = *(_QWORD *)(v4 + 112);
    v9 = *(_QWORD *)(v4 + 72);
    if (v8 < v9)
    {
      *(_QWORD *)(v4 + 112) = v9;
      v8 = v9;
    }
    v10 = *(const void **)(v4 + 64);
    v6 = v8 - (_QWORD)v10;
    if (v8 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v5 & 8) == 0)
    {
      v6 = 0;
      HIBYTE(v19) = 0;
      v7 = __dst;
      goto LABEL_14;
    }
    v10 = *(const void **)(v4 + 40);
    v6 = *(_QWORD *)(v4 + 56) - (_QWORD)v10;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    v7 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v6;
    v19 = v12 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_13;
  }
  HIBYTE(v19) = v6;
  v7 = __dst;
  if (v6)
LABEL_13:
    memmove(v7, v10, v6);
LABEL_14:
  *((_BYTE *)v7 + v6) = 0;
  v13 = v20[0];
  if (v20[0])
  {
    v14 = MEMORY[0x24BEDB7F0];
    v15 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v20[0] = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(v14 + 72);
    *(_QWORD *)(v13 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(v14 + 64);
    *(_QWORD *)(v13 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v13 + 16) = v16;
    if (*(char *)(v13 + 111) < 0)
      operator delete(*(void **)(v13 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v13 + 128);
    MEMORY[0x227684CE8](v13, 0x10B2C40EED050F3);
  }
  v20[0] = a1;
  v20[1] = __dst;
  v20[2] = a1;
  v20[3] = __dst;
  v20[4] = __dst;
  v17 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v17 == -1)
    sub_22316DD70();
  v21 = v20;
  ((void (*)(_QWORD **, uint64_t))off_24EC63178[v17])(&v21, a1);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
}

void sub_223CC1EEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_223CC1F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223CC1F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223CC1F40()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CD920);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD920))
  {
    sub_223CC1FF8();
    if (byte_2540CDAC7 < 0)
    {
      sub_223197FA4(&xmmword_2540CDA98, (void *)qword_2540CDAB0, unk_2540CDAB8);
    }
    else
    {
      xmmword_2540CDA98 = *(_OWORD *)&qword_2540CDAB0;
      unk_2540CDAA8 = unk_2540CDAC0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDA98, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD920);
  }
}

void sub_223CC1FE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD920);
  _Unwind_Resume(a1);
}

void sub_223CC1FF8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CD928);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD928))
  {
    sub_223CC231C(__p);
    sub_223CC20CC((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CDAB0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD928);
  }
}

void sub_223CC208C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CD928);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CD928);
  _Unwind_Resume(a1);
}

void sub_223CC20CC(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v10 = *(_OWORD *)"float64";
  v11 = 0x700000000000000;
  v2 = atomic_load((unsigned __int8 *)&qword_2540CD930);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD930))
  {
    sub_223CC24F8();
    if (byte_2540CDAF7 < 0)
    {
      sub_223197FA4(&xmmword_2540CDAC8, (void *)qword_2540CDAE0, unk_2540CDAE8);
    }
    else
    {
      xmmword_2540CDAC8 = *(_OWORD *)&qword_2540CDAE0;
      unk_2540CDAD8 = unk_2540CDAF0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDAC8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD930);
  }
  if (byte_2540CDADF < 0)
  {
    sub_223197FA4(&v12, (void *)xmmword_2540CDAC8, *((unint64_t *)&xmmword_2540CDAC8 + 1));
  }
  else
  {
    v12 = xmmword_2540CDAC8;
    v13 = unk_2540CDAD8;
  }
  sub_22319BD1C(&__p, (uint64_t)v10, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_2540CDAB0, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      return;
LABEL_17:
    operator delete(v10[0]);
    return;
  }
  operator delete((void *)v12);
  if (SHIBYTE(v11) < 0)
    goto LABEL_17;
}

void sub_223CC22A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  __cxa_guard_abort(&qword_2540CD930);
  if ((a18 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223CC231C(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CD960);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD960))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::chrono::duration<double>]", qword_2540CDB58);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CDB58, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD960);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CD968);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD968))
  {
    v5 = sub_2231A38CC(qword_2540CDB58, "<", 0);
    sub_2231A37C8(qword_2540CDB58, 0, v5, qword_2540CDB70);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CDB70, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD968);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CD970);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD970))
  {
    sub_224573040((uint64_t)qword_2540CDB70, (uint64_t)&xmmword_2540CDB88);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDB88, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD970);
  }
  if (byte_2540CDB9F < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2540CDB88, *((unint64_t *)&xmmword_2540CDB88 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2540CDB88;
    __dst[2] = unk_2540CDB98;
  }
}

void sub_223CC24B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD970);
  _Unwind_Resume(a1);
}

void sub_223CC24C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD968);
  _Unwind_Resume(a1);
}

void sub_223CC24E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD960);
  _Unwind_Resume(a1);
}

void sub_223CC24F8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CD938);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD938))
  {
    sub_223CC2780(__p);
    sub_223CC25CC((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CDAE0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD938);
  }
}

void sub_223CC258C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CD938);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CD938);
  _Unwind_Resume(a1);
}

void sub_223CC25CC(char *a1)
{
  int64x2_t v2;
  int8x16_t v3;
  void **v4;
  void **v5;
  void *v6;
  void *__p;
  void **v8;
  void *__dst[2];
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  sub_223CC295C();
  if (byte_2540CDB0F < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2540CDAF8, *((unint64_t *)&xmmword_2540CDAF8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2540CDAF8;
    v10 = unk_2540CDB08;
  }
  sub_223CC295C();
  if (byte_2540CDB0F < 0)
  {
    sub_223197FA4(&v11, (void *)xmmword_2540CDAF8, *((unint64_t *)&xmmword_2540CDAF8 + 1));
  }
  else
  {
    v11 = xmmword_2540CDAF8;
    v12 = unk_2540CDB08;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_2540CDAE0, v2, v3);
  v4 = (void **)__p;
  if (__p)
  {
    v5 = v8;
    v6 = __p;
    if (v8 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = __p;
    }
    v8 = v4;
    operator delete(v6);
  }
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v11);
  if (SHIBYTE(v10) < 0)
    goto LABEL_19;
}

void sub_223CC273C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48(&a10);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_223CC2780(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CD948);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD948))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::ratio<1>]", qword_2540CDB10);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CDB10, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD948);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CD950);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD950))
  {
    v5 = sub_2231A38CC(qword_2540CDB10, "<", 0);
    sub_2231A37C8(qword_2540CDB10, 0, v5, qword_2540CDB28);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CDB28, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD950);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CD958);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD958))
  {
    sub_224573040((uint64_t)qword_2540CDB28, (uint64_t)&xmmword_2540CDB40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDB40, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD958);
  }
  if (byte_2540CDB57 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2540CDB40, *((unint64_t *)&xmmword_2540CDB40 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2540CDB40;
    __dst[2] = unk_2540CDB50;
  }
}

void sub_223CC2914(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD958);
  _Unwind_Resume(a1);
}

void sub_223CC292C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD950);
  _Unwind_Resume(a1);
}

void sub_223CC2944(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD948);
  _Unwind_Resume(a1);
}

void sub_223CC295C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CD940);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD940))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 1L]", __p);
    sub_22457326C((uint64_t)__p, (std::string *)&xmmword_2540CDAF8);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDAF8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD940);
  }
}

void sub_223CC2A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CD940);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CD940);
  _Unwind_Resume(a1);
}

void sub_223CC2A40(unsigned int *a1, _QWORD *a2)
{
  uint64_t v4;
  const std::locale::facet *v5;
  unsigned int v6;
  const std::locale::facet *v7;
  char v8;
  _OWORD *v9;
  uint64_t v10;
  int8x16_t v11;
  uint64_t v12;
  _BYTE *p_p;
  void *v14;
  uint64_t v15;
  int v16;
  size_t v17;
  void **v18;
  unint64_t v19;
  unint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *__dst[2];
  unint64_t v30;
  _QWORD *v31;
  void *__p;
  __int128 v33;
  void **v34;
  void **v35;
  std::locale v36;
  std::locale v37;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_223195210(v4);
  v31 = (_QWORD *)v4;
  std::ios_base::getloc((const std::ios_base *)(v4 + 16 + *(_QWORD *)(*(_QWORD *)(v4 + 16) - 24)));
  v5 = std::locale::use_facet(&v37, MEMORY[0x24BEDB350]);
  v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 48);
  std::ios_base::getloc((const std::ios_base *)(v4 + 16 + *(_QWORD *)(*(_QWORD *)(v4 + 16) - 24)));
  v7 = std::locale::use_facet(&v36, MEMORY[0x24BEDB350]);
  v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 49);
  v9 = operator new(0x30uLL);
  v10 = 0;
  __p = v9;
  v33 = xmmword_2245B9450;
  v11 = vdupq_n_s8(v6);
  *v9 = v11;
  v9[1] = v11;
  *(int8x16_t *)((char *)v9 + 26) = v11;
  *((_BYTE *)v9 + 42) = 0;
  v12 = 41;
  do
  {
    if (((*a2 >> v10) & 1) != 0)
    {
      if (v33 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      p_p[v12] = v8;
    }
    ++v10;
    --v12;
  }
  while (v10 != 42);
  if (v33 >= 0)
    v14 = &__p;
  else
    v14 = __p;
  if (v33 >= 0)
    v15 = HIBYTE(v33);
  else
    v15 = v33;
  sub_2231813E8((_QWORD *)(v4 + 16), (uint64_t)v14, v15);
  if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
    std::locale::~locale(&v36);
    std::locale::~locale(&v37);
    v16 = *(_DWORD *)(v4 + 120);
    if ((v16 & 0x10) == 0)
      goto LABEL_16;
LABEL_19:
    v19 = *(_QWORD *)(v4 + 112);
    v20 = *(_QWORD *)(v4 + 72);
    if (v19 < v20)
    {
      *(_QWORD *)(v4 + 112) = v20;
      v19 = v20;
    }
    v21 = *(const void **)(v4 + 64);
    v17 = v19 - (_QWORD)v21;
    if (v19 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_37;
    goto LABEL_22;
  }
  operator delete(__p);
  std::locale::~locale(&v36);
  std::locale::~locale(&v37);
  v16 = *(_DWORD *)(v4 + 120);
  if ((v16 & 0x10) != 0)
    goto LABEL_19;
LABEL_16:
  if ((v16 & 8) == 0)
  {
    v17 = 0;
    HIBYTE(v30) = 0;
    v18 = __dst;
    goto LABEL_29;
  }
  v21 = *(const void **)(v4 + 40);
  v17 = *(_QWORD *)(v4 + 56) - (_QWORD)v21;
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
LABEL_37:
    sub_22316DBC0();
LABEL_22:
  if (v17 >= 0x17)
  {
    v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v22 = v17 | 7;
    v23 = v22 + 1;
    v18 = (void **)operator new(v22 + 1);
    __dst[1] = (void *)v17;
    v30 = v23 | 0x8000000000000000;
    __dst[0] = v18;
    goto LABEL_28;
  }
  HIBYTE(v30) = v17;
  v18 = __dst;
  if (v17)
LABEL_28:
    memmove(v18, v21, v17);
LABEL_29:
  *((_BYTE *)v18 + v17) = 0;
  v24 = v31;
  if (v31)
  {
    v25 = MEMORY[0x24BEDB7F0];
    v26 = *MEMORY[0x24BEDB7F0];
    *v31 = *MEMORY[0x24BEDB7F0];
    v27 = *(_QWORD *)(v25 + 72);
    *(_QWORD *)((char *)v24 + *(_QWORD *)(v26 - 24)) = *(_QWORD *)(v25 + 64);
    v24[3] = MEMORY[0x24BEDB848] + 16;
    v24[2] = v27;
    if (*((char *)v24 + 111) < 0)
      operator delete((void *)v24[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v24 + 16);
    MEMORY[0x227684CE8](v24, 0x10B2C40EED050F3);
  }
  __p = a1;
  *(_QWORD *)&v33 = __dst;
  *((_QWORD *)&v33 + 1) = a1;
  v34 = __dst;
  v35 = __dst;
  v28 = a1[6];
  if ((_DWORD)v28 == -1)
    sub_22316DD70();
  v37.__locale_ = (std::locale::__imp *)&__p;
  ((void (*)(std::locale *, unsigned int *))off_24EC63178[v28])(&v37, a1);
  if (SHIBYTE(v30) < 0)
    operator delete(__dst[0]);
}

void sub_223CC2DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a22 < 0)
    operator delete(__p);
  std::locale::~locale((std::locale *)(v22 - 64));
  std::locale::~locale((std::locale *)(v22 - 56));
  sub_22456E764(&a16);
  _Unwind_Resume(a1);
}

void sub_223CC2E70()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CD980);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD980))
  {
    sub_223CC3134(__p);
    sub_223CC2F44((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CDBB8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD980);
  }
}

void sub_223CC2F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CD980);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CD980);
  _Unwind_Resume(a1);
}

void sub_223CC2F44(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CD988);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD988))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 42UL]", v10);
    sub_22457326C((uint64_t)v10, (std::string *)&xmmword_2540CDBD0);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDBD0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD988);
  }
  if (byte_2540CDBE7 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2540CDBD0, *((unint64_t *)&xmmword_2540CDBD0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2540CDBD0;
    v13 = unk_2540CDBE0;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_2540CDBB8, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_223CC30C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CD988);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CD988);
  _Unwind_Resume(a1);
}

void sub_223CC3108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_22319BB48((void **)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223CC3134(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CD990);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD990))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::bitset<42>]", qword_2540CDBE8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CDBE8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD990);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CD998);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD998))
  {
    v5 = sub_2231A38CC(qword_2540CDBE8, "<", 0);
    sub_2231A37C8(qword_2540CDBE8, 0, v5, qword_2540CDC00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CDC00, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD998);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CD9A0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD9A0))
  {
    sub_224573040((uint64_t)qword_2540CDC00, (uint64_t)&xmmword_2540CDC18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDC18, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD9A0);
  }
  if (byte_2540CDC2F < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2540CDC18, *((unint64_t *)&xmmword_2540CDC18 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2540CDC18;
    __dst[2] = unk_2540CDC28;
  }
}

void sub_223CC32C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD9A0);
  _Unwind_Resume(a1);
}

void sub_223CC32E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD998);
  _Unwind_Resume(a1);
}

void sub_223CC32F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD990);
  _Unwind_Resume(a1);
}

void sub_223CC3310(uint64_t a1, unsigned __int8 a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  uint64_t *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;

  if (a3)
  {
    std::to_string(&v6, a2);
    v8 = a1;
    v9 = &v6;
    v10 = a1;
    v11 = &v6;
    v12 = &v6;
    v4 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v7 = &v8;
    ((void (*)(uint64_t **, uint64_t))off_24EC63178[v4])(&v7, a1);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = a1;
    v9 = (std::string *)"nullopt";
    v10 = a1;
    v11 = (std::string *)"nullopt";
    v12 = (std::string *)"nullopt";
    v5 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v5 == -1)
      sub_22316DD70();
    v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    ((void (*)(std::string *, uint64_t))off_24EC63190[v5])(&v6, a1);
  }
}

void sub_223CC3400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223CC341C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CD9A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD9A8))
  {
    sub_223CC34D4();
    if (byte_2540CDC5F < 0)
    {
      sub_223197FA4(&xmmword_2540CDC30, (void *)qword_2540CDC48, unk_2540CDC50);
    }
    else
    {
      xmmword_2540CDC30 = *(_OWORD *)&qword_2540CDC48;
      unk_2540CDC40 = unk_2540CDC58;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDC30, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD9A8);
  }
}

void sub_223CC34BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD9A8);
  _Unwind_Resume(a1);
}

void sub_223CC34D4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CD9B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD9B0))
  {
    sub_223CC36C0(__p);
    sub_223CC35B0((char *)__p, (std::string *)&qword_2540CDC48);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CDC48, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD9B0);
  }
}

void sub_223CC3570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CD9B0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CD9B0);
  _Unwind_Resume(a1);
}

void sub_223CC35B0(char *a1@<X0>, std::string *a2@<X8>)
{
  int64x2_t v4;
  int8x16_t v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;
  void *v11[2];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v11 = *(_OWORD *)"uint8";
  v12 = 0x500000000000000;
  sub_22319BD1C(&__p, (uint64_t)v11, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v4, v5);
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
}

void sub_223CC3694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223CC36C0(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CD9B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD9B8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::optional<unsigned char>]", qword_2540CDC60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CDC60, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD9B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CD9C0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD9C0))
  {
    v5 = sub_2231A38CC(qword_2540CDC60, "<", 0);
    sub_2231A37C8(qword_2540CDC60, 0, v5, qword_2540CDC78);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CDC78, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD9C0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CD9C8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD9C8))
  {
    sub_224573040((uint64_t)qword_2540CDC78, (uint64_t)&xmmword_2540CDC90);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDC90, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD9C8);
  }
  if (byte_2540CDCA7 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2540CDC90, *((unint64_t *)&xmmword_2540CDC90 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2540CDC90;
    __dst[2] = unk_2540CDCA0;
  }
}

void sub_223CC3854(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD9C8);
  _Unwind_Resume(a1);
}

void sub_223CC386C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD9C0);
  _Unwind_Resume(a1);
}

void sub_223CC3884(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD9B8);
  _Unwind_Resume(a1);
}

void sub_223CC389C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CD9D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD9D0))
  {
    sub_223CC3954();
    if (byte_2540CDCD7 < 0)
    {
      sub_223197FA4(&xmmword_2540CDCA8, (void *)qword_2540CDCC0, unk_2540CDCC8);
    }
    else
    {
      xmmword_2540CDCA8 = *(_OWORD *)&qword_2540CDCC0;
      unk_2540CDCB8 = unk_2540CDCD0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDCA8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD9D0);
  }
}

void sub_223CC393C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD9D0);
  _Unwind_Resume(a1);
}

void sub_223CC3954()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CD9D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD9D8))
  {
    sub_223CC3A30(__p);
    sub_22363E464((char *)__p, (std::string *)&qword_2540CDCC0);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CDCC0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD9D8);
  }
}

void sub_223CC39F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CD9D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CD9D8);
  _Unwind_Resume(a1);
}

void sub_223CC3A30(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CD9E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD9E0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::optional<BOOL>]", qword_2540CDCD8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CDCD8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD9E0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CD9E8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD9E8))
  {
    v5 = sub_2231A38CC(qword_2540CDCD8, "<", 0);
    sub_2231A37C8(qword_2540CDCD8, 0, v5, qword_2540CDCF0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CDCF0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD9E8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CD9F0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD9F0))
  {
    sub_224573040((uint64_t)qword_2540CDCF0, (uint64_t)&xmmword_2540CDD08);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDD08, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD9F0);
  }
  if (byte_2540CDD1F < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2540CDD08, *((unint64_t *)&xmmword_2540CDD08 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2540CDD08;
    __dst[2] = unk_2540CDD18;
  }
}

void sub_223CC3BC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD9F0);
  _Unwind_Resume(a1);
}

void sub_223CC3BDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD9E8);
  _Unwind_Resume(a1);
}

void sub_223CC3BF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD9E0);
  _Unwind_Resume(a1);
}

void sub_223CC3C0C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CD9F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD9F8))
  {
    sub_223CC3CC4();
    if (byte_2540CDD4F < 0)
    {
      sub_223197FA4(&xmmword_2540CDD20, (void *)qword_2540CDD38, unk_2540CDD40);
    }
    else
    {
      xmmword_2540CDD20 = *(_OWORD *)&qword_2540CDD38;
      unk_2540CDD30 = unk_2540CDD48;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDD20, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD9F8);
  }
}

void sub_223CC3CAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD9F8);
  _Unwind_Resume(a1);
}

void sub_223CC3CC4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CDA00);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDA00))
  {
    sub_223CC3EA8(__p);
    sub_223CC3D98((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CDD38, &dword_22314D000);
    __cxa_guard_release(&qword_2540CDA00);
  }
}

void sub_223CC3D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CDA00);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CDA00);
  _Unwind_Resume(a1);
}

void sub_223CC3D98(char *a1)
{
  int64x2_t v2;
  int8x16_t v3;
  void **v4;
  void **v5;
  void *v6;
  void *__p;
  void **v8;
  void *v9[2];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v9 = *(_OWORD *)"std::string";
  v10 = 0xB00000000000000;
  sub_22319BD1C(&__p, (uint64_t)v9, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_2540CDD38, v2, v3);
  v4 = (void **)__p;
  if (__p)
  {
    v5 = v8;
    v6 = __p;
    if (v8 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = __p;
    }
    v8 = v4;
    operator delete(v6);
  }
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
}

void sub_223CC3E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223CC3EA8(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CDA08);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDA08))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::optional<std::string>]", qword_2540CDD50);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CDD50, &dword_22314D000);
    __cxa_guard_release(&qword_2540CDA08);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CDA10);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDA10))
  {
    v5 = sub_2231A38CC(qword_2540CDD50, "<", 0);
    sub_2231A37C8(qword_2540CDD50, 0, v5, qword_2540CDD68);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CDD68, &dword_22314D000);
    __cxa_guard_release(&qword_2540CDA10);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CDA18);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDA18))
  {
    sub_224573040((uint64_t)qword_2540CDD68, (uint64_t)&xmmword_2540CDD80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDD80, &dword_22314D000);
    __cxa_guard_release(&qword_2540CDA18);
  }
  if (byte_2540CDD97 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2540CDD80, *((unint64_t *)&xmmword_2540CDD80 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2540CDD80;
    __dst[2] = unk_2540CDD90;
  }
}

void sub_223CC403C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CDA18);
  _Unwind_Resume(a1);
}

void sub_223CC4054(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CDA10);
  _Unwind_Resume(a1);
}

void sub_223CC406C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CDA08);
  _Unwind_Resume(a1);
}

void sub_223CC4084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  uint64_t *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;

  if (*(_BYTE *)(a3 + 4))
  {
    std::to_string(&v6, *(_DWORD *)a3);
    v8 = a2;
    v9 = &v6;
    v10 = a2;
    v11 = &v6;
    v12 = &v6;
    v4 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v7 = &v8;
    ((void (*)(uint64_t **, uint64_t))off_24EC63178[v4])(&v7, a2);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = a2;
    v9 = (std::string *)"nullopt";
    v10 = a2;
    v11 = (std::string *)"nullopt";
    v12 = (std::string *)"nullopt";
    v5 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v5 == -1)
      sub_22316DD70();
    v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    ((void (*)(std::string *, uint64_t))off_24EC63190[v5])(&v6, a2);
  }
}

void sub_223CC4174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223CC4190()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CDA20);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDA20))
  {
    sub_223CC4248();
    if (byte_2540CDDC7 < 0)
    {
      sub_223197FA4(&xmmword_2540CDD98, (void *)qword_2540CDDB0, unk_2540CDDB8);
    }
    else
    {
      xmmword_2540CDD98 = *(_OWORD *)&qword_2540CDDB0;
      unk_2540CDDA8 = unk_2540CDDC0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDD98, &dword_22314D000);
    __cxa_guard_release(&qword_2540CDA20);
  }
}

void sub_223CC4230(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CDA20);
  _Unwind_Resume(a1);
}

void sub_223CC4248()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CDA28);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDA28))
  {
    sub_223CC442C(__p);
    sub_223CC431C((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CDDB0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CDA28);
  }
}

void sub_223CC42DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CDA28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CDA28);
  _Unwind_Resume(a1);
}

void sub_223CC431C(char *a1)
{
  int64x2_t v2;
  int8x16_t v3;
  void **v4;
  void **v5;
  void *v6;
  void *__p;
  void **v8;
  void *v9[2];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v9 = *(_OWORD *)"uint32";
  v10 = 0x600000000000000;
  sub_22319BD1C(&__p, (uint64_t)v9, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_2540CDDB0, v2, v3);
  v4 = (void **)__p;
  if (__p)
  {
    v5 = v8;
    v6 = __p;
    if (v8 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = __p;
    }
    v8 = v4;
    operator delete(v6);
  }
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
}

void sub_223CC4400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223CC442C(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CDA30);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDA30))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::optional<unsigned int>]", qword_2540CDDC8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CDDC8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CDA30);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CDA38);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDA38))
  {
    v5 = sub_2231A38CC(qword_2540CDDC8, "<", 0);
    sub_2231A37C8(qword_2540CDDC8, 0, v5, qword_2540CDDE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CDDE0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CDA38);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CDA40);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDA40))
  {
    sub_224573040((uint64_t)qword_2540CDDE0, (uint64_t)&xmmword_2540CDDF8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDDF8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CDA40);
  }
  if (byte_2540CDE0F < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2540CDDF8, *((unint64_t *)&xmmword_2540CDDF8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2540CDDF8;
    __dst[2] = unk_2540CDE08;
  }
}

void sub_223CC45C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CDA40);
  _Unwind_Resume(a1);
}

void sub_223CC45D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CDA38);
  _Unwind_Resume(a1);
}

void sub_223CC45F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CDA30);
  _Unwind_Resume(a1);
}

void sub_223CC4608()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CDA48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDA48))
  {
    sub_223CC46C0();
    if (byte_2540CDE3F < 0)
    {
      sub_223197FA4(&xmmword_2540CDE10, (void *)qword_2540CDE28, unk_2540CDE30);
    }
    else
    {
      xmmword_2540CDE10 = *(_OWORD *)&qword_2540CDE28;
      unk_2540CDE20 = unk_2540CDE38;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDE10, &dword_22314D000);
    __cxa_guard_release(&qword_2540CDA48);
  }
}

void sub_223CC46A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CDA48);
  _Unwind_Resume(a1);
}

void sub_223CC46C0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CDA50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDA50))
  {
    sub_223CC48AC(__p);
    sub_223CC479C((char *)__p, (std::string *)&qword_2540CDE28);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CDE28, &dword_22314D000);
    __cxa_guard_release(&qword_2540CDA50);
  }
}

void sub_223CC475C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CDA50);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CDA50);
  _Unwind_Resume(a1);
}

void sub_223CC479C(char *a1@<X0>, std::string *a2@<X8>)
{
  int64x2_t v4;
  int8x16_t v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;
  void *v11[2];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v11 = *(_OWORD *)"float32";
  v12 = 0x700000000000000;
  sub_22319BD1C(&__p, (uint64_t)v11, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v4, v5);
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
}

void sub_223CC4880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223CC48AC(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CDA58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDA58))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::optional<float>]", qword_2540CDE40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CDE40, &dword_22314D000);
    __cxa_guard_release(&qword_2540CDA58);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CDA60);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDA60))
  {
    v5 = sub_2231A38CC(qword_2540CDE40, "<", 0);
    sub_2231A37C8(qword_2540CDE40, 0, v5, qword_2540CDE58);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CDE58, &dword_22314D000);
    __cxa_guard_release(&qword_2540CDA60);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CDA68);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDA68))
  {
    sub_224573040((uint64_t)qword_2540CDE58, (uint64_t)&xmmword_2540CDE70);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDE70, &dword_22314D000);
    __cxa_guard_release(&qword_2540CDA68);
  }
  if (byte_2540CDE87 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2540CDE70, *((unint64_t *)&xmmword_2540CDE70 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2540CDE70;
    __dst[2] = unk_2540CDE80;
  }
}

void sub_223CC4A40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CDA68);
  _Unwind_Resume(a1);
}

void sub_223CC4A58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CDA60);
  _Unwind_Resume(a1);
}

void sub_223CC4A70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CDA58);
  _Unwind_Resume(a1);
}

void sub_223CC4A88()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CDA70);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDA70))
  {
    sub_223CC4B40();
    if (byte_2540CDEB7 < 0)
    {
      sub_223197FA4(&xmmword_2540CDE88, (void *)qword_2540CDEA0, unk_2540CDEA8);
    }
    else
    {
      xmmword_2540CDE88 = *(_OWORD *)&qword_2540CDEA0;
      unk_2540CDE98 = unk_2540CDEB0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDE88, &dword_22314D000);
    __cxa_guard_release(&qword_2540CDA70);
  }
}

void sub_223CC4B28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CDA70);
  _Unwind_Resume(a1);
}

void sub_223CC4B40()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CDA78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDA78))
  {
    sub_223CC4DE8(__p);
    sub_223CC4C14((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CDEA0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CDA78);
  }
}

void sub_223CC4BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CDA78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CDA78);
  _Unwind_Resume(a1);
}

void sub_223CC4C14(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CD978);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD978))
  {
    sub_223CC2E70();
    if (byte_2540CDBCF < 0)
    {
      sub_223197FA4(&xmmword_2540CDBA0, (void *)qword_2540CDBB8, unk_2540CDBC0);
    }
    else
    {
      xmmword_2540CDBA0 = *(_OWORD *)&qword_2540CDBB8;
      unk_2540CDBB0 = unk_2540CDBC8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDBA0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD978);
  }
  if (byte_2540CDBB7 < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2540CDBA0, *((unint64_t *)&xmmword_2540CDBA0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2540CDBA0;
    v11 = unk_2540CDBB0;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, (std::string *)&qword_2540CDEA0, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_223CC4DA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CD978);
  _Unwind_Resume(a1);
}

void sub_223CC4DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223CC4DE8(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CDA80);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDA80))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::optional<std::bitset<42>>]", qword_2540CDEB8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CDEB8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CDA80);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CDA88);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDA88))
  {
    v5 = sub_2231A38CC(qword_2540CDEB8, "<", 0);
    sub_2231A37C8(qword_2540CDEB8, 0, v5, qword_2540CDED0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CDED0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CDA88);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540CDA90);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDA90))
  {
    sub_224573040((uint64_t)qword_2540CDED0, (uint64_t)&xmmword_2540CDEE8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CDEE8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CDA90);
  }
  if (byte_2540CDEFF < 0)
  {
    sub_223197FA4(__dst, (void *)xmmword_2540CDEE8, *((unint64_t *)&xmmword_2540CDEE8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2540CDEE8;
    __dst[2] = unk_2540CDEF8;
  }
}

void sub_223CC4F7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CDA90);
  _Unwind_Resume(a1);
}

void sub_223CC4F94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CDA88);
  _Unwind_Resume(a1);
}

void sub_223CC4FAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CDA80);
  _Unwind_Resume(a1);
}

float32_t sub_223CC4FC4@<S0>(float32x2_t *a1@<X0>, float32x2_t *a2@<X8>)
{
  float32_t result;

  result = a1[1].f32[0] * 0.001;
  *a2 = vmul_f32(*a1, (float32x2_t)vdup_n_s32(0x3A83126Fu));
  a2[1].f32[0] = result;
  return result;
}

void sub_223CC4FF0(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t *v10;
  float32x2_t v11;
  double v12;
  int v13;
  unint64_t v14;
  char *v15;
  float32x2_t v16;
  int v17;
  double v18;
  int v19;
  uint64_t v20;
  void *__p;
  __int128 v22;
  _OWORD v23[6];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_223174EBC((char **)a2, 0x90uLL);
  v4 = *a1;
  if (*a1)
  {
    v5 = 0;
    do
    {
      v6 = *(unsigned __int8 *)(a1[16] + v5);
      __p = v23;
      v22 = xmmword_2245B8EB0;
      v7 = (16 * v5) | 8;
      v8 = v5;
      do
      {
        v9 = *(_DWORD *)(a1[1] + v7);
        v16 = vcvt_f32_f64(*(float64x2_t *)(a1[4] + 16 * v8));
        v17 = v9;
        v18 = *(float *)(a1[19] + 4 * v8);
        v19 = *(_DWORD *)(a1[31] + 4 * v8);
        v10 = (uint64_t *)((char *)__p + 32 * v22);
        if ((_QWORD)v22 == *((_QWORD *)&v22 + 1))
        {
          sub_223175298((uint64_t)&__p, v10, 1, (uint64_t *)&v16, &v20);
        }
        else
        {
          v11 = v16;
          *((_DWORD *)v10 + 2) = v17;
          *v10 = (uint64_t)v11;
          v12 = v18;
          *((_DWORD *)v10 + 6) = v19;
          *((double *)v10 + 2) = v12;
          *(_QWORD *)&v22 = v22 + 1;
        }
        v5 = v8 + 1;
        if (v8 + 1 >= v4)
          break;
        v13 = *(unsigned __int8 *)(a1[16] + v8 + 1);
        v7 += 16;
        ++v8;
      }
      while (v13 == v6);
      if ((_QWORD)v22)
      {
        v14 = *(_QWORD *)(a2 + 8);
        if (v14 >= *(_QWORD *)(a2 + 16))
        {
          v15 = sub_223175438((void **)a2, (uint64_t)&__p);
        }
        else
        {
          *(_QWORD *)v14 = v14 + 24;
          *(_OWORD *)(v14 + 8) = xmmword_2245B8EB0;
          if (v23 == __p)
          {
            sub_223175068((_QWORD *)v14, (uint64_t *)v23, (uint64_t *)&v23[2 * v22]);
            *(_QWORD *)&v22 = 0;
          }
          else
          {
            *(_QWORD *)v14 = __p;
            *(_OWORD *)(v14 + 8) = v22;
            __p = 0;
            v22 = 0uLL;
          }
          v15 = (char *)(v14 + 120);
        }
        *(_QWORD *)(a2 + 8) = v15;
      }
      if (*((_QWORD *)&v22 + 1))
      {
        if (v23 != __p)
          operator delete(__p);
      }
    }
    while (v5 < v4);
  }
}

void sub_223CC5224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18)
{
  void **v18;
  void *v19;
  char *v21;
  char *v22;
  void *v23;
  char *v24;

  if (a18 && v19 != __p)
    operator delete(__p);
  v21 = (char *)*v18;
  if (*v18)
  {
    v22 = (char *)v18[1];
    v23 = *v18;
    if (v22 != v21)
    {
      do
      {
        if (*((_QWORD *)v22 - 13))
        {
          v24 = (char *)*((_QWORD *)v22 - 15);
          if (v22 - 96 != v24)
            operator delete(v24);
        }
        v22 -= 120;
      }
      while (v22 != v21);
      v23 = *v18;
    }
    v18[1] = v21;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223CC52B8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_223CC5320@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  BOOL v5;
  __n128 v6;
  _QWORD v8[3];
  int v9;
  float (*v10)(__int16);
  int v11;

  v4 = (_DWORD *)(a1 + 56);
  if (*(_DWORD *)(a1 + 56))
    v5 = *(_DWORD *)(a1 + 60) == 0;
  else
    v5 = 1;
  if (v5
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/ImageProcessing/src/ColorSpaceConversion.cpp", 66, (uint64_t)"!image.Empty()", 14, (uint64_t)"Input image should not be empty", 31, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v11 = 0;
  v10 = sub_223CC540C;
  *(_QWORD *)a2 = &off_24EC24BA0;
  sub_223203A34(v4, (_WORD *)(a2 + 8));
  v9 = 1065353216;
  v8[0] = &v10;
  v8[1] = &v11;
  v8[2] = &v9;
  return sub_223CC547C(a1, a2, (uint64_t)v8, v6);
}

void sub_223CC53F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

float sub_223CC540C(__int16 a1)
{
  _H0 = a1;
  __asm { FCVT            S0, H0 }
  if (_S0 <= 0.0031308)
    return _S0 * 12.92;
  else
    return (float)((float)(powf(_S0, 0.41667) * 211.0) + -11.0) / 200.0;
}

uint64_t sub_223CC547C(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int16 *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  __int16 *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  _OWORD v47[2];

  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
    goto LABEL_18;
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v8)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v12 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v12)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v7 = *(_QWORD *)(a1 + 8);
    v12 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v12)
      goto LABEL_14;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(_BYTE *)(a1 + 73))
  {
LABEL_15:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v7 + 96))(&v39, v7, 0);
    v17 = *(_QWORD *)(a2 + 8);
    v16 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v16)
      goto LABEL_23;
    goto LABEL_19;
  }
LABEL_18:
  v39 = 0;
  v17 = *(_QWORD *)(a2 + 8);
  v16 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v16)
    goto LABEL_23;
LABEL_19:
  v18 = (unint64_t *)&v16->__shared_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  do
    v20 = __ldaxr(v18);
  while (__stlxr(v20 - 1, v18));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v17)
      goto LABEL_28;
    goto LABEL_24;
  }
LABEL_23:
  if (!v17)
    goto LABEL_28;
LABEL_24:
  if (*(_BYTE *)(a2 + 129))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v38, *(_QWORD *)(a2 + 8), 1);
    v21 = *(_DWORD *)(a1 + 32);
    if (!v21)
      goto LABEL_47;
    goto LABEL_29;
  }
LABEL_28:
  v38 = 0;
  v21 = *(_DWORD *)(a1 + 32);
  if (!v21)
    goto LABEL_47;
LABEL_29:
  v22 = *(_DWORD *)(a1 + 36);
  if (v22)
  {
    v23 = *(_DWORD *)(a1 + 40);
    if (v23)
    {
      v41 = v21 - 1;
      v24 = *(unsigned int *)(a1 + 48);
      v25 = *(unsigned int *)(a2 + 104);
      v42 = *(unsigned int *)(a1 + 44) | ((unint64_t)*(unsigned int *)(a2 + 100) << 32);
      v40 = 0;
      v43 = v22 - 1;
      v44 = v24 | (v25 << 32);
      v45 = v23 - 1;
      v46 = *(unsigned int *)(a1 + 52) | ((unint64_t)*(unsigned int *)(a2 + 108) << 32);
      v26 = *(__int16 **)(a1 + 24);
      if (*(_BYTE *)(a1 + 72) && v26)
      {
        v27 = *(_QWORD *)(a1 + 8);
        v28 = *(std::__shared_weak_count **)(a1 + 16);
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v27 + 88))(v27, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v26 = *(__int16 **)(a1 + 24);
      }
      v32 = *(__int16 **)(a2 + 32);
      if (*(_BYTE *)(a2 + 128) && v32)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v32 = *(__int16 **)(a2 + 32);
      }
      memset(v47, 0, sizeof(v47));
      v33 = v45;
      if (v45)
      {
        v34 = 2 * v46;
        v35 = 4 * HIDWORD(v46);
        do
        {
          sub_223CC85D8(&v40, (__int16 **)v47, a3, v26, v32);
          v26 = (__int16 *)((char *)v26 + v34);
          v32 = (__int16 *)((char *)v32 + v35);
          --v33;
        }
        while (v33);
      }
      a4.n128_f32[0] = sub_223CC85D8(&v40, (__int16 **)v47, a3, v26, v32);
    }
  }
LABEL_47:
  v36 = v38;
  v38 = 0;
  if (v36)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v36 + 8))(v36, a4);
  result = v39;
  v39 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, a4);
  return result;
}

void sub_223CC57A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223CC580C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  BOOL v5;
  __n128 v6;

  v4 = (_DWORD *)(a1 + 56);
  if (*(_DWORD *)(a1 + 56))
    v5 = *(_DWORD *)(a1 + 60) == 0;
  else
    v5 = 1;
  if (v5
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/ImageProcessing/src/ColorSpaceConversion.cpp", 66, (uint64_t)"!image.Empty()", 14, (uint64_t)"Input image should not be empty", 31, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_QWORD *)a2 = &off_24EC21B18;
  sub_2231C5C38(v4, (_WORD *)(a2 + 8));
  return sub_223CC5960(a1, a2, v6);
}

void sub_223CC58D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

float sub_223CC58EC(float a1)
{
  if (a1 <= 0.0031308)
    return a1 * 3294.6;
  else
    return (float)((float)(powf(a1, 0.41667) * 53805.0) + -2805.0) / 200.0;
}

uint64_t sub_223CC5960(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  float *v29;
  float *v30;
  uint64_t v31;
  float *v32;
  int v33;
  int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t i;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t result;
  int v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  float *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  float *v60;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    goto LABEL_18;
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v10 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v10)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v5 = *(_QWORD *)(a1 + 8);
    v10 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v10)
      goto LABEL_14;
  }
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v57 = 0;
    v15 = *(_QWORD *)(a2 + 8);
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_23;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v5 + 96))(&v57, v5, 0);
  v15 = *(_QWORD *)(a2 + 8);
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_23;
LABEL_19:
  v16 = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (v18)
  {
LABEL_23:
    if (!v15)
      goto LABEL_28;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!v15)
  {
LABEL_28:
    v56 = 0;
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_77;
    goto LABEL_29;
  }
LABEL_24:
  if (!*(_BYTE *)(a2 + 129))
    goto LABEL_28;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v56, *(_QWORD *)(a2 + 8), 1);
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_77;
LABEL_29:
  v19 = *(_DWORD *)(a1 + 36);
  if (!v19)
    goto LABEL_77;
  v20 = *(_DWORD *)(a1 + 40);
  if (!v20)
    goto LABEL_77;
  v21 = *(unsigned int *)(a1 + 48);
  v22 = *(unsigned int *)(a2 + 104);
  v51 = *(unsigned int *)(a1 + 52);
  v52 = *(unsigned int *)(a2 + 108);
  if (!*(_BYTE *)(a1 + 72))
  {
    v23 = *(float **)(a1 + 24);
    v29 = *(float **)(a2 + 32);
    if (*(_BYTE *)(a2 + 128))
      goto LABEL_41;
LABEL_46:
    v31 = (v19 - 1);
    v58 = 0u;
    v59 = 0u;
    v32 = v29;
    v33 = v20 - 1;
    if (!v33)
      goto LABEL_74;
    goto LABEL_47;
  }
  v23 = *(float **)(a1 + 24);
  if (v23)
  {
    v24 = *(_QWORD *)(a1 + 8);
    v25 = *(std::__shared_weak_count **)(a1 + 16);
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      do
        v28 = __ldaxr(v26);
      while (__stlxr(v28 - 1, v26));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v24 + 88))(v24, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v23 = *(float **)(a1 + 24);
  }
  v29 = *(float **)(a2 + 32);
  if (!*(_BYTE *)(a2 + 128))
    goto LABEL_46;
LABEL_41:
  v30 = v29;
  if (v29)
  {
    (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
    v30 = *(float **)(a2 + 32);
  }
  v31 = (v19 - 1);
  v58 = 0u;
  v59 = 0u;
  v32 = v30;
  v33 = v20 - 1;
  if (!v33)
    goto LABEL_74;
LABEL_47:
  if ((_DWORD)v31)
  {
    v55 = 0;
    v50 = v33;
    while (1)
    {
      v34 = 0;
      v60 = v32;
      v53 = v32;
      v54 = v23;
      do
      {
        *(_QWORD *)&v58 = v23;
        *(_QWORD *)&v59 = v32;
        v36 = *v23;
        if (*v23 <= 0.0031308)
        {
          v37 = v36 * 3294.6;
          v38 = v23[1];
          if (v38 <= 0.0031308)
          {
LABEL_54:
            v39 = v38 * 3294.6;
            v40 = v23[2];
            if (v40 <= 0.0031308)
              goto LABEL_58;
            goto LABEL_50;
          }
        }
        else
        {
          v37 = (float)((float)(powf(v36, 0.41667) * 53805.0) + -2805.0) / 200.0;
          v38 = v23[1];
          if (v38 <= 0.0031308)
            goto LABEL_54;
        }
        v39 = (float)((float)(powf(v38, 0.41667) * 53805.0) + -2805.0) / 200.0;
        v40 = v23[2];
        if (v40 <= 0.0031308)
        {
LABEL_58:
          v35 = v40 * 3294.6;
          if (v32)
            goto LABEL_51;
          goto LABEL_59;
        }
LABEL_50:
        v35 = (float)((float)(powf(v40, 0.41667) * 53805.0) + -2805.0) / 200.0;
        if (v32)
          goto LABEL_51;
LABEL_59:
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        v41 = v31;
        v42 = v21;
        v43 = v22;
        v44 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v45 = qword_255795648;
          for (i = qword_255795650; v45 != i; v45 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v45)(*(_QWORD *)(v45 + 8), "ptr != nullptr || size == 0", 27, "", 0);
        }
        v47 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          abort();
        v22 = v43;
        qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
        v21 = v42;
        v31 = v41;
LABEL_51:
        *(_BYTE *)v32 = (int)(float)(v37 + 0.5);
        *((_BYTE *)v32 + 1) = (int)(float)(v39 + 0.5);
        *((_BYTE *)v32 + 2) = (int)(float)(v35 + 0.5);
        v23 += v21;
        v32 = (float *)((char *)v60 + v22);
        v60 = (float *)((char *)v60 + v22);
        ++v34;
      }
      while (v34 != (_DWORD)v31);
      sub_223CC897C((float **)&v58, v23, &v60);
      v23 = &v54[v51];
      v32 = (float *)((char *)v53 + v52);
      if (++v55 == v50)
        goto LABEL_74;
    }
  }
  do
  {
    v60 = v32;
    sub_223CC897C((float **)&v58, v23, &v60);
    v32 = (float *)((char *)v32 + v52);
    v23 += v51;
    --v33;
  }
  while (v33);
LABEL_74:
  v60 = v32;
  *(_QWORD *)&v58 = v23;
  for (*(_QWORD *)&v59 = v32; (_DWORD)v31; LODWORD(v31) = v31 - 1)
  {
    sub_223CC897C((float **)&v58, v23, &v60);
    v60 = (float *)((char *)v60 + v22);
    v23 += v21;
  }
  a3.n128_f32[0] = sub_223CC897C((float **)&v58, v23, &v60);
LABEL_77:
  v48 = v56;
  v56 = 0;
  if (v48)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v48 + 8))(v48, a3);
  result = v57;
  v57 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, a3);
  return result;
}

void sub_223CC6044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a16)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223CC60BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  BOOL v5;

  v4 = (_DWORD *)(a1 + 56);
  if (*(_DWORD *)(a1 + 56))
    v5 = *(_DWORD *)(a1 + 60) == 0;
  else
    v5 = 1;
  if (v5
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/ImageProcessing/src/ColorSpaceConversion.cpp", 66, (uint64_t)"!image.Empty()", 14, (uint64_t)"Input image should not be empty", 31, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_QWORD *)a2 = &off_24EC21B18;
  sub_2231C5C38(v4, (_WORD *)(a2 + 8));
  return sub_223CC6218(a1, a2);
}

void sub_223CC6188(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

float sub_223CC619C(__int16 a1)
{
  _H0 = a1;
  __asm { FCVT            S0, H0 }
  if (_S0 <= 0.0031308)
    return _S0 * 3294.6;
  else
    return (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
}

uint64_t sub_223CC6218(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  _WORD *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  int v28;
  int v29;
  _WORD *v30;
  uint64_t v31;
  float v32;
  int i;
  float v34;
  float v41;
  float v44;
  unsigned __int8 v49;
  uint64_t j;
  uint64_t v51;
  unsigned __int8 v52;
  float v55;
  float v58;
  _BYTE *v63;
  _WORD *v64;
  float v65;
  _WORD *v66;
  float v69;
  float v72;
  _WORD *v79;
  float v80;
  float v83;
  float v86;
  uint64_t v87;
  uint64_t result;
  uint64_t v89;
  uint64_t v90;
  int v91;
  _WORD *v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v97 = 0;
    v14 = *(_QWORD *)(a2 + 8);
    v13 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v13)
      goto LABEL_23;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v97, v4, 0);
  v14 = *(_QWORD *)(a2 + 8);
  v13 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v13)
    goto LABEL_23;
LABEL_19:
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_23:
    if (!v14)
      goto LABEL_28;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!v14)
  {
LABEL_28:
    v96 = 0;
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_108;
    goto LABEL_29;
  }
LABEL_24:
  if (!*(_BYTE *)(a2 + 129))
    goto LABEL_28;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v96, *(_QWORD *)(a2 + 8), 1);
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_108;
LABEL_29:
  v18 = *(_DWORD *)(a1 + 36);
  if (v18)
  {
    v19 = *(_DWORD *)(a1 + 40);
    if (v19)
    {
      v94 = *(unsigned int *)(a1 + 48);
      v90 = *(unsigned int *)(a1 + 52);
      v20 = *(unsigned int *)(a2 + 104);
      v89 = *(unsigned int *)(a2 + 108);
      if (*(_BYTE *)(a1 + 72))
      {
        v21 = *(_WORD **)(a1 + 24);
        if (v21)
        {
          v22 = *(_QWORD *)(a1 + 8);
          v23 = *(std::__shared_weak_count **)(a1 + 16);
          if (v23)
          {
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldxr(v24);
            while (__stxr(v25 + 1, v24));
            do
              v26 = __ldaxr(v24);
            while (__stlxr(v26 - 1, v24));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v22 + 88))(v22, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          v21 = *(_WORD **)(a1 + 24);
        }
        v27 = *(_BYTE **)(a2 + 32);
        if (!*(_BYTE *)(a2 + 128))
        {
LABEL_45:
          v28 = v18 - 1;
          v95 = v20;
          if (v19 != 1)
          {
            v29 = 0;
            v30 = v21;
            v31 = v94;
            while (1)
            {
              v91 = v29;
              v92 = v30;
              v93 = v27;
              if (v28)
              {
                for (i = 0; i != v28; ++i)
                {
                  _H0 = *v30;
                  __asm { FCVT            S0, H0 }
                  if (_S0 <= 0.0031308)
                  {
                    v41 = _S0 * 3294.6;
                    _H0 = v30[1];
                    __asm { FCVT            S0, H0 }
                    if (_S0 <= 0.0031308)
                    {
LABEL_55:
                      v44 = _S0 * 3294.6;
                      _H0 = v30[2];
                      __asm { FCVT            S0, H0 }
                      if (_S0 > 0.0031308)
                        goto LABEL_51;
                      goto LABEL_59;
                    }
                  }
                  else
                  {
                    v41 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
                    _H0 = v30[1];
                    __asm { FCVT            S0, H0 }
                    if (_S0 <= 0.0031308)
                      goto LABEL_55;
                  }
                  v44 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
                  _H0 = v30[2];
                  __asm { FCVT            S0, H0 }
                  if (_S0 > 0.0031308)
                  {
LABEL_51:
                    v34 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
                    if (v27)
                      goto LABEL_52;
                    goto LABEL_60;
                  }
LABEL_59:
                  v34 = _S0 * 3294.6;
                  if (v27)
                    goto LABEL_52;
LABEL_60:
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                  v49 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v51 = qword_255795648;
                    for (j = qword_255795650; v51 != j; v51 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v51)(*(_QWORD *)(v51 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                  }
                  v52 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  v31 = v94;
                  if (!byte_255795670)
                    goto LABEL_94;
                  qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
                  v20 = v95;
LABEL_52:
                  *v27 = (int)(float)(v41 + 0.5);
                  v27[1] = (int)(float)(v44 + 0.5);
                  v27[2] = (int)(float)(v34 + 0.5);
                  v30 += v31;
                  v27 += v20;
                }
              }
              _H0 = *v30;
              __asm { FCVT            S0, H0 }
              if (_S0 <= 0.0031308)
              {
                v55 = _S0 * 3294.6;
                _H0 = v30[1];
                __asm { FCVT            S0, H0 }
                if (_S0 <= 0.0031308)
                {
LABEL_74:
                  v58 = _S0 * 3294.6;
                  _H0 = v30[2];
                  __asm { FCVT            S0, H0 }
                  if (_S0 > 0.0031308)
                    goto LABEL_47;
                  goto LABEL_78;
                }
              }
              else
              {
                v55 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
                _H0 = v30[1];
                __asm { FCVT            S0, H0 }
                if (_S0 <= 0.0031308)
                  goto LABEL_74;
              }
              v58 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
              _H0 = v30[2];
              __asm { FCVT            S0, H0 }
              if (_S0 > 0.0031308)
              {
LABEL_47:
                v32 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
                if (v27)
                  goto LABEL_48;
                goto LABEL_79;
              }
LABEL_78:
              v32 = _S0 * 3294.6;
              if (v27)
                goto LABEL_48;
LABEL_79:
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_94;
              }
LABEL_48:
              *v27 = (int)(float)(v55 + 0.5);
              v27[1] = (int)(float)(v58 + 0.5);
              v27[2] = (int)(float)(v32 + 0.5);
              v30 = &v92[v90];
              v27 = &v93[v89];
              v29 = v91 + 1;
              v20 = v95;
              if (v91 + 1 == v19 - 1)
                goto LABEL_82;
            }
          }
          v30 = v21;
          v31 = v94;
LABEL_82:
          v63 = v27;
          if (v28)
          {
            v64 = v30;
            while (1)
            {
              v66 = v64;
              _H0 = *v64;
              __asm { FCVT            S0, H0 }
              if (_S0 <= 0.0031308)
              {
                v69 = _S0 * 3294.6;
                _H0 = v64[1];
                __asm { FCVT            S0, H0 }
                if (_S0 <= 0.0031308)
                {
LABEL_88:
                  v72 = _S0 * 3294.6;
                  _H0 = v66[2];
                  __asm { FCVT            S0, H0 }
                  if (_S0 > 0.0031308)
                    goto LABEL_84;
                  goto LABEL_92;
                }
              }
              else
              {
                v69 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
                _H0 = v66[1];
                __asm { FCVT            S0, H0 }
                if (_S0 <= 0.0031308)
                  goto LABEL_88;
              }
              v72 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
              _H0 = v66[2];
              __asm { FCVT            S0, H0 }
              if (_S0 > 0.0031308)
              {
LABEL_84:
                v65 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
                if (v63)
                  goto LABEL_85;
                goto LABEL_93;
              }
LABEL_92:
              v65 = _S0 * 3294.6;
              if (v63)
                goto LABEL_85;
LABEL_93:
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_94;
              }
LABEL_85:
              *v63 = (int)(float)(v69 + 0.5);
              v63[1] = (int)(float)(v72 + 0.5);
              v63[2] = (int)(float)(v65 + 0.5);
              v63 += v95;
              v64 = &v66[v31];
              if (!--v28)
                goto LABEL_96;
            }
          }
          v64 = v30;
LABEL_96:
          _H0 = *v64;
          __asm { FCVT            S0, H0 }
          v79 = v64;
          if (_S0 <= 0.0031308)
            v80 = _S0 * 3294.6;
          else
            v80 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
          _H0 = v79[1];
          __asm { FCVT            S0, H0 }
          if (_S0 <= 0.0031308)
            v83 = _S0 * 3294.6;
          else
            v83 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
          _H0 = v79[2];
          __asm { FCVT            S0, H0 }
          if (_S0 <= 0.0031308)
          {
            v86 = _S0 * 3294.6;
            if (!v63)
              goto LABEL_106;
          }
          else
          {
            v86 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
            if (!v63)
            {
LABEL_106:
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
LABEL_94:
                abort();
              }
            }
          }
          *v63 = (int)(float)(v80 + 0.5);
          v63[1] = (int)(float)(v83 + 0.5);
          v63[2] = (int)(float)(v86 + 0.5);
          goto LABEL_108;
        }
      }
      else
      {
        v21 = *(_WORD **)(a1 + 24);
        v27 = *(_BYTE **)(a2 + 32);
        if (!*(_BYTE *)(a2 + 128))
          goto LABEL_45;
      }
      if (v27)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v27 = *(_BYTE **)(a2 + 32);
      }
      goto LABEL_45;
    }
  }
LABEL_108:
  v87 = v96;
  v96 = 0;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  result = v97;
  v97 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223CC6D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a18)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223CC6DA8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  BOOL v5;
  __n128 v6;
  _QWORD v8[3];
  char v9;
  float (*v10)(__int16);
  int v11;

  v4 = (_DWORD *)(a1 + 56);
  if (*(_DWORD *)(a1 + 56))
    v5 = *(_DWORD *)(a1 + 60) == 0;
  else
    v5 = 1;
  if (v5
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/ImageProcessing/src/ColorSpaceConversion.cpp", 66, (uint64_t)"!image.Empty()", 14, (uint64_t)"Input image should not be empty", 31, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v11 = 1056964608;
  v10 = sub_223CC619C;
  *a2 = &off_24EC5C5E0;
  sub_2238EA468(v4, a2 + 1);
  v9 = -1;
  v8[0] = &v10;
  v8[1] = &v11;
  v8[2] = &v9;
  return sub_223CC6E98(a1, (uint64_t)a2, (uint64_t)v8, v6);
}

void sub_223CC6E84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223CC6E98(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int16 *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  int v32;
  int v33;
  int *v34;
  int v35;
  float v36;
  int v37;
  __int16 *v38;
  int v39;
  float v40;
  int v41;
  float v48;
  float v51;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t i;
  unsigned __int8 v62;
  unsigned __int8 *v63;
  float v66;
  int v67;
  float v70;
  uint64_t v75;
  uint64_t result;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int *v81;
  __int16 *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;

  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
    goto LABEL_18;
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v8)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v12 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v12)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v7 = *(_QWORD *)(a1 + 8);
    v12 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v12)
      goto LABEL_14;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v85 = 0;
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v17)
      goto LABEL_23;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v7 + 96))(&v85, v7, 0);
  v16 = *(_QWORD *)(a2 + 8);
  v17 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v17)
    goto LABEL_23;
LABEL_19:
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  do
    v20 = __ldaxr(v18);
  while (__stlxr(v20 - 1, v18));
  if (v20)
  {
LABEL_23:
    if (!v16)
      goto LABEL_28;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (!v16)
  {
LABEL_28:
    v84 = 0;
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_83;
    goto LABEL_29;
  }
LABEL_24:
  if (!*(_BYTE *)(a2 + 129))
    goto LABEL_28;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v84, *(_QWORD *)(a2 + 8), 1);
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_83;
LABEL_29:
  v21 = *(_DWORD *)(a1 + 36);
  if (!v21)
    goto LABEL_83;
  v22 = *(_DWORD *)(a1 + 40);
  if (!v22)
    goto LABEL_83;
  v23 = *(unsigned int *)(a1 + 48);
  v24 = *(unsigned int *)(a2 + 104);
  v78 = *(unsigned int *)(a1 + 52);
  v79 = *(unsigned int *)(a2 + 108);
  v25 = *(__int16 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v25)
  {
    v26 = *(_QWORD *)(a1 + 8);
    v27 = *(std::__shared_weak_count **)(a1 + 16);
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v26 + 88))(v26, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v25 = *(__int16 **)(a1 + 24);
  }
  if (*(_BYTE *)(a2 + 128))
  {
    v31 = *(int **)(a2 + 32);
    if (v31)
    {
      (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
      v31 = *(int **)(a2 + 32);
    }
    v32 = v21 - 1;
    v33 = v22 - 1;
    v83 = v21 - 1;
    v34 = v31;
    if (!v33)
      goto LABEL_80;
  }
  else
  {
    v32 = v21 - 1;
    v33 = v22 - 1;
    v83 = v21 - 1;
    v34 = *(int **)(a2 + 32);
    if (!v33)
      goto LABEL_80;
  }
  if (v32)
  {
    v35 = 0;
    v77 = v33;
    while (1)
    {
      v80 = v35;
      v37 = 0;
      v81 = v34;
      v82 = v25;
      v38 = v25;
      v39 = v83;
      do
      {
        _H0 = *v38;
        __asm { FCVT            S0, H0 }
        if (_S0 <= 0.0031308)
        {
          v48 = _S0 * 3294.6;
          _H0 = v38[1];
          __asm { FCVT            S0, H0 }
          if (_S0 <= 0.0031308)
          {
LABEL_55:
            v51 = _S0 * 3294.6;
            _H0 = v38[2];
            __asm { FCVT            S0, H0 }
            if (_S0 <= 0.0031308)
              goto LABEL_59;
            goto LABEL_51;
          }
        }
        else
        {
          v48 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
          _H0 = v38[1];
          __asm { FCVT            S0, H0 }
          if (_S0 <= 0.0031308)
            goto LABEL_55;
        }
        v51 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
        _H0 = v38[2];
        __asm { FCVT            S0, H0 }
        if (_S0 <= 0.0031308)
        {
LABEL_59:
          v40 = _S0 * 3294.6;
          v41 = **(unsigned __int8 **)(a3 + 16);
          if (v34)
            goto LABEL_52;
          goto LABEL_60;
        }
LABEL_51:
        v40 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
        v41 = **(unsigned __int8 **)(a3 + 16);
        if (v34)
          goto LABEL_52;
LABEL_60:
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        v56 = v23;
        v57 = v24;
        v58 = a3;
        v59 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v60 = qword_255795648;
          for (i = qword_255795650; v60 != i; v60 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v60)(*(_QWORD *)(v60 + 8), "ptr != nullptr || size == 0", 27, "", 0);
        }
        v62 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        v39 = v83;
        if (!byte_255795670)
          abort();
        a3 = v58;
        qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
        v24 = v57;
        v23 = v56;
LABEL_52:
        *v34 = ((int)(float)(v40 + 0.5) << 16) | (v41 << 24) | ((int)(float)(v51 + 0.5) << 8) | (int)(float)(v48 + 0.5);
        v38 += v23;
        v34 = (int *)((char *)v34 + v24);
        ++v37;
      }
      while (v37 != v39);
      v63 = *(unsigned __int8 **)(a3 + 16);
      _H0 = *v38;
      __asm { FCVT            S0, H0 }
      if (_S0 <= 0.0031308)
      {
        v66 = _S0 * 3294.6;
        v67 = v80;
        _H0 = v38[1];
        __asm { FCVT            S0, H0 }
        if (_S0 > 0.0031308)
          goto LABEL_77;
LABEL_74:
        v70 = _S0 * 3294.6;
        _H0 = v38[2];
        __asm { FCVT            S0, H0 }
        if (_S0 > 0.0031308)
          goto LABEL_48;
LABEL_78:
        v36 = _S0 * 3294.6;
      }
      else
      {
        v66 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
        v67 = v80;
        _H0 = v38[1];
        __asm { FCVT            S0, H0 }
        if (_S0 <= 0.0031308)
          goto LABEL_74;
LABEL_77:
        v70 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
        _H0 = v38[2];
        __asm { FCVT            S0, H0 }
        if (_S0 <= 0.0031308)
          goto LABEL_78;
LABEL_48:
        v36 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
      }
      *v34 = (*v63 << 24) | ((int)(float)(v36 + 0.5) << 16) | ((int)(float)(v70 + 0.5) << 8) | (int)(float)(v66 + 0.5);
      v25 = &v82[v78];
      v34 = (int *)((char *)v81 + v79);
      v35 = v67 + 1;
      if (v35 == v77)
        goto LABEL_80;
    }
  }
  do
  {
    sub_223CC8B7C(*(unsigned __int8 **)(a3 + 16), v25, v34);
    v34 = (int *)((char *)v34 + v79);
    v25 += v78;
    --v33;
  }
  while (v33);
LABEL_80:
  while (v83)
  {
    sub_223CC8B7C(*(unsigned __int8 **)(a3 + 16), v25, v34);
    v34 = (int *)((char *)v34 + v24);
    v25 += v23;
    --v83;
  }
  a4.n128_f32[0] = sub_223CC8B7C(*(unsigned __int8 **)(a3 + 16), v25, v34);
LABEL_83:
  v75 = v84;
  v84 = 0;
  if (v75)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v75 + 8))(v75, a4);
  result = v85;
  v85 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, a4);
  return result;
}

void sub_223CC7704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a18)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  _Unwind_Resume(exception_object);
}

void sub_223CC7778(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  sub_2244B6AF8((uint64_t)v23, a1);
  v19 = v23[0];
  v20 = v23[1];
  v21 = v23[2];
  v3 = v25;
  v22 = v24;
  v4 = v26;
  v5 = v27;
  v17 = v28;
  v18 = v29;
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = v19;
  *(_QWORD *)v6 = &off_24EC5A2D0;
  *(_OWORD *)(v6 + 24) = v20;
  *(_OWORD *)(v6 + 40) = v21;
  *(_QWORD *)(v6 + 56) = v22;
  *(_QWORD *)(v6 + 64) = v3;
  *(_QWORD *)(v6 + 72) = v4;
  *(_QWORD *)(v6 + 80) = v5;
  *(_OWORD *)(v6 + 88) = v17;
  *(_QWORD *)(v6 + 104) = v18;
  v7 = (std::__shared_weak_count *)operator new();
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5A4A8;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a2 = v6;
  a2[1] = (uint64_t)v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v23, v6, 24);
  v11 = *(_OWORD *)(*(_QWORD *)&v23[0] + 16);
  v10 = *(_OWORD *)(*(_QWORD *)&v23[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v23[0];
  *(_OWORD *)(a2 + 5) = v11;
  *(_OWORD *)(a2 + 7) = v10;
  *(_QWORD *)&v23[0] = 0;
  MEMORY[0x227684CE8]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v12 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v12;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *((_WORD *)a2 + 60) = v15 & 0xFF00 | v14;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_223CC7988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_223167354(v2);
  sub_223167354((uint64_t)va1);
  sub_22329C830((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223CC79BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22329C830((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223CC79D0(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_223CC79EC(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();

  v23 = &off_24EC63358;
  sub_22449A20C(a1, (uint64_t)&v14);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24EC631B8;
  *(_OWORD *)(v3 + 8) = v15;
  *(_OWORD *)(v3 + 24) = v16;
  *(_OWORD *)(v3 + 40) = v17;
  *(_QWORD *)(v3 + 56) = v18;
  *(_OWORD *)(v3 + 64) = v19;
  *(_QWORD *)(v3 + 80) = v20;
  *(_QWORD *)(v3 + 104) = v22;
  *(_OWORD *)(v3 + 88) = v21;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC63390;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (uint64_t)v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v14, v3, 23);
  v8 = v14[1];
  v7 = v14[2];
  *(_OWORD *)(a2 + 3) = *v14;
  *(_OWORD *)(a2 + 5) = v8;
  *(_OWORD *)(a2 + 7) = v7;
  v14 = 0;
  MEMORY[0x227684CE8]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v9 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v9;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a2 + 60) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_223CC7C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_223167354(v10);
  sub_223167354((uint64_t)&a10);
  sub_223CC7DE0(&a9);
  _Unwind_Resume(a1);
}

void sub_223CC7CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223CC7DE0(&a9);
  _Unwind_Resume(a1);
}

void sub_223CC7CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_224490CC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CC7CD4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223CC7D3C()
{
  return 23;
}

uint64_t sub_223CC7D44(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_223CC7D4C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_223CC7D64(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t *sub_223CC7DE0(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      v4 = !*(_DWORD *)(v2 + 96) || *(_DWORD *)(v2 + 92) == 0;
      v5 = v4 || *(_DWORD *)(v2 + 88) == 0;
      v6 = v5 ? 0 : *(_DWORD *)(v2 + 96);
      if (v6 * (*(_DWORD *)(v2 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v3 = *(void **)(v2 + 72);
      if (v3)
LABEL_15:
        free(v3);
    }
    *(_QWORD *)(v2 + 72) = 0;
    MEMORY[0x227684CE8](v2, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_223CC7EAC()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223CC7EC0()
{
  return 23;
}

__int128 *sub_223CC7ECC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578F090);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578F090))
  {
    v2 = sub_223CC7FA4();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(&xmmword_25578F078, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25578F088 = *((_QWORD *)v2 + 2);
      xmmword_25578F078 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578F078, &dword_22314D000);
    __cxa_guard_release(&qword_25578F090);
  }
  if (byte_25578F08F >= 0)
    return &xmmword_25578F078;
  else
    return (__int128 *)xmmword_25578F078;
}

void sub_223CC7F8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F090);
  _Unwind_Resume(a1);
}

__int128 *sub_223CC7FA4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578F0B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578F0B0))
    return &xmmword_25578F098;
  v2 = sub_223CC8080();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578F098, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578F0A8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578F098 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578F098, &dword_22314D000);
  __cxa_guard_release(&qword_25578F0B0);
  return &xmmword_25578F098;
}

void sub_223CC8068(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F0B0);
  _Unwind_Resume(a1);
}

std::string *sub_223CC8080()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578F0D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578F0D0))
    return &stru_25578F0B8;
  sub_223CC8298((uint64_t)__p);
  sub_223CC8170((char *)__p, &stru_25578F0B8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578F0B8, &dword_22314D000);
  __cxa_guard_release(&qword_25578F0D0);
  return &stru_25578F0B8;
}

void sub_223CC8130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578F0D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578F0D0);
  _Unwind_Resume(a1);
}

void sub_223CC8170(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2231EAD28();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_223CC826C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223CC8298(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578F0F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578F0F0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgb16f>]", qword_25578F0D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578F0D8, &dword_22314D000);
    __cxa_guard_release(&qword_25578F0F0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578F110);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578F110))
  {
    v5 = sub_2231A38CC(qword_25578F0D8, "<", 0);
    sub_2231A37C8(qword_25578F0D8, 0, v5, qword_25578F0F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578F0F8, &dword_22314D000);
    __cxa_guard_release(&qword_25578F110);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578F130);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578F130))
  {
    sub_224573040((uint64_t)qword_25578F0F8, (uint64_t)&xmmword_25578F118);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578F118, &dword_22314D000);
    __cxa_guard_release(&qword_25578F130);
  }
  if (byte_25578F12F < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578F118, *((unint64_t *)&xmmword_25578F118 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578F118;
    *(_QWORD *)(a1 + 16) = unk_25578F128;
  }
}

void sub_223CC8434(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F130);
  _Unwind_Resume(a1);
}

void sub_223CC844C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F110);
  _Unwind_Resume(a1);
}

void sub_223CC8464(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F0F0);
  _Unwind_Resume(a1);
}

void sub_223CC8480(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223CC84A4(uint64_t result)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      v3 = !*(_DWORD *)(v1 + 96) || *(_DWORD *)(v1 + 92) == 0;
      v4 = v3 || *(_DWORD *)(v1 + 88) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(v1 + 96);
      if (v5 * (*(_DWORD *)(v1 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v2 = *(void **)(v1 + 72);
      if (v2)
LABEL_15:
        free(v2);
    }
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223CC8568(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE23EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE23EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE23EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE23EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

float sub_223CC85D8(_DWORD *a1, __int16 **a2, uint64_t a3, __int16 *a4, __int16 *a5)
{
  __int16 *v5;
  __int16 *v6;
  unsigned int i;
  float v16;
  float v19;
  float v22;
  int v23;
  float v28;
  float v31;
  float v34;
  int v35;
  float result;

  v5 = a5;
  v6 = a4;
  *a2 = a4;
  a2[2] = a5;
  if (a1[5])
  {
    for (i = 0; i < a1[5]; ++i)
    {
      *a2 = v6;
      a2[2] = v5;
      _H0 = *v6;
      __asm { FCVT            S0, H0 }
      if (_S0 <= 0.0031308)
      {
        v16 = _S0 * 12.92;
        _H0 = v6[1];
        __asm { FCVT            S0, H0 }
        if (_S0 <= 0.0031308)
        {
LABEL_6:
          v19 = _S0 * 12.92;
          _H0 = v6[2];
          __asm { FCVT            S0, H0 }
          if (_S0 <= 0.0031308)
            goto LABEL_7;
          goto LABEL_11;
        }
      }
      else
      {
        v16 = (float)((float)(powf(_S0, 0.41667) * 211.0) + -11.0) / 200.0;
        _H0 = v6[1];
        __asm { FCVT            S0, H0 }
        if (_S0 <= 0.0031308)
          goto LABEL_6;
      }
      v19 = (float)((float)(powf(_S0, 0.41667) * 211.0) + -11.0) / 200.0;
      _H0 = v6[2];
      __asm { FCVT            S0, H0 }
      if (_S0 <= 0.0031308)
      {
LABEL_7:
        v22 = _S0 * 12.92;
        v23 = **(_DWORD **)(a3 + 16);
        if (v5)
          goto LABEL_3;
        goto LABEL_12;
      }
LABEL_11:
      v22 = (float)((float)(powf(_S0, 0.41667) * 211.0) + -11.0) / 200.0;
      v23 = **(_DWORD **)(a3 + 16);
      if (v5)
        goto LABEL_3;
LABEL_12:
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_13;
      }
LABEL_3:
      *(float *)v5 = v16 + 0.0;
      *((float *)v5 + 1) = v19 + 0.0;
      *((float *)v5 + 2) = v22 + 0.0;
      *((_DWORD *)v5 + 3) = v23;
      v6 += a1[6];
      v5 += 2 * a1[7];
    }
  }
  *a2 = v6;
  a2[2] = v5;
  _H0 = *v6;
  __asm { FCVT            S0, H0 }
  if (_S0 <= 0.0031308)
    v28 = _S0 * 12.92;
  else
    v28 = (float)((float)(powf(_S0, 0.41667) * 211.0) + -11.0) / 200.0;
  _H0 = v6[1];
  __asm { FCVT            S0, H0 }
  if (_S0 <= 0.0031308)
    v31 = _S0 * 12.92;
  else
    v31 = (float)((float)(powf(_S0, 0.41667) * 211.0) + -11.0) / 200.0;
  _H0 = v6[2];
  __asm { FCVT            S0, H0 }
  if (_S0 <= 0.0031308)
  {
    v34 = _S0 * 12.92;
    v35 = **(_DWORD **)(a3 + 16);
    if (v5)
      goto LABEL_25;
  }
  else
  {
    v34 = (float)((float)(powf(_S0, 0.41667) * 211.0) + -11.0) / 200.0;
    v35 = **(_DWORD **)(a3 + 16);
    if (v5)
      goto LABEL_25;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_13:
    abort();
  }
LABEL_25:
  *(float *)v5 = v28 + 0.0;
  *((float *)v5 + 1) = v31 + 0.0;
  result = v34 + 0.0;
  *((float *)v5 + 2) = v34 + 0.0;
  *((_DWORD *)v5 + 3) = v35;
  return result;
}

float sub_223CC897C(float **a1, float *a2, float **a3)
{
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float result;

  *a1 = a2;
  v4 = *a3;
  a1[2] = *a3;
  v5 = *a2;
  if (*a2 <= 0.0031308)
  {
    v6 = v5 * 3294.6;
    v7 = a2[1];
    if (v7 <= 0.0031308)
    {
LABEL_3:
      v8 = v7 * 3294.6;
      v9 = a2[2];
      if (v9 <= 0.0031308)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v6 = (float)((float)(powf(v5, 0.41667) * 53805.0) + -2805.0) / 200.0;
    v7 = a2[1];
    if (v7 <= 0.0031308)
      goto LABEL_3;
  }
  v8 = (float)((float)(powf(v7, 0.41667) * 53805.0) + -2805.0) / 200.0;
  v9 = a2[2];
  if (v9 <= 0.0031308)
  {
LABEL_4:
    v10 = v9 * 3294.6;
    if (v4)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_8:
  v10 = (float)((float)(powf(v9, 0.41667) * 53805.0) + -2805.0) / 200.0;
  if (v4)
    goto LABEL_10;
LABEL_9:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_10:
  result = v6 + 0.5;
  *(_BYTE *)v4 = (int)(float)(v6 + 0.5);
  *((_BYTE *)v4 + 1) = (int)(float)(v8 + 0.5);
  *((_BYTE *)v4 + 2) = (int)(float)(v10 + 0.5);
  return result;
}

float sub_223CC8B7C(unsigned __int8 *a1, __int16 *a2, int *a3)
{
  float v12;
  float v15;
  float v18;
  int v19;
  float result;

  _H0 = *a2;
  __asm { FCVT            S0, H0 }
  if (_S0 <= 0.0031308)
    v12 = _S0 * 3294.6;
  else
    v12 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
  _H0 = a2[1];
  __asm { FCVT            S0, H0 }
  if (_S0 <= 0.0031308)
    v15 = _S0 * 3294.6;
  else
    v15 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
  _H0 = a2[2];
  __asm { FCVT            S0, H0 }
  if (_S0 <= 0.0031308)
  {
    v18 = _S0 * 3294.6;
    v19 = *a1;
    if (a3)
      goto LABEL_12;
  }
  else
  {
    v18 = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
    v19 = *a1;
    if (a3)
      goto LABEL_12;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_12:
  result = v12 + 0.5;
  *a3 = (v19 << 24) | ((int)(float)(v18 + 0.5) << 16) | ((int)(float)(v15 + 0.5) << 8) | (int)(float)(v12 + 0.5);
  return result;
}

uint64_t sub_223CC8D74(uint64_t a1, int a2, char a3)
{
  __int128 v6;
  __int128 v7;
  int v8;
  __int128 v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[36];
  _BYTE v20[20];
  int v21;
  uint64_t v22;
  int v23;

  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_QWORD *)(a1 + 52) = 0;
  *(_DWORD *)a1 = 1065353216;
  *(_DWORD *)(a1 + 20) = 1065353216;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_DWORD *)(a1 + 60) = 1065353216;
  *(_QWORD *)(a1 + 64) = &off_24EC24788;
  *(_OWORD *)(a1 + 4) = 0u;
  sub_223484C70((uint64_t *)(a1 + 72));
  *(_BYTE *)(a1 + 152) = a3;
  switch(a2)
  {
    case 0:
      v6 = xmmword_22466ECB0;
      *(_QWORD *)&v7 = 0xFFFFFFFFLL;
      *((_QWORD *)&v7 + 1) = 0xFFFFFFFFLL;
      goto LABEL_8;
    case 1:
      v6 = xmmword_22466EC90;
      v7 = xmmword_22466ECA0;
      goto LABEL_8;
    case 2:
      *(_DWORD *)v19 = -1;
      *(_QWORD *)&v19[12] = 0;
      *(_QWORD *)&v19[4] = 0;
      *(_QWORD *)&v9 = 0xFFFFFFFFLL;
      *((_QWORD *)&v9 + 1) = 0xFFFFFFFFLL;
      *(_OWORD *)&v19[20] = v9;
      v17 = a1;
      v18 = 0;
      if (v19 == (_BYTE *)a1)
        goto LABEL_12;
      goto LABEL_9;
    case 3:
      v6 = xmmword_22466EC70;
      v7 = xmmword_22466EC80;
LABEL_8:
      *(_OWORD *)v19 = v6;
      *(_OWORD *)&v19[16] = v7;
      *(_DWORD *)&v19[32] = 0;
      v17 = a1;
      v18 = 0;
      if (v19 != (_BYTE *)a1)
        goto LABEL_9;
      goto LABEL_12;
    case 4:
      *(_QWORD *)&v11 = 0xFFFFFFFF00000000;
      *((_QWORD *)&v11 + 1) = 0xFFFFFFFF00000000;
      *(_OWORD *)v19 = v11;
      *(_OWORD *)&v19[16] = 0uLL;
      v8 = -1;
      goto LABEL_11;
    default:
      *(_OWORD *)v19 = xmmword_22466ECC0;
      *(_OWORD *)&v19[16] = xmmword_22466ECC0;
      v8 = 1;
LABEL_11:
      *(_DWORD *)&v19[32] = v8;
      v17 = a1;
      v18 = 0;
      if (v19 == (_BYTE *)a1)
      {
LABEL_12:
        sub_223CC92BC((uint64_t)v20, a1);
        v12 = *(_QWORD *)v20;
        v13 = *(_QWORD *)&v20[12];
        v14 = v21;
        v15 = v22;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)&v20[8];
        v16 = v23;
        *(_QWORD *)a1 = v12;
        *(_DWORD *)(a1 + 24) = v14;
        *(_QWORD *)(a1 + 16) = v13;
        *(_DWORD *)(a1 + 40) = v16;
        *(_QWORD *)(a1 + 32) = v15;
        return a1;
      }
      else
      {
LABEL_9:
        sub_223CC94A0((uint64_t)&v17, (uint64_t)v19);
        return a1;
      }
  }
}

void sub_223CC8F24(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223CC8F3C(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[2];
  std::__shared_weak_count *v27;
  __int128 v28;
  BOOL v29;
  _BYTE v30[72];
  uint64_t v31;
  __int16 v32;
  _QWORD v33[2];
  char v34;

  v33[1] = 0;
  v33[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v34 = 1;
  kdebug_trace();
  if (*(_QWORD *)(a1 + 128) != *(_QWORD *)(a2 + 192))
  {
    __p[0] = *(void **)(a2 + 192);
    *(_QWORD *)v30 = &off_24EC24788;
    sub_2231F8D1C(__p, &v30[8]);
    v10 = *(_OWORD *)&v30[8];
    *(_QWORD *)&v30[8] = 0;
    *(_QWORD *)&v30[16] = 0;
    v11 = *(std::__shared_weak_count **)(a1 + 80);
    *(_OWORD *)(a1 + 72) = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    *(_OWORD *)(a1 + 88) = *(_OWORD *)&v30[24];
    *(_OWORD *)(a1 + 104) = *(_OWORD *)&v30[40];
    *(_OWORD *)(a1 + 120) = *(_OWORD *)&v30[56];
    *(_QWORD *)(a1 + 136) = v31;
    *(_WORD *)(a1 + 144) = v32;
    v14 = *(std::__shared_weak_count **)&v30[16];
    if (*(_QWORD *)&v30[16])
    {
      v15 = (unint64_t *)(*(_QWORD *)&v30[16] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  v28 = xmmword_22466ECD0;
  v29 = (*(_BYTE *)(a1 + 152) & 0x10) != 0;
  v17 = *(float32x4_t *)(a1 + 16);
  v18 = *(float32x4_t *)(a1 + 32);
  v19 = *(float32x4_t *)(a1 + 48);
  v20 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a1, COERCE_FLOAT(*(_OWORD *)a3[2].f32)), v17, a3[2], 1), v18, *(float32x4_t *)a3[2].f32, 2), v19, *(float32x4_t *)a3[2].f32, 3);
  v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a1, COERCE_FLOAT(*(_OWORD *)a3[4].f32)), v17, a3[4], 1), v18, *(float32x4_t *)a3[4].f32, 2), v19, *(float32x4_t *)a3[4].f32, 3);
  v22 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a1, COERCE_FLOAT(*(_OWORD *)a3[6].f32)), v17, a3[6], 1), v18, *(float32x4_t *)a3[6].f32, 2), v19, *(float32x4_t *)a3[6].f32, 3);
  *(float32x4_t *)v30 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a1, COERCE_FLOAT(*(_OWORD *)a3->f32)), v17, *a3, 1), v18, *(float32x4_t *)a3->f32, 2), v19, *(float32x4_t *)a3->f32, 3);
  *(float32x4_t *)&v30[16] = v20;
  *(float32x4_t *)&v30[32] = v21;
  *(float32x4_t *)&v30[48] = v22;
  __p[0] = &off_24EC22138;
  sub_2236B487C(a1 + 64, (uint64_t *)&__p[1]);
  sub_223CC9690(a5, a2, (__int128 *)v30, a4, (uint64_t)__p, &v28);
  v23 = v27;
  if (v27)
  {
    v24 = (unint64_t *)&v27->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  kdebug_trace();
  *(_QWORD *)v30 = operator new(0x20uLL);
  *(_OWORD *)&v30[8] = xmmword_2245B9420;
  strcpy(*(char **)v30, "OccupancyDepthCorrection");
  HIBYTE(v27) = 9;
  strcpy((char *)__p, "Occupancy");
  sub_22391CC34((uint64_t *)v30, (uint64_t *)__p, (uint64_t)v33);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    if ((v30[23] & 0x80000000) == 0)
      return;
LABEL_21:
    operator delete(*(void **)v30);
    return;
  }
  operator delete(__p[0]);
  if ((v30[23] & 0x80000000) != 0)
    goto LABEL_21;
}

void sub_223CC9240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  _QWORD *v29;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((a29 & 0x80000000) == 0)
    {
LABEL_3:
      sub_223937070(v29);
      _Unwind_Resume(a1);
    }
  }
  else if ((a29 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a24);
  sub_223937070(v29);
  _Unwind_Resume(a1);
}

void sub_223CC928C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_223937070(v1);
  _Unwind_Resume(a1);
}

void sub_223CC92A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231DE1B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223CC92BC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  float *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;

  v2 = 0;
  v3 = 0;
  do
  {
    v4 = (v3 + 3);
    v5 = -3 - v3;
    v6 = v3 & 0xFFFFFFFF00000000 | v4;
    v7 = HIDWORD(v3);
    v8 = v6;
    LODWORD(v9) = v3 + 3;
    if ((v4 & 0x80000000) != 0)
    {
      if ((int)v4 <= -3)
        v11 = -3;
      else
        v11 = v3 + 3;
      v12 = ((__PAIR64__(v11 + v5, v4) - 4294967293u) >> 32) / 3;
      if (v4 < 0xFFFFFFFD)
        ++v12;
      v9 = (v3 + 3 * v12 + 6);
      v8 = v9 | ((unint64_t)(~v12 + HIDWORD(v3)) << 32);
      if ((int)v9 < 3)
      {
LABEL_5:
        v10 = HIDWORD(v8);
        if ((_DWORD)v3 == (_DWORD)v8)
          goto LABEL_17;
        goto LABEL_18;
      }
    }
    else if ((int)v9 < 3)
    {
      goto LABEL_5;
    }
    v13 = HIDWORD(v8);
    if ((int)v9 >= 5)
      v14 = 5;
    else
      v14 = v9;
    v8 = (v9 - 3 * (((int)v9 - v14 + 2) / 3u) - 3) | ((unint64_t)(v13
                                                                                     + ((int)v9 - v14 + 2) / 3u
                                                                                     + 1) << 32);
    v10 = HIDWORD(v8);
    if ((_DWORD)v3 == (_DWORD)v8)
    {
LABEL_17:
      if (HIDWORD(v3) == (_DWORD)v10)
        goto LABEL_27;
    }
LABEL_18:
    v15 = (float *)(result + 12 * v2);
    LODWORD(v16) = v3;
    v17 = v3;
    do
    {
      *v15++ = (float)*(int *)(a2 + 4 * (3 * v17 + HIDWORD(v17)));
      v18 = (v17 + 1);
      v19 = v17 & 0xFFFFFFFF00000000;
      v20 = v18 | v19;
      v21 = v19 + 0x100000000;
      if ((int)v16 >= 2)
        v16 = v21;
      else
        v16 = v20;
      v22 = (_DWORD)v16 == (_DWORD)v8 && HIDWORD(v16) == (_DWORD)v10;
      v17 = v16;
    }
    while (!v22);
LABEL_27:
    if ((v4 & 0x80000000) == 0)
    {
      if ((int)v4 < 3)
        goto LABEL_2;
LABEL_36:
      v27 = HIDWORD(v6);
      if ((int)v4 >= 5)
        v28 = 5;
      else
        v28 = v4;
      v6 = (v4 - 3 * (((int)v4 - v28 + 2) / 3u) - 3) | ((unint64_t)(v27
                                                                                       + ((int)v4 - v28 + 2) / 3u
                                                                                       + 1) << 32);
      goto LABEL_2;
    }
    if ((int)v4 <= -3)
      v23 = -3;
    else
      v23 = v3 + 3;
    v24 = __CFADD__((_DWORD)v4, 3);
    v25 = ((__PAIR64__(v23 + v5, v4) - 4294967293u) >> 32) / 3;
    if (!v24)
      ++v25;
    v26 = (v3 + 3 * v25 + 6);
    v6 = v26 | ((unint64_t)(~v25 + v7) << 32);
    LODWORD(v4) = v26;
    if ((int)v26 >= 3)
      goto LABEL_36;
LABEL_2:
    ++v2;
    v3 = v6;
  }
  while (v2 != 3);
  return result;
}

unint64_t sub_223CC94A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  float *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int v31;

  v2 = 0;
  v3 = 0;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1 - 4 * v4;
  do
  {
    v6 = (v3 + 3);
    v7 = -3 - v3;
    v8 = v3 & 0xFFFFFFFF00000000 | v6;
    result = HIDWORD(v3);
    v10 = v8;
    LODWORD(v11) = v3 + 3;
    if ((v6 & 0x80000000) != 0)
    {
      if ((int)v6 <= -3)
        v13 = -3;
      else
        v13 = v3 + 3;
      v14 = ((__PAIR64__(v13 + v7, v6) - 4294967293u) >> 32) / 3;
      if (v6 < 0xFFFFFFFD)
        ++v14;
      v11 = (v3 + 3 * v14 + 6);
      v10 = v11 | ((unint64_t)(~v14 + HIDWORD(v3)) << 32);
      if ((int)v11 < 3)
      {
LABEL_5:
        v12 = HIDWORD(v10);
        if ((_DWORD)v3 == (_DWORD)v10)
          goto LABEL_17;
        goto LABEL_18;
      }
    }
    else if ((int)v11 < 3)
    {
      goto LABEL_5;
    }
    v15 = HIDWORD(v10);
    if ((int)v11 >= 5)
      v16 = 5;
    else
      v16 = v11;
    v10 = (v11 - 3 * (((int)v11 - v16 + 2) / 3u) - 3) | ((unint64_t)(v15
                                                                                        + ((int)v11 - v16 + 2) / 3u
                                                                                        + 1) << 32);
    v12 = HIDWORD(v10);
    if ((_DWORD)v3 == (_DWORD)v10)
    {
LABEL_17:
      if (HIDWORD(v3) == (_DWORD)v12)
        goto LABEL_27;
    }
LABEL_18:
    v17 = (float *)(v5 + 4 * (v4 + 4 * v2));
    LODWORD(v18) = v3;
    v19 = v3;
    do
    {
      *v17++ = (float)*(int *)(a2 + 4 * (3 * v19 + HIDWORD(v19)));
      v20 = (v19 + 1);
      v21 = v19 & 0xFFFFFFFF00000000;
      v22 = v20 | v21;
      v23 = v21 + 0x100000000;
      if ((int)v18 >= 2)
        v18 = v23;
      else
        v18 = v22;
      v24 = (_DWORD)v18 == (_DWORD)v10 && HIDWORD(v18) == (_DWORD)v12;
      v19 = v18;
    }
    while (!v24);
LABEL_27:
    if ((v6 & 0x80000000) == 0)
    {
      if ((int)v6 < 3)
        goto LABEL_2;
LABEL_36:
      v29 = HIDWORD(v8);
      if ((int)v6 >= 5)
        v30 = 5;
      else
        v30 = v6;
      v31 = ((int)v6 - v30 + 2) / 3u;
      result = -3 * v31;
      v8 = (v6 - 3 * v31 - 3) | ((unint64_t)(v29 + v31 + 1) << 32);
      goto LABEL_2;
    }
    if ((int)v6 <= -3)
      v25 = -3;
    else
      v25 = v3 + 3;
    v26 = __CFADD__((_DWORD)v6, 3);
    v27 = ((__PAIR64__(v25 + v7, v6) - 4294967293u) >> 32) / 3;
    if (!v26)
      ++v27;
    v28 = (v3 + 3 * v27 + 6);
    v8 = v28 | ((unint64_t)(~v27 + result) << 32);
    LODWORD(v6) = v28;
    if ((int)v28 >= 3)
      goto LABEL_36;
LABEL_2:
    ++v2;
    v3 = v8;
  }
  while (v2 != 3);
  return result;
}

uint64_t sub_223CC9690(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, __int128 *a6)
{
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int16 v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int16 v28;
  __int128 v29;
  __int128 v30;

  v11 = sub_223CCDD14(a1, a2);
  v12 = *a3;
  v13 = a3[1];
  v14 = a3[2];
  *(_OWORD *)(v11 + 264) = a3[3];
  *(_OWORD *)(v11 + 248) = v14;
  *(_OWORD *)(v11 + 232) = v13;
  *(_OWORD *)(v11 + 216) = v12;
  *(_QWORD *)(v11 + 280) = &off_24EC20828;
  *(_QWORD *)(v11 + 288) = &off_24EC20868;
  *(_QWORD *)(v11 + 296) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(v11 + 304) = *(_QWORD *)(a4 + 24);
  *(_OWORD *)(v11 + 312) = *(_OWORD *)(a4 + 32);
  v15 = *(_OWORD *)(a4 + 48);
  v16 = *(_OWORD *)(a4 + 64);
  *(_DWORD *)(v11 + 360) = *(_DWORD *)(a4 + 80);
  *(_OWORD *)(v11 + 328) = v15;
  *(_OWORD *)(v11 + 344) = v16;
  *(_QWORD *)(v11 + 368) = *(_QWORD *)(a4 + 88);
  *(_QWORD *)(v11 + 280) = &off_24EC207B8;
  v17 = *((_DWORD *)a6 + 2);
  *(_BYTE *)(v11 + 376) = -1;
  *(_DWORD *)(v11 + 380) = v17;
  *(_QWORD *)(v11 + 384) = &off_24EC22138;
  v18 = *(_QWORD *)(a5 + 8);
  v19 = *(std::__shared_weak_count **)(a5 + 16);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    v22 = *(_WORD *)(a5 + 48);
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = *(_OWORD *)(a5 + 24);
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a5 + 40);
    *(_OWORD *)(a1 + 408) = v24;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 392) = v18;
    *(_QWORD *)(a1 + 400) = v19;
    *(_WORD *)(a1 + 432) = v22;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  else
  {
    v28 = *(_WORD *)(a5 + 48);
    *(_QWORD *)(a1 + 392) = v18;
    *(_QWORD *)(a1 + 400) = 0;
    v29 = *(_OWORD *)(a5 + 24);
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a5 + 40);
    *(_OWORD *)(a1 + 408) = v29;
    *(_WORD *)(a1 + 432) = v28;
  }
  *(_QWORD *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  v30 = *a6;
  *(_DWORD *)(a1 + 528) = *((_DWORD *)a6 + 4);
  *(_OWORD *)(a1 + 512) = v30;
  sub_223CC98A4(a1);
  return a1;
}

void sub_223CC9874(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  void *v5;

  v5 = (void *)v1[58];
  if (v5)
  {
    v1[59] = v5;
    operator delete(v5);
  }
  sub_223CCAE60(v2);
  v1[35] = v3;
  sub_223937214(v1);
  _Unwind_Resume(a1);
}

void sub_223CC98A4(uint64_t a1)
{
  __n128 v2;
  unsigned int v3;
  int v4;
  char *i;
  char *v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  BOOL v17;
  uint64_t v18;
  uint64_t j;
  unsigned __int8 v20;
  uint64_t v21;
  unsigned __int8 v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  uint64_t v29;
  int v30;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  uint64_t k;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  size_t v48;
  int v49;
  void *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  char *v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  void **v75;
  void **v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  void *v95;
  char *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  BOOL v117;
  int v118;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t *v140;
  char *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  __n128 *v146;
  __n128 *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  int v154;
  int v156;
  int v157;
  int v158;
  int v159;
  char *v161;
  unint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  unint64_t v168;
  _BYTE *v169;
  uint64_t v170;
  uint64_t *v171;
  void *v172;
  uint64_t v173;
  _QWORD *v174;
  char *v175;
  unsigned int v176;
  unint64_t v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  char *v198;
  uint64_t v199;
  char *v200;
  char *v201;
  int v202;
  char *v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  float32x2_t v209[2];
  std::__shared_weak_count *v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count *v212;
  uint64_t (**v213)();
  std::__shared_weak_count *v214;
  unsigned __int16 *v215[4];
  unsigned __int16 v216;
  unsigned __int16 v217;
  int v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;

  sub_223CCF20C(v209, a1, a1 + 280, (__int128 *)(a1 + 216));
  v220 = a1;
  v3 = *(_DWORD *)(a1 + 416);
  v4 = *(_DWORD *)(a1 + 420);
  v218 = v4;
  v219 = v3;
  v6 = *(char **)(a1 + 440);
  for (i = *(char **)(a1 + 448); i != v6; i -= 40)
  {
    v7 = (void *)*((_QWORD *)i - 3);
    if (v7)
    {
      *((_QWORD *)i - 2) = v7;
      operator delete(v7);
    }
  }
  *(_QWORD *)(a1 + 448) = v6;
  if (v4 && v3)
  {
    v8 = 0;
    v9 = (unsigned __int8 *)(a1 + 376);
    while (!v219)
    {
LABEL_10:
      v8 = (*(_DWORD *)(a1 + 380) + v8);
      if (v8 >= v4)
      {
        v6 = *(char **)(a1 + 448);
        goto LABEL_169;
      }
    }
    v10 = 0;
    v205 = (_DWORD)v8 << 16;
    v207 = (unsigned __int16)v8;
    while (1)
    {
      v12 = v220;
      v13 = *(_DWORD *)(v220 + 64);
      v14 = *(_DWORD *)(v220 + 68);
      v15 = *(_QWORD *)(v220 + 24);
      if (!v15)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        v16 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (byte_255795670)
          v17 = byte_255795678 == 0;
        else
          v17 = 0;
        if (!v17)
        {
          v18 = qword_255795648;
          for (j = qword_255795650; v18 != j; v18 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v18)(*(_QWORD *)(v18 + 8), "ptr != nullptr || size == 0", 27, "", 0);
        }
        v20 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
LABEL_339:
          abort();
        qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
      }
      v21 = *(_QWORD *)(v15 + 2 * (v13 * v10 + v14 * (_DWORD)v8));
      if (v21 <= BYTE6(v21))
        v22 = HIBYTE(v21);
      else
        v22 = BYTE1(v21);
      v23 = *(_DWORD *)(v12 + 144);
      v24 = *(_DWORD *)(v12 + 148);
      v25 = *(_QWORD *)(v12 + 104);
      if (!v25)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        v26 = v8;
        v27 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v42 = qword_255795648;
          for (k = qword_255795650; v42 != k; v42 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v42)(*(_QWORD *)(v42 + 8), "ptr != nullptr || size == 0", 27, "", 0);
        }
        v28 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        v8 = v26;
        v9 = (unsigned __int8 *)(a1 + 376);
        if (!byte_255795670)
          goto LABEL_339;
        qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
      }
      v29 = *(_QWORD *)(v25 + 2 * (v23 * v10 + v24 * (_DWORD)v8));
      if (v29 <= BYTE6(v29))
        BYTE1(v29) = HIBYTE(v29);
      v30 = BYTE1(v29);
      if (*(_BYTE *)(v12 + 528))
      {
        if (v22 - 7 >= 2 && v22 != 11)
        {
          if (v22 != 6)
            goto LABEL_15;
          if (v30 != 10 && v30 != 13)
            goto LABEL_15;
        }
      }
      else if (v22 != 11 && (v22 != 6 || v30 != 13))
      {
        goto LABEL_15;
      }
      v35 = *(_QWORD *)(a1 + 440);
      v34 = *(_QWORD *)(a1 + 448);
      if (v35 == v34)
      {
        v36 = *(_QWORD *)(a1 + 392);
        if (!v36)
          goto LABEL_103;
        v37 = *(std::__shared_weak_count **)(a1 + 400);
        if (!v37)
          goto LABEL_75;
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(p_shared_owners);
        while (__stxr(v39 + 1, p_shared_owners));
        do
          v40 = __ldaxr(p_shared_owners);
        while (__stlxr(v40 - 1, p_shared_owners));
        if (v40)
        {
          v36 = *(_QWORD *)(a1 + 392);
          v41 = *(std::__shared_weak_count **)(a1 + 400);
          if (!v41)
            goto LABEL_75;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
          v36 = *(_QWORD *)(a1 + 392);
          v41 = *(std::__shared_weak_count **)(a1 + 400);
          if (!v41)
            goto LABEL_75;
        }
        v44 = (unint64_t *)&v41->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        do
          v46 = __ldaxr(v44);
        while (__stlxr(v46 - 1, v44));
        if (v46)
        {
LABEL_75:
          if (*(_BYTE *)(a1 + 433))
            goto LABEL_76;
LABEL_103:
          v221 = 0;
          if (*(_DWORD *)(a1 + 424) != 1)
            goto LABEL_104;
LABEL_77:
          v47 = *(unsigned int *)(a1 + 428);
          v48 = *(unsigned int *)(a1 + 416);
          if ((_DWORD)v47 == (_DWORD)v48)
          {
            v49 = *(_DWORD *)(a1 + 420);
            v50 = *(void **)(a1 + 408);
            if (*(_BYTE *)(a1 + 432) && v50)
            {
              v51 = *(_QWORD *)(a1 + 392);
              v52 = *(std::__shared_weak_count **)(a1 + 400);
              if (v52)
              {
                v53 = (unint64_t *)&v52->__shared_owners_;
                do
                  v54 = __ldxr(v53);
                while (__stxr(v54 + 1, v53));
                do
                  v55 = __ldaxr(v53);
                while (__stlxr(v55 - 1, v53));
                if (!v55)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                }
              }
              (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v51 + 88))(v51, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
              v50 = *(void **)(a1 + 408);
            }
            memset(v50, *v9, (v49 * v47));
          }
          else if ((_DWORD)v48)
          {
            v56 = *(_DWORD *)(a1 + 420);
            if (v56)
            {
              v57 = *(char **)(a1 + 408);
              if (*(_BYTE *)(a1 + 432) && v57)
              {
                v59 = *(_QWORD *)(a1 + 392);
                v58 = *(std::__shared_weak_count **)(a1 + 400);
                if (v58)
                {
                  v60 = (unint64_t *)&v58->__shared_owners_;
                  do
                    v61 = __ldxr(v60);
                  while (__stxr(v61 + 1, v60));
                  do
                    v62 = __ldaxr(v60);
                  while (__stlxr(v62 - 1, v60));
                  if (!v62)
                  {
                    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                    std::__shared_weak_count::__release_weak(v58);
                  }
                }
                (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v59 + 88))(v59, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                v57 = *(char **)(a1 + 408);
              }
              v63 = v56 - 1;
              if (v56 != 1)
              {
                do
                {
                  memset(v57, *v9, v48);
                  v57 += v47;
                  --v63;
                }
                while (v63);
              }
              memset(v57, *v9, v48);
            }
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
          if (!*(_BYTE *)(a1 + 433))
            goto LABEL_103;
LABEL_76:
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v36 + 96))(&v221, v36, 1);
          if (*(_DWORD *)(a1 + 424) == 1)
            goto LABEL_77;
LABEL_104:
          *(_QWORD *)&v223 = v9;
          if (*(_DWORD *)(a1 + 416) && *(_DWORD *)(a1 + 420))
            sub_223CCE7C8((uint64_t)&v223, a1 + 384);
        }
        v64 = v221;
        v221 = 0;
        if (v64)
          (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
        v35 = *(_QWORD *)(a1 + 440);
        v34 = *(_QWORD *)(a1 + 448);
LABEL_110:
        v65 = (v34 - v35) >> 3;
        v66 = -51 * v65;
        if (0xCCCCCCCCCCCCCCCDLL * v65 > 0x63)
        {
LABEL_9:
          v4 = v218;
          goto LABEL_10;
        }
        v216 = v10;
        v217 = v8;
        v215[0] = &v216;
        v215[1] = (unsigned __int16 *)&v220;
        v215[2] = (unsigned __int16 *)&v218;
        v215[3] = (unsigned __int16 *)&v219;
        LODWORD(v221) = (unsigned __int16)v10 | v205;
        v67 = *(_DWORD *)(a1 + 424) * (unsigned __int16)v10 + *(_DWORD *)(a1 + 428) * v207;
        v68 = *(_QWORD *)(a1 + 408);
        if (*(unsigned __int8 *)(v68 + v67) != 255)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageProcessing/include/Kit/ImageProcessing/FloodFill.h", 96, (uint64_t)"label_view(start_location[0], start_location[1]) == kFloodFillUnknownLabel<LabelType>", 85, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_339;
          }
          v68 = *(_QWORD *)(a1 + 408);
          v67 = *(_DWORD *)(a1 + 424) * (unsigned __int16)v10 + *(_DWORD *)(a1 + 428) * v207;
        }
        v224 = 0u;
        v225 = 0u;
        v223 = 0u;
        *(_BYTE *)(v68 + v67) = v66;
        sub_223CCE924(v215, (unsigned __int16 *)&v221, &v223);
        v69 = *((_QWORD *)&v225 + 1);
        if (*((_QWORD *)&v225 + 1))
        {
          v70 = 1;
          do
          {
            while (1)
            {
              v73 = (((_QWORD)v224 - *((_QWORD *)&v223 + 1)) << 7) - 1;
              if ((_QWORD)v224 == *((_QWORD *)&v223 + 1))
                v73 = 0;
              v74 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v223 + 1)
                                          + (((unint64_t)(v225 + v69 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                              + 4 * ((v225 + v69 - 1) & 0x3FF));
              v222 = v74;
              *((_QWORD *)&v225 + 1) = v69 - 1;
              if ((unint64_t)(v73 - (v69 + v225) + 1) >= 0x800)
              {
                operator delete(*(void **)(v224 - 8));
                *(_QWORD *)&v224 = v224 - 8;
              }
              v71 = *(_DWORD *)(a1 + 424) * (unsigned __int16)v74 + *(_DWORD *)(a1 + 428) * HIWORD(v74);
              v72 = *(_QWORD *)(a1 + 408);
              if (*(unsigned __int8 *)(v72 + v71) == 255)
                break;
              v69 = *((_QWORD *)&v225 + 1);
              if (!*((_QWORD *)&v225 + 1))
                goto LABEL_123;
            }
            *(_BYTE *)(v72 + v71) = v66;
            sub_223CCE924(v215, (unsigned __int16 *)&v222, &v223);
            ++v70;
            v69 = *((_QWORD *)&v225 + 1);
          }
          while (*((_QWORD *)&v225 + 1));
LABEL_123:
          v75 = (void **)*((_QWORD *)&v223 + 1);
          v76 = (void **)v224;
          *((_QWORD *)&v225 + 1) = 0;
          v77 = v224 - *((_QWORD *)&v223 + 1);
          if ((_QWORD)v224 - *((_QWORD *)&v223 + 1) >= 0x11uLL)
          {
            do
            {
LABEL_124:
              operator delete(*v75);
              v76 = (void **)v224;
              v75 = (void **)(*((_QWORD *)&v223 + 1) + 8);
              *((_QWORD *)&v223 + 1) = v75;
              v77 = v224 - (_QWORD)v75;
            }
            while ((_QWORD)v224 - (_QWORD)v75 > 0x10uLL);
          }
        }
        else
        {
          v70 = 1;
          v75 = (void **)*((_QWORD *)&v223 + 1);
          v76 = (void **)v224;
          *((_QWORD *)&v225 + 1) = 0;
          v77 = v224 - *((_QWORD *)&v223 + 1);
          if ((_QWORD)v224 - *((_QWORD *)&v223 + 1) >= 0x11uLL)
            goto LABEL_124;
        }
        v78 = v77 >> 3;
        if (v78 == 1)
        {
          v79 = 512;
LABEL_131:
          *(_QWORD *)&v225 = v79;
        }
        else if (v78 == 2)
        {
          v79 = 1024;
          goto LABEL_131;
        }
        if (v75 != v76)
        {
          do
          {
            v80 = *v75++;
            operator delete(v80);
          }
          while (v75 != v76);
          if ((_QWORD)v224 != *((_QWORD *)&v223 + 1))
            *(_QWORD *)&v224 = v224 + ((*((_QWORD *)&v223 + 1) - v224 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((_QWORD)v223)
          operator delete((void *)v223);
        v81 = v216 | ((unint64_t)v217 << 32);
        v83 = *(char **)(a1 + 448);
        v82 = *(_QWORD *)(a1 + 456);
        if ((unint64_t)v83 < v82)
        {
          *(_QWORD *)v83 = v81;
          *((_DWORD *)v83 + 2) = v70;
          *((_QWORD *)v83 + 3) = 0;
          *((_QWORD *)v83 + 4) = 0;
          *((_QWORD *)v83 + 2) = 0;
          v11 = v83 + 40;
          *(_QWORD *)(a1 + 448) = v83 + 40;
        }
        else
        {
          v84 = *(char **)(a1 + 440);
          v85 = 0xCCCCCCCCCCCCCCCDLL * ((v83 - v84) >> 3) + 1;
          if (v85 > 0x666666666666666)
            sub_22316E078();
          v86 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v82 - (_QWORD)v84) >> 3);
          if (2 * v86 > v85)
            v85 = 2 * v86;
          if (v86 >= 0x333333333333333)
            v87 = 0x666666666666666;
          else
            v87 = v85;
          if (v87)
          {
            if (v87 > 0x666666666666666)
              sub_223174E94();
            v88 = (char *)operator new(40 * v87);
          }
          else
          {
            v88 = 0;
          }
          v89 = &v88[8 * ((v83 - v84) >> 3)];
          *(_QWORD *)v89 = v81;
          *((_DWORD *)v89 + 2) = v70;
          *((_QWORD *)v89 + 3) = 0;
          *((_QWORD *)v89 + 4) = 0;
          v90 = &v88[40 * v87];
          *((_QWORD *)v89 + 2) = 0;
          v11 = v89 + 40;
          if (v83 == v84)
          {
            *(_QWORD *)(a1 + 440) = v89;
            *(_QWORD *)(a1 + 448) = v11;
            *(_QWORD *)(a1 + 456) = v90;
          }
          else
          {
            v91 = 0;
            do
            {
              v92 = &v89[v91];
              v93 = &v83[v91];
              *((_QWORD *)v92 - 5) = *(_QWORD *)&v83[v91 - 40];
              *((_DWORD *)v92 - 8) = *(_DWORD *)&v83[v91 - 32];
              *((_QWORD *)v92 - 2) = 0;
              *((_QWORD *)v92 - 1) = 0;
              v2 = *(__n128 *)&v83[v91 - 24];
              *(__n128 *)(v92 - 24) = v2;
              *((_QWORD *)v92 - 1) = *(_QWORD *)&v83[v91 - 8];
              *((_QWORD *)v93 - 3) = 0;
              *((_QWORD *)v93 - 2) = 0;
              *((_QWORD *)v93 - 1) = 0;
              v91 -= 40;
            }
            while (&v83[v91] != v84);
            v83 = *(char **)(a1 + 440);
            v94 = *(char **)(a1 + 448);
            *(_QWORD *)(a1 + 440) = &v89[v91];
            *(_QWORD *)(a1 + 448) = v11;
            *(_QWORD *)(a1 + 456) = v90;
            while (v94 != v83)
            {
              v95 = (void *)*((_QWORD *)v94 - 3);
              if (v95)
              {
                *((_QWORD *)v94 - 2) = v95;
                operator delete(v95);
              }
              v94 -= 40;
            }
          }
          if (v83)
            operator delete(v83);
        }
        *(_QWORD *)(a1 + 448) = v11;
        goto LABEL_15;
      }
      if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 408) + *(_DWORD *)(a1 + 424) * v10 + *(_DWORD *)(a1 + 428) * (_DWORD)v8) == *(unsigned __int8 *)(a1 + 376))
        goto LABEL_110;
LABEL_15:
      v10 += *(_DWORD *)(a1 + 380);
      if (v10 >= v219)
        goto LABEL_9;
    }
  }
LABEL_169:
  v96 = *(char **)(a1 + 440);
  if (v96 == v6)
  {
    v166 = 0;
    v165 = 0;
    v161 = v6;
    goto LABEL_298;
  }
  v208 = 0;
  v97 = v219;
  v201 = v6;
  while (2)
  {
    v98 = *(_QWORD *)v96;
    v99 = HIDWORD(*(_QWORD *)v96);
    *(_QWORD *)&v223 = 0;
    v101 = (v98 & 0x8000000080000000) != 0 || v97 <= (int)v98 || v4 <= (int)v99;
    if (v101
      || v208 != *(unsigned __int8 *)(*(_QWORD *)(a1 + 408)
                                    + (*(_DWORD *)(a1 + 424) * v98 + *(_DWORD *)(a1 + 428) * v99)))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/WalkAround.hpp", 47, (uint64_t)"is_region(inner)", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v4 = v218;
      v97 = v219;
    }
    if (((((_DWORD)v99 - 1) | v98) & 0x80000000) == 0
      && v97 > (int)v98
      && v4 >= (int)v99
      && v208 == *(unsigned __int8 *)(*(_QWORD *)(a1 + 408)
                                    + (*(_DWORD *)(a1 + 424) * v98 + *(_DWORD *)(a1 + 428) * (v99 - 1))))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/WalkAround.hpp", 51, (uint64_t)"!is_region(outer)", 17, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v4 = v218;
      v97 = v219;
    }
    v102 = 0;
    v204 = v208 + 100;
    v103 = 0xFFFFFFFFLL;
    v104 = v98;
    v105 = v99;
LABEL_189:
    v106 = v104 - v102;
    v107 = v105 + v103;
    if ((((v105 + (_DWORD)v103) | (v104 - (_DWORD)v102)) & 0x80000000) == 0 && v106 < v97 && v107 < v4)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 408) + (*(_DWORD *)(a1 + 424) * v106 + *(_DWORD *)(a1 + 428) * v107)) = v204;
      v4 = v218;
      v97 = v219;
    }
    while (1)
    {
      v108 = v103;
      v103 = v102;
      v109 = v108 + v106;
      if ((int)v108 + v106 >= 0)
      {
        v110 = v102 + v107;
        if ((((_DWORD)v102 + v107) & 0x80000000) == 0
          && v109 < v97
          && v110 < v4
          && v208 == *(unsigned __int8 *)(*(_QWORD *)(a1 + 408)
                                        + (*(_DWORD *)(a1 + 424) * v109 + *(_DWORD *)(a1 + 428) * v110)))
        {
          v111 = 0;
          v103 = -(int)v102;
          v102 = v108;
          v104 = v108 + v106;
          v105 = v110;
          if (v109 == (_DWORD)v98)
            goto LABEL_209;
          goto LABEL_193;
        }
      }
      v112 = v104 + v108;
      if (v104 + (int)v108 < 0)
        break;
      v113 = v105 + v102;
      if (v105 + (_DWORD)v102 < 0
        || v112 >= v97
        || v113 >= v4
        || v208 != *(unsigned __int8 *)(*(_QWORD *)(a1 + 408)
                                      + (*(_DWORD *)(a1 + 424) * v112 + *(_DWORD *)(a1 + 428) * v113)))
      {
        break;
      }
      v111 = 1;
      v103 = v108;
      v104 += v108;
      v105 += v102;
      if (v112 == (_DWORD)v98)
        goto LABEL_209;
LABEL_193:
      if (v111)
        goto LABEL_189;
    }
    v102 = -(int)v108;
    v111 = 1;
    if (v104 != (_DWORD)v98)
      goto LABEL_193;
LABEL_209:
    if (v105 != (_DWORD)v99 || (_DWORD)v103 != -1 || (_DWORD)v102)
      goto LABEL_193;
    v114 = *(_DWORD *)v96;
    if (*((int *)v96 + 1) <= 1)
      v115 = 1;
    else
      v115 = *((_DWORD *)v96 + 1);
    v202 = v115 - 1;
    *(_QWORD *)&v223 = 0;
    v206 = v114;
    if (v114 < 0
      || v97 <= v114
      || v4 < v115
      || ((v116 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 408)
                                     + (*(_DWORD *)(a1 + 424) * v114 + *(_DWORD *)(a1 + 428) * v202)),
           v208 != v116)
        ? (v117 = v204 == v116)
        : (v117 = 1),
          !v117))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/WalkAround.hpp", 47, (uint64_t)"is_region(inner)", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v4 = v218;
      v97 = v219;
    }
    if ((((v115 - 2) | v206) & 0x80000000) == 0 && v97 > v206 && v4 >= v202)
    {
      v118 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 408)
                                + (*(_DWORD *)(a1 + 424) * v206 + *(_DWORD *)(a1 + 428) * (v115 - 2)));
      if (v208 == v118 || v204 == v118)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/WalkAround.hpp", 51, (uint64_t)"!is_region(outer)", 17, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v4 = v218;
        v97 = v219;
      }
    }
    v203 = v96;
    v120 = 0;
    v121 = 0xFFFFFFFFLL;
    v122 = v206;
    v123 = v206;
    v124 = v115 - 1;
    v125 = v115 - 1;
    v126 = v208 + 100;
    while (2)
    {
      v127 = (v123 - v120);
      v128 = (v125 + v121);
      if (((v128 | v127) & 0x80000000) != 0 || (int)v127 >= v97 || (int)v128 >= v4)
        goto LABEL_259;
      v129 = v127 | (v128 << 32);
      v131 = (char *)*((_QWORD *)v203 + 3);
      v130 = *((_QWORD *)v203 + 4);
      if ((unint64_t)v131 < v130)
      {
        *(_QWORD *)v131 = v129;
        v132 = (uint64_t)(v131 + 8);
        goto LABEL_257;
      }
      v133 = (char *)*((_QWORD *)v203 + 2);
      v134 = (char *)(v131 - v133);
      v135 = (v131 - v133) >> 3;
      v136 = v135 + 1;
      if ((unint64_t)(v135 + 1) >> 61)
        sub_22316E078();
      v137 = v130 - (_QWORD)v133;
      if (v137 >> 2 > v136)
        v136 = v137 >> 2;
      if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8)
        v138 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v138 = v136;
      if (!v138)
      {
        v139 = 0;
        v140 = (uint64_t *)(8 * v135);
        *(_QWORD *)(8 * v135) = v129;
        v132 = 8 * v135 + 8;
        v141 = (char *)(v131 - v133);
        if (v131 != v133)
          goto LABEL_249;
LABEL_287:
        *((_QWORD *)v203 + 2) = v140;
        *((_QWORD *)v203 + 3) = v132;
        *((_QWORD *)v203 + 4) = (char *)v139 + 8 * v138;
        if (v131)
          goto LABEL_256;
        goto LABEL_257;
      }
      v198 = (char *)(v131 - v133);
      v199 = (v131 - v133) >> 3;
      v200 = (char *)*((_QWORD *)v203 + 2);
      if (v138 >> 61)
        sub_223174E94();
      v197 = v138;
      v139 = operator new(8 * v138);
      v138 = v197;
      v134 = v198;
      v135 = v199;
      v133 = v200;
      v140 = (uint64_t *)((char *)v139 + 8 * v199);
      *v140 = v127 | (v128 << 32);
      v132 = (uint64_t)(v140 + 1);
      v141 = (char *)(v131 - v200);
      if (v131 == v200)
        goto LABEL_287;
LABEL_249:
      v142 = (unint64_t)(v141 - 8);
      if (v142 < 0x58)
        goto LABEL_351;
      if ((unint64_t)(v131 - &v134[(_QWORD)v139]) < 0x20)
        goto LABEL_351;
      v143 = (v142 >> 3) + 1;
      v144 = 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
      v145 = &v131[-v144];
      v140 = (uint64_t *)((char *)v140 - v144);
      v146 = (__n128 *)((char *)v139 + 8 * v135 - 16);
      v147 = (__n128 *)(v131 - 16);
      v148 = v143 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v2 = *v147;
        v146[-1] = v147[-1];
        *v146 = v2;
        v146 -= 2;
        v147 -= 2;
        v148 -= 4;
      }
      while (v148);
      v131 = v145;
      if (v143 != (v143 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_351:
        do
        {
          v149 = *((_QWORD *)v131 - 1);
          v131 -= 8;
          *--v140 = v149;
        }
        while (v131 != v133);
      }
      v131 = (char *)*((_QWORD *)v203 + 2);
      *((_QWORD *)v203 + 2) = v140;
      *((_QWORD *)v203 + 3) = v132;
      *((_QWORD *)v203 + 4) = (char *)v139 + 8 * v138;
      if (v131)
      {
LABEL_256:
        v150 = v132;
        operator delete(v131);
        v132 = v150;
        v4 = v218;
        v97 = v219;
      }
LABEL_257:
      *((_QWORD *)v203 + 3) = v132;
      v126 = v208 + 100;
      v122 = v206;
      v124 = v202;
LABEL_259:
      v151 = v121;
      v121 = v120;
      v152 = v151 + v127;
      if ((int)v151 + (int)v127 >= 0)
      {
        v153 = v120 + v128;
        if ((((_DWORD)v120 + (_DWORD)v128) & 0x80000000) == 0 && v152 < v97 && v153 < v4)
        {
          v154 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 408)
                                    + (*(_DWORD *)(a1 + 424) * v152 + *(_DWORD *)(a1 + 428) * v153));
          if (v208 == v154 || v126 == v154)
          {
            v156 = 0;
            v121 = -(int)v120;
            v120 = v151;
            v123 = v151 + v127;
            v125 = v153;
            if (v152 == v122)
              goto LABEL_282;
            goto LABEL_258;
          }
        }
      }
      v157 = v123 + v151;
      if (v123 + (int)v151 >= 0)
      {
        v158 = v125 + v120;
        if (((v125 + (_DWORD)v120) & 0x80000000) == 0 && v157 < v97 && v158 < v4)
        {
          v159 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 408)
                                    + (*(_DWORD *)(a1 + 424) * v157 + *(_DWORD *)(a1 + 428) * v158));
          if (v208 == v159 || v126 == v159)
          {
            v156 = 1;
            v121 = v151;
            v123 += v151;
            v125 += v120;
            if (v157 == v122)
              goto LABEL_282;
            goto LABEL_258;
          }
        }
      }
      v120 = -(int)v151;
      v156 = 1;
      if (v123 != v122)
        goto LABEL_258;
LABEL_282:
      if (v125 != v124 || (_DWORD)v121 != -1 || (_DWORD)v120)
      {
LABEL_258:
        if (v156)
          continue;
        goto LABEL_259;
      }
      break;
    }
    v96 = v203 + 40;
    ++v208;
    if (v203 + 40 != v201)
      continue;
    break;
  }
  v161 = *(char **)(a1 + 440);
  v6 = *(char **)(a1 + 448);
  if (v6 == v161)
  {
    v166 = 0;
    v165 = 0;
    v171 = (uint64_t *)(a1 + 464);
    v172 = *(void **)(a1 + 464);
    if (v172)
      goto LABEL_299;
  }
  else
  {
    v162 = (v6 - v161) / 40;
    if (v162 >= 0xCCCCCCCCCCCCCCDLL)
      sub_22316E078();
    v163 = 20 * v162;
    v164 = (char *)operator new(20 * v162);
    v165 = v164;
    v166 = &v164[v163];
    v167 = v164;
    if ((unint64_t)(v163 - 20) < 0x14)
      goto LABEL_352;
    v168 = (v163 - 20) / 0x14uLL + 1;
    v167 = &v164[20 * (v168 & 0x1FFFFFFFFFFFFFFELL)];
    v169 = v164 + 20;
    v170 = v168 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v169 - 20) = 0;
      *v169 = 0;
      *(v169 - 4) = 0;
      v169[16] = 0;
      v169 += 40;
      v170 -= 2;
    }
    while (v170);
    if (v168 != (v168 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_352:
      do
      {
        *v167 = 0;
        v167[16] = 0;
        v167 += 20;
      }
      while (v167 != v166);
    }
LABEL_298:
    v171 = (uint64_t *)(a1 + 464);
    v172 = *(void **)(a1 + 464);
    if (v172)
    {
LABEL_299:
      *(_QWORD *)(a1 + 472) = v172;
      operator delete(v172);
      *v171 = 0;
      v171[1] = 0;
      v171[2] = 0;
      v161 = *(char **)(a1 + 440);
      v6 = *(char **)(a1 + 448);
    }
  }
  *(_QWORD *)(a1 + 464) = v165;
  *(_QWORD *)(a1 + 472) = v166;
  *(_QWORD *)(a1 + 480) = v166;
  if (v161 != v6)
  {
    v173 = 0;
    v174 = v161 + 16;
    do
    {
      v176 = *((_DWORD *)v174 - 2);
      *(_DWORD *)(a1 + 500) += v176;
      v177 = (uint64_t)(v174[1] - *v174) >> 3;
      v178 = *(_DWORD *)(a1 + 508) + v177;
      *(_DWORD *)(a1 + 508) = v178;
      if (v178 > *(_DWORD *)(a1 + 524) || v176 < *(_DWORD *)(a1 + 512) || v177 < *(unsigned int *)(a1 + 516))
      {
        ++*(_DWORD *)(a1 + 488);
      }
      else
      {
        sub_223CCF3DC(v209, (int32x2_t **)v174, &v223, v2);
        v179 = *v171;
        v180 = *v171 + v173;
        if (*(unsigned __int8 *)(v180 + 16) == v224)
        {
          if (!*(_BYTE *)(v180 + 16)
            || (v2.n128_u32[0] = v223,
                v181 = v179 + v173,
                *(_DWORD *)v181 = v223,
                v182 = *(_QWORD *)((char *)&v223 + 4),
                *(_DWORD *)(v181 + 12) = HIDWORD(v223),
                *(_QWORD *)(v181 + 4) = v182,
                !(_BYTE)v224))
          {
LABEL_315:
            ++*(_DWORD *)(a1 + 492);
            goto LABEL_303;
          }
        }
        else if (*(_BYTE *)(v180 + 16))
        {
          *(_BYTE *)(v180 + 16) = 0;
          if (!(_BYTE)v224)
            goto LABEL_315;
        }
        else
        {
          v2.n128_u32[0] = v223;
          v183 = v179 + v173;
          *(_DWORD *)v183 = v223;
          v184 = *(_QWORD *)((char *)&v223 + 4);
          *(_DWORD *)(v183 + 12) = HIDWORD(v223);
          *(_QWORD *)(v183 + 4) = v184;
          *(_BYTE *)(v180 + 16) = 1;
          if (!(_BYTE)v224)
            goto LABEL_315;
        }
        ++*(_DWORD *)(a1 + 496);
        *(_DWORD *)(a1 + 504) += *((_DWORD *)v174 - 2);
      }
LABEL_303:
      v173 += 20;
      v175 = (char *)(v174 + 3);
      v174 += 5;
    }
    while (v175 != v6);
  }
  v185 = v214;
  if (v214)
  {
    v186 = (unint64_t *)&v214->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v213 = &off_24EC20828;
  v188 = v212;
  if (v212)
  {
    v189 = (unint64_t *)&v212->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = v211;
  if (v211)
  {
    v192 = (unint64_t *)&v211->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = v210;
  if (v210)
  {
    v195 = (unint64_t *)&v210->__shared_owners_;
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
}

void sub_223CCAD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223CCDBD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223CCAE60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = a1[8];
  if (v2)
  {
    v3 = a1[9];
    v4 = (void *)a1[8];
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = (void *)a1[8];
    }
    a1[9] = v2;
    operator delete(v4);
  }
  v6 = (std::__shared_weak_count *)a1[3];
  if (!v6)
    return a1;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

uint64_t sub_223CCAF1C(uint64_t a1, unint64_t a2, float32x2_t a3, float32x4_t a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  float v8;
  int v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  float32x2_t v16;
  float32x2_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  void **p_dst;
  int8x16_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  uint64_t *v30;
  size_t v31;
  void **v32;
  unint64_t v33;
  const void **v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  const char *v42;
  unsigned __int8 v43;
  size_t v44;
  const char *v45;
  _BYTE *v46;
  uint64_t v47;
  unint64_t v48;
  const char *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  size_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count *v60;
  size_t v61;
  size_t v62;
  char *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  void *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;
  const char *v83;
  NSObject *v84;
  void **v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  void *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  const char *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  const char *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  const char *v123;
  uint64_t *v124;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v126;
  int v127;
  const char *v128;
  int v129;
  const char *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  void **__dst;
  size_t v134;
  int64_t v135;
  _QWORD v136[2];
  _QWORD v137[3];
  _QWORD v138[3];
  uint64_t v139;
  unint64_t v140;
  void *v141;
  char v142;
  unint64_t v143;
  int v144;
  uint64_t v145;
  int **v146;
  void *__p[2];
  std::__shared_weak_count *v148;
  char *v149;
  std::__shared_weak_count *v150;
  const char *v151;
  __int128 v152;
  _BYTE v153[24];
  __int128 v154;
  void *v155[2];
  unint64_t v156;
  char v157;
  uint64_t v158[5];

  v158[2] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 440);
  v6 = *(_QWORD *)(a1 + 448);
  v8 = 0.0;
  if (v7 == v6)
    goto LABEL_177;
  v9 = a2;
  v11 = HIDWORD(a2);
  if (*(_DWORD *)(a1 + 416) <= a2 || *(_DWORD *)(a1 + 420) <= HIDWORD(a2))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/ImageProcessing/src/DepthCorrection/SpecularRegions.cpp", 41, (uint64_t)"idx[0] >= 0 && idx[1] >= 0 && idx[0] < regions_buffer_.Width() && idx[1] < regions_buffer_.Height()", 99, (uint64_t)&unk_2245A741E, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v7 = *(_QWORD *)(a1 + 440);
    v6 = *(_QWORD *)(a1 + 448);
  }
  v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 408)
                           + (*(_DWORD *)(a1 + 424) * v9 + *(_DWORD *)(a1 + 428) * v11));
  v13 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3);
  v14 = v12 - 100;
  if (v13 > v12)
    v14 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 408)
                             + (*(_DWORD *)(a1 + 424) * v9 + *(_DWORD *)(a1 + 428) * v11));
  if (v13 <= v14)
    goto LABEL_177;
  v15 = *(_QWORD *)(a1 + 464) + 20 * v14;
  if (!*(_BYTE *)(v15 + 16))
    goto LABEL_177;
  *(float *)&a5 = (float)(*(float *)(a1 + 312) * (float)v9) + *(float *)(a1 + 320);
  *(float *)&a6 = (float)(*(float *)(a1 + 316) * (float)(int)v11) + *(float *)(a1 + 324);
  a3.i32[0] = *(_DWORD *)(v15 + 12);
  a4.i64[0] = *(_QWORD *)(v15 + 4);
  v16 = vadd_f32(a3, vmla_lane_f32(vmul_f32(*(float32x2_t *)a4.f32, *(float32x2_t *)&a5), *(float32x2_t *)&a6, *(float32x2_t *)a4.f32, 1));
  v17.i32[1] = 872415232;
  if (fabsf(v16.f32[0]) < 0.00000011921)
  {
    sub_223CCBF0C(&v146);
    if (*v146[7] > 4
      || (v18 = *((unsigned __int8 *)v146 + 72),
          v19 = sub_22322F254((uint64_t)v146, "OSLogSurrogateAppender", 1, 0),
          v20 = v19,
          !v18)
      && !v19)
    {
LABEL_177:
      v24 = 0;
      return v24 | LODWORD(v8);
    }
    sub_223195210((uint64_t)v136);
    sub_2231813E8(v137, (uint64_t)"DepthCorrection ray did not intersect", 37);
    if ((v144 & 0x10) != 0)
    {
      v33 = v143;
      if (v143 < v140)
      {
        v143 = v140;
        v33 = v140;
      }
      v34 = (const void **)&v139;
    }
    else
    {
      if ((v144 & 8) == 0)
      {
        v21 = 0;
        HIBYTE(v135) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_42;
      }
      v34 = (const void **)v138;
      v33 = v138[2];
    }
    v35 = *v34;
    v21 = v33 - (_QWORD)*v34;
    if (v21 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v21 >= 0x17)
    {
      v36 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17)
        v36 = v21 | 7;
      v37 = v36 + 1;
      p_dst = (void **)operator new(v36 + 1);
      v134 = v21;
      v135 = v37 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v135) = v33 - *(_BYTE *)v34;
      p_dst = (void **)&__dst;
      if (!v21)
      {
LABEL_42:
        *((_BYTE *)p_dst + v21) = 0;
        v124 = (uint64_t *)&v146;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v126 = std::chrono::system_clock::now().__d_.__rep_;
        v127 = 4;
        v128 = "unknown file";
        v129 = 110;
        v131 = 0;
        v132 = 0;
        v130 = "unknown function";
        if (v135 >= 0)
          v38 = (const char *)&__dst;
        else
          v38 = (const char *)__dst;
        v39 = *v124;
        v40 = *v124 + 16;
        if (*(char *)(*v124 + 39) < 0)
        {
          v42 = *(const char **)(v39 + 16);
          v41 = *(_QWORD *)(v39 + 24);
        }
        else
        {
          v41 = *(unsigned __int8 *)(*v124 + 39);
          v42 = (const char *)(*v124 + 16);
        }
        v43 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v153);
          sub_223199C58("com.apple.cv3d", (unint64_t)v153, &xmmword_255788F40);
          if ((_BYTE)v154 && (v153[23] & 0x80000000) != 0)
            operator delete(*(void **)v153);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v44 = byte_255788F57;
        else
          v44 = *((_QWORD *)&xmmword_255788F40 + 1);
        if (byte_255788F57 >= 0)
          v45 = (const char *)&xmmword_255788F40;
        else
          v45 = (const char *)xmmword_255788F40;
        *(_QWORD *)v153 = os_log_create(v45, v42);
        v46 = &v153[8];
        if (v44 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v44 >= 0x17)
        {
          v123 = v42;
          v47 = v39;
          v48 = v20;
          v49 = v38;
          v50 = v18;
          v51 = v40;
          v52 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v44 | 7) != 0x17)
            v52 = v44 | 7;
          v53 = v52 + 1;
          v46 = operator new(v52 + 1);
          *(_QWORD *)&v153[16] = v44;
          *(_QWORD *)&v154 = v53 | 0x8000000000000000;
          *(_QWORD *)&v153[8] = v46;
          v40 = v51;
          v18 = v50;
          v38 = v49;
          v20 = v48;
          v39 = v47;
          v42 = v123;
        }
        else
        {
          BYTE7(v154) = v44;
          if (!v44)
          {
LABEL_63:
            v46[v44] = 0;
            BYTE8(v154) = 1;
            v54 = v155;
            if (v41 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v41 >= 0x17)
            {
              v55 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v41 | 7) != 0x17)
                v55 = v41 | 7;
              v56 = v55 + 1;
              v54 = (void **)operator new(v55 + 1);
              v155[1] = (void *)v41;
              v156 = v56 | 0x8000000000000000;
              v155[0] = v54;
            }
            else
            {
              HIBYTE(v156) = v41;
              if (!v41)
              {
LABEL_71:
                *((_BYTE *)v54 + v41) = 0;
                v157 = 1;
                v57 = *(NSObject **)v153;
                if (SHIBYTE(v156) < 0)
                  operator delete(v155[0]);
                if (BYTE8(v154) && SBYTE7(v154) < 0)
                  operator delete(*(void **)&v153[8]);
                if (*(_QWORD *)v153)
                  os_release(*(void **)v153);
                if (!v20 || !*(_QWORD *)(v20 + 24))
                {
                  os_log_type_enabled(v57, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v153 = 136315138;
                  *(_QWORD *)&v153[4] = v38;
                  v64 = (void *)_os_log_send_and_compose_impl();
                  if (v64)
                    free(v64);
                  goto LABEL_163;
                }
                v58 = _os_log_pack_size();
                v59 = (std::__shared_weak_count_vtbl *)operator new(v58, (std::align_val_t)8uLL);
                v60 = (std::__shared_weak_count *)operator new();
                v60->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v60->__shared_owners_ = 0;
                v60->__shared_weak_owners_ = 0;
                v60[1].__vftable = v59;
                __p[0] = v59;
                __p[1] = v59;
                v149 = 0;
                v150 = 0;
                v148 = v60;
                v61 = strlen(v38);
                if (v61 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v62 = v61;
                if (v61 >= 0x17)
                {
                  v65 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v61 | 7) != 0x17)
                    v65 = v61 | 7;
                  v66 = v65 + 1;
                  v63 = (char *)operator new(v65 + 1);
                  *(_QWORD *)&v152 = v62;
                  *((_QWORD *)&v152 + 1) = v66 | 0x8000000000000000;
                  v151 = v63;
                }
                else
                {
                  HIBYTE(v152) = v61;
                  v63 = (char *)&v151;
                  if (!v61)
                  {
LABEL_90:
                    v63[v62] = 0;
                    v67 = v151;
                    v158[0] = v152;
                    *(uint64_t *)((char *)v158 + 7) = *(_QWORD *)((char *)&v152 + 7);
                    v68 = HIBYTE(v152);
                    v69 = operator new(0x38uLL);
                    v69[1] = 0;
                    v69[2] = 0;
                    v69[3] = off_24EC1FA48;
                    *v69 = &off_24EC1F9F8;
                    v70 = v158[0];
                    v69[4] = v67;
                    v69[5] = v70;
                    *(_QWORD *)((char *)v69 + 47) = *(uint64_t *)((char *)v158 + 7);
                    *((_BYTE *)v69 + 55) = v68;
                    memset(v158, 0, 15);
                    v71 = v150;
                    v149 = (char *)(v69 + 3);
                    v150 = (std::__shared_weak_count *)v69;
                    if (v71)
                    {
                      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
                      do
                        v73 = __ldaxr(p_shared_owners);
                      while (__stlxr(v73 - 1, p_shared_owners));
                      if (!v73)
                      {
                        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                        std::__shared_weak_count::__release_weak(v71);
                      }
                    }
                    *(_OWORD *)v153 = *(_OWORD *)__p;
                    v74 = v149;
                    *(_QWORD *)&v153[16] = v148;
                    if (v148)
                    {
                      v75 = (unint64_t *)&v148->__shared_owners_;
                      do
                        v76 = __ldxr(v75);
                      while (__stxr(v76 + 1, v75));
                    }
                    v77 = v150;
                    *(_QWORD *)&v154 = v74;
                    *((_QWORD *)&v154 + 1) = v150;
                    if (v150)
                    {
                      v78 = (unint64_t *)&v150->__shared_owners_;
                      do
                        v79 = __ldxr(v78);
                      while (__stxr(v79 + 1, v78));
                      v155[0] = v74;
                      do
                        v80 = __ldaxr(v78);
                      while (__stlxr(v80 - 1, v78));
                      if (!v80)
                      {
                        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                        std::__shared_weak_count::__release_weak(v77);
                      }
                    }
                    else
                    {
                      v155[0] = v74;
                    }
                    v86 = v148;
                    if (v148)
                    {
                      v87 = (unint64_t *)&v148->__shared_owners_;
                      do
                        v88 = __ldaxr(v87);
                      while (__stlxr(v88 - 1, v87));
                      if (!v88)
                      {
                        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                        std::__shared_weak_count::__release_weak(v86);
                      }
                    }
                    v89 = *(_QWORD *)v153;
                    if (*((char *)v155[0] + 31) >= 0)
                      v90 = (char *)v155[0] + 8;
                    else
                      v90 = (char *)*((_QWORD *)v155[0] + 1);
                    v91 = _os_log_pack_fill();
                    *(_DWORD *)v91 = 136315138;
                    *(_QWORD *)(v91 + 4) = v90;
                    v92 = (char *)operator new();
                    v93 = *(unsigned __int8 *)(v39 + 39);
                    v94 = *(_QWORD *)(v39 + 16);
                    v95 = *(_QWORD *)(v39 + 24);
                    v96 = v154;
                    *(_OWORD *)(v92 + 8) = *(_OWORD *)&v153[8];
                    if ((v93 & 0x80u) != 0)
                      v93 = v95;
                    else
                      v94 = v40;
                    *(_QWORD *)v92 = v89;
                    *(_QWORD *)&v153[8] = 0;
                    *(_QWORD *)&v153[16] = 0;
                    *(_OWORD *)(v92 + 24) = v96;
                    v154 = 0uLL;
                    *((_QWORD *)v92 + 5) = v94;
                    *((_QWORD *)v92 + 6) = v93;
                    v92[56] = 16;
                    v151 = 0;
                    __p[0] = v92;
                    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v20 + 24) + 40))(*(_QWORD *)(v20 + 24), __p);
                    v97 = __p[0];
                    __p[0] = 0;
                    if (v97)
                    {
                      v98 = (std::__shared_weak_count *)*((_QWORD *)v97 + 4);
                      if (v98)
                      {
                        v99 = (unint64_t *)&v98->__shared_owners_;
                        do
                          v100 = __ldaxr(v99);
                        while (__stlxr(v100 - 1, v99));
                        if (!v100)
                        {
                          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                          std::__shared_weak_count::__release_weak(v98);
                        }
                      }
                      v101 = (std::__shared_weak_count *)*((_QWORD *)v97 + 2);
                      if (v101)
                      {
                        v102 = (unint64_t *)&v101->__shared_owners_;
                        do
                          v103 = __ldaxr(v102);
                        while (__stlxr(v103 - 1, v102));
                        if (!v103)
                        {
                          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                          std::__shared_weak_count::__release_weak(v101);
                        }
                      }
                      MEMORY[0x227684CE8](v97, 0x10F0C40B62ED6C6);
                      v104 = v151;
                      v151 = 0;
                      if (v104)
                      {
                        v105 = (std::__shared_weak_count *)*((_QWORD *)v104 + 4);
                        if (v105)
                        {
                          v106 = (unint64_t *)&v105->__shared_owners_;
                          do
                            v107 = __ldaxr(v106);
                          while (__stlxr(v107 - 1, v106));
                          if (!v107)
                          {
                            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                            std::__shared_weak_count::__release_weak(v105);
                          }
                        }
                        v108 = (std::__shared_weak_count *)*((_QWORD *)v104 + 2);
                        if (v108)
                        {
                          v109 = (unint64_t *)&v108->__shared_owners_;
                          do
                            v110 = __ldaxr(v109);
                          while (__stlxr(v110 - 1, v109));
                          if (!v110)
                          {
                            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                            std::__shared_weak_count::__release_weak(v108);
                          }
                        }
                        MEMORY[0x227684CE8](v104, 0x10F0C40B62ED6C6);
                      }
                    }
                    v111 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
                    if (*((_QWORD *)&v154 + 1))
                    {
                      v112 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
                      do
                        v113 = __ldaxr(v112);
                      while (__stlxr(v113 - 1, v112));
                      if (!v113)
                      {
                        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                        std::__shared_weak_count::__release_weak(v111);
                      }
                    }
                    v114 = *(std::__shared_weak_count **)&v153[16];
                    if (*(_QWORD *)&v153[16])
                    {
                      v115 = (unint64_t *)(*(_QWORD *)&v153[16] + 8);
                      do
                        v116 = __ldaxr(v115);
                      while (__stlxr(v116 - 1, v115));
                      if (!v116)
                      {
                        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                        std::__shared_weak_count::__release_weak(v114);
                      }
                    }
LABEL_163:
                    if (v18)
                    {
                      v117 = (const char *)&__dst;
                      if (v135 < 0)
                        v117 = (const char *)__dst;
                      sub_22322C138((uint64_t)&v124, "%s", v117);
                      sub_223182C08((uint64_t)&v124);
                    }
                    sub_223182C08((uint64_t)&v124);
                    v118 = v132;
                    if (v132)
                    {
                      v119 = (unint64_t *)&v132->__shared_owners_;
                      do
                        v120 = __ldaxr(v119);
                      while (__stlxr(v120 - 1, v119));
                      if (!v120)
                      {
                        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                        std::__shared_weak_count::__release_weak(v118);
                      }
                    }
                    if (SHIBYTE(v135) < 0)
                      operator delete(__dst);
                    v136[0] = *MEMORY[0x24BEDB7F0];
                    v121 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)v136 + *(_QWORD *)(v136[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v137[0] = v121;
                    v137[1] = MEMORY[0x24BEDB848] + 16;
                    if (v142 < 0)
                      operator delete(v141);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x227684BE0](&v145);
                    goto LABEL_177;
                  }
                }
                memcpy(v63, v38, v62);
                goto LABEL_90;
              }
            }
            memmove(v54, v42, v41);
            goto LABEL_71;
          }
        }
        memmove(v46, v45, v44);
        goto LABEL_63;
      }
    }
    memmove(p_dst, v35, v21);
    goto LABEL_42;
  }
  a4.i32[2] = *(_DWORD *)(v15 + 12);
  v17.f32[0] = -*(float *)v15;
  v23 = (int8x16_t)vmlsq_lane_f32((float32x4_t)0, a4, v17, 0);
  v8 = 0.0
     - vdiv_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a4.f32, *(float32x2_t *)v23.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a4.f32, 1), *(float32x2_t *)v23.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL), a3), v16).f32[0];
  if (v8 <= 0.0)
  {
    sub_223CCBF0C(v158);
    if (**(int **)(v158[0] + 56) <= 4)
    {
      v25 = *(unsigned __int8 *)(v158[0] + 72);
      v26 = sub_22322F254(v158[0], "OSLogSurrogateAppender", 1, 0);
      v27 = v26 ? v26 + 16 : 0;
      if (v25 || v26)
      {
        sub_223195210((uint64_t)v136);
        sub_2231813E8(v137, (uint64_t)"DepthCorrection projected behind user", 37);
        sub_2236AC340(v136, __p);
        v124 = v158;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v126 = std::chrono::system_clock::now().__d_.__rep_;
        v127 = 4;
        v128 = "unknown file";
        v129 = 116;
        v131 = 0;
        v132 = 0;
        v130 = "unknown function";
        if (SHIBYTE(v148) >= 0)
          v28 = __p;
        else
          v28 = (void **)__p[0];
        v146 = (int **)v28;
        v29 = *v124;
        v30 = (uint64_t *)(*v124 + 16);
        if (*(char *)(*v124 + 39) < 0)
        {
          v32 = *(void ***)(v29 + 16);
          v31 = *(_QWORD *)(v29 + 24);
        }
        else
        {
          v31 = *(unsigned __int8 *)(*v124 + 39);
          v32 = (void **)(*v124 + 16);
        }
        __dst = v32;
        v134 = v31;
        v81 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v81 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v153);
          sub_223199C58("com.apple.cv3d", (unint64_t)v153, &xmmword_255788F40);
          if ((_BYTE)v154 && (v153[23] & 0x80000000) != 0)
            operator delete(*(void **)v153);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        v82 = byte_255788F57;
        if (byte_255788F57 >= 0)
        {
          v83 = (const char *)&xmmword_255788F40;
        }
        else
        {
          v82 = *((_QWORD *)&xmmword_255788F40 + 1);
          v83 = (const char *)xmmword_255788F40;
        }
        v151 = v83;
        *(_QWORD *)&v152 = v82;
        *(_QWORD *)v153 = os_log_create(v83, (const char *)__dst);
        sub_223199D38(&v153[8], (uint64_t)&v151);
        sub_223199D38(v155, (uint64_t)&__dst);
        v84 = *(NSObject **)v153;
        sub_223199BDC((uint64_t)v153);
        sub_223CCE03C(v27, v30, v84, OS_LOG_TYPE_ERROR, (const char **)&v146);
        if (v25)
        {
          v85 = __p;
          if (SHIBYTE(v148) < 0)
            v85 = (void **)__p[0];
          sub_22322C138((uint64_t)&v124, "%s", (const char *)v85);
          sub_223182C08((uint64_t)&v124);
        }
        sub_223182DAC((uint64_t)&v124);
        if (SHIBYTE(v148) < 0)
          operator delete(__p[0]);
        sub_223195348((uint64_t)v136);
      }
    }
    v24 = 0;
    v8 = 0.0;
  }
  else
  {
    v24 = 0x100000000;
  }
  return v24 | LODWORD(v8);
}

void sub_223CCBCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;
  uint64_t v66;

  if (*(_BYTE *)(v66 - 184) && *(char *)(v66 - 185) < 0)
    operator delete(*(void **)(v66 - 208));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a13);
  if (a66 < 0)
    operator delete(__p);
  sub_223195348((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223CCBEFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223CCBF0C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CDF08);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDF08))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CDF00);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CDF08);
  }
  *a1 = qword_2540CDF00;
}

void sub_223CCBFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CDF08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CDF08);
  _Unwind_Resume(a1);
}

void sub_223CCC000(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::mutex *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  float32x4_t v18;
  double v19;
  double v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  void *v51;
  void **v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  std::mutex *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  void **v62;
  void *v63;
  void *v64;
  int v65;
  __n128 *v68;
  void **v69;
  size_t v70;
  void *v71;
  void **v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  std::mutex *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  std::string::size_type size;
  std::string *v81;
  std::string::size_type v82;
  std::string::size_type v83;
  int v84;
  __n128 *v87;
  std::string *v88;
  size_t v89;
  void *v90;
  void **v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  std::mutex *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  std::string::size_type v99;
  std::string *v100;
  std::string::size_type v101;
  std::string::size_type v102;
  int v103;
  __n128 *v106;
  std::string *v107;
  size_t v108;
  uint64_t *v109;
  unint64_t v110;
  void **v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  std::mutex *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::string::size_type v119;
  std::string *v120;
  std::string::size_type v121;
  std::string::size_type v122;
  int v123;
  __n128 *v126;
  std::string *v127;
  size_t v128;
  unint64_t v129;
  void **v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  std::mutex *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  std::string::size_type v138;
  std::string *v139;
  std::string::size_type v140;
  std::string::size_type v141;
  int v142;
  __n128 *v145;
  std::string *v146;
  size_t v147;
  unint64_t v148;
  void **v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  std::mutex *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  std::string::size_type v158;
  std::string *v159;
  std::string::size_type v160;
  std::string::size_type v161;
  int v162;
  __n128 *v165;
  std::string *v166;
  size_t v167;
  unint64_t v168;
  void **v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  std::mutex *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  std::string::size_type v178;
  std::string *v179;
  std::string::size_type v180;
  std::string::size_type v181;
  int v182;
  __n128 *v185;
  std::string *v186;
  size_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  void *v194[2];
  __int128 v195;
  int v196;
  std::string v197;
  __int128 v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  void *__p[2];
  __int16 v202;
  std::string v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  __int16 v208;
  std::string v209;
  _BYTE v210[40];
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  __int16 v214;
  uint64_t v215;

  v215 = *MEMORY[0x24BDAC8D0];
  sub_223CD0EDC(a1 + 376, (uint64_t *)a2);
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_59;
  v6 = sub_2241471F8();
  v7 = v6[2];
  if (!v7)
  {
    v8 = v6;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v7 = v8[2];
  }
  v9 = *(_QWORD *)(v7 + 64);
  v10 = (std::mutex *)(v9 + 32);
  std::mutex::lock((std::mutex *)(v9 + 32));
  v12 = *(_QWORD *)(v9 + 96);
  v11 = *(_QWORD *)(v9 + 104);
  std::mutex::unlock(v10);
  if (v12 == v11)
    goto LABEL_59;
  *(_QWORD *)v210 = "cv3d.recon.";
  *(_QWORD *)&v210[8] = 11;
  v13 = *(unsigned __int8 *)(a2 + 23);
  if ((v13 & 0x80u) == 0)
    v14 = a2;
  else
    v14 = *(_QWORD *)a2;
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v210[16] = v14;
  *(_QWORD *)&v210[24] = v13;
  sub_2231A9820((uint64_t)v210, (uint64_t)&v210[32], 0, 0, &v197);
  sub_2241471F8();
  v15 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
  {
    *(_OWORD *)v194 = 0u;
    v195 = 0u;
    v196 = 728325616;
    kdebug_trace();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
    {
      *(_QWORD *)&v198 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
      *((_QWORD *)&v198 + 1) = 2;
      v16 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
      {
        __p[0] = *(void **)(a1 + 192);
        *(_QWORD *)v210 = &off_24EC1FE80;
        sub_2231A2D70(__p, &v210[8]);
        v21 = *(_QWORD *)(a1 + 192);
        if (HIDWORD(v21))
        {
          v188 = 0;
          do
          {
            if ((_DWORD)v21)
            {
              v189 = 0;
              do
              {
                v190 = sub_223CCAF1C(a1, v189 | (v188 << 32), _D0, v18, v19, v20);
                _D0.i32[0] = v190;
                v18.i16[0] = *(_WORD *)(*(_QWORD *)(a1 + 184)
                                      + 2
                                      * (*(_DWORD *)(a1 + 200) * v189 + *(_DWORD *)(a1 + 204) * v188));
                __asm { FCVT            H0, S0 }
                if ((v190 & 0xFF00000000) == 0)
                  _D0.f32[0] = v18.f32[0];
                *(_WORD *)(*(_QWORD *)&v210[32] + 2 * (v213 * v189++ + HIDWORD(v213) * v188)) = _D0.i16[0];
                v21 = *(_QWORD *)(a1 + 192);
              }
              while (v189 < v21);
            }
            ++v188;
          }
          while (v188 < HIDWORD(v21));
        }
        *(_OWORD *)&v203.__r_.__value_.__r.__words[1] = *(_OWORD *)&v210[8];
        v204 = *(_OWORD *)&v210[24];
        v205 = v211;
        v206 = v212;
        v203.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC1FE80;
        v207 = v213;
        v208 = v214;
        strcpy((char *)__p, "corrected_depth");
        v202 = 271;
        sub_22346A8B4((uint64_t)&v203, (__int128 *)__p, &v198, &v209);
        if (HIBYTE(v202) && (char)v202 < 0)
          operator delete(__p[0]);
        v22 = (std::__shared_weak_count *)v203.__r_.__value_.__r.__words[2];
        if (v203.__r_.__value_.__r.__words[2])
        {
          v23 = (unint64_t *)(v203.__r_.__value_.__r.__words[2] + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v25 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 56))(v15);
        v27 = *v25;
        v26 = (std::__shared_weak_count *)v25[1];
        v199 = *v25;
        v200 = v26;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v29 = __ldxr(p_shared_owners);
          while (__stxr(v29 + 1, p_shared_owners));
        }
        v30 = *(_OWORD *)&v209.__r_.__value_.__r.__words[1];
        v203.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
        *(_OWORD *)&v203.__r_.__value_.__r.__words[1] = *(_OWORD *)&v209.__r_.__value_.__r.__words[1];
        *(_OWORD *)&v209.__r_.__value_.__r.__words[1] = 0uLL;
        *(_QWORD *)v210 = v27;
        *(_QWORD *)&v210[8] = v26;
        if (v26)
        {
          v31 = (unint64_t *)&v26->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        *(_QWORD *)&v210[16] = &off_24EC6A3B8;
        *(_OWORD *)&v210[24] = v30;
        if (*((_QWORD *)&v30 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        (*(void (**)(uint64_t *, _BYTE *))(*v16 + 16))(v16, v210);
        v35 = *(std::__shared_weak_count **)&v210[32];
        if (*(_QWORD *)&v210[32])
        {
          v36 = (unint64_t *)(*(_QWORD *)&v210[32] + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v38 = *(std::__shared_weak_count **)&v210[8];
        if (*(_QWORD *)&v210[8])
        {
          v39 = (unint64_t *)(*(_QWORD *)&v210[8] + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v41 = (std::__shared_weak_count *)v203.__r_.__value_.__r.__words[2];
        if (v203.__r_.__value_.__r.__words[2])
        {
          v42 = (unint64_t *)(v203.__r_.__value_.__r.__words[2] + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v44 = v200;
        if (v200)
        {
          v45 = (unint64_t *)&v200->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v47 = (std::__shared_weak_count *)v209.__r_.__value_.__r.__words[2];
        if (v209.__r_.__value_.__r.__words[2])
        {
          v48 = (unint64_t *)(v209.__r_.__value_.__r.__words[2] + 8);
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
      }
    }
    kdebug_trace();
  }
  if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_59:
    if (!*((_BYTE *)a3 + 24))
      return;
LABEL_60:
    if (*((char *)a3 + 23) >= 0)
      v50 = a3;
    else
      v50 = (uint64_t *)*a3;
    sub_22456D250("%s.SpecularRegionCount", (std::string *)v194, v50);
    *(_QWORD *)v210 = "cv3d.recon.";
    *(_QWORD *)&v210[8] = 11;
    v51 = (void *)BYTE7(v195);
    if ((SBYTE7(v195) & 0x80u) == 0)
      v52 = v194;
    else
      v52 = (void **)v194[0];
    if (SBYTE7(v195) < 0)
      v51 = v194[1];
    *(_QWORD *)&v210[16] = v52;
    *(_QWORD *)&v210[24] = v51;
    sub_2231A9820((uint64_t)v210, (uint64_t)&v210[32], 0, 0, (std::string *)__p);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v53 = sub_2241471F8();
      v54 = v53[2];
      if (!v54)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v54 = v53[2];
      }
      v55 = *(_QWORD *)(v54 + 64);
      v56 = (std::mutex *)(v55 + 32);
      std::mutex::lock((std::mutex *)(v55 + 32));
      v58 = *(_QWORD *)(v55 + 96);
      v57 = *(_QWORD *)(v55 + 104);
      std::mutex::unlock(v56);
      if (v58 != v57)
      {
        sub_2241471F8();
        v59 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59))
        {
          memset(v210, 0, 32);
          *(_DWORD *)&v210[32] = 728325608;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59))
          {
            strcpy((char *)&v203, "# rejected due to size");
            *((_BYTE *)&v203.__r_.__value_.__s + 23) = 22;
            v209.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            v209.__r_.__value_.__l.__size_ = 2;
            v60 = sub_2241471F8();
            sub_2235347B4((uint64_t)v60, v59, (int *)(a1 + 488), (uint64_t)&v203, (__int128 *)&v209);
            if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v203.__r_.__value_.__l.__data_);
          }
          kdebug_trace();
        }
      }
    }
    memset(v210, 0, 32);
    *(_DWORD *)&v210[32] = 728325624;
    kdebug_trace();
    v61 = v202;
    if ((v202 & 0x80u) != 0)
      v61 = (unint64_t)__p[1];
    if (v61 >= 0x11)
    {
      v62 = __p;
      if ((v202 & 0x80u) != 0)
        v62 = (void **)__p[0];
      v63 = *v62;
      v64 = v62[1];
      v65 = *((unsigned __int8 *)v62 + 16);
      if (v63 == (void *)0x6365722E64337663 && v64 == (void *)0x73746174532E6E6FLL && v65 == 46)
      {
        v68 = sub_223187510();
        if ((v202 & 0x80u) == 0)
          v69 = __p;
        else
          v69 = (void **)__p[0];
        if ((v202 & 0x80u) == 0)
          v70 = v202;
        else
          v70 = (size_t)__p[1];
        sub_223532E4C(v68, v69, v70, (unsigned int *)(a1 + 488), (uint64_t)"# rejected due to size", 22);
      }
    }
    kdebug_trace();
    if ((char)v202 < 0)
      operator delete(__p[0]);
    *(_QWORD *)v210 = "cv3d.recon.";
    *(_QWORD *)&v210[8] = 11;
    v71 = (void *)BYTE7(v195);
    v72 = v194;
    if (SBYTE7(v195) < 0)
    {
      v72 = (void **)v194[0];
      v71 = v194[1];
    }
    *(_QWORD *)&v210[16] = v72;
    *(_QWORD *)&v210[24] = v71;
    sub_2231A9820((uint64_t)v210, (uint64_t)&v210[32], 0, 0, &v203);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v73 = sub_2241471F8();
      v74 = v73[2];
      if (!v74)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v74 = v73[2];
      }
      v75 = *(_QWORD *)(v74 + 64);
      v76 = (std::mutex *)(v75 + 32);
      std::mutex::lock((std::mutex *)(v75 + 32));
      v78 = *(_QWORD *)(v75 + 96);
      v77 = *(_QWORD *)(v75 + 104);
      std::mutex::unlock(v76);
      if (v78 != v77)
      {
        sub_2241471F8();
        v79 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79))
        {
          memset(v210, 0, 32);
          *(_DWORD *)&v210[32] = 728325608;
          kdebug_trace();
          sub_223CCDA8C(v79, (int *)(a1 + 492), "# rejected due to bad plane fit");
          kdebug_trace();
        }
      }
    }
    memset(v210, 0, 32);
    *(_DWORD *)&v210[32] = 728325624;
    kdebug_trace();
    size = HIBYTE(v203.__r_.__value_.__r.__words[2]);
    if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v203.__r_.__value_.__l.__size_;
    if (size >= 0x11)
    {
      v81 = &v203;
      if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v81 = (std::string *)v203.__r_.__value_.__r.__words[0];
      v82 = v81->__r_.__value_.__r.__words[0];
      v83 = v81->__r_.__value_.__l.__size_;
      v84 = v81->__r_.__value_.__s.__data_[16];
      if (v82 == 0x6365722E64337663 && v83 == 0x73746174532E6E6FLL && v84 == 46)
      {
        v87 = sub_223187510();
        if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v88 = &v203;
        else
          v88 = (std::string *)v203.__r_.__value_.__r.__words[0];
        if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v89 = HIBYTE(v203.__r_.__value_.__r.__words[2]);
        else
          v89 = v203.__r_.__value_.__l.__size_;
        sub_223532E4C(v87, v88, v89, (unsigned int *)(a1 + 492), (uint64_t)"# rejected due to bad plane fit", 31);
      }
    }
    kdebug_trace();
    if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v203.__r_.__value_.__l.__data_);
    *(_QWORD *)v210 = "cv3d.recon.";
    *(_QWORD *)&v210[8] = 11;
    v90 = (void *)BYTE7(v195);
    v91 = v194;
    if (SBYTE7(v195) < 0)
    {
      v91 = (void **)v194[0];
      v90 = v194[1];
    }
    *(_QWORD *)&v210[16] = v91;
    *(_QWORD *)&v210[24] = v90;
    sub_2231A9820((uint64_t)v210, (uint64_t)&v210[32], 0, 0, &v203);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v92 = sub_2241471F8();
      v93 = v92[2];
      if (!v93)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v93 = v92[2];
      }
      v94 = *(_QWORD *)(v93 + 64);
      v95 = (std::mutex *)(v94 + 32);
      std::mutex::lock((std::mutex *)(v94 + 32));
      v97 = *(_QWORD *)(v94 + 96);
      v96 = *(_QWORD *)(v94 + 104);
      std::mutex::unlock(v95);
      if (v97 != v96)
      {
        sub_2241471F8();
        v98 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v98 + 24))(v98))
        {
          memset(v210, 0, 32);
          *(_DWORD *)&v210[32] = 728325608;
          kdebug_trace();
          sub_223532FE0((double *)&qword_255788F20, v98, (int *)(a1 + 496), "# valid plane fit");
          kdebug_trace();
        }
      }
    }
    memset(v210, 0, 32);
    *(_DWORD *)&v210[32] = 728325624;
    kdebug_trace();
    v99 = HIBYTE(v203.__r_.__value_.__r.__words[2]);
    if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v99 = v203.__r_.__value_.__l.__size_;
    if (v99 >= 0x11)
    {
      v100 = &v203;
      if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v100 = (std::string *)v203.__r_.__value_.__r.__words[0];
      v101 = v100->__r_.__value_.__r.__words[0];
      v102 = v100->__r_.__value_.__l.__size_;
      v103 = v100->__r_.__value_.__s.__data_[16];
      if (v101 == 0x6365722E64337663 && v102 == 0x73746174532E6E6FLL && v103 == 46)
      {
        v106 = sub_223187510();
        if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v107 = &v203;
        else
          v107 = (std::string *)v203.__r_.__value_.__r.__words[0];
        if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v108 = HIBYTE(v203.__r_.__value_.__r.__words[2]);
        else
          v108 = v203.__r_.__value_.__l.__size_;
        sub_223532E4C(v106, v107, v108, (unsigned int *)(a1 + 496), (uint64_t)"# valid plane fit", 17);
      }
    }
    kdebug_trace();
    if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v203.__r_.__value_.__l.__data_);
    if (*((char *)a3 + 23) >= 0)
      v109 = a3;
    else
      v109 = (uint64_t *)*a3;
    sub_22456D250("%s.PixelCount", (std::string *)__p, v109);
    *(_QWORD *)v210 = "cv3d.recon.";
    *(_QWORD *)&v210[8] = 11;
    v110 = v202;
    if ((v202 & 0x80u) == 0)
      v111 = __p;
    else
      v111 = (void **)__p[0];
    if ((v202 & 0x80u) != 0)
      v110 = (unint64_t)__p[1];
    *(_QWORD *)&v210[16] = v111;
    *(_QWORD *)&v210[24] = v110;
    sub_2231A9820((uint64_t)v210, (uint64_t)&v210[32], 0, 0, &v203);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v112 = sub_2241471F8();
      v113 = v112[2];
      if (!v113)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v113 = v112[2];
      }
      v114 = *(_QWORD *)(v113 + 64);
      v115 = (std::mutex *)(v114 + 32);
      std::mutex::lock((std::mutex *)(v114 + 32));
      v117 = *(_QWORD *)(v114 + 96);
      v116 = *(_QWORD *)(v114 + 104);
      std::mutex::unlock(v115);
      if (v117 != v116)
      {
        sub_2241471F8();
        v118 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v118 + 24))(v118))
        {
          memset(v210, 0, 32);
          *(_DWORD *)&v210[32] = 728325608;
          kdebug_trace();
          sub_2238C54D8((double *)&qword_255788F20, v118, (int *)(a1 + 500), "# specular");
          kdebug_trace();
        }
      }
    }
    memset(v210, 0, 32);
    *(_DWORD *)&v210[32] = 728325624;
    kdebug_trace();
    v119 = HIBYTE(v203.__r_.__value_.__r.__words[2]);
    if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v119 = v203.__r_.__value_.__l.__size_;
    if (v119 >= 0x11)
    {
      v120 = &v203;
      if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v120 = (std::string *)v203.__r_.__value_.__r.__words[0];
      v121 = v120->__r_.__value_.__r.__words[0];
      v122 = v120->__r_.__value_.__l.__size_;
      v123 = v120->__r_.__value_.__s.__data_[16];
      if (v121 == 0x6365722E64337663 && v122 == 0x73746174532E6E6FLL && v123 == 46)
      {
        v126 = sub_223187510();
        if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v127 = &v203;
        else
          v127 = (std::string *)v203.__r_.__value_.__r.__words[0];
        if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v128 = HIBYTE(v203.__r_.__value_.__r.__words[2]);
        else
          v128 = v203.__r_.__value_.__l.__size_;
        sub_223532E4C(v126, v127, v128, (unsigned int *)(a1 + 500), (uint64_t)"# specular", 10);
      }
    }
    kdebug_trace();
    if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v203.__r_.__value_.__l.__data_);
    *(_QWORD *)v210 = "cv3d.recon.";
    *(_QWORD *)&v210[8] = 11;
    v129 = v202;
    v130 = __p;
    if ((v202 & 0x80u) != 0)
    {
      v130 = (void **)__p[0];
      v129 = (unint64_t)__p[1];
    }
    *(_QWORD *)&v210[16] = v130;
    *(_QWORD *)&v210[24] = v129;
    sub_2231A9820((uint64_t)v210, (uint64_t)&v210[32], 0, 0, &v203);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v131 = sub_2241471F8();
      v132 = v131[2];
      if (!v132)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v132 = v131[2];
      }
      v133 = *(_QWORD *)(v132 + 64);
      v134 = (std::mutex *)(v133 + 32);
      std::mutex::lock((std::mutex *)(v133 + 32));
      v136 = *(_QWORD *)(v133 + 96);
      v135 = *(_QWORD *)(v133 + 104);
      std::mutex::unlock(v134);
      if (v136 != v135)
      {
        sub_2241471F8();
        v137 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v137 + 24))(v137))
        {
          memset(v210, 0, 32);
          *(_DWORD *)&v210[32] = 728325608;
          kdebug_trace();
          sub_223CCDA8C(v137, (int *)(a1 + 504), "# specular with valid plane fit");
          kdebug_trace();
        }
      }
    }
    memset(v210, 0, 32);
    *(_DWORD *)&v210[32] = 728325624;
    kdebug_trace();
    v138 = HIBYTE(v203.__r_.__value_.__r.__words[2]);
    if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v138 = v203.__r_.__value_.__l.__size_;
    if (v138 >= 0x11)
    {
      v139 = &v203;
      if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v139 = (std::string *)v203.__r_.__value_.__r.__words[0];
      v140 = v139->__r_.__value_.__r.__words[0];
      v141 = v139->__r_.__value_.__l.__size_;
      v142 = v139->__r_.__value_.__s.__data_[16];
      if (v140 == 0x6365722E64337663 && v141 == 0x73746174532E6E6FLL && v142 == 46)
      {
        v145 = sub_223187510();
        if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v146 = &v203;
        else
          v146 = (std::string *)v203.__r_.__value_.__r.__words[0];
        if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v147 = HIBYTE(v203.__r_.__value_.__r.__words[2]);
        else
          v147 = v203.__r_.__value_.__l.__size_;
        sub_223532E4C(v145, v146, v147, (unsigned int *)(a1 + 504), (uint64_t)"# specular with valid plane fit", 31);
      }
    }
    kdebug_trace();
    if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v203.__r_.__value_.__l.__data_);
    *(_QWORD *)v210 = "cv3d.recon.";
    *(_QWORD *)&v210[8] = 11;
    v148 = v202;
    v149 = __p;
    if ((v202 & 0x80u) != 0)
    {
      v149 = (void **)__p[0];
      v148 = (unint64_t)__p[1];
    }
    *(_QWORD *)&v210[16] = v149;
    *(_QWORD *)&v210[24] = v148;
    sub_2231A9820((uint64_t)v210, (uint64_t)&v210[32], 0, 0, &v209);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v150 = sub_2241471F8();
      v151 = v150[2];
      if (!v151)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v151 = v150[2];
      }
      v152 = *(_QWORD *)(v151 + 64);
      v153 = (std::mutex *)(v152 + 32);
      std::mutex::lock((std::mutex *)(v152 + 32));
      v155 = *(_QWORD *)(v152 + 96);
      v154 = *(_QWORD *)(v152 + 104);
      std::mutex::unlock(v153);
      if (v155 != v154)
      {
        sub_2241471F8();
        v156 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v156 + 24))(v156))
        {
          memset(v210, 0, 32);
          *(_DWORD *)&v210[32] = 728325608;
          kdebug_trace();
          LODWORD(v199) = *(_DWORD *)(a1 + 500) - *(_DWORD *)(a1 + 504);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v156 + 24))(v156))
          {
            v203.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
            *(_OWORD *)&v203.__r_.__value_.__r.__words[1] = xmmword_2245C6450;
            strcpy(v203.__r_.__value_.__l.__data_, "# specular with invalid plane fit");
            v197.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            v197.__r_.__value_.__l.__size_ = 2;
            v157 = sub_2241471F8();
            sub_2235352BC((uint64_t)v157, v156, (int *)&v199, (uint64_t)&v203, (__int128 *)&v197);
            if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v203.__r_.__value_.__l.__data_);
          }
          kdebug_trace();
        }
      }
    }
    memset(v210, 0, 32);
    *(_DWORD *)&v210[32] = 728325624;
    kdebug_trace();
    v158 = HIBYTE(v209.__r_.__value_.__r.__words[2]);
    if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v158 = v209.__r_.__value_.__l.__size_;
    if (v158 >= 0x11)
    {
      v159 = &v209;
      if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v159 = (std::string *)v209.__r_.__value_.__r.__words[0];
      v160 = v159->__r_.__value_.__r.__words[0];
      v161 = v159->__r_.__value_.__l.__size_;
      v162 = v159->__r_.__value_.__s.__data_[16];
      if (v160 == 0x6365722E64337663 && v161 == 0x73746174532E6E6FLL && v162 == 46)
      {
        v165 = sub_223187510();
        if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v166 = &v209;
        else
          v166 = (std::string *)v209.__r_.__value_.__r.__words[0];
        if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v167 = HIBYTE(v209.__r_.__value_.__r.__words[2]);
        else
          v167 = v209.__r_.__value_.__l.__size_;
        LODWORD(v203.__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 500) - *(_DWORD *)(a1 + 504);
        sub_223532E4C(v165, v166, v167, (unsigned int *)&v203, (uint64_t)"# specular with invalid plane fit", 33);
      }
    }
    kdebug_trace();
    if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v209.__r_.__value_.__l.__data_);
    *(_QWORD *)v210 = "cv3d.recon.";
    *(_QWORD *)&v210[8] = 11;
    v168 = v202;
    v169 = __p;
    if ((v202 & 0x80u) != 0)
    {
      v169 = (void **)__p[0];
      v168 = (unint64_t)__p[1];
    }
    *(_QWORD *)&v210[16] = v169;
    *(_QWORD *)&v210[24] = v168;
    sub_2231A9820((uint64_t)v210, (uint64_t)&v210[32], 0, 0, &v209);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v170 = sub_2241471F8();
      v171 = v170[2];
      if (!v171)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v171 = v170[2];
      }
      v172 = *(_QWORD *)(v171 + 64);
      v173 = (std::mutex *)(v172 + 32);
      std::mutex::lock((std::mutex *)(v172 + 32));
      v175 = *(_QWORD *)(v172 + 96);
      v174 = *(_QWORD *)(v172 + 104);
      std::mutex::unlock(v173);
      if (v175 != v174)
      {
        sub_2241471F8();
        v176 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v176 + 24))(v176))
        {
          memset(v210, 0, 32);
          *(_DWORD *)&v210[32] = 728325608;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v176 + 24))(v176))
          {
            v203.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
            *(_OWORD *)&v203.__r_.__value_.__r.__words[1] = xmmword_2245B8D70;
            strcpy(v203.__r_.__value_.__l.__data_, "# specular boundary pixels");
            v197.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            v197.__r_.__value_.__l.__size_ = 2;
            v177 = sub_2241471F8();
            sub_2235347B4((uint64_t)v177, v176, (int *)(a1 + 508), (uint64_t)&v203, (__int128 *)&v197);
            if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v203.__r_.__value_.__l.__data_);
          }
          kdebug_trace();
        }
      }
    }
    memset(v210, 0, 32);
    *(_DWORD *)&v210[32] = 728325624;
    kdebug_trace();
    v178 = HIBYTE(v209.__r_.__value_.__r.__words[2]);
    if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v178 = v209.__r_.__value_.__l.__size_;
    if (v178 >= 0x11)
    {
      v179 = &v209;
      if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v179 = (std::string *)v209.__r_.__value_.__r.__words[0];
      v180 = v179->__r_.__value_.__r.__words[0];
      v181 = v179->__r_.__value_.__l.__size_;
      v182 = v179->__r_.__value_.__s.__data_[16];
      if (v180 == 0x6365722E64337663 && v181 == 0x73746174532E6E6FLL && v182 == 46)
      {
        v185 = sub_223187510();
        if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v186 = &v209;
        else
          v186 = (std::string *)v209.__r_.__value_.__r.__words[0];
        if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v187 = HIBYTE(v209.__r_.__value_.__r.__words[2]);
        else
          v187 = v209.__r_.__value_.__l.__size_;
        sub_223532E4C(v185, v186, v187, (unsigned int *)(a1 + 508), (uint64_t)"# specular boundary pixels", 26);
      }
    }
    kdebug_trace();
    if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v209.__r_.__value_.__l.__data_);
      if (((char)v202 & 0x80000000) == 0)
      {
LABEL_298:
        if ((SBYTE7(v195) & 0x80000000) == 0)
          return;
LABEL_302:
        operator delete(v194[0]);
        return;
      }
    }
    else if (((char)v202 & 0x80000000) == 0)
    {
      goto LABEL_298;
    }
    operator delete(__p[0]);
    if ((SBYTE7(v195) & 0x80000000) == 0)
      return;
    goto LABEL_302;
  }
  operator delete(v197.__r_.__value_.__l.__data_);
  if (*((_BYTE *)a3 + 24))
    goto LABEL_60;
}

void sub_223CCD814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  sub_2231AA880(v41 - 192);
  sub_2241231D8((uint64_t)&a36);
  sub_223167354((uint64_t)&a27);
  sub_2241231D8(v41 - 216);
  sub_2231874DC((uint64_t)&a11);
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223CCDA8C(uint64_t a1, int *a2, const char *a3)
{
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  void *__dst[2];
  unint64_t v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v6 = strlen(a3);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v8 = (void **)operator new(v9 + 1);
      __dst[1] = v7;
      v14 = v10 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v14) = v6;
      v8 = __dst;
      if (!v6)
      {
LABEL_10:
        *((_BYTE *)v7 + (_QWORD)v8) = 0;
        *(_QWORD *)&v12 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
        *((_QWORD *)&v12 + 1) = 2;
        v11 = sub_2241471F8();
        sub_2235347B4((uint64_t)v11, a1, a2, (uint64_t)__dst, &v12);
        if (SHIBYTE(v14) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v8, a3, (size_t)v7);
    goto LABEL_10;
  }
}

void sub_223CCDBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223CCDBD4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = (std::__shared_weak_count *)a1[362];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[27] = &off_24EC20828;
    v5 = (std::__shared_weak_count *)a1[22];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[27] = &off_24EC20828;
    v5 = (std::__shared_weak_count *)a1[22];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[12];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[2];
      if (v11)
        goto LABEL_16;
      return a1;
    }
  }
  v11 = (std::__shared_weak_count *)a1[2];
  if (!v11)
    return a1;
LABEL_16:
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

uint64_t sub_223CCDD14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int16 v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int16 v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int16 v37;
  __int128 v38;
  __int128 v39;
  __int16 v40;
  __int128 v41;
  __int128 v42;
  __int16 v43;
  __int128 v44;

  *(_QWORD *)a1 = &off_24EC204C0;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_WORD *)(a2 + 72);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = *(_OWORD *)(a2 + 24);
    v11 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v11;
    *(_OWORD *)(a1 + 24) = v10;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_WORD *)(a1 + 72) = v8;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    *(_QWORD *)(a1 + 80) = &off_24EC204C0;
    v15 = *(_QWORD *)(a2 + 88);
    v16 = *(std::__shared_weak_count **)(a2 + 96);
    if (v16)
    {
LABEL_16:
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v19 = *(_WORD *)(a2 + 152);
      do
        v20 = __ldxr(v17);
      while (__stxr(v20 + 1, v17));
      v21 = *(_OWORD *)(a2 + 104);
      v22 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = v22;
      *(_OWORD *)(a1 + 104) = v21;
      do
        v23 = __ldxr(v17);
      while (__stxr(v23 + 1, v17));
      *(_QWORD *)(a1 + 88) = v15;
      *(_QWORD *)(a1 + 96) = v16;
      *(_WORD *)(a1 + 152) = v19;
      do
        v24 = __ldaxr(v17);
      while (__stlxr(v24 - 1, v17));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      do
        v25 = __ldaxr(v17);
      while (__stlxr(v25 - 1, v17));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      *(_QWORD *)(a1 + 160) = &off_24EC200A8;
      v26 = *(_QWORD *)(a2 + 168);
      v27 = *(std::__shared_weak_count **)(a2 + 176);
      if (v27)
        goto LABEL_30;
LABEL_46:
      v43 = *(_WORD *)(a2 + 208);
      *(_QWORD *)(a1 + 168) = v26;
      *(_QWORD *)(a1 + 176) = 0;
      v44 = *(_OWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = v44;
      *(_WORD *)(a1 + 208) = v43;
      return a1;
    }
  }
  else
  {
    v37 = *(_WORD *)(a2 + 72);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = 0;
    v38 = *(_OWORD *)(a2 + 24);
    v39 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v39;
    *(_OWORD *)(a1 + 24) = v38;
    *(_WORD *)(a1 + 72) = v37;
    *(_QWORD *)(a1 + 80) = &off_24EC204C0;
    v15 = *(_QWORD *)(a2 + 88);
    v16 = *(std::__shared_weak_count **)(a2 + 96);
    if (v16)
      goto LABEL_16;
  }
  v40 = *(_WORD *)(a2 + 152);
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = 0;
  v41 = *(_OWORD *)(a2 + 104);
  v42 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v42;
  *(_OWORD *)(a1 + 104) = v41;
  *(_WORD *)(a1 + 152) = v40;
  *(_QWORD *)(a1 + 160) = &off_24EC200A8;
  v26 = *(_QWORD *)(a2 + 168);
  v27 = *(std::__shared_weak_count **)(a2 + 176);
  if (!v27)
    goto LABEL_46;
LABEL_30:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldxr(v28);
  while (__stxr(v29 + 1, v28));
  v30 = *(_WORD *)(a2 + 208);
  do
    v31 = __ldxr(v28);
  while (__stxr(v31 + 1, v28));
  v32 = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v32;
  do
    v33 = __ldxr(v28);
  while (__stxr(v33 + 1, v28));
  *(_QWORD *)(a1 + 168) = v26;
  *(_QWORD *)(a1 + 176) = v27;
  *(_WORD *)(a1 + 208) = v30;
  do
    v34 = __ldaxr(v28);
  while (__stlxr(v34 - 1, v28));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  do
    v35 = __ldaxr(v28);
  while (__stlxr(v35 - 1, v28));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  return a1;
}

void sub_223CCE03C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_223CCE5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223CCE5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CCE5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL sub_223CCE640(uint64_t a1, int a2, int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v6 = *(_DWORD *)(a1 + 64);
  v7 = *(_DWORD *)(a1 + 68);
  v8 = *(_QWORD *)(a1 + 24);
  if (!v8
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| ((v9 = *(_QWORD *)(v8 + 2 * (v6 * a2 + v7 * a3)), v9 <= BYTE6(v9))? (v10 = HIBYTE(v9)): (v10 = BYTE1(v9)), (v11 = *(_DWORD *)(a1 + 144), v12 = *(_DWORD *)(a1 + 148), (v13 = *(_QWORD *)(a1 + 104)) == 0)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)))
  {
    abort();
  }
  v14 = *(_QWORD *)(v13 + 2 * (v11 * a2 + v12 * a3));
  if (v14 <= BYTE6(v14))
    BYTE1(v14) = HIBYTE(v14);
  v15 = BYTE1(v14);
  if (!*(_BYTE *)(a1 + 528))
  {
    if (v10 != 11)
    {
      if (v10 == 6)
        return v15 == 13;
      return 0;
    }
    return 1;
  }
  if (v10 - 7 < 2 || v10 == 11)
    return 1;
  if (v10 == 6)
  {
    if (v15 != 10)
      return v15 == 13;
    return 1;
  }
  return 0;
}

uint64_t sub_223CCE7C8(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  _BYTE **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int i;
  int v19;
  _BYTE *v20;

  v3 = *(_DWORD *)(a2 + 32);
  v2 = *(_DWORD *)(a2 + 36);
  if (v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = (_BYTE **)result;
    v7 = v2 - 1;
    v8 = *(unsigned int *)(a2 + 40);
    v9 = *(unsigned int *)(a2 + 44);
    v10 = *(_BYTE **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48))
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v12 + 88))(v12, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v10 = *(_BYTE **)(a2 + 24);
    }
    v17 = v3 - 1;
    if (v7)
    {
      if (v3 == 1)
      {
        do
        {
          *v10 = **v6;
          v10 += v9;
          --v7;
        }
        while (v7);
      }
      else
      {
        for (i = 0; i != v7; ++i)
        {
          v19 = v3 - 1;
          v20 = v10;
          do
          {
            *v20 = **v6;
            v20 += v8;
            --v19;
          }
          while (v19);
          *v20 = **v6;
          v10 += v9;
        }
      }
    }
    if (v3 != 1)
    {
      do
      {
        *v10 = **v6;
        v10 += v8;
        --v17;
      }
      while (v17);
    }
    *v10 = **v6;
  }
  return result;
}

void sub_223CCE924(unsigned __int16 **a1, unsigned __int16 *a2, _QWORD *a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _WORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _WORD *v31;

  v5 = *a2;
  v6 = a2[1];
  if (__PAIR64__(v6, v5) < __PAIR64__((*a1)[1], **a1))
    *(_DWORD *)*a1 = *(_DWORD *)a2;
  if (v6 && sub_223CCE640(*(_QWORD *)a1[1], v5, v6 - 1))
  {
    v7 = a3[2];
    v8 = a3[1];
    if (v7 == v8)
      v9 = 0;
    else
      v9 = ((v7 - v8) << 7) - 1;
    v10 = a3[5];
    v11 = v10 + a3[4];
    if (v9 == v11)
    {
      sub_223CCEBC4((uint64_t)a3);
      v10 = a3[5];
      v8 = a3[1];
      v11 = a3[4] + v10;
    }
    v12 = (_WORD *)(*(_QWORD *)(v8 + ((v11 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v11 & 0x3FF));
    *v12 = v5;
    v12[1] = v6 - 1;
    a3[5] = v10 + 1;
  }
  if (v5 && sub_223CCE640(*(_QWORD *)a1[1], v5 - 1, v6))
  {
    v13 = a3[2];
    v14 = a3[1];
    if (v13 == v14)
      v15 = 0;
    else
      v15 = ((v13 - v14) << 7) - 1;
    v16 = a3[5];
    v17 = v16 + a3[4];
    if (v15 == v17)
    {
      sub_223CCEBC4((uint64_t)a3);
      v16 = a3[5];
      v14 = a3[1];
      v17 = a3[4] + v16;
    }
    v18 = (_WORD *)(*(_QWORD *)(v14 + ((v17 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v17 & 0x3FF));
    *v18 = v5 - 1;
    v18[1] = v6;
    a3[5] = v16 + 1;
  }
  if (*(_DWORD *)a1[2] - 1 > v6 && sub_223CCE640(*(_QWORD *)a1[1], v5, v6 + 1))
  {
    v19 = a3[2];
    v20 = a3[1];
    if (v19 == v20)
      v21 = 0;
    else
      v21 = ((v19 - v20) << 7) - 1;
    v22 = a3[5];
    v23 = v22 + a3[4];
    if (v21 == v23)
    {
      sub_223CCEBC4((uint64_t)a3);
      v22 = a3[5];
      v20 = a3[1];
      v23 = a3[4] + v22;
    }
    v24 = (_WORD *)(*(_QWORD *)(v20 + ((v23 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v23 & 0x3FF));
    *v24 = v5;
    v24[1] = v6 + 1;
    a3[5] = v22 + 1;
  }
  if (*(_DWORD *)a1[3] - 1 > v5)
  {
    v25 = v5 + 1;
    if (sub_223CCE640(*(_QWORD *)a1[1], v25, v6))
    {
      v26 = a3[2];
      v27 = a3[1];
      if (v26 == v27)
        v28 = 0;
      else
        v28 = ((v26 - v27) << 7) - 1;
      v29 = a3[5];
      v30 = v29 + a3[4];
      if (v28 == v30)
      {
        sub_223CCEBC4((uint64_t)a3);
        v29 = a3[5];
        v27 = a3[1];
        v30 = a3[4] + v29;
      }
      v31 = (_WORD *)(*(_QWORD *)(v27 + ((v30 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v30 & 0x3FF));
      *v31 = v25;
      v31[1] = v6;
      a3[5] = v29 + 1;
    }
  }
}

void sub_223CCEBC4(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_223174E94();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0x1000uLL);
      sub_22323CCA0((char **)a1, &v89);
      return;
    }
    v89 = operator new(0x1000uLL);
    sub_22323CE2C((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_223174E94();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_223174E94();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_223CCF104(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223CCF120(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223CCF134(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223CCF14C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_223CCF164(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_2233FADDC(*(_QWORD **)(v2 + 88));
    sub_2233FADDC(*(_QWORD **)(v2 + 64));
    MEMORY[0x227684CE8](v2, 0x1070C403843F83FLL);
  }
  return a1;
}

uint64_t *sub_223CCF1B8(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_2233FADDC(*(_QWORD **)(v2 + 96));
    sub_2233FADDC(*(_QWORD **)(v2 + 72));
    MEMORY[0x227684CE8](v2, 0x1070C40DF2610E6);
  }
  return a1;
}

_QWORD *sub_223CCF20C(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t i;
  int v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v7 = sub_223CCDD14((uint64_t)a1, a2);
  *(_QWORD *)(v7 + 216) = &off_24EC20828;
  *(_QWORD *)(v7 + 224) = &off_24EC20868;
  *(_QWORD *)(v7 + 232) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(v7 + 240) = *(_QWORD *)(a3 + 24);
  *(_OWORD *)(v7 + 248) = *(_OWORD *)(a3 + 32);
  v8 = *(_OWORD *)(a3 + 48);
  v9 = *(_OWORD *)(a3 + 64);
  *(_DWORD *)(v7 + 296) = *(_DWORD *)(a3 + 80);
  *(_OWORD *)(v7 + 264) = v8;
  *(_OWORD *)(v7 + 280) = v9;
  *(_QWORD *)(v7 + 304) = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(v7 + 216) = &off_24EC207B8;
  v10 = *a4;
  v11 = a4[1];
  v12 = a4[3];
  *(_OWORD *)(v7 + 344) = a4[2];
  *(_OWORD *)(v7 + 360) = v12;
  *(_OWORD *)(v7 + 312) = v10;
  *(_OWORD *)(v7 + 328) = v11;
  v13 = 5489;
  *(_DWORD *)(v7 + 376) = 5489;
  v14 = 1;
  for (i = 95; i != 718; ++i)
  {
    v16 = 1812433253 * (v13 ^ (v13 >> 30));
    v13 = v16 + v14;
    *((_DWORD *)a1 + i) = i + v16 - 94;
    ++v14;
  }
  a1[359] = 0;
  v17 = (std::__shared_weak_count *)operator new(0x28uLL);
  v18 = v17;
  v17->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A710;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A760;
  LODWORD(v17[1].__shared_owners_) = 5489;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  a1[360] = &off_24EC7A6B0;
  a1[361] = v17 + 1;
  a1[362] = v17;
  do
    v21 = __ldxr(p_shared_owners);
  while (__stxr(v21 + 1, p_shared_owners));
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v18);
  }
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  return a1;
}

void sub_223CCF3C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[27] = v2;
  sub_223937214(v1);
  _Unwind_Resume(a1);
}

void sub_223CCF3DC(float32x2_t *a1@<X0>, int32x2_t **a2@<X1>, _BYTE *a3@<X8>, __n128 a4@<Q0>)
{
  int32x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  float32x2_t *v10;
  char *v11;
  int8x16_t v12;
  char *v13;
  unint64_t v14;
  __int32 v15;
  __int32 v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  int32x2_t *v25;
  float32x2_t v26;
  unsigned int v27;
  int32x2_t v28;
  float32x4_t v34;
  float32x4_t v35;
  int v36;
  float v37;
  const char *v38;
  unsigned int v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;
  unsigned int *v43;
  float32x2_t v44;
  int v45;
  _BYTE *v46;
  float32x2_t v47;
  float32x2_t v48;
  int32x2_t v49;
  float v50;
  float32x4_t v51;
  const float *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float v57;
  const char *v58;
  float v59;
  unint64_t v60;
  float v61;
  uint64_t v62;
  float v63;
  float v64;
  float32x2_t v65;
  float32x2_t *v66;
  float v67;
  float v68;
  char *v70;
  char *v71;
  int8x16_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  float v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _BYTE *v81;
  char *v82;
  int64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __n128 *v90;
  __n128 *v91;
  uint64_t v92;
  float32x2_t *v93;
  float32x2_t v94;
  float32x2_t v95;
  float v96;
  _BYTE *v98;
  int8x16_t v100;
  unint64_t v101;
  char *v102;
  int v103;
  float32x2_t *v104;
  uint64_t v105;
  int32x2_t *v106;
  uint64_t v107;
  int8x16_t v108;
  float32x2_t *v109;
  float32x2_t *v110;
  uint64_t v111;
  int v112;
  unint64_t v113;
  char v114;
  float v115;
  char v116;
  void *__p;
  _BYTE *v118;
  uint64_t v119;
  unsigned int v120;
  float v121;
  float32x2_t v122;
  __int32 v123;
  char v124;
  char *v125;
  char *v126;
  char *v127;
  float v128;

  LOBYTE(v113) = 0;
  v104 = a1 + 39;
  v114 = 0;
  LOBYTE(v115) = 0;
  v116 = 0;
  v111 = 0x3F80000000000002;
  v112 = 24;
  v6 = a2[1];
  v109 = 0;
  v110 = 0;
  v106 = *a2;
  v7 = (char *)v6 - (char *)*a2;
  if (v7)
  {
    if (v7 < 0)
      sub_22316E078();
    v8 = v7 >> 3;
    v9 = 12 * (v7 >> 3);
    v10 = (float32x2_t *)operator new(v9);
    v109 = v10;
    v110 = (float32x2_t *)((char *)v10 + v9);
    v11 = (char *)operator new(v9);
    v13 = v11;
    v14 = 0;
    a4.n128_u64[0] = (unint64_t)v104[6];
    a4.n128_u32[2] = v104[7].u32[0];
    v15 = a1[25].i32[0];
    v16 = a1[25].i32[1];
    v17 = a1[23];
    v18 = a1[31];
    v19 = a1[32];
    v20 = *v104;
    v21.i32[0] = v104[1].i32[0];
    v22 = v104[2];
    v23.i32[0] = v104[3].i32[0];
    v24 = v104[4];
    v25 = v106;
    v26.i32[0] = v104[5].i32[0];
    do
    {
      v27 = v15 * v25->i32[0] + v16 * v25->i32[1];
      v28 = *v25++;
      _H19 = *(_WORD *)(*(_QWORD *)&v17 + 2 * v27);
      *(float32x2_t *)v12.i8 = vadd_f32(v19, vmul_f32(v18, vcvt_f32_s32(v28)));
      v12.i32[2] = 1.0;
      __asm { FCVT            S19, H19 }
      v12 = (int8x16_t)vmulq_n_f32((float32x4_t)v12, _S19);
      *(float32x2_t *)v34.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v20, *(float *)v12.i32), v22, *(float32x2_t *)v12.i8, 1), v24, (float32x4_t)v12, 2);
      v10[1].i32[v14 / 4] = v12.i32[2];
      *(float32x2_t *)&v34.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v21, *(float32x2_t *)v12.i8), v23, *(float32x2_t *)v12.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL), v26);
      v35 = vaddq_f32(v34, (float32x4_t)a4);
      *(float32x2_t *)((char *)v10 + v14) = *(float32x2_t *)v12.i8;
      *(_DWORD *)&v11[v14 + 8] = v35.i32[2];
      *(_QWORD *)&v11[v14] = v35.i64[0];
      v14 += 12;
    }
    while (v25 != v6);
  }
  else
  {
    v8 = 0;
    v10 = 0;
    v13 = 0;
    v106 = a2[1];
  }
  LOBYTE(v121) = 0;
  v124 = 0;
  v126 = 0;
  v127 = 0;
  v125 = 0;
  v128 = 0.0;
  v120 = v8;
  if (v8 < 2)
    goto LABEL_68;
  v103 = 0;
  v36 = 0;
  v105 = (uint64_t)&a1[47];
  v98 = a3;
  v37 = 0.0;
  v38 = "";
  v101 = 0;
  v102 = v13;
  do
  {
    v39 = v120;
    if (v111 > v120)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 195, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)v38, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v39 = v120;
    }
    if (v39)
    {
      a4.n128_u32[0] = v111;
      if ((double)v39 * 0.5 >= (double)a4.n128_u64[0])
        sub_223CD005C(v105, &v120, (unsigned int *)&v111, (uint64_t)&__p);
      else
        sub_223CCFE58(v105, &v120, (unsigned int *)&v111, (int32x4_t **)&__p);
      v43 = (unsigned int *)__p;
      if ((_BYTE *)__p - v118 == -8)
        goto LABEL_20;
    }
    else
    {
      __p = 0;
      v118 = 0;
      v119 = 0;
      v43 = 0;
    }
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/ImageProcessing/src/DepthCorrection/DepthPlaneFitter.cpp", 92, (uint64_t)"Size(samples) == 2", 18, (uint64_t)v38, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
LABEL_20:
    a4.n128_u64[0] = *(_QWORD *)&v13[12 * *v43];
    v44 = vsub_f32(*(float32x2_t *)&v13[12 * v43[1]], (float32x2_t)a4.n128_u64[0]);
    *(float32x2_t *)v40.f32 = vmla_lane_f32(vmul_f32(v44, v44), (float32x2_t)vdup_lane_s32((int32x2_t)v44, 1), v44, 1);
    if (v40.f32[0] < 0.04)
    {
      v45 = 3;
      v46 = __p;
      if (!__p)
        goto LABEL_23;
LABEL_22:
      v118 = v46;
      operator delete(v46);
      goto LABEL_23;
    }
    v47.i32[0] = vdup_lane_s32((int32x2_t)v44, 1).u32[0];
    v47.f32[1] = -v44.f32[0];
    v40.f32[0] = sqrtf(v40.f32[0]);
    *(float32x2_t *)v40.f32 = vdiv_f32(v47, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.f32, 0));
    v48 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.f32, 1);
    v49 = (int32x2_t)vmla_lane_f32(vmul_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32), v48, *(float32x2_t *)v40.f32, 1);
    if (*(float *)v49.i32 == 1.0)
      goto LABEL_31;
    v50 = *(float *)v49.i32 + -1.0;
    if (*(float *)v49.i32 < 1.0)
      v50 = 1.0 - *(float *)v49.i32;
    if (v50 <= 0.000001)
    {
LABEL_31:
      v51 = v40;
    }
    else
    {
      *(float *)v49.i32 = sqrtf(*(float *)v49.i32);
      v51 = vdivq_f32(v40, (float32x4_t)vdupq_lane_s32(v49, 0));
    }
    v52 = (const float *)v104;
    *(float32x4x4_t *)(&v42 - 1) = vld4q_f32(v52);
    a4 = (__n128)vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v53, v51.f32[0]), v42, *(float32x2_t *)v51.f32, 1), v54, v51, 2), v55, -vmla_lane_f32(vmul_f32((float32x2_t)a4.n128_u64[0], *(float32x2_t *)v40.f32), v48, (float32x2_t)a4.n128_u64[0], 1).f32[0]);
    v56 = (float32x2_t)vextq_s8((int8x16_t)a4, (int8x16_t)a4, 8uLL).u64[0];
    *(float32x2_t *)v40.f32 = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a4.n128_u64[0], (float32x2_t)a4.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a4.n128_u64[0], 1), (float32x2_t)a4.n128_u64[0], 1), v56, v56);
    v41 = (int8x16_t)a4;
    if (v40.f32[0] != 1.0)
    {
      v57 = v40.f32[0] + -1.0;
      if (v40.f32[0] < 1.0)
        v57 = 1.0 - v40.f32[0];
      v41 = (int8x16_t)a4;
      if (v57 > 0.000001)
      {
        v40.f32[0] = sqrtf(v40.f32[0]);
        v40 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 0);
        v41 = (int8x16_t)vdivq_f32((float32x4_t)a4, v40);
      }
    }
    v58 = v38;
    v59 = a4.n128_f32[3];
    if (v106 != v6)
    {
      v60 = 0;
      v62 = 0;
      v63 = *((float *)&v111 + 1);
      v64 = *((float *)&v111 + 1) + 0.00001;
      v65 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1);
      v42.i64[0] = vextq_s8(v41, v41, 8uLL).u64[0];
      v61 = 0.0;
      v107 = v42.i64[0];
      v108 = v41;
      while (1)
      {
        v66 = (float32x2_t *)((char *)v10 + 12 * v62);
        v40.i32[0] = v66[1].i32[0];
        a4.n128_u64[0] = (unint64_t)*v66;
        v67 = vmla_f32(vmla_lane_f32(vmul_f32(*v66, *(float32x2_t *)v41.i8), v65, *v66, 1), *(float32x2_t *)v42.f32, *(float32x2_t *)v40.f32).f32[0];
        v68 = v64;
        if (v67 <= -0.00001)
        {
          a4.n128_u32[2] = v66[1].u32[0];
          v68 = vabds_f32(vmuls_lane_f32(v59 / (float)-v67, (float32x4_t)a4, 2), v40.f32[0]) / 0.1;
          if (v68 <= v63)
          {
LABEL_49:
            ++v60;
            a4.n128_f32[0] = expf(-v68);
            v42.i64[0] = v107;
            v41 = v108;
            v61 = v61 + a4.n128_f32[0];
          }
        }
        else if (v64 <= v63)
        {
          goto LABEL_49;
        }
        if (v8 == ++v62)
          goto LABEL_39;
      }
    }
    v60 = 0;
    v61 = 0.0;
LABEL_39:
    if (v61 <= v37)
    {
      v45 = 3;
      v38 = v58;
      v13 = v102;
      v46 = __p;
      if (__p)
        goto LABEL_22;
      goto LABEL_23;
    }
    v121 = v59;
    v123 = v41.i32[2];
    v122 = *(float32x2_t *)v41.i8;
    if (v103)
    {
      v128 = v61;
      if (!v114)
        goto LABEL_55;
    }
    else
    {
      v124 = 1;
      v128 = v61;
      if (!v114)
        goto LABEL_55;
    }
    if (v60 >= v113)
    {
      v45 = 2;
      goto LABEL_61;
    }
LABEL_55:
    if (v61 < v115 || v116 == 0)
      v45 = 0;
    else
      v45 = 2;
LABEL_61:
    v103 = 1;
    v100 = v41;
    v37 = v61;
    v101 = v60;
    v38 = v58;
    v13 = v102;
    v46 = __p;
    if (__p)
      goto LABEL_22;
LABEL_23:
    if (v45 != 3 && v45)
      break;
    ++v36;
  }
  while (v36 != 24);
  a3 = v98;
  if (!v103)
  {
LABEL_68:
    *a3 = 0;
    a3[16] = 0;
    goto LABEL_110;
  }
  __p = 0;
  v118 = 0;
  v119 = 0;
  if (v101)
  {
    if (v101 >> 61)
      sub_22367C394();
    v70 = (char *)operator new(8 * v101);
    v71 = &v70[8 * v101];
    v72 = v100;
    v125 = v70;
    v126 = v70;
    v127 = v71;
    if (v106 == v6)
      goto LABEL_67;
  }
  else
  {
    v71 = 0;
    v70 = 0;
    v72 = v100;
    v125 = 0;
    v126 = 0;
    v127 = 0;
    if (v106 == v6)
    {
LABEL_67:
      v73 = v70;
      goto LABEL_107;
    }
  }
  v74 = 0;
  v73 = v70;
  do
  {
    v76 = (char *)v109 + 12 * v74;
    v40.i32[0] = *((_DWORD *)v76 + 2);
    a4.n128_u64[0] = *(_QWORD *)v76;
    v41.i32[0] = v123;
    v77 = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a4.n128_u64[0], v122), (float32x2_t)vdup_lane_s32((int32x2_t)v122, 1), (float32x2_t)a4.n128_u64[0], 1), *(float32x2_t *)v41.i8, *(float32x2_t *)v40.f32).f32[0];
    if (v77 <= -0.00001)
    {
      a4.n128_u32[2] = *((_DWORD *)v76 + 2);
      if ((float)(vabds_f32(vmuls_lane_f32(v121 / (float)-v77, (float32x4_t)a4, 2), v40.f32[0]) / 0.1) <= *((float *)&v111 + 1))
      {
LABEL_78:
        if (v73 >= v71)
        {
          v78 = (v73 - v70) >> 3;
          v79 = v78 + 1;
          if ((unint64_t)(v78 + 1) >> 61)
            sub_22367C394();
          if ((v71 - v70) >> 2 > v79)
            v79 = (v71 - v70) >> 2;
          if ((unint64_t)(v71 - v70) >= 0x7FFFFFFFFFFFFFF8)
            v80 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v80 = v79;
          if (v80)
          {
            if (v80 >> 61)
              sub_223174E94();
            v81 = operator new(8 * v80);
            v82 = &v81[8 * v78];
            *(_QWORD *)v82 = v74;
            v75 = (uint64_t)(v82 + 8);
            v83 = v73 - v70;
            if (v73 == v70)
            {
LABEL_93:
              v71 = &v81[8 * v80];
              v125 = v82;
              v127 = v71;
              if (v70)
                operator delete(v70);
              v70 = v82;
              goto LABEL_72;
            }
          }
          else
          {
            v81 = 0;
            v82 = (char *)(8 * v78);
            *(_QWORD *)(8 * v78) = v74;
            v75 = 8 * v78 + 8;
            v83 = v73 - v70;
            if (v73 == v70)
              goto LABEL_93;
          }
          v84 = v83 - 8;
          if (v84 >= 0x168)
          {
            v87 = (v73 - 8 - v70) & 0xFFFFFFFFFFFFFFF8;
            if (&v81[v73 - v70 - 8 - v87] > &v81[v73 - v70 - 8])
            {
              v85 = v73;
            }
            else if (&v73[-v87 - 8] > v73 - 8)
            {
              v85 = v73;
            }
            else if ((unint64_t)(v70 - v81) >= 0x20)
            {
              v88 = (v84 >> 3) + 1;
              v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
              v85 = &v73[-v89];
              v82 -= v89;
              v90 = (__n128 *)&v81[8 * v78 - 16];
              v91 = (__n128 *)(v73 - 16);
              v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v40 = (float32x4_t)v91[-1];
                a4 = *v91;
                v90[-1] = (__n128)v40;
                *v90 = a4;
                v90 -= 2;
                v91 -= 2;
                v92 -= 4;
              }
              while (v92);
              if (v88 == (v88 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_93;
            }
            else
            {
              v85 = v73;
            }
          }
          else
          {
            v85 = v73;
          }
          do
          {
            v86 = *((_QWORD *)v85 - 1);
            v85 -= 8;
            *((_QWORD *)v82 - 1) = v86;
            v82 -= 8;
          }
          while (v85 != v70);
          goto LABEL_93;
        }
        *(_QWORD *)v73 = v74;
        v75 = (uint64_t)(v73 + 8);
LABEL_72:
        v126 = (char *)v75;
        v73 = (char *)v75;
      }
    }
    else if ((float)(*((float *)&v111 + 1) + 0.00001) <= *((float *)&v111 + 1))
    {
      goto LABEL_78;
    }
    ++v74;
  }
  while (v74 != v8);
  *(float32x2_t *)v72.i8 = v122;
  v72.i32[2] = v123;
LABEL_107:
  if ((float)((float)(unint64_t)(a2[1] - *a2) * 0.5) <= (float)(unint64_t)((v73 - v70) >> 3))
  {
    v93 = v109;
    if (v109 == v110)
    {
LABEL_124:
      *(float *)v98 = v121;
      *((_DWORD *)v98 + 3) = v72.i32[2];
      *(_QWORD *)(v98 + 4) = v72.i64[0];
      v98[16] = 1;
      if (!v70)
        goto LABEL_110;
    }
    else
    {
      v94 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v72.i8, 1);
      v95 = (float32x2_t)vextq_s8(v72, v72, 8uLL).u64[0];
      while (1)
      {
        v42.i32[0] = v93[1].i32[0];
        v96 = vmla_f32(vmla_lane_f32(vmul_f32(*v93, *(float32x2_t *)v72.i8), v94, *v93, 1), v95, *(float32x2_t *)v42.f32).f32[0];
        if (v96 > -0.00001)
          break;
        v41.i32[2] = v93[1].i32[0];
        *(float32x2_t *)v41.i8 = *v93;
        *(float *)v41.i32 = vmuls_lane_f32(v121 / (float)-v96, (float32x4_t)v41, 2);
        if (*(float *)v41.i32 < 0.0 || *(float *)v41.i32 > 10.0)
          break;
        v93 = (float32x2_t *)((char *)v93 + 12);
        if (v93 == v110)
          goto LABEL_124;
      }
      *v98 = 0;
      v98[16] = 0;
      if (!v70)
        goto LABEL_110;
    }
LABEL_109:
    operator delete(v70);
    goto LABEL_110;
  }
  *v98 = 0;
  v98[16] = 0;
  if (v70)
    goto LABEL_109;
LABEL_110:
  if (v13)
    operator delete(v13);
  if (v109)
    operator delete(v109);
}

void sub_223CCFDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void sub_223CCFE58(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, int32x4_t **a4@<X8>)
{
  unsigned int v7;
  size_t v9;
  int32x4_t *v10;
  int32x4_t *v11;
  uint64_t v12;
  int32x4_t *v13;
  unint64_t v14;
  int32x4_t v15;
  int32x4_t *v16;
  int32x4_t v17;
  int32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int32 v25;
  __int8 *v26;

  v7 = *a2;
  if (*a3 > *a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 225, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v7 = *a2;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (!v7)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_12;
  }
  v9 = 4 * v7;
  v10 = (int32x4_t *)operator new(v9);
  *a4 = v10;
  v11 = (int32x4_t *)((char *)v10 + v9);
  a4[2] = (int32x4_t *)((char *)v10 + v9);
  bzero(v10, v9);
  a4[1] = (int32x4_t *)((char *)v10 + v9);
  if (v9 - 4 < 0x1C)
  {
    LODWORD(v12) = 0;
    v13 = v10;
    do
    {
LABEL_11:
      v13->i32[0] = v12;
      v13 = (int32x4_t *)((char *)v13 + 4);
      LODWORD(v12) = v12 + 1;
    }
    while (v13 != v11);
    goto LABEL_12;
  }
  v14 = ((v9 - 4) >> 2) + 1;
  v12 = v14 & 0x7FFFFFFFFFFFFFF8;
  v13 = (int32x4_t *)((char *)v10 + 4 * (v14 & 0x7FFFFFFFFFFFFFF8));
  v15 = (int32x4_t)xmmword_2246499B0;
  v16 = v10 + 1;
  v17.i64[0] = 0x400000004;
  v17.i64[1] = 0x400000004;
  v18.i64[0] = 0x800000008;
  v18.i64[1] = 0x800000008;
  v19 = v14 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v16[-1] = v15;
    *v16 = vaddq_s32(v15, v17);
    v15 = vaddq_s32(v15, v18);
    v16 += 2;
    v19 -= 8;
  }
  while (v19);
  if (v14 != v12)
    goto LABEL_11;
LABEL_12:
  v20 = *a3;
  v21 = ((char *)v11 - (char *)v10) >> 2;
  if (v21 < v20
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Random/include/Essentials/Random/Shuffle.h", 119, (uint64_t)"0 <= k && k <= n", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if ((_DWORD)v20)
  {
    v22 = 0;
    v23 = v21 - 1;
    do
    {
      v24 = sub_223CD0678(a1, v22, v23);
      v25 = v10->i32[v22];
      v10->i32[v22] = v10->i32[v24];
      v10->i32[v24] = v25;
      ++v22;
    }
    while (v20 != v22);
  }
  v26 = &v10->i8[4 * *a3];
  if (v26 != (__int8 *)v11)
    a4[1] = (int32x4_t *)v26;
}

void sub_223CD003C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_223CD005C(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  uint64_t v13;
  char *v14;
  int v15;
  unint64_t v16;
  _QWORD *v17;
  uint8x8_t v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int32x4_t *v47;
  uint64_t v48;
  int32x4_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  unsigned int *v56;
  int64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int32x4_t *v62;
  int32x4_t *v63;
  int32x4_t *v64;
  uint64_t v65;
  int32x4_t v66;
  unsigned int v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  unint64_t v71;
  unint64_t *v72;
  std::__shared_weak_count *v73;
  int v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  void *v78[2];
  void *__p[2];
  int v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unsigned int v83;
  unsigned int v84;

  v8 = *a3;
  v9 = *a2;
  if (*a3 > *a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 236, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = *a2;
    v8 = *a3;
  }
  if (v9 == v8)
  {
    sub_223CD0CF0(a1, a2, a3, (int32x4_t **)a4);
    return;
  }
  v81 = a1;
  v10 = (std::__shared_weak_count *)operator new();
  v11 = v10;
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC55EE0;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  v82 = v10;
  v83 = 0;
  v84 = v9 - 1;
  v13 = *a3;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  if (!(_DWORD)v13)
    goto LABEL_70;
  v72 = (unint64_t *)&v10->__shared_owners_;
  v73 = v10;
  v14 = (char *)operator new(4 * v13);
  v15 = 0;
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v14;
  *(_QWORD *)(a4 + 16) = &v14[4 * v13];
  *(_OWORD *)v78 = 0u;
  *(_OWORD *)__p = 0u;
  v80 = 1065353216;
  v74 = v13;
  v75 = a4;
  do
  {
    v17 = v78[0];
    v16 = (unint64_t)v78[1];
    v18 = (uint8x8_t)vcnt_s8((int8x8_t)v78[1]);
    v18.i16[0] = vaddlv_u8(v18);
    v19 = LODWORD(v78[1]) - 1;
    v20 = (unint64_t)v78[1] - 1;
    v22 = v83;
    v21 = v84;
    v23 = *(_QWORD *)(a1 + 2496);
    v24 = v83;
LABEL_9:
    if (v21 == v24)
    {
      v24 = v21;
      v25 = v21;
      if (!v16)
        goto LABEL_43;
    }
    else
    {
      v26 = v21 - v24 + 1;
      if (v21 - v24 == -1)
      {
        v37 = 4 * v23;
        v38 = (v23 + 1) % 0x270;
        v39 = *(_DWORD *)(a1 + 4 * ((v23 + 397) % 0x270)) ^ ((*(_DWORD *)(a1 + 4 * v38) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v23) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v38) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(a1 + v37) = v39;
        *(_QWORD *)(a1 + 2496) = v38;
        v40 = ((v39 ^ (v39 >> 11)) << 7) & 0x9D2C5680 ^ v39 ^ (v39 >> 11);
        v25 = (v40 << 15) & 0xEFC60000 ^ v40 ^ (((v40 << 15) & 0xEFC60000 ^ v40) >> 18);
        v23 = v38;
        if (!v16)
          goto LABEL_43;
      }
      else
      {
        v27 = __clz(v26);
        v28 = 31;
        if (((v26 << v27) & 0x7FFFFFFF) != 0)
          v28 = 32;
        v29 = v28 - v27;
        v30 = v29 >> 5;
        if ((v29 & 0x1F) != 0)
          ++v30;
        if (v30 <= v29)
          v31 = 0xFFFFFFFF >> -(v29 / v30);
        else
          v31 = 0;
        do
        {
          v32 = 4 * v23;
          v33 = v23 + 397;
          v23 = (v23 + 1) % 0x270;
          v34 = *(_DWORD *)(a1 + 4 * (v33 % 0x270)) ^ ((*(_DWORD *)(a1 + 4 * v23) & 0x7FFFFFFE | *(_DWORD *)(a1 + v32) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v23) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(a1 + v32) = v34;
          v35 = ((v34 ^ (v34 >> 11)) << 7) & 0x9D2C5680 ^ v34 ^ (v34 >> 11);
          v36 = ((v35 << 15) & 0xEFC60000 ^ v35 ^ (((v35 << 15) & 0xEFC60000 ^ v35) >> 18)) & v31;
        }
        while (v36 >= v26);
        *(_QWORD *)(a1 + 2496) = v23;
        v25 = v36 + v22;
        v24 = v22;
        if (!v16)
          goto LABEL_43;
      }
    }
    if (v18.u32[0] > 1uLL)
    {
      v41 = v25;
      if (v16 <= v25)
        v41 = v25 % v16;
    }
    else
    {
      v41 = v19 & v25;
    }
    v42 = (uint64_t **)v17[v41];
    if (v42)
    {
      v43 = *v42;
      if (v43)
      {
        if (v18.u32[0] < 2uLL)
        {
          while (1)
          {
            v44 = v43[1];
            if (v44 == v25)
            {
              if (*((_DWORD *)v43 + 4) == v25)
                goto LABEL_9;
            }
            else if ((v44 & v20) != v41)
            {
              goto LABEL_43;
            }
            v43 = (uint64_t *)*v43;
            if (!v43)
              goto LABEL_43;
          }
        }
        do
        {
          v45 = v43[1];
          if (v45 == v25)
          {
            if (*((_DWORD *)v43 + 4) == v25)
              goto LABEL_9;
          }
          else
          {
            if (v45 >= v16)
              v45 %= v16;
            if (v45 != v41)
              break;
          }
          v43 = (uint64_t *)*v43;
        }
        while (v43);
      }
    }
LABEL_43:
    v76 = v15;
    v77 = v25;
    v47 = *(int32x4_t **)(a4 + 8);
    v46 = *(_QWORD *)(a4 + 16);
    if ((unint64_t)v47 < v46)
    {
      v47->i32[0] = v25;
      v48 = (uint64_t)v47->i64 + 4;
      goto LABEL_65;
    }
    v49 = *(int32x4_t **)a4;
    v50 = (uint64_t)v47->i64 - *(_QWORD *)a4;
    v51 = v50 >> 2;
    v52 = (v50 >> 2) + 1;
    if (v52 >> 62)
      sub_22316E078();
    v53 = v46 - (_QWORD)v49;
    if (v53 >> 1 > v52)
      v52 = v53 >> 1;
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
      v54 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v54 = v52;
    if (v54)
    {
      if (v54 >> 62)
        sub_223174E94();
      v55 = operator new(4 * v54);
      v56 = (unsigned int *)&v55[4 * v51];
      *v56 = v25;
      v48 = (uint64_t)(v56 + 1);
      v57 = (char *)v47 - (char *)v49;
      if (v47 == v49)
      {
LABEL_57:
        a4 = v75;
        goto LABEL_63;
      }
    }
    else
    {
      v55 = 0;
      v56 = (unsigned int *)(4 * v51);
      *(_DWORD *)(4 * v51) = v25;
      v48 = 4 * v51 + 4;
      v57 = (char *)v47 - (char *)v49;
      if (v47 == v49)
        goto LABEL_57;
    }
    v58 = v57 - 4;
    if (v58 < 0x2C)
    {
      a4 = v75;
      do
      {
LABEL_62:
        v67 = v47[-1].u32[3];
        v47 = (int32x4_t *)((char *)v47 - 4);
        *--v56 = v67;
      }
      while (v47 != v49);
      goto LABEL_63;
    }
    v59 = (char *)v47 - v55 - v50;
    a4 = v75;
    if (v59 < 0x20)
      goto LABEL_62;
    v60 = (v58 >> 2) + 1;
    v61 = 4 * (v60 & 0x7FFFFFFFFFFFFFF8);
    v62 = (int32x4_t *)((char *)v47 - v61);
    v56 = (unsigned int *)((char *)v56 - v61);
    v63 = (int32x4_t *)&v55[4 * v51 - 16];
    v64 = v47 - 1;
    v65 = v60 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v66 = *v64;
      v63[-1] = v64[-1];
      *v63 = v66;
      v63 -= 2;
      v64 -= 2;
      v65 -= 8;
    }
    while (v65);
    v47 = v62;
    if (v60 != (v60 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_62;
LABEL_63:
    *(_QWORD *)a4 = v56;
    *(_QWORD *)(a4 + 8) = v48;
    *(_QWORD *)(a4 + 16) = &v55[4 * v54];
    if (v49)
      operator delete(v49);
LABEL_65:
    *(_QWORD *)(a4 + 8) = v48;
    sub_223A1AA44((uint64_t)v78, &v77, &v77);
    v15 = v76 + 1;
    a4 = v75;
  }
  while (v76 + 1 != v74);
  v68 = __p[0];
  if (__p[0])
  {
    do
    {
      v69 = (_QWORD *)*v68;
      operator delete(v68);
      v68 = v69;
    }
    while (v69);
  }
  v70 = v78[0];
  v78[0] = 0;
  p_shared_owners = v72;
  v11 = v73;
  if (v70)
    operator delete(v70);
  do
LABEL_70:
    v71 = __ldaxr(p_shared_owners);
  while (__stlxr(v71 - 1, p_shared_owners));
  if (!v71)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_223CD060C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CD0620(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_223CD062C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_223CD0640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_22322E828((uint64_t)va);
  v8 = *(void **)a6;
  if (*(_QWORD *)a6)
  {
    *(_QWORD *)(a6 + 8) = v8;
    operator delete(v8);
  }
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_223CD0678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  uint64_t result;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD v12[2];

  v6 = (std::__shared_weak_count *)operator new();
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC633E0;
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  v11 = v6;
  v12[0] = a2;
  v12[1] = a3;
  result = sub_223CD081C((uint64_t)v12, a1, v12);
  v8 = result;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      return v8;
    }
  }
  return result;
}

void sub_223CD074C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223CD0760(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_223CD076C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_223CD0784(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223CD07AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32ELm624ELm39"
                     "7ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENS4_"
                     "24uniform_int_distributionIlEEEC1IJllEEERS7_DpT_EUlOT_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32"
                                "ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18"
                                "ELj1812433253EEEEENS4_24uniform_int_distributionIlEEEC1IJllEEERS7_DpT_EUlOT_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENS4_24uniform_int_distributionIlEEEC1IJllEEERS7_DpT_EUlOT_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENS4_24uniform_int_distributionIlEEEC1IJllEEERS7_DpT_EUlOT_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223CD081C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64x2_t v20;
  __int128 v21;
  uint64_t v22;

  result = a3[1];
  v4 = result - *a3;
  if (result != *a3)
  {
    v5 = v4 + 1;
    if (v4 == -1)
    {
      v18 = a2;
      v19 = xmmword_22466ECF0;
      v20 = vdupq_n_s64(2uLL);
      v21 = xmmword_22466EC90;
      v22 = -1;
      return sub_223CD09C0(&v18);
    }
    v7 = __clz(v5);
    v8 = 63;
    if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v8 = 64;
    v9 = v8 - v7;
    v18 = a2;
    *(_QWORD *)&v19 = v9;
    v10 = (v8 - v7) >> 5;
    if ((v9 & 0x1F) != 0)
      v11 = v10 + 1;
    else
      v11 = v10;
    v12 = v9 / v11;
    *((_QWORD *)&v19 + 1) = v12;
    v20.i64[0] = v11;
    v13 = (-1 << (v9 / v11)) & 0x100000000;
    if (v12 >= 0x40)
      v13 = 0;
    *(_QWORD *)&v21 = v13;
    if ((v13 ^ 0x100000000) > v13 / v11)
    {
      v12 = v9 / ++v11;
      *((_QWORD *)&v19 + 1) = v12;
      v20.i64[0] = v11;
      if (v12 > 0x3F)
      {
        v20.i64[1] = v11 - (v9 % v11);
        *(_QWORD *)&v21 = 0;
        LODWORD(v12) = 64;
        goto LABEL_22;
      }
      *(_QWORD *)&v21 = (-1 << (v9 / v11)) & 0x100000000;
    }
    v20.i64[1] = v11 - v9 % v11;
    if (v12 < 0x3F)
    {
      *((_QWORD *)&v21 + 1) = 0x80000000uLL >> v12 << (v12 + 1);
      v14 = 0xFFFFFFFF >> -(char)v12;
      if (!v12)
        v14 = 0;
      LODWORD(v22) = v14;
      if (v12 >= 0x1F)
        v15 = -1;
      else
        v15 = 0xFFFFFFFF >> ~(_BYTE)v12;
      goto LABEL_23;
    }
LABEL_22:
    *((_QWORD *)&v21 + 1) = 0;
    v16 = -(int)v12;
    v15 = -1;
    LODWORD(v22) = 0xFFFFFFFF >> v16;
LABEL_23:
    HIDWORD(v22) = v15;
    do
      v17 = sub_223CD09C0(&v18);
    while (v17 >= v5);
    return *a3 + v17;
  }
  return result;
}

uint64_t sub_223CD09C0(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t j;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t i;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;

  v1 = a1[4];
  if (v1)
  {
    v2 = *a1;
    v3 = a1[5];
    v4 = a1[2];
    v5 = *(_QWORD *)(*a1 + 2496);
    if (v4 >= 0x40)
    {
      for (i = 0; i != v1; ++i)
      {
        do
        {
          v16 = 4 * v5;
          v17 = v5 + 397;
          v5 = (v5 + 1) % 0x270;
          v18 = *(_DWORD *)(v2 + 4 * (v17 % 0x270)) ^ ((*(_DWORD *)(v2 + 4 * v5) & 0x7FFFFFFE | *(_DWORD *)(v2 + v16) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v5) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(v2 + v16) = v18;
          v19 = ((v18 ^ (v18 >> 11)) << 7) & 0x9D2C5680 ^ v18 ^ (v18 >> 11);
          v20 = (v19 << 15) & 0xEFC60000 ^ v19 ^ (((v19 << 15) & 0xEFC60000 ^ v19) >> 18);
        }
        while (v3 <= v20);
      }
      v6 = (_DWORD)a1[7] & v20;
    }
    else
    {
      v6 = 0;
      for (j = 0; j != v1; ++j)
      {
        do
        {
          v8 = 4 * v5;
          v9 = v5 + 397;
          v5 = (v5 + 1) % 0x270;
          v10 = *(_DWORD *)(v2 + 4 * (v9 % 0x270)) ^ ((*(_DWORD *)(v2 + 4 * v5) & 0x7FFFFFFE | *(_DWORD *)(v2 + v8) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v5) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(v2 + v8) = v10;
          v11 = ((v10 ^ (v10 >> 11)) << 7) & 0x9D2C5680 ^ v10 ^ (v10 >> 11);
          v12 = (v11 << 15) & 0xEFC60000 ^ v11 ^ (((v11 << 15) & 0xEFC60000 ^ v11) >> 18);
        }
        while (v3 <= v12);
        v6 = (v6 << v4) + ((_DWORD)a1[7] & v12);
      }
    }
    *(_QWORD *)(v2 + 2496) = v5;
    v13 = a1[3];
    if (v1 < v13)
      goto LABEL_14;
    return v6;
  }
  v6 = 0;
  v13 = a1[3];
  if (!v13)
    return v6;
LABEL_14:
  v21 = *a1;
  v22 = a1[6];
  v23 = a1[2];
  v24 = *(_QWORD *)(*a1 + 2496);
  if (v23 >= 0x3F)
  {
    do
    {
      do
      {
        v31 = 4 * v24;
        v32 = v24 + 397;
        v24 = (v24 + 1) % 0x270;
        v33 = *(_DWORD *)(v21 + 4 * (v32 % 0x270)) ^ ((*(_DWORD *)(v21 + 4 * v24) & 0x7FFFFFFE | *(_DWORD *)(v21 + v31) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v21 + 4 * v24) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(v21 + v31) = v33;
        v34 = ((v33 ^ (v33 >> 11)) << 7) & 0x9D2C5680 ^ v33 ^ (v33 >> 11);
        v35 = (v34 << 15) & 0xEFC60000 ^ v34 ^ (((v34 << 15) & 0xEFC60000 ^ v34) >> 18);
      }
      while (v22 <= v35);
      ++v1;
    }
    while (v1 != v13);
    v36 = *((_DWORD *)a1 + 15) & v35;
    *(_QWORD *)(v21 + 2496) = v24;
    return v36;
  }
  else
  {
    v25 = v23 + 1;
    do
    {
      do
      {
        v26 = 4 * v24;
        v27 = v24 + 397;
        v24 = (v24 + 1) % 0x270;
        v28 = *(_DWORD *)(v21 + 4 * (v27 % 0x270)) ^ ((*(_DWORD *)(v21 + 4 * v24) & 0x7FFFFFFE | *(_DWORD *)(v21 + v26) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v21 + 4 * v24) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(v21 + v26) = v28;
        v29 = ((v28 ^ (v28 >> 11)) << 7) & 0x9D2C5680 ^ v28 ^ (v28 >> 11);
        v30 = (v29 << 15) & 0xEFC60000 ^ v29 ^ (((v29 << 15) & 0xEFC60000 ^ v29) >> 18);
      }
      while (v22 <= v30);
      v6 = (v6 << v25) + (*((_DWORD *)a1 + 15) & v30);
      ++v1;
    }
    while (v1 != v13);
    *(_QWORD *)(v21 + 2496) = v24;
    return v6;
  }
}

void sub_223CD0CF0(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, int32x4_t **a4@<X8>)
{
  unsigned int v7;
  size_t v9;
  int32x4_t *v10;
  int32x4_t *v11;
  uint64_t v12;
  int32x4_t *v13;
  unint64_t v14;
  int32x4_t v15;
  int32x4_t *v16;
  int32x4_t v17;
  int32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x4_t *v21;
  uint64_t v22;
  __int32 v23;
  __int8 *v24;
  _QWORD v25[2];
  __int128 v26;

  v7 = *a2;
  if (*a3 > *a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 214, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v7 = *a2;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (!v7)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_12;
  }
  v9 = 4 * v7;
  v10 = (int32x4_t *)operator new(v9);
  *a4 = v10;
  v11 = (int32x4_t *)((char *)v10 + v9);
  a4[2] = (int32x4_t *)((char *)v10 + v9);
  bzero(v10, v9);
  a4[1] = (int32x4_t *)((char *)v10 + v9);
  if (v9 - 4 < 0x1C)
  {
    LODWORD(v12) = 0;
    v13 = v10;
    do
    {
LABEL_11:
      v13->i32[0] = v12;
      v13 = (int32x4_t *)((char *)v13 + 4);
      LODWORD(v12) = v12 + 1;
    }
    while (v13 != v11);
    goto LABEL_12;
  }
  v14 = ((v9 - 4) >> 2) + 1;
  v12 = v14 & 0x7FFFFFFFFFFFFFF8;
  v13 = (int32x4_t *)((char *)v10 + 4 * (v14 & 0x7FFFFFFFFFFFFFF8));
  v15 = (int32x4_t)xmmword_2246499B0;
  v16 = v10 + 1;
  v17.i64[0] = 0x400000004;
  v17.i64[1] = 0x400000004;
  v18.i64[0] = 0x800000008;
  v18.i64[1] = 0x800000008;
  v19 = v14 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v16[-1] = v15;
    *v16 = vaddq_s32(v15, v17);
    v15 = vaddq_s32(v15, v18);
    v16 += 2;
    v19 -= 8;
  }
  while (v19);
  if (v14 != v12)
    goto LABEL_11;
LABEL_12:
  if ((char *)v11 - (char *)v10 >= 5)
  {
    v26 = xmmword_22466ED00;
    if ((int32x4_t *)((char *)&v11[-1].u64[1] + 4) > v10)
    {
      v20 = ((unint64_t)((char *)v11 - (char *)v10) >> 2) - 1;
      v21 = v10;
      do
      {
        v25[0] = 0;
        v25[1] = v20;
        v22 = sub_223CD081C((uint64_t)&v26, a1, v25);
        if (v22)
        {
          v23 = v21->i32[0];
          v21->i32[0] = v21->i32[v22];
          v21->i32[v22] = v23;
        }
        v21 = (int32x4_t *)((char *)v21 + 4);
        --v20;
      }
      while (v21 < (int32x4_t *)((char *)&v11[-1].u64[1] + 4));
    }
  }
  v24 = &v10->i8[4 * *a3];
  if (v24 != (__int8 *)v11)
    a4[1] = (int32x4_t *)v24;
}

void sub_223CD0EC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_223CD0EDC(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  double v14;
  uint64_t *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int8 v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  const char **v44;
  const char *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  std::string __p;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  uint64_t (**v76)();
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  __int128 v80;
  __int16 v81;
  uint64_t (**v82)();
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t (**v85)();
  __int128 v86;
  _OWORD v87[2];
  mach_timebase_info info;
  uint64_t v89;
  std::__shared_weak_count *v90;
  const char *v91;
  uint64_t v92;
  _BYTE v93[25];
  char v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v4 = sub_2241471F8();
    v5 = v4[2];
    if (!v5)
    {
      v6 = v4;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v5 = v6[2];
    }
    v7 = *(_QWORD *)(v5 + 64);
    v8 = (std::mutex *)(v7 + 32);
    std::mutex::lock((std::mutex *)(v7 + 32));
    v10 = *(_QWORD *)(v7 + 96);
    v9 = *(_QWORD *)(v7 + 104);
    std::mutex::unlock(v8);
    if (v10 != v9)
    {
      v91 = "cv3d.recon.";
      v92 = 11;
      v11 = *((unsigned __int8 *)a2 + 23);
      if ((v11 & 0x80u) == 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      if ((v11 & 0x80u) != 0)
        v11 = a2[1];
      *(_QWORD *)v93 = v12;
      *(_QWORD *)&v93[8] = v11;
      sub_2231A9820((uint64_t)&v91, (uint64_t)&v93[16], 0, 0, &__p);
      sub_2241471F8();
      v13 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
      {
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
        {
          v14 = *(double *)&qword_255788F20;
          v15 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
          {
            if (*(_QWORD *)(a1 + 64) == *(_QWORD *)(a1 + 72))
            {
              v26 = atomic_load((unsigned __int8 *)&qword_2540CDF10);
              if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDF10))
              {
                qword_2540CDF18 = (uint64_t)&off_24EC24788;
                sub_2236B4564((_DWORD *)(a1 + 40), (void **)a1, qword_2540CDF20);
                __cxa_atexit((void (*)(void *))sub_2231F845C, &qword_2540CDF18, &dword_22314D000);
                __cxa_guard_release(&qword_2540CDF10);
              }
              v76 = &off_24EC21420;
              sub_2231F9830((uint64_t)&qword_2540CDF18, &v77);
            }
            else
            {
              v76 = &off_24EC21420;
              v16 = *(_QWORD *)(a1 + 16);
              v17 = *(std::__shared_weak_count **)(a1 + 24);
              if (v17)
              {
                p_shared_owners = (unint64_t *)&v17->__shared_owners_;
                do
                  v19 = __ldxr(p_shared_owners);
                while (__stxr(v19 + 1, p_shared_owners));
                v20 = *(_WORD *)(a1 + 56);
                do
                  v21 = __ldxr(p_shared_owners);
                while (__stxr(v21 + 1, p_shared_owners));
                v22 = *(_QWORD *)(a1 + 32);
                v80 = *(_OWORD *)(a1 + 40);
                do
                  v23 = __ldxr(p_shared_owners);
                while (__stxr(v23 + 1, p_shared_owners));
                v77 = v16;
                v78 = v17;
                v79 = v22;
                v81 = v20;
                do
                  v24 = __ldaxr(p_shared_owners);
                while (__stlxr(v24 - 1, p_shared_owners));
                if (!v24)
                {
                  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                  std::__shared_weak_count::__release_weak(v17);
                }
                do
                  v25 = __ldaxr(p_shared_owners);
                while (__stlxr(v25 - 1, p_shared_owners));
                if (!v25)
                {
                  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                  std::__shared_weak_count::__release_weak(v17);
                }
              }
              else
              {
                v27 = *(_WORD *)(a1 + 56);
                v28 = *(_QWORD *)(a1 + 32);
                v77 = *(_QWORD *)(a1 + 16);
                v78 = 0;
                v79 = v28;
                v80 = *(_OWORD *)(a1 + 40);
                v81 = v27;
              }
            }
            v74 = v72;
            v75 = v73;
            v72 = 0;
            v73 = 0;
            v29 = mach_continuous_time();
            v30 = atomic_load((unsigned __int8 *)&qword_255795560);
            if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
            {
              mach_timebase_info(&info);
              LODWORD(v69) = info.numer;
              LODWORD(v70) = info.denom;
              *(double *)&qword_255795558 = (double)v69 / (double)v70;
              __cxa_guard_release(&qword_255795560);
            }
            v91 = (const char *)llround(*(double *)&qword_255795558 * (double)v29);
            v92 = 2;
            strcpy(v93, "specular_regions");
            *(_DWORD *)&v93[17] = v74;
            *(_WORD *)&v93[21] = v75;
            *(_WORD *)&v93[23] = 272;
            v74 = 0;
            v75 = 0;
            v94 = 0;
            v95 = 0;
            v96 = (uint64_t)(v14 * 1000000000.0);
            v97 = 2;
            v98 = 1;
            v99 = 0;
            v100 = 0;
            v101 = 0;
            v102 = 0;
            v31 = operator new();
            info = (mach_timebase_info)&off_24EC1F958;
            sub_2231FA09C((uint64_t)&v76, (uint64_t)&v89);
            v85 = &off_24EC219D8;
            sub_2231F9F68((uint64_t)&info, (uint64_t)&v86);
            v32 = v90;
            if (v90)
            {
              v33 = (unint64_t *)&v90->__shared_owners_;
              do
                v34 = __ldaxr(v33);
              while (__stlxr(v34 - 1, v33));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
            *(_QWORD *)v31 = &off_24EC21AC8;
            *(_QWORD *)(v31 + 8) = &off_24EC219D8;
            v35 = v86;
            v86 = 0uLL;
            v36 = v87[0];
            *(_OWORD *)(v31 + 16) = v35;
            *(_OWORD *)(v31 + 32) = v36;
            *(_OWORD *)(v31 + 46) = *(_OWORD *)((char *)v87 + 14);
            sub_2231AB0FC(v31 + 64, (uint64_t)&v91);
            *(_QWORD *)v31 = &off_24EC21A48;
            v85 = &off_24EC219D8;
            v37 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
            if (*((_QWORD *)&v86 + 1))
            {
              v38 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
            *(_QWORD *)v31 = &off_24EC6A528;
            info = 0;
            v82 = &off_24EC6A3B8;
            v83 = v31;
            v40 = (std::__shared_weak_count *)operator new();
            v40->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6A4B0;
            v40->__shared_owners_ = 0;
            v40->__shared_weak_owners_ = 0;
            v40[1].__vftable = (std::__shared_weak_count_vtbl *)v31;
            v84 = v40;
            sub_2231AD66C((uint64_t)&v91);
            v41 = v78;
            if (v78)
            {
              v42 = (unint64_t *)&v78->__shared_owners_;
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            v44 = (const char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 56))(v13);
            v45 = *v44;
            v46 = (std::__shared_weak_count *)v44[1];
            if (v46)
            {
              v47 = (unint64_t *)&v46->__shared_owners_;
              do
                v48 = __ldxr(v47);
              while (__stxr(v48 + 1, v47));
            }
            v50 = v83;
            v49 = v84;
            info = (mach_timebase_info)&off_24EC6A3B8;
            v89 = v83;
            v90 = v84;
            v83 = 0;
            v84 = 0;
            v91 = v45;
            v92 = (uint64_t)v46;
            if (v46)
            {
              v51 = (unint64_t *)&v46->__shared_owners_;
              do
                v52 = __ldxr(v51);
              while (__stxr(v52 + 1, v51));
            }
            *(_QWORD *)v93 = &off_24EC6A3B8;
            *(_QWORD *)&v93[8] = v50;
            *(_QWORD *)&v93[16] = v49;
            if (v49)
            {
              v53 = (unint64_t *)&v49->__shared_owners_;
              do
                v54 = __ldxr(v53);
              while (__stxr(v54 + 1, v53));
            }
            (*(void (**)(uint64_t *, const char **))(*v15 + 16))(v15, &v91);
            v55 = *(std::__shared_weak_count **)&v93[16];
            if (*(_QWORD *)&v93[16])
            {
              v56 = (unint64_t *)(*(_QWORD *)&v93[16] + 8);
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            v58 = (std::__shared_weak_count *)v92;
            if (v92)
            {
              v59 = (unint64_t *)(v92 + 8);
              do
                v60 = __ldaxr(v59);
              while (__stlxr(v60 - 1, v59));
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
            }
            v61 = v90;
            if (v90)
            {
              v62 = (unint64_t *)&v90->__shared_owners_;
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
            if (v46)
            {
              v64 = (unint64_t *)&v46->__shared_owners_;
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
            v66 = v84;
            if (v84)
            {
              v67 = (unint64_t *)&v84->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_223CD16D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49)
{
  __cxa_guard_abort(&qword_2540CDF10);
  sub_2231874DC((uint64_t)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223CD18F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  int v9;
  int v10;
  int v11;
  BOOL v13;
  std::chrono::steady_clock::time_point v15;
  float32x4_t v16;
  std::chrono::steady_clock::time_point v17;
  std::chrono::steady_clock::time_point v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  double v29;
  int v30;
  void *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned __int16 v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v59;
  float32x2_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  float32x4_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  void **v73;
  void **v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void *v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  unsigned int v82;
  _WORD *v83;
  uint64_t *v84;
  _BYTE *v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  _BYTE *v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  _WORD *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  std::mutex *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v107;
  std::string::size_type v108;
  int v109;
  __n128 *v112;
  std::string *v113;
  size_t v114;
  std::chrono::steady_clock::time_point v115;
  uint64_t v116;
  _QWORD *v117;
  unsigned int v118;
  uint64_t **v119;
  unsigned int *v121;
  std::string __p;
  unsigned int *v123[7];
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  double v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;

  v7 = a2;
  v134 = *MEMORY[0x24BDAC8D0];
  v9 = *(_DWORD *)(a2 + 32);
  v126 = a4;
  v10 = *(_DWORD *)(a3 + 32);
  v11 = *(_DWORD *)(a3 + 36);
  v121 = (unsigned int *)(a2 + 32);
  _ZF = v10 == v9 && v11 == *(_DWORD *)(a2 + 36);
  if (!_ZF)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/ImageProcessing/src/FeatureAwareness.cpp", 38, (uint64_t)"Equal(plane_label_map.Size(), depth_map.Size())", 47, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_174;
    }
    v10 = *(_DWORD *)(a3 + 32);
    v11 = *(_DWORD *)(a3 + 36);
  }
  v13 = v10 == *(_DWORD *)(a1 + 56) && v11 == *(_DWORD *)(a1 + 60);
  if (!v13
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/ImageProcessing/src/FeatureAwareness.cpp", 39, (uint64_t)"Equal(plane_label_map.Size(), normal_map.Size())", 48, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| (*(_DWORD *)(v7 + 32) >= a4 ? (_CF = *(_DWORD *)(v7 + 36) >= a4) : (_CF = 0), !_CF&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/ImageProcessing/src/FeatureAwareness.cpp", 45, (uint64_t)"image_size[0] >= margin && image_size[1] >= margin", 50, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)))
  {
LABEL_174:
    abort();
  }
  v115.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  a5[1] = 0;
  a5[2] = 0;
  v117 = a5 + 1;
  *a5 = a5 + 1;
  v19 = *(_QWORD *)(a3 + 8);
  if (!v19)
    goto LABEL_61;
  v20 = *(std::__shared_weak_count **)(a3 + 16);
  if (!v20)
    goto LABEL_30;
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (v23)
  {
    v19 = *(_QWORD *)(a3 + 8);
    v24 = *(std::__shared_weak_count **)(a3 + 16);
    if (!v24)
      goto LABEL_30;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v19 = *(_QWORD *)(a3 + 8);
    v24 = *(std::__shared_weak_count **)(a3 + 16);
    if (!v24)
      goto LABEL_30;
  }
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldxr(v25);
  while (__stxr(v26 + 1, v25));
  do
    v27 = __ldaxr(v25);
  while (__stlxr(v27 - 1, v25));
  if (v27)
  {
LABEL_30:
    if (*(_BYTE *)(a3 + 49))
      goto LABEL_31;
    goto LABEL_61;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (*(_BYTE *)(a3 + 49))
  {
LABEL_31:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v19 + 96))(&v127, v19, 1);
    v119 = (uint64_t **)a5;
    if (*(_DWORD *)(a3 + 40) == 1)
      goto LABEL_32;
LABEL_62:
    *(_QWORD *)&v131 = &unk_22466EF40;
    if (*(_DWORD *)(a3 + 32) && *(_DWORD *)(a3 + 36))
      sub_223CD38A8((uint64_t)&v131, a3);
    goto LABEL_65;
  }
LABEL_61:
  v127 = 0;
  v119 = (uint64_t **)a5;
  if (*(_DWORD *)(a3 + 40) != 1)
    goto LABEL_62;
LABEL_32:
  v28 = *(_DWORD *)(a3 + 44);
  *(_QWORD *)&v29 = *(unsigned int *)(a3 + 32);
  if (v28 == LODWORD(v29))
  {
    v30 = *(_DWORD *)(a3 + 36);
    v31 = *(void **)(a3 + 24);
    if (*(_BYTE *)(a3 + 48) && v31)
    {
      v32 = *(_QWORD *)(a3 + 8);
      v33 = *(std::__shared_weak_count **)(a3 + 16);
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
        do
          v36 = __ldaxr(v34);
        while (__stlxr(v36 - 1, v34));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v32 + 88))(v32, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v31 = *(void **)(a3 + 24);
    }
    v37 = (v30 * v28);
    if (!(_DWORD)v37 || v31)
    {
      if (!(_DWORD)v37)
        goto LABEL_65;
    }
    else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    memset(v31, 255, 2 * v37);
  }
  else
  {
    LOBYTE(v125) = 0;
    v128 = v29;
    *(_QWORD *)&v131 = &v125;
    *((_QWORD *)&v131 + 1) = &v128;
    *(_QWORD *)&v132 = &unk_22466EF40;
    if (LODWORD(v29))
    {
      v38 = *(_DWORD *)(a3 + 36);
      if (v38)
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 0;
        HIDWORD(__p.__r_.__value_.__r.__words[0]) = LODWORD(v29) - 1;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = 1;
        HIDWORD(__p.__r_.__value_.__r.__words[1]) = v38 - 1;
        LODWORD(__p.__r_.__value_.__r.__words[2]) = v28;
        v39 = *(_QWORD *)(a3 + 24);
        if (*(_BYTE *)(a3 + 48) && v39)
        {
          v40 = *(_QWORD *)(a3 + 8);
          v41 = *(std::__shared_weak_count **)(a3 + 16);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
            do
              v44 = __ldaxr(v42);
            while (__stlxr(v44 - 1, v42));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v40 + 88))(v40, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          v39 = *(_QWORD *)(a3 + 24);
        }
        v129 = 0;
        v130 = 0;
        sub_223CD3698((uint64_t)&__p, (uint64_t)&v129, (uint64_t)&v131, v39);
      }
    }
  }
LABEL_65:
  v45 = v127;
  v127 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v129 = v7;
  v130 = a1;
  v46 = *(_DWORD *)(v7 + 36);
  v47 = v126;
  if (v126 < v46 - v126)
  {
    v48 = 0;
    v49 = *(_DWORD *)(v7 + 32);
    v118 = (float)((float)(v46 * v49) * 0.05);
    v50 = v126;
    v116 = v7;
    while (v47 >= v49 - v47)
    {
LABEL_70:
      v50 += 4;
      if (v50 >= v46 - v47)
        goto LABEL_143;
    }
    v51 = *(_QWORD *)(v7 + 24) + 2 * *(_DWORD *)(v7 + 44) * v50;
    v52 = *(_QWORD *)(a3 + 24) + 2 * *(_DWORD *)(a3 + 44) * v50;
    v53 = v47;
    while (1)
    {
      v54 = v53;
      _H0 = *(_WORD *)(v51 + 2 * v53);
      __asm { FCVT            S0, H0 }
      if (_S0 > -65504.0 && *(__int16 *)(v52 + 2 * v53) == -1)
        break;
LABEL_78:
      v53 = v54 + 4;
      if (v54 + 4 >= v49 - v47)
      {
        v7 = v116;
        v46 = *(_DWORD *)(v116 + 36);
        goto LABEL_70;
      }
    }
    v59 = *(_QWORD *)(a1 + 24) + 2 * (*(_DWORD *)(a1 + 64) * v53 + *(_DWORD *)(a1 + 68) * v50);
    _H0 = *(_WORD *)(v59 + 4);
    __asm { FCVT            S0, H0 }
    LODWORD(v15.__d_.__rep_) = *(_DWORD *)v59;
    v62 = (float32x2_t)vcvtq_f32_f16((float16x4_t)v15.__d_.__rep_).u64[0];
    __p.__r_.__value_.__l.__data_ = (std::string::pointer)v62;
    LODWORD(__p.__r_.__value_.__r.__words[1]) = _S0;
    v124 = 0;
    v125 = 1;
    v63 = (unsigned __int16)v53;
    v123[0] = &v126;
    v123[1] = (unsigned int *)&v129;
    v123[2] = (unsigned int *)&__p;
    v123[3] = v121;
    v123[4] = (unsigned int *)&v124;
    v123[5] = (unsigned int *)&v125;
    v123[6] = (unsigned int *)a1;
    LODWORD(v128) = (unsigned __int16)v53 | (v50 << 16);
    v64 = *(_DWORD *)(a3 + 40) * (unsigned __int16)v53 + *(_DWORD *)(a3 + 44) * (unsigned __int16)v50;
    v65 = *(_QWORD *)(a3 + 24);
    if (*(__int16 *)(v65 + 2 * v64) != -1)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageProcessing/include/Kit/ImageProcessing/FloodFill.h", 96, (uint64_t)"label_view(start_location[0], start_location[1]) == kFloodFillUnknownLabel<LabelType>", 85, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v65 = *(_QWORD *)(a3 + 24);
      v64 = *(_DWORD *)(a3 + 40) * v63 + *(_DWORD *)(a3 + 44) * (unsigned __int16)v50;
    }
    v132 = 0u;
    v133 = 0u;
    v131 = 0u;
    *(_WORD *)(v65 + 2 * v64) = v48;
    v66 = sub_223CD3A10(v123, (unsigned __int16 *)&v128, (uint64_t)&v131, (float32x4_t)0, v62, v16, *(double *)&v17.__d_.__rep_, (float32x2_t)v18.__d_.__rep_);
    v67 = *((_QWORD *)&v133 + 1);
    if (*((_QWORD *)&v133 + 1))
    {
      v68 = 1;
      do
      {
        while (1)
        {
          v71 = (((_QWORD)v132 - *((_QWORD *)&v131 + 1)) << 7) - 1;
          if ((_QWORD)v132 == *((_QWORD *)&v131 + 1))
            v71 = 0;
          v72 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v131 + 1)
                                      + (((unint64_t)(v133 + v67 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                          + 4 * ((v133 + v67 - 1) & 0x3FF));
          LODWORD(v127) = v72;
          *((_QWORD *)&v133 + 1) = v67 - 1;
          if ((unint64_t)(v71 - (v67 + v133) + 1) >= 0x800)
          {
            operator delete(*(void **)(v132 - 8));
            *(_QWORD *)&v132 = v132 - 8;
          }
          v69 = *(_DWORD *)(a3 + 40) * (unsigned __int16)v72 + *(_DWORD *)(a3 + 44) * HIWORD(v72);
          v70 = *(_QWORD *)(a3 + 24);
          if (*(__int16 *)(v70 + 2 * v69) == -1)
            break;
          v67 = *((_QWORD *)&v133 + 1);
          if (!*((_QWORD *)&v133 + 1))
            goto LABEL_93;
        }
        *(_WORD *)(v70 + 2 * v69) = v48;
        v66 = sub_223CD3A10(v123, (unsigned __int16 *)&v127, (uint64_t)&v131, v66, (float32x2_t)v15.__d_.__rep_, v16, *(double *)&v17.__d_.__rep_, (float32x2_t)v18.__d_.__rep_);
        ++v68;
        v67 = *((_QWORD *)&v133 + 1);
      }
      while (*((_QWORD *)&v133 + 1));
LABEL_93:
      v74 = (void **)*((_QWORD *)&v131 + 1);
      v73 = (void **)v132;
      *((_QWORD *)&v133 + 1) = 0;
      v75 = v132 - *((_QWORD *)&v131 + 1);
      if ((_QWORD)v132 - *((_QWORD *)&v131 + 1) < 0x11uLL)
      {
LABEL_95:
        v76 = v75 >> 3;
        if (v76 == 1)
        {
          v77 = 512;
        }
        else
        {
          if (v76 != 2)
            goto LABEL_102;
          v77 = 1024;
        }
        *(_QWORD *)&v133 = v77;
LABEL_102:
        if (v74 != v73)
        {
          do
          {
            v78 = *v74++;
            operator delete(v78);
          }
          while (v74 != v73);
          if ((_QWORD)v132 != *((_QWORD *)&v131 + 1))
            *(_QWORD *)&v132 = v132 + ((*((_QWORD *)&v131 + 1) - v132 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((_QWORD)v131)
          operator delete((void *)v131);
        if (v68 > v118)
        {
          v79 = v117;
          while (1)
          {
            v80 = *v79;
            v81 = v79;
            if (!*v79)
              break;
            while (1)
            {
              v79 = (_QWORD *)v80;
              v82 = *(unsigned __int16 *)(v80 + 26);
              if (v82 > v48)
                break;
              if (v82 >= v48)
                goto LABEL_77;
              v80 = v79[1];
              if (!v80)
              {
                v81 = v79 + 1;
                goto LABEL_115;
              }
            }
          }
LABEL_115:
          v83 = operator new(0x20uLL);
          v83[13] = v48;
          *(_QWORD *)v83 = 0;
          *((_QWORD *)v83 + 1) = 0;
          *((_QWORD *)v83 + 2) = v79;
          *v81 = v83;
          v84 = (uint64_t *)**v119;
          if (v84)
          {
            *v119 = v84;
            v83 = (_WORD *)*v81;
          }
          v85 = (_BYTE *)*v117;
          _ZF = v83 == (_WORD *)*v117;
          *((_BYTE *)v83 + 24) = _ZF;
          if (!_ZF)
          {
            do
            {
              v86 = *((_QWORD *)v83 + 2);
              if (*(_BYTE *)(v86 + 24))
                break;
              v87 = *(_BYTE **)(v86 + 16);
              v88 = *(_QWORD *)v87;
              if (*(_QWORD *)v87 == v86)
              {
                v91 = *((_QWORD *)v87 + 1);
                if (!v91 || (v92 = *(unsigned __int8 *)(v91 + 24), v89 = (_BYTE *)(v91 + 24), v92))
                {
                  if (*(_WORD **)v86 == v83)
                  {
                    *(_BYTE *)(v86 + 24) = 1;
                    v87[24] = 0;
                    v95 = *(_QWORD *)(v86 + 8);
                    *(_QWORD *)v87 = v95;
                    if (v95)
                      goto LABEL_132;
                  }
                  else
                  {
                    v93 = *(uint64_t **)(v86 + 8);
                    v94 = *v93;
                    *(_QWORD *)(v86 + 8) = *v93;
                    if (v94)
                    {
                      *(_QWORD *)(v94 + 16) = v86;
                      v87 = *(_BYTE **)(v86 + 16);
                    }
                    v93[2] = (uint64_t)v87;
                    *(_QWORD *)(*(_QWORD *)(v86 + 16) + 8 * (**(_QWORD **)(v86 + 16) != v86)) = v93;
                    *v93 = v86;
                    *(_QWORD *)(v86 + 16) = v93;
                    v87 = (_BYTE *)v93[2];
                    v86 = *(_QWORD *)v87;
                    *((_BYTE *)v93 + 24) = 1;
                    v87[24] = 0;
                    v95 = *(_QWORD *)(v86 + 8);
                    *(_QWORD *)v87 = v95;
                    if (v95)
LABEL_132:
                      *(_QWORD *)(v95 + 16) = v87;
                  }
                  *(_QWORD *)(v86 + 16) = *((_QWORD *)v87 + 2);
                  *(_QWORD *)(*((_QWORD *)v87 + 2) + 8 * (**((_QWORD **)v87 + 2) != (_QWORD)v87)) = v86;
                  *(_QWORD *)(v86 + 8) = v87;
LABEL_75:
                  *((_QWORD *)v87 + 2) = v86;
                  break;
                }
              }
              else if (!v88 || (v90 = *(unsigned __int8 *)(v88 + 24), v89 = (_BYTE *)(v88 + 24), v90))
              {
                if (*(_WORD **)v86 == v83)
                {
                  v97 = *((_QWORD *)v83 + 1);
                  *(_QWORD *)v86 = v97;
                  if (v97)
                  {
                    *(_QWORD *)(v97 + 16) = v86;
                    v87 = *(_BYTE **)(v86 + 16);
                  }
                  *((_QWORD *)v83 + 2) = v87;
                  *(_QWORD *)(*(_QWORD *)(v86 + 16) + 8 * (**(_QWORD **)(v86 + 16) != v86)) = v83;
                  *((_QWORD *)v83 + 1) = v86;
                  *(_QWORD *)(v86 + 16) = v83;
                  v87 = (_BYTE *)*((_QWORD *)v83 + 2);
                  *((_BYTE *)v83 + 24) = 1;
                  v87[24] = 0;
                  v86 = *((_QWORD *)v87 + 1);
                  v96 = *(_WORD **)v86;
                  *((_QWORD *)v87 + 1) = *(_QWORD *)v86;
                  if (!v96)
                    goto LABEL_74;
                }
                else
                {
                  *(_BYTE *)(v86 + 24) = 1;
                  v87[24] = 0;
                  v86 = *((_QWORD *)v87 + 1);
                  v96 = *(_WORD **)v86;
                  *((_QWORD *)v87 + 1) = *(_QWORD *)v86;
                  if (!v96)
                    goto LABEL_74;
                }
                *((_QWORD *)v96 + 2) = v87;
LABEL_74:
                *(_QWORD *)(v86 + 16) = *((_QWORD *)v87 + 2);
                *(_QWORD *)(*((_QWORD *)v87 + 2) + 8 * (**((_QWORD **)v87 + 2) != (_QWORD)v87)) = v86;
                *(_QWORD *)v86 = v87;
                goto LABEL_75;
              }
              *(_BYTE *)(v86 + 24) = 1;
              v83 = v87;
              v87[24] = v87 == v85;
              *v89 = 1;
            }
            while (v87 != v85);
          }
          v119[2] = (uint64_t *)((char *)v119[2] + 1);
        }
LABEL_77:
        ++v48;
        v49 = *v121;
        v47 = v126;
        goto LABEL_78;
      }
    }
    else
    {
      v68 = 1;
      v74 = (void **)*((_QWORD *)&v131 + 1);
      v73 = (void **)v132;
      *((_QWORD *)&v133 + 1) = 0;
      v75 = v132 - *((_QWORD *)&v131 + 1);
      if ((_QWORD)v132 - *((_QWORD *)&v131 + 1) < 0x11uLL)
        goto LABEL_95;
    }
    do
    {
      operator delete(*v74);
      v73 = (void **)v132;
      v74 = (void **)(*((_QWORD *)&v131 + 1) + 8);
      *((_QWORD *)&v131 + 1) = v74;
      v75 = v132 - (_QWORD)v74;
    }
    while ((_QWORD)v132 - (_QWORD)v74 > 0x10uLL);
    goto LABEL_95;
  }
LABEL_143:
  *(_QWORD *)&v131 = "cv3d.recon.";
  *((_QWORD *)&v131 + 1) = 11;
  *(_QWORD *)&v132 = "Volumetric.Preprocessing.Meshing_plane_extraction_time";
  *((_QWORD *)&v132 + 1) = 54;
  sub_2231A9820((uint64_t)&v131, (uint64_t)&v133, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v98 = sub_2241471F8();
    v99 = v98[2];
    if (!v99)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v99 = v98[2];
    }
    v100 = *(_QWORD *)(v99 + 64);
    v101 = (std::mutex *)(v100 + 32);
    std::mutex::lock((std::mutex *)(v100 + 32));
    v103 = *(_QWORD *)(v100 + 96);
    v102 = *(_QWORD *)(v100 + 104);
    std::mutex::unlock(v101);
    if (v103 != v102)
    {
      sub_2241471F8();
      v104 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v104 + 24))(v104))
      {
        v131 = 0u;
        v132 = 0u;
        LODWORD(v133) = 728325608;
        kdebug_trace();
        v128 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v115.__d_.__rep_) / 1000000.0;
        sub_223A56E64((double *)&qword_255788F20, v104, &v128, "Region grow (ms)");
        kdebug_trace();
      }
    }
  }
  v131 = 0u;
  v132 = 0u;
  LODWORD(v133) = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v107 = p_p->__r_.__value_.__r.__words[0];
    v108 = p_p->__r_.__value_.__l.__size_;
    v109 = p_p->__r_.__value_.__s.__data_[16];
    if (v107 == 0x6365722E64337663 && v108 == 0x73746174532E6E6FLL && v109 == 46)
    {
      v112 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v113 = &__p;
      else
        v113 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v114 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v114 = __p.__r_.__value_.__l.__size_;
      v128 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v115.__d_.__rep_) / 1000000.0;
      sub_2231AA374((uint64_t *)v112, v113, v114, (uint64_t *)&v128, (uint64_t)"Region grow (ms)", 16);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223CD25FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223CD26B8(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, float32x2_t **a6@<X8>, float32x4_t _Q0@<Q0>, float32x4_t a8@<Q1>, float32x4_t a9@<Q2>)
{
  float v9;
  float32x4_t v10;
  float32x4_t v11;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  unsigned __int16 *v48;
  unsigned __int16 *v49;
  char *v50;
  uint64_t **v51;
  unsigned int v55;
  unsigned int v56;
  _QWORD *v57;
  _QWORD **v58;
  _QWORD *v59;
  unsigned int v60;
  _WORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _BYTE *v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  char *v76;
  _BYTE *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float32x2_t *v89;
  _QWORD **v90;
  int v91;
  char *v92;
  char *v93;
  float32x4_t v94;
  char *v95;
  unint64_t v96;
  float32x4_t v97;
  __int32 v98;
  __int32 v99;
  float32x4_t v100;
  float32x4_t v101;
  __int32 v102;
  unsigned __int32 v103;
  int8x16_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  char *v110;
  char *v111;
  int v112;
  float32x4_t v113;
  char *v114;
  int v115;
  unsigned int v116;
  uint64_t **v117;
  uint64_t **v118;
  uint64_t *v119;
  unsigned int v120;
  uint64_t **v121;
  uint64_t **v122;
  uint64_t *v123;
  unsigned int v124;
  _WORD *v125;
  float32x2_t *v126;
  uint64_t *v127;
  unsigned int v128;
  _WORD *v129;
  float32x2_t *v130;
  uint64_t *v131;
  _QWORD *v132;
  _QWORD **v133;
  int8x16_t v134;
  float32x2_t *v135;
  float32x4_t *v136;
  unsigned int v137;
  uint64_t **v138;
  float32x4_t *v139;
  float32x4_t *v140;
  unsigned int v141;
  float32x4_t *v142;
  float32x2_t *v143;
  uint64_t *v144;
  uint64_t **v145;
  float32x4_t *v146;
  float32x4_t *v147;
  unsigned int v148;
  float32x4_t *v149;
  float32x2_t *v150;
  uint64_t *v151;
  float32x2_t *v152;
  int32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x2_t *v159;
  float32x2_t *v160;
  uint64_t v161;
  uint64_t v162;
  unsigned __int16 *v163;
  uint64_t v164;
  uint64_t v167;
  unsigned __int16 *v168;
  int v169;
  float32x2_t v170;
  unsigned __int16 *v171;
  float32x2_t v172;
  float32x4_t v173;
  float32x2_t **v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  _QWORD **v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD v182[5];
  __int32 v183;
  __int32 v184;
  __int32 v185;
  unsigned __int8 v186;
  unsigned __int16 v187;
  unsigned __int8 v188;
  float v189;
  uint64_t v190;
  char v191;
  _OWORD v192[2];
  unsigned __int32 v193;

  v16 = *(_DWORD *)(a1 + 32);
  if (v16 != *(_DWORD *)(a4 + 32) || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a4 + 36))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/ImageProcessing/src/FeatureAwareness.cpp", 192, (uint64_t)"depth_map.Size() == plane_label_map.Size()", 42, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_224;
    }
    v16 = *(_DWORD *)(a1 + 32);
  }
  if ((v16 != a2[11].i32[0] || *(_DWORD *)(a1 + 36) != a2[11].i32[1])
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/ImageProcessing/src/FeatureAwareness.cpp", 193, (uint64_t)"depth_map.Size() == camera.ImageSize()", 38, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_224:
    abort();
  }
  v180 = 0;
  v181 = 0;
  v179 = &v180;
  v17 = *(_QWORD *)(a1 + 8);
  v167 = a3;
  if (!v17)
    goto LABEL_25;
  v18 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v18)
    goto LABEL_21;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (v21)
  {
    v17 = *(_QWORD *)(a1 + 8);
    v22 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v22)
      goto LABEL_21;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    v17 = *(_QWORD *)(a1 + 8);
    v22 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v22)
      goto LABEL_21;
  }
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 - 1, v23));
  if (v25)
  {
LABEL_21:
    a3 = v167;
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_22;
LABEL_25:
    v182[0] = 0;
    v26 = *(_QWORD *)(a4 + 8);
    if (!v26)
      goto LABEL_42;
LABEL_26:
    v27 = *(std::__shared_weak_count **)(a4 + 16);
    if (!v27)
      goto LABEL_38;
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    do
      v30 = __ldaxr(v28);
    while (__stlxr(v30 - 1, v28));
    if (v30)
    {
      v26 = *(_QWORD *)(a4 + 8);
      v31 = *(std::__shared_weak_count **)(a4 + 16);
      if (!v31)
        goto LABEL_38;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      v26 = *(_QWORD *)(a4 + 8);
      v31 = *(std::__shared_weak_count **)(a4 + 16);
      if (!v31)
        goto LABEL_38;
    }
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    do
      v34 = __ldaxr(v32);
    while (__stlxr(v34 - 1, v32));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      a3 = v167;
      if (!*(_BYTE *)(a4 + 49))
        goto LABEL_42;
LABEL_39:
      (*(void (**)(_OWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v26 + 96))(v192, v26, 0);
      v161 = *(unsigned int *)(a1 + 32);
      v35 = *(unsigned __int16 **)(a1 + 24);
      if (*(_BYTE *)(a1 + 48))
        goto LABEL_43;
      goto LABEL_51;
    }
LABEL_38:
    a3 = v167;
    if (!*(_BYTE *)(a4 + 49))
      goto LABEL_42;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  a3 = v167;
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_25;
LABEL_22:
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v17 + 96))(v182, v17, 0);
  v26 = *(_QWORD *)(a4 + 8);
  if (v26)
    goto LABEL_26;
LABEL_42:
  *(_QWORD *)&v192[0] = 0;
  v161 = *(unsigned int *)(a1 + 32);
  v35 = *(unsigned __int16 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 48))
  {
LABEL_43:
    if (v35)
    {
      v36 = *(_QWORD *)(a1 + 8);
      v37 = *(std::__shared_weak_count **)(a1 + 16);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        do
          v40 = __ldaxr(v38);
        while (__stlxr(v40 - 1, v38));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v36 + 88))(v36, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      a3 = v167;
      v35 = *(unsigned __int16 **)(a1 + 24);
    }
  }
LABEL_51:
  if (*(_BYTE *)(a4 + 48) && *(_QWORD *)(a4 + 24))
  {
    v42 = *(_QWORD *)(a4 + 8);
    v41 = *(std::__shared_weak_count **)(a4 + 16);
    if (v41)
    {
      v43 = (unint64_t *)&v41->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
      do
        v45 = __ldaxr(v43);
      while (__stlxr(v45 - 1, v43));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v42 + 88))(v42, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
  }
  v164 = *(unsigned int *)(a1 + 44);
  v46 = *(_DWORD *)(a1 + 36) * v164;
  v174 = a6;
  if (!v46 || !v161 || !*(_QWORD *)(a3 + 8))
    goto LABEL_133;
  v169 = 0;
  v162 = *(unsigned int *)(a4 + 44);
  v168 = *(unsigned __int16 **)(a4 + 24);
  v171 = v35;
  v163 = &v35[v46];
LABEL_65:
  v47 = 0;
  _Q0.f32[0] = (float)v169;
  v48 = v171;
  v49 = v168;
  while (2)
  {
    v51 = *(uint64_t ***)(a3 + 8);
    if (!v51)
      goto LABEL_68;
    _Q0.i16[0] = *v48;
    __asm { FCVT            S0, H0 }
    v175 = _Q0;
    v55 = *v49;
    while (1)
    {
      v56 = *((unsigned __int16 *)v51 + 13);
      if (v56 <= v55)
        break;
LABEL_71:
      v51 = (uint64_t **)*v51;
      if (!v51)
        goto LABEL_68;
    }
    if (v56 < v55)
    {
      ++v51;
      goto LABEL_71;
    }
    _Q0.i32[0] = -947920896;
    a8.i32[3] = v175.i32[3];
    if (v175.f32[0] > -65504.0)
    {
      v57 = v180;
      v58 = &v180;
LABEL_78:
      v59 = v58;
      if (v57)
      {
        while (1)
        {
          v58 = (_QWORD **)v57;
          v60 = *((unsigned __int16 *)v57 + 16);
          if (v60 > v55)
          {
            v57 = *v58;
            goto LABEL_78;
          }
          if (v60 >= v55)
            break;
          v57 = v58[1];
          if (!v57)
          {
            v59 = v58 + 1;
            goto LABEL_83;
          }
        }
        v61 = v58;
      }
      else
      {
LABEL_83:
        v61 = operator new(0x40uLL);
        v61[16] = v55;
        *((_QWORD *)v61 + 6) = 0;
        *((_QWORD *)v61 + 7) = 0;
        *((_QWORD *)v61 + 5) = 0;
        *(_QWORD *)v61 = 0;
        *((_QWORD *)v61 + 1) = 0;
        *((_QWORD *)v61 + 2) = v58;
        *v59 = v61;
        v62 = v61;
        if (*v179)
        {
          v179 = (_QWORD **)*v179;
          v62 = (_QWORD *)*v59;
        }
        v63 = v180;
        _ZF = v62 == v180;
        *((_BYTE *)v62 + 24) = v62 == v180;
        if (!_ZF)
        {
          do
          {
            v64 = v62[2];
            if (*(_BYTE *)(v64 + 24))
              break;
            v65 = *(_QWORD **)(v64 + 16);
            v66 = *v65;
            if (*v65 == v64)
            {
              v69 = v65[1];
              if (!v69 || (v70 = *(unsigned __int8 *)(v69 + 24), v67 = (_BYTE *)(v69 + 24), v70))
              {
                if (*(_QWORD **)v64 == v62)
                {
                  *(_BYTE *)(v64 + 24) = 1;
                  *((_BYTE *)v65 + 24) = 0;
                  v73 = *(_QWORD *)(v64 + 8);
                  *v65 = v73;
                  if (v73)
                    goto LABEL_100;
                }
                else
                {
                  v71 = *(uint64_t **)(v64 + 8);
                  v72 = *v71;
                  *(_QWORD *)(v64 + 8) = *v71;
                  if (v72)
                  {
                    *(_QWORD *)(v72 + 16) = v64;
                    v65 = *(_QWORD **)(v64 + 16);
                  }
                  v71[2] = (uint64_t)v65;
                  *(_QWORD *)(*(_QWORD *)(v64 + 16) + 8 * (**(_QWORD **)(v64 + 16) != v64)) = v71;
                  *v71 = v64;
                  *(_QWORD *)(v64 + 16) = v71;
                  v65 = (_QWORD *)v71[2];
                  v64 = *v65;
                  *((_BYTE *)v71 + 24) = 1;
                  *((_BYTE *)v65 + 24) = 0;
                  v73 = *(_QWORD *)(v64 + 8);
                  *v65 = v73;
                  if (v73)
LABEL_100:
                    *(_QWORD *)(v73 + 16) = v65;
                }
                *(_QWORD *)(v64 + 16) = v65[2];
                *(_QWORD *)(v65[2] + 8 * (*(_QWORD *)v65[2] != (_QWORD)v65)) = v64;
                *(_QWORD *)(v64 + 8) = v65;
LABEL_107:
                v65[2] = v64;
                break;
              }
            }
            else if (!v66 || (v68 = *(unsigned __int8 *)(v66 + 24), v67 = (_BYTE *)(v66 + 24), v68))
            {
              if (*(_QWORD **)v64 == v62)
              {
                v86 = v62[1];
                *(_QWORD *)v64 = v86;
                if (v86)
                {
                  *(_QWORD *)(v86 + 16) = v64;
                  v65 = *(_QWORD **)(v64 + 16);
                }
                v62[2] = v65;
                *(_QWORD *)(*(_QWORD *)(v64 + 16) + 8 * (**(_QWORD **)(v64 + 16) != v64)) = v62;
                v62[1] = v64;
                *(_QWORD *)(v64 + 16) = v62;
                v65 = (_QWORD *)v62[2];
                *((_BYTE *)v62 + 24) = 1;
                *((_BYTE *)v65 + 24) = 0;
                v64 = v65[1];
                v74 = *(_QWORD **)v64;
                v65[1] = *(_QWORD *)v64;
                if (v74)
LABEL_105:
                  v74[2] = v65;
              }
              else
              {
                *(_BYTE *)(v64 + 24) = 1;
                *((_BYTE *)v65 + 24) = 0;
                v64 = v65[1];
                v74 = *(_QWORD **)v64;
                v65[1] = *(_QWORD *)v64;
                if (v74)
                  goto LABEL_105;
              }
              *(_QWORD *)(v64 + 16) = v65[2];
              *(_QWORD *)(v65[2] + 8 * (*(_QWORD *)v65[2] != (_QWORD)v65)) = v64;
              *(_QWORD *)v64 = v65;
              goto LABEL_107;
            }
            *(_BYTE *)(v64 + 24) = 1;
            v62 = v65;
            *((_BYTE *)v65 + 24) = v65 == v63;
            *v67 = 1;
          }
          while (v65 != v63);
        }
        ++v181;
        a6 = v174;
      }
      _Q0.f32[0] = (float)v47;
      _Q0.f32[1] = (float)v169;
      *(float32x2_t *)_Q0.f32 = vadd_f32(a2[5], vmul_f32(a2[4], *(float32x2_t *)_Q0.f32));
      _Q0.i32[2] = 1.0;
      a8.i32[3] = v175.i32[3];
      _Q0 = vmulq_n_f32(_Q0, v175.f32[0]);
      v76 = (char *)*((_QWORD *)v61 + 6);
      v75 = *((_QWORD *)v61 + 7);
      if ((unint64_t)v76 < v75)
      {
        *((_DWORD *)v76 + 2) = _Q0.i32[2];
        *(_QWORD *)v76 = _Q0.i64[0];
        v50 = v76 + 12;
        a3 = v167;
      }
      else
      {
        v77 = (_BYTE *)*((_QWORD *)v61 + 5);
        v78 = 0xAAAAAAAAAAAAAAABLL * ((v76 - v77) >> 2) + 1;
        if (v78 > 0x1555555555555555)
          sub_22316E078();
        v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - (_QWORD)v77) >> 2);
        if (2 * v79 > v78)
          v78 = 2 * v79;
        if (v79 >= 0xAAAAAAAAAAAAAAALL)
          v80 = 0x1555555555555555;
        else
          v80 = v78;
        if (v80)
        {
          v176 = _Q0;
          if (v80 > 0x1555555555555555)
            sub_223174E94();
          v81 = (char *)operator new(12 * v80);
          _Q0 = v176;
        }
        else
        {
          v81 = 0;
        }
        v82 = &v81[4 * ((v76 - v77) >> 2)];
        *(_QWORD *)v82 = _Q0.i64[0];
        *((_DWORD *)v82 + 2) = _Q0.i32[2];
        v83 = v82;
        if (v76 != v77)
        {
          do
          {
            v84 = *(_QWORD *)(v76 - 12);
            v76 -= 12;
            v85 = *((_DWORD *)v76 + 2);
            *(_QWORD *)(v83 - 12) = v84;
            v83 -= 12;
            *((_DWORD *)v83 + 2) = v85;
          }
          while (v76 != v77);
          v76 = (char *)*((_QWORD *)v61 + 5);
        }
        v50 = v82 + 12;
        *((_QWORD *)v61 + 5) = v83;
        *((_QWORD *)v61 + 6) = v82 + 12;
        *((_QWORD *)v61 + 7) = &v81[12 * v80];
        a3 = v167;
        if (v76)
          operator delete(v76);
        a6 = v174;
      }
      *((_QWORD *)v61 + 6) = v50;
    }
LABEL_68:
    ++v48;
    ++v49;
    ++v47;
    if (v48 != &v171[v161])
      continue;
    break;
  }
  while (&v171[v164] != v163)
  {
    v171 += v164;
    ++v169;
    v168 += v162;
    if (*(_QWORD *)(a3 + 8))
      goto LABEL_65;
  }
LABEL_133:
  v87 = *(_QWORD *)&v192[0];
  *(_QWORD *)&v192[0] = 0;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  v88 = v182[0];
  v182[0] = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  a6[1] = 0;
  v89 = (float32x2_t *)(a6 + 1);
  a6[2] = 0;
  *a6 = (float32x2_t *)(a6 + 1);
  v90 = v179;
  if (v179 != &v180)
  {
    v91 = 0;
    v170 = *(float32x2_t *)_Q0.f32;
    v172 = *(float32x2_t *)_Q0.f32;
    v173 = _Q0;
    while (1)
    {
      v92 = (char *)v90[5];
      v93 = (char *)v90[6];
      if (v92 == v93)
        goto LABEL_158;
      v94 = 0uLL;
      v95 = (char *)v90[5];
      do
      {
        a8.i64[0] = *(_QWORD *)v95;
        a8.i32[2] = *((_DWORD *)v95 + 2);
        v94 = vaddq_f32(v94, a8);
        v95 += 12;
      }
      while (v95 != v93);
      v96 = 0;
      a8.f32[0] = (float)(0xAAAAAAAAAAAAAAABLL * ((v93 - v92) >> 2));
      v100 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 0);
      v97 = vdivq_f32(v94, v100);
      v94.i32[0] = 0;
      v98 = 0;
      v99 = 0;
      v100.i32[0] = 0;
      v101.i32[0] = 0;
      v102 = 0;
      a9.i32[0] = 0;
      v103 = 0;
      v10.i32[0] = 0;
      do
      {
        v11.i64[0] = *(_QWORD *)v92;
        v11.i32[2] = *((_DWORD *)v92 + 2);
        v104 = (int8x16_t)vsubq_f32(v11, v97);
        *(float32x2_t *)v105.f32 = vmul_n_f32(*(float32x2_t *)v104.i8, *(float *)v104.i32);
        v106 = (float32x4_t)vextq_s8(v104, v104, 8uLL);
        *(float32x2_t *)&v105.u32[2] = vmul_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v104.i8);
        *(float32x2_t *)v107.f32 = vmul_lane_f32(*(float32x2_t *)v104.i8, *(float32x2_t *)v104.i8, 1);
        *(float32x2_t *)&v107.u32[2] = vmul_lane_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v104.i8, 1);
        *(float32x2_t *)v106.f32 = vmul_laneq_f32(*(float32x2_t *)v104.i8, (float32x4_t)v104, 2);
        v11 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32((float32x4_t)v104, (float32x4_t)v104), 2);
        v106.i32[2] = v11.i32[0];
        v94.i32[1] = v98;
        v94.i32[2] = v99;
        v100.i32[1] = v101.i32[0];
        v100.i32[2] = v102;
        a9.i32[1] = v103;
        a9.i32[2] = v10.i32[0];
        v94 = vaddq_f32(v94, v105);
        v100 = vaddq_f32(v100, v107);
        a9 = vaddq_f32(a9, v106);
        v102 = v100.i32[2];
        v101.i32[0] = v100.i32[1];
        v99 = v94.i32[2];
        v98 = v94.i32[1];
        v10.i32[0] = a9.i32[2];
        v103 = a9.u32[1];
        ++v96;
        v92 += 12;
      }
      while (v92 != v93);
      v97.f32[0] = (float)v96;
      v108 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v97.f32, 0);
      v101.i32[1] = v100.i32[2];
      v101.i64[1] = a9.i64[0];
      v94.i64[1] = __PAIR64__(v100.u32[0], v94.u32[2]);
      v191 = 0;
      v190 = 0x300000003;
      v192[0] = vdivq_f32(v94, v108);
      v192[1] = vdivq_f32(v101, v108);
      v193 = vdivq_f32(v10, v97).u32[0];
      sub_223CD406C((uint64_t)v182);
      if (v191)
      {
        v91 = v187 | (v188 << 16);
        v9 = v189;
        v109.i32[0] = v183;
        v173 = v109;
        v109.i32[0] = v184;
        v172 = *(float32x2_t *)v109.f32;
        v109.i32[0] = v185;
        v170 = *(float32x2_t *)v109.f32;
        v110 = (char *)v90[5];
        v111 = (char *)v90[6];
        if (v110 == v111)
          goto LABEL_158;
        v112 = v186;
      }
      else
      {
        v110 = (char *)v90[5];
        v111 = (char *)v90[6];
        if (v110 == v111)
          goto LABEL_158;
        v112 = 0;
      }
      v113 = 0uLL;
      v114 = v110;
      do
      {
        v177 = v113;
        v113.i64[0] = *(_QWORD *)v114;
        v113.i32[2] = *((_DWORD *)v114 + 2);
        a8 = vaddq_f32(v177, v113);
        v178 = a8;
        v113 = a8;
        v114 += 12;
      }
      while (v114 != v111);
      if (!v191
        || (v115 = v112 | (v91 << 8), *(float *)&v115 == 0.0)
        || fabsf(*(float *)&v115) <= 0.000001
        || (float)(v9 / *(float *)&v115) < 0.01)
      {
LABEL_158:
        v120 = *((unsigned __int16 *)v90 + 16);
        v121 = (uint64_t **)v89;
        v122 = (uint64_t **)v89;
        if (*v89)
        {
          v123 = (uint64_t *)*v89;
          while (1)
          {
            while (1)
            {
              v122 = (uint64_t **)v123;
              v124 = *((unsigned __int16 *)v123 + 14);
              if (v120 >= v124)
                break;
              v123 = *v122;
              v121 = v122;
              if (!*v122)
                goto LABEL_165;
            }
            if (v124 >= v120)
              break;
            v123 = v122[1];
            if (!v123)
            {
              v121 = v122 + 1;
              goto LABEL_165;
            }
          }
          v125 = v122;
        }
        else
        {
LABEL_165:
          v125 = operator new(0x30uLL);
          v125[14] = v120;
          *(_QWORD *)v125 = 0;
          *((_QWORD *)v125 + 1) = 0;
          *((_QWORD *)v125 + 2) = v122;
          *v121 = (uint64_t *)v125;
          v126 = (float32x2_t *)**a6;
          v127 = (uint64_t *)v125;
          if (v126)
          {
            *a6 = v126;
            v127 = *v121;
          }
          sub_2231A9A8C((uint64_t *)a6[1], v127);
          a6[2] = (float32x2_t *)((char *)a6[2] + 1);
        }
        *((_QWORD *)v125 + 4) = 0;
        *((_QWORD *)v125 + 5) = 0;
        goto LABEL_178;
      }
      v116 = *((unsigned __int16 *)v90 + 16);
      v117 = (uint64_t **)v89;
      v118 = (uint64_t **)v89;
      if (*v89)
      {
        v119 = (uint64_t *)*v89;
        while (1)
        {
          while (1)
          {
            v118 = (uint64_t **)v119;
            v128 = *((unsigned __int16 *)v119 + 14);
            if (v116 >= v128)
              break;
            v119 = *v118;
            v117 = v118;
            if (!*v118)
              goto LABEL_173;
          }
          if (v128 >= v116)
            break;
          v119 = v118[1];
          if (!v119)
          {
            v117 = v118 + 1;
            goto LABEL_173;
          }
        }
        v129 = v118;
        a6 = v174;
      }
      else
      {
LABEL_173:
        v129 = operator new(0x30uLL);
        v129[14] = v116;
        *(_QWORD *)v129 = 0;
        *((_QWORD *)v129 + 1) = 0;
        *((_QWORD *)v129 + 2) = v118;
        *v117 = (uint64_t *)v129;
        a6 = v174;
        v130 = (float32x2_t *)**v174;
        v131 = (uint64_t *)v129;
        if (v130)
        {
          *v174 = v130;
          v131 = *v117;
        }
        sub_2231A9A8C((uint64_t *)v174[1], v131);
        v174[2] = (float32x2_t *)((char *)v174[2] + 1);
      }
      v113.f32[0] = (float)(0xAAAAAAAAAAAAAAABLL * ((v111 - v110) >> 2));
      a8.i32[3] = v178.i32[3];
      v134 = (int8x16_t)vdivq_f32(v178, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v113.f32, 0));
      a9.i32[3] = v173.i32[3];
      *(float32x2_t *)a8.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v173.f32, *(float32x2_t *)v134.i8), v172, *(float32x2_t *)v134.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v134, v134, 8uLL), v170);
      *((_DWORD *)v129 + 8) = v173.i32[0];
      *((_DWORD *)v129 + 9) = v172.i32[0];
      *((_DWORD *)v129 + 10) = v170.i32[0];
      *((float *)v129 + 11) = -a8.f32[0];
      v135 = (float32x2_t *)v90[5];
      a8.i32[0] = v135[1].i32[0];
      if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v173.f32, *v135), v172, *v135, 1), *(float32x2_t *)a8.f32, v170).f32[0] > 0.0)break;
LABEL_178:
      v132 = v90[1];
      if (v132)
      {
        do
        {
          v133 = (_QWORD **)v132;
          v132 = (_QWORD *)*v132;
        }
        while (v132);
      }
      else
      {
        do
        {
          v133 = (_QWORD **)v90[2];
          _ZF = *v133 == v90;
          v90 = v133;
        }
        while (!_ZF);
      }
      v90 = v133;
      if (v133 == &v180)
      {
        v152 = *a6;
        if (*(_BYTE *)(a5 + 64))
          _ZF = v152 == v89;
        else
          _ZF = 1;
        if (!_ZF)
        {
          do
          {
            v154 = *(int32x4_t *)(a5 + 16);
            v155.i64[0] = vzip1q_s32(*(int32x4_t *)a5, v154).u64[0];
            v155.i32[2] = *(_OWORD *)(a5 + 32);
            v155.i32[3] = *(_OWORD *)(a5 + 48);
            v156.i64[0] = vtrn2q_s32(*(int32x4_t *)a5, v154).u64[0];
            v156.i32[2] = HIDWORD(*(_QWORD *)(a5 + 32));
            v156.i32[3] = HIDWORD(*(_QWORD *)(a5 + 48));
            v157.i64[0] = vzip2q_s32(*(int32x4_t *)a5, v154).u64[0];
            v157.i32[2] = *(_QWORD *)(a5 + 40);
            v157.i32[3] = *(_QWORD *)(a5 + 56);
            v158.i64[0] = vuzp2q_s32(vuzp2q_s32(*(int32x4_t *)a5, v154), *(int32x4_t *)a5).u64[0];
            v158.i32[2] = HIDWORD(*(_OWORD *)(a5 + 32));
            v158.i32[3] = HIDWORD(*(_OWORD *)(a5 + 48));
            *(float32x4_t *)v152[4].f32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v155, COERCE_FLOAT(*(_OWORD *)v152[4].f32)), v156, v152[4], 1), v157, *(float32x4_t *)v152[4].f32, 2), v158, *(float32x4_t *)v152[4].f32, 3);
            v159 = (float32x2_t *)v152[1];
            if (v159)
            {
              do
              {
                v160 = v159;
                v159 = (float32x2_t *)*v159;
              }
              while (v159);
            }
            else
            {
              do
              {
                v160 = (float32x2_t *)v152[2];
                _ZF = *v160 == (_QWORD)v152;
                v152 = v160;
              }
              while (!_ZF);
            }
            v152 = v160;
          }
          while (v160 != v89);
        }
        goto LABEL_214;
      }
    }
    v136 = (float32x4_t *)*v89;
    v137 = *((unsigned __int16 *)v90 + 16);
    v138 = (uint64_t **)v89;
    v139 = (float32x4_t *)v89;
    if (*v89)
    {
      v140 = (float32x4_t *)*v89;
      while (1)
      {
        while (1)
        {
          v139 = v140;
          v141 = v140[1].u16[6];
          if (v137 >= v141)
            break;
          v140 = (float32x4_t *)v139->i64[0];
          v138 = (uint64_t **)v139;
          if (!v139->i64[0])
            goto LABEL_193;
        }
        if (v141 >= v137)
          break;
        v140 = (float32x4_t *)v139->i64[1];
        if (!v140)
        {
          v138 = (uint64_t **)&v139->i64[1];
          goto LABEL_193;
        }
      }
      v142 = v139;
      v145 = (uint64_t **)v89;
      v146 = (float32x4_t *)v89;
      if (v136)
        goto LABEL_198;
    }
    else
    {
LABEL_193:
      v142 = (float32x4_t *)operator new(0x30uLL);
      v142[1].i16[6] = v137;
      v142->i64[0] = 0;
      v142->i64[1] = 0;
      v142[1].i64[0] = (uint64_t)v139;
      *v138 = (uint64_t *)v142;
      v143 = (float32x2_t *)**a6;
      v144 = (uint64_t *)v142;
      if (v143)
      {
        *a6 = v143;
        v144 = *v138;
      }
      sub_2231A9A8C((uint64_t *)a6[1], v144);
      v136 = (float32x4_t *)a6[1];
      a6[2] = (float32x2_t *)((char *)a6[2] + 1);
      v137 = *((unsigned __int16 *)v90 + 16);
      v145 = (uint64_t **)v89;
      v146 = (float32x4_t *)v89;
      if (v136)
      {
LABEL_198:
        v147 = v136;
        while (1)
        {
          while (1)
          {
            v146 = v147;
            v148 = v147[1].u16[6];
            if (v137 >= v148)
              break;
            v147 = (float32x4_t *)v146->i64[0];
            v145 = (uint64_t **)v146;
            if (!v146->i64[0])
              goto LABEL_204;
          }
          if (v148 >= v137)
            break;
          v147 = (float32x4_t *)v146->i64[1];
          if (!v147)
          {
            v145 = (uint64_t **)&v146->i64[1];
            goto LABEL_204;
          }
        }
        v149 = v146;
        goto LABEL_208;
      }
    }
LABEL_204:
    v149 = (float32x4_t *)operator new(0x30uLL);
    v149[1].i16[6] = v137;
    v149->i64[0] = 0;
    v149->i64[1] = 0;
    v149[1].i64[0] = (uint64_t)v146;
    *v145 = (uint64_t *)v149;
    v150 = (float32x2_t *)**a6;
    v151 = (uint64_t *)v149;
    if (v150)
    {
      *a6 = v150;
      v151 = *v145;
    }
    sub_2231A9A8C((uint64_t *)a6[1], v151);
    a6[2] = (float32x2_t *)((char *)a6[2] + 1);
LABEL_208:
    v149[2] = vnegq_f32(v142[2]);
    goto LABEL_178;
  }
LABEL_214:
  sub_22388A7C4(v180);
}

void sub_223CD35D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,_QWORD *a29,uint64_t a30,uint64_t a31)
{
  if (!a31)
  {
    sub_22388A7C4(a29);
    _Unwind_Resume(a1);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a31 + 8))(a31);
  sub_22388A7C4(a29);
  _Unwind_Resume(a1);
}

uint64_t sub_223CD3698(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  unsigned int i;
  const __int16 *v10;
  uint64_t v11;
  __int16 *v12;
  BOOL v13;
  int16x8_t v14;
  int16x8_t *v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t *v19;
  const __int16 *v20;
  uint64_t v21;
  BOOL v22;
  __int16 *v23;
  uint64_t v24;
  int16x8_t v25;
  int16x8_t *v26;
  unint64_t v27;
  unint64_t v28;

  v4 = a4;
  v7 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    v8 = result;
    for (i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(_QWORD *)a2 = v4;
      v10 = *(const __int16 **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if ((_DWORD)result)
            goto LABEL_39;
        }
      }
      if (v11 >= 1)
      {
        if ((unint64_t)v11 >= 0x10)
        {
          v13 = v4 >= (unint64_t)(v10 + 1) || (unint64_t)v10 >= v4 + 2 * v11;
          v12 = (__int16 *)v4;
          if (v13)
          {
            v12 = (__int16 *)(v4 + 2 * (v11 & 0xFFFFFFFFFFFFFFF0));
            v14 = vld1q_dup_s16(v10);
            v15 = (int16x8_t *)(v4 + 16);
            v16 = v11 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v15[-1] = v14;
              *v15 = v14;
              v15 += 2;
              v16 -= 16;
            }
            while (v16);
            v17 = v11 == (v11 & 0x7FFFFFFFFFFFFFF0);
            v11 &= 0xFu;
            if (v17)
              goto LABEL_3;
          }
        }
        else
        {
          v12 = (__int16 *)v4;
        }
        v18 = v11 + 1;
        do
        {
          *v12++ = *v10;
          --v18;
        }
        while (v18 > 1);
      }
LABEL_3:
      v4 += 2 * *(unsigned int *)(v8 + 16);
    }
  }
  *(_QWORD *)a2 = v4;
  v19 = *(uint64_t **)(a3 + 8);
  v20 = *(const __int16 **)(a3 + 16);
  v21 = *v19;
  if (!v4)
  {
    if (v21)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
LABEL_39:
        abort();
    }
  }
  if (v21 >= 1)
  {
    if ((unint64_t)v21 < 0x10
      || (v4 < (unint64_t)(v20 + 1) ? (v22 = (unint64_t)v20 >= v4 + 2 * v21) : (v22 = 1), !v22))
    {
      v23 = (__int16 *)v4;
      v24 = v21;
LABEL_36:
      v28 = v24 + 1;
      do
      {
        *v23++ = *v20;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v23 = (__int16 *)(v4 + 2 * (v21 & 0xFFFFFFFFFFFFFFF0));
    v24 = v21 & 0xF;
    v25 = vld1q_dup_s16(v20);
    v26 = (int16x8_t *)(v4 + 16);
    v27 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = v25;
      *v26 = v25;
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return result;
}

uint64_t sub_223CD38A8(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  _WORD **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  int v17;
  _WORD *v18;
  int i;
  _WORD *v20;
  int v21;

  v3 = *(_DWORD *)(a2 + 32);
  v2 = *(_DWORD *)(a2 + 36);
  if (v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = (_WORD **)result;
    v7 = v2 - 1;
    v8 = *(unsigned int *)(a2 + 40);
    v9 = *(unsigned int *)(a2 + 44);
    v10 = *(_WORD **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48))
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v12 + 88))(v12, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v10 = *(_WORD **)(a2 + 24);
    }
    v17 = v3 - 1;
    if (v7)
    {
      v18 = *v6;
      if (v3 == 1)
      {
        do
        {
          *v10 = *v18;
          v10 += v9;
          --v7;
        }
        while (v7);
        goto LABEL_27;
      }
      for (i = 0; i != v7; ++i)
      {
        v20 = v10;
        v21 = v3 - 1;
        do
        {
          *v20 = *v18;
          v20 += v8;
          --v21;
        }
        while (v21);
        *v20 = *v18;
        v10 += v9;
      }
    }
    else
    {
      v18 = *v6;
      if (v3 == 1)
      {
LABEL_27:
        *v10 = *v18;
        return result;
      }
    }
    do
    {
      *v10 = *v18;
      v10 += v8;
      --v17;
    }
    while (v17);
    goto LABEL_27;
  }
  return result;
}

float32x4_t sub_223CD3A10(unsigned int **a1, unsigned __int16 *a2, uint64_t a3, float32x4_t result, float32x2_t _D1, float32x4_t _Q2, double a7, float32x2_t _D4)
{
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int *v15;
  float32x2_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  __int16 *v25;
  __int16 *v28;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  int *v36;
  float32x2_t *v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  __int16 *v43;
  __int16 *v45;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  int *v53;
  int *v54;
  float32x2_t *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  __int16 *v61;
  __int16 *v63;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  int v71;
  int *v72;
  float32x2_t *v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  __int16 *v79;
  __int16 *v81;
  float v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v94;
  float32x4_t v95;
  int *v98;
  float32x4_t v99;

  v11 = a2[1];
  v12 = (unsigned __int16)(v11 - 1);
  v13 = **a1;
  v14 = *a2;
  if (v13 <= v12)
  {
    v15 = (int *)a1[1];
    _H0 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v15 + 24)
                   + 2 * (*(_DWORD *)(*(_QWORD *)v15 + 40) * v14 + *(_DWORD *)(*(_QWORD *)v15 + 44) * v12));
    __asm { FCVT            S0, H0 }
    if (result.f32[0] > -65504.0)
    {
      v20 = (float32x2_t *)a1[2];
      v21 = *((_QWORD *)v15 + 1);
      v22 = *(_DWORD *)(v21 + 68);
      v23 = *(_DWORD *)(v21 + 64) * v14;
      v24 = *(_QWORD *)(v21 + 24);
      v25 = (__int16 *)(v24 + 2 * (v23 + v22 * v12));
      result.i16[0] = *v25;
      __asm { FCVT            S2, H0 }
      _H0 = v25[1];
      __asm { FCVT            S0, H0 }
      _D1.i16[0] = v25[2];
      __asm { FCVT            S1, H1 }
      _D4.i32[0] = v20[1].i32[0];
      _D5 = vmla_f32(vmla_lane_f32(vmul_f32(*v20, *(float32x2_t *)_Q2.f32), *(float32x2_t *)result.f32, *v20, 1), _D1, _D4);
      if (_D5.f32[0] >= 0.93)
      {
        v28 = (__int16 *)(v24 + 2 * (v23 + v22 * v11));
        _H3 = *v28;
        __asm { FCVT            S3, H3 }
        _D4.i16[0] = v28[1];
        __asm { FCVT            S4, H4 }
        _D5.i16[0] = v28[2];
        __asm { FCVT            S5, H5 }
        _Q2.f32[0] = _S3 * _Q2.f32[0];
        *(float32x2_t *)_Q2.f32 = vmla_f32(vmla_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)result.f32, _D4), _D1, _D5);
        result.i32[0] = 1065286107;
        if (_Q2.f32[0] > 0.996)
        {
          result = *(float32x4_t *)(a3 + 8);
          v31 = *(_QWORD *)(a3 + 16);
          v32 = *(_QWORD *)(a3 + 8);
          v33 = ((v31 - v32) << 7) - 1;
          if (v31 == v32)
            v33 = 0;
          v34 = *(_QWORD *)(a3 + 40) + *(_QWORD *)(a3 + 32);
          if (v33 == v34)
          {
            sub_223CCEBC4(a3);
            v32 = *(_QWORD *)(a3 + 8);
            v34 = *(_QWORD *)(a3 + 40) + *(_QWORD *)(a3 + 32);
          }
          *(_DWORD *)(*(_QWORD *)(v32 + ((v34 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v34 & 0x3FF)) = v14 | (v12 << 16);
          ++*(_QWORD *)(a3 + 40);
          v14 = *a2;
          v13 = **a1;
          v11 = a2[1];
        }
      }
    }
  }
  v35 = (unsigned __int16)(v14 - 1);
  if (v13 <= v35)
  {
    v36 = (int *)a1[1];
    _H0 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v36 + 24)
                   + 2 * (*(_DWORD *)(*(_QWORD *)v36 + 40) * v35 + *(_DWORD *)(*(_QWORD *)v36 + 44) * v11));
    __asm { FCVT            S0, H0 }
    if (result.f32[0] > -65504.0)
    {
      v38 = (float32x2_t *)a1[2];
      v39 = *((_QWORD *)v36 + 1);
      v40 = *(_DWORD *)(v39 + 64);
      v41 = *(_DWORD *)(v39 + 68) * v11;
      v42 = *(_QWORD *)(v39 + 24);
      v43 = (__int16 *)(v42 + 2 * (v41 + v40 * v35));
      result.i16[0] = *v43;
      __asm { FCVT            S2, H0 }
      result.i16[0] = v43[1];
      __asm { FCVT            S0, H0 }
      _D1.i16[0] = v43[2];
      __asm { FCVT            S1, H1 }
      _D4.i32[0] = v38[1].i32[0];
      _D5 = vmla_f32(vmla_lane_f32(vmul_f32(*v38, *(float32x2_t *)_Q2.f32), *(float32x2_t *)result.f32, *v38, 1), _D1, _D4);
      if (_D5.f32[0] >= 0.93)
      {
        v45 = (__int16 *)(v42 + 2 * (v41 + v40 * v14));
        _H3 = *v45;
        __asm { FCVT            S3, H3 }
        _D4.i16[0] = v45[1];
        __asm { FCVT            S4, H4 }
        _D5.i16[0] = v45[2];
        __asm { FCVT            S5, H5 }
        _Q2.f32[0] = _S3 * _Q2.f32[0];
        *(float32x2_t *)_Q2.f32 = vmla_f32(vmla_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)result.f32, _D4), _D1, _D5);
        result.i32[0] = 1065286107;
        if (_Q2.f32[0] > 0.996)
        {
          result = *(float32x4_t *)(a3 + 8);
          v48 = *(_QWORD *)(a3 + 16);
          v49 = *(_QWORD *)(a3 + 8);
          v50 = ((v48 - v49) << 7) - 1;
          if (v48 == v49)
            v50 = 0;
          v51 = *(_QWORD *)(a3 + 40) + *(_QWORD *)(a3 + 32);
          if (v50 == v51)
          {
            sub_223CCEBC4(a3);
            v49 = *(_QWORD *)(a3 + 8);
            v51 = *(_QWORD *)(a3 + 40) + *(_QWORD *)(a3 + 32);
          }
          *(_DWORD *)(*(_QWORD *)(v49 + ((v51 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v51 & 0x3FF)) = v35 | (v11 << 16);
          ++*(_QWORD *)(a3 + 40);
          v11 = a2[1];
          v13 = **a1;
          v14 = *a2;
        }
      }
    }
  }
  v52 = (unsigned __int16)(v11 + 1);
  v53 = (int *)a1[3];
  if (v53[1] - v13 > v52)
  {
    v54 = (int *)a1[1];
    _H0 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v54 + 24)
                   + 2 * (*(_DWORD *)(*(_QWORD *)v54 + 40) * v14 + *(_DWORD *)(*(_QWORD *)v54 + 44) * v52));
    __asm { FCVT            S0, H0 }
    if (result.f32[0] > -65504.0)
    {
      v56 = (float32x2_t *)a1[2];
      v57 = *((_QWORD *)v54 + 1);
      v58 = *(_DWORD *)(v57 + 68);
      v59 = *(_DWORD *)(v57 + 64) * v14;
      v60 = *(_QWORD *)(v57 + 24);
      v61 = (__int16 *)(v60 + 2 * (v59 + v58 * v52));
      result.i16[0] = *v61;
      __asm { FCVT            S2, H0 }
      result.i16[0] = v61[1];
      __asm { FCVT            S0, H0 }
      _D1.i16[0] = v61[2];
      __asm { FCVT            S1, H1 }
      _D4.i32[0] = v56[1].i32[0];
      _D5 = vmla_f32(vmla_lane_f32(vmul_f32(*v56, *(float32x2_t *)_Q2.f32), *(float32x2_t *)result.f32, *v56, 1), _D1, _D4);
      if (_D5.f32[0] >= 0.93)
      {
        v63 = (__int16 *)(v60 + 2 * (v59 + v58 * v11));
        _H3 = *v63;
        __asm { FCVT            S3, H3 }
        _D4.i16[0] = v63[1];
        __asm { FCVT            S4, H4 }
        _D5.i16[0] = v63[2];
        __asm { FCVT            S5, H5 }
        _Q2.f32[0] = _S3 * _Q2.f32[0];
        *(float32x2_t *)_Q2.f32 = vmla_f32(vmla_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)result.f32, _D4), _D1, _D5);
        result.i32[0] = 1065286107;
        if (_Q2.f32[0] > 0.996)
        {
          result = *(float32x4_t *)(a3 + 8);
          v66 = *(_QWORD *)(a3 + 16);
          v67 = *(_QWORD *)(a3 + 8);
          v68 = ((v66 - v67) << 7) - 1;
          if (v66 == v67)
            v68 = 0;
          v69 = *(_QWORD *)(a3 + 40) + *(_QWORD *)(a3 + 32);
          if (v68 == v69)
          {
            sub_223CCEBC4(a3);
            v67 = *(_QWORD *)(a3 + 8);
            v69 = *(_QWORD *)(a3 + 40) + *(_QWORD *)(a3 + 32);
          }
          *(_DWORD *)(*(_QWORD *)(v67 + ((v69 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v69 & 0x3FF)) = v14 | (v52 << 16);
          ++*(_QWORD *)(a3 + 40);
          v14 = *a2;
          v53 = (int *)a1[3];
          v13 = **a1;
        }
      }
    }
  }
  v70 = (unsigned __int16)(v14 + 1);
  if (*v53 - v13 > v70)
  {
    v71 = a2[1];
    v72 = (int *)a1[1];
    _H0 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v72 + 24)
                   + 2 * (*(_DWORD *)(*(_QWORD *)v72 + 40) * v70 + *(_DWORD *)(*(_QWORD *)v72 + 44) * v71));
    __asm { FCVT            S0, H0 }
    if (result.f32[0] > -65504.0)
    {
      v74 = (float32x2_t *)a1[2];
      v75 = *((_QWORD *)v72 + 1);
      v76 = *(_DWORD *)(v75 + 64);
      v77 = *(_DWORD *)(v75 + 68) * v71;
      v78 = *(_QWORD *)(v75 + 24);
      v79 = (__int16 *)(v78 + 2 * (v77 + v76 * v70));
      result.i16[0] = *v79;
      __asm { FCVT            S2, H0 }
      result.i16[0] = v79[1];
      __asm { FCVT            S0, H0 }
      _D1.i16[0] = v79[2];
      __asm { FCVT            S1, H1 }
      _D4.i32[0] = v74[1].i32[0];
      _D5 = vmla_f32(vmla_lane_f32(vmul_f32(*v74, *(float32x2_t *)_Q2.f32), *(float32x2_t *)result.f32, *v74, 1), _D1, _D4);
      if (_D5.f32[0] >= 0.93)
      {
        v81 = (__int16 *)(v78 + 2 * (v77 + v76 * v14));
        _H3 = *v81;
        __asm { FCVT            S3, H3 }
        _D4.i16[0] = v81[1];
        __asm { FCVT            S4, H4 }
        _D5.i16[0] = v81[2];
        __asm { FCVT            S5, H5 }
        _Q2.f32[0] = _S3 * _Q2.f32[0];
        v84 = vmla_f32(vmla_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)result.f32, _D4), _D1, _D5).f32[0];
        result.i32[0] = 1065286107;
        if (v84 > 0.996)
        {
          result = *(float32x4_t *)(a3 + 8);
          v85 = *(_QWORD *)(a3 + 16);
          v86 = *(_QWORD *)(a3 + 8);
          v87 = ((v85 - v86) << 7) - 1;
          if (v85 == v86)
            v87 = 0;
          v88 = *(_QWORD *)(a3 + 40) + *(_QWORD *)(a3 + 32);
          if (v87 == v88)
          {
            sub_223CCEBC4(a3);
            v86 = *(_QWORD *)(a3 + 8);
            v88 = *(_QWORD *)(a3 + 40) + *(_QWORD *)(a3 + 32);
          }
          *(_DWORD *)(*(_QWORD *)(v86 + ((v88 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v88 & 0x3FF)) = v70 | (v71 << 16);
          ++*(_QWORD *)(a3 + 40);
        }
      }
    }
  }
  v89 = a1[4];
  v90 = a1[5];
  v91 = *v89 + 1;
  *v89 = v91;
  v92 = *v90;
  if (*v90 <= 0x63 && v91 % 0xA == 0)
  {
    v94 = *((_QWORD *)a1[6] + 3) + 2 * (a1[6][16] * *a2 + a1[6][17] * a2[1]);
    result.i32[0] = *(_DWORD *)v94;
    v95 = vcvtq_f32_f16(*(float16x4_t *)result.f32);
    _H1 = *(_WORD *)(v94 + 4);
    __asm { FCVT            S1, H1 }
    v95.i32[2] = _S1;
    v98 = (int *)a1[2];
    _Q2.i64[0] = *(_QWORD *)v98;
    _Q2.i32[2] = v98[2];
    v99 = vmulq_n_f32(_Q2, (float)v92);
    _Q2.f32[0] = (float)(v92 + 1);
    result = vdivq_f32(vaddq_f32(v95, v99), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q2.f32, 0));
    v98[2] = result.i32[2];
    *(_QWORD *)v98 = result.i64[0];
    ++*a1[5];
  }
  return result;
}

uint64_t sub_223CD406C(uint64_t a1)
{
  uint64_t result;
  void *v3;

  sub_22322BD7C();
  v3 = operator new((4 * 0.0 + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
  sub_22322BD7C();
  result = MEMORY[0x227684CB8](v3, 0x1000C8052888210);
  *(_BYTE *)(a1 + 92) = 1;
  return result;
}

void sub_223CD41C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CB8](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

unint64_t sub_223CD41E8(float *a1, uint64_t a2)
{
  float v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  float v8;
  float v9;
  int v12;
  int v13;
  uint64_t v14;
  float16x4_t *v15;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  float16x4_t v31;
  float16x4_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  float16x4_t v37;
  uint64_t v38;
  int v39;
  float16x4_t v40;
  int v41;
  unsigned int v42;
  _BOOL4 v43;
  float32x4_t v44;
  float32x4_t v45;
  float16x4_t v46;
  _BOOL4 v47;
  unsigned int v48;
  int v49;
  _BOOL4 v50;
  unsigned __int16 v57;
  int8x16_t v58;
  int8x16_t v59;
  uint64x2_t v60;
  unsigned int v61;
  unsigned int v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;

  v3 = a1[1];
  v4 = vcvtms_u32_f32(*a1);
  v5 = vcvtps_u32_f32(*a1);
  v6 = vcvtms_u32_f32(v3);
  v7 = vcvtps_u32_f32(v3);
  v8 = *a1 - (float)floorf(*a1);
  v9 = v3 - (float)floorf(v3);
  if (v4 == v5 || v6 == v7)
  {
    if (v4 != v5 && v6 == v7)
    {
      v25 = *(_DWORD *)(a2 + 64);
      v24 = *(_DWORD *)(a2 + 68);
      v26 = v24 * v6;
      v27 = *(_QWORD *)(a2 + 24);
      if (v27)
      {
        v28 = v24 * v6;
        v29 = *(_QWORD *)(a2 + 24);
        v30 = *(_DWORD *)(a2 + 64);
        v31 = *(float16x4_t *)(v27 + 2 * (v26 + v25 * v4));
      }
      else
      {
        v67 = v8;
        v48 = v5;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_45;
        }
        v30 = *(_DWORD *)(a2 + 64);
        v49 = *(_DWORD *)(a2 + 68);
        v29 = *(_QWORD *)(a2 + 24);
        v28 = v49 * v6;
        v5 = v48;
        v8 = v67;
        v31 = *(float16x4_t *)(2 * (v26 + v25 * v4));
        if (!v29)
        {
          v50 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          v8 = v67;
          v5 = v48;
          if (v50)
            goto LABEL_45;
        }
      }
      v44 = vaddq_f32(vmulq_n_f32(vcvtq_f32_f16(v31), 1.0 - v8), (float32x4_t)0);
      v45 = vmulq_n_f32(vcvtq_f32_f16(*(float16x4_t *)(v29 + 2 * (v28 + v30 * v5))), v8);
      goto LABEL_44;
    }
    v12 = *(_DWORD *)(a2 + 68);
    v13 = *(_DWORD *)(a2 + 64) * v4;
    v14 = *(_QWORD *)(a2 + 24);
    v15 = (float16x4_t *)(v14 + 2 * (v13 + v12 * v6));
    if (v4 != v5 || v6 == v7)
    {
      if (v14
        || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        return (unint64_t)*v15;
      }
    }
    else
    {
      if (!v14)
      {
        v64 = v9;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_45;
        }
        v12 = *(_DWORD *)(a2 + 68);
        v14 = *(_QWORD *)(a2 + 24);
        v13 = *(_DWORD *)(a2 + 64) * v4;
        v9 = v64;
      }
      v46 = *v15;
      if (v14
        || (v65 = v9,
            v47 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C), v9 = v65, !v47))
      {
        v44 = vaddq_f32(vmulq_n_f32(vcvtq_f32_f16(v46), 1.0 - v9), (float32x4_t)0);
        v45 = vmulq_n_f32(vcvtq_f32_f16(*(float16x4_t *)(v14 + 2 * (v13 + v12 * v7))), v9);
        goto LABEL_44;
      }
    }
LABEL_45:
    abort();
  }
  v63 = v9;
  v66 = v8;
  v18 = *(_DWORD *)(a2 + 64);
  v19 = *(_DWORD *)(a2 + 68);
  v20 = *(_QWORD *)(a2 + 24);
  if (v20)
  {
    v21 = *(_QWORD *)(a2 + 24);
    v22 = *(_DWORD *)(a2 + 68);
    v23 = *(_DWORD *)(a2 + 64);
  }
  else
  {
    v61 = v5;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_45;
    }
    v23 = *(_DWORD *)(a2 + 64);
    v22 = *(_DWORD *)(a2 + 68);
    v21 = *(_QWORD *)(a2 + 24);
    v5 = v61;
  }
  v32 = *(float16x4_t *)(v20 + 2 * (v18 * v5 + v19 * v7));
  v33 = v23 * v4;
  v34 = v23 * v4;
  v35 = v21;
  v36 = v22;
  if (v21)
  {
    v37 = *(float16x4_t *)(v21 + 2 * (v33 + v22 * v6));
    v38 = v21;
    v39 = v22;
  }
  else
  {
    v62 = v5;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_45;
    }
    v23 = *(_DWORD *)(a2 + 64);
    v36 = *(_DWORD *)(a2 + 68);
    v35 = *(_QWORD *)(a2 + 24);
    v34 = v23 * v4;
    v5 = v62;
    v37 = *(float16x4_t *)(2 * (v33 + v22 * v6));
    v38 = v35;
    v39 = v36;
    if (!v35)
    {
      v41 = v34;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_45;
      }
      v23 = *(_DWORD *)(a2 + 64);
      v39 = *(_DWORD *)(a2 + 68);
      v38 = *(_QWORD *)(a2 + 24);
      v5 = v62;
      v40 = *(float16x4_t *)(2 * (v41 + v36 * v7));
      if (!v38)
        goto LABEL_32;
      goto LABEL_33;
    }
  }
  v40 = *(float16x4_t *)(v35 + 2 * (v34 + v36 * v7));
  if (!v38)
  {
LABEL_32:
    v42 = v5;
    v43 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v5 = v42;
    if (!v43)
      goto LABEL_33;
    goto LABEL_45;
  }
LABEL_33:
  v44 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(vcvtq_f32_f16(v32), v66 * v63), (float32x4_t)0), vmulq_n_f32(vcvtq_f32_f16(v37), (float)((float)(1.0 - v66) - v63) + (float)(v66 * v63))), vmulq_n_f32(vcvtq_f32_f16(v40), v63 - (float)(v66 * v63)));
  v45 = vmulq_n_f32(vcvtq_f32_f16(*(float16x4_t *)(v38 + 2 * (v39 * v6 + v23 * v5))), v66 - (float)(v66 * v63));
LABEL_44:
  _Q0 = (int8x16_t)vaddq_f32(v44, v45);
  __asm { FCVT            H1, S0 }
  _S2 = _Q0.i32[2];
  __asm { FCVT            H2, S2 }
  v57 = _H1;
  _Q0.i32[0] = vextq_s8(_Q0, _Q0, 8uLL).i32[1];
  _Q0.i64[0] = vmovl_u16((uint16x4_t)vcvt_f16_f32((float32x4_t)_Q0)).u64[0];
  v58.i64[0] = _Q0.u32[0];
  v58.i64[1] = _Q0.u32[1];
  v59.i64[0] = 0xFFFFLL;
  v59.i64[1] = 0xFFFFLL;
  v60 = vshlq_u64((uint64x2_t)vandq_s8(v58, v59), (uint64x2_t)xmmword_22466EF50);
  return v60.i64[0] | ((unint64_t)(unsigned __int16)_S2 << 32) | v57 | v60.i64[1];
}

void sub_223CD4718(uint64_t a1, int a2)
{
  char v2;
  uint64_t v4;
  char v5;
  unint64_t v6;
  size_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unsigned __int8 *v18;
  int v19;
  unint64_t v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  float32x4_t v24;
  float v25;
  float v26;
  int64_t v27;
  uint64_t v28;
  size_t v29;
  int *v30;
  int *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int v36;
  int v37;
  int *i;
  int v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t j;
  _QWORD *v45;
  uint64_t v46;
  uint64_t k;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  uint64_t v54;
  float32x4_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  void *v64;
  int8x16_t *v65;
  int8x16_t *v66;
  unint64_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  uint64_t *v72;
  int8x16_t *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int8x16_t v77;
  int8x16_t *v78;
  int8x16_t *v79;
  unint64_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  uint64_t *v85;
  int8x16_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int8x16_t v90;
  void *__p;
  uint64_t *v92;
  void *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  _BYTE v99[4];
  int v100;
  uint64_t v101;
  int v102;
  uint64_t *v103;

  v2 = a2;
  if (a2 != 1
    && a2 != 16
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/AttributeColor.cpp", 38, (uint64_t)"attribute == MappingAttribute::Semantic || attribute == MappingAttribute::Material", 82, (uint64_t)"Only semantic or material attributes are supported.", 51, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 2;
  v5 = -85 * v4;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v6 = (-1431655765 * v4);
  v7 = 4 * v6;
  if (!(-1431655765 * (_DWORD)v4))
    goto LABEL_29;
  v8 = (int8x16_t *)operator new(4 * v6);
  v93 = v8;
  v95 = &v8->i8[v7];
  bzero(v8, 4 * v6);
  v94 = &v8->i8[v7];
  if ((v2 & 1) != 0)
  {
    v13 = *(_QWORD *)(a1 + 240);
    if (v6 < 8 || ((unint64_t)v8 < v13 + v6 ? (v14 = v13 >= (unint64_t)v8 + 4 * v6) : (v14 = 1), !v14))
    {
      v15 = 0;
      goto LABEL_27;
    }
    if (v6 >= 0x20)
    {
      v15 = v6 - (v5 & 0x1F);
      v78 = (int8x16_t *)(v13 + 16);
      v79 = v8 + 4;
      v9.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
      v80 = v15;
      do
      {
        v81 = v78[-1];
        v82 = *v78;
        v83 = vqtbl1q_s8(*v78, (int8x16_t)xmmword_2245F6710);
        v84 = vqtbl1q_s8(*v78, (int8x16_t)xmmword_2245F6720);
        v79[-2] = vqtbl1q_s8(v81, (int8x16_t)xmmword_2246694C0);
        v79[-1] = vqtbl1q_s8(v81, (int8x16_t)xmmword_2246694D0);
        v79[-4] = vqtbl1q_s8(v81, (int8x16_t)xmmword_2245F6710);
        v79[-3] = vqtbl1q_s8(v81, (int8x16_t)xmmword_2245F6720);
        v79[2] = vqtbl1q_s8(v82, (int8x16_t)xmmword_2246694C0);
        v79[3] = vqtbl1q_s8(v82, (int8x16_t)xmmword_2246694D0);
        *v79 = v83;
        v79[1] = v84;
        v79 += 8;
        v78 += 2;
        v80 -= 32;
      }
      while (v80);
      if ((v5 & 0x1F) == 0)
        goto LABEL_29;
      if ((v5 & 0x1Fu) < 8uLL)
      {
LABEL_27:
        v20 = v6 - v15;
        v21 = &v8->i8[4 * v15];
        v22 = (unsigned __int8 *)(v13 + v15);
        do
        {
          v23 = *v22++;
          *(_DWORD *)v21 = v23;
          v21 += 4;
          --v20;
        }
        while (v20);
        goto LABEL_29;
      }
    }
    else
    {
      v15 = 0;
    }
    v85 = (uint64_t *)(v13 + v15);
    v86 = (int8x16_t *)((char *)v8 + 4 * v15);
    v87 = v15 + (v5 & 7);
    v15 = v6 - (v5 & 7);
    v88 = v87 - v6;
    do
    {
      v89 = *v85++;
      v9.i64[0] = v89;
      v90 = vqtbl1q_s8(v9, (int8x16_t)xmmword_2245F6710);
      v9 = vqtbl1q_s8(v9, (int8x16_t)xmmword_2245F6720);
      *v86 = v90;
      v86[1] = v9;
      v86 += 2;
      v88 += 8;
    }
    while (v88);
    if ((v5 & 7) == 0)
      goto LABEL_29;
    goto LABEL_27;
  }
  v10 = *(_QWORD *)(a1 + 280);
  if (v6 < 8 || ((unint64_t)v8 < v10 + v6 ? (v11 = v10 >= (unint64_t)v8 + 4 * v6) : (v11 = 1), !v11))
  {
    v12 = 0;
    goto LABEL_23;
  }
  if (v6 >= 0x20)
  {
    v12 = v6 - (v5 & 0x1F);
    v65 = (int8x16_t *)(v10 + 16);
    v66 = v8 + 4;
    v9.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
    v67 = v12;
    do
    {
      v68 = v65[-1];
      v69 = *v65;
      v70 = vqtbl1q_s8(*v65, (int8x16_t)xmmword_2245F6710);
      v71 = vqtbl1q_s8(*v65, (int8x16_t)xmmword_2245F6720);
      v66[-2] = vqtbl1q_s8(v68, (int8x16_t)xmmword_2246694C0);
      v66[-1] = vqtbl1q_s8(v68, (int8x16_t)xmmword_2246694D0);
      v66[-4] = vqtbl1q_s8(v68, (int8x16_t)xmmword_2245F6710);
      v66[-3] = vqtbl1q_s8(v68, (int8x16_t)xmmword_2245F6720);
      v66[2] = vqtbl1q_s8(v69, (int8x16_t)xmmword_2246694C0);
      v66[3] = vqtbl1q_s8(v69, (int8x16_t)xmmword_2246694D0);
      *v66 = v70;
      v66[1] = v71;
      v66 += 8;
      v65 += 2;
      v67 -= 32;
    }
    while (v67);
    if ((v5 & 0x1F) == 0)
      goto LABEL_29;
    if ((v5 & 0x1Fu) < 8uLL)
    {
LABEL_23:
      v16 = v6 - v12;
      v17 = &v8->i8[4 * v12];
      v18 = (unsigned __int8 *)(v10 + v12);
      do
      {
        v19 = *v18++;
        *(_DWORD *)v17 = v19;
        v17 += 4;
        --v16;
      }
      while (v16);
      goto LABEL_29;
    }
  }
  else
  {
    v12 = 0;
  }
  v72 = (uint64_t *)(v10 + v12);
  v73 = (int8x16_t *)((char *)v8 + 4 * v12);
  v74 = v12 + (v5 & 7);
  v12 = v6 - (v5 & 7);
  v75 = v74 - v6;
  do
  {
    v76 = *v72++;
    v9.i64[0] = v76;
    v77 = vqtbl1q_s8(v9, (int8x16_t)xmmword_2245F6710);
    v9 = vqtbl1q_s8(v9, (int8x16_t)xmmword_2245F6720);
    *v73 = v77;
    v73[1] = v9;
    v73 += 2;
    v75 += 8;
  }
  while (v75);
  if ((v5 & 7) != 0)
    goto LABEL_23;
LABEL_29:
  sub_223CE3D80((_QWORD *)a1, (unsigned int **)&v93, (uint64_t *)&__p);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
  sub_223674A94((_QWORD *)a1, (uint64_t *)&__p);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 2) != v6
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/AttributeColor.cpp", 56, (uint64_t)"mesh.faces.size() == num_faces", 30, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v27 = (char *)v92 - (_BYTE *)__p;
  if (v92 == __p)
  {
    v31 = 0;
    v30 = 0;
    if (v6)
      goto LABEL_34;
  }
  else
  {
    v28 = v27 / 384;
    if ((unint64_t)(v27 / 384) >> 62)
      sub_22316E078();
    v29 = 4 * v28;
    v30 = (int *)operator new(4 * v28);
    v31 = &v30[v28];
    bzero(v30, v29);
    if (v6)
    {
LABEL_34:
      v32 = (char *)operator new(4 * v6);
      bzero(v32, 4 * v6);
      v33 = 0;
      v34 = (char *)v93;
      do
      {
        v35 = *(unsigned int *)&v34[v33];
        v36 = v30[v35];
        v30[v35] = v36 + 1;
        *(_DWORD *)&v32[v33] = v36;
        v33 += 4;
      }
      while (v7 != v33);
      if (v30 == v31)
        goto LABEL_42;
      goto LABEL_40;
    }
  }
  v32 = 0;
  if (v30 == v31)
    goto LABEL_42;
LABEL_40:
  v37 = *v30;
  *v30 = 0;
  for (i = v30 + 1; i != v31; v37 += v39)
  {
    v39 = *i;
    *i++ = v37;
  }
LABEL_42:
  if (v6)
  {
    v6 = (unint64_t)operator new(4 * v6);
    bzero((void *)v6, v7);
    v40 = 0;
    v41 = (char *)v93;
    do
    {
      *(_DWORD *)(v6 + v40) = *(_DWORD *)&v32[v40] + v30[*(unsigned int *)&v41[v40]];
      v40 += 4;
    }
    while (v7 != v40);
  }
  v42 = (_QWORD *)(a1 + 240);
  if (*(_QWORD *)(a1 + 240) != *(_QWORD *)(a1 + 248))
  {
    sub_223180F98(&v96, a1 + 240);
    v43 = *(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240);
    if (v43)
    {
      for (j = 0; j != v43; ++j)
        *(_BYTE *)(*v42 + *(unsigned int *)(v6 + 4 * j)) = *(_BYTE *)(v96 + j);
    }
    if (v96)
    {
      v97 = v96;
      v101 = v96;
      v102 = v98 - v96;
      if (v100 == -1)
        sub_22316DD70();
      v103 = &v101;
      ((void (*)(uint64_t **, _BYTE *))off_24EC63420[v100])(&v103, v99);
    }
  }
  v45 = (_QWORD *)(a1 + 280);
  if (*(_QWORD *)(a1 + 280) != *(_QWORD *)(a1 + 288))
  {
    sub_223180F98(&v96, a1 + 280);
    v46 = *(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280);
    if (v46)
    {
      for (k = 0; k != v46; ++k)
        *(_BYTE *)(*v45 + *(unsigned int *)(v6 + 4 * k)) = *(_BYTE *)(v96 + k);
    }
    if (v96)
    {
      v97 = v96;
      v101 = v96;
      v102 = v98 - v96;
      if (v100 == -1)
        sub_22316DD70();
      v103 = &v101;
      ((void (*)(uint64_t **, _BYTE *))off_24EC63420[v100])(&v103, v99);
    }
  }
  v49 = (_QWORD *)(a1 + 32);
  v48 = *(_QWORD *)(a1 + 32);
  v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v51 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 40) - v48) >> 2);
  if (v50 <= v51)
  {
    if (v50 < v51)
      *(_QWORD *)(a1 + 40) = v48 + 4 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  }
  else
  {
    sub_22317EF30(a1 + 32, v50 - v51);
  }
  *(_DWORD *)(a1 + 64) = 1;
  v52 = *(unsigned int **)(a1 + 112);
  v53 = *(unsigned int **)(a1 + 120);
  if (v52 != v53)
  {
    v54 = 0;
    v55 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    do
    {
      if ((v2 & 1) != 0)
      {
        v61 = *(unsigned __int8 *)(*v42 + v54);
        if (v61 >= 0x2A)
          v57 = &byte_2245C9FE2;
        else
          v57 = &byte_2245C3FE4[3 * v61];
      }
      else
      {
        v56 = *(unsigned __int8 *)(*v45 + v54);
        if (v56 >= 0x1A)
          v57 = (char *)&unk_2245C4315;
        else
          v57 = (char *)&unk_2245C4318 + 3 * v56;
      }
      v24.i8[0] = *v57;
      v24.f32[0] = (float)v24.u32[0];
      LOBYTE(v25) = v57[1];
      v25 = (float)LODWORD(v25);
      LOBYTE(v26) = v57[2];
      v26 = (float)LODWORD(v26);
      v24.f32[1] = v25;
      v24.f32[2] = v26;
      v24 = vdivq_f32(v24, v55);
      v58 = *v49 + 12 * *v52;
      *(_DWORD *)(v58 + 8) = v24.i32[2];
      *(_QWORD *)v58 = v24.i64[0];
      v59 = *v49 + 12 * v52[1];
      *(_QWORD *)v59 = v24.i64[0];
      *(_DWORD *)(v59 + 8) = v24.i32[2];
      v60 = *v49 + 12 * v52[2];
      *(_QWORD *)v60 = v24.i64[0];
      *(_DWORD *)(v60 + 8) = v24.i32[2];
      ++v54;
      v52 += 3;
    }
    while (v52 != v53);
  }
  if (v6)
    operator delete((void *)v6);
  if (v32)
    operator delete(v32);
  if (v30)
    operator delete(v30);
  v62 = (uint64_t *)__p;
  if (__p)
  {
    v63 = v92;
    v64 = __p;
    if (v92 != __p)
    {
      do
        v63 = sub_22316F8F4(v63 - 48);
      while (v63 != v62);
      v64 = __p;
    }
    v92 = v62;
    operator delete(v64);
  }
  if (v93)
  {
    v94 = (char *)v93;
    operator delete(v93);
  }
}

void sub_223CD4EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  void *v16;
  void *v17;
  void *v18;

  if (v18)
  {
    operator delete(v18);
    if (!v17)
    {
LABEL_3:
      if (!v16)
      {
LABEL_8:
        sub_2239997F4(&a12);
        if (__p)
        {
          a16 = (uint64_t)__p;
          operator delete(__p);
        }
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v16);
      goto LABEL_8;
    }
  }
  else if (!v17)
  {
    goto LABEL_3;
  }
  operator delete(v17);
  if (!v16)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t sub_223CD4F78(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  sub_223CD5140(a1 + 136, *(_QWORD **)(a1 + 144));
  v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 112);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 112);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(std::__shared_weak_count **)(a1 + 96);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    *(_QWORD *)(a1 + 8) = off_24EC637E8;
    v11 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    *(_QWORD *)(a1 + 8) = off_24EC637E8;
    v11 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = *(std::__shared_weak_count **)(a1 + 40);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v17 = *(std::__shared_weak_count **)(a1 + 24);
      if (v17)
        goto LABEL_26;
      return a1;
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v17)
    return a1;
LABEL_26:
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_223CD5140(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  if (a2)
  {
    sub_223CD5140(a1, *a2);
    sub_223CD5140(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[10];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (std::__shared_weak_count *)a2[8];
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = (std::__shared_weak_count *)a2[6];
    if (!v10)
      goto LABEL_16;
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      operator delete(a2);
    }
    else
    {
LABEL_16:
      operator delete(a2);
    }
  }
}

_QWORD *sub_223CD5238(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = off_24EC637E8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_223CD5328(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = off_24EC637E8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223CD5418(uint64_t a1, uint64_t a2, unsigned int a3, double a4, double a5, double a6, double a7)
{
  uint64_t v9;
  void ***v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void ***v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  _QWORD *v106;
  std::__shared_weak_count *v107;
  __int128 v108;
  __int128 v109;
  void **v110;
  std::__shared_weak_count *v111;
  void *v112;
  _QWORD v113[4];

  *(double *)v113 = a4;
  *(double *)&v113[1] = a5;
  *(double *)&v113[2] = a6;
  *(double *)&v113[3] = a7;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = &off_24EC63440;
  v9 = a1 + 8;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_22466EF60;
  *(_DWORD *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 84) = 1;
  v10 = (void ***)(a1 + 88);
  *(_BYTE *)(a1 + 86) = 0;
  sub_2232285F8((_QWORD *)(a1 + 88));
  sub_2232291A8((_QWORD *)(a1 + 104));
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_QWORD *)(a1 + 152) = 0;
  sub_223227930((uint64_t *)&v112);
  sub_223226E78(*(void ****)a1, v11, v12, v13, v14, v15, &v110);
  sub_223CEA6B8(v9, &v110);
  v16 = *(void ****)a1;
  v18 = *(_DWORD *)(*(_QWORD *)a1 + 16);
  v17 = *(_DWORD *)(*(_QWORD *)a1 + 20);
  nullsub_30(&v110);
  sub_223226080(&v109, &v110, 4 * v18 * v17, 0, v19, v20);
  v21 = v109;
  v109 = 0uLL;
  v22 = *(std::__shared_weak_count **)(a1 + 128);
  *(_OWORD *)(a1 + 120) = v21;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
  if (*((_QWORD *)&v109 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  sub_2232290AC(a3, (const char *)*((unsigned int *)v16 + 4), *((_DWORD *)v16 + 5), 0, &v109);
  sub_223229188((_QWORD **)&v109, 2, v28, v29, v30, v31);
  sub_223229198((_QWORD **)&v109, 4u, v32, v33, v34, v35);
  nullsub_30(&v110);
  sub_223229208(&v108, &v110, (uint64_t **)&v109, v36, v37, v38);
  v43 = v108;
  v108 = 0uLL;
  v44 = *(std::__shared_weak_count **)(a1 + 112);
  *(_OWORD *)(a1 + 104) = v43;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
  if (*((_QWORD *)&v108 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  sub_223228674(v10, 0, v39, v40, v41, v42, &v108);
  sub_2232285A4((_QWORD **)&v108, (_QWORD **)(a1 + 104), v50, v51, v52, v53);
  sub_2232285B8((_QWORD **)&v108, 2, v54, v55, v56, v57);
  sub_2232285C8((_QWORD **)&v108, 1, v58, v59, v60, v61);
  sub_2232285D8((_QWORD **)&v108, (uint64_t)v113, v62, v63, v64, v65);
  sub_223228784(v10, v66, v67, v68, v69, v70, &v106);
  sub_2232285A4(&v106, (_QWORD **)(*(_QWORD *)a1 + 40), v71, v72, v73, v74);
  sub_2232285B8(&v106, 2, v75, v76, v77, v78);
  sub_2232285C8(&v106, 0, v79, v80, v81, v82);
  sub_2232285EC(&v106, v83, v84, v85, v86, v87);
  v93 = v107;
  if (v107)
  {
    v94 = (unint64_t *)&v107->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
  if (*((_QWORD *)&v108 + 1))
  {
    v97 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
  if (*((_QWORD *)&v109 + 1))
  {
    v100 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v111;
  if (v111)
  {
    v103 = (unint64_t *)&v111->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  sub_22322797C(&v112, v88, v89, v90, v91, v92);
  return a1;
}

void sub_223CD57C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  uint64_t v19;
  va_list va1;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  va_list va2;
  uint64_t v25;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v19 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v22 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v23 = va_arg(va3, _QWORD);
  v25 = va_arg(va3, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  sub_223167354((uint64_t)va2);
  sub_22322797C((void **)va3, v11, v12, v13, v14, v15);
  sub_223CD5140(v8, *v9);
  sub_223167354(v7);
  sub_223167354(a3);
  sub_223167354(v6);
  sub_223CEA5C0(v5);
  _Unwind_Resume(a1);
}

void sub_223CD58A0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v8;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  _QWORD *v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;
  char *v23;
  uint64_t **v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD v98[3];
  void **v99;
  std::__shared_weak_count *v100;
  __int128 v101;
  uint64_t *v102;
  _QWORD *v103;
  std::__shared_weak_count *v104;
  uint64_t **v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
    return;
  v8 = a3;
  sub_223226CAC(a5, (const char *)a2, a3, a4, a5, a6, &v99);
  v17 = (uint64_t **)(a1 + 144);
  v16 = *(uint64_t **)(a1 + 144);
  if (!v16)
  {
    v24 = (uint64_t **)(a1 + 144);
LABEL_20:
    v26 = (char *)operator new(0x58uLL);
    *((_QWORD *)v26 + 4) = a2;
    *(_OWORD *)(v26 + 40) = 0u;
    *(_OWORD *)(v26 + 56) = 0u;
    *(_OWORD *)(v26 + 72) = 0u;
    *(_QWORD *)v26 = 0;
    *((_QWORD *)v26 + 1) = 0;
    *((_QWORD *)v26 + 2) = v24;
    *v17 = (uint64_t *)v26;
    v27 = **(_QWORD **)(a1 + 136);
    v28 = (uint64_t *)v26;
    if (v27)
    {
      *(_QWORD *)(a1 + 136) = v27;
      v28 = *v17;
    }
    sub_2231A9A8C(*(uint64_t **)(a1 + 144), v28);
    ++*(_QWORD *)(a1 + 152);
    goto LABEL_23;
  }
  v18 = (uint64_t **)(a1 + 144);
  v19 = *(_QWORD **)(a1 + 144);
  do
  {
    v20 = v19[4];
    v21 = v20 >= a2;
    if (v20 >= a2)
      v22 = v19;
    else
      v22 = v19 + 1;
    if (v21)
      v18 = (uint64_t **)v19;
    v19 = (_QWORD *)*v22;
  }
  while (*v22);
  if (v18 == v17 || (unint64_t)v18[4] > a2)
  {
    while (1)
    {
      while (1)
      {
        v24 = (uint64_t **)v16;
        v25 = v16[4];
        if (v25 <= a2)
          break;
        v16 = *v24;
        v17 = v24;
        if (!*v24)
          goto LABEL_20;
      }
      if (v25 >= a2)
        break;
      v16 = v24[1];
      if (!v16)
      {
        v17 = v24 + 1;
        goto LABEL_20;
      }
    }
    v26 = (char *)v24;
LABEL_23:
    v29 = *(_QWORD *)a2;
    v30 = *(_QWORD *)(a2 + 8);
    nullsub_30(&v99);
    v105 = 0;
    sub_2232264FC(&v101, &v99, v29, (((v30 - v29) & 0xFFFFFFFC) + 4095) & 0xFFFFF000, 0, &v102);
    v31 = v105;
    if (v105 == &v102)
    {
      v32 = 4;
      v31 = &v102;
    }
    else
    {
      if (!v105)
      {
LABEL_28:
        v33 = v101;
        v101 = 0uLL;
        v34 = (std::__shared_weak_count *)*((_QWORD *)v26 + 6);
        *(_OWORD *)(v26 + 40) = v33;
        if (!v34)
          goto LABEL_32;
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
          v23 = v26 + 40;
          v37 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
          if (!*((_QWORD *)&v101 + 1))
            goto LABEL_36;
        }
        else
        {
LABEL_32:
          v23 = v26 + 40;
          v37 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
          if (!*((_QWORD *)&v101 + 1))
            goto LABEL_36;
        }
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
          if ((v8 & 3) == 0)
            goto LABEL_58;
          goto LABEL_37;
        }
LABEL_36:
        if ((v8 & 3) == 0)
          goto LABEL_58;
LABEL_37:
        v40 = *(_QWORD *)(a2 + 112);
        v41 = *(_QWORD *)(a2 + 120);
        if (v40 == v41)
          goto LABEL_58;
        nullsub_30(&v99);
        v105 = 0;
        sub_2232264FC(&v101, &v99, v40, (((v41 - v40) & 0xFFFFFFFC) + 4095) & 0xFFFFF000, 0, &v102);
        v42 = v105;
        if (v105 == &v102)
        {
          v43 = 4;
          v42 = &v102;
        }
        else
        {
          if (!v105)
            goto LABEL_48;
          v43 = 5;
        }
        ((void (*)(void))(*v42)[v43])();
LABEL_48:
        v44 = v101;
        v101 = 0uLL;
        v45 = (std::__shared_weak_count *)*((_QWORD *)v26 + 8);
        *(_OWORD *)(v26 + 56) = v44;
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
        if (*((_QWORD *)&v101 + 1))
        {
          v49 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        goto LABEL_58;
      }
      v32 = 5;
    }
    ((void (*)(void))(*v31)[v32])();
    goto LABEL_28;
  }
  v23 = (char *)(v18 + 5);
LABEL_58:
  v52 = *(_QWORD **)v23;
  v51 = (std::__shared_weak_count *)*((_QWORD *)v23 + 1);
  v102 = (uint64_t *)a2;
  v103 = v52;
  v104 = v51;
  if (v51)
  {
    v53 = (unint64_t *)&v51->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)v23 + 3);
  v105 = (uint64_t **)*((_QWORD *)v23 + 2);
  v106 = v55;
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v107 = 0;
  v108 = 0;
  v58 = *(_QWORD *)(a5 + 16);
  v98[1] = *(_QWORD *)(a5 + 8);
  v98[2] = v58;
  if (v58)
  {
    v59 = (unint64_t *)(v58 + 8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  v98[0] = &off_24EC25F68;
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    sub_223226CAC((uint64_t)v98, v11, v12, v13, v14, v15, &v101);
    if ((v8 & 1) != 0)
    {
      v65 = v102[14];
      v66 = v102[15];
      if (v65 != v66)
      {
        sub_223228420((uint64_t)v98, (_QWORD **)(a1 + 48), v61, v62, v63, v64);
        sub_223228434((uint64_t)v98, a4, 0x50u, 0, 0, v67);
        sub_223228450((uint64_t)v98, &v103, 0, 1u, 1, v68);
        sub_2232284FC((uint64_t)v98, 3, (unint64_t)(v66 - v65) >> 2, 1, &v105);
      }
    }
    if ((v8 & 2) != 0)
    {
      v70 = v102[14];
      v69 = v102[15];
      sub_223228420((uint64_t)v98, (_QWORD **)(a1 + 48), v61, v62, v63, v64);
      sub_223228434((uint64_t)v98, a4, 0x50u, 0, 0, v71);
      sub_223228450((uint64_t)v98, &v103, 0, 1u, 1, v72);
      sub_223228494((uint64_t)v98, 1, v73, v74, v75, v76);
      sub_2232284FC((uint64_t)v98, 3, (unint64_t)(v69 - v70) >> 2, 1, &v105);
    }
    if ((v8 & 4) != 0)
    {
      v78 = *v102;
      v77 = v102[1];
      sub_223228420((uint64_t)v98, (_QWORD **)(a1 + 48), v61, v62, v63, v64);
      sub_223228434((uint64_t)v98, a4, 0x50u, 0, 0, v79);
      sub_223228450((uint64_t)v98, &v103, 0, 1u, 1, v80);
      sub_2232284DC((uint64_t)v98, 0, 0, -1431655765 * ((unint64_t)(v77 - v78) >> 2), v81, v82);
    }
    v83 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
    if (*((_QWORD *)&v101 + 1))
    {
      v84 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
  }
  sub_223226D74(v98);
  v86 = v108;
  if (v108)
  {
    v87 = (unint64_t *)&v108->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v106;
  if (v106)
  {
    v90 = (unint64_t *)&v106->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = v104;
  if (v104)
  {
    v93 = (unint64_t *)&v104->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v100;
  if (v100)
  {
    v96 = (unint64_t *)&v100->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
}

void sub_223CD5F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
    {
      sub_223167354((uint64_t)&a13);
      _Unwind_Resume(a1);
    }
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
  sub_223167354((uint64_t)&a13);
  _Unwind_Resume(a1);
}

_QWORD *sub_223CD5FE0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

char *sub_223CD60C4@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_2245C65C0;
  strcpy(result, "Reconstruction_Gpu_Shaders.metallib");
  return result;
}

char *sub_223CD6118@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_2245C65C0;
  strcpy(result, "Reconstruction_Gpu_Archive.metallib");
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

void sub_223CD6174(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "MeshDepthVS");
}

void sub_223CD61A0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "MeshDepthFS");
}

void sub_223CD61CC(_QWORD *a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, char **a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  size_t v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  __int128 v35;
  char *v36;
  int64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  size_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  size_t v51;
  _BYTE *v52;
  char *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  _OWORD *v59;
  unint64_t v60;
  __int128 v61;
  char *v62;
  int64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  char v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t v70;
  char *v71;
  char *v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  size_t v79;
  _BYTE *v80;
  char *v81;
  unsigned int v82;
  uint64_t v83;
  void **v84;
  char *v85;
  char *v86;
  _QWORD *v87;
  _QWORD *v88;
  unsigned int **v89;
  unint64_t v90;
  char *v91;
  _OWORD *v92;
  unint64_t v93;
  __int128 v94;
  char *v95;
  int64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  char v100;
  _BYTE *v101;
  int64_t v102;
  int64_t v103;
  int64_t v104;
  int8x16_t v105;
  float32x4_t v106;
  float32x4_t v107;
  uint64_t v108;
  int v109;
  _QWORD *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int8x16_t v123;
  int8x16_t v124;
  float32x2_t v125;
  unsigned int *v126;
  unsigned int *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _DWORD *v138;
  _DWORD *v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int v142;
  _DWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD *v146;
  float32x2_t *v147;
  float32x2_t *v148;
  unint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  char *v152;
  unint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  unsigned int v157;
  char *v158;
  uint64_t *v159;
  uint64_t *v160;
  char **v161;
  _QWORD *v162;
  _QWORD *v163;
  uint64_t v165;

  v16 = *a2;
  v15 = a2[1];
  if (*a2 == v15)
  {
    sub_223CE2014(a1, a2);
    v16 = *a2;
    v15 = a2[1];
  }
  v162 = a3;
  v163 = a4;
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3) != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 43, (uint64_t)"vertex_to_face.size() == mesh.vertices.size()", 45, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_156:
    abort();
  }
  v159 = a2;
  v160 = (uint64_t *)a5;
  sub_223CE25B8(a1 + 14, a2, a1 + 18, a5, 1u);
  v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[15] - a1[14]) >> 2);
  v18 = (uint64_t)(a1[1] - *a1) >> 2;
  v19 = ((a1[19] - a1[18]) >> 3);
  v21 = *a6;
  v20 = a6[1];
  v22 = v20 - *a6;
  v23 = v19 - v22;
  if (v19 > v22)
  {
    v156 = (uint64_t)(a1[1] - *a1) >> 2;
    v24 = a6[2];
    if (v24 - v20 >= v23)
    {
      bzero(v20, v19 - v22);
      a6[1] = &v20[v23];
LABEL_35:
      LODWORD(v18) = v156;
      goto LABEL_36;
    }
    v153 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[15] - a1[14]) >> 2);
    v25 = v24 - v21;
    v26 = 2 * v25;
    if (2 * v25 <= v19)
      v26 = ((a1[19] - a1[18]) >> 3);
    if (v25 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    v28 = (char *)operator new(v27);
    v17 = (unint64_t)&v28[v27];
    v152 = &v28[v19];
    v29 = &v28[v22];
    bzero(&v28[v22], v23);
    if (v20 == v21)
    {
      LODWORD(v18) = v156;
      v28 += v22;
      v30 = v152;
LABEL_33:
      *a6 = v28;
      a6[1] = v30;
      a6[2] = (char *)v17;
      LODWORD(v17) = v153;
      if (!v21)
        goto LABEL_36;
      operator delete(v21);
      goto LABEL_35;
    }
    if (v22 < 8)
    {
      LODWORD(v18) = v156;
      v30 = v152;
      goto LABEL_31;
    }
    LODWORD(v18) = v156;
    v30 = v152;
    if ((unint64_t)(v21 - v28) >= 0x20)
    {
      if (v22 < 0x20)
      {
        v31 = 0;
        goto LABEL_26;
      }
      v31 = v22 & 0xFFFFFFFFFFFFFFE0;
      v32 = v20 - 16;
      v33 = &v28[v20 - 16 - v21];
      v34 = v22 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v35 = *(_OWORD *)v32;
        *((_OWORD *)v33 - 1) = *((_OWORD *)v32 - 1);
        *(_OWORD *)v33 = v35;
        v33 -= 32;
        v32 -= 32;
        v34 -= 32;
      }
      while (v34);
      if (v22 == v31)
        goto LABEL_33;
      if ((v22 & 0x18) != 0)
      {
LABEL_26:
        v29 -= v22 & 0xFFFFFFFFFFFFFFF8;
        v36 = &v20[-v31 - 8];
        v37 = v36 - v21;
        v38 = v31 - (v22 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v39 = *(_QWORD *)v36;
          v36 -= 8;
          *(_QWORD *)&v28[v37] = v39;
          v37 -= 8;
          v38 += 8;
        }
        while (v38);
        v20 -= v22 & 0xFFFFFFFFFFFFFFF8;
        if (v22 == (v22 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_33;
        goto LABEL_31;
      }
      v29 -= v31;
      v20 -= v31;
    }
LABEL_31:
    v40 = v29 - 1;
    do
    {
      v41 = *--v20;
      *v40-- = v41;
    }
    while (v20 != v21);
    goto LABEL_33;
  }
  if (v19 < v22)
    a6[1] = &v21[v19];
LABEL_36:
  v42 = -1431655765 * v18;
  v43 = v17;
  v45 = *(char **)a7;
  v44 = *(char **)(a7 + 8);
  v46 = (unint64_t)&v44[-*(_QWORD *)a7];
  v47 = v17 - v46;
  v161 = a6;
  if (v17 > v46)
  {
    v48 = *(_QWORD *)(a7 + 16);
    if (v48 - (uint64_t)v44 >= v47)
    {
      bzero(v44, v17 - v46);
      *(_QWORD *)(a7 + 8) = &v44[v47];
      v55 = a8;
      goto LABEL_66;
    }
    v157 = -1431655765 * v18;
    v49 = v48 - (_QWORD)v45;
    v50 = 2 * v49;
    if (2 * v49 <= v17)
      v50 = v17;
    if (v49 >= 0x3FFFFFFFFFFFFFFFLL)
      v51 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v51 = v50;
    v52 = operator new(v51);
    v53 = &v52[v51];
    v154 = &v52[v43];
    v54 = &v52[v46];
    bzero(&v52[v46], v47);
    if (v44 == v45)
    {
      v55 = a8;
      v52 += v46;
      v56 = v154;
      goto LABEL_64;
    }
    if (v46 < 8)
    {
      v55 = a8;
      v56 = v154;
      goto LABEL_62;
    }
    v55 = a8;
    v56 = v154;
    if ((unint64_t)(v45 - v52) >= 0x20)
    {
      if (v46 < 0x20)
      {
        v57 = 0;
        goto LABEL_57;
      }
      v57 = v46 & 0xFFFFFFFFFFFFFFE0;
      v58 = v44 - 16;
      v59 = &v52[v44 - 16 - v45];
      v60 = v46 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v61 = *(_OWORD *)v58;
        *(v59 - 1) = *((_OWORD *)v58 - 1);
        *v59 = v61;
        v59 -= 2;
        v58 -= 32;
        v60 -= 32;
      }
      while (v60);
      if (v46 == v57)
        goto LABEL_64;
      if ((v46 & 0x18) != 0)
      {
LABEL_57:
        v54 -= v46 & 0xFFFFFFFFFFFFFFF8;
        v62 = &v44[-v57 - 8];
        v63 = v62 - v45;
        v64 = v57 - (v46 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v65 = *(_QWORD *)v62;
          v62 -= 8;
          *(_QWORD *)&v52[v63] = v65;
          v63 -= 8;
          v64 += 8;
        }
        while (v64);
        v44 -= v46 & 0xFFFFFFFFFFFFFFF8;
        if (v46 != (v46 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_62;
LABEL_64:
        *(_QWORD *)a7 = v52;
        *(_QWORD *)(a7 + 8) = v56;
        *(_QWORD *)(a7 + 16) = v53;
        v42 = v157;
        if (v45)
          operator delete(v45);
        goto LABEL_66;
      }
      v54 -= v57;
      v44 -= v57;
    }
LABEL_62:
    v66 = v54 - 1;
    do
    {
      v67 = *--v44;
      *v66-- = v67;
    }
    while (v44 != v45);
    goto LABEL_64;
  }
  v55 = a8;
  if (v17 < v46)
    *(_QWORD *)(a7 + 8) = &v45[v17];
LABEL_66:
  v68 = a7;
  v69 = v42;
  v70 = v42;
  v71 = (char *)*v55;
  v72 = (char *)v55[1];
  v73 = (unint64_t)&v72[-*v55];
  v74 = v70 >= v73;
  v75 = v70 - v73;
  if (v70 <= v73)
  {
    v87 = v162;
    v88 = v163;
    v82 = v69;
    v83 = v68;
    v84 = (void **)v161;
    v89 = (unsigned int **)(a1 + 18);
    if (!v74)
      v55[1] = &v71[v70];
  }
  else
  {
    v76 = v55[2];
    if (v76 - (uint64_t)v72 >= v75)
    {
      bzero((void *)v55[1], v70 - v73);
      v55[1] = &v72[v75];
      v87 = v162;
      v88 = v163;
      v82 = v69;
      v83 = v68;
      v84 = (void **)v161;
      v89 = (unsigned int **)(a1 + 18);
      goto LABEL_97;
    }
    v77 = v76 - (_QWORD)v71;
    v78 = 2 * v77;
    if (2 * v77 <= v70)
      v78 = v70;
    if (v77 >= 0x3FFFFFFFFFFFFFFFLL)
      v79 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v79 = v78;
    v80 = operator new(v79);
    v158 = &v80[v79];
    v155 = &v80[v70];
    v81 = &v80[v73];
    bzero(&v80[v73], v70 - v73);
    if (v72 != v71)
    {
      if (v73 < 8)
      {
        v82 = v69;
        v83 = v68;
        v84 = (void **)v161;
        v86 = &v80[v70];
        v85 = v158;
        goto LABEL_93;
      }
      v82 = v69;
      v83 = v68;
      v84 = (void **)v161;
      v86 = &v80[v70];
      v85 = v158;
      if ((unint64_t)(v71 - v80) >= 0x20)
      {
        if (v73 < 0x20)
        {
          v90 = 0;
          goto LABEL_88;
        }
        v90 = v73 & 0xFFFFFFFFFFFFFFE0;
        v91 = v72 - 16;
        v92 = &v80[v72 - 16 - v71];
        v93 = v73 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v94 = *(_OWORD *)v91;
          *(v92 - 1) = *((_OWORD *)v91 - 1);
          *v92 = v94;
          v92 -= 2;
          v91 -= 32;
          v93 -= 32;
        }
        while (v93);
        if (v73 == v90)
          goto LABEL_95;
        if ((v73 & 0x18) != 0)
        {
LABEL_88:
          v81 -= v73 & 0xFFFFFFFFFFFFFFF8;
          v95 = &v72[-v90 - 8];
          v96 = v95 - v71;
          v97 = v90 - (v73 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v98 = *(_QWORD *)v95;
            v95 -= 8;
            *(_QWORD *)&v80[v96] = v98;
            v96 -= 8;
            v97 += 8;
          }
          while (v97);
          v72 -= v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 != (v73 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_93;
LABEL_95:
          v101 = v80;
          v89 = (unsigned int **)(a1 + 18);
          v87 = v162;
          v88 = v163;
          *a8 = v101;
          a8[1] = v86;
          v55 = a8;
          a8[2] = v85;
          if (!v71)
            goto LABEL_97;
          goto LABEL_96;
        }
        v81 -= v90;
        v72 -= v90;
      }
LABEL_93:
      v99 = v81 - 1;
      do
      {
        v100 = *--v72;
        *v99-- = v100;
      }
      while (v72 != v71);
      goto LABEL_95;
    }
    v89 = (unsigned int **)(a1 + 18);
    v87 = v162;
    v82 = v69;
    v83 = v68;
    v84 = (void **)v161;
    v88 = v163;
    *a8 = v81;
    a8[1] = v155;
    v55 = a8;
    a8[2] = v158;
    if (v71)
LABEL_96:
      operator delete(v71);
  }
LABEL_97:
  v102 = (_BYTE *)v84[1] - (_BYTE *)*v84;
  if (v102 >= 1)
    memset(*v84, 1, v102);
  v103 = *(_QWORD *)(v83 + 8) - *(_QWORD *)v83;
  if (v103 >= 1)
    memset(*(void **)v83, 1, v103);
  v104 = v55[1] - *v55;
  if (v104 >= 1)
    memset((void *)*v55, 1, v104);
  sub_223CE2C6C(v89, v82, v87);
  v108 = v88[1];
  if (!v108)
  {
    sub_223A6BE84((uint64_t)v88, v70, 0);
    v108 = v88[1];
    if (v108 >= 1)
    {
      v109 = 0;
      v110 = (_QWORD *)*v88;
      v111 = v108 + 1;
      do
      {
        *v110 &= ~(1 << v109);
        v110 += v109 == 63;
        if (v109 == 63)
          v109 = 0;
        else
          ++v109;
        --v111;
      }
      while (v111 > 1);
      v108 = v88[1];
    }
  }
  if (v108 != v70
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 64, (uint64_t)"is_vertex_feature.size() == num_verts", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_156;
  }
  v112 = a1[9];
  v113 = a1[15] - a1[14];
  v114 = -1431655765 * (v113 >> 2);
  v115 = a1[10];
  v116 = 0xAAAAAAAAAAAAAAABLL * ((v115 - v112) >> 2);
  if (v114 > v116)
  {
    sub_22317EF30((uint64_t)(a1 + 9), v114 - v116);
LABEL_118:
    v117 = 0;
    do
    {
      v119 = (unsigned int *)(a1[14] + v117);
      v120 = *a1 + 12 * *v119;
      v121 = *a1 + 12 * v119[1];
      v105.i64[0] = *(_QWORD *)v121;
      v105.i32[2] = *(_DWORD *)(v121 + 8);
      v122 = *a1 + 12 * v119[2];
      v106.i64[0] = *(_QWORD *)v120;
      v106.i32[2] = *(_DWORD *)(v120 + 8);
      v123 = (int8x16_t)vsubq_f32((float32x4_t)v105, v106);
      v107.i64[0] = *(_QWORD *)v122;
      v107.i32[2] = *(_DWORD *)(v122 + 8);
      v124 = (int8x16_t)vsubq_f32(v107, v106);
      v107 = (float32x4_t)vextq_s8(vextq_s8(v123, v123, 0xCuLL), v123, 8uLL);
      v105 = (int8x16_t)vmlsq_f32(vmulq_f32(v107, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v124, (int32x4_t)v124), v124, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v123, (int32x4_t)v123), v123, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v124, v124, 0xCuLL), v124, 8uLL));
      v125 = (float32x2_t)vextq_s8(v105, v105, 8uLL).u64[0];
      *(float32x2_t *)v107.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v105.i8, *(float32x2_t *)v105.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v105.i8, 1), *(float32x2_t *)v105.i8, 1), v125, v125);
      v106 = 0uLL;
      if (v107.f32[0] > 1.0e-13)
      {
        v106.f32[0] = sqrtf(v107.f32[0]);
        v106 = vdivq_f32((float32x4_t)v105, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 0));
      }
      v118 = a1[9] + v117;
      *(_QWORD *)v118 = v106.i64[0];
      *(_DWORD *)(v118 + 8) = v106.i32[2];
      v117 += 12;
      --v114;
    }
    while (v114);
    v112 = a1[9];
    v115 = a1[10];
    v113 = a1[15] - a1[14];
    goto LABEL_123;
  }
  if (v114 < v116)
  {
    v115 = v112 + 12 * v114;
    a1[10] = v115;
  }
  if (-1431655765 * (v113 >> 2))
    goto LABEL_118;
LABEL_123:
  if (v115 - v112 != v113
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 80, (uint64_t)"mesh.normals.size() == mesh.faces.size()", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_156;
  }
  v126 = (unsigned int *)a1[18];
  v127 = (unsigned int *)a1[19];
  if (v126 != v127)
  {
    v128 = 0;
    v129 = *v160;
    v130 = *v159;
    v131 = a1[14];
    v132 = (unsigned int *)a1[18];
    v133 = a1[9];
    do
    {
      v134 = v128 >> 6;
      v135 = 1 << v128;
      v136 = *(_QWORD *)(v129 + 8 * (v128 >> 6));
      if ((v136 & (1 << v128)) == 0)
      {
        v165 = 0;
        v137 = v130 + 24 * *v132;
        v138 = *(_DWORD **)v137;
        v139 = *(_DWORD **)(v137 + 8);
        if (v138 != v139)
        {
          v140 = v132[1];
          v141 = a1[30];
          if (v141 == a1[31])
          {
            v142 = 0;
            do
            {
              v143 = (_DWORD *)(v131 + 12 * *v138);
              if (*v143 == v140 || v143[1] == v140 || v143[2] == v140)
              {
                if (v142 <= 1)
                  *((_DWORD *)&v165 + v142) = *v138;
                ++v142;
              }
              ++v138;
            }
            while (v138 != v139);
          }
          else
          {
            v144 = 0;
            v142 = 0;
            do
            {
              v145 = *v138;
              v146 = (_DWORD *)(v131 + 12 * v145);
              if (*v146 == v140 || v146[1] == v140 || v146[2] == v140)
              {
                if (v142 <= 1)
                {
                  *((_DWORD *)&v165 + v142) = v145;
                  v144 = v165;
                }
                ++v142;
                if (*(unsigned __int8 *)(v141 + v145) != *(unsigned __int8 *)(v141 + v144))
                {
                  v136 |= v135;
                  *(_QWORD *)(v129 + 8 * v134) = v136;
                }
              }
              ++v138;
            }
            while (v138 != v139);
          }
          if (v142 == 2)
          {
            v147 = (float32x2_t *)(v133 + 12 * v165);
            v148 = (float32x2_t *)(v133 + 12 * HIDWORD(v165));
            v106.i32[0] = v147[1].i32[0];
            v107.i32[0] = v148[1].i32[0];
            if (vmla_f32(vmla_lane_f32(vmul_f32(*v147, *v148), (float32x2_t)vdup_lane_s32((int32x2_t)*v148, 1), *v147, 1), *(float32x2_t *)v107.f32, *(float32x2_t *)v106.f32).f32[0] <= -0.99)*(_QWORD *)(v129 + 8 * v134) = v136 | v135;
          }
        }
      }
      v132 += 2;
      ++v128;
    }
    while (v132 != v127);
    v149 = 0;
    v150 = (_QWORD *)*v88;
    do
    {
      if (((*(_QWORD *)(v129 + ((v149 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v149) & 1) != 0)
      {
        v151 = v126[1];
        *(_QWORD *)((char *)v150 + (((unint64_t)*v126 >> 3) & 0x1FFFFFF8)) |= 1 << *v126;
        *(_QWORD *)((char *)v150 + ((v151 >> 3) & 0x1FFFFFF8)) |= 1 << v151;
      }
      v126 += 2;
      ++v149;
    }
    while (v126 != v127);
  }
}

uint64_t sub_223CD6CD8(unsigned int a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, double a9, double a10, float32x4_t a11, float32x4_t a12, double a13, float32x2_t a14, uint64_t *a15)
{
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  int v27;
  uint64_t v28;
  int8x16_t v29;
  float v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x2_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  float v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t *v43;
  float32x2_t v44;

  v23 = a1;
  if (*(_BYTE *)(*a6 + a1) != 1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 132, (uint64_t)"vertex_state[vertex_idx] == kClean", 34, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| a15[10] - a15[9] != a15[15] - a15[14]&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 133, (uint64_t)"mesh.normals.size() == mesh.faces.size()", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (((*(_QWORD *)(*a3 + ((v23 >> 3) & 0x1FFFFFF8)) >> v23) & 1) != 0)
  {
    v24 = *a4 + 24 * v23;
    v25 = *(unsigned int **)v24;
    v26 = *(unsigned int **)(v24 + 8);
    if (*(unsigned int **)v24 != v26)
    {
      v27 = 0;
      v28 = a15[18];
      v29 = 0uLL;
      v30 = 0.0;
      v31 = -1;
      v32 = *a15;
      do
      {
        v33 = *v25;
        if (((*(_QWORD *)(*a2 + ((v33 >> 3) & 0x1FFFFFF8)) >> v33) & 1) != 0)
        {
          v34 = v32 + 12 * *(unsigned int *)(v28 + 8 * v33 + 4);
          v35 = v32 + 12 * *(unsigned int *)(v28 + 8 * v33);
          a11.i64[0] = *(_QWORD *)v34;
          a11.i32[2] = *(_DWORD *)(v34 + 8);
          a12.i64[0] = *(_QWORD *)v35;
          a12.i32[2] = *(_DWORD *)(v35 + 8);
          a11 = vsubq_f32(a11, a12);
          v36 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a11.f32, 1);
          a12 = (float32x4_t)vextq_s8((int8x16_t)a11, (int8x16_t)a11, 8uLL);
          if (v27)
          {
            a14 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a11.f32, *(float32x2_t *)v29.i8), v36, *(float32x2_t *)v29.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), *(float32x2_t *)a12.f32);
            if (vmul_f32(a14, a14).f32[0] < (float)((float)(v30
                                                           * vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)a11.f32, *(float32x2_t *)a11.f32), v36, v36), *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32).f32[0])* 0.999))return 0;
            v27 = 1;
            v31 = *v25;
          }
          else
          {
            LODWORD(v30) = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)a11.f32, *(float32x2_t *)a11.f32), v36, v36), *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32).u32[0];
            v27 = 1;
            v29 = (int8x16_t)a11;
          }
        }
        ++v25;
      }
      while (v25 != v26);
      if (v31 != -1)
      {
        v37 = *a5 + 24 * v23;
        v38 = *(unsigned int **)v37;
        v39 = *(unsigned int **)(v37 + 8);
        if (v38 == v39)
        {
LABEL_19:
          sub_223CD6F98(v31, (uint64_t *)(v32 + 12 * *(unsigned int *)(v28 + 8 * v31 + 4 * (*(_DWORD *)(v28 + 8 * v31) == a1))), a4, a5, a3, a6, a8, a7, a15, *(_DWORD *)(v28 + 8 * v31) == a1);
          return 1;
        }
        v40 = v30 * 0.001;
        v41 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1);
        v42 = (float32x2_t)vextq_s8(v29, v29, 8uLL).u64[0];
        while (1)
        {
          v43 = (float32x2_t *)(a15[9] + 12 * *v38);
          a14.i32[0] = v43[1].i32[0];
          v44 = vmla_f32(vmla_lane_f32(vmul_f32(*v43, *(float32x2_t *)v29.i8), v41, *v43, 1), v42, a14);
          if (vmul_f32(v44, v44).f32[0] > v40)
            break;
          if (++v38 == v39)
            goto LABEL_19;
        }
      }
    }
  }
  return 0;
}

void sub_223CD6F98(unsigned int a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, unsigned __int8 a10)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t v23;
  __int32 *v24;
  __int32 *v25;
  __int32 **v26;
  __int32 *v27;
  __int32 *v28;
  __int32 *v29;
  uint64_t v30;
  __int32 *v31;
  __int32 **v32;
  __int32 *v33;
  __int32 *v34;
  __int32 *v35;
  __int32 *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  size_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  unsigned int *v58;
  char *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  _DWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  char *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  _DWORD *v88;
  int64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  _OWORD *v95;
  char *v96;
  uint64_t v97;
  __int128 v98;
  int v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  uint64_t v107;
  uint64_t *v108;
  char *v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  _BYTE *v118;
  _DWORD *v119;
  int64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  _OWORD *v126;
  char *v127;
  uint64_t v128;
  __int128 v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  float v134;
  char *v137;
  unsigned int *v138;
  unint64_t v141;
  unint64_t v143;
  unsigned int *v147;
  char *v148;

  v10 = a9[18] + 8 * a1;
  v11 = *(unsigned int *)(v10 + 4 * (a10 ^ 1u));
  v12 = *(unsigned int *)(v10 + 4 * a10);
  v13 = *a4 + 24 * v11;
  v15 = *(unsigned int **)v13;
  v14 = *(unsigned int **)(v13 + 8);
  if (*(unsigned int **)v13 != v14)
  {
    do
    {
      v16 = *v15;
      v17 = (unsigned int *)(a9[14] + 12 * v16);
      v19 = *v17;
      v18 = v17[1];
      if (v19 == v12)
        goto LABEL_9;
      if (v18 != v12 && v17[2] != v12)
        goto LABEL_4;
      if (v19 == v11)
      {
LABEL_9:
        v20 = v18 == v11 || v18 == v12;
        LODWORD(v19) = v17[1];
        if (v20)
        {
          v19 = v17[2];
          v21 = v19 == v11 || v19 == v12;
          if (v21
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 286, (uint64_t)"face[2] != v0 && face[2] != v1", 30, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
LABEL_143:
            abort();
          }
        }
      }
      v22 = a4;
      v23 = *a4 + 24 * v19;
      v24 = *(__int32 **)v23;
      v27 = *(__int32 **)(v23 + 8);
      v26 = (__int32 **)(v23 + 8);
      v25 = v27;
      v28 = wmemchr(v24, v16, v27 - v24);
      if (v28)
        v25 = v28;
      v29 = *v26;
      if (v25 == *v26)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 393, (uint64_t)"face_pos != face_list.end()", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_143;
        }
        v29 = *v26;
        v22 = a4;
      }
      *v25 = *(v29 - 1);
      *v26 = v29 - 1;
      v30 = *v22 + 24 * v12;
      v31 = *(__int32 **)v30;
      v34 = *(__int32 **)(v30 + 8);
      v32 = (__int32 **)(v30 + 8);
      v33 = v34;
      v35 = wmemchr(v31, v16, v34 - v31);
      if (v35)
        v33 = v35;
      v36 = *v32;
      if (v33 == *v32)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 393, (uint64_t)"face_pos != face_list.end()", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_143;
        }
        v36 = *v32;
      }
      *v33 = *(v36 - 1);
      *v32 = v36 - 1;
      *(_BYTE *)(*a7 + v16) = 0;
LABEL_4:
      ++v15;
    }
    while (v15 != v14);
  }
  v37 = (uint64_t *)(*a3 + 24 * v11);
  v39 = v37[1];
  v38 = v37 + 1;
  v148 = 0;
  v40 = v39 - *v37;
  if (v39 == *v37)
  {
    v41 = 0;
  }
  else
  {
    if ((v40 & 0x8000000000000000) != 0)
      sub_22316E078();
    v41 = (char *)operator new(v40);
    bzero(v41, v40);
    v40 += (size_t)v41;
    v148 = (char *)v40;
    v42 = *v37;
    v43 = *v38;
    if (*v37 != *v38)
    {
      v44 = 0;
      v45 = a9[18];
      do
      {
        v46 = (_DWORD *)(v45 + 8 * *(unsigned int *)(v42 + v44));
        *(_DWORD *)&v41[v44] = v46[*v46 == v11];
        v44 += 4;
      }
      while (v42 + v44 != v43);
    }
  }
  v137 = v41;
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v47 = *a3;
  v48 = *a3 + 24 * v12;
  v49 = *(_DWORD **)v48;
  v50 = *(_DWORD **)(v48 + 8);
  if ((char *)v40 != v41 && v49 != v50)
  {
    do
    {
      v53 = a9[18];
      if (v148 != v41)
      {
        v54 = *(_DWORD *)(v53 + 8 * *v49 + 4 * (*(_DWORD *)(v53 + 8 * *v49) == v12));
        v55 = (v148 - v41) >> 2;
        v56 = v41;
        do
        {
          v57 = v55 >> 1;
          v58 = (unsigned int *)&v56[4 * (v55 >> 1)];
          v60 = *v58;
          v59 = (char *)(v58 + 1);
          v55 += ~(v55 >> 1);
          if (v60 < v54)
            v56 = v59;
          else
            v55 = v57;
        }
        while (v55);
        if (v56 != v148 && v54 >= *(_DWORD *)v56)
        {
          v61 = *a3;
          v62 = *a3 + 24 * v54;
          v63 = *(_DWORD **)v62;
          v64 = *(_DWORD **)(v62 + 8);
          if (*(_DWORD **)v62 != v64)
          {
            while (1)
            {
              v65 = (_DWORD *)(v53 + 8 * *v63);
              if (*v65 == v11 || v65[1] == v11)
                break;
              if (++v63 == v64)
              {
                v51 = (_QWORD *)(v61 + 24 * v54 + 8);
                goto LABEL_56;
              }
            }
          }
          v51 = (_QWORD *)(v61 + 24 * v54 + 8);
          if (v63 == v64)
          {
LABEL_56:
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 381, (uint64_t)"edge_iter != edge_list.end()", 28, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v63 = v64;
            v64 = (_DWORD *)*v51;
          }
          v52 = *v63;
          *v63 = *(v64 - 1);
          *v51 = v64 - 1;
          *(_BYTE *)(*a8 + v52) = 0;
          v41 = v137;
        }
      }
      ++v49;
    }
    while (v49 != v50);
    v47 = *a3;
    v66 = *a3 + 24 * v12;
    v49 = *(_DWORD **)v66;
    v50 = *(_DWORD **)(v66 + 8);
  }
  v67 = (_QWORD *)(v47 + 24 * v12 + 8);
  if (v49 == v50)
    goto LABEL_65;
  while (1)
  {
    v68 = (_DWORD *)(a9[18] + 8 * *v49);
    if (*v68 == v11 || v68[1] == v11)
      break;
    if (++v49 == v50)
      goto LABEL_65;
  }
  if (v49 == v50)
  {
LABEL_65:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 381, (uint64_t)"edge_iter != edge_list.end()", 28, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v49 = v50;
    v50 = (_DWORD *)*v67;
  }
  *v49 = *(v50 - 1);
  *v67 = v50 - 1;
  *(_BYTE *)(*a6 + v11) = 0;
  *(_BYTE *)(*a8 + a1) = 0;
  v69 = a4;
  v70 = *a4 + 24 * v11;
  v72 = *(unsigned int **)v70;
  v71 = *(unsigned int **)(v70 + 8);
  v141 = v12;
  v143 = v11;
  if (*(unsigned int **)v70 != v71)
  {
    v138 = *(unsigned int **)(v70 + 8);
    do
    {
      v74 = *v72;
      if (!*(_BYTE *)(*a7 + v74))
        goto LABEL_71;
      v75 = (_DWORD *)(a9[14] + 12 * v74);
      if (*v75 == v11)
      {
        *v75 = v12;
        if (v75[1] != v11)
        {
LABEL_75:
          if (v75[2] != v11)
            goto LABEL_77;
LABEL_76:
          v75[2] = v12;
          goto LABEL_77;
        }
      }
      else if (v75[1] != v11)
      {
        goto LABEL_75;
      }
      v75[1] = v12;
      if (v75[2] == v11)
        goto LABEL_76;
LABEL_77:
      v76 = *v69 + 24 * v12;
      v77 = (uint64_t *)(v76 + 8);
      v78 = *(char **)(v76 + 8);
      v79 = *(_QWORD *)(v76 + 16);
      if ((unint64_t)v78 >= v79)
      {
        v80 = *(char **)v76;
        v81 = (uint64_t)&v78[-*(_QWORD *)v76];
        v82 = v81 >> 2;
        v83 = (v81 >> 2) + 1;
        if (v83 >> 62)
          sub_22316E078();
        v84 = v79 - (_QWORD)v80;
        if (v84 >> 1 > v83)
          v83 = v84 >> 1;
        if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
          v85 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v85 = v83;
        if (v85)
        {
          if (v85 >> 62)
            sub_223174E94();
          v86 = v85;
          v87 = operator new(4 * v85);
          v85 = v86;
          v88 = &v87[4 * v82];
          *v88 = v74;
          v73 = (uint64_t)(v88 + 1);
          v89 = v78 - v80;
          if (v78 != v80)
          {
LABEL_87:
            v90 = v89 - 4;
            if (v90 < 0x2C)
            {
              v11 = v143;
              goto LABEL_98;
            }
            v91 = v78 - v87 - v81;
            v11 = v143;
            if (v91 < 0x20)
              goto LABEL_153;
            v92 = (v90 >> 2) + 1;
            v93 = 4 * (v92 & 0x7FFFFFFFFFFFFFF8);
            v94 = &v78[-v93];
            v88 = (_DWORD *)((char *)v88 - v93);
            v95 = &v87[4 * v82 - 16];
            v96 = v78 - 16;
            v97 = v92 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v98 = *(_OWORD *)v96;
              *(v95 - 1) = *((_OWORD *)v96 - 1);
              *v95 = v98;
              v95 -= 2;
              v96 -= 32;
              v97 -= 8;
            }
            while (v97);
            v78 = v94;
            if (v92 != (v92 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_153:
              do
              {
LABEL_98:
                v99 = *((_DWORD *)v78 - 1);
                v78 -= 4;
                *--v88 = v99;
              }
              while (v78 != v80);
            }
LABEL_99:
            *(_QWORD *)v76 = v88;
            *v77 = v73;
            *(_QWORD *)(v76 + 16) = &v87[4 * v85];
            if (v80)
              operator delete(v80);
            v12 = v141;
            v69 = a4;
            v71 = v138;
            goto LABEL_70;
          }
        }
        else
        {
          v87 = 0;
          v88 = (_DWORD *)(4 * v82);
          *(_DWORD *)(4 * v82) = v74;
          v73 = 4 * v82 + 4;
          v89 = v78 - v80;
          if (v78 != v80)
            goto LABEL_87;
        }
        v11 = v143;
        goto LABEL_99;
      }
      *(_DWORD *)v78 = v74;
      v73 = (uint64_t)(v78 + 4);
LABEL_70:
      *v77 = v73;
LABEL_71:
      ++v72;
    }
    while (v72 != v71);
  }
  v100 = *a3 + 24 * v11;
  v102 = *(unsigned int **)v100;
  v101 = *(unsigned int **)(v100 + 8);
  v103 = a8;
  if (*(unsigned int **)v100 != v101)
  {
    v147 = *(unsigned int **)(v100 + 8);
    while (1)
    {
      v105 = *v102;
      if (!*(_BYTE *)(*v103 + v105))
        goto LABEL_106;
      v106 = (_DWORD *)(a9[18] + 8 * v105);
      if (*v106 == v11)
        *v106 = v12;
      if (v106[1] == v11)
        v106[1] = v12;
      v107 = *a3 + 24 * v12;
      v108 = (uint64_t *)(v107 + 8);
      v109 = *(char **)(v107 + 8);
      v110 = *(_QWORD *)(v107 + 16);
      if ((unint64_t)v109 >= v110)
        break;
      *(_DWORD *)v109 = v105;
      v104 = (uint64_t)(v109 + 4);
LABEL_105:
      *v108 = v104;
      v11 = v143;
LABEL_106:
      if (++v102 == v101)
        goto LABEL_134;
    }
    v111 = *(char **)v107;
    v112 = (uint64_t)&v109[-*(_QWORD *)v107];
    v113 = v112 >> 2;
    v114 = (v112 >> 2) + 1;
    if (v114 >> 62)
      sub_22316E078();
    v115 = v110 - (_QWORD)v111;
    if (v115 >> 1 > v114)
      v114 = v115 >> 1;
    if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
      v116 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v116 = v114;
    if (v116)
    {
      if (v116 >> 62)
        sub_223174E94();
      v117 = v116;
      v118 = operator new(4 * v116);
      v116 = v117;
      v119 = &v118[4 * v113];
      *v119 = v105;
      v104 = (uint64_t)(v119 + 1);
      v120 = v109 - v111;
      if (v109 != v111)
        goto LABEL_122;
    }
    else
    {
      v118 = 0;
      v119 = (_DWORD *)(4 * v113);
      *(_DWORD *)(4 * v113) = v105;
      v104 = 4 * v113 + 4;
      v120 = v109 - v111;
      if (v109 != v111)
      {
LABEL_122:
        v121 = v120 - 4;
        if (v121 >= 0x2C)
        {
          v122 = v109 - v118 - v112;
          v103 = a8;
          if (v122 >= 0x20)
          {
            v123 = (v121 >> 2) + 1;
            v124 = 4 * (v123 & 0x7FFFFFFFFFFFFFF8);
            v125 = &v109[-v124];
            v119 = (_DWORD *)((char *)v119 - v124);
            v126 = &v118[4 * v113 - 16];
            v127 = v109 - 16;
            v128 = v123 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v129 = *(_OWORD *)v127;
              *(v126 - 1) = *((_OWORD *)v127 - 1);
              *v126 = v129;
              v126 -= 2;
              v127 -= 32;
              v128 -= 8;
            }
            while (v128);
            v109 = v125;
            if (v123 == (v123 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_131;
          }
        }
        else
        {
          v103 = a8;
        }
        do
        {
          v130 = *((_DWORD *)v109 - 1);
          v109 -= 4;
          *--v119 = v130;
        }
        while (v109 != v111);
LABEL_131:
        *(_QWORD *)v107 = v119;
        *v108 = v104;
        *(_QWORD *)(v107 + 16) = &v118[4 * v116];
        if (v111)
          operator delete(v111);
        v12 = v141;
        v101 = v147;
        goto LABEL_105;
      }
    }
    v103 = a8;
    goto LABEL_131;
  }
LABEL_134:
  v131 = *a9 + 12 * v12;
  v132 = *a2;
  *(_DWORD *)(v131 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v131 = v132;
  v133 = a9[40];
  if (v133 != a9[41])
  {
    v134 = *(float *)(v133 + 4 * v12);
    if (v134 >= *(float *)(v133 + 4 * v11))
      v134 = *(float *)(v133 + 4 * v11);
    *(float *)(v133 + 4 * v12) = v134;
  }
  if (((*(_QWORD *)(*a5 + ((v11 >> 3) & 0x1FFFFFF8)) >> v11) & 1) != 0)
    *(_QWORD *)(*a5 + ((v12 >> 3) & 0x1FFFFFF8)) |= 1 << v12;
  if (v137)
    operator delete(v137);
}

