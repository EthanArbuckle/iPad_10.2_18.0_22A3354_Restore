void sub_22328837C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionAddOnMonitoringResultUpdateCallback(_QWORD *a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v6;
  uint64_t result;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  CFTypeRef v17;
  unint64_t *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  char *v21;
  __int128 v22;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  if (a1)
  {
    if (a2)
    {
      v6 = (std::__shared_weak_count *)operator new(0x20uLL);
      v6->__shared_owners_ = 0;
      v6->__shared_weak_owners_ = 0;
      v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC277F0;
      v6[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
      v19 = &v6[1].__vftable;
      v20 = v6;
      result = sub_2232E07A0(a1, (uint64_t *)&v19);
      v8 = result;
      v9 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          return v8;
        }
      }
      return result;
    }
    *(_QWORD *)__p = operator new(0x30uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C4530;
    strcpy(*(char **)__p, "Monitoring result update callback is NULL");
    v12 = (char *)operator new(0x70uLL);
    v21 = v12;
    v22 = xmmword_2245C45E0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
      goto LABEL_28;
    *(_QWORD *)&v26.__val_ = 22;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v17 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v17;
    v14 = v25;
    if (!v25)
      goto LABEL_26;
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v18);
    while (__stlxr(v16 - 1, v18));
  }
  else
  {
    __p[23] = 15;
    strcpy(__p, "Session is NULL");
    v12 = (char *)operator new(0x70uLL);
    v21 = v12;
    v22 = xmmword_2245C45E0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
    {
LABEL_28:
      operator delete(v12);
      goto LABEL_29;
    }
    *(_QWORD *)&v26.__val_ = 22;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v13 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v13;
    v14 = v25;
    if (!v25)
      goto LABEL_26;
    v15 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
  }
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_27;
  }
LABEL_26:
  if (SHIBYTE(v22) < 0)
  {
LABEL_27:
    v12 = v21;
    goto LABEL_28;
  }
LABEL_29:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_2232886E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionComputeGlobalMeshAsync(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  _BOOL8 v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeRef v15;
  unint64_t *v16;
  uint64_t v18[2];
  char *v19;
  __int128 v20;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  std::error_condition v24;

  if (a1)
  {
    if (a2)
    {
      v6 = (std::__shared_weak_count *)operator new(0x20uLL);
      v6->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      v6->__shared_weak_owners_ = 0;
      v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27840;
      v6[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
      v18[0] = (uint64_t)&v6[1];
      v18[1] = (uint64_t)v6;
      v8 = sub_2232DE7C0(a1, v18, a3);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      return v8;
    }
    *(_QWORD *)__p = operator new(0x28uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B8D40;
    strcpy(*(char **)__p, "Input global mesh callback is NULL");
    v10 = (char *)operator new(0x70uLL);
    v19 = v10;
    v20 = xmmword_2245C45E0;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
      goto LABEL_27;
    *(_QWORD *)&v24.__val_ = 22;
    v24.__cat_ = std::generic_category();
    sub_2245321DC(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v15 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v15;
    v12 = v23;
    if (!v23)
      goto LABEL_25;
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v16);
    while (__stlxr(v14 - 1, v16));
  }
  else
  {
    __p[23] = 15;
    strcpy(__p, "Session is NULL");
    v10 = (char *)operator new(0x70uLL);
    v19 = v10;
    v20 = xmmword_2245C45E0;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
    {
LABEL_27:
      operator delete(v10);
      goto LABEL_28;
    }
    *(_QWORD *)&v24.__val_ = 22;
    v24.__cat_ = std::generic_category();
    sub_2245321DC(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v11 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v11;
    v12 = v23;
    if (!v23)
      goto LABEL_25;
    v13 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
  }
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((SHIBYTE(v20) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_26;
  }
LABEL_25:
  if (SHIBYTE(v20) < 0)
  {
LABEL_26:
    v10 = v19;
    goto LABEL_27;
  }
LABEL_28:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223288A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionUsesLocalMeshCoordinates(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2232E25EC(a1, a2);
  v11 = 15;
  strcpy((char *)__p, "Session is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_223288C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionComputeOccupancyMeshAsync(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  _BOOL8 v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeRef v15;
  unint64_t *v16;
  uint64_t v18[2];
  char *v19;
  __int128 v20;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  std::error_condition v24;

  if (a1)
  {
    if (a2)
    {
      v6 = (std::__shared_weak_count *)operator new(0x20uLL);
      v6->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      v6->__shared_weak_owners_ = 0;
      v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27840;
      v6[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
      v18[0] = (uint64_t)&v6[1];
      v18[1] = (uint64_t)v6;
      v8 = sub_2232DE918(a1, v18, a3);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      return v8;
    }
    *(_QWORD *)__p = operator new(0x28uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B8D20;
    strcpy(*(char **)__p, "Input occupancy mesh callback is NULL");
    v10 = (char *)operator new(0x70uLL);
    v19 = v10;
    v20 = xmmword_2245C45E0;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
      goto LABEL_27;
    *(_QWORD *)&v24.__val_ = 22;
    v24.__cat_ = std::generic_category();
    sub_2245321DC(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v15 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v15;
    v12 = v23;
    if (!v23)
      goto LABEL_25;
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v16);
    while (__stlxr(v14 - 1, v16));
  }
  else
  {
    __p[23] = 15;
    strcpy(__p, "Session is NULL");
    v10 = (char *)operator new(0x70uLL);
    v19 = v10;
    v20 = xmmword_2245C45E0;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
    {
LABEL_27:
      operator delete(v10);
      goto LABEL_28;
    }
    *(_QWORD *)&v24.__val_ = 22;
    v24.__cat_ = std::generic_category();
    sub_2245321DC(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v11 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v11;
    v12 = v23;
    if (!v23)
      goto LABEL_25;
    v13 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
  }
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((SHIBYTE(v20) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_26;
  }
LABEL_25:
  if (SHIBYTE(v20) < 0)
  {
LABEL_26:
    v10 = v19;
    goto LABEL_27;
  }
LABEL_28:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223288F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionComputeGlobalOccupancyMeshAsync(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  _BOOL8 v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeRef v15;
  unint64_t *v16;
  uint64_t v18[2];
  char *v19;
  __int128 v20;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  std::error_condition v24;

  if (a1)
  {
    if (a2)
    {
      v6 = (std::__shared_weak_count *)operator new(0x20uLL);
      v6->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      v6->__shared_weak_owners_ = 0;
      v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27840;
      v6[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
      v18[0] = (uint64_t)&v6[1];
      v18[1] = (uint64_t)v6;
      v8 = sub_2232DEA70(a1, v18, a3);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      return v8;
    }
    *(_QWORD *)__p = operator new(0x30uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C43F0;
    strcpy(*(char **)__p, "Input global occupancy mesh callback is NULL");
    v10 = (char *)operator new(0x70uLL);
    v19 = v10;
    v20 = xmmword_2245C45E0;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
      goto LABEL_27;
    *(_QWORD *)&v24.__val_ = 22;
    v24.__cat_ = std::generic_category();
    sub_2245321DC(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v15 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v15;
    v12 = v23;
    if (!v23)
      goto LABEL_25;
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v16);
    while (__stlxr(v14 - 1, v16));
  }
  else
  {
    __p[23] = 15;
    strcpy(__p, "Session is NULL");
    v10 = (char *)operator new(0x70uLL);
    v19 = v10;
    v20 = xmmword_2245C45E0;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
    {
LABEL_27:
      operator delete(v10);
      goto LABEL_28;
    }
    *(_QWORD *)&v24.__val_ = 22;
    v24.__cat_ = std::generic_category();
    sub_2245321DC(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v11 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v11;
    v12 = v23;
    if (!v23)
      goto LABEL_25;
    v13 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
  }
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((SHIBYTE(v20) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_26;
  }
LABEL_25:
  if (SHIBYTE(v20) < 0)
  {
LABEL_26:
    v10 = v19;
    goto LABEL_27;
  }
LABEL_28:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223289250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionComputeOccupancyBlockMeshAsync(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  _BOOL8 v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeRef v15;
  unint64_t *v16;
  uint64_t v18[2];
  char *v19;
  __int128 v20;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  std::error_condition v24;

  if (a1)
  {
    if (a2)
    {
      v6 = (std::__shared_weak_count *)operator new(0x20uLL);
      v6->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      v6->__shared_weak_owners_ = 0;
      v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27840;
      v6[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
      v18[0] = (uint64_t)&v6[1];
      v18[1] = (uint64_t)v6;
      v8 = sub_2232DEBC8(a1, v18, a3);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      return v8;
    }
    *(_QWORD *)__p = operator new(0x30uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C76D0;
    strcpy(*(char **)__p, "Input occupancy block mesh callback is NULL");
    v10 = (char *)operator new(0x70uLL);
    v19 = v10;
    v20 = xmmword_2245C45E0;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
      goto LABEL_27;
    *(_QWORD *)&v24.__val_ = 22;
    v24.__cat_ = std::generic_category();
    sub_2245321DC(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v15 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v15;
    v12 = v23;
    if (!v23)
      goto LABEL_25;
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v16);
    while (__stlxr(v14 - 1, v16));
  }
  else
  {
    __p[23] = 15;
    strcpy(__p, "Session is NULL");
    v10 = (char *)operator new(0x70uLL);
    v19 = v10;
    v20 = xmmword_2245C45E0;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
    {
LABEL_27:
      operator delete(v10);
      goto LABEL_28;
    }
    *(_QWORD *)&v24.__val_ = 22;
    v24.__cat_ = std::generic_category();
    sub_2245321DC(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v11 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v11;
    v12 = v23;
    if (!v23)
      goto LABEL_25;
    v13 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
  }
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((SHIBYTE(v20) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_26;
  }
LABEL_25:
  if (SHIBYTE(v20) < 0)
  {
LABEL_26:
    v10 = v19;
    goto LABEL_27;
  }
LABEL_28:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22328958C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionHasPlanesCapability(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56);
    if (*(_QWORD *)(v2 + 40))
      return *(_QWORD *)(v2 + 56) != 0;
    return 0;
  }
  v12 = 15;
  strcpy((char *)__p, "Session is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if ((v12 & 0x80000000) == 0)
    return 0;
  operator delete(__p[0]);
  return 0;
}

void sub_223289790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionAddOnPlaneDetectionUpdateCallback(_QWORD *a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v6;
  uint64_t result;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  CFTypeRef v17;
  unint64_t *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  char *v21;
  __int128 v22;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  if (a1)
  {
    if (a2)
    {
      v6 = (std::__shared_weak_count *)operator new(0x20uLL);
      v6->__shared_owners_ = 0;
      v6->__shared_weak_owners_ = 0;
      v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27890;
      v6[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
      v19 = &v6[1].__vftable;
      v20 = v6;
      result = sub_2232E0370(a1, (uint64_t)&v19, a3);
      v8 = result;
      v9 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          return v8;
        }
      }
      return result;
    }
    *(_QWORD *)__p = operator new(0x28uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C65C0;
    strcpy(*(char **)__p, "Input plane update callback is NULL");
    v12 = (char *)operator new(0x70uLL);
    v21 = v12;
    v22 = xmmword_2245C45E0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
      goto LABEL_28;
    *(_QWORD *)&v26.__val_ = 22;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v17 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v17;
    v14 = v25;
    if (!v25)
      goto LABEL_26;
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v18);
    while (__stlxr(v16 - 1, v18));
  }
  else
  {
    __p[23] = 15;
    strcpy(__p, "Session is NULL");
    v12 = (char *)operator new(0x70uLL);
    v21 = v12;
    v22 = xmmword_2245C45E0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
    {
LABEL_28:
      operator delete(v12);
      goto LABEL_29;
    }
    *(_QWORD *)&v26.__val_ = 22;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v13 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v13;
    v14 = v25;
    if (!v25)
      goto LABEL_26;
    v15 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
  }
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_27;
  }
LABEL_26:
  if (SHIBYTE(v22) < 0)
  {
LABEL_27:
    v12 = v21;
    goto LABEL_28;
  }
LABEL_29:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223289AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPlaneDetectionUpdateRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 384);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconPlaneDetectionUpdateRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 384);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DReconPlaneDetectionUpdateTimestamp(uint64_t a1, double *a2)
{
  uint64_t result;
  uint64_t v4;

  result = 0;
  if (a1 && a2)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      *a2 = (double)v4 / 1000000000.0;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *CV3DReconPlaneDetectionUpdateUpdatedPlanes(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (result)
  {
    v1 = result;
    v2 = (std::__shared_weak_count *)operator new(0x30uLL);
    v2->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    v2[1].__vftable = 0;
    v2->__shared_weak_owners_ = 0;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26D20;
    v2[1].__shared_owners_ = 0;
    v2[1].__shared_weak_owners_ = 0;
    sub_22324A664((uint64_t)&v2[1], v1[2], v1[3], 0x34F72C234F72C235 * ((uint64_t)(v1[3] - v1[2]) >> 4));
    result = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
    if (result)
    {
      result[1] = v2 + 1;
      result[2] = v2;
      *((_DWORD *)result + 6) = 1;
      *result = &off_24EC2BFA0;
    }
    else
    {
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
      return 0;
    }
  }
  return result;
}

void sub_223289CBC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPlaneDetectionUpdateGetUpdatedPlanes(uint64_t a1)
{
  if (a1)
    return a1 + 8;
  else
    return 0;
}

CFTypeRef CV3DReconPlaneDetectionUpdateRemovedPlaneUUIDs(uint64_t a1)
{
  CFUUIDBytes **v1;
  uint64_t v2;
  uint64_t v3;
  CFTypeRef v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  CFTypeRef cf;
  std::__shared_weak_count *v10;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v1 = (CFUUIDBytes **)(a1 + 40);
  if (v2 == v3)
    return 0;
  sub_223279DE0(v1, (CFMutableArrayRef *)&cf);
  v4 = cf;
  if (cf)
    CFRetain(cf);
  v5 = v10;
  if (!v10)
    return v4;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return v4;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return v4;
}

void sub_223289D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

CFTypeRef CV3DReconPlaneDetectionRestoredPlaneUUIDs(uint64_t a1)
{
  CFUUIDBytes **v1;
  uint64_t v2;
  uint64_t v3;
  CFTypeRef v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  CFTypeRef cf;
  std::__shared_weak_count *v10;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v1 = (CFUUIDBytes **)(a1 + 64);
  if (v2 == v3)
    return 0;
  sub_223279DE0(v1, (CFMutableArrayRef *)&cf);
  v4 = cf;
  if (cf)
    CFRetain(cf);
  v5 = v10;
  if (!v10)
    return v4;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return v4;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return v4;
}

void sub_223289E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

CFTypeRef CV3DReconSessionCopyListOfChunkUUIDInBoundingBox(uint64_t a1, CFTypeRef *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  void *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  CFTypeRef cf;
  __int128 v20;
  void *__p[2];
  char v22;
  CFTypeRef v23;
  std::__shared_weak_count *v24;
  std::error_condition v25;

  if (!a1)
  {
    v22 = 15;
    strcpy((char *)__p, "Session is NULL");
    v14 = operator new(0x70uLL);
    cf = v14;
    v20 = xmmword_2245C45E0;
    strcpy((char *)v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v25.__val_ = 22;
      v25.__cat_ = std::generic_category();
      sub_2245321DC(&v25, (uint64_t)__p, (CFErrorRef *)&v23);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v15 = v23;
      if (v23)
        CFRetain(v23);
      *a2 = v15;
      v16 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if ((SHIBYTE(v20) & 0x80000000) == 0)
        goto LABEL_25;
      v14 = (void *)cf;
    }
    operator delete(v14);
LABEL_25:
    if (v22 < 0)
      operator delete(__p[0]);
    return 0;
  }
  sub_2232E2818(a1, a2, __p, a3, a4, a5, a6, a7);
  v8 = __p[0];
  if (__p[0] == __p[1])
  {
    v9 = 0;
    if (!__p[0])
      return v9;
  }
  else
  {
    sub_223279DE0((CFUUIDBytes **)__p, (CFMutableArrayRef *)&cf);
    v9 = cf;
    if (cf)
      CFRetain(cf);
    v10 = (std::__shared_weak_count *)v20;
    if ((_QWORD)v20)
    {
      v11 = (unint64_t *)(v20 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v8 = __p[0];
    if (!__p[0])
      return v9;
  }
  __p[1] = v8;
  operator delete(v8);
  return v9;
}

void sub_22328A06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionHasPersistenceEnabled(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return *(_BYTE *)(a1 + 88) != 0;
  v11 = 15;
  strcpy((char *)__p, "Session is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22328A24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionQueryOccupancyAsync(uint64_t a1, uint64_t a2, const void *a3, CFTypeRef *a4)
{
  std::__shared_weak_count *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  CFTypeRef v17;
  unint64_t *v18;
  CFTypeRef v19;
  unint64_t *v20;
  uint64_t v22[2];
  char *v23;
  __int128 v24;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v27;
  std::error_condition v28;

  if (!a1)
  {
    __p[23] = 15;
    strcpy(__p, "Session is NULL");
    v12 = (char *)operator new(0x70uLL);
    v23 = v12;
    v24 = xmmword_2245C45E0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a4)
    {
      *(_QWORD *)&v28.__val_ = 22;
      v28.__cat_ = std::generic_category();
      sub_2245321DC(&v28, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v13 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v13;
      v14 = v27;
      if (!v27)
        goto LABEL_35;
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      goto LABEL_34;
    }
    goto LABEL_37;
  }
  if (!a2)
  {
    *(_QWORD *)__p = operator new(0x19uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B9430;
    strcpy(*(char **)__p, "Occupancy query is NULL");
    v12 = (char *)operator new(0x70uLL);
    v23 = v12;
    v24 = xmmword_2245C45E0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a4)
    {
      *(_QWORD *)&v28.__val_ = 22;
      v28.__cat_ = std::generic_category();
      sub_2245321DC(&v28, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v17 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v17;
      v14 = v27;
      if (!v27)
        goto LABEL_35;
      v18 = (unint64_t *)&v27->__shared_owners_;
      do
        v16 = __ldaxr(v18);
      while (__stlxr(v16 - 1, v18));
      goto LABEL_34;
    }
LABEL_37:
    operator delete(v12);
    goto LABEL_38;
  }
  if (a3)
  {
    v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    v9 = (unint64_t *)&v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC278E0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a3);
    v22[0] = (uint64_t)&v8[1];
    v22[1] = (uint64_t)v8;
    v10 = sub_2232DE664(a1, a2, v22, a4);
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    return v10;
  }
  *(_QWORD *)__p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_2245C77E0;
  strcpy(*(char **)__p, "Occupancy query callback is NULL");
  v12 = (char *)operator new(0x70uLL);
  v23 = v12;
  v24 = xmmword_2245C45E0;
  strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (!a4)
    goto LABEL_37;
  *(_QWORD *)&v28.__val_ = 22;
  v28.__cat_ = std::generic_category();
  sub_2245321DC(&v28, (uint64_t)__p, (CFErrorRef *)&cf);
  if (*a4)
    CFRelease(*a4);
  *a4 = 0;
  v19 = cf;
  if (cf)
    CFRetain(cf);
  *a4 = v19;
  v14 = v27;
  if (!v27)
    goto LABEL_35;
  v20 = (unint64_t *)&v27->__shared_owners_;
  do
    v16 = __ldaxr(v20);
  while (__stlxr(v16 - 1, v20));
LABEL_34:
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_36;
  }
LABEL_35:
  if (SHIBYTE(v24) < 0)
  {
LABEL_36:
    v12 = v23;
    goto LABEL_37;
  }
LABEL_38:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22328A644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionEnablePerFrameMeshSemantics(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232E0CFC(a1, a2, a3);
  v12 = 15;
  strcpy((char *)__p, "Session is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22328A83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionEnablePerFrameMeshColor(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232E1000(a1, a2, a3);
  v12 = 15;
  strcpy((char *)__p, "Session is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22328A9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionEnablePerFrameMeshMaterial(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232E12FC(a1, a2, a3);
  v12 = 15;
  strcpy((char *)__p, "Session is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22328ABB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionHasPerFrameSemantics(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2232E1604(a1, a2);
  v11 = 15;
  strcpy((char *)__p, "Session is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22328AD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionHasPerFrameColor(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2232E17D8(a1, a2);
  v11 = 15;
  strcpy((char *)__p, "Session is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22328AF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionHasPerFrameMaterial(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2232E19AC(a1, a2);
  v11 = 15;
  strcpy((char *)__p, "Session is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22328B0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionHasSemanticIntegration(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_22321D244(a1 + 8, 1);
  v11 = 15;
  strcpy((char *)__p, "Session is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22328B2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionHasColorIntegration(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_22321D244(a1 + 8, 4);
  v11 = 15;
  strcpy((char *)__p, "Session is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22328B468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionHasMaterialIntegration(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_22321D244(a1 + 8, 16);
  v11 = 15;
  strcpy((char *)__p, "Session is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22328B628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionGetSceneQuerySession(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return *(_QWORD *)(a1 + 1224);
  v11 = 15;
  strcpy((char *)__p, "Session is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22328B7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionAddOnRoomScanLiteUpdateCallback(_QWORD *a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v6;
  _BOOL8 result;
  _BOOL8 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  CFTypeRef v17;
  unint64_t *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  char *v21;
  __int128 v22;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  if (a1)
  {
    if (a2)
    {
      v6 = (std::__shared_weak_count *)operator new(0x20uLL);
      v6->__shared_owners_ = 0;
      v6->__shared_weak_owners_ = 0;
      v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27930;
      v6[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
      v19 = &v6[1].__vftable;
      v20 = v6;
      result = sub_2232DD5F4(a1, (uint64_t)&v19, a3);
      v8 = result;
      v9 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          return v8;
        }
      }
      return result;
    }
    *(_QWORD *)__p = operator new(0x30uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B9450;
    strcpy(*(char **)__p, "Input RoomScanLite update callback is NULL");
    v12 = (char *)operator new(0x70uLL);
    v21 = v12;
    v22 = xmmword_2245C45E0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
      goto LABEL_28;
    *(_QWORD *)&v26.__val_ = 22;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v17 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v17;
    v14 = v25;
    if (!v25)
      goto LABEL_26;
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v18);
    while (__stlxr(v16 - 1, v18));
  }
  else
  {
    __p[23] = 15;
    strcpy(__p, "Session is NULL");
    v12 = (char *)operator new(0x70uLL);
    v21 = v12;
    v22 = xmmword_2245C45E0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
    {
LABEL_28:
      operator delete(v12);
      goto LABEL_29;
    }
    *(_QWORD *)&v26.__val_ = 22;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v13 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v13;
    v14 = v25;
    if (!v25)
      goto LABEL_26;
    v15 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
  }
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_27;
  }
LABEL_26:
  if (SHIBYTE(v22) < 0)
  {
LABEL_27:
    v12 = v21;
    goto LABEL_28;
  }
LABEL_29:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22328BB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionAddOnSyntheticRoomScanLiteUpdateCallback(_QWORD *a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v6;
  _BOOL8 result;
  _BOOL8 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  CFTypeRef v17;
  unint64_t *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  char *v21;
  __int128 v22;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  if (a1)
  {
    if (a2)
    {
      v6 = (std::__shared_weak_count *)operator new(0x20uLL);
      v6->__shared_owners_ = 0;
      v6->__shared_weak_owners_ = 0;
      v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27930;
      v6[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
      v19 = &v6[1].__vftable;
      v20 = v6;
      result = sub_2232DDA10(a1, (uint64_t)&v19, a3);
      v8 = result;
      v9 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          return v8;
        }
      }
      return result;
    }
    *(_QWORD *)__p = operator new(0x38uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C43E0;
    strcpy(*(char **)__p, "Input SyntheticRoomScanLite update callback is NULL");
    v12 = (char *)operator new(0x70uLL);
    v21 = v12;
    v22 = xmmword_2245C45E0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
      goto LABEL_28;
    *(_QWORD *)&v26.__val_ = 22;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v17 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v17;
    v14 = v25;
    if (!v25)
      goto LABEL_26;
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v18);
    while (__stlxr(v16 - 1, v18));
  }
  else
  {
    __p[23] = 15;
    strcpy(__p, "Session is NULL");
    v12 = (char *)operator new(0x70uLL);
    v21 = v12;
    v22 = xmmword_2245C45E0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
    {
LABEL_28:
      operator delete(v12);
      goto LABEL_29;
    }
    *(_QWORD *)&v26.__val_ = 22;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v13 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v13;
    v14 = v25;
    if (!v25)
      goto LABEL_26;
    v15 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
  }
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_27;
  }
LABEL_26:
  if (SHIBYTE(v22) < 0)
  {
LABEL_27:
    v12 = v21;
    goto LABEL_28;
  }
LABEL_29:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22328BE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionEnableRoomScanLite(uint64_t a1, uint64_t a2, int a3, CFTypeRef *a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  void *__p[2];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
    return sub_2232E1B80(a1, a3, a4);
  v13 = 15;
  strcpy((char *)__p, "Session is NULL");
  v6 = (char *)operator new(0x70uLL);
  v11 = v6;
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a4)
  {
    *(_QWORD *)&v16.__val_ = 22;
    v16.__cat_ = std::generic_category();
    sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v7;
    v8 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v6 = v11;
  }
  operator delete(v6);
  if (v13 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22328C070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionHasRoomScanLite(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2232E1F28(a1, a2);
  v11 = 15;
  strcpy((char *)__p, "Session is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22328C22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionEnableOccupancyByProximity(uint64_t a1, int a2, CFTypeRef *a3, float a4, float a5, float a6)
{
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p[2];
  char v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
    return sub_2232E2144(a1, a2, a3, a4, a5, a6);
  v14 = 15;
  strcpy((char *)__p, "Session is NULL");
  v8 = (char *)operator new(0x70uLL);
  strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a3)
  {
    *(_QWORD *)&v17.__val_ = 22;
    v17.__cat_ = std::generic_category();
    sub_2245321DC(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v9 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v9;
    v10 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  operator delete(v8);
  if (v14 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22328C3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionHasOccupancyByProximity(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2232E23D0(a1, a2);
  v11 = 15;
  strcpy((char *)__p, "Session is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22328C5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionHasOccupancyMapping(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16);
    if (v2)
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 80) + 1448) + 160))(*(_QWORD *)(*(_QWORD *)(v2 + 80) + 1448));
    return 0;
  }
  v12 = 15;
  strcpy((char *)__p, "Session is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if ((v12 & 0x80000000) == 0)
    return 0;
  operator delete(__p[0]);
  return 0;
}

void sub_22328C774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconLoggingEnableLoggingToHost(const char *a1, unsigned __int16 a2)
{
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__dst[2];
  unint64_t v12;

  v4 = strlen(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v12 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v12) = v4;
  v6 = __dst;
  if (v4)
LABEL_8:
    memcpy(v6, a1, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  v9 = sub_223FF1D60((char *)__dst, a2, 0);
  if (SHIBYTE(v12) < 0)
    operator delete(__dst[0]);
  return v9;
}

void sub_22328C888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL CV3DReconLoggingEnableLoggingToFile(std::string *__src)
{
  std::string *v1;
  int v2;
  unsigned __int8 v3;
  _BOOL8 result;
  _BOOL8 v5;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v1 = (std::string *)((char *)__src - 1);
  do
  {
    v2 = v1->__r_.__value_.__s.__data_[1];
    v1 = (std::string *)((char *)v1 + 1);
  }
  while (v2);
  sub_2231816F0(&__p, __src, v1);
  v3 = atomic_load((unsigned __int8 *)&qword_255795348);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255795348))
  {
    __cxa_atexit((void (*)(void *))nullsub_599, &off_2540CA630, &dword_22314D000);
    __cxa_guard_release(&qword_255795348);
  }
  result = sub_223FF2CF0((uint64_t)&__p, (uint64_t)&off_2540CA630);
  v5 = result;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    return v5;
  }
  return result;
}

void sub_22328C96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CV3DReconLoggingEnableLogger(const char *a1)
{
  uint64_t *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_2241471F8();
  v3 = strlen(a1);
  v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(v2[1] + 48))(v2 + 1, a1, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, 1);
  return 1;
}

uint64_t CV3DReconLoggingDisable()
{
  sub_223FF667C();
  return 1;
}

uint64_t CV3DReconLoggerSync(double a1)
{
  double v2;

  kdebug_trace();
  if (*(double *)&qword_255788F20 != a1)
  {
    v2 = a1 - *(double *)&qword_255788F20;
    if (*(double *)&qword_255788F20 >= a1)
      v2 = *(double *)&qword_255788F20 - a1;
    if (v2 > 0.00000001)
      qword_255788F20 = *(_QWORD *)&a1;
  }
  kdebug_trace();
  return 1;
}

uint64_t CV3DReconLogEnabled(const char *a1)
{
  uint64_t *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_2241471F8();
  v3 = strlen(a1);
  v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(v2[1] + 64))(v2 + 1, a1, v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

uint64_t CV3DReconLogGrayImage(std::__shared_weak_count_vtbl *pixelBuffer, uint64_t a2, double a3)
{
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::mutex *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v25[2];
  std::__shared_weak_count *v26;
  _QWORD v27[2];
  std::__shared_weak_count *v28;
  __int128 v29;
  __int128 v30;
  int v31;
  void *__p;
  char v33;
  _QWORD v34[2];
  std::__shared_weak_count *v35;
  uint64_t v36;
  __int128 v37;

  result = 0;
  v36 = a2;
  if (pixelBuffer && a2)
  {
    if (CVPixelBufferGetPixelFormatType((CVPixelBufferRef)pixelBuffer) == 1278226488)
    {
      sub_2242A8B78(v34, pixelBuffer, 1, 0);
      sub_22328CE6C("cv3d.recon.", (const char *)&v36);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v6 = sub_2241471F8();
        v7 = v6[2];
        if (!v7)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v7 = v6[2];
        }
        v8 = *(_QWORD *)(v7 + 64);
        v9 = (std::mutex *)(v8 + 32);
        std::mutex::lock((std::mutex *)(v8 + 32));
        v11 = *(_QWORD *)(v8 + 96);
        v10 = *(_QWORD *)(v8 + 104);
        std::mutex::unlock(v9);
        if (v11 != v10)
        {
          sub_2241471F8();
          v12 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
          {
            v29 = 0u;
            v30 = 0u;
            v31 = 728325608;
            kdebug_trace();
            v25[0] = &off_24EC715B8;
            v25[1] = v34[1];
            v26 = v35;
            if (v35)
            {
              p_shared_owners = (unint64_t *)&v35->__shared_owners_;
              do
                v14 = __ldxr(p_shared_owners);
              while (__stxr(v14 + 1, p_shared_owners));
            }
            sub_22328CFD4((uint64_t)v25, v27);
            if (a3 < 0.0)
              a3 = NAN;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
            {
              *(_QWORD *)&v37 = (uint64_t)(a3 * 1000000000.0);
              *((_QWORD *)&v37 + 1) = 2;
              v15 = sub_2241471F8();
              sub_22329B348((uint64_t)v15, v12, (uint64_t)v27, &v37);
            }
            v16 = v28;
            if (v28)
            {
              v17 = (unint64_t *)&v28->__shared_owners_;
              do
                v18 = __ldaxr(v17);
              while (__stlxr(v18 - 1, v17));
              if (!v18)
              {
                ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                std::__shared_weak_count::__release_weak(v16);
              }
            }
            v25[0] = &off_24EC715B8;
            v19 = v26;
            if (v26)
            {
              v20 = (unint64_t *)&v26->__shared_owners_;
              do
                v21 = __ldaxr(v20);
              while (__stlxr(v21 - 1, v20));
              if (!v21)
              {
                ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                std::__shared_weak_count::__release_weak(v19);
              }
            }
            kdebug_trace();
          }
        }
      }
      if (v33 < 0)
        operator delete(__p);
      v34[0] = &off_24EC715B8;
      v22 = v35;
      if (v35)
      {
        v23 = (unint64_t *)&v35->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_22328CE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  sub_2242A8F3C(&a9);
  sub_2231874DC((uint64_t)&a19);
  if (a29 < 0)
    operator delete(__p);
  sub_2242A8F3C((_QWORD *)(v29 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_22328CE6C(char *__s, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_22329B258(v4, __s);
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24EC27970[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_10:
    sub_22316DD70();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_10;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24EC27580[v5])(&v11, v4);
LABEL_6:
  if (v5 == -1)
    sub_22316DD70();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC275C8[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC27568[v5])(&v6, v4);
  return result;
}

void sub_22328CF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22328CFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22328CFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22328CFD4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[2];
  std::__shared_weak_count *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  uint64_t (**v29)();
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  __int16 v36;

  sub_22429724C(a1, (uint64_t)&v29);
  v22[0] = &off_24EC20EB8;
  v3 = v30;
  v4 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v34;
    v8 = v35;
    v9 = v36;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v7 = v34;
    v8 = v35;
    v9 = v36;
  }
  v22[1] = v3;
  v23 = v4;
  v24 = v32;
  v25 = v33;
  v26 = v7;
  v27 = v8;
  v28 = v9;
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v29 = &off_24EC28CD0;
  v13 = v31;
  if (v31)
  {
    v14 = (unint64_t *)&v31->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v29 = &off_24EC22138;
  sub_2232966C4((uint64_t)v22, (uint64_t)&v30);
  *a2 = &off_24EC27E90;
  sub_223295ED0((uint64_t)&v29, (uint64_t)(a2 + 1));
  v16 = v31;
  if (v31)
  {
    v17 = (unint64_t *)&v31->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v23;
  if (v23)
  {
    v20 = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_22328D1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_2231DE1B4((uint64_t)&a16);
  sub_2231B4CC8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22328D1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231B4CC8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22328D1D0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL CV3DReconLogColorImage(CVPixelBufferRef pixelBuffer, uint64_t a2, double a3)
{
  _BOOL8 result;
  signed int PixelFormatType;
  _BOOL4 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  std::mutex *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  double v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  std::mutex *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  void *v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  std::mutex *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  double v56;
  unint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  std::mutex *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  double v67;
  unint64_t *v68;
  _QWORD v69[3];
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  __int16 v78;
  uint64_t (**v79)();
  uint64_t v80;
  std::__shared_weak_count *v81;
  __int128 v82;
  __int128 v83;
  int v84;
  void *v85;
  char v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  _QWORD v91[3];
  _QWORD v92[3];
  uint64_t v93;
  CVPixelBufferRef v94;
  __int128 v95;
  _BYTE v96[12];
  uint64_t v97;

  result = 0;
  v97 = *MEMORY[0x24BDAC8D0];
  v93 = a2;
  v94 = pixelBuffer;
  if (pixelBuffer && a2)
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    v10 = PixelFormatType != 24
       && PixelFormatType != 1111970369
       && (PixelFormatType & 0xFFFFFFEF) != 875704422
       && PixelFormatType != 1380410945;
    if (PixelFormatType <= 875704437)
    {
      if (PixelFormatType == 24)
      {
        sub_2242A8B78(&v82, (std::__shared_weak_count_vtbl *)pixelBuffer, 1, 0);
        sub_22328CE6C("cv3d.recon.", (const char *)&v93);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v58 = sub_2241471F8();
          v59 = v58[2];
          if (!v59)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v59 = v58[2];
          }
          v60 = *(_QWORD *)(v59 + 64);
          v61 = (std::mutex *)(v60 + 32);
          std::mutex::lock((std::mutex *)(v60 + 32));
          v63 = *(_QWORD *)(v60 + 96);
          v62 = *(_QWORD *)(v60 + 104);
          std::mutex::unlock(v61);
          if (v63 != v62)
          {
            sub_2241471F8();
            v64 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64))
            {
              v70 = 0u;
              v71 = 0u;
              LODWORD(v72) = 728325608;
              kdebug_trace();
              v92[0] = &off_24EC715B8;
              v92[1] = *((_QWORD *)&v82 + 1);
              v92[2] = v83;
              if ((_QWORD)v83)
              {
                v65 = (unint64_t *)(v83 + 8);
                do
                  v66 = __ldxr(v65);
                while (__stxr(v66 + 1, v65));
              }
              sub_22328E450((uint64_t)&v79, (uint64_t)v92);
              v67 = NAN;
              if (a3 >= 0.0)
                v67 = a3;
              sub_22328DDF0(v64, (uint64_t)&v79, v67);
              sub_22328E800((uint64_t)&v79);
              sub_2242A8F3C(v92);
              sub_2231874DC((uint64_t)&v70);
            }
          }
        }
        if (SHIBYTE(v89) < 0)
          operator delete(v87);
        *(_QWORD *)&v82 = &off_24EC715B8;
        v21 = (std::__shared_weak_count *)v83;
        if (!(_QWORD)v83)
          return !v10;
        v68 = (unint64_t *)(v83 + 8);
        do
          v23 = __ldaxr(v68);
        while (__stlxr(v23 - 1, v68));
LABEL_106:
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        return !v10;
      }
      if (PixelFormatType != 875704422)
        return !v10;
    }
    else if (PixelFormatType != 875704438)
    {
      if (PixelFormatType == 1111970369)
      {
        sub_2242A8B78(&v82, (std::__shared_weak_count_vtbl *)pixelBuffer, 1, 0);
        sub_22328CE6C("cv3d.recon.", (const char *)&v93);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v47 = sub_2241471F8();
          v48 = v47[2];
          if (!v48)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v48 = v47[2];
          }
          v49 = *(_QWORD *)(v48 + 64);
          v50 = (std::mutex *)(v49 + 32);
          std::mutex::lock((std::mutex *)(v49 + 32));
          v52 = *(_QWORD *)(v49 + 96);
          v51 = *(_QWORD *)(v49 + 104);
          std::mutex::unlock(v50);
          if (v52 != v51)
          {
            sub_2241471F8();
            v53 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53))
            {
              v70 = 0u;
              v71 = 0u;
              LODWORD(v72) = 728325608;
              kdebug_trace();
              v91[0] = &off_24EC715B8;
              v91[1] = *((_QWORD *)&v82 + 1);
              v91[2] = v83;
              if ((_QWORD)v83)
              {
                v54 = (unint64_t *)(v83 + 8);
                do
                  v55 = __ldxr(v54);
                while (__stxr(v55 + 1, v54));
              }
              sub_22328F7C4((uint64_t)v91, &v79);
              v56 = NAN;
              if (a3 >= 0.0)
                v56 = a3;
              sub_22328E868(v53, (uint64_t)&v79, v56);
              sub_22328F9C0((uint64_t)&v79);
              sub_2242A8F3C(v91);
              sub_2231874DC((uint64_t)&v70);
            }
          }
        }
        if (SHIBYTE(v89) < 0)
          operator delete(v87);
        *(_QWORD *)&v82 = &off_24EC715B8;
        v21 = (std::__shared_weak_count *)v83;
        if (!(_QWORD)v83)
          return !v10;
        v57 = (unint64_t *)(v83 + 8);
        do
          v23 = __ldaxr(v57);
        while (__stlxr(v23 - 1, v57));
      }
      else
      {
        if (PixelFormatType != 1380410945)
          return !v10;
        sub_2242A8B78(&v82, (std::__shared_weak_count_vtbl *)pixelBuffer, 1, 0);
        sub_22328CE6C("cv3d.recon.", (const char *)&v93);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v11 = sub_2241471F8();
          v12 = v11[2];
          if (!v12)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v12 = v11[2];
          }
          v13 = *(_QWORD *)(v12 + 64);
          v14 = (std::mutex *)(v13 + 32);
          std::mutex::lock((std::mutex *)(v13 + 32));
          v16 = *(_QWORD *)(v13 + 96);
          v15 = *(_QWORD *)(v13 + 104);
          std::mutex::unlock(v14);
          if (v16 != v15)
          {
            sub_2241471F8();
            v17 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17))
            {
              v70 = 0u;
              v71 = 0u;
              LODWORD(v72) = 728325608;
              kdebug_trace();
              v69[0] = &off_24EC715B8;
              v69[1] = *((_QWORD *)&v82 + 1);
              v69[2] = v83;
              if ((_QWORD)v83)
              {
                v18 = (unint64_t *)(v83 + 8);
                do
                  v19 = __ldxr(v18);
                while (__stxr(v19 + 1, v18));
              }
              sub_223290A00((uint64_t)v69, &v79);
              v20 = NAN;
              if (a3 >= 0.0)
                v20 = a3;
              sub_22328FA28(v17, (uint64_t)&v79, v20);
              sub_223290BFC((uint64_t)&v79);
              sub_2242A8F3C(v69);
              sub_2231874DC((uint64_t)&v70);
            }
          }
        }
        if (SHIBYTE(v89) < 0)
          operator delete(v87);
        *(_QWORD *)&v82 = &off_24EC715B8;
        v21 = (std::__shared_weak_count *)v83;
        if (!(_QWORD)v83)
          return !v10;
        v22 = (unint64_t *)(v83 + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
      }
      goto LABEL_106;
    }
    v88 = 0;
    v89 = 0;
    v90 = 0;
    sub_22322ADAC(&v94, (uint64_t)&v87);
    sub_22328CE6C("cv3d.recon.", (const char *)&v93);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v24 = sub_2241471F8();
      v25 = v24[2];
      if (!v25)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v25 = v24[2];
      }
      v26 = *(_QWORD *)(v25 + 64);
      v27 = (std::mutex *)(v26 + 32);
      std::mutex::lock((std::mutex *)(v26 + 32));
      v29 = *(_QWORD *)(v26 + 96);
      v28 = *(_QWORD *)(v26 + 104);
      std::mutex::unlock(v27);
      if (v29 != v28)
      {
        sub_2241471F8();
        v30 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30))
        {
          v82 = 0u;
          v83 = 0u;
          v84 = 728325608;
          kdebug_trace();
          v31 = v88 == 0;
          v32 = v90;
          *(_QWORD *)&v70 = &off_24EC232F0;
          if ((_DWORD)v88)
            v33 = 3;
          else
            v33 = 0;
          if (!HIDWORD(v88))
            v31 = 1;
          v34 = !v31;
          if (v31)
            v35 = 0;
          else
            v35 = (unint64_t)HIDWORD(v89) << 32;
          v36 = v35 | v33;
          v95 = 0uLL;
          v37 = v88 | ((unint64_t)HIDWORD(v88) << 32);
          if (!v34)
            v37 = 0;
          *(_QWORD *)&v96[4] = v37;
          v38 = v37;
          *(_DWORD *)v96 = 3;
          v39 = *(_QWORD *)v96;
          v40 = HIDWORD(v37);
          *(_DWORD *)v96 = 1;
          *(_QWORD *)&v96[4] = v35 | v33;
          v41 = *(_QWORD *)v96;
          v42 = HIDWORD(v35);
          if (HIDWORD(v37) * HIDWORD(v35) == -1
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          *((_QWORD *)&v70 + 1) = 0;
          *(_QWORD *)&v71 = 0;
          *((_QWORD *)&v71 + 1) = v32;
          v72 = v39;
          v73 = v40;
          v74 = v41;
          v75 = v42;
          v76 = v38;
          v77 = v36;
          v78 = 0;
          v79 = &off_24EC21B18;
          sub_22329BD5C(&v80, (char **)&v71 + 1);
          if (a3 < 0.0)
            a3 = NAN;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30))
          {
            *(_QWORD *)&v95 = (uint64_t)(a3 * 1000000000.0);
            *((_QWORD *)&v95 + 1) = 2;
            v43 = sub_2241471F8();
            sub_22329D090((uint64_t)v43, v30, &v79, (uint64_t)&unk_2245C9EFE, &v95);
          }
          v44 = v81;
          if (v81)
          {
            p_shared_owners = (unint64_t *)&v81->__shared_owners_;
            do
              v46 = __ldaxr(p_shared_owners);
            while (__stlxr(v46 - 1, p_shared_owners));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          kdebug_trace();
        }
      }
    }
    if (v86 < 0)
      operator delete(v85);
    if (v90)
      free(v90);
    return !v10;
  }
  return result;
}

void sub_22328DC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;

  sub_22328E800((uint64_t)&a24);
  sub_2242A8F3C((_QWORD *)(v41 - 176));
  sub_2231874DC((uint64_t)&a13);
  if (*(char *)(v41 - 209) < 0)
    operator delete(*(void **)(v41 - 232));
  sub_2242A8F3C(&a41);
  _Unwind_Resume(a1);
}

void sub_22328DDF0(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  mach_timebase_info v21;
  std::__shared_weak_count *v22;
  mach_timebase_info v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __int128 v48;
  _OWORD v49[2];
  uint64_t (**v50)();
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  __int16 v58;
  mach_timebase_info info;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unsigned int v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  __int16 v67;
  _QWORD v68[2];
  char v69;
  char v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v6 = sub_2241471F8();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    {
      v7 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      v8 = mach_continuous_time();
      v9 = atomic_load((unsigned __int8 *)&qword_255795560);
      if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
      {
        mach_timebase_info(&info);
        LODWORD(v46) = info.numer;
        LODWORD(v47) = info.denom;
        *(double *)&qword_255795558 = (double)v46 / (double)v47;
        __cxa_guard_release(&qword_255795560);
      }
      v68[0] = llround(*(double *)&qword_255795558 * (double)v8);
      v68[1] = 2;
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v72 = 0;
      v73 = (uint64_t)(a3 * 1000000000.0);
      v74 = 2;
      v75 = 1;
      v76 = 0;
      v77 = 0;
      v78 = 0;
      v79 = 0;
      v10 = operator new();
      v50 = &off_24EC1F958;
      v11 = *(_QWORD *)(a2 + 8);
      if (v11)
      {
        v12 = *(std::__shared_weak_count **)(a2 + 16);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          v11 = *(_QWORD *)(a2 + 8);
          v16 = *(std::__shared_weak_count **)(a2 + 16);
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
            do
              v19 = __ldaxr(v17);
            while (__stlxr(v19 - 1, v17));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
        sub_22428A8E0(v11, (uint64_t *)&info);
        v20 = (*(uint64_t (**)(mach_timebase_info))(**(_QWORD **)&info + 48))(info);
        v21 = info;
        if (info)
        {
          v22 = (std::__shared_weak_count *)operator new();
          v23 = info;
          v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20DE8;
          v22->__shared_owners_ = 0;
          v22->__shared_weak_owners_ = 0;
          v22[1].__vftable = (std::__shared_weak_count_vtbl *)v23;
        }
        else
        {
          v22 = 0;
        }
        v29 = *(_QWORD *)(a2 + 36);
        v30 = *(_DWORD *)(a2 + 52);
        v51 = (uint64_t)v21;
        v52 = v22;
        v53 = 0;
        v54 = v29;
        v55 = v30;
        v56 = v20;
        v57 = 21;
        v58 = 256;
      }
      else
      {
        info = (mach_timebase_info)&off_24EC21B18;
        sub_22329BD5C(&v60, (char **)(a2 + 24));
        v24 = v60;
        v25 = v61;
        if (v61)
        {
          v26 = (unint64_t *)&v61->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v28 = v61;
        }
        else
        {
          v28 = 0;
        }
        if (v63)
          v43 = v62 | 0x100000000;
        else
          v43 = 0;
        v51 = v24;
        v52 = v25;
        v53 = v43;
        v54 = v65;
        v55 = v66;
        v56 = v64;
        v57 = 21;
        v58 = v67;
        if (v28)
        {
          v44 = (unint64_t *)&v28->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
      }
      sub_2231F9F68((uint64_t)&v50, (uint64_t)&v48);
      v31 = v52;
      if (v52)
      {
        v32 = (unint64_t *)&v52->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      *(_QWORD *)v10 = &off_24EC21AC8;
      *(_QWORD *)(v10 + 8) = &off_24EC219D8;
      v34 = v48;
      v48 = 0uLL;
      v35 = v49[0];
      *(_OWORD *)(v10 + 16) = v34;
      *(_OWORD *)(v10 + 32) = v35;
      *(_OWORD *)(v10 + 46) = *(_OWORD *)((char *)v49 + 14);
      sub_2231AB0FC(v10 + 64, (uint64_t)v68);
      *(_QWORD *)v10 = &off_24EC21A48;
      v36 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
      if (*((_QWORD *)&v48 + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      *(_QWORD *)v10 = &off_24EC6A528;
      info = (mach_timebase_info)&off_24EC6A3B8;
      v60 = v10;
      v39 = (std::__shared_weak_count *)operator new();
      v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6A4B0;
      v39->__shared_owners_ = 0;
      v39->__shared_weak_owners_ = 0;
      v39[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
      v61 = v39;
      sub_2231AD66C((uint64_t)v68);
      sub_2231AA5A4((uint64_t)v6, v7, (uint64_t)&info);
      v40 = v61;
      if (v61)
      {
        v41 = (unint64_t *)&v61->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
  }
}

void sub_22328E2CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_22328E2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  unint64_t *p_shared_owners;
  unint64_t v28;

  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))a26->__on_zero_shared)(a26);
      std::__shared_weak_count::__release_weak(a26);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_22328E328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  sub_2231AD66C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_22328E34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;

  *(_QWORD *)(v41 + 8) = v42;
  v44 = *(std::__shared_weak_count **)(v41 + 24);
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (a11)
  {
    v47 = (unint64_t *)&a11->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  MEMORY[0x227684CE8](v41, 0x10F3C4035895BD5);
  sub_2231AD66C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_22328E450(uint64_t a1, uint64_t a2)
{
  uint64_t (***v3)();
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t (***v16)();
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::logic_error *exception;
  uint64_t (**v36)();
  uint64_t (***v37)();
  std::__shared_weak_count *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[2];
  std::__shared_weak_count *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  uint64_t (***v49)();
  std::__shared_weak_count *v50;
  _BYTE v51[32];
  __int128 v52;
  uint64_t (***v53)();
  std::__shared_weak_count *v54;

  sub_22429724C(a2, (uint64_t)&v36);
  v42[0] = &off_24EC20EB8;
  v3 = v37;
  v4 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v40;
    v8 = DWORD2(v40);
    v9 = WORD6(v40);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v7 = v40;
    v8 = DWORD2(v40);
    v9 = WORD6(v40);
  }
  v42[1] = v3;
  v43 = v4;
  v44 = v39;
  v45 = DWORD2(v39);
  v46 = v7;
  v47 = v8;
  v48 = v9;
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v36 = &off_24EC28CD0;
  v13 = v38;
  if (v38)
  {
    v14 = (unint64_t *)&v38->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v36 = &off_24EC232F0;
  sub_2232972C4((uint64_t)v42, (uint64_t)&v37);
  *(_QWORD *)a1 = &off_24EC275F0;
  v16 = v37;
  v17 = v38;
  v49 = v37;
  v50 = v38;
  if (v38)
  {
    v18 = (unint64_t *)&v38->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (!v16 || *v16 != off_24EC70FA0)
  {
    v53 = 0;
    v54 = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223296D84(v51, (uint64_t)&v36);
    std::logic_error::logic_error(exception, (const std::string *)v51);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v53 = v16;
  v54 = v17;
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    *(_OWORD *)v51 = v39;
    *(_OWORD *)&v51[16] = v40;
    v52 = v41;
    do
      v22 = __ldxr(v20);
    while (__stxr(v22 + 1, v20));
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v17;
    v23 = *(_OWORD *)&v51[16];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v51;
    *(_OWORD *)(a1 + 40) = v23;
    *(_OWORD *)(a1 + 56) = v52;
    do
      v24 = __ldaxr(v20);
    while (__stlxr(v24 - 1, v20));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = 0;
    v25 = v40;
    *(_OWORD *)(a1 + 24) = v39;
    *(_OWORD *)(a1 + 40) = v25;
    *(_OWORD *)(a1 + 56) = v41;
  }
  v26 = v50;
  if (v50)
  {
    v27 = (unint64_t *)&v50->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v38;
  if (v38)
  {
    v30 = (unint64_t *)&v38->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v43;
  if (v43)
  {
    v33 = (unint64_t *)&v43->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_22328E794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  if (*(char *)(v4 - 73) < 0)
  {
    operator delete(*(void **)(v4 - 96));
    if ((v3 & 1) == 0)
    {
LABEL_6:
      sub_223167354(v4 - 48);
      sub_223167354(v4 - 112);
      sub_2231E94AC((uint64_t)va);
      sub_2231B4CC8((uint64_t)va1);
      _Unwind_Resume(a1);
    }
  }
  else if (!v3)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v2);
  goto LABEL_6;
}

void sub_22328E7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_2231B4CC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22328E800(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_22328E868(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  mach_timebase_info v20;
  std::__shared_weak_count *v21;
  mach_timebase_info v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unsigned __int8 v32;
  __int16 v33;
  unint64_t v34;
  int v35;
  size_t v36;
  uint64_t v37;
  int v38;
  size_t v39;
  char *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  _BYTE *v47;
  int v48;
  uint64_t v49;
  int v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  _BYTE *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  char *v60;
  int v61;
  char *v62;
  char *v63;
  int v64;
  size_t v65;
  unsigned __int8 v66;
  BOOL v67;
  uint64_t i;
  uint64_t v69;
  unsigned __int8 v70;
  BOOL v71;
  int v72;
  int v73;
  char *v74;
  void *v75;
  char *v76;
  char *v77;
  size_t v78;
  unint64_t v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  _QWORD *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  __int16 v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  _BYTE *__dst;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  int v103;
  char *v104;
  char *v105;
  int v106;
  uint64_t *v107;
  char *v108;
  __int128 v109;
  _OWORD v110[2];
  uint64_t (**v111)();
  mach_timebase_info v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  _BYTE *v117;
  int v118;
  __int16 v119;
  uint64_t v120;
  mach_timebase_info info;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t (**v130)();
  _QWORD v131[2];
  char v132;
  char v133;
  char v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  char v139;
  char v140;
  char v141;
  char v142;
  uint64_t v143;

  v143 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    return;
  v6 = sub_2241471F8();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    return;
  v107 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v7 = mach_continuous_time();
  v8 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v93) = info.numer;
    LODWORD(v94) = info.denom;
    *(double *)&qword_255795558 = (double)v93 / (double)v94;
    __cxa_guard_release(&qword_255795560);
  }
  v131[0] = llround(*(double *)&qword_255795558 * (double)v7);
  v131[1] = 2;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v135 = 0;
  v136 = (uint64_t)(a3 * 1000000000.0);
  v137 = 2;
  v138 = 1;
  v139 = 0;
  v140 = 0;
  v141 = 0;
  v142 = 0;
  v9 = operator new();
  v111 = &off_24EC1F958;
  v10 = *(_QWORD *)(a2 + 8);
  if (!v10)
  {
    v120 = *(_QWORD *)(a2 + 36);
    v130 = &off_24EC27B70;
    sub_22449A504(&v120, (uint64_t)&info);
    v98 = v9;
    v23 = operator new();
    v97 = v6;
    *(_QWORD *)v23 = &off_24EC279D0;
    *(_QWORD *)(v23 + 56) = v125;
    v24 = v129;
    *(_QWORD *)(v23 + 80) = v127;
    *(_OWORD *)(v23 + 8) = v122;
    *(_OWORD *)(v23 + 24) = v123;
    *(_OWORD *)(v23 + 40) = v124;
    *(_OWORD *)(v23 + 64) = v126;
    *(_QWORD *)(v23 + 104) = v24;
    *(_OWORD *)(v23 + 88) = v128;
    v25 = (std::__shared_weak_count *)operator new();
    v25->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27BA8;
    v25->__shared_weak_owners_ = 0;
    v25[1].__vftable = (std::__shared_weak_count_vtbl *)v23;
    v101 = v25;
    v102 = v23;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
    (*(void (**)(mach_timebase_info *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v23 + 64))(&info, v23, 25);
    __dst = **(_BYTE ***)&info;
    v96 = *(_QWORD *)(*(_QWORD *)&info + 12);
    v28 = *(_QWORD *)(*(_QWORD *)&info + 20);
    v29 = *(unsigned int *)(*(_QWORD *)&info + 28);
    info = 0;
    MEMORY[0x227684CE8]();
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 104))(v102);
    v31 = HIDWORD(v28);
    v32 = v30;
    if ((v30 & 0xFFFFFFu) <= 0x10000)
      v32 = 0;
    v33 = v30 & 0xFF00;
    if ((v30 & 0xFF0000) == 0)
      v33 = 0;
    v95 = v33 & 0xFF00 | v32;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
    if ((_DWORD)v28 != 1 || *(_DWORD *)(a2 + 44) != 1)
    {
      if (*(_DWORD *)(a2 + 32))
      {
        v43 = *(_DWORD *)(a2 + 36);
        if (v43)
        {
          v44 = *(_DWORD *)(a2 + 40);
          if (v44)
          {
            v45 = v43 - 1;
            v46 = *(unsigned int *)(a2 + 48);
            v47 = *(_BYTE **)(a2 + 24);
            v48 = v44 - 1;
            if (v44 == 1)
            {
              v51 = __dst;
            }
            else
            {
              v49 = *(unsigned int *)(a2 + 52);
              if (v45)
              {
                v50 = 0;
                v51 = __dst;
                v52 = __dst + 3;
                v53 = v47 + 1;
                do
                {
                  v54 = v53;
                  v55 = v52;
                  v56 = v45;
                  do
                  {
                    *(v55 - 3) = *(v54 - 1);
                    *(v55 - 2) = *v54;
                    *(v55 - 1) = v54[1];
                    *v55 = v54[2];
                    v55 += v31;
                    v54 += v46;
                    --v56;
                  }
                  while (v56);
                  *(v55 - 3) = *(v54 - 1);
                  *(v55 - 2) = *v54;
                  *(v55 - 1) = v54[1];
                  *v55 = v54[2];
                  v47 += v49;
                  v51 += v29;
                  ++v50;
                  v52 += v29;
                  v53 += v49;
                }
                while (v50 != v48);
              }
              else
              {
                v51 = __dst;
                do
                {
                  *v51 = *v47;
                  v51[1] = v47[1];
                  v51[2] = v47[2];
                  v51[3] = v47[3];
                  v47 += v49;
                  v51 += v29;
                  --v48;
                }
                while (v48);
              }
            }
            for (; v45; --v45)
            {
              *v51 = *v47;
              v51[1] = v47[1];
              v51[2] = v47[2];
              v51[3] = v47[3];
              v47 += v46;
              v51 += v31;
            }
            *v51 = *v47;
            v51[1] = v47[1];
            v51[2] = v47[2];
            v51[3] = v47[3];
          }
        }
      }
      goto LABEL_120;
    }
    v35 = *(_DWORD *)(a2 + 48);
    v36 = *(unsigned int *)(a2 + 32);
    if (v35 == HIDWORD(v28) && v35 == (_DWORD)v36)
    {
      v37 = *(unsigned int *)(a2 + 52);
      v38 = *(_DWORD *)(a2 + 36);
      v39 = (v38 * HIDWORD(v28));
      if ((_DWORD)v37 == (_DWORD)v29 && (_DWORD)v37 == (_DWORD)v39)
      {
        v39 = (*(_DWORD *)(a2 + 40) * v29);
        v40 = *(char **)(a2 + 24);
        if (!(_DWORD)v39 || v40)
        {
          if (!(_DWORD)v39)
            goto LABEL_120;
        }
        else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_110;
        }
        v75 = __dst;
        goto LABEL_118;
      }
      if (!(_DWORD)v31)
        goto LABEL_120;
      if (!v38)
        goto LABEL_120;
      v72 = *(_DWORD *)(a2 + 40);
      if (!v72)
        goto LABEL_120;
      v40 = *(char **)(a2 + 24);
      v73 = v72 - 1;
      if (v72 == 1)
      {
        v74 = __dst;
LABEL_112:
        if (!(_DWORD)v39 || v40)
        {
          if (!(_DWORD)v39)
            goto LABEL_120;
        }
        else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_110;
        }
        v75 = v74;
LABEL_118:
        v77 = v40;
        v78 = v39;
        goto LABEL_119;
      }
      if (!(_DWORD)v39)
        goto LABEL_120;
      v74 = __dst;
      while (v40
           || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        memmove(v74, v40, v39);
        v40 += v37;
        v74 += v29;
        if (!--v73)
          goto LABEL_112;
      }
    }
    else
    {
      v108 = (char *)*(unsigned int *)(a2 + 48);
      if (!(_DWORD)v36)
        goto LABEL_120;
      v57 = *(_DWORD *)(a2 + 36);
      if (!v57)
        goto LABEL_120;
      v58 = *(_DWORD *)(a2 + 40);
      if (!v58)
        goto LABEL_120;
      v59 = v57 - 1;
      v60 = *(char **)(a2 + 24);
      v106 = v58 - 1;
      if (v58 == 1)
      {
        v62 = __dst;
LABEL_97:
        v76 = v62;
        if (v59)
        {
          while (v60
               || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            memmove(v76, v60, v36);
            v60 = &v108[(_QWORD)v60];
            v76 += v31;
            if (!--v59)
              goto LABEL_103;
          }
        }
        else
        {
LABEL_103:
          if (v60
            || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            v75 = v76;
            v77 = v60;
            v78 = v36;
LABEL_119:
            memmove(v75, v77, v78);
            do
LABEL_120:
              v79 = __ldxr(p_shared_owners);
            while (__stxr(v79 + 1, p_shared_owners));
            v112 = (mach_timebase_info)v102;
            v113 = v101;
            v114 = 0;
            v115 = v96;
            v116 = v29;
            v117 = __dst;
            v118 = 25;
            v119 = v95;
            do
              v80 = __ldaxr(p_shared_owners);
            while (__stlxr(v80 - 1, p_shared_owners));
            v6 = v97;
            v9 = v98;
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
            goto LABEL_125;
          }
        }
      }
      else
      {
        v100 = *(unsigned int *)(a2 + 52);
        if (v57 == 1)
        {
          v62 = __dst;
          while (v60
               || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            memmove(v62, v60, v36);
            v60 += v100;
            v62 += v29;
            if (!--v106)
              goto LABEL_97;
          }
        }
        else
        {
          v61 = 0;
          v62 = __dst;
          while (1)
          {
            v103 = v61;
            v63 = v62;
            v64 = 0;
            v104 = v63;
            v105 = v60;
            do
            {
              while (v60)
              {
                memmove(v63, v60, v36);
                v60 = &v108[(_QWORD)v60];
                v63 += v31;
                if (++v64 == v59)
                  goto LABEL_57;
              }
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v65 = v36;
              v66 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (byte_255795670)
                v67 = byte_255795678 == 0;
              else
                v67 = 0;
              if (!v67)
              {
                v69 = qword_255795648;
                for (i = qword_255795650; v69 != i; v69 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v69)(*(_QWORD *)(v69 + 8), "ptr != nullptr || size == 0", 27, "", 0);
              }
              v70 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v70 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                goto LABEL_110;
              v36 = v65;
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
              memcpy(v63, 0, v65);
              v63 += v31;
              ++v64;
              v60 = v108;
            }
            while (v64 != v59);
            v71 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v60 = v108;
            if (v71)
              break;
LABEL_57:
            memmove(v63, v60, v36);
            v60 = &v105[v100];
            v62 = &v104[v29];
            v61 = v103 + 1;
            if (v103 + 1 == v106)
              goto LABEL_97;
          }
        }
      }
    }
LABEL_110:
    abort();
  }
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v10 = *(_QWORD *)(a2 + 8);
    v15 = *(std::__shared_weak_count **)(a2 + 16);
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  sub_22428E2CC(v10, (uint64_t *)&info);
  v19 = (*(uint64_t (**)(mach_timebase_info))(**(_QWORD **)&info + 48))(info);
  v20 = info;
  if (info)
  {
    v21 = (std::__shared_weak_count *)operator new();
    v22 = info;
    v21->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20DE8;
    v21->__shared_owners_ = 0;
    v21->__shared_weak_owners_ = 0;
    v21[1].__vftable = (std::__shared_weak_count_vtbl *)v22;
  }
  else
  {
    v21 = 0;
  }
  v41 = *(_QWORD *)(a2 + 36);
  v42 = *(_DWORD *)(a2 + 52);
  v112 = v20;
  v113 = v21;
  v114 = 0;
  v115 = v41;
  v116 = v42;
  v117 = (_BYTE *)v19;
  v118 = 25;
  v119 = 256;
LABEL_125:
  sub_2231F9F68((uint64_t)&v111, (uint64_t)&v109);
  v81 = v113;
  if (v113)
  {
    v82 = (unint64_t *)&v113->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  *(_QWORD *)v9 = &off_24EC21AC8;
  *(_QWORD *)(v9 + 8) = &off_24EC219D8;
  v84 = v109;
  v85 = v110[0];
  v109 = 0uLL;
  *(_OWORD *)(v9 + 16) = v84;
  *(_OWORD *)(v9 + 32) = v85;
  *(_OWORD *)(v9 + 46) = *(_OWORD *)((char *)v110 + 14);
  sub_2231AB0FC(v9 + 64, (uint64_t)v131);
  *(_QWORD *)v9 = &off_24EC21A48;
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
  if (*((_QWORD *)&v109 + 1))
  {
    v87 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  *(_QWORD *)v9 = &off_24EC6A528;
  info = (mach_timebase_info)&off_24EC6A3B8;
  *(_QWORD *)&v122 = v9;
  v89 = (_QWORD *)operator new();
  *v89 = &off_24EC6A4B0;
  v89[1] = 0;
  v89[2] = 0;
  v89[3] = v9;
  *((_QWORD *)&v122 + 1) = v89;
  sub_2231AD66C((uint64_t)v131);
  sub_2231AA5A4((uint64_t)v6, v107, (uint64_t)&info);
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v122 + 1);
  if (*((_QWORD *)&v122 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
}

void sub_22328F550(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_22328F568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  unint64_t *v55;
  unint64_t v57;

  do
    v57 = __ldaxr(v55);
  while (__stlxr(v57 - 1, v55));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
    std::__shared_weak_count::__release_weak(a15);
  }
  MEMORY[0x227684CE8](a12, 0x10F3C4035895BD5);
  sub_2231AD66C((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void sub_22328F7C4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t (**v22)();
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  _QWORD v30[2];
  std::__shared_weak_count *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  __int16 v36;

  sub_22429724C(a1, (uint64_t)&v22);
  v30[0] = &off_24EC20EB8;
  v3 = v23;
  v4 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v27;
    v8 = v28;
    v9 = v29;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v7 = v27;
    v8 = v28;
    v9 = v29;
  }
  v30[1] = v3;
  v31 = v4;
  v32 = v25;
  v33 = v26;
  v34 = v7;
  v35 = v8;
  v36 = v9;
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v22 = &off_24EC28CD0;
  v13 = v24;
  if (v24)
  {
    v14 = (unint64_t *)&v24->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v22 = &off_24EC236D0;
  sub_223297F40((uint64_t)v30, (uint64_t)&v23);
  *a2 = &off_24EC28080;
  sub_22329774C((uint64_t)&v22, (uint64_t)(a2 + 1));
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v31;
  if (v31)
  {
    v20 = (unint64_t *)&v31->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_22328F990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_2231EB9CC((uint64_t)va);
  sub_2231B4CC8(v2 - 72);
  _Unwind_Resume(a1);
}

void sub_22328F9AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231B4CC8(v1 - 72);
  _Unwind_Resume(a1);
}

uint64_t sub_22328F9C0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_22328FA28(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  mach_timebase_info v21;
  std::__shared_weak_count *v22;
  mach_timebase_info v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unsigned __int8 v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  _DWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _DWORD *v59;
  _DWORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  char *v68;
  size_t v69;
  uint64_t v70;
  int v71;
  char *v72;
  int v73;
  char *v74;
  size_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 v78;
  BOOL v79;
  uint64_t i;
  uint64_t v81;
  unsigned __int8 v82;
  BOOL v83;
  int v84;
  char *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  size_t v90;
  void *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  __int128 v105;
  __int128 v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  __int16 v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  char *__dst;
  std::__shared_weak_count *v122;
  uint64_t v123;
  int v124;
  char *v125;
  char *v126;
  int v127;
  int v128;
  uint64_t *v129;
  int v130;
  uint64_t v131;
  __int128 v132;
  _OWORD v133[2];
  uint64_t (**v134)();
  mach_timebase_info v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  char *v140;
  int v141;
  __int16 v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  mach_timebase_info info[2];
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  _QWORD v159[2];
  char v160;
  char v161;
  char v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  char v167;
  char v168;
  char v169;
  char v170;
  uint64_t v171;

  v171 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    return;
  v6 = sub_2241471F8();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    return;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(info);
    LODWORD(v114) = info[0].numer;
    LODWORD(v115) = info[0].denom;
    *(double *)&qword_255795558 = (double)v114 / (double)v115;
    __cxa_guard_release(&qword_255795560);
  }
  v159[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v159[1] = 2;
  v160 = 0;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v164 = (uint64_t)(a3 * 1000000000.0);
  v165 = 2;
  v166 = 1;
  v167 = 0;
  v168 = 0;
  v169 = 0;
  v170 = 0;
  v10 = operator new();
  v134 = &off_24EC1F958;
  v11 = *(_QWORD *)(a2 + 8);
  v129 = (uint64_t *)v7;
  if (!v11)
  {
    v143 = *(_QWORD *)(a2 + 36);
    sub_2244B6E68((uint64_t)info, &v143);
    v146 = *(_OWORD *)&info[0].numer;
    v147 = v151;
    v148 = v152;
    v24 = v154;
    v149 = v153;
    v25 = v155;
    v26 = v156;
    v144 = v157;
    v145 = v158;
    v120 = v10;
    v27 = operator new();
    v119 = v6;
    v28 = v147;
    *(_OWORD *)(v27 + 8) = v146;
    v29 = v27;
    *(_QWORD *)v27 = &off_24EC24CE0;
    *(_OWORD *)(v27 + 24) = v28;
    *(_OWORD *)(v27 + 40) = v148;
    *(_QWORD *)(v27 + 56) = v149;
    *(_QWORD *)(v27 + 64) = v24;
    *(_QWORD *)(v27 + 72) = v25;
    *(_QWORD *)(v27 + 80) = v26;
    *(_OWORD *)(v27 + 88) = v144;
    *(_QWORD *)(v27 + 104) = v145;
    v30 = (std::__shared_weak_count *)operator new();
    v30->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    v30->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24D78;
    v30->__shared_weak_owners_ = 0;
    v30[1].__vftable = (std::__shared_weak_count_vtbl *)v29;
    v122 = v30;
    v123 = v29;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    (*(void (**)(mach_timebase_info *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v29 + 64))(info, v29, 32);
    __dst = **(char ***)info;
    v118 = *(_QWORD *)(*(_QWORD *)info + 12);
    v33 = *(_QWORD *)(*(_QWORD *)info + 20);
    v34 = *(unsigned int *)(*(_QWORD *)info + 28);
    info[0] = 0;
    MEMORY[0x227684CE8]();
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 104))(v29);
    v36 = HIDWORD(v33);
    v37 = v35;
    if ((v35 & 0xFFFFFFu) <= 0x10000)
      v37 = 0;
    v38 = v35 & 0xFF00;
    if ((v35 & 0xFF0000) == 0)
      v38 = 0;
    v117 = v38 & 0xFF00 | v37;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      v36 = HIDWORD(v33);
      std::__shared_weak_count::__release_weak(v122);
    }
    v128 = v34;
    if ((_DWORD)v33 == 1 && *(_DWORD *)(a2 + 44) == 1)
    {
      v40 = *(unsigned int *)(a2 + 48);
      v41 = *(unsigned int *)(a2 + 32);
      if ((_DWORD)v40 == (_DWORD)v36 && (_DWORD)v40 == (_DWORD)v41)
      {
        v42 = *(unsigned int *)(a2 + 52);
        v43 = *(_DWORD *)(a2 + 36);
        v44 = (v43 * v36);
        if ((_DWORD)v42 == (_DWORD)v34 && (_DWORD)v42 == (_DWORD)v44)
        {
          v45 = (*(_DWORD *)(a2 + 40) * v34);
          v46 = *(char **)(a2 + 24);
          if (!(_DWORD)v45 || v46)
          {
            if (!(_DWORD)v45)
              goto LABEL_120;
          }
          else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_111;
          }
          v90 = 4 * v45;
          v91 = __dst;
          v92 = v46;
          goto LABEL_119;
        }
        if (!(_DWORD)v36)
          goto LABEL_120;
        if (!v43)
          goto LABEL_120;
        v84 = *(_DWORD *)(a2 + 40);
        if (!v84)
          goto LABEL_120;
        v85 = *(char **)(a2 + 24);
        v86 = v84 - 1;
        if (v84 != 1)
        {
          if (!(_DWORD)v44)
            goto LABEL_120;
          v87 = 4 * v42;
          v88 = 4 * v34;
          v89 = __dst;
          while (v85
               || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            memmove(v89, v85, 4 * v44);
            v85 += v87;
            v89 += v88;
            if (!--v86)
              goto LABEL_113;
          }
LABEL_111:
          abort();
        }
        v89 = __dst;
LABEL_113:
        if (!(_DWORD)v44 || v85)
        {
          if (!(_DWORD)v44)
            goto LABEL_120;
        }
        else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_111;
        }
        v91 = v89;
        v92 = v85;
        v90 = 4 * v44;
      }
      else
      {
        if (!(_DWORD)v41)
          goto LABEL_120;
        v65 = *(_DWORD *)(a2 + 36);
        if (!v65)
          goto LABEL_120;
        v66 = *(_DWORD *)(a2 + 40);
        if (!v66)
          goto LABEL_120;
        v67 = v65 - 1;
        v68 = *(char **)(a2 + 24);
        v69 = 4 * v41;
        v131 = 4 * v40;
        v127 = v66 - 1;
        if (v66 != 1)
        {
          v70 = *(unsigned int *)(a2 + 52);
          if (v67)
          {
            v71 = 0;
            v72 = __dst;
            v130 = v67;
            v116 = v70;
            while (1)
            {
              v124 = v71;
              v73 = 0;
              v125 = v72;
              v126 = v68;
              v74 = v68;
              do
              {
                while (v74)
                {
                  memmove(v72, v74, v69);
                  v74 += 4 * v40;
                  v72 += 4 * v36;
                  if (++v73 == v67)
                    goto LABEL_57;
                }
                sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                v75 = v69;
                v76 = v40;
                v77 = v36;
                v78 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (byte_255795670)
                  v79 = byte_255795678 == 0;
                else
                  v79 = 0;
                if (!v79)
                {
                  v81 = qword_255795648;
                  for (i = qword_255795650; v81 != i; v81 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v81)(*(_QWORD *)(v81 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                }
                v82 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v82 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                v36 = v77;
                v40 = v76;
                v69 = v75;
                v67 = v130;
                if (!byte_255795670)
                  goto LABEL_111;
                qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
                memcpy(v72, 0, v69);
                v72 += 4 * v36;
                ++v73;
                v74 = (char *)v131;
              }
              while (v73 != v130);
              v83 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v74 = (char *)v131;
              if (v83)
                break;
LABEL_57:
              memmove(v72, v74, v69);
              v68 = &v126[4 * v116];
              v72 = &v125[4 * v34];
              v71 = v124 + 1;
              if (v124 + 1 == v127)
                goto LABEL_98;
            }
          }
          else
          {
            v96 = 4 * v70;
            v97 = 4 * v34;
            v72 = __dst;
            while (1)
            {
              v98 = v72;
              v99 = v68;
              if (!v68
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                break;
              }
              memmove(v98, v99, v69);
              v68 = &v99[v96];
              v72 = &v98[v97];
              if (!--v127)
                goto LABEL_98;
            }
          }
          goto LABEL_111;
        }
        v72 = __dst;
LABEL_98:
        v93 = v72;
        if (v67)
        {
          do
          {
            v94 = v68;
            if (!v68
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_111;
            }
            memmove(v93, v94, v69);
            v68 = &v94[v131];
            v93 += 4 * v36;
          }
          while (--v67);
        }
        v95 = v68;
        if (!v68
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_111;
        }
        v91 = v93;
        v92 = v95;
        v90 = v69;
      }
LABEL_119:
      memmove(v91, v92, v90);
      do
LABEL_120:
        v100 = __ldxr(p_shared_owners);
      while (__stxr(v100 + 1, p_shared_owners));
      v135 = (mach_timebase_info)v123;
      v136 = v122;
      v137 = 0;
      v138 = v118;
      v139 = 4 * v128;
      v140 = __dst;
      v141 = 32;
      v142 = v117;
      do
        v101 = __ldaxr(p_shared_owners);
      while (__stlxr(v101 - 1, p_shared_owners));
      v6 = v119;
      v10 = v120;
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
      goto LABEL_125;
    }
    if (!*(_DWORD *)(a2 + 32))
      goto LABEL_120;
    v49 = *(_DWORD *)(a2 + 36);
    if (!v49)
      goto LABEL_120;
    v50 = *(_DWORD *)(a2 + 40);
    if (!v50)
      goto LABEL_120;
    v51 = v49 - 1;
    v52 = *(unsigned int *)(a2 + 48);
    v53 = *(_DWORD **)(a2 + 24);
    v54 = v50 - 1;
    if (v50 == 1)
    {
      v59 = __dst;
    }
    else
    {
      v55 = *(unsigned int *)(a2 + 52);
      v56 = 4 * v55;
      v57 = 4 * v34;
      if (!v51)
      {
        v59 = __dst;
        do
        {
          *v59 = *v53;
          v59[1] = v53[1];
          v59[2] = v53[2];
          v59[3] = v53[3];
          v53 = (_DWORD *)((char *)v53 + v56);
          v59 = (_DWORD *)((char *)v59 + v57);
          --v54;
        }
        while (v54);
LABEL_96:
        *v59 = *v53;
        v59[1] = v53[1];
        v59[2] = v53[2];
        v59[3] = v53[3];
        goto LABEL_120;
      }
      v58 = 0;
      v59 = __dst;
      v60 = __dst + 8;
      v61 = v53 + 2;
      do
      {
        v62 = v61;
        v63 = v60;
        v64 = v51;
        do
        {
          *(v63 - 2) = *(v62 - 2);
          *(v63 - 1) = *(v62 - 1);
          *v63 = *v62;
          v63[1] = v62[1];
          v63 += v36;
          v62 += v52;
          --v64;
        }
        while (v64);
        *(v63 - 2) = *(v62 - 2);
        *(v63 - 1) = *(v62 - 1);
        *v63 = *v62;
        v63[1] = v62[1];
        v53 += v55;
        v59 += v34;
        ++v58;
        v60 = (_DWORD *)((char *)v60 + v57);
        v61 = (_DWORD *)((char *)v61 + v56);
      }
      while (v58 != v54);
    }
    for (; v51; --v51)
    {
      *v59 = *v53;
      v59[1] = v53[1];
      v59[2] = v53[2];
      v59[3] = v53[3];
      v53 += v52;
      v59 += v36;
    }
    goto LABEL_96;
  }
  v12 = *(std::__shared_weak_count **)(a2 + 16);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    v11 = *(_QWORD *)(a2 + 8);
    v16 = *(std::__shared_weak_count **)(a2 + 16);
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  sub_224292070(v11, (uint64_t *)info);
  v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)info + 48))(*(_QWORD *)info);
  v21 = info[0];
  if (info[0])
  {
    v22 = (std::__shared_weak_count *)operator new();
    v23 = info[0];
    v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20DE8;
    v22->__shared_owners_ = 0;
    v22->__shared_weak_owners_ = 0;
    v22[1].__vftable = (std::__shared_weak_count_vtbl *)v23;
  }
  else
  {
    v22 = 0;
  }
  v47 = *(_QWORD *)(a2 + 36);
  v48 = 4 * *(_DWORD *)(a2 + 52);
  v135 = v21;
  v136 = v22;
  v137 = 0;
  v138 = v47;
  v139 = v48;
  v140 = (char *)v20;
  v141 = 32;
  v142 = 256;
LABEL_125:
  sub_2231F9F68((uint64_t)&v134, (uint64_t)&v132);
  v102 = v136;
  if (v136)
  {
    v103 = (unint64_t *)&v136->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  *(_QWORD *)v10 = &off_24EC21AC8;
  *(_QWORD *)(v10 + 8) = &off_24EC219D8;
  v105 = v132;
  v132 = 0uLL;
  v106 = v133[0];
  *(_OWORD *)(v10 + 16) = v105;
  *(_OWORD *)(v10 + 32) = v106;
  *(_OWORD *)(v10 + 46) = *(_OWORD *)((char *)v133 + 14);
  sub_2231AB0FC(v10 + 64, (uint64_t)v159);
  *(_QWORD *)v10 = &off_24EC21A48;
  v107 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
  if (*((_QWORD *)&v132 + 1))
  {
    v108 = (unint64_t *)(*((_QWORD *)&v132 + 1) + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  *(_QWORD *)v10 = &off_24EC6A528;
  info[0] = (mach_timebase_info)&off_24EC6A3B8;
  info[1] = (mach_timebase_info)v10;
  v110 = (_QWORD *)operator new();
  *v110 = &off_24EC6A4B0;
  v110[1] = 0;
  v110[2] = 0;
  v110[3] = v10;
  *(_QWORD *)&v151 = v110;
  sub_2231AD66C((uint64_t)v159);
  sub_2231AA5A4((uint64_t)v6, v129, (uint64_t)info);
  v111 = (std::__shared_weak_count *)v151;
  if ((_QWORD)v151)
  {
    v112 = (unint64_t *)(v151 + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
}

void sub_22329078C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_2232907A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  unint64_t *v67;
  unint64_t v69;

  do
    v69 = __ldaxr(v67);
  while (__stlxr(v69 - 1, v67));
  if (!v69)
  {
    ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
    std::__shared_weak_count::__release_weak(a15);
  }
  MEMORY[0x227684CE8](a13, 0x10F3C4035895BD5);
  sub_2231AD66C((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_223290A00(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t (**v22)();
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  _QWORD v30[2];
  std::__shared_weak_count *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  __int16 v36;

  sub_22429724C(a1, (uint64_t)&v22);
  v30[0] = &off_24EC20EB8;
  v3 = v23;
  v4 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v27;
    v8 = v28;
    v9 = v29;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v7 = v27;
    v8 = v28;
    v9 = v29;
  }
  v30[1] = v3;
  v31 = v4;
  v32 = v25;
  v33 = v26;
  v34 = v7;
  v35 = v8;
  v36 = v9;
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v22 = &off_24EC28CD0;
  v13 = v24;
  if (v24)
  {
    v14 = (unint64_t *)&v24->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v22 = &off_24EC21EF0;
  sub_223298BC0((uint64_t)v30, (uint64_t)&v23);
  *a2 = &off_24EC27D98;
  sub_2232983CC((uint64_t)&v22, (uint64_t)(a2 + 1));
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v31;
  if (v31)
  {
    v20 = (unint64_t *)&v31->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_223290BCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_2231DCAAC((uint64_t)va);
  sub_2231B4CC8(v2 - 72);
  _Unwind_Resume(a1);
}

void sub_223290BE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231B4CC8(v1 - 72);
  _Unwind_Resume(a1);
}

uint64_t sub_223290BFC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL CV3DReconLogGrayFloatImage(CVPixelBufferRef pixelBuffer, uint64_t a2, double a3)
{
  _BOOL8 result;
  signed int PixelFormatType;
  signed int v7;
  _BOOL4 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::mutex *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  std::mutex *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD v40[3];
  _QWORD v41[2];
  std::__shared_weak_count *v42;
  _QWORD v43[2];
  std::__shared_weak_count *v44;
  __int128 v45;
  __int128 v46;
  int v47;
  void *v48;
  char v49;
  uint64_t (**v50)();
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  __int128 v54;

  result = 0;
  v53 = a2;
  if (pixelBuffer && a2)
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    v7 = PixelFormatType;
    v11 = PixelFormatType != 1278226534
       && PixelFormatType != 1278226536
       && PixelFormatType != 1751410032
       && PixelFormatType != 1717855600;
    if (PixelFormatType > 1717855599)
    {
      if (PixelFormatType != 1751410032 && PixelFormatType != 1717855600)
        return !v11;
    }
    else if (PixelFormatType != 1278226534 && PixelFormatType != 1278226536)
    {
      return !v11;
    }
    if (a3 < 0.0)
      a3 = NAN;
    sub_2242A8B78(&v50, (std::__shared_weak_count_vtbl *)pixelBuffer, 1, 0);
    if (v7 == 1751410032 || v7 == 1278226536)
    {
      sub_22328CE6C("cv3d.recon.", (const char *)&v53);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v12 = sub_2241471F8();
        v13 = v12[2];
        if (!v13)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v13 = v12[2];
        }
        v14 = *(_QWORD *)(v13 + 64);
        v15 = (std::mutex *)(v14 + 32);
        std::mutex::lock((std::mutex *)(v14 + 32));
        v17 = *(_QWORD *)(v14 + 96);
        v16 = *(_QWORD *)(v14 + 104);
        std::mutex::unlock(v15);
        if (v17 != v16)
        {
          sub_2241471F8();
          v18 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18))
          {
            v45 = 0u;
            v46 = 0u;
            v47 = 728325608;
            kdebug_trace();
            v41[0] = &off_24EC715B8;
            v41[1] = v51;
            v42 = v52;
            if (v52)
            {
              p_shared_owners = (unint64_t *)&v52->__shared_owners_;
              do
                v20 = __ldxr(p_shared_owners);
              while (__stxr(v20 + 1, p_shared_owners));
            }
            sub_223291230((uint64_t)v41, v43);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18))
            {
              *(_QWORD *)&v54 = (uint64_t)(a3 * 1000000000.0);
              *((_QWORD *)&v54 + 1) = 2;
              v21 = sub_2241471F8();
              sub_22329D1A4((uint64_t)v21, v18, (uint64_t)v43, &v54);
            }
            v22 = v44;
            if (v44)
            {
              v23 = (unint64_t *)&v44->__shared_owners_;
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            v41[0] = &off_24EC715B8;
            v25 = v42;
            if (v42)
            {
              v26 = (unint64_t *)&v42->__shared_owners_;
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
            kdebug_trace();
          }
        }
      }
    }
    else
    {
      sub_22328CE6C("cv3d.recon.", (const char *)&v53);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v28 = sub_2241471F8();
        v29 = v28[2];
        if (!v29)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v29 = v28[2];
        }
        v30 = *(_QWORD *)(v29 + 64);
        v31 = (std::mutex *)(v30 + 32);
        std::mutex::lock((std::mutex *)(v30 + 32));
        v33 = *(_QWORD *)(v30 + 96);
        v32 = *(_QWORD *)(v30 + 104);
        std::mutex::unlock(v31);
        if (v33 != v32)
        {
          sub_2241471F8();
          v34 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34))
          {
            v45 = 0u;
            v46 = 0u;
            v47 = 728325608;
            kdebug_trace();
            v40[0] = &off_24EC715B8;
            v40[1] = v51;
            v40[2] = v52;
            if (v52)
            {
              v35 = (unint64_t *)&v52->__shared_owners_;
              do
                v36 = __ldxr(v35);
              while (__stxr(v36 + 1, v35));
            }
            sub_223291ECC((uint64_t)v40, v43);
            sub_22329142C(v34, (uint64_t)v43, a3);
            sub_2232920C8((uint64_t)v43);
            sub_2242A8F3C(v40);
            sub_2231874DC((uint64_t)&v45);
          }
        }
      }
    }
    if (v49 < 0)
      operator delete(v48);
    v50 = &off_24EC715B8;
    v37 = v52;
    if (v52)
    {
      v38 = (unint64_t *)&v52->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    return !v11;
  }
  return result;
}

void sub_223291184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  sub_2232920C8((uint64_t)va1);
  sub_2242A8F3C((uint64_t *)va);
  sub_2231874DC((uint64_t)va2);
  if (*(char *)(v2 - 113) < 0)
    operator delete(*(void **)(v2 - 136));
  sub_2242A8F3C((_QWORD *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_223291230(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[2];
  std::__shared_weak_count *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  uint64_t (**v29)();
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  __int16 v36;

  sub_22429724C(a1, (uint64_t)&v29);
  v22[0] = &off_24EC20EB8;
  v3 = v30;
  v4 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v34;
    v8 = v35;
    v9 = v36;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v7 = v34;
    v8 = v35;
    v9 = v36;
  }
  v22[1] = v3;
  v23 = v4;
  v24 = v32;
  v25 = v33;
  v26 = v7;
  v27 = v8;
  v28 = v9;
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v29 = &off_24EC28CD0;
  v13 = v31;
  if (v31)
  {
    v14 = (unint64_t *)&v31->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v29 = &off_24EC218E0;
  sub_223298F3C((uint64_t)v22, (uint64_t)&v30);
  *a2 = &off_24EC25008;
  sub_223213E70((uint64_t)&v29, (uint64_t)(a2 + 1));
  v16 = v31;
  if (v31)
  {
    v17 = (unint64_t *)&v31->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v23;
  if (v23)
  {
    v20 = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_2232913FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_2231BD974((uint64_t)&a16);
  sub_2231B4CC8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223291418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231B4CC8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22329142C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  mach_timebase_info v20;
  std::__shared_weak_count *v21;
  mach_timebase_info v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 v29;
  __int16 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  _DWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  int v50;
  int v51;
  char *v52;
  size_t v53;
  int v54;
  uint64_t v55;
  char *v56;
  size_t v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  __int16 v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  __int128 v83;
  _OWORD v84[2];
  uint64_t (**v85)();
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  __int16 v93;
  uint64_t v94;
  mach_timebase_info info;
  _BYTE v96[28];
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t (**v100)();
  _QWORD v101[2];
  char v102;
  char v103;
  char v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    return;
  v6 = sub_2241471F8();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    return;
  v81 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v7 = mach_continuous_time();
  v8 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v75) = info.numer;
    LODWORD(v76) = info.denom;
    *(double *)&qword_255795558 = (double)v75 / (double)v76;
    __cxa_guard_release(&qword_255795560);
  }
  v101[0] = llround(*(double *)&qword_255795558 * (double)v7);
  v101[1] = 2;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v106 = (uint64_t)(a3 * 1000000000.0);
  v107 = 2;
  v108 = 1;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v9 = operator new();
  v85 = &off_24EC1F958;
  v10 = *(_QWORD *)(a2 + 8);
  v82 = (uint64_t)v6;
  if (!v10)
  {
    v94 = *(_QWORD *)(a2 + 32);
    v100 = &off_24EC217B0;
    sub_224498F50(&v94, (uint64_t)&info);
    v23 = operator new();
    *(_QWORD *)v23 = &off_24EC217F8;
    *(_OWORD *)(v23 + 8) = *(_OWORD *)v96;
    *(_OWORD *)(v23 + 20) = *(_OWORD *)&v96[12];
    *(_OWORD *)(v23 + 40) = v97;
    *(_QWORD *)(v23 + 56) = v98;
    *(_OWORD *)(v23 + 64) = v99;
    v24 = (std::__shared_weak_count *)operator new();
    v24->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    v24->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC21890;
    v24->__shared_weak_owners_ = 0;
    v24[1].__vftable = (std::__shared_weak_count_vtbl *)v23;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
    (*(void (**)(mach_timebase_info *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v23 + 64))(&info, v23, 4);
    v78 = *(_QWORD *)(*(_QWORD *)&info + 8);
    v79 = **(char ***)&info;
    v27 = *(unsigned int *)(*(_QWORD *)&info + 16);
    v80 = *(unsigned int *)(*(_QWORD *)&info + 20);
    info = 0;
    MEMORY[0x227684CE8]();
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 104))(v23);
    v29 = v28;
    if ((v28 & 0xFFFFFFu) <= 0x10000)
      v29 = 0;
    v30 = v28 & 0xFF00;
    if ((v28 & 0xFF0000) == 0)
      v30 = 0;
    v77 = v30 & 0xFF00 | v29;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    v32 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v27 == 1 && (_DWORD)v32 == 1)
    {
      v33 = *(unsigned int *)(a2 + 44);
      v34 = *(unsigned int *)(a2 + 32);
      if ((_DWORD)v33 == (_DWORD)v80 && (_DWORD)v33 == (_DWORD)v34)
      {
        v35 = (*(_DWORD *)(a2 + 36) * v80);
        v36 = *(const void **)(a2 + 24);
        if (!(_DWORD)v35 || v36)
        {
          if (!(_DWORD)v35)
            goto LABEL_71;
        }
        else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_55;
        }
        v57 = 4 * v35;
        v58 = v79;
        v59 = v36;
        goto LABEL_70;
      }
      if (!(_DWORD)v34)
        goto LABEL_71;
      v51 = *(_DWORD *)(a2 + 36);
      if (!v51)
        goto LABEL_71;
      v52 = *(char **)(a2 + 24);
      v53 = 4 * v34;
      v54 = v51 - 1;
      if (v51 == 1)
      {
        v56 = v79;
LABEL_67:
        if (v52
          || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          v58 = v56;
          v59 = v52;
          v57 = v53;
LABEL_70:
          memmove(v58, v59, v57);
          do
LABEL_71:
            v61 = __ldxr(p_shared_owners);
          while (__stxr(v61 + 1, p_shared_owners));
          v86 = v23;
          v87 = v24;
          v88 = 0;
          v89 = v78;
          v90 = 4 * v80;
          v91 = (uint64_t)v79;
          v92 = 4;
          v93 = v77;
          do
            v62 = __ldaxr(p_shared_owners);
          while (__stlxr(v62 - 1, p_shared_owners));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
          goto LABEL_76;
        }
      }
      else
      {
        v55 = 4 * v33;
        v56 = v79;
        while (v52
             || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          memmove(v56, v52, v53);
          v52 += v55;
          v56 += 4 * v80;
          if (!--v54)
            goto LABEL_67;
        }
      }
LABEL_55:
      abort();
    }
    v39 = *(_DWORD *)(a2 + 32);
    if (!v39)
      goto LABEL_71;
    v40 = *(_DWORD *)(a2 + 36);
    if (!v40)
      goto LABEL_71;
    v41 = v39 - 1;
    v42 = *(_DWORD **)(a2 + 24);
    v43 = v40 - 1;
    if (v40 == 1)
    {
      v47 = v79;
    }
    else
    {
      v44 = 4 * *(unsigned int *)(a2 + 44);
      v45 = 4 * v80;
      if (!v41)
      {
        v47 = v79;
        do
        {
          *v47 = *v42;
          v42 = (_DWORD *)((char *)v42 + v44);
          v47 = (_DWORD *)((char *)v47 + v45);
          --v43;
        }
        while (v43);
LABEL_65:
        *v47 = *v42;
        goto LABEL_71;
      }
      v46 = 0;
      v47 = v79;
      do
      {
        v48 = v47;
        v49 = v42;
        v50 = v41;
        do
        {
          *v48 = *v49;
          v49 += v32;
          v48 += v27;
          --v50;
        }
        while (v50);
        *v48 = *v49;
        v42 = (_DWORD *)((char *)v42 + v44);
        v47 = (_DWORD *)((char *)v47 + v45);
        ++v46;
      }
      while (v46 != v43);
    }
    if (v41)
    {
      v60 = 4 * v32;
      do
      {
        *v47 = *v42;
        v42 = (_DWORD *)((char *)v42 + v60);
        v47 += v27;
        --v41;
      }
      while (v41);
    }
    goto LABEL_65;
  }
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v10 = *(_QWORD *)(a2 + 8);
    v15 = *(std::__shared_weak_count **)(a2 + 16);
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  sub_224284140(v10, &info);
  v19 = (*(uint64_t (**)(mach_timebase_info))(**(_QWORD **)&info + 48))(info);
  v20 = info;
  if (info)
  {
    v21 = (std::__shared_weak_count *)operator new();
    v22 = info;
    v21->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20DE8;
    v21->__shared_owners_ = 0;
    v21->__shared_weak_owners_ = 0;
    v21[1].__vftable = (std::__shared_weak_count_vtbl *)v22;
  }
  else
  {
    v21 = 0;
  }
  v37 = *(_QWORD *)(a2 + 32);
  v38 = 4 * *(_DWORD *)(a2 + 44);
  v86 = (uint64_t)v20;
  v87 = v21;
  v88 = 0;
  v89 = v37;
  v90 = v38;
  v91 = v19;
  v92 = 4;
  v93 = 256;
LABEL_76:
  sub_2231F9F68((uint64_t)&v85, (uint64_t)&v83);
  v63 = v87;
  if (v87)
  {
    v64 = (unint64_t *)&v87->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  *(_QWORD *)v9 = &off_24EC21AC8;
  *(_QWORD *)(v9 + 8) = &off_24EC219D8;
  v66 = v83;
  v67 = v84[0];
  v83 = 0uLL;
  *(_OWORD *)(v9 + 16) = v66;
  *(_OWORD *)(v9 + 32) = v67;
  *(_OWORD *)(v9 + 46) = *(_OWORD *)((char *)v84 + 14);
  sub_2231AB0FC(v9 + 64, (uint64_t)v101);
  *(_QWORD *)v9 = &off_24EC21A48;
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  *(_QWORD *)v9 = &off_24EC6A528;
  info = (mach_timebase_info)&off_24EC6A3B8;
  *(_QWORD *)v96 = v9;
  v71 = (_QWORD *)operator new();
  *v71 = &off_24EC6A4B0;
  v71[1] = 0;
  v71[2] = 0;
  v71[3] = v9;
  *(_QWORD *)&v96[8] = v71;
  sub_2231AD66C((uint64_t)v101);
  sub_2231AA5A4(v82, v81, (uint64_t)&info);
  v72 = *(std::__shared_weak_count **)&v96[8];
  if (*(_QWORD *)&v96[8])
  {
    v73 = (unint64_t *)(*(_QWORD *)&v96[8] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
}

void sub_223291C70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_223291C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;
  unint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t v47;

  do
    v47 = __ldaxr(v44);
  while (__stlxr(v47 - 1, v44));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  MEMORY[0x227684CE8](v43, 0x10F3C4035895BD5);
  sub_2231AD66C((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_223291ECC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[2];
  std::__shared_weak_count *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  uint64_t (**v29)();
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  __int16 v36;

  sub_22429724C(a1, (uint64_t)&v29);
  v22[0] = &off_24EC20EB8;
  v3 = v30;
  v4 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v34;
    v8 = v35;
    v9 = v36;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v7 = v34;
    v8 = v35;
    v9 = v36;
  }
  v22[1] = v3;
  v23 = v4;
  v24 = v32;
  v25 = v33;
  v26 = v7;
  v27 = v8;
  v28 = v9;
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v29 = &off_24EC28CD0;
  v13 = v31;
  if (v31)
  {
    v14 = (unint64_t *)&v31->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v29 = &off_24EC21FE8;
  sub_223299B3C((uint64_t)v22, (uint64_t)&v30);
  *a2 = &off_24EC27F88;
  sub_223299348((uint64_t)&v29, (uint64_t)(a2 + 1));
  v16 = v31;
  if (v31)
  {
    v17 = (unint64_t *)&v31->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v23;
  if (v23)
  {
    v20 = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_223292098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_2231DCE9C((uint64_t)&a16);
  sub_2231B4CC8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232920B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231B4CC8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2232920C8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t CV3DReconLogMesh(uint64_t result, uint64_t a2, const char *a3, double a4)
{
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::mutex *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  void *__p;
  char v21;
  uint64_t v22;
  __int128 v23;
  void *__dst[2];
  unint64_t v25;

  v22 = a2;
  if (!result)
    return result;
  v5 = result;
  result = 0;
  if (!a3 || !a2 || !*(_QWORD *)(v5 + 8))
    return result;
  sub_22328CE6C("cv3d.recon.", (const char *)&v22);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v7 = sub_2241471F8();
    v8 = v7[2];
    if (!v8)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v8 = v7[2];
    }
    v9 = *(_QWORD *)(v8 + 64);
    v10 = (std::mutex *)(v9 + 32);
    std::mutex::lock((std::mutex *)(v9 + 32));
    v12 = *(_QWORD *)(v9 + 96);
    v11 = *(_QWORD *)(v9 + 104);
    std::mutex::unlock(v10);
    if (v12 != v11)
    {
      sub_2241471F8();
      v13 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
      {
        kdebug_trace();
        v14 = *(_QWORD *)(v5 + 8);
        if (a4 < 0.0)
          a4 = NAN;
        v15 = strlen(a3);
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
          goto LABEL_24;
        if (v15 >= 0x7FFFFFFFFFFFFFF8)
          sub_22316DBC0();
        if (v15 >= 0x17)
        {
          v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v15 | 7) != 0x17)
            v17 = v15 | 7;
          v18 = v17 + 1;
          v16 = (void **)operator new(v17 + 1);
          __dst[1] = (void *)v15;
          v25 = v18 | 0x8000000000000000;
          __dst[0] = v16;
        }
        else
        {
          HIBYTE(v25) = v15;
          v16 = __dst;
          if (!v15)
          {
LABEL_22:
            *((_BYTE *)v16 + v15) = 0;
            *(_QWORD *)&v23 = (uint64_t)(a4 * 1000000000.0);
            *((_QWORD *)&v23 + 1) = 2;
            v19 = sub_2241471F8();
            sub_22329D76C((uint64_t)v19, v13, v14, (uint64_t)__dst, &v23);
            if (SHIBYTE(v25) < 0)
              operator delete(__dst[0]);
LABEL_24:
            kdebug_trace();
            goto LABEL_25;
          }
        }
        memcpy(v16, a3, v15);
        goto LABEL_22;
      }
    }
  }
LABEL_25:
  if (v21 < 0)
    operator delete(__p);
  return 1;
}

void sub_2232923E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  sub_2231874DC((uint64_t)&a9);
  if (a19 < 0)
    operator delete(a14);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconLogCageMesh(uint64_t a1, const char *a2, double a3, double a4, double a5)
{
  BOOL v5;
  uint64_t v6;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  std::mutex *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  __int128 *p_dst;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  void *v42;
  int v43;
  float32x4_t v44;
  void *v45;
  char v46;
  uint64_t v47;
  __int128 v48;
  __int128 __dst;
  unint64_t v50;
  uint64_t (**v51)();
  uint64_t v52;
  uint64_t v53;
  void *__p[2];
  unint64_t v55;
  char v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  _QWORD v59[46];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  char v64;

  v47 = a1;
  if (a1)
    v5 = a2 == 0;
  else
    v5 = 1;
  v6 = !v5;
  if (!v5)
  {
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v9 = sub_2241471F8();
      v10 = v9[2];
      if (!v10)
      {
        v11 = v9;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v10 = v11[2];
      }
      v12 = *(_QWORD *)(v10 + 64);
      v13 = (std::mutex *)(v12 + 32);
      std::mutex::lock((std::mutex *)(v12 + 32));
      v15 = *(_QWORD *)(v12 + 96);
      v14 = *(_QWORD *)(v12 + 104);
      std::mutex::unlock(v13);
      if (v15 != v14)
      {
        sub_22328CE6C("cv3d.recon.", (const char *)&v47);
        sub_2241471F8();
        v16 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16))
          goto LABEL_53;
        kdebug_trace();
        if (a5 < 0.0)
          a5 = NAN;
        v17 = strlen(a2);
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16))
        {
LABEL_52:
          kdebug_trace();
LABEL_53:
          if (v46 < 0)
            operator delete(v45);
          return v6;
        }
        if (v17 >= 0x7FFFFFFFFFFFFFF8)
          sub_22316DBC0();
        if (v17 >= 0x17)
        {
          v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v19 = v17 | 7;
          v20 = v19 + 1;
          p_dst = (__int128 *)operator new(v19 + 1);
          *((_QWORD *)&__dst + 1) = v17;
          v50 = v20 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v50) = v17;
          p_dst = &__dst;
          if (!v17)
            goto LABEL_26;
        }
        memcpy(p_dst, a2, v17);
LABEL_26:
        *((_BYTE *)p_dst + v17) = 0;
        *(_QWORD *)&v48 = (uint64_t)(a5 * 1000000000.0);
        *((_QWORD *)&v48 + 1) = 2;
        v21 = sub_2241471F8();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16))
        {
          sub_2241498F4((uint64_t)&v57, 0);
          v63 = 0;
          v64 = -1;
          LODWORD(__p[1]) = v43;
          __p[0] = v42;
          v22 = v44;
          v51 = (uint64_t (**)())v44.i64[0];
          LODWORD(v52) = v44.i32[2];
          v22.i32[0] = 1036831949;
          sub_223CF1130((uint64_t)__p, (uint64_t)&v51, 1, (__int8 *)&v63, (uint64_t)&v57, v22, v23, v24);
          *(_OWORD *)__p = __dst;
          v55 = v50;
          __dst = 0uLL;
          v50 = 0;
          v56 = 1;
          sub_22329F414((uint64_t)&v57, (__int128 *)__p, &v48, &v60);
          if (v56 && SHIBYTE(v55) < 0)
            operator delete(__p[0]);
          sub_22316F8F4(&v57);
          v25 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 56))(v16);
          v26 = *v25;
          v27 = (std::__shared_weak_count *)v25[1];
          if (v27)
          {
            p_shared_owners = (unint64_t *)&v27->__shared_owners_;
            do
              v29 = __ldxr(p_shared_owners);
            while (__stxr(v29 + 1, p_shared_owners));
          }
          v31 = v61;
          v30 = v62;
          v51 = &off_24EC6A3B8;
          v52 = v61;
          v53 = v62;
          v61 = 0;
          v62 = 0;
          v57 = v26;
          v58 = v27;
          if (v27)
          {
            v32 = (unint64_t *)&v27->__shared_owners_;
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
          }
          v59[0] = &off_24EC6A3B8;
          v59[1] = v31;
          v59[2] = v30;
          if (v30)
          {
            v34 = (unint64_t *)(v30 + 8);
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
          }
          (*(void (**)(uint64_t *, uint64_t *))(*v21 + 16))(v21, &v57);
          sub_2241231D8((uint64_t)v59);
          v36 = v58;
          if (v58)
          {
            v37 = (unint64_t *)&v58->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          sub_2241231D8((uint64_t)&v51);
          if (v27)
          {
            v39 = (unint64_t *)&v27->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          sub_2241231D8((uint64_t)&v60);
        }
        if (SHIBYTE(v50) < 0)
          operator delete((void *)__dst);
        goto LABEL_52;
      }
    }
  }
  return v6;
}

void sub_2232928C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,int a44,__int16 a45,char a46,char a47,std::__shared_weak_count *a48)
{
  std::__shared_weak_count *v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;

  sub_2241231D8(v49);
  v52 = a48;
  if (a48)
  {
    p_shared_owners = (unint64_t *)&a48->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  sub_2241231D8((uint64_t)&a34);
  if (v48)
  {
    v55 = (unint64_t *)&v48->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  sub_2241231D8(v50 - 112);
  if (a33 < 0)
    operator delete(__p);
  sub_2231874DC((uint64_t)&a13);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconLogPlotYData(uint64_t a1, const char *a2, float a3, double a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::mutex *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  __int128 *p_dst;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  void *v21;
  __int128 __dst;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  int v27;
  void *__p;
  char v29;
  char v30[12];
  float v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;

  v31 = a3;
  *(_QWORD *)v30 = a1;
  if (a1)
    v4 = a2 == 0;
  else
    v4 = 1;
  v5 = !v4;
  if (v4)
    return v5;
  sub_22328CE6C("cv3d.recon.", v30);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v8 = sub_2241471F8();
    v9 = v8[2];
    if (!v9)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v9 = v8[2];
    }
    v10 = *(_QWORD *)(v9 + 64);
    v11 = (std::mutex *)(v10 + 32);
    std::mutex::lock((std::mutex *)(v10 + 32));
    v13 = *(_QWORD *)(v10 + 96);
    v12 = *(_QWORD *)(v10 + 104);
    std::mutex::unlock(v11);
    if (v13 != v12)
    {
      sub_2241471F8();
      v14 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
      {
        v25 = 0u;
        v26 = 0u;
        v27 = 728325608;
        kdebug_trace();
        if (a4 < 0.0)
          a4 = NAN;
        v15 = strlen(a2);
        if (v15 >= 0x7FFFFFFFFFFFFFF8)
          sub_22316DBC0();
        v16 = v15;
        if (v15 >= 0x17)
        {
          v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v15 | 7) != 0x17)
            v18 = v15 | 7;
          v19 = v18 + 1;
          p_dst = (__int128 *)operator new(v18 + 1);
          *((_QWORD *)&__dst + 1) = v16;
          v24 = v19 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v24) = v15;
          p_dst = &__dst;
          if (!v15)
          {
LABEL_24:
            *((_BYTE *)p_dst + v16) = 0;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
            {
              v33 = __dst;
              v34 = v24;
              *(_QWORD *)&v32 = (uint64_t)(a4 * 1000000000.0);
              *((_QWORD *)&v32 + 1) = 2;
              v20 = sub_2241471F8();
              sub_2231AF940((uint64_t)v20, v14, &v31, (uint64_t)&v33, &v32);
              if (SHIBYTE(v34) < 0)
              {
                v21 = (void *)v33;
LABEL_29:
                operator delete(v21);
              }
            }
            else if (SHIBYTE(v24) < 0)
            {
              v21 = (void *)__dst;
              goto LABEL_29;
            }
            kdebug_trace();
            goto LABEL_31;
          }
        }
        memcpy(p_dst, a2, v16);
        goto LABEL_24;
      }
    }
  }
LABEL_31:
  if (v29 < 0)
    operator delete(__p);
  return v5;
}

void sub_223292C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 73) < 0)
    operator delete(*(void **)(v26 - 96));
  sub_2231874DC((uint64_t)&a16);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconLogPlotXYData(uint64_t a1, const char *a2, float a3, float a4, double a5)
{
  BOOL v5;
  uint64_t v6;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  std::mutex *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  void **p_dst;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned __int8 v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v39;
  unint64_t v40;
  void **__dst;
  __int128 v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  __int128 v46;
  int v47;
  void *v48;
  char v49;
  uint64_t v50;
  _QWORD v51[2];
  std::__shared_weak_count *v52;
  mach_timebase_info info;
  _QWORD v54[2];
  _QWORD v55[2];
  void *__p;
  uint64_t v57;
  float *v58;
  _BYTE v59[15];
  char v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v50 = a1;
  if (a1)
    v5 = a2 == 0;
  else
    v5 = 1;
  v6 = !v5;
  if (v5)
    return v6;
  sub_22328CE6C("cv3d.recon.", (const char *)&v50);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v11 = sub_2241471F8();
    v12 = v11[2];
    if (!v12)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v12 = v11[2];
    }
    v13 = *(_QWORD *)(v12 + 64);
    v14 = (std::mutex *)(v13 + 32);
    std::mutex::lock((std::mutex *)(v13 + 32));
    v16 = *(_QWORD *)(v13 + 96);
    v15 = *(_QWORD *)(v13 + 104);
    std::mutex::unlock(v14);
    if (v16 != v15)
    {
      sub_2241471F8();
      v17 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17))
      {
        v45 = 0u;
        v46 = 0u;
        v47 = 728325608;
        kdebug_trace();
        __p = 0;
        v57 = 0;
        v58 = 0;
        v18 = (float *)operator new(8uLL);
        v57 = (uint64_t)(v18 + 2);
        v58 = v18 + 2;
        *v18 = a3;
        v18[1] = a4;
        __p = v18;
        sub_22450FA68(v51, 11, (uint64_t)&__p);
        v20 = v51[0];
        v19 = (std::__shared_weak_count *)v51[1];
        if ((*(_BYTE *)(v51[0] + 56) & 1) != 0
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2245B6C3A, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v43 = v20;
        v44 = v19;
        if (__p)
        {
          v57 = (uint64_t)__p;
          operator delete(__p);
        }
        if (a5 < 0.0)
          a5 = NAN;
        v21 = strlen(a2);
        if (v21 >= 0x7FFFFFFFFFFFFFF8)
          sub_22316DBC0();
        v22 = v21;
        if (v21 >= 0x17)
        {
          v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17)
            v24 = v21 | 7;
          v25 = v24 + 1;
          p_dst = (void **)operator new(v24 + 1);
          *(_QWORD *)&v42 = v22;
          *((_QWORD *)&v42 + 1) = v25 | 0x8000000000000000;
          __dst = p_dst;
        }
        else
        {
          HIBYTE(v42) = v21;
          p_dst = (void **)&__dst;
          if (!v21)
            goto LABEL_28;
        }
        memcpy(p_dst, a2, v22);
LABEL_28:
        *((_BYTE *)p_dst + v22) = 0;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17))
        {
          v26 = (float *)__dst;
          v54[0] = v42;
          *(_QWORD *)((char *)v54 + 7) = *(_QWORD *)((char *)&v42 + 7);
          v27 = SHIBYTE(v42);
          v42 = 0uLL;
          __dst = 0;
          v28 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17))
          {
            v29 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 56))(v17);
            v55[0] = v54[0];
            *(_QWORD *)((char *)v55 + 7) = *(_QWORD *)((char *)v54 + 7);
            v54[0] = 0;
            *(_QWORD *)((char *)v54 + 7) = 0;
            v30 = mach_continuous_time();
            v31 = atomic_load((unsigned __int8 *)&qword_255795560);
            if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
            {
              mach_timebase_info(&info);
              LODWORD(v39) = info.numer;
              LODWORD(v40) = info.denom;
              *(double *)&qword_255795558 = (double)v39 / (double)v40;
              __cxa_guard_release(&qword_255795560);
            }
            __p = (void *)llround(*(double *)&qword_255795558 * (double)v30);
            v57 = 2;
            v58 = v26;
            *(_QWORD *)v59 = v55[0];
            *(_QWORD *)&v59[7] = *(_QWORD *)((char *)v55 + 7);
            v60 = v27;
            v55[0] = 0;
            *(_QWORD *)((char *)v55 + 7) = 0;
            v61 = 1;
            v62 = 0;
            v63 = 0;
            v64 = (uint64_t)(a5 * 1000000000.0);
            v65 = 2;
            v66 = 1;
            v67 = 0;
            v68 = 0;
            v69 = 0;
            v70 = 0;
            sub_22329F6A8(&v43, (uint64_t)&__p, v51);
            sub_2231AD66C((uint64_t)&__p);
            sub_2231AA5A4((uint64_t)v28, v29, (uint64_t)v51);
            v32 = v52;
            if (v52)
            {
              p_shared_owners = (unint64_t *)&v52->__shared_owners_;
              do
                v34 = __ldaxr(p_shared_owners);
              while (__stlxr(v34 - 1, p_shared_owners));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
          }
          else if (v27 < 0)
          {
            operator delete(v26);
          }
        }
        if (SHIBYTE(v42) < 0)
          operator delete(__dst);
        v35 = v44;
        if (v44)
        {
          v36 = (unint64_t *)&v44->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        kdebug_trace();
      }
    }
  }
  if (v49 < 0)
    operator delete(v48);
  return v6;
}

void sub_22329320C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  void *v40;
  int v41;

  __cxa_guard_abort(&qword_255795560);
  if (v41 < 0)
    operator delete(v40);
  if (a15 < 0)
    operator delete(__p);
  sub_223167354((uint64_t)&a16);
  sub_2231874DC((uint64_t)&a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconLogMessage(const char *a1, int a2, const char *a3, int a4, const char *a5)
{
  BOOL v5;
  BOOL v7;
  int v8;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  std::mutex *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  size_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  size_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  size_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  unsigned __int8 v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unint64_t v50;
  unint64_t v51;
  int v52;
  void *__dst[2];
  uint64_t v54;
  int v55;
  void *v56[2];
  unint64_t v57;
  int v58;
  void *v59[2];
  unint64_t v60;
  void *v61[2];
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  int v65;
  std::string __p;
  mach_timebase_info info;
  std::__shared_weak_count *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[48];
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  if (a1)
    v5 = a3 == 0;
  else
    v5 = 1;
  v7 = !v5 && a5 != 0 && (a2 - 7) >= 0xFFFFFFFA;
  v8 = !v7;
  if (!v7)
    return v8 ^ 1u;
  v14 = atomic_load((unsigned __int8 *)&qword_2540CAAD8);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAAD8))
  {
    sub_22455F53C(__dst);
    sub_223174DE4(&v69, "cv3d.applecv3d");
    sub_2232300E0((uint64_t **)__dst, (uint64_t)&v69, &qword_2540CAAD0);
    if (SHIBYTE(v71) < 0)
      operator delete(v69);
    __cxa_guard_release(&qword_2540CAAD8);
  }
  v15 = qword_2540CAAD0;
  v17 = qword_2540CAAD0 + 16;
  v16 = *(_QWORD *)(qword_2540CAAD0 + 16);
  v69 = "cv3d.recon.";
  v70 = 11;
  v18 = *(unsigned __int8 *)(qword_2540CAAD0 + 39);
  if ((v18 & 0x80u) != 0)
    v18 = *(_QWORD *)(qword_2540CAAD0 + 24);
  else
    v16 = qword_2540CAAD0 + 16;
  v71 = v16;
  v72 = v18;
  sub_2231A9820((uint64_t)&v69, (uint64_t)v73, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v19 = sub_2241471F8();
    v20 = v19[2];
    if (!v20)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v20 = v19[2];
    }
    v21 = *(_QWORD *)(v20 + 64);
    v22 = (std::mutex *)(v21 + 32);
    std::mutex::lock((std::mutex *)(v21 + 32));
    v52 = v8;
    v24 = *(_QWORD *)(v21 + 96);
    v23 = *(_QWORD *)(v21 + 104);
    std::mutex::unlock(v22);
    v5 = v24 == v23;
    v8 = v52;
    if (!v5)
    {
      sub_2241471F8();
      v25 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      v8 = v52;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25))
      {
        v63 = 0u;
        v64 = 0u;
        v65 = 728325608;
        kdebug_trace();
        if (*(char *)(v15 + 39) < 0)
        {
          sub_223197FA4(__dst, *(void **)(v15 + 16), *(_QWORD *)(v15 + 24));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)v17;
          v54 = *(_QWORD *)(v17 + 16);
        }
        v55 = a2;
        v26 = v56;
        v27 = strlen(a3);
        if (v27 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v28 = (void *)v27;
        if (v27 >= 0x17)
        {
          v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v27 | 7) != 0x17)
            v29 = v27 | 7;
          v30 = v29 + 1;
          v26 = operator new(v29 + 1);
          v56[1] = v28;
          v57 = v30 | 0x8000000000000000;
          v56[0] = v26;
        }
        else
        {
          HIBYTE(v57) = v27;
          if (!v27)
          {
LABEL_36:
            *((_BYTE *)v28 + (_QWORD)v26) = 0;
            v58 = a4;
            v31 = v59;
            v32 = strlen(a5);
            if (v32 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v33 = (void *)v32;
            if (v32 >= 0x17)
            {
              v34 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v32 | 7) != 0x17)
                v34 = v32 | 7;
              v35 = v34 + 1;
              v31 = operator new(v34 + 1);
              v59[1] = v33;
              v60 = v35 | 0x8000000000000000;
              v59[0] = v31;
            }
            else
            {
              HIBYTE(v60) = v32;
              if (!v32)
              {
LABEL_44:
                *((_BYTE *)v33 + (_QWORD)v31) = 0;
                v36 = v61;
                v37 = strlen(a1);
                if (v37 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v38 = (void *)v37;
                v8 = v52;
                if (v37 >= 0x17)
                {
                  v39 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v37 | 7) != 0x17)
                    v39 = v37 | 7;
                  v40 = v39 + 1;
                  v36 = operator new(v39 + 1);
                  v61[1] = v38;
                  v62 = v40 | 0x8000000000000000;
                  v61[0] = v36;
                }
                else
                {
                  HIBYTE(v62) = v37;
                  if (!v37)
                    goto LABEL_52;
                }
                memcpy(v36, a1, (size_t)v38);
LABEL_52:
                *((_BYTE *)v38 + (_QWORD)v36) = 0;
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25))
                {
                  v41 = *(double *)&qword_255788F20;
                  v42 = sub_2241471F8();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25))
                  {
                    v43 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 56))(v25);
                    v44 = mach_continuous_time();
                    v45 = atomic_load((unsigned __int8 *)&qword_255795560);
                    if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
                    {
                      mach_timebase_info(&info);
                      LODWORD(v50) = info.numer;
                      LODWORD(v51) = info.denom;
                      *(double *)&qword_255795558 = (double)v50 / (double)v51;
                      __cxa_guard_release(&qword_255795560);
                      v8 = v52;
                    }
                    v69 = (void *)llround(*(double *)&qword_255795558 * (double)v44);
                    v70 = 2;
                    LOBYTE(v71) = 0;
                    v73[8] = 0;
                    v73[16] = 0;
                    v73[40] = 0;
                    v74 = (uint64_t)(v41 * 1000000000.0);
                    v75 = 2;
                    v76 = 1;
                    v77 = 0;
                    v78 = 0;
                    v79 = 0;
                    v80 = 0;
                    sub_2232A1414((uint64_t)__dst, (uint64_t)&v69, &info);
                    sub_2231AD66C((uint64_t)&v69);
                    sub_2231AA5A4((uint64_t)v42, v43, (uint64_t)&info);
                    v46 = v68;
                    if (v68)
                    {
                      p_shared_owners = (unint64_t *)&v68->__shared_owners_;
                      do
                        v48 = __ldaxr(p_shared_owners);
                      while (__stlxr(v48 - 1, p_shared_owners));
                      if (!v48)
                      {
                        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                        std::__shared_weak_count::__release_weak(v46);
                      }
                    }
                  }
                }
                if (SHIBYTE(v62) < 0)
                {
                  operator delete(v61[0]);
                  if ((SHIBYTE(v60) & 0x80000000) == 0)
                  {
LABEL_62:
                    if ((SHIBYTE(v57) & 0x80000000) == 0)
                      goto LABEL_63;
                    goto LABEL_70;
                  }
                }
                else if ((SHIBYTE(v60) & 0x80000000) == 0)
                {
                  goto LABEL_62;
                }
                operator delete(v59[0]);
                if ((SHIBYTE(v57) & 0x80000000) == 0)
                {
LABEL_63:
                  if ((SHIBYTE(v54) & 0x80000000) == 0)
                  {
LABEL_64:
                    kdebug_trace();
                    goto LABEL_65;
                  }
LABEL_71:
                  operator delete(__dst[0]);
                  goto LABEL_64;
                }
LABEL_70:
                operator delete(v56[0]);
                if ((SHIBYTE(v54) & 0x80000000) == 0)
                  goto LABEL_64;
                goto LABEL_71;
              }
            }
            memcpy(v31, a5, (size_t)v33);
            goto LABEL_44;
          }
        }
        memcpy(v26, a3, (size_t)v28);
        goto LABEL_36;
      }
    }
  }
LABEL_65:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8 ^ 1u;
}

void sub_223293950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  __cxa_guard_abort(&qword_255795560);
  sub_223293AA0((uint64_t)&a11);
  sub_2231874DC((uint64_t)&a34);
  if (a44 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223293AA0(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 32));
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_8;
LABEL_4:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_9:
  operator delete(*(void **)a1);
  return a1;
}

BOOL CV3DReconLogPose(const char *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, double a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::mutex *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t *v18;
  __n128 *v19;
  __int128 *v20;
  __int128 **v21;
  __int128 *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  const char *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  void *v47;
  char v48;
  const char *v49;
  __int128 v50;
  _QWORD v51[3];
  void *__p;
  _BYTE v53[15];
  char v54;
  char v55;
  __int128 *v56;
  void *v57;
  __int128 *v58;
  const char *v59;
  const char *v60;
  void *v61;
  char v62;
  char v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  __n128 *v72;
  __int128 v73;
  char v74;
  int v75;
  _QWORD v76[3];

  v76[2] = *MEMORY[0x24BDAC8D0];
  v49 = a1;
  if (a1)
  {
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v8 = sub_2241471F8();
      v9 = v8[2];
      if (!v9)
      {
        v10 = v8;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v9 = v10[2];
      }
      v11 = *(_QWORD *)(v9 + 64);
      v12 = (std::mutex *)(v11 + 32);
      std::mutex::lock((std::mutex *)(v11 + 32));
      v14 = *(_QWORD *)(v11 + 96);
      v13 = *(_QWORD *)(v11 + 104);
      std::mutex::unlock(v12);
      if (v14 != v13)
      {
        sub_22328CE6C("cv3d.recon.", (const char *)&v49);
        sub_2241471F8();
        v15 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
        {
LABEL_65:
          if (v48 < 0)
            operator delete(v47);
          return a1 != 0;
        }
        v44 = 0u;
        v45 = 0u;
        v46 = 728325616;
        kdebug_trace();
        if (a6 < 0.0)
          a6 = NAN;
        v75 = 0;
        sub_2231A17D8(&v73, "world_to_");
        if (v49)
        {
          v56 = &v73;
          v57 = &v49;
          v58 = &v73;
          v59 = (const char *)&v49;
          v60 = (const char *)&v49;
          if (v75 != -1)
          {
            *(_QWORD *)&v69 = &v56;
            ((void (*)(__int128 *, __int128 *))off_24EC27970[v75])(&v69, &v73);
LABEL_15:
            v56 = &v73;
            v57 = "_camera";
            v58 = &v73;
            v59 = "_camera";
            v60 = "_camera";
            if (v75 == -1)
              sub_22316DD70();
            *(_QWORD *)&v69 = &v56;
            ((void (*)(__int128 *, __int128 *))off_24EC27580[v75])(&v69, &v73);
            if (v75 == -1)
              sub_22316DD70();
            v56 = &v69;
            ((void (*)(void **__return_ptr, __int128 **, __int128 *))off_24EC275C8[v75])(&v42, &v56, &v73);
            if (v75 != -1)
              ((void (*)(__int128 **, __int128 *))off_24EC27568[v75])(&v56, &v73);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
            {
              v16 = v42;
              v76[0] = v43;
              *(_QWORD *)((char *)v76 + 7) = *(_QWORD *)((char *)&v43 + 7);
              v17 = SHIBYTE(v43);
              v43 = 0uLL;
              v42 = 0;
              *(_QWORD *)&v50 = (uint64_t)(a6 * 1000000000.0);
              *((_QWORD *)&v50 + 1) = 2;
              v18 = sub_2241471F8();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
              {
                v19 = (__n128 *)operator new();
                *v19 = a2;
                v19[1] = a3;
                v19[2] = a4;
                v19[3] = a5;
                v19[8].n128_u32[0] = 0;
                v19[8].n128_u8[8] = 4;
                v72 = v19;
                LOBYTE(v73) = 0;
                LOBYTE(v75) = 0;
                sub_2232A54A8((uint64_t)&v67, &v49);
                v69 = v67;
                v70 = v68;
                v68 = 0;
                v67 = 0uLL;
                v71 = 1;
                sub_22414372C((uint64_t)&v56, (uint64_t *)&v72, &v73, &v69);
                if (v71 && SHIBYTE(v70) < 0)
                  operator delete((void *)v69);
                if (SHIBYTE(v68) < 0)
                  operator delete((void *)v67);
                if ((_BYTE)v75 && v74 < 0)
                  operator delete((void *)v73);
                MEMORY[0x227684CE8](v19, 0x1000C4072FAA15ELL);
                __p = v16;
                *(_QWORD *)v53 = v76[0];
                *(_QWORD *)&v53[7] = *(_QWORD *)((char *)v76 + 7);
                v54 = v17;
                v76[0] = 0;
                *(_QWORD *)((char *)v76 + 7) = 0;
                v55 = 1;
                sub_2232A3848((uint64_t)&v56, (__int128 *)&__p, &v50, &v64);
                if (v55 && v54 < 0)
                  operator delete(__p);
                if (v63 && v62 < 0)
                  operator delete(v61);
                if ((_BYTE)v60 && SHIBYTE(v59) < 0)
                  operator delete(v57);
                v20 = v56;
                v56 = 0;
                if (v20)
                  MEMORY[0x227684CE8](v20, 0x1000C4072FAA15ELL);
                v21 = (__int128 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 56))(v15);
                v22 = *v21;
                v23 = (std::__shared_weak_count *)v21[1];
                if (v23)
                {
                  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
                  do
                    v25 = __ldxr(p_shared_owners);
                  while (__stxr(v25 + 1, p_shared_owners));
                }
                v27 = v65;
                v26 = v66;
                v51[0] = &off_24EC6A3B8;
                v51[1] = v65;
                v51[2] = v66;
                v65 = 0;
                v66 = 0;
                v56 = v22;
                v57 = v23;
                if (v23)
                {
                  v28 = (unint64_t *)&v23->__shared_owners_;
                  do
                    v29 = __ldxr(v28);
                  while (__stxr(v29 + 1, v28));
                }
                v58 = (__int128 *)&off_24EC6A3B8;
                v59 = v27;
                v60 = (const char *)v26;
                if (v26)
                {
                  v30 = (unint64_t *)(v26 + 8);
                  do
                    v31 = __ldxr(v30);
                  while (__stxr(v31 + 1, v30));
                }
                (*(void (**)(uint64_t *, __int128 **))(*v18 + 16))(v18, &v56);
                sub_2241231D8((uint64_t)&v58);
                v32 = (std::__shared_weak_count *)v57;
                if (v57)
                {
                  v33 = (unint64_t *)((char *)v57 + 8);
                  do
                    v34 = __ldaxr(v33);
                  while (__stlxr(v34 - 1, v33));
                  if (!v34)
                  {
                    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                    std::__shared_weak_count::__release_weak(v32);
                  }
                }
                sub_2241231D8((uint64_t)v51);
                if (v23)
                {
                  v35 = (unint64_t *)&v23->__shared_owners_;
                  do
                    v36 = __ldaxr(v35);
                  while (__stlxr(v36 - 1, v35));
                  if (!v36)
                  {
                    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                    std::__shared_weak_count::__release_weak(v23);
                  }
                }
                sub_2241231D8((uint64_t)&v64);
              }
              else if (v17 < 0)
              {
                operator delete(v16);
              }
            }
            if (SHIBYTE(v43) < 0)
              operator delete(v42);
            kdebug_trace();
            goto LABEL_65;
          }
        }
        else
        {
          v56 = &v73;
          v57 = "nullptr";
          v58 = &v73;
          v59 = "nullptr";
          v60 = "nullptr";
          if (v75 != -1)
          {
            *(_QWORD *)&v69 = &v56;
            ((void (*)(__int128 *, __int128 *))off_24EC27580[v75])(&v69, &v73);
            goto LABEL_15;
          }
        }
        sub_22316DD70();
      }
    }
  }
  return a1 != 0;
}

void sub_22329418C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  std::__shared_weak_count *v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;

  sub_2241231D8(v64);
  v67 = a50;
  if (a50)
  {
    p_shared_owners = (unint64_t *)&a50->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  sub_2241231D8((uint64_t)&a39);
  if (v63)
  {
    v70 = (unint64_t *)&v63->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  sub_2241231D8(v65 - 224);
  if (a23 < 0)
    operator delete(__p);
  sub_2231874DC((uint64_t)&a24);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(a1);
}

BOOL CV3DReconLogCamera(unsigned int a1, uint64_t a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, double a8, double a9, double a10, double a11)
{
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  std::mutex *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned __int8 v27;
  char *v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  std::mutex *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  __int128 v60;
  __int128 v61;
  int v62;
  __int128 __p;
  char v64;
  __int128 v65;
  uint64_t v66;
  void *v67;
  std::__shared_weak_count *v68;
  mach_timebase_info info;
  char *v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  __int128 v75;
  int v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  void *v80;
  _BYTE v81[56];
  int v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v66 = a3;
  if (a3)
  {
    HIDWORD(a8) = HIDWORD(a9);
    *(double *)&v60 = a8;
    *((double *)&v60 + 1) = a10;
    sub_223207E58(&v79, (int *)&v60);
    v15 = v80;
    v16 = *(_QWORD *)v81;
    v65 = *(_OWORD *)&v81[8];
    v74 = *(_OWORD *)&v81[24];
    v75 = *(_OWORD *)&v81[40];
    v76 = v82;
    sub_22328CE6C("cv3d.recon.", (const char *)&v66);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v17 = sub_2241471F8();
      v18 = v17[2];
      if (!v18)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v18 = v17[2];
      }
      v19 = *(_QWORD *)(v18 + 64);
      v20 = (std::mutex *)(v19 + 32);
      std::mutex::lock((std::mutex *)(v19 + 32));
      v22 = *(_QWORD *)(v19 + 96);
      v21 = *(_QWORD *)(v19 + 104);
      std::mutex::unlock(v20);
      if (v22 != v21)
      {
        sub_2241471F8();
        v23 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23))
        {
          v60 = 0u;
          v61 = 0u;
          v62 = 728325608;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23))
          {
            v24 = *(double *)&qword_255788F20;
            v25 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23))
            {
              v55 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 56))(v23);
              v26 = mach_continuous_time();
              v27 = atomic_load((unsigned __int8 *)&qword_255795560);
              if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
              {
                mach_timebase_info(&info);
                LODWORD(v53) = info.numer;
                LODWORD(v54) = info.denom;
                *(double *)&qword_255795558 = (double)v53 / (double)v54;
                __cxa_guard_release(&qword_255795560);
              }
              v79 = llround(*(double *)&qword_255795558 * (double)v26);
              v80 = (void *)2;
              strcpy(v81, "intrinsics");
              *(_QWORD *)&v81[11] = v77;
              *(_DWORD *)&v81[19] = v78;
              *(_WORD *)&v81[23] = 266;
              v77 = 0;
              v78 = 0;
              v81[32] = 0;
              LOBYTE(v82) = 0;
              v83 = (uint64_t)(v24 * 1000000000.0);
              v84 = 2;
              v85 = 1;
              v86 = 0;
              v87 = 0;
              v88 = 0;
              v89 = 0;
              v28 = (char *)operator new(0x78uLL);
              v29 = (std::__shared_weak_count *)v28;
              *(_OWORD *)(v28 + 56) = v65;
              v30 = v75;
              *(_OWORD *)(v28 + 72) = v74;
              *((_QWORD *)v28 + 1) = 0;
              v31 = (unint64_t *)(v28 + 8);
              *(_QWORD *)v28 = &off_24EC28318;
              *((_QWORD *)v28 + 2) = 0;
              *((_QWORD *)v28 + 4) = &off_24EC20868;
              *((_QWORD *)v28 + 5) = v15;
              *((_QWORD *)v28 + 6) = v16;
              *(_OWORD *)(v28 + 88) = v30;
              *((_DWORD *)v28 + 26) = v76;
              *((_QWORD *)v28 + 3) = &off_24EC207B8;
              *((_QWORD *)v28 + 14) = a1 | (unint64_t)(a2 << 32);
              info = (mach_timebase_info)&off_24EC6D000;
              v70 = v28 + 24;
              v71 = (std::__shared_weak_count *)v28;
              do
                v32 = __ldxr(v31);
              while (__stxr(v32 + 1, v31));
              do
                v33 = __ldaxr(v31);
              while (__stlxr(v33 - 1, v31));
              if (!v33)
              {
                (*(void (**)(char *))(*(_QWORD *)v28 + 16))(v28);
                std::__shared_weak_count::__release_weak(v29);
              }
              sub_2232A55DC((uint64_t)&info, (uint64_t)&v79, &v67);
              info = (mach_timebase_info)&off_24EC6D000;
              v34 = v71;
              if (v71)
              {
                p_shared_owners = (unint64_t *)&v71->__shared_owners_;
                do
                  v36 = __ldaxr(p_shared_owners);
                while (__stlxr(v36 - 1, p_shared_owners));
                if (!v36)
                {
                  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                  std::__shared_weak_count::__release_weak(v34);
                }
              }
              sub_2231AD66C((uint64_t)&v79);
              sub_2231AA5A4((uint64_t)v25, v55, (uint64_t)&v67);
              v37 = v68;
              if (v68)
              {
                v38 = (unint64_t *)&v68->__shared_owners_;
                do
                  v39 = __ldaxr(v38);
                while (__stlxr(v39 - 1, v38));
                if (!v39)
                {
                  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                  std::__shared_weak_count::__release_weak(v37);
                }
              }
            }
          }
          kdebug_trace();
        }
      }
    }
    if (v64 < 0)
      operator delete((void *)__p);
    sub_22328CE6C("cv3d.recon.", (const char *)&v66);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v40 = sub_2241471F8();
      v41 = v40[2];
      if (!v41)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v41 = v40[2];
      }
      v42 = *(_QWORD *)(v41 + 64);
      v43 = (std::mutex *)(v42 + 32);
      std::mutex::lock((std::mutex *)(v42 + 32));
      v45 = *(_QWORD *)(v42 + 96);
      v44 = *(_QWORD *)(v42 + 104);
      std::mutex::unlock(v43);
      if (v45 != v44)
      {
        sub_2241471F8();
        v46 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46))
        {
          v60 = 0u;
          v61 = 0u;
          v62 = 728325608;
          kdebug_trace();
          v47 = (__n128 *)operator new();
          *v47 = a4;
          v47[1] = a5;
          v47[2] = a6;
          v47[3] = a7;
          v47[8].n128_u32[0] = 0;
          v47[8].n128_u8[8] = 4;
          v48 = operator new();
          *(_BYTE *)v48 = 0;
          *(_DWORD *)(v48 + 128) = -1;
          v49 = v47[8].n128_u32[0];
          if ((_DWORD)v49 != -1)
          {
            ((void (*)(mach_timebase_info *, uint64_t, __n128 *))off_24EC6BD10[v49])(&info, v48, v47);
            *(_DWORD *)(v48 + 128) = v49;
          }
          *(_BYTE *)(v48 + 136) = v47[8].n128_u8[8];
          v79 = v48;
          LOBYTE(v80) = 0;
          v81[16] = 0;
          strcpy(&v81[24], "intrinsics");
          *(_QWORD *)&v81[35] = v72;
          *(_DWORD *)&v81[43] = v73;
          *(_WORD *)&v81[47] = 266;
          v72 = 0;
          v73 = 0;
          if (a11 < 0.0)
            a11 = NAN;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46))
          {
            HIBYTE(v71) = 4;
            strcpy((char *)&info, "WtoC");
            *(_QWORD *)&__p = (uint64_t)(a11 * 1000000000.0);
            *((_QWORD *)&__p + 1) = 2;
            v50 = sub_2241471F8();
            sub_2232A6F44((uint64_t)v50, v46, (uint64_t)&v79, (uint64_t)&info, &__p);
            if (SHIBYTE(v71) < 0)
              operator delete(*(void **)&info);
          }
          if (v81[48] && (v81[47] & 0x80000000) != 0)
            operator delete(*(void **)&v81[24]);
          if (v81[16] && (v81[15] & 0x80000000) != 0)
            operator delete(v80);
          v51 = v79;
          v79 = 0;
          if (v51)
            MEMORY[0x227684CE8](v51, 0x1000C4072FAA15ELL);
          MEMORY[0x227684CE8](v47, 0x1000C4072FAA15ELL);
          kdebug_trace();
        }
      }
    }
    if (SHIBYTE(v68) < 0)
      operator delete(v67);
  }
  return a3 != 0;
}

void sub_223294B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  __cxa_guard_abort(&qword_255795560);
  sub_2231874DC((uint64_t)&a19);
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_223294C8C(uint64_t *a1)
{
  uint64_t v2;

  if (*((_BYTE *)a1 + 64) && *((char *)a1 + 63) < 0)
  {
    operator delete((void *)a1[5]);
    if (!*((_BYTE *)a1 + 32))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)a1 + 32))
  {
    goto LABEL_7;
  }
  if (*((char *)a1 + 31) < 0)
    operator delete((void *)a1[1]);
LABEL_7:
  v2 = *a1;
  *a1 = 0;
  if (v2)
    MEMORY[0x227684CE8](v2, 0x1000C4072FAA15ELL);
  return a1;
}

uint64_t CV3DReconLogDictionary(CFTypeRef cf, uint64_t a2, double a3)
{
  std::__shared_weak_count *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::mutex *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v42;
  unint64_t v43;
  void *__p;
  char v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  mach_timebase_info info;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v50 = a2;
  sub_22319EE1C(&v57, cf);
  v5 = v57;
  v4 = (std::__shared_weak_count *)v58;
  if (v58)
  {
    v6 = (unint64_t *)(v58 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = (std::__shared_weak_count *)v58;
    if (v58)
    {
      v9 = (unint64_t *)(v58 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    do
      v11 = __ldxr(v6);
    while (__stxr(v11 + 1, v6));
    v48 = v5;
    v49 = v4;
    do
      v12 = __ldxr(v6);
    while (__stxr(v12 + 1, v6));
    do
      v13 = __ldaxr(v6);
    while (__stlxr(v13 - 1, v6));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    do
      v14 = __ldaxr(v6);
    while (__stlxr(v14 - 1, v6));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v48 = v57;
    v49 = 0;
  }
  sub_2244E40A8(&v46, (uint64_t)&v48, 1);
  sub_22328CE6C("cv3d.recon.", (const char *)&v50);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v15 = sub_2241471F8();
    v16 = v15[2];
    if (!v16)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v16 = v15[2];
    }
    v17 = *(_QWORD *)(v16 + 64);
    v18 = (std::mutex *)(v17 + 32);
    std::mutex::lock((std::mutex *)(v17 + 32));
    v20 = *(_QWORD *)(v17 + 96);
    v19 = *(_QWORD *)(v17 + 104);
    std::mutex::unlock(v18);
    if (v20 != v19)
    {
      sub_2241471F8();
      v21 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
      {
        kdebug_trace();
        if (a3 < 0.0)
          a3 = NAN;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
        {
          v22 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
          {
            v23 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 56))(v21);
            v24 = mach_continuous_time();
            v25 = atomic_load((unsigned __int8 *)&qword_255795560);
            if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
            {
              mach_timebase_info(&info);
              LODWORD(v42) = info.numer;
              LODWORD(v43) = info.denom;
              *(double *)&qword_255795558 = (double)v42 / (double)v43;
              __cxa_guard_release(&qword_255795560);
            }
            v57 = llround(*(double *)&qword_255795558 * (double)v24);
            v58 = 2;
            v59 = 0;
            v60 = 0;
            v61 = 0;
            v62 = 0;
            v63 = (uint64_t)(a3 * 1000000000.0);
            v64 = 2;
            v65 = 1;
            v66 = 0;
            v67 = 0;
            v68 = 0;
            v69 = 0;
            v26 = v46;
            v27 = v47;
            v54 = v46;
            v55 = v47;
            if (v47)
            {
              p_shared_owners = (unint64_t *)&v47->__shared_owners_;
              do
                v29 = __ldxr(p_shared_owners);
              while (__stxr(v29 + 1, p_shared_owners));
            }
            v30 = (std::__shared_weak_count_vtbl *)operator new();
            v30->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_24EC20AE0;
            v30->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v26;
            v30->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v27;
            v54 = 0;
            v55 = 0;
            sub_2231AB0FC((uint64_t)&v30->__on_zero_shared_weak, (uint64_t)&v57);
            v30->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_24EC66920;
            v56 = 0;
            info = (mach_timebase_info)&off_24EC6A3B8;
            v52 = v30;
            v31 = (std::__shared_weak_count *)operator new();
            v31->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6A4B0;
            v31->__shared_owners_ = 0;
            v31->__shared_weak_owners_ = 0;
            v31[1].__vftable = v30;
            v53 = v31;
            sub_2231AD66C((uint64_t)&v57);
            sub_2231AA5A4((uint64_t)v22, v23, (uint64_t)&info);
            v32 = v53;
            if (v53)
            {
              v33 = (unint64_t *)&v53->__shared_owners_;
              do
                v34 = __ldaxr(v33);
              while (__stlxr(v34 - 1, v33));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
          }
        }
        kdebug_trace();
      }
    }
  }
  if (v45 < 0)
    operator delete(__p);
  v35 = v47;
  if (v47)
  {
    v36 = (unint64_t *)&v47->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v49;
  if (v49)
  {
    v39 = (unint64_t *)&v49->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  return 1;
}

void sub_223295240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,int a32,__int16 a33,char a34,char a35)
{
  __cxa_guard_abort(&qword_255795560);
  sub_2231874DC((uint64_t)&a9);
  if (a20 < 0)
    operator delete(__p);
  sub_223167354((uint64_t)&a21);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (!a24)
      JUMPOUT(0x2232951C0);
    JUMPOUT(0x223295190);
  }
  sub_223167354((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_2232953B0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  if (*(_BYTE *)(a1 + 504))
  {
    if (*(_BYTE *)(a1 + 488))
    {
      v2 = *(std::__shared_weak_count **)(a1 + 480);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v4 = __ldaxr(p_shared_owners);
        while (__stlxr(v4 - 1, p_shared_owners));
        if (!v4)
        {
          ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
          std::__shared_weak_count::__release_weak(v2);
        }
      }
    }
    if (*(_BYTE *)(a1 + 464))
    {
      v5 = *(std::__shared_weak_count **)(a1 + 456);
      if (v5)
      {
        v6 = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    if (*(_BYTE *)(a1 + 440))
      sub_2232954B0(a1);
    return a1;
  }
  v9 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v9)
    return a1;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

uint64_t sub_2232954B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;

  if (*(_BYTE *)(a1 + 432))
  {
    v2 = *(_QWORD *)(a1 + 408);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 416);
      v4 = *(void **)(a1 + 408);
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 96);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 120;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 408);
      }
      *(_QWORD *)(a1 + 416) = v2;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 400))
  {
    v8 = *(void **)(a1 + 312);
    if (v8)
    {
      *(_QWORD *)(a1 + 320) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(a1 + 288);
    if (v9)
    {
      *(_QWORD *)(a1 + 296) = v9;
      operator delete(v9);
    }
  }
  sub_223295900(a1 + 192);
  if (*(_BYTE *)(a1 + 184))
  {
    v10 = *(_QWORD **)(a1 + 160);
    if (v10)
    {
      v11 = *(_QWORD **)(a1 + 168);
      v12 = *(void **)(a1 + 160);
      if (v11 != v10)
      {
        do
          v11 = sub_2232959C0(v11 - 20);
        while (v11 != v10);
        v12 = *(void **)(a1 + 160);
      }
      *(_QWORD *)(a1 + 168) = v10;
      operator delete(v12);
    }
  }
  if (*(_BYTE *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 80);
    if (v13)
    {
      v14 = *(_QWORD *)(a1 + 88);
      v15 = *(void **)(a1 + 80);
      if (v14 != v13)
      {
        do
        {
          v16 = *(std::__shared_weak_count **)(v14 - 96);
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          v14 -= 120;
        }
        while (v14 != v13);
        v15 = *(void **)(a1 + 80);
      }
      *(_QWORD *)(a1 + 88) = v13;
      operator delete(v15);
    }
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v19 = *(_QWORD *)(a1 + 40);
    if (v19)
    {
      v20 = *(_QWORD *)(a1 + 48);
      v21 = *(void **)(a1 + 40);
      if (v20 != v19)
      {
        do
        {
          v22 = *(std::__shared_weak_count **)(v20 - 96);
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v20 -= 120;
        }
        while (v20 != v19);
        v21 = *(void **)(a1 + 40);
      }
      *(_QWORD *)(a1 + 48) = v19;
      operator delete(v21);
    }
  }
  v25 = *(_QWORD *)(a1 + 8);
  if (v25)
  {
    v26 = *(_QWORD *)(a1 + 16);
    v27 = *(void **)(a1 + 8);
    if (v26 != v25)
    {
      do
      {
        v28 = *(std::__shared_weak_count **)(v26 - 96);
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v26 -= 120;
      }
      while (v26 != v25);
      v27 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v25;
    operator delete(v27);
  }
  return a1;
}

uint64_t sub_223295720(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 112))
  {
    v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v2);
    }
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_223295768(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2)
    {
      v3 = *(_QWORD **)(a1 + 48);
      v4 = *(void **)(a1 + 40);
      if (v3 != v2)
      {
        do
          v3 = sub_2232959C0(v3 - 20);
        while (v3 != v2);
        v4 = *(void **)(a1 + 40);
      }
      *(_QWORD *)(a1 + 48) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

char **sub_2232957C8(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*((_BYTE *)a1 + 32))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 != v2)
      {
        do
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 12);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 120;
        }
        while (v3 != v2);
        v4 = *a1;
      }
      a1[1] = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void **sub_223295868(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 12);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_223295900(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  if (*(_BYTE *)(a1 + 88))
  {
    v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(_QWORD *)(a1 + 64) = v2;
      operator delete(v2);
    }
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = *(void **)(a1 + 32);
      if (v4 != v3)
      {
        do
        {
          v6 = *(std::__shared_weak_count **)(v4 - 96);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 -= 120;
        }
        while (v4 != v3);
        v5 = *(void **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 40) = v3;
      operator delete(v5);
    }
    v9 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v9);
    }
  }
  return a1;
}

_QWORD *sub_2232959C0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v5 = a1[4];
  if (v5)
  {
    v6 = a1[5];
    v7 = (void *)a1[4];
    if (v6 != v5)
    {
      v8 = a1[5];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v6 - 16) = v9;
          operator delete(v9);
        }
        v6 = v8;
      }
      while (v8 != v5);
      v7 = (void *)a1[4];
    }
    a1[5] = v5;
    operator delete(v7);
  }
  v11 = (void *)a1[1];
  if (v11)
  {
    a1[2] = v11;
    operator delete(v11);
  }
  return a1;
}

uint64_t sub_223295A74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 32);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_223295AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;

  if (*(unsigned __int8 *)(a1 + 80) == *(unsigned __int8 *)(a2 + 80))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v5 = *(_QWORD *)(a2 + 8);
      v4 = *(_QWORD *)(a2 + 16);
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      v8 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v4;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v12 = *(_QWORD *)(a2 + 32);
      v11 = *(_QWORD *)(a2 + 40);
      if (v11)
      {
        v13 = (unint64_t *)(v11 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = *(std::__shared_weak_count **)(a1 + 40);
      *(_QWORD *)(a1 + 32) = v12;
      *(_QWORD *)(a1 + 40) = v11;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v19 = *(_QWORD *)(a2 + 56);
      v18 = *(_QWORD *)(a2 + 64);
      if (v18)
      {
        v20 = (unint64_t *)(v18 + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v22 = *(std::__shared_weak_count **)(a1 + 64);
      *(_QWORD *)(a1 + 56) = v19;
      *(_QWORD *)(a1 + 64) = v18;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    }
  }
  else if (*(_BYTE *)(a1 + 80))
  {
    *(_QWORD *)(a1 + 48) = &off_24EC715B8;
    v25 = *(std::__shared_weak_count **)(a1 + 64);
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    *(_QWORD *)(a1 + 24) = &off_24EC715B8;
    v28 = *(std::__shared_weak_count **)(a1 + 40);
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    *(_QWORD *)a1 = &off_24EC715B8;
    v31 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v31)
      goto LABEL_44;
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      *(_BYTE *)(a1 + 80) = 0;
    }
    else
    {
LABEL_44:
      *(_BYTE *)(a1 + 80) = 0;
    }
  }
  else
  {
    v35 = *(_QWORD *)(a2 + 8);
    v34 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = &off_24EC715B8;
    *(_QWORD *)(a1 + 8) = v35;
    *(_QWORD *)(a1 + 16) = v34;
    if (v34)
    {
      v36 = (unint64_t *)(v34 + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    v39 = *(_QWORD *)(a2 + 32);
    v38 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 24) = &off_24EC715B8;
    *(_QWORD *)(a1 + 32) = v39;
    *(_QWORD *)(a1 + 40) = v38;
    if (v38)
    {
      v40 = (unint64_t *)(v38 + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v43 = *(_QWORD *)(a2 + 56);
    v42 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 48) = &off_24EC715B8;
    *(_QWORD *)(a1 + 56) = v43;
    *(_QWORD *)(a1 + 64) = v42;
    if (v42)
    {
      v44 = (unint64_t *)(v42 + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 80) = 1;
  }
}

void sub_223295DC0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223295E28()
{
  return 1;
}

uint64_t sub_223295E30(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_223295E38@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_223295E4C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_223295ED0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (***v7)();
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t (***v21)();
  std::__shared_weak_count *v22;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_223296018(a1, (uint64_t)&v17, &v21);
  v19 = *(_OWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 40);
  v7 = v21;
  v8 = v22;
  if (v22)
  {
    v9 = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v22;
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_OWORD *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 32) = v20;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v21;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_223296004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223296018@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_24EC711E0)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223296120(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_2232960E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_223167354(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_223296120@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string __p;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_223296408();
  v5 = sub_2231DE560();
  v32 = "Attempting to create an ";
  v33 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v34 = (const char *)v7;
  v35 = size;
  v36 = " from an ";
  v37 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v38[0] = v9;
  v38[1] = v8;
  sub_2231A9820((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a1 + 8);
      v15 = *(std::__shared_weak_count **)(a1 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v32 = (const char *)p_p;
    v33 = v21;
    v34 = " but the other image contains an incompatible buffer type ";
    v35 = 58;
    v36 = (const char *)v19;
    v37 = v20;
    sub_2231A9820((uint64_t)&v32, (uint64_t)v38, 0, 0, a2);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_27;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v26 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v27 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v26;
LABEL_38:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v30, v25);
    goto LABEL_42;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  a2->__r_.__value_.__l.__size_ = v26;
  a2->__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  a2 = (std::string *)v27;
  if (v25)
    goto LABEL_38;
LABEL_42:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_2232963DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_223296408()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578B168);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B168))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231B47AC();
    sub_22329660C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2232101F4();
    sub_22329660C((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578B150, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B150, &dword_22314D000);
          __cxa_guard_release(&qword_25578B168);
          return &stru_25578B150;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578B150;
}

void sub_223296558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578B168);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578B168);
  _Unwind_Resume(a1);
}

void sub_22329660C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2232966A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2232966C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223296940(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_2232968F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_223296940(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231DE560();
  v3 = sub_2232969B8();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2232969B8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578B148);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B148))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231A2C78();
    sub_223296BBC((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_223296BBC((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578B130, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B130, &dword_22314D000);
          __cxa_guard_release(&qword_25578B148);
          return &stru_25578B130;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578B130;
}

void sub_223296B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578B148);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578B148);
  _Unwind_Resume(a1);
}

void sub_223296BBC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223296C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223296C74(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223296CDC()
{
  return 21;
}

uint64_t sub_223296CE4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_223296CEC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_223296D00(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

double sub_223296D84(char *a1, uint64_t a2)
{
  unsigned __int8 v4;
  std::string *v5;
  uint64_t *v6;
  unint64_t v7;
  std::string::size_type size;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string *v31;
  __int128 *v32;
  int64x2_t v33;
  int8x16_t v34;
  std::string __p;
  void *v36[3];
  void *v37[2];
  char v38;
  void *v39;
  uint64_t v40;
  const char *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_2540CAAC8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAAC8))
  {
    sub_223174DE4(v37, "ImageView");
    v31 = sub_2231C659C();
    sub_22329720C((uint64_t)&v39, (uint64_t)v31);
    v32 = sub_2232101F4();
    sub_22329720C((uint64_t)&v42, (uint64_t)v32);
    sub_22319BD1C(v36, (uint64_t)&v39, 2uLL);
    sub_2245730F4((char *)v37, (uint64_t *)v36, (std::string *)&qword_2540CAAE0, v33, v34);
    sub_22319BB48(v36);
    if (SHIBYTE(v44) < 0)
    {
      operator delete(v42);
      if ((SHIBYTE(v41) & 0x80000000) == 0)
      {
LABEL_45:
        if ((v38 & 0x80000000) == 0)
        {
LABEL_46:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CAAE0, &dword_22314D000);
          __cxa_guard_release(&qword_2540CAAC8);
          goto LABEL_2;
        }
LABEL_50:
        operator delete(v37[0]);
        goto LABEL_46;
      }
    }
    else if ((SHIBYTE(v41) & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(v39);
    if ((v38 & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_50;
  }
LABEL_2:
  v5 = sub_2231E9858();
  v39 = "Attempting to create an ";
  v40 = 24;
  v6 = &qword_2540CAAE0;
  v7 = byte_2540CAAF7;
  if (byte_2540CAAF7 < 0)
  {
    v7 = unk_2540CAAE8;
    v6 = (uint64_t *)qword_2540CAAE0;
  }
  v41 = (const char *)v6;
  v42 = (void *)v7;
  v43 = " from an ";
  v44 = 9;
  size = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v5->__r_.__value_.__l.__size_;
  v45[0] = v9;
  v45[1] = size;
  sub_2231A9820((uint64_t)&v39, (uint64_t)&v46, 0, 0, &__p);
  v10 = *(_QWORD *)(a2 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a2 + 8);
      v15 = *(std::__shared_weak_count **)(a2 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v39 = p_p;
    v40 = v21;
    v41 = " but the other image contains an incompatible buffer type ";
    v42 = (void *)58;
    v43 = (const char *)v19;
    v44 = v20;
    sub_2231A9820((uint64_t)&v39, (uint64_t)v45, 0, 0, (std::string *)a1);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_25;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v26 <= 0x16)
  {
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    *(_QWORD *)a1 = 0;
    v27 = a1;
    a1[23] = v26;
LABEL_36:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a1, v30, v25);
    goto LABEL_40;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  *((_QWORD *)a1 + 1) = v26;
  *((_QWORD *)a1 + 2) = v29 | 0x8000000000000000;
  *(_QWORD *)a1 = v27;
  a1 = v27;
  if (v25)
    goto LABEL_36;
LABEL_40:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_25:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_22329712C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  sub_22319BB48(&a13);
  if (a34 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_2540CAAC8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a16);
  __cxa_guard_abort(&qword_2540CAAC8);
  _Unwind_Resume(a1);
}

void sub_2232971E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22329720C(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2232972A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2232972C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int16 v22;
  std::__shared_weak_count *size;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::logic_error *exception;
  std::string v29;
  _BYTE v30[12];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 21)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232975C4(a1);
    std::logic_error::logic_error(exception, &v29);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v29.__r_.__value_.__r.__words[0] = v4;
      v29.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24) == 0;
  if (*(_DWORD *)(a1 + 24))
    v12 = 3;
  else
    v12 = 0;
  if (!*(_DWORD *)(a1 + 28))
    v11 = 1;
  v13 = !v11;
  if (v11)
    v14 = 0;
  else
    v14 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  v15 = v14 | v12;
  v16 = *(_QWORD *)(a1 + 24);
  if (!v13)
    v16 = 0;
  *(_QWORD *)&v30[4] = v16;
  v17 = v16;
  *(_DWORD *)v30 = 3;
  v18 = *(_QWORD *)v30;
  v19 = HIDWORD(v16);
  *(_DWORD *)v30 = 1;
  *(_QWORD *)&v30[4] = v15;
  v20 = *(_QWORD *)v30;
  v21 = HIDWORD(v14);
  if (HIDWORD(v16) * HIDWORD(v14) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v22 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v29.__r_.__value_.__l.__size_;
  if (v29.__r_.__value_.__l.__size_)
  {
    v24 = (unint64_t *)(v29.__r_.__value_.__l.__size_ + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *(_QWORD *)a2 = v29.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v18;
  *(_DWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 36) = v20;
  *(_DWORD *)(a2 + 44) = v21;
  *(_QWORD *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 56) = v15;
  *(_WORD *)(a2 + 64) = v22;
  if (size)
  {
    v26 = (unint64_t *)&size->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_223297578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_2232975C4(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E9858();
  v3 = sub_2232969B8();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

void sub_22329763C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232976A4()
{
  return 25;
}

uint64_t sub_2232976AC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2232976B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2232976C8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_22329774C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  uint64_t (***v8)();
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t (***v25)();
  std::__shared_weak_count *v26;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 8);
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_223297894(a1, (uint64_t)&v20, &v25);
  v7 = *(_OWORD *)(a1 + 40);
  v22 = *(_OWORD *)(a1 + 24);
  v23 = v7;
  v24 = *(_OWORD *)(a1 + 56);
  v8 = v25;
  v9 = v26;
  if (v26)
  {
    v10 = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = v26;
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v9;
    v13 = v23;
    *(_OWORD *)(a2 + 16) = v22;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v24;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v25;
    *(_QWORD *)(a2 + 8) = 0;
    v16 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 32) = v16;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 56);
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_223297880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223297894@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_24EC71030)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_22329799C(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_22329795C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_223167354(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_22329799C@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string __p;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_223297C84();
  v5 = sub_2231EBD78();
  v32 = "Attempting to create an ";
  v33 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v34 = (const char *)v7;
  v35 = size;
  v36 = " from an ";
  v37 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v38[0] = v9;
  v38[1] = v8;
  sub_2231A9820((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a1 + 8);
      v15 = *(std::__shared_weak_count **)(a1 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v32 = (const char *)p_p;
    v33 = v21;
    v34 = " but the other image contains an incompatible buffer type ";
    v35 = 58;
    v36 = (const char *)v19;
    v37 = v20;
    sub_2231A9820((uint64_t)&v32, (uint64_t)v38, 0, 0, a2);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_27;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v26 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v27 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v26;
LABEL_38:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v30, v25);
    goto LABEL_42;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  a2->__r_.__value_.__l.__size_ = v26;
  a2->__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  a2 = (std::string *)v27;
  if (v25)
    goto LABEL_38;
LABEL_42:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_223297C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_223297C84()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578AD28);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578AD28))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231EC034();
    sub_223297E88((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2232101F4();
    sub_223297E88((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578AD10, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578AD10, &dword_22314D000);
          __cxa_guard_release(&qword_25578AD28);
          return &stru_25578AD10;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578AD10;
}

void sub_223297DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578AD28);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578AD28);
  _Unwind_Resume(a1);
}

void sub_223297E88(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223297F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223297F40(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223298240(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  v16 = v15 | (4 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 4;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2232981F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_223298240(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231EBD78();
  v3 = sub_2232969B8();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

void sub_2232982B8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223298320()
{
  return 32;
}

uint64_t sub_223298328(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_223298330@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_223298348(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_2232983CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  uint64_t (***v8)();
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t (***v25)();
  std::__shared_weak_count *v26;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 8);
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_223298514(a1, (uint64_t)&v20, &v25);
  v7 = *(_OWORD *)(a1 + 40);
  v22 = *(_OWORD *)(a1 + 24);
  v23 = v7;
  v24 = *(_OWORD *)(a1 + 56);
  v8 = v25;
  v9 = v26;
  if (v26)
  {
    v10 = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = v26;
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v9;
    v13 = v23;
    *(_OWORD *)(a2 + 16) = v22;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v24;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v25;
    *(_QWORD *)(a2 + 8) = 0;
    v16 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 32) = v16;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 56);
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_223298500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223298514@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_24EC710C0)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_22329861C(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_2232985DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_223167354(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_22329861C@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string __p;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_223298904();
  v5 = sub_2231EFAF8();
  v32 = "Attempting to create an ";
  v33 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v34 = (const char *)v7;
  v35 = size;
  v36 = " from an ";
  v37 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v38[0] = v9;
  v38[1] = v8;
  sub_2231A9820((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a1 + 8);
      v15 = *(std::__shared_weak_count **)(a1 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v32 = (const char *)p_p;
    v33 = v21;
    v34 = " but the other image contains an incompatible buffer type ";
    v35 = 58;
    v36 = (const char *)v19;
    v37 = v20;
    sub_2231A9820((uint64_t)&v32, (uint64_t)v38, 0, 0, a2);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_27;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v26 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v27 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v26;
LABEL_38:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v30, v25);
    goto LABEL_42;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  a2->__r_.__value_.__l.__size_ = v26;
  a2->__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  a2 = (std::string *)v27;
  if (v25)
    goto LABEL_38;
LABEL_42:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_2232988D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_223298904()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578B128);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B128))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231EFDB4();
    sub_223298B08((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2232101F4();
    sub_223298B08((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578B110, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B110, &dword_22314D000);
          __cxa_guard_release(&qword_25578B128);
          return &stru_25578B110;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578B110;
}

void sub_223298A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578B128);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578B128);
  _Unwind_Resume(a1);
}

void sub_223298B08(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223298BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223298BC0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 32)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223298EC4(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  v16 = v15 | (4 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 4;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_223298E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_223298EC4(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231EFAF8();
  v3 = sub_2232969B8();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

void sub_223298F3C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232991BC(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_223299170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_2232991BC(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231DFA30();
  v3 = sub_2232969B8();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

void sub_223299234(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22329929C()
{
  return 4;
}

uint64_t sub_2232992A4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2232992AC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2232992C4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_223299348(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (***v7)();
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t (***v21)();
  std::__shared_weak_count *v22;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_223299490(a1, (uint64_t)&v17, &v21);
  v19 = *(_OWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 40);
  v7 = v21;
  v8 = v22;
  if (v22)
  {
    v9 = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v22;
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_OWORD *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 32) = v20;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v21;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_22329947C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223299490@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_24EC71270)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223299598(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_223299558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_223167354(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_223299598@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string __p;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_223299880();
  v5 = sub_2231E0098();
  v32 = "Attempting to create an ";
  v33 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v34 = (const char *)v7;
  v35 = size;
  v36 = " from an ";
  v37 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v38[0] = v9;
  v38[1] = v8;
  sub_2231A9820((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a1 + 8);
      v15 = *(std::__shared_weak_count **)(a1 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v32 = (const char *)p_p;
    v33 = v21;
    v34 = " but the other image contains an incompatible buffer type ";
    v35 = 58;
    v36 = (const char *)v19;
    v37 = v20;
    sub_2231A9820((uint64_t)&v32, (uint64_t)v38, 0, 0, a2);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_27;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v26 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v27 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v26;
LABEL_38:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v30, v25);
    goto LABEL_42;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  a2->__r_.__value_.__l.__size_ = v26;
  a2->__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  a2 = (std::string *)v27;
  if (v25)
    goto LABEL_38;
LABEL_42:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_223299854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_223299880()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578AD48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578AD48))
  {
    sub_223174DE4(v7, "ImageView");
    v2 = sub_2231C26A0();
    sub_223299A84((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2232101F4();
    sub_223299A84((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578AD30, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578AD30, &dword_22314D000);
          __cxa_guard_release(&qword_25578AD48);
          return &stru_25578AD30;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578AD30;
}

void sub_2232999D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578AD48);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578AD48);
  _Unwind_Resume(a1);
}

void sub_223299A84(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223299B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223299B3C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223299DBC(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_223299D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_223299DBC(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231E0098();
  v3 = sub_2232969B8();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

uint64_t sub_223299E34(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_22326F694((_QWORD *)(a1 + 8), (uint64_t *)(a2 + 8));
  v4 = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 72) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    sub_22326F694((_QWORD *)(a1 + 40), (uint64_t *)(a2 + 40));
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = 1;
  }
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    sub_22326F694((_QWORD *)(a1 + 80), (uint64_t *)(a2 + 80));
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_BYTE *)(a1 + 112) = 1;
  }
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (*(_BYTE *)(a2 + 184))
  {
    v5 = *(_QWORD *)(a2 + 120);
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = v5;
    v6 = *(_QWORD *)(a2 + 132);
    *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
    *(_QWORD *)(a1 + 132) = v6;
    v7 = *(_QWORD *)(a2 + 144);
    v8 = *(_DWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = 0;
    *(_DWORD *)(a1 + 152) = v8;
    *(_QWORD *)(a1 + 144) = v7;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    sub_22329A240(a1 + 160, *(_QWORD *)(a2 + 160), *(_QWORD *)(a2 + 168), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160)) >> 5));
    *(_BYTE *)(a1 + 184) = 1;
  }
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  if (*(_BYTE *)(a2 + 280))
  {
    sub_22329A920(a1 + 192, (uint64_t *)(a2 + 192));
    *(_BYTE *)(a1 + 280) = 1;
  }
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  if (*(_BYTE *)(a2 + 400))
  {
    sub_22329AA9C(a1 + 288, a2 + 288);
    *(_BYTE *)(a1 + 400) = 1;
  }
  *(_BYTE *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  if (*(_BYTE *)(a2 + 432))
  {
    sub_22326F694((_QWORD *)(a1 + 408), (uint64_t *)(a2 + 408));
    *(_BYTE *)(a1 + 432) = 1;
  }
  return a1;
}

void sub_223299FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10)
{
  void **v10;
  char **v11;
  uint64_t v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v25;

  if (*(_BYTE *)(v12 + 432))
  {
    v25 = *v17;
    if (*v17)
    {
      v18 = *(_QWORD *)(v12 + 416);
      v19 = (void *)*v17;
      if (v18 != v25)
      {
        v20 = *v17;
        do
        {
          v21 = *(std::__shared_weak_count **)(v18 - 96);
          if (v21)
          {
            p_shared_owners = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldaxr(p_shared_owners);
            while (__stlxr(v23 - 1, p_shared_owners));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
              v20 = v25;
            }
          }
          v18 -= 120;
        }
        while (v18 != v20);
        v19 = (void *)*v17;
      }
      *(_QWORD *)(v12 + 416) = v25;
      operator delete(v19);
    }
  }
  sub_223295720(v16);
  sub_223295900(v15);
  sub_223295768(v14);
  sub_2232957C8(v13);
  sub_2232957C8(v11);
  sub_223295868(v10);
  _Unwind_Resume(a1);
}

void sub_22329A0EC()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  if (*(_BYTE *)(v0 + 184))
  {
    v2 = (_QWORD *)*v1;
    if (*v1)
    {
      v3 = *(_QWORD **)(v0 + 168);
      v4 = (_QWORD *)*v1;
      if (v3 != v2)
      {
        do
          v3 = sub_2232959C0(v3 - 20);
        while (v3 != v2);
        v4 = (_QWORD *)*v1;
      }
      *(_QWORD *)(v0 + 168) = v2;
      operator delete(v4);
    }
  }
  JUMPOUT(0x22329A0CCLL);
}

void sub_22329A134()
{
  uint64_t v0;
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*(_BYTE *)(v0 + 112))
  {
    v2 = (char *)*v1;
    if (*v1)
    {
      v3 = *(char **)(v0 + 88);
      v4 = *v1;
      if (v3 != v2)
      {
        do
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 12);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 120;
        }
        while (v3 != v2);
        v4 = *v1;
      }
      *(_QWORD *)(v0 + 88) = v2;
      operator delete(v4);
    }
  }
  JUMPOUT(0x22329A0D4);
}

void sub_22329A1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object)
{
  void **v9;
  void **v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (*(_BYTE *)(v11 + 72))
  {
    v12 = (char *)*v10;
    if (*v10)
    {
      v13 = *(char **)(v11 + 48);
      v14 = *v10;
      if (v13 != v12)
      {
        do
        {
          v15 = (std::__shared_weak_count *)*((_QWORD *)v13 - 12);
          if (v15)
          {
            p_shared_owners = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          v13 -= 120;
        }
        while (v13 != v12);
        v14 = *v10;
      }
      *(_QWORD *)(v11 + 48) = v12;
      operator delete(v14);
      sub_223295868(v9);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x22329A0DCLL);
}

uint64_t sub_22329A240(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x19999999999999ALL)
      sub_22329A3C4();
    result = (uint64_t)operator new(160 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 160 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_22329A3D8(v8 + v9, (int *)(a2 + v9));
        v9 += 160;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_22329A2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_22329A340(&a9);
  _Unwind_Resume(a1);
}

void sub_22329A310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 160)
    sub_2232959C0((_QWORD *)(v10 - 160 + v11));
  *(_QWORD *)(v9 + 8) = v10;
  sub_22329A340(&a9);
  _Unwind_Resume(a1);
}

void ***sub_22329A340(void ***result)
{
  void ***v1;
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = v2[1];
      v5 = **v1;
      if (v4 != v3)
      {
        do
          v4 = sub_2232959C0(v4 - 20);
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_22329A3C4()
{
  sub_22316DBD4("vector");
}

uint64_t sub_22329A3D8(uint64_t a1, int *a2)
{
  int v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  _BYTE *v10;
  _BYTE *v11;
  size_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 1);
  v5 = (_BYTE *)*((_QWORD *)a2 + 2);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_22316E078();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = &v8[8 * (v7 >> 3)];
    v9 = v7 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v8, v6, v9);
    *(_QWORD *)(a1 + 16) = &v8[v9];
  }
  sub_22329A5CC((_QWORD *)(a1 + 32), (uint64_t *)a2 + 4);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 7);
  v10 = (_BYTE *)*((_QWORD *)a2 + 8);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if ((v12 & 0x8000000000000000) != 0)
      sub_22329A3C4();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 56) = v13;
    *(_QWORD *)(a1 + 64) = v13;
    v14 = &v13[v12];
    *(_QWORD *)(a1 + 72) = &v13[v12];
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 64) = v14;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v16 = (_BYTE *)*((_QWORD *)a2 + 10);
  v15 = (_BYTE *)*((_QWORD *)a2 + 11);
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0)
      sub_22316E078();
    v18 = (char *)operator new(v15 - v16);
    *(_QWORD *)(a1 + 80) = v18;
    *(_QWORD *)(a1 + 88) = v18;
    v19 = &v18[16 * (v17 >> 4)];
    *(_QWORD *)(a1 + 96) = v19;
    memcpy(v18, v16, v17);
    *(_QWORD *)(a1 + 88) = v19;
  }
  v20 = *((_QWORD *)a2 + 13);
  *(_QWORD *)(a1 + 109) = *(_QWORD *)((char *)a2 + 109);
  *(_QWORD *)(a1 + 104) = v20;
  sub_22329A7E4((_QWORD *)(a1 + 120), (uint64_t *)a2 + 15);
  v21 = *((_QWORD *)a2 + 18);
  *(_QWORD *)(a1 + 149) = *(_QWORD *)((char *)a2 + 149);
  *(_QWORD *)(a1 + 144) = v21;
  return a1;
}

void sub_22329A54C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 88) = v6;
    operator delete(v6);
    v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      sub_223295A74(v2);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 64) = v7;
  operator delete(v7);
  sub_223295A74(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_22329A5CC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_22329A3C4();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_22329A6D8(v3, v4, v5, v8);
  }
  return a1;
}

void sub_22329A674(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      v7 = (char *)v1[1];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 2) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22329A6D8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v10 = *(const void **)v6;
      v9 = *(_QWORD *)(v6 + 8);
      v11 = v9 - *(_QWORD *)v6;
      if (v9 != *(_QWORD *)v6)
      {
        if (v11 < 0)
          sub_22316E078();
        v7 = (char *)operator new(v9 - *(_QWORD *)v6);
        *a4 = v7;
        a4[1] = v7;
        a4[2] = &v7[8 * (v11 >> 3)];
        v8 = v11 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v7, v10, v8);
        a4[1] = &v7[v8];
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_22329A7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22324A4B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22329A7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_22324A4B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_22329A7E4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0x2E8BA2E8BA2E8BA3 * (v5 >> 3);
    if (v6 >= 0x2E8BA2E8BA2E8BBLL)
      sub_22329A3C4();
    v7 = (char *)operator new(v5);
    v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[88 * v6];
    do
    {
      v9 = v3 + v8;
      v10 = &v7[v8];
      *(_QWORD *)v10 = *(_QWORD *)(v3 + v8);
      v11 = *(_QWORD *)(v3 + v8 + 8);
      *((_DWORD *)v10 + 4) = *(_DWORD *)(v3 + v8 + 16);
      *((_QWORD *)v10 + 1) = v11;
      *((_DWORD *)v10 + 5) = *(_DWORD *)(v3 + v8 + 20);
      *((_QWORD *)v10 + 3) = *(_QWORD *)(v3 + v8 + 24);
      *((_QWORD *)v10 + 4) = *(_QWORD *)(v3 + v8 + 32);
      v12 = *(_QWORD *)(v3 + v8 + 40);
      *((_DWORD *)v10 + 12) = *(_DWORD *)(v3 + v8 + 48);
      *((_QWORD *)v10 + 5) = v12;
      v13 = *(_QWORD *)(v3 + v8 + 52);
      *((_DWORD *)v10 + 15) = *(_DWORD *)(v3 + v8 + 60);
      *(_QWORD *)(v10 + 52) = v13;
      v14 = *(_QWORD *)(v3 + v8 + 64);
      *((_DWORD *)v10 + 18) = *(_DWORD *)(v3 + v8 + 72);
      *((_QWORD *)v10 + 8) = v14;
      v15 = *(_QWORD *)(v3 + v8 + 76);
      *((_DWORD *)v10 + 21) = *(_DWORD *)(v3 + v8 + 84);
      *(_QWORD *)(v10 + 76) = v15;
      v8 += 88;
    }
    while (v9 + 88 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_22329A904(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22329A920(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  size_t v16;
  char *v17;
  char *v18;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_22329A3C4();
    v8 = (char *)operator new(v6);
    v9 = 0;
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = &v8[24 * v7];
    do
    {
      v10 = v4 + v9;
      v11 = &v8[v9];
      v12 = *(_QWORD *)(v4 + v9);
      *((_DWORD *)v11 + 2) = *(_DWORD *)(v4 + v9 + 8);
      *(_QWORD *)v11 = v12;
      v13 = *(_QWORD *)(v4 + v9 + 12);
      *((_DWORD *)v11 + 5) = *(_DWORD *)(v4 + v9 + 20);
      *(_QWORD *)(v11 + 12) = v13;
      v9 += 24;
    }
    while (v10 + 24 != v5);
    *(_QWORD *)(a1 + 8) = &v8[v9];
  }
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  sub_22326F694((_QWORD *)(a1 + 32), a2 + 4);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v15 = (_BYTE *)a2[7];
  v14 = (_BYTE *)a2[8];
  v16 = v14 - v15;
  if (v14 != v15)
  {
    if ((v16 & 0x8000000000000000) != 0)
      sub_22316E078();
    v17 = (char *)operator new(v14 - v15);
    *(_QWORD *)(a1 + 56) = v17;
    *(_QWORD *)(a1 + 64) = v17;
    v18 = &v17[v16];
    *(_QWORD *)(a1 + 72) = &v17[v16];
    memcpy(v17, v15, v16);
    *(_QWORD *)(a1 + 64) = v18;
  }
  *(_QWORD *)(a1 + 80) = a2[10];
  return a1;
}

void sub_22329AA5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22329AA9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_22316E078();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[16 * (v6 >> 4)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = v10 - v9;
  if (v10 != v9)
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * (v11 >> 3);
    if (v12 >= 0x666666666666667)
      sub_22329A3C4();
    v13 = (char *)operator new(v11);
    v14 = 0;
    *(_QWORD *)(a1 + 24) = v13;
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = &v13[40 * v12];
    do
    {
      v15 = v9 + v14;
      v16 = &v13[v14];
      v17 = *(_QWORD *)(v9 + v14);
      *((_DWORD *)v16 + 2) = *(_DWORD *)(v9 + v14 + 8);
      *(_QWORD *)v16 = v17;
      v18 = *(_QWORD *)(v9 + v14 + 12);
      *((_DWORD *)v16 + 5) = *(_DWORD *)(v9 + v14 + 20);
      *(_QWORD *)(v16 + 12) = v18;
      *(_OWORD *)(v16 + 24) = *(_OWORD *)(v9 + v14 + 24);
      v14 += 40;
    }
    while (v15 + 40 != v10);
    *(_QWORD *)(a1 + 32) = &v13[v14];
  }
  v19 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 64);
  v21 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v21;
  *(_OWORD *)(a1 + 48) = v19;
  *(_OWORD *)(a1 + 64) = v20;
  return a1;
}

void sub_22329ABD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22329AC08@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = (uint64_t)operator new(0x50uLL, MEMORY[0x24BEDB6B8]);
  v5 = result;
  if (result)
  {
    v6 = *a1;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 8) = v6;
    *(_DWORD *)(result + 16) = *((_DWORD *)a1 + 2);
    *(_QWORD *)(result + 20) = *(uint64_t *)((char *)a1 + 12);
    *(_DWORD *)(result + 28) = *((_DWORD *)a1 + 5);
    *(_QWORD *)(result + 32) = a1[3];
    *(_DWORD *)(result + 40) = *((_DWORD *)a1 + 8);
    v7 = a1[5];
    v8 = a1[6];
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    result = sub_22329A240(result + 48, v7, v8, 0xCCCCCCCCCCCCCCCDLL * ((v8 - v7) >> 5));
    *(_DWORD *)(v5 + 72) = 1;
    *(_QWORD *)v5 = &off_24EC2BA90;
  }
  *a2 = v5;
  return result;
}

void sub_22329ACB8(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x227684CD0](v2, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x22329ACA8);
}

uint64_t sub_22329ACE4(uint64_t result, uint64_t a2)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = *(_WORD *)(a2 + 32);
  *(_BYTE *)(result + 40) = 0;
  *(_WORD *)(result + 32) = v2;
  *(_BYTE *)(result + 72) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(result + 64) = *(_BYTE *)(a2 + 64);
    *(_BYTE *)(result + 72) = 1;
  }
  *(_BYTE *)(result + 80) = 0;
  *(_BYTE *)(result + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = 0;
    *(_OWORD *)(result + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_BYTE *)(result + 104) = *(_BYTE *)(a2 + 104);
    *(_BYTE *)(result + 112) = 1;
  }
  *(_BYTE *)(result + 120) = 0;
  *(_BYTE *)(result + 184) = 0;
  if (*(_BYTE *)(a2 + 184))
  {
    v3 = *(_QWORD *)(a2 + 120);
    *(_DWORD *)(result + 128) = *(_DWORD *)(a2 + 128);
    *(_QWORD *)(result + 120) = v3;
    v4 = *(_QWORD *)(a2 + 132);
    *(_DWORD *)(result + 140) = *(_DWORD *)(a2 + 140);
    *(_QWORD *)(result + 132) = v4;
    v5 = *(_QWORD *)(a2 + 144);
    *(_DWORD *)(result + 152) = *(_DWORD *)(a2 + 152);
    *(_QWORD *)(result + 144) = v5;
    *(_QWORD *)(result + 168) = 0;
    *(_QWORD *)(result + 176) = 0;
    *(_QWORD *)(result + 160) = 0;
    *(_OWORD *)(result + 160) = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(result + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    *(_BYTE *)(result + 184) = 1;
  }
  *(_BYTE *)(result + 192) = 0;
  *(_BYTE *)(result + 280) = 0;
  if (*(_BYTE *)(a2 + 280))
  {
    *(_QWORD *)(result + 192) = 0;
    *(_QWORD *)(result + 200) = 0;
    *(_QWORD *)(result + 208) = 0;
    *(_OWORD *)(result + 192) = *(_OWORD *)(a2 + 192);
    *(_QWORD *)(result + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a2 + 200) = 0;
    *(_QWORD *)(a2 + 208) = 0;
    *(_QWORD *)(a2 + 192) = 0;
    *(_DWORD *)(result + 216) = *(_DWORD *)(a2 + 216);
    *(_QWORD *)(result + 232) = 0;
    *(_QWORD *)(result + 240) = 0;
    *(_QWORD *)(result + 224) = 0;
    *(_OWORD *)(result + 224) = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(result + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 224) = 0;
    *(_QWORD *)(a2 + 232) = 0;
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(result + 248) = 0;
    *(_QWORD *)(result + 256) = 0;
    *(_QWORD *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = *(_OWORD *)(a2 + 248);
    v6 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(result + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(a2 + 264) = 0;
    *(_QWORD *)(a2 + 248) = 0;
    *(_QWORD *)(result + 272) = v6;
    *(_BYTE *)(result + 280) = 1;
  }
  *(_BYTE *)(result + 288) = 0;
  *(_BYTE *)(result + 400) = 0;
  if (*(_BYTE *)(a2 + 400))
  {
    *(_QWORD *)(result + 288) = 0;
    *(_QWORD *)(result + 296) = 0;
    *(_QWORD *)(result + 304) = 0;
    *(_OWORD *)(result + 288) = *(_OWORD *)(a2 + 288);
    *(_QWORD *)(result + 304) = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a2 + 288) = 0;
    *(_QWORD *)(a2 + 296) = 0;
    *(_QWORD *)(a2 + 304) = 0;
    *(_QWORD *)(result + 312) = 0;
    *(_QWORD *)(result + 320) = 0;
    *(_QWORD *)(result + 328) = 0;
    v7 = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(result + 312) = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(result + 320) = v7;
    *(_QWORD *)(result + 328) = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a2 + 312) = 0;
    *(_QWORD *)(a2 + 320) = 0;
    *(_QWORD *)(a2 + 328) = 0;
    v8 = *(_OWORD *)(a2 + 336);
    v9 = *(_OWORD *)(a2 + 352);
    v10 = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(result + 368) = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(result + 384) = v10;
    *(_OWORD *)(result + 336) = v8;
    *(_OWORD *)(result + 352) = v9;
    *(_BYTE *)(result + 400) = 1;
  }
  *(_BYTE *)(result + 408) = 0;
  *(_BYTE *)(result + 432) = 0;
  if (*(_BYTE *)(a2 + 432))
  {
    *(_QWORD *)(result + 408) = 0;
    *(_QWORD *)(result + 416) = 0;
    *(_QWORD *)(result + 424) = 0;
    v11 = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(result + 408) = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(result + 416) = v11;
    *(_QWORD *)(result + 424) = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a2 + 408) = 0;
    *(_QWORD *)(a2 + 416) = 0;
    *(_QWORD *)(a2 + 424) = 0;
    *(_BYTE *)(result + 432) = 1;
  }
  return result;
}

void sub_22329AF38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22329AF48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27700;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22329AF78(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

void sub_22329AF9C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22329AFAC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27750;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22329AFDC(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

void sub_22329B000(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC277A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22329B010(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC277A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22329B040(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

void sub_22329B064(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC277F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22329B074(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC277F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22329B0A4(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

void sub_22329B0C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22329B0D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27840;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22329B108(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

void sub_22329B12C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22329B13C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27890;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22329B16C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

void sub_22329B190(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC278E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22329B1A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC278E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22329B1D0(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

void sub_22329B1F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22329B204(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27930;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22329B234(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

_DWORD *sub_22329B258(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC27568[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t sub_22329B348(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  mach_timebase_info v21;
  std::__shared_weak_count *v22;
  mach_timebase_info v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t (*v28)();
  uint64_t v29;
  unsigned __int8 v30;
  __int16 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v36;
  int v37;
  int v38;
  _BYTE *v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int i;
  int v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v65;
  uint64_t v66;
  size_t v67;
  size_t v68;
  const void *v69;
  BOOL v70;
  int v71;
  BOOL v72;
  char *v73;
  char *v74;
  int v75;
  void *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  _QWORD v88[2];
  std::__shared_weak_count *v89;
  uint64_t (**v90)();
  __int128 v91;
  _OWORD v92[2];
  uint64_t (**v93)();
  mach_timebase_info v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  __int16 v101;
  mach_timebase_info info;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  _BYTE __dst[24];
  uint64_t v107;
  __int128 v108;
  __int16 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _OWORD v113[3];
  uint64_t v114;
  __int128 v115;
  uint64_t (**v116)();
  _QWORD v117[2];
  char v118;
  char v119;
  char v120;
  char v121;
  __int128 v122;
  char v123;
  char v124;
  char v125;
  char v126;
  char v127;
  uint64_t v128;

  v128 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
    return a1;
  v87 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v85) = info.numer;
    LODWORD(v86) = info.denom;
    *(double *)&qword_255795558 = (double)v85 / (double)v86;
    __cxa_guard_release(&qword_255795560);
  }
  v117[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v117[1] = 2;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v122 = *a4;
  v123 = 1;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v10 = operator new();
  v93 = &off_24EC1F958;
  v11 = *(_QWORD *)(a3 + 8);
  if (!v11)
  {
    info = (mach_timebase_info)&off_24EC24788;
    v110 = *(_QWORD *)(a3 + 32);
    v116 = &off_24EC20D08;
    sub_22449897C(&v110, (uint64_t)&v112);
    v24 = operator new();
    *(_QWORD *)v24 = &off_24EC20D50;
    *(_OWORD *)(v24 + 8) = v113[0];
    *(_OWORD *)(v24 + 20) = *(_OWORD *)((char *)v113 + 12);
    *(_OWORD *)(v24 + 40) = v113[2];
    *(_QWORD *)(v24 + 56) = v114;
    *(_OWORD *)(v24 + 64) = v115;
    v111 = v24;
    v112 = v24;
    v25 = (std::__shared_weak_count *)operator new();
    v25->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24880;
    v25->__shared_weak_owners_ = 0;
    v25[1].__vftable = (std::__shared_weak_count_vtbl *)v24;
    *(_QWORD *)&v113[0] = v25;
    v111 = 0;
    v103 = v24;
    v104 = v25;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
    v105 = 0;
    (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t))(*(_QWORD *)v24 + 64))(&v116, v24, 1);
    v28 = v116[2];
    *(_OWORD *)__dst = *(_OWORD *)v116;
    *(_QWORD *)&__dst[16] = v28;
    v116 = 0;
    MEMORY[0x227684CE8]();
    v107 = *(_QWORD *)__dst;
    v108 = *(_OWORD *)&__dst[8];
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 104))(v24);
    v30 = v29;
    if ((v29 & 0xFFFFFF) <= 0x10000)
      v30 = 0;
    v31 = v29 & 0xFF00;
    if ((v29 & 0xFF0000) == 0)
      v31 = 0;
    v109 = v31 & 0xFF00 | v30;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (v32)
    {
      v33 = *(unsigned int *)(a3 + 40);
      v34 = *(unsigned int *)&__dst[16];
      if ((_DWORD)v33 != 1 || *(_DWORD *)&__dst[16] != 1)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      v33 = *(unsigned int *)(a3 + 40);
      v34 = *(unsigned int *)&__dst[16];
      if ((_DWORD)v33 != 1 || *(_DWORD *)&__dst[16] != 1)
      {
LABEL_31:
        v36 = *(_DWORD *)(a3 + 32);
        if (v36)
        {
          v37 = *(_DWORD *)(a3 + 36);
          if (v37)
          {
            v38 = v36 - 1;
            v39 = *(_BYTE **)(a3 + 24);
            v40 = *(_BYTE **)__dst;
            v41 = v37 - 1;
            if (v41)
            {
              v42 = *(unsigned int *)&__dst[20];
              v43 = *(unsigned int *)(a3 + 44);
              if (v38)
              {
                for (i = 0; i != v41; ++i)
                {
                  v45 = v38;
                  v46 = v39;
                  v47 = v40;
                  do
                  {
                    *v47 = *v46;
                    v46 += v33;
                    v47 += v34;
                    --v45;
                  }
                  while (v45);
                  *v47 = *v46;
                  v39 += v43;
                  v40 += v42;
                }
              }
              else
              {
                do
                {
                  *v40 = *v39;
                  v39 += v43;
                  v40 += v42;
                  --v41;
                }
                while (v41);
              }
            }
            for (; v38; --v38)
            {
              *v40 = *v39;
              v39 += v33;
              v40 += v34;
            }
            *v40 = *v39;
            v48 = v111;
            if (!v111)
              goto LABEL_92;
            goto LABEL_89;
          }
        }
LABEL_88:
        v48 = v111;
        if (v111)
        {
LABEL_89:
          v76 = *(void **)(v48 + 48);
          if (v76)
            free(v76);
          *(_QWORD *)(v48 + 48) = 0;
          MEMORY[0x227684CE8](v48, 0x1091C406A8758A4);
        }
LABEL_92:
        v77 = v103;
        v78 = v104;
        if (v104)
        {
          v79 = (unint64_t *)&v104->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
          v81 = v104;
        }
        else
        {
          v81 = 0;
        }
        if (BYTE4(v105))
          v82 = v105 | 0x100000000;
        else
          v82 = 0;
        v94 = (mach_timebase_info)v77;
        v95 = v78;
        v96 = v82;
        v97 = v108;
        v98 = HIDWORD(v108);
        v99 = *(_QWORD *)__dst;
        v100 = 1;
        v101 = v109;
        if (v81)
        {
          v83 = (unint64_t *)&v81->__shared_owners_;
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        goto LABEL_47;
      }
    }
    v65 = *(unsigned int *)(a3 + 44);
    v66 = *(unsigned int *)&__dst[20];
    v67 = *(unsigned int *)(a3 + 32);
    if ((_DWORD)v65 == *(_DWORD *)&__dst[20] && (_DWORD)v65 == (_DWORD)v67)
    {
      v68 = (*(_DWORD *)(a3 + 36) * v65);
      v69 = *(const void **)(a3 + 24);
      if ((_DWORD)v68)
        v70 = v69 == 0;
      else
        v70 = 0;
      if (!v70)
      {
        if (!(_DWORD)v68)
          goto LABEL_88;
LABEL_87:
        memmove(*(void **)__dst, v69, v68);
        goto LABEL_88;
      }
      if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))goto LABEL_87;
    }
    else
    {
      v71 = *(_DWORD *)(a3 + 36);
      if ((_DWORD)v67)
        v72 = v71 == 0;
      else
        v72 = 1;
      if (v72)
        goto LABEL_88;
      v73 = *(char **)__dst;
      v74 = *(char **)(a3 + 24);
      v75 = v71 - 1;
      if (v71 == 1)
      {
LABEL_105:
        if (v74
          || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          memmove(v73, v74, v67);
          v48 = v111;
          if (v111)
            goto LABEL_89;
          goto LABEL_92;
        }
      }
      else
      {
        while (v74
             || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          memmove(v73, v74, v67);
          v74 += v65;
          v73 += v66;
          if (!--v75)
            goto LABEL_105;
        }
      }
    }
    abort();
  }
  v12 = *(std::__shared_weak_count **)(a3 + 16);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    v11 = *(_QWORD *)(a3 + 8);
    v16 = *(std::__shared_weak_count **)(a3 + 16);
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  sub_22427F094(v11, &info);
  v20 = (*(uint64_t (**)(mach_timebase_info))(**(_QWORD **)&info + 48))(info);
  v21 = info;
  if (info)
  {
    v22 = (std::__shared_weak_count *)operator new();
    v23 = info;
    v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20DE8;
    v22->__shared_owners_ = 0;
    v22->__shared_weak_owners_ = 0;
    v22[1].__vftable = (std::__shared_weak_count_vtbl *)v23;
  }
  else
  {
    v22 = 0;
  }
  v49 = *(_QWORD *)(a3 + 32);
  v50 = *(_DWORD *)(a3 + 44);
  v94 = v21;
  v95 = v22;
  v96 = 0;
  v97 = v49;
  v98 = v50;
  v99 = v20;
  v100 = 1;
  v101 = 256;
LABEL_47:
  v90 = &off_24EC219D8;
  sub_2231F9F68((uint64_t)&v93, (uint64_t)&v91);
  v51 = v95;
  if (v95)
  {
    v52 = (unint64_t *)&v95->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  *(_QWORD *)v10 = &off_24EC21AC8;
  *(_QWORD *)(v10 + 8) = &off_24EC219D8;
  v54 = v91;
  v55 = v92[0];
  v91 = 0uLL;
  *(_OWORD *)(v10 + 16) = v54;
  *(_OWORD *)(v10 + 32) = v55;
  *(_OWORD *)(v10 + 46) = *(_OWORD *)((char *)v92 + 14);
  sub_2231AB0FC(v10 + 64, (uint64_t)v117);
  *(_QWORD *)v10 = &off_24EC21A48;
  v90 = &off_24EC219D8;
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
  if (*((_QWORD *)&v91 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  *(_QWORD *)v10 = &off_24EC6A528;
  info = 0;
  v88[0] = &off_24EC6A3B8;
  v88[1] = v10;
  v59 = (std::__shared_weak_count *)operator new();
  v59->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6A4B0;
  v59->__shared_owners_ = 0;
  v59->__shared_weak_owners_ = 0;
  v59[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  v89 = v59;
  sub_2231AD66C((uint64_t)v117);
  sub_2231AA5A4(a1, v87, (uint64_t)v88);
  v60 = v89;
  if (v89)
  {
    v61 = (unint64_t *)&v89->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  return a1;
}

void sub_22329BBE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_22329BC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  sub_223167354(a9);
  sub_2231F9050(&a41);
  MEMORY[0x227684CE8](v55, 0x10F3C4035895BD5);
  sub_2231AD66C((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void sub_22329BD5C(uint64_t *a1, char **a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  void **v12;
  unsigned __int8 v13;
  __int16 v14;
  unint64_t v15;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  int v32;
  char *v34;
  uint64_t v35;
  size_t v36;
  int v38;
  int v39;
  BOOL v40;
  int v42;
  char *v43;
  char *v44;
  int v45;
  unsigned __int8 *v46;
  char *v47;
  int v48;
  uint64_t v49;
  char *v50;
  size_t v51;
  unsigned __int8 *v52;
  unsigned __int8 v53;
  BOOL v54;
  uint64_t v55;
  uint64_t i;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  size_t v61;
  char *v62;
  BOOL v63;
  int v64;
  char *v65;
  char *v66;
  int v67;
  void *v68;
  char *v69;
  size_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char *v76;
  char *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t (**v91)();

  v80 = *(uint64_t *)((char *)a2 + 12);
  v91 = &off_24EC21C10;
  sub_22449A054(&v80, (uint64_t)&v82);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24EC21C58;
  *(_OWORD *)(v4 + 8) = v83;
  *(_OWORD *)(v4 + 24) = v84;
  *(_OWORD *)(v4 + 40) = v85;
  *(_QWORD *)(v4 + 56) = v86;
  *(_OWORD *)(v4 + 64) = v87;
  *(_QWORD *)(v4 + 80) = v88;
  *(_QWORD *)(v4 + 104) = v90;
  *(_OWORD *)(v4 + 88) = v89;
  v81 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC21CF0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v81 = 0;
  *a1 = v4;
  a1[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v82, v4, 21);
  v9 = v82[1];
  v8 = v82[2];
  *(_OWORD *)(a1 + 3) = *v82;
  *(_OWORD *)(a1 + 5) = v9;
  *(_OWORD *)(a1 + 7) = v8;
  v82 = 0;
  MEMORY[0x227684CE8]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v10 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v12 = (void **)(a1 + 3);
  v13 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v13 = 0;
  v14 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v14 = 0;
  *((_WORD *)a1 + 60) = v14 & 0xFF00 | v13;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (v15)
  {
    if (*((_DWORD *)a2 + 5) != 1 || *((_DWORD *)a1 + 11) != 1)
      goto LABEL_14;
LABEL_33:
    v34 = (char *)*((unsigned int *)a2 + 6);
    v35 = *((unsigned int *)a1 + 12);
    v36 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v34 == (_DWORD)v35 && (_DWORD)v34 == (_DWORD)v36)
    {
      v58 = *((unsigned int *)a2 + 7);
      v59 = *((unsigned int *)a1 + 13);
      v60 = *((_DWORD *)a2 + 3);
      v61 = (v60 * (_DWORD)v34);
      if ((_DWORD)v58 == (_DWORD)v59 && (_DWORD)v58 == (_DWORD)v61)
      {
        v61 = (*((_DWORD *)a2 + 4) * v61);
        v62 = *a2;
        if ((_DWORD)v61)
          v63 = v62 == 0;
        else
          v63 = 0;
        if (v63)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_102;
          }
        }
        else if (!(_DWORD)v61)
        {
          goto LABEL_110;
        }
        v68 = *v12;
        v69 = v62;
      }
      else
      {
        if (!(_DWORD)v34)
          goto LABEL_110;
        if (!v60)
          goto LABEL_110;
        v64 = *((_DWORD *)a2 + 4);
        if (!v64)
          goto LABEL_110;
        v65 = (char *)*v12;
        v66 = *a2;
        v67 = v64 - 1;
        if (v64 != 1)
        {
          if (!(_DWORD)v61)
            goto LABEL_110;
          while (v66
               || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            memmove(v65, v66, v61);
            v66 += v58;
            v65 += v59;
            if (!--v67)
              goto LABEL_88;
          }
LABEL_102:
          abort();
        }
LABEL_88:
        if (!(_DWORD)v61 || v66)
        {
          if (!(_DWORD)v61)
            goto LABEL_110;
        }
        else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_102;
        }
        v68 = v65;
        v69 = v66;
      }
      v70 = v61;
    }
    else
    {
      v39 = *((_DWORD *)a2 + 3);
      v38 = *((_DWORD *)a2 + 4);
      if ((_DWORD)v36)
        v40 = v39 == 0;
      else
        v40 = 1;
      if (v40 || v38 == 0)
        goto LABEL_110;
      v42 = v39 - 1;
      v43 = *a2;
      v44 = (char *)a1[3];
      v78 = v38 - 1;
      if (v38 != 1)
      {
        v74 = *((unsigned int *)a1 + 13);
        v73 = *((unsigned int *)a2 + 7);
        if (v39 == 1)
        {
          while (v43
               || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            memmove(v44, v43, v36);
            v43 += v73;
            v44 += v74;
            if (!--v78)
              goto LABEL_97;
          }
        }
        else
        {
          v45 = 0;
          v46 = (unsigned __int8 *)&qword_255795680;
          v79 = v42;
          while (1)
          {
            v75 = v45;
            v47 = v43;
            v48 = 0;
            v76 = v44;
            v77 = v47;
            do
            {
              while (v47)
              {
                memmove(v44, v47, v36);
                v47 = &v34[(_QWORD)v47];
                v44 += v35;
                if (++v48 == v42)
                  goto LABEL_47;
              }
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v49 = v35;
              v50 = v34;
              v51 = v36;
              v52 = v46;
              v53 = atomic_load(v46);
              if ((v53 & 1) == 0 && __cxa_guard_acquire((__guard *)v46))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release((__guard *)v46);
              }
              if (byte_255795670)
                v54 = byte_255795678 == 0;
              else
                v54 = 0;
              if (!v54)
              {
                v55 = qword_255795648;
                for (i = qword_255795650; v55 != i; v55 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v55)(*(_QWORD *)(v55 + 8), "ptr != nullptr || size == 0", 27, "", 0);
              }
              v46 = v52;
              v57 = atomic_load(v52);
              if ((v57 & 1) == 0 && __cxa_guard_acquire((__guard *)v52))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release((__guard *)v52);
              }
              v36 = v51;
              v34 = v50;
              v35 = v49;
              v42 = v79;
              if (!byte_255795670)
                goto LABEL_102;
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
              memcpy(v44, 0, v36);
              v44 += v35;
              ++v48;
              v47 = v34;
            }
            while (v48 != v79);
            v47 = v34;
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              break;
            }
LABEL_47:
            memmove(v44, v47, v36);
            v43 = &v77[v73];
            v44 = &v76[v74];
            v45 = v75 + 1;
            if (v75 + 1 == v78)
              goto LABEL_97;
          }
        }
        goto LABEL_102;
      }
LABEL_97:
      if (v42)
      {
        while (v43
             || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          memmove(v44, v43, v36);
          v43 = &v34[(_QWORD)v43];
          v44 += v35;
          if (!--v42)
            goto LABEL_103;
        }
        goto LABEL_102;
      }
LABEL_103:
      if (!v43
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_102;
      }
      v68 = v44;
      v69 = v43;
      v70 = v36;
    }
    memmove(v68, v69, v70);
    goto LABEL_110;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (*((_DWORD *)a2 + 5) == 1 && *((_DWORD *)a1 + 11) == 1)
    goto LABEL_33;
LABEL_14:
  if (*((_DWORD *)a2 + 2))
  {
    v17 = *((_DWORD *)a2 + 3);
    if (v17)
    {
      v18 = *((_DWORD *)a2 + 4);
      if (v18)
      {
        v19 = v17 - 1;
        v20 = *((unsigned int *)a2 + 6);
        v21 = *((unsigned int *)a1 + 12);
        v22 = *a2;
        v23 = (_BYTE *)a1[3];
        v24 = v18 - 1;
        if (v24)
        {
          v25 = *((unsigned int *)a1 + 13);
          v26 = *((unsigned int *)a2 + 7);
          if (v19)
          {
            v27 = 0;
            v28 = v23 + 2;
            v29 = v22 + 2;
            do
            {
              v30 = v29;
              v31 = v28;
              v32 = v19;
              do
              {
                *(v31 - 2) = *(v30 - 2);
                *(v31 - 1) = *(v30 - 1);
                *v31 = *v30;
                v31 += v21;
                v30 += v20;
                --v32;
              }
              while (v32);
              *(v31 - 2) = *(v30 - 2);
              *(v31 - 1) = *(v30 - 1);
              *v31 = *v30;
              v22 += v26;
              v23 += v25;
              ++v27;
              v28 += v25;
              v29 += v26;
            }
            while (v27 != v24);
          }
          else
          {
            do
            {
              *v23 = *v22;
              v23[1] = v22[1];
              v23[2] = v22[2];
              v22 += v26;
              v23 += v25;
              --v24;
            }
            while (v24);
          }
        }
        for (; v19; --v19)
        {
          *v23 = *v22;
          v23[1] = v22[1];
          v23[2] = v22[2];
          v22 += v20;
          v23 += v21;
        }
        *v23 = *v22;
        v23[1] = v22[1];
        v23[2] = v22[2];
      }
    }
  }
LABEL_110:
  v71 = v81;
  if (v81)
  {
    v72 = *(void **)(v81 + 72);
    if (v72)
      free(v72);
    *(_QWORD *)(v71 + 72) = 0;
    MEMORY[0x227684CE8](v71, 0x1091C40A44A61E0);
  }
}

void sub_22329C618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  sub_223167354(a10);
  sub_2231C5F84(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_22329C6C0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_22329C728@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

void sub_22329C73C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22329C7A4()
{
  return 25;
}

uint64_t sub_22329C7AC(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_22329C7B4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t *sub_22329C830(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
      free(v3);
    *(_QWORD *)(v2 + 72) = 0;
    MEMORY[0x227684CE8](v2, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_22329C888()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22329C89C()
{
  return 25;
}

__int128 *sub_22329C8A8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578AD68);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578AD68))
  {
    v2 = sub_22329C980();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(&xmmword_25578AD50, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25578AD60 = *((_QWORD *)v2 + 2);
      xmmword_25578AD50 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578AD50, &dword_22314D000);
    __cxa_guard_release(&qword_25578AD68);
  }
  if (byte_25578AD67 >= 0)
    return &xmmword_25578AD50;
  else
    return (__int128 *)xmmword_25578AD50;
}

void sub_22329C968(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AD68);
  _Unwind_Resume(a1);
}

__int128 *sub_22329C980()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578AD88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578AD88))
    return &xmmword_25578AD70;
  v2 = sub_22329CA5C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578AD70, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578AD80 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578AD70 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578AD70, &dword_22314D000);
  __cxa_guard_release(&qword_25578AD88);
  return &xmmword_25578AD70;
}

void sub_22329CA44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AD88);
  _Unwind_Resume(a1);
}

std::string *sub_22329CA5C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578ADA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578ADA8))
    return &stru_25578AD90;
  sub_22329CC74((uint64_t)__p);
  sub_22329CB4C((char *)__p, &stru_25578AD90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578AD90, &dword_22314D000);
  __cxa_guard_release(&qword_25578ADA8);
  return &stru_25578AD90;
}

void sub_22329CB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578ADA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578ADA8);
  _Unwind_Resume(a1);
}

void sub_22329CB4C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2231EC034();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_22329CC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22329CC74(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578ADC8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578ADC8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgra8u>]", qword_25578ADB0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578ADB0, &dword_22314D000);
    __cxa_guard_release(&qword_25578ADC8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578ADE8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578ADE8))
  {
    v5 = sub_2231A38CC(qword_25578ADB0, "<", 0);
    sub_2231A37C8(qword_25578ADB0, 0, v5, qword_25578ADD0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578ADD0, &dword_22314D000);
    __cxa_guard_release(&qword_25578ADE8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578AE08);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578AE08))
  {
    sub_224573040((uint64_t)qword_25578ADD0, (uint64_t)&xmmword_25578ADF0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578ADF0, &dword_22314D000);
    __cxa_guard_release(&qword_25578AE08);
  }
  if (byte_25578AE07 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578ADF0, *((unint64_t *)&xmmword_25578ADF0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578ADF0;
    *(_QWORD *)(a1 + 16) = unk_25578AE00;
  }
}

void sub_22329CE10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AE08);
  _Unwind_Resume(a1);
}

void sub_22329CE28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578ADE8);
  _Unwind_Resume(a1);
}

void sub_22329CE40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578ADC8);
  _Unwind_Resume(a1);
}

void sub_22329CE5C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22329CE80(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_22329CED0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE25EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE25EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE25EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE25EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_22329CF40(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_22329D04C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22329D090(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 __p;
  char v15;
  char v16;
  _QWORD v17[2];
  std::__shared_weak_count *v18;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v9 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    LOBYTE(__p) = 0;
    v16 = 0;
    sub_2231C6C30(a3, &__p, a5, v17);
    sub_2231AA5A4(a1, v9, (uint64_t)v17);
    v10 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (v16 && v15 < 0)
      operator delete((void *)__p);
  }
  return a1;
}

void sub_22329D170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  sub_2241231D8((uint64_t)&a18);
  if (a16)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22329D1A4(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  mach_timebase_info v22;
  std::__shared_weak_count *v23;
  mach_timebase_info v24;
  mach_timebase_info v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD v50[2];
  std::__shared_weak_count *v51;
  uint64_t (**v52)();
  __int128 v53;
  _OWORD v54[2];
  uint64_t (**v55)();
  mach_timebase_info v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  __int16 v63;
  mach_timebase_info info;
  mach_timebase_info v65;
  std::__shared_weak_count *v66;
  int v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  __int16 v72;
  _QWORD v73[2];
  char v74;
  char v75;
  char v76;
  char v77;
  __int128 v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    v9 = mach_continuous_time();
    v10 = atomic_load((unsigned __int8 *)&qword_255795560);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
    {
      mach_timebase_info(&info);
      LODWORD(v48) = info.numer;
      LODWORD(v49) = info.denom;
      *(double *)&qword_255795558 = (double)v48 / (double)v49;
      __cxa_guard_release(&qword_255795560);
    }
    v73[0] = llround(*(double *)&qword_255795558 * (double)v9);
    v73[1] = 2;
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = *a4;
    v79 = 1;
    v80 = 0;
    v81 = 0;
    v82 = 0;
    v83 = 0;
    v11 = operator new();
    v55 = &off_24EC1F958;
    v12 = *(_QWORD *)(a3 + 8);
    if (v12)
    {
      v13 = *(std::__shared_weak_count **)(a3 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        v12 = *(_QWORD *)(a3 + 8);
        v17 = *(std::__shared_weak_count **)(a3 + 16);
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          do
            v20 = __ldaxr(v18);
          while (__stlxr(v20 - 1, v18));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
      sub_224282708(v12, &info);
      v21 = (*(uint64_t (**)(mach_timebase_info))(**(_QWORD **)&info + 48))(info);
      v22 = info;
      if (info)
      {
        v23 = (std::__shared_weak_count *)operator new();
        v24 = info;
        v23->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20DE8;
        v23->__shared_owners_ = 0;
        v23->__shared_weak_owners_ = 0;
        v23[1].__vftable = (std::__shared_weak_count_vtbl *)v24;
      }
      else
      {
        v23 = 0;
      }
      v30 = *(_QWORD *)(a3 + 32);
      v31 = 2 * *(_DWORD *)(a3 + 44);
      v56 = v22;
      v57 = v23;
      v58 = 0;
      v59 = v30;
      v60 = v31;
      v61 = v21;
      v62 = 3;
      v63 = 256;
    }
    else
    {
      info = (mach_timebase_info)&off_24EC1FE80;
      sub_2231FC848(a3 + 24, &v65);
      v25 = v65;
      v26 = v66;
      if (v66)
      {
        v27 = (unint64_t *)&v66->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        v29 = v66;
      }
      else
      {
        v29 = 0;
      }
      if (v68)
        v45 = (2 * v67) | 0x100000000;
      else
        v45 = 0;
      v56 = v25;
      v57 = v26;
      v58 = v45;
      v59 = v70;
      v60 = 2 * v71;
      v61 = v69;
      v62 = 3;
      v63 = v72;
      if (v29)
      {
        v46 = (unint64_t *)&v29->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
    v52 = &off_24EC219D8;
    sub_2231F9F68((uint64_t)&v55, (uint64_t)&v53);
    v32 = v57;
    if (v57)
    {
      v33 = (unint64_t *)&v57->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    *(_QWORD *)v11 = &off_24EC21AC8;
    *(_QWORD *)(v11 + 8) = &off_24EC219D8;
    v35 = v53;
    v53 = 0uLL;
    v36 = v54[0];
    *(_OWORD *)(v11 + 16) = v35;
    *(_OWORD *)(v11 + 32) = v36;
    *(_OWORD *)(v11 + 46) = *(_OWORD *)((char *)v54 + 14);
    sub_2231AB0FC(v11 + 64, (uint64_t)v73);
    *(_QWORD *)v11 = &off_24EC21A48;
    v52 = &off_24EC219D8;
    v37 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
    if (*((_QWORD *)&v53 + 1))
    {
      v38 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    *(_QWORD *)v11 = &off_24EC6A528;
    info = 0;
    v50[0] = &off_24EC6A3B8;
    v50[1] = v11;
    v40 = (std::__shared_weak_count *)operator new();
    v40->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6A4B0;
    v40->__shared_owners_ = 0;
    v40->__shared_weak_owners_ = 0;
    v40[1].__vftable = (std::__shared_weak_count_vtbl *)v11;
    v51 = v40;
    sub_2231AD66C((uint64_t)v73);
    sub_2231AA5A4(a1, v8, (uint64_t)v50);
    v41 = v51;
    if (v51)
    {
      v42 = (unint64_t *)&v51->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  return a1;
}

void sub_22329D658(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_22329D670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2241231D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22329D684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,_QWORD *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  sub_2231C35FC(&a28);
  sub_2231AD66C((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_22329D6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;

  *(_QWORD *)(v39 + 8) = v40;
  v42 = *(std::__shared_weak_count **)(v39 + 24);
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  sub_2231C37EC(&a13);
  MEMORY[0x227684CE8](v39, 0x10F3C4035895BD5);
  sub_2231AD66C((uint64_t)&a39);
  _Unwind_Resume(a1);
}

uint64_t sub_22329D76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v17 = 1;
    sub_22329D8A4(a3, (__int128 *)__p, a5, v18);
    sub_2231AA5A4(a1, v10, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v17 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_22329D870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22329D8A4@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v11;
  unint64_t v12;
  mach_timebase_info info;
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v11) = info.numer;
    LODWORD(v12) = info.denom;
    *(double *)&qword_255795558 = (double)v11 / (double)v12;
    __cxa_guard_release(&qword_255795560);
  }
  v14[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v14[1] = 2;
  LOBYTE(v15) = 0;
  v17 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v15 = *a2;
    v16 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v17 = 1;
  }
  v18 = 0;
  v19 = 0;
  v20 = *a3;
  v21 = 1;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  sub_22329DA2C(a1, (uint64_t)v14, a4);
  return sub_2231AD66C((uint64_t)v14);
}

void sub_22329DA00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_22329DA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_22329DA2C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9[48];
  uint64_t v10;

  sub_223180698((uint64_t)v9, a1);
  sub_22329DB38((uint64_t)v9, a2, &v10);
  v5 = v10;
  v10 = 0;
  *a3 = &off_24EC6A3B8;
  a3[1] = v5;
  if (v5)
  {
    v6 = (_QWORD *)operator new();
    *v6 = &off_24EC6A4B0;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v5;
    v7 = v10;
    a3[2] = v6;
    v10 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    a3[2] = 0;
    v10 = 0;
  }
  return sub_22316F8F4(v9);
}

void sub_22329DAE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v5 = *(_QWORD *)(v3 - 40);
  *(_QWORD *)(v3 - 40) = 0;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    sub_22316F8F4((uint64_t *)va);
    _Unwind_Resume(a1);
  }
  sub_22316F8F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22329DB38(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 __p;
  char v11;
  char v12;
  __int128 v13;

  v6 = operator new();
  LOBYTE(__p) = 0;
  v12 = 0;
  sub_2241468E0(&v13, a1, &__p);
  *(_QWORD *)v6 = &off_24EC281F8;
  *(_OWORD *)(v6 + 8) = v13;
  v13 = 0uLL;
  sub_2231AB0FC(v6 + 32, a2);
  *(_QWORD *)v6 = &off_24EC28178;
  *a3 = v6;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v12)
  {
    if (v11 < 0)
      operator delete((void *)__p);
  }
}

void sub_22329DC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;

  sub_223167354(v20);
  sub_223167354((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  MEMORY[0x227684CE8](v19, 0x10B3C40E92279A6);
  _Unwind_Resume(a1);
}

_QWORD *sub_22329DC7C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC281F8;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22329DCF4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC281F8;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22329DD6C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_22329DD74(uint64_t *a1, uint64_t *lpsrc)
{
  uint64_t result;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC281B8, 0);
  if (result)
  {
    if (a1 == lpsrc)
      return 1;
    else
      return sub_224146AC8(a1 + 1, (uint64_t *)(result + 8));
  }
  return result;
}

void sub_22329DDD8(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_22329EEAC();
  sub_22329DE8C(a1);
  sub_2231AC984(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_22329DE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22329DE8C(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25578B2C8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578B2C8))
  {
    v4 = sub_22329ECB0();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_2231AD150((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_223197FA4(&xmmword_25578B2B0, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_25578B2C0 = *(_QWORD *)(v9 - 8);
      xmmword_25578B2B0 = v7;
    }
    sub_22319BB48(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B2B0, &dword_22314D000);
    __cxa_guard_release(&qword_25578B2C8);
  }
  return sub_22329F26C(&xmmword_25578B2B0, (uint64_t)"{", (uint64_t *)(a1 + 8), (uint64_t)"}");
}

void sub_22329DF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  __cxa_guard_abort(&qword_25578B2C8);
  _Unwind_Resume(a1);
}

void sub_22329DFBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B2C8);
  _Unwind_Resume(a1);
}

void sub_22329DFD4(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 7;
}

void sub_22329E000(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_22413ADAC(lpsrc, 7, a2);
}

_QWORD *sub_22329E038(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC281F8;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22329E0B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC281F8;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22329E128(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_22329E74C();
  return sub_22329E27C(v2, (uint64_t)"{", (uint64_t *)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_22329E180(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_22329E4A8((uint64_t)v5, (uint64_t)v2, (uint64_t *)(a1 + 8));
  if (v3 == -1)
    sub_22316DD70();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC275C8[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC27568[v3])(v5, v2);
  return result;
}

void sub_22329E218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24EC27568[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_22329E250(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_22329E27C(__int128 *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_2231ABB0C((uint64_t *)&v19, (uint64_t)&__dst);
  sub_22329E4A8((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC276D8[v16])(&p_p_dst, &__dst);
  sub_2231AB90C((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC276D8[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC275C8[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC27568[v16])(&p_dst, &__dst);
  return result;
}

void sub_22329E418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22329E430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22329E444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22329E458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22329E46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22329E480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22329E494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22329E4A8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21[0] = v5;
  sub_224146CC0((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC275B0[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_22329E6F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_22329E71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22329E738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_22329E74C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B188);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B188))
    return &xmmword_25578B170;
  v2 = sub_22329E828();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578B170, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578B180 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578B170 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B170, &dword_22314D000);
  __cxa_guard_release(&qword_25578B188);
  return &xmmword_25578B170;
}

void sub_22329E810(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B188);
  _Unwind_Resume(a1);
}

std::string *sub_22329E828()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B1A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B1A8))
    return &stru_25578B190;
  sub_22329EACC((uint64_t)__p);
  sub_22329E918((char *)__p, &stru_25578B190);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B190, &dword_22314D000);
  __cxa_guard_release(&qword_25578B1A8);
  return &stru_25578B190;
}

void sub_22329E8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578B1A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578B1A8);
  _Unwind_Resume(a1);
}

void sub_22329E918(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22329ECB0();
  if (*((char *)v4 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_2231AC788();
  if (*((char *)v6 + 23) < 0)
  {
    sub_223197FA4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_22329EA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22329EACC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578B228);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578B228))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::TriMesh>]", qword_25578B210);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578B210, &dword_22314D000);
    __cxa_guard_release(&qword_25578B228);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578B248);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578B248))
  {
    v5 = sub_2231A38CC(qword_25578B210, "<", 0);
    sub_2231A37C8(qword_25578B210, 0, v5, qword_25578B230);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578B230, &dword_22314D000);
    __cxa_guard_release(&qword_25578B248);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578B268);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578B268))
  {
    sub_224573040((uint64_t)qword_25578B230, (uint64_t)&xmmword_25578B250);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B250, &dword_22314D000);
    __cxa_guard_release(&qword_25578B268);
  }
  if (byte_25578B267 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578B250, *((unint64_t *)&xmmword_25578B250 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578B250;
    *(_QWORD *)(a1 + 16) = unk_25578B260;
  }
}

void sub_22329EC68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B268);
  _Unwind_Resume(a1);
}

void sub_22329EC80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B248);
  _Unwind_Resume(a1);
}

void sub_22329EC98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B228);
  _Unwind_Resume(a1);
}

__int128 *sub_22329ECB0()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B1C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B1C8))
    return &xmmword_25578B1B0;
  v2 = (char *)sub_22329ED8C();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_25578B1B0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25578B1C0 = *((_QWORD *)v2 + 2);
    xmmword_25578B1B0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B1B0, &dword_22314D000);
  __cxa_guard_release(&qword_25578B1C8);
  return &xmmword_25578B1B0;
}

void sub_22329ED74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B1C8);
  _Unwind_Resume(a1);
}

void *sub_22329ED8C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B1E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B1E8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::TriMesh]", qword_25578B1D0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578B1D0, &dword_22314D000);
    __cxa_guard_release(&qword_25578B1E8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25578B208);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B208))
    return &unk_25578B1F0;
  sub_224573040((uint64_t)qword_25578B1D0, (uint64_t)&unk_25578B1F0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25578B1F0, &dword_22314D000);
  __cxa_guard_release(&qword_25578B208);
  return &unk_25578B1F0;
}

void sub_22329EE7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B208);
  _Unwind_Resume(a1);
}

void sub_22329EE94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B1E8);
  _Unwind_Resume(a1);
}

std::string *sub_22329EEAC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578B288);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B288))
  {
    sub_223174DE4(v9, "viz::PackageData");
    v2 = sub_22329ECB0();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v14 = 0xC00000000000000;
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v4 = sub_22329F174();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_223197FA4(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    v18 = 0x400000000000000;
    *(_OWORD *)__p = *(_OWORD *)"void";
    sub_22319BD1C(v8, (uint64_t)__dst, 4uLL);
    sub_2245730F4((char *)v9, (uint64_t *)v8, &stru_25578B270, v6, v7);
    sub_22319BB48(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B270, &dword_22314D000);
        __cxa_guard_release(&qword_25578B288);
        return &stru_25578B270;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_25578B270;
}

void sub_22329F090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_22319BB48(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_25578B288);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_25578B288);
  _Unwind_Resume(a1);
}

std::string *sub_22329F174()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B2A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B2A8))
    return &stru_25578B290;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 7U]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578B290);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B290, &dword_22314D000);
  __cxa_guard_release(&qword_25578B2A8);
  return &stru_25578B290;
}

void sub_22329F22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578B2A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578B2A8);
  _Unwind_Resume(a1);
}

uint64_t sub_22329F26C(__int128 *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_2231ABB0C((uint64_t *)&v14, (uint64_t)&__dst);
  sub_22329E4A8((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC276D8[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC275C8[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC27568[v11])(&p_dst, &__dst);
  return result;
}

void sub_22329F3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22329F3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22329F3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22329F3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22329F400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22329F414@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v11;
  unint64_t v12;
  mach_timebase_info info;
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v11) = info.numer;
    LODWORD(v12) = info.denom;
    *(double *)&qword_255795558 = (double)v11 / (double)v12;
    __cxa_guard_release(&qword_255795560);
  }
  v14[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v14[1] = 2;
  LOBYTE(v15) = 0;
  v17 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v15 = *a2;
    v16 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v17 = 1;
  }
  v18 = 0;
  v19 = 0;
  v20 = *a3;
  v21 = 1;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  sub_22329F59C(a1, (uint64_t)v14, a4);
  return sub_2231AD66C((uint64_t)v14);
}

void sub_22329F570(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_22329F588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_22329F59C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9[48];
  uint64_t v10;

  sub_22317FD80((uint64_t)v9, a1);
  sub_22329DB38((uint64_t)v9, a2, &v10);
  v5 = v10;
  v10 = 0;
  *a3 = &off_24EC6A3B8;
  a3[1] = v5;
  if (v5)
  {
    v6 = (_QWORD *)operator new();
    *v6 = &off_24EC6A4B0;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v5;
    v7 = v10;
    a3[2] = v6;
    v10 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    a3[2] = 0;
    v10 = 0;
  }
  return sub_22316F8F4(v9);
}

void sub_22329F658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v5 = *(_QWORD *)(v3 - 40);
  *(_QWORD *)(v3 - 40) = 0;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    sub_22316F8F4((uint64_t *)va);
    _Unwind_Resume(a1);
  }
  sub_22316F8F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_22329F6A8@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;

  v5 = *a1;
  v6 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24EC27C78;
  v7[1] = v5;
  v7[2] = v6;
  sub_2231AB0FC((uint64_t)(v7 + 4), a2);
  *v7 = &off_24EC27BF8;
  *a3 = &off_24EC6A3B8;
  a3[1] = v7;
  result = (_QWORD *)operator new();
  *result = &off_24EC6A4B0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v7;
  a3[2] = result;
  return result;
}

void sub_22329F76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22329F790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v11 = *(std::__shared_weak_count **)(v9 + 16);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  MEMORY[0x227684CE8](v9, 0x10B3C40E92279A6);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22329F7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_22329F808(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC27C78;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22329F880(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC27C78;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22329F8F8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_22329F900(_QWORD *a1, _QWORD *lpsrc)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  _QWORD v9[3];
  char v10;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC27C38, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v5 = result;
      v6 = (unsigned __int8 *)a1[1];
      v7 = *v6;
      v8 = *(unsigned __int8 **)(v5 + 8);
      if (v7 == *v8)
      {
        v9[0] = &v10;
        v9[1] = v6;
        v9[2] = v8;
        return sub_224510F44(v7, (uint64_t)v9);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_22329F9A8(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_2232A0EAC();
  sub_22329FA5C(a1);
  sub_2231AC984(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_22329FA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22329FA5C(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25578AFA8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578AFA8))
  {
    v4 = sub_2232A08DC();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_2231AD150((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_223197FA4(&xmmword_25578AF90, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_25578AFA0 = *(_QWORD *)(v9 - 8);
      xmmword_25578AF90 = v7;
    }
    sub_22319BB48(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578AF90, &dword_22314D000);
    __cxa_guard_release(&qword_25578AFA8);
  }
  return sub_2232A126C(&xmmword_25578AF90, (uint64_t)"{", (_BYTE **)(a1 + 8), (uint64_t)"}");
}

void sub_22329FB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  __cxa_guard_abort(&qword_25578AFA8);
  _Unwind_Resume(a1);
}

void sub_22329FB8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AFA8);
  _Unwind_Resume(a1);
}

void sub_22329FBA4(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 3;
}

void sub_22329FBD0(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_22413ADAC(lpsrc, 3, a2);
}

_QWORD *sub_22329FC08(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC27C78;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22329FC80(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC27C78;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22329FCF8(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_2232A0378();
  return sub_22329FE4C(v2, (uint64_t)"{", (_BYTE **)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_22329FD50(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_2232A0078((uint64_t)v5, (uint64_t)v2, (_BYTE **)(a1 + 8));
  if (v3 == -1)
    sub_22316DD70();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC275C8[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC27568[v3])(v5, v2);
  return result;
}

void sub_22329FDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24EC27568[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_22329FE20(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_22329FE4C(__int128 *a1, uint64_t a2, _BYTE **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_2231ABB0C((uint64_t *)&v19, (uint64_t)&__dst);
  sub_2232A0078((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC276D8[v16])(&p_p_dst, &__dst);
  sub_2231AB90C((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC276D8[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC275C8[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC27568[v16])(&p_dst, &__dst);
  return result;
}

void sub_22329FFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A0000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A0014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A0028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A003C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A0050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A0064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A0078(uint64_t a1, uint64_t a2, _BYTE **a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__dst[2];
  unint64_t v22;
  _QWORD v23[5];
  _QWORD *v24;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v24 = (_QWORD *)v5;
  v6 = sub_2231813E8((_QWORD *)(v5 + 16), (uint64_t)"{", 1);
  LOBYTE(v23[0]) = **a3;
  v7 = sub_22454B4D0(v6, v23);
  sub_2231813E8(v7, (uint64_t)",", 1);
  v23[0] = v5 + 16;
  sub_224511ECC(**a3, (uint64_t)a3, (uint64_t)v23);
  sub_2231813E8((_QWORD *)(v5 + 16), (uint64_t)"}", 1);
  v8 = *(_DWORD *)(v5 + 120);
  if ((v8 & 0x10) != 0)
  {
    v11 = *(_QWORD *)(v5 + 112);
    v12 = *(_QWORD *)(v5 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v5 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v5 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v8 & 8) == 0)
    {
      v9 = 0;
      HIBYTE(v22) = 0;
      v10 = __dst;
      goto LABEL_14;
    }
    v13 = *(const void **)(v5 + 40);
    v9 = *(_QWORD *)(v5 + 56) - (_QWORD)v13;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_13;
  }
  HIBYTE(v22) = v9;
  v10 = __dst;
  if (v9)
LABEL_13:
    memmove(v10, v13, v9);
LABEL_14:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v24;
  if (v24)
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    *v24 = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    v16[3] = MEMORY[0x24BEDB848] + 16;
    v16[2] = v19;
    if (*((char *)v16 + 111) < 0)
      operator delete((void *)v16[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v16 + 16);
    MEMORY[0x227684CE8](v16, 0x10B2C40EED050F3);
  }
  v23[0] = a2;
  v23[1] = __dst;
  v23[2] = a2;
  v23[3] = __dst;
  v23[4] = __dst;
  v20 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v20 == -1)
    sub_22316DD70();
  v24 = v23;
  ((void (*)(_QWORD **, uint64_t))off_24EC275B0[v20])(&v24, a2);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
}

void sub_2232A0324(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_2232A0348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2232A0364(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22456E764((uint64_t *)(v1 - 56));
  _Unwind_Resume(a1);
}

__int128 *sub_2232A0378()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578AE28);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578AE28))
    return &xmmword_25578AE10;
  v2 = sub_2232A0454();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578AE10, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578AE20 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578AE10 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578AE10, &dword_22314D000);
  __cxa_guard_release(&qword_25578AE28);
  return &xmmword_25578AE10;
}

void sub_2232A043C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AE28);
  _Unwind_Resume(a1);
}

std::string *sub_2232A0454()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578AE48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578AE48))
    return &stru_25578AE30;
  sub_2232A06F8((uint64_t)__p);
  sub_2232A0544((char *)__p, &stru_25578AE30);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578AE30, &dword_22314D000);
  __cxa_guard_release(&qword_25578AE48);
  return &stru_25578AE30;
}

void sub_2232A0504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578AE48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578AE48);
  _Unwind_Resume(a1);
}

void sub_2232A0544(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2232A08DC();
  if (*((char *)v4 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_2231AC788();
  if (*((char *)v6 + 23) < 0)
  {
    sub_223197FA4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_2232A06A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2232A06F8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578AF08);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578AF08))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::con::Points<2>>]", qword_25578AEF0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578AEF0, &dword_22314D000);
    __cxa_guard_release(&qword_25578AF08);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578AF28);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578AF28))
  {
    v5 = sub_2231A38CC(qword_25578AEF0, "<", 0);
    sub_2231A37C8(qword_25578AEF0, 0, v5, qword_25578AF10);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578AF10, &dword_22314D000);
    __cxa_guard_release(&qword_25578AF28);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578AF48);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578AF48))
  {
    sub_224573040((uint64_t)qword_25578AF10, (uint64_t)&xmmword_25578AF30);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578AF30, &dword_22314D000);
    __cxa_guard_release(&qword_25578AF48);
  }
  if (byte_25578AF47 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578AF30, *((unint64_t *)&xmmword_25578AF30 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578AF30;
    *(_QWORD *)(a1 + 16) = unk_25578AF40;
  }
}

void sub_2232A0894(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AF48);
  _Unwind_Resume(a1);
}

void sub_2232A08AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AF28);
  _Unwind_Resume(a1);
}

void sub_2232A08C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AF08);
  _Unwind_Resume(a1);
}

__int128 *sub_2232A08DC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578AE68);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578AE68))
    return &xmmword_25578AE50;
  v2 = sub_2232A09B8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578AE50, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578AE60 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578AE50 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578AE50, &dword_22314D000);
  __cxa_guard_release(&qword_25578AE68);
  return &xmmword_25578AE50;
}

void sub_2232A09A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AE68);
  _Unwind_Resume(a1);
}

std::string *sub_2232A09B8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578AE88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578AE88))
    return &stru_25578AE70;
  sub_2232A0BD0((uint64_t)__p);
  sub_2232A0AA8((char *)__p, &stru_25578AE70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578AE70, &dword_22314D000);
  __cxa_guard_release(&qword_25578AE88);
  return &stru_25578AE70;
}

void sub_2232A0A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578AE88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578AE88);
  _Unwind_Resume(a1);
}

void sub_2232A0AA8(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2232A0DB4();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2232A0BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2232A0BD0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578AEA8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578AEA8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::con::Points<2>]", qword_25578AE90);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578AE90, &dword_22314D000);
    __cxa_guard_release(&qword_25578AEA8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578AEC8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578AEC8))
  {
    v5 = sub_2231A38CC(qword_25578AE90, "<", 0);
    sub_2231A37C8(qword_25578AE90, 0, v5, qword_25578AEB0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578AEB0, &dword_22314D000);
    __cxa_guard_release(&qword_25578AEC8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578AEE8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578AEE8))
  {
    sub_224573040((uint64_t)qword_25578AEB0, (uint64_t)&xmmword_25578AED0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578AED0, &dword_22314D000);
    __cxa_guard_release(&qword_25578AEE8);
  }
  if (byte_25578AEE7 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578AED0, *((unint64_t *)&xmmword_25578AED0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578AED0;
    *(_QWORD *)(a1 + 16) = unk_25578AEE0;
  }
}

void sub_2232A0D6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AEE8);
  _Unwind_Resume(a1);
}

void sub_2232A0D84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AEC8);
  _Unwind_Resume(a1);
}

void sub_2232A0D9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AEA8);
  _Unwind_Resume(a1);
}

std::string *sub_2232A0DB4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B5A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B5A8))
    return &stru_25578B590;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 2U]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578B590);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B590, &dword_22314D000);
  __cxa_guard_release(&qword_25578B5A8);
  return &stru_25578B590;
}

void sub_2232A0E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578B5A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578B5A8);
  _Unwind_Resume(a1);
}

std::string *sub_2232A0EAC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578AF68);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578AF68))
  {
    sub_223174DE4(v9, "viz::PackageData");
    v2 = sub_2232A08DC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v14 = 0xC00000000000000;
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v4 = sub_2232A1174();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_223197FA4(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    v18 = 0x400000000000000;
    *(_OWORD *)__p = *(_OWORD *)"void";
    sub_22319BD1C(v8, (uint64_t)__dst, 4uLL);
    sub_2245730F4((char *)v9, (uint64_t *)v8, &stru_25578AF50, v6, v7);
    sub_22319BB48(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578AF50, &dword_22314D000);
        __cxa_guard_release(&qword_25578AF68);
        return &stru_25578AF50;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_25578AF50;
}

void sub_2232A1090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_22319BB48(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_25578AF68);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_25578AF68);
  _Unwind_Resume(a1);
}

std::string *sub_2232A1174()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578AF88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578AF88))
    return &stru_25578AF70;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 3U]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578AF70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578AF70, &dword_22314D000);
  __cxa_guard_release(&qword_25578AF88);
  return &stru_25578AF70;
}

void sub_2232A122C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578AF88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578AF88);
  _Unwind_Resume(a1);
}

uint64_t sub_2232A126C(__int128 *a1, uint64_t a2, _BYTE **a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_2231ABB0C((uint64_t *)&v14, (uint64_t)&__dst);
  sub_2232A0078((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC276D8[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC275C8[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC27568[v11])(&p_dst, &__dst);
  return result;
}

void sub_2232A13AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A13C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A13D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A13EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A1400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A1414(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9[2];
  uint64_t v10;
  int v11;
  void *v12[2];
  uint64_t v13;
  int v14;
  void *v15[2];
  uint64_t v16;
  void *__p[2];
  uint64_t v18;

  *(_OWORD *)v9 = *(_OWORD *)a1;
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v11 = *(_DWORD *)(a1 + 24);
  *(_OWORD *)v12 = *(_OWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v14 = *(_DWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 64);
  v16 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)v15 = v5;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v6 = *(_OWORD *)(a1 + 88);
  v18 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)__p = v6;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v7 = operator new();
  sub_2232A15E0(v7, (__int128 *)v9, a2);
  *a3 = &off_24EC6A3B8;
  a3[1] = v7;
  v8 = (_QWORD *)operator new();
  *v8 = &off_24EC6A4B0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  a3[2] = v8;
  if (SHIBYTE(v18) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v13) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15[0]);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v10) & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(v9[0]);
    return;
  }
LABEL_8:
  operator delete(v12[0]);
  if (SHIBYTE(v10) < 0)
    goto LABEL_9;
}

void sub_2232A157C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_223293AA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232A15A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x227684CE8](v9, 0x10B3C40DA15BA9BLL);
  sub_223293AA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232A15CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223293AA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2232A15E0(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a1 = off_24EC27D48;
  v4 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 6);
  v5 = a2[2];
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(a1 + 40) = v5;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 14);
  v6 = a2[4];
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 10);
  *(_OWORD *)(a1 + 72) = v6;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 8) = 0;
  v7 = *(__int128 *)((char *)a2 + 88);
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 13);
  *(_OWORD *)(a1 + 96) = v7;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 11) = 0;
  sub_2231AB0FC(a1 + 128, a3);
  *(_QWORD *)a1 = off_24EC27CC8;
  return a1;
}

void sub_2232A16B4(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (v1[119] < 0)
  {
    operator delete(*v5);
    if ((v1[95] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v1[63] & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v1[95] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v4);
  if ((v1[63] & 0x80000000) == 0)
  {
LABEL_4:
    if ((v1[31] & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*v3);
  if ((v1[31] & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2232A1720(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC27D48;
  sub_2231AD66C(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 40));
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_8;
LABEL_4:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_2232A17B8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC27D48;
  sub_2231AD66C(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*(void **)(a1 + 40));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_10:
    JUMPOUT(0x227684CE8);
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  goto LABEL_10;
}

uint64_t sub_2232A1854(uint64_t a1)
{
  return a1 + 128;
}

unsigned __int8 **sub_2232A185C(char *a1, char *lpsrc)
{
  unsigned __int8 **result;
  unsigned __int8 **v5[6];
  _QWORD v6[6];

  result = (unsigned __int8 **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC27D08, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return (unsigned __int8 **)1;
    }
    else
    {
      v6[0] = a1 + 8;
      v6[1] = a1 + 32;
      v6[2] = a1 + 40;
      v6[3] = a1 + 64;
      v6[4] = a1 + 72;
      v6[5] = a1 + 96;
      v5[0] = result + 1;
      v5[1] = result + 4;
      v5[2] = result + 5;
      v5[3] = result + 8;
      v5[4] = result + 9;
      v5[5] = result + 12;
      return (unsigned __int8 **)sub_2232A2FB4((uint64_t)v6, v5);
    }
  }
  return result;
}

void sub_2232A191C(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_2232A322C();
  sub_2232A19D0(a1);
  sub_2231AC984(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 128, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_2232A19B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2232A19D0(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25578B108);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578B108))
  {
    v4 = sub_2232A2C6C();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_2231AD150((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_223197FA4(&xmmword_25578B0F0, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_25578B100 = *(_QWORD *)(v9 - 8);
      xmmword_25578B0F0 = v7;
    }
    sub_22319BB48(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B0F0, &dword_22314D000);
    __cxa_guard_release(&qword_25578B108);
  }
  return sub_2232A35EC(&xmmword_25578B0F0, (__int128 *)"{", (__int128 *)(a1 + 8), (__int128 *)"}");
}

void sub_2232A1AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  __cxa_guard_abort(&qword_25578B108);
  _Unwind_Resume(a1);
}

void sub_2232A1B00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B108);
  _Unwind_Resume(a1);
}

void sub_2232A1B18(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 10;
}

void sub_2232A1B44(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_22413ADAC(lpsrc, 10, a2);
}

uint64_t sub_2232A1B7C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC27D48;
  sub_2231AD66C(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 40));
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_8;
LABEL_4:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_2232A1C14(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC27D48;
  sub_2231AD66C(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*(void **)(a1 + 40));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_10:
    JUMPOUT(0x227684CE8);
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  goto LABEL_10;
}

uint64_t sub_2232A1CB0(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_2232A2708();
  return sub_2232A1DD4(v2, (__int128 *)"{", (__int128 *)(a1 + 8), (__int128 *)",", a1 + 128, (__int128 *)"}");
}

uint64_t sub_2232A1D08(uint64_t a1)
{
  return sub_2232A2E68(a1 + 8);
}

void sub_2232A1D10(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_2232A1D3C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC27D48;
  sub_2231AD66C(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 40));
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_8;
LABEL_4:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_2232A1DD4(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5, __int128 *a6)
{
  uint64_t result;
  __int128 v12;
  uint64_t v13;
  int v14;
  __int128 *v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  char v21;
  __int128 *v22;
  const char *v23;
  __int128 *v24;
  const char *v25;
  const char *v26;
  __int128 **v27;

  v14 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&v12, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    v12 = *a1;
    v13 = *((_QWORD *)a1 + 2);
  }
  v14 = 1;
  v15 = &v12;
  v16 = a2;
  v17 = &v12;
  v18 = a2;
  v19 = a2;
  sub_2231ABB0C((uint64_t *)&v17, (uint64_t)&v12);
  v15 = a3;
  v16 = (__int128 *)((char *)a3 + 24);
  v17 = a3 + 2;
  v18 = (__int128 *)((char *)a3 + 56);
  v19 = a3 + 4;
  v20 = (uint64_t)a3 + 88;
  v22 = &v12;
  v23 = "{";
  v24 = &v12;
  v25 = "{";
  v26 = "{";
  if (v14 == -1)
    goto LABEL_12;
  v27 = &v22;
  ((void (*)(__int128 ***, __int128 *))off_24EC276D8[v14])(&v27, &v12);
  LOBYTE(v22) = 1;
  v23 = (const char *)&v12;
  v24 = (__int128 *)&v21;
  sub_2232A20B4((uint64_t)&v15, (uint64_t)&v22);
  v22 = &v12;
  v23 = "}";
  v24 = &v12;
  v25 = "}";
  v26 = "}";
  if (v14 == -1)
LABEL_12:
    sub_22316DD70();
  v27 = &v22;
  ((void (*)(__int128 ***, __int128 *))off_24EC276D8[v14])(&v27, &v12);
  v15 = &v12;
  v16 = a4;
  v17 = &v12;
  v18 = a4;
  v19 = a4;
  if (v14 == -1)
    sub_22316DD70();
  v22 = (__int128 *)&v15;
  ((void (*)(__int128 **, __int128 *))off_24EC276D8[v14])(&v22, &v12);
  sub_2231AB90C((uint64_t)&v27, (uint64_t)&v12, a5);
  v15 = &v12;
  v16 = a6;
  v17 = &v12;
  v18 = a6;
  v19 = a6;
  if (v14 == -1)
    sub_22316DD70();
  v22 = (__int128 *)&v15;
  ((void (*)(__int128 **, __int128 *))off_24EC276D8[v14])(&v22, &v12);
  if (v14 == -1)
    sub_22316DD70();
  v15 = (__int128 *)&v22;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC275C8[v14])(&v15, &v12);
  if (v14 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC27568[v14])(&v15, &v12);
  return result;
}

void sub_2232A2024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232A203C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232A2050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232A2064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232A2078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232A208C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232A20A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2232A20B4(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint64_t *v24;

  v4 = *(const char **)a1;
  if (!*(_BYTE *)a2)
  {
    v19 = *(_QWORD *)(a2 + 8);
    v20 = ",";
    v21 = v19;
    v22 = ",";
    v23 = ",";
    v5 = *(unsigned int *)(v19 + 24);
    if ((_DWORD)v5 == -1)
      goto LABEL_21;
    v24 = &v19;
    ((void (*)(uint64_t **))off_24EC276D8[v5])(&v24);
  }
  *(_BYTE *)a2 = 0;
  v19 = *(_QWORD *)(a2 + 8);
  v20 = v4;
  v21 = v19;
  v22 = v4;
  v23 = v4;
  v6 = *(unsigned int *)(v19 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_21;
  v24 = &v19;
  ((void (*)(uint64_t **))off_24EC27598[v6])(&v24);
  v7 = *(int **)(a1 + 8);
  if (!*(_BYTE *)a2)
  {
    v19 = *(_QWORD *)(a2 + 8);
    v20 = ",";
    v21 = v19;
    v22 = ",";
    v23 = ",";
    v8 = *(unsigned int *)(v19 + 24);
    if ((_DWORD)v8 == -1)
      goto LABEL_21;
    v24 = &v19;
    ((void (*)(uint64_t **))off_24EC276D8[v8])(&v24);
  }
  *(_BYTE *)a2 = 0;
  sub_2232A2464((uint64_t)&v19, *(_QWORD *)(a2 + 8), v7);
  v9 = *(const char **)(a1 + 16);
  if (!*(_BYTE *)a2)
  {
    v19 = *(_QWORD *)(a2 + 8);
    v20 = ",";
    v21 = v19;
    v22 = ",";
    v23 = ",";
    v10 = *(unsigned int *)(v19 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_21;
    v24 = &v19;
    ((void (*)(uint64_t **))off_24EC276D8[v10])(&v24);
  }
  *(_BYTE *)a2 = 0;
  v19 = *(_QWORD *)(a2 + 8);
  v20 = v9;
  v21 = v19;
  v22 = v9;
  v23 = v9;
  v11 = *(unsigned int *)(v19 + 24);
  if ((_DWORD)v11 == -1)
    goto LABEL_21;
  v24 = &v19;
  ((void (*)(uint64_t **))off_24EC27598[v11])(&v24);
  sub_2232A235C(a2, *(unsigned int **)(a1 + 24));
  v12 = *(const char **)(a1 + 32);
  if (!*(_BYTE *)a2)
  {
    v19 = *(_QWORD *)(a2 + 8);
    v20 = ",";
    v21 = v19;
    v22 = ",";
    v23 = ",";
    v13 = *(unsigned int *)(v19 + 24);
    if ((_DWORD)v13 == -1)
      goto LABEL_21;
    v24 = &v19;
    ((void (*)(uint64_t **))off_24EC276D8[v13])(&v24);
  }
  *(_BYTE *)a2 = 0;
  v19 = *(_QWORD *)(a2 + 8);
  v20 = v12;
  v21 = v19;
  v22 = v12;
  v23 = v12;
  v14 = *(unsigned int *)(v19 + 24);
  if ((_DWORD)v14 == -1)
    goto LABEL_21;
  v24 = &v19;
  ((void (*)(uint64_t **))off_24EC27598[v14])(&v24);
  v15 = *(const char **)(a1 + 40);
  if (!*(_BYTE *)a2)
  {
    v19 = *(_QWORD *)(a2 + 8);
    v20 = ",";
    v21 = v19;
    v22 = ",";
    v23 = ",";
    v16 = *(unsigned int *)(v19 + 24);
    if ((_DWORD)v16 == -1)
      goto LABEL_21;
    v24 = &v19;
    ((void (*)(uint64_t **))off_24EC276D8[v16])(&v24);
  }
  *(_BYTE *)a2 = 0;
  v19 = *(_QWORD *)(a2 + 8);
  v20 = v15;
  v21 = v19;
  v22 = v15;
  v23 = v15;
  v17 = *(unsigned int *)(v19 + 24);
  if ((_DWORD)v17 == -1)
LABEL_21:
    sub_22316DD70();
  v24 = &v19;
  return ((uint64_t (*)(uint64_t **))off_24EC27598[v17])(&v24);
}

void sub_2232A235C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  uint64_t *v13;

  if (!*(_BYTE *)a1)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (std::string *)",";
    v10 = v8;
    v11 = (std::string *)",";
    v12 = (std::string *)",";
    v4 = *(unsigned int *)(v8 + 24);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    ((void (*)(std::string *))off_24EC276D8[v4])(&v7);
  }
  *(_BYTE *)a1 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  std::to_string(&v7, *a2);
  v8 = v5;
  v9 = &v7;
  v10 = v5;
  v11 = &v7;
  v12 = &v7;
  v6 = *(unsigned int *)(v5 + 24);
  if ((_DWORD)v6 == -1)
    sub_22316DD70();
  v13 = &v8;
  ((void (*)(uint64_t **, uint64_t))off_24EC275B0[v6])(&v13, v5);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_2232A2448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2232A2464(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21[0] = v5;
  sub_22322BF34(v5 + 16, *a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC275B0[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_2232A26B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_2232A26D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2232A26F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_2232A2708()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578AFC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578AFC8))
    return &xmmword_25578AFB0;
  v2 = sub_2232A27E4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578AFB0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578AFC0 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578AFB0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578AFB0, &dword_22314D000);
  __cxa_guard_release(&qword_25578AFC8);
  return &xmmword_25578AFB0;
}

void sub_2232A27CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578AFC8);
  _Unwind_Resume(a1);
}

std::string *sub_2232A27E4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578AFE8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578AFE8))
    return &stru_25578AFD0;
  sub_2232A2A88((uint64_t)__p);
  sub_2232A28D4((char *)__p, &stru_25578AFD0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578AFD0, &dword_22314D000);
  __cxa_guard_release(&qword_25578AFE8);
  return &stru_25578AFD0;
}

void sub_2232A2894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578AFE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578AFE8);
  _Unwind_Resume(a1);
}

void sub_2232A28D4(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2232A2C6C();
  if (*((char *)v4 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_2231AC788();
  if (*((char *)v6 + 23) < 0)
  {
    sub_223197FA4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_2232A2A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2232A2A88(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578B068);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578B068))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::TextLog>]", qword_25578B050);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578B050, &dword_22314D000);
    __cxa_guard_release(&qword_25578B068);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578B088);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578B088))
  {
    v5 = sub_2231A38CC(qword_25578B050, "<", 0);
    sub_2231A37C8(qword_25578B050, 0, v5, qword_25578B070);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578B070, &dword_22314D000);
    __cxa_guard_release(&qword_25578B088);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578B0A8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578B0A8))
  {
    sub_224573040((uint64_t)qword_25578B070, (uint64_t)&xmmword_25578B090);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B090, &dword_22314D000);
    __cxa_guard_release(&qword_25578B0A8);
  }
  if (byte_25578B0A7 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578B090, *((unint64_t *)&xmmword_25578B090 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578B090;
    *(_QWORD *)(a1 + 16) = unk_25578B0A0;
  }
}

void sub_2232A2C24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B0A8);
  _Unwind_Resume(a1);
}

void sub_2232A2C3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B088);
  _Unwind_Resume(a1);
}

void sub_2232A2C54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B068);
  _Unwind_Resume(a1);
}

__int128 *sub_2232A2C6C()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B008);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B008))
    return &xmmword_25578AFF0;
  v2 = (char *)sub_2232A2D48();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_25578AFF0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25578B000 = *((_QWORD *)v2 + 2);
    xmmword_25578AFF0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578AFF0, &dword_22314D000);
  __cxa_guard_release(&qword_25578B008);
  return &xmmword_25578AFF0;
}

void sub_2232A2D30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B008);
  _Unwind_Resume(a1);
}

void *sub_2232A2D48()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B028);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B028))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::TextLog]", qword_25578B010);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578B010, &dword_22314D000);
    __cxa_guard_release(&qword_25578B028);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25578B048);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B048))
    return &unk_25578B030;
  sub_224573040((uint64_t)qword_25578B010, (uint64_t)&unk_25578B030);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25578B030, &dword_22314D000);
  __cxa_guard_release(&qword_25578B048);
  return &unk_25578B030;
}

void sub_2232A2E38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B048);
  _Unwind_Resume(a1);
}

void sub_2232A2E50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B028);
  _Unwind_Resume(a1);
}

uint64_t sub_2232A2E68(uint64_t a1)
{
  uint64_t result;
  _DWORD v2[6];
  int v3;
  _QWORD v4[6];
  char v5;
  _DWORD *v6;
  const char *v7;
  char *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v3 = 0;
  v4[0] = a1;
  v4[1] = a1 + 24;
  v4[2] = a1 + 32;
  v4[3] = a1 + 56;
  v4[4] = a1 + 64;
  v4[5] = a1 + 88;
  sub_2231ABA1C(v2, "{");
  LOBYTE(v6) = 1;
  v7 = (const char *)v2;
  v8 = &v5;
  sub_2232A20B4((uint64_t)v4, (uint64_t)&v6);
  v6 = v2;
  v7 = "}";
  v8 = (char *)v2;
  v9 = "}";
  v10 = "}";
  if (v3 == -1)
    sub_22316DD70();
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24EC276D8[v3])(&v11, v2);
  if (v3 == -1)
    sub_22316DD70();
  v4[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC275C8[v3])(v4, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC27568[v3])(v4, v2);
  return result;
}

void sub_2232A2F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A2FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2232A2FB4(uint64_t a1, unsigned __int8 ***a2)
{
  const void **v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 **v10;
  uint64_t result;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  BOOL v39;

  v2 = *(const void ***)a1;
  v3 = *a2;
  v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (unsigned __int8 *)*(unsigned __int8 *)(*(_QWORD *)a1 + 23);
  else
    v5 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  v6 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v7 = (char)v6;
  if ((char)v6 < 0)
    v6 = v3[1];
  if (v5 != v6)
    return 0;
  if (v7 >= 0)
    v10 = *a2;
  else
    v10 = (unsigned __int8 **)*v3;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v10, *(_QWORD *)(*(_QWORD *)a1 + 8)))
      return 0;
  }
  else if (*(_BYTE *)(*(_QWORD *)a1 + 23))
  {
    while (*(unsigned __int8 *)v2 == *(unsigned __int8 *)v10)
    {
      v2 = (const void **)((char *)v2 + 1);
      v10 = (unsigned __int8 **)((char *)v10 + 1);
      if (!--v4)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  if (**(_DWORD **)(a1 + 8) != *(_DWORD *)a2[1])
    return 0;
  v12 = *(unsigned __int8 **)(a1 + 16);
  v13 = (unsigned __int8 *)a2[2];
  v14 = v12[23];
  if ((v14 & 0x80u) == 0)
    v15 = (unsigned __int8 *)v12[23];
  else
    v15 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
  v16 = (unsigned __int8 *)v13[23];
  v17 = (char)v16;
  if ((char)v16 < 0)
    v16 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
  if (v15 != v16)
    return 0;
  if (v17 >= 0)
    v18 = (unsigned __int8 *)a2[2];
  else
    v18 = *(unsigned __int8 **)v13;
  if ((v14 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v12, v18, *((_QWORD *)v12 + 1)))
      return 0;
  }
  else if (v12[23])
  {
    while (*v12 == *v18)
    {
      ++v12;
      ++v18;
      if (!--v14)
        goto LABEL_34;
    }
    return 0;
  }
LABEL_34:
  if (**(_DWORD **)(a1 + 24) != *(_DWORD *)a2[3])
    return 0;
  v19 = *(unsigned __int8 **)(a1 + 32);
  v20 = (unsigned __int8 *)a2[4];
  v21 = v19[23];
  if ((v21 & 0x80u) == 0)
    v22 = (unsigned __int8 *)v19[23];
  else
    v22 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
  v23 = (unsigned __int8 *)v20[23];
  v24 = (char)v23;
  if ((char)v23 < 0)
    v23 = (unsigned __int8 *)*((_QWORD *)v20 + 1);
  if (v22 != v23)
    return 0;
  if (v24 >= 0)
    v25 = (unsigned __int8 *)a2[4];
  else
    v25 = *(unsigned __int8 **)v20;
  if ((v21 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v19, v25, *((_QWORD *)v19 + 1)))
      goto LABEL_50;
    return 0;
  }
  if (v19[23])
  {
    while (*v19 == *v25)
    {
      ++v19;
      ++v25;
      if (!--v21)
        goto LABEL_50;
    }
    return 0;
  }
LABEL_50:
  v26 = *(unsigned __int8 **)(a1 + 40);
  v27 = (unsigned __int8 *)a2[5];
  v28 = v26[23];
  if ((v28 & 0x80u) == 0)
    v29 = (unsigned __int8 *)v26[23];
  else
    v29 = (unsigned __int8 *)*((_QWORD *)v26 + 1);
  v30 = (unsigned __int8 *)v27[23];
  v31 = (char)v30;
  if ((char)v30 < 0)
    v30 = (unsigned __int8 *)*((_QWORD *)v27 + 1);
  if (v29 != v30)
    return 0;
  if (v31 >= 0)
    v32 = (unsigned __int8 *)a2[5];
  else
    v32 = *(unsigned __int8 **)v27;
  if ((v28 & 0x80) != 0)
    return memcmp(*(const void **)v26, v32, *((_QWORD *)v26 + 1)) == 0;
  if (!v26[23])
    return 1;
  v33 = v28 - 1;
  do
  {
    v35 = *v26++;
    v34 = v35;
    v37 = *v32++;
    v36 = v37;
    v39 = v33-- != 0;
    result = v34 == v36;
  }
  while (v34 == v36 && v39);
  return result;
}

std::string *sub_2232A322C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578B0C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B0C8))
  {
    sub_223174DE4(v9, "viz::PackageData");
    v2 = sub_2232A2C6C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v14 = 0xC00000000000000;
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v4 = sub_2232A34F4();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_223197FA4(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    v18 = 0x400000000000000;
    *(_OWORD *)__p = *(_OWORD *)"void";
    sub_22319BD1C(v8, (uint64_t)__dst, 4uLL);
    sub_2245730F4((char *)v9, (uint64_t *)v8, &stru_25578B0B0, v6, v7);
    sub_22319BB48(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B0B0, &dword_22314D000);
        __cxa_guard_release(&qword_25578B0C8);
        return &stru_25578B0B0;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_25578B0B0;
}

void sub_2232A3410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_22319BB48(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_25578B0C8);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_25578B0C8);
  _Unwind_Resume(a1);
}

std::string *sub_2232A34F4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B0E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B0E8))
    return &stru_25578B0D0;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 10U]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578B0D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B0D0, &dword_22314D000);
  __cxa_guard_release(&qword_25578B0E8);
  return &stru_25578B0D0;
}

void sub_2232A35AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578B0E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578B0E8);
  _Unwind_Resume(a1);
}

uint64_t sub_2232A35EC(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  char v17;
  __int128 *v18;
  const char *v19;
  __int128 *v20;
  const char *v21;
  const char *v22;
  __int128 **v23;

  v10 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&v8, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    v8 = *a1;
    v9 = *((_QWORD *)a1 + 2);
  }
  v10 = 1;
  v11 = &v8;
  v12 = a2;
  v13 = &v8;
  v14 = a2;
  v15 = a2;
  sub_2231ABB0C((uint64_t *)&v13, (uint64_t)&v8);
  v11 = a3;
  v12 = (__int128 *)((char *)a3 + 24);
  v13 = a3 + 2;
  v14 = (__int128 *)((char *)a3 + 56);
  v15 = a3 + 4;
  v16 = (uint64_t)a3 + 88;
  v18 = &v8;
  v19 = "{";
  v20 = &v8;
  v21 = "{";
  v22 = "{";
  if (v10 == -1)
    goto LABEL_11;
  v23 = &v18;
  ((void (*)(__int128 ***, __int128 *))off_24EC276D8[v10])(&v23, &v8);
  LOBYTE(v18) = 1;
  v19 = (const char *)&v8;
  v20 = (__int128 *)&v17;
  sub_2232A20B4((uint64_t)&v11, (uint64_t)&v18);
  v18 = &v8;
  v19 = "}";
  v20 = &v8;
  v21 = "}";
  v22 = "}";
  if (v10 == -1)
LABEL_11:
    sub_22316DD70();
  v23 = &v18;
  ((void (*)(__int128 ***, __int128 *))off_24EC276D8[v10])(&v23, &v8);
  v11 = &v8;
  v12 = a4;
  v13 = &v8;
  v14 = a4;
  v15 = a4;
  if (v10 == -1)
    sub_22316DD70();
  v18 = (__int128 *)&v11;
  ((void (*)(__int128 **, __int128 *))off_24EC276D8[v10])(&v18, &v8);
  if (v10 == -1)
    sub_22316DD70();
  v11 = (__int128 *)&v18;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC275C8[v10])(&v11, &v8);
  if (v10 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC27568[v10])(&v11, &v8);
  return result;
}

void sub_2232A37E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232A37F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232A380C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232A3820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232A3834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2232A3848@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v11;
  unint64_t v12;
  mach_timebase_info info;
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v11) = info.numer;
    LODWORD(v12) = info.denom;
    *(double *)&qword_255795558 = (double)v11 / (double)v12;
    __cxa_guard_release(&qword_255795560);
  }
  v14[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v14[1] = 2;
  LOBYTE(v15) = 0;
  v17 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v15 = *a2;
    v16 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v17 = 1;
  }
  v18 = 0;
  v19 = 0;
  v20 = *a3;
  v21 = 1;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  sub_2232A39D0(a1, (uint64_t)v14, a4);
  return sub_2231AD66C((uint64_t)v14);
}

void sub_2232A39A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_2232A39BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2232A39D0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  __int128 __p;
  uint64_t v14;
  char v15;

  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  v9 = v5;
  LOBYTE(v10) = 0;
  v12 = 0;
  if (*(_BYTE *)(a1 + 32))
  {
    v10 = *(_OWORD *)(a1 + 8);
    v11 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v12 = 1;
  }
  LOBYTE(__p) = 0;
  v15 = 0;
  if (*(_BYTE *)(a1 + 64))
  {
    __p = *(_OWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v15 = 1;
  }
  v6 = operator new();
  sub_2232A3B88(v6, &v9, a2);
  *a3 = &off_24EC6A3B8;
  a3[1] = v6;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24EC6A4B0;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  a3[2] = v7;
  if (v15 && SHIBYTE(v14) < 0)
    operator delete((void *)__p);
  if (v12 && SHIBYTE(v11) < 0)
    operator delete((void *)v10);
  result = v9;
  v9 = 0;
  if (result)
    return MEMORY[0x227684CE8](result, 0x1000C4072FAA15ELL);
  return result;
}

void sub_2232A3B24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_223294C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2232A3B48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227684CE8](v2, 0x10B3C404EA979F8);
  sub_223294C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2232A3B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223294C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2232A3B88(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = off_24EC283E8;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    v5 = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[3];
    *(_OWORD *)(a1 + 16) = v5;
    a2[2] = 0;
    a2[3] = 0;
    a2[1] = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*((_BYTE *)a2 + 64))
  {
    v6 = *(_OWORD *)(a2 + 5);
    *(_QWORD *)(a1 + 64) = a2[7];
    *(_OWORD *)(a1 + 48) = v6;
    a2[6] = 0;
    a2[7] = 0;
    a2[5] = 0;
    *(_BYTE *)(a1 + 72) = 1;
  }
  sub_2231AB0FC(a1 + 80, a3);
  *(_QWORD *)a1 = off_24EC28368;
  return a1;
}

void sub_2232A3C44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v5;

  if (*(_BYTE *)(v1 + 72) && *(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(_BYTE *)(v1 + 40) && *(char *)(v1 + 39) < 0)
    operator delete(*v2);
  v5 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v5)
    MEMORY[0x227684CE8](v5, 0x1000C4072FAA15ELL);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2232A3CA0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24EC283E8;
  sub_2231AD66C(a1 + 80);
  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 40))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    MEMORY[0x227684CE8](v2, 0x1000C4072FAA15ELL);
  return a1;
}

void sub_2232A3D2C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24EC283E8;
  sub_2231AD66C(a1 + 80);
  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 40))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    MEMORY[0x227684CE8](v2, 0x1000C4072FAA15ELL);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232A3DC8(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_2232A3DD0(const void **a1, const void **lpsrc)
{
  uint64_t result;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC283A8, 0);
  if (result)
  {
    if (a1 == lpsrc)
      return 1;
    else
      return sub_22414412C(a1 + 1, (uint64_t *)(result + 8));
  }
  return result;
}

void sub_2232A3E34(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_2232A4F40();
  sub_2232A3EE8(a1);
  sub_2231AC984(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 80, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_2232A3ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2232A3EE8(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25578B588);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578B588))
  {
    v4 = sub_2232A4D44();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_2231AD150((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_223197FA4(&xmmword_25578B570, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_25578B580 = *(_QWORD *)(v9 - 8);
      xmmword_25578B570 = v7;
    }
    sub_22319BB48(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B570, &dword_22314D000);
    __cxa_guard_release(&qword_25578B588);
  }
  return sub_2232A5300(&xmmword_25578B570, (uint64_t)"{", (uint64_t *)(a1 + 8), (uint64_t)"}");
}

void sub_2232A3FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  __cxa_guard_abort(&qword_25578B588);
  _Unwind_Resume(a1);
}

void sub_2232A4018(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B588);
  _Unwind_Resume(a1);
}

void sub_2232A4030(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 11;
}

void sub_2232A405C(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_22413ADAC(lpsrc, 11, a2);
}

uint64_t sub_2232A4094(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24EC283E8;
  sub_2231AD66C(a1 + 80);
  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 40))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    MEMORY[0x227684CE8](v2, 0x1000C4072FAA15ELL);
  return a1;
}

void sub_2232A4120(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24EC283E8;
  sub_2231AD66C(a1 + 80);
  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 40))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    MEMORY[0x227684CE8](v2, 0x1000C4072FAA15ELL);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232A41BC(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_2232A47E0();
  return sub_2232A4310(v2, (uint64_t)"{", (uint64_t *)(a1 + 8), (uint64_t)",", a1 + 80, (uint64_t)"}");
}

uint64_t sub_2232A4214(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_2232A453C((uint64_t)v5, (uint64_t)v2, (uint64_t *)(a1 + 8));
  if (v3 == -1)
    sub_22316DD70();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC275C8[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC27568[v3])(v5, v2);
  return result;
}

void sub_2232A42AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24EC27568[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_2232A42E4(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_2232A4310(__int128 *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_2231ABB0C((uint64_t *)&v19, (uint64_t)&__dst);
  sub_2232A453C((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC276D8[v16])(&p_p_dst, &__dst);
  sub_2231AB90C((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC276D8[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC275C8[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC27568[v16])(&p_dst, &__dst);
  return result;
}

void sub_2232A44AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A44C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A44D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A44EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A4500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A4514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A4528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A453C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21[0] = v5;
  sub_2241444A0((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC275B0[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_2232A478C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_2232A47B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2232A47CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_2232A47E0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B448);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B448))
    return &xmmword_25578B430;
  v2 = sub_2232A48BC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578B430, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578B440 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578B430 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B430, &dword_22314D000);
  __cxa_guard_release(&qword_25578B448);
  return &xmmword_25578B430;
}

void sub_2232A48A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B448);
  _Unwind_Resume(a1);
}

std::string *sub_2232A48BC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B468);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B468))
    return &stru_25578B450;
  sub_2232A4B60((uint64_t)__p);
  sub_2232A49AC((char *)__p, &stru_25578B450);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B450, &dword_22314D000);
  __cxa_guard_release(&qword_25578B468);
  return &stru_25578B450;
}

void sub_2232A496C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578B468);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578B468);
  _Unwind_Resume(a1);
}

void sub_2232A49AC(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2232A4D44();
  if (*((char *)v4 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_2231AC788();
  if (*((char *)v6 + 23) < 0)
  {
    sub_223197FA4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_2232A4B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2232A4B60(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578B4E8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578B4E8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::Transform3>]", qword_25578B4D0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578B4D0, &dword_22314D000);
    __cxa_guard_release(&qword_25578B4E8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578B508);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578B508))
  {
    v5 = sub_2231A38CC(qword_25578B4D0, "<", 0);
    sub_2231A37C8(qword_25578B4D0, 0, v5, qword_25578B4F0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578B4F0, &dword_22314D000);
    __cxa_guard_release(&qword_25578B508);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578B528);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578B528))
  {
    sub_224573040((uint64_t)qword_25578B4F0, (uint64_t)&xmmword_25578B510);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B510, &dword_22314D000);
    __cxa_guard_release(&qword_25578B528);
  }
  if (byte_25578B527 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578B510, *((unint64_t *)&xmmword_25578B510 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578B510;
    *(_QWORD *)(a1 + 16) = unk_25578B520;
  }
}

void sub_2232A4CFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B528);
  _Unwind_Resume(a1);
}

void sub_2232A4D14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B508);
  _Unwind_Resume(a1);
}

void sub_2232A4D2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B4E8);
  _Unwind_Resume(a1);
}

__int128 *sub_2232A4D44()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B488);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B488))
    return &xmmword_25578B470;
  v2 = (char *)sub_2232A4E20();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_25578B470, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25578B480 = *((_QWORD *)v2 + 2);
    xmmword_25578B470 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B470, &dword_22314D000);
  __cxa_guard_release(&qword_25578B488);
  return &xmmword_25578B470;
}

void sub_2232A4E08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B488);
  _Unwind_Resume(a1);
}

void *sub_2232A4E20()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B4A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B4A8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::Transform3]", qword_25578B490);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578B490, &dword_22314D000);
    __cxa_guard_release(&qword_25578B4A8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25578B4C8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B4C8))
    return &unk_25578B4B0;
  sub_224573040((uint64_t)qword_25578B490, (uint64_t)&unk_25578B4B0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25578B4B0, &dword_22314D000);
  __cxa_guard_release(&qword_25578B4C8);
  return &unk_25578B4B0;
}

void sub_2232A4F10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B4C8);
  _Unwind_Resume(a1);
}

void sub_2232A4F28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B4A8);
  _Unwind_Resume(a1);
}

std::string *sub_2232A4F40()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578B548);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B548))
  {
    sub_223174DE4(v9, "viz::PackageData");
    v2 = sub_2232A4D44();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v14 = 0xC00000000000000;
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v4 = sub_2232A5208();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_223197FA4(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    v18 = 0x400000000000000;
    *(_OWORD *)__p = *(_OWORD *)"void";
    sub_22319BD1C(v8, (uint64_t)__dst, 4uLL);
    sub_2245730F4((char *)v9, (uint64_t *)v8, &stru_25578B530, v6, v7);
    sub_22319BB48(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B530, &dword_22314D000);
        __cxa_guard_release(&qword_25578B548);
        return &stru_25578B530;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_25578B530;
}

void sub_2232A5124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_22319BB48(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_25578B548);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_25578B548);
  _Unwind_Resume(a1);
}

std::string *sub_2232A5208()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B568);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B568))
    return &stru_25578B550;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 11U]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578B550);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B550, &dword_22314D000);
  __cxa_guard_release(&qword_25578B568);
  return &stru_25578B550;
}

void sub_2232A52C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578B568);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578B568);
  _Unwind_Resume(a1);
}

uint64_t sub_2232A5300(__int128 *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_2231ABB0C((uint64_t *)&v14, (uint64_t)&__dst);
  sub_2232A453C((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC276D8[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC275C8[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC27568[v11])(&p_dst, &__dst);
  return result;
}

void sub_2232A5440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A5458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A546C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A5480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A5494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2232A54A8(uint64_t a1, const char **a2)
{
  uint64_t result;
  _DWORD v3[6];
  int v4;
  _QWORD v5[5];
  _QWORD *v6;

  v4 = 0;
  if (*a2)
    sub_2231BA9F4(v3, a2);
  else
    sub_2231A0D14(v3, "nullptr");
  v5[0] = v3;
  v5[1] = "_camera";
  v5[2] = v3;
  v5[3] = "_camera";
  v5[4] = "_camera";
  if (v4 == -1)
    sub_22316DD70();
  v6 = v5;
  ((void (*)(_QWORD **, _DWORD *))off_24EC27580[v4])(&v6, v3);
  if (v4 == -1)
    sub_22316DD70();
  v5[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC275C8[v4])(v5, v3);
  if (v4 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC27568[v4])(v5, v3);
  return result;
}

void sub_2232A55A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232A55B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232A55C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2232A55DC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24EC282C8;
  v7[1] = &off_24EC6D000;
  v7[2] = v5;
  v7[3] = v6;
  sub_2231AB0FC((uint64_t)(v7 + 4), a2);
  *v7 = &off_24EC28248;
  *a3 = &off_24EC6A3B8;
  a3[1] = v7;
  result = (_QWORD *)operator new();
  *result = &off_24EC6A4B0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v7;
  a3[2] = result;
  return result;
}

void sub_2232A56C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_224159450((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2232A56E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v3;
  va_list va;

  va_start(va, a2);
  sub_224159450(v3);
  MEMORY[0x227684CE8](v2, 0x10F3C40D7DF13C9);
  sub_224159450((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2232A5718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_224159450((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2232A572C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC282C8;
  sub_2231AD66C((uint64_t)(a1 + 4));
  a1[1] = &off_24EC6D000;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2232A57B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC282C8;
  sub_2231AD66C((uint64_t)(a1 + 4));
  a1[1] = &off_24EC6D000;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232A5834(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2232A583C(void *a1, void *lpsrc)
{
  uint64_t result;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC28288, 0);
  if (result)
    return a1 == lpsrc || sub_224159538((uint64_t)a1 + 8, result + 8);
  return result;
}

void sub_2232A58A0(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_2232A698C();
  sub_2232A5954(a1);
  sub_2231AC984(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_2232A5938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2232A5954(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25578B428);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578B428))
  {
    v4 = sub_2232A6790();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_2231AD150((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_223197FA4(&xmmword_25578B410, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_25578B420 = *(_QWORD *)(v9 - 8);
      xmmword_25578B410 = v7;
    }
    sub_22319BB48(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B410, &dword_22314D000);
    __cxa_guard_release(&qword_25578B428);
  }
  return sub_2232A6D4C(&xmmword_25578B410, (uint64_t)"{", a1 + 8, (uint64_t)"}");
}

void sub_2232A5A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  __cxa_guard_abort(&qword_25578B428);
  _Unwind_Resume(a1);
}

void sub_2232A5A84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B428);
  _Unwind_Resume(a1);
}

void sub_2232A5A9C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 5;
}

void sub_2232A5AC8(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_22413ADAC(lpsrc, 5, a2);
}

_QWORD *sub_2232A5B00(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC282C8;
  sub_2231AD66C((uint64_t)(a1 + 4));
  a1[1] = &off_24EC6D000;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2232A5B84(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC282C8;
  sub_2231AD66C((uint64_t)(a1 + 4));
  a1[1] = &off_24EC6D000;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232A5C08(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_2232A622C();
  return sub_2232A5D5C(v2, (uint64_t)"{", a1 + 8, (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_2232A5C60(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_2232A5F88((uint64_t)v5, (uint64_t)v2, a1 + 8);
  if (v3 == -1)
    sub_22316DD70();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC275C8[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC27568[v3])(v5, v2);
  return result;
}

void sub_2232A5CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24EC27568[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_2232A5D30(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_2232A5D5C(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_2231ABB0C((uint64_t *)&v19, (uint64_t)&__dst);
  sub_2232A5F88((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC276D8[v16])(&p_p_dst, &__dst);
  sub_2231AB90C((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC276D8[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC275C8[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC27568[v16])(&p_dst, &__dst);
  return result;
}

void sub_2232A5EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A5F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A5F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A5F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A5F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A5F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A5F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A5F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21[0] = v5;
  sub_224159F1C((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC275B0[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_2232A61D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_2232A61FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2232A6218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_2232A622C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B2E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B2E8))
    return &xmmword_25578B2D0;
  v2 = sub_2232A6308();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578B2D0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578B2E0 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578B2D0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B2D0, &dword_22314D000);
  __cxa_guard_release(&qword_25578B2E8);
  return &xmmword_25578B2D0;
}

void sub_2232A62F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B2E8);
  _Unwind_Resume(a1);
}

std::string *sub_2232A6308()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B308);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B308))
    return &stru_25578B2F0;
  sub_2232A65AC((uint64_t)__p);
  sub_2232A63F8((char *)__p, &stru_25578B2F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B2F0, &dword_22314D000);
  __cxa_guard_release(&qword_25578B308);
  return &stru_25578B2F0;
}

void sub_2232A63B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578B308);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578B308);
  _Unwind_Resume(a1);
}

void sub_2232A63F8(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2232A6790();
  if (*((char *)v4 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_2231AC788();
  if (*((char *)v6 + 23) < 0)
  {
    sub_223197FA4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_2232A655C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2232A65AC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578B388);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578B388))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::cam::Camera>]", qword_25578B370);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578B370, &dword_22314D000);
    __cxa_guard_release(&qword_25578B388);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578B3A8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578B3A8))
  {
    v5 = sub_2231A38CC(qword_25578B370, "<", 0);
    sub_2231A37C8(qword_25578B370, 0, v5, qword_25578B390);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578B390, &dword_22314D000);
    __cxa_guard_release(&qword_25578B3A8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578B3C8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578B3C8))
  {
    sub_224573040((uint64_t)qword_25578B390, (uint64_t)&xmmword_25578B3B0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B3B0, &dword_22314D000);
    __cxa_guard_release(&qword_25578B3C8);
  }
  if (byte_25578B3C7 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578B3B0, *((unint64_t *)&xmmword_25578B3B0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578B3B0;
    *(_QWORD *)(a1 + 16) = unk_25578B3C0;
  }
}

void sub_2232A6748(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B3C8);
  _Unwind_Resume(a1);
}

void sub_2232A6760(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B3A8);
  _Unwind_Resume(a1);
}

void sub_2232A6778(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B388);
  _Unwind_Resume(a1);
}

__int128 *sub_2232A6790()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B328);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B328))
    return &xmmword_25578B310;
  v2 = (char *)sub_2232A686C();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_25578B310, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25578B320 = *((_QWORD *)v2 + 2);
    xmmword_25578B310 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B310, &dword_22314D000);
  __cxa_guard_release(&qword_25578B328);
  return &xmmword_25578B310;
}

void sub_2232A6854(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B328);
  _Unwind_Resume(a1);
}

void *sub_2232A686C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B348);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B348))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::Camera]", qword_25578B330);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578B330, &dword_22314D000);
    __cxa_guard_release(&qword_25578B348);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25578B368);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B368))
    return &unk_25578B350;
  sub_224573040((uint64_t)qword_25578B330, (uint64_t)&unk_25578B350);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25578B350, &dword_22314D000);
  __cxa_guard_release(&qword_25578B368);
  return &unk_25578B350;
}

void sub_2232A695C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B368);
  _Unwind_Resume(a1);
}

void sub_2232A6974(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B348);
  _Unwind_Resume(a1);
}

std::string *sub_2232A698C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578B3E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B3E8))
  {
    sub_223174DE4(v9, "viz::PackageData");
    v2 = sub_2232A6790();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v14 = 0xC00000000000000;
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v4 = sub_2232A6C54();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_223197FA4(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    v18 = 0x400000000000000;
    *(_OWORD *)__p = *(_OWORD *)"void";
    sub_22319BD1C(v8, (uint64_t)__dst, 4uLL);
    sub_2245730F4((char *)v9, (uint64_t *)v8, &stru_25578B3D0, v6, v7);
    sub_22319BB48(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B3D0, &dword_22314D000);
        __cxa_guard_release(&qword_25578B3E8);
        return &stru_25578B3D0;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_25578B3D0;
}

void sub_2232A6B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_22319BB48(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_25578B3E8);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_25578B3E8);
  _Unwind_Resume(a1);
}

std::string *sub_2232A6C54()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B408);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B408))
    return &stru_25578B3F0;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 5U]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578B3F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B3F0, &dword_22314D000);
  __cxa_guard_release(&qword_25578B408);
  return &stru_25578B3F0;
}

void sub_2232A6D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578B408);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578B408);
  _Unwind_Resume(a1);
}

uint64_t sub_2232A6D4C(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_2231ABB0C((uint64_t *)&v14, (uint64_t)&__dst);
  sub_2232A5F88((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC276D8[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC275C8[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC27568[v11])(&p_dst, &__dst);
  return result;
}

void sub_2232A6E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A6EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A6EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A6ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A6EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232A6EF4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC28318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2232A6F04(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC28318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232A6F34(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_2232A6F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v17 = 1;
    sub_2232A3848(a3, (__int128 *)__p, a5, v18);
    sub_2231AA5A4(a1, v10, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v17 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_2232A7048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_DWORD *CV3DReconSessionConfigurationCreate()
{
  _DWORD *v0;
  _DWORD *v1;

  v0 = operator new(0x4C0uLL, MEMORY[0x24BEDB6B8]);
  v1 = v0;
  if (v0)
  {
    bzero(v0, 0x4C0uLL);
    sub_223223C50((uint64_t)(v1 + 2));
    v1[302] = 1;
    *(_QWORD *)v1 = &off_24EC2B4D0;
  }
  return v1;
}

uint64_t sub_2232A70DC(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

char *CV3DReconSessionConfigurationCreateWithPreset(int a1, CFTypeRef *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  char *v18;
  CFErrorRef v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _BYTE __p[24];
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  __int16 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[19];
  char v33;
  _BYTE v34[697];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  __int128 v50;
  __int128 v51;
  char *v52;
  __int128 v53;
  CFErrorRef v54;
  std::__shared_weak_count *v55;
  std::error_condition v56;

  if (a1 == 5)
  {
    sub_22321C7A4(5, (uint64_t)__p);
    v2 = (char *)operator new(0x4C0uLL, MEMORY[0x24BEDB6B8]);
    v3 = v2;
    if (v2)
    {
      v4 = *(_QWORD *)__p;
      v2[56] = 0;
      *((_QWORD *)v2 + 1) = v4;
      *((_OWORD *)v2 + 1) = *(_OWORD *)&__p[8];
      *((_OWORD *)v2 + 2) = v24;
      *((_QWORD *)v2 + 6) = v25;
      v2[80] = 0;
      if (v28)
      {
        *(_OWORD *)(v2 + 56) = v26;
        *((_QWORD *)v2 + 9) = v27;
        v27 = 0;
        v26 = 0uLL;
        v2[80] = 1;
      }
      v5 = v31;
      *((_OWORD *)v2 + 6) = v30;
      *((_OWORD *)v2 + 7) = v5;
      *((_OWORD *)v2 + 8) = *(_OWORD *)v32;
      v6 = *(_OWORD *)&v32[5];
      *(_OWORD *)(v2 + 152) = *(_OWORD *)&v32[3];
      *(_OWORD *)(v2 + 168) = v6;
      v7 = *(_OWORD *)&v32[9];
      *(_OWORD *)(v2 + 184) = *(_OWORD *)&v32[7];
      *(_OWORD *)(v2 + 200) = v7;
      v8 = *(_OWORD *)&v32[13];
      *(_OWORD *)(v2 + 216) = *(_OWORD *)&v32[11];
      *(_OWORD *)(v2 + 232) = v8;
      v9 = *(_OWORD *)&v32[15];
      *(_OWORD *)(v2 + 264) = *(_OWORD *)&v32[17];
      *((_WORD *)v2 + 44) = v29;
      *(_QWORD *)(v2 + 142) = *(_QWORD *)((char *)&v32[1] + 6);
      v2[280] = v33;
      *(_OWORD *)(v2 + 248) = v9;
      memcpy(v2 + 288, v34, 0x2B9uLL);
      v10 = v36;
      *((_OWORD *)v3 + 62) = v35;
      *((_OWORD *)v3 + 63) = v10;
      v35 = 0u;
      v36 = 0u;
      *((_OWORD *)v3 + 64) = v37;
      v37 = 0u;
      *((_OWORD *)v3 + 65) = v38;
      *((_QWORD *)v3 + 132) = v39;
      v38 = 0u;
      v39 = 0;
      *(_OWORD *)(v3 + 1064) = v40;
      *((_QWORD *)v3 + 135) = v41;
      v40 = 0uLL;
      v41 = 0;
      v11 = v42;
      *((_QWORD *)v3 + 138) = v43;
      *((_OWORD *)v3 + 68) = v11;
      v42 = 0uLL;
      v43 = 0;
      v12 = v44;
      *((_QWORD *)v3 + 141) = v45;
      *(_OWORD *)(v3 + 1112) = v12;
      v44 = 0uLL;
      v45 = 0;
      v13 = v46;
      *((_QWORD *)v3 + 144) = v47;
      *((_OWORD *)v3 + 71) = v13;
      v46 = 0uLL;
      v47 = 0;
      v14 = v48;
      *((_DWORD *)v3 + 292) = v49;
      *((_QWORD *)v3 + 145) = v14;
      v15 = v51;
      *(_OWORD *)(v3 + 1176) = v50;
      *(_OWORD *)(v3 + 1192) = v15;
      *((_DWORD *)v3 + 302) = 1;
      *(_QWORD *)v3 = &off_24EC2B4D0;
    }
    sub_223223FC0((uint64_t)__p);
    return v3;
  }
  strcpy(__p, "Unknown session preset");
  __p[23] = 22;
  v18 = (char *)operator new(0x78uLL);
  v52 = v18;
  v53 = xmmword_2245C6470;
  strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
  if (!a2)
    goto LABEL_18;
  *(_QWORD *)&v56.__val_ = 22;
  v56.__cat_ = std::generic_category();
  sub_2245321DC(&v56, (uint64_t)__p, &v54);
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  v19 = v54;
  if (v54)
    CFRetain(v54);
  *a2 = v19;
  v20 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      if ((SHIBYTE(v53) & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_17;
    }
  }
  if (SHIBYTE(v53) < 0)
  {
LABEL_17:
    v18 = v52;
LABEL_18:
    operator delete(v18);
  }
LABEL_19:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_2232A7468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionConfigurationRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 1208);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconSessionConfigurationRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 1208);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

BOOL CV3DReconSessionConfigurationHasMappingAttribute(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef v10;
  unint64_t *p_shared_owners;
  char *v12;
  void *__p;
  __int128 v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    if (a2 == 1)
      return sub_22321D244(a1 + 8, 1);
    __p = operator new(0x20uLL);
    v14 = xmmword_2245B8D00;
    strcpy((char *)__p, "Unknown mapping attribute");
    v5 = (char *)operator new(0x78uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v7 = v16;
      if (!v16)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
LABEL_21:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
LABEL_25:
      v5 = v12;
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v14 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v16;
      if (!v16)
        goto LABEL_25;
      v8 = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_21;
    }
  }
  operator delete(v5);
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232A7784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionConfigurationAddMappingAttribute(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef v10;
  unint64_t *p_shared_owners;
  char *v12;
  void *__p;
  __int128 v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    if (a2 == 1)
      return sub_22321D218(a1 + 8, 1u);
    __p = operator new(0x20uLL);
    v14 = xmmword_2245B8D00;
    strcpy((char *)__p, "Unknown mapping attribute");
    v5 = (char *)operator new(0x78uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v7 = v16;
      if (!v16)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
LABEL_21:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
LABEL_25:
      v5 = v12;
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v14 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v16;
      if (!v16)
        goto LABEL_25;
      v8 = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_21;
    }
  }
  operator delete(v5);
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232A7A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionConfigurationAddPrivateMappingAttribute(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_22321D218(a1 + 8, a2);
  __p = operator new(0x20uLL);
  v11 = xmmword_2245B8E30;
  strcpy((char *)__p, "Session configuration is NULL");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232A7C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionConfigurationRemoveMappingAttribute(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_22321D254(a1 + 8, a2);
  __p = operator new(0x20uLL);
  v11 = xmmword_2245B8E30;
  strcpy((char *)__p, "Session configuration is NULL");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232A7E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationHasDeterministicBehavior(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 53))
      return *(_BYTE *)(a1 + 52) != 0;
    return 0;
  }
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Session configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if ((SHIBYTE(v10) & 0x80000000) == 0)
    return 0;
  operator delete(__p);
  return 0;
}

void sub_2232A7FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationEnableDeterministicBehavior(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 53) = a2;
    if (a2)
      *(_BYTE *)(a1 + 52) = 1;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_2232A81B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationEnableSynchronousScheduling(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 52) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_2232A8360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationHasLowQosScheduling(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 54) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Session configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232A8534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationEnableLowQosScheduling(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 54) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_2232A86E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconSessionConfigurationGetMinDepthConfidence(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(float *)(a1 + 96);
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Session configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return NAN;
}

void sub_2232A8898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationSetMinDepthConfidence(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2233005DC(a1, a2, a3);
  __p = operator new(0x20uLL);
  v11 = xmmword_2245B8E30;
  strcpy((char *)__p, "Session configuration is NULL");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232A8A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionConfigurationSetSlamAdapter(_QWORD *a1, _QWORD *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef v10;
  unint64_t *p_shared_owners;
  char *v12;
  void *__p;
  __int128 v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    if (a2)
      return sub_223300AD4(a1, a2);
    __p = operator new(0x20uLL);
    v14 = xmmword_2245B8D70;
    strcpy((char *)__p, "Input SLAM adapter is NULL");
    v5 = (char *)operator new(0x78uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v7 = v16;
      if (!v16)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
LABEL_21:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
LABEL_25:
      v5 = v12;
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v14 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v16;
      if (!v16)
        goto LABEL_25;
      v8 = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_21;
    }
  }
  operator delete(v5);
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232A8D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionConfigurationSetPersistencePath(uint64_t a1, char *__s, CFTypeRef *a3)
{
  size_t v6;
  size_t v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeRef v15;
  unint64_t *p_shared_owners;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  size_t v21;
  char *v22;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  if (a1)
  {
    if (__s)
    {
      v6 = strlen(__s);
      if (v6 >= 0x7FFFFFFFFFFFFFF8)
        sub_22316DBC0();
      v7 = v6;
      if (v6 >= 0x17)
      {
        v18 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v18 = v6 | 7;
        v19 = v18 + 1;
        v8 = operator new(v18 + 1);
        *(_QWORD *)&__p[8] = v7;
        *(_QWORD *)&__p[16] = v19 | 0x8000000000000000;
        *(_QWORD *)__p = v8;
      }
      else
      {
        __p[23] = v6;
        v8 = __p;
        if (!v6)
        {
          __p[0] = 0;
          v9 = a1 + 56;
          if (*(_BYTE *)(a1 + 80))
            goto LABEL_7;
          goto LABEL_38;
        }
      }
      memcpy(v8, __s, v7);
      v8[v7] = 0;
      v9 = a1 + 56;
      if (*(_BYTE *)(a1 + 80))
      {
LABEL_7:
        if ((_BYTE *)v9 != __p)
        {
          if (*(char *)(a1 + 79) < 0)
          {
            if (__p[23] >= 0)
              v20 = __p;
            else
              v20 = *(_BYTE **)__p;
            if (__p[23] >= 0)
              v21 = __p[23];
            else
              v21 = *(_QWORD *)&__p[8];
            sub_22319C4B8((void **)v9, v20, v21);
          }
          else if ((__p[23] & 0x80) != 0)
          {
            sub_22319C3F4((_QWORD *)v9, *(void **)__p, *(size_t *)&__p[8]);
          }
          else
          {
            *(_OWORD *)v9 = *(_OWORD *)__p;
            *(_QWORD *)(v9 + 16) = *(_QWORD *)&__p[16];
          }
        }
        goto LABEL_49;
      }
LABEL_38:
      if ((__p[23] & 0x80000000) != 0)
      {
        sub_223197FA4((_BYTE *)v9, *(void **)__p, *(unint64_t *)&__p[8]);
      }
      else
      {
        *(_OWORD *)v9 = *(_OWORD *)__p;
        *(_QWORD *)(v9 + 16) = *(_QWORD *)&__p[16];
      }
      *(_BYTE *)(a1 + 80) = 1;
LABEL_49:
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      return 1;
    }
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C6420;
    strcpy(*(char **)__p, "Input Persistence path is NULL");
    v10 = (char *)operator new(0x78uLL);
    v22 = v10;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v26.__val_ = 22;
      v26.__cat_ = std::generic_category();
      sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v15 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v15;
      v12 = v25;
      if (!v25)
        goto LABEL_30;
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
LABEL_28:
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_30:
      v10 = v22;
    }
  }
  else
  {
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B8E30;
    strcpy(*(char **)__p, "Session configuration is NULL");
    v10 = (char *)operator new(0x78uLL);
    v22 = v10;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v26.__val_ = 22;
      v26.__cat_ = std::generic_category();
      sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v25;
      if (!v25)
        goto LABEL_30;
      v13 = (unint64_t *)&v25->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      goto LABEL_28;
    }
  }
  operator delete(v10);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_2232A9138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL CV3DReconSessionConfigurationHasPersistencePath(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 80) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Session configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232A931C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionConfigurationEnablePersistence(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  __int128 v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 80))
    {
      *(_BYTE *)(a1 + 88) = a2;
      return 1;
    }
    __p = operator new(0x20uLL);
    v16 = xmmword_2245B9420;
    strcpy((char *)__p, "Invalid persistence path");
    v10 = (char *)operator new(0x78uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    __p = operator new(0x20uLL);
    v16 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v18;
      if (v18)
      {
        v8 = (unint64_t *)&v18->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p);
  return 0;
}

void sub_2232A963C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationHasPersistenceEnabled(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 88) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Session configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232A981C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationEnableVisibilityMap(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 24) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_2232A99C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationHasVisibilityMap(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 24) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Session configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232A9B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationSetVisibilityMapMaxDistance(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_223300C40(a1, a2, a3);
  __p = operator new(0x20uLL);
  v11 = xmmword_2245B8E30;
  strcpy((char *)__p, "Session configuration is NULL");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232A9D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconSessionConfigurationGetVisibilityMapMaxDistance(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(float *)(a1 + 28);
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Session configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return NAN;
}

void sub_2232A9F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationEnablePerFrameMonitoringResult(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 36) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_2232AA0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationHasPerFrameMonitoringResult(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 36) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Session configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232AA2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationEnableCpuRasterization(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 55) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_2232AA454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationHasCpuRasterization(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 55) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Session configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232AA628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionConfigurationSetFrameBundleSize(uint64_t a1, unsigned int a2, uint64_t a3, CFTypeRef *a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2233007C0(a1, a2, a3, a4);
  __p = operator new(0x20uLL);
  v12 = xmmword_2245B8E30;
  strcpy((char *)__p, "Session configuration is NULL");
  v6 = (char *)operator new(0x78uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
  if (a4)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232AA7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationEnablePersonMasking(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 16) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_2232AA9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationEnableDynamicObjectMasking(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 16) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_2232AAB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationHasDynamicObjectMaskingEnabled(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 16) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Session configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232AAD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *CV3DReconSessionConfigurationCopyMeshingConfiguration(uint64_t a1, CFTypeRef *a2)
{
  char *v3;
  char *v4;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (!a1)
  {
    __p = operator new(0x20uLL);
    v13 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v7 = (char *)operator new(0x78uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v8;
      v9 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if (SHIBYTE(v13) < 0)
      operator delete(__p);
    return 0;
  }
  if (!*(_BYTE *)(a1 + 568))
    return 0;
  v3 = (char *)operator new(0x120uLL, MEMORY[0x24BEDB6B8]);
  v4 = v3;
  if (v3)
  {
    memcpy(v3 + 8, (const void *)(a1 + 288), 0x118uLL);
    *((_DWORD *)v4 + 71) = 1;
    *(_QWORD *)v4 = &off_24EC292C0;
  }
  return v4;
}

void sub_2232AAF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *CV3DReconSessionConfigurationCopyMutableMeshingConfiguration(uint64_t a1, CFTypeRef *a2)
{
  char *v3;
  char *v4;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (!a1)
  {
    __p = operator new(0x20uLL);
    v13 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v7 = (char *)operator new(0x78uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v8;
      v9 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if (SHIBYTE(v13) < 0)
      operator delete(__p);
    return 0;
  }
  if (!*(_BYTE *)(a1 + 568))
    return 0;
  v3 = (char *)operator new(0x120uLL, MEMORY[0x24BEDB6B8]);
  v4 = v3;
  if (v3)
  {
    memcpy(v3 + 8, (const void *)(a1 + 288), 0x118uLL);
    *((_DWORD *)v4 + 71) = 1;
    *(_QWORD *)v4 = &off_24EC292C0;
  }
  return v4;
}

void sub_2232AB128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *CV3DReconSessionConfigurationCopySceneQuerySessionConfiguration(uint64_t a1, CFTypeRef *a2)
{
  char *result;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (!a1)
  {
    __p = operator new(0x20uLL);
    v11 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v11) < 0)
    {
      operator delete(__p);
      return 0;
    }
    return 0;
  }
  if (!*(_BYTE *)(a1 + 1204))
    return 0;
  result = (char *)operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 1176);
    *(_OWORD *)(result + 20) = *(_OWORD *)(a1 + 1188);
    *((_DWORD *)result + 9) = 1;
    *(_QWORD *)result = &off_24EC29F28;
  }
  return result;
}

void sub_2232AB340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionConfigurationSetMeshingConfiguration(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t result;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p;
  __int128 v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    if (a2)
    {
      memmove((void *)(a1 + 288), (const void *)(a2 + 8), 0x118uLL);
      result = 1;
      *(_BYTE *)(a1 + 568) = 1;
      return result;
    }
    __p = operator new(0x28uLL);
    v17 = xmmword_2245C65C0;
    strcpy((char *)__p, "Input meshing configuration is NULL");
    v11 = (char *)operator new(0x78uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v13 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    __p = operator new(0x20uLL);
    v17 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v6 = (char *)operator new(0x78uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v19;
      if (v19)
      {
        v9 = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p);
  return 0;
}

void sub_2232AB674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionConfigurationSetPlanesConfiguration(_BYTE *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t result;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  __int128 v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  std::error_condition v25;

  if (a1)
  {
    if (a2)
    {
      if (a1[888])
      {
        memmove(a1 + 896, (const void *)(a2 + 8), 0x50uLL);
        result = 1;
        a1[976] = 1;
        return result;
      }
      __p = operator new(0x38uLL);
      v22 = xmmword_2245C4520;
      strcpy((char *)__p, "Reconstruction session does not have keyframing enabled");
      v16 = (char *)operator new(0x78uLL);
      strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
      if (a3)
      {
        *(_QWORD *)&v25.__val_ = 22;
        v25.__cat_ = std::generic_category();
        sub_2245321DC(&v25, (uint64_t)&__p, (CFErrorRef *)&cf);
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v17 = cf;
        if (cf)
          CFRetain(cf);
        *a3 = v17;
        v18 = v24;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
      }
      operator delete(v16);
      if ((SHIBYTE(v22) & 0x80000000) == 0)
        return 0;
    }
    else
    {
      __p = operator new(0x28uLL);
      v22 = xmmword_2245B8D40;
      strcpy((char *)__p, "Input planes configuration is NULL");
      v11 = (char *)operator new(0x78uLL);
      strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
      if (a3)
      {
        *(_QWORD *)&v25.__val_ = 22;
        v25.__cat_ = std::generic_category();
        sub_2245321DC(&v25, (uint64_t)&__p, (CFErrorRef *)&cf);
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v12 = cf;
        if (cf)
          CFRetain(cf);
        *a3 = v12;
        v13 = v24;
        if (v24)
        {
          v14 = (unint64_t *)&v24->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      operator delete(v11);
      if ((SHIBYTE(v22) & 0x80000000) == 0)
        return 0;
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v22 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v6 = (char *)operator new(0x78uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v25.__val_ = 22;
      v25.__cat_ = std::generic_category();
      sub_2245321DC(&v25, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v24;
      if (v24)
      {
        v9 = (unint64_t *)&v24->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p);
  return 0;
}

void sub_2232ABAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationSetUserToVisionCoordinatesTransforms(uint64_t a1, CFTypeRef *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  __int128 v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    *(__n128 *)(a1 + 152) = a3;
    *(__n128 *)(a1 + 168) = a4;
    *(__n128 *)(a1 + 184) = a5;
    *(__n128 *)(a1 + 200) = a6;
    *(__n128 *)(a1 + 216) = a3;
    *(__n128 *)(a1 + 232) = a4;
    *(__n128 *)(a1 + 248) = a5;
    *(__n128 *)(a1 + 264) = a6;
  }
  else
  {
    __p = operator new(0x20uLL);
    v15 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v8 = (char *)operator new(0x78uLL);
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v9;
      v10 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(v8);
    if (SHIBYTE(v15) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_2232ABCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionConfigurationSetSceneQuerySessionConfiguration(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  __int128 v4;
  uint64_t v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  CFTypeRef v12;
  unint64_t *p_shared_owners;
  char *v14;
  void *__p;
  __int128 v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    if (a2)
    {
      v4 = *(_OWORD *)(a2 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 1200) = *(_DWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 1192) = v5;
      *(_OWORD *)(a1 + 1176) = v4;
      *(_BYTE *)(a1 + 1204) = 1;
      return 1;
    }
    __p = operator new(0x30uLL);
    v16 = xmmword_2245C4540;
    strcpy((char *)__p, "Input scene query session configuration is NULL");
    v7 = (char *)operator new(0x78uLL);
    v14 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v9 = v18;
      if (!v18)
        goto LABEL_23;
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
LABEL_21:
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
LABEL_23:
      v7 = v14;
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v16 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v7 = (char *)operator new(0x78uLL);
    v14 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v8;
      v9 = v18;
      if (!v18)
        goto LABEL_23;
      v10 = (unint64_t *)&v18->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      goto LABEL_21;
    }
  }
  operator delete(v7);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232ABFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionConfigurationSetKeyframingConfiguration(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t result;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p;
  __int128 v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    if (a2)
    {
      memmove((void *)(a1 + 576), (const void *)(a2 + 8), 0x138uLL);
      result = 1;
      *(_BYTE *)(a1 + 888) = 1;
      return result;
    }
    __p = operator new(0x28uLL);
    v17 = xmmword_2245B8E00;
    strcpy((char *)__p, "Input keyframing configuration is NULL");
    v11 = (char *)operator new(0x78uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v13 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    __p = operator new(0x20uLL);
    v17 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v6 = (char *)operator new(0x78uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v19;
      if (v19)
      {
        v9 = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p);
  return 0;
}

void sub_2232AC2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *CV3DReconSessionConfigurationCopyMonitoringConfiguration(uint64_t a1, CFTypeRef *a2)
{
  char *result;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    result = (char *)operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
    if (result)
    {
      *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 36);
      *((_DWORD *)result + 6) = 1;
      *(_QWORD *)result = &off_24EC29330;
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v11 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v11) < 0)
      operator delete(__p);
    return 0;
  }
  return result;
}

void sub_2232AC500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *CV3DReconSessionConfigurationCopyMutableMonitoringConfiguration(uint64_t a1, CFTypeRef *a2)
{
  char *result;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    result = (char *)operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
    if (result)
    {
      *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 36);
      *((_DWORD *)result + 6) = 1;
      *(_QWORD *)result = &off_24EC29330;
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v11 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v11) < 0)
      operator delete(__p);
    return 0;
  }
  return result;
}

void sub_2232AC6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionConfigurationSetMonitoringConfiguration(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p;
  __int128 v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    if (a2)
    {
      v4 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 42) = *(_QWORD *)(a2 + 14);
      *(_QWORD *)(a1 + 36) = v4;
      return 1;
    }
    __p = operator new(0x28uLL);
    v17 = xmmword_2245B8E00;
    strcpy((char *)__p, "Input monitoring configuration is NULL");
    v11 = (char *)operator new(0x78uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v13 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    __p = operator new(0x20uLL);
    v17 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v6 = (char *)operator new(0x78uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v19;
      if (v19)
      {
        v9 = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p);
  return 0;
}

void sub_2232ACA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationHasConsumeVIOMetadata(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 280) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Session configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232ACC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionConfigurationEnableConsumeVIOMetadata(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 280) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_2232ACDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *CV3DReconSessionConfigurationCreateWithPrivatePreset(unsigned int a1, CFTypeRef *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int16 v26;
  __int128 v27;
  __int128 v28;
  _QWORD v29[19];
  char v30;
  _BYTE v31[697];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;

  if (a1 > 0x14 || ((1 << a1) & 0x1BB0C8) == 0)
    return CV3DReconSessionConfigurationCreateWithPreset(a1, a2);
  v49 = v2;
  v50 = v3;
  sub_22321C7A4(a1, (uint64_t)&v19);
  v4 = (char *)operator new(0x4C0uLL, MEMORY[0x24BEDB6B8]);
  v5 = v4;
  if (v4)
  {
    v6 = v19;
    v4[56] = 0;
    *((_QWORD *)v4 + 1) = v6;
    *((_OWORD *)v4 + 1) = v20;
    *((_OWORD *)v4 + 2) = v21;
    *((_QWORD *)v4 + 6) = v22;
    v4[80] = 0;
    if (v25)
    {
      *(_OWORD *)(v4 + 56) = v23;
      *((_QWORD *)v4 + 9) = v24;
      v24 = 0;
      v23 = 0uLL;
      v4[80] = 1;
    }
    v7 = v28;
    *((_OWORD *)v4 + 6) = v27;
    *((_OWORD *)v4 + 7) = v7;
    *((_OWORD *)v4 + 8) = *(_OWORD *)v29;
    v8 = *(_OWORD *)&v29[5];
    *(_OWORD *)(v4 + 152) = *(_OWORD *)&v29[3];
    *(_OWORD *)(v4 + 168) = v8;
    v9 = *(_OWORD *)&v29[9];
    *(_OWORD *)(v4 + 184) = *(_OWORD *)&v29[7];
    *(_OWORD *)(v4 + 200) = v9;
    v10 = *(_OWORD *)&v29[13];
    *(_OWORD *)(v4 + 216) = *(_OWORD *)&v29[11];
    *(_OWORD *)(v4 + 232) = v10;
    v11 = *(_OWORD *)&v29[15];
    *(_OWORD *)(v4 + 264) = *(_OWORD *)&v29[17];
    *((_WORD *)v4 + 44) = v26;
    *(_QWORD *)(v4 + 142) = *(_QWORD *)((char *)&v29[1] + 6);
    v4[280] = v30;
    *(_OWORD *)(v4 + 248) = v11;
    memcpy(v4 + 288, v31, 0x2B9uLL);
    v12 = v33;
    *((_OWORD *)v5 + 62) = v32;
    *((_OWORD *)v5 + 63) = v12;
    v32 = 0u;
    v33 = 0u;
    *((_OWORD *)v5 + 64) = v34;
    v34 = 0u;
    *((_OWORD *)v5 + 65) = v35;
    *((_QWORD *)v5 + 132) = v36;
    v35 = 0u;
    v36 = 0;
    *(_OWORD *)(v5 + 1064) = v37;
    *((_QWORD *)v5 + 135) = v38;
    v37 = 0uLL;
    v38 = 0;
    v13 = v39;
    *((_QWORD *)v5 + 138) = v40;
    *((_OWORD *)v5 + 68) = v13;
    v39 = 0uLL;
    v40 = 0;
    v14 = v41;
    *((_QWORD *)v5 + 141) = v42;
    *(_OWORD *)(v5 + 1112) = v14;
    v41 = 0uLL;
    v42 = 0;
    v15 = v43;
    *((_QWORD *)v5 + 144) = v44;
    *((_OWORD *)v5 + 71) = v15;
    v43 = 0uLL;
    v44 = 0;
    v16 = v45;
    *((_DWORD *)v5 + 292) = v46;
    *((_QWORD *)v5 + 145) = v16;
    v17 = v48;
    *(_OWORD *)(v5 + 1176) = v47;
    *(_OWORD *)(v5 + 1192) = v17;
    *((_DWORD *)v5 + 302) = 1;
    *(_QWORD *)v5 = &off_24EC2B4D0;
  }
  sub_223223FC0((uint64_t)&v19);
  return v5;
}

uint64_t CV3DReconSessionConfigurationUpdateFromDictionary(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  char *v17;
  CFTypeRef v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  char *v24;
  __int128 v25;
  void *__p;
  __int128 v27;
  CFTypeRef cf;
  std::__shared_weak_count *v29;
  std::error_condition v30;

  if (!a1)
  {
    __p = operator new(0x20uLL);
    v27 = xmmword_2245B8E30;
    strcpy((char *)__p, "Session configuration is NULL");
    v12 = (char *)operator new(0x78uLL);
    v24 = v12;
    v25 = xmmword_2245C6470;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v30.__val_ = 22;
      v30.__cat_ = std::generic_category();
      sub_2245321DC(&v30, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v13 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v13;
      v14 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if ((SHIBYTE(v25) & 0x80000000) == 0)
      {
        if (SHIBYTE(v27) < 0)
          goto LABEL_47;
        return 0;
      }
      v12 = v24;
    }
    operator delete(v12);
    if (SHIBYTE(v27) < 0)
    {
LABEL_47:
      operator delete(__p);
      return 0;
    }
    return 0;
  }
  if (!a2)
  {
    __p = operator new(0x20uLL);
    v27 = xmmword_2245B9420;
    strcpy((char *)__p, "Input dictionary is NULL");
    v17 = (char *)operator new(0x78uLL);
    v24 = v17;
    v25 = xmmword_2245C6470;
    strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v30.__val_ = 22;
      v30.__cat_ = std::generic_category();
      sub_2245321DC(&v30, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v18 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v18;
      v19 = v29;
      if (v29)
      {
        v20 = (unint64_t *)&v29->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if ((SHIBYTE(v25) & 0x80000000) == 0)
      {
LABEL_42:
        if ((SHIBYTE(v27) & 0x80000000) == 0)
          return 0;
        goto LABEL_47;
      }
      v17 = v24;
    }
    operator delete(v17);
    goto LABEL_42;
  }
  sub_2232AD45C(a2, (uint64_t)&__p);
  if (!BYTE8(v27)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSessionConfiguration.cpp", 587, (uint64_t)"opt_internal_dict.has_value()", 29, (uint64_t)"Expected to convert a CFDictionaryRef", 37, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2231AEC20(&v22, (uint64_t)&__p);
  sub_22321D280(a1 + 8, (uint64_t)&v22);
  v5 = v23;
  if (v23)
  {
    v6 = (unint64_t *)&v23->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (!BYTE8(v27))
    return 1;
  v8 = (std::__shared_weak_count *)v27;
  if (!(_QWORD)v27)
    return 1;
  v9 = (unint64_t *)(v27 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return 1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return 1;
}

void sub_2232AD3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2232AD45C(const void *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID TypeID;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  const void *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  const void *v25;
  std::__shared_weak_count *v26;

  if (a1 && (TypeID = CFDictionaryGetTypeID(), CFGetTypeID(a1) == TypeID))
  {
    sub_2232AD680(&v25, a1);
    v5 = v25;
    v6 = v26;
    v24 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    sub_2232AD680(&v25, v5);
    v10 = v25;
    v9 = v26;
    if (v26)
    {
      v11 = (unint64_t *)&v26->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v13 = v26;
      if (v26)
      {
        v14 = (unint64_t *)&v26->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      do
        v16 = __ldxr(v11);
      while (__stxr(v16 + 1, v11));
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v9;
      do
        v17 = __ldxr(v11);
      while (__stxr(v17 + 1, v11));
      do
        v18 = __ldaxr(v11);
      while (__stlxr(v18 - 1, v11));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      do
        v19 = __ldaxr(v11);
      while (__stlxr(v19 - 1, v11));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      *(_QWORD *)a2 = v25;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_BYTE *)(a2 + 16) = 1;
    if (v6)
    {
      v20 = (unint64_t *)&v6->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (v24)
    {
      v22 = (unint64_t *)&v24->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
}

void sub_2232AD664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223224234((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2232AD680(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC25900;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_2232AD6E0(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2232AD6F8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

double CV3DReconSlamAdapterCreate()
{
  _OWORD *v0;
  double result;

  v0 = operator new(0x40uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    result = 0.0;
    v0[2] = 0u;
    v0[3] = 0u;
    *v0 = 0u;
    v0[1] = 0u;
    *((_DWORD *)v0 + 14) = 1;
    *(_QWORD *)v0 = &off_24EC2B540;
  }
  return result;
}

uint64_t CV3DReconSlamAdapterRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 56);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconSlamAdapterRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 56);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DReconSlamAdapterSetAnchoringCallbacks(uint64_t a1, const void *a2, const void *a3, CFTypeRef *a4)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v17;
  CFErrorRef v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  CFErrorRef v22;
  unint64_t *v23;
  CFErrorRef v24;
  unint64_t *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  char *v30;
  __int128 v31;
  void *__p[4];
  CFErrorRef v33;
  std::__shared_weak_count *v34;
  std::error_condition v35;

  if (!a1)
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "SLAM adapter is NULL");
    v17 = (char *)operator new(0x70uLL);
    v30 = v17;
    v31 = xmmword_2245B8D30;
    strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSlamAdapter.cpp");
    if (!a4)
      goto LABEL_46;
    *(_QWORD *)&v35.__val_ = 22;
    v35.__cat_ = std::generic_category();
    sub_2245321DC(&v35, (uint64_t)__p, &v33);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v18 = v33;
    if (v33)
      CFRetain(v33);
    *a4 = v18;
    v19 = v34;
    if (!v34)
      goto LABEL_41;
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
LABEL_40:
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if ((SHIBYTE(v31) & 0x80000000) == 0)
      {
LABEL_42:
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
          return 0;
LABEL_47:
        operator delete(__p[0]);
        return 0;
      }
      goto LABEL_45;
    }
LABEL_41:
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      goto LABEL_42;
LABEL_45:
    v17 = v30;
LABEL_46:
    operator delete(v17);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
    goto LABEL_47;
  }
  if (!a2)
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8D70;
    strcpy((char *)__p[0], "AddAnchor callback is NULL");
    v17 = (char *)operator new(0x70uLL);
    v30 = v17;
    v31 = xmmword_2245B8D30;
    strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSlamAdapter.cpp");
    if (!a4)
      goto LABEL_46;
    *(_QWORD *)&v35.__val_ = 22;
    v35.__cat_ = std::generic_category();
    sub_2245321DC(&v35, (uint64_t)__p, &v33);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v22 = v33;
    if (v33)
      CFRetain(v33);
    *a4 = v22;
    v19 = v34;
    if (!v34)
      goto LABEL_41;
    v23 = (unint64_t *)&v34->__shared_owners_;
    do
      v21 = __ldaxr(v23);
    while (__stlxr(v21 - 1, v23));
    goto LABEL_40;
  }
  if (!a3)
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8E30;
    strcpy((char *)__p[0], "RemoveAnchor callback is NULL");
    v17 = (char *)operator new(0x70uLL);
    v30 = v17;
    v31 = xmmword_2245B8D30;
    strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSlamAdapter.cpp");
    if (!a4)
      goto LABEL_46;
    *(_QWORD *)&v35.__val_ = 22;
    v35.__cat_ = std::generic_category();
    sub_2245321DC(&v35, (uint64_t)__p, &v33);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v24 = v33;
    if (v33)
      CFRetain(v33);
    *a4 = v24;
    v19 = v34;
    if (!v34)
      goto LABEL_41;
    v25 = (unint64_t *)&v34->__shared_owners_;
    do
      v21 = __ldaxr(v25);
    while (__stlxr(v21 - 1, v25));
    goto LABEL_40;
  }
  v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26D70;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
  v28 = &v8[1].__vftable;
  v29 = v8;
  v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26DC0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a3);
  v26 = &v9[1].__vftable;
  v27 = v9;
  sub_223300FCC(a1, (uint64_t *)&v28, (uint64_t *)&v26);
  v10 = v27;
  if (v27)
  {
    v11 = (unint64_t *)&v27->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v29;
  if (!v29)
    return 1;
  v14 = (unint64_t *)&v29->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return 1;
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return 1;
}

void sub_2232ADC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  operator delete(v22);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSlamAdapterSetRequestAllAnchorCallback(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  char *v10;
  CFErrorRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  CFErrorRef v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20[2];
  char *v21;
  __int128 v22;
  void *__p[4];
  CFErrorRef v24;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  if (!a1)
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "SLAM adapter is NULL");
    v10 = (char *)operator new(0x70uLL);
    v21 = v10;
    v22 = xmmword_2245B8D30;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSlamAdapter.cpp");
    if (a3)
    {
      *(_QWORD *)&v26.__val_ = 22;
      v26.__cat_ = std::generic_category();
      sub_2245321DC(&v26, (uint64_t)__p, &v24);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = v24;
      if (v24)
        CFRetain(v24);
      *a3 = v11;
      v12 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if ((SHIBYTE(v22) & 0x80000000) == 0)
      {
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_39;
        return 0;
      }
      v10 = v21;
    }
    operator delete(v10);
    if (SHIBYTE(__p[2]) < 0)
    {
LABEL_39:
      operator delete(__p[0]);
      return 0;
    }
    return 0;
  }
  if (!a2)
  {
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8D40;
    strcpy((char *)__p[0], "RequestAllAnchors callback is NULL");
    v15 = (char *)operator new(0x70uLL);
    v21 = v15;
    v22 = xmmword_2245B8D30;
    strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSlamAdapter.cpp");
    if (a3)
    {
      *(_QWORD *)&v26.__val_ = 22;
      v26.__cat_ = std::generic_category();
      sub_2245321DC(&v26, (uint64_t)__p, &v24);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v16 = v24;
      if (v24)
        CFRetain(v24);
      *a3 = v16;
      v17 = v25;
      if (v25)
      {
        v18 = (unint64_t *)&v25->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if ((SHIBYTE(v22) & 0x80000000) == 0)
      {
LABEL_34:
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
          return 0;
        goto LABEL_39;
      }
      v15 = v21;
    }
    operator delete(v15);
    goto LABEL_34;
  }
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  v7 = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC28438;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
  v20[0] = (uint64_t)&v6[1];
  v20[1] = (uint64_t)v6;
  sub_22330122C(a1, v20);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return 1;
}

void sub_2232AE00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2232AE078(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC28438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2232AE088(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC28438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2232AE0B8(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

double CV3DReconSlamMetadataCreate()
{
  char *v0;
  double result;

  v0 = (char *)operator new(0xD0uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    result = 0.0;
    *(_OWORD *)v0 = 0u;
    *((_OWORD *)v0 + 1) = 0u;
    *((_OWORD *)v0 + 11) = 0u;
    *((_OWORD *)v0 + 12) = 0u;
    *((_OWORD *)v0 + 9) = 0u;
    *((_OWORD *)v0 + 10) = 0u;
    *((_OWORD *)v0 + 7) = 0u;
    *((_OWORD *)v0 + 8) = 0u;
    *((_OWORD *)v0 + 5) = 0u;
    *((_OWORD *)v0 + 6) = 0u;
    *((_OWORD *)v0 + 3) = 0u;
    *((_OWORD *)v0 + 4) = 0u;
    *((_OWORD *)v0 + 2) = 0u;
    v0[9] = 1;
    *(_QWORD *)(v0 + 12) = 0;
    *(_QWORD *)(v0 + 20) = 0;
    *(_OWORD *)(v0 + 185) = 0u;
    *((_DWORD *)v0 + 51) = 1;
    *(_QWORD *)v0 = &off_24EC2BA20;
  }
  return result;
}

uint64_t CV3DReconSlamMetadataRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 204);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconSlamMetadataRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 204);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

BOOL CV3DReconSlamMetadataSetIsInitialized(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  char __p[22];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    *(_BYTE *)(a1 + 8) = a2;
  }
  else
  {
    v13 = 21;
    strcpy(__p, "Slam metadata is NULL");
    v5 = (char *)operator new(0x70uLL);
    v11 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSlamMetadata.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v11;
    }
    operator delete(v5);
    if (v13 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_2232AE2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSlamMetadataSetTrackingIsNominal(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  char __p[22];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    *(_BYTE *)(a1 + 9) = a2;
  }
  else
  {
    v13 = 21;
    strcpy(__p, "Slam metadata is NULL");
    v5 = (char *)operator new(0x70uLL);
    v11 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSlamMetadata.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v11;
    }
    operator delete(v5);
    if (v13 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_2232AE478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSlamMetadataSet3dofStatus(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  char __p[22];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    *(_BYTE *)(a1 + 10) = a2;
  }
  else
  {
    v13 = 21;
    strcpy(__p, "Slam metadata is NULL");
    v5 = (char *)operator new(0x70uLL);
    v11 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSlamMetadata.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v11;
    }
    operator delete(v5);
    if (v13 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_2232AE60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSlamMetadataSetMapSize(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  char __p[22];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    *(_DWORD *)(a1 + 12) = a2;
  }
  else
  {
    v13 = 21;
    strcpy(__p, "Slam metadata is NULL");
    v5 = (char *)operator new(0x70uLL);
    v11 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSlamMetadata.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v11;
    }
    operator delete(v5);
    if (v13 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_2232AE7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSlamMetadataSetTimestamp(uint64_t a1, CFTypeRef *a2, double a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  char __p[22];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    *(_QWORD *)(a1 + 16) = (uint64_t)(a3 * 1000000000.0);
  }
  else
  {
    v13 = 21;
    strcpy(__p, "Slam metadata is NULL");
    v5 = (char *)operator new(0x70uLL);
    v11 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSlamMetadata.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v11;
    }
    operator delete(v5);
    if (v13 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_2232AE948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSlamMetadataSetReinitializeAttempts(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  char __p[22];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    *(_DWORD *)(a1 + 24) = a2;
  }
  else
  {
    v13 = 21;
    strcpy(__p, "Slam metadata is NULL");
    v5 = (char *)operator new(0x70uLL);
    v11 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSlamMetadata.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v11;
    }
    operator delete(v5);
    if (v13 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_2232AEADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSlamMetadataAddUpdatedAnchor(_QWORD *a1, uint64_t *a2, CFTypeRef *a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  char *v9;
  CFErrorRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char __p[22];
  char v15;
  __int128 v16[4];
  CFErrorRef v17;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  v16[0] = (__int128)a4;
  v16[1] = (__int128)a5;
  v16[2] = (__int128)a6;
  v16[3] = (__int128)a7;
  if (a1)
    return sub_22330736C(a1, a2, v16, a3);
  v15 = 21;
  strcpy(__p, "Slam metadata is NULL");
  v9 = (char *)operator new(0x70uLL);
  strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSlamMetadata.cpp");
  if (a3)
  {
    *(_QWORD *)&v19.__val_ = 22;
    v19.__cat_ = std::generic_category();
    sub_2245321DC(&v19, (uint64_t)__p, &v17);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v10 = v17;
    if (v17)
      CFRetain(v17);
    *a3 = v10;
    v11 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  operator delete(v9);
  if (v15 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_2232AECA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSlamMetadataAddAddedAnchor(_QWORD *a1, uint64_t *a2, CFTypeRef *a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  char *v9;
  CFErrorRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char __p[22];
  char v15;
  __int128 v16[4];
  CFErrorRef v17;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  v16[0] = (__int128)a4;
  v16[1] = (__int128)a5;
  v16[2] = (__int128)a6;
  v16[3] = (__int128)a7;
  if (a1)
    return sub_2233076F8(a1, a2, v16, a3);
  v15 = 21;
  strcpy(__p, "Slam metadata is NULL");
  v9 = (char *)operator new(0x70uLL);
  strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSlamMetadata.cpp");
  if (a3)
  {
    *(_QWORD *)&v19.__val_ = 22;
    v19.__cat_ = std::generic_category();
    sub_2245321DC(&v19, (uint64_t)__p, &v17);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v10 = v17;
    if (v17)
      CFRetain(v17);
    *a3 = v10;
    v11 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  operator delete(v9);
  if (v15 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_2232AEE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSlamMetadataAddRemovedAnchorUuid(_QWORD *a1, uint64_t *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[22];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_223307A84(a1, a2, a3);
  v12 = 21;
  strcpy(__p, "Slam metadata is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSlamMetadata.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_2232AF020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSlamMetadataAddExternalAnchorUuid(_QWORD *a1, uint64_t *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[22];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_223307D20(a1, a2, a3);
  v12 = 21;
  strcpy(__p, "Slam metadata is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSlamMetadata.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_2232AF1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSlamMetadataAddNearAnchorUuid(_QWORD *a1, uint64_t *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[22];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_223307FBC(a1, a2, a3);
  v12 = 21;
  strcpy(__p, "Slam metadata is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSlamMetadata.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_2232AF398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSlamMetadataSetSLAMMode(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[22];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_223308258(a1, a2, a3);
  v12 = 21;
  strcpy(__p, "Slam metadata is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSlamMetadata.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_2232AF554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSpatialSubdivisionResultRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 72);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconSpatialSubdivisionResultRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 72);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

BOOL CV3DReconSpatialSubdivisionResultGetFloorCount(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_QWORD *)(a1 + 48) != *(_QWORD *)(a1 + 56);
  __p = operator new(0x28uLL);
  v10 = xmmword_2245C77E0;
  strcpy((char *)__p, "SpatialSubdivisionResult is NULL");
  v4 = (char *)operator new(0x80uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSpatialSubdivisionResult.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232AF768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSpatialSubdivisionResultFloorHeightEstimated(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2233084D0(a1, a2, a3);
  __p = operator new(0x28uLL);
  v11 = xmmword_2245C77E0;
  strcpy((char *)__p, "SpatialSubdivisionResult is NULL");
  v5 = (char *)operator new(0x80uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSpatialSubdivisionResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232AF934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconSpatialSubdivisionResultGetFloorHeight(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_223308718(a1, a2, a3);
  __p = operator new(0x28uLL);
  v11 = xmmword_2245C77E0;
  strcpy((char *)__p, "SpatialSubdivisionResult is NULL");
  v5 = (char *)operator new(0x80uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSpatialSubdivisionResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0.0;
}

void sub_2232AFB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSpatialSubdivisionResultCeilingHeightEstimated(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_22330892C(a1, a2, a3);
  __p = operator new(0x28uLL);
  v11 = xmmword_2245C77E0;
  strcpy((char *)__p, "SpatialSubdivisionResult is NULL");
  v5 = (char *)operator new(0x80uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSpatialSubdivisionResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232AFCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconSpatialSubdivisionResultGetCeilingHeight(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_223308B74(a1, a2, a3);
  __p = operator new(0x28uLL);
  v11 = xmmword_2245C77E0;
  strcpy((char *)__p, "SpatialSubdivisionResult is NULL");
  v5 = (char *)operator new(0x80uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSpatialSubdivisionResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0.0;
}

void sub_2232AFE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSpatialSubdivisionResultGetBoundaryCount(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return -858993459 * ((*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 5);
  __p = operator new(0x28uLL);
  v10 = xmmword_2245C77E0;
  strcpy((char *)__p, "SpatialSubdivisionResult is NULL");
  v4 = (char *)operator new(0x80uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSpatialSubdivisionResult.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232B0070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSpatialSubdivisionResultGetBoundaryFloorIndex(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_223308D88(a1, a2, a3);
  __p = operator new(0x28uLL);
  v11 = xmmword_2245C77E0;
  strcpy((char *)__p, "SpatialSubdivisionResult is NULL");
  v5 = (char *)operator new(0x80uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSpatialSubdivisionResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232B023C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconSpatialSubdivisionResultGetBoundaryCompleteness(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_223308F80(a1, a2, a3);
  __p = operator new(0x28uLL);
  v11 = xmmword_2245C77E0;
  strcpy((char *)__p, "SpatialSubdivisionResult is NULL");
  v5 = (char *)operator new(0x80uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSpatialSubdivisionResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0.0;
}

void sub_2232B0408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconSpatialSubdivisionResultGetBoundaryArea(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_223309190(a1, a2, a3);
  __p = operator new(0x28uLL);
  v11 = xmmword_2245C77E0;
  strcpy((char *)__p, "SpatialSubdivisionResult is NULL");
  v5 = (char *)operator new(0x80uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSpatialSubdivisionResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0.0;
}

void sub_2232B05D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSpatialSubdivisionResultGetBoundaryExteriorPolygonPointCount(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_223309394(a1, a2, a3);
  __p = operator new(0x28uLL);
  v11 = xmmword_2245C77E0;
  strcpy((char *)__p, "SpatialSubdivisionResult is NULL");
  v5 = (char *)operator new(0x80uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSpatialSubdivisionResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232B07A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double CV3DReconSpatialSubdivisionResultGetBoundaryExteriorPolygonPoint(uint64_t a1, unsigned int a2, unsigned int a3, CFTypeRef *a4, double a5, double a6, float32x4_t a7)
{
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  __int128 v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
    return sub_223309594(a1, a2, a3, a4, a5, a6, a7);
  __p = operator new(0x28uLL);
  v15 = xmmword_2245C77E0;
  strcpy((char *)__p, "SpatialSubdivisionResult is NULL");
  v9 = (char *)operator new(0x80uLL);
  strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSpatialSubdivisionResult.cpp");
  if (a4)
  {
    *(_QWORD *)&v18.__val_ = 22;
    v18.__cat_ = std::generic_category();
    sub_2245321DC(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v10 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v10;
    v11 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  operator delete(v9);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  return 0.0;
}

void sub_2232B096C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSpatialSubdivisionResultGetBoundaryExteriorPolygonSegmentType(uint64_t a1, unsigned int a2, unsigned int a3, CFTypeRef *a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_223309908(a1, a2, a3, a4);
  __p = operator new(0x28uLL);
  v12 = xmmword_2245C77E0;
  strcpy((char *)__p, "SpatialSubdivisionResult is NULL");
  v6 = (char *)operator new(0x80uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSpatialSubdivisionResult.cpp");
  if (a4)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232B0B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSpatialSubdivisionResultGetBoundaryInteriorPolygonCount(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_223309D8C(a1, a2, a3);
  __p = operator new(0x28uLL);
  v11 = xmmword_2245C77E0;
  strcpy((char *)__p, "SpatialSubdivisionResult is NULL");
  v5 = (char *)operator new(0x80uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSpatialSubdivisionResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232B0D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSpatialSubdivisionResultGetBoundaryInteriorPolygonPointCount(uint64_t a1, unsigned int a2, unsigned int a3, CFTypeRef *a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_223309F98(a1, a2, a3, a4);
  __p = operator new(0x28uLL);
  v12 = xmmword_2245C77E0;
  strcpy((char *)__p, "SpatialSubdivisionResult is NULL");
  v6 = (char *)operator new(0x80uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSpatialSubdivisionResult.cpp");
  if (a4)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232B0ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double CV3DReconSpatialSubdivisionResultGetBoundaryInteriorPolygonPoint(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, CFTypeRef *a5, double a6, double a7, float32x4_t a8)
{
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  __int128 v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
    return sub_22330A2EC(a1, a2, a3, a4, a5, a6, a7, a8);
  __p = operator new(0x28uLL);
  v16 = xmmword_2245C77E0;
  strcpy((char *)__p, "SpatialSubdivisionResult is NULL");
  v10 = (char *)operator new(0x80uLL);
  strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSpatialSubdivisionResult.cpp");
  if (a5)
  {
    *(_QWORD *)&v19.__val_ = 22;
    v19.__cat_ = std::generic_category();
    sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a5)
      CFRelease(*a5);
    *a5 = 0;
    v11 = cf;
    if (cf)
      CFRetain(cf);
    *a5 = v11;
    v12 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  operator delete(v10);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  return 0.0;
}

void sub_2232B109C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSpatialSubdivisionResultGetBoundaryInteriorPolygonSegmentType(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, CFTypeRef *a5)
{
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
    return sub_22330A7CC(a1, a2, a3, a4, a5);
  __p = operator new(0x28uLL);
  v13 = xmmword_2245C77E0;
  strcpy((char *)__p, "SpatialSubdivisionResult is NULL");
  v7 = (char *)operator new(0x80uLL);
  strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSpatialSubdivisionResult.cpp");
  if (a5)
  {
    *(_QWORD *)&v16.__val_ = 22;
    v16.__cat_ = std::generic_category();
    sub_2245321DC(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a5)
      CFRelease(*a5);
    *a5 = 0;
    v8 = cf;
    if (cf)
      CFRetain(cf);
    *a5 = v8;
    v9 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  operator delete(v7);
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232B1268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void CV3DReconSpatialSubdivisionResultWriteGeoJSONToFile(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  std::ios_base *v10;
  void *v11;
  const void *v12;
  std::__shared_weak_count *cat;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  void *__p[4];
  CFTypeRef v24;
  std::__shared_weak_count *v25;
  std::error_condition cf;
  void *v27;
  _OWORD v28[7];
  uint64_t v29;
  _QWORD v30[20];

  v30[19] = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v5 = MEMORY[0x24BEDB840];
    v6 = MEMORY[0x24BEDB840] + 64;
    v7 = MEMORY[0x24BEDB7E8];
    v8 = *(void **)(MEMORY[0x24BEDB7E8] + 8);
    v9 = *(void **)(MEMORY[0x24BEDB7E8] + 16);
    v30[0] = MEMORY[0x24BEDB840] + 64;
    v27 = v8;
    *(void **)((char *)&v27 + *((_QWORD *)v8 - 3)) = v9;
    v10 = (std::ios_base *)((char *)&v27 + *((_QWORD *)v27 - 3));
    std::ios_base::init(v10, v28);
    v10[1].__vftable = 0;
    v10[1].__fmtflags_ = -1;
    v27 = (void *)(v5 + 24);
    v30[0] = v6;
    MEMORY[0x2276844F0](v28);
    std::ofstream::open();
    if (v29)
    {
      sub_22330AE44(a1, &v27);
      std::ostream::flush();
      if (!std::filebuf::close())
        std::ios_base::clear((std::ios_base *)((char *)&v27 + *((_QWORD *)v27 - 3)), *(_DWORD *)((char *)&v28[1] + *((_QWORD *)v27 - 3) + 8) | 4);
LABEL_33:
      v27 = *(void **)v7;
      *(void **)((char *)&v27 + *((_QWORD *)v27 - 3)) = *(void **)(v7 + 24);
      MEMORY[0x2276844FC](v28);
      std::ostream::~ostream();
      MEMORY[0x227684BE0](v30);
      return;
    }
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "Cannot open file");
    v16 = (char *)operator new(0x80uLL);
    v21 = (uint64_t)v16;
    v22 = xmmword_2245C65A0;
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSpatialSubdivisionResult.cpp");
    if (a3)
    {
      *(_QWORD *)&cf.__val_ = 22;
      cf.__cat_ = std::generic_category();
      sub_2245321DC(&cf, (uint64_t)__p, (CFErrorRef *)&v24);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v17 = v24;
      if (v24)
        CFRetain(v24);
      *a3 = v17;
      v18 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if ((SHIBYTE(v22) & 0x80000000) == 0)
        goto LABEL_31;
      v16 = (char *)v21;
    }
    operator delete(v16);
LABEL_31:
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    goto LABEL_33;
  }
  v27 = operator new(0x28uLL);
  v28[0] = xmmword_2245C77E0;
  strcpy((char *)v27, "SpatialSubdivisionResult is NULL");
  v11 = operator new(0x80uLL);
  __p[0] = v11;
  *(_OWORD *)&__p[1] = xmmword_2245C65A0;
  strcpy((char *)v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSpatialSubdivisionResult.cpp");
  if (a3)
  {
    v21 = 22;
    *(_QWORD *)&v22 = std::generic_category();
    sub_2245321DC((const std::error_condition *)&v21, (uint64_t)&v27, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v12 = *(const void **)&cf.__val_;
    if (*(_QWORD *)&cf.__val_)
      CFRetain(*(CFTypeRef *)&cf.__val_);
    *a3 = v12;
    cat = (std::__shared_weak_count *)cf.__cat_;
    if (cf.__cat_)
    {
      v14 = (unint64_t *)&cf.__cat_[1];
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
      }
    }
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v28[0]) & 0x80000000) == 0)
        return;
LABEL_36:
      operator delete(v27);
      return;
    }
    v11 = __p[0];
  }
  operator delete(v11);
  if (SHIBYTE(v28[0]) < 0)
    goto LABEL_36;
}

void sub_2232B168C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  operator delete(v29);
  if (a18 < 0)
  {
    operator delete(__p);
    sub_22318127C(&a24);
    _Unwind_Resume(a1);
  }
  sub_22318127C(&a24);
  _Unwind_Resume(a1);
}

float32x2_t CV3DReconSemanticLabelGetColor(unsigned int a1)
{
  char *v1;
  uint32x2_t v2;

  v1 = &byte_2245C3FE4[3 * a1];
  if (a1 >= 0x2A)
    v1 = &byte_2245C9FE2;
  v2.i32[0] = *v1;
  v2.i32[1] = v1[1];
  return vdiv_f32(vcvt_f32_u32(v2), (float32x2_t)vdup_n_s32(0x437F0000u));
}

const char *CV3DReconSemanticLabelGetClassName(unsigned int a1)
{
  if (a1 > 0x29)
    return "invalid";
  else
    return (&off_24EC28478)[2 * a1];
}

float32x2_t CV3DReconMaterialLabelGetColor(unsigned int a1)
{
  unsigned __int8 *v1;
  uint32x2_t v2;

  v1 = (unsigned __int8 *)&unk_2245C4318 + 3 * a1;
  if (a1 >= 0x1A)
    v1 = (unsigned __int8 *)&unk_2245C4315;
  v2.i32[0] = *v1;
  v2.i32[1] = v1[1];
  return vdiv_f32(vcvt_f32_u32(v2), (float32x2_t)vdup_n_s32(0x437F0000u));
}

const char *CV3DReconMaterialLabelGetClassName(unsigned int a1)
{
  if (a1 > 0x19)
    return "invalid";
  else
    return (&off_24EC28718)[2 * a1];
}

double CV3DReconGetVersion@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0x1700000007;
  *(_QWORD *)a1 = 0x1700000007;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = "";
  return result;
}

uint64_t *CV3DReconGetBundleIdentifier()
{
  unsigned __int8 v0;
  __int128 v2;
  uint64_t v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CAAF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAAF8))
  {
    sub_224568628((uint64_t)&v2);
    *(_OWORD *)&qword_2540CAB00 = v2;
    unk_2540CAB10 = v3;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CAB00, &dword_22314D000);
    __cxa_guard_release(&qword_2540CAAF8);
  }
  if (byte_2540CAB17 >= 0)
    return &qword_2540CAB00;
  else
    return (uint64_t *)qword_2540CAB00;
}

void sub_2232B1918(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CAAF8);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconVisibilityMapRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 120);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconVisibilityMapRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 120);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DReconVisibilityMapCopyVisibleMeshChunkUUIDs(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  char cf[23];
  char v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    sub_223279DE0((CFUUIDBytes **)(a1 + 8), (CFMutableArrayRef *)cf);
    v2 = *(_QWORD *)cf;
    if (*(_QWORD *)cf)
      CFRetain(*(CFTypeRef *)cf);
    v3 = *(std::__shared_weak_count **)&cf[8];
    if (!*(_QWORD *)&cf[8])
      return v2;
    v4 = (unint64_t *)(*(_QWORD *)&cf[8] + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      return v2;
    }
    else
    {
      return v2;
    }
  }
  else
  {
    strcpy(cf, "Visibility map is NULL");
    v15 = 22;
    v8 = (char *)operator new(0x78uLL);
    v13 = v8;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconVisibilityMap.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)cf, (CFErrorRef *)&v16);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v9 = v16;
      if (v16)
        CFRetain(v16);
      *a2 = v9;
      v10 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v8 = v13;
    }
    operator delete(v8);
    if (v15 < 0)
      operator delete(*(void **)cf);
    return 0;
  }
}

void sub_2232B1B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

double CV3DReconVisibilityMapGetVisibleVolumeBoundingBoxesMin(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char __p[23];
  char v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 40) - v4) >> 3) > a2)
      return *(double *)(v4 + 40 * a2);
    v17 = 19;
    strcpy(__p, "Index out of bounds");
    v11 = (char *)operator new(0x78uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconVisibilityMap.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v13 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if ((v17 & 0x80000000) == 0)
      return 0.0;
  }
  else
  {
    strcpy(__p, "Visibility map is NULL");
    v17 = 22;
    v6 = (char *)operator new(0x78uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconVisibilityMap.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v19;
      if (v19)
      {
        v9 = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((v17 & 0x80000000) == 0)
      return 0.0;
  }
  operator delete(*(void **)__p);
  return 0.0;
}

void sub_2232B1E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double CV3DReconVisibilityMapGetVisibleVolumeBoundingBoxesMax(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char __p[23];
  char v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 40) - v4) >> 3) > a2)
      return *(double *)(v4 + 40 * a2 + 12);
    v17 = 19;
    strcpy(__p, "Index out of bounds");
    v11 = (char *)operator new(0x78uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconVisibilityMap.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v13 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if ((v17 & 0x80000000) == 0)
      return 0.0;
  }
  else
  {
    strcpy(__p, "Visibility map is NULL");
    v17 = 22;
    v6 = (char *)operator new(0x78uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconVisibilityMap.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v19;
      if (v19)
      {
        v9 = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((v17 & 0x80000000) == 0)
      return 0.0;
  }
  operator delete(*(void **)__p);
  return 0.0;
}

void sub_2232B218C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconVisibilityMapCopyVisibleVolumeBoundingBoxUUID(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v13;
  CFTypeRef v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFTypeRef v18;
  unint64_t *v19;
  char *v20;
  char __p[23];
  char v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  std::error_condition v25;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 40) - v4) >> 3) > a2)
    {
      v5 = v4 + 40 * a2;
      Default = CFAllocatorGetDefault();
      v7 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *(CFUUIDBytes *)(v5 + 24));
      sub_224533328((std::__shared_weak_count_vtbl **)__p, v7, 0);
      v8 = *(_QWORD *)__p;
      v9 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)__p)
        CFRetain(*(CFTypeRef *)__p);
      if (!v9)
        return v8;
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (v11)
        return v8;
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      return v8;
    }
    v22 = 19;
    strcpy(__p, "Index out of bounds");
    v13 = (char *)operator new(0x78uLL);
    v20 = v13;
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconVisibilityMap.cpp");
    if (a3)
    {
      *(_QWORD *)&v25.__val_ = 22;
      v25.__cat_ = std::generic_category();
      sub_2245321DC(&v25, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v18 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v18;
      v15 = v24;
      if (!v24)
        goto LABEL_29;
      v19 = (unint64_t *)&v24->__shared_owners_;
      do
        v17 = __ldaxr(v19);
      while (__stlxr(v17 - 1, v19));
LABEL_27:
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
LABEL_29:
      v13 = v20;
    }
  }
  else
  {
    strcpy(__p, "Visibility map is NULL");
    v22 = 22;
    v13 = (char *)operator new(0x78uLL);
    v20 = v13;
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconVisibilityMap.cpp");
    if (a3)
    {
      *(_QWORD *)&v25.__val_ = 22;
      v25.__cat_ = std::generic_category();
      sub_2245321DC(&v25, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v14 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v14;
      v15 = v24;
      if (!v24)
        goto LABEL_29;
      v16 = (unint64_t *)&v24->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      goto LABEL_27;
    }
  }
  operator delete(v13);
  if (v22 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_2232B24C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unint64_t CV3DReconVisibilityMapGetVisibleVolumeBoundingBoxesCount(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[23];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3);
  strcpy(__p, "Visibility map is NULL");
  v11 = 22;
  v4 = (char *)operator new(0x78uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconVisibilityMap.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_2232B26A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double CV3DReconVisibilityMapGetVisibleVolumeBoundingBoxesTransform(uint64_t a1, CFTypeRef *a2)
{
  __int128 v2;
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v10;
  char __p[23];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    v2 = *(_OWORD *)(a1 + 56);
  }
  else
  {
    strcpy(__p, "Visibility map is NULL");
    v12 = 22;
    v4 = (char *)operator new(0x78uLL);
    v10 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconVisibilityMap.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v4 = v10;
    }
    operator delete(v4);
    if (v12 < 0)
      operator delete(*(void **)__p);
    *(_QWORD *)&v2 = 0x400000003F800000;
  }
  return *(double *)&v2;
}

void sub_2232B2854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *CV3DReconRenderingRequestCreate(unsigned int a1, unsigned int a2, uint64_t a3, unsigned int a4, CFTypeRef *a5, double a6, double a7, double a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12)
{
  char v13;
  char v16;
  __int128 v17;
  int v18;
  char *result;
  char *v20;
  CFTypeRef v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  CFTypeRef v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::error_condition v36;
  double v37;
  __int128 v38;
  CFTypeRef cf;
  std::__shared_weak_count *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;

  if (a1 >= 5)
  {
    v41 = (char *)operator new(0x20uLL);
    v42 = xmmword_2245B8D50;
    strcpy(v41, "Rendering method is invalid");
    v20 = (char *)operator new(0x80uLL);
    v37 = *(double *)&v20;
    v38 = xmmword_2245C6430;
    strcpy(v20, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DSceneQuerySession+Rendering.cpp");
    if (!a5)
    {
LABEL_28:
      operator delete(v20);
      goto LABEL_29;
    }
    *(_QWORD *)&v36.__val_ = 22;
    v36.__cat_ = std::generic_category();
    sub_2245321DC(&v36, (uint64_t)&v41, (CFErrorRef *)&cf);
    if (*a5)
      CFRelease(*a5);
    *a5 = 0;
    v21 = cf;
    if (cf)
      CFRetain(cf);
    *a5 = v21;
    v22 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        if (SHIBYTE(v38) < 0)
          goto LABEL_27;
        goto LABEL_29;
      }
    }
  }
  else
  {
    v13 = a4;
    if (a4 < 2)
    {
      v16 = a1;
      HIDWORD(a6) = HIDWORD(a7);
      v37 = a6;
      *(double *)&v38 = a8;
      sub_223207E58(&v41, (int *)&v37);
      v17 = v42;
      v30 = v44;
      v31 = v43;
      v29 = v45;
      v18 = v46;
      result = (char *)operator new(0xB8uLL, MEMORY[0x24BEDB6B8]);
      if (result)
      {
        *(__n128 *)(result + 12) = a9;
        *(__n128 *)(result + 28) = a10;
        *(__n128 *)(result + 44) = a11;
        *(__n128 *)(result + 60) = a12;
        result[8] = v16;
        *((_OWORD *)result + 6) = v17;
        *((_OWORD *)result + 7) = v31;
        *((_OWORD *)result + 8) = v30;
        *((_OWORD *)result + 9) = v29;
        *((_DWORD *)result + 40) = v18;
        *((_QWORD *)result + 21) = a2 | (unint64_t)(a3 << 32);
        *((_QWORD *)result + 10) = &off_24EC207B8;
        *((_QWORD *)result + 11) = &off_24EC20868;
        result[176] = v13;
        *((_DWORD *)result + 45) = 1;
        *(_QWORD *)result = &off_24EC29CF8;
      }
      return result;
    }
    v41 = (char *)operator new(0x20uLL);
    v42 = xmmword_2245B8D70;
    strcpy(v41, "Projection type is invalid");
    v20 = (char *)operator new(0x80uLL);
    v37 = *(double *)&v20;
    v38 = xmmword_2245C6430;
    strcpy(v20, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DSceneQuerySession+Rendering.cpp");
    if (!a5)
      goto LABEL_28;
    *(_QWORD *)&v36.__val_ = 22;
    v36.__cat_ = std::generic_category();
    sub_2245321DC(&v36, (uint64_t)&v41, (CFErrorRef *)&cf);
    if (*a5)
      CFRelease(*a5);
    *a5 = 0;
    v25 = cf;
    if (cf)
      CFRetain(cf);
    *a5 = v25;
    v26 = v40;
    if (v40)
    {
      v27 = (unint64_t *)&v40->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  if (SHIBYTE(v38) < 0)
  {
LABEL_27:
    v20 = *(char **)&v37;
    goto LABEL_28;
  }
LABEL_29:
  if (SHIBYTE(v42) < 0)
    operator delete(v41);
  return 0;
}

void sub_2232B2BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  void *v35;
  uint64_t v36;

  operator delete(v35);
  if (*(char *)(v36 - 137) < 0)
    operator delete(*(void **)(v36 - 160));
  _Unwind_Resume(a1);
}

uint64_t CV3DReconRenderingRequestRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 180);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *CV3DReconSceneQuerySessionCreateRendering(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  CFTypeRef v16;
  unint64_t *p_shared_owners;
  char *v18;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v21;
  std::error_condition v22;

  if (a1)
  {
    if (a2)
    {
      sub_223425C3C((_QWORD *)(a1 + 8), (unsigned __int8 *)(a2 + 8));
      result = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
      v5 = result;
      if (result)
      {
        v6 = *(_QWORD *)&__p[8];
        result[1] = *(_QWORD *)__p;
        result[2] = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        *((_DWORD *)result + 6) = 1;
        *result = &unk_24EC1F318;
      }
      if (*(_QWORD *)&__p[8])
      {
        v9 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
          return v5;
        }
      }
      return result;
    }
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B8D00;
    strcpy(*(char **)__p, "Rendering request is NULL");
    v11 = (char *)operator new(0x80uLL);
    v18 = v11;
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DSceneQuerySession+Rendering.cpp");
    if (a3)
    {
      *(_QWORD *)&v22.__val_ = 22;
      v22.__cat_ = std::generic_category();
      sub_2245321DC(&v22, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v16 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v16;
      v13 = v21;
      if (!v21)
        goto LABEL_32;
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
LABEL_30:
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
LABEL_32:
      v11 = v18;
    }
  }
  else
  {
    __p[23] = 15;
    strcpy(__p, "Session is NULL");
    v11 = (char *)operator new(0x80uLL);
    v18 = v11;
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DSceneQuerySession+Rendering.cpp");
    if (a3)
    {
      *(_QWORD *)&v22.__val_ = 22;
      v22.__cat_ = std::generic_category();
      sub_2245321DC(&v22, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v13 = v21;
      if (!v21)
        goto LABEL_32;
      v14 = (unint64_t *)&v21->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      goto LABEL_30;
    }
  }
  operator delete(v11);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_2232B3048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconRenderingCopyToCVPixelBuffer(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v26;
  CFTypeRef v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  CFTypeRef v31;
  unint64_t *v32;
  uint64_t (**v33)();
  __int128 v34;
  void *__p;
  __int128 v36;
  CFTypeRef cf;
  std::__shared_weak_count *v38;
  std::error_condition v39;

  if (!a1)
  {
    __p = operator new(0x20uLL);
    v36 = xmmword_2245C6420;
    strcpy((char *)__p, "Rendering to copy from is NULL");
    v26 = (char *)operator new(0x80uLL);
    v33 = (uint64_t (**)())v26;
    v34 = xmmword_2245C6430;
    strcpy(v26, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DSceneQuerySession+Rendering.cpp");
    if (a3)
    {
      *(_QWORD *)&v39.__val_ = 22;
      v39.__cat_ = std::generic_category();
      sub_2245321DC(&v39, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v27 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v27;
      v28 = v38;
      if (!v38)
        goto LABEL_49;
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
LABEL_48:
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
        if ((SHIBYTE(v34) & 0x80000000) == 0)
          goto LABEL_52;
LABEL_50:
        v26 = (char *)v33;
        goto LABEL_51;
      }
LABEL_49:
      if ((SHIBYTE(v34) & 0x80000000) == 0)
      {
LABEL_52:
        if (SHIBYTE(v36) < 0)
          operator delete(__p);
        return 0;
      }
      goto LABEL_50;
    }
LABEL_51:
    operator delete(v26);
    goto LABEL_52;
  }
  if (!a2)
  {
    __p = operator new(0x20uLL);
    v36 = xmmword_2245B8D50;
    strcpy((char *)__p, "Buffer to copy into is NULL");
    v26 = (char *)operator new(0x80uLL);
    v33 = (uint64_t (**)())v26;
    v34 = xmmword_2245C6430;
    strcpy(v26, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DSceneQuerySession+Rendering.cpp");
    if (a3)
    {
      *(_QWORD *)&v39.__val_ = 22;
      v39.__cat_ = std::generic_category();
      sub_2245321DC(&v39, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v31 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v31;
      v28 = v38;
      if (!v38)
        goto LABEL_49;
      v32 = (unint64_t *)&v38->__shared_owners_;
      do
        v30 = __ldaxr(v32);
      while (__stlxr(v30 - 1, v32));
      goto LABEL_48;
    }
    goto LABEL_51;
  }
  sub_2242A8B78(&__p, a2, 1, 0);
  v5 = (uint64_t *)v36;
  v34 = v36;
  if (*((_QWORD *)&v36 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v33 = &off_24EC71548;
  if (v5)
  {
    v9 = *v5;
    v8 = (std::__shared_weak_count *)v5[1];
    if (!v8)
      goto LABEL_12;
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (v12)
    {
LABEL_12:
      if (!v9)
        goto LABEL_14;
      goto LABEL_13;
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (v9)
LABEL_13:
      sub_2242AE8BC(v34);
  }
LABEL_14:
  v13 = sub_22346C540((uint64_t *)(a1 + 8), 0, (uint64_t)&v33);
  if ((_QWORD)v34)
  {
    v15 = *(_QWORD *)v34;
    v14 = *(std::__shared_weak_count **)(v34 + 8);
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_2242AEA98(v34);
  }
LABEL_22:
  v33 = &off_24EC715B8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (!*((_QWORD *)&v34 + 1))
    goto LABEL_26;
  v20 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
  {
LABEL_26:
    __p = &off_24EC715B8;
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
      goto LABEL_27;
    return v13;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  __p = &off_24EC715B8;
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (!*((_QWORD *)&v36 + 1))
    return v13;
LABEL_27:
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
    return v13;
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  return v13;
}

void sub_2232B34CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2232B3580(uint64_t a1, const void *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  CFTypeID v8;
  uint64_t v9;
  uint64_t v10;
  CFUUIDBytes v16;

  *(_OWORD *)(a1 + 24) = xmmword_2245CA0A4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)algn_2245CA0B4;
  *(_OWORD *)(a1 + 56) = xmmword_2245CA0C4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 72) = unk_2245CA0D4;
  *(_DWORD *)(a1 + 88) = 1;
  *(_QWORD *)a1 = &off_24EC288C8;
  if (!a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Anchor.cpp", 34, (uint64_t)"uuid_in", 7, (uint64_t)&unk_2245824FF, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_8;
    }
    goto LABEL_5;
  }
  v8 = CFUUIDGetTypeID();
  if (CFGetTypeID(a2) != v8)
  {
LABEL_5:
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Anchor.cpp", 36, (uint64_t)"uuid_opt", 8, (uint64_t)"failed to convert CFUUIDRef to random::UUID", 43, (void (*)(void **))sub_22457406C))
    {
      v9 = 0;
      goto LABEL_7;
    }
LABEL_8:
    abort();
  }
  v16 = CFUUIDGetUUIDBytes((CFUUIDRef)a2);
  v9 = sub_22453331C((uint64_t)&v16);
LABEL_7:
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v10;
  *(__n128 *)(a1 + 24) = a3;
  *(__n128 *)(a1 + 40) = a4;
  *(__n128 *)(a1 + 56) = a5;
  *(__n128 *)(a1 + 72) = a6;
  return a1;
}

void sub_2232B36C0()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232B36D4(uint64_t a1)
{
  sub_2232555B8(a1 + 8);
  return a1;
}

void sub_2232B36FC(uint64_t a1)
{
  sub_2232555B8(a1 + 8);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232B3734(uint64_t a1, unsigned int a2, uint64_t a3, double a4, float a5, double a6, double a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11)
{
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  unsigned int v26;
  _QWORD v28[2];
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;

  v26 = HIDWORD(a6);
  v35 = *MEMORY[0x24BDAC8D0];
  v15 = a1 + 8;
  bzero((void *)(a1 + 8), 0x720uLL);
  sub_2232BD040(v15);
  *(_DWORD *)(a1 + 1832) = 1;
  *(_QWORD *)a1 = &off_24EC28938;
  *(_QWORD *)(a1 + 1240) = (uint64_t)(a4 * 1000000000.0);
  v28[0] = __PAIR64__(v26, LODWORD(a5));
  *(double *)&v28[1] = a7;
  sub_223207E58(&v29, (int *)v28);
  v16 = v31;
  v17 = v32;
  v18 = v33;
  v19 = v34;
  *(_OWORD *)(a1 + 1264) = v30;
  *(_OWORD *)(a1 + 1280) = v16;
  *(_OWORD *)(a1 + 1296) = v17;
  *(_OWORD *)(a1 + 1312) = v18;
  *(_DWORD *)(a1 + 1328) = v19;
  *(_QWORD *)(a1 + 1336) = a2 | (unint64_t)(a3 << 32);
  *(__n128 *)(a1 + 1344) = a8;
  *(__n128 *)(a1 + 1360) = a9;
  *(__n128 *)(a1 + 1376) = a10;
  *(__n128 *)(a1 + 1392) = a11;
  return a1;
}

void sub_2232B3880(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2232555B8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2232B3894(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  CFTypeRef v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  CFErrorRef v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD v68[2];
  std::__shared_weak_count *v69;
  uint64_t v70;
  __int128 v71;
  _OWORD v72[2];
  uint64_t (**v73)();
  __int128 v74;
  _OWORD v75[2];
  uint64_t (**v76)();
  __int128 v77;
  unsigned int v78;
  uint64_t v79;
  char v80;
  char v81;
  char v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  CFTypeRef cf;
  std::__shared_weak_count *v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t (**v94)();
  __int128 v95;
  uint64_t (**v96)();
  __int128 v97;
  CFErrorRef v98;
  std::__shared_weak_count *v99;
  uint64_t (**v100)();
  __int128 v101;
  _OWORD v102[2];

  sub_2242A8B78(&v96, a2, 1, 0);
  v5 = (uint64_t *)v97;
  v94 = &off_24EC715B8;
  v95 = v97;
  if (*((_QWORD *)&v97 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (v5)
  {
    v9 = *v5;
    v8 = (std::__shared_weak_count *)v5[1];
    if (!v8)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (v9)
      {
LABEL_11:
        v13 = sub_2242A78F0((uint64_t)&v94);
        v94 = &off_24EC715B8;
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
        if (!*((_QWORD *)&v95 + 1))
          goto LABEL_19;
        goto LABEL_15;
      }
    }
    else
    {
LABEL_10:
      if (v9)
        goto LABEL_11;
    }
  }
  v13 = 0;
  v94 = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
  if (!*((_QWORD *)&v95 + 1))
    goto LABEL_19;
LABEL_15:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_19:
  v89 = v13;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 728302992;
  kdebug_trace();
  HIBYTE(v101) = 5;
  strcpy((char *)&v100, "depth");
  v17 = operator new(8uLL);
  *v17 = 0x6864657066646570;
  v84 = v17 + 1;
  v85 = v17 + 1;
  v83 = v17;
  v79 = *(_QWORD *)(a1 + 1336);
  v80 = 1;
  v81 = 0;
  v82 = 0;
  sub_2232B409C((uint64_t)&cf, (uint64_t)&v96, (uint64_t *)&v100, &v83, (unsigned int *)&v79);
  v84 = v17;
  operator delete(v17);
  if (SHIBYTE(v101) < 0)
  {
    operator delete(v100);
    if (v88)
    {
LABEL_21:
      if (a3)
      {
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v18 = cf;
        if (cf)
          CFRetain(cf);
        v19 = 0;
        *a3 = v18;
      }
      else
      {
        v19 = 0;
      }
LABEL_100:
      v61 = v87;
      if (v87)
      {
        v62 = (unint64_t *)&v87->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      goto LABEL_105;
    }
  }
  else if (v88)
  {
    goto LABEL_21;
  }
  v78 = 1751410032;
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
  v21 = v97;
  if (v13 == 1751410032)
    goto LABEL_56;
  v76 = &off_24EC715B8;
  v77 = v97;
  if (*((_QWORD *)&v97 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  sub_223C323C0((uint64_t)&v76, &v78, &v100);
  v24 = v101;
  v101 = 0uLL;
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
  v97 = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v100 = &off_24EC715B8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
  if (*((_QWORD *)&v101 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v76 = &off_24EC715B8;
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (!(_QWORD)v97)
    goto LABEL_71;
  v35 = *(_QWORD *)v97;
  v34 = *(std::__shared_weak_count **)(v97 + 8);
  if (v34)
  {
    v36 = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    do
      v38 = __ldaxr(v36);
    while (__stlxr(v38 - 1, v36));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (!v35)
  {
LABEL_71:
    v100 = (uint64_t (**)())operator new(0x30uLL);
    v101 = xmmword_2245B9450;
    strcpy((char *)v100, "Depth could not be converted to float type");
    v48 = (char *)operator new(0x68uLL);
    v73 = (uint64_t (**)())v48;
    v74 = xmmword_2245CA0F0;
    strcpy(v48, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/FrameBundle.cpp");
    if (a3)
    {
      v70 = 22;
      *(_QWORD *)&v71 = std::generic_category();
      sub_2245321DC((const std::error_condition *)&v70, (uint64_t)&v100, &v98);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v49 = v98;
      if (v98)
        CFRetain(v98);
      *a3 = v49;
      v50 = v99;
      if (v99)
      {
        v51 = (unint64_t *)&v99->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      if ((SHIBYTE(v74) & 0x80000000) == 0)
      {
LABEL_84:
        if (SHIBYTE(v101) < 0)
          operator delete(v100);
        v19 = 0;
        if (v88)
          goto LABEL_100;
        goto LABEL_105;
      }
      v48 = (char *)v73;
    }
    operator delete(v48);
    goto LABEL_84;
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
  v21 = v97;
LABEL_56:
  v68[0] = &off_24EC715B8;
  v68[1] = v21;
  v69 = v20;
  if (v20)
  {
    v39 = (unint64_t *)&v20->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  sub_22429724C((uint64_t)v68, (uint64_t)&v100);
  v70 = (uint64_t)&off_24EC28CD0;
  v71 = v101;
  v72[0] = v102[0];
  *(_OWORD *)((char *)v72 + 14) = *(_OWORD *)((char *)v102 + 14);
  v73 = &off_24EC21328;
  sub_2232BD340((uint64_t)&v70, (uint64_t)&v74);
  if (*(_BYTE *)(a1 + 64))
  {
    v41 = v74;
    v74 = 0uLL;
    v42 = *(std::__shared_weak_count **)(a1 + 24);
    *(_OWORD *)(a1 + 16) = v41;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    *(_OWORD *)(a1 + 32) = v75[0];
    *(_OWORD *)(a1 + 42) = *(_OWORD *)((char *)v75 + 10);
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
    v73 = &off_24EC21328;
    if (*((_QWORD *)&v74 + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = &off_24EC21328;
    v53 = v74;
    v74 = 0uLL;
    v54 = v75[0];
    *(_OWORD *)(a1 + 16) = v53;
    *(_OWORD *)(a1 + 32) = v54;
    *(_OWORD *)(a1 + 42) = *(_OWORD *)((char *)v75 + 10);
    *(_BYTE *)(a1 + 64) = 1;
    v73 = &off_24EC21328;
  }
  v70 = (uint64_t)&off_24EC28CD0;
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v68[0] = &off_24EC715B8;
  v58 = v69;
  if (v69)
  {
    v59 = (unint64_t *)&v69->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v19 = 1;
  if (v88)
    goto LABEL_100;
LABEL_105:
  kdebug_trace();
  v96 = &off_24EC715B8;
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
  if (*((_QWORD *)&v97 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  return v19;
}

void sub_2232B3F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  void *v36;
  uint64_t v37;

  operator delete(v36);
  if (*(char *)(v37 - 97) < 0)
    operator delete(*(void **)(v37 - 120));
  sub_223224234((uint64_t)&a36);
  sub_2231874DC(v37 - 224);
  sub_2242A8F3C((_QWORD *)(v37 - 160));
  _Unwind_Resume(a1);
}

void sub_2232B4048(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  operator delete(v1);
  if (*(char *)(v2 - 97) < 0)
  {
    operator delete(*(void **)(v2 - 120));
    sub_2231874DC(v2 - 224);
    sub_2242A8F3C((_QWORD *)(v2 - 160));
    _Unwind_Resume(a1);
  }
  sub_2231874DC(v2 - 224);
  sub_2242A8F3C((_QWORD *)(v2 - 160));
  _Unwind_Resume(a1);
}

void sub_2232B409C(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, unsigned int *a5)
{
  uint64_t *v7;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  int v26;
  size_t v27;
  char *v28;
  int v29;
  uint64_t *v30;
  size_t v31;
  const std::error_category *v32;
  int v33;
  uint64_t *v34;
  size_t v35;
  const std::error_category *v36;
  int v37;
  uint64_t *v38;
  size_t v39;
  const std::error_category *v40;
  int v41;
  uint64_t *v42;
  size_t v43;
  const std::error_category *v44;
  std::error_condition v45;
  char __format[23];
  char v47;
  __int128 v48;
  CFErrorRef v49[3];
  std::string v50;

  v7 = *(uint64_t **)(a2 + 8);
  if (v7)
  {
    v12 = *v7;
    v11 = (std::__shared_weak_count *)v7[1];
    if (!v11)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12)
      {
LABEL_8:
        v16 = (_DWORD *)*a4;
        v17 = (_DWORD *)a4[1];
        v18 = sub_2242A78F0(a2);
        v19 = (_DWORD *)*a4;
        v20 = (_DWORD *)a4[1];
        if ((_DWORD *)*a4 == v20)
        {
LABEL_11:
          if (v16 != v17)
          {
            v50.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
            *(_OWORD *)&v50.__r_.__value_.__r.__words[1] = xmmword_2245B9430;
            strcpy(v50.__r_.__value_.__l.__data_, "Pixel format is invalid");
            *(_QWORD *)&v45.__val_ = 22;
            v45.__cat_ = std::generic_category();
            sub_2245321DC(&v45, (uint64_t)&v50, v49);
            *(_OWORD *)a1 = *(_OWORD *)v49;
            *(_OWORD *)v49 = 0uLL;
            *(_BYTE *)(a1 + 16) = 1;
            if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              return;
            v21 = (char *)v50.__r_.__value_.__r.__words[0];
            goto LABEL_42;
          }
        }
        else
        {
          while (v18 != *v19)
          {
            if (++v19 == v20)
              goto LABEL_11;
          }
        }
        v23 = *a5;
        v22 = a5[1];
        v25 = a5[3];
        v24 = a5[4];
        v26 = *((unsigned __int8 *)a5 + 20);
        v27 = sub_2242A9B5C(a2);
        if (v26)
        {
          if (v27 < v25)
          {
            v28 = (char *)operator new(0x60uLL);
            strcpy(v28, "Input %s image width doesn't meet the minimum width, expecting at least %d but received %d");
            v29 = *((char *)a3 + 23);
            v30 = (uint64_t *)*a3;
            v31 = sub_2242A9B5C(a2);
            if (v29 < 0)
              a3 = v30;
            v32 = std::generic_category();
            sub_22456D250(v28, &v50, a3, v25, v31, 22, v32);
            sub_2245321DC(&v45, (uint64_t)&v50, v49);
LABEL_39:
            if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v50.__r_.__value_.__l.__data_);
            *(_OWORD *)a1 = *(_OWORD *)v49;
            *(_OWORD *)v49 = 0uLL;
            *(_BYTE *)(a1 + 16) = 1;
            v21 = v28;
            goto LABEL_42;
          }
          if (sub_2242A9C94(a2) < v24)
          {
            v28 = (char *)operator new(0x60uLL);
            strcpy(v28, "Input %s image height doesn't meet the minimum height, expecting at least %d but received %d");
            v37 = *((char *)a3 + 23);
            v38 = (uint64_t *)*a3;
            v39 = sub_2242A9C94(a2);
            if (v37 < 0)
              a3 = v38;
            v40 = std::generic_category();
            sub_22456D250(v28, &v50, a3, v24, v39, 22, v40);
            sub_2245321DC(&v45, (uint64_t)&v50, v49);
            goto LABEL_39;
          }
        }
        else
        {
          if (v27 != v23)
          {
            v28 = (char *)operator new(0x58uLL);
            strcpy(v28, "Input %s image width doesn't match frame bundle width, expecting %d but received %d");
            v41 = *((char *)a3 + 23);
            v42 = (uint64_t *)*a3;
            v43 = sub_2242A9B5C(a2);
            if (v41 < 0)
              a3 = v42;
            v44 = std::generic_category();
            sub_22456D250(v28, &v50, a3, v23, v43, 22, v44);
            sub_2245321DC(&v45, (uint64_t)&v50, v49);
            goto LABEL_39;
          }
          if (sub_2242A9C94(a2) != v22)
          {
            v28 = (char *)operator new(0x58uLL);
            strcpy(v28, "Input %s image height doesn't match frame bundle height, expecting %d but received %d");
            v33 = *((char *)a3 + 23);
            v34 = (uint64_t *)*a3;
            v35 = sub_2242A9C94(a2);
            if (v33 < 0)
              a3 = v34;
            v36 = std::generic_category();
            sub_22456D250(v28, &v50, a3, v22, v35, 22, v36);
            sub_2245321DC(&v45, (uint64_t)&v50, v49);
            goto LABEL_39;
          }
        }
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 16) = 0;
        return;
      }
    }
    else
    {
LABEL_7:
      if (v12)
        goto LABEL_8;
    }
  }
  strcpy(__format, "Input %s image is NULL");
  v47 = 22;
  if (*((char *)a3 + 23) < 0)
    a3 = (uint64_t *)*a3;
  v49[0] = (CFErrorRef)22;
  v49[1] = (CFErrorRef)std::generic_category();
  sub_22456D250(__format, &v50, a3);
  sub_2245321DC((const std::error_condition *)v49, (uint64_t)&v50, (CFErrorRef *)&v48);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  *(_OWORD *)a1 = v48;
  v48 = 0uLL;
  *(_BYTE *)(a1 + 16) = 1;
  if (v47 < 0)
  {
    v21 = *(char **)__format;
LABEL_42:
    operator delete(v21);
  }
}

void sub_2232B454C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  uint64_t v21;

  if (*(char *)(v21 - 65) < 0)
    operator delete(*(void **)(v21 - 88));
  operator delete(v20);
  _Unwind_Resume(a1);
}

_QWORD *sub_2232B45D0(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC28CD0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_2232B4644(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _OWORD *v17;
  CFTypeRef v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  char *v59;
  CFErrorRef v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t (**v71)();
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  _OWORD v75[2];
  uint64_t (**v76)();
  __int128 v77;
  uint64_t (**v78)();
  __int128 v79;
  uint64_t (**v80)();
  __int128 v81;
  uint64_t v82;
  char v83;
  char v84;
  char v85;
  _OWORD *v86;
  _OWORD *v87;
  _OWORD *v88;
  CFTypeRef cf;
  std::__shared_weak_count *v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t (**v97)();
  __int128 v98;
  uint64_t (**v99)();
  __int128 v100;
  CFErrorRef v101;
  std::__shared_weak_count *v102;
  uint64_t v103[3];
  _OWORD v104[2];

  sub_2242A8B78(&v99, a2, 1, 0);
  v5 = (uint64_t *)v100;
  v97 = &off_24EC715B8;
  v98 = v100;
  if (*((_QWORD *)&v100 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (v5)
  {
    v9 = *v5;
    v8 = (std::__shared_weak_count *)v5[1];
    if (!v8)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (v9)
      {
LABEL_11:
        v13 = sub_2242A78F0((uint64_t)&v97);
        v97 = &off_24EC715B8;
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
        if (!*((_QWORD *)&v98 + 1))
          goto LABEL_19;
        goto LABEL_15;
      }
    }
    else
    {
LABEL_10:
      if (v9)
        goto LABEL_11;
    }
  }
  v13 = 0;
  v97 = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
  if (!*((_QWORD *)&v98 + 1))
    goto LABEL_19;
LABEL_15:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_19:
  v92 = v13;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 728303000;
  kdebug_trace();
  HIBYTE(v103[2]) = 16;
  strcpy((char *)v103, "depth confidence");
  v17 = operator new(0x10uLL);
  *v17 = xmmword_2245CA100;
  v87 = v17 + 1;
  v88 = v17 + 1;
  v86 = v17;
  v82 = *(_QWORD *)(a1 + 1336);
  v83 = 1;
  v84 = 0;
  v85 = 0;
  sub_2232B409C((uint64_t)&cf, (uint64_t)&v99, v103, &v86, (unsigned int *)&v82);
  v87 = v17;
  operator delete(v17);
  if ((SHIBYTE(v103[2]) & 0x80000000) == 0)
  {
    if (v91)
      goto LABEL_21;
LABEL_28:
    if (v13 == 1717855600)
    {
      v78 = &off_24EC715B8;
      v79 = v100;
      if (*((_QWORD *)&v100 + 1))
      {
        v32 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      LODWORD(v76) = 1751410032;
      sub_223C323C0((uint64_t)&v78, (unsigned int *)&v76, v103);
      v34 = *(_OWORD *)&v103[1];
      v103[1] = 0;
      v103[2] = 0;
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
      v100 = v34;
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v103[0] = (uint64_t)&off_24EC715B8;
      v38 = (std::__shared_weak_count *)v103[2];
      if (v103[2])
      {
        v39 = (unint64_t *)(v103[2] + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v78 = &off_24EC715B8;
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (!*((_QWORD *)&v79 + 1))
        goto LABEL_65;
      v41 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
      do
        v31 = __ldaxr(v41);
      while (__stlxr(v31 - 1, v41));
    }
    else
    {
      if (v13 != 1278226534)
        goto LABEL_65;
      v80 = &off_24EC715B8;
      v81 = v100;
      if (*((_QWORD *)&v100 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      LODWORD(v76) = 1278226536;
      sub_223C323C0((uint64_t)&v80, (unsigned int *)&v76, v103);
      v22 = *(_OWORD *)&v103[1];
      v103[1] = 0;
      v103[2] = 0;
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
      v100 = v22;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v103[0] = (uint64_t)&off_24EC715B8;
      v26 = (std::__shared_weak_count *)v103[2];
      if (v103[2])
      {
        v27 = (unint64_t *)(v103[2] + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v80 = &off_24EC715B8;
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
      if (!*((_QWORD *)&v81 + 1))
        goto LABEL_65;
      v30 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
    }
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      v42 = (uint64_t *)v100;
      if (!(_QWORD)v100)
        goto LABEL_94;
      goto LABEL_66;
    }
LABEL_65:
    v42 = (uint64_t *)v100;
    if (!(_QWORD)v100)
      goto LABEL_94;
LABEL_66:
    v44 = *v42;
    v43 = (std::__shared_weak_count *)v42[1];
    if (!v43)
      goto LABEL_71;
    v45 = (unint64_t *)&v43->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    do
      v47 = __ldaxr(v45);
    while (__stlxr(v47 - 1, v45));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
      if (v44)
        goto LABEL_72;
    }
    else
    {
LABEL_71:
      if (v44)
      {
LABEL_72:
        v71 = &off_24EC715B8;
        v72 = v100;
        if (*((_QWORD *)&v100 + 1))
        {
          v48 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }
        sub_22429724C((uint64_t)&v71, (uint64_t)v103);
        v73 = (uint64_t)&off_24EC28CD0;
        v74 = *(_OWORD *)&v103[1];
        v75[0] = v104[0];
        *(_OWORD *)((char *)v75 + 14) = *(_OWORD *)((char *)v104 + 14);
        v76 = &off_24EC21040;
        sub_2232BDBB0((uint64_t)&v73, (uint64_t)&v77);
        sub_2232B4EEC(a1 + 72, (uint64_t)&v76);
        v76 = &off_24EC21040;
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
        if (*((_QWORD *)&v77 + 1))
        {
          v51 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v73 = (uint64_t)&off_24EC28CD0;
        v53 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
        if (*((_QWORD *)&v74 + 1))
        {
          v54 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v71 = &off_24EC715B8;
        v56 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
        if (*((_QWORD *)&v72 + 1))
        {
          v57 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v19 = 1;
        goto LABEL_110;
      }
    }
LABEL_94:
    v103[0] = (uint64_t)operator new(0x30uLL);
    *(_OWORD *)&v103[1] = xmmword_2245C43D0;
    strcpy((char *)v103[0], "Confidence could not be converted to half type");
    v59 = (char *)operator new(0x68uLL);
    v76 = (uint64_t (**)())v59;
    v77 = xmmword_2245CA0F0;
    strcpy(v59, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/FrameBundle.cpp");
    if (a3)
    {
      v73 = 22;
      *(_QWORD *)&v74 = std::generic_category();
      sub_2245321DC((const std::error_condition *)&v73, (uint64_t)v103, &v101);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v60 = v101;
      if (v101)
        CFRetain(v101);
      *a3 = v60;
      v61 = v102;
      if (v102)
      {
        v62 = (unint64_t *)&v102->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if ((SHIBYTE(v77) & 0x80000000) == 0)
        goto LABEL_107;
      v59 = (char *)v76;
    }
    operator delete(v59);
LABEL_107:
    if (SHIBYTE(v103[2]) < 0)
      operator delete((void *)v103[0]);
    v19 = 0;
LABEL_110:
    if (!v91)
      goto LABEL_116;
    goto LABEL_111;
  }
  operator delete((void *)v103[0]);
  if (!v91)
    goto LABEL_28;
LABEL_21:
  if (a3)
  {
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v18 = cf;
    if (cf)
      CFRetain(cf);
    v19 = 0;
    *a3 = v18;
    goto LABEL_110;
  }
  v19 = 0;
LABEL_111:
  v64 = v90;
  if (v90)
  {
    v65 = (unint64_t *)&v90->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
LABEL_116:
  kdebug_trace();
  v99 = &off_24EC715B8;
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  return v19;
}

void sub_2232B4DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  sub_2242A8F3C(&a27);
  sub_223224234((uint64_t)&a39);
  sub_2231874DC(v39 - 232);
  sub_2242A8F3C((_QWORD *)(v39 - 168));
  _Unwind_Resume(a1);
}

void sub_2232B4E98(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  operator delete(v1);
  if (*(char *)(v2 - 105) < 0)
  {
    operator delete(*(void **)(v2 - 128));
    sub_2231874DC(v2 - 232);
    sub_2242A8F3C((_QWORD *)(v2 - 168));
    _Unwind_Resume(a1);
  }
  sub_2231874DC(v2 - 232);
  sub_2242A8F3C((_QWORD *)(v2 - 168));
  _Unwind_Resume(a1);
}

uint64_t sub_2232B4EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 56))
  {
    sub_2232BC104(a1, a2);
    return a1;
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC21328;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a2 + 48);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v10;
      *(_WORD *)(a1 + 48) = v8;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v14 = *(_WORD *)(a2 + 48);
      v15 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = v15;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_WORD *)(a1 + 48) = v14;
    }
    *(_BYTE *)(a1 + 56) = 1;
    return a1;
  }
}

uint64_t sub_2232B501C(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _OWORD *v17;
  CFTypeRef v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int8 v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  CFTypeRef v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  int v88;
  __int16 *v89;
  _WORD *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  _WORD *v95;
  __int16 *v96;
  int v97;
  uint64_t v108;
  uint64_t v109;
  CFTypeRef v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD v154[2];
  std::__shared_weak_count *v155;
  CFTypeRef v156;
  __int128 v157;
  _OWORD v158[2];
  std::error_condition v159;
  std::__shared_weak_count *v160;
  uint64_t (**v161)();
  __int128 v162;
  uint64_t (**v163)();
  uint64_t v164;
  std::__shared_weak_count *v165;
  char *v166;
  __int128 v167;
  _WORD *v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t (**v171)();
  uint64_t v172;
  std::__shared_weak_count *v173;
  _QWORD v174[3];
  char v175;
  char v176;
  CVPixelBufferPoolRef *v177;
  std::__shared_weak_count *v178;
  uint64_t (**v179)();
  __int128 v180;
  uint64_t (**v181)();
  __int128 v182;
  uint64_t v183;
  char v184;
  char v185;
  char v186;
  _OWORD *v187;
  _OWORD *v188;
  _OWORD *v189;
  CFTypeRef cf;
  std::__shared_weak_count *v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t (**v198)();
  __int128 v199;
  uint64_t (**v200)();
  __int128 v201;
  uint64_t v202[3];
  _BYTE v203[30];

  sub_2242A8B78(&v200, a2, 1, 0);
  v5 = (uint64_t *)v201;
  v198 = &off_24EC715B8;
  v199 = v201;
  if (*((_QWORD *)&v201 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (v5)
  {
    v8 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (v8)
      {
LABEL_11:
        v13 = sub_2242A78F0((uint64_t)&v198);
        v198 = &off_24EC715B8;
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v199 + 1);
        if (!*((_QWORD *)&v199 + 1))
          goto LABEL_19;
        goto LABEL_15;
      }
    }
    else
    {
LABEL_10:
      if (v8)
        goto LABEL_11;
    }
  }
  v13 = 0;
  v198 = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v199 + 1);
  if (!*((_QWORD *)&v199 + 1))
    goto LABEL_19;
LABEL_15:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_19:
  v193 = v13;
  v194 = 0;
  v195 = 0;
  v196 = 0;
  v197 = 728303008;
  kdebug_trace();
  HIBYTE(v202[2]) = 17;
  strcpy((char *)v202, "depth uncertainty");
  v17 = operator new(0x10uLL);
  *v17 = xmmword_2245CA100;
  v188 = v17 + 1;
  v189 = v17 + 1;
  v187 = v17;
  v183 = *(_QWORD *)(a1 + 1336);
  v184 = 1;
  v185 = 0;
  v186 = 0;
  sub_2232B409C((uint64_t)&cf, (uint64_t)&v200, v202, &v187, (unsigned int *)&v183);
  v188 = v17;
  operator delete(v17);
  if ((SHIBYTE(v202[2]) & 0x80000000) == 0)
  {
    if (v192)
      goto LABEL_21;
LABEL_30:
    if (v13 == 1717855600)
    {
      v179 = &off_24EC715B8;
      v180 = v201;
      if (*((_QWORD *)&v201 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      LODWORD(v166) = 1751410032;
      sub_223C323C0((uint64_t)&v179, (unsigned int *)&v166, v202);
      v37 = *(_OWORD *)&v202[1];
      v202[1] = 0;
      v202[2] = 0;
      v38 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
      v201 = v37;
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v202[0] = (uint64_t)&off_24EC715B8;
      v41 = (std::__shared_weak_count *)v202[2];
      if (v202[2])
      {
        v42 = (unint64_t *)(v202[2] + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v179 = &off_24EC715B8;
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v180 + 1);
      if (!*((_QWORD *)&v180 + 1))
        goto LABEL_71;
      v44 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
      do
        v32 = __ldaxr(v44);
      while (__stlxr(v32 - 1, v44));
    }
    else
    {
      if (v13 != 1278226534)
        goto LABEL_71;
      v181 = &off_24EC715B8;
      v182 = v201;
      if (*((_QWORD *)&v201 + 1))
      {
        v21 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      LODWORD(v166) = 1278226536;
      sub_223C323C0((uint64_t)&v181, (unsigned int *)&v166, v202);
      v23 = *(_OWORD *)&v202[1];
      v202[1] = 0;
      v202[2] = 0;
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
      v201 = v23;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v202[0] = (uint64_t)&off_24EC715B8;
      v27 = (std::__shared_weak_count *)v202[2];
      if (v202[2])
      {
        v28 = (unint64_t *)(v202[2] + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v181 = &off_24EC715B8;
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
      if (!*((_QWORD *)&v182 + 1))
        goto LABEL_71;
      v31 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
    }
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      v45 = (uint64_t *)v201;
      if (!(_QWORD)v201)
        goto LABEL_90;
      goto LABEL_72;
    }
LABEL_71:
    v45 = (uint64_t *)v201;
    if (!(_QWORD)v201)
      goto LABEL_90;
LABEL_72:
    v46 = *v45;
    v47 = (std::__shared_weak_count *)v45[1];
    if (!v47)
      goto LABEL_77;
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
    do
      v50 = __ldaxr(v48);
    while (__stlxr(v50 - 1, v48));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      if (v46)
        goto LABEL_78;
    }
    else
    {
LABEL_77:
      if (v46)
      {
LABEL_78:
        v51 = atomic_load((unsigned __int8 *)&qword_2540CAB18);
        if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAB18))
        {
          qword_2540CAB30 = 0;
          qword_2540CAB28 = 0;
          qword_2540CAB20 = (uint64_t)&qword_2540CAB28;
          __cxa_atexit((void (*)(void *))sub_2232B5FA0, &qword_2540CAB20, &dword_22314D000);
          __cxa_guard_release(&qword_2540CAB18);
        }
        v52 = sub_2242A9824((uint64_t)&v200);
        sub_223C8536C((uint64_t **)&qword_2540CAB20, v52, 0x4C303068u, 0, (std::__shared_weak_count_vtbl ***)&v177);
        sub_2242A7370(v177, (uint64_t)v174);
        if (!v176
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/FrameBundle.cpp", 171, (uint64_t)"confidence_ref_exp", 18, (uint64_t)"Failed to create pixel buffer", 29, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v53 = sub_2232B5FC8((uint64_t)v174);
        v54 = *(_QWORD *)(v53 + 8);
        v55 = *(std::__shared_weak_count **)(v53 + 16);
        v171 = &off_24EC715B8;
        v172 = v54;
        v173 = v55;
        if (v55)
        {
          v56 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
          v163 = &off_24EC715B8;
          v164 = v54;
          v165 = v55;
          do
            v58 = __ldxr(v56);
          while (__stxr(v58 + 1, v56));
        }
        else
        {
          v163 = &off_24EC715B8;
          v164 = v54;
          v165 = 0;
        }
        sub_223291230((uint64_t)&v163, &v166);
        v163 = &off_24EC715B8;
        v64 = v165;
        if (v165)
        {
          v65 = (unint64_t *)&v165->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v161 = &off_24EC715B8;
        v162 = v201;
        if (*((_QWORD *)&v201 + 1))
        {
          v67 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
        }
        sub_223291230((uint64_t)&v161, v202);
        v69 = v202[1];
        if (v202[1])
        {
          v70 = (std::__shared_weak_count *)v202[2];
          if (v202[2])
          {
            v71 = (unint64_t *)(v202[2] + 8);
            do
              v72 = __ldxr(v71);
            while (__stxr(v72 + 1, v71));
            do
              v73 = __ldaxr(v71);
            while (__stlxr(v73 - 1, v71));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
            v69 = v202[1];
            v74 = (std::__shared_weak_count *)v202[2];
            if (v202[2])
            {
              v75 = (unint64_t *)(v202[2] + 8);
              do
                v76 = __ldxr(v75);
              while (__stxr(v76 + 1, v75));
              do
                v77 = __ldaxr(v75);
              while (__stlxr(v77 - 1, v75));
              if (!v77)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
            }
          }
          (*(void (**)(std::error_condition *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v69 + 96))(&v159, v69, 1);
          v78 = v167;
          if ((_QWORD)v167)
          {
LABEL_131:
            v79 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
            if (*((_QWORD *)&v167 + 1))
            {
              v80 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
              do
                v81 = __ldxr(v80);
              while (__stxr(v81 + 1, v80));
              do
                v82 = __ldaxr(v80);
              while (__stlxr(v82 - 1, v80));
              if (!v82)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
              v83 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
              v78 = v167;
              if (*((_QWORD *)&v167 + 1))
              {
                v84 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
                do
                  v85 = __ldxr(v84);
                while (__stxr(v85 + 1, v84));
                do
                  v86 = __ldaxr(v84);
                while (__stlxr(v86 - 1, v84));
                if (!v86)
                {
                  ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                  std::__shared_weak_count::__release_weak(v83);
                }
              }
            }
            (*(void (**)(CFTypeRef *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v78 + 96))(&v156, v78, 1);
            v87 = *(_DWORD *)&v203[8];
            if (!*(_DWORD *)&v203[8])
            {
LABEL_163:
              v119 = v156;
              v156 = 0;
              if (v119)
                (*(void (**)(CFTypeRef))(*(_QWORD *)v119 + 8))(v119);
              v120 = *(_QWORD *)&v159.__val_;
              *(_QWORD *)&v159.__val_ = 0;
              if (v120)
                (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
              v121 = (std::__shared_weak_count *)v202[2];
              if (v202[2])
              {
                v122 = (unint64_t *)(v202[2] + 8);
                do
                  v123 = __ldaxr(v122);
                while (__stlxr(v123 - 1, v122));
                if (!v123)
                {
                  ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                  std::__shared_weak_count::__release_weak(v121);
                }
              }
              v161 = &off_24EC715B8;
              v124 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
              if (*((_QWORD *)&v162 + 1))
              {
                v125 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
                do
                  v126 = __ldaxr(v125);
                while (__stlxr(v126 - 1, v125));
                if (!v126)
                {
                  ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                  std::__shared_weak_count::__release_weak(v124);
                }
              }
              v154[0] = &off_24EC715B8;
              v154[1] = v172;
              v155 = v173;
              if (v173)
              {
                v127 = (unint64_t *)&v173->__shared_owners_;
                do
                  v128 = __ldxr(v127);
                while (__stxr(v128 + 1, v127));
              }
              sub_22429724C((uint64_t)v154, (uint64_t)v202);
              v156 = &off_24EC28CD0;
              v157 = *(_OWORD *)&v202[1];
              v158[0] = *(_OWORD *)v203;
              *(_OWORD *)((char *)v158 + 14) = *(_OWORD *)&v203[14];
              *(_QWORD *)&v159.__val_ = &off_24EC21040;
              sub_2232BDBB0((uint64_t)&v156, (uint64_t)&v159.__cat_);
              sub_2232B4EEC(a1 + 72, (uint64_t)&v159);
              *(_QWORD *)&v159.__val_ = &off_24EC21040;
              v129 = v160;
              if (v160)
              {
                v130 = (unint64_t *)&v160->__shared_owners_;
                do
                  v131 = __ldaxr(v130);
                while (__stlxr(v131 - 1, v130));
                if (!v131)
                {
                  ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                  std::__shared_weak_count::__release_weak(v129);
                }
              }
              v156 = &off_24EC28CD0;
              v132 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
              if (*((_QWORD *)&v157 + 1))
              {
                v133 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
                do
                  v134 = __ldaxr(v133);
                while (__stlxr(v134 - 1, v133));
                if (!v134)
                {
                  ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                  std::__shared_weak_count::__release_weak(v132);
                }
              }
              v154[0] = &off_24EC715B8;
              v135 = v155;
              if (v155)
              {
                v136 = (unint64_t *)&v155->__shared_owners_;
                do
                  v137 = __ldaxr(v136);
                while (__stlxr(v137 - 1, v136));
                if (!v137)
                {
                  ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                  std::__shared_weak_count::__release_weak(v135);
                }
              }
              v138 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
              if (*((_QWORD *)&v167 + 1))
              {
                v139 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
                do
                  v140 = __ldaxr(v139);
                while (__stlxr(v140 - 1, v139));
                if (!v140)
                {
                  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                  std::__shared_weak_count::__release_weak(v138);
                }
              }
              v171 = &off_24EC715B8;
              v141 = v173;
              if (v173)
              {
                v142 = (unint64_t *)&v173->__shared_owners_;
                do
                  v143 = __ldaxr(v142);
                while (__stlxr(v143 - 1, v142));
                if (!v143)
                {
                  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                  std::__shared_weak_count::__release_weak(v141);
                }
              }
              if (v176)
              {
                (*(void (**)(_QWORD *))v174[0])(v174);
              }
              else if (v175 < 0)
              {
                operator delete((void *)v174[1]);
              }
              v144 = v178;
              if (v178)
              {
                v145 = (unint64_t *)&v178->__shared_owners_;
                do
                  v146 = __ldaxr(v145);
                while (__stlxr(v146 - 1, v145));
                if (!v146)
                {
                  ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                  std::__shared_weak_count::__release_weak(v144);
                }
              }
              v19 = 1;
              if (v192)
                goto LABEL_27;
              goto LABEL_215;
            }
LABEL_147:
            if (*(_DWORD *)&v203[12])
            {
              v88 = v87 - 1;
              v89 = *(__int16 **)v203;
              v90 = v168;
              v91 = 2 * *(unsigned int *)&v203[16];
              v92 = 2 * v169;
              v93 = *(_DWORD *)&v203[12] - 1;
              v151 = a1;
              if (*(_DWORD *)&v203[12] != 1)
              {
                if (v87 == 1)
                {
                  v108 = 2 * *(unsigned int *)&v203[20];
                  v109 = 2 * v170;
                  do
                  {
                    _H0 = *v89;
                    __asm { FCVT            S0, H0 }
                    _S0 = 1.0 - expf(_S0 * 0.5);
                    __asm { FCVT            H0, S0 }
                    *v90 = LOWORD(_S0);
                    v89 = (__int16 *)((char *)v89 + v108);
                    v90 = (_WORD *)((char *)v90 + v109);
                    --v93;
                  }
                  while (v93);
                }
                else
                {
                  v94 = 0;
                  v152 = 2 * v170;
                  v153 = 2 * *(unsigned int *)&v203[20];
                  do
                  {
                    v95 = v90;
                    v96 = v89;
                    v97 = v88;
                    do
                    {
                      _H0 = *v96;
                      __asm { FCVT            S0, H0 }
                      _S0 = 1.0 - expf(_S0 * 0.5);
                      __asm { FCVT            H0, S0 }
                      *v95 = LOWORD(_S0);
                      v96 = (__int16 *)((char *)v96 + v91);
                      v95 = (_WORD *)((char *)v95 + v92);
                      --v97;
                    }
                    while (v97);
                    _H0 = *v96;
                    __asm { FCVT            S0, H0 }
                    _S0 = 1.0 - expf(_S0 * 0.5);
                    __asm { FCVT            H0, S0 }
                    *v95 = LOWORD(_S0);
                    v89 = (__int16 *)((char *)v89 + v153);
                    v90 = (_WORD *)((char *)v90 + v152);
                    ++v94;
                  }
                  while (v94 != v93);
                }
              }
              if (v88)
              {
                a1 = v151;
                do
                {
                  _H0 = *v89;
                  __asm { FCVT            S0, H0 }
                  _S0 = 1.0 - expf(_S0 * 0.5);
                  __asm { FCVT            H0, S0 }
                  *v90 = LOWORD(_S0);
                  v89 = (__int16 *)((char *)v89 + v91);
                  v90 = (_WORD *)((char *)v90 + v92);
                  --v88;
                }
                while (v88);
              }
              else
              {
                a1 = v151;
              }
              _H0 = *v89;
              __asm { FCVT            S0, H0 }
              _S0 = 1.0 - expf(_S0 * 0.5);
              __asm { FCVT            H0, S0 }
              *v90 = LOWORD(_S0);
            }
            goto LABEL_163;
          }
        }
        else
        {
          *(_QWORD *)&v159.__val_ = 0;
          v78 = v167;
          if ((_QWORD)v167)
            goto LABEL_131;
        }
        v156 = 0;
        v87 = *(_DWORD *)&v203[8];
        if (!*(_DWORD *)&v203[8])
          goto LABEL_163;
        goto LABEL_147;
      }
    }
LABEL_90:
    v202[0] = (uint64_t)operator new(0x30uLL);
    *(_OWORD *)&v202[1] = xmmword_2245C4540;
    strcpy((char *)v202[0], "Uncertainty could not be converted to half type");
    v59 = (char *)operator new(0x68uLL);
    v166 = v59;
    v167 = xmmword_2245CA0F0;
    strcpy(v59, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/FrameBundle.cpp");
    if (a3)
    {
      *(_QWORD *)&v159.__val_ = 22;
      v159.__cat_ = std::generic_category();
      sub_2245321DC(&v159, (uint64_t)v202, (CFErrorRef *)&v156);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v60 = v156;
      if (v156)
        CFRetain(v156);
      *a3 = v60;
      v61 = (std::__shared_weak_count *)v157;
      if ((_QWORD)v157)
      {
        v62 = (unint64_t *)(v157 + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if ((SHIBYTE(v167) & 0x80000000) == 0)
      {
LABEL_103:
        if (SHIBYTE(v202[2]) < 0)
        {
          operator delete((void *)v202[0]);
          v19 = 0;
          if (!v192)
            goto LABEL_215;
        }
        else
        {
          v19 = 0;
          if (!v192)
            goto LABEL_215;
        }
        goto LABEL_27;
      }
      v59 = v166;
    }
    operator delete(v59);
    goto LABEL_103;
  }
  operator delete((void *)v202[0]);
  if (!v192)
    goto LABEL_30;
LABEL_21:
  if (!a3)
  {
    v19 = 0;
    v20 = v191;
    if (!v191)
      goto LABEL_215;
    goto LABEL_50;
  }
  if (*a3)
    CFRelease(*a3);
  *a3 = 0;
  v18 = cf;
  if (cf)
    CFRetain(cf);
  v19 = 0;
  *a3 = v18;
  if (v192)
  {
LABEL_27:
    v20 = v191;
    if (!v191)
      goto LABEL_215;
LABEL_50:
    v33 = (unint64_t *)&v20->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
LABEL_215:
  kdebug_trace();
  v200 = &off_24EC715B8;
  v147 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
  if (*((_QWORD *)&v201 + 1))
  {
    v148 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  return v19;
}

void sub_2232B5DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a68;
  uint64_t v68;

  if (a23)
    (*(void (**)(uint64_t))(*(_QWORD *)a23 + 8))(a23);
  sub_22320F834(v68 - 176);
  sub_2242A8F3C(&a30);
  sub_22320F834((uint64_t)&a36);
  sub_2242A8F3C(&a43);
  sub_2232B6080((uint64_t)&a46);
  sub_223167354((uint64_t)&a51);
  sub_223224234((uint64_t)&a65);
  sub_2231874DC((uint64_t)&a68);
  sub_2242A8F3C((_QWORD *)(v68 - 200));
  _Unwind_Resume(a1);
}

void sub_2232B5F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  void *v68;
  uint64_t v69;

  operator delete(v68);
  if (*(char *)(v69 - 153) < 0)
  {
    operator delete(*(void **)(v69 - 176));
    sub_2231874DC((uint64_t)&a68);
    sub_2242A8F3C((_QWORD *)(v69 - 200));
    _Unwind_Resume(a1);
  }
  sub_2231874DC((uint64_t)&a68);
  sub_2242A8F3C((_QWORD *)(v69 - 200));
  _Unwind_Resume(a1);
}

uint64_t sub_2232B5FA0(uint64_t a1)
{
  sub_2231F5848(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_2232B5FC8(uint64_t result)
{
  uint64_t v1;
  void *exception;
  _DWORD v3[8];

  v1 = result;
  if (!*(_BYTE *)(result + 32))
  {
    exception = __cxa_allocate_exception(0x28uLL);
    sub_2232BC240(v3, v1);
    sub_2232BC2A0((uint64_t)exception, (uint64_t)v3);
    __cxa_throw(exception, (struct type_info *)&unk_24EC28998, (void (*)(void *))sub_2232BC324);
  }
  return result;
}

void sub_2232B6048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_2232B6080(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
  {
    (**(void (***)(uint64_t))a1)(a1);
    return a1;
  }
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_2232B60D8(_QWORD *a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  CFTypeRef v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  __int128 v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  const std::error_category *v55;
  CFErrorRef v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  char *v67;
  __int128 v68;
  uint64_t (**v69)();
  __int128 v70;
  uint64_t (**v71)();
  __int128 v72;
  uint64_t v73;
  char v74;
  char v75;
  char v76;
  char *v77;
  char *v78;
  char *v79;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t (**v89)();
  __int128 v90;
  uint64_t (**v91)();
  __int128 v92;
  CFErrorRef v93;
  std::__shared_weak_count *v94;
  std::error_condition v95;

  sub_2242A8B78(&v91, a2, 1, 0);
  v5 = (uint64_t *)v92;
  v89 = &off_24EC715B8;
  v90 = v92;
  if (*((_QWORD *)&v92 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (v5)
  {
    v9 = *v5;
    v8 = (std::__shared_weak_count *)v5[1];
    if (!v8)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (v9)
      {
LABEL_11:
        v13 = sub_2242A78F0((uint64_t)&v89);
        v89 = &off_24EC715B8;
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
        if (!*((_QWORD *)&v90 + 1))
          goto LABEL_19;
        goto LABEL_15;
      }
    }
    else
    {
LABEL_10:
      if (v9)
        goto LABEL_11;
    }
  }
  v13 = 0;
  v89 = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
  if (!*((_QWORD *)&v90 + 1))
    goto LABEL_19;
LABEL_15:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_19:
  v84 = v13;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 728303016;
  kdebug_trace();
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "active depth mask");
  v17 = (char *)operator new(0xCuLL);
  v78 = v17 + 12;
  v79 = v17 + 12;
  qmemcpy(v17, "f00Lpedfh00L", 12);
  v77 = v17;
  v73 = a1[167];
  v74 = 1;
  v75 = 0;
  v76 = 0;
  sub_2232B409C((uint64_t)&cf, (uint64_t)&v91, (uint64_t *)__p, &v77, (unsigned int *)&v73);
  v78 = v17;
  operator delete(v17);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (v83)
      goto LABEL_21;
LABEL_28:
    if (v13 == 1717855600)
    {
      v69 = &off_24EC715B8;
      v70 = v92;
      if (*((_QWORD *)&v92 + 1))
      {
        v32 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      LODWORD(v67) = 1751410032;
      sub_223C323C0((uint64_t)&v69, (unsigned int *)&v67, __p);
      v34 = *(_OWORD *)&__p[1];
      __p[1] = 0;
      __p[2] = 0;
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
      v92 = v34;
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      __p[0] = &off_24EC715B8;
      v38 = (std::__shared_weak_count *)__p[2];
      if (__p[2])
      {
        v39 = (unint64_t *)((char *)__p[2] + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v69 = &off_24EC715B8;
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
      if (!*((_QWORD *)&v70 + 1))
        goto LABEL_65;
      v41 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
      do
        v31 = __ldaxr(v41);
      while (__stlxr(v31 - 1, v41));
    }
    else
    {
      if (v13 != 1278226534)
        goto LABEL_65;
      v71 = &off_24EC715B8;
      v72 = v92;
      if (*((_QWORD *)&v92 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      LODWORD(v67) = 1278226536;
      sub_223C323C0((uint64_t)&v71, (unsigned int *)&v67, __p);
      v22 = *(_OWORD *)&__p[1];
      __p[1] = 0;
      __p[2] = 0;
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
      v92 = v22;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      __p[0] = &off_24EC715B8;
      v26 = (std::__shared_weak_count *)__p[2];
      if (__p[2])
      {
        v27 = (unint64_t *)((char *)__p[2] + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v71 = &off_24EC715B8;
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
      if (!*((_QWORD *)&v72 + 1))
        goto LABEL_65;
      v30 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
    }
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      v42 = (uint64_t *)v92;
      if (!(_QWORD)v92)
        goto LABEL_84;
      goto LABEL_66;
    }
LABEL_65:
    v42 = (uint64_t *)v92;
    if (!(_QWORD)v92)
      goto LABEL_84;
LABEL_66:
    v44 = *v42;
    v43 = (std::__shared_weak_count *)v42[1];
    if (!v43)
      goto LABEL_71;
    v45 = (unint64_t *)&v43->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    do
      v47 = __ldaxr(v45);
    while (__stlxr(v47 - 1, v45));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
      if (v44)
        goto LABEL_72;
    }
    else
    {
LABEL_71:
      if (v44)
      {
LABEL_72:
        v48 = v92;
        if (*((_QWORD *)&v92 + 1))
        {
          v49 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        a1[221] = v48;
        v51 = (std::__shared_weak_count *)a1[222];
        a1[222] = *((_QWORD *)&v48 + 1);
        if (v51)
        {
          v52 = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v19 = 1;
        goto LABEL_100;
      }
    }
LABEL_84:
    __p[0] = operator new(0x38uLL);
    *(_OWORD *)&__p[1] = xmmword_2245C4510;
    strcpy((char *)__p[0], "Active depth mask could not be converted to half type");
    v54 = (char *)operator new(0x68uLL);
    v67 = v54;
    v68 = xmmword_2245CA0F0;
    strcpy(v54, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/FrameBundle.cpp");
    if (a3)
    {
      v55 = std::generic_category();
      *(_QWORD *)&v95.__val_ = 22;
      v95.__cat_ = v55;
      sub_2245321DC(&v95, (uint64_t)__p, &v93);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v56 = v93;
      if (v93)
        CFRetain(v93);
      *a3 = v56;
      v57 = v94;
      if (v94)
      {
        v58 = (unint64_t *)&v94->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      if ((SHIBYTE(v68) & 0x80000000) == 0)
        goto LABEL_97;
      v54 = v67;
    }
    operator delete(v54);
LABEL_97:
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    v19 = 0;
LABEL_100:
    if (!v83)
      goto LABEL_106;
    goto LABEL_101;
  }
  operator delete(__p[0]);
  if (!v83)
    goto LABEL_28;
LABEL_21:
  if (a3)
  {
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v18 = cf;
    if (cf)
      CFRetain(cf);
    v19 = 0;
    *a3 = v18;
    goto LABEL_100;
  }
  v19 = 0;
LABEL_101:
  v60 = v82;
  if (v82)
  {
    v61 = (unint64_t *)&v82->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
LABEL_106:
  kdebug_trace();
  v91 = &off_24EC715B8;
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
  if (*((_QWORD *)&v92 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  return v19;
}

void sub_2232B679C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  sub_2242A8F3C(&a13);
  sub_223224234((uint64_t)&a32);
  sub_2231874DC((uint64_t)&a35);
  sub_2242A8F3C((_QWORD *)(v35 - 120));
  _Unwind_Resume(a1);
}

void sub_2232B683C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  void *v35;
  uint64_t v36;

  operator delete(v35);
  if (a30 < 0)
  {
    operator delete(__p);
    sub_2231874DC((uint64_t)&a35);
    sub_2242A8F3C((_QWORD *)(v36 - 120));
    _Unwind_Resume(a1);
  }
  sub_2231874DC((uint64_t)&a35);
  sub_2242A8F3C((_QWORD *)(v36 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_2232B6890(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  CFTypeRef v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  char *v49;
  CFErrorRef v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD v70[2];
  std::__shared_weak_count *v71;
  uint64_t v72;
  __int128 v73;
  _OWORD v74[2];
  void *__p;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int16 v80;
  uint64_t (**v81)();
  __int128 v82;
  unsigned int v83;
  uint64_t v84;
  char v85;
  char v86;
  char v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  CFTypeRef cf;
  std::__shared_weak_count *v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t (**v99)();
  __int128 v100;
  uint64_t (**v101)();
  __int128 v102;
  CFErrorRef v103;
  std::__shared_weak_count *v104;
  char *v105;
  __int128 v106;
  _OWORD v107[2];

  sub_2242A8B78(&v101, a2, 1, 0);
  v5 = (uint64_t *)v102;
  v99 = &off_24EC715B8;
  v100 = v102;
  if (*((_QWORD *)&v102 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (v5)
  {
    v9 = *v5;
    v8 = (std::__shared_weak_count *)v5[1];
    if (!v8)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (v9)
      {
LABEL_11:
        v13 = sub_2242A78F0((uint64_t)&v99);
        v99 = &off_24EC715B8;
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
        if (!*((_QWORD *)&v100 + 1))
          goto LABEL_19;
        goto LABEL_15;
      }
    }
    else
    {
LABEL_10:
      if (v9)
        goto LABEL_11;
    }
  }
  v13 = 0;
  v99 = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (!*((_QWORD *)&v100 + 1))
    goto LABEL_19;
LABEL_15:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_19:
  v94 = v13;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 728303032;
  kdebug_trace();
  HIBYTE(v76) = 7;
  strcpy((char *)&__p, "normals");
  v17 = operator new(8uLL);
  *v17 = 0x5247684152476641;
  v89 = v17 + 1;
  v90 = v17 + 1;
  v88 = v17;
  v84 = *(_QWORD *)(a1 + 1336);
  v85 = 1;
  v86 = 0;
  v87 = 0;
  sub_2232B409C((uint64_t)&cf, (uint64_t)&v101, (uint64_t *)&__p, &v88, (unsigned int *)&v84);
  v89 = v17;
  operator delete(v17);
  if (SHIBYTE(v76) < 0)
  {
    operator delete(__p);
    if (v93)
    {
LABEL_21:
      if (a3)
      {
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v18 = cf;
        if (cf)
          CFRetain(cf);
        v19 = 0;
        *a3 = v18;
      }
      else
      {
        v19 = 0;
      }
LABEL_100:
      v63 = v92;
      if (v92)
      {
        v64 = (unint64_t *)&v92->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      goto LABEL_105;
    }
  }
  else if (v93)
  {
    goto LABEL_21;
  }
  v83 = 1380411457;
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  v21 = v102;
  if (v13 == 1380411457)
    goto LABEL_56;
  v81 = &off_24EC715B8;
  v82 = v102;
  if (*((_QWORD *)&v102 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  sub_223C323C0((uint64_t)&v81, &v83, &__p);
  v24 = v76;
  v76 = 0uLL;
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  v102 = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  __p = &off_24EC715B8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v81 = &off_24EC715B8;
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (!(_QWORD)v102)
    goto LABEL_71;
  v35 = *(_QWORD *)v102;
  v34 = *(std::__shared_weak_count **)(v102 + 8);
  if (v34)
  {
    v36 = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    do
      v38 = __ldaxr(v36);
    while (__stlxr(v38 - 1, v36));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (!v35)
  {
LABEL_71:
    __p = operator new(0x30uLL);
    v76 = xmmword_2245C43F0;
    strcpy((char *)__p, "Normals could not be converted to float type");
    v49 = (char *)operator new(0x68uLL);
    v105 = v49;
    v106 = xmmword_2245CA0F0;
    strcpy(v49, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/FrameBundle.cpp");
    if (a3)
    {
      v72 = 22;
      *(_QWORD *)&v73 = std::generic_category();
      sub_2245321DC((const std::error_condition *)&v72, (uint64_t)&__p, &v103);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v50 = v103;
      if (v103)
        CFRetain(v103);
      *a3 = v50;
      v51 = v104;
      if (v104)
      {
        v52 = (unint64_t *)&v104->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      if ((SHIBYTE(v106) & 0x80000000) == 0)
      {
LABEL_84:
        if (SHIBYTE(v76) < 0)
          operator delete(__p);
        v19 = 0;
        if (v93)
          goto LABEL_100;
        goto LABEL_105;
      }
      v49 = v105;
    }
    operator delete(v49);
    goto LABEL_84;
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  v21 = v102;
LABEL_56:
  v70[0] = &off_24EC715B8;
  v70[1] = v21;
  v71 = v20;
  if (v20)
  {
    v39 = (unint64_t *)&v20->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  sub_22429724C((uint64_t)v70, (uint64_t)&v105);
  v72 = (uint64_t)&off_24EC28CD0;
  v73 = v106;
  v74[0] = v107[0];
  *(_OWORD *)((char *)v74 + 14) = *(_OWORD *)((char *)v107 + 14);
  __p = &off_24EC26FA8;
  sub_2232BE164((uint64_t)&v72, (uint64_t)&v76);
  if (*(_BYTE *)(a1 + 216))
  {
    v41 = v76;
    v76 = 0uLL;
    v42 = *(std::__shared_weak_count **)(a1 + 152);
    *(_OWORD *)(a1 + 144) = v41;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = v78;
    *(_OWORD *)(a1 + 160) = v77;
    *(_OWORD *)(a1 + 176) = v45;
    *(_OWORD *)(a1 + 192) = v79;
    *(_WORD *)(a1 + 208) = v80;
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
    __p = &off_24EC26FA8;
    if (*((_QWORD *)&v76 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 136) = &off_24EC26FA8;
    v54 = v76;
    v55 = v77;
    v76 = 0uLL;
    *(_OWORD *)(a1 + 144) = v54;
    *(_OWORD *)(a1 + 160) = v55;
    v56 = v79;
    *(_OWORD *)(a1 + 176) = v78;
    *(_OWORD *)(a1 + 192) = v56;
    *(_WORD *)(a1 + 208) = v80;
    *(_BYTE *)(a1 + 216) = 1;
    __p = &off_24EC26FA8;
  }
  v72 = (uint64_t)&off_24EC28CD0;
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
  if (*((_QWORD *)&v73 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v70[0] = &off_24EC715B8;
  v60 = v71;
  if (v71)
  {
    v61 = (unint64_t *)&v71->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v19 = 1;
  if (v93)
    goto LABEL_100;
LABEL_105:
  kdebug_trace();
  v101 = &off_24EC715B8;
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  return v19;
}

void sub_2232B6FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  void *v43;
  uint64_t v44;

  operator delete(v43);
  if (a25 < 0)
    operator delete(__p);
  sub_223224234((uint64_t)&a43);
  sub_2231874DC(v44 - 224);
  sub_2242A8F3C((_QWORD *)(v44 - 160));
  _Unwind_Resume(a1);
}

void sub_2232B7064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  uint64_t v26;

  operator delete(v25);
  if (a25 < 0)
  {
    operator delete(__p);
    sub_2231874DC(v26 - 224);
    sub_2242A8F3C((_QWORD *)(v26 - 160));
    _Unwind_Resume(a1);
  }
  sub_2231874DC(v26 - 224);
  sub_2242A8F3C((_QWORD *)(v26 - 160));
  _Unwind_Resume(a1);
}

BOOL sub_2232B70B8(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _DWORD *v17;
  int v18;
  CFTypeRef v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD v38[2];
  std::__shared_weak_count *v39;
  uint64_t (**v40)();
  __int128 v41;
  _OWORD v42[2];
  uint64_t (**v43)();
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  CFTypeRef cf;
  std::__shared_weak_count *v54;
  unsigned __int8 v55;
  _QWORD v56[2];
  std::__shared_weak_count *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t (**v63)();
  uint64_t *v64;
  std::__shared_weak_count *v65;
  _BYTE v66[24];
  _OWORD v67[2];

  sub_2242A8B78(&v63, a2, 1, 0);
  v5 = v64;
  v56[0] = &off_24EC715B8;
  v56[1] = v64;
  v57 = v65;
  if (v65)
  {
    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (!v5)
    goto LABEL_13;
  v9 = *v5;
  v8 = (std::__shared_weak_count *)v5[1];
  if (v8)
  {
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (v9)
        goto LABEL_11;
LABEL_13:
      v13 = 0;
      goto LABEL_14;
    }
  }
  if (!v9)
    goto LABEL_13;
LABEL_11:
  v13 = sub_2242A78F0((uint64_t)v56);
LABEL_14:
  v58 = v13;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 728303040;
  kdebug_trace();
  v56[0] = &off_24EC715B8;
  v14 = v57;
  if (v57)
  {
    v15 = (unint64_t *)&v57->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v66[23] = 9;
  strcpy(v66, "semantics");
  v17 = operator new(4uLL);
  *v17 = 1278226488;
  v51 = v17 + 1;
  v52 = v17 + 1;
  v50 = v17;
  v46 = *(_QWORD *)(a1 + 1336);
  v47 = 1;
  v48 = 0;
  v49 = 0;
  sub_2232B409C((uint64_t)&cf, (uint64_t)&v63, (uint64_t *)v66, &v50, (unsigned int *)&v46);
  v51 = v17;
  operator delete(v17);
  if ((v66[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v66);
    v18 = v55;
    if (v55)
    {
LABEL_21:
      if (a3)
      {
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v19 = cf;
        if (cf)
          CFRetain(cf);
        *a3 = v19;
      }
LABEL_47:
      v31 = v54;
      if (v54)
      {
        v32 = (unint64_t *)&v54->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      goto LABEL_52;
    }
  }
  else
  {
    v18 = v55;
    if (v55)
      goto LABEL_21;
  }
  v38[0] = &off_24EC715B8;
  v38[1] = v64;
  v39 = v65;
  if (v65)
  {
    v20 = (unint64_t *)&v65->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  sub_22429724C((uint64_t)v38, (uint64_t)v66);
  v40 = &off_24EC28CD0;
  v41 = *(_OWORD *)&v66[8];
  v42[0] = v67[0];
  *(_OWORD *)((char *)v42 + 14) = *(_OWORD *)((char *)v67 + 14);
  v43 = &off_24EC29028;
  sub_2232BE79C((uint64_t)&v44, (uint64_t)&v40);
  sub_2232B7554(a1 + 240, (uint64_t)&v43);
  v43 = &off_24EC29028;
  v22 = v45;
  if (v45)
  {
    v23 = (unint64_t *)&v45->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v40 = &off_24EC28CD0;
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v38[0] = &off_24EC715B8;
  v28 = v39;
  if (v39)
  {
    v29 = (unint64_t *)&v39->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v55)
    goto LABEL_47;
LABEL_52:
  kdebug_trace();
  v63 = &off_24EC715B8;
  v34 = v65;
  if (v65)
  {
    v35 = (unint64_t *)&v65->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  return v18 == 0;
}

void sub_2232B748C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  sub_2232B7684(&a19);
  sub_2232B45D0(&a12);
  sub_2242A8F3C(&a9);
  sub_223224234((uint64_t)&a32);
  sub_2231874DC(v32 - 168);
  sub_2242A8F3C((_QWORD *)(v32 - 128));
  _Unwind_Resume(a1);
}

void sub_2232B7500(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  operator delete(v1);
  if (*(char *)(v2 - 81) < 0)
  {
    operator delete(*(void **)(v2 - 104));
    sub_2231874DC(v2 - 168);
    sub_2242A8F3C((_QWORD *)(v2 - 128));
    _Unwind_Resume(a1);
  }
  sub_2231874DC(v2 - 168);
  sub_2242A8F3C((_QWORD *)(v2 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_2232B7554(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 56))
  {
    sub_2232BC104(a1, a2);
    return a1;
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC270A0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a2 + 48);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v10;
      *(_WORD *)(a1 + 48) = v8;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v14 = *(_WORD *)(a2 + 48);
      v15 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = v15;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_WORD *)(a1 + 48) = v14;
    }
    *(_BYTE *)(a1 + 56) = 1;
    return a1;
  }
}

_QWORD *sub_2232B7684(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC29028;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_2232B76F8(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  CFTypeRef v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  char *v50;
  CFErrorRef v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD v62[2];
  std::__shared_weak_count *v63;
  uint64_t v64;
  __int128 v65;
  _OWORD v66[2];
  uint64_t (**v67)();
  __int128 v68;
  uint64_t (**v69)();
  __int128 v70;
  unsigned int v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  CFTypeRef cf;
  std::__shared_weak_count *v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t (**v87)();
  __int128 v88;
  uint64_t (**v89)();
  __int128 v90;
  CFErrorRef v91;
  std::__shared_weak_count *v92;
  uint64_t v93[3];
  _OWORD v94[2];

  sub_2242A8B78(&v89, a2, 1, 0);
  v5 = (uint64_t *)v90;
  v87 = &off_24EC715B8;
  v88 = v90;
  if (*((_QWORD *)&v90 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (v5)
  {
    v9 = *v5;
    v8 = (std::__shared_weak_count *)v5[1];
    if (!v8)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (v9)
      {
LABEL_11:
        v13 = sub_2242A78F0((uint64_t)&v87);
        v87 = &off_24EC715B8;
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
        if (!*((_QWORD *)&v88 + 1))
          goto LABEL_19;
        goto LABEL_15;
      }
    }
    else
    {
LABEL_10:
      if (v9)
        goto LABEL_11;
    }
  }
  v13 = 0;
  v87 = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  if (!*((_QWORD *)&v88 + 1))
    goto LABEL_19;
LABEL_15:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_19:
  v82 = v13;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 728303048;
  kdebug_trace();
  HIBYTE(v93[2]) = 20;
  strcpy((char *)v93, "semantics confidence");
  v17 = operator new(8uLL);
  *v17 = 0x4C3030664C303068;
  v77 = v17 + 1;
  v78 = v17 + 1;
  v76 = v17;
  v72 = *(_QWORD *)(a1 + 1336);
  v73 = 1;
  v74 = 0;
  v75 = 0;
  sub_2232B409C((uint64_t)&cf, (uint64_t)&v89, v93, &v76, (unsigned int *)&v72);
  v77 = v17;
  operator delete(v17);
  if (SHIBYTE(v93[2]) < 0)
  {
    operator delete((void *)v93[0]);
    if (v81)
    {
LABEL_21:
      if (a3)
      {
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v18 = cf;
        if (cf)
          CFRetain(cf);
        v19 = 0;
        *a3 = v18;
      }
      else
      {
        v19 = 0;
      }
LABEL_93:
      v55 = v80;
      if (v80)
      {
        v56 = (unint64_t *)&v80->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      goto LABEL_98;
    }
  }
  else if (v81)
  {
    goto LABEL_21;
  }
  v71 = 1278226536;
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
  v21 = v90;
  if (v13 == 1278226536)
    goto LABEL_56;
  v69 = &off_24EC715B8;
  v70 = v90;
  if (*((_QWORD *)&v90 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  sub_223C323C0((uint64_t)&v69, &v71, v93);
  v24 = *(_OWORD *)&v93[1];
  v93[1] = 0;
  v93[2] = 0;
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
  v90 = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v93[0] = (uint64_t)&off_24EC715B8;
  v28 = (std::__shared_weak_count *)v93[2];
  if (v93[2])
  {
    v29 = (unint64_t *)(v93[2] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v69 = &off_24EC715B8;
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (!(_QWORD)v90)
    goto LABEL_77;
  v35 = *(_QWORD *)v90;
  v34 = *(std::__shared_weak_count **)(v90 + 8);
  if (v34)
  {
    v36 = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    do
      v38 = __ldaxr(v36);
    while (__stlxr(v38 - 1, v36));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (!v35)
  {
LABEL_77:
    v93[0] = (uint64_t)operator new(0x40uLL);
    *(_OWORD *)&v93[1] = xmmword_2245C4410;
    strcpy((char *)v93[0], "Semantics confidence could not be converted to float type");
    v50 = (char *)operator new(0x68uLL);
    v67 = (uint64_t (**)())v50;
    v68 = xmmword_2245CA0F0;
    strcpy(v50, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/FrameBundle.cpp");
    if (a3)
    {
      v64 = 22;
      *(_QWORD *)&v65 = std::generic_category();
      sub_2245321DC((const std::error_condition *)&v64, (uint64_t)v93, &v91);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v51 = v91;
      if (v91)
        CFRetain(v91);
      *a3 = v51;
      v52 = v92;
      if (v92)
      {
        v53 = (unint64_t *)&v92->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      if ((SHIBYTE(v68) & 0x80000000) == 0)
      {
LABEL_90:
        if (SHIBYTE(v93[2]) < 0)
          operator delete((void *)v93[0]);
        v19 = 0;
        if (v81)
          goto LABEL_93;
        goto LABEL_98;
      }
      v50 = (char *)v67;
    }
    operator delete(v50);
    goto LABEL_90;
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
  v21 = v90;
LABEL_56:
  v62[0] = &off_24EC715B8;
  v62[1] = v21;
  v63 = v20;
  if (v20)
  {
    v39 = (unint64_t *)&v20->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  sub_22429724C((uint64_t)v62, (uint64_t)v93);
  v64 = (uint64_t)&off_24EC28CD0;
  v65 = *(_OWORD *)&v93[1];
  v66[0] = v94[0];
  *(_OWORD *)((char *)v66 + 14) = *(_OWORD *)((char *)v94 + 14);
  v67 = &off_24EC21040;
  sub_2232BDBB0((uint64_t)&v64, (uint64_t)&v68);
  sub_2232B4EEC(a1 + 304, (uint64_t)&v67);
  v67 = &off_24EC21040;
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v64 = (uint64_t)&off_24EC28CD0;
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v62[0] = &off_24EC715B8;
  v47 = v63;
  if (v63)
  {
    v48 = (unint64_t *)&v63->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v19 = 1;
  if (v81)
    goto LABEL_93;
LABEL_98:
  kdebug_trace();
  v89 = &off_24EC715B8;
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
  if (*((_QWORD *)&v90 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  return v19;
}

void sub_2232B7D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;
  uint64_t v38;

  operator delete(v37);
  if (*(char *)(v38 - 105) < 0)
    operator delete(*(void **)(v38 - 128));
  sub_223224234((uint64_t)&a37);
  sub_2231874DC(v38 - 232);
  sub_2242A8F3C((_QWORD *)(v38 - 168));
  _Unwind_Resume(a1);
}

void sub_2232B7E54(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  operator delete(v1);
  if (*(char *)(v2 - 105) < 0)
  {
    operator delete(*(void **)(v2 - 128));
    sub_2231874DC(v2 - 232);
    sub_2242A8F3C((_QWORD *)(v2 - 168));
    _Unwind_Resume(a1);
  }
  sub_2231874DC(v2 - 232);
  sub_2242A8F3C((_QWORD *)(v2 - 168));
  _Unwind_Resume(a1);
}

BOOL sub_2232B7EA8(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  float v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  CFTypeRef v20;
  _BOOL8 v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  const std::error_category *v31;
  CFTypeRef v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD v43[2];
  std::__shared_weak_count *v44;
  void *__p;
  __int128 v46;
  char v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  char v53;
  char v54;
  char v55;
  void *v56;
  __int128 v57;
  CFTypeRef cf;
  std::__shared_weak_count *v59;
  unsigned int v60;
  char v61;
  uint64_t v62;
  char v63;
  _QWORD v64[3];
  CFTypeRef v65;
  std::__shared_weak_count *v66;
  char v67;
  _QWORD v68[2];
  std::__shared_weak_count *v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  int v74;
  uint64_t (**v75)();
  uint64_t *v76;
  std::__shared_weak_count *v77;
  std::error_condition v78;

  sub_2242A8B78(&v75, a2, 1, 0);
  v5 = v76;
  v68[0] = &off_24EC715B8;
  v68[1] = v76;
  v69 = v77;
  if (v77)
  {
    p_shared_owners = (unint64_t *)&v77->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (!v5)
  {
    v13 = 0;
LABEL_13:
    if (*(_BYTE *)(a1 + 508))
      goto LABEL_14;
    goto LABEL_19;
  }
  v9 = *v5;
  v8 = (std::__shared_weak_count *)v5[1];
  if (!v8)
    goto LABEL_10;
  v10 = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (v9)
      goto LABEL_11;
  }
  else
  {
LABEL_10:
    if (v9)
    {
LABEL_11:
      v13 = sub_2242A78F0((uint64_t)v68);
      goto LABEL_13;
    }
  }
  v13 = 0;
  if (*(_BYTE *)(a1 + 508))
  {
LABEL_14:
    v14 = *(_DWORD *)(a1 + 504);
    if (*(_BYTE *)(a1 + 468))
      goto LABEL_15;
LABEL_20:
    v15 = -1.0;
    if (*(_BYTE *)(a1 + 496))
      goto LABEL_16;
LABEL_21:
    v16 = 0;
    goto LABEL_22;
  }
LABEL_19:
  v14 = -1;
  if (!*(_BYTE *)(a1 + 468))
    goto LABEL_20;
LABEL_15:
  v15 = *(float *)(a1 + 464);
  if (!*(_BYTE *)(a1 + 496))
    goto LABEL_21;
LABEL_16:
  v16 = (uint64_t)(*(_QWORD *)(a1 + 480) - *(_QWORD *)(a1 + 472)) >> 1;
LABEL_22:
  v70 = v13;
  v71 = v14;
  v72 = v15;
  v73 = v16;
  v74 = 728303056;
  kdebug_trace();
  v68[0] = &off_24EC715B8;
  v17 = v69;
  if (v69)
  {
    v18 = (unint64_t *)&v69->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  HIBYTE(v46) = 5;
  strcpy((char *)&__p, "color");
  memset(v64, 0, sizeof(v64));
  LOBYTE(v60) = 0;
  v61 = 0;
  v62 = 0x100000001;
  v63 = 1;
  sub_2232B409C((uint64_t)&v65, (uint64_t)&v75, (uint64_t *)&__p, v64, &v60);
  if ((SHIBYTE(v46) & 0x80000000) == 0)
  {
    if (v67)
      goto LABEL_29;
LABEL_36:
    if (*(_DWORD *)(a1 + 1336) && *(_DWORD *)(a1 + 1340))
    {
      v43[0] = &off_24EC715B8;
      v43[1] = v76;
      v44 = v77;
      if (v77)
      {
        v22 = (unint64_t *)&v77->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      sub_223C2A8DC(a1 + 368, (uint64_t)v43, *(_QWORD *)(a1 + 1336), (uint64_t)&__p);
      v43[0] = &off_24EC715B8;
      v24 = v44;
      if (v44)
      {
        v25 = (unint64_t *)&v44->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v21 = v55 != 0;
      if (!v55)
      {
        sub_224531A1C((CFErrorRef *)&v56, (uint64_t)&__p);
        v28 = v56;
        v27 = (std::__shared_weak_count *)v57;
        *(_QWORD *)&v78.__val_ = v56;
        v78.__cat_ = (const std::error_category *)v57;
        if (a3)
        {
          if (*a3)
            CFRelease(*a3);
          *a3 = 0;
          if (v28)
            CFRetain(v28);
          *a3 = v28;
        }
        if (v27)
        {
          v29 = (unint64_t *)&v27->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        if (!v55 && v54)
        {
          if (v53)
          {
            if (v52 < 0)
              operator delete(v51);
            if (v50 < 0)
              operator delete(v49);
          }
          if (v48 && v47 < 0)
            operator delete(*((void **)&v46 + 1));
        }
      }
LABEL_83:
      if (!v67)
        goto LABEL_89;
      goto LABEL_84;
    }
    __p = operator new(0x60uLL);
    v46 = xmmword_2245B9410;
    strcpy((char *)__p, "Cannot set color image -- valid camera intrinsics are required to perform proper resizing.");
    v56 = operator new(0x68uLL);
    v57 = xmmword_2245CA0F0;
    strcpy((char *)v56, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/FrameBundle.cpp");
    v31 = std::generic_category();
    *(_QWORD *)&v78.__val_ = 22;
    v78.__cat_ = v31;
    sub_2245321DC(&v78, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (a3)
    {
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v32 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v32;
    }
    v33 = v59;
    if (v59)
    {
      v34 = (unint64_t *)&v59->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (SHIBYTE(v57) < 0)
    {
      operator delete(v56);
      if ((SHIBYTE(v46) & 0x80000000) == 0)
        goto LABEL_82;
    }
    else if ((SHIBYTE(v46) & 0x80000000) == 0)
    {
LABEL_82:
      v21 = 0;
      goto LABEL_83;
    }
    operator delete(__p);
    goto LABEL_82;
  }
  operator delete(__p);
  if (!v67)
    goto LABEL_36;
LABEL_29:
  if (a3)
  {
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v20 = v65;
    if (v65)
      CFRetain(v65);
    v21 = 0;
    *a3 = v20;
    goto LABEL_83;
  }
  v21 = 0;
LABEL_84:
  v36 = v66;
  if (v66)
  {
    v37 = (unint64_t *)&v66->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
LABEL_89:
  kdebug_trace();
  v75 = &off_24EC715B8;
  v39 = v77;
  if (v77)
  {
    v40 = (unint64_t *)&v77->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return v21;
}

void sub_2232B841C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  sub_223167354(v34 - 64);
  sub_223197D38((uint64_t)&__p);
  sub_223224234(v34 - 176);
  sub_2231874DC(v34 - 128);
  sub_2242A8F3C((_QWORD *)(v34 - 88));
  _Unwind_Resume(a1);
}

void sub_2232B84CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  sub_2231874DC(v17 - 128);
  sub_2242A8F3C((_QWORD *)(v17 - 88));
  _Unwind_Resume(a1);
}

void sub_2232B84FC(unsigned int *a1@<X0>, uint64_t a2@<X1>, CFErrorRef *a3@<X8>)
{
  std::error_condition v5;

  *(_QWORD *)&v5.__val_ = *a1;
  v5.__cat_ = std::generic_category();
  sub_2245321DC(&v5, a2, a3);
}

BOOL sub_2232B8560(uint64_t a1, CFTypeRef *a2, float a3)
{
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *__p;
  void *v11;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a3 <= 0.0)
  {
    v11 = operator new(0x20uLL);
    v12 = xmmword_2245C6440;
    strcpy((char *)v11, "ClippingPointLux must be > 0");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/FrameBundle.cpp");
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)&v11, (CFErrorRef *)&cf);
    if (a2)
    {
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
    }
    v6 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(__p);
    if (SHIBYTE(v12) < 0)
      operator delete(v11);
  }
  else
  {
    *(float *)(a1 + 464) = a3;
    *(_BYTE *)(a1 + 468) = 1;
  }
  return a3 > 0.0;
}

void sub_2232B86EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  sub_223167354((uint64_t)&a18);
  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232B8728(uint64_t a1, const void *a2, unsigned int a3, CFTypeRef *a4)
{
  BOOL v4;
  uint64_t v5;
  size_t v8;
  char *v9;
  char *v10;
  void *v11;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  char *__p;
  void *v19[4];
  CFTypeRef cf;
  std::__shared_weak_count *v21;
  std::error_condition v22;

  if (a2)
    v4 = a3 == 0;
  else
    v4 = 1;
  v5 = !v4;
  if (v4)
  {
    HIBYTE(v19[2]) = 21;
    strcpy((char *)v19, "LUT must be non empty");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/FrameBundle.cpp");
    *(_QWORD *)&v22.__val_ = 22;
    v22.__cat_ = std::generic_category();
    sub_2245321DC(&v22, (uint64_t)v19, (CFErrorRef *)&cf);
    if (a4)
    {
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v13 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v13;
    }
    v14 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    operator delete(__p);
    if (SHIBYTE(v19[2]) < 0)
      operator delete(v19[0]);
  }
  else
  {
    v8 = 2 * a3;
    v9 = (char *)operator new(v8);
    v10 = &v9[v8];
    memcpy(v9, a2, v8);
    if (*(_BYTE *)(a1 + 496))
    {
      v11 = *(void **)(a1 + 472);
      if (v11)
      {
        *(_QWORD *)(a1 + 480) = v11;
        operator delete(v11);
        *(_QWORD *)(a1 + 472) = 0;
        *(_QWORD *)(a1 + 480) = 0;
        *(_QWORD *)(a1 + 488) = 0;
      }
      *(_QWORD *)(a1 + 472) = v9;
      *(_QWORD *)(a1 + 480) = v10;
      *(_QWORD *)(a1 + 488) = v10;
    }
    else
    {
      *(_QWORD *)(a1 + 472) = v9;
      *(_QWORD *)(a1 + 480) = v10;
      *(_QWORD *)(a1 + 488) = v10;
      *(_BYTE *)(a1 + 496) = 1;
    }
  }
  return v5;
}

void sub_2232B8900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  sub_223167354((uint64_t)&a20);
  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2232B893C(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _DWORD *v17;
  int v18;
  CFTypeRef v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD v38[2];
  std::__shared_weak_count *v39;
  uint64_t (**v40)();
  __int128 v41;
  _OWORD v42[2];
  uint64_t (**v43)();
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  CFTypeRef cf;
  std::__shared_weak_count *v54;
  unsigned __int8 v55;
  _QWORD v56[2];
  std::__shared_weak_count *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t (**v63)();
  uint64_t *v64;
  std::__shared_weak_count *v65;
  _BYTE v66[24];
  _OWORD v67[2];

  sub_2242A8B78(&v63, a2, 1, 0);
  v5 = v64;
  v56[0] = &off_24EC715B8;
  v56[1] = v64;
  v57 = v65;
  if (v65)
  {
    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (!v5)
    goto LABEL_13;
  v9 = *v5;
  v8 = (std::__shared_weak_count *)v5[1];
  if (v8)
  {
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (v9)
        goto LABEL_11;
LABEL_13:
      v13 = 0;
      goto LABEL_14;
    }
  }
  if (!v9)
    goto LABEL_13;
LABEL_11:
  v13 = sub_2242A78F0((uint64_t)v56);
LABEL_14:
  v58 = v13;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 728303064;
  kdebug_trace();
  v56[0] = &off_24EC715B8;
  v14 = v57;
  if (v57)
  {
    v15 = (unint64_t *)&v57->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v66[23] = 9;
  strcpy(v66, "materials");
  v17 = operator new(4uLL);
  *v17 = 1278226488;
  v51 = v17 + 1;
  v52 = v17 + 1;
  v50 = v17;
  v46 = *(_QWORD *)(a1 + 1336);
  v47 = 1;
  v48 = 0;
  v49 = 0;
  sub_2232B409C((uint64_t)&cf, (uint64_t)&v63, (uint64_t *)v66, &v50, (unsigned int *)&v46);
  v51 = v17;
  operator delete(v17);
  if ((v66[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v66);
    v18 = v55;
    if (v55)
    {
LABEL_21:
      if (a3)
      {
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v19 = cf;
        if (cf)
          CFRetain(cf);
        *a3 = v19;
      }
LABEL_47:
      v31 = v54;
      if (v54)
      {
        v32 = (unint64_t *)&v54->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      goto LABEL_52;
    }
  }
  else
  {
    v18 = v55;
    if (v55)
      goto LABEL_21;
  }
  v38[0] = &off_24EC715B8;
  v38[1] = v64;
  v39 = v65;
  if (v65)
  {
    v20 = (unint64_t *)&v65->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  sub_22429724C((uint64_t)v38, (uint64_t)v66);
  v40 = &off_24EC28CD0;
  v41 = *(_OWORD *)&v66[8];
  v42[0] = v67[0];
  *(_OWORD *)((char *)v42 + 14) = *(_OWORD *)((char *)v67 + 14);
  v43 = &off_24EC29028;
  sub_2232BE79C((uint64_t)&v44, (uint64_t)&v40);
  sub_2232B7554(a1 + 984, (uint64_t)&v43);
  v43 = &off_24EC29028;
  v22 = v45;
  if (v45)
  {
    v23 = (unint64_t *)&v45->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v40 = &off_24EC28CD0;
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v38[0] = &off_24EC715B8;
  v28 = v39;
  if (v39)
  {
    v29 = (unint64_t *)&v39->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v55)
    goto LABEL_47;
LABEL_52:
  kdebug_trace();
  v63 = &off_24EC715B8;
  v34 = v65;
  if (v65)
  {
    v35 = (unint64_t *)&v65->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  return v18 == 0;
}

void sub_2232B8D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  sub_2232B7684(&a19);
  sub_2232B45D0(&a12);
  sub_2242A8F3C(&a9);
  sub_223224234((uint64_t)&a32);
  sub_2231874DC(v32 - 168);
  sub_2242A8F3C((_QWORD *)(v32 - 128));
  _Unwind_Resume(a1);
}

void sub_2232B8D84(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  operator delete(v1);
  if (*(char *)(v2 - 81) < 0)
  {
    operator delete(*(void **)(v2 - 104));
    sub_2231874DC(v2 - 168);
    sub_2242A8F3C((_QWORD *)(v2 - 128));
    _Unwind_Resume(a1);
  }
  sub_2231874DC(v2 - 168);
  sub_2242A8F3C((_QWORD *)(v2 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_2232B8DD8(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  int v23;
  CFTypeRef v24;
  _DWORD *v25;
  int v26;
  CFTypeRef v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  _BOOL4 v59;
  BOOL v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __int16 v69;
  __int128 v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  __int16 v80;
  unint64_t v81;
  uint64_t v82;
  __int128 v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  __int128 v87;
  unint64_t *v88;
  unint64_t v89;
  __int16 v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  __int128 v96;
  unint64_t *v97;
  unint64_t v98;
  __int16 v99;
  unint64_t v100;
  uint64_t v101;
  __int128 v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  __int16 v106;
  uint64_t v107;
  __int128 v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  __int128 v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  __int16 v139;
  uint64_t v140;
  __int128 v141;
  std::logic_error *exception;
  uint64_t v143;
  _QWORD v144[2];
  std::__shared_weak_count *v145;
  _BYTE v146[54];
  unsigned int v147;
  char v148;
  uint64_t v149;
  char v150;
  _DWORD *v151;
  _DWORD *v152;
  _DWORD *v153;
  _QWORD v154[2];
  std::__shared_weak_count *v155;
  uint64_t v156;
  std::string v157;
  _BYTE v158[40];
  uint64_t v159;
  __int16 v160;
  unsigned int v161;
  char v162;
  uint64_t v163;
  char v164;
  _DWORD *v165;
  _DWORD *v166;
  _DWORD *v167;
  CFTypeRef cf;
  std::__shared_weak_count *v169;
  unsigned __int8 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  _QWORD v176[2];
  std::__shared_weak_count *v177;
  uint64_t (**v178)();
  uint64_t *v179;
  std::__shared_weak_count *v180;
  uint64_t v181;
  _BYTE v182[24];
  _BYTE v183[40];
  __int128 v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  _BYTE v188[12];
  uint64_t v189;

  v189 = *MEMORY[0x24BDAC8D0];
  sub_2242A8B78(&v178, a2, 1, 0);
  v5 = v179;
  v176[0] = &off_24EC715B8;
  v176[1] = v179;
  v177 = v180;
  if (v180)
  {
    p_shared_owners = (unint64_t *)&v180->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v5)
  {
    v8 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_10;
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (v8)
      {
LABEL_11:
        v13 = sub_2242A78F0((uint64_t)v176);
        v176[0] = &off_24EC715B8;
        v14 = v177;
        if (!v177)
          goto LABEL_19;
        goto LABEL_15;
      }
    }
    else
    {
LABEL_10:
      if (v8)
        goto LABEL_11;
    }
  }
  v13 = 0;
  v176[0] = &off_24EC715B8;
  v14 = v177;
  if (!v177)
    goto LABEL_19;
LABEL_15:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_19:
  v171 = v13;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v175 = 728303072;
  kdebug_trace();
  if (!v179)
    goto LABEL_36;
  v17 = *v179;
  v18 = (std::__shared_weak_count *)v179[1];
  if (!v18)
    goto LABEL_25;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v17)
      goto LABEL_36;
  }
  else
  {
LABEL_25:
    if (!v17)
      goto LABEL_36;
  }
  if (v13 == 1278226488)
  {
    v182[23] = 10;
    strcpy(v182, "scene type");
    v22 = operator new(4uLL);
    *v22 = 1278226488;
    v166 = v22 + 1;
    v167 = v22 + 1;
    v165 = v22;
    LOBYTE(v161) = 0;
    v162 = 0;
    v163 = 0x100000001;
    v164 = 1;
    sub_2232B409C((uint64_t)&cf, (uint64_t)&v178, (uint64_t *)v182, &v165, &v161);
    v166 = v22;
    operator delete(v22);
    if ((v182[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v182);
      v23 = v170;
      if (v170)
      {
LABEL_29:
        if (a3)
        {
          if (*a3)
            CFRelease(*a3);
          *a3 = 0;
          v24 = cf;
          if (cf)
            CFRetain(cf);
          *a3 = v24;
        }
LABEL_210:
        v131 = v169;
        if (v169)
        {
          v132 = (unint64_t *)&v169->__shared_owners_;
          do
            v133 = __ldaxr(v132);
          while (__stlxr(v133 - 1, v132));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
            if (v23)
              goto LABEL_215;
            goto LABEL_217;
          }
        }
LABEL_214:
        if (v23)
          goto LABEL_215;
LABEL_217:
        v134 = 1;
        goto LABEL_218;
      }
    }
    else
    {
      v23 = v170;
      if (v170)
        goto LABEL_29;
    }
    v156 = 0x100000001;
    v157.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC28A18;
    *(_QWORD *)v188 = &off_24EC27B70;
    sub_22449A504(&v156, (uint64_t)v182);
    v35 = operator new();
    *(_QWORD *)v35 = &off_24EC279D0;
    *(_QWORD *)(v35 + 56) = *(_QWORD *)&v183[32];
    v36 = v187;
    *(_QWORD *)(v35 + 80) = v185;
    *(_OWORD *)(v35 + 8) = *(_OWORD *)&v182[8];
    *(_OWORD *)(v35 + 24) = *(_OWORD *)v183;
    *(_OWORD *)(v35 + 40) = *(_OWORD *)&v183[16];
    *(_OWORD *)(v35 + 64) = v184;
    *(_QWORD *)(v35 + 104) = v36;
    *(_OWORD *)(v35 + 88) = v186;
    v181 = v35;
    *(_QWORD *)v146 = v35;
    v37 = (_QWORD *)operator new();
    *v37 = &off_24EC27BA8;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v35;
    *(_QWORD *)&v146[8] = v37;
    v181 = 0;
    sub_2232BED4C((uint64_t *)&v157.__r_.__value_.__l.__size_, (uint64_t *)v146);
    v38 = *(std::__shared_weak_count **)&v146[8];
    if (*(_QWORD *)&v146[8])
    {
      v39 = (unint64_t *)(*(_QWORD *)&v146[8] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = v181;
    if (v181)
    {
      v42 = *(void **)(v181 + 72);
      if (v42)
        free(v42);
      *(_QWORD *)(v41 + 72) = 0;
      MEMORY[0x227684CE8](v41, 0x1091C40A44A61E0);
    }
    v154[0] = &off_24EC715B8;
    v154[1] = v179;
    v155 = v180;
    if (v180)
    {
      v43 = (unint64_t *)&v180->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    sub_22328CFD4((uint64_t)v154, v182);
    v154[0] = &off_24EC715B8;
    v45 = v155;
    if (v155)
    {
      v46 = (unint64_t *)&v155->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = *(_QWORD *)&v182[8];
    if (*(_QWORD *)&v182[8])
    {
      v49 = *(std::__shared_weak_count **)&v182[16];
      if (*(_QWORD *)&v182[16])
      {
        v50 = (unint64_t *)(*(_QWORD *)&v182[16] + 8);
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
        do
          v52 = __ldaxr(v50);
        while (__stlxr(v52 - 1, v50));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
        v48 = *(_QWORD *)&v182[8];
        v53 = *(std::__shared_weak_count **)&v182[16];
        if (*(_QWORD *)&v182[16])
        {
          v54 = (unint64_t *)(*(_QWORD *)&v182[16] + 8);
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
          do
            v56 = __ldaxr(v54);
          while (__stlxr(v56 - 1, v54));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
      }
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v48 + 96))(v188, v48, 1);
      v57 = *(_DWORD *)&v183[8];
      if (*(_DWORD *)&v183[8] >= 4u)
        v57 = 4;
      if (!v57)
        goto LABEL_136;
    }
    else
    {
      *(_QWORD *)v188 = 0;
      v57 = *(_DWORD *)&v183[8];
      if (*(_DWORD *)&v183[8] >= 4u)
        v57 = 4;
      if (!v57)
      {
LABEL_136:
        if (*(_BYTE *)(a1 + 1128))
        {
          v87 = *(_OWORD *)&v157.__r_.__value_.__r.__words[1];
          if (v157.__r_.__value_.__r.__words[2])
          {
            v88 = (unint64_t *)(v157.__r_.__value_.__r.__words[2] + 8);
            do
              v89 = __ldxr(v88);
            while (__stxr(v89 + 1, v88));
            v90 = v160;
            do
              v91 = __ldxr(v88);
            while (__stxr(v91 + 1, v88));
            *(_OWORD *)v146 = *(_OWORD *)&v158[8];
            *(_OWORD *)&v146[16] = *(_OWORD *)&v158[24];
            v92 = *(_QWORD *)v158;
            *(_QWORD *)&v146[32] = v159;
            do
              v93 = __ldxr(v88);
            while (__stxr(v93 + 1, v88));
            do
              v94 = __ldaxr(v88);
            while (__stlxr(v94 - 1, v88));
            if (!v94)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v87 + 1) + 16))(*((_QWORD *)&v87 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v87 + 1));
            }
            do
              v95 = __ldaxr(v88);
            while (__stlxr(v95 - 1, v88));
            if (!v95)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v87 + 1) + 16))(*((_QWORD *)&v87 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v87 + 1));
            }
          }
          else
          {
            v90 = v160;
            *(_OWORD *)v146 = *(_OWORD *)&v158[8];
            *(_OWORD *)&v146[16] = *(_OWORD *)&v158[24];
            v92 = *(_QWORD *)v158;
            *(_QWORD *)&v146[32] = v159;
          }
          *(_QWORD *)(a1 + 1056) = v87;
          v120 = *(std::__shared_weak_count **)(a1 + 1064);
          *(_QWORD *)(a1 + 1064) = *((_QWORD *)&v87 + 1);
          if (v120)
          {
            v121 = (unint64_t *)&v120->__shared_owners_;
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
          }
          *(_QWORD *)(a1 + 1072) = v92;
          *(_QWORD *)(a1 + 1112) = *(_QWORD *)&v146[32];
          v123 = *(_OWORD *)&v146[16];
          *(_OWORD *)(a1 + 1080) = *(_OWORD *)v146;
          *(_OWORD *)(a1 + 1096) = v123;
          *(_WORD *)(a1 + 1120) = v90;
          v124 = *(_QWORD *)v188;
          *(_QWORD *)v188 = 0;
          if (v124)
LABEL_198:
            (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
        }
        else
        {
          *(_QWORD *)(a1 + 1048) = &off_24EC27290;
          v96 = *(_OWORD *)&v157.__r_.__value_.__r.__words[1];
          if (v157.__r_.__value_.__r.__words[2])
          {
            v97 = (unint64_t *)(v157.__r_.__value_.__r.__words[2] + 8);
            do
              v98 = __ldxr(v97);
            while (__stxr(v98 + 1, v97));
            v99 = v160;
            do
              v100 = __ldxr(v97);
            while (__stxr(v100 + 1, v97));
            v101 = *(_QWORD *)v158;
            *(_QWORD *)(a1 + 1112) = v159;
            v102 = *(_OWORD *)&v158[24];
            *(_OWORD *)(a1 + 1080) = *(_OWORD *)&v158[8];
            *(_OWORD *)(a1 + 1096) = v102;
            do
              v103 = __ldxr(v97);
            while (__stxr(v103 + 1, v97));
            *(_OWORD *)(a1 + 1056) = v96;
            *(_QWORD *)(a1 + 1072) = v101;
            *(_WORD *)(a1 + 1120) = v99;
            do
              v104 = __ldaxr(v97);
            while (__stlxr(v104 - 1, v97));
            if (!v104)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v96 + 1) + 16))(*((_QWORD *)&v96 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v96 + 1));
            }
            do
              v105 = __ldaxr(v97);
            while (__stlxr(v105 - 1, v97));
            if (!v105)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v96 + 1) + 16))(*((_QWORD *)&v96 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v96 + 1));
            }
          }
          else
          {
            v139 = v160;
            *(_OWORD *)(a1 + 1056) = v157.__r_.__value_.__l.__size_;
            v140 = v159;
            *(_QWORD *)(a1 + 1072) = *(_QWORD *)v158;
            *(_QWORD *)(a1 + 1112) = v140;
            v141 = *(_OWORD *)&v158[24];
            *(_OWORD *)(a1 + 1080) = *(_OWORD *)&v158[8];
            *(_OWORD *)(a1 + 1096) = v141;
            *(_WORD *)(a1 + 1120) = v139;
          }
          *(_BYTE *)(a1 + 1128) = 1;
          v124 = *(_QWORD *)v188;
          *(_QWORD *)v188 = 0;
          if (v124)
            goto LABEL_198;
        }
        v125 = *(std::__shared_weak_count **)&v182[16];
        if (*(_QWORD *)&v182[16])
        {
          v126 = (unint64_t *)(*(_QWORD *)&v182[16] + 8);
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
        v157.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC28A18;
        v128 = (std::__shared_weak_count *)v157.__r_.__value_.__r.__words[2];
        if (v157.__r_.__value_.__r.__words[2])
        {
          v129 = (unint64_t *)(v157.__r_.__value_.__r.__words[2] + 8);
          do
            v130 = __ldaxr(v129);
          while (__stlxr(v130 - 1, v129));
          if (!v130)
          {
            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
            std::__shared_weak_count::__release_weak(v128);
          }
        }
        if (!v170)
          goto LABEL_214;
        goto LABEL_210;
      }
    }
    **(_BYTE **)v158 = **(_BYTE **)v183;
    if (v57 != 1)
    {
      *(_BYTE *)(*(_QWORD *)v158 + 1) = *(_BYTE *)(*(_QWORD *)v183 + *(unsigned int *)&v183[16]);
      if (v57 != 2)
      {
        *(_BYTE *)(*(_QWORD *)v158 + 2) = *(_BYTE *)(*(_QWORD *)v183 + (2 * *(_DWORD *)&v183[16]));
        if (v57 != 3)
          *(_BYTE *)(*(_QWORD *)v158 + 3) = *(_BYTE *)(*(_QWORD *)v183 + (3 * *(_DWORD *)&v183[16]));
      }
    }
    goto LABEL_136;
  }
LABEL_36:
  v182[23] = 10;
  strcpy(v182, "scene type");
  v25 = operator new(4uLL);
  *v25 = 1111970369;
  v152 = v25 + 1;
  v153 = v25 + 1;
  v151 = v25;
  LOBYTE(v147) = 0;
  v148 = 0;
  v149 = 0x100000001;
  v150 = 1;
  sub_2232B409C((uint64_t)&cf, (uint64_t)&v178, (uint64_t *)v182, &v151, &v147);
  v152 = v25;
  operator delete(v25);
  if ((v182[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v182);
    v26 = v170;
    if (v170)
    {
LABEL_38:
      if (a3)
      {
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v27 = cf;
        if (cf)
          CFRetain(cf);
        *a3 = v27;
      }
      goto LABEL_179;
    }
  }
  else
  {
    v26 = v170;
    if (v170)
      goto LABEL_38;
  }
  v144[0] = &off_24EC715B8;
  v144[1] = v179;
  v145 = v180;
  if (v180)
  {
    v28 = (unint64_t *)&v180->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  sub_22429724C((uint64_t)v144, (uint64_t)&v157);
  v30 = *(_OWORD *)&v157.__r_.__value_.__r.__words[1];
  *(_QWORD *)v146 = &off_24EC28CD0;
  *(_OWORD *)&v146[8] = *(_OWORD *)&v157.__r_.__value_.__r.__words[1];
  *(_OWORD *)&v146[38] = *(_OWORD *)&v158[14];
  *(_OWORD *)&v146[24] = *(_OWORD *)v158;
  *(_QWORD *)v182 = &off_24EC28A18;
  if ((*(_QWORD *)&v158[22] >> 16) != 25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232BEEB0((uint64_t)&v157, (uint64_t)v146);
    std::logic_error::logic_error(exception, &v157);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v143 = a1;
  if (v157.__r_.__value_.__l.__size_)
  {
    if (v157.__r_.__value_.__r.__words[2])
    {
      v31 = (unint64_t *)(v157.__r_.__value_.__r.__words[2] + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v30;
      do
        v33 = __ldxr(v31);
      while (__stxr(v33 + 1, v31));
      do
        v34 = __ldaxr(v31);
      while (__stlxr(v34 - 1, v31));
      if (!v34)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v30 + 1) + 16))(*((_QWORD *)&v30 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v30 + 1));
      }
    }
    else
    {
      *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v157.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    *(_OWORD *)&v157.__r_.__value_.__l.__data_ = 0uLL;
  }
  v58 = *(_QWORD *)&v146[40];
  v59 = *(_DWORD *)&v146[24] == 0;
  if (!*(_DWORD *)&v146[28])
    v59 = 1;
  v60 = !v59;
  if (v59)
    v61 = 0;
  else
    v61 = (unint64_t)*(unsigned int *)&v146[32] << 32;
  v62 = v61 | (4 * (*(_DWORD *)&v146[24] != 0));
  v63 = *(_QWORD *)&v146[24];
  if (!v60)
    v63 = 0;
  *(_QWORD *)&v188[4] = v63;
  v64 = v63;
  *(_DWORD *)v188 = 4;
  v65 = *(_QWORD *)v188;
  v66 = HIDWORD(v63);
  *(_DWORD *)v188 = 1;
  *(_QWORD *)&v188[4] = v61 | (4 * (*(_DWORD *)&v146[24] != 0));
  v67 = *(_QWORD *)v188;
  v68 = HIDWORD(v61);
  if (HIDWORD(v63) * HIDWORD(v61) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v69 = *(_WORD *)&v146[52];
  v70 = *(_OWORD *)&v157.__r_.__value_.__l.__data_;
  if (v157.__r_.__value_.__l.__size_)
  {
    v71 = (unint64_t *)(v157.__r_.__value_.__l.__size_ + 8);
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  *(_OWORD *)&v182[8] = v70;
  *(_QWORD *)v183 = v58;
  *(_QWORD *)&v183[8] = v65;
  *(_QWORD *)&v183[20] = v67;
  *(_DWORD *)&v183[16] = v66;
  *(_DWORD *)&v183[28] = v68;
  *(_QWORD *)&v183[32] = v64;
  *(_QWORD *)&v184 = v62;
  WORD4(v184) = v69;
  if (!*((_QWORD *)&v70 + 1))
    goto LABEL_231;
  v73 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (!v74)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v70 + 1) + 16))(*((_QWORD *)&v70 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v70 + 1));
    if (*(_BYTE *)(v143 + 1128))
    {
LABEL_112:
      sub_2232BC5EC(v143 + 1048, (uint64_t)v182);
      *(_QWORD *)v182 = &off_24EC28A18;
      v75 = *(std::__shared_weak_count **)&v182[16];
      if (!*(_QWORD *)&v182[16])
        goto LABEL_170;
      goto LABEL_166;
    }
  }
  else
  {
LABEL_231:
    if (*(_BYTE *)(v143 + 1128))
      goto LABEL_112;
  }
  *(_QWORD *)(v143 + 1048) = &off_24EC27290;
  v76 = *(_QWORD *)&v182[8];
  v77 = *(std::__shared_weak_count **)&v182[16];
  if (*(_QWORD *)&v182[16])
  {
    v78 = (unint64_t *)(*(_QWORD *)&v182[16] + 8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
    v80 = WORD4(v184);
    do
      v81 = __ldxr(v78);
    while (__stxr(v81 + 1, v78));
    v82 = *(_QWORD *)v183;
    v83 = *(_OWORD *)&v183[24];
    *(_OWORD *)(v143 + 1080) = *(_OWORD *)&v183[8];
    *(_OWORD *)(v143 + 1096) = v83;
    *(_QWORD *)(v143 + 1112) = v184;
    do
      v84 = __ldxr(v78);
    while (__stxr(v84 + 1, v78));
    *(_QWORD *)(v143 + 1056) = v76;
    *(_QWORD *)(v143 + 1064) = v77;
    *(_QWORD *)(v143 + 1072) = v82;
    *(_WORD *)(v143 + 1120) = v80;
    do
      v85 = __ldaxr(v78);
    while (__stlxr(v85 - 1, v78));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
    do
      v86 = __ldaxr(v78);
    while (__stlxr(v86 - 1, v78));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  else
  {
    v106 = WORD4(v184);
    v107 = *(_QWORD *)v183;
    *(_QWORD *)(v143 + 1056) = *(_QWORD *)&v182[8];
    *(_QWORD *)(v143 + 1064) = 0;
    *(_QWORD *)(v143 + 1072) = v107;
    v108 = *(_OWORD *)&v183[24];
    *(_OWORD *)(v143 + 1080) = *(_OWORD *)&v183[8];
    *(_OWORD *)(v143 + 1096) = v108;
    *(_QWORD *)(v143 + 1112) = v184;
    *(_WORD *)(v143 + 1120) = v106;
  }
  *(_BYTE *)(v143 + 1128) = 1;
  *(_QWORD *)v182 = &off_24EC28A18;
  v75 = *(std::__shared_weak_count **)&v182[16];
  if (*(_QWORD *)&v182[16])
  {
LABEL_166:
    v109 = (unint64_t *)&v75->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
LABEL_170:
  *(_QWORD *)v146 = &off_24EC28CD0;
  v111 = *(std::__shared_weak_count **)&v146[16];
  if (!*(_QWORD *)&v146[16])
    goto LABEL_174;
  v112 = (unint64_t *)(*(_QWORD *)&v146[16] + 8);
  do
    v113 = __ldaxr(v112);
  while (__stlxr(v113 - 1, v112));
  if (!v113)
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v111);
    v144[0] = &off_24EC715B8;
    v114 = v145;
    if (!v145)
      goto LABEL_178;
  }
  else
  {
LABEL_174:
    v144[0] = &off_24EC715B8;
    v114 = v145;
    if (!v145)
      goto LABEL_178;
  }
  v115 = (unint64_t *)&v114->__shared_owners_;
  do
    v116 = __ldaxr(v115);
  while (__stlxr(v116 - 1, v115));
  if (!v116)
  {
    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
    std::__shared_weak_count::__release_weak(v114);
    if (!v170)
      goto LABEL_217;
    goto LABEL_179;
  }
LABEL_178:
  if (!v170)
    goto LABEL_217;
LABEL_179:
  v117 = v169;
  if (!v169)
    goto LABEL_183;
  v118 = (unint64_t *)&v169->__shared_owners_;
  do
    v119 = __ldaxr(v118);
  while (__stlxr(v119 - 1, v118));
  if (!v119)
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
    if (!v26)
      goto LABEL_217;
  }
  else
  {
LABEL_183:
    if (!v26)
      goto LABEL_217;
  }
LABEL_215:
  v134 = 0;
LABEL_218:
  kdebug_trace();
  v178 = &off_24EC715B8;
  v135 = v180;
  if (v180)
  {
    v136 = (unint64_t *)&v180->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  return v134;
}

void sub_2232B9CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;

  sub_22328D1D0(v61 - 232);
  sub_2232B9E70(&__p);
  sub_223224234((uint64_t)&a50);
  sub_2231874DC((uint64_t)&a53);
  sub_2242A8F3C(&a61);
  _Unwind_Resume(a1);
}

void sub_2232B9DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_2242A8F3C(&a55);
  sub_2242A8F3C(&a58);
  _Unwind_Resume(a1);
}

void sub_2232B9E50(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2232B9E70(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC28A18;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_2232B9EE4(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  int v23;
  CFTypeRef v24;
  _DWORD *v25;
  int v26;
  CFTypeRef v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _DWORD *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  __int16 v74;
  unint64_t v75;
  __int128 v76;
  _DWORD *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  __int128 v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  __int16 v100;
  uint64_t v101;
  __int128 v102;
  _QWORD v103[2];
  std::__shared_weak_count *v104;
  _BYTE v105[54];
  unsigned int v106;
  char v107;
  uint64_t v108;
  char v109;
  _DWORD *v110;
  _DWORD *v111;
  _DWORD *v112;
  uint64_t v113;
  _QWORD v114[2];
  std::__shared_weak_count *v115;
  _BYTE __p[24];
  _DWORD *v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  __int16 v121;
  unsigned int v122;
  char v123;
  uint64_t v124;
  char v125;
  _DWORD *v126;
  _DWORD *v127;
  _DWORD *v128;
  CFTypeRef v129;
  std::__shared_weak_count *v130;
  unsigned __int8 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  _QWORD v137[2];
  std::__shared_weak_count *v138;
  uint64_t (**v139)();
  uint64_t *v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  __int128 v143;
  _BYTE v144[30];

  sub_2242A8B78(&v139, a2, 1, 0);
  v5 = v140;
  v137[0] = &off_24EC715B8;
  v137[1] = v140;
  v138 = v141;
  if (v141)
  {
    p_shared_owners = (unint64_t *)&v141->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v5)
  {
    v9 = *v5;
    v8 = (std::__shared_weak_count *)v5[1];
    if (!v8)
      goto LABEL_10;
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (v9)
      {
LABEL_11:
        v13 = sub_2242A78F0((uint64_t)v137);
        v137[0] = &off_24EC715B8;
        v14 = v138;
        if (!v138)
          goto LABEL_19;
        goto LABEL_15;
      }
    }
    else
    {
LABEL_10:
      if (v9)
        goto LABEL_11;
    }
  }
  v13 = 0;
  v137[0] = &off_24EC715B8;
  v14 = v138;
  if (!v138)
    goto LABEL_19;
LABEL_15:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_19:
  v132 = v13;
  v133 = 0;
  v134 = 0;
  v135 = 0;
  v136 = 728303080;
  kdebug_trace();
  if (!v140)
    goto LABEL_36;
  v18 = *v140;
  v17 = (std::__shared_weak_count *)v140[1];
  if (!v17)
    goto LABEL_25;
  v19 = (unint64_t *)&v17->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (!v18)
      goto LABEL_36;
  }
  else
  {
LABEL_25:
    if (!v18)
      goto LABEL_36;
  }
  if (v13 == 1278226534)
  {
    strcpy(__p, "scene type probability");
    __p[23] = 22;
    v22 = operator new(4uLL);
    *v22 = 1278226534;
    v127 = v22 + 1;
    v128 = v22 + 1;
    v126 = v22;
    LOBYTE(v122) = 0;
    v123 = 0;
    v124 = 0x100000001;
    v125 = 1;
    sub_2232B409C((uint64_t)&v129, (uint64_t)&v139, (uint64_t *)__p, &v126, &v122);
    v127 = v22;
    operator delete(v22);
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      v23 = v131;
      if (v131)
      {
LABEL_29:
        if (a3)
        {
          if (*a3)
            CFRelease(*a3);
          *a3 = 0;
          v24 = v129;
          if (v129)
            CFRetain(v129);
          *a3 = v24;
        }
LABEL_156:
        v92 = v130;
        if (v130)
        {
          v93 = (unint64_t *)&v130->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
            if (v23)
              goto LABEL_161;
            goto LABEL_163;
          }
        }
LABEL_160:
        if (v23)
          goto LABEL_161;
LABEL_163:
        v95 = 1;
        goto LABEL_164;
      }
    }
    else
    {
      v23 = v131;
      if (v131)
        goto LABEL_29;
    }
    v142 = 0x100000001;
    *(_QWORD *)__p = &off_24EC28D40;
    sub_2232BF1E4(&v142, (uint64_t *)&__p[8]);
    v114[0] = &off_24EC715B8;
    v114[1] = v140;
    v115 = v141;
    if (v141)
    {
      v42 = (unint64_t *)&v141->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    sub_223291ECC((uint64_t)v114, &v142);
    v114[0] = &off_24EC715B8;
    v44 = v115;
    if (v115)
    {
      v45 = (unint64_t *)&v115->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = v143;
    if ((_QWORD)v143)
    {
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
      if (*((_QWORD *)&v143 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
        do
          v51 = __ldaxr(v49);
        while (__stlxr(v51 - 1, v49));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
        v52 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
        v47 = v143;
        if (*((_QWORD *)&v143 + 1))
        {
          v53 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
          do
            v55 = __ldaxr(v53);
          while (__stlxr(v55 - 1, v53));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v47 + 96))(&v113, v47, 1);
      if (*(_DWORD *)&v144[8] >= 4u)
        v56 = 4;
      else
        v56 = *(_DWORD *)&v144[8];
      if (!v56)
      {
LABEL_109:
        if (*(_BYTE *)(a1 + 1216))
        {
          v61 = *(_QWORD *)&__p[8];
          v60 = *(std::__shared_weak_count **)&__p[16];
          if (*(_QWORD *)&__p[16])
          {
            v62 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
            do
              v63 = __ldxr(v62);
            while (__stxr(v63 + 1, v62));
            v64 = v121;
            do
              v65 = __ldxr(v62);
            while (__stxr(v65 + 1, v62));
            *(_OWORD *)v105 = v118;
            *(_OWORD *)&v105[16] = v119;
            v66 = v117;
            *(_QWORD *)&v105[32] = v120;
            do
              v67 = __ldxr(v62);
            while (__stxr(v67 + 1, v62));
            do
              v68 = __ldaxr(v62);
            while (__stlxr(v68 - 1, v62));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
            do
              v69 = __ldaxr(v62);
            while (__stlxr(v69 - 1, v62));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          else
          {
            v64 = v121;
            *(_OWORD *)v105 = v118;
            *(_OWORD *)&v105[16] = v119;
            v66 = v117;
            *(_QWORD *)&v105[32] = v120;
          }
          *(_QWORD *)(a1 + 1144) = v61;
          v81 = *(std::__shared_weak_count **)(a1 + 1152);
          *(_QWORD *)(a1 + 1152) = v60;
          if (v81)
          {
            v82 = (unint64_t *)&v81->__shared_owners_;
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          *(_QWORD *)(a1 + 1160) = v66;
          v84 = *(_OWORD *)&v105[16];
          *(_OWORD *)(a1 + 1168) = *(_OWORD *)v105;
          *(_OWORD *)(a1 + 1184) = v84;
          *(_QWORD *)(a1 + 1200) = *(_QWORD *)&v105[32];
          *(_WORD *)(a1 + 1208) = v64;
          v85 = v113;
          v113 = 0;
          if (v85)
LABEL_144:
            (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
        }
        else
        {
          *(_QWORD *)(a1 + 1136) = &off_24EC26EB0;
          v70 = *(_QWORD *)&__p[8];
          v71 = *(std::__shared_weak_count **)&__p[16];
          if (*(_QWORD *)&__p[16])
          {
            v72 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
            v74 = v121;
            do
              v75 = __ldxr(v72);
            while (__stxr(v75 + 1, v72));
            v76 = v119;
            *(_OWORD *)(a1 + 1168) = v118;
            *(_OWORD *)(a1 + 1184) = v76;
            v77 = v117;
            *(_QWORD *)(a1 + 1200) = v120;
            do
              v78 = __ldxr(v72);
            while (__stxr(v78 + 1, v72));
            *(_QWORD *)(a1 + 1144) = v70;
            *(_QWORD *)(a1 + 1152) = v71;
            *(_QWORD *)(a1 + 1160) = v77;
            *(_WORD *)(a1 + 1208) = v74;
            do
              v79 = __ldaxr(v72);
            while (__stlxr(v79 - 1, v72));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
            do
              v80 = __ldaxr(v72);
            while (__stlxr(v80 - 1, v72));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          else
          {
            v100 = v121;
            *(_QWORD *)(a1 + 1144) = *(_QWORD *)&__p[8];
            *(_QWORD *)(a1 + 1152) = 0;
            v101 = v120;
            *(_QWORD *)(a1 + 1160) = v117;
            v102 = v119;
            *(_OWORD *)(a1 + 1168) = v118;
            *(_OWORD *)(a1 + 1184) = v102;
            *(_QWORD *)(a1 + 1200) = v101;
            *(_WORD *)(a1 + 1208) = v100;
          }
          *(_BYTE *)(a1 + 1216) = 1;
          v85 = v113;
          v113 = 0;
          if (v85)
            goto LABEL_144;
        }
        v86 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
        if (*((_QWORD *)&v143 + 1))
        {
          v87 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        *(_QWORD *)__p = &off_24EC28D40;
        v89 = *(std::__shared_weak_count **)&__p[16];
        if (*(_QWORD *)&__p[16])
        {
          v90 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        if (!v131)
          goto LABEL_160;
        goto LABEL_156;
      }
    }
    else
    {
      v113 = 0;
      if (*(_DWORD *)&v144[8] >= 4u)
        v56 = 4;
      else
        v56 = *(_DWORD *)&v144[8];
      if (!v56)
        goto LABEL_109;
    }
    v57 = *(unsigned int *)&v144[16];
    v58 = *(_QWORD *)v144;
    v59 = v117;
    *v117 = **(_DWORD **)v144;
    if (v56 != 1)
    {
      v59[1] = *(_DWORD *)(v58 + 4 * v57);
      if (v56 != 2)
      {
        v59[2] = *(_DWORD *)(v58 + 4 * (2 * v57));
        if (v56 != 3)
          v59[3] = *(_DWORD *)(v58 + 4 * (3 * v57));
      }
    }
    goto LABEL_109;
  }
LABEL_36:
  strcpy(__p, "scene type probability");
  __p[23] = 22;
  v25 = operator new(4uLL);
  *v25 = 1380410945;
  v111 = v25 + 1;
  v112 = v25 + 1;
  v110 = v25;
  LOBYTE(v106) = 0;
  v107 = 0;
  v108 = 0x100000001;
  v109 = 1;
  sub_2232B409C((uint64_t)&v129, (uint64_t)&v139, (uint64_t *)__p, &v110, &v106);
  v111 = v25;
  operator delete(v25);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    v26 = v131;
    if (v131)
    {
LABEL_38:
      if (a3)
      {
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v27 = v129;
        if (v129)
          CFRetain(v129);
        *a3 = v27;
      }
      goto LABEL_62;
    }
  }
  else
  {
    v26 = v131;
    if (v131)
      goto LABEL_38;
  }
  v103[0] = &off_24EC715B8;
  v103[1] = v140;
  v104 = v141;
  if (v141)
  {
    v28 = (unint64_t *)&v141->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  sub_22429724C((uint64_t)v103, (uint64_t)&v142);
  *(_QWORD *)v105 = &off_24EC28CD0;
  *(_OWORD *)&v105[8] = v143;
  *(_OWORD *)&v105[24] = *(_OWORD *)v144;
  *(_OWORD *)&v105[38] = *(_OWORD *)&v144[14];
  *(_QWORD *)__p = &off_24EC28D40;
  sub_2232BF504((uint64_t)v105, (uint64_t)&__p[8]);
  sub_2232BAAA0(a1 + 1136, (uint64_t)__p);
  *(_QWORD *)__p = &off_24EC28D40;
  v30 = *(std::__shared_weak_count **)&__p[16];
  if (*(_QWORD *)&__p[16])
  {
    v31 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *(_QWORD *)v105 = &off_24EC28CD0;
  v33 = *(std::__shared_weak_count **)&v105[16];
  if (!*(_QWORD *)&v105[16])
    goto LABEL_57;
  v34 = (unint64_t *)(*(_QWORD *)&v105[16] + 8);
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    v103[0] = &off_24EC715B8;
    v36 = v104;
    if (!v104)
      goto LABEL_61;
  }
  else
  {
LABEL_57:
    v103[0] = &off_24EC715B8;
    v36 = v104;
    if (!v104)
      goto LABEL_61;
  }
  v37 = (unint64_t *)&v36->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    if (!v131)
      goto LABEL_163;
    goto LABEL_62;
  }
LABEL_61:
  if (!v131)
    goto LABEL_163;
LABEL_62:
  v39 = v130;
  if (!v130)
    goto LABEL_66;
  v40 = (unint64_t *)&v130->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    if (!v26)
      goto LABEL_163;
  }
  else
  {
LABEL_66:
    if (!v26)
      goto LABEL_163;
  }
LABEL_161:
  v95 = 0;
LABEL_164:
  kdebug_trace();
  v139 = &off_24EC715B8;
  v96 = v141;
  if (v141)
  {
    v97 = (unint64_t *)&v141->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  return v95;
}

void sub_2232BA914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  sub_2232920C8(v36 - 136);
  sub_2232BAA2C(&__p);
  sub_223224234(v36 - 248);
  sub_2231874DC(v36 - 224);
  sub_2242A8F3C((_QWORD *)(v36 - 160));
  _Unwind_Resume(a1);
}

void sub_2232BA9B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2242A8F3C((_QWORD *)(v1 - 184));
  sub_2242A8F3C((_QWORD *)(v1 - 160));
  _Unwind_Resume(a1);
}

_QWORD *sub_2232BAA2C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC28D40;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_2232BAAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  if (*(_BYTE *)(a1 + 80))
  {
    sub_2232BC5EC(a1, a2);
    return a1;
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC26EB0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a2 + 72);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(_QWORD *)(a2 + 24);
      v11 = *(_OWORD *)(a2 + 32);
      v12 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 32) = v11;
      *(_OWORD *)(a1 + 48) = v12;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v10;
      *(_WORD *)(a1 + 72) = v8;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v16 = *(_WORD *)(a2 + 72);
      v17 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = v17;
      v18 = *(_OWORD *)(a2 + 32);
      v19 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 32) = v18;
      *(_OWORD *)(a1 + 48) = v19;
      *(_WORD *)(a1 + 72) = v16;
    }
    *(_BYTE *)(a1 + 80) = 1;
    return a1;
  }
}

BOOL sub_2232BABE0(_DWORD *a1, _DWORD *a2, CFTypeRef *a3)
{
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *__p;
  void *v11;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a2)
  {
    a1[307] = *a2;
    a1[308] = a2[1];
    a1[309] = a2[2];
  }
  else
  {
    v11 = operator new(0x38uLL);
    v12 = xmmword_2245C4510;
    strcpy((char *)v11, "Scene type indoor/outdoor probability pointer is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/FrameBundle.cpp");
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)&v11, (CFErrorRef *)&cf);
    if (a3)
    {
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v5;
    }
    v6 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(__p);
    if (SHIBYTE(v12) < 0)
      operator delete(v11);
  }
  return a2 != 0;
}

void sub_2232BAD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  sub_223167354((uint64_t)&a18);
  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2232BADB0(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  unsigned int v4;
  char *v6;
  std::__shared_weak_count *v7;
  CFTypeRef v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::string __p;
  std::error_condition v16;

  v4 = a2 - 1;
  if (a2 - 1 > 1)
  {
    v6 = (char *)operator new(0x28uLL);
    strcpy(v6, "Monitoring mode %d is unexpected");
    v12 = (char *)operator new(0x68uLL);
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/FrameBundle.cpp");
    *(_QWORD *)&v16.__val_ = 22;
    v16.__cat_ = std::generic_category();
    sub_22456D250(v6, &__p, a2);
    sub_2245321DC(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!a3)
      {
LABEL_5:
        v7 = v14;
        if (!v14)
        {
LABEL_17:
          operator delete(v12);
          operator delete(v6);
          return v4 < 2;
        }
LABEL_13:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        goto LABEL_17;
      }
    }
    else if (!a3)
    {
      goto LABEL_5;
    }
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v8 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v8;
    v7 = v14;
    if (!v14)
      goto LABEL_17;
    goto LABEL_13;
  }
  *(_BYTE *)(a1 + 1408) = a2;
  return v4 < 2;
}

void sub_2232BAF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;

  sub_223167354((uint64_t)&a14);
  operator delete(v22);
  operator delete(v21);
  _Unwind_Resume(a1);
}

void sub_2232BAF8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2232BAFA0(std::string *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  const std::error_category *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::string __p;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::error_condition v20;
  std::string v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  memset(&v21, 0, sizeof(v21));
  sub_2231816F0(&v21, __src, (std::string *)((char *)__src + a2));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)a3 + 368))(&v17, a3, &v21, 8);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v21.__r_.__value_.__l.__data_);
    v8 = v18;
    if (v18)
      goto LABEL_3;
  }
  else
  {
    v8 = v18;
    if (v18)
    {
LABEL_3:
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      sub_223BF4FB8(v9, a4);
      goto LABEL_7;
    }
  }
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)"Error opening file: ";
  v21.__r_.__value_.__l.__size_ = 20;
  v21.__r_.__value_.__r.__words[2] = (std::string::size_type)__src;
  v22 = a2;
  sub_2231A9820((uint64_t)&v21, (uint64_t)&v23, 0, 0, &__p);
  v10 = std::generic_category();
  *(_QWORD *)&v20.__val_ = 22;
  v20.__cat_ = v10;
  sub_2245321DC(&v20, (uint64_t)&__p, (CFErrorRef *)&v16);
  v11 = v16;
  v16 = 0uLL;
  *(_OWORD *)a4 = v11;
  *(_BYTE *)(a4 + 1824) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
  v12 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2232BB11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_2242BB3F8((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  sub_2242BB3F8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_2232BB178@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFDataRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  const UInt8 *BytePtr;
  unsigned int Length;
  uint64_t v11;
  char *v12;
  int32x4_t v13;
  uint64_t v14;
  _QWORD *exception;
  uint64_t v17;
  char *v18[227];
  _OWORD v19[4];
  _QWORD v20[2];
  void (**v21)();
  void *__p;
  void *v23;
  uint64_t v24;
  _QWORD v25[2];
  std::ios_base v26;
  uint64_t v27;
  int v28;
  _QWORD __sb[8];
  unsigned int v30;
  _BYTE v31[784];
  __int128 v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  _QWORD v42[5];
  char v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;
  char v57;
  char v58;
  char v59;
  __int128 v60;
  uint64_t v61;
  __int16 v62;
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v5 = *(CFDataRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (v5)
      goto LABEL_10;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/FrameBundle.cpp", 522, (uint64_t)"data", 4, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_22;
  }
LABEL_10:
  BytePtr = CFDataGetBytePtr(*(CFDataRef *)a1);
  Length = CFDataGetLength(*(CFDataRef *)a1);
  if ((Length & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  v11 = Length;
  if (BytePtr || !Length)
  {
    if (BytePtr)
      goto LABEL_17;
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_22:
    abort();
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/FrameBundle.cpp", 529, (uint64_t)"values.data()", 13, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_22;
  }
LABEL_17:
  std::streambuf::basic_streambuf();
  __sb[0] = &off_24EC28B10;
  __sb[2] = BytePtr;
  __sb[3] = BytePtr;
  __sb[4] = &BytePtr[v11];
  v26.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v25[0] = MEMORY[0x24BEDB820] + 24;
  v25[1] = 0;
  std::ios_base::init(&v26, __sb);
  v27 = 0;
  v28 = -1;
  v17 = 1;
  sub_224555660(v20, &v17, (uint64_t)v25, 0x2800uLL);
  v20[0] = &off_24EC20B48;
  v21 = (void (**)())&unk_24EC20C90;
  v31[8] = 0;
  v31[64] = 0;
  v31[72] = 0;
  v31[128] = 0;
  v31[136] = 0;
  v31[216] = 0;
  v31[224] = 0;
  v31[496] = 0;
  v31[504] = 0;
  v31[560] = 0;
  v31[568] = 0;
  v31[624] = 0;
  v31[632] = 0;
  v31[712] = 0;
  v31[720] = 0;
  v31[724] = 0;
  v31[728] = 0;
  v31[752] = 0;
  v31[760] = 0;
  v31[764] = 0;
  v31[768] = 0;
  v31[772] = 0;
  v31[776] = 0;
  v31[780] = 0;
  v18[0] = 0;
  v18[1] = 0;
  v17 = (uint64_t)v18;
  sub_224530B6C(&v17, v19);
  v32 = v19[0];
  sub_22323DF84((uint64_t)&v17, v18[0]);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v43 = 0;
  v42[0] = 0;
  *(_QWORD *)((char *)v42 + 5) = 0;
  v44 = 0u;
  v45 = 0u;
  v12 = (char *)operator new(0x78uLL);
  *(_OWORD *)(v12 + 8) = 0u;
  *(_QWORD *)v12 = &off_24EC6CE00;
  *((_QWORD *)v12 + 4) = &off_24EC20868;
  *(_OWORD *)(v12 + 40) = 0u;
  v13 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v12 + 56) = v13;
  *(int32x4_t *)(v12 + 72) = v13;
  *(int32x4_t *)(v12 + 88) = v13;
  *((_DWORD *)v12 + 26) = 2143289344;
  *((_QWORD *)v12 + 14) = 0;
  *((_QWORD *)v12 + 3) = &off_24EC207B8;
  v46 = v12 + 24;
  v47 = v12;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0u;
  v61 = 0;
  v56 = 0;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v62 = 2;
  v63 = 0;
  v30 = 8;
  sub_224554038(v24, &v30);
  sub_2232BFB3C(v20, (uint64_t)v31, v30);
  sub_223C7728C((uint64_t)v31, (uint64_t)&v17);
  sub_2232568B4(a2, (uint64_t)&v17);
  *(_BYTE *)(a2 + 1824) = 1;
  sub_2232555B8((uint64_t)&v17);
  sub_2232BCBE0((uint64_t)v31);
  v20[0] = &off_24EC798B8;
  v21 = (void (**)())&unk_24EC79A00;
  v14 = v24;
  v24 = 0;
  if (v14)
  {
    sub_22455612C((_QWORD *)(v14 + 8));
    MEMORY[0x227684CE8](v14, 0x10F2C40853B94B7);
  }
  v21 = off_24EC79B20;
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  std::istream::~istream();
  return std::streambuf::~streambuf();
}

void sub_2232BB600(_Unwind_Exception *a1)
{
  sub_2232BCBE0((uint64_t)&STACK[0x890]);
  sub_2245557DC(&STACK[0x768]);
  std::istream::~istream();
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_2232BB7B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (SLOBYTE(STACK[0x737]) < 0)
    operator delete((void *)STACK[0x720]);
  if (a14 < 0)
    operator delete(a9);
  __cxa_end_catch();
  JUMPOUT(0x2232BB604);
}

void sub_2232BB7F4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_2232BB804()
{
  uint64_t result;
  _DWORD v1[6];
  int v2;
  char v3;
  char *v4;

  v2 = 0;
  sub_2232C8A68(v1, "Error deserializing frame-bundle");
  if (v2 == -1)
    sub_22316DD70();
  v4 = &v3;
  result = ((uint64_t (*)(char **, _DWORD *))off_24EC289F0[v2])(&v4, v1);
  if (v2 != -1)
    return ((uint64_t (*)(char **, _DWORD *))off_24EC289D8[v2])(&v4, v1);
  return result;
}

void sub_2232BB89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232BB8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2232BB8C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  void **p_dst;
  unint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  const UInt8 *v19;
  CFIndex v20;
  __int128 v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  const void *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34[19];
  uint64_t *v35;
  void **__dst;
  size_t v37;
  int64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = MEMORY[0x24BEDB870];
  v5 = MEMORY[0x24BEDB870] + 64;
  v34[0] = MEMORY[0x24BEDB870] + 64;
  v6 = (uint64_t *)MEMORY[0x24BEDB800];
  v7 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v25 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v25 + *(_QWORD *)(v25 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v25 + *(_QWORD *)(v25 - 24));
  std::ios_base::init(v8, &v26);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v25 = v4 + 24;
  v34[0] = v5;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x24BEDB848];
  v26 = MEMORY[0x24BEDB848] + 16;
  v31 = 0u;
  v32 = 0u;
  v33 = 16;
  *((_QWORD *)&v22 + 1) = 1;
  v10 = operator new();
  *(_QWORD *)v10 = &v25;
  *(_QWORD *)(v10 + 8) = &v25;
  *(_BYTE *)(v10 + 16) = 0;
  *(_BYTE *)(v10 + 40) = 0;
  *(_BYTE *)(v10 + 48) = 0;
  *(_BYTE *)(v10 + 72) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  *(_QWORD *)(v10 + 96) = 0;
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)&v22 = &off_24EC1FA80;
  v23 = &unk_24EC1FBD0;
  v24 = v10;
  sub_223C75BC0((uint64_t)&__dst, a1 + 8);
  if (*(_BYTE *)(v24 + 40))
  {
    v35 = (uint64_t *)(v24 + 16);
    sub_22455A7EC(&v35, 8u);
  }
  else
  {
    sub_22455AA60((uint64_t)&v35, v24 + 8);
  }
  sub_2232C8B58((uint64_t *)&v22, (uint64_t)&__dst, 8u);
  sub_2232BCBE0((uint64_t)&__dst);
  *(_QWORD *)&v22 = &off_24EC79738;
  v11 = v24;
  v23 = &unk_24EC79888;
  v24 = 0;
  if (v11)
  {
    v12 = *(void **)(v11 + 80);
    if (v12)
    {
      *(_QWORD *)(v11 + 88) = v12;
      operator delete(v12);
    }
    if (*(_BYTE *)(v11 + 72))
      free(*(void **)(v11 + 56));
    if (*(_BYTE *)(v11 + 40))
      free(*(void **)(v11 + 24));
    MEMORY[0x227684CE8](v11, 0x1030C408C1A3048);
  }
  if ((v33 & 0x10) != 0)
  {
    v15 = *((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1) < v30)
    {
      *((_QWORD *)&v32 + 1) = v30;
      v15 = v30;
    }
    v16 = v29;
    v13 = v15 - (_QWORD)v29;
    if (v15 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_37;
  }
  else
  {
    if ((v33 & 8) == 0)
    {
      v13 = 0;
      HIBYTE(v38) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_25;
    }
    v16 = v27;
    v13 = v28 - (_QWORD)v27;
    if ((unint64_t)(v28 - (_QWORD)v27) >= 0x7FFFFFFFFFFFFFF8)
LABEL_37:
      sub_22316DBC0();
  }
  if (v13 >= 0x17)
  {
    v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v17 = v13 | 7;
    v18 = v17 + 1;
    p_dst = (void **)operator new(v17 + 1);
    v37 = v13;
    v38 = v18 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_24;
  }
  HIBYTE(v38) = v13;
  p_dst = (void **)&__dst;
  if (v13)
LABEL_24:
    memmove(p_dst, v16, v13);
LABEL_25:
  *((_BYTE *)p_dst + v13) = 0;
  if (v38 >= 0)
    v19 = (const UInt8 *)&__dst;
  else
    v19 = (const UInt8 *)__dst;
  if (v38 >= 0)
    v20 = HIBYTE(v38);
  else
    v20 = v37;
  sub_2245286D0(v19, v20, &v22);
  *(_OWORD *)a2 = v22;
  *(_BYTE *)(a2 + 16) = 1;
  if (SHIBYTE(v38) < 0)
    operator delete(__dst);
  v25 = *v6;
  *(uint64_t *)((char *)&v25 + *(_QWORD *)(v25 - 24)) = v6[3];
  v26 = v9 + 16;
  if (SBYTE7(v32) < 0)
    operator delete((void *)v31);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227684BE0](v34);
}

void sub_2232BBC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, __int128 a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (a61 < 0)
  {
    operator delete(*(void **)(v61 + 272));
    sub_2232BBE74((uint64_t)&a22);
    _Unwind_Resume(a1);
  }
  sub_2232BBE74((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_2232BBCC0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (a2)
  {
    sub_2232BCBE0((uint64_t)&a53);
    JUMPOUT(0x2232BBCD0);
  }
  JUMPOUT(0x2232BBCA4);
}

void sub_2232BBD68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (a20 < 0)
    operator delete(__p);
  if (a61 < 0)
    operator delete(*(void **)(v61 + 272));
  __cxa_end_catch();
  JUMPOUT(0x2232BBCB0);
}

void sub_2232BBDA4(void *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x2232BBCA4);
}

uint64_t sub_2232BBDB4()
{
  uint64_t result;
  _DWORD v1[6];
  int v2;
  char v3;
  char *v4;

  v2 = 0;
  sub_2232CFAFC(v1, "Error serializing frame-bundle");
  if (v2 == -1)
    sub_22316DD70();
  v4 = &v3;
  result = ((uint64_t (*)(char **, _DWORD *))off_24EC289F0[v2])(&v4, v1);
  if (v2 != -1)
    return ((uint64_t (*)(char **, _DWORD *))off_24EC289D8[v2])(&v4, v1);
  return result;
}

void sub_2232BBE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232BBE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2232BBE74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x227684BE0](a1 + 112);
  return a1;
}

uint64_t sub_2232BBEF8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 56))
  {
    *(_QWORD *)result = &off_24EC27198;
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t sub_2232BBF74(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 56))
  {
    *(_QWORD *)result = &off_24EC21328;
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

void sub_2232BBFF0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC28CD0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232BC064(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_2232BC06C(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_2232BC074@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_2232BC088(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_2232BC104(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int16 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(_WORD *)(a2 + 48);
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_QWORD *)(a2 + 24);
    v17 = *(_OWORD *)(a2 + 32);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    v7 = *(_WORD *)(a2 + 48);
    v9 = *(_QWORD *)(a2 + 24);
    v17 = *(_OWORD *)(a2 + 32);
  }
  v13 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_QWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 32) = v17;
  *(_WORD *)(a1 + 48) = v7;
  return a1;
}

_DWORD *sub_2232BC240(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  __int128 v4;

  *a1 = *(_DWORD *)a2;
  v3 = a1 + 2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_223197FA4(v3, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v3 + 2) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

uint64_t sub_2232BC2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)a1 = off_24EC289C0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  v3 = a1 + 16;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_223197FA4((_BYTE *)v3, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

void sub_2232BC310(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_2232BC324(std::exception *this)
{
  std::exception *v1;

  v1 = this;
  this->__vftable = (std::exception_vtbl *)off_24EC289C0;
  if (SHIBYTE(this[4].__vftable) < 0)
  {
    operator delete(this[2].__vftable);
    this = v1;
  }
  std::exception::~exception(this);
}

void sub_2232BC370(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_24EC289C0;
  if (SHIBYTE(this[4].__vftable) < 0)
    operator delete(this[2].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x227684CE8);
}

void sub_2232BC3C4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC29028;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232BC438()
{
  return 1;
}

uint64_t sub_2232BC440(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2232BC448@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2232BC45C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2232BC4D8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC28A18;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232BC54C()
{
  return 25;
}

uint64_t sub_2232BC554(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2232BC55C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2232BC570(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_2232BC5EC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int16 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(_WORD *)(a2 + 72);
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_QWORD *)(a2 + 24);
    v17 = *(_OWORD *)(a2 + 32);
    v18 = *(_OWORD *)(a2 + 48);
    v19 = *(_QWORD *)(a2 + 64);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    v7 = *(_WORD *)(a2 + 72);
    v9 = *(_QWORD *)(a2 + 24);
    v17 = *(_OWORD *)(a2 + 32);
    v18 = *(_OWORD *)(a2 + 48);
    v19 = *(_QWORD *)(a2 + 64);
  }
  v13 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_QWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 32) = v17;
  *(_OWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 64) = v19;
  *(_WORD *)(a1 + 72) = v7;
  return a1;
}

void sub_2232BC740(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC28D40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232BC7B4()
{
  return 32;
}

uint64_t sub_2232BC7BC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2232BC7C4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2232BC7DC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2232BC858()
{
  std::streambuf::~streambuf();
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232BC87C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 16);
      v4 = *(void **)(a1 + 8);
      if (v3 != v2)
      {
        v5 = *(_QWORD *)(a1 + 16);
        do
        {
          v7 = *(void **)(v5 - 24);
          v5 -= 24;
          v6 = v7;
          if (v7)
          {
            *(_QWORD *)(v3 - 16) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *(void **)(a1 + 8);
      }
      *(_QWORD *)(a1 + 16) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_2232BC8F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 160);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 120))
      goto LABEL_8;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 120))
      goto LABEL_8;
  }
  v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(_QWORD *)(a1 + 104) = v5;
    operator delete(v5);
  }
LABEL_8:
  if (!*(_BYTE *)(a1 + 80))
    return a1;
  *(_QWORD *)a1 = &off_24EC26EB0;
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6)
    return a1;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

uint64_t sub_2232BC9D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  sub_2232BCAF0(a1 + 216);
  if (*(_BYTE *)(a1 + 208))
  {
    *(_QWORD *)(a1 + 128) = &off_24EC26FA8;
    v2 = *(std::__shared_weak_count **)(a1 + 144);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 120))
  {
    *(_QWORD *)(a1 + 64) = &off_24EC21328;
    v5 = *(std::__shared_weak_count **)(a1 + 80);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 56))
    return a1;
  *(_QWORD *)a1 = &off_24EC21328;
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

uint64_t sub_2232BCAF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char v8;
  char v9;

  if (!*(_BYTE *)(a1 + 272))
    return a1;
  v2 = *(unsigned int *)(a1 + 264);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC28B98[v2])(&v8, a1 + 200);
  *(_DWORD *)(a1 + 264) = -1;
  v3 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24EC28B98[v3])(&v9, a1 + 96);
  *(_DWORD *)(a1 + 160) = -1;
  if (!*(_BYTE *)(a1 + 56))
    return a1;
  *(_QWORD *)a1 = &off_24EC21328;
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    return a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t sub_2232BCBE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;

  v2 = *(_QWORD *)(a1 + 1656);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 1664);
    v4 = *(void **)(a1 + 1656);
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 160);
        if (v6)
        {
          v7 = *(_QWORD *)(v3 - 152);
          v5 = *(void **)(v3 - 160);
          if (v7 != v6)
          {
            v8 = *(_QWORD *)(v3 - 152);
            do
            {
              v10 = *(void **)(v8 - 24);
              v8 -= 24;
              v9 = v10;
              if (v10)
              {
                *(_QWORD *)(v7 - 16) = v9;
                operator delete(v9);
              }
              v7 = v8;
            }
            while (v8 != v6);
            v5 = *(void **)(v3 - 160);
          }
          *(_QWORD *)(v3 - 152) = v6;
          operator delete(v5);
        }
        v3 -= 304;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 1656);
    }
    *(_QWORD *)(a1 + 1664) = v2;
    operator delete(v4);
  }
  if (*(_BYTE *)(a1 + 1512))
    sub_223255CAC(a1 + 1336);
  v11 = *(std::__shared_weak_count **)(a1 + 1176);
  if (!v11)
    goto LABEL_21;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!*(_BYTE *)(a1 + 1128))
      goto LABEL_30;
  }
  else
  {
LABEL_21:
    if (!*(_BYTE *)(a1 + 1128))
      goto LABEL_30;
  }
  v14 = *(_QWORD *)(a1 + 1104);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 1112);
    v16 = *(void **)(a1 + 1104);
    if (v15 != v14)
    {
      v17 = *(_QWORD *)(a1 + 1112);
      do
      {
        v19 = *(void **)(v17 - 24);
        v17 -= 24;
        v18 = v19;
        if (v19)
        {
          *(_QWORD *)(v15 - 16) = v18;
          operator delete(v18);
        }
        v15 = v17;
      }
      while (v17 != v14);
      v16 = *(void **)(a1 + 1104);
    }
    *(_QWORD *)(a1 + 1112) = v14;
    operator delete(v16);
  }
LABEL_30:
  if (*(_BYTE *)(a1 + 1072))
  {
    *(_QWORD *)(a1 + 992) = &off_24EC26EB0;
    v20 = *(std::__shared_weak_count **)(a1 + 1008);
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  if (*(_BYTE *)(a1 + 984))
  {
    *(_QWORD *)(a1 + 904) = &off_24EC27290;
    v23 = *(std::__shared_weak_count **)(a1 + 920);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  if (*(_BYTE *)(a1 + 896))
  {
    *(_QWORD *)(a1 + 840) = &off_24EC270A0;
    v26 = *(std::__shared_weak_count **)(a1 + 856);
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  v29 = *(std::__shared_weak_count **)(a1 + 792);
  if (!v29)
    goto LABEL_52;
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if (!*(_BYTE *)(a1 + 752))
      goto LABEL_55;
  }
  else
  {
LABEL_52:
    if (!*(_BYTE *)(a1 + 752))
      goto LABEL_55;
  }
  v32 = *(void **)(a1 + 728);
  if (v32)
  {
    *(_QWORD *)(a1 + 736) = v32;
    operator delete(v32);
  }
LABEL_55:
  if (*(_BYTE *)(a1 + 712))
  {
    *(_QWORD *)(a1 + 632) = &off_24EC26EB0;
    v33 = *(std::__shared_weak_count **)(a1 + 648);
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
  if (*(_BYTE *)(a1 + 624))
  {
    *(_QWORD *)(a1 + 568) = &off_24EC21328;
    v36 = *(std::__shared_weak_count **)(a1 + 584);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  if (*(_BYTE *)(a1 + 560))
  {
    *(_QWORD *)(a1 + 504) = &off_24EC270A0;
    v39 = *(std::__shared_weak_count **)(a1 + 520);
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
  sub_2232BCAF0(a1 + 224);
  if (*(_BYTE *)(a1 + 216))
  {
    *(_QWORD *)(a1 + 136) = &off_24EC26FA8;
    v42 = *(std::__shared_weak_count **)(a1 + 152);
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }
  if (*(_BYTE *)(a1 + 128))
  {
    *(_QWORD *)(a1 + 72) = &off_24EC21328;
    v45 = *(std::__shared_weak_count **)(a1 + 88);
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 64))
    return a1;
  *(_QWORD *)(a1 + 8) = &off_24EC21328;
  v48 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v48)
    return a1;
  v49 = (unint64_t *)&v48->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (v50)
    return a1;
  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
  std::__shared_weak_count::__release_weak(v48);
  return a1;
}

uint64_t sub_2232BD040(uint64_t a1)
{
  int32x4_t v2;
  char **v4;
  char *v5;
  uint64_t v6;
  __int128 v7;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 452) = 0;
  *(_BYTE *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 460) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 500) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 508) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  v5 = 0;
  v6 = 0;
  v4 = &v5;
  sub_224530B6C(&v4, &v7);
  *(_OWORD *)(a1 + 512) = v7;
  sub_22323DF84((uint64_t)&v4, v5);
  *(_BYTE *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 564) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 688) = 0;
  *(_BYTE *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 800) = 0;
  *(_BYTE *)(a1 + 880) = 0;
  *(_BYTE *)(a1 + 888) = 0;
  *(_BYTE *)(a1 + 968) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 976) = 0;
  *(_BYTE *)(a1 + 1032) = 0;
  *(_BYTE *)(a1 + 1040) = 0;
  *(_BYTE *)(a1 + 1120) = 0;
  *(_BYTE *)(a1 + 1128) = 0;
  *(_BYTE *)(a1 + 1208) = 0;
  *(_BYTE *)(a1 + 1216) = 0;
  *(_DWORD *)(a1 + 1220) = 1065353216;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_QWORD *)(a1 + 1224) = 0;
  *(_QWORD *)(a1 + 1248) = &off_24EC20868;
  *(_QWORD *)(a1 + 1264) = 0;
  *(_QWORD *)(a1 + 1256) = 0;
  v2 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(a1 + 1272) = v2;
  *(int32x4_t *)(a1 + 1288) = v2;
  *(int32x4_t *)(a1 + 1304) = v2;
  *(_DWORD *)(a1 + 1320) = 2143289344;
  *(_QWORD *)(a1 + 1328) = 0;
  *(_QWORD *)(a1 + 1240) = &off_24EC207B8;
  *(_OWORD *)(a1 + 1336) = xmmword_2245CA4F0;
  *(_OWORD *)(a1 + 1352) = unk_2245CA500;
  *(_OWORD *)(a1 + 1368) = xmmword_2245CA510;
  *(_OWORD *)(a1 + 1384) = unk_2245CA520;
  *(_BYTE *)(a1 + 1400) = 2;
  *(_BYTE *)(a1 + 1408) = 0;
  *(_BYTE *)(a1 + 1608) = 0;
  *(_BYTE *)(a1 + 1616) = 0;
  *(_BYTE *)(a1 + 1744) = 0;
  *(_QWORD *)(a1 + 1752) = &off_24EC715B8;
  *(_OWORD *)(a1 + 1786) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  v5 = 0;
  v6 = 0;
  v4 = &v5;
  sub_224530B6C(&v4, &v7);
  *(_OWORD *)(a1 + 1808) = v7;
  sub_22323DF84((uint64_t)&v4, v5);
  return a1;
}

void sub_2232BD240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  sub_22323DF84((uint64_t)&a10, a11);
  sub_223255930((void **)(v11 + 1776));
  sub_2242A8F3C(v16);
  if (*(_BYTE *)(v11 + 1608))
    sub_223255CAC(v11 + 1432);
  *(_QWORD *)(v11 + 1240) = &off_24EC20828;
  sub_2232559C8(v15);
  sub_223255A90(v14);
  sub_223256254(v13);
  sub_223255B0C(v12);
  sub_223255BE4(v11 + 232);
  sub_2232565CC(v11);
  _Unwind_Resume(a1);
}

void sub_2232BD2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  uint64_t v11;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  sub_22323DF84((uint64_t)&a10, a11);
  if (*(_BYTE *)(v11 + 488))
  {
    v13 = *(void **)(v11 + 464);
    if (v13)
    {
      *(_QWORD *)(v11 + 472) = v13;
      operator delete(v13);
    }
  }
  if (*(_BYTE *)(v11 + 440))
  {
    *(_QWORD *)(v11 + 360) = &off_24EC26EB0;
    v14 = *(std::__shared_weak_count **)(v11 + 376);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  sub_223255BE4(v11 + 232);
  sub_2232565CC(v11);
  _Unwind_Resume(a1);
}

void sub_2232BD340(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232BD5C0(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_2232BD574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_2232BD5C0(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2232BD638();
  v3 = sub_2232BD8F4();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2232BD638()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578B6A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B6A8))
  {
    sub_223174DE4(v7, "ConstSharedImage");
    v2 = sub_2231A36D0();
    sub_2232BD83C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2232BD83C((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578B690, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B690, &dword_22314D000);
          __cxa_guard_release(&qword_25578B6A8);
          return &stru_25578B690;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578B690;
}

void sub_2232BD788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578B6A8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578B6A8);
  _Unwind_Resume(a1);
}

void sub_2232BD83C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2232BD8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2232BD8F4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578B648);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B648))
  {
    sub_223174DE4(v7, "SharedImage");
    v2 = sub_2231A2C78();
    sub_2232BDAF8((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2232BDAF8((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578B630, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B630, &dword_22314D000);
          __cxa_guard_release(&qword_25578B648);
          return &stru_25578B630;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578B630;
}

void sub_2232BDA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578B648);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578B648);
  _Unwind_Resume(a1);
}

void sub_2232BDAF8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2232BDB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2232BDBB0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232BDE30(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_2232BDDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_2232BDE30(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2232BDEA8();
  v3 = sub_2232BD8F4();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2232BDEA8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578B6C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B6C8))
  {
    sub_223174DE4(v7, "SharedImage");
    v2 = sub_2231A36D0();
    sub_2232BE0AC((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2232BE0AC((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578B6B0, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B6B0, &dword_22314D000);
          __cxa_guard_release(&qword_25578B6C8);
          return &stru_25578B6B0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578B6B0;
}

void sub_2232BDFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578B6C8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578B6C8);
  _Unwind_Resume(a1);
}

void sub_2232BE0AC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2232BE148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2232BE164(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 31)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232BE468(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  v16 = v15 | (4 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 4;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2232BE41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_2232BE468(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2232BE4E0();
  v3 = sub_2232BD8F4();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2232BE4E0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578B688);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B688))
  {
    sub_223174DE4(v7, "ConstSharedImage");
    v2 = sub_2231EF4F0();
    sub_2232BE6E4((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2232BE6E4((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578B670, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B670, &dword_22314D000);
          __cxa_guard_release(&qword_25578B688);
          return &stru_25578B670;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578B670;
}

void sub_2232BE630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578B688);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578B688);
  _Unwind_Resume(a1);
}

void sub_2232BE6E4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2232BE780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2232BE79C(uint64_t a1, uint64_t a2)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a2 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232BEA18((uint64_t)&v23, a2);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_DWORD *)(a2 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a2 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = (unint64_t)*(unsigned int *)(a2 + 32) << 32;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a2 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a2 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a1 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a1 + 8) = size;
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v15;
    *(_QWORD *)(a1 + 32) = v16;
    *(_WORD *)(a1 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a1 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v15;
    *(_QWORD *)(a1 + 32) = v16;
    *(_WORD *)(a1 + 40) = v17;
  }
}

void sub_2232BE9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_2232BEA18(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_2232BEA90();
  v4 = sub_2232BD8F4();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

std::string *sub_2232BEA90()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578B5C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B5C8))
  {
    sub_223174DE4(v7, "SharedImage");
    v2 = sub_2231B47AC();
    sub_2232BEC94((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2232BEC94((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578B5B0, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B5B0, &dword_22314D000);
          __cxa_guard_release(&qword_25578B5C8);
          return &stru_25578B5B0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578B5B0;
}

void sub_2232BEBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578B5C8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578B5C8);
  _Unwind_Resume(a1);
}

void sub_2232BEC94(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2232BED30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2232BED4C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 25);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2232BEE9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2232BEEB0(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unsigned int v6;

  v3 = sub_2232BEF28();
  v4 = sub_2232BD8F4();
  v6 = *(_DWORD *)(a2 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v3, (uint64_t)" from an ", (uint64_t)v4, (uint64_t)" but the image is of incompatible format ", &v6);
}

std::string *sub_2232BEF28()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578B5E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B5E8))
  {
    sub_223174DE4(v7, "SharedImage");
    v2 = sub_2231EC034();
    sub_2232BF12C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2232BF12C((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578B5D0, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B5D0, &dword_22314D000);
          __cxa_guard_release(&qword_25578B5E8);
          return &stru_25578B5D0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578B5D0;
}

void sub_2232BF078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578B5E8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578B5E8);
  _Unwind_Resume(a1);
}

void sub_2232BF12C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2232BF1C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2232BF1E4(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  sub_2244B6E68((uint64_t)v20, a1);
  v16 = v20[0];
  v17 = v20[1];
  v18 = v20[2];
  v3 = v22;
  v19 = v21;
  v4 = v23;
  v5 = v24;
  v14 = v25;
  v15 = v26;
  v6 = operator new();
  v7 = v17;
  *(_OWORD *)(v6 + 8) = v16;
  *(_QWORD *)v6 = &off_24EC24CE0;
  *(_OWORD *)(v6 + 24) = v7;
  *(_OWORD *)(v6 + 40) = v18;
  *(_QWORD *)(v6 + 56) = v19;
  *(_QWORD *)(v6 + 64) = v3;
  *(_QWORD *)(v6 + 72) = v4;
  *(_QWORD *)(v6 + 80) = v5;
  *(_OWORD *)(v6 + 88) = v14;
  *(_QWORD *)(v6 + 104) = v15;
  v12 = v6;
  v8 = (std::__shared_weak_count *)operator new();
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24D78;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  v13 = v8;
  sub_2232BF3A0(a2, &v12);
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_2232BF358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223203D80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2232BF374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223203D80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2232BF388(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2232BF3A0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 32);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2232BF4F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2232BF504(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 32)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232BF808(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  v16 = v15 | (4 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 4;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2232BF7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_2232BF808(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2232BF880();
  v3 = sub_2232BD8F4();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2232BF880()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578B668);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B668))
  {
    sub_223174DE4(v7, "SharedImage");
    v2 = sub_2231EFDB4();
    sub_2232BFA84((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2232BFA84((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578B650, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B650, &dword_22314D000);
          __cxa_guard_release(&qword_25578B668);
          return &stru_25578B650;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578B650;
}

void sub_2232BF9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578B668);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578B668);
  _Unwind_Resume(a1);
}

void sub_2232BFA84(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2232BFB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2232BFB3C(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  char **v11;
  char v12;
  char *v13;
  char *v14;
  char *v15;
  void *v16;
  char *v17;
  char *v18;
  void *v19;
  char *v20;
  unsigned int v21[2];
  uint64_t v22;
  int v23;
  void *v24[3];
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  char v37;
  void *v38[3];
  void *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  unsigned __int8 v55;

  v6 = a2 + 8;
  LODWORD(v42) = 6;
  sub_224554038(a1[6], &v42);
  sub_2232C07F8(a1, v6, v42);
  LODWORD(v42) = 2;
  sub_224554038(a1[6], &v42);
  sub_2232C4608(a1, a2 + 504, v42);
  if (a3 > 4)
  {
    LODWORD(v42) = 5;
    sub_224554038(a1[6], &v42);
    sub_2232C4D40(a1, a2 + 632, v42);
  }
  else
  {
    sub_2232C0300(a1, a2 + 632);
  }
  sub_2232C04A4(a1, a2 + 840);
  LODWORD(v42) = 1;
  sub_224554038(a1[6], &v42);
  sub_2232C57D4(a1, a2 + 904);
  sub_2232C0300(a1, a2 + 992);
  sub_224553CF0(a1[6], (_BYTE *)(a2 + 1080));
  v7 = a1[6];
  sub_2245544CC(v7, (float *)(a2 + 1084));
  sub_2245544CC(v7, (float *)(a2 + 1088));
  sub_2245544CC(v7, (float *)(a2 + 1092));
  *(_QWORD *)&v42 = 0;
  sub_2245542F8(a1[6], &v42);
  *(_QWORD *)(a2 + 1136) = v42;
  LODWORD(v42) = 2;
  sub_224554038(a1[6], &v42);
  sub_2231B2FE4((uint64_t)&v42, (uint64_t)a1, a2 + 1144, v42);
  v8 = a1[6];
  sub_224554604(v8, (double *)(a2 + 1184));
  sub_224554604(v8, (double *)(a2 + 1192));
  sub_224554604(v8, (double *)(a2 + 1200));
  sub_224554604(v8, (double *)(a2 + 1208));
  sub_224554604(v8, (double *)(a2 + 1216));
  sub_224554604(v8, (double *)(a2 + 1224));
  sub_224554604(v8, (double *)(a2 + 1232));
  sub_224554604(v8, (double *)(a2 + 1240));
  sub_224554604(v8, (double *)(a2 + 1248));
  sub_224554604(v8, (double *)(a2 + 1256));
  sub_224554604(v8, (double *)(a2 + 1264));
  sub_224554604(v8, (double *)(a2 + 1272));
  sub_224554604(v8, (double *)(a2 + 1280));
  sub_224554604(v8, (double *)(a2 + 1288));
  sub_224554604(v8, (double *)(a2 + 1296));
  sub_224554604(v8, (double *)(a2 + 1304));
  if (a3 == 1)
  {
    LOBYTE(v42) = 0;
    v55 = 0;
    LOBYTE(v39) = 0;
    sub_224553CF0(a1[6], &v39);
    v9 = v55;
    if ((_BYTE)v39)
    {
      if (!v55)
      {
        v54 = 0;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v55 = 1;
      }
      v21[0] = 4;
      sub_224554038(a1[6], v21);
      sub_2232C5DD8((uint64_t)a1, (uint64_t)&v42, v21[0]);
      if (!v55)
        goto LABEL_85;
      v10 = *(unsigned __int8 *)(a2 + 1512);
      *(_OWORD *)(a2 + 1312) = v42;
      *(_DWORD *)(a2 + 1328) = v43;
      v11 = (char **)(a2 + 1336);
      if (v10)
      {
        sub_2232C6B24(v11, (char **)&v43 + 1);
        v12 = v54;
      }
      else
      {
        sub_2232C6D24(v11, (uint64_t)&v43 + 8);
        v12 = v54;
        *(_BYTE *)(a2 + 1512) = 1;
      }
      *(_BYTE *)(a2 + 1504) = v12;
      v9 = v55;
    }
    if (v9)
    {
      if (*((_QWORD *)&v52 + 1))
      {
        *(_QWORD *)&v53 = *((_QWORD *)&v52 + 1);
        operator delete(*((void **)&v52 + 1));
      }
      if ((_QWORD)v51)
      {
        *((_QWORD *)&v51 + 1) = v51;
        operator delete((void *)v51);
      }
      if (*((_QWORD *)&v49 + 1))
      {
        *(_QWORD *)&v50 = *((_QWORD *)&v49 + 1);
        operator delete(*((void **)&v49 + 1));
      }
      if ((_QWORD)v48)
      {
        *((_QWORD *)&v48 + 1) = v48;
        operator delete((void *)v48);
      }
      if (*((_QWORD *)&v46 + 1))
      {
        *(_QWORD *)&v47 = *((_QWORD *)&v46 + 1);
        operator delete(*((void **)&v46 + 1));
      }
      if ((_QWORD)v45)
      {
        *((_QWORD *)&v45 + 1) = v45;
        operator delete((void *)v45);
      }
      if (*((_QWORD *)&v43 + 1))
      {
        *(_QWORD *)&v44 = *((_QWORD *)&v43 + 1);
        operator delete(*((void **)&v43 + 1));
      }
    }
LABEL_85:
    sub_2232C7CD0((uint64_t)a1, a2 + 1096);
    goto LABEL_86;
  }
  if (a3 > 6)
  {
    LOBYTE(v21[0]) = 0;
    sub_224553CF0(a1[6], v21);
    if (LOBYTE(v21[0]))
    {
      if (!*(_BYTE *)(a2 + 1512))
      {
        *(_QWORD *)(a2 + 1504) = 0;
        *(_OWORD *)(a2 + 1472) = 0u;
        *(_OWORD *)(a2 + 1488) = 0u;
        *(_OWORD *)(a2 + 1440) = 0u;
        *(_OWORD *)(a2 + 1456) = 0u;
        *(_OWORD *)(a2 + 1408) = 0u;
        *(_OWORD *)(a2 + 1424) = 0u;
        *(_OWORD *)(a2 + 1376) = 0u;
        *(_OWORD *)(a2 + 1392) = 0u;
        *(_OWORD *)(a2 + 1344) = 0u;
        *(_OWORD *)(a2 + 1360) = 0u;
        *(_OWORD *)(a2 + 1312) = 0u;
        *(_OWORD *)(a2 + 1328) = 0u;
        *(_BYTE *)(a2 + 1512) = 1;
      }
      LODWORD(v42) = 4;
      sub_224554038(a1[6], &v42);
      sub_2232C5DD8((uint64_t)a1, a2 + 1312, v42);
    }
    else if (*(_BYTE *)(a2 + 1512))
    {
      sub_223255CAC(a2 + 1336);
      *(_BYTE *)(a2 + 1512) = 0;
    }
  }
  else
  {
    v39 = 0;
    v40 = 0;
    v41 = 0;
    sub_2232C70A4((uint64_t)a1, (uint64_t *)&v39);
    v13 = (char *)v39;
    if (v39 != v40)
    {
      v42 = 0uLL;
      *(_QWORD *)&v43 = 0;
      sub_2232C7578((uint64_t *)&v42, 0x8F5C28F5C28F5C29 * ((v40 - (_BYTE *)v39) >> 3));
      sub_2232C7694((char *)v39, v40, (uint64_t *)&v42);
      *(_OWORD *)v38 = v42;
      v38[2] = (void *)v43;
      sub_223C2A714((uint64_t *)v38, (uint64_t)v21);
      LOBYTE(v42) = v21[0];
      *(_WORD *)((char *)&v42 + 1) = *(_WORD *)((char *)v21 + 1);
      DWORD1(v42) = v21[1];
      *((_QWORD *)&v42 + 1) = v22;
      LODWORD(v43) = v23;
      sub_223C75208((uint64_t)&v43 + 8, (char **)v24);
      LOBYTE(v54) = v37;
      sub_2232C0648(a2 + 1312, &v42);
      if (*((_QWORD *)&v52 + 1))
      {
        *(_QWORD *)&v53 = *((_QWORD *)&v52 + 1);
        operator delete(*((void **)&v52 + 1));
      }
      if ((_QWORD)v51)
      {
        *((_QWORD *)&v51 + 1) = v51;
        operator delete((void *)v51);
      }
      if (*((_QWORD *)&v49 + 1))
      {
        *(_QWORD *)&v50 = *((_QWORD *)&v49 + 1);
        operator delete(*((void **)&v49 + 1));
      }
      if ((_QWORD)v48)
      {
        *((_QWORD *)&v48 + 1) = v48;
        operator delete((void *)v48);
      }
      if (*((_QWORD *)&v46 + 1))
      {
        *(_QWORD *)&v47 = *((_QWORD *)&v46 + 1);
        operator delete(*((void **)&v46 + 1));
      }
      if ((_QWORD)v45)
      {
        *((_QWORD *)&v45 + 1) = v45;
        operator delete((void *)v45);
      }
      if (*((_QWORD *)&v43 + 1))
      {
        *(_QWORD *)&v44 = *((_QWORD *)&v43 + 1);
        operator delete(*((void **)&v43 + 1));
      }
      if (v35)
      {
        v36 = v35;
        operator delete(v35);
      }
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v24[0])
      {
        v24[1] = v24[0];
        operator delete(v24[0]);
      }
      v14 = (char *)v38[0];
      if (v38[0])
      {
        v15 = (char *)v38[1];
        v16 = v38[0];
        if (v38[1] != v38[0])
        {
          do
          {
            v17 = v15 - 200;
            sub_223255CAC((uint64_t)(v15 - 176));
            v15 = v17;
          }
          while (v17 != v14);
          v16 = v38[0];
        }
        v38[1] = v14;
        operator delete(v16);
      }
      v13 = (char *)v39;
    }
    if (v13)
    {
      v18 = v40;
      v19 = v13;
      if (v40 != v13)
      {
        do
        {
          v20 = v18 - 200;
          sub_223255CAC((uint64_t)(v18 - 176));
          v18 = v20;
        }
        while (v20 != v13);
        v19 = v39;
      }
      v40 = v13;
      operator delete(v19);
    }
    if (a3 <= 3)
      goto LABEL_85;
    if (a3 <= 4)
    {
LABEL_86:
      LODWORD(v42) = 0;
      sub_224554038(a1[6], &v42);
      sub_2232C81B0((uint64_t)a1, a2 + 1520);
      if (a3 >= 3)
        sub_2232C8434((uint64_t)a1, a2 + 1656);
      return;
    }
  }
  sub_2232C81B0((uint64_t)a1, a2 + 1520);
  sub_2232C8434((uint64_t)a1, a2 + 1656);
  if (a3 >= 6)
  {
    LODWORD(v42) = 1;
    sub_224554038(a1[6], &v42);
    sub_224553CF0(a1[6], (_BYTE *)(a2 + 1680));
    if (a3 >= 8)
    {
      LOBYTE(v42) = 0;
      sub_224553CF0(a1[6], &v42);
      if ((_BYTE)v42)
      {
        if (!*(_BYTE *)(a2 + 1682))
          *(_WORD *)(a2 + 1681) = 256;
        sub_224554738(a1[6], (_BYTE *)(a2 + 1681));
      }
      else if (*(_BYTE *)(a2 + 1682))
      {
        *(_BYTE *)(a2 + 1682) = 0;
      }
    }
  }
}

void sub_2232C0280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38)
{
  uint64_t v38;
  uint64_t v39;

  sub_223255CAC(v39);
  sub_223255CAC(v38);
  sub_2232C0794(&a35);
  sub_2232C0794(&a38);
  _Unwind_Resume(a1);
}

void sub_2232C02D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;

  if (!a66)
    _Unwind_Resume(a1);
  sub_223255CAC((uint64_t)&a44);
  _Unwind_Resume(a1);
}

void sub_2232C0300(_QWORD *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_2232C1840(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC28D40;
    sub_2232C495C((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C4B84(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC28D40;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC28B98[v19])(&v13, &v18);
}

void sub_2232C044C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_22319B358((uint64_t)va);
  sub_2232C17E0(v2 - 144);
  _Unwind_Resume(a1);
}

void sub_2232C04A4(_QWORD *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_2232C1840(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC29028;
    sub_2232C529C((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C5628(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC29028;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC28B98[v19])(&v13, &v18);
}

void sub_2232C05F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_22319B358((uint64_t)&a9);
  sub_2232C17E0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_2232C0648(uint64_t a1, __int128 *a2)
{
  int v4;
  int v5;
  _QWORD *v6;
  __int128 v7;
  _QWORD *v8;
  int v10;

  v4 = *(unsigned __int8 *)(a1 + 200);
  v5 = *((_DWORD *)a2 + 4);
  v7 = *a2;
  v6 = (_QWORD *)a2 + 3;
  *(_OWORD *)a1 = v7;
  *(_DWORD *)(a1 + 16) = v5;
  v8 = (_QWORD *)(a1 + 24);
  if (v4)
  {
    sub_2232C7B28((uint64_t)v8, (uint64_t)v6);
    *(_BYTE *)(a1 + 192) = *((_BYTE *)a2 + 192);
  }
  else
  {
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 48) = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 11) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a1 + 96) = a2[6];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *((_QWORD *)a2 + 12) = 0;
    *((_QWORD *)a2 + 13) = 0;
    *((_QWORD *)a2 + 14) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
    *((_QWORD *)a2 + 15) = 0;
    *((_QWORD *)a2 + 16) = 0;
    *((_QWORD *)a2 + 17) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_OWORD *)(a1 + 144) = a2[9];
    *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
    *((_QWORD *)a2 + 18) = 0;
    *((_QWORD *)a2 + 19) = 0;
    *((_QWORD *)a2 + 20) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_OWORD *)(a1 + 168) = *(__int128 *)((char *)a2 + 168);
    *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
    *((_QWORD *)a2 + 21) = 0;
    *((_QWORD *)a2 + 22) = 0;
    *((_QWORD *)a2 + 23) = 0;
    v10 = *((unsigned __int8 *)a2 + 192);
    *(_BYTE *)(a1 + 200) = 1;
    *(_BYTE *)(a1 + 192) = v10;
  }
  return a1;
}

void **sub_2232C0794(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 200;
        sub_223255CAC((uint64_t)(v3 - 176));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_2232C07F8(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  __int16 v58;
  unint64_t v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t (**v76)();
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  __int16 v83;
  _BYTE v84[16];
  std::__shared_weak_count *v85;
  uint64_t (**v86)();
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  __int16 v92;
  char v93;
  int v94;
  uint64_t (**v95)();
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  char v101;
  int v102;
  char v103;
  int v104;
  __int16 v105;
  char v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  v6 = a3 - 2;
  if (a3 <= 2)
  {
    LOBYTE(v86) = 0;
    v93 = 0;
    sub_2232C11A4(a1, (uint64_t)&v86);
    if (v93)
    {
      v76 = &off_24EC1F8C8;
      v7 = v87;
      v8 = v88;
      if (v88)
      {
        p_shared_owners = (unint64_t *)&v88->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        v11 = v91;
        v13 = v89;
        v12 = v90;
        v14 = v92;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      else
      {
        v11 = v91;
        v13 = v89;
        v12 = v90;
        v14 = v92;
      }
      v77 = v7;
      v78 = v8;
      v79 = v12;
      v80 = 4 * v11;
      v81 = v13;
      v82 = 4;
      v83 = v14;
      if (v8)
      {
        v17 = (unint64_t *)&v8->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        do
          v19 = __ldaxr(v17);
        while (__stlxr(v19 - 1, v17));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      LOBYTE(v96) = 0;
      LOBYTE(v98) = 0;
      v99 = 0;
      v101 = 0;
      v103 = 1;
      v104 = 0;
      sub_22432B21C((uint64_t)&v76, 3u, (uint64_t)v84);
      sub_2232C1348(a2, (uint64_t)v84);
      v20 = v85;
      if (v85)
      {
        v21 = (unint64_t *)&v85->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = v78;
      if (v78)
      {
        v24 = (unint64_t *)&v78->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (v93)
      {
        v86 = &off_24EC27198;
        v26 = v88;
        if (v88)
        {
          v27 = (unint64_t *)&v88->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
      }
    }
  }
  else
  {
    sub_2232C1000(a1, a2);
    if (a3 >= 5)
    {
      sub_2232C1000(a1, a2 + 64);
LABEL_79:
      sub_2232C147C(a1, a2 + 128);
      goto LABEL_80;
    }
  }
  LOBYTE(v86) = 0;
  v93 = 0;
  sub_2232C11A4(a1, (uint64_t)&v86);
  if (!v93)
    goto LABEL_78;
  v76 = &off_24EC1F8C8;
  v29 = v87;
  v30 = v88;
  if (v88)
  {
    v31 = (unint64_t *)&v88->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    v33 = v91;
    v35 = v89;
    v34 = v90;
    v36 = v92;
    do
      v37 = __ldxr(v31);
    while (__stxr(v37 + 1, v31));
    do
      v38 = __ldxr(v31);
    while (__stxr(v38 + 1, v31));
  }
  else
  {
    v33 = v91;
    v35 = v89;
    v34 = v90;
    v36 = v92;
  }
  v77 = v29;
  v78 = v30;
  v79 = v34;
  v80 = 4 * v33;
  v81 = v35;
  v82 = 4;
  v83 = v36;
  if (v30)
  {
    v39 = (unint64_t *)&v30->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    do
      v41 = __ldaxr(v39);
    while (__stlxr(v41 - 1, v39));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  LOBYTE(v96) = 0;
  LOBYTE(v98) = 0;
  v99 = 0;
  v101 = 0;
  v103 = 1;
  v104 = 0;
  sub_22432B21C((uint64_t)&v76, 3u, (uint64_t)v84);
  sub_2232C1348(a2 + 64, (uint64_t)v84);
  v42 = v85;
  if (v85)
  {
    v43 = (unint64_t *)&v85->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v78;
  if (!v78)
    goto LABEL_63;
  v46 = (unint64_t *)&v78->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    if (!v93)
      goto LABEL_78;
  }
  else
  {
LABEL_63:
    if (!v93)
      goto LABEL_78;
  }
  v86 = &off_24EC27198;
  v48 = v88;
  if (!v88)
    goto LABEL_78;
  v49 = (unint64_t *)&v88->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (v50)
  {
LABEL_78:
    if (a3 >= 4)
      goto LABEL_79;
    goto LABEL_69;
  }
  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
  std::__shared_weak_count::__release_weak(v48);
  if (a3 >= 4)
    goto LABEL_79;
LABEL_69:
  LOBYTE(v95) = 0;
  v106 = 0;
  sub_2232C0300(a1, (uint64_t)&v95);
  if (v106)
  {
    v76 = &off_24EC1F8C8;
    v51 = v96;
    v52 = v97;
    if (v97)
    {
      v53 = (unint64_t *)&v97->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
      v55 = v100;
      v56 = v102;
      v57 = v98;
      v58 = v105;
      do
        v59 = __ldxr(v53);
      while (__stxr(v59 + 1, v53));
      do
        v60 = __ldxr(v53);
      while (__stxr(v60 + 1, v53));
    }
    else
    {
      v55 = v100;
      v56 = v102;
      v57 = v98;
      v58 = v105;
    }
    v77 = v51;
    v78 = v52;
    v79 = v55;
    v80 = 4 * v56;
    v81 = v57;
    v82 = 32;
    v83 = v58;
    if (v52)
    {
      v64 = (unint64_t *)&v52->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
      do
        v66 = __ldaxr(v64);
      while (__stlxr(v66 - 1, v64));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    LOBYTE(v87) = 0;
    LOBYTE(v89) = 0;
    LOBYTE(v90) = 0;
    LOBYTE(v92) = 0;
    v93 = 1;
    v94 = 0;
    sub_22432B21C((uint64_t)&v76, 0x1Fu, (uint64_t)v84);
    sub_2232C1620(a2 + 128, (uint64_t)v84);
    v67 = v85;
    if (v85)
    {
      v68 = (unint64_t *)&v85->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v70 = v78;
    if (v78)
    {
      v71 = (unint64_t *)&v78->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    if (v106)
    {
      v95 = &off_24EC26EB0;
      v73 = v97;
      if (v97)
      {
        v74 = (unint64_t *)&v97->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
    }
  }
LABEL_80:
  sub_2232C391C(a1, a2 + 216);
  if (v6 <= 3)
  {
    LOBYTE(v95) = 0;
    v103 = 0;
    sub_2232C1000(a1, (uint64_t)&v95);
    if (v103)
    {
      v95 = &off_24EC21328;
      v61 = v97;
      if (v97)
      {
        v62 = (unint64_t *)&v97->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
    }
  }
}

void sub_2232C0F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  sub_22319B358((uint64_t)&a16);
  sub_22319A5E0((uint64_t)&a9);
  sub_223255D3C(v16 - 160);
  _Unwind_Resume(a1);
}

void sub_2232C0F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_22319A5E0((uint64_t)&a9);
  sub_223255D3C(v9 - 160);
  _Unwind_Resume(a1);
}

void sub_2232C0F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_22319B358((uint64_t)&a16);
  sub_22319A5E0((uint64_t)&a9);
  sub_2232BBEF8((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_2232C0FC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2232BBF74(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2232C0FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_2232BBEF8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232C0FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_2232BBEF8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232C1000(_QWORD *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_2232C1840(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC21040;
    sub_2232C1A28((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C1C50(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC21040;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC28B98[v19])(&v13, &v18);
}

void sub_2232C114C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_22319B358((uint64_t)&a9);
  sub_2232C17E0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_2232C11A4(_QWORD *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_2232C1840(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC28BC8;
    sub_2232C1E78((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C264C(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC28BC8;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC28B98[v19])(&v13, &v18);
}

void sub_2232C12F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_22319B358((uint64_t)&a9);
  sub_2232C17E0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_2232C1348(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  _OWORD v12[2];

  if (*(_BYTE *)(a1 + 56))
  {
    sub_2232C27F8(a2, (uint64_t *)&v11);
    v3 = v11;
    v11 = 0uLL;
    v4 = *(std::__shared_weak_count **)(a1 + 16);
    *(_OWORD *)(a1 + 8) = v3;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    *(_OWORD *)(a1 + 24) = v12[0];
    *(_OWORD *)(a1 + 34) = *(_OWORD *)((char *)v12 + 10);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
    if (!*((_QWORD *)&v11 + 1))
      return a1;
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      return a1;
    }
    else
    {
      return a1;
    }
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC21328;
    sub_2232C27F8(a2, (uint64_t *)(a1 + 8));
    *(_BYTE *)(a1 + 56) = 1;
    return a1;
  }
}

void sub_2232C147C(_QWORD *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_2232C1840(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC28F30;
    sub_2232C2C00((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C33D4(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC28F30;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC28B98[v19])(&v13, &v18);
}

void sub_2232C15C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_22319B358((uint64_t)va);
  sub_2232C17E0(v2 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_2232C1620(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _OWORD v11[4];
  __int16 v12;

  if (*(_BYTE *)(a1 + 80))
  {
    sub_2232C3590(a2, (uint64_t *)v11);
    v3 = v11[0];
    v11[0] = 0uLL;
    v4 = *(std::__shared_weak_count **)(a1 + 16);
    *(_OWORD *)(a1 + 8) = v3;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    *(_OWORD *)(a1 + 24) = v11[1];
    *(_OWORD *)(a1 + 40) = v11[2];
    *(_OWORD *)(a1 + 56) = v11[3];
    *(_WORD *)(a1 + 72) = v12;
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v11[0] + 1);
    if (!*((_QWORD *)&v11[0] + 1))
      return a1;
    v8 = (unint64_t *)(*((_QWORD *)&v11[0] + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      return a1;
    }
    else
    {
      return a1;
    }
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC26FA8;
    sub_2232C3590(a2, (uint64_t *)(a1 + 8));
    *(_BYTE *)(a1 + 80) = 1;
    return a1;
  }
}

uint64_t sub_2232C1764(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 56))
  {
    *(_QWORD *)result = &off_24EC21040;
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t sub_2232C17E0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 104))
  {
    v2 = *(unsigned int *)(a1 + 96);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24EC28B98[v2])(&v4, a1 + 32);
    *(_DWORD *)(a1 + 96) = -1;
  }
  return a1;
}

void sub_2232C1840(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;

  v10 = 0;
  sub_224553CF0(a1[6], &v10);
  if (v10)
  {
    if (!*(_BYTE *)(a2 + 104))
    {
      v11 = &off_24EC1F958;
      sub_2231B3FDC((uint64_t)&v12);
      sub_22416BD7C(a2, (uint64_t)&v11, 0);
      v4 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      *(_DWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    LODWORD(v11) = 2;
    sub_224554038(a1[6], &v11);
    if (v11 <= 1)
    {
      sub_2231B31EC(a1, a2, v11);
    }
    else
    {
      sub_2231B1308(a1 + 2);
      sub_2231B31EC(a1, a2, 2u);
      v7 = a1[4];
      v8 = *(_QWORD *)(v7 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v7 - 8);
      if (v8)
        (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v8);
      a1[4] -= 16;
    }
  }
  else if (*(_BYTE *)(a2 + 104))
  {
    v9 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v9 != -1)
      ((void (*)(uint64_t (***)(), uint64_t))off_24EC28B98[v9])(&v11, a2 + 32);
    *(_DWORD *)(a2 + 96) = -1;
    *(_BYTE *)(a2 + 104) = 0;
  }
}

void sub_2232C19E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2232C1A28(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232C1BD8(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2231BF7CC(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2232C1B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_2232C1BD8(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2232BDEA8();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

void sub_2232C1C50(uint64_t a1, uint64_t a2)
{
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int16 v17;
  uint64_t v18;

  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
      sub_2232BC104(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC21328;
    if (v3)
    {
      v4 = *(std::__shared_weak_count **)(a1 + 16);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      *(_BYTE *)(a1 + 56) = 0;
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(std::__shared_weak_count **)(a2 + 16);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        v11 = *(_WORD *)(a2 + 48);
        do
          v12 = __ldxr(v9);
        while (__stxr(v12 + 1, v9));
        v13 = *(_QWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        do
          v14 = __ldxr(v9);
        while (__stxr(v14 + 1, v9));
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a1 + 16) = v8;
        *(_QWORD *)(a1 + 24) = v13;
        *(_WORD *)(a1 + 48) = v11;
        do
          v15 = __ldaxr(v9);
        while (__stlxr(v15 - 1, v9));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        do
          v16 = __ldaxr(v9);
        while (__stlxr(v16 - 1, v9));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        *(_BYTE *)(a1 + 56) = 1;
      }
      else
      {
        v17 = *(_WORD *)(a2 + 48);
        v18 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = v18;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_WORD *)(a1 + 48) = v17;
        *(_BYTE *)(a1 + 56) = 1;
      }
    }
  }
}

uint64_t sub_2232C1DFC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 56))
  {
    *(_QWORD *)result = &off_24EC28BC8;
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

void sub_2232C1E78(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232C21B4(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2232C24E8(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2232C1FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

_QWORD *sub_2232C2028(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC28BC8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232C209C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC28BC8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232C2110()
{
  return 4;
}

uint64_t sub_2232C2118(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2232C2120@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2232C2138(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_2232C21B4(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2232C222C();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2232C222C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578B608);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B608))
  {
    sub_223174DE4(v7, "SharedImage");
    v2 = sub_2231C26A0();
    sub_2232C2430((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2232C2430((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578B5F0, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B5F0, &dword_22314D000);
          __cxa_guard_release(&qword_25578B608);
          return &stru_25578B5F0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578B5F0;
}

void sub_2232C237C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578B608);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578B608);
  _Unwind_Resume(a1);
}

void sub_2232C2430(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2232C24CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2232C24E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;
  uint64_t v19;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v19, v3, 4);
  v9 = *(_QWORD *)(v19 + 16);
  *((_OWORD *)a1 + 1) = *(_OWORD *)v19;
  a1[4] = v9;
  v19 = 0;
  MEMORY[0x227684CE8]();
  v10 = *a1;
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *((_WORD *)a1 + 20) = v17 & 0xFF00 | v16;
  return a1;
}

void sub_2232C2638(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2232C264C(uint64_t a1, uint64_t a2)
{
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int16 v17;
  uint64_t v18;

  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
      sub_2232BC104(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC27198;
    if (v3)
    {
      v4 = *(std::__shared_weak_count **)(a1 + 16);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      *(_BYTE *)(a1 + 56) = 0;
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(std::__shared_weak_count **)(a2 + 16);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        v11 = *(_WORD *)(a2 + 48);
        do
          v12 = __ldxr(v9);
        while (__stxr(v12 + 1, v9));
        v13 = *(_QWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        do
          v14 = __ldxr(v9);
        while (__stxr(v14 + 1, v9));
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a1 + 16) = v8;
        *(_QWORD *)(a1 + 24) = v13;
        *(_WORD *)(a1 + 48) = v11;
        do
          v15 = __ldaxr(v9);
        while (__stlxr(v15 - 1, v9));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        do
          v16 = __ldaxr(v9);
        while (__stlxr(v16 - 1, v9));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        *(_BYTE *)(a1 + 56) = 1;
      }
      else
      {
        v17 = *(_WORD *)(a2 + 48);
        v18 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = v18;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_WORD *)(a1 + 48) = v17;
        *(_BYTE *)(a1 + 56) = 1;
      }
    }
  }
}

void sub_2232C27F8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232C29A8(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2232C2A20(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2232C2954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_2232C29A8(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2232BD638();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

uint64_t *sub_2232C2A20(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;
  uint64_t v19;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 72))(&v19, v3, 3);
  v9 = *(_QWORD *)(v19 + 16);
  *((_OWORD *)a1 + 1) = *(_OWORD *)v19;
  a1[4] = v9;
  v19 = 0;
  MEMORY[0x227684CE8]();
  v10 = *a1;
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *((_WORD *)a1 + 20) = v17 & 0xFF00 | v16;
  return a1;
}

void sub_2232C2B70(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2232C2B84(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 80))
  {
    *(_QWORD *)result = &off_24EC28F30;
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

void sub_2232C2C00(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 31)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232C2F3C(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2232C3270(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2232C2D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

_QWORD *sub_2232C2DB0(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC28F30;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232C2E24(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC28F30;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232C2E98()
{
  return 31;
}

uint64_t sub_2232C2EA0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2232C2EA8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2232C2EC0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_2232C2F3C(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2232C2FB4();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2232C2FB4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578B628);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B628))
  {
    sub_223174DE4(v7, "SharedImage");
    v2 = sub_2231EF4F0();
    sub_2232C31B8((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2232C31B8((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_25578B610, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B610, &dword_22314D000);
          __cxa_guard_release(&qword_25578B628);
          return &stru_25578B610;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25578B610;
}

void sub_2232C3104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25578B628);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25578B628);
  _Unwind_Resume(a1);
}

void sub_2232C31B8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2232C3254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2232C3270(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 31);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2232C33C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2232C33D4(uint64_t a1, uint64_t a2)
{
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 == *(unsigned __int8 *)(a2 + 80))
  {
    if (*(_BYTE *)(a1 + 80))
      sub_2232BC5EC(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC26FA8;
    if (v3)
    {
      v4 = *(std::__shared_weak_count **)(a1 + 16);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      *(_BYTE *)(a1 + 80) = 0;
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(std::__shared_weak_count **)(a2 + 16);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        v11 = *(_WORD *)(a2 + 72);
        do
          v12 = __ldxr(v9);
        while (__stxr(v12 + 1, v9));
        v13 = *(_QWORD *)(a2 + 24);
        v14 = *(_OWORD *)(a2 + 32);
        v15 = *(_OWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 32) = v14;
        *(_OWORD *)(a1 + 48) = v15;
        do
          v16 = __ldxr(v9);
        while (__stxr(v16 + 1, v9));
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a1 + 16) = v8;
        *(_QWORD *)(a1 + 24) = v13;
        *(_WORD *)(a1 + 72) = v11;
        do
          v17 = __ldaxr(v9);
        while (__stlxr(v17 - 1, v9));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        do
          v18 = __ldaxr(v9);
        while (__stlxr(v18 - 1, v9));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        *(_BYTE *)(a1 + 80) = 1;
      }
      else
      {
        v19 = *(_WORD *)(a2 + 72);
        v20 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = v20;
        v21 = *(_OWORD *)(a2 + 32);
        v22 = *(_OWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 32) = v21;
        *(_OWORD *)(a1 + 48) = v22;
        *(_WORD *)(a1 + 72) = v19;
        *(_BYTE *)(a1 + 80) = 1;
      }
    }
  }
}

void sub_2232C3590(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 31)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232C3740(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2232C37B8(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2232C36EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_2232C3740(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2232BE4E0();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

uint64_t *sub_2232C37B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 72))(&v20, v3, 31);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2232C3908(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2232C391C(_QWORD *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;

  v4 = 0;
  sub_224553CF0(a1[6], &v4);
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 272))
    {
      sub_2232C39E0(a2);
      *(_OWORD *)(a2 + 240) = 0u;
      *(_OWORD *)(a2 + 256) = 0u;
      *(_OWORD *)(a2 + 208) = 0u;
      *(_OWORD *)(a2 + 224) = 0u;
      *(_OWORD *)(a2 + 176) = 0u;
      *(_OWORD *)(a2 + 192) = 0u;
      *(_OWORD *)(a2 + 144) = 0u;
      *(_OWORD *)(a2 + 160) = 0u;
      *(_OWORD *)(a2 + 112) = 0u;
      *(_OWORD *)(a2 + 128) = 0u;
      *(_OWORD *)(a2 + 80) = 0u;
      *(_OWORD *)(a2 + 96) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)a2 = 0u;
      sub_2232C3AB8(a2);
      *(_BYTE *)(a2 + 272) = 1;
    }
    v5 = 2;
    sub_224554038(a1[6], &v5);
    sub_2232C3CC0(a1, a2, v5);
  }
  else
  {
    sub_2232C39E0(a2);
  }
}

void sub_2232C39E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char v7;
  char v8;

  if (*(_BYTE *)(a1 + 272))
  {
    v2 = *(unsigned int *)(a1 + 264);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24EC28B98[v2])(&v7, a1 + 200);
    *(_DWORD *)(a1 + 264) = -1;
    v3 = *(unsigned int *)(a1 + 160);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24EC28B98[v3])(&v8, a1 + 96);
    *(_DWORD *)(a1 + 160) = -1;
    if (*(_BYTE *)(a1 + 56))
    {
      *(_QWORD *)a1 = &off_24EC21328;
      v4 = *(std::__shared_weak_count **)(a1 + 16);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
    *(_BYTE *)(a1 + 272) = 0;
  }
}

uint64_t sub_2232C3AB8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t (**v9)();
  uint64_t v10;
  std::__shared_weak_count *v11;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 56) = 0;
  v9 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v10);
  sub_22416BD7C(a1 + 64, (uint64_t)&v9, 0);
  v2 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_DWORD *)(a1 + 88) = 0;
  v9 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v10);
  sub_22416BD7C(a1 + 168, (uint64_t)&v9, 0);
  v5 = v11;
  if (v11)
  {
    v6 = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_DWORD *)(a1 + 192) = 0;
  return a1;
}

void sub_2232C3BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  uint64_t v16;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  v18 = a16;
  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = *(unsigned int *)(v16 + 160);
  if ((_DWORD)v21 != -1)
    ((void (*)(char *, uint64_t))off_24EC28B98[v21])(&a13, v16 + 96);
  *(_DWORD *)(v16 + 160) = -1;
  if (*(_BYTE *)(v16 + 56))
  {
    *(_QWORD *)v16 = &off_24EC21328;
    v22 = *(std::__shared_weak_count **)(v16 + 16);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2232C3CC0(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  std::__shared_weak_count *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  __int16 v37;
  _BYTE v38[16];
  std::__shared_weak_count *v39;
  _QWORD v40[2];
  std::__shared_weak_count *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  char v46;
  unsigned int v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (a3 > 1)
  {
    sub_2232C4354(a1, a2);
  }
  else
  {
    LOBYTE(v40[0]) = 0;
    v46 = 0;
    sub_2232C40A0(a1, (uint64_t)v40);
    v31[0] = &off_24EC1F8C8;
    v5 = v40[1];
    v6 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      v9 = v44;
      v11 = v42;
      v10 = v43;
      v12 = v45;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      v9 = v44;
      v11 = v42;
      v10 = v43;
      v12 = v45;
    }
    v31[1] = v5;
    v32 = v6;
    v33 = v10;
    v34 = 4 * v9;
    v35 = v11;
    v36 = 4;
    v37 = v12;
    if (v6)
    {
      v15 = (unint64_t *)&v6->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      do
        v17 = __ldaxr(v15);
      while (__stlxr(v17 - 1, v15));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 1;
    v53 = 0;
    sub_22432B21C((uint64_t)v31, 3u, (uint64_t)v38);
    sub_2232C1348(a2, (uint64_t)v38);
    v18 = v39;
    if (v39)
    {
      v19 = (unint64_t *)&v39->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v32;
    if (v32)
    {
      v22 = (unint64_t *)&v32->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (v46)
    {
      v40[0] = &off_24EC27198;
      v24 = v41;
      if (v41)
      {
        v25 = (unint64_t *)&v41->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
  }
  v47 = 2;
  sub_224554038(a1[6], &v47);
  if (v47 <= 1)
  {
    sub_2231B31EC(a1, a2 + 64, v47);
  }
  else
  {
    sub_2231B1308(a1 + 2);
    sub_2231B31EC(a1, a2 + 64, 2u);
    v27 = a1[4];
    v28 = *(_QWORD *)(v27 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v27 - 8);
    if (v28)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v28);
    a1[4] -= 16;
  }
  v47 = 2;
  sub_224554038(a1[6], &v47);
  if (v47 <= 1)
  {
    sub_2231B31EC(a1, a2 + 168, v47);
  }
  else
  {
    sub_2231B1308(a1 + 2);
    sub_2231B31EC(a1, a2 + 168, 2u);
    v29 = a1[4];
    v30 = *(_QWORD *)(v29 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v29 - 8);
    if (v30)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v30);
    a1[4] -= 16;
  }
}

void sub_2232C405C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  sub_22319B358((uint64_t)va1);
  sub_22319A5E0((uint64_t)va);
  sub_2232BBEF8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2232C4088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_2232BBEF8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232C40A0(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE v16[16];
  std::__shared_weak_count *v17;
  _BYTE v18[24];
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t (**v22)();
  uint64_t v23;
  std::__shared_weak_count *v24;
  char v25;

  v22 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v23);
  sub_22416BD7C((uint64_t)v18, (uint64_t)&v22, 0);
  v4 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v19 = 0;
  LODWORD(v22) = 2;
  sub_224554038(a1[6], &v22);
  if (v22 <= 1)
  {
    sub_2231B31EC(a1, (uint64_t)v18, v22);
  }
  else
  {
    sub_2231B1308(a1 + 2);
    sub_2231B31EC(a1, (uint64_t)v18, 2u);
    v7 = a1[4];
    v8 = *(_QWORD *)(v7 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v7 - 8);
    if (v8)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v8);
    a1[4] -= 16;
  }
  sub_22416C400((uint64_t)v18, (uint64_t)v16);
  v22 = &off_24EC28BC8;
  sub_2232C1E78((uint64_t)v16, &v23);
  v25 = 1;
  sub_2232C264C(a2, (uint64_t)&v22);
  if (v25)
  {
    v22 = &off_24EC28BC8;
    v9 = v24;
    if (v24)
    {
      v10 = (unint64_t *)&v24->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v12 = v17;
  if (!v17)
    goto LABEL_21;
  v13 = (unint64_t *)&v17->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v15 = v21;
    if (v21 == -1)
      return;
  }
  else
  {
LABEL_21:
    v15 = v21;
    if (v21 == -1)
      return;
  }
  ((void (*)(uint64_t (***)(), uint64_t *))off_24EC28B98[v15])(&v22, &v20);
}

void sub_2232C42BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_2232C1DFC(v2 - 112);
  sub_22319B358((uint64_t)va);
  sub_22319A588((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2232C42E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_22319A588((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232C42FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 - 96);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2232C4340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_22319A588((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232C4354(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE v16[16];
  std::__shared_weak_count *v17;
  _BYTE v18[24];
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t (**v22)();
  uint64_t v23;
  std::__shared_weak_count *v24;
  char v25;

  v22 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v23);
  sub_22416BD7C((uint64_t)v18, (uint64_t)&v22, 0);
  v4 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v19 = 0;
  LODWORD(v22) = 2;
  sub_224554038(a1[6], &v22);
  if (v22 <= 1)
  {
    sub_2231B31EC(a1, (uint64_t)v18, v22);
  }
  else
  {
    sub_2231B1308(a1 + 2);
    sub_2231B31EC(a1, (uint64_t)v18, 2u);
    v7 = a1[4];
    v8 = *(_QWORD *)(v7 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v7 - 8);
    if (v8)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v8);
    a1[4] -= 16;
  }
  sub_22416C400((uint64_t)v18, (uint64_t)v16);
  v22 = &off_24EC21040;
  sub_2232C1A28((uint64_t)v16, &v23);
  v25 = 1;
  sub_2232C1C50(a2, (uint64_t)&v22);
  if (v25)
  {
    v22 = &off_24EC21040;
    v9 = v24;
    if (v24)
    {
      v10 = (unint64_t *)&v24->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v12 = v17;
  if (!v17)
    goto LABEL_21;
  v13 = (unint64_t *)&v17->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v15 = v21;
    if (v21 == -1)
      return;
  }
  else
  {
LABEL_21:
    v15 = v21;
    if (v21 == -1)
      return;
  }
  ((void (*)(uint64_t (***)(), uint64_t *))off_24EC28B98[v15])(&v22, &v20);
}

void sub_2232C4570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_2232C1764(v2 - 112);
  sub_22319B358((uint64_t)va);
  sub_22319A588((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2232C459C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_22319A588((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232C45B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 - 96);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2232C45F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_22319A588((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232C4608(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD v28[2];
  std::__shared_weak_count *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  _BYTE v35[16];
  std::__shared_weak_count *v36;
  _QWORD v37[2];
  std::__shared_weak_count *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  __int16 v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  sub_2232C04A4(a1, a2);
  if (a3 < 2)
  {
    LOBYTE(v37[0]) = 0;
    v43 = 0;
    sub_2232C11A4(a1, (uint64_t)v37);
    if (v43)
    {
      v28[0] = &off_24EC1F8C8;
      v6 = v37[1];
      v7 = v38;
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v10 = v41;
        v12 = v39;
        v11 = v40;
        v13 = v42;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      else
      {
        v10 = v41;
        v12 = v39;
        v11 = v40;
        v13 = v42;
      }
      v28[1] = v6;
      v29 = v7;
      v30 = v11;
      v31 = 4 * v10;
      v32 = v12;
      v33 = 4;
      v34 = v13;
      if (v7)
      {
        v16 = (unint64_t *)&v7->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = 0;
      sub_22432B21C((uint64_t)v28, 3u, (uint64_t)v35);
      sub_2232C1348(a2 + 64, (uint64_t)v35);
      v19 = v36;
      if (v36)
      {
        v20 = (unint64_t *)&v36->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = v29;
      if (v29)
      {
        v23 = (unint64_t *)&v29->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (v43)
      {
        v37[0] = &off_24EC27198;
        v25 = v38;
        if (v38)
        {
          v26 = (unint64_t *)&v38->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
    }
  }
  else
  {
    sub_2232C1000(a1, a2 + 64);
  }
}

void sub_2232C48A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  sub_22319B358((uint64_t)va1);
  sub_22319A5E0((uint64_t)va);
  sub_2232BBEF8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2232C48CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_2232BBEF8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2232C48E0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 80))
  {
    *(_QWORD *)result = &off_24EC28D40;
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

void sub_2232C495C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 32)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232C4B0C(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2232BF3A0(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2232C4AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_2232C4B0C(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2232BF880();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

void sub_2232C4B84(uint64_t a1, uint64_t a2)
{
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 == *(unsigned __int8 *)(a2 + 80))
  {
    if (*(_BYTE *)(a1 + 80))
      sub_2232BC5EC(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC26EB0;
    if (v3)
    {
      v4 = *(std::__shared_weak_count **)(a1 + 16);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      *(_BYTE *)(a1 + 80) = 0;
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(std::__shared_weak_count **)(a2 + 16);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        v11 = *(_WORD *)(a2 + 72);
        do
          v12 = __ldxr(v9);
        while (__stxr(v12 + 1, v9));
        v13 = *(_QWORD *)(a2 + 24);
        v14 = *(_OWORD *)(a2 + 32);
        v15 = *(_OWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 32) = v14;
        *(_OWORD *)(a1 + 48) = v15;
        do
          v16 = __ldxr(v9);
        while (__stxr(v16 + 1, v9));
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a1 + 16) = v8;
        *(_QWORD *)(a1 + 24) = v13;
        *(_WORD *)(a1 + 72) = v11;
        do
          v17 = __ldaxr(v9);
        while (__stlxr(v17 - 1, v9));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        do
          v18 = __ldaxr(v9);
        while (__stlxr(v18 - 1, v9));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        *(_BYTE *)(a1 + 80) = 1;
      }
      else
      {
        v19 = *(_WORD *)(a2 + 72);
        v20 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = v20;
        v21 = *(_OWORD *)(a2 + 32);
        v22 = *(_OWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 32) = v21;
        *(_OWORD *)(a1 + 48) = v22;
        *(_WORD *)(a1 + 72) = v19;
        *(_BYTE *)(a1 + 80) = 1;
      }
    }
  }
}

void sub_2232C4D40(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  float *v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  sub_2232C0300(a1, a2);
  v8 = 0;
  sub_224553CF0(a1[6], &v8);
  if (v8)
  {
    if (!*(_BYTE *)(a2 + 92))
    {
      *(_DWORD *)(a2 + 88) = 0;
      *(_BYTE *)(a2 + 92) = 1;
    }
    sub_2245544CC(a1[6], (float *)(a2 + 88));
  }
  else if (*(_BYTE *)(a2 + 92))
  {
    *(_BYTE *)(a2 + 92) = 0;
  }
  if (a3 >= 2)
  {
    sub_2232C4F80((uint64_t)a1, a2 + 96);
    v9 = 0;
    sub_224553CF0(a1[6], &v9);
    if (v9)
    {
      if (!*(_BYTE *)(a2 + 132))
      {
        *(_DWORD *)(a2 + 128) = 0;
        *(_BYTE *)(a2 + 132) = 1;
      }
      sub_224554038(a1[6], (_DWORD *)(a2 + 128));
    }
    else if (*(_BYTE *)(a2 + 132))
    {
      *(_BYTE *)(a2 + 132) = 0;
    }
    v10 = 0;
    sub_224553CF0(a1[6], &v10);
    if (v10)
    {
      if (!*(_BYTE *)(a2 + 140))
      {
        *(_DWORD *)(a2 + 136) = 0;
        *(_BYTE *)(a2 + 140) = 1;
      }
      sub_224554038(a1[6], (_DWORD *)(a2 + 136));
    }
    else if (*(_BYTE *)(a2 + 140))
    {
      *(_BYTE *)(a2 + 140) = 0;
    }
    if (a3 >= 3)
    {
      v11 = 0;
      sub_224553CF0(a1[6], &v11);
      if (v11)
      {
        if (!*(_BYTE *)(a2 + 148))
        {
          *(_DWORD *)(a2 + 144) = 0;
          *(_BYTE *)(a2 + 148) = 1;
        }
        sub_224554038(a1[6], (_DWORD *)(a2 + 144));
      }
      else if (*(_BYTE *)(a2 + 148))
      {
        *(_BYTE *)(a2 + 148) = 0;
      }
      if (a3 >= 4)
      {
        sub_2231B2D7C((uint64_t)a1, a2 + 152);
        if (a3 != 4)
        {
          v12 = 0;
          sub_224553CF0(a1[6], &v12);
          if (v12)
          {
            v6 = (float *)(a2 + 168);
            if (!*(_BYTE *)(a2 + 204))
            {
              *(_DWORD *)(a2 + 200) = 0;
              *(_OWORD *)v6 = 0u;
              *(_OWORD *)(a2 + 184) = 0u;
              *(_BYTE *)(a2 + 204) = 1;
            }
            v7 = a1[6];
            sub_2245544CC(v7, v6);
            sub_2245544CC(v7, (float *)(a2 + 172));
            sub_2245544CC(v7, (float *)(a2 + 176));
            sub_2245544CC(v7, (float *)(a2 + 180));
            sub_2245544CC(v7, (float *)(a2 + 184));
            sub_2245544CC(v7, (float *)(a2 + 188));
            sub_2245544CC(v7, (float *)(a2 + 192));
            sub_2245544CC(v7, (float *)(a2 + 196));
            sub_2245544CC(v7, (float *)(a2 + 200));
          }
          else if (*(_BYTE *)(a2 + 204))
          {
            *(_BYTE *)(a2 + 204) = 0;
          }
        }
      }
    }
  }
}

void sub_2232C4F80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;

  v12 = 0;
  sub_224553CF0(*(_QWORD *)(a1 + 48), &v12);
  if (v12)
  {
    if (*(_BYTE *)(a2 + 24))
    {
      v4 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1;
    }
    else
    {
      v4 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 1;
    }
    v13 = v4;
    sub_2245543E8(*(_QWORD *)(a1 + 48), &v13);
    v7 = *(char **)a2;
    v6 = *(char **)(a2 + 8);
    v8 = (uint64_t)&v6[-*(_QWORD *)a2] >> 1;
    if (v13 <= v8)
    {
      if (v13 < v8)
      {
        v6 = &v7[2 * v13];
        *(_QWORD *)(a2 + 8) = v6;
      }
    }
    else
    {
      sub_2232C5090(a2, v13 - v8);
      v7 = *(char **)a2;
      v6 = *(char **)(a2 + 8);
    }
    v9 = v6 - v7;
    if (v9)
    {
      v10 = *(_QWORD *)(a1 + 48);
      v11 = 2 * (v9 >> 1);
      do
      {
        sub_224553E94(v10, v7);
        v7 += 2;
        v11 -= 2;
      }
      while (v11);
    }
  }
  else if (*(_BYTE *)(a2 + 24))
  {
    v5 = *(char **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v5;
      operator delete(v5);
    }
    *(_BYTE *)(a2 + 24) = 0;
  }
}

void sub_2232C5090(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  __int16 v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 1)
  {
    if (a2)
    {
      bzero(v5, 2 * a2);
      v6 = &v5[2 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 1;
    v10 = (v8 >> 1) + a2;
    if (v10 < 0)
      sub_223257BE4();
    v11 = v4 - (_QWORD)v7;
    if (v11 > v10)
      v10 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 < 0)
        sub_223174E94();
      v13 = operator new(2 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v9];
    v15 = 2 * a2;
    v16 = &v13[2 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 2;
      if (v18 < 0x1E)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 1) + 1;
      v20 = 2 * (v19 & 0xFFFFFFFFFFFFFFF0);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[2 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 16;
      }
      while (v23);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_29:
        do
        {
          v25 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *((_WORD *)v14 - 1) = v25;
          v14 -= 2;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

uint64_t sub_2232C5220(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 56))
  {
    *(_QWORD *)result = &off_24EC29028;
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

void sub_2232C529C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232C544C(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2232C54C4(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2232C53F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_2232C544C(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2232BEA90();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

uint64_t *sub_2232C54C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;
  uint64_t v19;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v19, v3, 1);
  v9 = *(_QWORD *)(v19 + 16);
  *((_OWORD *)a1 + 1) = *(_OWORD *)v19;
  a1[4] = v9;
  v19 = 0;
  MEMORY[0x227684CE8]();
  v10 = *a1;
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *((_WORD *)a1 + 20) = v17 & 0xFF00 | v16;
  return a1;
}

void sub_2232C5614(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2232C5628(uint64_t a1, uint64_t a2)
{
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int16 v17;
  uint64_t v18;

  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
      sub_2232BC104(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC270A0;
    if (v3)
    {
      v4 = *(std::__shared_weak_count **)(a1 + 16);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      *(_BYTE *)(a1 + 56) = 0;
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(std::__shared_weak_count **)(a2 + 16);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        v11 = *(_WORD *)(a2 + 48);
        do
          v12 = __ldxr(v9);
        while (__stxr(v12 + 1, v9));
        v13 = *(_QWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        do
          v14 = __ldxr(v9);
        while (__stxr(v14 + 1, v9));
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a1 + 16) = v8;
        *(_QWORD *)(a1 + 24) = v13;
        *(_WORD *)(a1 + 48) = v11;
        do
          v15 = __ldaxr(v9);
        while (__stlxr(v15 - 1, v9));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        do
          v16 = __ldaxr(v9);
        while (__stlxr(v16 - 1, v9));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        *(_BYTE *)(a1 + 56) = 1;
      }
      else
      {
        v17 = *(_WORD *)(a2 + 48);
        v18 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = v18;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_WORD *)(a1 + 48) = v17;
        *(_BYTE *)(a1 + 56) = 1;
      }
    }
  }
}

void sub_2232C57D4(_QWORD *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_2232C1840(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC28A18;
    sub_2232C59F4((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C5C1C(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC28A18;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC28B98[v19])(&v13, &v18);
}

void sub_2232C5920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_22319B358((uint64_t)va);
  sub_2232C17E0(v2 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_2232C5978(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 80))
  {
    *(_QWORD *)result = &off_24EC28A18;
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

void sub_2232C59F4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2232C5BA4(a1);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_2232BED4C(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2232C5B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_2232C5BA4(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2232BEF28();
  v3 = sub_2231DE81C();
  v5 = *(_DWORD *)(a1 + 56);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

void sub_2232C5C1C(uint64_t a1, uint64_t a2)
{
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 == *(unsigned __int8 *)(a2 + 80))
  {
    if (*(_BYTE *)(a1 + 80))
      sub_2232BC5EC(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC27290;
    if (v3)
    {
      v4 = *(std::__shared_weak_count **)(a1 + 16);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      *(_BYTE *)(a1 + 80) = 0;
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(std::__shared_weak_count **)(a2 + 16);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        v11 = *(_WORD *)(a2 + 72);
        do
          v12 = __ldxr(v9);
        while (__stxr(v12 + 1, v9));
        v13 = *(_QWORD *)(a2 + 24);
        v14 = *(_OWORD *)(a2 + 32);
        v15 = *(_OWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 32) = v14;
        *(_OWORD *)(a1 + 48) = v15;
        do
          v16 = __ldxr(v9);
        while (__stxr(v16 + 1, v9));
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a1 + 16) = v8;
        *(_QWORD *)(a1 + 24) = v13;
        *(_WORD *)(a1 + 72) = v11;
        do
          v17 = __ldaxr(v9);
        while (__stlxr(v17 - 1, v9));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        do
          v18 = __ldaxr(v9);
        while (__stlxr(v18 - 1, v9));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        *(_BYTE *)(a1 + 80) = 1;
      }
      else
      {
        v19 = *(_WORD *)(a2 + 72);
        v20 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = v20;
        v21 = *(_OWORD *)(a2 + 32);
        v22 = *(_OWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 32) = v21;
        *(_OWORD *)(a1 + 48) = v22;
        *(_WORD *)(a1 + 72) = v19;
        *(_BYTE *)(a1 + 80) = 1;
      }
    }
  }
}

void sub_2232C5DD8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  char v8;

  sub_224554738(*(_QWORD *)(a1 + 48), (_BYTE *)a2);
  sub_224554738(*(_QWORD *)(a1 + 48), (_BYTE *)(a2 + 1));
  sub_224553F80(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 4));
  v6 = 0;
  sub_2245542F8(*(_QWORD *)(a1 + 48), &v6);
  *(_QWORD *)(a2 + 8) = v6;
  sub_224553F80(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 16));
  if (a3 >= 2)
  {
    v7 = 2;
    sub_224554038(*(_QWORD *)(a1 + 48), &v7);
    sub_2232C5EB4(a1, a2 + 24, v7);
    if (a3 != 2)
    {
      v8 = 0;
      sub_224553CF0(*(_QWORD *)(a1 + 48), &v8);
      *(_BYTE *)(a2 + 192) = v8;
      if (a3 >= 4)
        sub_224554738(*(_QWORD *)(a1 + 48), (_BYTE *)(a2 + 2));
    }
  }
}

void sub_2232C5EB4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *i;
  uint64_t v14;
  void (*v15)(uint64_t);
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  _QWORD *v25;
  char *j;
  uint64_t v27;
  void (*v28)(uint64_t);
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *k;
  uint64_t v39;
  void (*v40)(uint64_t);
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *m;
  uint64_t v51;
  void (*v52)(uint64_t);
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char *n;
  uint64_t v63;
  void (*v64)(uint64_t);
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  _QWORD *v74;
  char *ii;
  uint64_t v76;
  void (*v77)(uint64_t);
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char *jj;
  uint64_t v88;
  void (*v89)(uint64_t);
  _QWORD *v90;
  _QWORD *v91;
  std::bad_cast *exception;
  std::bad_cast *v93;
  std::bad_cast *v94;
  std::bad_cast *v95;
  std::bad_cast *v96;
  std::bad_cast *v97;
  std::bad_cast *v98;
  std::bad_cast *v99;
  std::bad_cast *v100;
  std::bad_cast *v101;
  std::bad_cast *v102;
  std::bad_cast *v103;
  std::bad_cast *v104;
  std::bad_cast *v105;
  unint64_t v106;
  int v107;
  unint64_t v108;
  _QWORD *v109;

  v106 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
  sub_2245543E8(*(_QWORD *)(a1 + 48), &v106);
  v7 = *(char **)a2;
  v6 = *(char **)(a2 + 8);
  v8 = (uint64_t)&v6[-*(_QWORD *)a2] >> 4;
  if (v106 <= v8)
  {
    if (v106 < v8)
    {
      v6 = &v7[16 * v106];
      *(_QWORD *)(a2 + 8) = v6;
    }
  }
  else
  {
    sub_2232C68D0((char **)a2, v106 - v8);
    v7 = *(char **)a2;
    v6 = *(char **)(a2 + 8);
  }
  if (v6 != v7)
  {
    v9 = v6;
    do
    {
      v10 = 0;
      v11 = *(_QWORD *)(a1 + 48);
      do
      {
        sub_2245564B0(v11, (uint64_t)&v107);
        if (v107 != 2 || v108 >= 0x100)
        {
          exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          exception->__vftable = 0;
          v93 = std::bad_cast::bad_cast(exception);
          v93->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v93, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
        }
        v7[v10] = v108;
        v12 = v109;
        v109 = 0;
        if (v12)
        {
          for (i = (char *)v12[4]; i != (char *)v12[6]; i -= 16)
          {
            v15 = (void (*)(uint64_t))*((_QWORD *)i - 2);
            v14 = *((_QWORD *)i - 1);
            v15(v14);
          }
          free(i);
          v16 = (_QWORD *)v12[3];
          if (v16)
          {
            do
            {
              v17 = (_QWORD *)*v16;
              free(v16);
              v16 = v17;
            }
            while (v17);
          }
          free(v12);
        }
        ++v10;
      }
      while (v10 != 16);
      v7 += 16;
    }
    while (v7 != v9);
  }
  v106 = (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 6;
  sub_2245543E8(*(_QWORD *)(a1 + 48), &v106);
  v19 = *(_QWORD *)(a2 + 24);
  v18 = *(_QWORD *)(a2 + 32);
  v20 = (v18 - v19) >> 6;
  if (v106 <= v20)
  {
    if (v106 < v20)
    {
      v18 = v19 + (v106 << 6);
      *(_QWORD *)(a2 + 32) = v18;
    }
  }
  else
  {
    sub_2232C69F8((char **)(a2 + 24), v106 - v20);
    v19 = *(_QWORD *)(a2 + 24);
    v18 = *(_QWORD *)(a2 + 32);
  }
  if (v18 != v19)
  {
    v21 = v18;
    do
    {
      v22 = 0;
      v23 = *(_QWORD *)(a1 + 48);
      do
      {
        sub_2245564B0(v23, (uint64_t)&v107);
        if (v107 == 2)
        {
          *(float *)(v19 + 4 * v22) = (float)v108;
          v25 = v109;
          v109 = 0;
          if (!v25)
            goto LABEL_29;
LABEL_38:
          for (j = (char *)v25[4]; j != (char *)v25[6]; j -= 16)
          {
            v28 = (void (*)(uint64_t))*((_QWORD *)j - 2);
            v27 = *((_QWORD *)j - 1);
            v28(v27);
          }
          free(j);
          v29 = (_QWORD *)v25[3];
          if (v29)
          {
            do
            {
              v30 = (_QWORD *)*v29;
              free(v29);
              v29 = v30;
            }
            while (v30);
          }
          free(v25);
          goto LABEL_29;
        }
        if (v107 == 3)
        {
          *(float *)(v19 + 4 * v22) = (float)(uint64_t)v108;
          v25 = v109;
          v109 = 0;
          if (!v25)
            goto LABEL_29;
          goto LABEL_38;
        }
        if (v107 != 4)
        {
          v102 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v102->__vftable = 0;
          v103 = std::bad_cast::bad_cast(v102);
          v103->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v103, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
        }
        v24 = *(double *)&v108;
        *(float *)(v19 + 4 * v22) = v24;
        v25 = v109;
        v109 = 0;
        if (v25)
          goto LABEL_38;
LABEL_29:
        ++v22;
      }
      while (v22 != 16);
      v19 += 64;
    }
    while (v19 != v21);
  }
  v106 = (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 4;
  sub_2245543E8(*(_QWORD *)(a1 + 48), &v106);
  v32 = *(_QWORD *)(a2 + 48);
  v31 = *(_QWORD *)(a2 + 56);
  v33 = (v31 - v32) >> 4;
  if (v106 <= v33)
  {
    if (v106 < v33)
    {
      v31 = v32 + 16 * v106;
      *(_QWORD *)(a2 + 56) = v31;
    }
  }
  else
  {
    sub_2232C68D0((char **)(a2 + 48), v106 - v33);
    v32 = *(_QWORD *)(a2 + 48);
    v31 = *(_QWORD *)(a2 + 56);
  }
  if (v31 != v32)
  {
    v34 = v31;
    do
    {
      v35 = 0;
      v36 = *(_QWORD *)(a1 + 48);
      do
      {
        sub_2245564B0(v36, (uint64_t)&v107);
        if (v107 != 2 || v108 >= 0x100)
        {
          v94 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v94->__vftable = 0;
          v95 = std::bad_cast::bad_cast(v94);
          v95->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v95, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
        }
        *(_BYTE *)(v32 + v35) = v108;
        v37 = v109;
        v109 = 0;
        if (v37)
        {
          for (k = (char *)v37[4]; k != (char *)v37[6]; k -= 16)
          {
            v40 = (void (*)(uint64_t))*((_QWORD *)k - 2);
            v39 = *((_QWORD *)k - 1);
            v40(v39);
          }
          free(k);
          v41 = (_QWORD *)v37[3];
          if (v41)
          {
            do
            {
              v42 = (_QWORD *)*v41;
              free(v41);
              v41 = v42;
            }
            while (v42);
          }
          free(v37);
        }
        ++v35;
      }
      while (v35 != 16);
      v32 += 16;
    }
    while (v32 != v34);
  }
  v106 = (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 4;
  sub_2245543E8(*(_QWORD *)(a1 + 48), &v106);
  v44 = *(_QWORD *)(a2 + 72);
  v43 = *(_QWORD *)(a2 + 80);
  v45 = (v43 - v44) >> 4;
  if (v106 <= v45)
  {
    if (v106 < v45)
    {
      v43 = v44 + 16 * v106;
      *(_QWORD *)(a2 + 80) = v43;
    }
  }
  else
  {
    sub_2232C68D0((char **)(a2 + 72), v106 - v45);
    v44 = *(_QWORD *)(a2 + 72);
    v43 = *(_QWORD *)(a2 + 80);
  }
  if (v43 != v44)
  {
    v46 = v43;
    do
    {
      v47 = 0;
      v48 = *(_QWORD *)(a1 + 48);
      do
      {
        sub_2245564B0(v48, (uint64_t)&v107);
        if (v107 != 2 || v108 >= 0x100)
        {
          v96 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v96->__vftable = 0;
          v97 = std::bad_cast::bad_cast(v96);
          v97->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v97, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
        }
        *(_BYTE *)(v44 + v47) = v108;
        v49 = v109;
        v109 = 0;
        if (v49)
        {
          for (m = (char *)v49[4]; m != (char *)v49[6]; m -= 16)
          {
            v52 = (void (*)(uint64_t))*((_QWORD *)m - 2);
            v51 = *((_QWORD *)m - 1);
            v52(v51);
          }
          free(m);
          v53 = (_QWORD *)v49[3];
          if (v53)
          {
            do
            {
              v54 = (_QWORD *)*v53;
              free(v53);
              v53 = v54;
            }
            while (v54);
          }
          free(v49);
        }
        ++v47;
      }
      while (v47 != 16);
      v44 += 16;
    }
    while (v44 != v46);
  }
  if (a3 >= 2)
  {
    v106 = (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 4;
    sub_2245543E8(*(_QWORD *)(a1 + 48), &v106);
    v56 = *(_QWORD *)(a2 + 96);
    v55 = *(_QWORD *)(a2 + 104);
    v57 = (v55 - v56) >> 4;
    if (v106 <= v57)
    {
      if (v106 < v57)
      {
        v55 = v56 + 16 * v106;
        *(_QWORD *)(a2 + 104) = v55;
      }
    }
    else
    {
      sub_2232C68D0((char **)(a2 + 96), v106 - v57);
      v56 = *(_QWORD *)(a2 + 96);
      v55 = *(_QWORD *)(a2 + 104);
    }
    if (v55 != v56)
    {
      v58 = v55;
      do
      {
        v59 = 0;
        v60 = *(_QWORD *)(a1 + 48);
        do
        {
          sub_2245564B0(v60, (uint64_t)&v107);
          if (v107 != 2 || v108 >= 0x100)
          {
            v98 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v98->__vftable = 0;
            v99 = std::bad_cast::bad_cast(v98);
            v99->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
            __cxa_throw(v99, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
          }
          *(_BYTE *)(v56 + v59) = v108;
          v61 = v109;
          v109 = 0;
          if (v61)
          {
            for (n = (char *)v61[4]; n != (char *)v61[6]; n -= 16)
            {
              v64 = (void (*)(uint64_t))*((_QWORD *)n - 2);
              v63 = *((_QWORD *)n - 1);
              v64(v63);
            }
            free(n);
            v65 = (_QWORD *)v61[3];
            if (v65)
            {
              do
              {
                v66 = (_QWORD *)*v65;
                free(v65);
                v65 = v66;
              }
              while (v66);
            }
            free(v61);
          }
          ++v59;
        }
        while (v59 != 16);
        v56 += 16;
      }
      while (v56 != v58);
    }
    v106 = (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 6;
    sub_2245543E8(*(_QWORD *)(a1 + 48), &v106);
    v68 = *(_QWORD *)(a2 + 120);
    v67 = *(_QWORD *)(a2 + 128);
    v69 = (v67 - v68) >> 6;
    if (v106 <= v69)
    {
      if (v106 < v69)
      {
        v67 = v68 + (v106 << 6);
        *(_QWORD *)(a2 + 128) = v67;
      }
    }
    else
    {
      sub_2232C69F8((char **)(a2 + 120), v106 - v69);
      v68 = *(_QWORD *)(a2 + 120);
      v67 = *(_QWORD *)(a2 + 128);
    }
    if (v67 != v68)
    {
      v70 = v67;
      do
      {
        v71 = 0;
        v72 = *(_QWORD *)(a1 + 48);
        do
        {
          sub_2245564B0(v72, (uint64_t)&v107);
          if (v107 == 2)
          {
            *(float *)(v68 + 4 * v71) = (float)v108;
            v74 = v109;
            v109 = 0;
            if (!v74)
              goto LABEL_111;
LABEL_120:
            for (ii = (char *)v74[4]; ii != (char *)v74[6]; ii -= 16)
            {
              v77 = (void (*)(uint64_t))*((_QWORD *)ii - 2);
              v76 = *((_QWORD *)ii - 1);
              v77(v76);
            }
            free(ii);
            v78 = (_QWORD *)v74[3];
            if (v78)
            {
              do
              {
                v79 = (_QWORD *)*v78;
                free(v78);
                v78 = v79;
              }
              while (v79);
            }
            free(v74);
            goto LABEL_111;
          }
          if (v107 == 3)
          {
            *(float *)(v68 + 4 * v71) = (float)(uint64_t)v108;
            v74 = v109;
            v109 = 0;
            if (!v74)
              goto LABEL_111;
            goto LABEL_120;
          }
          if (v107 != 4)
          {
            v104 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v104->__vftable = 0;
            v105 = std::bad_cast::bad_cast(v104);
            v105->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
            __cxa_throw(v105, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
          }
          v73 = *(double *)&v108;
          *(float *)(v68 + 4 * v71) = v73;
          v74 = v109;
          v109 = 0;
          if (v74)
            goto LABEL_120;
LABEL_111:
          ++v71;
        }
        while (v71 != 16);
        v68 += 64;
      }
      while (v68 != v70);
    }
    v106 = (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 4;
    sub_2245543E8(*(_QWORD *)(a1 + 48), &v106);
    v81 = *(_QWORD *)(a2 + 144);
    v80 = *(_QWORD *)(a2 + 152);
    v82 = (v80 - v81) >> 4;
    if (v106 <= v82)
    {
      if (v106 < v82)
      {
        v80 = v81 + 16 * v106;
        *(_QWORD *)(a2 + 152) = v80;
      }
    }
    else
    {
      sub_2232C68D0((char **)(a2 + 144), v106 - v82);
      v81 = *(_QWORD *)(a2 + 144);
      v80 = *(_QWORD *)(a2 + 152);
    }
    if (v80 != v81)
    {
      v83 = v80;
      do
      {
        v84 = 0;
        v85 = *(_QWORD *)(a1 + 48);
        do
        {
          sub_2245564B0(v85, (uint64_t)&v107);
          if (v107 != 2 || v108 >= 0x100)
          {
            v100 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v100->__vftable = 0;
            v101 = std::bad_cast::bad_cast(v100);
            v101->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
            __cxa_throw(v101, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
          }
          *(_BYTE *)(v81 + v84) = v108;
          v86 = v109;
          v109 = 0;
          if (v86)
          {
            for (jj = (char *)v86[4]; jj != (char *)v86[6]; jj -= 16)
            {
              v89 = (void (*)(uint64_t))*((_QWORD *)jj - 2);
              v88 = *((_QWORD *)jj - 1);
              v89(v88);
            }
            free(jj);
            v90 = (_QWORD *)v86[3];
            if (v90)
            {
              do
              {
                v91 = (_QWORD *)*v90;
                free(v90);
                v90 = v91;
              }
              while (v91);
            }
            free(v86);
          }
          ++v84;
        }
        while (v84 != 16);
        v81 += 16;
      }
      while (v81 != v83);
    }
  }
}

void sub_2232C6828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232C683C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232C6850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232C6864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232C6878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232C688C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232C68A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232C68D0(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      sub_22316E078();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_223174E94();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

void sub_2232C69F8(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 6)
  {
    if (a2)
    {
      v12 = a2 << 6;
      bzero(a1[1], a2 << 6);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 6;
    v8 = v7 + a2;
    if ((v7 + a2) >> 58)
      sub_22316E078();
    v9 = v4 - v6;
    if (v9 >> 5 > v8)
      v8 = v9 >> 5;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0)
      v10 = 0x3FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 58)
        sub_223174E94();
      v11 = (char *)operator new(v10 << 6);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[64 * v7];
    v14 = a2 << 6;
    v15 = &v11[64 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_OWORD *)v5 - 4);
        v18 = *((_OWORD *)v5 - 3);
        v19 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v19;
        *((_OWORD *)v13 - 4) = v17;
        *((_OWORD *)v13 - 3) = v18;
        v13 -= 64;
        v5 -= 64;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

char **sub_2232C6B24(char **a1, char **a2)
{
  if (a1 != a2)
  {
    sub_2231984D0(a1, *a2, a2[1], (a2[1] - *a2) >> 4);
    sub_2232C6BE0(a1 + 3, a2[3], a2[4], (a2[4] - a2[3]) >> 6);
    sub_2231984D0(a1 + 6, a2[6], a2[7], (a2[7] - a2[6]) >> 4);
    sub_2231984D0(a1 + 9, a2[9], a2[10], (a2[10] - a2[9]) >> 4);
    sub_2231984D0(a1 + 12, a2[12], a2[13], (a2[13] - a2[12]) >> 4);
    sub_2232C6BE0(a1 + 15, a2[15], a2[16], (a2[16] - a2[15]) >> 6);
    sub_2231984D0(a1 + 18, a2[18], a2[19], (a2[19] - a2[18]) >> 4);
  }
  return a1;
}

_QWORD *sub_2232C6BE0(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 6)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 58)
      goto LABEL_22;
    v10 = v8 >> 5;
    if (v8 >> 5 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0;
    v12 = 0x3FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 58)
LABEL_22:
      sub_22316E078();
    v13 = v12 << 6;
    result = operator new(v12 << 6);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 6;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[64 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

_QWORD *sub_2232C6D24(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  char *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  int64_t v26;
  char *v27;
  char *v28;
  _BYTE *v29;
  _BYTE *v30;
  int64_t v31;
  char *v32;
  char *v33;
  _BYTE *v34;
  _BYTE *v35;
  int64_t v36;
  char *v37;
  char *v38;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_22316E078();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[16 * (v6 >> 4)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_22316E078();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    v13 = &v12[64 * (v11 >> 6)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v15 = *(_BYTE **)(a2 + 48);
  v14 = *(_BYTE **)(a2 + 56);
  v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0)
      sub_22316E078();
    v17 = (char *)operator new(v14 - v15);
    a1[6] = v17;
    a1[7] = v17;
    v18 = &v17[16 * (v16 >> 4)];
    a1[8] = v18;
    memcpy(v17, v15, v16);
    a1[7] = v18;
  }
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  v20 = *(_BYTE **)(a2 + 72);
  v19 = *(_BYTE **)(a2 + 80);
  v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0)
      sub_22316E078();
    v22 = (char *)operator new(v19 - v20);
    a1[9] = v22;
    a1[10] = v22;
    v23 = &v22[16 * (v21 >> 4)];
    a1[11] = v23;
    memcpy(v22, v20, v21);
    a1[10] = v23;
  }
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  v25 = *(_BYTE **)(a2 + 96);
  v24 = *(_BYTE **)(a2 + 104);
  v26 = v24 - v25;
  if (v24 != v25)
  {
    if (v26 < 0)
      sub_22316E078();
    v27 = (char *)operator new(v24 - v25);
    a1[12] = v27;
    a1[13] = v27;
    v28 = &v27[16 * (v26 >> 4)];
    a1[14] = v28;
    memcpy(v27, v25, v26);
    a1[13] = v28;
  }
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  v30 = *(_BYTE **)(a2 + 120);
  v29 = *(_BYTE **)(a2 + 128);
  v31 = v29 - v30;
  if (v29 != v30)
  {
    if (v31 < 0)
      sub_22316E078();
    v32 = (char *)operator new(v29 - v30);
    a1[15] = v32;
    a1[16] = v32;
    v33 = &v32[64 * (v31 >> 6)];
    a1[17] = v33;
    memcpy(v32, v30, v31);
    a1[16] = v33;
  }
  a1[18] = 0;
  a1[19] = 0;
  a1[20] = 0;
  v35 = *(_BYTE **)(a2 + 144);
  v34 = *(_BYTE **)(a2 + 152);
  v36 = v34 - v35;
  if (v34 != v35)
  {
    if (v36 < 0)
      sub_22316E078();
    v37 = (char *)operator new(v34 - v35);
    a1[18] = v37;
    a1[19] = v37;
    v38 = &v37[16 * (v36 >> 4)];
    a1[20] = v38;
    memcpy(v37, v35, v36);
    a1[19] = v38;
  }
  return a1;
}

void sub_2232C6F94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v9 = *v7;
  if (*v7)
  {
    *(_QWORD *)(v1 + 152) = v9;
    operator delete(v9);
    v10 = *v6;
    if (!*v6)
    {
LABEL_3:
      v11 = *v5;
      if (!*v5)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v10 = *v6;
    if (!*v6)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 128) = v10;
  operator delete(v10);
  v11 = *v5;
  if (!*v5)
  {
LABEL_4:
    v12 = *v4;
    if (!*v4)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  *(_QWORD *)(v1 + 104) = v11;
  operator delete(v11);
  v12 = *v4;
  if (!*v4)
  {
LABEL_5:
    v13 = *v3;
    if (!*v3)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  *(_QWORD *)(v1 + 80) = v12;
  operator delete(v12);
  v13 = *v3;
  if (!*v3)
  {
LABEL_6:
    v14 = *v2;
    if (!*v2)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v1 + 56) = v13;
  operator delete(v13);
  v14 = *v2;
  if (!*v2)
  {
LABEL_7:
    v15 = *(void **)v1;
    if (!*(_QWORD *)v1)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_15:
  *(_QWORD *)(v1 + 32) = v14;
  operator delete(v14);
  v15 = *(void **)v1;
  if (!*(_QWORD *)v1)
LABEL_9:
    _Unwind_Resume(exception_object);
LABEL_8:
  *(_QWORD *)(v1 + 8) = v15;
  operator delete(v15);
  goto LABEL_9;
}

void sub_2232C7094()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x2232C6FD8);
  JUMPOUT(0x2232C6FD0);
}

void sub_2232C70A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;

  v13 = 0x8F5C28F5C28F5C29 * ((a2[1] - *a2) >> 3);
  sub_2245543E8(*(_QWORD *)(a1 + 48), &v13);
  v4 = a2[1];
  v5 = 0x8F5C28F5C28F5C29 * ((v4 - *a2) >> 3);
  if (v13 > v5)
  {
    sub_2232C71E0(a2, v13 - v5);
    v8 = a2;
    v6 = *a2;
    v7 = v8[1];
    v9 = v7 - v6;
    if (v7 == v6)
      return;
    goto LABEL_10;
  }
  if (v13 >= v5)
  {
    v6 = *a2;
    v9 = v4 - v6;
    if (!v9)
      return;
    goto LABEL_10;
  }
  v10 = *a2 + 200 * v13;
  if (v4 != v10)
  {
    do
    {
      v11 = v4 - 200;
      sub_223255CAC(v4 - 176);
      v4 = v11;
    }
    while (v11 != v10);
  }
  a2[1] = v10;
  v6 = *a2;
  v9 = v10 - v6;
  if (v10 != v6)
  {
LABEL_10:
    v12 = 200 * (v9 / 200);
    do
    {
      v14 = 4;
      sub_224554038(*(_QWORD *)(a1 + 48), &v14);
      sub_2232C5DD8(a1, v6, v14);
      v6 += 200;
      v12 -= 200;
    }
    while (v12);
  }
}

void sub_2232C71E0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = a1[1];
  if (0x8F5C28F5C28F5C29 * ((v4 - v6) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 200 * ((200 * a2 - 200) / 0xC8) + 200;
      bzero((void *)a1[1], v13);
      v6 += v13;
    }
    a1[1] = v6;
  }
  else
  {
    v7 = *a1;
    v8 = 0x8F5C28F5C28F5C29 * ((v6 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x147AE147AE147AELL)
      sub_22316E078();
    v10 = 0x8F5C28F5C28F5C29 * ((v4 - v7) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xA3D70A3D70A3D7)
      v11 = 0x147AE147AE147AELL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x147AE147AE147AELL)
        sub_223174E94();
      v12 = (char *)operator new(200 * v11);
    }
    else
    {
      v12 = 0;
    }
    v19 = &v12[200 * v8];
    v20 = &v12[200 * v11];
    v14 = 200 * ((200 * a2 - 200) / 0xC8) + 200;
    bzero(v19, v14);
    sub_2232C744C(v5, v6, v6, v7, v7, (uint64_t)v19, (uint64_t)v19);
    v16 = (char *)*a1;
    v15 = (char *)a1[1];
    *a1 = v17;
    a1[1] = (uint64_t)&v19[v14];
    a1[2] = (uint64_t)v20;
    if (v15 != v16)
    {
      do
      {
        v18 = v15 - 200;
        sub_223255CAC((uint64_t)(v15 - 176));
        v15 = v18;
      }
      while (v18 != v16);
    }
    if (v16)
      operator delete(v16);
  }
}

void sub_2232C73E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2232C73F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2232C73F8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 200;
    sub_223255CAC(i - 176);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 sub_2232C744C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;

  if (a3 != a5)
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      v10 = *(_OWORD *)(a3 + v7 - 200);
      *(_DWORD *)(v8 - 184) = *(_DWORD *)(a3 + v7 - 184);
      *(_QWORD *)(v8 - 168) = 0;
      *(_QWORD *)(v8 - 160) = 0;
      *(_QWORD *)(v8 - 176) = 0;
      *(_OWORD *)(v8 - 200) = v10;
      *(_OWORD *)(v8 - 176) = *(_OWORD *)(a3 + v7 - 176);
      *(_QWORD *)(v8 - 160) = *(_QWORD *)(a3 + v7 - 160);
      *(_QWORD *)(v9 - 176) = 0;
      *(_QWORD *)(v9 - 168) = 0;
      *(_QWORD *)(v9 - 160) = 0;
      *(_QWORD *)(v8 - 152) = 0;
      *(_QWORD *)(v8 - 144) = 0;
      *(_QWORD *)(v8 - 136) = 0;
      *(_OWORD *)(v8 - 152) = *(_OWORD *)(a3 + v7 - 152);
      *(_QWORD *)(v8 - 136) = *(_QWORD *)(a3 + v7 - 136);
      *(_QWORD *)(v9 - 152) = 0;
      *(_QWORD *)(v9 - 144) = 0;
      *(_QWORD *)(v9 - 136) = 0;
      *(_QWORD *)(v8 - 128) = 0;
      *(_QWORD *)(v8 - 120) = 0;
      *(_QWORD *)(v8 - 112) = 0;
      *(_OWORD *)(v8 - 128) = *(_OWORD *)(a3 + v7 - 128);
      *(_QWORD *)(v8 - 112) = *(_QWORD *)(a3 + v7 - 112);
      *(_QWORD *)(v9 - 128) = 0;
      *(_QWORD *)(v9 - 120) = 0;
      *(_QWORD *)(v9 - 112) = 0;
      *(_QWORD *)(v8 - 104) = 0;
      *(_QWORD *)(v8 - 96) = 0;
      *(_QWORD *)(v8 - 88) = 0;
      *(_OWORD *)(v8 - 104) = *(_OWORD *)(a3 + v7 - 104);
      *(_QWORD *)(v8 - 88) = *(_QWORD *)(a3 + v7 - 88);
      *(_QWORD *)(v9 - 104) = 0;
      *(_QWORD *)(v9 - 96) = 0;
      *(_QWORD *)(v9 - 88) = 0;
      *(_QWORD *)(v8 - 80) = 0;
      *(_QWORD *)(v8 - 72) = 0;
      *(_QWORD *)(v8 - 64) = 0;
      *(_OWORD *)(v8 - 80) = *(_OWORD *)(a3 + v7 - 80);
      *(_QWORD *)(v8 - 64) = *(_QWORD *)(a3 + v7 - 64);
      *(_QWORD *)(v9 - 80) = 0;
      *(_QWORD *)(v9 - 72) = 0;
      *(_QWORD *)(v9 - 64) = 0;
      *(_QWORD *)(v8 - 56) = 0;
      *(_QWORD *)(v8 - 48) = 0;
      *(_QWORD *)(v8 - 40) = 0;
      *(_OWORD *)(v8 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(_QWORD *)(v8 - 40) = *(_QWORD *)(a3 + v7 - 40);
      *(_QWORD *)(v9 - 56) = 0;
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v8 - 32) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      result = *(__n128 *)(a3 + v7 - 32);
      *(__n128 *)(v8 - 32) = result;
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 + v7 - 16);
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_BYTE *)(v8 - 8) = *(_BYTE *)(a3 + v7 - 8);
      v7 -= 200;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

void sub_2232C7578(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;

  v2 = (uint64_t)(a1 + 2);
  v3 = *a1;
  if (0x8F5C28F5C28F5C29 * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x147AE147AE147AFLL)
      sub_22316E078();
    v5 = a1[1];
    v6 = 200 * a2;
    v11 = operator new(200 * a2);
    v12 = (uint64_t)v11 + v5 - v3;
    sub_2232C744C(v2, v5, v5, v3, v3, v12, v12);
    v8 = (char *)*a1;
    v7 = (char *)a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = (uint64_t)v11 + v6;
    if (v7 != v8)
    {
      do
      {
        v10 = v7 - 200;
        sub_223255CAC((uint64_t)(v7 - 176));
        v7 = v10;
      }
      while (v10 != v8);
    }
    if (v8)
      operator delete(v8);
  }
}

void sub_2232C7680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2232C73F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2232C7694(char *a1, char *a2, uint64_t *a3)
{
  char *v4;
  char *v5;
  char v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  void *v12[3];
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *__p;
  void *v24;
  char v25;
  uint64_t *v26;

  v26 = a3;
  if (a1 != a2)
  {
    v4 = a1;
    do
    {
      v7 = *v4;
      v8 = *(_WORD *)(v4 + 1);
      v9 = *((_DWORD *)v4 + 1);
      v10 = *((_QWORD *)v4 + 1);
      v11 = *((_DWORD *)v4 + 4);
      v5 = v4 + 24;
      sub_223C7574C((char ***)v4 + 3, (uint64_t)v12);
      v25 = v4[192];
      sub_2232C77CC(&v26, (uint64_t)&v7);
      if (__p)
      {
        v24 = __p;
        operator delete(__p);
      }
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      if (v17)
      {
        v18 = v17;
        operator delete(v17);
      }
      if (v15)
      {
        v16 = v15;
        operator delete(v15);
      }
      if (v13)
      {
        v14 = v13;
        operator delete(v13);
      }
      if (v12[0])
      {
        v12[1] = v12[0];
        operator delete(v12[0]);
      }
      v4 += 200;
    }
    while (v5 + 176 != a2);
    return v26;
  }
  return a3;
}

void sub_2232C77B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_2232C77CC(uint64_t **result, uint64_t a2)
{
  uint64_t **v2;
  uint64_t *v3;
  unint64_t v4;
  __int128 v5;

  v2 = result;
  v3 = *result;
  v4 = (*result)[1];
  if (v4 >= (*result)[2])
  {
    v3[1] = sub_2232C7918(*result, a2);
    return v2;
  }
  else
  {
    v5 = *(_OWORD *)a2;
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(a2 + 16);
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(v4 + 48) = 0;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 64) = 0;
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(v4 + 72) = 0;
    *(_QWORD *)(v4 + 80) = 0;
    *(_QWORD *)(v4 + 88) = 0;
    *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(v4 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(v4 + 96) = 0;
    *(_QWORD *)(v4 + 104) = 0;
    *(_QWORD *)(v4 + 112) = 0;
    *(_OWORD *)(v4 + 96) = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(v4 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(v4 + 120) = 0;
    *(_QWORD *)(v4 + 128) = 0;
    *(_QWORD *)(v4 + 136) = 0;
    *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(v4 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(v4 + 144) = 0;
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 160) = 0;
    *(_OWORD *)(v4 + 144) = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(v4 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(v4 + 168) = 0;
    *(_QWORD *)(v4 + 176) = 0;
    *(_QWORD *)(v4 + 184) = 0;
    *(_OWORD *)(v4 + 168) = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(v4 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    *(_QWORD *)(a2 + 184) = 0;
    *(_BYTE *)(v4 + 192) = *(_BYTE *)(a2 + 192);
    v3[1] = v4 + 200;
  }
  return result;
}

uint64_t sub_2232C7918(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v13;
  uint64_t v14;

  v3 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x147AE147AE147AELL)
    sub_22316E078();
  if (0x1EB851EB851EB852 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x1EB851EB851EB852 * ((a1[2] - *a1) >> 3);
  if (0x8F5C28F5C28F5C29 * ((a1[2] - *a1) >> 3) >= 0xA3D70A3D70A3D7)
    v5 = 0x147AE147AE147AELL;
  else
    v5 = v4;
  if (v5 > 0x147AE147AE147AELL)
    sub_223174E94();
  v7 = 200 * v5;
  v13 = operator new(200 * v5);
  v14 = (uint64_t)v13 + 200 * v3;
  *(_OWORD *)v14 = *(_OWORD *)a2;
  *(_DWORD *)(v14 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(v14 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(v14 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(v14 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(v14 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(v14 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)(v14 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(v14 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_OWORD *)(v14 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(v14 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(v14 + 152) = 0;
  *(_QWORD *)(v14 + 160) = 0;
  *(_OWORD *)(v14 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(v14 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(v14 + 176) = 0;
  *(_QWORD *)(v14 + 184) = 0;
  *(_OWORD *)(v14 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(v14 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_BYTE *)(v14 + 192) = *(_BYTE *)(a2 + 192);
  sub_2232C744C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, v14, v14);
  v9 = (char *)*a1;
  v8 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v14 + 200;
  a1[2] = (uint64_t)v13 + v7;
  if (v8 != v9)
  {
    do
    {
      v11 = v8 - 200;
      sub_223255CAC((uint64_t)(v8 - 176));
      v8 = v11;
    }
    while (v11 != v9);
  }
  if (v9)
    operator delete(v9);
  return v14 + 200;
}

void sub_2232C7B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2232C73F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2232C7B28(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(_QWORD *)(a1 + 56) = v6;
    operator delete(v6);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(_QWORD *)(a1 + 80) = v7;
    operator delete(v7);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v8 = *(void **)(a1 + 96);
  if (v8)
  {
    *(_QWORD *)(a1 + 104) = v8;
    operator delete(v8);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v9 = *(void **)(a1 + 120);
  if (v9)
  {
    *(_QWORD *)(a1 + 128) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v10 = *(void **)(a1 + 144);
  if (v10)
  {
    *(_QWORD *)(a1 + 152) = v10;
    operator delete(v10);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  return a1;
}

void sub_2232C7CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  int v11;

  v10 = 0;
  sub_224553CF0(*(_QWORD *)(a1 + 48), &v10);
  if (v10)
  {
    if (!*(_BYTE *)(a2 + 32))
    {
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_BYTE *)(a2 + 32) = 1;
    }
    v11 = 2;
    sub_224554038(*(_QWORD *)(a1 + 48), &v11);
    sub_2232C7DBC(a1, a2, v11);
  }
  else if (*(_BYTE *)(a2 + 32))
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = *(void **)(a2 + 8);
      if (v5 != v4)
      {
        v7 = *(_QWORD *)(a2 + 16);
        do
        {
          v9 = *(void **)(v7 - 24);
          v7 -= 24;
          v8 = v9;
          if (v9)
          {
            *(_QWORD *)(v5 - 16) = v8;
            operator delete(v8);
          }
          v5 = v7;
        }
        while (v7 != v4);
        v6 = *(void **)(a2 + 8);
      }
      *(_QWORD *)(a2 + 16) = v4;
      operator delete(v6);
    }
    *(_BYTE *)(a2 + 32) = 0;
  }
}

void sub_2232C7DBC(uint64_t a1, uint64_t a2, int a3)
{
  char *v5;
  char *v6;
  void *v7;
  char *v8;
  void *v9;
  void *v10;
  void *__p;
  char *v12;
  uint64_t v13;
  int v14;

  if (a3 == 1)
  {
    __p = 0;
    v12 = 0;
    v13 = 0;
    v14 = 1;
    sub_224554038(*(_QWORD *)(a1 + 48), &v14);
    sub_2232C7EA0(a1, (char ***)&__p);
    v5 = (char *)__p;
    if (__p)
    {
      v6 = v12;
      v7 = __p;
      if (v12 != __p)
      {
        v8 = v12;
        do
        {
          v10 = (void *)*((_QWORD *)v8 - 3);
          v8 -= 24;
          v9 = v10;
          if (v10)
          {
            *((_QWORD *)v6 - 2) = v9;
            operator delete(v9);
          }
          v6 = v8;
        }
        while (v8 != v5);
        v7 = __p;
      }
      v12 = v5;
      operator delete(v7);
    }
  }
  LODWORD(__p) = 1;
  sub_224554038(*(_QWORD *)(a1 + 48), &__p);
  sub_2232C7EA0(a1, (char ***)(a2 + 8));
}

void sub_2232C7E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22317C838(&a9);
  _Unwind_Resume(a1);
}

void sub_2232C7EA0(uint64_t a1, char ***a2)
{
  char **v4;
  unint64_t v5;
  char **v6;
  char **v7;
  char ***v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;

  v15 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  sub_2245543E8(*(_QWORD *)(a1 + 48), &v15);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * (v4 - *a2);
  if (v15 > v5)
  {
    sub_2232C7FD8((uint64_t)a2, v15 - v5);
    v8 = a2;
    v6 = *a2;
    v7 = v8[1];
    v9 = (char *)v7 - (char *)v6;
    if (v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v15 >= v5)
  {
    v6 = *a2;
    v9 = (char *)v4 - (char *)v6;
    if (!v9)
      return;
    goto LABEL_13;
  }
  v10 = (uint64_t)&(*a2)[3 * v15];
  if (v4 != (char **)v10)
  {
    v11 = a2[1];
    do
    {
      v13 = *(v11 - 3);
      v11 -= 3;
      v12 = v13;
      if (v13)
      {
        *(v4 - 2) = v12;
        operator delete(v12);
      }
      v4 = v11;
    }
    while (v11 != (char **)v10);
  }
  a2[1] = (char **)v10;
  v6 = *a2;
  v9 = v10 - (_QWORD)v6;
  if ((char **)v10 != v6)
  {
LABEL_13:
    v14 = 24 * (v9 / 24);
    do
    {
      v16 = 1;
      sub_224554038(*(_QWORD *)(a1 + 48), &v16);
      sub_2231B6444(a1, v6);
      v6 += 3;
      v14 -= 24;
    }
    while (v14);
  }
}

void sub_2232C7FD8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v5 = *(_QWORD **)a1;
      v19 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        v20 = v19;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v19 - 2) = v21;
            operator delete(v21);
          }
          v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_2232C81B0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  float *v6;
  float v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _OWORD v18[4];

  v17 = 0;
  sub_224553CF0(*(_QWORD *)(a1 + 48), &v17);
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 128);
  if (v17)
  {
    if (!*(_BYTE *)(a2 + 128))
    {
      v5 = 0;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      v6 = (float *)v18;
      do
      {
        if ((_DWORD)v4 == HIDWORD(v5))
          v7 = 1.0;
        else
          v7 = 0.0;
        *v6++ = v7;
        v8 = (v5 + 1);
        v9 = v5 & 0xFFFFFFFF00000000;
        v10 = v8 | v9;
        v11 = v9 + 0x100000000;
        if ((int)v4 >= 3)
          v4 = v11;
        else
          v4 = v10;
        v5 = v4;
      }
      while (v4 != 0x400000000);
      v12 = v18[1];
      *(_OWORD *)(a2 + 64) = v18[0];
      *(_OWORD *)(a2 + 80) = v12;
      v13 = v18[3];
      *(_OWORD *)(a2 + 96) = v18[2];
      *(_OWORD *)(a2 + 112) = v13;
      *(_BYTE *)(a2 + 128) = 1;
    }
    LODWORD(v18[0]) = 2;
    sub_224554038(*(_QWORD *)(a1 + 48), v18);
    v14 = v18[0];
    v15 = *(_QWORD *)(a1 + 48);
    sub_2245544CC(v15, (float *)a2);
    sub_2245544CC(v15, (float *)(a2 + 4));
    sub_2245544CC(v15, (float *)(a2 + 8));
    sub_2245544CC(v15, (float *)(a2 + 12));
    sub_2245544CC(v15, (float *)(a2 + 16));
    sub_2245544CC(v15, (float *)(a2 + 20));
    sub_2245544CC(v15, (float *)(a2 + 24));
    sub_2245544CC(v15, (float *)(a2 + 28));
    sub_2245544CC(v15, (float *)(a2 + 32));
    sub_2245544CC(v15, (float *)(a2 + 36));
    sub_2245544CC(v15, (float *)(a2 + 40));
    sub_2245544CC(v15, (float *)(a2 + 44));
    sub_2245544CC(v15, (float *)(a2 + 48));
    sub_2245544CC(v15, (float *)(a2 + 52));
    sub_2245544CC(v15, (float *)(a2 + 56));
    sub_2245544CC(v15, (float *)(a2 + 60));
    if (v14 >= 2)
    {
      v16 = *(_QWORD *)(a1 + 48);
      sub_2245544CC(v16, (float *)(a2 + 64));
      sub_2245544CC(v16, (float *)(a2 + 68));
      sub_2245544CC(v16, (float *)(a2 + 72));
      sub_2245544CC(v16, (float *)(a2 + 76));
      sub_2245544CC(v16, (float *)(a2 + 80));
      sub_2245544CC(v16, (float *)(a2 + 84));
      sub_2245544CC(v16, (float *)(a2 + 88));
      sub_2245544CC(v16, (float *)(a2 + 92));
      sub_2245544CC(v16, (float *)(a2 + 96));
      sub_2245544CC(v16, (float *)(a2 + 100));
      sub_2245544CC(v16, (float *)(a2 + 104));
      sub_2245544CC(v16, (float *)(a2 + 108));
      sub_2245544CC(v16, (float *)(a2 + 112));
      sub_2245544CC(v16, (float *)(a2 + 116));
      sub_2245544CC(v16, (float *)(a2 + 120));
      sub_2245544CC(v16, (float *)(a2 + 124));
    }
  }
  else if (*(_BYTE *)(a2 + 128))
  {
    *(_BYTE *)(a2 + 128) = 0;
  }
}

void sub_2232C8434(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  char *v13;
  _QWORD v14[2];
  unint64_t v15;

  v15 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  sub_2245543E8(*(_QWORD *)(a1 + 48), &v15);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = 0x86BCA1AF286BCA1BLL * ((v4 - *(_QWORD *)a2) >> 4);
  if (v15 <= v5)
  {
    if (v15 >= v5)
    {
      v6 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      v6 = *(_QWORD *)a2 + 304 * v15;
      while (v4 != v6)
      {
        v8 = *(_QWORD *)(v4 - 160);
        if (v8)
        {
          v9 = *(_QWORD *)(v4 - 152);
          v7 = *(void **)(v4 - 160);
          if (v9 != v8)
          {
            v10 = *(_QWORD *)(v4 - 152);
            do
            {
              v12 = *(void **)(v10 - 24);
              v10 -= 24;
              v11 = v12;
              if (v12)
              {
                *(_QWORD *)(v9 - 16) = v11;
                operator delete(v11);
              }
              v9 = v10;
            }
            while (v10 != v8);
            v7 = *(void **)(v4 - 160);
          }
          *(_QWORD *)(v4 - 152) = v8;
          operator delete(v7);
        }
        v4 -= 304;
      }
      *(_QWORD *)(a2 + 8) = v6;
    }
  }
  else
  {
    sub_2232C879C((char **)a2, v15 - v5);
    v6 = *(_QWORD *)(a2 + 8);
  }
  v13 = *(char **)a2;
  v14[0] = 0x86BCA1AF286BCA1BLL * ((v6 - *(_QWORD *)a2) >> 4);
  v14[1] = v13;
  sub_2232C856C(a1, v14);
}

void sub_2232C856C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  double *v5;
  uint64_t v6;
  _QWORD *v7;
  char *i;
  uint64_t v9;
  void (*v10)(uint64_t);
  _QWORD *v11;
  _QWORD *v12;
  std::bad_cast *exception;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  if (*a2)
  {
    v3 = (_QWORD *)a2[1];
    v4 = &v3[38 * *a2];
    do
    {
      LODWORD(v15) = 1;
      sub_224554038(*(_QWORD *)(a1 + 48), &v15);
      v15 = 0;
      sub_2245542F8(*(_QWORD *)(a1 + 48), &v15);
      *v3 = v15;
      v5 = (double *)(v3 + 1);
      v6 = *(_QWORD *)(a1 + 48);
      do
      {
        sub_2245564B0(v6, (uint64_t)&v15);
        if ((_DWORD)v15 == 2)
        {
          *v5 = (double)(unint64_t)v16;
          v7 = v17;
          v17 = 0;
          if (!v7)
            goto LABEL_6;
LABEL_15:
          for (i = (char *)v7[4]; i != (char *)v7[6]; i -= 16)
          {
            v10 = (void (*)(uint64_t))*((_QWORD *)i - 2);
            v9 = *((_QWORD *)i - 1);
            v10(v9);
          }
          free(i);
          v11 = (_QWORD *)v7[3];
          if (v11)
          {
            do
            {
              v12 = (_QWORD *)*v11;
              free(v11);
              v11 = v12;
            }
            while (v12);
          }
          free(v7);
          goto LABEL_6;
        }
        if ((_DWORD)v15 == 3)
        {
          *v5 = (double)v16;
          v7 = v17;
          v17 = 0;
          if (!v7)
            goto LABEL_6;
          goto LABEL_15;
        }
        if ((_DWORD)v15 != 4)
        {
          exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          exception->__vftable = 0;
          v14 = std::bad_cast::bad_cast(exception);
          v14->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v14, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
        }
        *(_QWORD *)v5 = v16;
        v7 = v17;
        v17 = 0;
        if (v7)
          goto LABEL_15;
LABEL_6:
        ++v5;
      }
      while (v5 != (double *)(v3 + 17));
      LODWORD(v15) = 2;
      sub_224554038(*(_QWORD *)(a1 + 48), &v15);
      sub_2232C7DBC(a1, (uint64_t)(v3 + 17), v15);
      sub_2232C81B0(a1, (uint64_t)(v3 + 21));
      v3 += 38;
    }
    while (v3 != v4);
  }
}

void sub_2232C8738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  char *i;
  uint64_t v14;
  void (*v15)(uint64_t);
  _QWORD *v16;
  _QWORD *v17;

  if (a12)
  {
    for (i = (char *)a12[4]; i != (char *)a12[6]; i -= 16)
    {
      v15 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v14 = *((_QWORD *)i - 1);
      v15(v14);
    }
    free(i);
    v16 = (_QWORD *)a12[3];
    if (v16)
    {
      do
      {
        v17 = (_QWORD *)*v16;
        free(v16);
        v16 = v17;
      }
      while (v17);
    }
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_2232C879C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;

  v5 = a1[1];
  v4 = a1[2];
  if (0x86BCA1AF286BCA1BLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v12 = 304 * ((304 * a2 - 304) / 0x130) + 304;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0x86BCA1AF286BCA1BLL * ((v5 - *a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0xD79435E50D7943)
      sub_22316E078();
    v9 = 0x86BCA1AF286BCA1BLL * ((v4 - v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x6BCA1AF286BCA1)
      v10 = 0xD79435E50D7943;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xD79435E50D7943)
        sub_223174E94();
      v11 = (char *)operator new(304 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[304 * v7];
    v14 = &v11[304 * v10];
    v15 = 304 * ((304 * a2 - 304) / 0x130) + 304;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = &v13[v17];
        v19 = &v13[v17 - 304];
        v20 = &v5[v17];
        v21 = *(_OWORD *)&v5[v17 - 224];
        v22 = *(_OWORD *)&v5[v17 - 208];
        v23 = *(_OWORD *)&v5[v17 - 192];
        *((_QWORD *)v18 - 22) = *(_QWORD *)&v5[v17 - 176];
        *((_OWORD *)v18 - 13) = v22;
        *((_OWORD *)v18 - 12) = v23;
        *((_OWORD *)v18 - 14) = v21;
        *(_OWORD *)v19 = *(_OWORD *)&v5[v17 - 304];
        v24 = *(_OWORD *)&v5[v17 - 288];
        v25 = *(_OWORD *)&v5[v17 - 272];
        v26 = *(_OWORD *)&v5[v17 - 240];
        *((_OWORD *)v18 - 16) = *(_OWORD *)&v5[v17 - 256];
        *((_OWORD *)v18 - 15) = v26;
        *((_OWORD *)v19 + 1) = v24;
        *((_OWORD *)v19 + 2) = v25;
        *((_QWORD *)v18 - 19) = 0;
        *((_QWORD *)v18 - 18) = 0;
        *((_OWORD *)v18 - 10) = *(_OWORD *)&v5[v17 - 160];
        *((_QWORD *)v18 - 18) = *(_QWORD *)&v5[v17 - 144];
        *((_QWORD *)v20 - 19) = 0;
        *((_QWORD *)v20 - 18) = 0;
        *((_QWORD *)v20 - 20) = 0;
        v27 = *(_OWORD *)&v5[v17 - 104];
        v28 = *(_OWORD *)&v5[v17 - 88];
        v29 = *(_OWORD *)&v5[v17 - 72];
        *(_OWORD *)(v18 - 120) = *(_OWORD *)&v5[v17 - 120];
        *(_OWORD *)(v18 - 72) = v29;
        *(_OWORD *)(v18 - 88) = v28;
        *(_OWORD *)(v18 - 104) = v27;
        v30 = *(_OWORD *)&v5[v17 - 40];
        v31 = *(_OWORD *)&v5[v17 - 24];
        LODWORD(v19) = *(_DWORD *)&v5[v17 - 8];
        *(_OWORD *)(v18 - 56) = *(_OWORD *)&v5[v17 - 56];
        *((_DWORD *)v18 - 2) = (_DWORD)v19;
        *(_OWORD *)(v18 - 24) = v31;
        *(_OWORD *)(v18 - 40) = v30;
        *(_OWORD *)(v18 - 136) = *(_OWORD *)&v5[v17 - 136];
        v17 -= 304;
      }
      while (&v5[v17] != v6);
      v5 = *a1;
      v32 = a1[1];
      *a1 = &v13[v17];
      a1[1] = v16;
      a1[2] = v14;
      while (v32 != v5)
      {
        v34 = *((_QWORD *)v32 - 20);
        if (v34)
        {
          v35 = *((_QWORD *)v32 - 19);
          v33 = (void *)*((_QWORD *)v32 - 20);
          if (v35 != v34)
          {
            v36 = *((_QWORD *)v32 - 19);
            do
            {
              v38 = *(void **)(v36 - 24);
              v36 -= 24;
              v37 = v38;
              if (v38)
              {
                *(_QWORD *)(v35 - 16) = v37;
                operator delete(v37);
              }
              v35 = v36;
            }
            while (v36 != v34);
            v33 = (void *)*((_QWORD *)v32 - 20);
          }
          *((_QWORD *)v32 - 19) = v34;
          operator delete(v33);
        }
        v32 -= 304;
      }
    }
    if (v5)
      operator delete(v5);
  }
}

_DWORD *sub_2232C8A68(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC289D8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

char *sub_2232C8B58(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  char **v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char *result;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t *v107;
  __int128 v108;
  uint64_t v109;
  void *v110[3];
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *__p;
  void *v122;
  char v123;
  char v124;
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  v6 = a1[3];
  if (*(_BYTE *)(v6 + 40))
  {
    *(_QWORD *)&v108 = v6 + 16;
    sub_22455A7EC((uint64_t **)&v108, 6u);
  }
  else
  {
    sub_22455AA60((uint64_t)&v108, v6 + 8);
  }
  sub_2232CA360(a1, a2 + 8, 6, v7, v8, v9, v10, v11);
  v12 = a1[3];
  if (*(_BYTE *)(v12 + 40))
  {
    *(_QWORD *)&v108 = v12 + 16;
    sub_22455A7EC((uint64_t **)&v108, 2u);
  }
  else
  {
    sub_22455AA60((uint64_t)&v108, v12 + 8);
  }
  sub_2232CCAD0(a1, a2 + 504, 2, v13, v14, v15, v16, v17);
  if (a3 > 4)
  {
    v30 = a1[3];
    if (*(_BYTE *)(v30 + 40))
    {
      *(_QWORD *)&v108 = v30 + 16;
      sub_22455A7EC((uint64_t **)&v108, 5u);
    }
    else
    {
      sub_22455AA60((uint64_t)&v108, v30 + 8);
    }
    sub_2232CCDA8(a1, a2 + 632, 5, v31, v32, v33, v34, v35);
  }
  else
  {
    sub_2232C98B8(a1, a2 + 632, v18, v19, v20, v21, v22, v23);
  }
  sub_2232C9E18(a1, a2 + 840, v24, v25, v26, v27, v28, v29);
  v36 = a1[3];
  if (*(_BYTE *)(v36 + 40))
  {
    *(_QWORD *)&v108 = v36 + 16;
    sub_22455A7EC((uint64_t **)&v108, 1u);
  }
  else
  {
    sub_22455AA60((uint64_t)&v108, v36 + 8);
  }
  sub_2232CD5AC(a1, a2 + 904, v37, v38, v39, v40, v41, v42);
  sub_2232C98B8(a1, a2 + 992, v43, v44, v45, v46, v47, v48);
  v49 = a1[3];
  if (*(_BYTE *)(v49 + 40))
  {
    *(_QWORD *)&v108 = v49 + 16;
    sub_224559C04((uint64_t **)&v108, *(_BYTE *)(a2 + 1080));
  }
  else
  {
    v50 = *(char *)(a2 + 1080);
    if (v50 < 0)
    {
      LOBYTE(v108) = -52;
      BYTE1(v108) = v50;
    }
    else
    {
      LOBYTE(v108) = *(_BYTE *)(a2 + 1080);
    }
    std::ostream::write();
  }
  v51 = a1[3];
  if (*(_BYTE *)(v51 + 40))
  {
    *(_QWORD *)&v108 = v51 + 16;
    sub_22455B5CC((uint64_t)&v107, (uint64_t **)&v108, (unsigned int *)(a2 + 1084));
    sub_22455B5CC((uint64_t)&v107, (uint64_t **)&v108, (unsigned int *)(a2 + 1088));
    sub_22455B5CC((uint64_t)&v107, (uint64_t **)&v108, (unsigned int *)(a2 + 1092));
  }
  else
  {
    v52 = *(_DWORD *)(a2 + 1084);
    LOBYTE(v108) = -54;
    *(_DWORD *)((char *)&v108 + 1) = bswap32(v52);
    std::ostream::write();
    v53 = *(_DWORD *)(a2 + 1088);
    LOBYTE(v108) = -54;
    *(_DWORD *)((char *)&v108 + 1) = bswap32(v53);
    std::ostream::write();
    v54 = *(_DWORD *)(a2 + 1092);
    LOBYTE(v108) = -54;
    *(_DWORD *)((char *)&v108 + 1) = bswap32(v54);
    std::ostream::write();
  }
  v55 = *(_QWORD *)(a2 + 1136);
  v56 = a1[3];
  if (*(_BYTE *)(v56 + 40))
  {
    *(_QWORD *)&v108 = v56 + 16;
    sub_22455AB50((uint64_t **)&v108, v55);
  }
  else
  {
    sub_22455B08C();
  }
  v57 = a1[3];
  if (*(_BYTE *)(v57 + 40))
  {
    *(_QWORD *)&v108 = v57 + 16;
    sub_22455A7EC((uint64_t **)&v108, 2u);
  }
  else
  {
    sub_22455AA60((uint64_t)&v108, v57 + 8);
  }
  sub_224555278(a1[3]);
  v58 = a1[3];
  if (*(_BYTE *)(v58 + 40))
  {
    *(_QWORD *)&v108 = v58 + 16;
    sub_22455B5CC((uint64_t)&v107, (uint64_t **)&v108, (unsigned int *)(a2 + 1144));
    sub_22455B5CC((uint64_t)&v107, (uint64_t **)&v108, (unsigned int *)(a2 + 1148));
  }
  else
  {
    v59 = *(_DWORD *)(a2 + 1144);
    LOBYTE(v108) = -54;
    *(_DWORD *)((char *)&v108 + 1) = bswap32(v59);
    std::ostream::write();
    v60 = *(_DWORD *)(a2 + 1148);
    LOBYTE(v108) = -54;
    *(_DWORD *)((char *)&v108 + 1) = bswap32(v60);
    std::ostream::write();
  }
  v61 = a1[3];
  if (*(_BYTE *)(v61 + 40))
  {
    *(_QWORD *)&v108 = v61 + 16;
    sub_22455B5CC((uint64_t)&v107, (uint64_t **)&v108, (unsigned int *)(a2 + 1152));
    sub_22455B5CC((uint64_t)&v107, (uint64_t **)&v108, (unsigned int *)(a2 + 1156));
  }
  else
  {
    v62 = *(_DWORD *)(a2 + 1152);
    LOBYTE(v108) = -54;
    *(_DWORD *)((char *)&v108 + 1) = bswap32(v62);
    std::ostream::write();
    v63 = *(_DWORD *)(a2 + 1156);
    LOBYTE(v108) = -54;
    *(_DWORD *)((char *)&v108 + 1) = bswap32(v63);
    std::ostream::write();
  }
  v64 = a1[3];
  if (*(_BYTE *)(v64 + 40))
  {
    *(_QWORD *)&v108 = v64 + 16;
    sub_22455A7EC((uint64_t **)&v108, *(_DWORD *)(a2 + 1160));
    sub_22455A7EC((uint64_t **)&v108, *(_DWORD *)(a2 + 1164));
  }
  else
  {
    v65 = v64 + 8;
    sub_22455AA60((uint64_t)&v108, v64 + 8);
    sub_22455AA60((uint64_t)&v108, v65);
  }
  v66 = a1[3];
  v67 = *(_QWORD *)(*(_QWORD *)(v66 + 88) - 8);
  sub_224554D6C((uint64_t *)(v66 + 48), *(_QWORD *)(v66 + 16) - v67 - 9);
  v68 = *(_QWORD *)(v66 + 48);
  if (v68)
    memmove((void *)(*(_QWORD *)(v66 + 24) + v67), *(const void **)(v66 + 56), v68);
  *(_QWORD *)(v66 + 48) = 0;
  v69 = *(_QWORD *)(v66 + 80);
  v70 = *(_QWORD *)(v66 + 88) - 8;
  *(_QWORD *)(v66 + 88) = v70;
  if (v69 == v70)
  {
    std::ostream::write();
    if (*(_BYTE *)(v66 + 40))
    {
      free(*(void **)(v66 + 24));
      *(_BYTE *)(v66 + 40) = 0;
    }
  }
  v71 = a1[3];
  if (*(_BYTE *)(v71 + 40))
  {
    *(_QWORD *)&v108 = v71 + 16;
    sub_22455B6A8((uint64_t)&v107, (uint64_t **)&v108, (unint64_t *)(a2 + 1184));
    sub_22455B6A8((uint64_t)&v107, (uint64_t **)&v108, (unint64_t *)(a2 + 1192));
    sub_22455B6A8((uint64_t)&v107, (uint64_t **)&v108, (unint64_t *)(a2 + 1200));
    sub_22455B6A8((uint64_t)&v107, (uint64_t **)&v108, (unint64_t *)(a2 + 1208));
    sub_22455B6A8((uint64_t)&v107, (uint64_t **)&v108, (unint64_t *)(a2 + 1216));
    sub_22455B6A8((uint64_t)&v107, (uint64_t **)&v108, (unint64_t *)(a2 + 1224));
    sub_22455B6A8((uint64_t)&v107, (uint64_t **)&v108, (unint64_t *)(a2 + 1232));
    sub_22455B6A8((uint64_t)&v107, (uint64_t **)&v108, (unint64_t *)(a2 + 1240));
    sub_22455B6A8((uint64_t)&v107, (uint64_t **)&v108, (unint64_t *)(a2 + 1248));
    sub_22455B6A8((uint64_t)&v107, (uint64_t **)&v108, (unint64_t *)(a2 + 1256));
    sub_22455B6A8((uint64_t)&v107, (uint64_t **)&v108, (unint64_t *)(a2 + 1264));
    sub_22455B6A8((uint64_t)&v107, (uint64_t **)&v108, (unint64_t *)(a2 + 1272));
    sub_22455B6A8((uint64_t)&v107, (uint64_t **)&v108, (unint64_t *)(a2 + 1280));
    sub_22455B6A8((uint64_t)&v107, (uint64_t **)&v108, (unint64_t *)(a2 + 1288));
    sub_22455B6A8((uint64_t)&v107, (uint64_t **)&v108, (unint64_t *)(a2 + 1296));
    sub_22455B6A8((uint64_t)&v107, (uint64_t **)&v108, (unint64_t *)(a2 + 1304));
  }
  else
  {
    *(_QWORD *)((char *)&v108 + 1) = bswap64(*(_QWORD *)(a2 + 1184));
    LOBYTE(v108) = -53;
    std::ostream::write();
    v72 = *(_QWORD *)(a2 + 1192);
    LOBYTE(v108) = -53;
    *(_QWORD *)((char *)&v108 + 1) = bswap64(v72);
    std::ostream::write();
    v73 = *(_QWORD *)(a2 + 1200);
    LOBYTE(v108) = -53;
    *(_QWORD *)((char *)&v108 + 1) = bswap64(v73);
    std::ostream::write();
    v74 = *(_QWORD *)(a2 + 1208);
    LOBYTE(v108) = -53;
    *(_QWORD *)((char *)&v108 + 1) = bswap64(v74);
    std::ostream::write();
    v75 = *(_QWORD *)(a2 + 1216);
    LOBYTE(v108) = -53;
    *(_QWORD *)((char *)&v108 + 1) = bswap64(v75);
    std::ostream::write();
    v76 = *(_QWORD *)(a2 + 1224);
    LOBYTE(v108) = -53;
    *(_QWORD *)((char *)&v108 + 1) = bswap64(v76);
    std::ostream::write();
    v77 = *(_QWORD *)(a2 + 1232);
    LOBYTE(v108) = -53;
    *(_QWORD *)((char *)&v108 + 1) = bswap64(v77);
    std::ostream::write();
    v78 = *(_QWORD *)(a2 + 1240);
    LOBYTE(v108) = -53;
    *(_QWORD *)((char *)&v108 + 1) = bswap64(v78);
    std::ostream::write();
    v79 = *(_QWORD *)(a2 + 1248);
    LOBYTE(v108) = -53;
    *(_QWORD *)((char *)&v108 + 1) = bswap64(v79);
    std::ostream::write();
    v80 = *(_QWORD *)(a2 + 1256);
    LOBYTE(v108) = -53;
    *(_QWORD *)((char *)&v108 + 1) = bswap64(v80);
    std::ostream::write();
    v81 = *(_QWORD *)(a2 + 1264);
    LOBYTE(v108) = -53;
    *(_QWORD *)((char *)&v108 + 1) = bswap64(v81);
    std::ostream::write();
    v82 = *(_QWORD *)(a2 + 1272);
    LOBYTE(v108) = -53;
    *(_QWORD *)((char *)&v108 + 1) = bswap64(v82);
    std::ostream::write();
    v83 = *(_QWORD *)(a2 + 1280);
    LOBYTE(v108) = -53;
    *(_QWORD *)((char *)&v108 + 1) = bswap64(v83);
    std::ostream::write();
    v84 = *(_QWORD *)(a2 + 1288);
    LOBYTE(v108) = -53;
    *(_QWORD *)((char *)&v108 + 1) = bswap64(v84);
    std::ostream::write();
    v85 = *(_QWORD *)(a2 + 1296);
    LOBYTE(v108) = -53;
    *(_QWORD *)((char *)&v108 + 1) = bswap64(v85);
    std::ostream::write();
    v86 = *(_QWORD *)(a2 + 1304);
    LOBYTE(v108) = -53;
    *(_QWORD *)((char *)&v108 + 1) = bswap64(v86);
    std::ostream::write();
  }
  if (a3 == 1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/FrameBundleSample.h", 528, (uint64_t)"io::is_input_archive_v<Archive>", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    LOBYTE(v108) = 0;
    v124 = 0;
    v87 = a1[3];
    if (*(_BYTE *)(v87 + 40))
    {
      v107 = (uint64_t *)(v87 + 16);
      sub_224559C04(&v107, 0);
    }
    else
    {
      LOBYTE(v107) = 0;
      std::ostream::write();
    }
    if (v124)
    {
      v90 = *(unsigned __int8 *)(a2 + 1512);
      *(_OWORD *)(a2 + 1312) = v108;
      *(_DWORD *)(a2 + 1328) = v109;
      v91 = (char **)(a2 + 1336);
      if (v90)
      {
        sub_2232C6B24(v91, (char **)v110);
        *(_BYTE *)(a2 + 1504) = v123;
        if (!v124)
          goto LABEL_83;
      }
      else
      {
        sub_2232C6D24(v91, (uint64_t)v110);
        v92 = v123;
        *(_BYTE *)(a2 + 1512) = 1;
        *(_BYTE *)(a2 + 1504) = v92;
        if (!v124)
          goto LABEL_83;
      }
      if (__p)
      {
        v122 = __p;
        operator delete(__p);
      }
      if (v119)
      {
        v120 = v119;
        operator delete(v119);
      }
      if (v117)
      {
        v118 = v117;
        operator delete(v117);
      }
      if (v115)
      {
        v116 = v115;
        operator delete(v115);
      }
      if (v113)
      {
        v114 = v113;
        operator delete(v113);
      }
      if (v111)
      {
        v112 = v111;
        operator delete(v111);
      }
      if (v110[0])
      {
        v110[1] = v110[0];
        operator delete(v110[0]);
      }
    }
LABEL_83:
    v94 = a1[3];
    if (*(_BYTE *)(v94 + 40))
    {
      *(_QWORD *)&v108 = v94 + 16;
      sub_22455A7EC((uint64_t **)&v108, 0);
    }
    else
    {
      sub_22455AA60((uint64_t)&v108, v94 + 8);
    }
    result = sub_2232CEDB4((uint64_t)a1, a2 + 1520);
    if (a3 < 3)
      return result;
    goto LABEL_94;
  }
  if (a3 > 6)
  {
    if (*(_BYTE *)(a2 + 1512))
    {
      v89 = a1[3];
      if (*(_BYTE *)(v89 + 40))
      {
        *(_QWORD *)&v108 = v89 + 16;
        sub_224559C04((uint64_t **)&v108, 1);
      }
      else
      {
        LOBYTE(v108) = 1;
        std::ostream::write();
      }
      v96 = a1[3];
      if (*(_BYTE *)(v96 + 40))
      {
        *(_QWORD *)&v108 = v96 + 16;
        sub_22455A7EC((uint64_t **)&v108, 4u);
      }
      else
      {
        sub_22455AA60((uint64_t)&v108, v96 + 8);
      }
      sub_2232CDC80((uint64_t)a1, a2 + 1312, 4u);
    }
    else
    {
      v93 = a1[3];
      if (*(_BYTE *)(v93 + 40))
      {
        *(_QWORD *)&v108 = v93 + 16;
        sub_224559C04((uint64_t **)&v108, 0);
      }
      else
      {
        LOBYTE(v108) = 0;
        std::ostream::write();
      }
    }
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/FrameBundleSample.h", 535, (uint64_t)"io::is_input_archive_v<Archive>", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v108 = 0uLL;
    v109 = 0;
    v88 = a1[3];
    if (*(_BYTE *)(v88 + 40))
    {
      v107 = (uint64_t *)(v88 + 16);
      sub_22455B1CC(&v107, 0);
    }
    else
    {
      sub_22455B4D4();
    }
    if (a3 < 5)
      goto LABEL_83;
  }
  sub_2232CEDB4((uint64_t)a1, a2 + 1520);
LABEL_94:
  v97 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a2 + 1664) - *(_QWORD *)(a2 + 1656)) >> 4);
  v98 = a1[3];
  if (*(_BYTE *)(v98 + 40))
  {
    *(_QWORD *)&v108 = v98 + 16;
    sub_22455B1CC((uint64_t **)&v108, v97);
  }
  else
  {
    sub_22455B4D4();
  }
  v99 = *(_QWORD *)(a2 + 1656);
  *(_QWORD *)&v108 = 0x86BCA1AF286BCA1BLL * ((*(_QWORD *)(a2 + 1664) - v99) >> 4);
  *((_QWORD *)&v108 + 1) = v99;
  result = sub_2232CF510((char *)a1, &v108);
  if (a3 >= 6)
  {
    v100 = a1[3];
    if (*(_BYTE *)(v100 + 40))
    {
      *(_QWORD *)&v108 = v100 + 16;
      sub_22455A7EC((uint64_t **)&v108, 1u);
    }
    else
    {
      sub_22455AA60((uint64_t)&v108, v100 + 8);
    }
    v101 = a1[3];
    if (*(_BYTE *)(v101 + 40))
    {
      *(_QWORD *)&v108 = v101 + 16;
      result = sub_224559C04((uint64_t **)&v108, *(_BYTE *)(a2 + 1680));
    }
    else
    {
      v102 = *(char *)(a2 + 1680);
      if (v102 < 0)
      {
        LOBYTE(v108) = -52;
        BYTE1(v108) = v102;
      }
      else
      {
        LOBYTE(v108) = *(_BYTE *)(a2 + 1680);
      }
      result = (char *)std::ostream::write();
    }
    if (a3 >= 8)
    {
      if (*(_BYTE *)(a2 + 1682))
      {
        v103 = a1[3];
        if (*(_BYTE *)(v103 + 40))
        {
          *(_QWORD *)&v108 = v103 + 16;
          sub_224559C04((uint64_t **)&v108, 1);
        }
        else
        {
          LOBYTE(v108) = 1;
          std::ostream::write();
        }
        v105 = (_BYTE *)(a2 + 1681);
        v106 = a1[3];
        if (*(_BYTE *)(v106 + 40))
        {
          *(_QWORD *)&v108 = v106 + 16;
          return (char *)sub_22455B784((uint64_t)&v107, (uint64_t **)&v108, v105);
        }
        else
        {
          if (*v105)
            LOBYTE(v108) = -61;
          else
            LOBYTE(v108) = -62;
          return (char *)std::ostream::write();
        }
      }
      else
      {
        v104 = a1[3];
        if (*(_BYTE *)(v104 + 40))
        {
          *(_QWORD *)&v108 = v104 + 16;
          return sub_224559C04((uint64_t **)&v108, 0);
        }
        else
        {
          LOBYTE(v108) = 0;
          return (char *)std::ostream::write();
        }
      }
    }
  }
  return result;
}

void sub_2232C9878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2232C0794((void **)va);
  _Unwind_Resume(a1);
}

void sub_2232C988C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a35)
  {
    sub_223255CAC((uint64_t)&a13);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2232C98B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  _BYTE v46[32];
  _BYTE v47[32];
  __int16 v48;
  __int16 v49;
  _QWORD v50[2];
  std::__shared_weak_count *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  _BYTE v57[28];
  _BYTE v58[64];
  int v59;
  _OWORD v60[2];
  _BYTE v61[64];
  int v62;
  char v63;
  char v64;
  uint64_t *v65;

  v9 = *(unsigned __int8 *)(a2 + 80);
  if (*(_BYTE *)(a2 + 80))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 72);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      *(_OWORD *)v46 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)&v46[16] = *(_OWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v44 = v10;
      v45 = v11;
      v48 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v50[0] = &off_24EC1F8C8;
      v10 = v44;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = *(_QWORD *)&v46[12];
      v22 = *(_DWORD *)&v46[28];
      v23 = *(_QWORD *)v46;
      v24 = v48;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v45 = 0;
      *(_OWORD *)v47 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)&v47[16] = *(_OWORD *)(a2 + 40);
      v49 = *(_WORD *)(a2 + 72);
      v50[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = *(_QWORD *)&v47[12];
      v22 = *(_DWORD *)&v47[28];
      v23 = *(_QWORD *)v47;
      v24 = v49;
    }
    v50[1] = v10;
    v51 = v11;
    v52 = v21;
    v53 = 4 * v22;
    v54 = v23;
    v55 = 32;
    v56 = v24;
    if (v11)
    {
      v28 = (unint64_t *)&v11->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v57, (uint64_t)v50, 0, a4, a5, a6, a7, a8);
    v60[0] = *(_OWORD *)v57;
    *(_OWORD *)((char *)v60 + 12) = *(_OWORD *)&v57[12];
    v61[0] = 0;
    v62 = -1;
    v31 = v59;
    if (v59 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC28BA8[v59])(&v64, v61, v58);
      v62 = v31;
    }
    v63 = 1;
    v32 = a1[3];
    if (*(_BYTE *)(v32 + 40))
    {
      v65 = (uint64_t *)(v32 + 16);
      sub_224559C04(&v65, 1);
    }
    else
    {
      LOBYTE(v65) = 1;
      std::ostream::write();
    }
    v33 = a1[3];
    if (*(_BYTE *)(v33 + 40))
    {
      v65 = (uint64_t *)(v33 + 16);
      sub_22455A7EC(&v65, 2u);
    }
    else
    {
      sub_22455AA60((uint64_t)&v65, v33 + 8);
    }
    sub_224555278(a1[3]);
    sub_22319F5F8(a1, (uint64_t)v60);
    v34 = a1[3];
    v35 = *(_QWORD *)(*(_QWORD *)(v34 + 88) - 8);
    sub_224554D6C((uint64_t *)(v34 + 48), *(_QWORD *)(v34 + 16) - v35 - 9);
    v36 = *(_QWORD *)(v34 + 48);
    if (v36)
      memmove((void *)(*(_QWORD *)(v34 + 24) + v35), *(const void **)(v34 + 56), v36);
    *(_QWORD *)(v34 + 48) = 0;
    v37 = *(_QWORD *)(v34 + 80);
    v38 = *(_QWORD *)(v34 + 88) - 8;
    *(_QWORD *)(v34 + 88) = v38;
    if (v37 == v38)
    {
      std::ostream::write();
      if (*(_BYTE *)(v34 + 40))
      {
        free(*(void **)(v34 + 24));
        *(_BYTE *)(v34 + 40) = 0;
      }
    }
  }
  else
  {
    LOBYTE(v60[0]) = 0;
    v63 = 0;
    v27 = a1[3];
    if (*(_BYTE *)(v27 + 40))
    {
      *(_QWORD *)v57 = v27 + 16;
      sub_224559C04((uint64_t **)v57, 0);
    }
    else
    {
      v57[0] = 0;
      std::ostream::write();
    }
  }
  if (v63)
  {
    if (v62 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_24EC28B98[v62])(&v65, v61);
    v62 = -1;
  }
  if (v9)
  {
    if (v59 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_24EC28B98[v59])(&v65, v58);
    v59 = -1;
    v39 = v51;
    if (v51)
    {
      v40 = (unint64_t *)&v51->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (v45)
    {
      v42 = (unint64_t *)&v45->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
}

void sub_2232C9D7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2232C17E0(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_2232C9D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v29 = *(unsigned int *)(v27 - 80);
  if ((_DWORD)v29 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC28B98[v29])(v27 - 56, v26);
  *(_DWORD *)(v27 - 80) = -1;
  sub_22319A588((uint64_t)&a26);
  sub_22319A5E0((uint64_t)&a19);
  sub_2231CE1A0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232C9E18(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  __int16 v51;
  _QWORD v52[2];
  std::__shared_weak_count *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  __int16 v58;
  _BYTE v59[28];
  _BYTE v60[64];
  int v61;
  _OWORD v62[2];
  _BYTE v63[64];
  int v64;
  char v65;
  char v66;
  uint64_t *v67;

  v9 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a2 + 56))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 48);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v46 = *(_OWORD *)(a2 + 24);
      v48 = *(_QWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v44 = v10;
      v45 = v11;
      v50 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v52[0] = &off_24EC1F8C8;
      v10 = v44;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = HIDWORD(v48);
      v22 = *((_QWORD *)&v46 + 1);
      v23 = v46;
      v24 = v50;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v45 = 0;
      v47 = *(_OWORD *)(a2 + 24);
      v49 = *(_QWORD *)(a2 + 40);
      v51 = *(_WORD *)(a2 + 48);
      v52[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = HIDWORD(v49);
      v22 = *((_QWORD *)&v47 + 1);
      v23 = v47;
      v24 = v51;
    }
    v52[1] = v10;
    v53 = v11;
    v54 = v22;
    v55 = v21;
    v56 = v23;
    v57 = 1;
    v58 = v24;
    if (v11)
    {
      v28 = (unint64_t *)&v11->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v59, (uint64_t)v52, 0, a4, a5, a6, a7, a8);
    v62[0] = *(_OWORD *)v59;
    *(_OWORD *)((char *)v62 + 12) = *(_OWORD *)&v59[12];
    v63[0] = 0;
    v64 = -1;
    v31 = v61;
    if (v61 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC28BA8[v61])(&v66, v63, v60);
      v64 = v31;
    }
    v65 = 1;
    v32 = a1[3];
    if (*(_BYTE *)(v32 + 40))
    {
      v67 = (uint64_t *)(v32 + 16);
      sub_224559C04(&v67, 1);
    }
    else
    {
      LOBYTE(v67) = 1;
      std::ostream::write();
    }
    v33 = a1[3];
    if (*(_BYTE *)(v33 + 40))
    {
      v67 = (uint64_t *)(v33 + 16);
      sub_22455A7EC(&v67, 2u);
    }
    else
    {
      sub_22455AA60((uint64_t)&v67, v33 + 8);
    }
    sub_224555278(a1[3]);
    sub_22319F5F8(a1, (uint64_t)v62);
    v34 = a1[3];
    v35 = *(_QWORD *)(*(_QWORD *)(v34 + 88) - 8);
    sub_224554D6C((uint64_t *)(v34 + 48), *(_QWORD *)(v34 + 16) - v35 - 9);
    v36 = *(_QWORD *)(v34 + 48);
    if (v36)
      memmove((void *)(*(_QWORD *)(v34 + 24) + v35), *(const void **)(v34 + 56), v36);
    *(_QWORD *)(v34 + 48) = 0;
    v37 = *(_QWORD *)(v34 + 80);
    v38 = *(_QWORD *)(v34 + 88) - 8;
    *(_QWORD *)(v34 + 88) = v38;
    if (v37 == v38)
    {
      std::ostream::write();
      if (*(_BYTE *)(v34 + 40))
      {
        free(*(void **)(v34 + 24));
        *(_BYTE *)(v34 + 40) = 0;
      }
    }
  }
  else
  {
    LOBYTE(v62[0]) = 0;
    v65 = 0;
    v27 = a1[3];
    if (*(_BYTE *)(v27 + 40))
    {
      *(_QWORD *)v59 = v27 + 16;
      sub_224559C04((uint64_t **)v59, 0);
    }
    else
    {
      v59[0] = 0;
      std::ostream::write();
    }
  }
  if (v65)
  {
    if (v64 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_24EC28B98[v64])(&v67, v63);
    v64 = -1;
  }
  if (v9)
  {
    if (v61 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_24EC28B98[v61])(&v67, v60);
    v61 = -1;
    v39 = v53;
    if (v53)
    {
      v40 = (unint64_t *)&v53->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (v45)
    {
      v42 = (unint64_t *)&v45->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
}

void sub_2232CA2C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2232C17E0(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_2232CA2E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v5 = *(unsigned int *)(v3 - 80);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC28B98[v5])(v3 - 56, v2);
  *(_DWORD *)(v3 - 80) = -1;
  sub_22319A588((uint64_t)va2);
  sub_22319A5E0((uint64_t)va1);
  sub_2231BEEB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232CA360(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  __int16 v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t (**v102)();
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  __int16 v109;
  _BYTE v110[16];
  std::__shared_weak_count *v111;
  uint64_t (**v112)();
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  __int16 v118;
  char v119;
  int v120;
  uint64_t (**v121)();
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  char v127;
  int v128;
  char v129;
  int v130;
  __int16 v131;
  char v132;
  uint64_t v133;

  v8 = a3;
  v133 = *MEMORY[0x24BDAC8D0];
  v11 = a3 - 2;
  if (a3 <= 2)
  {
    LOBYTE(v112) = 0;
    v119 = 0;
    sub_2232CB16C(a1, (uint64_t)&v112, a3, a4, a5, a6, a7, a8);
    if (v119)
    {
      v102 = &off_24EC1F8C8;
      v24 = v113;
      v25 = v114;
      if (v114)
      {
        p_shared_owners = (unint64_t *)&v114->__shared_owners_;
        do
          v27 = __ldxr(p_shared_owners);
        while (__stxr(v27 + 1, p_shared_owners));
        v28 = v117;
        v30 = v115;
        v29 = v116;
        v31 = v118;
        do
          v32 = __ldxr(p_shared_owners);
        while (__stxr(v32 + 1, p_shared_owners));
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
      }
      else
      {
        v28 = v117;
        v30 = v115;
        v29 = v116;
        v31 = v118;
      }
      v103 = v24;
      v104 = v25;
      v105 = v29;
      v106 = 4 * v28;
      v107 = v30;
      v108 = 4;
      v109 = v31;
      if (v25)
      {
        v34 = (unint64_t *)&v25->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        do
          v36 = __ldaxr(v34);
        while (__stlxr(v36 - 1, v34));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      LOBYTE(v122) = 0;
      LOBYTE(v124) = 0;
      v125 = 0;
      v127 = 0;
      v129 = 1;
      v130 = 0;
      sub_22432B21C((uint64_t)&v102, 3u, (uint64_t)v110);
      sub_2232C1348(a2, (uint64_t)v110);
      v37 = v111;
      if (v111)
      {
        v38 = (unint64_t *)&v111->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = v104;
      if (v104)
      {
        v41 = (unint64_t *)&v104->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if (v119)
      {
        v112 = &off_24EC27198;
        v43 = v114;
        if (v114)
        {
          v44 = (unint64_t *)&v114->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
      }
    }
  }
  else
  {
    sub_2232CAC20(a1, a2, a3, a4, a5, a6, a7, a8);
    if (v8 >= 5)
    {
      sub_2232CAC20(a1, a2 + 64, v12, v13, v14, v15, v16, v17);
LABEL_79:
      sub_2232CB6B8(a1, a2 + 128, v18, v19, v20, v21, v22, v23);
      goto LABEL_80;
    }
  }
  LOBYTE(v112) = 0;
  v119 = 0;
  sub_2232CB16C(a1, (uint64_t)&v112, v12, v13, v14, v15, v16, v17);
  if (!v119)
    goto LABEL_78;
  v102 = &off_24EC1F8C8;
  v46 = v113;
  v47 = v114;
  if (v114)
  {
    v48 = (unint64_t *)&v114->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
    v50 = v117;
    v52 = v115;
    v51 = v116;
    v53 = v118;
    do
      v54 = __ldxr(v48);
    while (__stxr(v54 + 1, v48));
    do
      v55 = __ldxr(v48);
    while (__stxr(v55 + 1, v48));
  }
  else
  {
    v50 = v117;
    v52 = v115;
    v51 = v116;
    v53 = v118;
  }
  v103 = v46;
  v104 = v47;
  v105 = v51;
  v106 = 4 * v50;
  v107 = v52;
  v108 = 4;
  v109 = v53;
  if (v47)
  {
    v56 = (unint64_t *)&v47->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
    do
      v58 = __ldaxr(v56);
    while (__stlxr(v58 - 1, v56));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  LOBYTE(v122) = 0;
  LOBYTE(v124) = 0;
  v125 = 0;
  v127 = 0;
  v129 = 1;
  v130 = 0;
  sub_22432B21C((uint64_t)&v102, 3u, (uint64_t)v110);
  sub_2232C1348(a2 + 64, (uint64_t)v110);
  v59 = v111;
  if (v111)
  {
    v60 = (unint64_t *)&v111->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v104;
  if (!v104)
    goto LABEL_63;
  v63 = (unint64_t *)&v104->__shared_owners_;
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
    if (!v119)
      goto LABEL_78;
  }
  else
  {
LABEL_63:
    if (!v119)
      goto LABEL_78;
  }
  v112 = &off_24EC27198;
  v65 = v114;
  if (!v114)
    goto LABEL_78;
  v66 = (unint64_t *)&v114->__shared_owners_;
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (v67)
  {
LABEL_78:
    if (v8 >= 4)
      goto LABEL_79;
    goto LABEL_69;
  }
  ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
  std::__shared_weak_count::__release_weak(v65);
  if (v8 >= 4)
    goto LABEL_79;
LABEL_69:
  LOBYTE(v121) = 0;
  v132 = 0;
  sub_2232C98B8(a1, (uint64_t)&v121, v18, v19, v20, v21, v22, v23);
  if (v132)
  {
    v102 = &off_24EC1F8C8;
    v68 = v122;
    v69 = v123;
    if (v123)
    {
      v70 = (unint64_t *)&v123->__shared_owners_;
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
      v72 = v126;
      v73 = v128;
      v74 = v124;
      v75 = v131;
      do
        v76 = __ldxr(v70);
      while (__stxr(v76 + 1, v70));
      do
        v77 = __ldxr(v70);
      while (__stxr(v77 + 1, v70));
    }
    else
    {
      v72 = v126;
      v73 = v128;
      v74 = v124;
      v75 = v131;
    }
    v103 = v68;
    v104 = v69;
    v105 = v72;
    v106 = 4 * v73;
    v107 = v74;
    v108 = 32;
    v109 = v75;
    if (v69)
    {
      v90 = (unint64_t *)&v69->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
      do
        v92 = __ldaxr(v90);
      while (__stlxr(v92 - 1, v90));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    LOBYTE(v113) = 0;
    LOBYTE(v115) = 0;
    LOBYTE(v116) = 0;
    LOBYTE(v118) = 0;
    v119 = 1;
    v120 = 0;
    sub_22432B21C((uint64_t)&v102, 0x1Fu, (uint64_t)v110);
    sub_2232C1620(a2 + 128, (uint64_t)v110);
    v93 = v111;
    if (v111)
    {
      v94 = (unint64_t *)&v111->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    v96 = v104;
    if (v104)
    {
      v97 = (unint64_t *)&v104->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    if (v132)
    {
      v121 = &off_24EC26EB0;
      v99 = v123;
      if (v123)
      {
        v100 = (unint64_t *)&v123->__shared_owners_;
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
    }
  }
LABEL_80:
  if (*(_BYTE *)(a2 + 488))
  {
    v78 = a1[3];
    if (*(_BYTE *)(v78 + 40))
    {
      v121 = (uint64_t (**)())(v78 + 16);
      sub_224559C04((uint64_t **)&v121, 1);
    }
    else
    {
      LOBYTE(v121) = 1;
      std::ostream::write();
    }
    v86 = a1[3];
    if (*(_BYTE *)(v86 + 40))
    {
      v121 = (uint64_t (**)())(v86 + 16);
      sub_22455A7EC((uint64_t **)&v121, 2u);
    }
    else
    {
      sub_22455AA60((uint64_t)&v121, v86 + 8);
    }
    sub_2232CBC18(a1, a2 + 216, 2u);
  }
  else
  {
    v79 = a1[3];
    if (*(_BYTE *)(v79 + 40))
    {
      v121 = (uint64_t (**)())(v79 + 16);
      sub_224559C04((uint64_t **)&v121, 0);
    }
    else
    {
      LOBYTE(v121) = 0;
      std::ostream::write();
    }
  }
  if (v11 <= 3)
  {
    LOBYTE(v121) = 0;
    v129 = 0;
    sub_2232CAC20(a1, (uint64_t)&v121, v80, v81, v82, v83, v84, v85);
    if (v129)
    {
      v121 = &off_24EC21328;
      v87 = v123;
      if (v123)
      {
        v88 = (unint64_t *)&v123->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
    }
  }
}

void sub_2232CAB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  sub_22319B358((uint64_t)&a16);
  sub_22319A5E0((uint64_t)&a9);
  sub_223255D3C(v16 - 160);
  _Unwind_Resume(a1);
}

void sub_2232CAB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_22319A5E0((uint64_t)&a9);
  sub_223255D3C(v9 - 160);
  _Unwind_Resume(a1);
}

void sub_2232CAB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_22319B358((uint64_t)&a16);
  sub_22319A5E0((uint64_t)&a9);
  sub_2232BBEF8((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_2232CABE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2232BBF74(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2232CABF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_2232BBEF8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232CAC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_2232BBEF8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232CAC20(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  __int16 v51;
  _QWORD v52[2];
  std::__shared_weak_count *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  __int16 v58;
  _BYTE v59[28];
  _BYTE v60[64];
  int v61;
  _OWORD v62[2];
  _BYTE v63[64];
  int v64;
  char v65;
  char v66;
  uint64_t *v67;

  v9 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a2 + 56))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 48);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v46 = *(_OWORD *)(a2 + 24);
      v48 = *(_QWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v44 = v10;
      v45 = v11;
      v50 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v52[0] = &off_24EC1F8C8;
      v10 = v44;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = HIDWORD(v48);
      v22 = *((_QWORD *)&v46 + 1);
      v23 = v46;
      v24 = v50;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v45 = 0;
      v47 = *(_OWORD *)(a2 + 24);
      v49 = *(_QWORD *)(a2 + 40);
      v51 = *(_WORD *)(a2 + 48);
      v52[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = HIDWORD(v49);
      v22 = *((_QWORD *)&v47 + 1);
      v23 = v47;
      v24 = v51;
    }
    v52[1] = v10;
    v53 = v11;
    v54 = v22;
    v55 = 2 * v21;
    v56 = v23;
    v57 = 3;
    v58 = v24;
    if (v11)
    {
      v28 = (unint64_t *)&v11->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v59, (uint64_t)v52, 0, a4, a5, a6, a7, a8);
    v62[0] = *(_OWORD *)v59;
    *(_OWORD *)((char *)v62 + 12) = *(_OWORD *)&v59[12];
    v63[0] = 0;
    v64 = -1;
    v31 = v61;
    if (v61 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC28BA8[v61])(&v66, v63, v60);
      v64 = v31;
    }
    v65 = 1;
    v32 = a1[3];
    if (*(_BYTE *)(v32 + 40))
    {
      v67 = (uint64_t *)(v32 + 16);
      sub_224559C04(&v67, 1);
    }
    else
    {
      LOBYTE(v67) = 1;
      std::ostream::write();
    }
    v33 = a1[3];
    if (*(_BYTE *)(v33 + 40))
    {
      v67 = (uint64_t *)(v33 + 16);
      sub_22455A7EC(&v67, 2u);
    }
    else
    {
      sub_22455AA60((uint64_t)&v67, v33 + 8);
    }
    sub_224555278(a1[3]);
    sub_22319F5F8(a1, (uint64_t)v62);
    v34 = a1[3];
    v35 = *(_QWORD *)(*(_QWORD *)(v34 + 88) - 8);
    sub_224554D6C((uint64_t *)(v34 + 48), *(_QWORD *)(v34 + 16) - v35 - 9);
    v36 = *(_QWORD *)(v34 + 48);
    if (v36)
      memmove((void *)(*(_QWORD *)(v34 + 24) + v35), *(const void **)(v34 + 56), v36);
    *(_QWORD *)(v34 + 48) = 0;
    v37 = *(_QWORD *)(v34 + 80);
    v38 = *(_QWORD *)(v34 + 88) - 8;
    *(_QWORD *)(v34 + 88) = v38;
    if (v37 == v38)
    {
      std::ostream::write();
      if (*(_BYTE *)(v34 + 40))
      {
        free(*(void **)(v34 + 24));
        *(_BYTE *)(v34 + 40) = 0;
      }
    }
  }
  else
  {
    LOBYTE(v62[0]) = 0;
    v65 = 0;
    v27 = a1[3];
    if (*(_BYTE *)(v27 + 40))
    {
      *(_QWORD *)v59 = v27 + 16;
      sub_224559C04((uint64_t **)v59, 0);
    }
    else
    {
      v59[0] = 0;
      std::ostream::write();
    }
  }
  if (v65)
  {
    if (v64 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_24EC28B98[v64])(&v67, v63);
    v64 = -1;
  }
  if (v9)
  {
    if (v61 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_24EC28B98[v61])(&v67, v60);
    v61 = -1;
    v39 = v53;
    if (v53)
    {
      v40 = (unint64_t *)&v53->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (v45)
    {
      v42 = (unint64_t *)&v45->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
}

void sub_2232CB0D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2232C17E0(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_2232CB0EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v5 = *(unsigned int *)(v3 - 80);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC28B98[v5])(v3 - 56, v2);
  *(_DWORD *)(v3 - 80) = -1;
  sub_22319A588((uint64_t)va2);
  sub_22319A5E0((uint64_t)va1);
  sub_22319EF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232CB16C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  __int16 v51;
  _QWORD v52[2];
  std::__shared_weak_count *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  __int16 v58;
  _BYTE v59[28];
  _BYTE v60[64];
  int v61;
  _OWORD v62[2];
  _BYTE v63[64];
  int v64;
  char v65;
  char v66;
  uint64_t *v67;

  v9 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a2 + 56))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 48);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v46 = *(_OWORD *)(a2 + 24);
      v48 = *(_QWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v44 = v10;
      v45 = v11;
      v50 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v52[0] = &off_24EC1F8C8;
      v10 = v44;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = HIDWORD(v48);
      v22 = *((_QWORD *)&v46 + 1);
      v23 = v46;
      v24 = v50;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v45 = 0;
      v47 = *(_OWORD *)(a2 + 24);
      v49 = *(_QWORD *)(a2 + 40);
      v51 = *(_WORD *)(a2 + 48);
      v52[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = HIDWORD(v49);
      v22 = *((_QWORD *)&v47 + 1);
      v23 = v47;
      v24 = v51;
    }
    v52[1] = v10;
    v53 = v11;
    v54 = v22;
    v55 = 4 * v21;
    v56 = v23;
    v57 = 4;
    v58 = v24;
    if (v11)
    {
      v28 = (unint64_t *)&v11->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v59, (uint64_t)v52, 0, a4, a5, a6, a7, a8);
    v62[0] = *(_OWORD *)v59;
    *(_OWORD *)((char *)v62 + 12) = *(_OWORD *)&v59[12];
    v63[0] = 0;
    v64 = -1;
    v31 = v61;
    if (v61 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC28BA8[v61])(&v66, v63, v60);
      v64 = v31;
    }
    v65 = 1;
    v32 = a1[3];
    if (*(_BYTE *)(v32 + 40))
    {
      v67 = (uint64_t *)(v32 + 16);
      sub_224559C04(&v67, 1);
    }
    else
    {
      LOBYTE(v67) = 1;
      std::ostream::write();
    }
    v33 = a1[3];
    if (*(_BYTE *)(v33 + 40))
    {
      v67 = (uint64_t *)(v33 + 16);
      sub_22455A7EC(&v67, 2u);
    }
    else
    {
      sub_22455AA60((uint64_t)&v67, v33 + 8);
    }
    sub_224555278(a1[3]);
    sub_22319F5F8(a1, (uint64_t)v62);
    v34 = a1[3];
    v35 = *(_QWORD *)(*(_QWORD *)(v34 + 88) - 8);
    sub_224554D6C((uint64_t *)(v34 + 48), *(_QWORD *)(v34 + 16) - v35 - 9);
    v36 = *(_QWORD *)(v34 + 48);
    if (v36)
      memmove((void *)(*(_QWORD *)(v34 + 24) + v35), *(const void **)(v34 + 56), v36);
    *(_QWORD *)(v34 + 48) = 0;
    v37 = *(_QWORD *)(v34 + 80);
    v38 = *(_QWORD *)(v34 + 88) - 8;
    *(_QWORD *)(v34 + 88) = v38;
    if (v37 == v38)
    {
      std::ostream::write();
      if (*(_BYTE *)(v34 + 40))
      {
        free(*(void **)(v34 + 24));
        *(_BYTE *)(v34 + 40) = 0;
      }
    }
  }
  else
  {
    LOBYTE(v62[0]) = 0;
    v65 = 0;
    v27 = a1[3];
    if (*(_BYTE *)(v27 + 40))
    {
      *(_QWORD *)v59 = v27 + 16;
      sub_224559C04((uint64_t **)v59, 0);
    }
    else
    {
      v59[0] = 0;
      std::ostream::write();
    }
  }
  if (v65)
  {
    if (v64 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_24EC28B98[v64])(&v67, v63);
    v64 = -1;
  }
  if (v9)
  {
    if (v61 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_24EC28B98[v61])(&v67, v60);
    v61 = -1;
    v39 = v53;
    if (v53)
    {
      v40 = (unint64_t *)&v53->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (v45)
    {
      v42 = (unint64_t *)&v45->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
}

void sub_2232CB61C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2232C17E0(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_2232CB638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v5 = *(unsigned int *)(v3 - 80);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC28B98[v5])(v3 - 56, v2);
  *(_DWORD *)(v3 - 80) = -1;
  sub_22319A588((uint64_t)va2);
  sub_22319A5E0((uint64_t)va1);
  sub_2231BD9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232CB6B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  _BYTE v46[32];
  _BYTE v47[32];
  __int16 v48;
  __int16 v49;
  _QWORD v50[2];
  std::__shared_weak_count *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  _BYTE v57[28];
  _BYTE v58[64];
  int v59;
  _OWORD v60[2];
  _BYTE v61[64];
  int v62;
  char v63;
  char v64;
  uint64_t *v65;

  v9 = *(unsigned __int8 *)(a2 + 80);
  if (*(_BYTE *)(a2 + 80))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 72);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      *(_OWORD *)v46 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)&v46[16] = *(_OWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v44 = v10;
      v45 = v11;
      v48 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v50[0] = &off_24EC1F8C8;
      v10 = v44;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = *(_QWORD *)&v46[12];
      v22 = *(_DWORD *)&v46[28];
      v23 = *(_QWORD *)v46;
      v24 = v48;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v45 = 0;
      *(_OWORD *)v47 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)&v47[16] = *(_OWORD *)(a2 + 40);
      v49 = *(_WORD *)(a2 + 72);
      v50[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = *(_QWORD *)&v47[12];
      v22 = *(_DWORD *)&v47[28];
      v23 = *(_QWORD *)v47;
      v24 = v49;
    }
    v50[1] = v10;
    v51 = v11;
    v52 = v21;
    v53 = 2 * v22;
    v54 = v23;
    v55 = 31;
    v56 = v24;
    if (v11)
    {
      v28 = (unint64_t *)&v11->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v57, (uint64_t)v50, 0, a4, a5, a6, a7, a8);
    v60[0] = *(_OWORD *)v57;
    *(_OWORD *)((char *)v60 + 12) = *(_OWORD *)&v57[12];
    v61[0] = 0;
    v62 = -1;
    v31 = v59;
    if (v59 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC28BA8[v59])(&v64, v61, v58);
      v62 = v31;
    }
    v63 = 1;
    v32 = a1[3];
    if (*(_BYTE *)(v32 + 40))
    {
      v65 = (uint64_t *)(v32 + 16);
      sub_224559C04(&v65, 1);
    }
    else
    {
      LOBYTE(v65) = 1;
      std::ostream::write();
    }
    v33 = a1[3];
    if (*(_BYTE *)(v33 + 40))
    {
      v65 = (uint64_t *)(v33 + 16);
      sub_22455A7EC(&v65, 2u);
    }
    else
    {
      sub_22455AA60((uint64_t)&v65, v33 + 8);
    }
    sub_224555278(a1[3]);
    sub_22319F5F8(a1, (uint64_t)v60);
    v34 = a1[3];
    v35 = *(_QWORD *)(*(_QWORD *)(v34 + 88) - 8);
    sub_224554D6C((uint64_t *)(v34 + 48), *(_QWORD *)(v34 + 16) - v35 - 9);
    v36 = *(_QWORD *)(v34 + 48);
    if (v36)
      memmove((void *)(*(_QWORD *)(v34 + 24) + v35), *(const void **)(v34 + 56), v36);
    *(_QWORD *)(v34 + 48) = 0;
    v37 = *(_QWORD *)(v34 + 80);
    v38 = *(_QWORD *)(v34 + 88) - 8;
    *(_QWORD *)(v34 + 88) = v38;
    if (v37 == v38)
    {
      std::ostream::write();
      if (*(_BYTE *)(v34 + 40))
      {
        free(*(void **)(v34 + 24));
        *(_BYTE *)(v34 + 40) = 0;
      }
    }
  }
  else
  {
    LOBYTE(v60[0]) = 0;
    v63 = 0;
    v27 = a1[3];
    if (*(_BYTE *)(v27 + 40))
    {
      *(_QWORD *)v57 = v27 + 16;
      sub_224559C04((uint64_t **)v57, 0);
    }
    else
    {
      v57[0] = 0;
      std::ostream::write();
    }
  }
  if (v63)
  {
    if (v62 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_24EC28B98[v62])(&v65, v61);
    v62 = -1;
  }
  if (v9)
  {
    if (v59 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_24EC28B98[v59])(&v65, v58);
    v59 = -1;
    v39 = v51;
    if (v51)
    {
      v40 = (unint64_t *)&v51->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (v45)
    {
      v42 = (unint64_t *)&v45->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
}

void sub_2232CBB7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2232C17E0(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_2232CBB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v29 = *(unsigned int *)(v27 - 80);
  if ((_DWORD)v29 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC28B98[v29])(v27 - 56, v26);
  *(_DWORD *)(v27 - 80) = -1;
  sub_22319A588((uint64_t)&a26);
  sub_22319A5E0((uint64_t)&a19);
  sub_2231D4840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232CBC18(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  std::__shared_weak_count *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  __int16 v44;
  _BYTE v45[16];
  std::__shared_weak_count *v46;
  _QWORD v47[2];
  std::__shared_weak_count *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  char v53;
  uint64_t *v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (a3 > 1)
  {
    sub_2232CC59C(a1, a2);
    v15 = a1[3];
    if (*(_BYTE *)(v15 + 40))
    {
LABEL_36:
      v54 = (uint64_t *)(v15 + 16);
      sub_22455A7EC(&v54, 2u);
      goto LABEL_39;
    }
  }
  else
  {
    LOBYTE(v47[0]) = 0;
    v53 = 0;
    sub_2232CC068(a1, (uint64_t)v47);
    v38[0] = &off_24EC1F8C8;
    v5 = v47[1];
    v6 = v48;
    if (v48)
    {
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      v9 = v51;
      v11 = v49;
      v10 = v50;
      v12 = v52;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      v9 = v51;
      v11 = v49;
      v10 = v50;
      v12 = v52;
    }
    v38[1] = v5;
    v39 = v6;
    v40 = v10;
    v41 = 4 * v9;
    v42 = v11;
    v43 = 4;
    v44 = v12;
    if (v6)
    {
      v16 = (unint64_t *)&v6->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 1;
    v60 = 0;
    sub_22432B21C((uint64_t)v38, 3u, (uint64_t)v45);
    sub_2232C1348(a2, (uint64_t)v45);
    v19 = v46;
    if (v46)
    {
      v20 = (unint64_t *)&v46->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v39;
    if (v39)
    {
      v23 = (unint64_t *)&v39->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (!v53)
      goto LABEL_35;
    v47[0] = &off_24EC27198;
    v25 = v48;
    if (!v48)
      goto LABEL_35;
    v26 = (unint64_t *)&v48->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      v15 = a1[3];
      if (*(_BYTE *)(v15 + 40))
        goto LABEL_36;
    }
    else
    {
LABEL_35:
      v15 = a1[3];
      if (*(_BYTE *)(v15 + 40))
        goto LABEL_36;
    }
  }
  sub_22455AA60((uint64_t)&v54, v15 + 8);
LABEL_39:
  sub_224555278(a1[3]);
  sub_22319F5F8(a1, a2 + 64);
  v28 = a1[3];
  v29 = *(_QWORD *)(*(_QWORD *)(v28 + 88) - 8);
  sub_224554D6C((uint64_t *)(v28 + 48), *(_QWORD *)(v28 + 16) - v29 - 9);
  if (*(_QWORD *)(v28 + 48))
    memmove((void *)(*(_QWORD *)(v28 + 24) + v29), *(const void **)(v28 + 56), *(_QWORD *)(v28 + 48));
  *(_QWORD *)(v28 + 48) = 0;
  v30 = *(_QWORD *)(v28 + 80);
  v31 = *(_QWORD *)(v28 + 88) - 8;
  *(_QWORD *)(v28 + 88) = v31;
  if (v30 == v31)
  {
    std::ostream::write();
    if (*(_BYTE *)(v28 + 40))
    {
      free(*(void **)(v28 + 24));
      *(_BYTE *)(v28 + 40) = 0;
    }
  }
  v32 = a1[3];
  if (*(_BYTE *)(v32 + 40))
  {
    v54 = (uint64_t *)(v32 + 16);
    sub_22455A7EC(&v54, 2u);
  }
  else
  {
    sub_22455AA60((uint64_t)&v54, v32 + 8);
  }
  sub_224555278(a1[3]);
  sub_22319F5F8(a1, a2 + 168);
  v33 = a1[3];
  v34 = *(_QWORD *)(*(_QWORD *)(v33 + 88) - 8);
  sub_224554D6C((uint64_t *)(v33 + 48), *(_QWORD *)(v33 + 16) - v34 - 9);
  v35 = *(_QWORD *)(v33 + 48);
  if (v35)
    memmove((void *)(*(_QWORD *)(v33 + 24) + v34), *(const void **)(v33 + 56), v35);
  *(_QWORD *)(v33 + 48) = 0;
  v36 = *(_QWORD *)(v33 + 80);
  v37 = *(_QWORD *)(v33 + 88) - 8;
  *(_QWORD *)(v33 + 88) = v37;
  if (v36 == v37)
  {
    std::ostream::write();
    if (*(_BYTE *)(v33 + 40))
    {
      free(*(void **)(v33 + 24));
      *(_BYTE *)(v33 + 40) = 0;
    }
  }
}

void sub_2232CC024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  sub_22319B358((uint64_t)va1);
  sub_22319A5E0((uint64_t)va);
  sub_2232BBEF8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2232CC050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_2232BBEF8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232CC068(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  __int16 v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t (**v49)();
  uint64_t v50;
  std::__shared_weak_count *v51;
  __int128 v52;
  uint64_t v53;
  __int16 v54;
  _QWORD v55[2];
  std::__shared_weak_count *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  __int16 v61;
  _BYTE v62[28];
  _BYTE v63[64];
  int v64;
  _BYTE v65[28];
  _BYTE v66[64];
  unsigned int v67;
  uint64_t *v68;

  *(_QWORD *)v62 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v62[8]);
  sub_22416BD7C((uint64_t)v65, (uint64_t)v62, 0);
  v9 = *(std::__shared_weak_count **)&v62[16];
  if (!*(_QWORD *)&v62[16])
    goto LABEL_5;
  v10 = (unint64_t *)(*(_QWORD *)&v62[16] + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    *(_DWORD *)&v65[24] = 0;
    v12 = *(unsigned __int8 *)(a2 + 56);
    if (*(_BYTE *)(a2 + 56))
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    *(_DWORD *)&v65[24] = 0;
    v12 = *(unsigned __int8 *)(a2 + 56);
    if (*(_BYTE *)(a2 + 56))
    {
LABEL_6:
      v49 = &off_24EC21230;
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(std::__shared_weak_count **)(a2 + 16);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        v17 = *(_WORD *)(a2 + 48);
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
        v52 = *(_OWORD *)(a2 + 24);
        v53 = *(_QWORD *)(a2 + 40);
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
        v50 = v13;
        v51 = v14;
        v54 = v17;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        v55[0] = &off_24EC1F8C8;
        v13 = v50;
        v22 = v51;
        v23 = (unint64_t *)&v51->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        v25 = HIDWORD(v53);
        v26 = *((_QWORD *)&v52 + 1);
        v27 = v52;
        v28 = v54;
        do
          v29 = __ldxr(v23);
        while (__stxr(v29 + 1, v23));
        do
          v30 = __ldxr(v23);
        while (__stxr(v30 + 1, v23));
      }
      else
      {
        v32 = *(_WORD *)(a2 + 48);
        v50 = *(_QWORD *)(a2 + 8);
        v51 = 0;
        v52 = *(_OWORD *)(a2 + 24);
        v53 = *(_QWORD *)(a2 + 40);
        v54 = v32;
        v55[0] = &off_24EC1F8C8;
        v22 = 0;
        v25 = HIDWORD(v53);
        v26 = *((_QWORD *)&v52 + 1);
        v27 = v52;
        v28 = v54;
      }
      v55[1] = v13;
      v56 = v22;
      v57 = v26;
      v58 = 4 * v25;
      v59 = v27;
      v60 = 4;
      v61 = v28;
      if (v22)
      {
        v33 = (unint64_t *)&v22->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        do
          v35 = __ldaxr(v33);
        while (__stlxr(v35 - 1, v33));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      sub_22416BFE0((uint64_t)v62, (uint64_t)v55, 0, v4, v5, v6, v7, v8);
      goto LABEL_39;
    }
  }
  *(_OWORD *)v62 = *(_OWORD *)v65;
  *(_OWORD *)&v62[12] = *(_OWORD *)&v65[12];
  v63[0] = 0;
  v64 = -1;
  v31 = v67;
  if (v67 != -1)
  {
    ((void (*)(uint64_t (***)(), _BYTE *, _BYTE *))off_24EC28CB0[v67])(&v49, v63, v66);
    v64 = v31;
  }
LABEL_39:
  v36 = a1[3];
  if (*(_BYTE *)(v36 + 40))
  {
    v68 = (uint64_t *)(v36 + 16);
    sub_22455A7EC(&v68, 2u);
  }
  else
  {
    sub_22455AA60((uint64_t)&v68, v36 + 8);
  }
  sub_224555278(a1[3]);
  sub_22319F5F8(a1, (uint64_t)v62);
  v37 = a1[3];
  v38 = *(_QWORD *)(*(_QWORD *)(v37 + 88) - 8);
  sub_224554D6C((uint64_t *)(v37 + 48), *(_QWORD *)(v37 + 16) - v38 - 9);
  v39 = *(_QWORD *)(v37 + 48);
  if (v39)
    memmove((void *)(*(_QWORD *)(v37 + 24) + v38), *(const void **)(v37 + 56), v39);
  *(_QWORD *)(v37 + 48) = 0;
  v40 = *(_QWORD *)(v37 + 80);
  v41 = *(_QWORD *)(v37 + 88) - 8;
  *(_QWORD *)(v37 + 88) = v41;
  if (v40 == v41)
  {
    std::ostream::write();
    if (*(_BYTE *)(v37 + 40))
    {
      free(*(void **)(v37 + 24));
      *(_BYTE *)(v37 + 40) = 0;
    }
  }
  if (v64 != -1)
    ((void (*)(uint64_t **, _BYTE *))off_24EC28B98[v64])(&v68, v63);
  v64 = -1;
  if (!v12)
    goto LABEL_59;
  v42 = v56;
  if (v56)
  {
    v43 = (unint64_t *)&v56->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v51;
  if (!v51)
    goto LABEL_59;
  v46 = (unint64_t *)&v51->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    v48 = v67;
    if (v67 == -1)
      return;
  }
  else
  {
LABEL_59:
    v48 = v67;
    if (v67 == -1)
      return;
  }
  ((void (*)(_BYTE *, _BYTE *))off_24EC28B98[v48])(v62, v66);
}

void sub_2232CC4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35)
{
  uint64_t v35;
  uint64_t v36;

  if (a35 != -1)
    ((void (*)(char *, uint64_t))off_24EC28B98[a35])(&a16, v35);
  sub_22319A588(v36 - 160);
  _Unwind_Resume(a1);
}

void sub_2232CC59C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  __int16 v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t (**v49)();
  uint64_t v50;
  std::__shared_weak_count *v51;
  __int128 v52;
  uint64_t v53;
  __int16 v54;
  _QWORD v55[2];
  std::__shared_weak_count *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  __int16 v61;
  _BYTE v62[28];
  _BYTE v63[64];
  int v64;
  _BYTE v65[28];
  _BYTE v66[64];
  unsigned int v67;
  uint64_t *v68;

  *(_QWORD *)v62 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v62[8]);
  sub_22416BD7C((uint64_t)v65, (uint64_t)v62, 0);
  v9 = *(std::__shared_weak_count **)&v62[16];
  if (!*(_QWORD *)&v62[16])
    goto LABEL_5;
  v10 = (unint64_t *)(*(_QWORD *)&v62[16] + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    *(_DWORD *)&v65[24] = 0;
    v12 = *(unsigned __int8 *)(a2 + 56);
    if (*(_BYTE *)(a2 + 56))
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    *(_DWORD *)&v65[24] = 0;
    v12 = *(unsigned __int8 *)(a2 + 56);
    if (*(_BYTE *)(a2 + 56))
    {
LABEL_6:
      v49 = &off_24EC200A8;
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(std::__shared_weak_count **)(a2 + 16);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        v17 = *(_WORD *)(a2 + 48);
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
        v52 = *(_OWORD *)(a2 + 24);
        v53 = *(_QWORD *)(a2 + 40);
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
        v50 = v13;
        v51 = v14;
        v54 = v17;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        v55[0] = &off_24EC1F8C8;
        v13 = v50;
        v22 = v51;
        v23 = (unint64_t *)&v51->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        v25 = HIDWORD(v53);
        v26 = *((_QWORD *)&v52 + 1);
        v27 = v52;
        v28 = v54;
        do
          v29 = __ldxr(v23);
        while (__stxr(v29 + 1, v23));
        do
          v30 = __ldxr(v23);
        while (__stxr(v30 + 1, v23));
      }
      else
      {
        v32 = *(_WORD *)(a2 + 48);
        v50 = *(_QWORD *)(a2 + 8);
        v51 = 0;
        v52 = *(_OWORD *)(a2 + 24);
        v53 = *(_QWORD *)(a2 + 40);
        v54 = v32;
        v55[0] = &off_24EC1F8C8;
        v22 = 0;
        v25 = HIDWORD(v53);
        v26 = *((_QWORD *)&v52 + 1);
        v27 = v52;
        v28 = v54;
      }
      v55[1] = v13;
      v56 = v22;
      v57 = v26;
      v58 = 2 * v25;
      v59 = v27;
      v60 = 3;
      v61 = v28;
      if (v22)
      {
        v33 = (unint64_t *)&v22->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        do
          v35 = __ldaxr(v33);
        while (__stlxr(v35 - 1, v33));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      sub_22416BFE0((uint64_t)v62, (uint64_t)v55, 0, v4, v5, v6, v7, v8);
      goto LABEL_39;
    }
  }
  *(_OWORD *)v62 = *(_OWORD *)v65;
  *(_OWORD *)&v62[12] = *(_OWORD *)&v65[12];
  v63[0] = 0;
  v64 = -1;
  v31 = v67;
  if (v67 != -1)
  {
    ((void (*)(uint64_t (***)(), _BYTE *, _BYTE *))off_24EC28CB0[v67])(&v49, v63, v66);
    v64 = v31;
  }
LABEL_39:
  v36 = a1[3];
  if (*(_BYTE *)(v36 + 40))
  {
    v68 = (uint64_t *)(v36 + 16);
    sub_22455A7EC(&v68, 2u);
  }
  else
  {
    sub_22455AA60((uint64_t)&v68, v36 + 8);
  }
  sub_224555278(a1[3]);
  sub_22319F5F8(a1, (uint64_t)v62);
  v37 = a1[3];
  v38 = *(_QWORD *)(*(_QWORD *)(v37 + 88) - 8);
  sub_224554D6C((uint64_t *)(v37 + 48), *(_QWORD *)(v37 + 16) - v38 - 9);
  v39 = *(_QWORD *)(v37 + 48);
  if (v39)
    memmove((void *)(*(_QWORD *)(v37 + 24) + v38), *(const void **)(v37 + 56), v39);
  *(_QWORD *)(v37 + 48) = 0;
  v40 = *(_QWORD *)(v37 + 80);
  v41 = *(_QWORD *)(v37 + 88) - 8;
  *(_QWORD *)(v37 + 88) = v41;
  if (v40 == v41)
  {
    std::ostream::write();
    if (*(_BYTE *)(v37 + 40))
    {
      free(*(void **)(v37 + 24));
      *(_BYTE *)(v37 + 40) = 0;
    }
  }
  if (v64 != -1)
    ((void (*)(uint64_t **, _BYTE *))off_24EC28B98[v64])(&v68, v63);
  v64 = -1;
  if (!v12)
    goto LABEL_59;
  v42 = v56;
  if (v56)
  {
    v43 = (unint64_t *)&v56->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v51;
  if (!v51)
    goto LABEL_59;
  v46 = (unint64_t *)&v51->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    v48 = v67;
    if (v67 == -1)
      return;
  }
  else
  {
LABEL_59:
    v48 = v67;
    if (v67 == -1)
      return;
  }
  ((void (*)(_BYTE *, _BYTE *))off_24EC28B98[v48])(v62, v66);
}

void sub_2232CCA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35)
{
  uint64_t v35;
  uint64_t v36;

  if (a35 != -1)
    ((void (*)(char *, uint64_t))off_24EC28B98[a35])(&a16, v35);
  sub_22319A588(v36 - 160);
  _Unwind_Resume(a1);
}

void sub_2232CCAD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD v39[2];
  std::__shared_weak_count *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  _BYTE v46[16];
  std::__shared_weak_count *v47;
  _QWORD v48[2];
  std::__shared_weak_count *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  __int16 v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  int v60;
  uint64_t v61;

  v8 = a3;
  v61 = *MEMORY[0x24BDAC8D0];
  sub_2232C9E18(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v8 < 2)
  {
    LOBYTE(v48[0]) = 0;
    v54 = 0;
    sub_2232CB16C(a1, (uint64_t)v48, v11, v12, v13, v14, v15, v16);
    if (v54)
    {
      v39[0] = &off_24EC1F8C8;
      v17 = v48[1];
      v18 = v49;
      if (v49)
      {
        p_shared_owners = (unint64_t *)&v49->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = v52;
        v23 = v50;
        v22 = v51;
        v24 = v53;
        do
          v25 = __ldxr(p_shared_owners);
        while (__stxr(v25 + 1, p_shared_owners));
        do
          v26 = __ldxr(p_shared_owners);
        while (__stxr(v26 + 1, p_shared_owners));
      }
      else
      {
        v21 = v52;
        v23 = v50;
        v22 = v51;
        v24 = v53;
      }
      v39[1] = v17;
      v40 = v18;
      v41 = v22;
      v42 = 4 * v21;
      v43 = v23;
      v44 = 4;
      v45 = v24;
      if (v18)
      {
        v27 = (unint64_t *)&v18->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        do
          v29 = __ldaxr(v27);
        while (__stlxr(v29 - 1, v27));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v58 = 0;
      v59 = 1;
      v60 = 0;
      sub_22432B21C((uint64_t)v39, 3u, (uint64_t)v46);
      sub_2232C1348(a2 + 64, (uint64_t)v46);
      v30 = v47;
      if (v47)
      {
        v31 = (unint64_t *)&v47->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = v40;
      if (v40)
      {
        v34 = (unint64_t *)&v40->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (v54)
      {
        v48[0] = &off_24EC27198;
        v36 = v49;
        if (v49)
        {
          v37 = (unint64_t *)&v49->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
    }
  }
  else
  {
    sub_2232CAC20(a1, a2 + 64, v11, v12, v13, v14, v15, v16);
  }
}

void sub_2232CCD68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  sub_22319B358((uint64_t)va1);
  sub_22319A5E0((uint64_t)va);
  sub_2232BBEF8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2232CCD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_2232BBEF8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232CCDA8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t *v48[2];
  char v49;

  v8 = a3;
  sub_2232C98B8(a1, a2, a3, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(a2 + 92))
  {
    v11 = a1[3];
    if (*(_BYTE *)(v11 + 40))
    {
      v48[0] = (uint64_t *)(v11 + 16);
      sub_224559C04(v48, 1);
      v12 = (unsigned int *)(a2 + 88);
      v13 = a1[3];
      if (*(_BYTE *)(v13 + 40))
        goto LABEL_4;
    }
    else
    {
      LOBYTE(v48[0]) = 1;
      std::ostream::write();
      v12 = (unsigned int *)(a2 + 88);
      v13 = a1[3];
      if (*(_BYTE *)(v13 + 40))
      {
LABEL_4:
        v48[0] = (uint64_t *)(v13 + 16);
        sub_22455B5CC((uint64_t)&v49, v48, v12);
        if (v8 < 2)
          return;
        goto LABEL_13;
      }
    }
    v15 = *v12;
    LOBYTE(v48[0]) = -54;
    *(_DWORD *)((char *)v48 + 1) = bswap32(v15);
    std::ostream::write();
    if (v8 < 2)
      return;
  }
  else
  {
    v14 = a1[3];
    if (*(_BYTE *)(v14 + 40))
    {
      v48[0] = (uint64_t *)(v14 + 16);
      sub_224559C04(v48, 0);
      if (v8 < 2)
        return;
    }
    else
    {
      LOBYTE(v48[0]) = 0;
      std::ostream::write();
      if (v8 < 2)
        return;
    }
  }
LABEL_13:
  if (*(_BYTE *)(a2 + 120))
  {
    v16 = a1[3];
    if (*(_BYTE *)(v16 + 40))
    {
      v48[0] = (uint64_t *)(v16 + 16);
      sub_224559C04(v48, 1);
      v17 = (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 1;
      v18 = a1[3];
      if (*(_BYTE *)(v18 + 40))
      {
LABEL_16:
        v48[0] = (uint64_t *)(v18 + 16);
        sub_22455B1CC(v48, v17);
        goto LABEL_22;
      }
    }
    else
    {
      LOBYTE(v48[0]) = 1;
      std::ostream::write();
      v17 = (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 1;
      v18 = a1[3];
      if (*(_BYTE *)(v18 + 40))
        goto LABEL_16;
    }
    sub_22455B4D4();
LABEL_22:
    v20 = *(uint64_t **)(a2 + 96);
    v48[0] = (uint64_t *)((uint64_t)(*(_QWORD *)(a2 + 104) - (_QWORD)v20) >> 1);
    v48[1] = v20;
    sub_224553564(a1[3], v48);
    if (*(_BYTE *)(a2 + 132))
      goto LABEL_23;
LABEL_31:
    v23 = a1[3];
    if (*(_BYTE *)(v23 + 40))
    {
      v48[0] = (uint64_t *)(v23 + 16);
      sub_224559C04(v48, 0);
      if (!*(_BYTE *)(a2 + 140))
        goto LABEL_41;
    }
    else
    {
      LOBYTE(v48[0]) = 0;
      std::ostream::write();
      if (!*(_BYTE *)(a2 + 140))
        goto LABEL_41;
    }
    goto LABEL_33;
  }
  v19 = a1[3];
  if (*(_BYTE *)(v19 + 40))
  {
    v48[0] = (uint64_t *)(v19 + 16);
    sub_224559C04(v48, 0);
    if (*(_BYTE *)(a2 + 132))
      goto LABEL_23;
    goto LABEL_31;
  }
  LOBYTE(v48[0]) = 0;
  std::ostream::write();
  if (!*(_BYTE *)(a2 + 132))
    goto LABEL_31;
LABEL_23:
  v21 = a1[3];
  if (*(_BYTE *)(v21 + 40))
  {
    v48[0] = (uint64_t *)(v21 + 16);
    sub_224559C04(v48, 1);
    v22 = a1[3];
    if (*(_BYTE *)(v22 + 40))
      goto LABEL_25;
  }
  else
  {
    LOBYTE(v48[0]) = 1;
    std::ostream::write();
    v22 = a1[3];
    if (*(_BYTE *)(v22 + 40))
    {
LABEL_25:
      v48[0] = (uint64_t *)(v22 + 16);
      sub_22455A7EC(v48, *(_DWORD *)(a2 + 128));
      if (!*(_BYTE *)(a2 + 140))
        goto LABEL_41;
LABEL_33:
      v24 = a1[3];
      if (*(_BYTE *)(v24 + 40))
      {
        v48[0] = (uint64_t *)(v24 + 16);
        sub_224559C04(v48, 1);
        v25 = a1[3];
        if (*(_BYTE *)(v25 + 40))
          goto LABEL_35;
      }
      else
      {
        LOBYTE(v48[0]) = 1;
        std::ostream::write();
        v25 = a1[3];
        if (*(_BYTE *)(v25 + 40))
        {
LABEL_35:
          v48[0] = (uint64_t *)(v25 + 16);
          sub_22455A7EC(v48, *(_DWORD *)(a2 + 136));
          if (v8 < 3)
            return;
          goto LABEL_45;
        }
      }
      sub_22455AA60((uint64_t)v48, v25 + 8);
      if (v8 < 3)
        return;
      goto LABEL_45;
    }
  }
  sub_22455AA60((uint64_t)v48, v22 + 8);
  if (*(_BYTE *)(a2 + 140))
    goto LABEL_33;
LABEL_41:
  v26 = a1[3];
  if (*(_BYTE *)(v26 + 40))
  {
    v48[0] = (uint64_t *)(v26 + 16);
    sub_224559C04(v48, 0);
    if (v8 < 3)
      return;
  }
  else
  {
    LOBYTE(v48[0]) = 0;
    std::ostream::write();
    if (v8 < 3)
      return;
  }
LABEL_45:
  if (*(_BYTE *)(a2 + 148))
  {
    v27 = a1[3];
    if (*(_BYTE *)(v27 + 40))
    {
      v48[0] = (uint64_t *)(v27 + 16);
      sub_224559C04(v48, 1);
      v28 = a1[3];
      if (*(_BYTE *)(v28 + 40))
        goto LABEL_48;
    }
    else
    {
      LOBYTE(v48[0]) = 1;
      std::ostream::write();
      v28 = a1[3];
      if (*(_BYTE *)(v28 + 40))
      {
LABEL_48:
        v48[0] = (uint64_t *)(v28 + 16);
        sub_22455A7EC(v48, *(_DWORD *)(a2 + 144));
        if (v8 < 4)
          return;
        goto LABEL_57;
      }
    }
    sub_22455AA60((uint64_t)v48, v28 + 8);
    if (v8 < 4)
      return;
    goto LABEL_57;
  }
  v29 = a1[3];
  if (*(_BYTE *)(v29 + 40))
  {
    v48[0] = (uint64_t *)(v29 + 16);
    sub_224559C04(v48, 0);
    if (v8 < 4)
      return;
  }
  else
  {
    LOBYTE(v48[0]) = 0;
    std::ostream::write();
    if (v8 < 4)
      return;
  }
LABEL_57:
  v30 = a1[3];
  if (*(_BYTE *)(v30 + 40))
  {
    v48[0] = (uint64_t *)(v30 + 16);
    sub_22455A7EC(v48, 2u);
  }
  else
  {
    sub_22455AA60((uint64_t)v48, v30 + 8);
  }
  sub_224555278(a1[3]);
  sub_2231A5FE4((uint64_t)a1);
  v31 = a1[3];
  v32 = *(_QWORD *)(*(_QWORD *)(v31 + 88) - 8);
  sub_224554D6C((uint64_t *)(v31 + 48), *(_QWORD *)(v31 + 16) - v32 - 9);
  v33 = *(_QWORD *)(v31 + 48);
  if (v33)
    memmove((void *)(*(_QWORD *)(v31 + 24) + v32), *(const void **)(v31 + 56), v33);
  *(_QWORD *)(v31 + 48) = 0;
  v34 = *(_QWORD *)(v31 + 80);
  v35 = *(_QWORD *)(v31 + 88) - 8;
  *(_QWORD *)(v31 + 88) = v35;
  if (v34 == v35)
  {
    std::ostream::write();
    if (*(_BYTE *)(v31 + 40))
    {
      free(*(void **)(v31 + 24));
      *(_BYTE *)(v31 + 40) = 0;
    }
  }
  if (v8 != 4)
  {
    if (*(_BYTE *)(a2 + 204))
    {
      v36 = a1[3];
      if (*(_BYTE *)(v36 + 40))
      {
        v48[0] = (uint64_t *)(v36 + 16);
        sub_224559C04(v48, 1);
        v37 = a1[3];
        if (*(_BYTE *)(v37 + 40))
        {
LABEL_69:
          v48[0] = (uint64_t *)(v37 + 16);
          sub_22455B5CC((uint64_t)&v49, v48, (unsigned int *)(a2 + 168));
          sub_22455B5CC((uint64_t)&v49, v48, (unsigned int *)(a2 + 172));
          sub_22455B5CC((uint64_t)&v49, v48, (unsigned int *)(a2 + 176));
          sub_22455B5CC((uint64_t)&v49, v48, (unsigned int *)(a2 + 180));
          sub_22455B5CC((uint64_t)&v49, v48, (unsigned int *)(a2 + 184));
          sub_22455B5CC((uint64_t)&v49, v48, (unsigned int *)(a2 + 188));
          sub_22455B5CC((uint64_t)&v49, v48, (unsigned int *)(a2 + 192));
          sub_22455B5CC((uint64_t)&v49, v48, (unsigned int *)(a2 + 196));
          sub_22455B5CC((uint64_t)&v49, v48, (unsigned int *)(a2 + 200));
          return;
        }
      }
      else
      {
        LOBYTE(v48[0]) = 1;
        std::ostream::write();
        v37 = a1[3];
        if (*(_BYTE *)(v37 + 40))
          goto LABEL_69;
      }
      v39 = *(_DWORD *)(a2 + 168);
      LOBYTE(v48[0]) = -54;
      *(_DWORD *)((char *)v48 + 1) = bswap32(v39);
      std::ostream::write();
      v40 = *(_DWORD *)(a2 + 172);
      LOBYTE(v48[0]) = -54;
      *(_DWORD *)((char *)v48 + 1) = bswap32(v40);
      std::ostream::write();
      v41 = *(_DWORD *)(a2 + 176);
      LOBYTE(v48[0]) = -54;
      *(_DWORD *)((char *)v48 + 1) = bswap32(v41);
      std::ostream::write();
      v42 = *(_DWORD *)(a2 + 180);
      LOBYTE(v48[0]) = -54;
      *(_DWORD *)((char *)v48 + 1) = bswap32(v42);
      std::ostream::write();
      v43 = *(_DWORD *)(a2 + 184);
      LOBYTE(v48[0]) = -54;
      *(_DWORD *)((char *)v48 + 1) = bswap32(v43);
      std::ostream::write();
      v44 = *(_DWORD *)(a2 + 188);
      LOBYTE(v48[0]) = -54;
      *(_DWORD *)((char *)v48 + 1) = bswap32(v44);
      std::ostream::write();
      v45 = *(_DWORD *)(a2 + 192);
      LOBYTE(v48[0]) = -54;
      *(_DWORD *)((char *)v48 + 1) = bswap32(v45);
      std::ostream::write();
      v46 = *(_DWORD *)(a2 + 196);
      LOBYTE(v48[0]) = -54;
      *(_DWORD *)((char *)v48 + 1) = bswap32(v46);
      std::ostream::write();
      v47 = *(_DWORD *)(a2 + 200);
      LOBYTE(v48[0]) = -54;
      *(_DWORD *)((char *)v48 + 1) = bswap32(v47);
    }
    else
    {
      v38 = a1[3];
      if (*(_BYTE *)(v38 + 40))
      {
        v48[0] = (uint64_t *)(v38 + 16);
        sub_224559C04(v48, 0);
        return;
      }
      LOBYTE(v48[0]) = 0;
    }
    std::ostream::write();
  }
}

void sub_2232CD5AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  _BYTE v46[32];
  _BYTE v47[32];
  __int16 v48;
  __int16 v49;
  _QWORD v50[2];
  std::__shared_weak_count *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  _BYTE v57[28];
  _BYTE v58[64];
  int v59;
  _OWORD v60[2];
  _BYTE v61[64];
  int v62;
  char v63;
  char v64;
  uint64_t *v65;

  v9 = *(unsigned __int8 *)(a2 + 80);
  if (*(_BYTE *)(a2 + 80))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 72);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      *(_OWORD *)v46 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)&v46[16] = *(_OWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v44 = v10;
      v45 = v11;
      v48 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v50[0] = &off_24EC1F8C8;
      v10 = v44;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = *(_QWORD *)&v46[12];
      v22 = *(_DWORD *)&v46[28];
      v23 = *(_QWORD *)v46;
      v24 = v48;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v45 = 0;
      *(_OWORD *)v47 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)&v47[16] = *(_OWORD *)(a2 + 40);
      v49 = *(_WORD *)(a2 + 72);
      v50[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = *(_QWORD *)&v47[12];
      v22 = *(_DWORD *)&v47[28];
      v23 = *(_QWORD *)v47;
      v24 = v49;
    }
    v50[1] = v10;
    v51 = v11;
    v52 = v21;
    v53 = v22;
    v54 = v23;
    v55 = 25;
    v56 = v24;
    if (v11)
    {
      v28 = (unint64_t *)&v11->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v57, (uint64_t)v50, 0, a4, a5, a6, a7, a8);
    v60[0] = *(_OWORD *)v57;
    *(_OWORD *)((char *)v60 + 12) = *(_OWORD *)&v57[12];
    v61[0] = 0;
    v62 = -1;
    v31 = v59;
    if (v59 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC28BA8[v59])(&v64, v61, v58);
      v62 = v31;
    }
    v63 = 1;
    v32 = a1[3];
    if (*(_BYTE *)(v32 + 40))
    {
      v65 = (uint64_t *)(v32 + 16);
      sub_224559C04(&v65, 1);
    }
    else
    {
      LOBYTE(v65) = 1;
      std::ostream::write();
    }
    v33 = a1[3];
    if (*(_BYTE *)(v33 + 40))
    {
      v65 = (uint64_t *)(v33 + 16);
      sub_22455A7EC(&v65, 2u);
    }
    else
    {
      sub_22455AA60((uint64_t)&v65, v33 + 8);
    }
    sub_224555278(a1[3]);
    sub_22319F5F8(a1, (uint64_t)v60);
    v34 = a1[3];
    v35 = *(_QWORD *)(*(_QWORD *)(v34 + 88) - 8);
    sub_224554D6C((uint64_t *)(v34 + 48), *(_QWORD *)(v34 + 16) - v35 - 9);
    v36 = *(_QWORD *)(v34 + 48);
    if (v36)
      memmove((void *)(*(_QWORD *)(v34 + 24) + v35), *(const void **)(v34 + 56), v36);
    *(_QWORD *)(v34 + 48) = 0;
    v37 = *(_QWORD *)(v34 + 80);
    v38 = *(_QWORD *)(v34 + 88) - 8;
    *(_QWORD *)(v34 + 88) = v38;
    if (v37 == v38)
    {
      std::ostream::write();
      if (*(_BYTE *)(v34 + 40))
      {
        free(*(void **)(v34 + 24));
        *(_BYTE *)(v34 + 40) = 0;
      }
    }
  }
  else
  {
    LOBYTE(v60[0]) = 0;
    v63 = 0;
    v27 = a1[3];
    if (*(_BYTE *)(v27 + 40))
    {
      *(_QWORD *)v57 = v27 + 16;
      sub_224559C04((uint64_t **)v57, 0);
    }
    else
    {
      v57[0] = 0;
      std::ostream::write();
    }
  }
  if (v63)
  {
    if (v62 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_24EC28B98[v62])(&v65, v61);
    v62 = -1;
  }
  if (v9)
  {
    if (v59 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_24EC28B98[v59])(&v65, v58);
    v59 = -1;
    v39 = v51;
    if (v51)
    {
      v40 = (unint64_t *)&v51->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (v45)
    {
      v42 = (unint64_t *)&v45->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
}

void sub_2232CDA6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2232C17E0(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_2232CDA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v29 = *(unsigned int *)(v27 - 80);
  if ((_DWORD)v29 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC28B98[v29])(v27 - 56, v26);
  *(_DWORD *)(v27 - 80) = -1;
  sub_22319A588((uint64_t)&a26);
  sub_22319A5E0((uint64_t)&a19);
  sub_2232CDB08((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2232CDB08(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232CDB70(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232CDBD8()
{
  return 25;
}

uint64_t sub_2232CDBE0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2232CDBE8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2232CDBFC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t **sub_2232CDC80(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **result;
  char v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  char v23;

  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    v22 = (uint64_t *)(v6 + 16);
    sub_22455B784((uint64_t)&v23, &v22, (_BYTE *)a2);
    v7 = (_BYTE *)(a2 + 1);
    v8 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v8 + 40))
      goto LABEL_3;
  }
  else
  {
    if (*(_BYTE *)a2)
      v14 = -61;
    else
      v14 = -62;
    LOBYTE(v22) = v14;
    std::ostream::write();
    v7 = (_BYTE *)(a2 + 1);
    v8 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
LABEL_3:
      v22 = (uint64_t *)(v8 + 16);
      sub_22455B784((uint64_t)&v23, &v22, v7);
      v9 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v9 + 40))
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  if (*v7)
    v15 = -61;
  else
    v15 = -62;
  LOBYTE(v22) = v15;
  std::ostream::write();
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
LABEL_4:
    v22 = (uint64_t *)(v9 + 16);
    sub_22455A2D4(&v22, *(_DWORD *)(a2 + 4));
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v11 + 40))
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  sub_22455A6F0();
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v11 + 40))
  {
LABEL_5:
    v22 = (uint64_t *)(v11 + 16);
    sub_22455AB50(&v22, v10);
    v12 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v12 + 40))
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  sub_22455B08C();
  v12 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v12 + 40))
  {
LABEL_6:
    v22 = (uint64_t *)(v12 + 16);
    result = (uint64_t **)sub_22455A2D4(&v22, *(_DWORD *)(a2 + 16));
    if (a3 < 2)
      return result;
    goto LABEL_19;
  }
LABEL_18:
  result = (uint64_t **)sub_22455A6F0();
  if (a3 < 2)
    return result;
LABEL_19:
  v16 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v16 + 40))
  {
    v22 = (uint64_t *)(v16 + 16);
    sub_22455A7EC(&v22, 2u);
    result = (uint64_t **)sub_2232CDF68(a1, (char **)(a2 + 24), 2u);
    if (a3 == 2)
      return result;
  }
  else
  {
    sub_22455AA60((uint64_t)&v22, v16 + 8);
    result = (uint64_t **)sub_2232CDF68(a1, (char **)(a2 + 24), 2u);
    if (a3 == 2)
      return result;
  }
  v17 = *(char *)(a2 + 192);
  v18 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v18 + 40))
  {
    v22 = (uint64_t *)(v18 + 16);
    result = (uint64_t **)sub_224559C04(&v22, v17);
    if (a3 < 4)
      return result;
  }
  else if (v17 < 0)
  {
    LOBYTE(v22) = -52;
    BYTE1(v22) = v17;
    result = (uint64_t **)std::ostream::write();
    if (a3 < 4)
      return result;
  }
  else
  {
    LOBYTE(v22) = *(_BYTE *)(a2 + 192);
    result = (uint64_t **)std::ostream::write();
    if (a3 < 4)
      return result;
  }
  v19 = (_BYTE *)(a2 + 2);
  v20 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v20 + 40))
  {
    v22 = (uint64_t *)(v20 + 16);
    return sub_22455B784((uint64_t)&v23, &v22, v19);
  }
  else
  {
    if (*v19)
      v21 = -61;
    else
      v21 = -62;
    LOBYTE(v22) = v21;
    return (uint64_t **)std::ostream::write();
  }
}

uint64_t sub_2232CDF68(uint64_t a1, char **a2, unsigned int a3)
{
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t i;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unsigned int v37;
  uint64_t v38;
  size_t v39;
  size_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t j;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t result;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t k;
  int v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t m;
  int v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  unsigned int v89;
  uint64_t v90;
  size_t v91;
  size_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t n;
  int v99;
  std::bad_alloc *exception;
  std::bad_alloc *v101;
  uint64_t *v103;

  v5 = (a2[1] - *a2) >> 4;
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    v103 = (uint64_t *)(v6 + 16);
    sub_22455B1CC(&v103, v5);
    v7 = *a2;
    v8 = a2[1];
    if (v8 == *a2)
      goto LABEL_14;
  }
  else
  {
    sub_22455B4D4();
    v7 = *a2;
    v8 = a2[1];
    if (v8 == *a2)
      goto LABEL_14;
  }
  do
  {
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v9 + 40))
    {
      v103 = (uint64_t *)(v9 + 16);
      sub_224559C04(&v103, *v7);
      sub_224559C04(&v103, v7[1]);
      sub_224559C04(&v103, v7[2]);
      sub_224559C04(&v103, v7[3]);
      sub_224559C04(&v103, v7[4]);
      sub_224559C04(&v103, v7[5]);
      sub_224559C04(&v103, v7[6]);
      sub_224559C04(&v103, v7[7]);
      sub_224559C04(&v103, v7[8]);
      sub_224559C04(&v103, v7[9]);
      sub_224559C04(&v103, v7[10]);
      sub_224559C04(&v103, v7[11]);
      sub_224559C04(&v103, v7[12]);
      sub_224559C04(&v103, v7[13]);
      sub_224559C04(&v103, v7[14]);
      sub_224559C04(&v103, v7[15]);
    }
    else
    {
      for (i = 0; i != 16; ++i)
      {
        while (1)
        {
          v11 = v7[i];
          if ((v11 & 0x80000000) == 0)
            break;
          LOBYTE(v103) = -52;
          BYTE1(v103) = v11;
          std::ostream::write();
          if (++i == 16)
            goto LABEL_7;
        }
        LOBYTE(v103) = v7[i];
        std::ostream::write();
      }
    }
LABEL_7:
    v7 += 16;
  }
  while (v7 != v8);
LABEL_14:
  v12 = (a2[4] - a2[3]) >> 6;
  v13 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v13 + 40))
  {
    v103 = (uint64_t *)(v13 + 16);
    sub_22455B1CC(&v103, v12);
    v14 = (unsigned int *)a2[3];
    v15 = (unsigned int *)a2[4];
    if (v15 == v14)
      goto LABEL_36;
  }
  else
  {
    sub_22455B4D4();
    v14 = (unsigned int *)a2[3];
    v15 = (unsigned int *)a2[4];
    if (v15 == v14)
      goto LABEL_36;
  }
  do
  {
    v32 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v32 + 40))
    {
      v33 = 0;
      v34 = *(_QWORD *)(v32 + 16);
      do
      {
        v37 = v14[v33];
        v38 = *(_QWORD *)(v32 + 32);
        if ((unint64_t)(v38 - v34) >= 5)
        {
          v35 = *(char **)(v32 + 24);
        }
        else
        {
          if (v38)
            v39 = 2 * v38;
          else
            v39 = 0x2000;
          v40 = v34 + 5;
          while (v39 < v40)
          {
            v41 = (uint64_t)v39 <= 0;
            v39 *= 2;
            if (v41)
            {
              v39 = v40;
              break;
            }
          }
          v35 = (char *)malloc_type_realloc(*(void **)(v32 + 24), v39, 0xAD6A59EEuLL);
          if (!v35)
          {
LABEL_112:
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v101 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v101, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v32 + 24) = v35;
          *(_QWORD *)(v32 + 32) = v39;
          v34 = *(_QWORD *)(v32 + 16);
        }
        v36 = &v35[v34];
        *v36 = -54;
        *(_DWORD *)(v36 + 1) = bswap32(v37);
        v34 = *(_QWORD *)(v32 + 16) + 5;
        *(_QWORD *)(v32 + 16) = v34;
        ++v33;
      }
      while (v33 != 16);
    }
    else
    {
      v16 = *v14;
      LOBYTE(v103) = -54;
      *(_DWORD *)((char *)&v103 + 1) = bswap32(v16);
      std::ostream::write();
      v17 = v14[1];
      LOBYTE(v103) = -54;
      *(_DWORD *)((char *)&v103 + 1) = bswap32(v17);
      std::ostream::write();
      v18 = v14[2];
      LOBYTE(v103) = -54;
      *(_DWORD *)((char *)&v103 + 1) = bswap32(v18);
      std::ostream::write();
      v19 = v14[3];
      LOBYTE(v103) = -54;
      *(_DWORD *)((char *)&v103 + 1) = bswap32(v19);
      std::ostream::write();
      v20 = v14[4];
      LOBYTE(v103) = -54;
      *(_DWORD *)((char *)&v103 + 1) = bswap32(v20);
      std::ostream::write();
      v21 = v14[5];
      LOBYTE(v103) = -54;
      *(_DWORD *)((char *)&v103 + 1) = bswap32(v21);
      std::ostream::write();
      v22 = v14[6];
      LOBYTE(v103) = -54;
      *(_DWORD *)((char *)&v103 + 1) = bswap32(v22);
      std::ostream::write();
      v23 = v14[7];
      LOBYTE(v103) = -54;
      *(_DWORD *)((char *)&v103 + 1) = bswap32(v23);
      std::ostream::write();
      v24 = v14[8];
      LOBYTE(v103) = -54;
      *(_DWORD *)((char *)&v103 + 1) = bswap32(v24);
      std::ostream::write();
      v25 = v14[9];
      LOBYTE(v103) = -54;
      *(_DWORD *)((char *)&v103 + 1) = bswap32(v25);
      std::ostream::write();
      v26 = v14[10];
      LOBYTE(v103) = -54;
      *(_DWORD *)((char *)&v103 + 1) = bswap32(v26);
      std::ostream::write();
      v27 = v14[11];
      LOBYTE(v103) = -54;
      *(_DWORD *)((char *)&v103 + 1) = bswap32(v27);
      std::ostream::write();
      v28 = v14[12];
      LOBYTE(v103) = -54;
      *(_DWORD *)((char *)&v103 + 1) = bswap32(v28);
      std::ostream::write();
      v29 = v14[13];
      LOBYTE(v103) = -54;
      *(_DWORD *)((char *)&v103 + 1) = bswap32(v29);
      std::ostream::write();
      v30 = v14[14];
      LOBYTE(v103) = -54;
      *(_DWORD *)((char *)&v103 + 1) = bswap32(v30);
      std::ostream::write();
      v31 = v14[15];
      LOBYTE(v103) = -54;
      *(_DWORD *)((char *)&v103 + 1) = bswap32(v31);
      std::ostream::write();
    }
    v14 += 16;
  }
  while (v14 != v15);
LABEL_36:
  v42 = (a2[7] - a2[6]) >> 4;
  v43 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v43 + 40))
  {
    v103 = (uint64_t *)(v43 + 16);
    sub_22455B1CC(&v103, v42);
    v44 = a2[6];
    v45 = a2[7];
    if (v45 == v44)
      goto LABEL_49;
  }
  else
  {
    sub_22455B4D4();
    v44 = a2[6];
    v45 = a2[7];
    if (v45 == v44)
      goto LABEL_49;
  }
  do
  {
    v46 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v46 + 40))
    {
      v103 = (uint64_t *)(v46 + 16);
      sub_224559C04(&v103, *v44);
      sub_224559C04(&v103, v44[1]);
      sub_224559C04(&v103, v44[2]);
      sub_224559C04(&v103, v44[3]);
      sub_224559C04(&v103, v44[4]);
      sub_224559C04(&v103, v44[5]);
      sub_224559C04(&v103, v44[6]);
      sub_224559C04(&v103, v44[7]);
      sub_224559C04(&v103, v44[8]);
      sub_224559C04(&v103, v44[9]);
      sub_224559C04(&v103, v44[10]);
      sub_224559C04(&v103, v44[11]);
      sub_224559C04(&v103, v44[12]);
      sub_224559C04(&v103, v44[13]);
      sub_224559C04(&v103, v44[14]);
      sub_224559C04(&v103, v44[15]);
    }
    else
    {
      for (j = 0; j != 16; ++j)
      {
        while (1)
        {
          v48 = v44[j];
          if ((v48 & 0x80000000) == 0)
            break;
          LOBYTE(v103) = -52;
          BYTE1(v103) = v48;
          std::ostream::write();
          if (++j == 16)
            goto LABEL_42;
        }
        LOBYTE(v103) = v44[j];
        std::ostream::write();
      }
    }
LABEL_42:
    v44 += 16;
  }
  while (v44 != v45);
LABEL_49:
  v49 = (a2[10] - a2[9]) >> 4;
  v50 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v50 + 40))
  {
    v103 = (uint64_t *)(v50 + 16);
    result = (uint64_t)sub_22455B1CC(&v103, v49);
    v52 = a2[9];
    v53 = a2[10];
    if (v53 == v52)
      goto LABEL_62;
  }
  else
  {
    result = sub_22455B4D4();
    v52 = a2[9];
    v53 = a2[10];
    if (v53 == v52)
      goto LABEL_62;
  }
  do
  {
    v54 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v54 + 40))
    {
      v103 = (uint64_t *)(v54 + 16);
      sub_224559C04(&v103, *v52);
      sub_224559C04(&v103, v52[1]);
      sub_224559C04(&v103, v52[2]);
      sub_224559C04(&v103, v52[3]);
      sub_224559C04(&v103, v52[4]);
      sub_224559C04(&v103, v52[5]);
      sub_224559C04(&v103, v52[6]);
      sub_224559C04(&v103, v52[7]);
      sub_224559C04(&v103, v52[8]);
      sub_224559C04(&v103, v52[9]);
      sub_224559C04(&v103, v52[10]);
      sub_224559C04(&v103, v52[11]);
      sub_224559C04(&v103, v52[12]);
      sub_224559C04(&v103, v52[13]);
      sub_224559C04(&v103, v52[14]);
      result = (uint64_t)sub_224559C04(&v103, v52[15]);
    }
    else
    {
      for (k = 0; k != 16; ++k)
      {
        while (1)
        {
          v56 = v52[k];
          if ((v56 & 0x80000000) == 0)
            break;
          LOBYTE(v103) = -52;
          BYTE1(v103) = v56;
          result = std::ostream::write();
          if (++k == 16)
            goto LABEL_55;
        }
        LOBYTE(v103) = v52[k];
        result = std::ostream::write();
      }
    }
LABEL_55:
    v52 += 16;
  }
  while (v52 != v53);
LABEL_62:
  if (a3 < 2)
    return result;
  v57 = (a2[13] - a2[12]) >> 4;
  v58 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v58 + 40))
  {
    v103 = (uint64_t *)(v58 + 16);
    sub_22455B1CC(&v103, v57);
    v59 = a2[12];
    v60 = a2[13];
    if (v60 == v59)
      goto LABEL_76;
  }
  else
  {
    sub_22455B4D4();
    v59 = a2[12];
    v60 = a2[13];
    if (v60 == v59)
      goto LABEL_76;
  }
  do
  {
    v61 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v61 + 40))
    {
      v103 = (uint64_t *)(v61 + 16);
      sub_224559C04(&v103, *v59);
      sub_224559C04(&v103, v59[1]);
      sub_224559C04(&v103, v59[2]);
      sub_224559C04(&v103, v59[3]);
      sub_224559C04(&v103, v59[4]);
      sub_224559C04(&v103, v59[5]);
      sub_224559C04(&v103, v59[6]);
      sub_224559C04(&v103, v59[7]);
      sub_224559C04(&v103, v59[8]);
      sub_224559C04(&v103, v59[9]);
      sub_224559C04(&v103, v59[10]);
      sub_224559C04(&v103, v59[11]);
      sub_224559C04(&v103, v59[12]);
      sub_224559C04(&v103, v59[13]);
      sub_224559C04(&v103, v59[14]);
      sub_224559C04(&v103, v59[15]);
    }
    else
    {
      for (m = 0; m != 16; ++m)
      {
        while (1)
        {
          v63 = v59[m];
          if ((v63 & 0x80000000) == 0)
            break;
          LOBYTE(v103) = -52;
          BYTE1(v103) = v63;
          std::ostream::write();
          if (++m == 16)
            goto LABEL_69;
        }
        LOBYTE(v103) = v59[m];
        std::ostream::write();
      }
    }
LABEL_69:
    v59 += 16;
  }
  while (v59 != v60);
LABEL_76:
  v64 = (a2[16] - a2[15]) >> 6;
  v65 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v65 + 40))
  {
    v103 = (uint64_t *)(v65 + 16);
    sub_22455B1CC(&v103, v64);
    v66 = (unsigned int *)a2[15];
    v67 = (unsigned int *)a2[16];
    if (v67 == v66)
      goto LABEL_98;
  }
  else
  {
    sub_22455B4D4();
    v66 = (unsigned int *)a2[15];
    v67 = (unsigned int *)a2[16];
    if (v67 == v66)
      goto LABEL_98;
  }
  do
  {
    v84 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v84 + 40))
    {
      v85 = 0;
      v86 = *(_QWORD *)(v84 + 16);
      while (1)
      {
        v89 = v66[v85];
        v90 = *(_QWORD *)(v84 + 32);
        if ((unint64_t)(v90 - v86) >= 5)
        {
          v87 = *(char **)(v84 + 24);
        }
        else
        {
          if (v90)
            v91 = 2 * v90;
          else
            v91 = 0x2000;
          v92 = v86 + 5;
          while (v91 < v92)
          {
            v41 = (uint64_t)v91 <= 0;
            v91 *= 2;
            if (v41)
            {
              v91 = v92;
              break;
            }
          }
          v87 = (char *)malloc_type_realloc(*(void **)(v84 + 24), v91, 0xAD6A59EEuLL);
          if (!v87)
            goto LABEL_112;
          *(_QWORD *)(v84 + 24) = v87;
          *(_QWORD *)(v84 + 32) = v91;
          v86 = *(_QWORD *)(v84 + 16);
        }
        v88 = &v87[v86];
        *v88 = -54;
        *(_DWORD *)(v88 + 1) = bswap32(v89);
        v86 = *(_QWORD *)(v84 + 16) + 5;
        *(_QWORD *)(v84 + 16) = v86;
        if (++v85 == 16)
          goto LABEL_82;
      }
    }
    v68 = *v66;
    LOBYTE(v103) = -54;
    *(_DWORD *)((char *)&v103 + 1) = bswap32(v68);
    std::ostream::write();
    v69 = v66[1];
    LOBYTE(v103) = -54;
    *(_DWORD *)((char *)&v103 + 1) = bswap32(v69);
    std::ostream::write();
    v70 = v66[2];
    LOBYTE(v103) = -54;
    *(_DWORD *)((char *)&v103 + 1) = bswap32(v70);
    std::ostream::write();
    v71 = v66[3];
    LOBYTE(v103) = -54;
    *(_DWORD *)((char *)&v103 + 1) = bswap32(v71);
    std::ostream::write();
    v72 = v66[4];
    LOBYTE(v103) = -54;
    *(_DWORD *)((char *)&v103 + 1) = bswap32(v72);
    std::ostream::write();
    v73 = v66[5];
    LOBYTE(v103) = -54;
    *(_DWORD *)((char *)&v103 + 1) = bswap32(v73);
    std::ostream::write();
    v74 = v66[6];
    LOBYTE(v103) = -54;
    *(_DWORD *)((char *)&v103 + 1) = bswap32(v74);
    std::ostream::write();
    v75 = v66[7];
    LOBYTE(v103) = -54;
    *(_DWORD *)((char *)&v103 + 1) = bswap32(v75);
    std::ostream::write();
    v76 = v66[8];
    LOBYTE(v103) = -54;
    *(_DWORD *)((char *)&v103 + 1) = bswap32(v76);
    std::ostream::write();
    v77 = v66[9];
    LOBYTE(v103) = -54;
    *(_DWORD *)((char *)&v103 + 1) = bswap32(v77);
    std::ostream::write();
    v78 = v66[10];
    LOBYTE(v103) = -54;
    *(_DWORD *)((char *)&v103 + 1) = bswap32(v78);
    std::ostream::write();
    v79 = v66[11];
    LOBYTE(v103) = -54;
    *(_DWORD *)((char *)&v103 + 1) = bswap32(v79);
    std::ostream::write();
    v80 = v66[12];
    LOBYTE(v103) = -54;
    *(_DWORD *)((char *)&v103 + 1) = bswap32(v80);
    std::ostream::write();
    v81 = v66[13];
    LOBYTE(v103) = -54;
    *(_DWORD *)((char *)&v103 + 1) = bswap32(v81);
    std::ostream::write();
    v82 = v66[14];
    LOBYTE(v103) = -54;
    *(_DWORD *)((char *)&v103 + 1) = bswap32(v82);
    std::ostream::write();
    v83 = v66[15];
    LOBYTE(v103) = -54;
    *(_DWORD *)((char *)&v103 + 1) = bswap32(v83);
    std::ostream::write();
LABEL_82:
    v66 += 16;
  }
  while (v66 != v67);
LABEL_98:
  v93 = (a2[19] - a2[18]) >> 4;
  v94 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v94 + 40))
  {
    v103 = (uint64_t *)(v94 + 16);
    result = (uint64_t)sub_22455B1CC(&v103, v93);
    v96 = a2[18];
    v95 = a2[19];
    if (v95 == v96)
      return result;
  }
  else
  {
    result = sub_22455B4D4();
    v96 = a2[18];
    v95 = a2[19];
    if (v95 == v96)
      return result;
  }
  do
  {
    v97 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v97 + 40))
    {
      v103 = (uint64_t *)(v97 + 16);
      sub_224559C04(&v103, *v96);
      sub_224559C04(&v103, v96[1]);
      sub_224559C04(&v103, v96[2]);
      sub_224559C04(&v103, v96[3]);
      sub_224559C04(&v103, v96[4]);
      sub_224559C04(&v103, v96[5]);
      sub_224559C04(&v103, v96[6]);
      sub_224559C04(&v103, v96[7]);
      sub_224559C04(&v103, v96[8]);
      sub_224559C04(&v103, v96[9]);
      sub_224559C04(&v103, v96[10]);
      sub_224559C04(&v103, v96[11]);
      sub_224559C04(&v103, v96[12]);
      sub_224559C04(&v103, v96[13]);
      sub_224559C04(&v103, v96[14]);
      result = (uint64_t)sub_224559C04(&v103, v96[15]);
    }
    else
    {
      for (n = 0; n != 16; ++n)
      {
        while (1)
        {
          v99 = v96[n];
          if ((v99 & 0x80000000) == 0)
            break;
          LOBYTE(v103) = -52;
          BYTE1(v103) = v99;
          result = std::ostream::write();
          if (++n == 16)
            goto LABEL_104;
        }
        LOBYTE(v103) = v96[n];
        result = std::ostream::write();
      }
    }
LABEL_104:
    v96 += 16;
  }
  while (v96 != v95);
  return result;
}

char *sub_2232CEDB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  uint64_t *v42;

  v2 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(a2 + 128))
  {
    if (*(_BYTE *)(v2 + 40))
    {
      v42 = (uint64_t *)(v2 + 16);
      sub_224559C04(&v42, 1);
      v5 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v5 + 40))
        goto LABEL_4;
    }
    else
    {
      LOBYTE(v42) = 1;
      std::ostream::write();
      v5 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v5 + 40))
      {
LABEL_4:
        v42 = (uint64_t *)(v5 + 16);
        sub_22455A7EC(&v42, 2u);
        v6 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v6 + 40))
          goto LABEL_5;
        goto LABEL_11;
      }
    }
    sub_22455AA60((uint64_t)&v42, v5 + 8);
    v6 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
LABEL_5:
      v42 = (uint64_t *)(v6 + 16);
      sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)a2);
      sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 4));
      sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 8));
      sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 12));
      sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 16));
      sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 20));
      sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 24));
      sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 28));
      sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 32));
      sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 36));
      sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 40));
      sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 44));
      sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 48));
      sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 52));
      sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 56));
      sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 60));
      v7 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v7 + 40))
      {
LABEL_6:
        v42 = (uint64_t *)(v7 + 16);
        sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 64));
        sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 68));
        sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 72));
        sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 76));
        sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 80));
        sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 84));
        sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 88));
        sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 92));
        sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 96));
        sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 100));
        sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 104));
        sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 108));
        sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 112));
        sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 116));
        sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 120));
        return (char *)sub_22455B5CC((uint64_t)&v41, &v42, (unsigned int *)(a2 + 124));
      }
      goto LABEL_12;
    }
LABEL_11:
    v9 = *(_DWORD *)a2;
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v9);
    std::ostream::write();
    v10 = *(_DWORD *)(a2 + 4);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v10);
    std::ostream::write();
    v11 = *(_DWORD *)(a2 + 8);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v11);
    std::ostream::write();
    v12 = *(_DWORD *)(a2 + 12);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v12);
    std::ostream::write();
    v13 = *(_DWORD *)(a2 + 16);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v13);
    std::ostream::write();
    v14 = *(_DWORD *)(a2 + 20);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v14);
    std::ostream::write();
    v15 = *(_DWORD *)(a2 + 24);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v15);
    std::ostream::write();
    v16 = *(_DWORD *)(a2 + 28);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v16);
    std::ostream::write();
    v17 = *(_DWORD *)(a2 + 32);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v17);
    std::ostream::write();
    v18 = *(_DWORD *)(a2 + 36);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v18);
    std::ostream::write();
    v19 = *(_DWORD *)(a2 + 40);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v19);
    std::ostream::write();
    v20 = *(_DWORD *)(a2 + 44);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v20);
    std::ostream::write();
    v21 = *(_DWORD *)(a2 + 48);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v21);
    std::ostream::write();
    v22 = *(_DWORD *)(a2 + 52);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v22);
    std::ostream::write();
    v23 = *(_DWORD *)(a2 + 56);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v23);
    std::ostream::write();
    v24 = *(_DWORD *)(a2 + 60);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v24);
    std::ostream::write();
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_6;
LABEL_12:
    v25 = *(_DWORD *)(a2 + 64);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v25);
    std::ostream::write();
    v26 = *(_DWORD *)(a2 + 68);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v26);
    std::ostream::write();
    v27 = *(_DWORD *)(a2 + 72);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v27);
    std::ostream::write();
    v28 = *(_DWORD *)(a2 + 76);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v28);
    std::ostream::write();
    v29 = *(_DWORD *)(a2 + 80);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v29);
    std::ostream::write();
    v30 = *(_DWORD *)(a2 + 84);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v30);
    std::ostream::write();
    v31 = *(_DWORD *)(a2 + 88);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v31);
    std::ostream::write();
    v32 = *(_DWORD *)(a2 + 92);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v32);
    std::ostream::write();
    v33 = *(_DWORD *)(a2 + 96);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v33);
    std::ostream::write();
    v34 = *(_DWORD *)(a2 + 100);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v34);
    std::ostream::write();
    v35 = *(_DWORD *)(a2 + 104);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v35);
    std::ostream::write();
    v36 = *(_DWORD *)(a2 + 108);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v36);
    std::ostream::write();
    v37 = *(_DWORD *)(a2 + 112);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v37);
    std::ostream::write();
    v38 = *(_DWORD *)(a2 + 116);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v38);
    std::ostream::write();
    v39 = *(_DWORD *)(a2 + 120);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v39);
    std::ostream::write();
    v40 = *(_DWORD *)(a2 + 124);
    LOBYTE(v42) = -54;
    *(_DWORD *)((char *)&v42 + 1) = bswap32(v40);
    return (char *)std::ostream::write();
  }
  if (!*(_BYTE *)(v2 + 40))
    return (char *)std::ostream::write();
  v42 = (uint64_t *)(v2 + 16);
  return sub_224559C04(&v42, 0);
}

char *sub_2232CF510(char *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  std::bad_alloc *exception;
  std::bad_alloc *v35;
  _BYTE v36[9];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (*a2)
  {
    v2 = (uint64_t)result;
    v3 = (unint64_t *)a2[1];
    v4 = &v3[38 * *a2];
    do
    {
      v5 = *(_QWORD *)(v2 + 24);
      if (*(_BYTE *)(v5 + 40))
      {
        *(_QWORD *)v36 = v5 + 16;
        sub_22455A7EC((uint64_t **)v36, 1u);
      }
      else
      {
        sub_22455AA60((uint64_t)v36, v5 + 8);
      }
      v6 = *v3;
      v7 = *(_QWORD *)(v2 + 24);
      if (*(_BYTE *)(v7 + 40))
      {
        *(_QWORD *)v36 = v7 + 16;
        sub_22455AB50((uint64_t **)v36, v6);
      }
      else
      {
        sub_22455B08C();
      }
      v8 = *(_QWORD *)(v2 + 24);
      if (*(_BYTE *)(v8 + 40))
      {
        v9 = v3 + 1;
        v10 = *(_QWORD *)(v8 + 16);
        do
        {
          v13 = *v9;
          v14 = *(_QWORD *)(v8 + 32);
          if ((unint64_t)(v14 - v10) >= 9)
          {
            v11 = *(char **)(v8 + 24);
          }
          else
          {
            if (v14)
              v15 = 2 * v14;
            else
              v15 = 0x2000;
            v16 = v10 + 9;
            while (v15 < v16)
            {
              v17 = (uint64_t)v15 <= 0;
              v15 *= 2;
              if (v17)
              {
                v15 = v16;
                break;
              }
            }
            v11 = (char *)malloc_type_realloc(*(void **)(v8 + 24), v15, 0xAD6A59EEuLL);
            if (!v11)
            {
              exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v35 = std::bad_alloc::bad_alloc(exception);
              __cxa_throw(v35, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v8 + 24) = v11;
            *(_QWORD *)(v8 + 32) = v15;
            v10 = *(_QWORD *)(v8 + 16);
          }
          v12 = &v11[v10];
          *v12 = -53;
          *(_QWORD *)(v12 + 1) = bswap64(v13);
          v10 = *(_QWORD *)(v8 + 16) + 9;
          *(_QWORD *)(v8 + 16) = v10;
          ++v9;
        }
        while (v9 != v3 + 17);
      }
      else
      {
        *(_QWORD *)&v36[1] = bswap64(v3[1]);
        v36[0] = -53;
        std::ostream::write();
        v18 = v3[2];
        v36[0] = -53;
        *(_QWORD *)&v36[1] = bswap64(v18);
        std::ostream::write();
        v19 = v3[3];
        v36[0] = -53;
        *(_QWORD *)&v36[1] = bswap64(v19);
        std::ostream::write();
        v20 = v3[4];
        v36[0] = -53;
        *(_QWORD *)&v36[1] = bswap64(v20);
        std::ostream::write();
        v21 = v3[5];
        v36[0] = -53;
        *(_QWORD *)&v36[1] = bswap64(v21);
        std::ostream::write();
        v22 = v3[6];
        v36[0] = -53;
        *(_QWORD *)&v36[1] = bswap64(v22);
        std::ostream::write();
        v23 = v3[7];
        v36[0] = -53;
        *(_QWORD *)&v36[1] = bswap64(v23);
        std::ostream::write();
        v24 = v3[8];
        v36[0] = -53;
        *(_QWORD *)&v36[1] = bswap64(v24);
        std::ostream::write();
        v25 = v3[9];
        v36[0] = -53;
        *(_QWORD *)&v36[1] = bswap64(v25);
        std::ostream::write();
        v26 = v3[10];
        v36[0] = -53;
        *(_QWORD *)&v36[1] = bswap64(v26);
        std::ostream::write();
        v27 = v3[11];
        v36[0] = -53;
        *(_QWORD *)&v36[1] = bswap64(v27);
        std::ostream::write();
        v28 = v3[12];
        v36[0] = -53;
        *(_QWORD *)&v36[1] = bswap64(v28);
        std::ostream::write();
        v29 = v3[13];
        v36[0] = -53;
        *(_QWORD *)&v36[1] = bswap64(v29);
        std::ostream::write();
        v30 = v3[14];
        v36[0] = -53;
        *(_QWORD *)&v36[1] = bswap64(v30);
        std::ostream::write();
        v31 = v3[15];
        v36[0] = -53;
        *(_QWORD *)&v36[1] = bswap64(v31);
        std::ostream::write();
        v32 = v3[16];
        v36[0] = -53;
        *(_QWORD *)&v36[1] = bswap64(v32);
        std::ostream::write();
      }
      v33 = *(_QWORD *)(v2 + 24);
      if (*(_BYTE *)(v33 + 40))
      {
        *(_QWORD *)v36 = v33 + 16;
        sub_22455A7EC((uint64_t **)v36, 2u);
      }
      else
      {
        sub_22455AA60((uint64_t)v36, v33 + 8);
      }
      sub_2232CF934(v2, (uint64_t)(v3 + 17), 2);
      result = sub_2232CEDB4(v2, (uint64_t)(v3 + 21));
      v3 += 38;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_2232CF934(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15[3];
  uint64_t *v16;

  if (a3 == 1)
  {
    memset(v15, 0, sizeof(v15));
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v5 + 40))
    {
      v16 = (uint64_t *)(v5 + 16);
      sub_22455A7EC(&v16, 1u);
    }
    else
    {
      sub_22455AA60((uint64_t)&v16, v5 + 8);
    }
    v6 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v16 = (uint64_t *)(v6 + 16);
      sub_22455B1CC(&v16, 0);
    }
    else
    {
      sub_22455B4D4();
    }
  }
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v15[0] = (uint64_t *)(v7 + 16);
    sub_22455A7EC(v15, 1u);
  }
  else
  {
    sub_22455AA60((uint64_t)v15, v7 + 8);
  }
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
    v15[0] = (uint64_t *)(v9 + 16);
    result = (uint64_t)sub_22455B1CC(v15, v8);
    v11 = *(uint64_t **)(a2 + 8);
    v12 = *(_QWORD *)(a2 + 16) - (_QWORD)v11;
    if (!v12)
      return result;
  }
  else
  {
    result = sub_22455B4D4();
    v11 = *(uint64_t **)(a2 + 8);
    v12 = *(_QWORD *)(a2 + 16) - (_QWORD)v11;
    if (!v12)
      return result;
  }
  v13 = 24 * (v12 / 24);
  do
  {
    while (1)
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v14 + 40))
        break;
      sub_22455AA60((uint64_t)v15, v14 + 8);
      result = (uint64_t)sub_2231A5C04(a1, v11);
      v11 += 3;
      v13 -= 24;
      if (!v13)
        return result;
    }
    v15[0] = (uint64_t *)(v14 + 16);
    sub_22455A7EC(v15, 1u);
    result = (uint64_t)sub_2231A5C04(a1, v11);
    v11 += 3;
    v13 -= 24;
  }
  while (v13);
  return result;
}

void sub_2232CFAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22317C838(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_2232CFAFC(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC289D8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t sub_2232CFBEC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 88);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232CFC54(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 88);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232CFCBC(uint64_t a1, uint64_t *a2, double a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 16) = xmmword_2245CBB34;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)algn_2245CBB44;
  *(_OWORD *)(a1 + 48) = xmmword_2245CBB54;
  *(_OWORD *)(a1 + 64) = unk_2245CBB64;
  v10 = (std::__shared_weak_count *)operator new(0x30uLL);
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC29190;
  v10[1].__shared_owners_ = 0;
  v10[1].__shared_weak_owners_ = 0;
  *(_QWORD *)(a1 + 80) = v10 + 1;
  *(_QWORD *)(a1 + 88) = v10;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 228) = 1;
  *(_QWORD *)a1 = &off_24EC29120;
  *(_QWORD *)(a1 + 8) = (uint64_t)(a3 * 1000000000.0);
  *(__n128 *)(a1 + 16) = a4;
  *(__n128 *)(a1 + 32) = a5;
  *(__n128 *)(a1 + 48) = a6;
  *(__n128 *)(a1 + 64) = a7;
  v12 = *a2;
  v11 = a2[1];
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v15 = *(std::__shared_weak_count **)(a1 + 88);
    *(_QWORD *)(a1 + 80) = v12;
    *(_QWORD *)(a1 + 88) = v11;
    if (!v15)
      return a1;
  }
  else
  {
    v15 = v10;
    *(_QWORD *)(a1 + 80) = v12;
    *(_QWORD *)(a1 + 88) = 0;
  }
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  return a1;
}

void sub_2232CFE24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC29190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2232CFE34(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC29190;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2232CFE64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 == v1)
    {
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v4);
    }
    else
    {
      do
      {
        if (*(_QWORD *)(v3 - 104))
        {
          v5 = *(void **)(v3 - 120);
          if ((void *)(v3 - 96) != v5)
            operator delete(v5);
        }
        v3 -= 120;
      }
      while (v3 != v1);
      v6 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v6);
    }
  }
}

void sub_2232CFF00()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232CFF14(uint64_t a1)
{
  sub_22455C510(a1 + 8);
  return a1;
}

void sub_2232CFF3C(uint64_t a1)
{
  sub_22455C510(a1 + 8);
  JUMPOUT(0x227684CE8);
}

void sub_2232CFF78()
{
  JUMPOUT(0x227684CE8);
}

BOOL sub_2232CFF8C(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a3 <= 0.0)
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245C6420;
    strcpy((char *)__p, "Voxel size is negative or null");
    v5 = (char *)operator new(0x68uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/MeshingConfig.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 33;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  else
  {
    if (*(_BYTE *)(a1 + 56))
      *(float *)(a1 + 16) = a3;
    if (*(_BYTE *)(a1 + 92))
      *(float *)(a1 + 72) = a3;
  }
  return a3 > 0.0;
}

void sub_2232D0124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2232D0160(uint64_t a1, int __e, CFTypeRef *a3)
{
  unsigned int v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  v3 = __e - 12;
  if ((__e - 12) >= 0x15)
  {
    __p = operator new(0x38uLL);
    v12 = xmmword_2245C4630;
    strcpy((char *)__p, "Buckets order of magnitude is not in the range [12,32]");
    v5 = (char *)operator new(0x68uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/MeshingConfig.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 33;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  else
  {
    *(_DWORD *)(a1 + 96) = ldexp(1.0, __e);
  }
  return v3 < 0x15;
}

void sub_2232D02F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2232D0334(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a3 < 1.7321)
  {
    __p = operator new(0x30uLL);
    v13 = xmmword_2245C4530;
    strcpy((char *)__p, "Truncation factor is smaller than sqrt(3)");
    v6 = (char *)operator new(0x68uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/MeshingConfig.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 33;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if (SHIBYTE(v13) < 0)
      operator delete(__p);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 56)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/MeshingConfig.cpp", 71, (uint64_t)"HasMapper(recon::MeshingMapperType::Volumetric)", 47, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    *(float *)(a1 + 24) = a3;
  }
  return a3 >= 1.7321;
}

void sub_2232D0514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2232D0554()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232D0568(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  a1[7] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[4] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[4] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[1] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[3];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_2232D0670(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  a1[7] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[4] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[4] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[1] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[3];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  JUMPOUT(0x227684CE8);
}

void sub_2232D0774(uint64_t a1@<X0>, CFTypeRef *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char __p[23];
  char v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  std::error_condition v25;

  v5 = *(uint64_t **)(a1 + 16);
  if (v5)
  {
    v8 = *v5;
    v7 = (std::__shared_weak_count *)v5[1];
    if (!v7)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
      {
LABEL_8:
        v13 = *(_QWORD *)(a1 + 16);
        v12 = *(_QWORD *)(a1 + 24);
        *a3 = &off_24EC715B8;
        a3[1] = v13;
        a3[2] = v12;
        if (v12)
        {
          v14 = (unint64_t *)(v12 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        return;
      }
    }
    else
    {
LABEL_7:
      if (v8)
        goto LABEL_8;
    }
  }
  strcpy(__p, "PredictedDepth is NULL");
  v22 = 22;
  v16 = (char *)operator new(0x68uLL);
  strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/MonitoringResult.cpp");
  if (a2)
  {
    *(_QWORD *)&v25.__val_ = 22;
    v25.__cat_ = std::generic_category();
    sub_2245321DC(&v25, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v17 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v17;
    v18 = v24;
    if (v24)
    {
      v19 = (unint64_t *)&v24->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  operator delete(v16);
  if (v22 < 0)
    operator delete(*(void **)__p);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = &off_24EC715B8;
}

void sub_2232D0978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2232D09B4(uint64_t a1@<X0>, CFTypeRef *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char __p[19];
  char v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  std::error_condition v25;

  v5 = *(uint64_t **)(a1 + 40);
  if (v5)
  {
    v8 = *v5;
    v7 = (std::__shared_weak_count *)v5[1];
    if (!v7)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
      {
LABEL_8:
        v13 = *(_QWORD *)(a1 + 40);
        v12 = *(_QWORD *)(a1 + 48);
        *a3 = &off_24EC715B8;
        a3[1] = v13;
        a3[2] = v12;
        if (v12)
        {
          v14 = (unint64_t *)(v12 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        return;
      }
    }
    else
    {
LABEL_7:
      if (v8)
        goto LABEL_8;
    }
  }
  v22 = 18;
  strcpy(__p, "InputDepth is NULL");
  v16 = (char *)operator new(0x68uLL);
  strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/MonitoringResult.cpp");
  if (a2)
  {
    *(_QWORD *)&v25.__val_ = 22;
    v25.__cat_ = std::generic_category();
    sub_2245321DC(&v25, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v17 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v17;
    v18 = v24;
    if (v24)
    {
      v19 = (unint64_t *)&v24->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  operator delete(v16);
  if (v22 < 0)
    operator delete(*(void **)__p);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = &off_24EC715B8;
}

void sub_2232D0BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2232D0BF8(uint64_t a1@<X0>, CFTypeRef *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char __p[20];
  char v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  std::error_condition v25;

  v5 = *(uint64_t **)(a1 + 64);
  if (v5)
  {
    v8 = *v5;
    v7 = (std::__shared_weak_count *)v5[1];
    if (!v7)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
      {
LABEL_8:
        v13 = *(_QWORD *)(a1 + 64);
        v12 = *(_QWORD *)(a1 + 72);
        *a3 = &off_24EC715B8;
        a3[1] = v13;
        a3[2] = v12;
        if (v12)
        {
          v14 = (unint64_t *)(v12 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        return;
      }
    }
    else
    {
LABEL_7:
      if (v8)
        goto LABEL_8;
    }
  }
  v22 = 19;
  strcpy(__p, "InputWeight is NULL");
  v16 = (char *)operator new(0x68uLL);
  strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/MonitoringResult.cpp");
  if (a2)
  {
    *(_QWORD *)&v25.__val_ = 22;
    v25.__cat_ = std::generic_category();
    sub_2245321DC(&v25, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v17 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v17;
    v18 = v24;
    if (v24)
    {
      v19 = (unint64_t *)&v24->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  operator delete(v16);
  if (v22 < 0)
    operator delete(*(void **)__p);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = &off_24EC715B8;
}

void sub_2232D0E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232D0E40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 96);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_2232D0ED8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 96);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232D0F80(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = a1[5];
  if (v3)
  {
    v4 = a1[6];
    v5 = (void *)a1[5];
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 96);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 120;
      }
      while (v4 != v3);
      v5 = (void *)a1[5];
    }
    a1[6] = v3;
    operator delete(v5);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_2232D1038(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = a1[5];
  if (v3)
  {
    v4 = a1[6];
    v5 = (void *)a1[5];
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 96);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 120;
      }
      while (v4 != v3);
      v5 = (void *)a1[5];
    }
    a1[6] = v3;
    operator delete(v5);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232D1100@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  void **p_dst;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  size_t v18;
  char *v19;
  char *v20;
  void **v21;
  void **__dst;
  size_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  const void *v30;
  unint64_t v31;
  void *__p[2];
  __int128 v33;
  int v34;
  uint64_t v35[19];

  v4 = MEMORY[0x24BEDB870];
  v5 = MEMORY[0x24BEDB870] + 64;
  v6 = (uint64_t *)MEMORY[0x24BEDB800];
  v7 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v8 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v35[0] = MEMORY[0x24BEDB870] + 64;
  v26 = v7;
  *(uint64_t *)((char *)&v26 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v26 + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v9, &v27);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v26 = v4 + 24;
  v35[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x24BEDB848];
  v27 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v33 = 0u;
  v34 = 16;
  if ((sub_224000E28((uint64_t *)(a1 + 8), (uint64_t)&v26) & 1) == 0)
  {
    sub_2245286D0(0, 0, a2);
    goto LABEL_30;
  }
  if ((v34 & 0x10) != 0)
  {
    v13 = *((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1) < v31)
    {
      *((_QWORD *)&v33 + 1) = v31;
      v13 = v31;
    }
    v14 = v30;
    v11 = v13 - (_QWORD)v30;
    if (v13 - (unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_34;
  }
  else
  {
    if ((v34 & 8) == 0)
    {
      v11 = 0;
      HIBYTE(v25) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_16;
    }
    v14 = v28;
    v11 = v29 - (_QWORD)v28;
    if ((unint64_t)(v29 - (_QWORD)v28) >= 0x7FFFFFFFFFFFFFF8)
LABEL_34:
      sub_22316DBC0();
  }
  if (v11 >= 0x17)
  {
    v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v15 = v11 | 7;
    v16 = v15 + 1;
    p_dst = (void **)operator new(v15 + 1);
    v24 = v11;
    v25 = v16 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v25) = v11;
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_16;
  }
  memmove(p_dst, v14, v11);
LABEL_16:
  *((_BYTE *)p_dst + v11) = 0;
  v17 = SHIBYTE(v25);
  if (v25 >= 0)
    v18 = HIBYTE(v25);
  else
    v18 = v24;
  if (v18)
  {
    if ((v18 & 0x8000000000000000) != 0)
      sub_22316E078();
    v19 = (char *)operator new(v18);
    bzero(v19, v18);
    v20 = &v19[v18];
    if (v17 >= 0)
      v21 = (void **)&__dst;
    else
      v21 = __dst;
    memmove(v19, v21, v18);
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  sub_2245286D0((const UInt8 *)v19, v20 - v19, a2);
  if (v19)
    operator delete(v19);
  if (v17 < 0)
    operator delete(__dst);
LABEL_30:
  v26 = *v6;
  *(uint64_t *)((char *)&v26 + *(_QWORD *)(v26 - 24)) = v6[3];
  v27 = v10 + 16;
  if (SBYTE7(v33) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227684BE0](v35);
}

void sub_2232D13B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_2232BBE74((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232D13D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x227684BE0](v1);
  _Unwind_Resume(a1);
}

double sub_2232D144C(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (*(_DWORD *)(a1 + 32) > a2)
    return *(double *)(*(_QWORD *)(a1 + 8) + 24 * a2);
  __p = operator new(0x30uLL);
  v11 = xmmword_2245C4530;
  strcpy((char *)__p, "Invalid block index for an occupied block");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/OccupancyByProximityResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0.0;
}

void sub_2232D15FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float sub_2232D1638(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (*(_DWORD *)(a1 + 32) > a2)
    return *(float *)(*(_QWORD *)(a1 + 8) + 24 * a2 + 12);
  __p = operator new(0x30uLL);
  v11 = xmmword_2245C4530;
  strcpy((char *)__p, "Invalid block index for an occupied block");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/OccupancyByProximityResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0.0;
}

void sub_2232D17E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232D1820(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (*(_DWORD *)(a1 + 32) > a2)
    return *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 24 * a2 + 16);
  __p = operator new(0x30uLL);
  v11 = xmmword_2245C4530;
  strcpy((char *)__p, "Invalid block index for an occupied block");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/OccupancyByProximityResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 33;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 254;
}

void sub_2232D19CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232D1A08(uint64_t a1, unsigned int a2, int a3, CFTypeRef *a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p;
  __int128 v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (*(_DWORD *)(a1 + 32) <= a2)
  {
    __p = operator new(0x30uLL);
    v17 = xmmword_2245C4530;
    strcpy((char *)__p, "Invalid block index for an occupied block");
    v6 = (char *)operator new(0x78uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/OccupancyByProximityResult.cpp");
    if (a4)
    {
      *(_QWORD *)&v20.__val_ = 33;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v7;
      v8 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if (SHIBYTE(v17) < 0)
      goto LABEL_31;
    return 0;
  }
  if (a3 == 1)
    return (*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 24 * a2 + 20) >> 1) & 1;
  if (!a3)
    return *(_BYTE *)(*(_QWORD *)(a1 + 8) + 24 * a2 + 20) & 1;
  __p = operator new(0x30uLL);
  v17 = xmmword_2245C7A50;
  strcpy((char *)__p, "Invalid flag index for an occupied block");
  v11 = (char *)operator new(0x78uLL);
  strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/OccupancyByProximityResult.cpp");
  if (a4)
  {
    *(_QWORD *)&v20.__val_ = 33;
    v20.__cat_ = std::generic_category();
    sub_2245321DC(&v20, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v12 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v12;
    v13 = v19;
    if (v19)
    {
      v14 = (unint64_t *)&v19->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  operator delete(v11);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
    return 0;
LABEL_31:
  operator delete(__p);
  return 0;
}

void sub_2232D1D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232D1D5C(uint64_t a1, _QWORD *a2, CFTypeRef *a3)
{
  size_t v5;
  void **p_dst;
  int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  size_t v16;
  void **v17;
  unint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  unint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **__dst;
  size_t v32;
  int64_t v33;
  _QWORD v34[2];
  _QWORD v35[3];
  const void *v36;
  uint64_t v37;
  const void *v38;
  unint64_t v39;
  void *__p;
  char v41;
  unint64_t v42;
  int v43;
  uint64_t v44;

  sub_223195210((uint64_t)v34);
  if (*a3)
  {
    sub_2231813E8(v35, (uint64_t)"[]\n", 3);
    if ((v43 & 0x10) != 0)
    {
      v18 = v42;
      if (v42 < v39)
      {
        v42 = v39;
        v18 = v39;
      }
      v19 = v38;
      v5 = v18 - (_QWORD)v38;
      if (v18 - (unint64_t)v38 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_42;
    }
    else
    {
      if ((v43 & 8) == 0)
      {
        v5 = 0;
        HIBYTE(v33) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_29;
      }
      v19 = v36;
      v5 = v37 - (_QWORD)v36;
      if ((unint64_t)(v37 - (_QWORD)v36) > 0x7FFFFFFFFFFFFFF7)
LABEL_42:
        sub_22316DBC0();
    }
    if (v5 >= 0x17)
    {
      v20 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v20 = v5 | 7;
      v21 = v20 + 1;
      p_dst = (void **)operator new(v20 + 1);
      v32 = v5;
      v33 = v21 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v33) = v5;
      p_dst = (void **)&__dst;
      if (!v5)
        goto LABEL_29;
    }
    memmove(p_dst, v19, v5);
LABEL_29:
    *((_BYTE *)p_dst + v5) = 0;
    if (v33 >= 0)
      v22 = (void **)&__dst;
    else
      v22 = __dst;
    if (v33 >= 0)
      v23 = HIBYTE(v33);
    else
      v23 = v32;
    goto LABEL_53;
  }
  v7 = *(_DWORD *)(a1 + 32);
  sub_2231813E8(v35, (uint64_t)"[\n", 2);
  if (v7)
  {
    v8 = 0;
    v9 = v7 - 1;
    do
    {
      sub_2232D144C(a1, v8, a3);
      if (*a3)
        break;
      sub_2232D1638(a1, v8, a3);
      if (*a3)
        break;
      sub_2231813E8(v35, (uint64_t)"  {\n    \"center\": [ ", 20);
      v10 = (_QWORD *)std::ostream::operator<<();
      sub_2231813E8(v10, (uint64_t)", ", 2);
      v11 = (_QWORD *)std::ostream::operator<<();
      sub_2231813E8(v11, (uint64_t)", ", 2);
      v12 = (_QWORD *)std::ostream::operator<<();
      sub_2231813E8(v12, (uint64_t)" ],\n", 4);
      sub_2231813E8(v35, (uint64_t)"    \"width\": ", 13);
      v13 = (_QWORD *)std::ostream::operator<<();
      sub_2231813E8(v13, (uint64_t)"\n", 1);
      v14 = v8 >= v9 ? "  }\n" : "  },\n";
      v15 = v8 >= v9 ? 4 : 5;
      sub_2231813E8(v35, (uint64_t)v14, v15);
      ++v8;
    }
    while (v7 != v8);
  }
  sub_2231813E8(v35, (uint64_t)"]\n", 2);
  if ((v43 & 0x10) != 0)
  {
    v24 = v42;
    if (v42 < v39)
    {
      v42 = v39;
      v24 = v39;
    }
    v25 = v38;
    v16 = v24 - (_QWORD)v38;
    if (v24 - (unint64_t)v38 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_59;
  }
  else
  {
    if ((v43 & 8) == 0)
    {
      v16 = 0;
      HIBYTE(v33) = 0;
      v17 = (void **)&__dst;
      goto LABEL_47;
    }
    v25 = v36;
    v16 = v37 - (_QWORD)v36;
    if ((unint64_t)(v37 - (_QWORD)v36) > 0x7FFFFFFFFFFFFFF7)
LABEL_59:
      sub_22316DBC0();
  }
  if (v16 >= 0x17)
  {
    v26 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v26 = v16 | 7;
    v27 = v26 + 1;
    v17 = (void **)operator new(v26 + 1);
    v32 = v16;
    v33 = v27 | 0x8000000000000000;
    __dst = v17;
  }
  else
  {
    HIBYTE(v33) = v16;
    v17 = (void **)&__dst;
    if (!v16)
      goto LABEL_47;
  }
  memmove(v17, v25, v16);
LABEL_47:
  *((_BYTE *)v17 + v16) = 0;
  if (v33 >= 0)
    v22 = (void **)&__dst;
  else
    v22 = __dst;
  if (v33 >= 0)
    v23 = HIBYTE(v33);
  else
    v23 = v32;
LABEL_53:
  sub_2231813E8(a2, (uint64_t)v22, v23);
  if (SHIBYTE(v33) < 0)
    operator delete(__dst);
  v34[0] = *MEMORY[0x24BEDB7F0];
  v28 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v35[0] = v28;
  v35[1] = MEMORY[0x24BEDB848] + 16;
  if (v41 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x227684BE0](&v44);
}

void sub_2232D2188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_223195348((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  sub_223195348((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_2232D2214(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232D227C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232D22E4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_2232D2314(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *CV3DReconOccupancyQueryRequestCreateFromPoints_0(const void *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  _QWORD *result;
  _QWORD *v5;
  unint64_t v6;

  v2 = (std::__shared_weak_count *)operator new(0x58uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC295D0;
  sub_223FFF4E0((uint64_t)&v2[1], a1);
  result = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  v5 = result;
  if (result)
  {
    result[1] = v2 + 1;
    result[2] = v2;
    *((_DWORD *)result + 6) = 1;
    *result = &off_24EC294F0;
  }
  else
  {
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v5;
    }
  }
  return result;
}

void sub_2232D2420(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconOccupancyQueryRequestCreateFromSpheres_0(const void *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  _QWORD *result;
  _QWORD *v5;
  unint64_t v6;

  v2 = (std::__shared_weak_count *)operator new(0x58uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC29620;
  sub_223FFF70C((uint64_t)&v2[1], a1);
  result = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  v5 = result;
  if (result)
  {
    result[1] = v2 + 1;
    result[2] = v2;
    *((_DWORD *)result + 6) = 1;
    *result = &off_24EC294F0;
  }
  else
  {
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v5;
    }
  }
  return result;
}

void sub_2232D2504(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconOccupancyQueryRequestCreateFromVerticalCylinders_0(const void *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  _QWORD *result;
  _QWORD *v5;
  unint64_t v6;

  v2 = (std::__shared_weak_count *)operator new(0x58uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC29670;
  sub_223FFF8CC((uint64_t)&v2[1], a1);
  result = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  v5 = result;
  if (result)
  {
    result[1] = v2 + 1;
    result[2] = v2;
    *((_DWORD *)result + 6) = 1;
    *result = &off_24EC294F0;
  }
  else
  {
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v5;
    }
  }
  return result;
}

void sub_2232D25E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2232D2600(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC295D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2232D2610(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC295D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232D2640(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_2232D2650(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC29620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2232D2660(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC29620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232D2690(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_2232D26A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC29670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2232D26B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC29670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232D26E0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_2232D26F4()
{
  JUMPOUT(0x227684CE8);
}

BOOL sub_2232D2708(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a3 < 0.0)
  {
    __p = operator new(0x28uLL);
    v12 = xmmword_2245C77E0;
    strcpy((char *)__p, "Plane fit error must be positive");
    v5 = (char *)operator new(0x70uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/PlaneDetectionConfig.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  else
  {
    *(float *)(a1 + 8) = a3;
  }
  return a3 >= 0.0;
}

void sub_2232D2880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232D28BC(uint64_t a1)
{
  sub_22327F500(a1 + 8);
  return a1;
}

void sub_2232D28E4(uint64_t a1)
{
  sub_22327F500(a1 + 8);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232D291C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232D2984(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232D29EC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232D2A54(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

void sub_2232D2AC0()
{
  JUMPOUT(0x227684CE8);
}

BOOL sub_2232D2AD4(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  char __p[23];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a3 <= 0.0)
  {
    strcpy(__p, "Voxel size must be > 0");
    v13 = 22;
    v5 = (char *)operator new(0x70uLL);
    v11 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/PointCloudAlignment.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 33;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v11;
    }
    operator delete(v5);
    if (v13 < 0)
      operator delete(*(void **)__p);
  }
  else
  {
    *(float *)(a1 + 12) = a3;
  }
  return a3 > 0.0;
}

void sub_2232D2C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2232D2C7C(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  char __p[19];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a2 >= 8)
  {
    v13 = 18;
    strcpy(__p, "Unknown Attributes");
    v5 = (char *)operator new(0x70uLL);
    v11 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/PointCloudAlignment.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 33;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v11;
    }
    operator delete(v5);
    if (v13 < 0)
      operator delete(*(void **)__p);
  }
  else
  {
    *(_BYTE *)(a1 + 8) = a2;
  }
  return a2 < 8;
}

void sub_2232D2DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232D2E20(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232D2E88(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232D2EF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + 104;
  sub_223198030(a1 + 128, *(_QWORD **)(a1 + 136));
  sub_223198030(v2, *(_QWORD **)(a1 + 112));
  v3 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v3)
  {
    v4 = sub_2232D3058(v3);
    MEMORY[0x227684CE8](v4, 0x1060C40EFCE1224);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  sub_2232D319C(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_2232D2F68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + 104;
  sub_223198030(a1 + 128, *(_QWORD **)(a1 + 136));
  sub_223198030(v2, *(_QWORD **)(a1 + 112));
  v3 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v3)
  {
    v4 = sub_2232D3058(v3);
    MEMORY[0x227684CE8](v4, 0x1060C40EFCE1224);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  sub_2232D319C(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232D2FF0(uint64_t a1)
{
  sub_223278400(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_2232D301C(uint64_t a1)
{
  sub_223278400(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232D3058(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = (std::mutex *)(a1 + 64);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 176));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 128));
  std::mutex::~mutex(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v6)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v6 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v6)
      goto LABEL_11;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_11:
  v9 = *(std::__shared_weak_count **)(a1 + 24);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v12 = *(std::__shared_weak_count **)(a1 + 8);
      if (v12)
        goto LABEL_16;
      return a1;
    }
  }
  v12 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v12)
    return a1;
LABEL_16:
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_2232D319C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    sub_2232D319C(a1, *a2);
    sub_2232D319C(a1, a2[1]);
    v4 = a2[6];
    a2[6] = 0;
    if (v4)
    {
      v5 = sub_2232D3200(v4);
      MEMORY[0x227684CE8](v5, 0x1060C40D4449886);
    }
    operator delete(a2);
  }
}

uint64_t sub_2232D3200(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 88);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 88);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  sub_223198030(a1 + 24, *(_QWORD **)(a1 + 32));
  sub_223198030(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

_QWORD *sub_2232D3330(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    v3 = (_QWORD *)a1[5];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_223173E64(v3 - 45);
      while (v3 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  v5 = (_QWORD *)a1[1];
  if (v5)
  {
    v6 = (_QWORD *)a1[2];
    v7 = (void *)a1[1];
    if (v6 != v5)
    {
      do
        v6 = sub_223173E64(v6 - 45);
      while (v6 != v5);
      v7 = (void *)a1[1];
    }
    a1[2] = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_2232D33C0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    v3 = (_QWORD *)a1[5];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_223173E64(v3 - 45);
      while (v3 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  v5 = (_QWORD *)a1[1];
  if (v5)
  {
    v6 = (_QWORD *)a1[2];
    v7 = (void *)a1[1];
    if (v6 != v5)
    {
      do
        v6 = sub_223173E64(v6 - 45);
      while (v6 != v5);
      v7 = (void *)a1[1];
    }
    a1[2] = v5;
    operator delete(v7);
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232D3460(uint64_t a1)
{
  return -1527099483 * ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
}

uint64_t sub_2232D347C(_QWORD *a1)
{
  __int128 **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  __int128 v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v4 = a1[2];
  v2 = (__int128 **)(a1 + 1);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v33 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v17 = 0uLL;
  v18 = 0;
  sub_2232D3688();
  v12 = v10;
  sub_2232D69F0(&v13, &v12);
  *(_QWORD *)&v17 = (v13 | ((unint64_t)v14 << 32) | ((unint64_t)BYTE1(v14) << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)HIBYTE(v14) << 56) | ((unint64_t)(HIWORD(v14) & 0xF | 0x40) << 48);
  *((_QWORD *)&v17 + 1) = ((unint64_t)v16 << 32) | ((unint64_t)BYTE1(v16) << 40) | v15 & 0xFFFFFF00 | ((unint64_t)v16 << 32) & 0xFF00000000000000 | ((unint64_t)BYTE2(v16) << 48) | v15 & 0x3F | 0x80;
  v5 = a1[2];
  if (v5 >= a1[3])
  {
    v6 = sub_2232D6118(v2, &v17);
  }
  else
  {
    sub_223174250(a1[2], &v17);
    v6 = v5 + 360;
    a1[2] = v5 + 360;
  }
  a1[2] = v6;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)())v11->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  sub_223173E64(&v17);
  return -1527099483 * ((unint64_t)(v4 - v3) >> 3);
}

void sub_2232D3648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_2232D3808((uint64_t)&a9);
  sub_223173E64(&a15);
  _Unwind_Resume(a1);
}

void sub_2232D3674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223173E64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2232D3688()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t i;
  char *v3;
  std::random_device v4;
  _BYTE __token[2504];
  __int128 v6;
  _BYTE __dst[2496];
  _BYTE v8[2496];

  MEMORY[0x24BDAC7A8]();
  v1 = v0;
  __token[23] = 12;
  strcpy(__token, "/dev/urandom");
  std::random_device::random_device(&v4, (const std::string *)__token);
  if ((__token[23] & 0x80000000) != 0)
    operator delete(*(void **)__token);
  for (i = 0; i != 2496; i += 4)
    *(_DWORD *)&v8[i] = MEMORY[0x2276846DC](&v4);
  memcpy(__dst, v8, sizeof(__dst));
  sub_2232D6424(__dst, (uint64_t)__token);
  v3 = (char *)operator new(0x9F8uLL);
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &off_24EC29A78;
  memcpy(v3 + 24, __token, 0x9C8uLL);
  *((_QWORD *)v3 + 316) = &off_24EC7A6B0;
  *(_OWORD *)(v3 + 2536) = v6;
  *v1 = v3 + 24;
  v1[1] = v3;
  std::random_device::~random_device(&v4);
}

void sub_2232D37A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12, int a13, char a14)
{
  sub_2245658A0((uint64_t)&STACK[0x9D8]);
  std::random_device::~random_device(&a11);
  _Unwind_Resume(a1);
}

void sub_2232D37C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  std::random_device::~random_device(&a11);
  _Unwind_Resume(a1);
}

void sub_2232D37D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2232D37F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  std::random_device::~random_device(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_2232D3808(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_2232D3870(uint64_t a1, unsigned int a2, _DWORD *a3, CFTypeRef *a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char __p[19];
  char v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  v4 = a2;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = 0x4FA4FA4FA4FA4FA5 * ((*(_QWORD *)(a1 + 16) - v5) >> 3);
  if (v6 <= a2)
  {
    v15 = 18;
    strcpy(__p, "Invalid room index");
    v8 = (char *)operator new(0x70uLL);
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
    if (a4)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v9;
      v10 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(v8);
    if (v15 < 0)
      operator delete(*(void **)__p);
  }
  else
  {
    *a3 = (*(_QWORD *)(v5 + 360 * a2 + 32) - *(_QWORD *)(v5 + 360 * a2 + 24)) >> 4;
  }
  return v6 > v4;
}

void sub_2232D3A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2232D3A50(uint64_t a1, unsigned int a2, _OWORD *a3, CFTypeRef *a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char __p[19];
  char v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  v4 = a2;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = 0x4FA4FA4FA4FA4FA5 * ((*(_QWORD *)(a1 + 16) - v5) >> 3);
  if (v6 <= a2)
  {
    v15 = 18;
    strcpy(__p, "Invalid room index");
    v8 = (char *)operator new(0x70uLL);
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
    if (a4)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v9;
      v10 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(v8);
    if (v15 < 0)
      operator delete(*(void **)__p);
  }
  else
  {
    *a3 = *(_OWORD *)(v5 + 360 * a2);
  }
  return v6 > v4;
}

void sub_2232D3BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2232D3C28(uint64_t a1, _OWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 136);
  if (*(_BYTE *)(a1 + 136))
    *a2 = *(_OWORD *)(a1 + 120);
  return v2 != 0;
}

uint64_t sub_2232D3C44(uint64_t a1, _DWORD *a2)
{
  char *v2;
  char *v3;
  char *v4;

  if (!*(_BYTE *)(a1 + 136))
    return 0;
  v2 = *(char **)(a1 + 8);
  v3 = *(char **)(a1 + 16);
  v4 = v2;
  if (v2 != v3)
  {
    while (*(_QWORD *)v4 != *(_QWORD *)(a1 + 120) || *((_QWORD *)v4 + 1) != *(_QWORD *)(a1 + 128))
    {
      v4 += 360;
      if (v4 == v3)
        return 0;
    }
  }
  if (v4 == v3)
    return 0;
  *a2 = -1527099483 * ((unint64_t)(v4 - v2) >> 3);
  return 1;
}

uint64_t sub_2232D3CB0(uint64_t a1, unsigned int a2, unsigned int a3, _OWORD *a4, CFTypeRef *a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char __p[23];
  char v20;
  CFTypeRef cf;
  std::__shared_weak_count *v22;
  std::error_condition v23;

  v6 = *(_QWORD *)(a1 + 8);
  if (0x4FA4FA4FA4FA4FA5 * ((*(_QWORD *)(a1 + 16) - v6) >> 3) <= (unint64_t)a2)
  {
    v20 = 18;
    strcpy(__p, "Invalid room index");
    v9 = (char *)operator new(0x70uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
    if (a5)
    {
      *(_QWORD *)&v23.__val_ = 22;
      v23.__cat_ = std::generic_category();
      sub_2245321DC(&v23, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a5)
        CFRelease(*a5);
      *a5 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a5 = v10;
      v11 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if ((v20 & 0x80000000) == 0)
      return 0;
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 360 * a2 + 24);
    if (a3 < (unint64_t)((*(_QWORD *)(v6 + 360 * a2 + 32) - v7) >> 4))
    {
      *a4 = *(_OWORD *)(v7 + 16 * a3);
      return 1;
    }
    strcpy(__p, "Invalid keyframe index");
    v20 = 22;
    v14 = (char *)operator new(0x70uLL);
    strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
    if (a5)
    {
      *(_QWORD *)&v23.__val_ = 22;
      v23.__cat_ = std::generic_category();
      sub_2245321DC(&v23, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a5)
        CFRelease(*a5);
      *a5 = 0;
      v15 = cf;
      if (cf)
        CFRetain(cf);
      *a5 = v15;
      v16 = v22;
      if (v22)
      {
        v17 = (unint64_t *)&v22->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    operator delete(v14);
    if ((v20 & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_2232D3FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232D3FF0(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  uint64_t v3;
  _QWORD *v4;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char __p[19];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  v3 = *(_QWORD *)(a1 + 8);
  if (0x4FA4FA4FA4FA4FA5 * ((*(_QWORD *)(a1 + 16) - v3) >> 3) > (unint64_t)a2)
  {
    v4 = *(_QWORD **)(v3 + 360 * a2 + 88);
    if (v4)
      return (v4[1] - *v4) >> 3;
    return 0;
  }
  v13 = 18;
  strcpy(__p, "Invalid room index");
  v7 = (char *)operator new(0x70uLL);
  strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v16.__val_ = 22;
    v16.__cat_ = std::generic_category();
    sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v8 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v8;
    v9 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  operator delete(v7);
  if ((v13 & 0x80000000) == 0)
    return 0;
  operator delete(*(void **)__p);
  return 0;
}

void sub_2232D41B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_2232D41F0(float32x2_t *a1, unsigned int a2, unsigned int a3, CFTypeRef *a4, float32x4_t a5, double a6, double a7, double a8, float32x2_t a9, double a10, float32x2_t a11)
{
  float32x2_t v11;
  float32x2_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x4_t v19;
  char *v20;
  CFTypeRef v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  char *v25;
  CFTypeRef v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  CFTypeRef v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char __p[22];
  char v37;
  CFTypeRef cf;
  std::__shared_weak_count *v39;
  std::error_condition v40;

  v13 = a1[1];
  if (0x4FA4FA4FA4FA4FA5 * ((uint64_t)(*(_QWORD *)&a1[2] - *(_QWORD *)&v13) >> 3) <= (unint64_t)a2)
  {
    v37 = 18;
    strcpy(__p, "Invalid room index");
    v20 = (char *)operator new(0x70uLL);
    strcpy(v20, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
    if (a4)
    {
      *(_QWORD *)&v40.__val_ = 22;
      v40.__cat_ = std::generic_category();
      sub_2245321DC(&v40, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v21 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v21;
      v22 = v39;
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    operator delete(v20);
    if ((v37 & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_41;
  }
  v14 = *(_QWORD *)(*(_QWORD *)&v13 + 360 * a2 + 88);
  if (!v14)
  {
    v37 = 21;
    strcpy(__p, "Invalid room boundary");
    v25 = (char *)operator new(0x70uLL);
    strcpy(v25, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
    if (a4)
    {
      *(_QWORD *)&v40.__val_ = 22;
      v40.__cat_ = std::generic_category();
      sub_2245321DC(&v40, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v26 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v26;
      v27 = v39;
      if (v39)
      {
        v28 = (unint64_t *)&v39->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
    operator delete(v25);
    if ((v37 & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_41;
  }
  if (a3 >= (unint64_t)((uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 3))
  {
    v37 = 19;
    strcpy(__p, "Invalid point index");
    v30 = (char *)operator new(0x70uLL);
    strcpy(v30, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
    if (a4)
    {
      *(_QWORD *)&v40.__val_ = 22;
      v40.__cat_ = std::generic_category();
      sub_2245321DC(&v40, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v31 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v31;
      v32 = v39;
      if (v39)
      {
        v33 = (unint64_t *)&v39->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
    }
    operator delete(v30);
    if ((v37 & 0x80000000) == 0)
    {
LABEL_26:
      a5.i16[0] = 0;
      a5.i8[2] = 0;
      a5.i8[3] = 0;
      a5.i8[4] = 0;
      a5.i8[5] = 0;
      a5.i8[6] = 0;
      a5.i8[7] = 0;
      return *(double *)a5.i64;
    }
LABEL_41:
    operator delete(*(void **)__p);
    a5.i16[0] = 0;
    a5.i8[2] = 0;
    a5.i8[3] = 0;
    a5.i8[4] = 0;
    a5.i8[5] = 0;
    a5.i8[6] = 0;
    a5.i8[7] = 0;
    return *(double *)a5.i64;
  }
  v15 = *(_QWORD *)v14 + 8 * a3;
  a5.i32[0] = *(_DWORD *)v15;
  LODWORD(a6) = *(_DWORD *)(v15 + 4);
  *(float *)&a7 = *(float *)(v14 + 96) + *(float *)(v14 + 100);
  a9.i32[0] = *(_DWORD *)(v14 + 116);
  v16 = *(float32x2_t *)(v14 + 120);
  a11.i32[0] = *(_DWORD *)(v14 + 128);
  v17 = *(float32x2_t *)(v14 + 132);
  v11.i32[0] = *(_DWORD *)(v14 + 140);
  v18 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v14 + 108), *(float *)v15), v16, *(float *)&a6), v17, *(float *)&a7);
  *(float32x2_t *)a5.f32 = vmla_f32(vmla_f32(vmul_f32(a9, *(float32x2_t *)a5.f32), *(float32x2_t *)&a6, a11), *(float32x2_t *)&a7, v11);
  LODWORD(a7) = a1[8].i32[0];
  v16.i32[0] = a1[10].i32[0];
  v17.i32[0] = a1[12].i32[0];
  *(float32x2_t *)v19.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(a1[7], v18.f32[0]), a1[9], v18, 1), a1[11], a5.f32[0]);
  *(float32x2_t *)&v19.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&a7, v18), v16, v18, 1), *(float32x2_t *)a5.f32, v17);
  *(float32x2_t *)a5.f32 = a1[13];
  a5.i32[2] = a1[14].i32[0];
  a5.i64[0] = vaddq_f32(a5, v19).u64[0];
  return *(double *)a5.i64;
}

void sub_2232D469C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_2232D46F0(float32x2_t *a1, unsigned int a2, unsigned int a3, CFTypeRef *a4, float32x4_t a5, double a6, double a7, double a8, float32x2_t a9, double a10, float32x2_t a11)
{
  float32x2_t v11;
  float32x2_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x4_t v19;
  char *v20;
  CFTypeRef v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  char *v25;
  CFTypeRef v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  CFTypeRef v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char __p[22];
  char v37;
  CFTypeRef cf;
  std::__shared_weak_count *v39;
  std::error_condition v40;

  v13 = a1[1];
  if (0x4FA4FA4FA4FA4FA5 * ((uint64_t)(*(_QWORD *)&a1[2] - *(_QWORD *)&v13) >> 3) <= (unint64_t)a2)
  {
    v37 = 18;
    strcpy(__p, "Invalid room index");
    v20 = (char *)operator new(0x70uLL);
    strcpy(v20, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
    if (a4)
    {
      *(_QWORD *)&v40.__val_ = 22;
      v40.__cat_ = std::generic_category();
      sub_2245321DC(&v40, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v21 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v21;
      v22 = v39;
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    operator delete(v20);
    if ((v37 & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_41;
  }
  v14 = *(_QWORD *)(*(_QWORD *)&v13 + 360 * a2 + 88);
  if (!v14)
  {
    v37 = 21;
    strcpy(__p, "Invalid room boundary");
    v25 = (char *)operator new(0x70uLL);
    strcpy(v25, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
    if (a4)
    {
      *(_QWORD *)&v40.__val_ = 22;
      v40.__cat_ = std::generic_category();
      sub_2245321DC(&v40, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v26 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v26;
      v27 = v39;
      if (v39)
      {
        v28 = (unint64_t *)&v39->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
    operator delete(v25);
    if ((v37 & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_41;
  }
  if (a3 >= (unint64_t)((uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 3))
  {
    v37 = 19;
    strcpy(__p, "Invalid point index");
    v30 = (char *)operator new(0x70uLL);
    strcpy(v30, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
    if (a4)
    {
      *(_QWORD *)&v40.__val_ = 22;
      v40.__cat_ = std::generic_category();
      sub_2245321DC(&v40, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v31 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v31;
      v32 = v39;
      if (v39)
      {
        v33 = (unint64_t *)&v39->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
    }
    operator delete(v30);
    if ((v37 & 0x80000000) == 0)
    {
LABEL_26:
      a5.i16[0] = 0;
      a5.i8[2] = 0;
      a5.i8[3] = 0;
      a5.i8[4] = 0;
      a5.i8[5] = 0;
      a5.i8[6] = 0;
      a5.i8[7] = 0;
      return *(double *)a5.i64;
    }
LABEL_41:
    operator delete(*(void **)__p);
    a5.i16[0] = 0;
    a5.i8[2] = 0;
    a5.i8[3] = 0;
    a5.i8[4] = 0;
    a5.i8[5] = 0;
    a5.i8[6] = 0;
    a5.i8[7] = 0;
    return *(double *)a5.i64;
  }
  v15 = *(_QWORD *)v14 + 8 * a3;
  a5.i32[0] = *(_DWORD *)v15;
  LODWORD(a6) = *(_DWORD *)(v15 + 4);
  LODWORD(a7) = *(_DWORD *)(v14 + 96);
  a9.i32[0] = *(_DWORD *)(v14 + 116);
  v16 = *(float32x2_t *)(v14 + 120);
  a11.i32[0] = *(_DWORD *)(v14 + 128);
  v17 = *(float32x2_t *)(v14 + 132);
  v11.i32[0] = *(_DWORD *)(v14 + 140);
  v18 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v14 + 108), *(float *)v15), v16, *(float *)&a6), v17, *(float *)&a7);
  *(float32x2_t *)a5.f32 = vmla_f32(vmla_f32(vmul_f32(a9, *(float32x2_t *)a5.f32), *(float32x2_t *)&a6, a11), *(float32x2_t *)&a7, v11);
  LODWORD(a7) = a1[8].i32[0];
  v16.i32[0] = a1[10].i32[0];
  v17.i32[0] = a1[12].i32[0];
  *(float32x2_t *)v19.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(a1[7], v18.f32[0]), a1[9], v18, 1), a1[11], a5.f32[0]);
  *(float32x2_t *)&v19.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&a7, v18), v16, v18, 1), *(float32x2_t *)a5.f32, v17);
  *(float32x2_t *)a5.f32 = a1[13];
  a5.i32[2] = a1[14].i32[0];
  a5.i64[0] = vaddq_f32(v19, a5).u64[0];
  return *(double *)a5.i64;
}

void sub_2232D4B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float sub_2232D4BEC(uint64_t a1, unsigned int a2, unsigned int a3, CFTypeRef *a4)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  CFTypeRef v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char __p[22];
  char v26;
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  v5 = *(_QWORD *)(a1 + 8);
  if (0x4FA4FA4FA4FA4FA5 * ((*(_QWORD *)(a1 + 16) - v5) >> 3) <= (unint64_t)a2)
  {
    v26 = 18;
    strcpy(__p, "Invalid room index");
    v10 = (char *)operator new(0x70uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
    if (a4)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v11;
      v12 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((v26 & 0x80000000) == 0)
      return -1.0;
  }
  else
  {
    v6 = *(_QWORD **)(v5 + 360 * a2 + 104);
    if (v6)
    {
      v8 = v6;
      v7 = *v6;
      if (a3 < (unint64_t)((v8[1] - v7) >> 2))
        return *(float *)(v7 + 4 * a3);
      v26 = 19;
      strcpy(__p, "Invalid point index");
      v20 = (char *)operator new(0x70uLL);
      strcpy(v20, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
      if (a4)
      {
        *(_QWORD *)&v29.__val_ = 22;
        v29.__cat_ = std::generic_category();
        sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a4)
          CFRelease(*a4);
        *a4 = 0;
        v21 = cf;
        if (cf)
          CFRetain(cf);
        *a4 = v21;
        v22 = v28;
        if (v28)
        {
          v23 = (unint64_t *)&v28->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
      }
      operator delete(v20);
      if ((v26 & 0x80000000) == 0)
        return -1.0;
    }
    else
    {
      v26 = 21;
      strcpy(__p, "Invalid room boundary");
      v15 = (char *)operator new(0x70uLL);
      strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
      if (a4)
      {
        *(_QWORD *)&v29.__val_ = 22;
        v29.__cat_ = std::generic_category();
        sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a4)
          CFRelease(*a4);
        *a4 = 0;
        v16 = cf;
        if (cf)
          CFRetain(cf);
        *a4 = v16;
        v17 = v28;
        if (v28)
        {
          v18 = (unint64_t *)&v28->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
      operator delete(v15);
      if ((v26 & 0x80000000) == 0)
        return -1.0;
    }
  }
  operator delete(*(void **)__p);
  return -1.0;
}

void sub_2232D5010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2232D5064(uint64_t a1@<X0>, unsigned int a2@<W1>, CFTypeRef *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char __p[19];
  char v22;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  std::error_condition v25;

  v5 = *(_QWORD *)(a1 + 8);
  if (0x4FA4FA4FA4FA4FA5 * ((*(_QWORD *)(a1 + 16) - v5) >> 3) <= (unint64_t)a2)
  {
    v22 = 18;
    strcpy(__p, "Invalid room index");
    v16 = (char *)operator new(0x70uLL);
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
    if (a3)
    {
      *(_QWORD *)&v25.__val_ = 22;
      v25.__cat_ = std::generic_category();
      sub_2245321DC(&v25, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v17 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v17;
      v18 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    operator delete(v16);
    if (v22 < 0)
      operator delete(*(void **)__p);
    *(_BYTE *)(a4 + 80) = 0;
    *(_BYTE *)(a4 + 84) = 0;
    *(_BYTE *)(a4 + 100) = 0;
    *(_QWORD *)(a4 + 104) = 0;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 0;
  }
  else
  {
    v6 = v5 + 360 * a2;
    v8 = *(_QWORD *)(v6 + 232);
    v7 = *(_QWORD *)(v6 + 240);
    *(_QWORD *)a4 = v8;
    *(_QWORD *)(a4 + 8) = v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 80) = 0;
    if (*(_BYTE *)(v5 + 360 * a2 + 312))
    {
      v11 = v5 + 360 * a2;
      v12 = *(_OWORD *)(v11 + 264);
      v13 = *(_OWORD *)(v11 + 280);
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(v11 + 248);
      *(_OWORD *)(a4 + 32) = v12;
      v14 = *(_OWORD *)(v11 + 296);
      *(_OWORD *)(a4 + 48) = v13;
      *(_OWORD *)(a4 + 64) = v14;
      *(_BYTE *)(a4 + 80) = 1;
    }
    *(_OWORD *)(a4 + 84) = *(_OWORD *)(v5 + 360 * a2 + 316);
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(v5 + 360 * a2 + 328);
  }
}

void sub_2232D5294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float sub_2232D52D0(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  uint64_t v3;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char __p[19];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  v3 = *(_QWORD *)(a1 + 8);
  if (0x4FA4FA4FA4FA4FA5 * ((*(_QWORD *)(a1 + 16) - v3) >> 3) > (unint64_t)a2)
    return *(float *)(v3 + 360 * a2 + 348);
  v12 = 18;
  strcpy(__p, "Invalid room index");
  v6 = (char *)operator new(0x70uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0.0;
}

void sub_2232D5484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float sub_2232D54C0(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  float result;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char __p[19];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  result = 0.75;
  if (0x4FA4FA4FA4FA4FA5 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3) <= (unint64_t)a2)
  {
    v11 = 18;
    strcpy(__p, "Invalid room index");
    v5 = (char *)operator new(0x70uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
    if (a3)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (v11 < 0)
      operator delete(*(void **)__p);
    return 0.0;
  }
  return result;
}

void sub_2232D563C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float sub_2232D5678(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  uint64_t v3;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char __p[19];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  v3 = *(_QWORD *)(a1 + 8);
  if (0x4FA4FA4FA4FA4FA5 * ((*(_QWORD *)(a1 + 16) - v3) >> 3) > (unint64_t)a2)
    return *(float *)(v3 + 360 * a2 + 352);
  v12 = 18;
  strcpy(__p, "Invalid room index");
  v6 = (char *)operator new(0x70uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0.0;
}

void sub_2232D582C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float sub_2232D5868(uint64_t a1, unsigned int a2, unsigned int a3, CFTypeRef *a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  CFTypeRef v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char __p[23];
  char v19;
  CFTypeRef cf;
  std::__shared_weak_count *v21;
  std::error_condition v22;

  v5 = *(_QWORD *)(a1 + 8);
  if (0x4FA4FA4FA4FA4FA5 * ((*(_QWORD *)(a1 + 16) - v5) >> 3) <= (unint64_t)a2)
  {
    v19 = 18;
    strcpy(__p, "Invalid room index");
    v8 = (char *)operator new(0x70uLL);
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
    if (a4)
    {
      *(_QWORD *)&v22.__val_ = 22;
      v22.__cat_ = std::generic_category();
      sub_2245321DC(&v22, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v9;
      v10 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(v8);
    if ((v19 & 0x80000000) == 0)
      return 0.0;
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 360 * a2 + 48);
    if (a3 < (unint64_t)((*(_QWORD *)(v5 + 360 * a2 + 56) - v6) >> 2))
      return *(float *)(v6 + 4 * a3);
    strcpy(__p, "Invalid keyframe index");
    v19 = 22;
    v13 = (char *)operator new(0x70uLL);
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
    if (a4)
    {
      *(_QWORD *)&v22.__val_ = 22;
      v22.__cat_ = std::generic_category();
      sub_2245321DC(&v22, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v14 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v14;
      v15 = v21;
      if (v21)
      {
        v16 = (unint64_t *)&v21->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    operator delete(v13);
    if ((v19 & 0x80000000) == 0)
      return 0.0;
  }
  operator delete(*(void **)__p);
  return 0.0;
}

void sub_2232D5B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232D5BA0(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  uint64_t v3;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char __p[19];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  v3 = *(_QWORD *)(a1 + 8);
  if (0x4FA4FA4FA4FA4FA5 * ((*(_QWORD *)(a1 + 16) - v3) >> 3) > (unint64_t)a2)
    return *(unsigned __int8 *)(v3 + 360 * a2 + 16);
  v12 = 18;
  strcpy(__p, "Invalid room index");
  v6 = (char *)operator new(0x70uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 254;
}

void sub_2232D5D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2232D5D90(uint64_t a1, unsigned int a2, uint64_t *a3, CFTypeRef *a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  int v19;
  _OWORD *v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v26;
  CFTypeRef v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  char *v57;
  char __p[19];
  char v59;
  CFTypeRef cf;
  std::__shared_weak_count *v61;
  std::error_condition v62;

  v4 = a2;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = 0x4FA4FA4FA4FA4FA5 * ((*(_QWORD *)(a1 + 16) - v5) >> 3);
  if (v6 <= a2)
  {
    v59 = 18;
    strcpy(__p, "Invalid room index");
    v26 = (char *)operator new(0x70uLL);
    v57 = v26;
    strcpy(v26, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/RoomBoundaryResult.cpp");
    if (a4)
    {
      *(_QWORD *)&v62.__val_ = 22;
      v62.__cat_ = std::generic_category();
      sub_2245321DC(&v62, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v27 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v27;
      v28 = v61;
      if (v61)
      {
        p_shared_owners = (unint64_t *)&v61->__shared_owners_;
        do
          v30 = __ldaxr(p_shared_owners);
        while (__stlxr(v30 - 1, p_shared_owners));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v26 = v57;
    }
    operator delete(v26);
    if (v59 < 0)
      operator delete(*(void **)__p);
  }
  else
  {
    v10 = *a3;
    v9 = a3[1];
    if (v9)
    {
      v11 = (unint64_t *)(v9 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = *(std::__shared_weak_count **)(v5 + 360 * a2 + 128);
    *(_QWORD *)(v5 + 360 * a2 + 120) = v10;
    *(_QWORD *)(v5 + 360 * a2 + 128) = v9;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v5 + 360 * v4;
    v19 = *(unsigned __int8 *)(v16 + 200);
    v17 = (_BYTE *)(v16 + 200);
    v18 = v19;
    v20 = v17 - 64;
    v21 = (__int128 *)(a3 + 2);
    if (v19 == *((unsigned __int8 *)a3 + 80))
    {
      if (v18)
      {
        v22 = *v21;
        v23 = *((_OWORD *)a3 + 2);
        v24 = *((_OWORD *)a3 + 4);
        *((_OWORD *)v17 - 2) = *((_OWORD *)a3 + 3);
        *((_OWORD *)v17 - 1) = v24;
        *v20 = v22;
        *((_OWORD *)v17 - 3) = v23;
      }
    }
    else if (v18)
    {
      *v17 = 0;
    }
    else
    {
      v31 = *v21;
      v32 = *((_OWORD *)a3 + 2);
      v33 = *((_OWORD *)a3 + 4);
      *((_OWORD *)v17 - 2) = *((_OWORD *)a3 + 3);
      *((_OWORD *)v17 - 1) = v33;
      *v20 = v31;
      *((_OWORD *)v17 - 3) = v32;
      *v17 = 1;
    }
    v34 = v5 + 360 * v4;
    v35 = *(_OWORD *)((char *)a3 + 84);
    *(_OWORD *)(v34 + 216) = *((_OWORD *)a3 + 6);
    *(_OWORD *)(v34 + 204) = v35;
    v36 = *(_QWORD *)(a1 + 8);
    v38 = *a3;
    v37 = a3[1];
    if (v37)
    {
      v39 = (unint64_t *)(v37 + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = *(std::__shared_weak_count **)(v36 + 360 * v4 + 240);
    *(_QWORD *)(v36 + 360 * v4 + 232) = v38;
    *(_QWORD *)(v36 + 360 * v4 + 240) = v37;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = v36 + 360 * v4;
    v45 = (_OWORD *)(v44 + 248);
    v46 = *(unsigned __int8 *)(v44 + 312);
    if (v46 == *((unsigned __int8 *)a3 + 80))
    {
      if (*(_BYTE *)(v44 + 312))
      {
        v47 = *v21;
        v48 = *((_OWORD *)a3 + 2);
        v49 = *((_OWORD *)a3 + 4);
        *(_OWORD *)(v44 + 280) = *((_OWORD *)a3 + 3);
        *(_OWORD *)(v44 + 296) = v49;
        *v45 = v47;
        *(_OWORD *)(v44 + 264) = v48;
      }
    }
    else
    {
      v50 = (_BYTE *)(v44 + 312);
      if (v46)
      {
        *v50 = 0;
      }
      else
      {
        v51 = *v21;
        v52 = *((_OWORD *)a3 + 2);
        v53 = *((_OWORD *)a3 + 4);
        v45[2] = *((_OWORD *)a3 + 3);
        v45[3] = v53;
        *v45 = v51;
        v45[1] = v52;
        *v50 = 1;
      }
    }
    v54 = v36 + 360 * v4;
    v55 = *(_OWORD *)((char *)a3 + 84);
    *(_OWORD *)(v54 + 328) = *((_OWORD *)a3 + 6);
    *(_OWORD *)(v54 + 316) = v55;
  }
  return v6 > v4;
}

void sub_2232D60DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232D6118(__int128 **a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v14;
  __int128 *v15;

  v3 = 0x4FA4FA4FA4FA4FA5 * (((char *)a1[1] - (char *)*a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xB60B60B60B60B6)
    sub_22316E078();
  if (0x9F49F49F49F49F4ALL * (((char *)a1[2] - (char *)*a1) >> 3) > v4)
    v4 = 0x9F49F49F49F49F4ALL * (((char *)a1[2] - (char *)*a1) >> 3);
  if ((unint64_t)(0x4FA4FA4FA4FA4FA5 * (((char *)a1[2] - (char *)*a1) >> 3)) >= 0x5B05B05B05B05BLL)
    v6 = 0xB60B60B60B60B6;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xB60B60B60B60B6)
      sub_223174E94();
    v7 = (char *)operator new(360 * v6);
  }
  else
  {
    v7 = 0;
  }
  v14 = (uint64_t)&v7[360 * v3];
  v15 = (__int128 *)&v7[360 * v6];
  sub_223174250(v14, a2);
  v8 = v14;
  v9 = v14 + 360;
  v11 = *a1;
  v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = (__int128 *)v14;
    a1[1] = (__int128 *)v9;
    a1[2] = v15;
    if (!v10)
      return v14 + 360;
    goto LABEL_16;
  }
  do
  {
    v8 -= 360;
    v10 = (__int128 *)((char *)v10 - 360);
    sub_2232D62F4(v8, v10);
  }
  while (v10 != v11);
  v10 = *a1;
  v12 = a1[1];
  *a1 = (__int128 *)v8;
  a1[1] = (__int128 *)v9;
  for (a1[2] = v15; v12 != v10; v12 = (__int128 *)sub_223173E64((_QWORD *)v12 - 45))
    ;
  if (v10)
LABEL_16:
    operator delete(v10);
  return v14 + 360;
}

void sub_2232D6290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2232D62A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2232D62A4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 360;
    sub_223173E64((_QWORD *)(i - 360));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 sub_2232D62F4(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  uint64_t v11;

  v2 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *(_OWORD *)(a1 + 104) = *(__int128 *)((char *)a2 + 104);
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  if (*((_BYTE *)a2 + 200))
  {
    v3 = *(__int128 *)((char *)a2 + 136);
    v4 = *(__int128 *)((char *)a2 + 152);
    v5 = *(__int128 *)((char *)a2 + 184);
    *(_OWORD *)(a1 + 168) = *(__int128 *)((char *)a2 + 168);
    *(_OWORD *)(a1 + 184) = v5;
    *(_OWORD *)(a1 + 136) = v3;
    *(_OWORD *)(a1 + 152) = v4;
    *(_BYTE *)(a1 + 200) = 1;
  }
  v6 = *(__int128 *)((char *)a2 + 204);
  *(_OWORD *)(a1 + 216) = *(__int128 *)((char *)a2 + 216);
  *(_OWORD *)(a1 + 204) = v6;
  *(_OWORD *)(a1 + 232) = *(__int128 *)((char *)a2 + 232);
  *((_QWORD *)a2 + 29) = 0;
  *((_QWORD *)a2 + 30) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  if (*((_BYTE *)a2 + 312))
  {
    v7 = *(__int128 *)((char *)a2 + 248);
    v8 = *(__int128 *)((char *)a2 + 264);
    v9 = *(__int128 *)((char *)a2 + 296);
    *(_OWORD *)(a1 + 280) = *(__int128 *)((char *)a2 + 280);
    *(_OWORD *)(a1 + 296) = v9;
    *(_OWORD *)(a1 + 248) = v7;
    *(_OWORD *)(a1 + 264) = v8;
    *(_BYTE *)(a1 + 312) = 1;
  }
  result = *(__n128 *)((char *)a2 + 316);
  *(_OWORD *)(a1 + 328) = *(__int128 *)((char *)a2 + 328);
  *(__n128 *)(a1 + 316) = result;
  v11 = *((_QWORD *)a2 + 43);
  *(_DWORD *)(a1 + 352) = *((_DWORD *)a2 + 88);
  *(_QWORD *)(a1 + 344) = v11;
  return result;
}

void sub_2232D6424(const void *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  void *__p;
  void *v16;
  char *v17;

  v4 = (char *)operator new(0x9C0uLL);
  v5 = v4 + 2496;
  __p = v4;
  v17 = v4 + 2496;
  memcpy(v4, a1, 0x9C0uLL);
  v16 = v5;
  sub_224565790((int **)&__p, &v13);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  v11 = &off_24EC7A6B0;
  v12 = v14;
  if (*((_QWORD *)&v14 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_2232D6564((_QWORD *)a2, (uint64_t)&v11);
  *(_QWORD *)(a2 + 2504) = &off_24EC7A6B0;
  *(_OWORD *)(a2 + 2512) = v12;
  v12 = 0uLL;
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2232D652C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2245658A0((uint64_t)va);
  sub_2245658A0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2232D6548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_2232D6564(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  void *result;
  uint64_t v6;
  std::runtime_error *exception;
  _DWORD __src[624];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "not a seed sequence");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  sub_2232D6668(v3, __src, &v9);
  result = memcpy(a1, __src, 0x9C0uLL);
  a1[312] = 0;
  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
    v6 = 4;
    while (!*(_DWORD *)((char *)a1 + v6))
    {
      v6 += 4;
      if (v6 == 2496)
      {
        *(_DWORD *)a1 = 0x80000000;
        return result;
      }
    }
  }
  return result;
}

void sub_2232D6650(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_2232D6668(unint64_t result, _DWORD *__b, _BYTE *a3)
{
  int **v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;

  if (__b == (_DWORD *)a3)
    return result;
  v4 = (int **)result;
  v5 = a3 - (_BYTE *)__b;
  if (a3 - (_BYTE *)__b >= 1)
    memset(__b, 139, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  v6 = v5 >> 2;
  v8 = *v4;
  v7 = v4[1];
  v9 = (char *)v7 - (char *)*v4;
  v10 = v9 >> 2;
  v11 = 11;
  v12 = 7;
  v13 = 5;
  v14 = 3;
  v15 = (v5 >> 2) - 1;
  if ((unint64_t)v5 <= 0x18)
    v14 = v15 >> 1;
  if ((unint64_t)v5 <= 0x98)
    v13 = v14;
  if ((unint64_t)v5 <= 0x10C)
    v12 = v13;
  if ((unint64_t)v5 <= 0x9B8)
    v11 = v12;
  v16 = (unint64_t)v9 >> 2;
  v17 = (v6 - v11) >> 1;
  v18 = v17 + v11;
  v19 = v10 + 1;
  if (v10 + 1 > v6)
    v20 = v10 + 1;
  else
    v20 = v5 >> 2;
  v21 = __b[v17];
  v22 = 1664525 * (*__b ^ __b[v15] ^ v21 ^ ((*__b ^ __b[v15] ^ v21) >> 27));
  __b[v17] = v22 + v21;
  v23 = v22 + v16;
  __b[v18] += v23;
  *__b = v23;
  v24 = v17 % v6;
  result = v18 / v6;
  v25 = v18 % v6;
  if (v7 == v8)
  {
    v26 = 0;
    if (v19 >= v6)
      goto LABEL_49;
  }
  else
  {
    v26 = 0;
    v27 = 2;
    if (v19 > 2)
      v27 = v10 + 1;
    result = v27 - 1;
    do
    {
      if (v26 + 1 == v6)
        v26 = 0;
      else
        ++v26;
      if (v15 + 1 == v6)
        v15 = 0;
      else
        ++v15;
      if (v24 + 1 == v6)
        v24 = 0;
      else
        ++v24;
      v28 = __b[v24];
      v29 = __b[v26] ^ __b[v15] ^ v28;
      v30 = 1664525 * (v29 ^ (v29 >> 27));
      __b[v24] = v30 + v28;
      v32 = *v8++;
      v31 = v32;
      if (v25 + 1 == v6)
        v25 = 0;
      else
        ++v25;
      v33 = v31 + v26 + v30;
      __b[v25] += v33;
      __b[v26] = v33;
      --result;
    }
    while (result);
    if (v19 >= v6)
      goto LABEL_49;
  }
  v34 = ~v10 + v20;
  do
  {
    if (v26 + 1 == v6)
      v26 = 0;
    else
      ++v26;
    if (v15 + 1 == v6)
      v15 = 0;
    else
      ++v15;
    if (v24 + 1 == v6)
      v24 = 0;
    else
      ++v24;
    v35 = __b[v24];
    if (v25 + 1 == v6)
      v25 = 0;
    else
      ++v25;
    v36 = 1664525 * (__b[v26] ^ __b[v15] ^ v35 ^ ((__b[v26] ^ __b[v15] ^ v35) >> 27));
    __b[v24] = v36 + v35;
    v37 = v36 + v26;
    result = 4 * v25;
    __b[v25] += v37;
    __b[v26] = v37;
    --v34;
  }
  while (v34);
LABEL_49:
  if (v20 < v20 + v6)
  {
    v38 = v5 >> 2;
    do
    {
      if (v26 + 1 == v6)
        v26 = 0;
      else
        ++v26;
      if (v15 + 1 == v6)
        v15 = 0;
      else
        ++v15;
      if (v24 + 1 == v6)
        v24 = 0;
      else
        ++v24;
      if (v25 + 1 == v6)
        v25 = 0;
      else
        ++v25;
      v39 = __b[v24];
      v40 = v39 + __b[v26] + __b[v15];
      v41 = 1566083941 * (v40 ^ (v40 >> 27));
      __b[v24] = v41 ^ v39;
      v42 = v41 - v26;
      result = v42 ^ __b[v25];
      __b[v25] = result;
      __b[v26] = v42;
      --v38;
    }
    while (v38);
  }
  return result;
}

void sub_2232D6954(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC29A78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2232D6964(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC29A78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2232D6994(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 2544);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

unsigned int *sub_2232D69F0(unsigned int *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 2496);
  v4 = (v3 + 1) % 0x270uLL;
  v5 = 4 * v4;
  v6 = *(_DWORD *)(*a2 + 4 * ((v3 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(*a2 + 4 * v4) & 0x7FFFFFFE | *(_DWORD *)(*a2 + 4 * v3) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(*a2 + 4 * v4) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(*a2 + 4 * v3) = v6;
  v7 = ((v6 ^ (v6 >> 11)) << 7) & 0x9D2C5680 ^ v6 ^ (v6 >> 11);
  *result = (v7 << 15) & 0xEFC60000 ^ v7 ^ (((v7 << 15) & 0xEFC60000 ^ v7) >> 18);
  if (v4 == 623)
    v8 = 0;
  else
    v8 = v4 + 1;
  if (v4 >= 0xE3)
    v9 = -227;
  else
    v9 = 397;
  v10 = *(_DWORD *)(v2 + 4 * (v9 + v4)) ^ ((*(_DWORD *)(v2 + 4 * v8) & 0x7FFFFFFE | *(_DWORD *)(v2 + 4 * v4) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v8) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(v2 + v5) = v10;
  v11 = ((v10 ^ (v10 >> 11)) << 7) & 0x9D2C5680 ^ v10 ^ (v10 >> 11);
  result[1] = (v11 << 15) & 0xEFC60000 ^ v11 ^ (((v11 << 15) & 0xEFC60000 ^ v11) >> 18);
  v12 = (v8 + 1) % 0x270;
  v13 = *(_DWORD *)(v2 + 4 * ((v8 + 397) % 0x270)) ^ ((*(_DWORD *)(v2 + 4 * v12) & 0x7FFFFFFE | *(_DWORD *)(v2 + 4 * v8) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v12) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(v2 + 4 * v8) = v13;
  v14 = ((v13 ^ (v13 >> 11)) << 7) & 0x9D2C5680 ^ v13 ^ (v13 >> 11);
  result[2] = (v14 << 15) & 0xEFC60000 ^ v14 ^ (((v14 << 15) & 0xEFC60000 ^ v14) >> 18);
  if (v12 == 623)
    v15 = 0;
  else
    v15 = v12 + 1;
  if (v12 >= 0xE3)
    v16 = -227;
  else
    v16 = 397;
  v17 = *(_DWORD *)(v2 + 4 * (v16 + v12)) ^ ((*(_DWORD *)(v2 + 4 * v15) & 0x7FFFFFFE | *(_DWORD *)(v2 + 4 * v12) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v15) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(v2 + 4 * v12) = v17;
  v18 = ((v17 ^ (v17 >> 11)) << 7) & 0x9D2C5680 ^ v17 ^ (v17 >> 11);
  result[3] = (v18 << 15) & 0xEFC60000 ^ v18 ^ (((v18 << 15) & 0xEFC60000 ^ v18) >> 18);
  *(_QWORD *)(v2 + 2496) = v15;
  return result;
}

uint64_t sub_2232D6BE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 96);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_2232D6C78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 96);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x227684CE8);
}

void sub_2232D6D24()
{
  JUMPOUT(0x227684CE8);
}

void sub_2232D6D3C()
{
  JUMPOUT(0x227684CE8);
}

void sub_2232D6D54()
{
  JUMPOUT(0x227684CE8);
}

void sub_2232D6D6C()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232D6D80(uint64_t result)
{
  *(_QWORD *)(result + 80) = &off_24EC20828;
  return result;
}

void sub_2232D6D90(uint64_t a1)
{
  *(_QWORD *)(a1 + 80) = &off_24EC20828;
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232D6DB0(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v2);
    }
  }
  return a1;
}

void sub_2232D6DE8(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v2);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232D6E30(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_223421888((uint64_t *)(a1 + 8), a2, a3, a4, a5, a6);
  return a1;
}

void sub_2232D6E58(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_223421888((uint64_t *)(a1 + 8), a2, a3, a4, a5, a6);
  JUMPOUT(0x227684CE8);
}

void sub_2232D6E94()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232D6EA8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[4];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[2];
      if (v11)
        goto LABEL_16;
      return a1;
    }
  }
  v11 = (std::__shared_weak_count *)a1[2];
  if (!v11)
    return a1;
LABEL_16:
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_2232D6FD4(_QWORD *a1)
{
  sub_2232D6EA8(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232D6FF8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2232D70A4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232D7150(uint64_t a1)
{
  sub_2231F4908((_QWORD *)(a1 + 8));
  return a1;
}

void sub_2232D7178(uint64_t a1)
{
  sub_2231F4908((_QWORD *)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232D71B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned __int8 v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  int v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned __int8 v46;
  char *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _DWORD *v60;
  _DWORD *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  std::string::size_type size;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  std::string::size_type v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  std::string::size_type v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  std::string::size_type v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  std::string::size_type v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  std::string::size_type v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  std::string::size_type v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  std::string::size_type v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::recursive_mutex ****v136;
  uint64_t *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  void *v151[2];
  void *(*v152)(uint64_t, uint64_t);
  void *v153;
  std::string *p_p;
  std::string __p;
  __n128 (*v156)(uint64_t, uint64_t);
  void (*v157)(uint64_t);
  uint64_t v158;
  std::__shared_weak_count *v159;
  char *v160[2];
  char *v161;
  uint64_t v162;
  _BYTE __dst[24];
  const char *v164;
  uint64_t v165;

  v3 = sub_2232E4FC0(a1, a2);
  v137 = (uint64_t *)(v3 + 1200);
  *(_QWORD *)(v3 + 1216) = 0;
  *(_OWORD *)(v3 + 1200) = 0u;
  *(_QWORD *)(v3 + 1224) = sub_2232E5358;
  *(_OWORD *)(v3 + 1232) = 0u;
  *(_OWORD *)(v3 + 1248) = 0u;
  *(_OWORD *)(v3 + 1264) = 0u;
  *(_OWORD *)(v3 + 1280) = 0u;
  *(_OWORD *)(v3 + 1296) = 0u;
  *(_OWORD *)(v3 + 1312) = 0u;
  *(_OWORD *)(v3 + 1328) = 0u;
  *(_OWORD *)(v3 + 1344) = 0u;
  *(_OWORD *)(v3 + 1360) = 0u;
  *(_OWORD *)(v3 + 1376) = 0u;
  *(_OWORD *)(v3 + 1392) = 0u;
  *(_OWORD *)(v3 + 1408) = 0u;
  *(_QWORD *)(a1 + 1424) = dispatch_queue_create("com.apple.Recon3D.recon.state_capture", 0);
  *(_QWORD *)(a1 + 1432) = sub_2232E534C;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  v136 = (std::recursive_mutex ****)(a1 + 1472);
  sub_22455C98C((uint64_t *)(a1 + 1472));
  v4 = *(unsigned __int8 *)(a1 + 560);
  v5 = *(unsigned __int8 *)(a1 + 968);
  v146 = *(unsigned __int8 *)(a1 + 880);
  v147 = v4;
  v148 = v5;
  v149 = 0;
  v150 = 728303096;
  kdebug_trace();
  v6 = atomic_load((unsigned __int8 *)&qword_2557950B8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2557950B8))
  {
    sub_223FD6640("com.apple.Recon3D.global", &qword_2557950A8);
    __cxa_atexit((void (*)(void *))sub_22319828C, &qword_2557950A8, &dword_22314D000);
    __cxa_guard_release(&qword_2557950B8);
  }
  v8 = qword_2557950A8;
  v7 = (std::__shared_weak_count *)unk_2557950B0;
  if (unk_2557950B0)
  {
    v9 = (unint64_t *)(unk_2557950B0 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a1 + 1440) = v8;
  v11 = *(std::__shared_weak_count **)(a1 + 1448);
  *(_QWORD *)(a1 + 1448) = v7;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v7 = *(std::__shared_weak_count **)(a1 + 1448);
    v8 = *(_QWORD *)(a1 + 1440);
  }
  *(_QWORD *)__dst = v8;
  *(_QWORD *)&__dst[8] = v7;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (void *)MEMORY[0x24BDAC760];
  if (v8)
  {
    sub_223229DB8();
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
    __p.__r_.__value_.__r.__words[2] = 0x3802000000;
    v156 = sub_223FF1B80;
    v157 = sub_223FF1B90;
    v158 = v8;
    v159 = v7;
    if (v7)
    {
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
    }
    v151[0] = v16;
    v151[1] = (void *)0x40000000;
    v152 = sub_223FF1BA0;
    v153 = &unk_24EC658C0;
    p_p = &__p;
    os_state_add_handler();
    _Block_object_dispose(&__p, 8);
    if (v159)
      std::__shared_weak_count::__release_weak(v159);
  }
  if (v7)
  {
    v19 = (unint64_t *)&v7->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v21 = atomic_load((unsigned __int8 *)&qword_255795030);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_255795030))
  {
    sub_22379785C(&qword_255795020);
    __cxa_atexit((void (*)(void *))sub_2232D88EC, &qword_255795020, &dword_22314D000);
    __cxa_guard_release(&qword_255795030);
  }
  v23 = qword_255795020;
  v22 = *(std::__shared_weak_count **)algn_255795028;
  if (*(_QWORD *)algn_255795028)
  {
    v24 = (unint64_t *)(*(_QWORD *)algn_255795028 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *(_QWORD *)(a1 + 1456) = v23;
  v26 = *(std::__shared_weak_count **)(a1 + 1464);
  *(_QWORD *)(a1 + 1464) = v22;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    v22 = *(std::__shared_weak_count **)(a1 + 1464);
    v23 = *(_QWORD *)(a1 + 1456);
  }
  *(_QWORD *)__dst = v23;
  *(_QWORD *)&__dst[8] = v22;
  if (v22)
  {
    v29 = (unint64_t *)&v22->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  if (v23)
  {
    sub_223229DB8();
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
    __p.__r_.__value_.__r.__words[2] = 0x3802000000;
    v156 = sub_223FF1B80;
    v157 = sub_223FF1B90;
    v158 = v23;
    v159 = v22;
    if (v22)
    {
      v31 = (unint64_t *)&v22->__shared_weak_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v151[0] = v16;
    v151[1] = (void *)0x40000000;
    v152 = sub_223FF1BA0;
    v153 = &unk_24EC658C0;
    p_p = &__p;
    os_state_add_handler();
    _Block_object_dispose(&__p, 8);
    if (v159)
      std::__shared_weak_count::__release_weak(v159);
  }
  if (v22)
  {
    v33 = (unint64_t *)&v22->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  sub_223224144(&v144);
  sub_22319ED0C(&v142, (uint64_t)&v144);
  LOBYTE(v161) = 0;
  BYTE4(v161) = 0;
  LOBYTE(v160[0]) = 0;
  BYTE4(v160[0]) = 0;
  sub_22319ED0C(v151, (uint64_t)&v142);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2245C65C0;
  strcpy(__p.__r_.__value_.__l.__data_, "com.apple.recon3d.logging_level.api");
  *(_QWORD *)__dst = "api";
  *(_QWORD *)&__dst[8] = 3;
  sub_223CB9080((uint64_t)v151, (uint64_t)&__p, (uint64_t)&v161, (const char **)__dst);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v35 = (std::__shared_weak_count *)v151[1];
  if (v151[1])
  {
    v36 = (unint64_t *)((char *)v151[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  sub_22319ED0C(__dst, (uint64_t)&v142);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2245C7A50;
  strcpy(__p.__r_.__value_.__l.__data_, "com.apple.recon3d.logging_level.internal");
  v164 = "internal";
  v165 = 8;
  sub_223CB9080((uint64_t)__dst, (uint64_t)&__p, (uint64_t)v160, &v164);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v38 = *(std::__shared_weak_count **)&__dst[8];
    if (!*(_QWORD *)&__dst[8])
      goto LABEL_63;
  }
  else
  {
    v38 = *(std::__shared_weak_count **)&__dst[8];
    if (!*(_QWORD *)&__dst[8])
      goto LABEL_63;
  }
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    if (!BYTE4(v161))
      goto LABEL_68;
    goto LABEL_64;
  }
LABEL_63:
  if (!BYTE4(v161))
    goto LABEL_68;
LABEL_64:
  if (((_DWORD)v161 - 1) >= 3)
    v41 = 2;
  else
    v41 = (_DWORD)v161 + 2;
  sub_22455DA58(*v136, v41);
LABEL_68:
  if (BYTE4(v160[0]))
  {
    if ((LODWORD(v160[0]) - 1) >= 3)
      v42 = 2;
    else
      v42 = LODWORD(v160[0]) + 2;
    sub_22455DCBC(*v136, v42);
  }
  v43 = v143;
  if (v143)
  {
    v44 = (unint64_t *)&v143->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  sub_22319ED0C(&v140, (uint64_t)&v144);
  v46 = atomic_load((unsigned __int8 *)&qword_255795348);
  if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_255795348))
  {
    __cxa_atexit((void (*)(void *))nullsub_599, &off_2540CA630, &dword_22314D000);
    __cxa_guard_release(&qword_255795348);
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  LOBYTE(v156) = 0;
  LOBYTE(v151[0]) = 0;
  LOBYTE(v153) = 0;
  sub_22319ED0C(&v164, (uint64_t)&v140);
  v47 = (char *)operator new(0x28uLL);
  *(_OWORD *)&__dst[8] = xmmword_2245B8E00;
  strcpy(v47, "com.apple.recon3d.visual_logger.logger");
  v161 = "logger";
  v162 = 6;
  *(_QWORD *)__dst = v47;
  sub_223CB6D98((uint64_t)&v164, (uint64_t)__dst, (uint64_t)&__p, &v161);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v48 = (std::__shared_weak_count *)v165;
  if (v165)
  {
    v49 = (unint64_t *)(v165 + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  sub_22319ED0C(&v161, (uint64_t)&v140);
  *(_QWORD *)__dst = operator new(0x30uLL);
  *(_OWORD *)&__dst[8] = xmmword_2245C7A50;
  strcpy(*(char **)__dst, "com.apple.recon3d.visual_logger.contexts");
  v160[0] = "contexts";
  v160[1] = (char *)8;
  sub_223CB6D98((uint64_t)&v161, (uint64_t)__dst, (uint64_t)v151, v160);
  if ((__dst[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__dst);
    v51 = (std::__shared_weak_count *)v162;
    if (!v162)
      goto LABEL_93;
  }
  else
  {
    v51 = (std::__shared_weak_count *)v162;
    if (!v162)
      goto LABEL_93;
  }
  v52 = (unint64_t *)&v51->__shared_owners_;
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (v53)
  {
LABEL_93:
    if (!(_BYTE)v156)
      goto LABEL_105;
    goto LABEL_94;
  }
  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
  std::__shared_weak_count::__release_weak(v51);
  if (!(_BYTE)v156)
    goto LABEL_105;
LABEL_94:
  if ((_BYTE)v153)
  {
    if (SHIBYTE(v152) < 0)
    {
      sub_223197FA4(__dst, v151[0], (unint64_t)v151[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v151;
      *(_QWORD *)&__dst[16] = v152;
    }
  }
  else
  {
    __dst[23] = 0;
    __dst[0] = 0;
  }
  sub_223FF3E8C(&__p, (uint64_t)__dst, (uint64_t)&off_2540CA630, 0);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
LABEL_105:
  if ((_BYTE)v153 && SHIBYTE(v152) < 0)
    operator delete(v151[0]);
  if ((_BYTE)v156 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v54 = v141;
  if (v141)
  {
    v55 = (unint64_t *)&v141->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  sub_22319ED0C(&v138, (uint64_t)&v144);
  sub_22321D280(a1, (uint64_t)&v138);
  v57 = v139;
  if (!v139)
    goto LABEL_213;
  v58 = (unint64_t *)&v139->__shared_owners_;
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 - 1, v58));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
    if (*(_BYTE *)(a1 + 1196))
    {
LABEL_121:
      v60 = operator new(0xC0uLL, MEMORY[0x24BEDB6B8]);
      v61 = v60;
      if (v60)
      {
        sub_2234213C8((uint64_t)(v60 + 2), (__int128 *)(a1 + 1168), (__int128 *)(a1 + 144));
        v61[46] = 1;
        *(_QWORD *)v61 = &off_24EC29EB8;
      }
      v62 = *(_QWORD *)(a1 + 1216);
      *(_QWORD *)(a1 + 1216) = v61;
      if (v62)
        goto LABEL_124;
      goto LABEL_125;
    }
  }
  else
  {
LABEL_213:
    if (*(_BYTE *)(a1 + 1196))
      goto LABEL_121;
  }
  v78 = *(_QWORD *)(a1 + 1216);
  *(_QWORD *)(a1 + 1216) = 0;
  if (v78)
LABEL_124:
    (*(void (**)(void))(a1 + 1224))();
LABEL_125:
  *(_QWORD *)(a1 + 1224) = sub_2232E5358;
  v63 = *(unsigned __int8 *)(a1 + 44);
  v64 = operator new();
  memset(&__p, 0, sizeof(__p));
  sub_224502A64(v64, v63 == 0, "reconstruction_tg", 0x11uLL, (uint64_t *)&__p);
  v65 = *v137;
  *v137 = v64;
  if (v65)
  {
    v66 = *(std::__shared_weak_count **)(v65 + 40);
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    sub_22323DFE4(v65 + 8, *(_QWORD *)(v65 + 16));
    MEMORY[0x227684CE8](v65, 0x1020C401722722ELL);
    v64 = *v137;
  }
  v69 = operator new();
  sub_22361A318(v69, a1, v64);
  v70 = *(_QWORD *)(a1 + 1208);
  *(_QWORD *)(a1 + 1208) = v69;
  if (v70)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    v69 = *(_QWORD *)(a1 + 1208);
  }
  v71 = *(_QWORD **)(v69 + 56);
  if (v71[2])
  {
    v72 = *(_QWORD *)(v71[4] + 72);
    v73 = (_QWORD *)operator new();
    v73[1] = &off_24EC2A750;
    v74 = v73 + 1;
    *v73 = &off_24EC2A6D8;
    v73[2] = a1;
    v73[4] = v73 + 1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC2B380;
    v75 = (_QWORD *)operator new();
    *v75 = &off_24EC2A6D8;
    v76 = v75 + 1;
    v77 = v73[4];
    if (v77)
    {
      if ((_QWORD *)v77 == v74)
      {
        v75[4] = v76;
        (*(void (**)(_QWORD *))(*v74 + 24))(v74);
LABEL_143:
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v75;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)(v72 + 120) + 16))(v72 + 120, &__p);
        size = __p.__r_.__value_.__l.__size_;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC2B380;
        __p.__r_.__value_.__l.__size_ = 0;
        if (size)
          (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
        (*(void (**)(_QWORD *))(*v73 + 8))(v73);
        v80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 32) + 72);
        v81 = (_QWORD *)operator new();
        *v81 = &off_24EC2A7E0;
        v81[1] = &off_24EC2A858;
        v82 = v81 + 1;
        v81[4] = v81 + 1;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC2B3B8;
        v83 = (_QWORD *)operator new();
        *v83 = &off_24EC2A7E0;
        v84 = v83 + 1;
        v85 = v81[4];
        if (v85)
        {
          if ((_QWORD *)v85 == v82)
          {
            v83[4] = v84;
            (*(void (**)(_QWORD *))(*v82 + 24))(v82);
LABEL_150:
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v83;
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)(v80 + 288) + 16))(v80 + 288, &__p);
            v86 = __p.__r_.__value_.__l.__size_;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC2B3B8;
            __p.__r_.__value_.__l.__size_ = 0;
            if (v86)
              (*(void (**)(std::string::size_type))(*(_QWORD *)v86 + 8))(v86);
            (*(void (**)(_QWORD *))(*v81 + 8))(v81);
            v87 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 32) + 72);
            v88 = (_QWORD *)operator new();
            *v88 = &off_24EC2A8E8;
            v88[1] = &off_24EC2A960;
            v89 = v88 + 1;
            v88[4] = v88 + 1;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC2B3F0;
            v90 = (_QWORD *)operator new();
            *v90 = &off_24EC2A8E8;
            v91 = v90 + 1;
            v92 = v88[4];
            if (v92)
            {
              if ((_QWORD *)v92 == v89)
              {
                v90[4] = v91;
                (*(void (**)(_QWORD *))(*v89 + 24))(v89);
LABEL_157:
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)v90;
                (*(void (**)(uint64_t, std::string *))(*(_QWORD *)(v87 + 456) + 16))(v87 + 456, &__p);
                v93 = __p.__r_.__value_.__l.__size_;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC2B3F0;
                __p.__r_.__value_.__l.__size_ = 0;
                if (v93)
                  (*(void (**)(std::string::size_type))(*(_QWORD *)v93 + 8))(v93);
                (*(void (**)(_QWORD *))(*v88 + 8))(v88);
                v94 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 32) + 72);
                v95 = (_QWORD *)operator new();
                *v95 = &off_24EC2A9F0;
                v95[1] = &off_24EC2AA68;
                v96 = v95 + 1;
                v95[4] = v95 + 1;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC2B428;
                v97 = (_QWORD *)operator new();
                *v97 = &off_24EC2A9F0;
                v98 = v97 + 1;
                v99 = v95[4];
                if (v99)
                {
                  if ((_QWORD *)v99 == v96)
                  {
                    v97[4] = v98;
                    (*(void (**)(_QWORD *))(*v96 + 24))(v96);
LABEL_164:
                    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v97;
                    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)(v94 + 624) + 16))(v94 + 624, &__p);
                    v100 = __p.__r_.__value_.__l.__size_;
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC2B428;
                    __p.__r_.__value_.__l.__size_ = 0;
                    if (v100)
                      (*(void (**)(std::string::size_type))(*(_QWORD *)v100 + 8))(v100);
                    (*(void (**)(_QWORD *))(*v95 + 8))(v95);
                    v101 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 32) + 72);
                    v102 = (_QWORD *)operator new();
                    *v102 = &off_24EC2AAF8;
                    v102[1] = &off_24EC2AB70;
                    v103 = v102 + 1;
                    v102[4] = v102 + 1;
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC2B460;
                    v104 = (_QWORD *)operator new();
                    *v104 = &off_24EC2AAF8;
                    v105 = v104 + 1;
                    v106 = v102[4];
                    if (v106)
                    {
                      if ((_QWORD *)v106 == v103)
                      {
                        v104[4] = v105;
                        (*(void (**)(_QWORD *))(*v103 + 24))(v103);
LABEL_171:
                        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v104;
                        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)(v101 + 792) + 16))(v101 + 792, &__p);
                        v107 = __p.__r_.__value_.__l.__size_;
                        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC2B460;
                        __p.__r_.__value_.__l.__size_ = 0;
                        if (v107)
                          (*(void (**)(std::string::size_type))(*(_QWORD *)v107 + 8))(v107);
                        (*(void (**)(_QWORD *))(*v102 + 8))(v102);
                        v108 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 32) + 72);
                        v109 = (_QWORD *)operator new();
                        *v109 = &off_24EC2AC00;
                        v109[1] = &off_24EC2AC78;
                        v110 = v109 + 1;
                        v109[4] = v109 + 1;
                        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC2B498;
                        v111 = (_QWORD *)operator new();
                        *v111 = &off_24EC2AC00;
                        v112 = v111 + 1;
                        v113 = v109[4];
                        if (v113)
                        {
                          if ((_QWORD *)v113 == v110)
                          {
                            v111[4] = v112;
                            (*(void (**)(_QWORD *))(*v110 + 24))(v110);
                            goto LABEL_178;
                          }
                          v113 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v113 + 16))(v113, v112);
                        }
                        v111[4] = v113;
LABEL_178:
                        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v111;
                        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)(v108 + 960) + 16))(v108 + 960, &__p);
                        v114 = __p.__r_.__value_.__l.__size_;
                        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC2B498;
                        __p.__r_.__value_.__l.__size_ = 0;
                        if (v114)
                          (*(void (**)(std::string::size_type))(*(_QWORD *)v114 + 8))(v114);
                        (*(void (**)(_QWORD *))(*v109 + 8))(v109);
                        v71 = *(_QWORD **)(*(_QWORD *)(a1 + 1208) + 56);
                        goto LABEL_181;
                      }
                      v106 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v106 + 16))(v106, v105);
                    }
                    v104[4] = v106;
                    goto LABEL_171;
                  }
                  v99 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v99 + 16))(v99, v98);
                }
                v97[4] = v99;
                goto LABEL_164;
              }
              v92 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v92 + 16))(v92, v91);
            }
            v90[4] = v92;
            goto LABEL_157;
          }
          v85 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v85 + 16))(v85, v84);
        }
        v83[4] = v85;
        goto LABEL_150;
      }
      v77 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 16))(v77, v76);
    }
    v75[4] = v77;
    goto LABEL_143;
  }
LABEL_181:
  v115 = v71[5];
  if (!v115)
    goto LABEL_199;
  v116 = *(_QWORD *)(v115 + 72);
  v117 = (_QWORD *)operator new();
  v117[1] = &off_24EC2AD70;
  v118 = v117 + 1;
  *v117 = &off_24EC2AD08;
  v117[2] = a1;
  v117[4] = v117 + 1;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC2B348;
  v119 = (_QWORD *)operator new();
  *v119 = &off_24EC2AD08;
  v120 = v119 + 1;
  v121 = v117[4];
  if (!v121)
    goto LABEL_185;
  if ((_QWORD *)v121 != v118)
  {
    v121 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v121 + 16))(v121, v120);
LABEL_185:
    v119[4] = v121;
    goto LABEL_187;
  }
  v119[4] = v120;
  (*(void (**)(_QWORD *))(*v118 + 24))(v118);
LABEL_187:
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v119;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)(v116 + 120) + 16))(v116 + 120, &__p);
  v122 = __p.__r_.__value_.__l.__size_;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC2B348;
  __p.__r_.__value_.__l.__size_ = 0;
  if (v122)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v122 + 8))(v122);
  (*(void (**)(_QWORD *))(*v117 + 8))(v117);
  v123 = *(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56);
  if (*(_QWORD *)(v123 + 40))
  {
    v124 = *(_QWORD *)(v123 + 56);
    if (v124)
    {
      v125 = *(_QWORD *)(v124 + 72);
      v126 = (_QWORD *)operator new();
      v126[1] = &off_24EC2AEB0;
      v127 = v126 + 1;
      *v126 = &off_24EC2AE48;
      v126[2] = a1;
      v126[4] = v126 + 1;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC2B310;
      v128 = (_QWORD *)operator new();
      *v128 = &off_24EC2AE48;
      v129 = v128 + 1;
      v130 = v126[4];
      if (v130)
      {
        if ((_QWORD *)v130 == v127)
        {
          v128[4] = v129;
          (*(void (**)(_QWORD *))(*v127 + 24))(v127);
          goto LABEL_196;
        }
        v130 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v130 + 16))(v130, v129);
      }
      v128[4] = v130;
LABEL_196:
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v128;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)(v125 + 120) + 16))(v125 + 120, &__p);
      v131 = __p.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC2B310;
      __p.__r_.__value_.__l.__size_ = 0;
      if (v131)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v131 + 8))(v131);
      (*(void (**)(_QWORD *))(*v126 + 8))(v126);
    }
  }
LABEL_199:
  v132 = v145;
  if (v145)
  {
    v133 = (unint64_t *)&v145->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  kdebug_trace();
  return a1;
}

void sub_2232D84B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  __cxa_guard_abort(&qword_255795030);
  sub_2231874DC((uint64_t)&a22);
  sub_22455C510(a12);
  sub_2232D88EC(v41 + 1456);
  sub_22319828C(v41 + 1440);
  v43 = *(_QWORD *)(v41 + 1424);
  *(_QWORD *)(v41 + 1424) = 0;
  if (v43)
    (*(void (**)(void))(v41 + 1432))();
  sub_2232D8954((void **)(v41 + 1400));
  sub_2232D8954((void **)(v41 + 1376));
  sub_2232D8954((void **)(v41 + 1352));
  sub_2232D8954((void **)(v41 + 1328));
  sub_2232D8954((void **)(v41 + 1304));
  sub_2232D8954((void **)(v41 + 1280));
  sub_2232D8954((void **)(v41 + 1256));
  sub_2232D8954((void **)(v41 + 1232));
  v44 = *(_QWORD *)(v41 + 1216);
  *(_QWORD *)(v41 + 1216) = 0;
  if (v44)
  {
    (*(void (**)(void))(v41 + 1224))();
    v45 = *(_QWORD *)(v41 + 1208);
    *(_QWORD *)(v41 + 1208) = 0;
    if (!v45)
    {
LABEL_5:
      sub_2232D885C(a13);
      sub_223223FC0(v41);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v45 = *(_QWORD *)(v41 + 1208);
    *(_QWORD *)(v41 + 1208) = 0;
    if (!v45)
      goto LABEL_5;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  sub_2232D885C(a13);
  sub_223223FC0(v41);
  _Unwind_Resume(a1);
}

uint64_t *sub_2232D885C(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 40);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    sub_22323DFE4(v2 + 8, *(_QWORD *)(v2 + 16));
    MEMORY[0x227684CE8](v2, 0x1020C401722722ELL);
  }
  return a1;
}

uint64_t sub_2232D88EC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void **sub_2232D8954(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v7 = v3 - 32;
      v5 = (char *)*((_QWORD *)v3 - 1);
      if (v3 - 32 == v5)
      {
        v5 = v3 - 32;
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_6:
      v3 = v7;
      if (v7 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

uint64_t sub_2232D89E0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v64;

  sub_22455C510(a1 + 1472);
  v2 = *(std::__shared_weak_count **)(a1 + 1464);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 1448);
  if (!v5)
    goto LABEL_10;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
  {
LABEL_10:
    v8 = *(_QWORD *)(a1 + 1424);
    *(_QWORD *)(a1 + 1424) = 0;
    if (!v8)
      goto LABEL_12;
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v64 = *(_QWORD *)(a1 + 1424);
  *(_QWORD *)(a1 + 1424) = 0;
  if (v64)
LABEL_11:
    (*(void (**)(void))(a1 + 1432))();
LABEL_12:
  v9 = *(_QWORD *)(a1 + 1400);
  if (!v9)
    goto LABEL_23;
  v10 = *(_QWORD *)(a1 + 1408);
  v11 = *(void **)(a1 + 1400);
  if (v10 != v9)
  {
    while (1)
    {
      v14 = v10 - 32;
      v12 = *(_QWORD **)(v10 - 8);
      if ((_QWORD *)(v10 - 32) == v12)
      {
        v12 = (_QWORD *)(v10 - 32);
        v13 = 4;
      }
      else
      {
        if (!v12)
          goto LABEL_17;
        v13 = 5;
      }
      (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_17:
      v10 = v14;
      if (v14 == v9)
      {
        v11 = *(void **)(a1 + 1400);
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 1408) = v9;
  operator delete(v11);
LABEL_23:
  v15 = *(_QWORD *)(a1 + 1376);
  if (!v15)
    goto LABEL_34;
  v16 = *(_QWORD *)(a1 + 1384);
  v17 = *(void **)(a1 + 1376);
  if (v16 != v15)
  {
    while (1)
    {
      v20 = v16 - 32;
      v18 = *(_QWORD **)(v16 - 8);
      if ((_QWORD *)(v16 - 32) == v18)
      {
        v18 = (_QWORD *)(v16 - 32);
        v19 = 4;
      }
      else
      {
        if (!v18)
          goto LABEL_28;
        v19 = 5;
      }
      (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_28:
      v16 = v20;
      if (v20 == v15)
      {
        v17 = *(void **)(a1 + 1376);
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 1384) = v15;
  operator delete(v17);
LABEL_34:
  v21 = *(_QWORD *)(a1 + 1352);
  if (!v21)
    goto LABEL_45;
  v22 = *(_QWORD *)(a1 + 1360);
  v23 = *(void **)(a1 + 1352);
  if (v22 != v21)
  {
    while (1)
    {
      v26 = v22 - 32;
      v24 = *(_QWORD **)(v22 - 8);
      if ((_QWORD *)(v22 - 32) == v24)
      {
        v24 = (_QWORD *)(v22 - 32);
        v25 = 4;
      }
      else
      {
        if (!v24)
          goto LABEL_39;
        v25 = 5;
      }
      (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
      v22 = v26;
      if (v26 == v21)
      {
        v23 = *(void **)(a1 + 1352);
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 1360) = v21;
  operator delete(v23);
LABEL_45:
  v27 = *(_QWORD *)(a1 + 1328);
  if (!v27)
    goto LABEL_56;
  v28 = *(_QWORD *)(a1 + 1336);
  v29 = *(void **)(a1 + 1328);
  if (v28 != v27)
  {
    while (1)
    {
      v32 = v28 - 32;
      v30 = *(_QWORD **)(v28 - 8);
      if ((_QWORD *)(v28 - 32) == v30)
      {
        v30 = (_QWORD *)(v28 - 32);
        v31 = 4;
      }
      else
      {
        if (!v30)
          goto LABEL_50;
        v31 = 5;
      }
      (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_50:
      v28 = v32;
      if (v32 == v27)
      {
        v29 = *(void **)(a1 + 1328);
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 1336) = v27;
  operator delete(v29);
LABEL_56:
  v33 = *(_QWORD *)(a1 + 1304);
  if (!v33)
    goto LABEL_67;
  v34 = *(_QWORD *)(a1 + 1312);
  v35 = *(void **)(a1 + 1304);
  if (v34 != v33)
  {
    while (1)
    {
      v38 = v34 - 32;
      v36 = *(_QWORD **)(v34 - 8);
      if ((_QWORD *)(v34 - 32) == v36)
      {
        v36 = (_QWORD *)(v34 - 32);
        v37 = 4;
      }
      else
      {
        if (!v36)
          goto LABEL_61;
        v37 = 5;
      }
      (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_61:
      v34 = v38;
      if (v38 == v33)
      {
        v35 = *(void **)(a1 + 1304);
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 1312) = v33;
  operator delete(v35);
LABEL_67:
  v39 = *(_QWORD *)(a1 + 1280);
  if (!v39)
    goto LABEL_78;
  v40 = *(_QWORD *)(a1 + 1288);
  v41 = *(void **)(a1 + 1280);
  if (v40 != v39)
  {
    while (1)
    {
      v44 = v40 - 32;
      v42 = *(_QWORD **)(v40 - 8);
      if ((_QWORD *)(v40 - 32) == v42)
      {
        v42 = (_QWORD *)(v40 - 32);
        v43 = 4;
      }
      else
      {
        if (!v42)
          goto LABEL_72;
        v43 = 5;
      }
      (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_72:
      v40 = v44;
      if (v44 == v39)
      {
        v41 = *(void **)(a1 + 1280);
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 1288) = v39;
  operator delete(v41);
LABEL_78:
  v45 = *(_QWORD *)(a1 + 1256);
  if (!v45)
    goto LABEL_89;
  v46 = *(_QWORD *)(a1 + 1264);
  v47 = *(void **)(a1 + 1256);
  if (v46 != v45)
  {
    while (1)
    {
      v50 = v46 - 32;
      v48 = *(_QWORD **)(v46 - 8);
      if ((_QWORD *)(v46 - 32) == v48)
      {
        v48 = (_QWORD *)(v46 - 32);
        v49 = 4;
      }
      else
      {
        if (!v48)
          goto LABEL_83;
        v49 = 5;
      }
      (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_83:
      v46 = v50;
      if (v50 == v45)
      {
        v47 = *(void **)(a1 + 1256);
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 1264) = v45;
  operator delete(v47);
LABEL_89:
  v51 = *(_QWORD *)(a1 + 1232);
  if (!v51)
    goto LABEL_100;
  v52 = *(_QWORD *)(a1 + 1240);
  v53 = *(void **)(a1 + 1232);
  if (v52 != v51)
  {
    while (1)
    {
      v56 = v52 - 32;
      v54 = *(_QWORD **)(v52 - 8);
      if ((_QWORD *)(v52 - 32) == v54)
      {
        v54 = (_QWORD *)(v52 - 32);
        v55 = 4;
      }
      else
      {
        if (!v54)
          goto LABEL_94;
        v55 = 5;
      }
      (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_94:
      v52 = v56;
      if (v56 == v51)
      {
        v53 = *(void **)(a1 + 1232);
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 1240) = v51;
  operator delete(v53);
LABEL_100:
  v57 = *(_QWORD *)(a1 + 1216);
  *(_QWORD *)(a1 + 1216) = 0;
  if (v57)
    (*(void (**)(void))(a1 + 1224))();
  v58 = *(_QWORD *)(a1 + 1208);
  *(_QWORD *)(a1 + 1208) = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = *(_QWORD *)(a1 + 1200);
  *(_QWORD *)(a1 + 1200) = 0;
  if (v59)
  {
    v60 = *(std::__shared_weak_count **)(v59 + 40);
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    sub_22323DFE4(v59 + 8, *(_QWORD *)(v59 + 16));
    MEMORY[0x227684CE8](v59, 0x1020C401722722ELL);
  }
  return sub_223223FC0(a1);
}

uint64_t sub_2232D8E5C(uint64_t a1, uint64_t *a2, _QWORD *a3, CFTypeRef *a4)
{
  uint64_t v5;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  CFTypeRef v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void **v26;
  uint64_t v27;
  char *v28;
  CFTypeRef cf;
  std::__shared_weak_count *v30;
  std::error_condition v31;
  void *__p;
  __int128 v33;
  void **p_p;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 16);
  if (v5
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 80) + 1448) + 160))(*(_QWORD *)(*(_QWORD *)(v5 + 80) + 1448)) & 1) != 0)
  {
    if (*a2)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 16) + 72);
      v10 = (_QWORD *)a3[3];
      if (v10)
      {
        if (v10 == a3)
        {
          p_p = &__p;
          (*(void (**)(_QWORD *, void **))(*a3 + 24))(a3, &__p);
        }
        else
        {
          p_p = (void **)(*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
        }
      }
      else
      {
        p_p = 0;
      }
      v20 = (std::__shared_weak_count *)a2[1];
      v35 = *a2;
      v36 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, void **))(*(_QWORD *)(v9 + 2272) + 16))(v9 + 2272, &__p);
      v23 = v36;
      if (v36)
      {
        v24 = (unint64_t *)&v36->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = p_p;
      if (p_p == &__p)
      {
        v27 = 4;
        v26 = &__p;
      }
      else
      {
        if (!p_p)
          return 1;
        v27 = 5;
      }
      (*((void (**)(void))*v26 + v27))();
      return 1;
    }
    __p = operator new(0x20uLL);
    v33 = xmmword_2245B8EA0;
    strcpy((char *)__p, "Occupancy query request is null");
    v11 = (char *)operator new(0x60uLL);
    v28 = v11;
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a4)
    {
      *(_QWORD *)&v31.__val_ = 22;
      v31.__cat_ = std::generic_category();
      sub_2245321DC(&v31, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v17 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v17;
      v13 = v30;
      if (!v30)
        goto LABEL_17;
      v18 = (unint64_t *)&v30->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (v19)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    __p = operator new(0x38uLL);
    v33 = xmmword_2245C44A0;
    strcpy((char *)__p, "Session doesn't have occupancy-mapping capability");
    v11 = (char *)operator new(0x60uLL);
    v28 = v11;
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a4)
    {
      *(_QWORD *)&v31.__val_ = 102;
      v31.__cat_ = std::generic_category();
      sub_2245321DC(&v31, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v12;
      v13 = v30;
      if (!v30)
        goto LABEL_17;
      v14 = (unint64_t *)&v30->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (v15)
        goto LABEL_17;
LABEL_16:
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
LABEL_17:
      v11 = v28;
    }
  }
  operator delete(v11);
  if (SHIBYTE(v33) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232D9240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  operator delete(v21);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232D929C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(_QWORD **)(a1 + 24);
    if (v5 != (_QWORD *)a1)
      goto LABEL_6;
LABEL_9:
    v6 = 4;
    v5 = (_QWORD *)a1;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(_QWORD **)(a1 + 24);
  if (v5 == (_QWORD *)a1)
    goto LABEL_9;
LABEL_6:
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

BOOL sub_2232D932C(uint64_t a1, _QWORD *a2, CFTypeRef *a3)
{
  uint64_t v3;
  _QWORD *v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;
  void *__p;
  __int128 v21;
  void **p_p;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 16);
  if (v3)
  {
    v5 = (_QWORD *)a2[3];
    if (v5)
    {
      if (v5 == a2)
      {
        p_p = &__p;
        (*(void (**)(_QWORD *, void **))(*a2 + 24))(a2, &__p);
      }
      else
      {
        p_p = (void **)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
      }
    }
    else
    {
      p_p = 0;
    }
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 16) + 72) + 1272);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) & 1) == 0
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp", 235, (uint64_t)"session_node_group_->InputAskGlobalMesh().Enabled()", 51, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 16) + 72) + 1264;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 16))(v13, &__p);
    v14 = p_p;
    if (p_p == &__p)
    {
      v15 = 4;
      v14 = &__p;
      goto LABEL_25;
    }
    if (p_p)
    {
      v15 = 5;
LABEL_25:
      (*((void (**)(void))*v14 + v15))();
    }
  }
  else
  {
    __p = operator new(0x28uLL);
    v21 = xmmword_2245B9440;
    strcpy((char *)__p, "Session doesn't have meshing capability");
    v7 = (char *)operator new(0x60uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 102;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v8;
      v9 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if (SHIBYTE(v21) < 0)
      operator delete(__p);
  }
  return v3 != 0;
}

void sub_2232D95CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2232D965C(uint64_t a1, _QWORD *a2, CFTypeRef *a3)
{
  uint64_t v3;
  _QWORD *v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;
  void *__p;
  __int128 v21;
  void **p_p;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 16);
  if (v3)
  {
    v5 = (_QWORD *)a2[3];
    if (v5)
    {
      if (v5 == a2)
      {
        p_p = &__p;
        (*(void (**)(_QWORD *, void **))(*a2 + 24))(a2, &__p);
      }
      else
      {
        p_p = (void **)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
      }
    }
    else
    {
      p_p = 0;
    }
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 16) + 72) + 1440);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) & 1) == 0
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp", 249, (uint64_t)"session_node_group_->InputAskOccupancyMesh().Enabled()", 54, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 16) + 72) + 1432;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 16))(v13, &__p);
    v14 = p_p;
    if (p_p == &__p)
    {
      v15 = 4;
      v14 = &__p;
      goto LABEL_25;
    }
    if (p_p)
    {
      v15 = 5;
LABEL_25:
      (*((void (**)(void))*v14 + v15))();
    }
  }
  else
  {
    __p = operator new(0x28uLL);
    v21 = xmmword_2245B9440;
    strcpy((char *)__p, "Session doesn't have meshing capability");
    v7 = (char *)operator new(0x60uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 102;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v8;
      v9 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if (SHIBYTE(v21) < 0)
      operator delete(__p);
  }
  return v3 != 0;
}

void sub_2232D98FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2232D998C(uint64_t a1, _QWORD *a2, CFTypeRef *a3)
{
  uint64_t v3;
  _QWORD *v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;
  void *__p;
  __int128 v21;
  void **p_p;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 16);
  if (v3)
  {
    v5 = (_QWORD *)a2[3];
    if (v5)
    {
      if (v5 == a2)
      {
        p_p = &__p;
        (*(void (**)(_QWORD *, void **))(*a2 + 24))(a2, &__p);
      }
      else
      {
        p_p = (void **)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
      }
    }
    else
    {
      p_p = 0;
    }
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 16) + 72) + 1608);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) & 1) == 0
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp", 264, (uint64_t)"session_node_group_->InputAskGlobalOccupancyMesh().Enabled()", 60, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 16) + 72) + 1600;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 16))(v13, &__p);
    v14 = p_p;
    if (p_p == &__p)
    {
      v15 = 4;
      v14 = &__p;
      goto LABEL_25;
    }
    if (p_p)
    {
      v15 = 5;
LABEL_25:
      (*((void (**)(void))*v14 + v15))();
    }
  }
  else
  {
    __p = operator new(0x28uLL);
    v21 = xmmword_2245B9440;
    strcpy((char *)__p, "Session doesn't have meshing capability");
    v7 = (char *)operator new(0x60uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 102;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v8;
      v9 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if (SHIBYTE(v21) < 0)
      operator delete(__p);
  }
  return v3 != 0;
}

void sub_2232D9C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2232D9CBC(uint64_t a1, _QWORD *a2, CFTypeRef *a3)
{
  uint64_t v3;
  _QWORD *v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;
  void *__p;
  __int128 v21;
  void **p_p;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 16);
  if (v3)
  {
    v5 = (_QWORD *)a2[3];
    if (v5)
    {
      if (v5 == a2)
      {
        p_p = &__p;
        (*(void (**)(_QWORD *, void **))(*a2 + 24))(a2, &__p);
      }
      else
      {
        p_p = (void **)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
      }
    }
    else
    {
      p_p = 0;
    }
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 16) + 72) + 1776);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) & 1) == 0
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp", 279, (uint64_t)"session_node_group_->InputAskOccupancyBlockMesh().Enabled()", 59, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 16) + 72) + 1768;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 16))(v13, &__p);
    v14 = p_p;
    if (p_p == &__p)
    {
      v15 = 4;
      v14 = &__p;
      goto LABEL_25;
    }
    if (p_p)
    {
      v15 = 5;
LABEL_25:
      (*((void (**)(void))*v14 + v15))();
    }
  }
  else
  {
    __p = operator new(0x28uLL);
    v21 = xmmword_2245B9440;
    strcpy((char *)__p, "Session doesn't have meshing capability");
    v7 = (char *)operator new(0x60uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 102;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v8;
      v9 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if (SHIBYTE(v21) < 0)
      operator delete(__p);
  }
  return v3 != 0;
}

void sub_2232D9F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_2232D9FEC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2B380;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_2232DA02C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2B3B8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_2232DA06C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2B3F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_2232DA0AC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2B428;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_2232DA0EC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2B460;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_2232DA12C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2B498;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_2232DA16C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2B348;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_2232DA1AC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2B310;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t sub_2232DA1EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t i;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  unsigned __int8 **v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  char v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  __int128 v38;
  __int128 v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v38 = 0u;
  v39 = 0u;
  v40 = 728303128;
  kdebug_trace();
  v7 = *(_OWORD *)(a1 + 160);
  v41 = *(_OWORD *)(a1 + 144);
  v6 = v41;
  v42 = v7;
  v9 = *(_OWORD *)(a1 + 192);
  v43 = *(_OWORD *)(a1 + 176);
  v8 = v43;
  v44 = v9;
  v10 = *(_OWORD *)(a1 + 224);
  v45 = *(_OWORD *)(a1 + 208);
  v46 = v10;
  v11 = *(_OWORD *)(a1 + 256);
  v47 = *(_OWORD *)(a1 + 240);
  v48 = v11;
  v12 = *(unsigned __int8 *)(a2 + 1744);
  *(_OWORD *)(a2 + 1664) = v9;
  *(_OWORD *)(a2 + 1648) = v8;
  *(_OWORD *)(a2 + 1632) = v7;
  *(_OWORD *)(a2 + 1616) = v6;
  v13 = v46;
  *(_OWORD *)(a2 + 1680) = v45;
  *(_OWORD *)(a2 + 1696) = v13;
  v14 = v48;
  *(_OWORD *)(a2 + 1712) = v47;
  *(_OWORD *)(a2 + 1728) = v14;
  if (!v12)
    *(_BYTE *)(a2 + 1744) = 1;
  v15 = *(_QWORD *)(a2 + 1776);
  for (i = *(_QWORD *)(a2 + 1784); v15 != i; v15 += 224)
  {
    v17 = v42;
    *(_OWORD *)(v15 + 88) = v41;
    *(_OWORD *)(v15 + 104) = v17;
    v18 = v44;
    *(_OWORD *)(v15 + 120) = v43;
    *(_OWORD *)(v15 + 136) = v18;
    v19 = v46;
    *(_OWORD *)(v15 + 152) = v45;
    *(_OWORD *)(v15 + 168) = v19;
    v20 = v48;
    *(_OWORD *)(v15 + 184) = v47;
    v21 = *(unsigned __int8 *)(v15 + 216);
    *(_OWORD *)(v15 + 200) = v20;
    if (!v21)
      *(_BYTE *)(v15 + 216) = 1;
  }
  sub_2236065E4(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56), a2, a3);
  v22 = *(_QWORD *)(a1 + 1216);
  if (v22 && *(_BYTE *)(a3 + 504))
  {
    if (*(_BYTE *)(a3 + 440))
      v23 = (unsigned __int8 **)(a3 + 8);
    else
      v23 = 0;
    if (*(_BYTE *)(a3 + 464))
      v24 = *(_QWORD *)(a3 + 448);
    else
      v24 = 0;
    if (*(_QWORD *)(a3 + 448))
      v25 = *(_BYTE *)(a3 + 464) != 0;
    else
      v25 = 0;
    if (*(_BYTE *)(a3 + 488))
      v26 = *(uint64_t **)(a3 + 472);
    else
      v26 = 0;
    if (*(_QWORD *)(a3 + 472))
      v27 = *(_BYTE *)(a3 + 488) != 0;
    else
      v27 = 0;
    sub_223421994(v22 + 8, v23, *(_BYTE *)(a3 + 440), v24, v25, v26, v27, (uint64_t)&v35);
    v28 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  return kdebug_trace();
}

void sub_2232DA40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_2232953B0(v5);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232DA42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232DA444(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  unint64_t v6;
  unsigned __int8 v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::exception_ptr v13;
  __n128 v14;
  std::exception_ptr v15;
  uint64_t v16;
  std::exception_ptr v17;
  std::unique_lock<std::mutex> __lk;

  sub_2236265BC((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 16) + 72) + 2792), (uint64_t)&v15, &v16);
  v3 = v16;
  if (!v16)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp", 441, (uint64_t)"rsl_future.valid()", 18, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v3 = v16;
  }
  v16 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v3 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v3 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v3, &__lk);
  v4 = *(_QWORD *)(v3 + 16);
  v15.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v15);
  if (v4)
  {
    v13.__ptr_ = std::exception_ptr::exception_ptr(&v17, (const std::exception_ptr *)(v3 + 16));
    std::rethrow_exception(v13);
    __break(1u);
  }
  else
  {
    v5 = *(__n128 *)(v3 + 144);
    v6 = *(_QWORD *)(v3 + 160);
    *(_QWORD *)(v3 + 152) = 0;
    *(_QWORD *)(v3 + 160) = 0;
    *(_QWORD *)(v3 + 144) = 0;
    v7 = *(_BYTE *)(v3 + 168);
    v14 = v5;
    if (__lk.__owns_)
    {
      std::mutex::unlock(__lk.__m_);
      v5 = v14;
    }
    v8 = (unint64_t *)(v3 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v3 + 16))(v3, v5);
      v5 = v14;
    }
    *a2 = v5;
    a2[1].n128_u64[0] = v6;
    a2[1].n128_u8[8] = v7;
    a2[2].n128_u8[0] = 1;
    v10 = v16;
    if (v16)
    {
      v11 = (unint64_t *)(v16 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    }
  }
}

void sub_2232DA5D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,int a24,int a25,__int128 a26)
{
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  char *v34;
  __int128 v35;
  __int128 v36;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v28 - 56));
  if (*(_BYTE *)(v28 - 40))
    std::mutex::unlock(*(std::mutex **)(v28 - 48));
  if (v27)
  {
    v31 = v27 + 1;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
      (*(void (**)(unint64_t *))(*v27 + 16))(v27);
  }
  v33 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    a25 = 89;
    v34 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33);
    sub_223174DE4(&a18, v34);
    sub_223174DE4(&__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    sub_2232B84FC((unsigned int *)&a25, (uint64_t)&a18, (CFErrorRef *)&a26);
    v35 = a26;
    a26 = 0uLL;
    *(_OWORD *)v26 = v35;
    *(_QWORD *)(v28 - 80) = 0;
    *(_QWORD *)(v28 - 72) = 0;
    *(_BYTE *)(v26 + 32) = 0;
    sub_223167354(v28 - 80);
    sub_223167354((uint64_t)&a26);
    if (a17 < 0)
      operator delete(__p);
    if (a23 < 0)
      operator delete(a18);
  }
  else
  {
    a25 = 89;
    sub_223174DE4(&a18, "Unknown error occurred in meshing.");
    sub_223174DE4(&__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    sub_2232B84FC((unsigned int *)&a25, (uint64_t)&a18, (CFErrorRef *)&a26);
    v36 = a26;
    a26 = 0uLL;
    *(_OWORD *)v26 = v36;
    *(_QWORD *)(v28 - 80) = 0;
    *(_QWORD *)(v28 - 72) = 0;
    *(_BYTE *)(v26 + 32) = 0;
    sub_223167354(v28 - 80);
    sub_223167354((uint64_t)&a26);
    if (a17 < 0)
      operator delete(__p);
    if (a23 < 0)
      operator delete(a18);
  }
  __cxa_end_catch();
  JUMPOUT(0x2232DA564);
}

void sub_2232DA764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t v27;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  __cxa_end_catch();
  v25 = *(unint64_t **)(v23 - 64);
  if (v25)
  {
    v26 = v25 + 1;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
      (*(void (**)(unint64_t *))(*v25 + 16))(v25);
  }
  _Unwind_Resume(a1);
}

void sub_2232DA81C(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  unint64_t v6;
  unsigned __int8 v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::exception_ptr v13;
  __n128 v14;
  std::exception_ptr v15;
  uint64_t v16;
  std::exception_ptr v17;
  std::unique_lock<std::mutex> __lk;

  sub_2236269E4((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 16) + 72) + 2960), (uint64_t)&v15, &v16);
  v3 = v16;
  if (!v16)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp", 455, (uint64_t)"rsl_future.valid()", 18, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v3 = v16;
  }
  v16 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v3 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v3 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v3, &__lk);
  v4 = *(_QWORD *)(v3 + 16);
  v15.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v15);
  if (v4)
  {
    v13.__ptr_ = std::exception_ptr::exception_ptr(&v17, (const std::exception_ptr *)(v3 + 16));
    std::rethrow_exception(v13);
    __break(1u);
  }
  else
  {
    v5 = *(__n128 *)(v3 + 144);
    v6 = *(_QWORD *)(v3 + 160);
    *(_QWORD *)(v3 + 152) = 0;
    *(_QWORD *)(v3 + 160) = 0;
    *(_QWORD *)(v3 + 144) = 0;
    v7 = *(_BYTE *)(v3 + 168);
    v14 = v5;
    if (__lk.__owns_)
    {
      std::mutex::unlock(__lk.__m_);
      v5 = v14;
    }
    v8 = (unint64_t *)(v3 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v3 + 16))(v3, v5);
      v5 = v14;
    }
    *a2 = v5;
    a2[1].n128_u64[0] = v6;
    a2[1].n128_u8[8] = v7;
    a2[2].n128_u8[0] = 1;
    v10 = v16;
    if (v16)
    {
      v11 = (unint64_t *)(v16 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    }
  }
}

void sub_2232DA9AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,int a24,int a25,__int128 a26)
{
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  char *v34;
  __int128 v35;
  __int128 v36;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v28 - 56));
  if (*(_BYTE *)(v28 - 40))
    std::mutex::unlock(*(std::mutex **)(v28 - 48));
  if (v27)
  {
    v31 = v27 + 1;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
      (*(void (**)(unint64_t *))(*v27 + 16))(v27);
  }
  v33 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    a25 = 89;
    v34 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33);
    sub_223174DE4(&a18, v34);
    sub_223174DE4(&__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    sub_2232B84FC((unsigned int *)&a25, (uint64_t)&a18, (CFErrorRef *)&a26);
    v35 = a26;
    a26 = 0uLL;
    *(_OWORD *)v26 = v35;
    *(_QWORD *)(v28 - 80) = 0;
    *(_QWORD *)(v28 - 72) = 0;
    *(_BYTE *)(v26 + 32) = 0;
    sub_223167354(v28 - 80);
    sub_223167354((uint64_t)&a26);
    if (a17 < 0)
      operator delete(__p);
    if (a23 < 0)
      operator delete(a18);
  }
  else
  {
    a25 = 89;
    sub_223174DE4(&a18, "Unknown error occurred in meshing.");
    sub_223174DE4(&__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    sub_2232B84FC((unsigned int *)&a25, (uint64_t)&a18, (CFErrorRef *)&a26);
    v36 = a26;
    a26 = 0uLL;
    *(_OWORD *)v26 = v36;
    *(_QWORD *)(v28 - 80) = 0;
    *(_QWORD *)(v28 - 72) = 0;
    *(_BYTE *)(v26 + 32) = 0;
    sub_223167354(v28 - 80);
    sub_223167354((uint64_t)&a26);
    if (a17 < 0)
      operator delete(__p);
    if (a23 < 0)
      operator delete(a18);
  }
  __cxa_end_catch();
  JUMPOUT(0x2232DA93CLL);
}

void sub_2232DAB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t v27;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  __cxa_end_catch();
  v25 = *(unint64_t **)(v23 - 64);
  if (v25)
  {
    v26 = v25 + 1;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
      (*(void (**)(unint64_t *))(*v25 + 16))(v25);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_2232DABF4(uint64_t a1, CFTypeRef *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, float a7, float a8, float a9, float a10)
{
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  CFErrorRef v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *v26;
  CFErrorRef v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _BYTE __p[32];
  __n128 v32;
  __n128 v33;
  float v34;
  float v35;
  float v36;
  float v37;
  void *v38;
  __int128 v39;
  CFErrorRef v40;
  std::__shared_weak_count *v41;
  std::error_condition v42;

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56);
  if (!*(_QWORD *)(v11 + 40))
  {
    *(_QWORD *)__p = operator new(0x30uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B9450;
    strcpy(*(char **)__p, "Session doesn't have keyframing capability");
    v20 = operator new(0x60uLL);
    v38 = v20;
    v39 = xmmword_2245C45F0;
    strcpy((char *)v20, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v42.__val_ = 102;
      v42.__cat_ = std::generic_category();
      sub_2245321DC(&v42, (uint64_t)__p, &v40);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v21 = v40;
      if (v40)
        CFRetain(v40);
      *a2 = v21;
      v22 = v41;
      if (v41)
      {
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if ((SHIBYTE(v39) & 0x80000000) == 0)
        goto LABEL_27;
      v20 = v38;
    }
    operator delete(v20);
LABEL_27:
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    return 0;
  }
  if (a9 < a10)
  {
    *(__n128 *)__p = a3;
    *(__n128 *)&__p[16] = a4;
    v32 = a5;
    v33 = a6;
    v34 = a7;
    v35 = a8;
    v36 = a9;
    v37 = a10;
    sub_22360C890(v11, (uint64_t)__p, (uint64_t)&v38);
    v12 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
    v13 = v12;
    if (v12)
    {
      sub_223260C0C(v12 + 1, (uint64_t *)&v38);
      *((_DWORD *)v13 + 8) = 1;
      *v13 = &unk_24EC1F2A8;
    }
    v14 = (char *)v38;
    if (v38)
    {
      v15 = (char *)v39;
      v16 = v38;
      if ((void *)v39 != v38)
      {
        do
        {
          v17 = (std::__shared_weak_count *)*((_QWORD *)v15 - 28);
          if (v17)
          {
            v18 = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          v15 -= 248;
        }
        while (v15 != v14);
        v16 = v38;
      }
      *(_QWORD *)&v39 = v14;
      operator delete(v16);
      return v13;
    }
    return v13;
  }
  *(_QWORD *)__p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_2245C7A50;
  strcpy(*(char **)__p, "max_depth must be greater than min_depth");
  v26 = operator new(0x60uLL);
  v38 = v26;
  v39 = xmmword_2245C45F0;
  strcpy((char *)v26, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
  if (a2)
  {
    *(_QWORD *)&v42.__val_ = 22;
    v42.__cat_ = std::generic_category();
    sub_2245321DC(&v42, (uint64_t)__p, &v40);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v27 = v40;
    if (v40)
      CFRetain(v40);
    *a2 = v27;
    v28 = v41;
    if (v41)
    {
      v29 = (unint64_t *)&v41->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if ((SHIBYTE(v39) & 0x80000000) == 0)
      goto LABEL_44;
    v26 = v38;
  }
  operator delete(v26);
LABEL_44:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_2232DAF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;

  operator delete(v23);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CFTypeRef sub_2232DB000(uint64_t a1, CFTypeRef *a2, __n128 a3, float a4)
{
  uint64_t v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  CFTypeRef cf;
  __int128 v17;
  void *__p;
  __int128 v19;
  CFTypeRef v20;
  std::__shared_weak_count *v21;
  std::error_condition v22;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56);
  if (*(_QWORD *)(v4 + 40))
  {
    cf = (CFTypeRef)a3.n128_u64[0];
    *(_QWORD *)&v17 = __PAIR64__(LODWORD(a4), a3.n128_u32[2]);
    sub_22360C978(v4, (uint64_t)&cf, (uint64_t)&__p);
    sub_223279DE0((CFUUIDBytes **)&__p, (CFMutableArrayRef *)&cf);
    v5 = cf;
    if (cf)
      CFRetain(cf);
    v6 = (std::__shared_weak_count *)v17;
    if ((_QWORD)v17)
    {
      v7 = (unint64_t *)(v17 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (__p)
    {
      *(_QWORD *)&v19 = __p;
      operator delete(__p);
    }
    return v5;
  }
  __p = operator new(0x30uLL);
  v19 = xmmword_2245B9450;
  strcpy((char *)__p, "Session doesn't have keyframing capability");
  v11 = operator new(0x60uLL);
  cf = v11;
  v17 = xmmword_2245C45F0;
  strcpy((char *)v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
  if (a2)
  {
    *(_QWORD *)&v22.__val_ = 102;
    v22.__cat_ = std::generic_category();
    sub_2245321DC(&v22, (uint64_t)&__p, (CFErrorRef *)&v20);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v12 = v20;
    if (v20)
      CFRetain(v20);
    *a2 = v12;
    v13 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      goto LABEL_25;
    v11 = (void *)cf;
  }
  operator delete(v11);
LABEL_25:
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232DB204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CFTypeRef sub_2232DB264(uint64_t a1, CFTypeRef *a2, double a3)
{
  uint64_t v3;
  CFTypeRef v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  CFTypeRef cf;
  __int128 v16;
  void *__p;
  __int128 v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  std::error_condition v21;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56);
  if (*(_QWORD *)(v3 + 40))
  {
    cf = (CFTypeRef)(uint64_t)(a3 * 1000000000.0);
    sub_22360CB64(v3, (uint64_t)&cf, (uint64_t)&__p);
    sub_223279DE0((CFUUIDBytes **)&__p, (CFMutableArrayRef *)&cf);
    v4 = cf;
    if (cf)
      CFRetain(cf);
    v5 = (std::__shared_weak_count *)v16;
    if ((_QWORD)v16)
    {
      v6 = (unint64_t *)(v16 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (__p)
    {
      *(_QWORD *)&v18 = __p;
      operator delete(__p);
    }
    return v4;
  }
  __p = operator new(0x30uLL);
  v18 = xmmword_2245B9450;
  strcpy((char *)__p, "Session doesn't have keyframing capability");
  v10 = operator new(0x60uLL);
  cf = v10;
  v16 = xmmword_2245C45F0;
  strcpy((char *)v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
  if (a2)
  {
    *(_QWORD *)&v21.__val_ = 102;
    v21.__cat_ = std::generic_category();
    sub_2245321DC(&v21, (uint64_t)&__p, (CFErrorRef *)&v19);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v11 = v19;
    if (v19)
      CFRetain(v19);
    *a2 = v11;
    v12 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      goto LABEL_25;
    v10 = (void *)cf;
  }
  operator delete(v10);
LABEL_25:
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232DB46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_2232DB4CC(uint64_t a1, const __CFUUID *a2, CFTypeRef *a3)
{
  CFTypeID v6;
  const std::error_category *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  char *v23;
  CFTypeRef v24;
  std::__shared_weak_count *cat;
  unint64_t *v26;
  unint64_t v27;
  const void *v28;
  unint64_t *v29;
  const void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  char *v36;
  CFTypeRef cf;
  std::__shared_weak_count *v38;
  std::error_condition v39;
  _BYTE __p[24];
  std::__shared_weak_count *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int16 v55;
  char v56;
  std::error_condition v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 40))
  {
    if (a2)
    {
      v6 = CFUUIDGetTypeID();
      if (CFGetTypeID(a2) == v6)
      {
        *(CFUUIDBytes *)__p = CFUUIDGetUUIDBytes(a2);
        *(_QWORD *)&v57.__val_ = sub_22453331C((uint64_t)__p);
        v57.__cat_ = v7;
        v58 = 1;
        sub_22360CC4C(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56), (uint64_t)&v57, (uint64_t)__p);
        if (v56)
        {
          v8 = (char *)operator new(0x110uLL);
          v9 = (std::__shared_weak_count *)v8;
          *((_QWORD *)v8 + 1) = 0;
          v10 = (unint64_t *)(v8 + 8);
          *((_QWORD *)v8 + 2) = 0;
          *(_QWORD *)v8 = &off_24EC1F548;
          *(_OWORD *)(v8 + 24) = *(_OWORD *)__p;
          v11 = v41;
          *((_QWORD *)v8 + 5) = *(_QWORD *)&__p[16];
          *((_QWORD *)v8 + 6) = v11;
          if (v11)
          {
            p_shared_owners = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(p_shared_owners);
            while (__stxr(v13 + 1, p_shared_owners));
          }
          v14 = v43;
          *(_OWORD *)(v8 + 56) = v42;
          *(_OWORD *)(v8 + 72) = v14;
          *(_OWORD *)(v8 + 88) = v44;
          v15 = v46;
          *(_OWORD *)(v8 + 104) = v45;
          *(_OWORD *)(v8 + 120) = v15;
          v16 = v48;
          *(_OWORD *)(v8 + 136) = v47;
          *(_OWORD *)(v8 + 152) = v16;
          v17 = v50;
          *(_OWORD *)(v8 + 168) = v49;
          *(_OWORD *)(v8 + 184) = v17;
          v18 = v52;
          *(_OWORD *)(v8 + 200) = v51;
          *(_OWORD *)(v8 + 216) = v18;
          v19 = v54;
          *(_OWORD *)(v8 + 232) = v53;
          *(_OWORD *)(v8 + 248) = v19;
          *((_WORD *)v8 + 132) = v55;
          v20 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
          if (v20)
          {
            v21 = v20;
            v20[2] = v9;
            *((_DWORD *)v20 + 6) = 1;
            *v20 = &unk_24EC1F238;
            v20[1] = v9 + 1;
            if (!v56)
              goto LABEL_47;
LABEL_52:
            v32 = v41;
            if (!v41)
              return v21;
            v35 = (unint64_t *)&v41->__shared_owners_;
            do
              v34 = __ldaxr(v35);
            while (__stlxr(v34 - 1, v35));
LABEL_55:
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
            return v21;
          }
          do
            v22 = __ldaxr(v10);
          while (__stlxr(v22 - 1, v10));
          if (v22)
          {
            v21 = 0;
            if (!v56)
              goto LABEL_47;
            goto LABEL_52;
          }
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v21 = 0;
          if (v56)
            goto LABEL_52;
        }
        else
        {
          if (a3)
          {
            if (*a3)
              CFRelease(*a3);
            *a3 = 0;
            v31 = *(const void **)__p;
            if (*(_QWORD *)__p)
              CFRetain(*(CFTypeRef *)__p);
            v21 = 0;
            *a3 = v31;
            if (!v56)
              goto LABEL_47;
            goto LABEL_52;
          }
          v21 = 0;
        }
LABEL_47:
        v32 = *(std::__shared_weak_count **)&__p[8];
        if (!*(_QWORD *)&__p[8])
          return v21;
        v33 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        goto LABEL_55;
      }
    }
    LOBYTE(v57.__val_) = 0;
    v58 = 0;
    __p[23] = 15;
    strcpy(__p, "UUID is invalid");
    v23 = (char *)operator new(0x60uLL);
    v36 = v23;
    strcpy(v23, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v39.__val_ = 22;
      v39.__cat_ = std::generic_category();
      sub_2245321DC(&v39, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v24 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v24;
      cat = v38;
      if (!v38)
        goto LABEL_34;
      v26 = (unint64_t *)&v38->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
LABEL_32:
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
      }
LABEL_34:
      v23 = v36;
    }
  }
  else
  {
    *(_QWORD *)__p = operator new(0x30uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B9450;
    strcpy(*(char **)__p, "Session doesn't have keyframing capability");
    v23 = (char *)operator new(0x60uLL);
    v36 = v23;
    strcpy(v23, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v57.__val_ = 102;
      v57.__cat_ = std::generic_category();
      sub_2245321DC(&v57, (uint64_t)__p, (CFErrorRef *)&v39);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v28 = *(const void **)&v39.__val_;
      if (*(_QWORD *)&v39.__val_)
        CFRetain(*(CFTypeRef *)&v39.__val_);
      *a3 = v28;
      cat = (std::__shared_weak_count *)v39.__cat_;
      if (!v39.__cat_)
        goto LABEL_34;
      v29 = (unint64_t *)&v39.__cat_[1];
      do
        v27 = __ldaxr(v29);
      while (__stlxr(v27 - 1, v29));
      goto LABEL_32;
    }
  }
  operator delete(v23);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_2232DB980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2232DB9FC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232DB994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2232DB9FC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232DB9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  operator delete(v22);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232DB9FC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v1 = result;
  if (*(_BYTE *)(result + 248))
  {
    v2 = *(std::__shared_weak_count **)(result + 24);
    if (!v2)
      return result;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (v4)
      return result;
LABEL_11:
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    return v1;
  }
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    v5 = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
      goto LABEL_11;
  }
  return result;
}

uint64_t sub_2232DBA8C(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char v4;
  char v5;
  void *v6;
  unint64_t *v7;
  unint64_t v8;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  const std::error_category *v15;
  CFTypeRef v16;
  unint64_t *p_shared_owners;
  char *v18;
  __int128 v19;
  void *__p;
  __int128 v21;
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  std::error_condition v24;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 56) + 40);
  if (v3)
  {
    sub_2236262E8((uint64_t *)(*(_QWORD *)(v3 + 72) + 3296), (uint64_t)&v18, (uint64_t *)&__p);
    sub_22360AC28((std::__assoc_sub_state **)&__p);
    v5 = v4;
    v6 = __p;
    if (!__p)
      goto LABEL_6;
    v7 = (unint64_t *)((char *)__p + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      (*(void (**)(void *))(*(_QWORD *)v6 + 16))(v6);
      if ((v5 & 1) != 0)
        return 1;
    }
    else
    {
LABEL_6:
      if ((v5 & 1) != 0)
        return 1;
    }
    __p = operator new(0x28uLL);
    v21 = xmmword_2245B8D20;
    strcpy((char *)__p, "Unknown error occurred in keyframing.");
    v10 = (char *)operator new(0x60uLL);
    v18 = v10;
    v19 = xmmword_2245C45F0;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (!a2)
    {
LABEL_32:
      operator delete(v10);
      if ((SHIBYTE(v21) & 0x80000000) == 0)
        return 0;
      goto LABEL_33;
    }
    v15 = std::generic_category();
    *(_QWORD *)&v24.__val_ = 89;
    v24.__cat_ = v15;
    sub_2245321DC(&v24, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v16 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v16;
    v12 = v23;
    if (!v23)
      goto LABEL_27;
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
  }
  else
  {
    __p = operator new(0x30uLL);
    v21 = xmmword_2245B9450;
    strcpy((char *)__p, "Session doesn't have keyframing capability");
    v10 = (char *)operator new(0x60uLL);
    v18 = v10;
    v19 = xmmword_2245C45F0;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (!a2)
      goto LABEL_32;
    *(_QWORD *)&v24.__val_ = 102;
    v24.__cat_ = std::generic_category();
    sub_2245321DC(&v24, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v11 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v11;
    v12 = v23;
    if (!v23)
      goto LABEL_27;
    v13 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
  }
  if (v14)
  {
LABEL_27:
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_31;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(v19) < 0)
  {
LABEL_31:
    v10 = v18;
    goto LABEL_32;
  }
LABEL_28:
  if ((SHIBYTE(v21) & 0x80000000) == 0)
    return 0;
LABEL_33:
  operator delete(__p);
  return 0;
}

void sub_2232DBD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2232DBDEC(uint64_t a1)
{
  sub_2232D89E0(a1 + 8);
  return a1;
}

void sub_2232DBE14(uint64_t a1)
{
  sub_2232D89E0(a1 + 8);
  JUMPOUT(0x227684CE8);
}

void sub_2232DBE4C(uint64_t a1@<X0>, CFTypeRef *a2@<X1>, std::string *a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  char **v10;
  char *v11[2];
  __int128 v12;

  v11[0] = 0;
  v11[1] = 0;
  v10 = v11;
  sub_224530418(&v10, &v12);
  v9 = v12;
  sub_22323DF84((uint64_t)&v10, v11[0]);
  sub_2232DBF3C(a1, (uint64_t)&v9, a2, a3);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2232DBF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232DBF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_22323DF84((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_2232DBF3C(uint64_t a1@<X0>, uint64_t a2@<X1>, CFTypeRef *a3@<X2>, std::string *a4@<X8>)
{
  unsigned __int8 v8;
  char v9;
  std::string *v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  char *v14;
  std::string::size_type v15;
  std::__shared_weak_count *size;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::string::size_type v36;
  int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::string v50;
  std::string v51;
  std::__fs::filesystem::path cf;
  std::string v53;
  uint64_t v54;
  std::string __dst;
  _BYTE __p[32];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 80))
  {
    *(_QWORD *)__p = operator new(0x38uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C4510;
    strcpy(*(char **)__p, "Persistence not enabled, so snapshot is not possible.");
    v14 = (char *)operator new(0x60uLL);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_2245C45F0;
    strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a3)
    {
      v53.__r_.__value_.__r.__words[0] = 102;
      v53.__r_.__value_.__l.__size_ = (std::string::size_type)std::generic_category();
      sub_2245321DC((const std::error_condition *)&v53, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v15 = cf.__pn_.__r_.__value_.__r.__words[0];
      if (cf.__pn_.__r_.__value_.__r.__words[0])
        CFRetain(cf.__pn_.__r_.__value_.__l.__data_);
      *a3 = (CFTypeRef)v15;
      size = (std::__shared_weak_count *)cf.__pn_.__r_.__value_.__l.__size_;
      if (cf.__pn_.__r_.__value_.__l.__size_)
      {
        v17 = (unint64_t *)(cf.__pn_.__r_.__value_.__l.__size_ + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_24;
      v14 = (char *)__dst.__r_.__value_.__r.__words[0];
    }
    operator delete(v14);
LABEL_24:
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    a4->__r_.__value_.__s.__data_[0] = 0;
    a4[1].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  v8 = atomic_load((unsigned __int8 *)&qword_2540CAB38);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAB38))
  {
    sub_2232D3688();
    __cxa_atexit((void (*)(void *))sub_2232D3808, &qword_2540CAB60, &dword_22314D000);
    __cxa_guard_release(&qword_2540CAB38);
  }
  memset(&v53, 0, sizeof(v53));
  v9 = *(_BYTE *)(a1 + 79);
  if (v9 >= 0)
    v10 = (std::string *)(a1 + 56);
  else
    v10 = *(std::string **)(a1 + 56);
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 79);
  else
    v11 = *(_QWORD *)(a1 + 64);
  sub_2231816F0(&v53, v10, (std::string *)((char *)v10 + v11));
  v54 = qword_2540CAB60;
  sub_2232D69F0((unsigned int *)__p, &v54);
  *(_QWORD *)&v59 = (*(unsigned int *)__p | ((unint64_t)__p[4] << 32) | ((unint64_t)__p[5] << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)__p[7] << 56) | ((unint64_t)(HIWORD(*(_DWORD *)&__p[4]) & 0xF | 0x40u) << 48);
  *((_QWORD *)&v59 + 1) = ((unint64_t)__p[12] << 32) | ((unint64_t)__p[13] << 40) | *(_DWORD *)&__p[8] & 0xFFFFFF00 | ((unint64_t)*(unsigned int *)&__p[12] << 32) & 0xFF00000000000000 | ((unint64_t)__p[14] << 48) | __p[8] & 0x3F | 0x80;
  sub_2245664AC((unsigned __int8 *)&v59, __p);
  v12 = operator new(0x28uLL);
  v13 = *(_OWORD *)&__p[16];
  *v12 = *(_OWORD *)__p;
  v12[1] = v13;
  *((_DWORD *)v12 + 8) = v57;
  *((_BYTE *)v12 + 36) = 0;
  cf.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  *(_OWORD *)&cf.__pn_.__r_.__value_.__r.__words[1] = xmmword_2245C4640;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&__dst, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  else
    __dst = v53;
  sub_22319C30C((uint64_t)&__dst, &cf);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&v51, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(cf.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_37;
    }
    else if (SHIBYTE(cf.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_37;
    }
LABEL_33:
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_38;
    goto LABEL_34;
  }
  v51 = __dst;
  if ((SHIBYTE(cf.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_33;
LABEL_37:
  operator delete(cf.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_38:
    operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_39;
    goto LABEL_35;
  }
LABEL_34:
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_39:
    sub_223197FA4(&v50, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
    goto LABEL_40;
  }
LABEL_35:
  v50 = v51;
LABEL_40:
  *(_WORD *)__p = 257;
  *(std::string *)&__p[8] = v50;
  memset(&v50, 0, sizeof(v50));
  v57 = 0u;
  v58 = 0u;
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__l.__size_;
  sub_2245312C0(&__dst, &v53);
  v59 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
  sub_22323DF84((uint64_t)&__dst, (char *)__dst.__r_.__value_.__l.__size_);
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "created");
  sub_2240043CC(&v53);
  sub_224527E14((uint64_t)&__dst, (CFStringRef *)&cf);
  sub_2232EED78((uint64_t)&v59, cf.__pn_.__r_.__value_.__l.__data_, (uint64_t)&v53);
  v19 = (std::__shared_weak_count *)cf.__pn_.__r_.__value_.__l.__size_;
  if (!cf.__pn_.__r_.__value_.__l.__size_)
    goto LABEL_44;
  v20 = (unint64_t *)(cf.__pn_.__r_.__value_.__l.__size_ + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
  {
LABEL_44:
    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_45;
LABEL_77:
    operator delete(v53.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
LABEL_78:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_46;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_77;
LABEL_45:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_78;
LABEL_46:
  sub_2232EEEDC(&__dst, (uint64_t)&v59);
  v22 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  v57 = v22;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
  if (__dst.__r_.__value_.__l.__size_)
  {
    v27 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  sub_2231DD328(&__dst, a2);
  v29 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  v58 = v29;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
  if (__dst.__r_.__value_.__l.__size_)
  {
    v34 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  sub_2236080F4(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56), (uint64_t)__p, (uint64_t)&__dst);
  if (__dst.__r_.__value_.__s.__data_[16])
  {
    if (a3)
    {
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v36 = __dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0])
        CFRetain(__dst.__r_.__value_.__l.__data_);
      *a3 = (CFTypeRef)v36;
      v37 = __dst.__r_.__value_.__s.__data_[16];
      a4->__r_.__value_.__s.__data_[0] = 0;
      a4[1].__r_.__value_.__s.__data_[0] = 0;
      if (!v37)
        goto LABEL_84;
      v38 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
      if (!__dst.__r_.__value_.__l.__size_)
        goto LABEL_84;
      goto LABEL_80;
    }
    a4->__r_.__value_.__s.__data_[0] = 0;
    a4[1].__r_.__value_.__s.__data_[0] = 0;
    v38 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_)
    {
LABEL_80:
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  else
  {
    *a4 = v51;
    memset(&v51, 0, sizeof(v51));
    a4[1].__r_.__value_.__s.__data_[0] = 1;
  }
LABEL_84:
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (!*((_QWORD *)&v57 + 1))
    goto LABEL_98;
  v48 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
    if ((__p[31] & 0x80000000) == 0)
    {
LABEL_99:
      if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_103:
      operator delete(v51.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
LABEL_98:
    if ((__p[31] & 0x80000000) == 0)
      goto LABEL_99;
  }
  operator delete(*(void **)&__p[8]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_103;
}

void sub_2232DC6E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CAB38);
  _Unwind_Resume(a1);
}

void sub_2232DC700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2232DC844(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

BOOL sub_2232DC900(uint64_t a1, int a2, char *__s, CFTypeRef *a4)
{
  uint64_t v6;
  void *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v18;
  void *__p[2];
  unint64_t v20;
  CFTypeRef cf;
  std::__shared_weak_count *v22;
  unsigned __int8 v23;

  v6 = *(_QWORD *)(a1 + 1216);
  v18 = a2;
  v7 = __p;
  v8 = strlen(__s);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    v7 = operator new(v10 + 1);
    __p[1] = v9;
    v20 = v11 | 0x8000000000000000;
    __p[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v20) = v8;
  if (v8)
LABEL_8:
    memcpy(v7, __s, (size_t)v9);
  *((_BYTE *)v9 + (_QWORD)v7) = 0;
  sub_22360DBAC(*(_QWORD **)(v6 + 56), (uint64_t)&v18, &cf);
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__p[0]);
    v12 = v23;
    if (!v23)
      return v12 == 0;
  }
  else
  {
    v12 = v23;
    if (!v23)
      return v12 == 0;
  }
  if (a4)
  {
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v13 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v13;
  }
  v14 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v12 == 0;
}

void sub_2232DCA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_223224234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232DCA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_2232DCA8C(uint64_t a1, CFTypeRef *a2, double a3)
{
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  __int128 v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16))
  {
    result = sub_223FFBF6C((double *)(a1 + 288), a2, a3);
    if (result)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16);
      if (v6)
      {
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 72) + 3120) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 3120)) & 1) == 0
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp", 652, (uint64_t)"session_node_group_->InputSetMeshingPeriod().Enabled()", 54, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16) + 72) + 3112;
        __p = *(void **)(a1 + 288);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 16))(v7, &__p);
      }
      return 1;
    }
  }
  else
  {
    __p = operator new(0x28uLL);
    v14 = xmmword_2245B9440;
    strcpy((char *)__p, "Session doesn't have meshing capability");
    v8 = (char *)operator new(0x60uLL);
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 102;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v9;
      v10 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(v8);
    if (SHIBYTE(v14) < 0)
      operator delete(__p);
    return 0;
  }
  return result;
}

void sub_2232DCCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232DCCFC(uint64_t a1, CFTypeRef *a2, float a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  __int128 v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16))
  {
    result = sub_223FFC484(a1 + 288, a2, a3);
    if ((_DWORD)result)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16);
      if (v6)
      {
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 72) + 3288) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 3288)) & 1) == 0
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp", 670, (uint64_t)"session_node_group_->InputSetMaxWeight().Enabled()", 50, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| (v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16) + 72), !*(_BYTE *)(a1 + 336))&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 157, (uint64_t)"HasMapper(MeshingMapperType::Volumetric)", 40, (uint64_t)&unk_2245AD60A, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(double *)&__p = *(float *)(a1 + 300);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)(v7 + 3280) + 16))(v7 + 3280, &__p);
      }
      return 1;
    }
  }
  else
  {
    *(double *)&__p = COERCE_DOUBLE(operator new(0x28uLL));
    v14 = xmmword_2245B9440;
    strcpy((char *)__p, "Session doesn't have meshing capability");
    v8 = (char *)operator new(0x60uLL);
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 102;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v9;
      v10 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(v8);
    if (SHIBYTE(v14) < 0)
      operator delete(__p);
    return 0;
  }
  return result;
}

void sub_2232DCF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2232DCFAC(uint64_t a1, char a2, CFTypeRef *a3)
{
  uint64_t v3;
  uint64_t v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  __int128 v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16);
  if (v3)
  {
    *(_BYTE *)(a1 + 408) = a2;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 72) + 3456) + 40))(*(_QWORD *)(*(_QWORD *)(v3 + 72) + 3456)) & 1) == 0
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp", 685, (uint64_t)"session_node_group_->InputEnableMeshPlaneHarmony().Enabled()", 60, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16) + 72) + 3448;
    LOBYTE(__p) = *(_BYTE *)(a1 + 408);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 16))(v5, &__p);
  }
  else
  {
    __p = operator new(0x28uLL);
    v14 = xmmword_2245B9440;
    strcpy((char *)__p, "Session doesn't have meshing capability");
    v7 = (char *)operator new(0x60uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 102;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v8;
      v9 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if (SHIBYTE(v14) < 0)
      operator delete(__p);
  }
  return v3 != 0;
}

void sub_2232DD19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2232DD1D8(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v43;
  void *__p;
  __int128 v45;
  CFTypeRef cf;
  std::__shared_weak_count *v47;
  std::error_condition v48;

  v3 = *(_QWORD *)(*(_QWORD *)(a1[152] + 56) + 16);
  if (v3)
  {
    v5 = *(void **)a2;
    v6 = *(_QWORD *)(a2 + 8);
    __p = *(void **)a2;
    *(_QWORD *)&v45 = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      v9 = a1 + 156;
      v10 = (char *)a1[156];
      v11 = a1[157];
      if ((unint64_t)v10 < v11)
      {
        do
          v12 = __ldxr(v7);
        while (__stxr(v12 + 1, v7));
        goto LABEL_22;
      }
    }
    else
    {
      v9 = a1 + 156;
      v10 = (char *)a1[156];
      v11 = a1[157];
      if ((unint64_t)v10 < v11)
      {
LABEL_22:
        *(_QWORD *)v10 = &off_24EC2A150;
        *((_QWORD *)v10 + 1) = v5;
        *((_QWORD *)v10 + 2) = v6;
        *((_QWORD *)v10 + 3) = v10;
        v19 = v10 + 32;
LABEL_57:
        *v9 = v19;
        if ((_QWORD)v45)
        {
          v40 = (unint64_t *)(v45 + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            (*(void (**)(_QWORD))(*(_QWORD *)v45 + 16))(v45);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v45);
          }
        }
        return v3 != 0;
      }
    }
    v20 = (char *)a1[155];
    v21 = (v10 - v20) >> 5;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 59)
      sub_22316E078();
    v23 = v11 - (_QWORD)v20;
    if (v23 >> 4 > v22)
      v22 = v23 >> 4;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
      v24 = 0x7FFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 59)
        sub_223174E94();
      v25 = (char *)operator new(32 * v24);
      v26 = &v25[32 * v21];
      if (!v6)
        goto LABEL_37;
    }
    else
    {
      v25 = 0;
      v26 = (char *)(32 * v21);
      if (!v6)
      {
LABEL_37:
        *(_QWORD *)v26 = &off_24EC2A150;
        *((_QWORD *)v26 + 1) = v5;
        v29 = &v25[32 * v24];
        *((_QWORD *)v26 + 2) = v6;
        *((_QWORD *)v26 + 3) = v26;
        v19 = v26 + 32;
        if (v10 == v20)
        {
          a1[155] = v26;
          a1[156] = v19;
          a1[157] = v29;
LABEL_55:
          if (v20)
            operator delete(v20);
          goto LABEL_57;
        }
        v30 = 0;
        v31 = v10;
        while (1)
        {
          v33 = &v26[v30];
          v34 = &v10[v30];
          v35 = *(char **)&v10[v30 - 8];
          if (v35)
          {
            if (v34 - 32 == v35)
            {
              *((_QWORD *)v33 - 1) = v33 - 32;
              (*(void (**)(_QWORD *))(*((_QWORD *)v34 - 4) + 24))((_QWORD *)v34 - 4);
              goto LABEL_41;
            }
            v32 = v31 - 8;
            *((_QWORD *)v33 - 1) = v35;
          }
          else
          {
            v32 = v33 - 8;
          }
          *(_QWORD *)v32 = 0;
LABEL_41:
          v31 -= 32;
          v30 -= 32;
          if (&v10[v30] == v20)
          {
            v20 = (char *)a1[155];
            v36 = (char *)a1[156];
            a1[155] = &v26[v30];
            a1[156] = v19;
            a1[157] = v29;
            if (v36 == v20)
              goto LABEL_55;
            while (2)
            {
              v39 = v36 - 32;
              v37 = (char *)*((_QWORD *)v36 - 1);
              if (v36 - 32 != v37)
              {
                if (v37)
                {
                  v38 = 5;
LABEL_49:
                  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
                }
                v36 = v39;
                if (v39 == v20)
                  goto LABEL_55;
                continue;
              }
              break;
            }
            v37 = v36 - 32;
            v38 = 4;
            goto LABEL_49;
          }
        }
      }
    }
    v27 = (unint64_t *)(v6 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v10 = (char *)a1[156];
    v20 = (char *)a1[155];
    goto LABEL_37;
  }
  __p = operator new(0x28uLL);
  v45 = xmmword_2245B9440;
  strcpy((char *)__p, "Session doesn't have meshing capability");
  v14 = (char *)operator new(0x60uLL);
  v43 = v14;
  strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
  if (a3)
  {
    *(_QWORD *)&v48.__val_ = 102;
    v48.__cat_ = std::generic_category();
    sub_2245321DC(&v48, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v15 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v15;
    v16 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v14 = v43;
  }
  operator delete(v14);
  if (SHIBYTE(v45) < 0)
    operator delete(__p);
  return v3 != 0;
}

void sub_2232DD5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2232DD5F4(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v43;
  void *__p;
  __int128 v45;
  CFTypeRef cf;
  std::__shared_weak_count *v47;
  std::error_condition v48;

  v3 = *(_QWORD *)(*(_QWORD *)(a1[152] + 56) + 16);
  if (v3)
  {
    v5 = *(void **)a2;
    v6 = *(_QWORD *)(a2 + 8);
    __p = *(void **)a2;
    *(_QWORD *)&v45 = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      v9 = a1 + 168;
      v10 = (char *)a1[168];
      v11 = a1[169];
      if ((unint64_t)v10 < v11)
      {
        do
          v12 = __ldxr(v7);
        while (__stxr(v12 + 1, v7));
        goto LABEL_22;
      }
    }
    else
    {
      v9 = a1 + 168;
      v10 = (char *)a1[168];
      v11 = a1[169];
      if ((unint64_t)v10 < v11)
      {
LABEL_22:
        *(_QWORD *)v10 = &off_24EC2A1E0;
        *((_QWORD *)v10 + 1) = v5;
        *((_QWORD *)v10 + 2) = v6;
        *((_QWORD *)v10 + 3) = v10;
        v19 = v10 + 32;
LABEL_57:
        *v9 = v19;
        if ((_QWORD)v45)
        {
          v40 = (unint64_t *)(v45 + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            (*(void (**)(_QWORD))(*(_QWORD *)v45 + 16))(v45);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v45);
          }
        }
        return v3 != 0;
      }
    }
    v20 = (char *)a1[167];
    v21 = (v10 - v20) >> 5;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 59)
      sub_22316E078();
    v23 = v11 - (_QWORD)v20;
    if (v23 >> 4 > v22)
      v22 = v23 >> 4;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
      v24 = 0x7FFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 59)
        sub_223174E94();
      v25 = (char *)operator new(32 * v24);
      v26 = &v25[32 * v21];
      if (!v6)
        goto LABEL_37;
    }
    else
    {
      v25 = 0;
      v26 = (char *)(32 * v21);
      if (!v6)
      {
LABEL_37:
        *(_QWORD *)v26 = &off_24EC2A1E0;
        *((_QWORD *)v26 + 1) = v5;
        v29 = &v25[32 * v24];
        *((_QWORD *)v26 + 2) = v6;
        *((_QWORD *)v26 + 3) = v26;
        v19 = v26 + 32;
        if (v10 == v20)
        {
          a1[167] = v26;
          a1[168] = v19;
          a1[169] = v29;
LABEL_55:
          if (v20)
            operator delete(v20);
          goto LABEL_57;
        }
        v30 = 0;
        v31 = v10;
        while (1)
        {
          v33 = &v26[v30];
          v34 = &v10[v30];
          v35 = *(char **)&v10[v30 - 8];
          if (v35)
          {
            if (v34 - 32 == v35)
            {
              *((_QWORD *)v33 - 1) = v33 - 32;
              (*(void (**)(_QWORD *))(*((_QWORD *)v34 - 4) + 24))((_QWORD *)v34 - 4);
              goto LABEL_41;
            }
            v32 = v31 - 8;
            *((_QWORD *)v33 - 1) = v35;
          }
          else
          {
            v32 = v33 - 8;
          }
          *(_QWORD *)v32 = 0;
LABEL_41:
          v31 -= 32;
          v30 -= 32;
          if (&v10[v30] == v20)
          {
            v20 = (char *)a1[167];
            v36 = (char *)a1[168];
            a1[167] = &v26[v30];
            a1[168] = v19;
            a1[169] = v29;
            if (v36 == v20)
              goto LABEL_55;
            while (2)
            {
              v39 = v36 - 32;
              v37 = (char *)*((_QWORD *)v36 - 1);
              if (v36 - 32 != v37)
              {
                if (v37)
                {
                  v38 = 5;
LABEL_49:
                  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
                }
                v36 = v39;
                if (v39 == v20)
                  goto LABEL_55;
                continue;
              }
              break;
            }
            v37 = v36 - 32;
            v38 = 4;
            goto LABEL_49;
          }
        }
      }
    }
    v27 = (unint64_t *)(v6 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v10 = (char *)a1[168];
    v20 = (char *)a1[167];
    goto LABEL_37;
  }
  __p = operator new(0x28uLL);
  v45 = xmmword_2245B9440;
  strcpy((char *)__p, "Session doesn't have meshing capability");
  v14 = (char *)operator new(0x60uLL);
  v43 = v14;
  strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
  if (a3)
  {
    *(_QWORD *)&v48.__val_ = 102;
    v48.__cat_ = std::generic_category();
    sub_2245321DC(&v48, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v15 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v15;
    v16 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v14 = v43;
  }
  operator delete(v14);
  if (SHIBYTE(v45) < 0)
    operator delete(__p);
  return v3 != 0;
}

void sub_2232DD9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2232DDA10(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v43;
  void *__p;
  __int128 v45;
  CFTypeRef cf;
  std::__shared_weak_count *v47;
  std::error_condition v48;

  v3 = *(_QWORD *)(*(_QWORD *)(a1[152] + 56) + 16);
  if (v3)
  {
    v5 = *(void **)a2;
    v6 = *(_QWORD *)(a2 + 8);
    __p = *(void **)a2;
    *(_QWORD *)&v45 = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      v9 = a1 + 171;
      v10 = (char *)a1[171];
      v11 = a1[172];
      if ((unint64_t)v10 < v11)
      {
        do
          v12 = __ldxr(v7);
        while (__stxr(v12 + 1, v7));
        goto LABEL_22;
      }
    }
    else
    {
      v9 = a1 + 171;
      v10 = (char *)a1[171];
      v11 = a1[172];
      if ((unint64_t)v10 < v11)
      {
LABEL_22:
        *(_QWORD *)v10 = &off_24EC2A270;
        *((_QWORD *)v10 + 1) = v5;
        *((_QWORD *)v10 + 2) = v6;
        *((_QWORD *)v10 + 3) = v10;
        v19 = v10 + 32;
LABEL_57:
        *v9 = v19;
        if ((_QWORD)v45)
        {
          v40 = (unint64_t *)(v45 + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            (*(void (**)(_QWORD))(*(_QWORD *)v45 + 16))(v45);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v45);
          }
        }
        return v3 != 0;
      }
    }
    v20 = (char *)a1[170];
    v21 = (v10 - v20) >> 5;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 59)
      sub_22316E078();
    v23 = v11 - (_QWORD)v20;
    if (v23 >> 4 > v22)
      v22 = v23 >> 4;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
      v24 = 0x7FFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 59)
        sub_223174E94();
      v25 = (char *)operator new(32 * v24);
      v26 = &v25[32 * v21];
      if (!v6)
        goto LABEL_37;
    }
    else
    {
      v25 = 0;
      v26 = (char *)(32 * v21);
      if (!v6)
      {
LABEL_37:
        *(_QWORD *)v26 = &off_24EC2A270;
        *((_QWORD *)v26 + 1) = v5;
        v29 = &v25[32 * v24];
        *((_QWORD *)v26 + 2) = v6;
        *((_QWORD *)v26 + 3) = v26;
        v19 = v26 + 32;
        if (v10 == v20)
        {
          a1[170] = v26;
          a1[171] = v19;
          a1[172] = v29;
LABEL_55:
          if (v20)
            operator delete(v20);
          goto LABEL_57;
        }
        v30 = 0;
        v31 = v10;
        while (1)
        {
          v33 = &v26[v30];
          v34 = &v10[v30];
          v35 = *(char **)&v10[v30 - 8];
          if (v35)
          {
            if (v34 - 32 == v35)
            {
              *((_QWORD *)v33 - 1) = v33 - 32;
              (*(void (**)(_QWORD *))(*((_QWORD *)v34 - 4) + 24))((_QWORD *)v34 - 4);
              goto LABEL_41;
            }
            v32 = v31 - 8;
            *((_QWORD *)v33 - 1) = v35;
          }
          else
          {
            v32 = v33 - 8;
          }
          *(_QWORD *)v32 = 0;
LABEL_41:
          v31 -= 32;
          v30 -= 32;
          if (&v10[v30] == v20)
          {
            v20 = (char *)a1[170];
            v36 = (char *)a1[171];
            a1[170] = &v26[v30];
            a1[171] = v19;
            a1[172] = v29;
            if (v36 == v20)
              goto LABEL_55;
            while (2)
            {
              v39 = v36 - 32;
              v37 = (char *)*((_QWORD *)v36 - 1);
              if (v36 - 32 != v37)
              {
                if (v37)
                {
                  v38 = 5;
LABEL_49:
                  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
                }
                v36 = v39;
                if (v39 == v20)
                  goto LABEL_55;
                continue;
              }
              break;
            }
            v37 = v36 - 32;
            v38 = 4;
            goto LABEL_49;
          }
        }
      }
    }
    v27 = (unint64_t *)(v6 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v10 = (char *)a1[171];
    v20 = (char *)a1[170];
    goto LABEL_37;
  }
  __p = operator new(0x28uLL);
  v45 = xmmword_2245B9440;
  strcpy((char *)__p, "Session doesn't have meshing capability");
  v14 = (char *)operator new(0x60uLL);
  v43 = v14;
  strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
  if (a3)
  {
    *(_QWORD *)&v48.__val_ = 102;
    v48.__cat_ = std::generic_category();
    sub_2245321DC(&v48, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v15 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v15;
    v16 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v14 = v43;
  }
  operator delete(v14);
  if (SHIBYTE(v45) < 0)
    operator delete(__p);
  return v3 != 0;
}

void sub_2232DDDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2232DDE2C(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v43;
  void *__p;
  __int128 v45;
  CFTypeRef cf;
  std::__shared_weak_count *v47;
  std::error_condition v48;

  v3 = *(_QWORD *)(*(_QWORD *)(a1[152] + 56) + 16);
  if (v3)
  {
    v5 = *(void **)a2;
    v6 = *(_QWORD *)(a2 + 8);
    __p = *(void **)a2;
    *(_QWORD *)&v45 = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      v9 = a1 + 174;
      v10 = (char *)a1[174];
      v11 = a1[175];
      if ((unint64_t)v10 < v11)
      {
        do
          v12 = __ldxr(v7);
        while (__stxr(v12 + 1, v7));
        goto LABEL_22;
      }
    }
    else
    {
      v9 = a1 + 174;
      v10 = (char *)a1[174];
      v11 = a1[175];
      if ((unint64_t)v10 < v11)
      {
LABEL_22:
        *(_QWORD *)v10 = &off_24EC2A2F0;
        *((_QWORD *)v10 + 1) = v5;
        *((_QWORD *)v10 + 2) = v6;
        *((_QWORD *)v10 + 3) = v10;
        v19 = v10 + 32;
LABEL_57:
        *v9 = v19;
        if ((_QWORD)v45)
        {
          v40 = (unint64_t *)(v45 + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            (*(void (**)(_QWORD))(*(_QWORD *)v45 + 16))(v45);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v45);
          }
        }
        return v3 != 0;
      }
    }
    v20 = (char *)a1[173];
    v21 = (v10 - v20) >> 5;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 59)
      sub_22316E078();
    v23 = v11 - (_QWORD)v20;
    if (v23 >> 4 > v22)
      v22 = v23 >> 4;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
      v24 = 0x7FFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 59)
        sub_223174E94();
      v25 = (char *)operator new(32 * v24);
      v26 = &v25[32 * v21];
      if (!v6)
        goto LABEL_37;
    }
    else
    {
      v25 = 0;
      v26 = (char *)(32 * v21);
      if (!v6)
      {
LABEL_37:
        *(_QWORD *)v26 = &off_24EC2A2F0;
        *((_QWORD *)v26 + 1) = v5;
        v29 = &v25[32 * v24];
        *((_QWORD *)v26 + 2) = v6;
        *((_QWORD *)v26 + 3) = v26;
        v19 = v26 + 32;
        if (v10 == v20)
        {
          a1[173] = v26;
          a1[174] = v19;
          a1[175] = v29;
LABEL_55:
          if (v20)
            operator delete(v20);
          goto LABEL_57;
        }
        v30 = 0;
        v31 = v10;
        while (1)
        {
          v33 = &v26[v30];
          v34 = &v10[v30];
          v35 = *(char **)&v10[v30 - 8];
          if (v35)
          {
            if (v34 - 32 == v35)
            {
              *((_QWORD *)v33 - 1) = v33 - 32;
              (*(void (**)(_QWORD *))(*((_QWORD *)v34 - 4) + 24))((_QWORD *)v34 - 4);
              goto LABEL_41;
            }
            v32 = v31 - 8;
            *((_QWORD *)v33 - 1) = v35;
          }
          else
          {
            v32 = v33 - 8;
          }
          *(_QWORD *)v32 = 0;
LABEL_41:
          v31 -= 32;
          v30 -= 32;
          if (&v10[v30] == v20)
          {
            v20 = (char *)a1[173];
            v36 = (char *)a1[174];
            a1[173] = &v26[v30];
            a1[174] = v19;
            a1[175] = v29;
            if (v36 == v20)
              goto LABEL_55;
            while (2)
            {
              v39 = v36 - 32;
              v37 = (char *)*((_QWORD *)v36 - 1);
              if (v36 - 32 != v37)
              {
                if (v37)
                {
                  v38 = 5;
LABEL_49:
                  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
                }
                v36 = v39;
                if (v39 == v20)
                  goto LABEL_55;
                continue;
              }
              break;
            }
            v37 = v36 - 32;
            v38 = 4;
            goto LABEL_49;
          }
        }
      }
    }
    v27 = (unint64_t *)(v6 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v10 = (char *)a1[174];
    v20 = (char *)a1[173];
    goto LABEL_37;
  }
  __p = operator new(0x28uLL);
  v45 = xmmword_2245B9440;
  strcpy((char *)__p, "Session doesn't have meshing capability");
  v14 = (char *)operator new(0x60uLL);
  v43 = v14;
  strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
  if (a3)
  {
    *(_QWORD *)&v48.__val_ = 102;
    v48.__cat_ = std::generic_category();
    sub_2245321DC(&v48, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v15 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v15;
    v16 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v14 = v43;
  }
  operator delete(v14);
  if (SHIBYTE(v45) < 0)
    operator delete(__p);
  return v3 != 0;
}

void sub_2232DE1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2232DE248(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v43;
  void *__p;
  __int128 v45;
  CFTypeRef cf;
  std::__shared_weak_count *v47;
  std::error_condition v48;

  v3 = *(_QWORD *)(*(_QWORD *)(a1[152] + 56) + 16);
  if (v3)
  {
    v5 = *(void **)a2;
    v6 = *(_QWORD *)(a2 + 8);
    __p = *(void **)a2;
    *(_QWORD *)&v45 = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      v9 = a1 + 177;
      v10 = (char *)a1[177];
      v11 = a1[178];
      if ((unint64_t)v10 < v11)
      {
        do
          v12 = __ldxr(v7);
        while (__stxr(v12 + 1, v7));
        goto LABEL_22;
      }
    }
    else
    {
      v9 = a1 + 177;
      v10 = (char *)a1[177];
      v11 = a1[178];
      if ((unint64_t)v10 < v11)
      {
LABEL_22:
        *(_QWORD *)v10 = &off_24EC2A380;
        *((_QWORD *)v10 + 1) = v5;
        *((_QWORD *)v10 + 2) = v6;
        *((_QWORD *)v10 + 3) = v10;
        v19 = v10 + 32;
LABEL_57:
        *v9 = v19;
        if ((_QWORD)v45)
        {
          v40 = (unint64_t *)(v45 + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            (*(void (**)(_QWORD))(*(_QWORD *)v45 + 16))(v45);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v45);
          }
        }
        return v3 != 0;
      }
    }
    v20 = (char *)a1[176];
    v21 = (v10 - v20) >> 5;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 59)
      sub_22316E078();
    v23 = v11 - (_QWORD)v20;
    if (v23 >> 4 > v22)
      v22 = v23 >> 4;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
      v24 = 0x7FFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 59)
        sub_223174E94();
      v25 = (char *)operator new(32 * v24);
      v26 = &v25[32 * v21];
      if (!v6)
        goto LABEL_37;
    }
    else
    {
      v25 = 0;
      v26 = (char *)(32 * v21);
      if (!v6)
      {
LABEL_37:
        *(_QWORD *)v26 = &off_24EC2A380;
        *((_QWORD *)v26 + 1) = v5;
        v29 = &v25[32 * v24];
        *((_QWORD *)v26 + 2) = v6;
        *((_QWORD *)v26 + 3) = v26;
        v19 = v26 + 32;
        if (v10 == v20)
        {
          a1[176] = v26;
          a1[177] = v19;
          a1[178] = v29;
LABEL_55:
          if (v20)
            operator delete(v20);
          goto LABEL_57;
        }
        v30 = 0;
        v31 = v10;
        while (1)
        {
          v33 = &v26[v30];
          v34 = &v10[v30];
          v35 = *(char **)&v10[v30 - 8];
          if (v35)
          {
            if (v34 - 32 == v35)
            {
              *((_QWORD *)v33 - 1) = v33 - 32;
              (*(void (**)(_QWORD *))(*((_QWORD *)v34 - 4) + 24))((_QWORD *)v34 - 4);
              goto LABEL_41;
            }
            v32 = v31 - 8;
            *((_QWORD *)v33 - 1) = v35;
          }
          else
          {
            v32 = v33 - 8;
          }
          *(_QWORD *)v32 = 0;
LABEL_41:
          v31 -= 32;
          v30 -= 32;
          if (&v10[v30] == v20)
          {
            v20 = (char *)a1[176];
            v36 = (char *)a1[177];
            a1[176] = &v26[v30];
            a1[177] = v19;
            a1[178] = v29;
            if (v36 == v20)
              goto LABEL_55;
            while (2)
            {
              v39 = v36 - 32;
              v37 = (char *)*((_QWORD *)v36 - 1);
              if (v36 - 32 != v37)
              {
                if (v37)
                {
                  v38 = 5;
LABEL_49:
                  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
                }
                v36 = v39;
                if (v39 == v20)
                  goto LABEL_55;
                continue;
              }
              break;
            }
            v37 = v36 - 32;
            v38 = 4;
            goto LABEL_49;
          }
        }
      }
    }
    v27 = (unint64_t *)(v6 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v10 = (char *)a1[177];
    v20 = (char *)a1[176];
    goto LABEL_37;
  }
  __p = operator new(0x28uLL);
  v45 = xmmword_2245B9440;
  strcpy((char *)__p, "Session doesn't have meshing capability");
  v14 = (char *)operator new(0x60uLL);
  v43 = v14;
  strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
  if (a3)
  {
    *(_QWORD *)&v48.__val_ = 102;
    v48.__cat_ = std::generic_category();
    sub_2245321DC(&v48, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v15 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v15;
    v16 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v14 = v43;
  }
  operator delete(v14);
  if (SHIBYTE(v45) < 0)
    operator delete(__p);
  return v3 != 0;
}

void sub_2232DE610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2232DE664(uint64_t a1, uint64_t a2, uint64_t *a3, CFTypeRef *a4)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *a3;
  v5 = (std::__shared_weak_count *)a3[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v15[0] = &off_24EC2AF40;
  v15[1] = v4;
  v15[2] = v5;
  v16 = v15;
  v9 = sub_2232D8E5C(a1 + 8, (uint64_t *)(a2 + 8), v15, a4);
  v10 = v16;
  if (v16 == v15)
  {
    v11 = 4;
    v10 = v15;
    goto LABEL_9;
  }
  if (v16)
  {
    v11 = 5;
LABEL_9:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v9;
}

void sub_2232DE778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  sub_223167354((uint64_t)&a10);
  sub_223167354((uint64_t)&a12);
  _Unwind_Resume(a1);
}

BOOL sub_2232DE7C0(uint64_t a1, uint64_t *a2, CFTypeRef *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v14[0] = &off_24EC2AFD0;
  v14[1] = v3;
  v14[2] = v4;
  v15 = v14;
  v8 = sub_2232D932C(a1 + 8, v14, a3);
  v9 = v15;
  if (v15 == v14)
  {
    v10 = 4;
    v9 = v14;
    goto LABEL_9;
  }
  if (v15)
  {
    v10 = 5;
LABEL_9:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v8;
}

void sub_2232DE8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  sub_223167354((uint64_t)&a10);
  sub_223167354((uint64_t)&a12);
  _Unwind_Resume(a1);
}

BOOL sub_2232DE918(uint64_t a1, uint64_t *a2, CFTypeRef *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v14[0] = &off_24EC2B060;
  v14[1] = v3;
  v14[2] = v4;
  v15 = v14;
  v8 = sub_2232D965C(a1 + 8, v14, a3);
  v9 = v15;
  if (v15 == v14)
  {
    v10 = 4;
    v9 = v14;
    goto LABEL_9;
  }
  if (v15)
  {
    v10 = 5;
LABEL_9:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v8;
}

void sub_2232DEA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  sub_223167354((uint64_t)&a10);
  sub_223167354((uint64_t)&a12);
  _Unwind_Resume(a1);
}

BOOL sub_2232DEA70(uint64_t a1, uint64_t *a2, CFTypeRef *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v14[0] = &off_24EC2B0E0;
  v14[1] = v3;
  v14[2] = v4;
  v15 = v14;
  v8 = sub_2232D998C(a1 + 8, v14, a3);
  v9 = v15;
  if (v15 == v14)
  {
    v10 = 4;
    v9 = v14;
    goto LABEL_9;
  }
  if (v15)
  {
    v10 = 5;
LABEL_9:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v8;
}

void sub_2232DEB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  sub_223167354((uint64_t)&a10);
  sub_223167354((uint64_t)&a12);
  _Unwind_Resume(a1);
}

BOOL sub_2232DEBC8(uint64_t a1, uint64_t *a2, CFTypeRef *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v14[0] = &off_24EC2B160;
  v14[1] = v3;
  v14[2] = v4;
  v15 = v14;
  v8 = sub_2232D9CBC(a1 + 8, v14, a3);
  v9 = v15;
  if (v15 == v14)
  {
    v10 = 4;
    v9 = v14;
    goto LABEL_9;
  }
  if (v15)
  {
    v10 = 5;
LABEL_9:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v8;
}

void sub_2232DECD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  sub_223167354((uint64_t)&a10);
  sub_223167354((uint64_t)&a12);
  _Unwind_Resume(a1);
}

BOOL sub_2232DED20(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v43;
  void *__p;
  __int128 v45;
  CFTypeRef cf;
  std::__shared_weak_count *v47;
  std::error_condition v48;

  v3 = *(_QWORD *)(*(_QWORD *)(a1[152] + 56) + 40);
  if (v3)
  {
    v5 = *(void **)a2;
    v6 = *(_QWORD *)(a2 + 8);
    __p = *(void **)a2;
    *(_QWORD *)&v45 = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      v9 = a1 + 162;
      v10 = (char *)a1[162];
      v11 = a1[163];
      if ((unint64_t)v10 < v11)
      {
        do
          v12 = __ldxr(v7);
        while (__stxr(v12 + 1, v7));
        goto LABEL_22;
      }
    }
    else
    {
      v9 = a1 + 162;
      v10 = (char *)a1[162];
      v11 = a1[163];
      if ((unint64_t)v10 < v11)
      {
LABEL_22:
        *(_QWORD *)v10 = &off_24EC2A410;
        *((_QWORD *)v10 + 1) = v5;
        *((_QWORD *)v10 + 2) = v6;
        *((_QWORD *)v10 + 3) = v10;
        v19 = v10 + 32;
LABEL_57:
        *v9 = v19;
        if ((_QWORD)v45)
        {
          v40 = (unint64_t *)(v45 + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            (*(void (**)(_QWORD))(*(_QWORD *)v45 + 16))(v45);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v45);
          }
        }
        return v3 != 0;
      }
    }
    v20 = (char *)a1[161];
    v21 = (v10 - v20) >> 5;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 59)
      sub_22316E078();
    v23 = v11 - (_QWORD)v20;
    if (v23 >> 4 > v22)
      v22 = v23 >> 4;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
      v24 = 0x7FFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 59)
        sub_223174E94();
      v25 = (char *)operator new(32 * v24);
      v26 = &v25[32 * v21];
      if (!v6)
        goto LABEL_37;
    }
    else
    {
      v25 = 0;
      v26 = (char *)(32 * v21);
      if (!v6)
      {
LABEL_37:
        *(_QWORD *)v26 = &off_24EC2A410;
        *((_QWORD *)v26 + 1) = v5;
        v29 = &v25[32 * v24];
        *((_QWORD *)v26 + 2) = v6;
        *((_QWORD *)v26 + 3) = v26;
        v19 = v26 + 32;
        if (v10 == v20)
        {
          a1[161] = v26;
          a1[162] = v19;
          a1[163] = v29;
LABEL_55:
          if (v20)
            operator delete(v20);
          goto LABEL_57;
        }
        v30 = 0;
        v31 = v10;
        while (1)
        {
          v33 = &v26[v30];
          v34 = &v10[v30];
          v35 = *(char **)&v10[v30 - 8];
          if (v35)
          {
            if (v34 - 32 == v35)
            {
              *((_QWORD *)v33 - 1) = v33 - 32;
              (*(void (**)(_QWORD *))(*((_QWORD *)v34 - 4) + 24))((_QWORD *)v34 - 4);
              goto LABEL_41;
            }
            v32 = v31 - 8;
            *((_QWORD *)v33 - 1) = v35;
          }
          else
          {
            v32 = v33 - 8;
          }
          *(_QWORD *)v32 = 0;
LABEL_41:
          v31 -= 32;
          v30 -= 32;
          if (&v10[v30] == v20)
          {
            v20 = (char *)a1[161];
            v36 = (char *)a1[162];
            a1[161] = &v26[v30];
            a1[162] = v19;
            a1[163] = v29;
            if (v36 == v20)
              goto LABEL_55;
            while (2)
            {
              v39 = v36 - 32;
              v37 = (char *)*((_QWORD *)v36 - 1);
              if (v36 - 32 != v37)
              {
                if (v37)
                {
                  v38 = 5;
LABEL_49:
                  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
                }
                v36 = v39;
                if (v39 == v20)
                  goto LABEL_55;
                continue;
              }
              break;
            }
            v37 = v36 - 32;
            v38 = 4;
            goto LABEL_49;
          }
        }
      }
    }
    v27 = (unint64_t *)(v6 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v10 = (char *)a1[162];
    v20 = (char *)a1[161];
    goto LABEL_37;
  }
  __p = operator new(0x30uLL);
  v45 = xmmword_2245B9450;
  strcpy((char *)__p, "Session doesn't have keyframing capability");
  v14 = (char *)operator new(0x60uLL);
  v43 = v14;
  strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
  if (a3)
  {
    *(_QWORD *)&v48.__val_ = 102;
    v48.__cat_ = std::generic_category();
    sub_2245321DC(&v48, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v15 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v15;
    v16 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v14 = v43;
  }
  operator delete(v14);
  if (SHIBYTE(v45) < 0)
    operator delete(__p);
  return v3 != 0;
}

void sub_2232DF0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2232DF13C(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  std::__assoc_sub_state *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char v11;
  char v12;
  std::__assoc_sub_state *v13;
  uint64_t *p_shared_owners;
  unint64_t v15;
  const std::error_category *v17;
  CFTypeRef v18;
  unint64_t *v19;
  std::__assoc_sub_state *v20;
  __int128 v21;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  std::error_condition v25;

  v4 = *(_QWORD *)(a1 + 1216);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 40);
  if (v5)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_223197FA4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
      v5 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 40);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      __p[2] = *(void **)(a2 + 16);
    }
    sub_22362429C((uint64_t *)(*(_QWORD *)(v5 + 72) + 1616), (uint64_t)__p, (uint64_t *)&v20);
    sub_22360AC28(&v20);
    v12 = v11;
    v13 = v20;
    if (!v20)
      goto LABEL_18;
    p_shared_owners = &v20->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v15 - 1, (unint64_t *)p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__assoc_sub_state *))v13->__on_zero_shared)(v13);
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      {
LABEL_19:
        if ((v12 & 1) != 0)
          return 1;
        goto LABEL_23;
      }
    }
    else
    {
LABEL_18:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_19;
    }
    operator delete(__p[0]);
    if ((v12 & 1) != 0)
      return 1;
LABEL_23:
    strcpy((char *)__p, "Error saving keyframes");
    HIBYTE(__p[2]) = 22;
    v6 = (std::__assoc_sub_state *)operator new(0x60uLL);
    v20 = v6;
    v21 = xmmword_2245C45F0;
    strcpy((char *)v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (!a3)
      goto LABEL_37;
    v17 = std::generic_category();
    *(_QWORD *)&v25.__val_ = 22;
    v25.__cat_ = v17;
    sub_2245321DC(&v25, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v18 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v18;
    v8 = v24;
    if (!v24)
      goto LABEL_32;
    v19 = (unint64_t *)&v24->__shared_owners_;
    do
      v10 = __ldaxr(v19);
    while (__stlxr(v10 - 1, v19));
    goto LABEL_31;
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_2245B9450;
  strcpy((char *)__p[0], "Session doesn't have keyframing capability");
  v6 = (std::__assoc_sub_state *)operator new(0x60uLL);
  v20 = v6;
  v21 = xmmword_2245C45F0;
  strcpy((char *)v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
  if (!a3)
    goto LABEL_37;
  *(_QWORD *)&v25.__val_ = 102;
  v25.__cat_ = std::generic_category();
  sub_2245321DC(&v25, (uint64_t)__p, (CFErrorRef *)&cf);
  if (*a3)
    CFRelease(*a3);
  *a3 = 0;
  v7 = cf;
  if (cf)
    CFRetain(cf);
  *a3 = v7;
  v8 = v24;
  if (!v24)
    goto LABEL_32;
  v9 = (unint64_t *)&v24->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
LABEL_31:
  if (v10)
  {
LABEL_32:
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_36;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (SHIBYTE(v21) < 0)
  {
LABEL_36:
    v6 = v20;
LABEL_37:
    operator delete(v6);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
    goto LABEL_38;
  }
LABEL_33:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    return 0;
LABEL_38:
  operator delete(__p[0]);
  return 0;
}

void sub_2232DF454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232DF4D4(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  std::__assoc_sub_state *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char v11;
  char v12;
  std::__assoc_sub_state *v13;
  uint64_t *p_shared_owners;
  unint64_t v15;
  const std::error_category *v17;
  CFTypeRef v18;
  unint64_t *v19;
  std::__assoc_sub_state *v20;
  __int128 v21;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  std::error_condition v25;

  v4 = *(_QWORD *)(a1 + 1216);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 40);
  if (v5)
  {
    if (!*(_BYTE *)(a1 + 836) || !*(_BYTE *)(a1 + 824))
      return 1;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_223197FA4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
      v5 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 40);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      *(_QWORD *)&__p[16] = *(_QWORD *)(a2 + 16);
    }
    sub_223624628((uint64_t *)(*(_QWORD *)(v5 + 72) + 1784), (uint64_t)__p, (uint64_t *)&v20);
    sub_22360AC28(&v20);
    v12 = v11;
    v13 = v20;
    if (!v20)
      goto LABEL_20;
    p_shared_owners = &v20->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v15 - 1, (unint64_t *)p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__assoc_sub_state *))v13->__on_zero_shared)(v13);
      if ((__p[23] & 0x80000000) == 0)
      {
LABEL_21:
        if ((v12 & 1) != 0)
          return 1;
        goto LABEL_25;
      }
    }
    else
    {
LABEL_20:
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_21;
    }
    operator delete(*(void **)__p);
    if ((v12 & 1) != 0)
      return 1;
LABEL_25:
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C6440;
    strcpy(*(char **)__p, "Error saving room boundaries");
    v6 = (std::__assoc_sub_state *)operator new(0x60uLL);
    v20 = v6;
    v21 = xmmword_2245C45F0;
    strcpy((char *)v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (!a3)
      goto LABEL_39;
    v17 = std::generic_category();
    *(_QWORD *)&v25.__val_ = 22;
    v25.__cat_ = v17;
    sub_2245321DC(&v25, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v18 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v18;
    v8 = v24;
    if (!v24)
      goto LABEL_34;
    v19 = (unint64_t *)&v24->__shared_owners_;
    do
      v10 = __ldaxr(v19);
    while (__stlxr(v10 - 1, v19));
    goto LABEL_33;
  }
  *(_QWORD *)__p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_2245B9450;
  strcpy(*(char **)__p, "Session doesn't have keyframing capability");
  v6 = (std::__assoc_sub_state *)operator new(0x60uLL);
  v20 = v6;
  v21 = xmmword_2245C45F0;
  strcpy((char *)v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
  if (!a3)
    goto LABEL_39;
  *(_QWORD *)&v25.__val_ = 102;
  v25.__cat_ = std::generic_category();
  sub_2245321DC(&v25, (uint64_t)__p, (CFErrorRef *)&cf);
  if (*a3)
    CFRelease(*a3);
  *a3 = 0;
  v7 = cf;
  if (cf)
    CFRetain(cf);
  *a3 = v7;
  v8 = v24;
  if (!v24)
    goto LABEL_34;
  v9 = (unint64_t *)&v24->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
LABEL_33:
  if (v10)
  {
LABEL_34:
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_38;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (SHIBYTE(v21) < 0)
  {
LABEL_38:
    v6 = v20;
LABEL_39:
    operator delete(v6);
    if ((__p[23] & 0x80000000) == 0)
      return 0;
    goto LABEL_40;
  }
LABEL_35:
  if ((__p[23] & 0x80000000) == 0)
    return 0;
LABEL_40:
  operator delete(*(void **)__p);
  return 0;
}

void sub_2232DF810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232DF890(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  CFTypeRef v11;
  unint64_t *p_shared_owners;
  char *v13;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56);
  if (*(_QWORD *)(v4 + 16))
  {
    if ((sub_22360AD28(v4, a2) & 1) != 0)
      return 1;
    HIBYTE(__p[2]) = 19;
    strcpy((char *)__p, "Error saving meshes");
    v6 = (char *)operator new(0x60uLL);
    v13 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v8 = v16;
      if (!v16)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
LABEL_21:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_25:
      v6 = v13;
    }
  }
  else
  {
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B9440;
    strcpy((char *)__p[0], "Session doesn't have meshing capability");
    v6 = (char *)operator new(0x60uLL);
    v13 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 102;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v16;
      if (!v16)
        goto LABEL_25;
      v9 = (unint64_t *)&v16->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_21;
    }
  }
  operator delete(v6);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_2232DFB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2232DFB60(uint64_t a1@<X0>, CFTypeRef *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56);
  if (*(_QWORD *)(v4 + 40))
  {
    sub_22360AE40(v4, (uint64_t)__p);
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&__p[16];
    *(_BYTE *)(a3 + 24) = 1;
  }
  else
  {
    *(_QWORD *)__p = operator new(0x30uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B9450;
    strcpy(*(char **)__p, "Session doesn't have keyframing capability");
    v6 = (char *)operator new(0x60uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 102;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
}

void sub_2232DFD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232DFD3C(uint64_t a1, char a2, CFTypeRef *a3)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  const std::error_category *v11;
  CFTypeRef v12;
  unint64_t *p_shared_owners;
  char *v14;
  void *__p;
  __int128 v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56);
  if (*(_QWORD *)(v4 + 40))
  {
    LOBYTE(__p) = a2;
    if ((sub_22360B040(v4, (uint64_t)&__p) & 1) != 0)
      return 1;
    __p = operator new(0x28uLL);
    v16 = xmmword_2245C65C0;
    strcpy((char *)__p, "Error localizing restored keyframes");
    v6 = (char *)operator new(0x60uLL);
    v14 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a3)
    {
      v11 = std::generic_category();
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = v11;
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v8 = v18;
      if (!v18)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
LABEL_21:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_25:
      v6 = v14;
    }
  }
  else
  {
    __p = operator new(0x30uLL);
    v16 = xmmword_2245B9450;
    strcpy((char *)__p, "Session doesn't have keyframing capability");
    v6 = (char *)operator new(0x60uLL);
    v14 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 102;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v18;
      if (!v18)
        goto LABEL_25;
      v9 = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_21;
    }
  }
  operator delete(v6);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232DFFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2232E0024(uint64_t a1, CFTypeRef *a2)
{
  _QWORD *v3;
  _BOOL8 v4;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;
  void *__p;
  __int128 v21;
  char v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 1216) + 56);
  if (v3[5])
  {
    if (v3[2])
    {
      sub_22360B488(v3, (uint64_t)&__p);
      v4 = v23 != 0;
      if (v23)
      {
        if (v22)
          sub_2232954B0((uint64_t)&__p);
      }
      else
      {
        v13 = (std::__shared_weak_count *)v21;
        if ((_QWORD)v21)
        {
          v14 = (unint64_t *)(v21 + 8);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      return v4;
    }
    __p = operator new(0x28uLL);
    v21 = xmmword_2245B9440;
    strcpy((char *)__p, "Session doesn't have meshing capability");
    v5 = (char *)operator new(0x60uLL);
    v16 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v19.__val_ = 102;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v10;
      v7 = v18;
      if (!v18)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
LABEL_23:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
LABEL_25:
      v5 = v16;
    }
  }
  else
  {
    __p = operator new(0x30uLL);
    v21 = xmmword_2245B9450;
    strcpy((char *)__p, "Session doesn't have keyframing capability");
    v5 = (char *)operator new(0x60uLL);
    v16 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v19.__val_ = 102;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v18;
      if (!v18)
        goto LABEL_25;
      v8 = (unint64_t *)&v18->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_23;
    }
  }
  operator delete(v5);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232E031C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  operator delete(v22);
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2232E0370(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  void *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  void *__p;
  __int128 v45;
  CFTypeRef cf;
  std::__shared_weak_count *v47;
  std::error_condition v48;

  v4 = *(_QWORD *)(a1[152] + 56);
  if (*(_QWORD *)(v4 + 40) && *(_QWORD *)(v4 + 56))
  {
    v6 = *(void **)a2;
    v7 = *(_QWORD *)(a2 + 8);
    __p = *(void **)a2;
    *(_QWORD *)&v45 = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      v10 = a1 + 165;
      v11 = (char *)a1[165];
      v12 = a1[166];
      if ((unint64_t)v11 < v12)
      {
        do
          v13 = __ldxr(v8);
        while (__stxr(v13 + 1, v8));
        goto LABEL_24;
      }
    }
    else
    {
      v10 = a1 + 165;
      v11 = (char *)a1[165];
      v12 = a1[166];
      if ((unint64_t)v11 < v12)
      {
LABEL_24:
        *(_QWORD *)v11 = &off_24EC2A4A0;
        *((_QWORD *)v11 + 1) = v6;
        *((_QWORD *)v11 + 2) = v7;
        *((_QWORD *)v11 + 3) = v11;
        v20 = v11 + 32;
LABEL_59:
        *v10 = v20;
        if ((_QWORD)v45)
        {
          v41 = (unint64_t *)(v45 + 8);
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            (*(void (**)(_QWORD))(*(_QWORD *)v45 + 16))(v45);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v45);
          }
        }
        return 1;
      }
    }
    v21 = (char *)a1[164];
    v22 = (v11 - v21) >> 5;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 59)
      sub_22316E078();
    v24 = v12 - (_QWORD)v21;
    if (v24 >> 4 > v23)
      v23 = v24 >> 4;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0)
      v25 = 0x7FFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      if (v25 >> 59)
        sub_223174E94();
      v26 = (char *)operator new(32 * v25);
      v27 = &v26[32 * v22];
      if (!v7)
        goto LABEL_39;
    }
    else
    {
      v26 = 0;
      v27 = (char *)(32 * v22);
      if (!v7)
      {
LABEL_39:
        *(_QWORD *)v27 = &off_24EC2A4A0;
        *((_QWORD *)v27 + 1) = v6;
        v30 = &v26[32 * v25];
        *((_QWORD *)v27 + 2) = v7;
        *((_QWORD *)v27 + 3) = v27;
        v20 = v27 + 32;
        if (v11 == v21)
        {
          a1[164] = v27;
          a1[165] = v20;
          a1[166] = v30;
LABEL_57:
          if (v21)
            operator delete(v21);
          goto LABEL_59;
        }
        v31 = 0;
        v32 = v11;
        while (1)
        {
          v34 = &v27[v31];
          v35 = &v11[v31];
          v36 = *(char **)&v11[v31 - 8];
          if (v36)
          {
            if (v35 - 32 == v36)
            {
              *((_QWORD *)v34 - 1) = v34 - 32;
              (*(void (**)(_QWORD *))(*((_QWORD *)v35 - 4) + 24))((_QWORD *)v35 - 4);
              goto LABEL_43;
            }
            v33 = v32 - 8;
            *((_QWORD *)v34 - 1) = v36;
          }
          else
          {
            v33 = v34 - 8;
          }
          *(_QWORD *)v33 = 0;
LABEL_43:
          v32 -= 32;
          v31 -= 32;
          if (&v11[v31] == v21)
          {
            v21 = (char *)a1[164];
            v37 = (char *)a1[165];
            a1[164] = &v27[v31];
            a1[165] = v20;
            a1[166] = v30;
            if (v37 == v21)
              goto LABEL_57;
            while (2)
            {
              v40 = v37 - 32;
              v38 = (char *)*((_QWORD *)v37 - 1);
              if (v37 - 32 != v38)
              {
                if (v38)
                {
                  v39 = 5;
LABEL_51:
                  (*(void (**)(void))(*(_QWORD *)v38 + 8 * v39))();
                }
                v37 = v40;
                if (v40 == v21)
                  goto LABEL_57;
                continue;
              }
              break;
            }
            v38 = v37 - 32;
            v39 = 4;
            goto LABEL_51;
          }
        }
      }
    }
    v28 = (unint64_t *)(v7 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v11 = (char *)a1[165];
    v21 = (char *)a1[164];
    goto LABEL_39;
  }
  __p = operator new(0x30uLL);
  v45 = xmmword_2245B9450;
  strcpy((char *)__p, "Session doesn't have keyframing capability");
  v14 = (char *)operator new(0x60uLL);
  v43 = v14;
  strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
  if (a3)
  {
    *(_QWORD *)&v48.__val_ = 102;
    v48.__cat_ = std::generic_category();
    sub_2245321DC(&v48, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v15 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v15;
    v16 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v14 = v43;
  }
  operator delete(v14);
  if (SHIBYTE(v45) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232E074C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232E07A0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v35;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  v35 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = a1 + 159;
    v8 = (char *)a1[159];
    v9 = a1[160];
    if ((unint64_t)v8 < v9)
    {
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      goto LABEL_8;
    }
  }
  else
  {
    v7 = a1 + 159;
    v8 = (char *)a1[159];
    v9 = a1[160];
    if ((unint64_t)v8 < v9)
    {
LABEL_8:
      *(_QWORD *)v8 = &off_24EC2A530;
      *((_QWORD *)v8 + 1) = v3;
      *((_QWORD *)v8 + 2) = v4;
      *((_QWORD *)v8 + 3) = v8;
      v11 = v8 + 32;
      goto LABEL_43;
    }
  }
  v12 = (char *)a1[158];
  v13 = (v8 - v12) >> 5;
  v14 = v13 + 1;
  if ((unint64_t)(v13 + 1) >> 59)
    sub_22316E078();
  v15 = v9 - (_QWORD)v12;
  if (v15 >> 4 > v14)
    v14 = v15 >> 4;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
    v16 = 0x7FFFFFFFFFFFFFFLL;
  else
    v16 = v14;
  if (!v16)
  {
    v17 = 0;
    v18 = (char *)(32 * v13);
    if (!v4)
      goto LABEL_23;
    goto LABEL_20;
  }
  if (v16 >> 59)
    sub_223174E94();
  v17 = (char *)operator new(32 * v16);
  v18 = &v17[32 * v13];
  if (v4)
  {
LABEL_20:
    v19 = (unint64_t *)&v4->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v8 = (char *)a1[159];
    v12 = (char *)a1[158];
  }
LABEL_23:
  *(_QWORD *)v18 = &off_24EC2A530;
  *((_QWORD *)v18 + 1) = v3;
  v21 = &v17[32 * v16];
  *((_QWORD *)v18 + 2) = v4;
  *((_QWORD *)v18 + 3) = v18;
  v11 = v18 + 32;
  if (v8 != v12)
  {
    v22 = 0;
    v23 = v8;
    while (1)
    {
      v25 = &v18[v22];
      v26 = &v8[v22];
      v27 = *(char **)&v8[v22 - 8];
      if (v27)
      {
        if (v26 - 32 == v27)
        {
          *((_QWORD *)v25 - 1) = v25 - 32;
          (*(void (**)(_QWORD *))(*((_QWORD *)v26 - 4) + 24))((_QWORD *)v26 - 4);
          goto LABEL_27;
        }
        v24 = v23 - 8;
        *((_QWORD *)v25 - 1) = v27;
      }
      else
      {
        v24 = v25 - 8;
      }
      *(_QWORD *)v24 = 0;
LABEL_27:
      v23 -= 32;
      v22 -= 32;
      if (&v8[v22] == v12)
      {
        v12 = (char *)a1[158];
        v28 = (char *)a1[159];
        a1[158] = &v18[v22];
        a1[159] = v11;
        a1[160] = v21;
        if (v28 == v12)
          goto LABEL_41;
        while (2)
        {
          v31 = v28 - 32;
          v29 = (char *)*((_QWORD *)v28 - 1);
          if (v28 - 32 != v29)
          {
            if (v29)
            {
              v30 = 5;
LABEL_35:
              (*(void (**)(char *))(*(_QWORD *)v29 + 8 * v30))(v29);
            }
            v28 = v31;
            if (v31 == v12)
              goto LABEL_41;
            continue;
          }
          break;
        }
        v29 = v28 - 32;
        v30 = 4;
        goto LABEL_35;
      }
    }
  }
  a1[158] = v18;
  a1[159] = v11;
  a1[160] = v21;
LABEL_41:
  if (v12)
    operator delete(v12);
LABEL_43:
  *v7 = v11;
  if (v35)
  {
    v32 = (unint64_t *)&v35->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  return 1;
}

void sub_2232E0A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_2232E0A40(uint64_t a1, char a2, CFTypeRef *a3)
{
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  __int128 v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16);
  if (v3)
  {
    v6 = *(_BYTE *)(a1 + 100);
    if ((a2 & 2) != 0
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp", 1011, (uint64_t)"!recon::HasMappingAttribute(mask, recon::MappingAttribute::Normal)", 66, (uint64_t)"Attribute not supported in per-frame meshing", 44, (void (*)(void **))sub_22457406C)|| (a2 & 8) != 0&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp", 1013, (uint64_t)"!recon::HasMappingAttribute(mask, recon::MappingAttribute::JasperPoint)", 71, (uint64_t)"Attribute not supported in per-frame meshing", 44, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_23;
    }
    LOBYTE(__p) = v6 & a2;
    *(_BYTE *)(a1 + 392) = *(_BYTE *)(a1 + 393) & v6 & a2;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16);
    if (v7)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 72) + 3624) + 40))(*(_QWORD *)(*(_QWORD *)(v7 + 72) + 3624)) & 1) != 0
        || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp", 1022, (uint64_t)"session_node_group_->InputEnablePerFrameMeshAttributes().Enabled()", 66, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16) + 72) + 3616;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 16))(v8, &__p);
        return v3 != 0;
      }
LABEL_23:
      abort();
    }
  }
  else
  {
    __p = operator new(0x28uLL);
    v17 = xmmword_2245B9440;
    strcpy((char *)__p, "Session doesn't have meshing capability");
    v10 = (char *)operator new(0x60uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 102;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if (SHIBYTE(v17) < 0)
      operator delete(__p);
  }
  return v3 != 0;
}

void sub_2232E0CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2232E0CFC(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  CFTypeRef v11;
  unint64_t *p_shared_owners;
  char *v13;
  void *__p;
  __int128 v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16))
  {
    if ((sub_223FFB370(a1 + 288, a2) & 1) != 0)
      return sub_2232E0A40(a1, *(_BYTE *)(a1 + 392), a3);
    __p = operator new(0x78uLL);
    v15 = xmmword_2245C7880;
    strcpy((char *)__p, "Cannot enable per frame semantics output. Make sure MeshingConfig.integrate_attribute_mask also has semantics enabled.");
    v6 = (char *)operator new(0x60uLL);
    v13 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 102;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v8 = v17;
      if (!v17)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
LABEL_21:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_25:
      v6 = v13;
    }
  }
  else
  {
    __p = operator new(0x28uLL);
    v15 = xmmword_2245B9440;
    strcpy((char *)__p, "Session doesn't have meshing capability");
    v6 = (char *)operator new(0x60uLL);
    v13 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 102;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v17;
      if (!v17)
        goto LABEL_25;
      v9 = (unint64_t *)&v17->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_21;
    }
  }
  operator delete(v6);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232E0FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2232E1000(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  CFTypeRef v11;
  unint64_t *p_shared_owners;
  char *v13;
  void *__p;
  __int128 v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16))
  {
    if ((sub_223FFCBB4(a1 + 288, a2) & 1) != 0)
      return sub_2232E0A40(a1, *(_BYTE *)(a1 + 392), a3);
    __p = operator new(0x70uLL);
    v15 = xmmword_2245B8D30;
    strcpy((char *)__p, "Cannot enable per frame color output. Make sure MeshingConfig.integrate_attribute_mask also has color enabled.");
    v6 = (char *)operator new(0x60uLL);
    v13 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 102;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v8 = v17;
      if (!v17)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
LABEL_21:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_25:
      v6 = v13;
    }
  }
  else
  {
    __p = operator new(0x28uLL);
    v15 = xmmword_2245B9440;
    strcpy((char *)__p, "Session doesn't have meshing capability");
    v6 = (char *)operator new(0x60uLL);
    v13 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 102;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v17;
      if (!v17)
        goto LABEL_25;
      v9 = (unint64_t *)&v17->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_21;
    }
  }
  operator delete(v6);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232E12B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2232E12FC(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  CFTypeRef v11;
  unint64_t *p_shared_owners;
  char *v13;
  void *__p;
  __int128 v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16))
  {
    if ((sub_223FFD3A8(a1 + 288, a2) & 1) != 0)
      return sub_2232E0A40(a1, *(_BYTE *)(a1 + 392), a3);
    __p = operator new(0x78uLL);
    v15 = xmmword_2245B8E20;
    strcpy((char *)__p, "Cannot enable per frame material output. Make sure MeshingConfig.integrate_attribute_mask also has material enabled.");
    v6 = (char *)operator new(0x60uLL);
    v13 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 102;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v8 = v17;
      if (!v17)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
LABEL_21:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_25:
      v6 = v13;
    }
  }
  else
  {
    __p = operator new(0x28uLL);
    v15 = xmmword_2245B9440;
    strcpy((char *)__p, "Session doesn't have meshing capability");
    v6 = (char *)operator new(0x60uLL);
    v13 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 102;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v17;
      if (!v17)
        goto LABEL_25;
      v9 = (unint64_t *)&v17->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_21;
    }
  }
  operator delete(v6);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232E15BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232E1604(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16))
    return *(_BYTE *)(a1 + 392) & 1;
  __p = operator new(0x28uLL);
  v10 = xmmword_2245B9440;
  strcpy((char *)__p, "Session doesn't have meshing capability");
  v4 = (char *)operator new(0x60uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232E179C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232E17D8(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16))
    return (*(unsigned __int8 *)(a1 + 392) >> 2) & 1;
  __p = operator new(0x28uLL);
  v10 = xmmword_2245B9440;
  strcpy((char *)__p, "Session doesn't have meshing capability");
  v4 = (char *)operator new(0x60uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232E1970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232E19AC(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16))
    return (*(unsigned __int8 *)(a1 + 392) >> 4) & 1;
  __p = operator new(0x28uLL);
  v10 = xmmword_2245B9440;
  strcpy((char *)__p, "Session doesn't have meshing capability");
  v4 = (char *)operator new(0x60uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232E1B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2232E1B80(uint64_t a1, int a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v7;
  _BOOL8 v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CFTypeRef v19;
  unint64_t *p_shared_owners;
  char *v21;
  __int128 v22;
  CFTypeRef cf;
  __int128 v24;
  CFTypeRef v25;
  std::__shared_weak_count *v26;
  std::error_condition v27;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16);
  if (v4)
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 80) + 1448) + 160))(*(_QWORD *)(*(_QWORD *)(v4 + 80) + 1448)) & 1) != 0)
    {
      *(_BYTE *)(a1 + 432) = a2;
      if (a2)
      {
        *(_BYTE *)(a1 + 464) = 1;
        *(_BYTE *)(a1 + 424) = 1;
      }
      v7 = *(_QWORD *)(a1 + 1216);
      LOBYTE(v21) = a2;
      sub_22360CFC8(*(_QWORD **)(v7 + 56), (uint64_t)&v21, &cf);
      v8 = BYTE8(v24) == 0;
      if (!BYTE8(v24))
        return v8;
      if (a3)
      {
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v9 = cf;
        if (cf)
          CFRetain(cf);
        *a3 = v9;
      }
      v10 = (std::__shared_weak_count *)v24;
      if (!(_QWORD)v24)
        return v8;
      v11 = (unint64_t *)(v24 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (v12)
        return v8;
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v8;
    }
    cf = operator new(0x38uLL);
    v24 = xmmword_2245C44A0;
    strcpy((char *)cf, "Session doesn't have occupancy-mapping capability");
    v14 = (char *)operator new(0x60uLL);
    v21 = v14;
    v22 = xmmword_2245C45F0;
    strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (!a3)
      goto LABEL_37;
    *(_QWORD *)&v27.__val_ = 102;
    v27.__cat_ = std::generic_category();
    sub_2245321DC(&v27, (uint64_t)&cf, (CFErrorRef *)&v25);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v19 = v25;
    if (v25)
      CFRetain(v25);
    *a3 = v19;
    v16 = v26;
    if (!v26)
      goto LABEL_35;
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
  }
  else
  {
    cf = operator new(0x28uLL);
    v24 = xmmword_2245B9440;
    strcpy((char *)cf, "Session doesn't have meshing capability");
    v14 = (char *)operator new(0x60uLL);
    v21 = v14;
    v22 = xmmword_2245C45F0;
    strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (!a3)
    {
LABEL_37:
      operator delete(v14);
      goto LABEL_38;
    }
    *(_QWORD *)&v27.__val_ = 102;
    v27.__cat_ = std::generic_category();
    sub_2245321DC(&v27, (uint64_t)&cf, (CFErrorRef *)&v25);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v15 = v25;
    if (v25)
      CFRetain(v25);
    *a3 = v15;
    v16 = v26;
    if (!v26)
      goto LABEL_35;
    v17 = (unint64_t *)&v26->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
  }
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_36;
  }
LABEL_35:
  if (SHIBYTE(v22) < 0)
  {
LABEL_36:
    v14 = v21;
    goto LABEL_37;
  }
LABEL_38:
  if (SHIBYTE(v24) < 0)
    operator delete((void *)cf);
  return 0;
}

void sub_2232E1ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223224234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232E1EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2232E1F28(uint64_t a1, CFTypeRef *a2)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16))
  {
    if (!*(_BYTE *)(a1 + 568)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp", 1138, (uint64_t)"config_.meshing.has_value()", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    return *(_BYTE *)(a1 + 432) != 0;
  }
  else
  {
    __p = operator new(0x28uLL);
    v11 = xmmword_2245B9440;
    strcpy((char *)__p, "Session doesn't have meshing capability");
    v5 = (char *)operator new(0x60uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 102;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v11) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_2232E2108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2232E2144(uint64_t a1, int a2, CFTypeRef *a3, float a4, float a5, float a6)
{
  _QWORD *v8;
  _BOOL8 v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  char *v20;
  __int128 v21;
  CFTypeRef cf;
  __int128 v23;
  CFTypeRef v24;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  v8 = *(_QWORD **)(*(_QWORD *)(a1 + 1216) + 56);
  if (v8[2])
  {
    *(_BYTE *)(a1 + 472) = a2;
    if (a2)
      *(_BYTE *)(a1 + 424) = 1;
    LOBYTE(v20) = a2;
    *((float *)&v20 + 1) = a4;
    *(_QWORD *)&v21 = __PAIR64__(LODWORD(a6), LODWORD(a5));
    sub_22360D394(v8, (uint64_t)&v20, &cf);
    v9 = BYTE8(v23) == 0;
    if (!BYTE8(v23))
      return v9;
    if (a3)
    {
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
    }
    v11 = (std::__shared_weak_count *)v23;
    if (!(_QWORD)v23)
      return v9;
    v12 = (unint64_t *)(v23 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (v13)
      return v9;
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    return v9;
  }
  cf = operator new(0x38uLL);
  v23 = xmmword_2245C4630;
  strcpy((char *)cf, "Session doesn't have occupancy by proximity capability");
  v15 = (char *)operator new(0x60uLL);
  v20 = v15;
  v21 = xmmword_2245C45F0;
  strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
  if (a3)
  {
    *(_QWORD *)&v26.__val_ = 102;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)&cf, (CFErrorRef *)&v24);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v16 = v24;
    if (v24)
      CFRetain(v24);
    *a3 = v16;
    v17 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      goto LABEL_29;
    v15 = v20;
  }
  operator delete(v15);
LABEL_29:
  if (SHIBYTE(v23) < 0)
    operator delete((void *)cf);
  return 0;
}

void sub_2232E2380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2232E23D0(uint64_t a1, CFTypeRef *a2)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16))
  {
    if (!*(_BYTE *)(a1 + 568)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp", 1193, (uint64_t)"config_.meshing.has_value()", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    return *(_BYTE *)(a1 + 472) != 0;
  }
  else
  {
    __p = operator new(0x28uLL);
    v11 = xmmword_2245B9440;
    strcpy((char *)__p, "Session doesn't have meshing capability");
    v5 = (char *)operator new(0x60uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 102;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v11) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_2232E25B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2232E25EC(uint64_t a1, CFTypeRef *a2)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16))
  {
    if (!*(_BYTE *)(a1 + 568)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp", 1203, (uint64_t)"config_.meshing.has_value()", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    if (*(_BYTE *)(a1 + 505))
      return *(_BYTE *)(a1 + 557) != 0;
    return 0;
  }
  __p = operator new(0x28uLL);
  v11 = xmmword_2245B9440;
  strcpy((char *)__p, "Session doesn't have meshing capability");
  v5 = (char *)operator new(0x60uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 102;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if ((SHIBYTE(v11) & 0x80000000) == 0)
    return 0;
  operator delete(__p);
  return 0;
}

void sub_2232E27DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2232E2818(uint64_t a1@<X0>, CFTypeRef *a2@<X1>, _QWORD *a3@<X8>, __n128 a4@<Q0>, __n128 a5@<Q1>, __n128 a6@<Q2>, __n128 a7@<Q3>, __n128 a8@<Q4>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  char *v14;
  CFErrorRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _BYTE __p[32];
  __n128 v20;
  __n128 v21;
  unint64_t v22;
  unsigned __int32 v23;
  char *v24;
  __int128 v25;
  CFErrorRef v26;
  std::__shared_weak_count *v27;
  std::error_condition v28;

  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16);
  if (v9)
  {
    *(__n128 *)__p = a4;
    *(__n128 *)&__p[16] = a5;
    v20 = a6;
    v21 = a7;
    v22 = a8.n128_u64[0];
    v23 = a8.n128_u32[2];
    sub_223626E68((uint64_t *)(*(_QWORD *)(v9 + 72) + 2456), (uint64_t)__p, (uint64_t *)&v24);
    sub_22360CA60((uint64_t *)&v24, (uint64_t)a3);
    v10 = (uint64_t)v24;
    if (v24)
    {
      v11 = (unint64_t *)(v24 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    }
    return;
  }
  *(_QWORD *)__p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_2245B9440;
  strcpy(*(char **)__p, "Session doesn't have meshing capability");
  v14 = (char *)operator new(0x60uLL);
  v24 = v14;
  v25 = xmmword_2245C45F0;
  strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
  if (a2)
  {
    *(_QWORD *)&v28.__val_ = 102;
    v28.__cat_ = std::generic_category();
    sub_2245321DC(&v28, (uint64_t)__p, &v26);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v15 = v26;
    if (v26)
      CFRetain(v26);
    *a2 = v15;
    v16 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      goto LABEL_20;
    v14 = v24;
  }
  operator delete(v14);
LABEL_20:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void sub_2232E2A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;

  operator delete(v23);
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2232E2A84(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 496))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 488);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 472))
  {
    v5 = *(std::__shared_weak_count **)(a1 + 464);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (*(_BYTE *)(a1 + 448))
    sub_2232954B0(a1 + 8);
  return a1;
}

void sub_2232E2B34(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 496))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 488);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 472))
  {
    v5 = *(std::__shared_weak_count **)(a1 + 464);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (*(_BYTE *)(a1 + 448))
    sub_2232954B0(a1 + 8);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232E2BF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFDataRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  const UInt8 *BytePtr;
  unsigned int Length;
  uint64_t v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *exception;
  _BYTE v20[193];
  char v21;
  __int128 v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD v28[2];
  void (**v29)();
  void *__p;
  void *v31;
  uint64_t v32;
  _QWORD v33[2];
  std::ios_base v34;
  uint64_t v35;
  int v36;
  _QWORD __sb[8];
  unsigned int v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v5 = *(CFDataRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (v5)
      goto LABEL_10;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp", 1232, (uint64_t)"data", 4, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_36;
  }
LABEL_10:
  BytePtr = CFDataGetBytePtr(*(CFDataRef *)a1);
  Length = CFDataGetLength(*(CFDataRef *)a1);
  if ((Length & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  v11 = Length;
  if (BytePtr || !Length)
  {
    if (BytePtr)
      goto LABEL_17;
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_36:
    abort();
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp", 1239, (uint64_t)"values.data()", 13, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_36;
  }
LABEL_17:
  std::streambuf::basic_streambuf();
  __sb[0] = &off_24EC2A5C0;
  __sb[2] = BytePtr;
  __sb[3] = BytePtr;
  __sb[4] = &BytePtr[v11];
  v34.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v33[0] = MEMORY[0x24BEDB820] + 24;
  v33[1] = 0;
  std::ios_base::init(&v34, __sb);
  v35 = 0;
  v36 = -1;
  v39 = 1;
  sub_224555660(v28, &v39, (uint64_t)v33, 0x2800uLL);
  v28[0] = &off_24EC20B48;
  v29 = (void (**)())&unk_24EC20C90;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v38 = 2;
  sub_224554038(v32, &v38);
  sub_2232F0160(v28, (uint64_t)&v39, v38);
  sub_223656398((uint64_t)&v39, (uint64_t)v20);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 440) = 0;
  if (v21)
  {
    sub_22329ACE4(a2, (uint64_t)v20);
    *(_BYTE *)(a2 + 440) = 1;
  }
  *(_BYTE *)(a2 + 448) = 0;
  *(_BYTE *)(a2 + 464) = 0;
  v12 = v23;
  if (v23)
  {
    *(_OWORD *)(a2 + 448) = v22;
    v22 = 0uLL;
    *(_BYTE *)(a2 + 464) = 1;
  }
  *(_BYTE *)(a2 + 472) = 0;
  *(_BYTE *)(a2 + 488) = 0;
  if (v26)
  {
    v13 = v25;
    *(_QWORD *)(a2 + 472) = v24;
    *(_QWORD *)(a2 + 480) = v13;
    v24 = 0;
    v25 = 0;
    *(_BYTE *)(a2 + 488) = 1;
  }
  *(_QWORD *)(a2 + 496) = v27;
  *(_BYTE *)(a2 + 504) = 1;
  if (v12)
  {
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  if (v21)
    sub_2232954B0((uint64_t)v20);
  sub_2232E7484((uint64_t)&v39);
  v28[0] = &off_24EC798B8;
  v29 = (void (**)())&unk_24EC79A00;
  v17 = v32;
  v32 = 0;
  if (v17)
  {
    sub_22455612C((_QWORD *)(v17 + 8));
    MEMORY[0x227684CE8](v17, 0x10F2C40853B94B7);
  }
  v29 = off_24EC79B20;
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  std::istream::~istream();
  return std::streambuf::~streambuf();
}

void sub_2232E2FC4(_Unwind_Exception *a1)
{
  sub_2232E7484((uint64_t)&STACK[0x368]);
  sub_2245557DC(&STACK[0x240]);
  std::istream::~istream();
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_2232E30C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (a15 < 0)
    operator delete(a10);
  __cxa_end_catch();
  JUMPOUT(0x2232E2FC8);
}

void sub_2232E3104(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_2232E3114(char *__s)
{
  uint64_t result;
  _DWORD v2[6];
  int v3;
  char v4;
  char *v5;

  v3 = 0;
  sub_2232F9440(v2, __s);
  if (v3 == -1)
    sub_22316DD70();
  v5 = &v4;
  result = ((uint64_t (*)(char **, _DWORD *))off_24EC2AE10[v3])(&v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(char **, _DWORD *))off_24EC2ADF8[v3])(&v5, v2);
  return result;
}

void sub_2232E31A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232E31BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2232E31D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::ios_base *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int *v13;
  int *v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  __int128 *v73;
  __int128 *v74;
  int64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t i;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  char *v129;
  __int128 v130;
  char *v131;
  char *v132;
  char *v133;
  char *k;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  void *v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  _BYTE *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  size_t v165;
  _BYTE *v166;
  unint64_t v167;
  const void *v168;
  uint64_t v169;
  uint64_t v170;
  const UInt8 *v171;
  CFIndex v172;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t j;
  uint64_t v179;
  _QWORD v180[2];
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const void *v185;
  uint64_t v186;
  const void *v187;
  unint64_t v188;
  __int128 v189;
  __int128 v190;
  int v191;
  uint64_t v192[19];
  _BYTE v193[24];
  _BYTE v194[16];
  __int128 v195;
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  char v203;
  __int128 v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  __int128 v210;
  uint64_t v211;
  char v212;
  char v213;
  char v214;
  __int128 v215;
  uint64_t v216;
  __int128 v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  uint64_t v222;
  char v223;
  char v224;
  __int128 v225;
  uint64_t v226;
  __int128 v227;
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  __int128 v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  char v238;
  __int128 v239;
  uint64_t v240;
  __int128 v241;
  char *v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  char v247;
  char v248;
  __int128 v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  __int128 v253;
  uint64_t v254;
  __int128 v255;
  uint64_t v256;
  char v257;
  char v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  __int16 v262;
  char *v263;
  char *v264;
  char *v265;
  uint64_t v266;
  char v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  _BYTE *v272;
  uint64_t v273;
  __int128 v274;
  uint64_t v275;
  char v276;
  uint64_t v277;
  __int128 v278;
  char *v279;
  char *v280;
  _BYTE *v281;
  _BYTE __src[328];
  __int128 v283;
  _BYTE v284[24];
  __int128 v285;
  uint64_t v286;
  _BYTE v287[24];
  __int128 v288;
  _BYTE v289[24];
  uint64_t v290;
  __int128 v291;
  uint64_t v292;
  uint64_t v293;
  char v294;
  __int128 v295;
  uint64_t v296;
  __int128 v297;
  char *v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  char v303;
  char v304;
  __int128 v305;
  uint64_t v306;
  __int128 v307;
  uint64_t v308;
  __int128 v309;
  uint64_t v310;
  __int128 v311;
  uint64_t v312;
  char v313;
  char v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  char v320;
  __int128 v321;
  __int128 v322;
  _BYTE *v323;
  uint64_t v324;
  uint64_t v325;

  v177 = MEMORY[0x24BDAC7A8]();
  v1 = v0;
  v325 = *MEMORY[0x24BDAC8D0];
  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  v192[0] = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v183 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v183 + *(_QWORD *)(v183 - 24)) = v4;
  v5 = (std::ios_base *)((char *)&v183 + *(_QWORD *)(v183 - 24));
  std::ios_base::init(v5, &v184);
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  v183 = v2 + 24;
  v192[0] = v3;
  std::streambuf::basic_streambuf();
  v175 = v1;
  v184 = MEMORY[0x24BEDB848] + 16;
  v189 = 0u;
  v190 = 0u;
  v191 = 16;
  v180[1] = 1;
  v6 = operator new();
  v7 = v177;
  *(_QWORD *)v6 = &v183;
  *(_QWORD *)(v6 + 8) = &v183;
  *(_BYTE *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 40) = 0;
  *(_BYTE *)(v6 + 48) = 0;
  *(_BYTE *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  v180[0] = &off_24EC1FA80;
  v181 = &unk_24EC1FBD0;
  v182 = v6;
  if (*(_BYTE *)(v177 + 448))
  {
    sub_2232E8410((uint64_t)&__src[8], (uint64_t *)(v177 + 16));
    __src[104] = 0;
    __src[216] = 0;
    if (*(_BYTE *)(v177 + 80))
    {
      sub_2232E8410((uint64_t)&__src[112], (uint64_t *)(v177 + 48));
      __src[208] = *(_BYTE *)(v177 + 72);
      __src[216] = 1;
    }
    __src[224] = 0;
    BYTE8(v283) = 0;
    if (*(_BYTE *)(v177 + 120))
    {
      sub_2232E8410((uint64_t)&__src[232], (uint64_t *)(v177 + 88));
      LOBYTE(v283) = *(_BYTE *)(v177 + 112);
      BYTE8(v283) = 1;
    }
    v284[0] = 0;
    v294 = 0;
    if (*(_BYTE *)(v177 + 288))
    {
      sub_2232E8F68((uint64_t)v284, (uint64_t *)(v177 + 200));
      v294 = 1;
    }
    LOBYTE(v295) = 0;
    v303 = 0;
    if (*(_BYTE *)(v177 + 408))
    {
      v8 = *(char **)(v177 + 296);
      v9 = *(char **)(v177 + 304);
      v321 = 0uLL;
      *(_QWORD *)&v322 = 0;
      v10 = v9 - v8;
      if (v9 == v8)
      {
        v12 = 0;
        v11 = 0uLL;
      }
      else
      {
        if (v10 < 0)
          sub_22316E078();
        *(_QWORD *)&v321 = operator new(v9 - v8);
        *((_QWORD *)&v321 + 1) = v321;
        *(_QWORD *)&v322 = v321 + 16 * (v10 >> 4);
        *(_QWORD *)v193 = &v321;
        do
        {
          v278 = *(_OWORD *)v8;
          sub_2232E9564((char ***)v193, &v278);
          v8 += 16;
        }
        while (v8 != v9);
        v11 = v321;
        v12 = v322;
      }
      v295 = v11;
      v296 = v12;
      v13 = *(int **)(v177 + 320);
      v14 = *(int **)(v177 + 328);
      v15 = (char *)v14 - (char *)v13;
      if (v14 == v13)
      {
        v18 = 0;
        v20 = 0;
        v17 = 0;
      }
      else
      {
        v16 = 0xCCCCCCCCCCCCCCCDLL * (v15 >> 3);
        if (v16 > 0x666666666666666)
          sub_22316E078();
        v17 = (char *)operator new(v15);
        v18 = &v17[40 * v16];
        v19 = v17;
        do
        {
          while (1)
          {
            v22 = *v13;
            v21 = v13[1];
            v24 = v13[2];
            v23 = v13[3];
            v26 = v13[4];
            v25 = v13[5];
            v321 = *(_OWORD *)(v13 + 6);
            if (v19 >= v18)
              break;
            *(_DWORD *)v19 = v22;
            *((_DWORD *)v19 + 1) = v21;
            *((_DWORD *)v19 + 2) = v24;
            *((_DWORD *)v19 + 3) = v23;
            *((_DWORD *)v19 + 4) = v26;
            *((_DWORD *)v19 + 5) = v25;
            *(_OWORD *)(v19 + 24) = v321;
            v20 = v19 + 40;
            v13 += 10;
            v19 += 40;
            if (v13 == v14)
              goto LABEL_39;
          }
          v27 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - v17) >> 3) + 1;
          if (v27 > 0x666666666666666)
            sub_22316E078();
          if (0x999999999999999ALL * ((v18 - v17) >> 3) > v27)
            v27 = 0x999999999999999ALL * ((v18 - v17) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((v18 - v17) >> 3) >= 0x333333333333333)
            v28 = 0x666666666666666;
          else
            v28 = v27;
          if (v28)
          {
            if (v28 > 0x666666666666666)
              sub_223174E94();
            v29 = (char *)operator new(40 * v28);
          }
          else
          {
            v29 = 0;
          }
          v30 = &v29[8 * ((v19 - v17) >> 3)];
          v18 = &v29[40 * v28];
          *(_DWORD *)v30 = v22;
          *((_DWORD *)v30 + 1) = v21;
          *((_DWORD *)v30 + 2) = v24;
          *((_DWORD *)v30 + 3) = v23;
          *((_DWORD *)v30 + 4) = v26;
          *((_DWORD *)v30 + 5) = v25;
          *(_OWORD *)(v30 + 24) = v321;
          v20 = v30 + 40;
          if (v19 == v17)
            goto LABEL_35;
          do
          {
            v31 = *(_OWORD *)(v19 - 40);
            v32 = *(_OWORD *)(v19 - 24);
            *((_QWORD *)v30 - 1) = *((_QWORD *)v19 - 1);
            *(_OWORD *)(v30 - 24) = v32;
            *(_OWORD *)(v30 - 40) = v31;
            v30 -= 40;
            v19 -= 40;
          }
          while (v19 != v17);
          if (v17)
LABEL_35:
            operator delete(v17);
          v17 = v30;
          v13 += 10;
          v19 = v20;
        }
        while (v13 != v14);
      }
LABEL_39:
      *(_QWORD *)&v297 = v17;
      *((_QWORD *)&v297 + 1) = v20;
      v298 = v18;
      v7 = v177;
      v33 = *(_OWORD *)(v177 + 360);
      v299 = *(_OWORD *)(v177 + 344);
      v300 = v33;
      v34 = *(_OWORD *)(v177 + 392);
      v301 = *(_OWORD *)(v177 + 376);
      v302 = v34;
      v303 = 1;
    }
    v304 = 0;
    v313 = 0;
    v35 = *(unsigned __int8 *)(v7 + 440);
    if (*(_BYTE *)(v7 + 440))
    {
      sub_2232E8410((uint64_t)&v305, (uint64_t *)(v7 + 416));
      v313 = 1;
    }
    v195 = *(_OWORD *)&__src[8];
    v196 = *(_QWORD *)&__src[24];
    memset(&__src[8], 0, 96);
    v197 = *(_OWORD *)&__src[32];
    v198 = *(_QWORD *)&__src[48];
    v199 = *(_OWORD *)&__src[56];
    v200 = *(_QWORD *)&__src[72];
    v201 = *(_OWORD *)&__src[80];
    v202 = *(_QWORD *)&__src[96];
    v203 = 0;
    v213 = 0;
    if (__src[216])
    {
      v204 = *(_OWORD *)&__src[112];
      v205 = *(_QWORD *)&__src[128];
      memset(&__src[112], 0, 96);
      v206 = *(_OWORD *)&__src[136];
      v207 = *(_QWORD *)&__src[152];
      v208 = *(_OWORD *)&__src[160];
      v209 = *(_QWORD *)&__src[176];
      v210 = *(_OWORD *)&__src[184];
      v211 = *(_QWORD *)&__src[200];
      v212 = __src[208];
      v213 = 1;
    }
    v214 = 0;
    v224 = 0;
    if (BYTE8(v283))
    {
      v215 = *(_OWORD *)&__src[232];
      v216 = *(_QWORD *)&__src[248];
      memset(&__src[232], 0, 96);
      v217 = *(_OWORD *)&__src[256];
      v218 = *(_QWORD *)&__src[272];
      v219 = *(_OWORD *)&__src[280];
      v220 = *(_QWORD *)&__src[296];
      v221 = *(_OWORD *)&__src[304];
      v222 = *(_QWORD *)&__src[320];
      v223 = v283;
      v224 = 1;
    }
    LOBYTE(v225) = 0;
    v238 = 0;
    if (v294)
    {
      v225 = *(_OWORD *)v284;
      v226 = *(_QWORD *)&v284[16];
      memset(v284, 0, sizeof(v284));
      v227 = v285;
      v228 = v286;
      v285 = 0uLL;
      v286 = 0;
      v229 = *(_OWORD *)v287;
      v230 = *(_QWORD *)&v287[16];
      memset(v287, 0, sizeof(v287));
      v231 = v288;
      v232 = *(_QWORD *)v289;
      v288 = 0uLL;
      memset(v289, 0, sizeof(v289));
      v233 = *(_OWORD *)&v289[8];
      v234 = v290;
      v290 = 0;
      v235 = v291;
      v291 = 0uLL;
      v36 = v292;
      v292 = 0;
      v236 = v36;
      v237 = v293;
      v238 = 1;
    }
    LOBYTE(v239) = 0;
    v247 = 0;
    if (v303)
    {
      v239 = v295;
      v240 = v296;
      v296 = 0;
      v295 = 0uLL;
      v241 = v297;
      v242 = v298;
      v297 = 0uLL;
      v298 = 0;
      v245 = v301;
      v246 = v302;
      v243 = v299;
      v244 = v300;
      v247 = 1;
    }
    v248 = 0;
    v257 = 0;
    if (v35)
    {
      v249 = v305;
      v250 = v306;
      v306 = 0;
      v305 = 0uLL;
      v251 = v307;
      v252 = v308;
      v307 = 0uLL;
      v308 = 0;
      v253 = v309;
      v254 = v310;
      v310 = 0;
      v309 = 0uLL;
      v255 = v311;
      v256 = v312;
      v311 = 0uLL;
      v312 = 0;
      v257 = 1;
    }
    v258 = 1;
    sub_2232E7854((uint64_t)__src);
    if (!*(_BYTE *)(v7 + 472))
      goto LABEL_95;
  }
  else
  {
    v194[8] = 0;
    v258 = 0;
    if (!*(_BYTE *)(v177 + 472))
      goto LABEL_95;
  }
  v37 = *(_QWORD *)(v7 + 456);
  if (v37)
  {
    v38 = *(_QWORD *)(v37 + 1880);
    v39 = *(_QWORD *)(v37 + 1872);
    memset(v193, 0, sizeof(v193));
    v40 = v38 - v39;
    v176 = v37;
    if (v38 != v39)
    {
      v41 = 0xEF7BDEF7BDEF7BDFLL * (v40 >> 3);
      if (v41 > 0x2C8590B21642C8)
        sub_22316E078();
      *(_QWORD *)v193 = operator new(0x842108421084240 * (v40 >> 3));
      *(_QWORD *)&v193[8] = *(_QWORD *)v193;
      *(_QWORD *)&v193[16] = *(_QWORD *)v193 + 1472 * v41;
      while (1)
      {
        *(_OWORD *)__src = *(_OWORD *)v39;
        v42 = *(_QWORD *)(v39 + 16);
        if (v42)
        {
          sub_22319A110((uint64_t)&v321, v42, 0x3Fu);
          sub_2232E96E0((uint64_t)&__src[16], (uint64_t)&v321);
          v314 = 1;
          sub_2231A8050((uint64_t)&v321);
        }
        else
        {
          __src[16] = 0;
          v314 = 0;
        }
        v43 = *(_OWORD *)(v39 + 32);
        v44 = *(_OWORD *)(v39 + 48);
        v45 = *(_OWORD *)(v39 + 80);
        v317 = *(_OWORD *)(v39 + 64);
        v318 = v45;
        v315 = v43;
        v316 = v44;
        v319 = *(_OWORD *)(v39 + 96);
        v320 = *(_BYTE *)(v39 + 240);
        v46 = *(_QWORD *)&v193[8];
        if (*(_QWORD *)&v193[8] < *(_QWORD *)&v193[16])
        {
          **(_OWORD **)&v193[8] = *(_OWORD *)__src;
          *(_BYTE *)(v46 + 16) = 0;
          *(_BYTE *)(v46 + 1376) = 0;
          if (v314)
          {
            sub_2232E96E0(v46 + 16, (uint64_t)&__src[16]);
            *(_BYTE *)(v46 + 1376) = 1;
          }
          v47 = v316;
          *(_OWORD *)(v46 + 1384) = v315;
          *(_OWORD *)(v46 + 1400) = v47;
          v48 = v317;
          v49 = v318;
          v50 = v319;
          *(_BYTE *)(v46 + 1464) = v320;
          *(_OWORD *)(v46 + 1432) = v49;
          *(_OWORD *)(v46 + 1448) = v50;
          *(_OWORD *)(v46 + 1416) = v48;
          v51 = (char *)(v46 + 1472);
          goto LABEL_91;
        }
        v52 = *(char **)v193;
        v53 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)&v193[8] - *(_QWORD *)v193) >> 6);
        v54 = v53 + 1;
        if (v53 + 1 > 0x2C8590B21642C8)
          sub_22316E078();
        if (0xA6F4DE9BD37A6F4ELL * ((uint64_t)(*(_QWORD *)&v193[16] - *(_QWORD *)v193) >> 6) > v54)
          v54 = 0xA6F4DE9BD37A6F4ELL * ((uint64_t)(*(_QWORD *)&v193[16] - *(_QWORD *)v193) >> 6);
        if (0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)&v193[16] - *(_QWORD *)v193) >> 6) >= 0x1642C8590B2164)
          v55 = 0x2C8590B21642C8;
        else
          v55 = v54;
        v323 = &v193[16];
        if (v55)
        {
          if (v55 > 0x2C8590B21642C8)
            sub_223174E94();
          v56 = (char *)operator new(1472 * v55);
        }
        else
        {
          v56 = 0;
        }
        *(_QWORD *)&v321 = v56;
        v57 = &v56[64 * ((v46 - (uint64_t)v52) >> 6)];
        *(_QWORD *)&v322 = v57;
        *((_QWORD *)&v321 + 1) = v57;
        *((_QWORD *)&v322 + 1) = &v56[1472 * v55];
        *(_OWORD *)v57 = *(_OWORD *)__src;
        v57[16] = 0;
        v57[1376] = 0;
        if (v314)
        {
          sub_2232E96E0((uint64_t)(v57 + 16), (uint64_t)&__src[16]);
          v57[1376] = 1;
          v58 = (char *)v322;
          v52 = *(char **)v193;
          v46 = *(_QWORD *)&v193[8];
          v57 = (char *)*((_QWORD *)&v321 + 1);
        }
        else
        {
          v58 = &v56[64 * ((v46 - (uint64_t)v52) >> 6)];
        }
        v59 = &v56[1472 * v53];
        v59[1464] = v320;
        v60 = v318;
        *(_OWORD *)(v59 + 1416) = v317;
        *(_OWORD *)(v59 + 1432) = v60;
        *(_OWORD *)(v59 + 1448) = v319;
        v61 = v316;
        *(_OWORD *)(v59 + 1384) = v315;
        *(_OWORD *)(v59 + 1400) = v61;
        v51 = v58 + 1472;
        *(_QWORD *)&v322 = v58 + 1472;
        if ((char *)v46 == v52)
        {
          *(_QWORD *)v193 = v57;
          *(_QWORD *)&v193[8] = v58 + 1472;
          *(_QWORD *)&v193[16] = *((_QWORD *)&v322 + 1);
        }
        else
        {
          v62 = 0;
          do
          {
            v67 = &v57[v62];
            v68 = v46 + v62;
            *(_OWORD *)&v57[v62 - 1472] = *(_OWORD *)(v46 + v62 - 1472);
            v69 = &v57[v62 - 1456];
            *v69 = 0;
            v57[v62 - 96] = 0;
            if (*(_BYTE *)(v46 + v62 - 96))
            {
              sub_22319E288((uint64_t)v69, v68 - 1456);
              *(v67 - 96) = 1;
            }
            v63 = *(_OWORD *)(v68 - 88);
            *(_OWORD *)(v67 - 72) = *(_OWORD *)(v68 - 72);
            *(_OWORD *)(v67 - 88) = v63;
            v64 = *(_OWORD *)(v68 - 56);
            v65 = *(_OWORD *)(v68 - 40);
            v66 = *(_OWORD *)(v68 - 24);
            *(v67 - 8) = *(_BYTE *)(v68 - 8);
            *(_OWORD *)(v67 - 24) = v66;
            *(_OWORD *)(v67 - 40) = v65;
            *(_OWORD *)(v67 - 56) = v64;
            v62 -= 1472;
          }
          while ((char *)(v46 + v62) != v52);
          v52 = *(char **)v193;
          v70 = *(char **)&v193[8];
          *(_QWORD *)v193 = &v57[v62];
          *(_OWORD *)&v193[8] = v322;
          v51 = (char *)v322;
          if (v70 == v52)
          {
            if (!v52)
              goto LABEL_91;
LABEL_90:
            operator delete(v52);
            goto LABEL_91;
          }
          do
          {
            if (*(v70 - 96))
              sub_2231A8050((uint64_t)(v70 - 1456));
            v70 -= 1472;
          }
          while (v70 != v52);
        }
        if (v52)
          goto LABEL_90;
LABEL_91:
        *(_QWORD *)&v193[8] = v51;
        if (v314)
          sub_2231A8050((uint64_t)&__src[16]);
        v39 += 248;
        if (v39 == v38)
        {
          v40 = *(_QWORD *)v193;
          v72 = *(char **)&v193[16];
          v71 = *(_QWORD *)&v193[8];
          v37 = v176;
          goto LABEL_99;
        }
      }
    }
    v72 = 0;
    v71 = 0;
LABEL_99:
    *(_QWORD *)&v278 = v40;
    *((_QWORD *)&v278 + 1) = v71;
    v279 = v72;
    LOWORD(v280) = 0;
    if (*(_BYTE *)(v37 + 2152))
    {
      LOBYTE(v280) = *(_BYTE *)(v37 + 2149);
      BYTE1(v280) = 1;
    }
    v73 = *(__int128 **)(v37 + 2160);
    v74 = *(__int128 **)(v37 + 2168);
    v75 = (char *)v74 - (char *)v73;
    if (v74 != v73)
    {
      v76 = 0xCCCCCCCCCCCCCCCDLL * (v75 >> 5);
      if (v76 > 0x199999999999999)
        sub_22316E078();
      v77 = (char *)operator new(v75);
      v78 = 0;
      v79 = &v77[160 * v76];
      v80 = v77;
      while (1)
      {
        if (*((_BYTE *)v73 + 152))
        {
          v88 = *((_QWORD *)v73 + 2);
          v78 = *((_QWORD *)v73 + 2) >> 8;
          v89 = *(__int128 *)((char *)v73 + 104);
          *(_OWORD *)&__src[64] = *(__int128 *)((char *)v73 + 88);
          *(_OWORD *)&__src[80] = v89;
          v90 = *(__int128 *)((char *)v73 + 136);
          *(_OWORD *)&__src[96] = *(__int128 *)((char *)v73 + 120);
          *(_OWORD *)&__src[112] = v90;
          v91 = *(__int128 *)((char *)v73 + 40);
          *(_OWORD *)__src = *(__int128 *)((char *)v73 + 24);
          *(_OWORD *)&__src[16] = v91;
          v92 = *(__int128 *)((char *)v73 + 72);
          *(_OWORD *)&__src[32] = *(__int128 *)((char *)v73 + 56);
          *(_OWORD *)&__src[48] = v92;
          v93 = 1;
          if (v80 >= v79)
            goto LABEL_109;
LABEL_104:
          v81 = *v73;
          v73 += 10;
          *(_OWORD *)v80 = v81;
          *((_QWORD *)v80 + 2) = v88 | (v78 << 8);
          v83 = *(_OWORD *)&__src[96];
          v82 = *(_OWORD *)&__src[112];
          v84 = *(_OWORD *)&__src[80];
          *(_OWORD *)(v80 + 88) = *(_OWORD *)&__src[64];
          *(_OWORD *)(v80 + 104) = v84;
          *(_OWORD *)(v80 + 120) = v83;
          *(_OWORD *)(v80 + 136) = v82;
          v86 = *(_OWORD *)&__src[32];
          v85 = *(_OWORD *)&__src[48];
          v87 = *(_OWORD *)&__src[16];
          *(_OWORD *)(v80 + 24) = *(_OWORD *)__src;
          *(_OWORD *)(v80 + 40) = v87;
          *(_OWORD *)(v80 + 56) = v86;
          *(_OWORD *)(v80 + 72) = v85;
          v80[152] = v93;
          v80 += 160;
          if (v73 == v74)
            goto LABEL_124;
        }
        else
        {
          v88 = 0;
          v93 = 0;
          if (v80 < v79)
            goto LABEL_104;
LABEL_109:
          v94 = 0xCCCCCCCCCCCCCCCDLL * ((v80 - v77) >> 5) + 1;
          if (v94 > 0x199999999999999)
            sub_22316E078();
          if (0x999999999999999ALL * ((v79 - v77) >> 5) > v94)
            v94 = 0x999999999999999ALL * ((v79 - v77) >> 5);
          if (0xCCCCCCCCCCCCCCCDLL * ((v79 - v77) >> 5) >= 0xCCCCCCCCCCCCCCLL)
            v95 = 0x199999999999999;
          else
            v95 = v94;
          if (v95)
          {
            if (v95 > 0x199999999999999)
              sub_223174E94();
            v96 = (char *)operator new(160 * v95);
          }
          else
          {
            v96 = 0;
          }
          v97 = &v96[32 * ((v80 - v77) >> 5)];
          *(_OWORD *)v97 = *v73;
          v98 = *(_OWORD *)&__src[80];
          *(_OWORD *)(v97 + 88) = *(_OWORD *)&__src[64];
          *(_OWORD *)(v97 + 104) = v98;
          v99 = *(_OWORD *)&__src[112];
          *(_OWORD *)(v97 + 120) = *(_OWORD *)&__src[96];
          *(_OWORD *)(v97 + 136) = v99;
          v100 = *(_OWORD *)&__src[16];
          *(_OWORD *)(v97 + 24) = *(_OWORD *)__src;
          *(_OWORD *)(v97 + 40) = v100;
          v101 = *(_OWORD *)&__src[48];
          *(_OWORD *)(v97 + 56) = *(_OWORD *)&__src[32];
          v79 = &v96[160 * v95];
          *((_QWORD *)v97 + 2) = v88 | (v78 << 8);
          *(_OWORD *)(v97 + 72) = v101;
          v102 = v97 + 160;
          v97[152] = v93;
          if (v80 == v77)
            goto LABEL_122;
          do
          {
            v103 = *((_OWORD *)v80 - 9);
            *((_OWORD *)v97 - 10) = *((_OWORD *)v80 - 10);
            *((_OWORD *)v97 - 9) = v103;
            v104 = *((_OWORD *)v80 - 8);
            v105 = *((_OWORD *)v80 - 7);
            v106 = *((_OWORD *)v80 - 5);
            *((_OWORD *)v97 - 6) = *((_OWORD *)v80 - 6);
            *((_OWORD *)v97 - 5) = v106;
            *((_OWORD *)v97 - 8) = v104;
            *((_OWORD *)v97 - 7) = v105;
            v107 = *((_OWORD *)v80 - 4);
            v108 = *((_OWORD *)v80 - 3);
            v109 = *((_OWORD *)v80 - 1);
            *((_OWORD *)v97 - 2) = *((_OWORD *)v80 - 2);
            *((_OWORD *)v97 - 1) = v109;
            *((_OWORD *)v97 - 4) = v107;
            *((_OWORD *)v97 - 3) = v108;
            v97 -= 160;
            v80 -= 160;
          }
          while (v80 != v77);
          if (v77)
LABEL_122:
            operator delete(v77);
          v77 = v97;
          v80 = v102;
          v73 += 10;
          if (v73 == v74)
          {
LABEL_124:
            v71 = *((_QWORD *)&v278 + 1);
            v40 = v278;
            v72 = v279;
            goto LABEL_126;
          }
        }
      }
    }
    v79 = 0;
    v80 = 0;
    v77 = 0;
LABEL_126:
    v7 = v177;
    v110 = *(_QWORD *)(v176 + 2184);
    v259 = v40;
    v260 = v71;
    v261 = v72;
    v262 = (__int16)v280;
    v263 = v77;
    v264 = v80;
    v265 = v79;
    v266 = v110;
    v267 = 1;
    if (!*(_BYTE *)(v177 + 496))
      goto LABEL_200;
    goto LABEL_127;
  }
LABEL_95:
  LOBYTE(v259) = 0;
  v267 = 0;
  if (!*(_BYTE *)(v7 + 496))
    goto LABEL_200;
LABEL_127:
  v111 = *(_QWORD *)(v7 + 480);
  if (v111)
  {
    v174 = *(_QWORD **)(v7 + 480);
    v114 = v111 + 8;
    v113 = *(_QWORD *)(v111 + 8);
    v112 = *(_QWORD *)(v114 + 8);
    memset(v193, 0, sizeof(v193));
    v115 = v112 - v113;
    if (v115)
    {
      v116 = 0x34F72C234F72C235 * (v115 >> 4);
      if (v116 > 0x8AD8F2FBA93868)
        sub_22316E078();
      *(_QWORD *)&__src[32] = &v193[16];
      *(_QWORD *)__src = operator new(0xA7B9611A7B9611B8 * (v115 >> 4));
      *(_QWORD *)&__src[8] = *(_QWORD *)__src;
      *(_QWORD *)&__src[16] = *(_QWORD *)__src;
      *(_QWORD *)&__src[24] = *(_QWORD *)__src + 472 * v116;
      sub_2232E9D2C((uint64_t *)v193, __src);
      v117 = *(_QWORD *)&__src[8];
      for (i = *(_QWORD *)&__src[16]; i != v117; sub_2232E7664(i))
        i -= 472;
      if (*(_QWORD *)__src)
        operator delete(*(void **)__src);
      v119 = v174[1];
      for (j = v174[2]; v119 != j; v119 += 464)
      {
        sub_2232E9EE8((uint64_t)__src, v119);
        v120 = *(_QWORD *)&v193[8];
        if (*(_QWORD *)&v193[8] >= *(_QWORD *)&v193[16])
        {
          v125 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(_QWORD *)&v193[8] - *(_QWORD *)v193) >> 3);
          v126 = v125 + 1;
          if (v125 + 1 > 0x8AD8F2FBA93868)
            sub_22316E078();
          if (0x97DD49C34115B1E6 * ((uint64_t)(*(_QWORD *)&v193[16] - *(_QWORD *)v193) >> 3) > v126)
            v126 = 0x97DD49C34115B1E6 * ((uint64_t)(*(_QWORD *)&v193[16] - *(_QWORD *)v193) >> 3);
          if (0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(_QWORD *)&v193[16] - *(_QWORD *)v193) >> 3) >= 0x456C797DD49C34)
            v127 = 0x8AD8F2FBA93868;
          else
            v127 = v126;
          v281 = &v193[16];
          if (v127)
          {
            if (v127 > 0x8AD8F2FBA93868)
              sub_223174E94();
            v128 = operator new(472 * v127);
          }
          else
          {
            v128 = 0;
          }
          *(_QWORD *)&v278 = v128;
          v129 = (char *)&v128[59 * v125];
          v279 = v129;
          *((_QWORD *)&v278 + 1) = v129;
          v280 = (char *)&v128[59 * v127];
          memcpy(v129, __src, 0x120uLL);
          *((_OWORD *)v129 + 18) = *(_OWORD *)&__src[288];
          *((_QWORD *)v129 + 38) = *(_QWORD *)&__src[304];
          memset(&__src[288], 0, 24);
          v130 = v283;
          *(_OWORD *)(v129 + 312) = *(_OWORD *)&__src[312];
          *(_OWORD *)(v129 + 328) = v130;
          *(_OWORD *)(v129 + 344) = *(_OWORD *)v284;
          *(_QWORD *)(v129 + 357) = *(_QWORD *)&v284[13];
          v129[368] = 0;
          v129[392] = 0;
          if (v287[0])
          {
            *((_QWORD *)v129 + 48) = 0;
            *((_OWORD *)v129 + 23) = v285;
            v128[59 * v125 + 48] = v286;
            v286 = 0;
            v285 = 0uLL;
            v129[392] = 1;
          }
          v131 = (char *)&v128[59 * v125];
          v131[400] = 0;
          v131[424] = 0;
          if (BYTE8(v288))
          {
            *((_QWORD *)v131 + 52) = 0;
            *((_OWORD *)v131 + 25) = *(_OWORD *)&v287[8];
            v128[59 * v125 + 52] = v288;
            *(_QWORD *)&v287[16] = 0;
            *(_QWORD *)&v288 = 0;
            *(_QWORD *)&v287[8] = 0;
            v131[424] = 1;
          }
          v132 = (char *)&v128[59 * v125];
          v132[432] = 0;
          v132[456] = 0;
          if ((_BYTE)v290)
          {
            *((_QWORD *)v132 + 56) = 0;
            *((_OWORD *)v132 + 27) = *(_OWORD *)v289;
            v128[59 * v125 + 56] = *(_QWORD *)&v289[16];
            memset(v289, 0, sizeof(v289));
            v132[456] = 1;
          }
          LOWORD(v128[59 * v125 + 58]) = v291;
          v279 = v129 + 472;
          sub_2232E9D2C((uint64_t *)v193, &v278);
          v124 = *(_QWORD *)&v193[8];
          v133 = (char *)*((_QWORD *)&v278 + 1);
          for (k = v279; k != v133; k -= 472)
          {
            if (*(k - 16))
            {
              v135 = *((_QWORD *)k - 5);
              if (v135)
              {
                v136 = *((_QWORD *)k - 4);
                v137 = (void *)*((_QWORD *)k - 5);
                if (v136 != v135)
                {
                  v138 = *((_QWORD *)k - 4);
                  do
                  {
                    v140 = *(void **)(v138 - 24);
                    v138 -= 24;
                    v139 = v140;
                    if (v140)
                    {
                      *(_QWORD *)(v136 - 16) = v139;
                      operator delete(v139);
                    }
                    v136 = v138;
                  }
                  while (v138 != v135);
                  v137 = (void *)*((_QWORD *)k - 5);
                }
                *((_QWORD *)k - 4) = v135;
                operator delete(v137);
              }
            }
            if (*(k - 48))
            {
              v141 = (void *)*((_QWORD *)k - 9);
              if (v141)
              {
                *((_QWORD *)k - 8) = v141;
                operator delete(v141);
              }
            }
            if (*(k - 80))
            {
              v142 = (void *)*((_QWORD *)k - 13);
              if (v142)
              {
                *((_QWORD *)k - 12) = v142;
                operator delete(v142);
              }
            }
            v143 = (void *)*((_QWORD *)k - 23);
            if (v143)
            {
              *((_QWORD *)k - 22) = v143;
              operator delete(v143);
            }
          }
          if ((_QWORD)v278)
            operator delete((void *)v278);
        }
        else
        {
          memcpy(*(void **)&v193[8], __src, 0x120uLL);
          *(_QWORD *)(v120 + 296) = 0;
          *(_QWORD *)(v120 + 304) = 0;
          *(_QWORD *)(v120 + 288) = 0;
          *(_OWORD *)(v120 + 288) = *(_OWORD *)&__src[288];
          *(_QWORD *)(v120 + 304) = *(_QWORD *)&__src[304];
          memset(&__src[288], 0, 24);
          v121 = *(_QWORD *)&v284[13];
          v123 = v283;
          v122 = *(_OWORD *)v284;
          *(_OWORD *)(v120 + 312) = *(_OWORD *)&__src[312];
          *(_OWORD *)(v120 + 328) = v123;
          *(_OWORD *)(v120 + 344) = v122;
          *(_QWORD *)(v120 + 357) = v121;
          *(_BYTE *)(v120 + 368) = 0;
          *(_BYTE *)(v120 + 392) = 0;
          if (v287[0])
          {
            *(_QWORD *)(v120 + 368) = 0;
            *(_QWORD *)(v120 + 376) = 0;
            *(_QWORD *)(v120 + 384) = 0;
            *(_OWORD *)(v120 + 368) = v285;
            *(_QWORD *)(v120 + 384) = v286;
            v285 = 0uLL;
            v286 = 0;
            *(_BYTE *)(v120 + 392) = 1;
          }
          *(_BYTE *)(v120 + 400) = 0;
          *(_BYTE *)(v120 + 424) = 0;
          if (BYTE8(v288))
          {
            *(_QWORD *)(v120 + 400) = 0;
            *(_QWORD *)(v120 + 408) = 0;
            *(_QWORD *)(v120 + 416) = 0;
            *(_OWORD *)(v120 + 400) = *(_OWORD *)&v287[8];
            *(_QWORD *)(v120 + 416) = v288;
            *(_QWORD *)&v287[8] = 0;
            *(_QWORD *)&v287[16] = 0;
            *(_QWORD *)&v288 = 0;
            *(_BYTE *)(v120 + 424) = 1;
          }
          *(_BYTE *)(v120 + 432) = 0;
          *(_BYTE *)(v120 + 456) = 0;
          if ((_BYTE)v290)
          {
            *(_QWORD *)(v120 + 432) = 0;
            *(_QWORD *)(v120 + 440) = 0;
            *(_QWORD *)(v120 + 448) = 0;
            *(_OWORD *)(v120 + 432) = *(_OWORD *)v289;
            *(_QWORD *)(v120 + 448) = *(_QWORD *)&v289[16];
            memset(v289, 0, sizeof(v289));
            *(_BYTE *)(v120 + 456) = 1;
          }
          *(_WORD *)(v120 + 464) = v291;
          v124 = v120 + 472;
        }
        *(_QWORD *)&v193[8] = v124;
        if ((_BYTE)v290)
        {
          v144 = *(_QWORD *)v289;
          if (*(_QWORD *)v289)
          {
            v145 = *(_QWORD *)&v289[8];
            v146 = *(void **)v289;
            if (*(_QWORD *)&v289[8] != *(_QWORD *)v289)
            {
              v147 = *(_QWORD *)&v289[8];
              do
              {
                v149 = *(void **)(v147 - 24);
                v147 -= 24;
                v148 = v149;
                if (v149)
                {
                  *(_QWORD *)(v145 - 16) = v148;
                  operator delete(v148);
                }
                v145 = v147;
              }
              while (v147 != v144);
              v146 = *(void **)v289;
            }
            *(_QWORD *)&v289[8] = v144;
            operator delete(v146);
          }
        }
        if (BYTE8(v288) && *(_QWORD *)&v287[8])
        {
          *(_QWORD *)&v287[16] = *(_QWORD *)&v287[8];
          operator delete(*(void **)&v287[8]);
        }
        if (v287[0] && (_QWORD)v285)
        {
          *((_QWORD *)&v285 + 1) = v285;
          operator delete((void *)v285);
        }
        if (*(_QWORD *)&__src[288])
        {
          *(_QWORD *)&__src[296] = *(_QWORD *)&__src[288];
          operator delete(*(void **)&__src[288]);
        }
      }
    }
    v151 = *(_QWORD *)&v193[8];
    v321 = *(_OWORD *)v193;
    v152 = *(_QWORD *)&v193[16];
    *(_QWORD *)&v322 = *(_QWORD *)&v193[16];
    v153 = (char *)v174[4];
    v154 = (char *)v174[5];
    memset(__src, 0, 24);
    v155 = v154 - v153;
    v179 = *(_QWORD *)v193;
    if (v154 == v153)
    {
      v157 = 0;
      v156 = 0;
    }
    else
    {
      if (v155 < 0)
        sub_22316E078();
      *(_QWORD *)__src = operator new(v154 - v153);
      *(_QWORD *)&__src[8] = *(_QWORD *)__src;
      *(_QWORD *)&__src[16] = *(_QWORD *)__src + 16 * (v155 >> 4);
      *(_QWORD *)v193 = __src;
      do
      {
        v278 = *(_OWORD *)v153;
        sub_2232E9564((char ***)v193, &v278);
        v153 += 16;
      }
      while (v153 != v154);
      v155 = *(_QWORD *)__src;
      v156 = *(_BYTE **)&__src[8];
      v157 = *(_QWORD *)&__src[16];
    }
    *((_QWORD *)&v322 + 1) = v155;
    v323 = v156;
    v324 = v157;
    v158 = (char *)v174[7];
    v159 = (char *)v174[8];
    memset(__src, 0, 24);
    v160 = v159 - v158;
    if (v159 == v158)
    {
      v162 = 0;
      v161 = 0uLL;
    }
    else
    {
      if (v160 < 0)
        sub_22316E078();
      *(_QWORD *)__src = operator new(v159 - v158);
      *(_QWORD *)&__src[8] = *(_QWORD *)__src;
      *(_QWORD *)&__src[16] = *(_QWORD *)__src + 16 * (v160 >> 4);
      *(_QWORD *)v193 = __src;
      do
      {
        v278 = *(_OWORD *)v158;
        sub_2232E9564((char ***)v193, &v278);
        v158 += 16;
      }
      while (v158 != v159);
      v161 = *(_OWORD *)__src;
      v162 = *(_QWORD *)&__src[16];
    }
    v268 = v179;
    v269 = v151;
    v270 = v152;
    v271 = v155;
    v272 = v156;
    v273 = v157;
    v274 = v161;
    v275 = v162;
    v276 = 1;
    v277 = *(_QWORD *)(v177 + 504);
    v150 = v182;
    if (!*(_BYTE *)(v182 + 40))
      goto LABEL_215;
LABEL_201:
    *(_QWORD *)__src = v150 + 16;
    sub_22455A7EC((uint64_t **)__src, 2u);
    goto LABEL_216;
  }
LABEL_200:
  LOBYTE(v268) = 0;
  v276 = 0;
  v277 = *(_QWORD *)(v7 + 504);
  v150 = v182;
  if (*(_BYTE *)(v182 + 40))
    goto LABEL_201;
LABEL_215:
  sub_22455AA60((uint64_t)__src, v150 + 8);
LABEL_216:
  sub_2232F9530(v180, (uint64_t)v194, 2u);
  sub_2232E7484((uint64_t)v194);
  v180[0] = &off_24EC79738;
  v163 = v182;
  v181 = &unk_24EC79888;
  v182 = 0;
  if (v163)
  {
    v164 = *(void **)(v163 + 80);
    if (v164)
    {
      *(_QWORD *)(v163 + 88) = v164;
      operator delete(v164);
    }
    if (*(_BYTE *)(v163 + 72))
      free(*(void **)(v163 + 56));
    if (*(_BYTE *)(v163 + 40))
      free(*(void **)(v163 + 24));
    MEMORY[0x227684CE8](v163, 0x1030C408C1A3048);
  }
  if ((v191 & 0x10) != 0)
  {
    v167 = *((_QWORD *)&v190 + 1);
    if (*((_QWORD *)&v190 + 1) < v188)
    {
      *((_QWORD *)&v190 + 1) = v188;
      v167 = v188;
    }
    v168 = v187;
    v165 = v167 - (_QWORD)v187;
    if (v167 - (unint64_t)v187 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_249;
  }
  else
  {
    if ((v191 & 8) == 0)
    {
      v165 = 0;
      __src[23] = 0;
      v166 = __src;
      goto LABEL_237;
    }
    v168 = v185;
    v165 = v186 - (_QWORD)v185;
    if ((unint64_t)(v186 - (_QWORD)v185) >= 0x7FFFFFFFFFFFFFF8)
LABEL_249:
      sub_22316DBC0();
  }
  if (v165 >= 0x17)
  {
    v169 = (v165 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v165 | 7) != 0x17)
      v169 = v165 | 7;
    v170 = v169 + 1;
    v166 = operator new(v169 + 1);
    *(_QWORD *)&__src[8] = v165;
    *(_QWORD *)&__src[16] = v170 | 0x8000000000000000;
    *(_QWORD *)__src = v166;
    goto LABEL_236;
  }
  __src[23] = v165;
  v166 = __src;
  if (v165)
LABEL_236:
    memmove(v166, v168, v165);
LABEL_237:
  v166[v165] = 0;
  if (__src[23] >= 0)
    v171 = __src;
  else
    v171 = *(const UInt8 **)__src;
  if (__src[23] >= 0)
    v172 = __src[23];
  else
    v172 = *(_QWORD *)&__src[8];
  sub_2245286D0(v171, v172, &v321);
  *(_OWORD *)v175 = v321;
  *(_BYTE *)(v175 + 16) = 1;
  if ((__src[23] & 0x80000000) != 0)
    operator delete(*(void **)__src);
  v183 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&v183 + *(_QWORD *)(v183 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v184 = MEMORY[0x24BEDB848] + 16;
  if (SBYTE7(v190) < 0)
    operator delete((void *)v189);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227684BE0](v192);
}

void sub_2232E4A98(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,unsigned int a21,__int128 a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a68;
  char a71;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v75;

  if (a2)
  {
    sub_2232E79B4(v73);
    sub_223295720(a19);
    if (LOBYTE(STACK[0x780]))
      sub_2232E7A44(v72);
    sub_2232E7AEC((uint64_t)&STACK[0x670]);
    sub_2232E7AEC((uint64_t)&STACK[0x5F8]);
    sub_2232E792C(v71);
    sub_224554FC4(&__p);
    __cxa_begin_catch(a1);
    a21 = 22;
    sub_2232E4F00();
    sub_223174DE4(&__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp");
    sub_2232B84FC(&a21, (uint64_t)&a68, (CFErrorRef *)&a22);
    v75 = a22;
    a22 = 0uLL;
    *(_OWORD *)a11 = v75;
    a23 = 0;
    a24 = 0;
    *(_BYTE *)(a11 + 16) = 0;
    sub_223167354((uint64_t)&a23);
    sub_223167354((uint64_t)&a22);
    if (a30 < 0)
      operator delete(__p);
    if (a71 < 0)
      operator delete(a68);
    __cxa_end_catch();
    JUMPOUT(0x2232E4948);
  }
  _Unwind_Resume(a1);
}

void sub_2232E4EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a68;
  char a73;

  if (a30 < 0)
    operator delete(__p);
  if (a73 < 0)
    operator delete(a68);
  __cxa_end_catch();
  JUMPOUT(0x2232E4B9CLL);
}

void sub_2232E4EF0(void *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x2232E4B90);
}

uint64_t sub_2232E4F00()
{
  uint64_t result;
  _DWORD v1[6];
  int v2;
  char v3;
  char *v4;

  v2 = 0;
  sub_22330048C(v1, "Error serializing process frame bundle result");
  if (v2 == -1)
    sub_22316DD70();
  v4 = &v3;
  result = ((uint64_t (*)(char **, _DWORD *))off_24EC2AE10[v2])(&v4, v1);
  if (v2 != -1)
    return ((uint64_t (*)(char **, _DWORD *))off_24EC2ADF8[v2])(&v4, v1);
  return result;
}

void sub_2232E4F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2232E4FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2232E4FC0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 72) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    if (*(char *)(a2 + 71) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 48), *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
    }
    else
    {
      v7 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = v7;
    }
    *(_BYTE *)(a1 + 72) = 1;
  }
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 88);
  v9 = *(_OWORD *)(a2 + 104);
  v10 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 134) = *(_QWORD *)(a2 + 134);
  *(_OWORD *)(a1 + 120) = v10;
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  v11 = *(_OWORD *)(a2 + 144);
  v12 = *(_OWORD *)(a2 + 160);
  v13 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v13;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 160) = v12;
  v14 = *(_OWORD *)(a2 + 208);
  v15 = *(_OWORD *)(a2 + 224);
  v16 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v16;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 224) = v15;
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  memcpy((void *)(a1 + 280), (const void *)(a2 + 280), 0x2B9uLL);
  *(_QWORD *)(a1 + 984) = *(_QWORD *)(a2 + 984);
  v17 = *(_QWORD *)(a2 + 992);
  *(_QWORD *)(a1 + 992) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1000);
  v20 = *(_QWORD *)(a2 + 1008);
  *(_QWORD *)(a1 + 1008) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a2 + 1016);
  v23 = *(_QWORD *)(a2 + 1024);
  *(_QWORD *)(a1 + 1024) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  sub_2232E5180((char *)(a1 + 1032), (__int128 *)(a2 + 1032));
  v26 = *(_OWORD *)(a2 + 1168);
  *(_OWORD *)(a1 + 1184) = *(_OWORD *)(a2 + 1184);
  *(_OWORD *)(a1 + 1168) = v26;
  return a1;
}

void sub_2232E514C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 72))
  {
    if (*(char *)(v1 + 71) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2232E5180(char *__dst, __int128 *a2)
{
  __int128 v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(__int128 *)((char *)a2 + 24);
      *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 5);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_223197FA4(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    sub_223197FA4(__dst + 48, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)__dst + 3) = v7;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_223197FA4(__dst + 72, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 72);
    *((_QWORD *)__dst + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v8;
  }
  v9 = __dst + 96;
  if (*((char *)a2 + 119) < 0)
  {
    sub_223197FA4(v9, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v10 = a2[6];
    *((_QWORD *)__dst + 14) = *((_QWORD *)a2 + 14);
    *(_OWORD *)v9 = v10;
  }
  v11 = *((_QWORD *)a2 + 15);
  *((_DWORD *)__dst + 32) = *((_DWORD *)a2 + 32);
  *((_QWORD *)__dst + 15) = v11;
  return __dst;
}

void sub_2232E52B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 95) < 0)
  {
    operator delete(*v4);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 47) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_2232E534C(dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
}

uint64_t sub_2232E5358(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 184);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void **sub_2232E5384(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 17) < 0)
          operator delete(*(v3 - 5));
        v3 -= 5;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_2232E53F4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2B380;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232E5444(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_2232E5454(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2B3B8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232E54A4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_2232E54B4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2B3F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232E5504(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_2232E5514(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2B428;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232E5564(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_2232E5574(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2B460;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232E55C4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_2232E55D4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2B498;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232E5624(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_2232E5634(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2B348;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232E5684(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_2232E5694(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2B310;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232E56E4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_2232E56F4(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2232E5804(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_2232E57F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2232E5804(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC2B2C0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_2232E5864(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2232E587C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2232E5894(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2232E58B8(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_2232E58D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2232E5948(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC2A150;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232E59BC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC2A150;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232E5A30(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2A150;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2232E5A80(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2A150;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2232E5AB0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2232E5B08(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *sub_2232E5B70(uint64_t a1, double *a2, uint64_t *a3, CFTypeRef *a4)
{
  double v7;
  _QWORD *v8;
  _QWORD *v9;

  if (*a4)
    CFRetain(*a4);
  v7 = *a2;
  v8 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  v9 = v8;
  if (v8)
  {
    sub_22326F694(v8 + 1, a3);
    *((_DWORD *)v9 + 8) = 1;
    *v9 = &unk_24EC1F620;
  }
  return (*(_QWORD *(**)(_QWORD *__return_ptr, double))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD **)(a1 + 8), v7);
}

void sub_2232E5C0C(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2232E5BE0);
}

uint64_t sub_2232E5C38(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN16CV3DReconSession27AddOnMeshListUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvdPK17CV3D"
                     "ReconMeshListP9__CFErrorEEEPS8_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN16CV3DReconSession27AddOnMeshListUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointer"
                                "FvdPK17CV3DReconMeshListP9__CFErrorEEEPS8_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN16CV3DReconSession27AddOnMeshListUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvdPK17CV3DReconMeshListP9__CFErrorEEEPS8_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN16CV3DReconSession27AddOnMeshListUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvdPK17CV3DReconMeshListP9__CFErrorEEEPS8_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232E5CA4()
{
  return &unk_24EC2A1C0;
}

_QWORD *sub_2232E5CB0(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC2A1E0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232E5D24(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC2A1E0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232E5D98(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2A1E0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2232E5DE8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2A1E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2232E5E18(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2232E5E70(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *sub_2232E5ED8(uint64_t a1, double *a2, uint64_t a3, CFTypeRef *a4)
{
  double v7;
  _QWORD *v8;
  _QWORD *v9;

  if (*a4)
    CFRetain(*a4);
  v7 = *a2;
  v8 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  v9 = v8;
  if (v8)
  {
    sub_22326F694(v8 + 1, (uint64_t *)a3);
    *((_BYTE *)v9 + 32) = *(_BYTE *)(a3 + 24);
    *((_DWORD *)v9 + 9) = 1;
    *v9 = &off_24EC29AC8;
  }
  return (*(_QWORD *(**)(_QWORD *__return_ptr, double))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD **)(a1 + 8), v7);
}

void sub_2232E5F78(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2232E5F4CLL);
}

uint64_t sub_2232E5FA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN16CV3DReconSession22AddOnPRRUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvdPK27CV3DRecon"
                     "RoomScanLiteResultP9__CFErrorEEEPS8_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN16CV3DReconSession22AddOnPRRUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvdPK"
                                "27CV3DReconRoomScanLiteResultP9__CFErrorEEEPS8_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN16CV3DReconSession22AddOnPRRUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvdPK27CV3DReconRoomScanLiteResultP9__CFErrorEEEPS8_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN16CV3DReconSession22AddOnPRRUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvdPK27CV3DReconRoomScanLiteResultP9__CFErrorEEEPS8_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232E6010()
{
  return &unk_24EC2A250;
}

_QWORD *sub_2232E601C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC2A270;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232E6090(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC2A270;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232E6104(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2A270;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2232E6154(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2A270;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2232E6184(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2232E61DC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *sub_2232E6244(uint64_t a1, double *a2, uint64_t a3, CFTypeRef *a4)
{
  double v7;
  _QWORD *v8;
  _QWORD *v9;

  if (*a4)
    CFRetain(*a4);
  v7 = *a2;
  v8 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  v9 = v8;
  if (v8)
  {
    sub_22326F694(v8 + 1, (uint64_t *)a3);
    *((_BYTE *)v9 + 32) = *(_BYTE *)(a3 + 24);
    *((_DWORD *)v9 + 9) = 1;
    *v9 = &off_24EC29AC8;
  }
  return (*(_QWORD *(**)(_QWORD *__return_ptr, double))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD **)(a1 + 8), v7);
}

void sub_2232E62E4(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2232E62B8);
}

uint64_t sub_2232E6310(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN16CV3DReconSession31AddOnSyntheticPRRUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvdPK27"
                     "CV3DReconRoomScanLiteResultP9__CFErrorEEEPS8_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN16CV3DReconSession31AddOnSyntheticPRRUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_poi"
                                "nterFvdPK27CV3DReconRoomScanLiteResultP9__CFErrorEEEPS8_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN16CV3DReconSession31AddOnSyntheticPRRUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvdPK27CV3DReconRoomScanLiteResultP9__CFErrorEEEPS8_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN16CV3DReconSession31AddOnSyntheticPRRUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvdPK27CV3DReconRoomScanLiteResultP9__CFErrorEEEPS8_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232E637C()
{
  return &unk_24EC2A2D0;
}

_QWORD *sub_2232E6388(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC2A2F0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232E63FC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC2A2F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232E6470(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2A2F0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2232E64C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2A2F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2232E64F0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2232E6548(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2232E65B0(uint64_t a1, double *a2, uint64_t *a3, CFTypeRef *a4)
{
  double v7;
  uint64_t v9;

  if (*a4)
    CFRetain(*a4);
  v7 = *a2;
  sub_22329AC08(a3, &v9);
  return (*(uint64_t (**)(double))(**(_QWORD **)(a1 + 8) + 16))(v7);
}

uint64_t sub_2232E6628(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN16CV3DReconSession37AddOnSpatialSubdivisionUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerF"
                     "vdPK33CV3DReconSpatialSubdivisionResultP9__CFErrorEEEPS8_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN16CV3DReconSession37AddOnSpatialSubdivisionUpdateCallbackEN4cv3d3kit4capi5BlockIU13blo"
                                "ck_pointerFvdPK33CV3DReconSpatialSubdivisionResultP9__CFErrorEEEPS8_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN16CV3DReconSession37AddOnSpatialSubdivisionUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvdPK33CV3DReconSpatialSubdivisionResultP9__CFErrorEEEPS8_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN16CV3DReconSession37AddOnSpatialSubdivisionUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvdPK33CV3DReconSpatialSubdivisionResultP9__CFErrorEEEPS8_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232E6694()
{
  return &unk_24EC2A360;
}

_QWORD *sub_2232E66A0(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC2A380;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232E6714(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC2A380;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232E6788(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2A380;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2232E67D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2A380;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2232E6808(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2232E6860(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *sub_2232E68C8(uint64_t a1, double *a2, uint64_t *a3, CFTypeRef *a4)
{
  double v7;
  _DWORD *v8;
  _DWORD *v9;

  if (*a4)
    CFRetain(*a4);
  v7 = *a2;
  v8 = operator new(0x68uLL, MEMORY[0x24BEDB6B8]);
  v9 = v8;
  if (v8)
  {
    sub_22329A920((uint64_t)(v8 + 2), a3);
    v9[24] = 1;
    *(_QWORD *)v9 = &off_24EC29480;
  }
  return (*(_QWORD *(**)(_QWORD *__return_ptr, double))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD **)(a1 + 8), v7);
}

void sub_2232E6960(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2232E6934);
}

uint64_t sub_2232E698C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN16CV3DReconSession39AddOnOccupancyByProximityUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointe"
                     "rFvdPK35CV3DReconOccupancyByProximityResultP9__CFErrorEEEPS8_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN16CV3DReconSession39AddOnOccupancyByProximityUpdateCallbackEN4cv3d3kit4capi5BlockIU13b"
                                "lock_pointerFvdPK35CV3DReconOccupancyByProximityResultP9__CFErrorEEEPS8_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN16CV3DReconSession39AddOnOccupancyByProximityUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvdPK35CV3DReconOccupancyByProximityResultP9__CFErrorEEEPS8_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN16CV3DReconSession39AddOnOccupancyByProximityUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvdPK35CV3DReconOccupancyByProximityResultP9__CFErrorEEEPS8_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232E69F8()
{
  return &unk_24EC2A3F0;
}

_QWORD *sub_2232E6A04(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC2A410;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232E6A78(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC2A410;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232E6AEC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2A410;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2232E6B3C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2A410;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2232E6B6C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2232E6BC4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *sub_2232E6C2C(uint64_t a1, double *a2, uint64_t *a3, CFTypeRef *a4)
{
  double v7;
  _QWORD *v8;
  _QWORD *v9;

  if (*a4)
    CFRetain(*a4);
  v7 = *a2;
  v8 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  v9 = v8;
  if (v8)
  {
    sub_223260C0C(v8 + 1, a3);
    *((_DWORD *)v9 + 8) = 1;
    *v9 = &unk_24EC1F2A8;
  }
  return (*(_QWORD *(**)(_QWORD *__return_ptr, double))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD **)(a1 + 8), v7);
}

void sub_2232E6CC8(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2232E6C9CLL);
}

uint64_t sub_2232E6CF4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN16CV3DReconSession31AddOnKeyframeListUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvdPK21"
                     "CV3DReconKeyframeListP9__CFErrorEEEPS8_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN16CV3DReconSession31AddOnKeyframeListUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_poi"
                                "nterFvdPK21CV3DReconKeyframeListP9__CFErrorEEEPS8_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN16CV3DReconSession31AddOnKeyframeListUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvdPK21CV3DReconKeyframeListP9__CFErrorEEEPS8_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN16CV3DReconSession31AddOnKeyframeListUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvdPK21CV3DReconKeyframeListP9__CFErrorEEEPS8_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232E6D60()
{
  return &unk_24EC2A480;
}

_QWORD *sub_2232E6D6C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC2A4A0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232E6DE0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC2A4A0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232E6E54(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2A4A0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2232E6EA4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2A4A0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2232E6ED4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2232E6F2C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *sub_2232E6F94(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  _DWORD *v5;
  _DWORD *v6;

  if (*a3)
    CFRetain(*a3);
  v5 = operator new(0x188uLL, MEMORY[0x24BEDB6B8]);
  v6 = v5;
  if (v5)
  {
    sub_223261020((uint64_t)(v5 + 2), a2);
    v6[96] = 1;
    *(_QWORD *)v6 = &off_24EC29730;
  }
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD **)(a1 + 8));
}

void sub_2232E7018(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2232E6FF4);
}

uint64_t sub_2232E7044(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN16CV3DReconSession33AddOnPlaneDetectionUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvPK2"
                     "9CV3DReconPlaneDetectionUpdateP9__CFErrorEEEPS8_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN16CV3DReconSession33AddOnPlaneDetectionUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_p"
                                "ointerFvPK29CV3DReconPlaneDetectionUpdateP9__CFErrorEEEPS8_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN16CV3DReconSession33AddOnPlaneDetectionUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvPK29CV3DReconPlaneDetectionUpdateP9__CFErrorEEEPS8_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN16CV3DReconSession33AddOnPlaneDetectionUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvPK29CV3DReconPlaneDetectionUpdateP9__CFErrorEEEPS8_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232E70B0()
{
  return &unk_24EC2A510;
}

_QWORD *sub_2232E70BC(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC2A530;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232E7130(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC2A530;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232E71A4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2A530;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2232E71F4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2A530;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2232E7224(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2232E727C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *sub_2232E72E4(uint64_t a1, double *a2, _QWORD *a3, CFTypeRef *a4)
{
  double v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (*a4)
    CFRetain(*a4);
  v7 = *a2;
  v8 = operator new(0x60uLL, MEMORY[0x24BEDB6B8]);
  if (v8)
  {
    v10 = a3[1];
    v9 = a3[2];
    v8[1] = &off_24EC715B8;
    v8[2] = v10;
    v8[3] = v9;
    if (v9)
    {
      v11 = (unint64_t *)(v9 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v14 = a3[4];
    v13 = a3[5];
    v8[4] = &off_24EC715B8;
    v8[5] = v14;
    v8[6] = v13;
    if (v13)
    {
      v15 = (unint64_t *)(v13 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v18 = a3[7];
    v17 = a3[8];
    v8[7] = &off_24EC715B8;
    v8[8] = v18;
    v8[9] = v17;
    if (v17)
    {
      v19 = (unint64_t *)(v17 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v8[10] = a3[9];
    *((_DWORD *)v8 + 22) = 1;
    *v8 = &off_24EC293A0;
  }
  return (*(_QWORD *(**)(_QWORD *__return_ptr, double))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD **)(a1 + 8), v7);
}

uint64_t sub_2232E73E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN16CV3DReconSession35AddOnMonitoringResultUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvd"
                     "PK25CV3DReconMonitoringResultP9__CFErrorEEEPS8_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN16CV3DReconSession35AddOnMonitoringResultUpdateCallbackEN4cv3d3kit4capi5BlockIU13block"
                                "_pointerFvdPK25CV3DReconMonitoringResultP9__CFErrorEEEPS8_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN16CV3DReconSession35AddOnMonitoringResultUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvdPK25CV3DReconMonitoringResultP9__CFErrorEEEPS8_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN16CV3DReconSession35AddOnMonitoringResultUpdateCallbackEN4cv3d3kit4capi5BlockIU13block_pointerFvdPK25CV3DReconMonitoringResultP9__CFErrorEEEPS8_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232E7454()
{
  return &unk_24EC2A5A0;
}

void sub_2232E7460()
{
  std::streambuf::~streambuf();
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232E7484(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  if (*(_BYTE *)(a1 + 896))
  {
    v2 = *(void **)(a1 + 872);
    if (v2)
    {
      *(_QWORD *)(a1 + 880) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 848);
    if (v3)
    {
      *(_QWORD *)(a1 + 856) = v3;
      operator delete(v3);
    }
    v4 = *(_QWORD *)(a1 + 824);
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 832);
      v6 = *(void **)(a1 + 824);
      if (v5 != v4)
      {
        do
        {
          v5 -= 472;
          sub_2232E7664(v5);
        }
        while (v5 != v4);
        v6 = *(void **)(a1 + 824);
      }
      *(_QWORD *)(a1 + 832) = v4;
      operator delete(v6);
    }
  }
  if (*(_BYTE *)(a1 + 816))
  {
    v7 = *(void **)(a1 + 784);
    if (v7)
    {
      *(_QWORD *)(a1 + 792) = v7;
      operator delete(v7);
    }
    v8 = *(_QWORD *)(a1 + 752);
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 760);
      v10 = *(void **)(a1 + 752);
      if (v9 != v8)
      {
        do
        {
          if (*(_BYTE *)(v9 - 96))
            sub_2231A8050(v9 - 1456);
          v9 -= 1472;
        }
        while (v9 != v8);
        v10 = *(void **)(a1 + 752);
      }
      *(_QWORD *)(a1 + 760) = v8;
      operator delete(v10);
    }
  }
  if (*(_BYTE *)(a1 + 744))
    sub_2232E7854(a1 + 8);
  return a1;
}

char **sub_2232E757C(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  if (*((_BYTE *)a1 + 64))
  {
    v2 = a1[4];
    if (v2)
    {
      a1[5] = v2;
      operator delete(v2);
    }
    v3 = *a1;
    if (*a1)
    {
      v4 = a1[1];
      v5 = *a1;
      if (v4 != v3)
      {
        do
        {
          if (*(v4 - 96))
            sub_2231A8050((uint64_t)(v4 - 1456));
          v4 -= 1472;
        }
        while (v4 != v3);
        v5 = *a1;
      }
      a1[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

void **sub_2232E7604(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 472;
        sub_2232E7664(v3);
      }
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_2232E7664(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (*(_BYTE *)(a1 + 456))
  {
    v2 = *(_QWORD *)(a1 + 432);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 440);
      v4 = *(void **)(a1 + 432);
      if (v3 != v2)
      {
        v5 = *(_QWORD *)(a1 + 440);
        do
        {
          v7 = *(void **)(v5 - 24);
          v5 -= 24;
          v6 = v7;
          if (v7)
          {
            *(_QWORD *)(v3 - 16) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *(void **)(a1 + 432);
      }
      *(_QWORD *)(a1 + 440) = v2;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 424))
  {
    v8 = *(void **)(a1 + 400);
    if (v8)
    {
      *(_QWORD *)(a1 + 408) = v8;
      operator delete(v8);
    }
  }
  if (*(_BYTE *)(a1 + 392))
  {
    v9 = *(void **)(a1 + 368);
    if (v9)
    {
      *(_QWORD *)(a1 + 376) = v9;
      operator delete(v9);
    }
  }
  v10 = *(void **)(a1 + 288);
  if (v10)
  {
    *(_QWORD *)(a1 + 296) = v10;
    operator delete(v10);
  }
}

uint64_t sub_2232E7728(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (*(_BYTE *)(a1 + 456))
  {
    v2 = *(_QWORD *)(a1 + 432);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 440);
      v4 = *(void **)(a1 + 432);
      if (v3 != v2)
      {
        v5 = *(_QWORD *)(a1 + 440);
        do
        {
          v7 = *(void **)(v5 - 24);
          v5 -= 24;
          v6 = v7;
          if (v7)
          {
            *(_QWORD *)(v3 - 16) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *(void **)(a1 + 432);
      }
      *(_QWORD *)(a1 + 440) = v2;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 424))
  {
    v8 = *(void **)(a1 + 400);
    if (v8)
    {
      *(_QWORD *)(a1 + 408) = v8;
      operator delete(v8);
    }
  }
  if (*(_BYTE *)(a1 + 392))
  {
    v9 = *(void **)(a1 + 368);
    if (v9)
    {
      *(_QWORD *)(a1 + 376) = v9;
      operator delete(v9);
    }
  }
  v10 = *(void **)(a1 + 288);
  if (v10)
  {
    *(_QWORD *)(a1 + 296) = v10;
    operator delete(v10);
  }
  return a1;
}

void **sub_2232E77E4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 96))
          sub_2231A8050((uint64_t)(v3 - 1456));
        v3 -= 1472;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2232E7854(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t *v6;
  uint64_t *v7;
  void *v8;
  void *v9;

  sub_2232E79B4(a1 + 624);
  if (*(_BYTE *)(a1 + 616))
  {
    v2 = *(void **)(a1 + 528);
    if (v2)
    {
      *(_QWORD *)(a1 + 536) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 504);
    if (v3)
    {
      *(_QWORD *)(a1 + 512) = v3;
      operator delete(v3);
    }
  }
  if (*(_BYTE *)(a1 + 496))
    sub_2232E7A44(a1 + 344);
  sub_2232E7AEC(a1 + 224);
  sub_2232E7AEC(a1 + 104);
  v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(_QWORD *)(a1 + 88) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 56);
  if (v5)
  {
    *(_QWORD *)(a1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *(uint64_t **)(a1 + 32);
  if (v6)
  {
    v7 = *(uint64_t **)(a1 + 40);
    v8 = *(void **)(a1 + 32);
    if (v7 != v6)
    {
      do
        v7 = sub_2232E7BD4(v7 - 48);
      while (v7 != v6);
      v8 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v6;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 8);
  if (v9)
  {
    *(_QWORD *)(a1 + 16) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_2232E792C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  void *v7;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
  {
    v5 = *(uint64_t **)(a1 + 32);
    v6 = *(void **)(a1 + 24);
    if (v5 != v4)
    {
      do
        v5 = sub_2232E7BD4(v5 - 48);
      while (v5 != v4);
      v6 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v6);
  }
  v7 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_2232E79B4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  void *v7;

  if (*(_BYTE *)(a1 + 104))
  {
    v2 = *(void **)(a1 + 80);
    if (v2)
    {
      *(_QWORD *)(a1 + 88) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 56);
    if (v3)
    {
      *(_QWORD *)(a1 + 64) = v3;
      operator delete(v3);
    }
    v4 = *(uint64_t **)(a1 + 32);
    if (v4)
    {
      v5 = *(uint64_t **)(a1 + 40);
      v6 = *(void **)(a1 + 32);
      if (v5 != v4)
      {
        do
          v5 = sub_2232E7BD4(v5 - 48);
        while (v5 != v4);
        v6 = *(void **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 40) = v4;
      operator delete(v6);
    }
    v7 = *(void **)(a1 + 8);
    if (v7)
    {
      *(_QWORD *)(a1 + 16) = v7;
      operator delete(v7);
    }
  }
  return a1;
}

uint64_t sub_2232E7A44(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t *v5;
  uint64_t *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }
  v5 = *(uint64_t **)(a1 + 48);
  if (v5)
  {
    v6 = *(uint64_t **)(a1 + 56);
    v7 = *(void **)(a1 + 48);
    if (v6 != v5)
    {
      do
        v6 = sub_2232E7BD4(v6 - 48);
      while (v6 != v5);
      v7 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v5;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_2232E7AEC(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  void *v7;

  if (*(_BYTE *)(a1 + 112))
  {
    v2 = *(void **)(a1 + 80);
    if (v2)
    {
      *(_QWORD *)(a1 + 88) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 56);
    if (v3)
    {
      *(_QWORD *)(a1 + 64) = v3;
      operator delete(v3);
    }
    v4 = *(uint64_t **)(a1 + 32);
    if (v4)
    {
      v5 = *(uint64_t **)(a1 + 40);
      v6 = *(void **)(a1 + 32);
      if (v5 != v4)
      {
        do
          v5 = sub_2232E7BD4(v5 - 48);
        while (v5 != v4);
        v6 = *(void **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 40) = v4;
      operator delete(v6);
    }
    v7 = *(void **)(a1 + 8);
    if (v7)
    {
      *(_QWORD *)(a1 + 16) = v7;
      operator delete(v7);
    }
  }
  return a1;
}

void **sub_2232E7B7C(void **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;

  v2 = (uint64_t *)*a1;
  if (*a1)
  {
    v3 = (uint64_t *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_2232E7BD4(v3 - 48);
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_2232E7BD4(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  uint64_t *v35;

  v2 = a1[44];
  if (v2)
  {
    a1[45] = v2;
    v3 = (unint64_t)(a1[46] - v2) >> 2;
    v33 = v2;
    v34 = v3;
    v4 = *((unsigned int *)a1 + 95);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A658[v4])(&v35, a1 + 47);
  }
  v5 = a1[36];
  if (v5)
  {
    a1[37] = v5;
    v6 = -1431655765 * ((unint64_t)(a1[38] - v5) >> 2);
    v33 = v5;
    v34 = v6;
    v7 = *((unsigned int *)a1 + 79);
    if ((_DWORD)v7 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A668[v7])(&v35, a1 + 39);
  }
  v8 = a1[32];
  if (v8)
  {
    a1[33] = v8;
    v9 = (unint64_t)(a1[34] - v8) >> 3;
    v33 = v8;
    v34 = v9;
    v10 = *((unsigned int *)a1 + 71);
    if ((_DWORD)v10 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A678[v10])(&v35, a1 + 35);
  }
  v11 = a1[28];
  if (v11)
  {
    a1[29] = v11;
    v12 = (unint64_t)(a1[30] - v11) >> 3;
    v33 = v11;
    v34 = v12;
    v13 = *((unsigned int *)a1 + 63);
    if ((_DWORD)v13 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A688[v13])(&v35, a1 + 31);
  }
  v14 = a1[24];
  if (v14)
  {
    a1[25] = v14;
    v15 = -1431655765 * ((unint64_t)(a1[26] - v14) >> 2);
    v33 = v14;
    v34 = v15;
    v16 = *((unsigned int *)a1 + 55);
    if ((_DWORD)v16 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A668[v16])(&v35, a1 + 27);
  }
  v17 = a1[20];
  if (v17)
  {
    a1[21] = v17;
    v18 = *((_DWORD *)a1 + 44) - v17;
    v33 = v17;
    v34 = v18;
    v19 = *((unsigned int *)a1 + 47);
    if ((_DWORD)v19 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A698[v19])(&v35, a1 + 23);
  }
  v20 = a1[15];
  if (v20)
  {
    a1[16] = v20;
    v21 = *((_DWORD *)a1 + 34) - v20;
    v33 = v20;
    v34 = v21;
    v22 = *((unsigned int *)a1 + 37);
    if ((_DWORD)v22 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A698[v22])(&v35, a1 + 18);
  }
  v23 = a1[10];
  if (v23)
  {
    a1[11] = v23;
    v24 = -1431655765 * ((unint64_t)(a1[12] - v23) >> 2);
    v33 = v23;
    v34 = v24;
    v25 = *((unsigned int *)a1 + 27);
    if ((_DWORD)v25 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A6A8[v25])(&v35, a1 + 13);
  }
  v26 = a1[5];
  if (v26)
  {
    a1[6] = v26;
    v27 = -1431655765 * ((unint64_t)(a1[7] - v26) >> 2);
    v33 = v26;
    v34 = v27;
    v28 = *((unsigned int *)a1 + 17);
    if ((_DWORD)v28 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A6A8[v28])(&v35, a1 + 8);
  }
  v29 = *a1;
  if (*a1)
  {
    a1[1] = v29;
    v30 = -1431655765 * ((unint64_t)(a1[2] - v29) >> 2);
    v33 = v29;
    v34 = v30;
    v31 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v31 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A6A8[v31])(&v35, a1 + 3);
  }
  return a1;
}

uint64_t *sub_2232E7F80(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = -1431655765 * ((unint64_t)(a1[2] - v2) >> 2);
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A668[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_2232E800C(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = (unint64_t)(a1[2] - v2) >> 3;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A678[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_2232E808C(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = (unint64_t)(a1[2] - v2) >> 3;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A688[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_2232E810C(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = -1431655765 * ((unint64_t)(a1[2] - v2) >> 2);
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A6A8[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_2232E8198(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = (unint64_t)(a1[2] - v2) >> 2;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A658[v4])(&v8, a1 + 3);
  }
  return a1;
}

void sub_2232E8218(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_2232E8224(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], **a1, 12 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
    abort();
  }
  return result;
}

void sub_2232E8298(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_2232E82A4(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], **a1, 8 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
    abort();
  }
  return result;
}

void sub_2232E8314(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_2232E8320(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], **a1, 8 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
    abort();
  }
  return result;
}

void sub_2232E8390(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_2232E839C(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], **a1, 12 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
    abort();
  }
  return result;
}

uint64_t sub_2232E8410(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  char *v47;
  uint64_t *v49;
  void **v50;
  _BYTE v51[15];

  *(_OWORD *)(a1 + 48) = 0u;
  v4 = (uint64_t *)(a1 + 48);
  v49 = (uint64_t *)(a1 + 24);
  v50 = (void **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v5 = a2[1] - *a2;
  v6 = 0xEEEEEEEEEEEEEEEFLL * (v5 >> 3);
  if (v5)
  {
    if (v6 >> 60)
      sub_22316E078();
    v7 = (char *)operator new(0xEEEEEEEEEEEEEEF0 * (v5 >> 3));
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[16 * v6];
    v6 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3);
  }
  sub_2232E8954((uint64_t)v49, v6);
  v8 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3);
  v9 = *(_BYTE **)(a1 + 48);
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 64) - (_QWORD)v9) >> 2) < v8)
  {
    if (v8 >= 0x3C3C3C3C3C3C3C4)
      sub_22316E078();
    v10 = *(_BYTE **)(a1 + 56);
    v11 = (char *)operator new(0x777777777777777CLL * ((a2[1] - *a2) >> 3));
    v12 = &v11[v10 - v9];
    v13 = v12;
    if (v10 != v9)
    {
      v14 = &v11[v10 - v9];
      do
      {
        *(_OWORD *)(v14 - 68) = *(_OWORD *)(v10 - 68);
        v15 = *(_OWORD *)(v10 - 52);
        v16 = *(_OWORD *)(v10 - 36);
        v17 = *(_OWORD *)(v10 - 20);
        v13 = v14 - 68;
        *(v14 - 4) = *(v10 - 4);
        *(_OWORD *)(v14 - 20) = v17;
        *(_OWORD *)(v14 - 36) = v16;
        *(_OWORD *)(v14 - 52) = v15;
        v10 -= 68;
        v14 -= 68;
      }
      while (v10 != v9);
    }
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = &v11[68 * v8];
    if (v9)
      operator delete(v9);
  }
  v18 = *a2;
  v19 = a2[1];
  if (*a2 != v19)
  {
    while (1)
    {
      v21 = *(_OWORD **)(a1 + 8);
      v20 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v21 >= v20)
      {
        v23 = *(_OWORD **)a1;
        v24 = ((uint64_t)v21 - *(_QWORD *)a1) >> 4;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60)
          sub_22316E078();
        v26 = v20 - (_QWORD)v23;
        if (v26 >> 3 > v25)
          v25 = v26 >> 3;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
          v27 = 0xFFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          if (v27 >> 60)
            sub_223174E94();
          v28 = (char *)operator new(16 * v27);
          v29 = &v28[16 * v24];
          *(_OWORD *)v29 = *(_OWORD *)v18;
          v30 = (uint64_t)v29;
          if (v21 != v23)
          {
            do
            {
LABEL_44:
              *(_OWORD *)(v30 - 16) = *(v21 - 1);
              v30 -= 16;
              --v21;
            }
            while (v21 != v23);
            v21 = *(_OWORD **)a1;
            v22 = v29 + 16;
            *(_QWORD *)a1 = v30;
            *(_QWORD *)(a1 + 8) = v29 + 16;
            *(_QWORD *)(a1 + 16) = &v28[16 * v27];
            if (!v21)
              goto LABEL_27;
LABEL_26:
            operator delete(v21);
            goto LABEL_27;
          }
        }
        else
        {
          v28 = 0;
          v29 = (char *)(16 * v24);
          *(_OWORD *)(16 * v24) = *(_OWORD *)v18;
          v30 = 16 * v24;
          if (v21 != v23)
            goto LABEL_44;
        }
        v22 = v29 + 16;
        *(_QWORD *)a1 = v30;
        *(_QWORD *)(a1 + 8) = v29 + 16;
        *(_QWORD *)(a1 + 16) = &v28[16 * v27];
        if (v21)
          goto LABEL_26;
      }
      else
      {
        *v21 = *(_OWORD *)v18;
        v22 = v21 + 1;
      }
LABEL_27:
      *(_QWORD *)(a1 + 8) = v22;
      v31 = *(uint64_t **)(v18 + 16);
      v32 = *(_QWORD *)(a1 + 32);
      if (v32 >= *(_QWORD *)(a1 + 40))
      {
        v33 = sub_2232E8DFC(v49, v31);
      }
      else
      {
        sub_22414D320(*(_QWORD *)(a1 + 32), v31);
        v33 = v32 + 384;
        *(_QWORD *)(a1 + 32) = v32 + 384;
      }
      *(_QWORD *)(a1 + 32) = v33;
      sub_2232E8A50(v4, (__int128 *)(v18 + 32));
      if (*(_BYTE *)(v18 + 116))
      {
        v34 = *(_BYTE *)(v18 + 100);
        *(_QWORD *)v51 = *(_QWORD *)(v18 + 101);
        *(_QWORD *)&v51[7] = *(_QWORD *)(v18 + 108);
        v35 = 1;
        v37 = *(_QWORD **)(a1 + 80);
        v36 = *(_QWORD *)(a1 + 88);
        if ((unint64_t)v37 >= v36)
          goto LABEL_34;
LABEL_13:
        *(_BYTE *)v37 = v34;
        *(_QWORD *)((char *)v37 + 1) = *(_QWORD *)v51;
        v37[1] = *(_QWORD *)&v51[7];
        *((_BYTE *)v37 + 16) = v35;
        *(_QWORD *)(a1 + 80) = (char *)v37 + 17;
        v18 += 120;
        if (v18 == v19)
          return a1;
      }
      else
      {
        v35 = 0;
        v34 = 0;
        v37 = *(_QWORD **)(a1 + 80);
        v36 = *(_QWORD *)(a1 + 88);
        if ((unint64_t)v37 < v36)
          goto LABEL_13;
LABEL_34:
        v38 = *v50;
        v39 = 0xF0F0F0F0F0F0F0F1 * ((char *)v37 - (_BYTE *)*v50);
        v40 = v39 + 1;
        if (v39 + 1 >= 0xF0F0F0F0F0F0F10)
          sub_22316E078();
        v41 = 0xF0F0F0F0F0F0F0F1 * (v36 - (_QWORD)v38);
        if (2 * v41 > v40)
          v40 = 2 * v41;
        if (v41 >= 0x787878787878787)
          v42 = 0xF0F0F0F0F0F0F0FLL;
        else
          v42 = v40;
        if (v42)
        {
          if (v42 >= 0xF0F0F0F0F0F0F10)
            sub_223174E94();
          v43 = (char *)operator new(17 * v42);
        }
        else
        {
          v43 = 0;
        }
        v44 = &v43[17 * v39];
        *v44 = v34;
        *(_QWORD *)(v44 + 1) = *(_QWORD *)v51;
        *((_QWORD *)v44 + 1) = *(_QWORD *)&v51[7];
        v44[16] = v35;
        v45 = v44;
        if (v37 != v38)
        {
          do
          {
            v46 = *(_OWORD *)((char *)v37 - 17);
            *(v45 - 1) = *((_BYTE *)v37 - 1);
            *(_OWORD *)(v45 - 17) = v46;
            v45 -= 17;
            v37 = (_QWORD *)((char *)v37 - 17);
          }
          while (v37 != v38);
          v37 = *v50;
        }
        v47 = v44 + 17;
        *(_QWORD *)(a1 + 72) = v45;
        *(_QWORD *)(a1 + 80) = v44 + 17;
        *(_QWORD *)(a1 + 88) = &v43[17 * v42];
        if (v37)
          operator delete(v37);
        *(_QWORD *)(a1 + 80) = v47;
        v18 += 120;
        if (v18 == v19)
          return a1;
      }
    }
  }
  return a1;
}

void sub_2232E88D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11)
{
  uint64_t v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;

  v14 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v11 + 80) = v14;
    operator delete(v14);
    v15 = *v12;
    if (!*v12)
    {
LABEL_3:
      sub_2232E7B7C(a10);
      v16 = *(void **)v11;
      if (!*(_QWORD *)v11)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v15 = *v12;
    if (!*v12)
      goto LABEL_3;
  }
  *(_QWORD *)(v11 + 56) = v15;
  operator delete(v15);
  sub_2232E7B7C(a10);
  v16 = *(void **)v11;
  if (!*(_QWORD *)v11)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  *(_QWORD *)(v11 + 8) = v16;
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_2232E8954(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t *v10;

  v2 = *(uint64_t **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 7) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAABLL)
      sub_22316E078();
    v4 = *(_QWORD *)(a1 + 8);
    v5 = 384 * a2;
    v6 = (char *)operator new(384 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - (_QWORD)v2];
    if ((uint64_t *)v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_9:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - (_QWORD)v2];
      do
      {
        v4 -= 384;
        sub_2232E8C40((uint64_t)(v9 - 384), v4);
      }
      while ((uint64_t *)v4 != v2);
      v2 = *(uint64_t **)a1;
      v10 = *(uint64_t **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v10 != v2)
      {
        v10 -= 48;
        sub_2232E7BD4(v10);
      }
      if (v2)
        goto LABEL_9;
    }
  }
}

char *sub_2232E8A50(uint64_t *a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 < v4)
  {
    *v5 = 0;
    v5[64] = 0;
    if (*((_BYTE *)a2 + 64))
    {
      v6 = *a2;
      v7 = a2[1];
      v8 = a2[3];
      *((_OWORD *)v5 + 2) = a2[2];
      *((_OWORD *)v5 + 3) = v8;
      *(_OWORD *)v5 = v6;
      *((_OWORD *)v5 + 1) = v7;
      v5[64] = 1;
    }
    v9 = v5 + 68;
    goto LABEL_20;
  }
  v10 = (char *)*a1;
  v11 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v5[-*a1] >> 2);
  v12 = v11 + 1;
  if (v11 + 1 > 0x3C3C3C3C3C3C3C3)
    sub_22316E078();
  v13 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v4 - (_QWORD)v10) >> 2);
  if (2 * v13 > v12)
    v12 = 2 * v13;
  if (v13 >= 0x1E1E1E1E1E1E1E1)
    v14 = 0x3C3C3C3C3C3C3C3;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 > 0x3C3C3C3C3C3C3C3)
      sub_223174E94();
    v15 = (char *)operator new(68 * v14);
    v16 = (uint64_t)&v15[68 * v11];
    *(_BYTE *)v16 = 0;
    *(_BYTE *)(v16 + 64) = 0;
    if (!*((_BYTE *)a2 + 64))
      goto LABEL_15;
  }
  else
  {
    v15 = 0;
    v16 = 4 * ((uint64_t)&v5[-*a1] >> 2);
    *(_BYTE *)v16 = 0;
    *(_BYTE *)(v16 + 64) = 0;
    if (!*((_BYTE *)a2 + 64))
      goto LABEL_15;
  }
  v17 = a2[1];
  *(_OWORD *)v16 = *a2;
  *(_OWORD *)(v16 + 16) = v17;
  v18 = a2[3];
  *(_OWORD *)(v16 + 32) = a2[2];
  *(_OWORD *)(v16 + 48) = v18;
  *(_BYTE *)(v16 + 64) = 1;
LABEL_15:
  v9 = (char *)(v16 + 68);
  if (v5 != v10)
  {
    do
    {
      *(_OWORD *)(v16 - 68) = *(_OWORD *)(v5 - 68);
      v19 = *(_OWORD *)(v5 - 52);
      v20 = *(_OWORD *)(v5 - 36);
      v21 = *(_OWORD *)(v5 - 20);
      *(_BYTE *)(v16 - 4) = *(v5 - 4);
      *(_OWORD *)(v16 - 20) = v21;
      *(_OWORD *)(v16 - 36) = v20;
      *(_OWORD *)(v16 - 52) = v19;
      v16 -= 68;
      v5 -= 68;
    }
    while (v5 != v10);
    v5 = (char *)*a1;
  }
  *a1 = v16;
  a1[1] = (uint64_t)v9;
  a1[2] = (uint64_t)&v15[68 * v14];
  if (v5)
    operator delete(v5);
LABEL_20:
  a1[1] = (uint64_t)v9;
  return v9 - 68;
}

uint64_t sub_2232E8BF0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 384;
    sub_2232E7BD4((uint64_t *)(i - 384));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 sub_2232E8C40(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  v2 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v2;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  result = *(__n128 *)(a2 + 352);
  *(__n128 *)(a1 + 352) = result;
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a2 + 360) = 0;
  *(_QWORD *)(a2 + 368) = 0;
  return result;
}

uint64_t sub_2232E8DFC(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v14;
  char *v15;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 7);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 7) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 7);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 7) >= 0x55555555555555)
    v6 = 0xAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(384 * v6);
  }
  else
  {
    v7 = 0;
  }
  v14 = (uint64_t)&v7[384 * v3];
  v15 = &v7[384 * v6];
  sub_22414D320(v14, a2);
  v8 = v14;
  v9 = v14 + 384;
  v11 = (uint64_t *)*a1;
  v10 = (uint64_t *)a1[1];
  if (v10 == (uint64_t *)*a1)
  {
    *a1 = v14;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
    if (!v10)
      return v14 + 384;
    goto LABEL_16;
  }
  do
  {
    v10 -= 48;
    sub_2232E8C40(v8 - 384, (uint64_t)v10);
  }
  while (v10 != v11);
  v10 = (uint64_t *)*a1;
  v12 = (uint64_t *)a1[1];
  *a1 = v8;
  a1[1] = v9;
  a1[2] = (uint64_t)v15;
  while (v12 != v10)
  {
    v12 -= 48;
    sub_2232E7BD4(v12);
  }
  if (v10)
LABEL_16:
    operator delete(v10);
  return v14 + 384;
}

void sub_2232E8F54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2232E8BF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2232E8F68(uint64_t a1, uint64_t *a2)
{
  int64_t v4;
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v19;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_2232E8410(a1 + 24, a2 + 4);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v4 = a2[1] - *a2;
  v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
  v6 = *(_BYTE **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < v5)
  {
    if (v5 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v7 = *(_BYTE **)(a1 + 8);
    v8 = (char *)operator new(v4);
    v9 = &v8[24 * ((v7 - v6) / 24)];
    v10 = v9;
    if (v7 != v6)
    {
      v11 = &v8[24 * ((v7 - v6) / 24)];
      do
      {
        v12 = *(_OWORD *)(v7 - 24);
        v10 = v11 - 24;
        *((_QWORD *)v11 - 1) = *((_QWORD *)v7 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v7 -= 24;
        v11 -= 24;
      }
      while (v7 != v6);
    }
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = &v8[24 * v5];
    if (v6)
      operator delete(v6);
  }
  v13 = *a2;
  v14 = a2[1];
  if (*a2 != v14)
  {
    do
    {
      sub_2232E9144((char **)a1, v13);
      v13 += 24;
    }
    while (v13 != v14);
  }
  v15 = a2[8] - a2[7];
  v19 = 0;
  v16 = *(_QWORD *)(a1 + 120);
  v17 = *(_QWORD *)(a1 + 128) - v16;
  if (v15 <= v17)
  {
    if (v15 < v17)
      *(_QWORD *)(a1 + 128) = v16 + v15;
  }
  else
  {
    sub_2232E92B0((unint64_t *)(a1 + 120), v15 - v17, &v19);
  }
  *(_QWORD *)(a1 + 144) = a2[10];
  return a1;
}

void sub_2232E9100(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 128) = v5;
    operator delete(v5);
  }
  sub_2232E792C(v2);
  v6 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

char *sub_2232E9144(char **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  int v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    v6 = *(_DWORD *)(a2 + 8);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *((_DWORD *)v5 + 2) = v6;
    *((_DWORD *)v5 + 3) = *(_DWORD *)(a2 + 12);
    v5[16] = *(_BYTE *)(a2 + 16);
    *((_DWORD *)v5 + 5) = *(_DWORD *)(a2 + 20);
    v7 = v5 + 24;
    goto LABEL_14;
  }
  v8 = *a1;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
  v10 = v9 + 1;
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v8) >> 3);
  if (2 * v11 > v10)
    v10 = 2 * v11;
  if (v11 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v10;
  if (v12 > 0xAAAAAAAAAAAAAAALL)
    sub_223174E94();
  v13 = 24 * v12;
  v14 = (char *)operator new(24 * v12);
  v15 = &v14[24 * v9];
  v16 = &v14[v13];
  *(_OWORD *)v15 = *(_OWORD *)a2;
  v15[16] = *(_BYTE *)(a2 + 16);
  *((_DWORD *)v15 + 5) = *(_DWORD *)(a2 + 20);
  v7 = v15 + 24;
  if (v5 == v8)
  {
    *a1 = v15;
    a1[1] = v7;
    a1[2] = v16;
    if (!v8)
      goto LABEL_14;
    goto LABEL_13;
  }
  do
  {
    v17 = *(_OWORD *)(v5 - 24);
    v18 = v15 - 24;
    *((_QWORD *)v15 - 1) = *((_QWORD *)v5 - 1);
    *(_OWORD *)(v15 - 24) = v17;
    v5 -= 24;
    v15 -= 24;
  }
  while (v5 != v8);
  *a1 = v18;
  a1[1] = v7;
  a1[2] = v16;
  if (v8)
LABEL_13:
    operator delete(v8);
LABEL_14:
  a1[1] = v7;
  return v7 - 24;
}

void sub_2232E92B0(unint64_t *a1, unint64_t a2, const char *a3)
{
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t *v23;
  unint64_t v24;
  int8x8_t v25;
  int8x8_t *v26;
  unint64_t v27;
  int8x16_t v28;
  int8x16_t *v29;
  unint64_t v30;
  int8x8_t v31;
  int8x8_t *v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  __int128 *v36;
  char *v37;
  unint64_t v38;
  __int128 v39;
  char v40;

  v7 = a1[1];
  v6 = a1[2];
  v8 = (char *)v7;
  if (v6 - v7 >= a2)
  {
    if (!a2)
    {
LABEL_55:
      a1[1] = (unint64_t)v8;
      return;
    }
    v18 = (char *)(v7 + a2);
    if (a2 >= 8 && (v7 >= (unint64_t)(a3 + 1) || v18 <= a3))
    {
      if (a2 < 0x20)
      {
        v20 = 0;
        goto LABEL_36;
      }
      v20 = a2 & 0xFFFFFFFFFFFFFFE0;
      v28 = vld1q_dup_s8(a3);
      v29 = (int8x16_t *)(v7 + 16);
      v30 = a2 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v29[-1] = v28;
        *v29 = v28;
        v29 += 2;
        v30 -= 32;
      }
      while (v30);
      if (v20 == a2)
        goto LABEL_54;
      if ((a2 & 0x18) != 0)
      {
LABEL_36:
        v8 = (char *)(v7 + (a2 & 0xFFFFFFFFFFFFFFF8));
        v31 = vld1_dup_s8(a3);
        v32 = (int8x8_t *)(v7 + v20);
        v33 = v20 - (a2 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          *v32++ = v31;
          v33 += 8;
        }
        while (v33);
        if ((a2 & 0xFFFFFFFFFFFFFFF8) == a2)
          goto LABEL_54;
        goto LABEL_53;
      }
      v8 = (char *)(v7 + v20);
    }
    do
LABEL_53:
      *v8++ = *a3;
    while (v8 != v18);
LABEL_54:
    v8 = (char *)(v7 + a2);
    goto LABEL_55;
  }
  v9 = (char *)*a1;
  v10 = v7 - *a1;
  v11 = v10 + a2;
  if ((uint64_t)(v10 + a2) < 0)
    sub_22316E078();
  v12 = v6 - (_QWORD)v9;
  if (2 * v12 > v11)
    v11 = 2 * v12;
  if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
    v13 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    v14 = (char *)operator new(v13);
    v15 = (unint64_t)&v14[v10];
    v16 = &v14[v10 + a2];
    v17 = &v14[v10];
    if (a2 < 8)
      goto LABEL_41;
  }
  else
  {
    v14 = 0;
    v15 = v7 - *a1;
    v16 = (char *)(v10 + a2);
    v17 = (char *)v15;
    if (a2 < 8)
      goto LABEL_41;
  }
  if (v15 >= (unint64_t)(a3 + 1) || (v17 = (char *)v15, v16 <= a3))
  {
    if (a2 < 0x20)
    {
      v21 = 0;
      goto LABEL_28;
    }
    v21 = a2 & 0xFFFFFFFFFFFFFFE0;
    v22 = vld1q_dup_s8(a3);
    v23 = (int8x16_t *)&v14[v10 + 16];
    v24 = a2 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v23[-1] = v22;
      *v23 = v22;
      v23 += 2;
      v24 -= 32;
    }
    while (v24);
    if (v21 == a2)
      goto LABEL_42;
    if ((a2 & 0x18) != 0)
    {
LABEL_28:
      v17 = (char *)(v15 + (a2 & 0xFFFFFFFFFFFFFFF8));
      v25 = vld1_dup_s8(a3);
      v26 = (int8x8_t *)&v14[v21 + v7 - (_QWORD)v9];
      v27 = v21 - (a2 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *v26++ = v25;
        v27 += 8;
      }
      while (v27);
      if ((a2 & 0xFFFFFFFFFFFFFFF8) == a2)
        goto LABEL_42;
      goto LABEL_41;
    }
    v17 = (char *)(v15 + v21);
  }
  do
LABEL_41:
    *v17++ = *a3;
  while (v17 != v16);
LABEL_42:
  v34 = (char *)*a1;
  v35 = v7 - *a1;
  if (v7 != *a1)
  {
    if (v35 < 0x20)
      goto LABEL_60;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_60;
    v8 = (char *)(v7 - (v35 & 0xFFFFFFFFFFFFFFE0));
    v15 -= v35 & 0xFFFFFFFFFFFFFFE0;
    v36 = (__int128 *)(v7 - 16);
    v37 = &v14[v7 - 16 - (_QWORD)v9];
    v38 = v35 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v39 = *v36;
      *((_OWORD *)v37 - 1) = *(v36 - 1);
      *(_OWORD *)v37 = v39;
      v37 -= 32;
      v36 -= 2;
      v38 -= 32;
    }
    while (v38);
    if (v35 != (v35 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_60:
      do
      {
        v40 = *--v8;
        *(_BYTE *)--v15 = v40;
      }
      while (v8 != v34);
    }
    v8 = (char *)*a1;
  }
  *a1 = v15;
  a1[1] = (unint64_t)v16;
  a1[2] = (unint64_t)&v14[v13];
  if (v8)
    operator delete(v8);
}

char ***sub_2232E9564(char ***a1, _OWORD *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = (v6 - *v4) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_22316E078();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 60)
        sub_223174E94();
      v13 = (char *)operator new(16 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[16 * v9];
    *(_OWORD *)v14 = *a2;
    v7 = v14 + 16;
    if (v6 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v8);
      v6 = *v4;
    }
    *v4 = v14;
    v4[1] = v7;
    v4[2] = &v13[16 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_OWORD *)v6 = *a2;
    v7 = v6 + 16;
  }
  v4[1] = v7;
  return a1;
}

uint64_t sub_2232E9674(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 1472;
        *(_QWORD *)(a1 + 16) = v2 - 1472;
        if (!*(_BYTE *)(v2 - 96))
          break;
        sub_2231A8050(v2 - 1456);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 1472;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_2232E96E0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  _BYTE v32[2];
  _BYTE v33[2];
  _BYTE v34[2];
  _BYTE v35[2];
  _BYTE v36[2];
  _BYTE v37[2];

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v5 = *(_OWORD *)(a2 + 136);
  v6 = *(_OWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 232) = -1;
  v7 = (_DWORD *)(a1 + 232);
  *(_OWORD *)(a1 + 148) = v6;
  *(_OWORD *)(a1 + 136) = v5;
  *(_BYTE *)(a1 + 168) = 0;
  v8 = *(unsigned int *)(a2 + 232);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC2A6B8[v8])(v32, a1 + 168, a2 + 168);
    *v7 = v8;
  }
  v9 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 252) = *(_OWORD *)(a2 + 252);
  *(_OWORD *)(a1 + 240) = v9;
  *(_BYTE *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 336) = -1;
  v10 = *(unsigned int *)(a2 + 336);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC2A6B8[v10])(v32, a1 + 272, a2 + 272);
    *(_DWORD *)(a1 + 336) = v10;
  }
  v11 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 356) = *(_OWORD *)(a2 + 356);
  *(_OWORD *)(a1 + 344) = v11;
  *(_BYTE *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 440) = -1;
  v12 = *(unsigned int *)(a2 + 440);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC2A6B8[v12])(v32, a1 + 376, a2 + 376);
    *(_DWORD *)(a1 + 440) = v12;
  }
  v13 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 460) = *(_OWORD *)(a2 + 460);
  *(_OWORD *)(a1 + 448) = v13;
  *(_BYTE *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 544) = -1;
  v14 = *(unsigned int *)(a2 + 544);
  if ((_DWORD)v14 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC2A6B8[v14])(v32, a1 + 480, a2 + 480);
    *(_DWORD *)(a1 + 544) = v14;
  }
  v15 = *(_OWORD *)(a2 + 552);
  *(_OWORD *)(a1 + 564) = *(_OWORD *)(a2 + 564);
  *(_OWORD *)(a1 + 552) = v15;
  *(_BYTE *)(a1 + 584) = 0;
  *(_DWORD *)(a1 + 648) = -1;
  v16 = *(unsigned int *)(a2 + 648);
  if ((_DWORD)v16 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC2A6B8[v16])(v32, a1 + 584, a2 + 584);
    *(_DWORD *)(a1 + 648) = v16;
  }
  v17 = *(_OWORD *)(a2 + 656);
  *(_OWORD *)(a1 + 668) = *(_OWORD *)(a2 + 668);
  *(_OWORD *)(a1 + 656) = v17;
  *(_BYTE *)(a1 + 688) = 0;
  *(_DWORD *)(a1 + 752) = -1;
  v18 = *(unsigned int *)(a2 + 752);
  if ((_DWORD)v18 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC2A6B8[v18])(v32, a1 + 688, a2 + 688);
    *(_DWORD *)(a1 + 752) = v18;
  }
  *(_BYTE *)(a1 + 760) = 0;
  *(_BYTE *)(a1 + 1288) = 0;
  if (*(_BYTE *)(a2 + 1288))
  {
    v19 = *(_OWORD *)(a2 + 768);
    *(_OWORD *)(a1 + 780) = *(_OWORD *)(a2 + 780);
    *(_OWORD *)(a1 + 768) = v19;
    *(_BYTE *)(a1 + 800) = 0;
    *(_DWORD *)(a1 + 864) = -1;
    v20 = *(unsigned int *)(a2 + 864);
    if ((_DWORD)v20 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC2A6B8[v20])(v33, a1 + 800, a2 + 800);
      *(_DWORD *)(a1 + 864) = v20;
    }
    v21 = *(_OWORD *)(a2 + 872);
    *(_OWORD *)(a1 + 884) = *(_OWORD *)(a2 + 884);
    *(_OWORD *)(a1 + 872) = v21;
    *(_BYTE *)(a1 + 904) = 0;
    *(_DWORD *)(a1 + 968) = -1;
    v22 = *(unsigned int *)(a2 + 968);
    if ((_DWORD)v22 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC2A6B8[v22])(v34, a1 + 904, a2 + 904);
      *(_DWORD *)(a1 + 968) = v22;
    }
    v23 = *(_OWORD *)(a2 + 976);
    *(_OWORD *)(a1 + 988) = *(_OWORD *)(a2 + 988);
    *(_OWORD *)(a1 + 976) = v23;
    *(_BYTE *)(a1 + 1008) = 0;
    *(_DWORD *)(a1 + 1072) = -1;
    v24 = *(unsigned int *)(a2 + 1072);
    if ((_DWORD)v24 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC2A6B8[v24])(v35, a1 + 1008, a2 + 1008);
      *(_DWORD *)(a1 + 1072) = v24;
    }
    v25 = *(_OWORD *)(a2 + 1080);
    *(_OWORD *)(a1 + 1092) = *(_OWORD *)(a2 + 1092);
    *(_OWORD *)(a1 + 1080) = v25;
    *(_BYTE *)(a1 + 1112) = 0;
    *(_DWORD *)(a1 + 1176) = -1;
    v26 = *(unsigned int *)(a2 + 1176);
    if ((_DWORD)v26 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC2A6B8[v26])(v36, a1 + 1112, a2 + 1112);
      *(_DWORD *)(a1 + 1176) = v26;
    }
    v27 = *(_OWORD *)(a2 + 1184);
    *(_OWORD *)(a1 + 1196) = *(_OWORD *)(a2 + 1196);
    *(_OWORD *)(a1 + 1184) = v27;
    *(_BYTE *)(a1 + 1216) = 0;
    *(_DWORD *)(a1 + 1280) = -1;
    v28 = *(unsigned int *)(a2 + 1280);
    if ((_DWORD)v28 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC2A6B8[v28])(v37, a1 + 1216, a2 + 1216);
      *(_DWORD *)(a1 + 1280) = v28;
    }
    *(_BYTE *)(a1 + 1288) = 1;
  }
  *(_QWORD *)(a1 + 1296) = *(_QWORD *)(a2 + 1296);
  *(_QWORD *)(a1 + 1304) = *(_QWORD *)(a2 + 1304);
  *(_QWORD *)(a1 + 1312) = *(_QWORD *)(a2 + 1312);
  *(_OWORD *)(a2 + 1304) = 0u;
  v29 = *(_OWORD *)(a2 + 1320);
  v30 = *(_OWORD *)(a2 + 1336);
  *(_QWORD *)(a1 + 1352) = *(_QWORD *)(a2 + 1352);
  *(_OWORD *)(a1 + 1320) = v29;
  *(_OWORD *)(a1 + 1336) = v30;
  return a1;
}

void sub_2232E9B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, unsigned int *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v21;
  void *v22;

  v21 = *(unsigned int *)(v15 + 1280);
  if ((_DWORD)v21 != -1)
    ((void (*)(char *, uint64_t))off_24EC2A648[v21])(&a15, v17);
  *(_DWORD *)(v15 + 1280) = -1;
  sub_22319A588(v16);
  sub_22319A588(v15 + 976);
  sub_22319A588(v19 + 112);
  sub_22319A588(v15 + 768);
  if (*(_BYTE *)(v15 + 1288))
    sub_22319AB9C((unsigned int *)(v15 + 760));
  sub_22319A650(a10);
  v22 = *v18;
  if (*v18)
  {
    *(_QWORD *)(v15 + 120) = v22;
    operator delete(v22);
  }
  sub_22319A750(a9);
  sub_22365B530(v15 + 24);
  _Unwind_Resume(a1);
}

uint64_t *sub_2232E9D2C(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      v9 = v4 + v7;
      result = (uint64_t *)memcpy((void *)(v6 + v7 - 472), (const void *)(v4 + v7 - 472), 0x120uLL);
      *(_QWORD *)(v8 - 176) = 0;
      *(_QWORD *)(v8 - 168) = 0;
      *(_QWORD *)(v8 - 184) = 0;
      *(_OWORD *)(v8 - 184) = *(_OWORD *)(v4 + v7 - 184);
      *(_QWORD *)(v8 - 168) = *(_QWORD *)(v4 + v7 - 168);
      *(_QWORD *)(v9 - 184) = 0;
      *(_QWORD *)(v9 - 176) = 0;
      *(_QWORD *)(v9 - 168) = 0;
      v10 = *(_QWORD *)(v4 + v7 - 115);
      v12 = *(_OWORD *)(v4 + v7 - 144);
      v11 = *(_OWORD *)(v4 + v7 - 128);
      *(_OWORD *)(v8 - 160) = *(_OWORD *)(v4 + v7 - 160);
      *(_OWORD *)(v8 - 144) = v12;
      *(_OWORD *)(v8 - 128) = v11;
      *(_QWORD *)(v8 - 115) = v10;
      *(_BYTE *)(v8 - 104) = 0;
      v13 = (_QWORD *)(v6 + v7 - 104);
      *(_BYTE *)(v8 - 80) = 0;
      if (*(_BYTE *)(v4 + v7 - 80))
      {
        *v13 = 0;
        *(_QWORD *)(v8 - 96) = 0;
        *(_QWORD *)(v8 - 88) = 0;
        *(_OWORD *)v13 = *(_OWORD *)(v9 - 104);
        *(_QWORD *)(v8 - 88) = *(_QWORD *)(v9 - 88);
        *(_QWORD *)(v9 - 104) = 0;
        *(_QWORD *)(v9 - 96) = 0;
        *(_QWORD *)(v9 - 88) = 0;
        *(_BYTE *)(v8 - 80) = 1;
      }
      *(_BYTE *)(v8 - 72) = 0;
      *(_BYTE *)(v8 - 48) = 0;
      if (*(_BYTE *)(v9 - 48))
      {
        v14 = v4 + v7;
        *(_QWORD *)(v8 - 72) = 0;
        *(_QWORD *)(v8 - 64) = 0;
        *(_QWORD *)(v8 - 56) = 0;
        *(_OWORD *)(v8 - 72) = *(_OWORD *)(v4 + v7 - 72);
        *(_QWORD *)(v6 + v7 - 56) = *(_QWORD *)(v4 + v7 - 56);
        *(_QWORD *)(v14 - 72) = 0;
        *(_QWORD *)(v14 - 64) = 0;
        *(_QWORD *)(v14 - 56) = 0;
        *(_BYTE *)(v8 - 48) = 1;
      }
      v15 = v6 + v7;
      *(_BYTE *)(v6 + v7 - 40) = 0;
      *(_BYTE *)(v6 + v7 - 16) = 0;
      v16 = v4 + v7;
      if (*(_BYTE *)(v4 + v7 - 16))
      {
        *(_QWORD *)(v6 + v7 - 40) = 0;
        *(_QWORD *)(v6 + v7 - 32) = 0;
        *(_QWORD *)(v6 + v7 - 24) = 0;
        *(_OWORD *)(v15 - 40) = *(_OWORD *)(v16 - 40);
        *(_QWORD *)(v15 - 24) = *(_QWORD *)(v16 - 24);
        *(_QWORD *)(v16 - 40) = 0;
        *(_QWORD *)(v16 - 32) = 0;
        *(_QWORD *)(v16 - 24) = 0;
        *(_BYTE *)(v15 - 16) = 1;
      }
      *(_WORD *)(v15 - 8) = *(_WORD *)(v16 - 8);
      v7 -= 472;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v17 = *v3;
  *v3 = v6;
  a2[1] = v17;
  v18 = v3[1];
  v3[1] = a2[2];
  a2[2] = v18;
  v19 = v3[2];
  v3[2] = a2[3];
  a2[3] = v19;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2232E9EE8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = v4;
  v5 = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = v5;
  v6 = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  if (*(_BYTE *)(a2 + 216))
  {
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    v9 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v9;
    v10 = *(_OWORD *)(a2 + 152);
    v11 = *(_OWORD *)(a2 + 168);
    v12 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = v12;
    *(_OWORD *)(a1 + 168) = v11;
    *(_OWORD *)(a1 + 152) = v10;
    *(_BYTE *)(a1 + 216) = 1;
  }
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 240);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  if (*(_BYTE *)(a2 + 272))
  {
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 256);
    *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 264);
    *(_BYTE *)(a1 + 280) = 1;
  }
  sub_2232EA184((char ***)(a2 + 280), a1 + 288);
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  if (*(_BYTE *)(a2 + 320))
  {
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 312);
    *(_BYTE *)(a1 + 328) = 1;
  }
  v13 = (_OWORD *)(a1 + 332);
  if (*(_BYTE *)(a2 + 356))
  {
    v14 = *(_OWORD *)(a2 + 340);
    *v13 = *(_OWORD *)(a2 + 324);
    *(_OWORD *)(a1 + 348) = v14;
    *(_BYTE *)(a1 + 364) = 1;
    v15 = a1 + 368;
    *(_BYTE *)(a1 + 368) = 0;
    *(_BYTE *)(a1 + 392) = 0;
    if (*(_BYTE *)(a2 + 384))
      goto LABEL_9;
  }
  else
  {
    *(_BYTE *)v13 = 0;
    *(_BYTE *)(a1 + 364) = 0;
    v15 = a1 + 368;
    *(_BYTE *)(a1 + 368) = 0;
    *(_BYTE *)(a1 + 392) = 0;
    if (*(_BYTE *)(a2 + 384))
    {
LABEL_9:
      sub_2232EA46C((void ***)(a2 + 360), v15);
      *(_BYTE *)(a1 + 392) = 1;
      if (!*(_BYTE *)(a2 + 416))
        goto LABEL_10;
LABEL_14:
      sub_2232EA278((char ***)(a2 + 392), (uint64_t)&v17);
      *(_OWORD *)(a1 + 400) = v17;
      *(_QWORD *)(a1 + 416) = v18;
      *(_BYTE *)(a1 + 424) = 1;
      if (!*(_BYTE *)(a2 + 448))
        goto LABEL_11;
LABEL_15:
      sub_2232EA344((void ****)(a2 + 424), (uint64_t)&v17);
      *(_OWORD *)(a1 + 432) = v17;
      *(_QWORD *)(a1 + 448) = v18;
      *(_BYTE *)(a1 + 456) = 1;
      goto LABEL_16;
    }
  }
  if (*(_BYTE *)(a2 + 416))
    goto LABEL_14;
LABEL_10:
  *(_BYTE *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  if (*(_BYTE *)(a2 + 448))
    goto LABEL_15;
LABEL_11:
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 456) = 0;
LABEL_16:
  *(_WORD *)(a1 + 464) = *(_WORD *)(a2 + 456);
  return a1;
}

void sub_2232EA12C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  if (*(_BYTE *)(v1 + 424))
  {
    v5 = *(void **)(v1 + 400);
    if (v5)
    {
      *(_QWORD *)(v1 + 408) = v5;
      operator delete(v5);
    }
  }
  if (*(_BYTE *)(v1 + 392))
  {
    v6 = *v3;
    if (*v3)
    {
      *(_QWORD *)(v1 + 376) = v6;
      operator delete(v6);
    }
  }
  v7 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 296) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

char ***sub_2232EA184@<X0>(char ***result@<X0>, uint64_t a2@<X8>)
{
  char **v3;
  char **v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  char **v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = *result;
  v3 = result[1];
  v9 = 0;
  v8 = 0uLL;
  v5 = (char *)v3 - (char *)v4;
  if (v3 == v4)
  {
    v7 = 0;
    v6 = 0uLL;
  }
  else
  {
    if (v5 < 0)
      sub_22316E078();
    *(_QWORD *)&v8 = operator new((char *)v3 - (char *)v4);
    *((_QWORD *)&v8 + 1) = v8;
    v9 = v8 + 16 * (v5 >> 4);
    v10 = (char **)&v8;
    do
    {
      v11 = *(_OWORD *)v4;
      result = sub_2232E9564(&v10, &v11);
      v4 += 2;
    }
    while (v4 != v3);
    v6 = v8;
    v7 = v9;
  }
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_2232EA258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char ***sub_2232EA278@<X0>(char ***result@<X0>, uint64_t a2@<X8>)
{
  char **v3;
  char **v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  char **v11;

  v4 = *result;
  v3 = result[1];
  v9 = 0;
  v8 = 0uLL;
  v5 = (char *)v3 - (char *)v4;
  if (v3 == v4)
  {
    v7 = 0;
    v6 = 0uLL;
  }
  else
  {
    if (v5 < 0)
      sub_22316E078();
    *(_QWORD *)&v8 = operator new((char *)v3 - (char *)v4);
    *((_QWORD *)&v8 + 1) = v8;
    v9 = v8 + 16 * (v5 >> 4);
    v11 = (char **)&v8;
    do
    {
      v10 = *(_OWORD *)v4;
      result = sub_2232E9564(&v11, &v10);
      v4 += 2;
    }
    while (v4 != v3);
    v6 = v8;
    v7 = v9;
  }
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_2232EA324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2232EA344@<D0>(void ****a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void ***v5;
  void ***i;
  uint64_t v7;
  double result;
  __int128 v9;
  unint64_t v10;
  void *__p[2];
  uint64_t v12;

  v4 = a1[1] - *a1;
  v10 = 0;
  v9 = 0uLL;
  sub_2232EA6AC((uint64_t)&v9, 0xAAAAAAAAAAAAAAABLL * v4);
  v5 = *a1;
  for (i = a1[1]; v5 != i; v5 += 3)
  {
    while (1)
    {
      sub_2232EA7D0(v5, (uint64_t)__p);
      v7 = *((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1) >= v10)
        break;
      **((_QWORD **)&v9 + 1) = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_OWORD *)v7 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 16) = v12;
      *((_QWORD *)&v9 + 1) = v7 + 24;
      v5 += 3;
      if (v5 == i)
        goto LABEL_8;
    }
    *((_QWORD *)&v9 + 1) = sub_2232EA89C((char **)&v9, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
LABEL_8:
  result = *(double *)&v9;
  *(_OWORD *)a2 = v9;
  *(_QWORD *)(a2 + 16) = v10;
  return result;
}

void sub_2232EA430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  sub_22317C838((void **)&a9);
  _Unwind_Resume(a1);
}

void ***sub_2232EA46C@<X0>(void ***result@<X0>, uint64_t a2@<X8>)
{
  void **v3;
  void **v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  void **v11;

  v4 = *result;
  v3 = result[1];
  v9 = 0;
  v8 = 0uLL;
  v5 = (char *)v3 - (char *)v4;
  if (v3 == v4)
  {
    v7 = 0;
    v6 = 0uLL;
  }
  else
  {
    if (v5 < 0)
      sub_22316E078();
    *(_QWORD *)&v8 = operator new((char *)v3 - (char *)v4);
    *((_QWORD *)&v8 + 1) = v8;
    v9 = v8 + 8 * (v5 >> 3);
    v11 = (void **)&v8;
    do
    {
      v10 = *v4;
      result = sub_2232EA538(&v11, &v10);
      ++v4;
    }
    while (v4 != v3);
    v6 = v8;
    v7 = v9;
  }
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_2232EA518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ***sub_2232EA538(void ***a1, _QWORD *a2)
{
  void **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = (char *)(*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = (char *)*v4;
    v10 = v6 - (_BYTE *)*v4;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      sub_22316E078();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_223174E94();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_28;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_28;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v7 = &v6[-v19];
      v16 = (_QWORD *)((char *)v16 - v19);
      v20 = &v15[8 * v11 - 16];
      v21 = (__int128 *)(v6 - 16);
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v24 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
      v7 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v8;
    v4[2] = &v15[8 * v14];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v8 = v6 + 8;
  }
  v4[1] = v8;
  return a1;
}

void sub_2232EA6AC(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v4 = *(char **)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        v4 -= 24;
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v4 + 2);
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11;
        do
        {
          v14 = (void *)*((_QWORD *)v12 - 3);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *((_QWORD *)v11 - 2) = v13;
            operator delete(v13);
          }
          v11 = v12;
        }
        while (v12 != v2);
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void ***sub_2232EA7D0@<X0>(void ***result@<X0>, uint64_t a2@<X8>)
{
  void **v3;
  void **v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  void **v11;

  v4 = *result;
  v3 = result[1];
  v9 = 0;
  v8 = 0uLL;
  v5 = (char *)v3 - (char *)v4;
  if (v3 == v4)
  {
    v7 = 0;
    v6 = 0uLL;
  }
  else
  {
    if (v5 < 0)
      sub_22316E078();
    *(_QWORD *)&v8 = operator new((char *)v3 - (char *)v4);
    *((_QWORD *)&v8 + 1) = v8;
    v9 = v8 + 8 * (v5 >> 3);
    v11 = (void **)&v8;
    do
    {
      v10 = *v4;
      result = sub_2232EA538(&v11, &v10);
      ++v4;
    }
    while (v4 != v3);
    v6 = v8;
    v7 = v9;
  }
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_2232EA87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_2232EA89C(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v4;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_223174E94();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v3];
  v10 = &v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *(_OWORD *)(v13 - 24);
      v13 -= 24;
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 24;
      *((_QWORD *)v9 + 2) = *((_QWORD *)v13 + 2);
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v15 != v13)
    {
      v16 = v15;
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v15 - 2) = v17;
          operator delete(v17);
        }
        v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

uint64_t sub_2232EA9E8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_2232EAA38(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232EAA98@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC2A6D8;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_2232EAB38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_2232EAB5C()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

void sub_2232EAB98()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

uint64_t sub_2232EABD4()
{
  return 1;
}

uint64_t sub_2232EABE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_223198474();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_2232EAC5C()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232EAC70(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC2A750;
  result[1] = v3;
  return result;
}

uint64_t sub_2232EACA4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC2A750;
  a2[1] = v2;
  return result;
}

void sub_2232EACC0(uint64_t a1, _BYTE *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t j;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t k;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t m;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t n;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = v3[154];
  for (i = v3[155]; v4 != i; v4 += 32)
  {
    v34 = 0;
    v35 = 0;
    v6 = *(_QWORD *)(v4 + 24);
    if (!v6)
      sub_223198474();
    (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t *))(*(_QWORD *)v6 + 48))(v6, a2, a2 + 8, &v34);
    v7 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  if (a2[72])
  {
    v10 = v3[166];
    for (j = v3[167]; v10 != j; v10 += 32)
    {
      v34 = 0;
      v35 = 0;
      if (!a2[72])
        sub_22324A974();
      v12 = *(_QWORD *)(v10 + 24);
      if (!v12)
        sub_223198474();
      (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t *))(*(_QWORD *)v12 + 48))(v12, a2, a2 + 40, &v34);
      v13 = v35;
      if (v35)
      {
        v14 = (unint64_t *)&v35->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
  }
  if (a2[112])
  {
    v16 = v3[169];
    for (k = v3[170]; v16 != k; v16 += 32)
    {
      v34 = 0;
      v35 = 0;
      if (!a2[112])
        sub_22324A974();
      v18 = *(_QWORD *)(v16 + 24);
      if (!v18)
        sub_223198474();
      (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, a2, a2 + 80, &v34);
      v19 = v35;
      if (v35)
      {
        v20 = (unint64_t *)&v35->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
  if (a2[184])
  {
    v22 = v3[172];
    for (m = v3[173]; v22 != m; v22 += 32)
    {
      v34 = 0;
      v35 = 0;
      if (!a2[184])
        sub_22324A974();
      v24 = *(_QWORD *)(v22 + 24);
      if (!v24)
        sub_223198474();
      (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t *))(*(_QWORD *)v24 + 48))(v24, a2, a2 + 120, &v34);
      v25 = v35;
      if (v35)
      {
        v26 = (unint64_t *)&v35->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
  }
  if (a2[280])
  {
    v28 = v3[175];
    for (n = v3[176]; v28 != n; v28 += 32)
    {
      v34 = 0;
      v35 = 0;
      if (!a2[280])
        sub_22324A974();
      v30 = *(_QWORD *)(v28 + 24);
      if (!v30)
        sub_223198474();
      (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, a2, a2 + 192, &v34);
      v31 = v35;
      if (v35)
      {
        v32 = (unint64_t *)&v35->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
    }
  }
}

void sub_2232EB014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2232EB0FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232EB168()
{
  return &unk_24EC2A7C0;
}

uint64_t sub_2232EB174(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_2232EB1C4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232EB224@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC2A7E0;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_2232EB2C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_2232EB2E8()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

void sub_2232EB324()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

uint64_t sub_2232EB360()
{
  return 1;
}

uint64_t sub_2232EB36C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_223198474();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_2232EB3E8()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232EB3FC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC2A858;
  return result;
}

void sub_2232EB420(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC2A858;
}

void sub_2232EB438(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v6 = 0;
  v7 = 0;
  v2 = *(_QWORD *)(a2 + 24);
  if (!v2)
    sub_223198474();
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, a2 + 32, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2232EB4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2232EB50C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232EB578()
{
  return &unk_24EC2A8C8;
}

uint64_t sub_2232EB584(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_2232EB5D4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232EB634@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC2A8E8;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_2232EB6D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_2232EB6F8()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

void sub_2232EB734()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

uint64_t sub_2232EB770()
{
  return 1;
}

uint64_t sub_2232EB77C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_223198474();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_2232EB7F8()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232EB80C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC2A960;
  return result;
}

void sub_2232EB830(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC2A960;
}

void sub_2232EB848(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v6 = 0;
  v7 = 0;
  v2 = *(_QWORD *)(a2 + 24);
  if (!v2)
    sub_223198474();
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, a2 + 32, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2232EB8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2232EB91C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_2"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232EB988()
{
  return &unk_24EC2A9D0;
}

uint64_t sub_2232EB994(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_2232EB9E4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232EBA44@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC2A9F0;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_2232EBAE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_2232EBB08()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

void sub_2232EBB44()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

uint64_t sub_2232EBB80()
{
  return 1;
}

uint64_t sub_2232EBB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_223198474();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_2232EBC08()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232EBC1C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC2AA68;
  return result;
}

void sub_2232EBC40(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC2AA68;
}

void sub_2232EBC58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v6 = 0;
  v7 = 0;
  v2 = *(_QWORD *)(a2 + 24);
  if (!v2)
    sub_223198474();
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, a2 + 32, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2232EBCE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2232EBD2C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_3"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232EBD98()
{
  return &unk_24EC2AAD8;
}

uint64_t sub_2232EBDA4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_2232EBDF4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232EBE54@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC2AAF8;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_2232EBEF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_2232EBF18()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

void sub_2232EBF54()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

uint64_t sub_2232EBF90()
{
  return 1;
}

uint64_t sub_2232EBF9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_223198474();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_2232EC018()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232EC02C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC2AB70;
  return result;
}

void sub_2232EC050(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC2AB70;
}

void sub_2232EC068(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v6 = 0;
  v7 = 0;
  v2 = *(_QWORD *)(a2 + 24);
  if (!v2)
    sub_223198474();
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, a2 + 32, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2232EC0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2232EC13C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_4")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_4"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232EC1A8()
{
  return &unk_24EC2ABE0;
}

uint64_t sub_2232EC1B4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_2232EC204(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232EC264@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC2AC00;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_2232EC304(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_2232EC328()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

void sub_2232EC364()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

uint64_t sub_2232EC3A0()
{
  return 1;
}

uint64_t sub_2232EC3AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_223198474();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_2232EC428()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232EC43C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC2AC78;
  return result;
}

void sub_2232EC460(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC2AC78;
}

void sub_2232EC478(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = (std::__shared_weak_count *)a2[5];
  v9 = a2[4];
  v10 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = a2[3];
  if (!v5)
    sub_223198474();
  (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v5 + 48))(v5, &v9, a2 + 6);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2232EC524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2232EC568(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_5")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_5" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_5"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d7recon3d3r3d7Session17InitializeMeshingEvE3$_5" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232EC5D4()
{
  return &unk_24EC2ACE8;
}

uint64_t sub_2232EC5E0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_2232EC630(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232EC690@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC2AD08;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_2232EC730(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_2232EC754()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

void sub_2232EC790()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

uint64_t sub_2232EC7CC()
{
  return 1;
}

uint64_t sub_2232EC7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_223198474();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_2232EC854()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232EC868(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC2AD70;
  result[1] = v3;
  return result;
}

uint64_t sub_2232EC89C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC2AD70;
  a2[1] = v2;
  return result;
}

void sub_2232EC8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unsigned __int8 v11;
  const void *v12;
  size_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  void **v35;
  uint64_t v36;
  const char *v37;
  size_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  const char *v41;
  size_t v42;
  _BYTE *v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  size_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  size_t v55;
  size_t v56;
  _BYTE *v57;
  void *v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  char *v67;
  char *shared_owners;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void **v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *exception;
  _QWORD *v89;
  int v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  const char *v93;
  uint64_t v94;
  void *v95[2];
  char v96;
  double v97[3];
  int v98;
  const char *v99;
  int v100;
  const char *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  _BYTE v105[2];
  _BYTE object[24];
  unint64_t v107;
  char v108;
  void *__p[2];
  unint64_t v110;
  char v111;
  _BYTE v112[15];
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 120))
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(v3 + 1208);
    v5 = *(_QWORD *)a2;
    v6 = *(std::__shared_weak_count **)(a2 + 8);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      v9 = *(_QWORD **)(v4 + 56);
      *(_QWORD *)&object[8] = v6;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    else
    {
      v9 = *(_QWORD **)(v4 + 56);
      *(_QWORD *)&object[8] = 0;
    }
    *(_QWORD *)object = v5;
    sub_2236026E4(v9, (uint64_t *)object);
    if (!v6)
      goto LABEL_19;
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v17 = *(_QWORD *)a2;
      if (*(_BYTE *)(*(_QWORD *)a2 + 1832))
      {
LABEL_20:
        v18 = (double)*(uint64_t *)(v17 + 1240);
        v19 = *(_QWORD *)(v3 + 1280);
        v20 = *(_QWORD *)(v3 + 1288);
        if (v19 != v20)
          goto LABEL_23;
        goto LABEL_33;
      }
    }
    else
    {
LABEL_19:
      v17 = *(_QWORD *)a2;
      if (*(_BYTE *)(*(_QWORD *)a2 + 1832))
        goto LABEL_20;
    }
    v18 = 0.0;
    v19 = *(_QWORD *)(v3 + 1280);
    v20 = *(_QWORD *)(v3 + 1288);
    if (v19 != v20)
    {
      do
      {
LABEL_23:
        *(_QWORD *)object = 0;
        *(_QWORD *)&object[8] = 0;
        v97[0] = v18 / 1000000000.0;
        v21 = *(_QWORD *)(v19 + 24);
        if (!v21)
          sub_223198474();
        (*(void (**)(uint64_t, double *, uint64_t, _BYTE *))(*(_QWORD *)v21 + 48))(v21, v97, *(_QWORD *)a2 + 1872, object);
        v22 = *(std::__shared_weak_count **)&object[8];
        if (*(_QWORD *)&object[8])
        {
          v23 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v19 += 32;
      }
      while (v19 != v20);
      v17 = *(_QWORD *)a2;
      if (!*(_BYTE *)(*(_QWORD *)a2 + 2152))
        return;
LABEL_34:
      if (*(_BYTE *)(v3 + 28))
      {
        if (*(_BYTE *)(v17 + 1832))
        {
LABEL_40:
          v25 = *(_QWORD *)(v3 + 1256);
          v26 = *(_QWORD *)(v3 + 1264);
          if (v25 != v26)
          {
            v27 = v18 / 1000000000.0;
            do
            {
              *(_QWORD *)object = 0;
              *(_QWORD *)&object[8] = 0;
              v97[0] = v27;
              v28 = *(_QWORD *)(v25 + 24);
              if (!v28)
                sub_223198474();
              (*(void (**)(uint64_t, double *, uint64_t, _BYTE *))(*(_QWORD *)v28 + 48))(v28, v97, *(_QWORD *)a2 + 2072, object);
              v29 = *(std::__shared_weak_count **)&object[8];
              if (*(_QWORD *)&object[8])
              {
                v30 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
                do
                  v31 = __ldaxr(v30);
                while (__stlxr(v31 - 1, v30));
                if (!v31)
                {
                  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                  std::__shared_weak_count::__release_weak(v29);
                }
              }
              v25 += 32;
            }
            while (v25 != v26);
          }
          return;
        }
      }
      else
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp", 383, (uint64_t)"config_.common.monitoring.output_per_frame_monitoring_result", 60, (uint64_t)"Received a monitoring result from keyframing when not set up to.", 64, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        if (*(_BYTE *)(*(_QWORD *)a2 + 1832))
          goto LABEL_40;
      }
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Session.cpp", 385, (uint64_t)"result->input_frame.has_value()", 31, (uint64_t)"Expected input frame for monitoring result creation", 51, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      goto LABEL_40;
    }
LABEL_33:
    if (!*(_BYTE *)(v17 + 2152))
      return;
    goto LABEL_34;
  }
  v11 = atomic_load((unsigned __int8 *)&qword_2557892F0);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
  {
    __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
    __cxa_guard_release(&qword_2557892F0);
  }
  sub_2232ED888(object);
  if (*(char *)(*(_QWORD *)object + 39) < 0)
  {
    v12 = *(const void **)(*(_QWORD *)object + 16);
    v13 = *(_QWORD *)(*(_QWORD *)object + 24);
  }
  else
  {
    v12 = (const void *)(*(_QWORD *)object + 16);
    v13 = *(unsigned __int8 *)(*(_QWORD *)object + 39);
  }
  sub_223195728((uint64_t)&unk_255789280, v12, v13, "Keyframing processing failed: %s", 0x20uLL);
  sub_2232ED97C(&v104);
  if (**(int **)(v104 + 56) <= 5)
  {
    v32 = *(unsigned __int8 *)(v104 + 72);
    v33 = sub_22322F254(v104, "OSLogSurrogateAppender", 1, 0);
    v34 = v33;
    if (v32 || v33)
    {
      *(_QWORD *)&v97[0] = &v104;
      *(std::chrono::steady_clock::time_point *)&v97[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
      *(std::chrono::system_clock::time_point *)&v97[2] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
      v98 = 5;
      v99 = "unknown file";
      v100 = 364;
      v102 = 0;
      v103 = 0;
      v101 = "unknown function";
      if (*(_BYTE *)(a2 + 120))
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24EC1FCC0;
        __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
      }
      LODWORD(v107) = 0;
      sub_2232EDA70((uint64_t)v112, (std::string::size_type)object, a2);
      if ((_DWORD)v107 == -1)
        sub_22316DD70();
      *(_QWORD *)v112 = v105;
      ((void (*)(void **__return_ptr, _BYTE *, _BYTE *))off_24EC2AE10[v107])(v95, v112, object);
      if ((_DWORD)v107 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_24EC2ADF8[v107])(v112, object);
      if (v96 >= 0)
        v35 = v95;
      else
        v35 = (void **)v95[0];
      v36 = **(_QWORD **)&v97[0];
      v37 = (const char *)(**(_QWORD **)&v97[0] + 16);
      v93 = v37;
      v94 = **(_QWORD **)&v97[0];
      if (*(char *)(**(_QWORD **)&v97[0] + 39) < 0)
      {
        v37 = *(const char **)(v36 + 16);
        v38 = *(_QWORD *)(v36 + 24);
        v40 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v40 & 1) != 0)
          goto LABEL_64;
      }
      else
      {
        v38 = *(unsigned __int8 *)(**(_QWORD **)&v97[0] + 39);
        v39 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v39 & 1) != 0)
          goto LABEL_64;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        if ((_BYTE)v107)
        {
          xmmword_255788F40 = *(_OWORD *)object;
          unk_255788F50 = *(_QWORD *)&object[16];
        }
        else
        {
          byte_255788F57 = 14;
          strcpy((char *)&xmmword_255788F40, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_64:
      if (byte_255788F57 >= 0)
        v41 = (const char *)&xmmword_255788F40;
      else
        v41 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v42 = byte_255788F57;
      else
        v42 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v41, v37);
      v43 = &object[8];
      if (v42 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v42 >= 0x17)
      {
        v44 = v35;
        v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17)
          v45 = v42 | 7;
        v46 = v45 + 1;
        v43 = operator new(v45 + 1);
        *(_QWORD *)&object[16] = v42;
        v107 = v46 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v43;
        v35 = v44;
      }
      else
      {
        HIBYTE(v107) = v42;
        if (!v42)
        {
LABEL_78:
          v43[v42] = 0;
          v108 = 1;
          v47 = __p;
          if (v38 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v38 >= 0x17)
          {
            v48 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v38 | 7) != 0x17)
              v48 = v38 | 7;
            v49 = v48 + 1;
            v47 = operator new(v48 + 1);
            __p[1] = (void *)v38;
            v110 = v49 | 0x8000000000000000;
            __p[0] = v47;
          }
          else
          {
            HIBYTE(v110) = v38;
            if (!v38)
            {
LABEL_86:
              *((_BYTE *)v47 + v38) = 0;
              v111 = 1;
              v50 = *(NSObject **)object;
              if (SHIBYTE(v110) < 0)
                operator delete(__p[0]);
              if (v108 && SHIBYTE(v107) < 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (!v34 || !*(_QWORD *)(v34 + 24))
              {
                os_log_type_enabled(v50, OS_LOG_TYPE_ERROR);
                *(_DWORD *)object = 136315138;
                *(_QWORD *)&object[4] = v35;
                v58 = (void *)_os_log_send_and_compose_impl();
                if (v58)
                  free(v58);
                goto LABEL_131;
              }
              v51 = _os_log_pack_size();
              v52 = (std::__shared_weak_count_vtbl *)operator new(v51, (std::align_val_t)8uLL);
              v53 = (std::__shared_weak_count *)operator new();
              v53->__shared_owners_ = 0;
              v54 = (unint64_t *)&v53->__shared_owners_;
              v53->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v53->__shared_weak_owners_ = 0;
              v53[1].__vftable = v52;
              v91 = v52;
              v55 = strlen((const char *)v35);
              v92 = v53;
              if (v55 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v56 = v55;
              v90 = v32;
              if (v55 >= 0x17)
              {
                v59 = v35;
                v60 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v55 | 7) != 0x17)
                  v60 = v55 | 7;
                v61 = v60 + 1;
                v57 = operator new(v60 + 1);
                *(_QWORD *)&object[8] = v56;
                *(_QWORD *)&object[16] = v61 | 0x8000000000000000;
                *(_QWORD *)object = v57;
                v35 = v59;
              }
              else
              {
                object[23] = v55;
                v57 = object;
                if (!v55)
                {
LABEL_105:
                  v57[v56] = 0;
                  v62 = *(_QWORD *)object;
                  *(_QWORD *)v112 = *(_QWORD *)&object[8];
                  *(_QWORD *)&v112[7] = *(_QWORD *)&object[15];
                  v63 = object[23];
                  v64 = operator new(0x38uLL);
                  v65 = (std::__shared_weak_count *)v64;
                  v64[1] = 0;
                  v66 = v64 + 1;
                  v64[3] = off_24EC1FA48;
                  v67 = (char *)(v64 + 3);
                  v64[2] = 0;
                  v64[4] = v62;
                  shared_owners = (char *)(v64 + 4);
                  *v64 = &off_24EC1F9F8;
                  v64[5] = *(_QWORD *)v112;
                  *(_QWORD *)((char *)v64 + 47) = *(_QWORD *)&v112[7];
                  *((_BYTE *)v64 + 55) = v63;
                  do
                    v69 = __ldxr(v54);
                  while (__stxr(v69 + 1, v54));
                  v32 = v90;
                  do
                    v70 = __ldxr(v66);
                  while (__stxr(v70 + 1, v66));
                  do
                    v71 = __ldaxr(v66);
                  while (__stlxr(v71 - 1, v66));
                  if (!v71)
                  {
                    (*(void (**)(_QWORD *))(*v64 + 16))(v64);
                    std::__shared_weak_count::__release_weak(v65);
                  }
                  do
                    v72 = __ldaxr(v54);
                  while (__stlxr(v72 - 1, v54));
                  if (!v72)
                  {
                    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                    std::__shared_weak_count::__release_weak(v92);
                  }
                  if (SHIBYTE(v65[2].__vftable) < 0)
                    shared_owners = (char *)v65[1].__shared_owners_;
                  v73 = _os_log_pack_fill();
                  *(_DWORD *)v73 = 136315138;
                  *(_QWORD *)(v73 + 4) = shared_owners;
                  v74 = operator new();
                  v75 = *(unsigned __int8 *)(v94 + 39);
                  v76 = v93;
                  if ((v75 & 0x80u) != 0)
                  {
                    v76 = *(const char **)(v94 + 16);
                    v75 = *(_QWORD *)(v94 + 24);
                  }
                  *(_QWORD *)v74 = v91;
                  *(_QWORD *)(v74 + 8) = v91;
                  *(_QWORD *)(v74 + 16) = v92;
                  *(_QWORD *)(v74 + 24) = v67;
                  *(_QWORD *)(v74 + 32) = v65;
                  *(_QWORD *)(v74 + 40) = v76;
                  *(_QWORD *)(v74 + 48) = v75;
                  *(_BYTE *)(v74 + 56) = 16;
                  *(_QWORD *)object = v74;
                  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v34 + 24) + 40))(*(_QWORD *)(v34 + 24), object);
                  v77 = *(_QWORD *)object;
                  *(_QWORD *)object = 0;
                  if (v77)
                  {
                    v78 = *(std::__shared_weak_count **)(v77 + 32);
                    if (v78)
                    {
                      v79 = (unint64_t *)&v78->__shared_owners_;
                      do
                        v80 = __ldaxr(v79);
                      while (__stlxr(v80 - 1, v79));
                      if (!v80)
                      {
                        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                        std::__shared_weak_count::__release_weak(v78);
                      }
                    }
                    v81 = *(std::__shared_weak_count **)(v77 + 16);
                    if (v81)
                    {
                      v82 = (unint64_t *)&v81->__shared_owners_;
                      do
                        v83 = __ldaxr(v82);
                      while (__stlxr(v83 - 1, v82));
                      if (!v83)
                      {
                        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                        std::__shared_weak_count::__release_weak(v81);
                      }
                    }
                    MEMORY[0x227684CE8](v77, 0x10F0C40B62ED6C6);
                  }
LABEL_131:
                  if (v96 < 0)
                    operator delete(v95[0]);
                  if (v32)
                  {
                    if (*(_BYTE *)(a2 + 120))
                    {
                      v89 = __cxa_allocate_exception(8uLL);
                      *v89 = &off_24EC1FCC0;
                      __cxa_throw(v89, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
                    }
                    LODWORD(v107) = 0;
                    sub_2232EDA70((uint64_t)v112, (std::string::size_type)object, a2);
                    if ((_DWORD)v107 == -1)
                      sub_22316DD70();
                    *(_QWORD *)v112 = v105;
                    ((void (*)(void **__return_ptr, _BYTE *, _BYTE *))off_24EC2AE10[v107])(v95, v112, object);
                    if ((_DWORD)v107 != -1)
                      ((void (*)(_BYTE *, _BYTE *))off_24EC2ADF8[v107])(v112, object);
                    v84 = v95;
                    if (v96 < 0)
                      v84 = (void **)v95[0];
                    sub_22322C138((uint64_t)v97, "Keyframing processing failed: %s", (const char *)v84);
                    if (v96 < 0)
                      operator delete(v95[0]);
                    sub_223182C08((uint64_t)v97);
                  }
                  sub_223182C08((uint64_t)v97);
                  v85 = v103;
                  if (v103)
                  {
                    v86 = (unint64_t *)&v103->__shared_owners_;
                    do
                      v87 = __ldaxr(v86);
                    while (__stlxr(v87 - 1, v86));
                    if (!v87)
                    {
                      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                      std::__shared_weak_count::__release_weak(v85);
                    }
                  }
                  return;
                }
              }
              memcpy(v57, v35, v56);
              goto LABEL_105;
            }
          }
          memmove(v47, v37, v38);
          goto LABEL_86;
        }
      }
      memmove(v43, v41, v42);
      goto LABEL_78;
    }
  }
}

void sub_2232ED4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *object,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;

  __cxa_guard_abort(&qword_255788F58);
  if (a22 < 0)
    operator delete(__p);
  sub_223182C08((uint64_t)&a23);
  v45 = a31;
  if (a31)
  {
    p_shared_owners = (unint64_t *)&a31->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2232ED810(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d7recon3d3r3d7Session20InitializeKeyframingEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d7recon3d3r3d7Session20InitializeKeyframingEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d7recon3d3r3d7Session20InitializeKeyframingEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d7recon3d3r3d7Session20InitializeKeyframingEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232ED87C()
{
  return &unk_24EC2AE28;
}

void sub_2232ED888(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CAB48);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAB48))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CAB40);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CAB48);
  }
  *a1 = qword_2540CAB40;
}

void sub_2232ED924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CAB48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CAB48);
  _Unwind_Resume(a1);
}

void sub_2232ED97C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CAB58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAB58))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CAB50);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CAB58);
  }
  *a1 = qword_2540CAB50;
}

void sub_2232EDA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CAB58);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CAB58);
  _Unwind_Resume(a1);
}

void sub_2232EDA70(uint64_t a1, std::string::size_type a2, uint64_t a3)
{
  uint64_t v5;
  std::string *p_p;
  std::string::size_type size;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  std::string::size_type v19;
  uint64_t v20;
  void *__dst[2];
  unint64_t v22;
  std::string __p;
  void **v24;
  void **v25;
  std::string *v26;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v26 = (std::string *)v5;
  sub_22456A158(a3, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  sub_2231813E8((_QWORD *)(v5 + 16), (uint64_t)p_p, size);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = *(_DWORD *)(v5 + 120);
    if ((v8 & 0x10) == 0)
      goto LABEL_9;
LABEL_12:
    v11 = *(_QWORD *)(v5 + 112);
    v12 = *(_QWORD *)(v5 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v5 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v5 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
    goto LABEL_15;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v8 = *(_DWORD *)(v5 + 120);
  if ((v8 & 0x10) != 0)
    goto LABEL_12;
LABEL_9:
  if ((v8 & 8) == 0)
  {
    v9 = 0;
    HIBYTE(v22) = 0;
    v10 = __dst;
    goto LABEL_22;
  }
  v13 = *(const void **)(v5 + 40);
  v9 = *(_QWORD *)(v5 + 56) - (_QWORD)v13;
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
    sub_22316DBC0();
LABEL_15:
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_21;
  }
  HIBYTE(v22) = v9;
  v10 = __dst;
  if (v9)
LABEL_21:
    memmove(v10, v13, v9);
LABEL_22:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v26;
  if (v26)
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    v26->__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(std::string::size_type *)((char *)v16->__r_.__value_.__r.__words + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    v16[1].__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB848] + 16;
    v16->__r_.__value_.__r.__words[2] = v19;
    if (v16[4].__r_.__value_.__s.__data_[15] < 0)
      operator delete((void *)v16[3].__r_.__value_.__r.__words[2]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](&v16[5].__r_.__value_.__r.__words[1]);
    MEMORY[0x227684CE8](v16, 0x10B2C40EED050F3);
  }
  __p.__r_.__value_.__r.__words[0] = a2;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)__dst;
  __p.__r_.__value_.__r.__words[2] = a2;
  v24 = __dst;
  v25 = __dst;
  v20 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v20 == -1)
    sub_22316DD70();
  v26 = &__p;
  ((void (*)(std::string **, std::string::size_type))off_24EC2ADE0[v20])(&v26, a2);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
}

void sub_2232EDCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
  {
    operator delete(__p);
    sub_22456E764((uint64_t *)(v21 - 56));
    _Unwind_Resume(a1);
  }
  sub_22456E764((uint64_t *)(v21 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_2232EDD74(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_2232EDDC4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232EDE24@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC2AE48;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_2232EDEC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_2232EDEE8()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

void sub_2232EDF24()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

uint64_t sub_2232EDF60()
{
  return 1;
}

uint64_t sub_2232EDF6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_223198474();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_2232EDFE8()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232EDFFC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC2AEB0;
  result[1] = v3;
  return result;
}

uint64_t sub_2232EE030(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC2AEB0;
  a2[1] = v2;
  return result;
}

void sub_2232EE04C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned __int8 v11;
  const void *v12;
  size_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  void **v17;
  uint64_t v18;
  const char *v19;
  size_t v20;
  unsigned __int8 v21;
  const char *v22;
  size_t v23;
  _BYTE *v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  size_t v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  size_t v36;
  size_t v37;
  _BYTE *v38;
  void *v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  char *v48;
  char *shared_owners;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void **v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *exception;
  _QWORD *v70;
  int v71;
  std::__shared_weak_count_vtbl *v72;
  std::__shared_weak_count *v73;
  const char *v74;
  uint64_t v75;
  void *v76[2];
  char v77;
  _QWORD v78[3];
  int v79;
  const char *v80;
  int v81;
  const char *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  _BYTE v86[2];
  _BYTE object[24];
  unint64_t v88;
  char v89;
  void *__p[2];
  unint64_t v91;
  char v92;
  _BYTE v93[15];
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 120))
  {
    v3 = *(_QWORD **)a2;
    if (*(_QWORD *)a2)
    {
      v4 = *(_QWORD *)(a1 + 8);
      if (v3[1] != v3[2] || v3[4] != v3[5])
      {
        v5 = *(_QWORD *)(v4 + 1304);
        v6 = *(_QWORD *)(v4 + 1312);
        while (v5 != v6)
        {
          *(_QWORD *)object = 0;
          *(_QWORD *)&object[8] = 0;
          v7 = *(_QWORD *)(v5 + 24);
          if (!v7)
            sub_223198474();
          (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v7 + 48))(v7, *(_QWORD *)a2, object);
          v8 = *(std::__shared_weak_count **)&object[8];
          if (*(_QWORD *)&object[8])
          {
            v9 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 - 1, v9));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          v5 += 32;
        }
      }
    }
    return;
  }
  v11 = atomic_load((unsigned __int8 *)&qword_2557892F0);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
  {
    __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
    __cxa_guard_release(&qword_2557892F0);
  }
  sub_2232ED888(object);
  if (*(char *)(*(_QWORD *)object + 39) < 0)
  {
    v12 = *(const void **)(*(_QWORD *)object + 16);
    v13 = *(_QWORD *)(*(_QWORD *)object + 24);
  }
  else
  {
    v12 = (const void *)(*(_QWORD *)object + 16);
    v13 = *(unsigned __int8 *)(*(_QWORD *)object + 39);
  }
  sub_223195728((uint64_t)&unk_255789280, v12, v13, "Plane Detection failed: %s", 0x1AuLL);
  sub_2232ED97C(&v85);
  if (**(int **)(v85 + 56) <= 5)
  {
    v14 = *(unsigned __int8 *)(v85 + 72);
    v15 = sub_22322F254(v85, "OSLogSurrogateAppender", 1, 0);
    v16 = v15;
    if (v14 || v15)
    {
      v78[0] = &v85;
      v78[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v78[2] = std::chrono::system_clock::now().__d_.__rep_;
      v79 = 5;
      v80 = "unknown file";
      v81 = 402;
      v83 = 0;
      v84 = 0;
      v82 = "unknown function";
      if (*(_BYTE *)(a2 + 120))
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24EC1FCC0;
        __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
      }
      LODWORD(v88) = 0;
      sub_2232EDA70((uint64_t)v93, (std::string::size_type)object, a2);
      if ((_DWORD)v88 == -1)
        sub_22316DD70();
      *(_QWORD *)v93 = v86;
      ((void (*)(void **__return_ptr, _BYTE *, _BYTE *))off_24EC2AE10[v88])(v76, v93, object);
      if ((_DWORD)v88 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_24EC2ADF8[v88])(v93, object);
      if (v77 >= 0)
        v17 = v76;
      else
        v17 = (void **)v76[0];
      v18 = *(_QWORD *)v78[0];
      v19 = (const char *)(*(_QWORD *)v78[0] + 16);
      v74 = v19;
      if (*(char *)(*(_QWORD *)v78[0] + 39) < 0)
      {
        v19 = *(const char **)(v18 + 16);
        v20 = *(_QWORD *)(v18 + 24);
      }
      else
      {
        v20 = *(unsigned __int8 *)(*(_QWORD *)v78[0] + 39);
      }
      v75 = *(_QWORD *)v78[0];
      v21 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        if ((_BYTE)v88)
        {
          xmmword_255788F40 = *(_OWORD *)object;
          unk_255788F50 = *(_QWORD *)&object[16];
        }
        else
        {
          byte_255788F57 = 14;
          strcpy((char *)&xmmword_255788F40, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v22 = (const char *)&xmmword_255788F40;
      else
        v22 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v23 = byte_255788F57;
      else
        v23 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v22, v19);
      v24 = &object[8];
      if (v23 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v23 >= 0x17)
      {
        v25 = v17;
        v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17)
          v26 = v23 | 7;
        v27 = v26 + 1;
        v24 = operator new(v26 + 1);
        *(_QWORD *)&object[16] = v23;
        v88 = v27 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v24;
        v17 = v25;
      }
      else
      {
        HIBYTE(v88) = v23;
        if (!v23)
        {
LABEL_46:
          v24[v23] = 0;
          v89 = 1;
          v28 = __p;
          if (v20 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v20 >= 0x17)
          {
            v29 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v20 | 7) != 0x17)
              v29 = v20 | 7;
            v30 = v29 + 1;
            v28 = operator new(v29 + 1);
            __p[1] = (void *)v20;
            v91 = v30 | 0x8000000000000000;
            __p[0] = v28;
          }
          else
          {
            HIBYTE(v91) = v20;
            if (!v20)
            {
LABEL_54:
              *((_BYTE *)v28 + v20) = 0;
              v92 = 1;
              v31 = *(NSObject **)object;
              if (SHIBYTE(v91) < 0)
                operator delete(__p[0]);
              if (v89 && SHIBYTE(v88) < 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (!v16 || !*(_QWORD *)(v16 + 24))
              {
                os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
                *(_DWORD *)object = 136315138;
                *(_QWORD *)&object[4] = v17;
                v39 = (void *)_os_log_send_and_compose_impl();
                if (v39)
                  free(v39);
                goto LABEL_99;
              }
              v32 = _os_log_pack_size();
              v33 = (std::__shared_weak_count_vtbl *)operator new(v32, (std::align_val_t)8uLL);
              v34 = (std::__shared_weak_count *)operator new();
              v34->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v34->__shared_owners_;
              v34->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v34->__shared_weak_owners_ = 0;
              v34[1].__vftable = v33;
              v72 = v33;
              v36 = strlen((const char *)v17);
              v73 = v34;
              if (v36 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v37 = v36;
              v71 = v14;
              if (v36 >= 0x17)
              {
                v40 = v17;
                v41 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v36 | 7) != 0x17)
                  v41 = v36 | 7;
                v42 = v41 + 1;
                v38 = operator new(v41 + 1);
                *(_QWORD *)&object[8] = v37;
                *(_QWORD *)&object[16] = v42 | 0x8000000000000000;
                *(_QWORD *)object = v38;
                v17 = v40;
              }
              else
              {
                object[23] = v36;
                v38 = object;
                if (!v36)
                {
LABEL_73:
                  v38[v37] = 0;
                  v43 = *(_QWORD *)object;
                  *(_QWORD *)v93 = *(_QWORD *)&object[8];
                  *(_QWORD *)&v93[7] = *(_QWORD *)&object[15];
                  v44 = object[23];
                  v45 = operator new(0x38uLL);
                  v46 = (std::__shared_weak_count *)v45;
                  v45[1] = 0;
                  v47 = v45 + 1;
                  v45[3] = off_24EC1FA48;
                  v48 = (char *)(v45 + 3);
                  v45[2] = 0;
                  v45[4] = v43;
                  shared_owners = (char *)(v45 + 4);
                  *v45 = &off_24EC1F9F8;
                  v45[5] = *(_QWORD *)v93;
                  *(_QWORD *)((char *)v45 + 47) = *(_QWORD *)&v93[7];
                  *((_BYTE *)v45 + 55) = v44;
                  do
                    v50 = __ldxr(p_shared_owners);
                  while (__stxr(v50 + 1, p_shared_owners));
                  v14 = v71;
                  do
                    v51 = __ldxr(v47);
                  while (__stxr(v51 + 1, v47));
                  do
                    v52 = __ldaxr(v47);
                  while (__stlxr(v52 - 1, v47));
                  if (!v52)
                  {
                    (*(void (**)(_QWORD *))(*v45 + 16))(v45);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                  do
                    v53 = __ldaxr(p_shared_owners);
                  while (__stlxr(v53 - 1, p_shared_owners));
                  if (!v53)
                  {
                    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                    std::__shared_weak_count::__release_weak(v73);
                  }
                  if (SHIBYTE(v46[2].__vftable) < 0)
                    shared_owners = (char *)v46[1].__shared_owners_;
                  v54 = _os_log_pack_fill();
                  *(_DWORD *)v54 = 136315138;
                  *(_QWORD *)(v54 + 4) = shared_owners;
                  v55 = operator new();
                  v56 = *(unsigned __int8 *)(v75 + 39);
                  v57 = v74;
                  if ((v56 & 0x80u) != 0)
                  {
                    v57 = *(const char **)(v75 + 16);
                    v56 = *(_QWORD *)(v75 + 24);
                  }
                  *(_QWORD *)v55 = v72;
                  *(_QWORD *)(v55 + 8) = v72;
                  *(_QWORD *)(v55 + 16) = v73;
                  *(_QWORD *)(v55 + 24) = v48;
                  *(_QWORD *)(v55 + 32) = v46;
                  *(_QWORD *)(v55 + 40) = v57;
                  *(_QWORD *)(v55 + 48) = v56;
                  *(_BYTE *)(v55 + 56) = 16;
                  *(_QWORD *)object = v55;
                  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v16 + 24) + 40))(*(_QWORD *)(v16 + 24), object);
                  v58 = *(_QWORD *)object;
                  *(_QWORD *)object = 0;
                  if (v58)
                  {
                    v59 = *(std::__shared_weak_count **)(v58 + 32);
                    if (v59)
                    {
                      v60 = (unint64_t *)&v59->__shared_owners_;
                      do
                        v61 = __ldaxr(v60);
                      while (__stlxr(v61 - 1, v60));
                      if (!v61)
                      {
                        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                        std::__shared_weak_count::__release_weak(v59);
                      }
                    }
                    v62 = *(std::__shared_weak_count **)(v58 + 16);
                    if (v62)
                    {
                      v63 = (unint64_t *)&v62->__shared_owners_;
                      do
                        v64 = __ldaxr(v63);
                      while (__stlxr(v64 - 1, v63));
                      if (!v64)
                      {
                        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                        std::__shared_weak_count::__release_weak(v62);
                      }
                    }
                    MEMORY[0x227684CE8](v58, 0x10F0C40B62ED6C6);
                  }
LABEL_99:
                  if (v77 < 0)
                    operator delete(v76[0]);
                  if (v14)
                  {
                    if (*(_BYTE *)(a2 + 120))
                    {
                      v70 = __cxa_allocate_exception(8uLL);
                      *v70 = &off_24EC1FCC0;
                      __cxa_throw(v70, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
                    }
                    LODWORD(v88) = 0;
                    sub_2232EDA70((uint64_t)v93, (std::string::size_type)object, a2);
                    if ((_DWORD)v88 == -1)
                      sub_22316DD70();
                    *(_QWORD *)v93 = v86;
                    ((void (*)(void **__return_ptr, _BYTE *, _BYTE *))off_24EC2AE10[v88])(v76, v93, object);
                    if ((_DWORD)v88 != -1)
                      ((void (*)(_BYTE *, _BYTE *))off_24EC2ADF8[v88])(v93, object);
                    v65 = v76;
                    if (v77 < 0)
                      v65 = (void **)v76[0];
                    sub_22322C138((uint64_t)v78, "Plane Detection failed: %s", (const char *)v65);
                    if (v77 < 0)
                      operator delete(v76[0]);
                    sub_223182C08((uint64_t)v78);
                  }
                  sub_223182C08((uint64_t)v78);
                  v66 = v84;
                  if (v84)
                  {
                    v67 = (unint64_t *)&v84->__shared_owners_;
                    do
                      v68 = __ldaxr(v67);
                    while (__stlxr(v68 - 1, v67));
                    if (!v68)
                    {
                      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                      std::__shared_weak_count::__release_weak(v66);
                    }
                  }
                  return;
                }
              }
              memcpy(v38, v17, v37);
              goto LABEL_73;
            }
          }
          memmove(v28, v19, v20);
          goto LABEL_54;
        }
      }
      memmove(v24, v22, v23);
      goto LABEL_46;
    }
  }
}

void sub_2232EEA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *object,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;

  __cxa_guard_abort(&qword_255788F58);
  if (a22 < 0)
    operator delete(__p);
  sub_223182C08((uint64_t)&a23);
  v45 = a31;
  if (a31)
  {
    p_shared_owners = (unint64_t *)&a31->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2232EED00(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d7recon3d3r3d7Session24InitializePlaneDetectionEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d7recon3d3r3d7Session24InitializePlaneDetectionEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d7recon3d3r3d7Session24InitializePlaneDetectionEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d7recon3d3r3d7Session24InitializePlaneDetectionEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232EED6C()
{
  return &unk_24EC2AF20;
}

BOOL sub_2232EED78(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_224527E14(a3, (CFStringRef *)&value);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_2232EEEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2232EEEDC(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v16 = *(CFTypeRef *)a2;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_2231AED2C(&v18, &v16);
  v6 = v19;
  *a1 = v18;
  a1[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = v19;
    if (v19)
    {
      v10 = (unint64_t *)&v19->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v12 = v17;
  if (!v17)
    return a1;
  v13 = (unint64_t *)&v17->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_2232EEFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2232EEFE8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC2AF40;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232EF05C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC2AF40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232EF0D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2AF40;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2232EF120(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2AF40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2232EF150(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2232EF1A8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_2232EF210(uint64_t a1, uint64_t *a2, const void **a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  const void *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;

  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = *a3;
  v7 = (std::__shared_weak_count *)a3[1];
  if (!v7)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
LABEL_6:
    if (v8)
      goto LABEL_7;
LABEL_13:
    if (!v6)
      goto LABEL_14;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!v8)
    goto LABEL_13;
LABEL_7:
  v12 = *a3;
  if (v12)
    CFRetain(v12);
  if (v6)
  {
LABEL_10:
    v13 = (char *)operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
    if (v13)
    {
      *(_OWORD *)(v13 + 8) = *(_OWORD *)v6;
      *((_QWORD *)v13 + 3) = *(_QWORD *)(v6 + 16);
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
      *((_DWORD *)v13 + 8) = 1;
      *(_QWORD *)v13 = &off_24EC29560;
    }
  }
LABEL_14:
  (*(void (**)(void))(**(_QWORD **)(a1 + 8) + 16))();
  if (v5)
  {
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2232EF358(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2232EF398(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK16CV3DReconSession19QueryOccupancyAsyncERK30CV3DReconOccupancyQueryRequestN4cv3d3kit4capi5BlockI"
                     "U13block_pointerFvPK29CV3DReconOccupancyQueryResultP9__CFErrorEEEPSB_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK16CV3DReconSession19QueryOccupancyAsyncERK30CV3DReconOccupancyQueryRequestN4cv3d3kit4"
                                "capi5BlockIU13block_pointerFvPK29CV3DReconOccupancyQueryResultP9__CFErrorEEEPSB_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK16CV3DReconSession19QueryOccupancyAsyncERK30CV3DReconOccupancyQueryRequestN4cv3d3kit4capi5BlockIU13block_pointerFvPK29CV3DReconOccupancyQueryResultP9__CFErrorEEEPSB_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK16CV3DReconSession19QueryOccupancyAsyncERK30CV3DReconOccupancyQueryRequestN4cv3d3kit4capi5BlockIU13block_pointerFvPK29CV3DReconOccupancyQueryResultP9__CFErrorEEEPSB_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232EF404()
{
  return &unk_24EC2AFB0;
}

_QWORD *sub_2232EF410(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC2AFD0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232EF484(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC2AFD0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232EF4F8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2AFD0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2232EF548(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2AFD0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2232EF578(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2232EF5D0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *sub_2232EF638(uint64_t a1, uint64_t *a2, CFTypeRef *a3)
{
  _QWORD *v5;
  _QWORD *v6;

  if (*a3)
    CFRetain(*a3);
  v5 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  v6 = v5;
  if (v5)
  {
    sub_22326F694(v5 + 1, a2);
    *((_DWORD *)v6 + 8) = 1;
    *v6 = &unk_24EC1F620;
  }
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD **)(a1 + 8));
}

void sub_2232EF6C0(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2232EF69CLL);
}

uint64_t sub_2232EF6EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK16CV3DReconSession22ComputeGlobalMeshAsyncEN4cv3d3kit4capi5BlockIU13block_pointerFvPK17CV3DRecon"
                     "MeshListP9__CFErrorEEEPS8_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK16CV3DReconSession22ComputeGlobalMeshAsyncEN4cv3d3kit4capi5BlockIU13block_pointerFvPK"
                                "17CV3DReconMeshListP9__CFErrorEEEPS8_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK16CV3DReconSession22ComputeGlobalMeshAsyncEN4cv3d3kit4capi5BlockIU13block_pointerFvPK17CV3DReconMeshListP9__CFErrorEEEPS8_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK16CV3DReconSession22ComputeGlobalMeshAsyncEN4cv3d3kit4capi5BlockIU13block_pointerFvPK17CV3DReconMeshListP9__CFErrorEEEPS8_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232EF758()
{
  return &unk_24EC2B040;
}

_QWORD *sub_2232EF764(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC2B060;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232EF7D8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC2B060;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232EF84C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2B060;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2232EF89C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2B060;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2232EF8CC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2232EF924(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *sub_2232EF98C(uint64_t a1, uint64_t *a2, CFTypeRef *a3)
{
  _QWORD *v5;
  _QWORD *v6;

  if (*a3)
    CFRetain(*a3);
  v5 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  v6 = v5;
  if (v5)
  {
    sub_22326F694(v5 + 1, a2);
    *((_DWORD *)v6 + 8) = 1;
    *v6 = &unk_24EC1F620;
  }
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD **)(a1 + 8));
}

void sub_2232EFA14(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2232EF9F0);
}

uint64_t sub_2232EFA40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK16CV3DReconSession25ComputeOccupancyMeshAsyncEN4cv3d3kit4capi5BlockIU13block_pointerFvPK17CV3DRe"
                     "conMeshListP9__CFErrorEEEPS8_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK16CV3DReconSession25ComputeOccupancyMeshAsyncEN4cv3d3kit4capi5BlockIU13block_pointerF"
                                "vPK17CV3DReconMeshListP9__CFErrorEEEPS8_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK16CV3DReconSession25ComputeOccupancyMeshAsyncEN4cv3d3kit4capi5BlockIU13block_pointerFvPK17CV3DReconMeshListP9__CFErrorEEEPS8_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK16CV3DReconSession25ComputeOccupancyMeshAsyncEN4cv3d3kit4capi5BlockIU13block_pointerFvPK17CV3DReconMeshListP9__CFErrorEEEPS8_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232EFAAC()
{
  return &unk_24EC2B0C0;
}

_QWORD *sub_2232EFAB8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC2B0E0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232EFB2C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC2B0E0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232EFBA0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2B0E0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2232EFBF0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2B0E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2232EFC20(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2232EFC78(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *sub_2232EFCE0(uint64_t a1, uint64_t *a2, CFTypeRef *a3)
{
  _QWORD *v5;
  _QWORD *v6;

  if (*a3)
    CFRetain(*a3);
  v5 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  v6 = v5;
  if (v5)
  {
    sub_22326F694(v5 + 1, a2);
    *((_DWORD *)v6 + 8) = 1;
    *v6 = &unk_24EC1F620;
  }
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD **)(a1 + 8));
}

void sub_2232EFD68(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2232EFD44);
}

uint64_t sub_2232EFD94(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK16CV3DReconSession31ComputeGlobalOccupancyMeshAsyncEN4cv3d3kit4capi5BlockIU13block_pointerFvPK17"
                     "CV3DReconMeshListP9__CFErrorEEEPS8_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK16CV3DReconSession31ComputeGlobalOccupancyMeshAsyncEN4cv3d3kit4capi5BlockIU13block_po"
                                "interFvPK17CV3DReconMeshListP9__CFErrorEEEPS8_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK16CV3DReconSession31ComputeGlobalOccupancyMeshAsyncEN4cv3d3kit4capi5BlockIU13block_pointerFvPK17CV3DReconMeshListP9__CFErrorEEEPS8_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK16CV3DReconSession31ComputeGlobalOccupancyMeshAsyncEN4cv3d3kit4capi5BlockIU13block_pointerFvPK17CV3DReconMeshListP9__CFErrorEEEPS8_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232EFE00()
{
  return &unk_24EC2B140;
}

_QWORD *sub_2232EFE0C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC2B160;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232EFE80(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC2B160;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232EFEF4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2B160;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2232EFF44(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2B160;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2232EFF74(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2232EFFCC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *sub_2232F0034(uint64_t a1, uint64_t *a2, CFTypeRef *a3)
{
  _QWORD *v5;
  _QWORD *v6;

  if (*a3)
    CFRetain(*a3);
  v5 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  v6 = v5;
  if (v5)
  {
    sub_22326F694(v5 + 1, a2);
    *((_DWORD *)v6 + 8) = 1;
    *v6 = &unk_24EC1F620;
  }
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD **)(a1 + 8));
}

void sub_2232F00BC(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2232F0098);
}

uint64_t sub_2232F00E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK16CV3DReconSession30ComputeOccupancyBlockMeshAsyncEN4cv3d3kit4capi5BlockIU13block_pointerFvPK17C"
                     "V3DReconMeshListP9__CFErrorEEEPS8_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK16CV3DReconSession30ComputeOccupancyBlockMeshAsyncEN4cv3d3kit4capi5BlockIU13block_poi"
                                "nterFvPK17CV3DReconMeshListP9__CFErrorEEEPS8_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK16CV3DReconSession30ComputeOccupancyBlockMeshAsyncEN4cv3d3kit4capi5BlockIU13block_pointerFvPK17CV3DReconMeshListP9__CFErrorEEEPS8_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK16CV3DReconSession30ComputeOccupancyBlockMeshAsyncEN4cv3d3kit4capi5BlockIU13block_pointerFvPK17CV3DReconMeshListP9__CFErrorEEEPS8_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2232F0154()
{
  return &unk_24EC2B1C0;
}

void sub_2232F0160(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  void *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  float v14;
  char *v15;
  char *k;
  uint64_t v17;
  void (*v18)(uint64_t);
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  float v22;
  char *i;
  uint64_t v24;
  void (*v25)(uint64_t);
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  float v29;
  char *j;
  uint64_t v31;
  void (*v32)(uint64_t);
  _QWORD *v33;
  _QWORD *v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *m;
  uint64_t v46;
  void (*v47)(uint64_t);
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  float *v51;
  float *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  float *v61;
  __int128 v62;
  __int128 v63;
  float *v64;
  uint64_t v65;
  float v66;
  char *v67;
  char *i1;
  uint64_t v69;
  void (*v70)(uint64_t);
  _QWORD *v71;
  _QWORD *v72;
  char *v73;
  float v74;
  char *n;
  uint64_t v76;
  void (*v77)(uint64_t);
  _QWORD *v78;
  _QWORD *v79;
  char *v80;
  float v81;
  char *ii;
  uint64_t v83;
  void (*v84)(uint64_t);
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  float v88;
  char *v89;
  char *jj;
  uint64_t v91;
  void (*v92)(uint64_t);
  _QWORD *v93;
  _QWORD *v94;
  char *v95;
  float v96;
  char *kk;
  uint64_t v98;
  void (*v99)(uint64_t);
  _QWORD *v100;
  _QWORD *v101;
  char *v102;
  float v103;
  char *mm;
  uint64_t v105;
  void (*v106)(uint64_t);
  _QWORD *v107;
  _QWORD *v108;
  float *v109;
  uint64_t v110;
  char *v111;
  char *nn;
  uint64_t v113;
  void (*v114)(uint64_t);
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  void **v118;
  unint64_t v119;
  char *v120;
  char *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  size_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  char *v136;
  char *v137;
  char *v138;
  void *v139;
  char *v140;
  char *v141;
  void *v142;
  char *v143;
  size_t v144;
  char *v145;
  _BYTE *v146;
  int64_t v147;
  char *v148;
  void **v149;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  _OWORD *v181;
  _OWORD *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t i12;
  unint64_t v198;
  uint64_t v199;
  void *v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *i4;
  uint64_t v218;
  void (*v219)(uint64_t);
  _QWORD *v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  float *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void **v230;
  float *v231;
  float *v232;
  unint64_t v233;
  void *v234;
  float *v235;
  uint64_t v236;
  float v237;
  char *v238;
  char *i6;
  uint64_t v240;
  void (*v241)(uint64_t);
  _QWORD *v242;
  _QWORD *v243;
  char *v244;
  float v245;
  char *i5;
  uint64_t v247;
  void (*v248)(uint64_t);
  _QWORD *v249;
  _QWORD *v250;
  void **v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  float *v255;
  float *v256;
  unint64_t v257;
  float *v258;
  char *v260;
  char *i7;
  uint64_t v262;
  void (*v263)(uint64_t);
  _QWORD *v264;
  _QWORD *v265;
  uint64_t v266;
  float v267;
  char *v268;
  char *i11;
  uint64_t v270;
  void (*v271)(uint64_t);
  _QWORD *v272;
  _QWORD *v273;
  char *v274;
  float v275;
  char *i8;
  uint64_t v277;
  void (*v278)(uint64_t);
  _QWORD *v279;
  _QWORD *v280;
  uint64_t v281;
  float v282;
  char *v283;
  char *i9;
  uint64_t v285;
  void (*v286)(uint64_t);
  _QWORD *v287;
  _QWORD *v288;
  char *v289;
  float v290;
  char *i10;
  uint64_t v292;
  void (*v293)(uint64_t);
  _QWORD *v294;
  _QWORD *v295;
  void **v296;
  char *v297;
  char *v298;
  void *v299;
  char *v300;
  void *v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  char *i2;
  uint64_t v311;
  void (*v312)(uint64_t);
  _QWORD *v313;
  _QWORD *v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  char *v321;
  char *i3;
  uint64_t v323;
  void (*v324)(uint64_t);
  _QWORD *v325;
  _QWORD *v326;
  std::bad_cast *v327;
  std::bad_cast *v328;
  std::bad_cast *v329;
  std::bad_cast *v330;
  std::bad_cast *v331;
  std::bad_cast *v332;
  std::bad_cast *v333;
  std::bad_cast *v334;
  std::bad_cast *v335;
  std::bad_cast *v336;
  std::bad_cast *v337;
  std::bad_cast *v338;
  std::bad_cast *v339;
  std::bad_cast *v340;
  std::bad_cast *v341;
  std::bad_cast *v342;
  std::bad_cast *v343;
  std::bad_cast *v344;
  std::bad_cast *exception;
  std::bad_cast *v346;
  std::bad_cast *v347;
  std::bad_cast *v348;
  std::bad_cast *v349;
  std::bad_cast *v350;
  char *v351;
  unsigned int v352;
  unint64_t v353;
  char v354;
  unint64_t v355;
  void *__p;
  uint64_t v357;
  char *v358;
  char *v359;
  uint64_t v360;
  char v361;
  unint64_t v362;

  v6 = (void *)(a2 + 8);
  v361 = 0;
  sub_224553CF0(a1[6], &v361);
  v352 = a3;
  if (v361)
  {
    if (!*(_BYTE *)(a2 + 744))
    {
      bzero(v6, 0x2E0uLL);
      *(_BYTE *)(a2 + 744) = 1;
    }
    LODWORD(__p) = 1;
    sub_224554038(a1[6], &__p);
    LODWORD(__p) = 3;
    sub_224554038(a1[6], &__p);
    sub_2232F33D8(a1, a2 + 16);
    sub_2232F8A90(a1, a2 + 112);
    sub_2232F8A90(a1, a2 + 232);
    LOBYTE(v355) = 0;
    sub_224553CF0(a1[6], &v355);
    if ((_BYTE)v355)
    {
      if (!*(_BYTE *)(a2 + 504))
      {
        *(_QWORD *)(a2 + 496) = 0;
        *(_OWORD *)(a2 + 464) = 0u;
        *(_OWORD *)(a2 + 480) = 0u;
        *(_OWORD *)(a2 + 432) = 0u;
        *(_OWORD *)(a2 + 448) = 0u;
        *(_OWORD *)(a2 + 400) = 0u;
        *(_OWORD *)(a2 + 416) = 0u;
        *(_OWORD *)(a2 + 368) = 0u;
        *(_OWORD *)(a2 + 384) = 0u;
        *(_OWORD *)(a2 + 352) = 0u;
        *(_BYTE *)(a2 + 504) = 1;
      }
      LODWORD(__p) = 3;
      sub_224554038(a1[6], &__p);
      v7 = __p;
      v362 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 3);
      sub_2245543E8(a1[6], &v362);
      v9 = *(_QWORD *)(a2 + 352);
      v8 = *(_QWORD *)(a2 + 360);
      v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3);
      if (v362 <= v10)
      {
        if (v362 < v10)
        {
          v8 = v9 + 24 * v362;
          *(_QWORD *)(a2 + 360) = v8;
        }
      }
      else
      {
        sub_2232F8BF4((char **)(a2 + 352), v362 - v10);
        v9 = *(_QWORD *)(a2 + 352);
        v8 = *(_QWORD *)(a2 + 360);
      }
      if (v8 != v9)
      {
        v11 = v8;
        while (1)
        {
          LODWORD(__p) = 2;
          sub_224554038(a1[6], &__p);
          v12 = __p;
          v13 = a1[6];
          sub_2245564B0(v13, (uint64_t)&__p);
          if ((_DWORD)__p == 2)
            break;
          if ((_DWORD)__p == 3)
          {
            *(float *)v9 = (float)v357;
            v15 = v359;
            v359 = 0;
            if (!v15)
              goto LABEL_32;
            goto LABEL_26;
          }
          if ((_DWORD)__p != 4)
            goto LABEL_585;
          v14 = *(double *)&v357;
          *(float *)v9 = v14;
          v15 = v359;
          v359 = 0;
          if (v15)
            goto LABEL_26;
LABEL_32:
          sub_2245564B0(v13, (uint64_t)&__p);
          if ((_DWORD)__p == 2)
          {
            *(float *)(v9 + 4) = (float)(unint64_t)v357;
            v21 = v359;
            v359 = 0;
            if (!v21)
              goto LABEL_46;
LABEL_40:
            for (i = (char *)*((_QWORD *)v21 + 4); i != *((char **)v21 + 6); i -= 16)
            {
              v25 = (void (*)(uint64_t))*((_QWORD *)i - 2);
              v24 = *((_QWORD *)i - 1);
              v25(v24);
            }
            free(i);
            v26 = (_QWORD *)*((_QWORD *)v21 + 3);
            if (v26)
            {
              do
              {
                v27 = (_QWORD *)*v26;
                free(v26);
                v26 = v27;
              }
              while (v27);
            }
            free(v21);
            goto LABEL_46;
          }
          if ((_DWORD)__p == 4)
          {
            v22 = *(double *)&v357;
            *(float *)(v9 + 4) = v22;
            v21 = v359;
            v359 = 0;
            if (!v21)
              goto LABEL_46;
            goto LABEL_40;
          }
          if ((_DWORD)__p != 3)
            goto LABEL_585;
          *(float *)(v9 + 4) = (float)v357;
          v21 = v359;
          v359 = 0;
          if (v21)
            goto LABEL_40;
LABEL_46:
          sub_2245564B0(v13, (uint64_t)&__p);
          switch((_DWORD)__p)
          {
            case 2:
              *(float *)(v9 + 8) = (float)(unint64_t)v357;
              v28 = v359;
              v359 = 0;
              if (v28)
                goto LABEL_54;
              break;
            case 4:
              v29 = *(double *)&v357;
              *(float *)(v9 + 8) = v29;
              v28 = v359;
              v359 = 0;
              if (v28)
                goto LABEL_54;
              break;
            case 3:
              *(float *)(v9 + 8) = (float)v357;
              v28 = v359;
              v359 = 0;
              if (!v28)
                break;
LABEL_54:
              for (j = (char *)*((_QWORD *)v28 + 4); j != *((char **)v28 + 6); j -= 16)
              {
                v32 = (void (*)(uint64_t))*((_QWORD *)j - 2);
                v31 = *((_QWORD *)j - 1);
                v32(v31);
              }
              free(j);
              v33 = (_QWORD *)*((_QWORD *)v28 + 3);
              if (v33)
              {
                do
                {
                  v34 = (_QWORD *)*v33;
                  free(v33);
                  v33 = v34;
                }
                while (v34);
              }
              free(v28);
              break;
            default:
LABEL_585:
              exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
              exception->__vftable = 0;
              v346 = std::bad_cast::bad_cast(exception);
              v346->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
              __cxa_throw(v346, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
          }
          sub_2245544CC(a1[6], (float *)(v9 + 12));
          if (v12 >= 2)
          {
            sub_224553CF0(a1[6], (_BYTE *)(v9 + 16));
            sub_224554038(a1[6], (_DWORD *)(v9 + 20));
          }
          v9 += 24;
          if (v9 == v11)
            goto LABEL_62;
        }
        *(float *)v9 = (float)(unint64_t)v357;
        v15 = v359;
        v359 = 0;
        if (!v15)
          goto LABEL_32;
LABEL_26:
        for (k = (char *)*((_QWORD *)v15 + 4); k != *((char **)v15 + 6); k -= 16)
        {
          v18 = (void (*)(uint64_t))*((_QWORD *)k - 2);
          v17 = *((_QWORD *)k - 1);
          v18(v17);
        }
        free(k);
        v19 = (_QWORD *)*((_QWORD *)v15 + 3);
        if (v19)
        {
          do
          {
            v20 = (_QWORD *)*v19;
            free(v19);
            v19 = v20;
          }
          while (v20);
        }
        free(v15);
        goto LABEL_32;
      }
LABEL_62:
      if (v7 >= 2)
      {
        LODWORD(__p) = 3;
        sub_224554038(a1[6], &__p);
        sub_2232F33D8(a1, a2 + 376);
        sub_2231B623C((uint64_t)a1, a2 + 472);
        if (v7 != 2)
        {
          __p = 0;
          sub_224554604(a1[6], (double *)&__p);
          *(_QWORD *)(a2 + 496) = __p;
        }
      }
    }
    else if (*(_BYTE *)(a2 + 504))
    {
      sub_2232E7A44(a2 + 352);
      *(_BYTE *)(a2 + 504) = 0;
    }
    v35 = (_OWORD *)(a2 + 512);
    LOBYTE(v355) = 0;
    sub_224553CF0(a1[6], &v355);
    if ((_BYTE)v355)
    {
      if (!*(_BYTE *)(a2 + 624))
      {
        *(_OWORD *)(a2 + 592) = 0u;
        *(_OWORD *)(a2 + 608) = 0u;
        *(_OWORD *)(a2 + 560) = 0u;
        *(_OWORD *)(a2 + 576) = 0u;
        *(_OWORD *)(a2 + 528) = 0u;
        *(_OWORD *)(a2 + 544) = 0u;
        *v35 = 0u;
        *(_BYTE *)(a2 + 624) = 1;
      }
      LODWORD(__p) = 1;
      sub_224554038(a1[6], &__p);
      v362 = (uint64_t)(*(_QWORD *)(a2 + 520) - *(_QWORD *)(a2 + 512)) >> 4;
      sub_2245543E8(a1[6], &v362);
      v36 = *(_QWORD *)(a2 + 520);
      v37 = *(_QWORD *)(a2 + 512);
      v38 = (v36 - v37) >> 4;
      if (v362 <= v38)
      {
        if (v362 < v38)
        {
          v36 = v37 + 16 * v362;
          *(_QWORD *)(a2 + 520) = v36;
        }
      }
      else
      {
        sub_2232C68D0((char **)(a2 + 512), v362 - v38);
        v37 = *(_QWORD *)(a2 + 512);
        v36 = *(_QWORD *)(a2 + 520);
      }
      if (v36 != v37)
      {
        v41 = v36;
        do
        {
          v42 = 0;
          v43 = a1[6];
          do
          {
            sub_2245564B0(v43, (uint64_t)&__p);
            if ((_DWORD)__p != 2 || (unint64_t)v357 >= 0x100)
            {
              v333 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
              v333->__vftable = 0;
              v334 = std::bad_cast::bad_cast(v333);
              v334->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
              __cxa_throw(v334, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
            }
            *(_BYTE *)(v37 + v42) = v357;
            v44 = v359;
            v359 = 0;
            if (v44)
            {
              for (m = (char *)*((_QWORD *)v44 + 4); m != *((char **)v44 + 6); m -= 16)
              {
                v47 = (void (*)(uint64_t))*((_QWORD *)m - 2);
                v46 = *((_QWORD *)m - 1);
                v47(v46);
              }
              free(m);
              v48 = (_QWORD *)*((_QWORD *)v44 + 3);
              if (v48)
              {
                do
                {
                  v49 = (_QWORD *)*v48;
                  free(v48);
                  v48 = v49;
                }
                while (v49);
              }
              free(v44);
            }
            ++v42;
          }
          while (v42 != 16);
          v37 += 16;
        }
        while (v37 != v41);
      }
      v362 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 3);
      sub_2245543E8(a1[6], &v362);
      v50 = v362;
      v51 = *(float **)(a2 + 544);
      v52 = *(float **)(a2 + 536);
      v53 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v51 - (char *)v52) >> 3);
      v54 = v362 - v53;
      if (v362 <= v53)
      {
        if (v362 < v53)
        {
          v51 = &v52[10 * v362];
          *(_QWORD *)(a2 + 544) = v51;
        }
        if (v51 != v52)
          goto LABEL_112;
      }
      else
      {
        v55 = *(_QWORD *)(a2 + 552);
        if (0xCCCCCCCCCCCCCCCDLL * ((v55 - (uint64_t)v51) >> 3) >= v54)
        {
          bzero(*(void **)(a2 + 544), 40 * ((40 * v54 - 40) / 0x28) + 40);
          v61 = &v51[10 * ((40 * v54 - 40) / 0x28) + 10];
          *(_QWORD *)(a2 + 544) = v61;
        }
        else
        {
          if (v362 > 0x666666666666666)
            sub_22316E078();
          v56 = 0xCCCCCCCCCCCCCCCDLL * ((v55 - (uint64_t)v52) >> 3);
          if (2 * v56 > v362)
            v50 = 2 * v56;
          if (v56 >= 0x333333333333333)
            v50 = 0x666666666666666;
          if (v50 > 0x666666666666666)
            goto LABEL_588;
          v57 = 40 * v50;
          v58 = (char *)operator new(40 * v50);
          v59 = &v58[8 * (((char *)v51 - (char *)v52) >> 3)];
          v60 = &v58[v57];
          bzero(v59, 40 * ((40 * v54 - 40) / 0x28) + 40);
          v61 = (float *)&v59[40 * ((40 * v54 - 40) / 0x28) + 40];
          if (v51 != v52)
          {
            do
            {
              v62 = *(_OWORD *)(v51 - 10);
              v63 = *(_OWORD *)(v51 - 6);
              *((_QWORD *)v59 - 1) = *((_QWORD *)v51 - 1);
              *(_OWORD *)(v59 - 24) = v63;
              *(_OWORD *)(v59 - 40) = v62;
              v59 -= 40;
              v51 -= 10;
            }
            while (v51 != v52);
            v51 = v52;
          }
          *(_QWORD *)(a2 + 536) = v59;
          *(_QWORD *)(a2 + 544) = v61;
          *(_QWORD *)(a2 + 552) = v60;
          if (v51)
          {
            operator delete(v51);
            v61 = *(float **)(a2 + 544);
          }
        }
        v52 = *(float **)(a2 + 536);
        v51 = v61;
        if (v61 != v52)
        {
LABEL_112:
          v64 = v51;
          while (1)
          {
            LODWORD(__p) = 1;
            sub_224554038(a1[6], &__p);
            v65 = a1[6];
            sub_2245564B0(v65, (uint64_t)&__p);
            if ((_DWORD)__p == 2)
              break;
            if ((_DWORD)__p == 3)
            {
              *v52 = (float)v357;
              v67 = v359;
              v359 = 0;
              if (!v67)
                goto LABEL_128;
              goto LABEL_122;
            }
            if ((_DWORD)__p != 4)
              goto LABEL_586;
            v66 = *(double *)&v357;
            *v52 = v66;
            v67 = v359;
            v359 = 0;
            if (v67)
              goto LABEL_122;
LABEL_128:
            sub_2245564B0(v65, (uint64_t)&__p);
            if ((_DWORD)__p == 2)
            {
              v52[1] = (float)(unint64_t)v357;
              v73 = v359;
              v359 = 0;
              if (!v73)
                goto LABEL_142;
LABEL_136:
              for (n = (char *)*((_QWORD *)v73 + 4); n != *((char **)v73 + 6); n -= 16)
              {
                v77 = (void (*)(uint64_t))*((_QWORD *)n - 2);
                v76 = *((_QWORD *)n - 1);
                v77(v76);
              }
              free(n);
              v78 = (_QWORD *)*((_QWORD *)v73 + 3);
              if (v78)
              {
                do
                {
                  v79 = (_QWORD *)*v78;
                  free(v78);
                  v78 = v79;
                }
                while (v79);
              }
              free(v73);
              goto LABEL_142;
            }
            if ((_DWORD)__p == 4)
            {
              v74 = *(double *)&v357;
              v52[1] = v74;
              v73 = v359;
              v359 = 0;
              if (!v73)
                goto LABEL_142;
              goto LABEL_136;
            }
            if ((_DWORD)__p != 3)
              goto LABEL_586;
            v52[1] = (float)v357;
            v73 = v359;
            v359 = 0;
            if (v73)
              goto LABEL_136;
LABEL_142:
            sub_2245564B0(v65, (uint64_t)&__p);
            if ((_DWORD)__p == 2)
            {
              v52[2] = (float)(unint64_t)v357;
              v80 = v359;
              v359 = 0;
              if (!v80)
                goto LABEL_156;
LABEL_150:
              for (ii = (char *)*((_QWORD *)v80 + 4); ii != *((char **)v80 + 6); ii -= 16)
              {
                v84 = (void (*)(uint64_t))*((_QWORD *)ii - 2);
                v83 = *((_QWORD *)ii - 1);
                v84(v83);
              }
              free(ii);
              v85 = (_QWORD *)*((_QWORD *)v80 + 3);
              if (v85)
              {
                do
                {
                  v86 = (_QWORD *)*v85;
                  free(v85);
                  v85 = v86;
                }
                while (v86);
              }
              free(v80);
              goto LABEL_156;
            }
            if ((_DWORD)__p == 4)
            {
              v81 = *(double *)&v357;
              v52[2] = v81;
              v80 = v359;
              v359 = 0;
              if (!v80)
                goto LABEL_156;
              goto LABEL_150;
            }
            if ((_DWORD)__p != 3)
            {
LABEL_586:
              v347 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
              v347->__vftable = 0;
              v348 = std::bad_cast::bad_cast(v347);
              v348->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
              __cxa_throw(v348, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
            }
            v52[2] = (float)v357;
            v80 = v359;
            v359 = 0;
            if (v80)
              goto LABEL_150;
LABEL_156:
            v87 = a1[6];
            sub_2245564B0(v87, (uint64_t)&__p);
            if ((_DWORD)__p == 2)
            {
              v52[3] = (float)(unint64_t)v357;
              v89 = v359;
              v359 = 0;
              if (!v89)
                goto LABEL_170;
LABEL_164:
              for (jj = (char *)*((_QWORD *)v89 + 4); jj != *((char **)v89 + 6); jj -= 16)
              {
                v92 = (void (*)(uint64_t))*((_QWORD *)jj - 2);
                v91 = *((_QWORD *)jj - 1);
                v92(v91);
              }
              free(jj);
              v93 = (_QWORD *)*((_QWORD *)v89 + 3);
              if (v93)
              {
                do
                {
                  v94 = (_QWORD *)*v93;
                  free(v93);
                  v93 = v94;
                }
                while (v94);
              }
              free(v89);
              goto LABEL_170;
            }
            if ((_DWORD)__p == 3)
            {
              v52[3] = (float)v357;
              v89 = v359;
              v359 = 0;
              if (!v89)
                goto LABEL_170;
              goto LABEL_164;
            }
            if ((_DWORD)__p != 4)
              goto LABEL_587;
            v88 = *(double *)&v357;
            v52[3] = v88;
            v89 = v359;
            v359 = 0;
            if (v89)
              goto LABEL_164;
LABEL_170:
            sub_2245564B0(v87, (uint64_t)&__p);
            if ((_DWORD)__p == 2)
            {
              v52[4] = (float)(unint64_t)v357;
              v95 = v359;
              v359 = 0;
              if (!v95)
                goto LABEL_184;
LABEL_178:
              for (kk = (char *)*((_QWORD *)v95 + 4); kk != *((char **)v95 + 6); kk -= 16)
              {
                v99 = (void (*)(uint64_t))*((_QWORD *)kk - 2);
                v98 = *((_QWORD *)kk - 1);
                v99(v98);
              }
              free(kk);
              v100 = (_QWORD *)*((_QWORD *)v95 + 3);
              if (v100)
              {
                do
                {
                  v101 = (_QWORD *)*v100;
                  free(v100);
                  v100 = v101;
                }
                while (v101);
              }
              free(v95);
              goto LABEL_184;
            }
            if ((_DWORD)__p == 4)
            {
              v96 = *(double *)&v357;
              v52[4] = v96;
              v95 = v359;
              v359 = 0;
              if (!v95)
                goto LABEL_184;
              goto LABEL_178;
            }
            if ((_DWORD)__p != 3)
              goto LABEL_587;
            v52[4] = (float)v357;
            v95 = v359;
            v359 = 0;
            if (v95)
              goto LABEL_178;
LABEL_184:
            sub_2245564B0(v87, (uint64_t)&__p);
            switch((_DWORD)__p)
            {
              case 2:
                v52[5] = (float)(unint64_t)v357;
                v102 = v359;
                v359 = 0;
                if (v102)
                  goto LABEL_192;
                break;
              case 4:
                v103 = *(double *)&v357;
                v52[5] = v103;
                v102 = v359;
                v359 = 0;
                if (v102)
                  goto LABEL_192;
                break;
              case 3:
                v52[5] = (float)v357;
                v102 = v359;
                v359 = 0;
                if (!v102)
                  break;
LABEL_192:
                for (mm = (char *)*((_QWORD *)v102 + 4); mm != *((char **)v102 + 6); mm -= 16)
                {
                  v106 = (void (*)(uint64_t))*((_QWORD *)mm - 2);
                  v105 = *((_QWORD *)mm - 1);
                  v106(v105);
                }
                free(mm);
                v107 = (_QWORD *)*((_QWORD *)v102 + 3);
                if (v107)
                {
                  do
                  {
                    v108 = (_QWORD *)*v107;
                    free(v107);
                    v107 = v108;
                  }
                  while (v108);
                }
                free(v102);
                break;
              default:
LABEL_587:
                v349 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                v349->__vftable = 0;
                v350 = std::bad_cast::bad_cast(v349);
                v350->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
                __cxa_throw(v350, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
            }
            v109 = v52 + 6;
            v110 = a1[6];
            v52 += 10;
            do
            {
              sub_2245564B0(v110, (uint64_t)&__p);
              if ((_DWORD)__p != 2 || (unint64_t)v357 >= 0x100)
              {
                v335 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                v335->__vftable = 0;
                v336 = std::bad_cast::bad_cast(v335);
                v336->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
                __cxa_throw(v336, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
              }
              *(_BYTE *)v109 = v357;
              v111 = v359;
              v359 = 0;
              if (v111)
              {
                for (nn = (char *)*((_QWORD *)v111 + 4); nn != *((char **)v111 + 6); nn -= 16)
                {
                  v114 = (void (*)(uint64_t))*((_QWORD *)nn - 2);
                  v113 = *((_QWORD *)nn - 1);
                  v114(v113);
                }
                free(nn);
                v115 = (_QWORD *)*((_QWORD *)v111 + 3);
                if (v115)
                {
                  do
                  {
                    v116 = (_QWORD *)*v115;
                    free(v115);
                    v115 = v116;
                  }
                  while (v116);
                }
                free(v111);
              }
              v109 = (float *)((char *)v109 + 1);
            }
            while (v109 != v52);
            if (v52 == v64)
              goto LABEL_210;
          }
          *v52 = (float)(unint64_t)v357;
          v67 = v359;
          v359 = 0;
          if (!v67)
            goto LABEL_128;
LABEL_122:
          for (i1 = (char *)*((_QWORD *)v67 + 4); i1 != *((char **)v67 + 6); i1 -= 16)
          {
            v70 = (void (*)(uint64_t))*((_QWORD *)i1 - 2);
            v69 = *((_QWORD *)i1 - 1);
            v70(v69);
          }
          free(i1);
          v71 = (_QWORD *)*((_QWORD *)v67 + 3);
          if (v71)
          {
            do
            {
              v72 = (_QWORD *)*v71;
              free(v71);
              v71 = v72;
            }
            while (v72);
          }
          free(v67);
          goto LABEL_128;
        }
      }
LABEL_210:
      v117 = a1[6];
      sub_2245544CC(v117, (float *)(a2 + 560));
      sub_2245544CC(v117, (float *)(a2 + 564));
      sub_2245544CC(v117, (float *)(a2 + 568));
      sub_2245544CC(v117, (float *)(a2 + 572));
      sub_2245544CC(v117, (float *)(a2 + 576));
      sub_2245544CC(v117, (float *)(a2 + 580));
      sub_2245544CC(v117, (float *)(a2 + 584));
      sub_2245544CC(v117, (float *)(a2 + 588));
      sub_2245544CC(v117, (float *)(a2 + 592));
      sub_2245544CC(v117, (float *)(a2 + 596));
      sub_2245544CC(v117, (float *)(a2 + 600));
      sub_2245544CC(v117, (float *)(a2 + 604));
      sub_2245544CC(v117, (float *)(a2 + 608));
      sub_2245544CC(v117, (float *)(a2 + 612));
      sub_2245544CC(v117, (float *)(a2 + 616));
      sub_2245544CC(v117, (float *)(a2 + 620));
    }
    else if (*(_BYTE *)(a2 + 624))
    {
      v39 = *(void **)(a2 + 536);
      if (v39)
      {
        *(_QWORD *)(a2 + 544) = v39;
        operator delete(v39);
      }
      v40 = *(void **)v35;
      if (*(_QWORD *)v35)
      {
        *(_QWORD *)(a2 + 520) = v40;
        operator delete(v40);
      }
      *(_BYTE *)(a2 + 624) = 0;
    }
    LOBYTE(v362) = 0;
    sub_224553CF0(a1[6], &v362);
    if ((_BYTE)v362)
    {
      if (!*(_BYTE *)(a2 + 736))
      {
        sub_2232F8D90(a2 + 632);
        *(_QWORD *)(a2 + 728) = 0;
        *(_OWORD *)(a2 + 696) = 0u;
        *(_OWORD *)(a2 + 712) = 0u;
        *(_OWORD *)(a2 + 664) = 0u;
        *(_OWORD *)(a2 + 680) = 0u;
        *(_OWORD *)(a2 + 632) = 0u;
        *(_OWORD *)(a2 + 648) = 0u;
        *(_BYTE *)(a2 + 736) = 1;
      }
      LODWORD(__p) = 1;
      sub_224554038(a1[6], &__p);
      LODWORD(__p) = 3;
      sub_224554038(a1[6], &__p);
      sub_2232F33D8(a1, a2 + 640);
    }
    else
    {
      sub_2232F8D90(a2 + 632);
    }
  }
  else if (*(_BYTE *)(a2 + 744))
  {
    sub_2232E7854((uint64_t)v6);
    *(_BYTE *)(a2 + 744) = 0;
  }
  v118 = (void **)(a2 + 752);
  v361 = 0;
  sub_224553CF0(a1[6], &v361);
  if (!v361)
  {
    if (*(_BYTE *)(a2 + 816))
    {
      v139 = *(void **)(a2 + 784);
      if (v139)
      {
        *(_QWORD *)(a2 + 792) = v139;
        operator delete(v139);
      }
      v140 = (char *)*v118;
      if (*v118)
      {
        v141 = *(char **)(a2 + 760);
        v142 = *v118;
        if (v141 != v140)
        {
          do
          {
            if (*(v141 - 96))
              sub_2231A8050((uint64_t)(v141 - 1456));
            v141 -= 1472;
          }
          while (v141 != v140);
          v142 = *v118;
        }
        *(_QWORD *)(a2 + 760) = v140;
        operator delete(v142);
      }
      *(_BYTE *)(a2 + 816) = 0;
    }
    goto LABEL_306;
  }
  if (!*(_BYTE *)(a2 + 816))
  {
    *(_OWORD *)(a2 + 784) = 0u;
    *(_OWORD *)(a2 + 800) = 0u;
    *(_OWORD *)v118 = 0u;
    *(_OWORD *)(a2 + 768) = 0u;
    *(_BYTE *)(a2 + 816) = 1;
  }
  LODWORD(__p) = 1;
  sub_224554038(a1[6], &__p);
  v362 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a2 + 760) - *(_QWORD *)(a2 + 752)) >> 6);
  sub_2245543E8(a1[6], &v362);
  v119 = v362;
  v120 = *(char **)(a2 + 760);
  v121 = *(char **)(a2 + 752);
  v122 = 0xD37A6F4DE9BD37A7 * ((v120 - v121) >> 6);
  v123 = v362 - v122;
  if (v362 > v122)
  {
    v124 = *(_QWORD *)(a2 + 768);
    if (0xD37A6F4DE9BD37A7 * ((v124 - (uint64_t)v120) >> 6) >= v123)
    {
      v144 = 1472 * ((((1472 * v123 - 1472) >> 6) * (unsigned __int128)0xB21642C8590B217uLL) >> 64) + 1472;
      bzero(*(void **)(a2 + 760), v144);
      *(_QWORD *)(a2 + 760) = &v120[v144];
      v145 = &v120[v144];
      v146 = *v118;
      v147 = v145 - v146;
      if (v145 != v146)
        goto LABEL_265;
      goto LABEL_273;
    }
    if (v362 > 0x2C8590B21642C8)
      sub_22316E078();
    v125 = 0xD37A6F4DE9BD37A7 * ((v124 - (uint64_t)v121) >> 6);
    if (2 * v125 > v362)
      v119 = 2 * v125;
    if (v125 >= 0x1642C8590B2164)
      v119 = 0x2C8590B21642C8;
    if (v119 > 0x2C8590B21642C8)
      goto LABEL_588;
    v126 = 1472 * v119;
    v127 = (char *)operator new(1472 * v119);
    v128 = &v127[64 * ((v120 - v121) >> 6)];
    v129 = &v127[v126];
    v130 = 1472 * ((((1472 * v123 - 1472) >> 6) * (unsigned __int128)0xB21642C8590B217uLL) >> 64) + 1472;
    bzero(v128, v130);
    if (v120 == v121)
    {
      *(_QWORD *)(a2 + 752) = v128;
      *(_QWORD *)(a2 + 760) = &v128[v130];
      *(_QWORD *)(a2 + 768) = v129;
      v149 = (void **)(a2 + 752);
    }
    else
    {
      v351 = &v128[v130];
      v131 = 0;
      do
      {
        v136 = &v128[v131];
        v137 = &v120[v131];
        *(_OWORD *)&v128[v131 - 1472] = *(_OWORD *)&v120[v131 - 1472];
        v138 = &v128[v131 - 1456];
        *v138 = 0;
        v128[v131 - 96] = 0;
        if (v120[v131 - 96])
        {
          sub_22319E288((uint64_t)v138, (uint64_t)(v137 - 1456));
          *(v136 - 96) = 1;
        }
        v132 = *(_OWORD *)(v137 - 88);
        *(_OWORD *)(v136 - 72) = *(_OWORD *)(v137 - 72);
        *(_OWORD *)(v136 - 88) = v132;
        v133 = *(_OWORD *)(v137 - 56);
        v134 = *(_OWORD *)(v137 - 40);
        v135 = *(_OWORD *)(v137 - 24);
        *(v136 - 8) = *(v137 - 8);
        *(_OWORD *)(v136 - 24) = v135;
        *(_OWORD *)(v136 - 40) = v134;
        *(_OWORD *)(v136 - 56) = v133;
        v131 -= 1472;
      }
      while (&v120[v131] != v121);
      v120 = *(char **)(a2 + 752);
      v148 = *(char **)(a2 + 760);
      *(_QWORD *)(a2 + 752) = &v128[v131];
      *(_QWORD *)(a2 + 760) = v351;
      *(_QWORD *)(a2 + 768) = v129;
      if (v148 == v120)
      {
        v149 = (void **)(a2 + 752);
        if (!v120)
        {
LABEL_264:
          v150 = *(_BYTE **)(a2 + 760);
          v146 = *v149;
          v147 = v150 - v146;
          if (v150 != v146)
            goto LABEL_265;
          goto LABEL_273;
        }
LABEL_263:
        operator delete(v120);
        goto LABEL_264;
      }
      v149 = (void **)(a2 + 752);
      do
      {
        if (*(v148 - 96))
          sub_2231A8050((uint64_t)(v148 - 1456));
        v148 -= 1472;
      }
      while (v148 != v120);
    }
    if (!v120)
      goto LABEL_264;
    goto LABEL_263;
  }
  if (v362 < v122)
  {
    v143 = &v121[1472 * v362];
    while (v120 != v143)
    {
      if (*(v120 - 96))
        sub_2231A8050((uint64_t)(v120 - 1456));
      v120 -= 1472;
    }
    *(_QWORD *)(a2 + 760) = v143;
    v146 = *v118;
    v147 = v143 - v146;
    if (v143 == v146)
      goto LABEL_273;
    goto LABEL_265;
  }
  v146 = *v118;
  v147 = v120 - v146;
  if (v120 != v146)
  {
LABEL_265:
    v151 = 0;
    v152 = 1472 * (v147 / 1472);
    do
    {
      v155 = &v146[v151];
      LODWORD(__p) = 1;
      sub_224554038(a1[6], &__p);
      v156 = a1[6];
      sub_224553CF0(v156, &v146[v151]);
      sub_224553CF0(v156, &v146[v151 + 1]);
      sub_224553CF0(v156, &v146[v151 + 2]);
      sub_224553CF0(v156, &v146[v151 + 3]);
      sub_224553CF0(v156, &v146[v151 + 4]);
      sub_224553CF0(v156, &v146[v151 + 5]);
      sub_224553CF0(v156, &v146[v151 + 6]);
      sub_224553CF0(v156, &v146[v151 + 7]);
      sub_224553CF0(v156, &v146[v151 + 8]);
      sub_224553CF0(v156, &v146[v151 + 9]);
      sub_224553CF0(v156, &v146[v151 + 10]);
      sub_224553CF0(v156, &v146[v151 + 11]);
      sub_224553CF0(v156, &v146[v151 + 12]);
      sub_224553CF0(v156, &v146[v151 + 13]);
      sub_224553CF0(v156, &v146[v151 + 14]);
      sub_224553CF0(v156, &v146[v151 + 15]);
      LOBYTE(v355) = 0;
      sub_224553CF0(a1[6], &v355);
      if ((_BYTE)v355)
      {
        if (!v146[v151 + 1376])
        {
          bzero(v155 + 16, 0x550uLL);
          sub_2231B0DB0((uint64_t)(v155 + 16));
          v155[1376] = 1;
        }
        LODWORD(__p) = 11;
        sub_224554038(a1[6], &__p);
        sub_2231B14A8(a1, (uint64_t)(v155 + 16), __p);
      }
      else if (v146[v151 + 1376])
      {
        sub_2231A8050((uint64_t)(v155 + 16));
        v155[1376] = 0;
      }
      v153 = &v146[v151];
      v154 = a1[6];
      sub_2245544CC(v154, (float *)&v146[v151 + 1384]);
      sub_2245544CC(v154, (float *)&v146[v151 + 1388]);
      sub_2245544CC(v154, (float *)&v146[v151 + 1392]);
      sub_2245544CC(v154, (float *)&v146[v151 + 1396]);
      sub_2245544CC(v154, (float *)&v146[v151 + 1400]);
      sub_2245544CC(v154, (float *)&v146[v151 + 1404]);
      sub_2245544CC(v154, (float *)&v146[v151 + 1408]);
      sub_2245544CC(v154, (float *)&v146[v151 + 1412]);
      sub_2245544CC(v154, (float *)&v146[v151 + 1416]);
      sub_2245544CC(v154, (float *)&v146[v151 + 1420]);
      sub_2245544CC(v154, (float *)&v146[v151 + 1424]);
      sub_2245544CC(v154, (float *)&v146[v151 + 1428]);
      sub_2245544CC(v154, (float *)&v146[v151 + 1432]);
      sub_2245544CC(v154, (float *)&v146[v151 + 1436]);
      sub_2245544CC(v154, (float *)&v146[v151 + 1440]);
      sub_2245544CC(v154, (float *)&v146[v151 + 1444]);
      __p = 0;
      sub_2245542F8(a1[6], &__p);
      *((_QWORD *)v153 + 181) = __p;
      __p = 0;
      sub_2245542F8(a1[6], &__p);
      *((_QWORD *)v153 + 182) = __p;
      sub_224553CF0(a1[6], &v146[v151 + 1464]);
      v151 += 1472;
    }
    while (v152 != v151);
  }
LABEL_273:
  LOBYTE(v362) = 0;
  sub_224553CF0(a1[6], &v362);
  if ((_BYTE)v362)
  {
    if (!*(_BYTE *)(a2 + 777))
      *(_WORD *)(a2 + 776) = 256;
    LODWORD(__p) = 1;
    sub_224554038(a1[6], &__p);
    sub_224553CF0(a1[6], (_BYTE *)(a2 + 776));
  }
  else if (*(_BYTE *)(a2 + 777))
  {
    *(_BYTE *)(a2 + 777) = 0;
  }
  v362 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 792) - *(_QWORD *)(a2 + 784)) >> 5);
  sub_2245543E8(a1[6], &v362);
  v157 = v362;
  v158 = *(char **)(a2 + 792);
  v159 = *(char **)(a2 + 784);
  v160 = 0xCCCCCCCCCCCCCCCDLL * ((v158 - v159) >> 5);
  v161 = v362 - v160;
  if (v362 <= v160)
  {
    if (v362 < v160)
    {
      v158 = &v159[160 * v362];
      *(_QWORD *)(a2 + 792) = v158;
    }
  }
  else
  {
    v162 = *(_QWORD *)(a2 + 800);
    if (0xCCCCCCCCCCCCCCCDLL * ((v162 - (uint64_t)v158) >> 5) >= v161)
    {
      bzero(*(void **)(a2 + 792), 160 * ((160 * v161 - 160) / 0xA0) + 160);
      v168 = &v158[160 * ((160 * v161 - 160) / 0xA0) + 160];
      *(_QWORD *)(a2 + 792) = v168;
    }
    else
    {
      if (v362 > 0x199999999999999)
        sub_22316E078();
      v163 = 0xCCCCCCCCCCCCCCCDLL * ((v162 - (uint64_t)v159) >> 5);
      if (2 * v163 > v362)
        v157 = 2 * v163;
      if (v163 >= 0xCCCCCCCCCCCCCCLL)
        v157 = 0x199999999999999;
      if (v157 > 0x199999999999999)
        goto LABEL_588;
      v164 = 160 * v157;
      v165 = (char *)operator new(160 * v157);
      v166 = &v165[32 * ((v158 - v159) >> 5)];
      v167 = &v165[v164];
      bzero(v166, 160 * ((160 * v161 - 160) / 0xA0) + 160);
      v168 = &v166[160 * ((160 * v161 - 160) / 0xA0) + 160];
      if (v158 != v159)
      {
        do
        {
          v169 = *((_OWORD *)v158 - 9);
          *((_OWORD *)v166 - 10) = *((_OWORD *)v158 - 10);
          *((_OWORD *)v166 - 9) = v169;
          v170 = *((_OWORD *)v158 - 8);
          v171 = *((_OWORD *)v158 - 7);
          v172 = *((_OWORD *)v158 - 5);
          *((_OWORD *)v166 - 6) = *((_OWORD *)v158 - 6);
          *((_OWORD *)v166 - 5) = v172;
          *((_OWORD *)v166 - 8) = v170;
          *((_OWORD *)v166 - 7) = v171;
          v173 = *((_OWORD *)v158 - 4);
          v174 = *((_OWORD *)v158 - 3);
          v175 = *((_OWORD *)v158 - 1);
          *((_OWORD *)v166 - 2) = *((_OWORD *)v158 - 2);
          *((_OWORD *)v166 - 1) = v175;
          *((_OWORD *)v166 - 4) = v173;
          *((_OWORD *)v166 - 3) = v174;
          v166 -= 160;
          v158 -= 160;
        }
        while (v158 != v159);
        v158 = v159;
      }
      *(_QWORD *)(a2 + 784) = v166;
      *(_QWORD *)(a2 + 792) = v168;
      *(_QWORD *)(a2 + 800) = v167;
      if (v158)
      {
        operator delete(v158);
        v168 = *(char **)(a2 + 792);
      }
    }
    v159 = *(char **)(a2 + 784);
    v158 = v168;
  }
  if (v158 != v159)
  {
    v176 = 0;
    v177 = 160 * ((v158 - v159) / 160);
    do
    {
      v179 = &v159[v176];
      LODWORD(__p) = 1;
      sub_224554038(a1[6], &__p);
      v180 = a1[6];
      sub_224553CF0(v180, &v159[v176]);
      sub_224553CF0(v180, &v159[v176 + 1]);
      sub_224553CF0(v180, &v159[v176 + 2]);
      sub_224553CF0(v180, &v159[v176 + 3]);
      sub_224553CF0(v180, &v159[v176 + 4]);
      sub_224553CF0(v180, &v159[v176 + 5]);
      sub_224553CF0(v180, &v159[v176 + 6]);
      sub_224553CF0(v180, &v159[v176 + 7]);
      sub_224553CF0(v180, &v159[v176 + 8]);
      sub_224553CF0(v180, &v159[v176 + 9]);
      sub_224553CF0(v180, &v159[v176 + 10]);
      sub_224553CF0(v180, &v159[v176 + 11]);
      sub_224553CF0(v180, &v159[v176 + 12]);
      sub_224553CF0(v180, &v159[v176 + 13]);
      sub_224553CF0(v180, &v159[v176 + 14]);
      sub_224553CF0(v180, &v159[v176 + 15]);
      LOBYTE(v355) = 0;
      sub_224553CF0(a1[6], &v355);
      if ((_BYTE)v355)
      {
        v181 = v179 + 16;
        if (!v159[v176 + 152])
        {
          *((_QWORD *)v179 + 18) = 0;
          *((_OWORD *)v179 + 7) = 0u;
          *((_OWORD *)v179 + 8) = 0u;
          *((_OWORD *)v179 + 5) = 0u;
          *((_OWORD *)v179 + 6) = 0u;
          *((_OWORD *)v179 + 3) = 0u;
          *((_OWORD *)v179 + 4) = 0u;
          *v181 = 0u;
          *((_OWORD *)v179 + 2) = 0u;
          v179[152] = 1;
        }
        LODWORD(__p) = 1;
        sub_224554038(a1[6], &__p);
        __p = 0;
        sub_2245542F8(a1[6], &__p);
        *(_QWORD *)v181 = __p;
        v178 = a1[6];
        sub_224554604(v178, (double *)&v159[v176 + 24]);
        sub_224554604(v178, (double *)&v159[v176 + 32]);
        sub_224554604(v178, (double *)&v159[v176 + 40]);
        sub_224554604(v178, (double *)&v159[v176 + 48]);
        sub_224554604(v178, (double *)&v159[v176 + 56]);
        sub_224554604(v178, (double *)&v159[v176 + 64]);
        sub_224554604(v178, (double *)&v159[v176 + 72]);
        sub_224554604(v178, (double *)&v159[v176 + 80]);
        sub_224554604(v178, (double *)&v159[v176 + 88]);
        sub_224554604(v178, (double *)&v159[v176 + 96]);
        sub_224554604(v178, (double *)&v159[v176 + 104]);
        sub_224554604(v178, (double *)&v159[v176 + 112]);
        sub_224554604(v178, (double *)&v159[v176 + 120]);
        sub_224554604(v178, (double *)&v159[v176 + 128]);
        sub_224554604(v178, (double *)&v159[v176 + 136]);
        sub_224554604(v178, (double *)&v159[v176 + 144]);
      }
      else if (v159[v176 + 152])
      {
        v179[152] = 0;
      }
      v176 += 160;
    }
    while (v177 != v176);
  }
  __p = 0;
  sub_2245542F8(a1[6], &__p);
  *(_QWORD *)(a2 + 808) = __p;
LABEL_306:
  v182 = (_OWORD *)(a2 + 824);
  v354 = 0;
  sub_224553CF0(a1[6], &v354);
  if (v354)
  {
    if (!*(_BYTE *)(a2 + 896))
    {
      *(_QWORD *)(a2 + 888) = 0;
      *(_OWORD *)(a2 + 856) = 0u;
      *(_OWORD *)(a2 + 872) = 0u;
      *v182 = 0u;
      *(_OWORD *)(a2 + 840) = 0u;
      *(_BYTE *)(a2 + 896) = 1;
    }
    LODWORD(__p) = 1;
    sub_224554038(a1[6], &__p);
    v355 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(_QWORD *)(a2 + 832) - *(_QWORD *)(a2 + 824)) >> 3);
    sub_2245543E8(a1[6], &v355);
    v183 = v355;
    v184 = *(_QWORD *)(a2 + 832);
    v185 = *(_QWORD *)(a2 + 824);
    v186 = v184 - v185;
    v187 = 0xCBEEA4E1A08AD8F3 * ((v184 - v185) >> 3);
    v188 = v355 - v187;
    if (v355 <= v187)
    {
      if (v355 >= v187)
      {
        v198 = *(_QWORD *)(a2 + 832);
        v199 = *(_QWORD *)v182;
        if (v184 == v199)
        {
LABEL_529:
          v362 = (uint64_t)(*(_QWORD *)(a2 + 856) - *(_QWORD *)(a2 + 848)) >> 4;
          sub_2245543E8(a1[6], &v362);
          v303 = *(_QWORD *)(a2 + 856);
          v304 = *(_QWORD *)(a2 + 848);
          v305 = (v303 - v304) >> 4;
          if (v362 <= v305)
          {
            if (v362 < v305)
            {
              v303 = v304 + 16 * v362;
              *(_QWORD *)(a2 + 856) = v303;
            }
          }
          else
          {
            sub_2232C68D0((char **)(a2 + 848), v362 - v305);
            v304 = *(_QWORD *)(a2 + 848);
            v303 = *(_QWORD *)(a2 + 856);
          }
          if (v303 != v304)
          {
            v306 = v303;
            do
            {
              v307 = 0;
              v308 = a1[6];
              do
              {
                sub_2245564B0(v308, (uint64_t)&__p);
                if ((_DWORD)__p != 2 || (unint64_t)v357 >= 0x100)
                {
                  v329 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                  v329->__vftable = 0;
                  v330 = std::bad_cast::bad_cast(v329);
                  v330->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
                  __cxa_throw(v330, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
                }
                *(_BYTE *)(v304 + v307) = v357;
                v309 = v359;
                v359 = 0;
                if (v309)
                {
                  for (i2 = (char *)*((_QWORD *)v309 + 4); i2 != *((char **)v309 + 6); i2 -= 16)
                  {
                    v312 = (void (*)(uint64_t))*((_QWORD *)i2 - 2);
                    v311 = *((_QWORD *)i2 - 1);
                    v312(v311);
                  }
                  free(i2);
                  v313 = (_QWORD *)*((_QWORD *)v309 + 3);
                  if (v313)
                  {
                    do
                    {
                      v314 = (_QWORD *)*v313;
                      free(v313);
                      v313 = v314;
                    }
                    while (v314);
                  }
                  free(v309);
                }
                ++v307;
              }
              while (v307 != 16);
              v304 += 16;
            }
            while (v304 != v306);
          }
          v362 = (uint64_t)(*(_QWORD *)(a2 + 880) - *(_QWORD *)(a2 + 872)) >> 4;
          sub_2245543E8(a1[6], &v362);
          v315 = *(_QWORD *)(a2 + 880);
          v316 = *(_QWORD *)(a2 + 872);
          v317 = (v315 - v316) >> 4;
          if (v362 <= v317)
          {
            if (v362 < v317)
            {
              v315 = v316 + 16 * v362;
              *(_QWORD *)(a2 + 880) = v315;
            }
          }
          else
          {
            sub_2232C68D0((char **)(a2 + 872), v362 - v317);
            v316 = *(_QWORD *)(a2 + 872);
            v315 = *(_QWORD *)(a2 + 880);
          }
          if (v315 != v316)
          {
            v318 = v315;
            do
            {
              v319 = 0;
              v320 = a1[6];
              do
              {
                sub_2245564B0(v320, (uint64_t)&__p);
                if ((_DWORD)__p != 2 || (unint64_t)v357 >= 0x100)
                {
                  v331 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                  v331->__vftable = 0;
                  v332 = std::bad_cast::bad_cast(v331);
                  v332->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
                  __cxa_throw(v332, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
                }
                *(_BYTE *)(v316 + v319) = v357;
                v321 = v359;
                v359 = 0;
                if (v321)
                {
                  for (i3 = (char *)*((_QWORD *)v321 + 4); i3 != *((char **)v321 + 6); i3 -= 16)
                  {
                    v324 = (void (*)(uint64_t))*((_QWORD *)i3 - 2);
                    v323 = *((_QWORD *)i3 - 1);
                    v324(v323);
                  }
                  free(i3);
                  v325 = (_QWORD *)*((_QWORD *)v321 + 3);
                  if (v325)
                  {
                    do
                    {
                      v326 = (_QWORD *)*v325;
                      free(v325);
                      v325 = v326;
                    }
                    while (v326);
                  }
                  free(v321);
                }
                ++v319;
              }
              while (v319 != 16);
              v316 += 16;
            }
            while (v316 != v318);
          }
          goto LABEL_567;
        }
LABEL_343:
        v353 = v198;
        while (1)
        {
          LODWORD(__p) = 1;
          sub_224554038(a1[6], &__p);
          v205 = a1[6];
          sub_224553CF0(v205, (_BYTE *)v199);
          sub_224553CF0(v205, (_BYTE *)(v199 + 1));
          sub_224553CF0(v205, (_BYTE *)(v199 + 2));
          sub_224553CF0(v205, (_BYTE *)(v199 + 3));
          sub_224553CF0(v205, (_BYTE *)(v199 + 4));
          sub_224553CF0(v205, (_BYTE *)(v199 + 5));
          sub_224553CF0(v205, (_BYTE *)(v199 + 6));
          sub_224553CF0(v205, (_BYTE *)(v199 + 7));
          sub_224553CF0(v205, (_BYTE *)(v199 + 8));
          sub_224553CF0(v205, (_BYTE *)(v199 + 9));
          sub_224553CF0(v205, (_BYTE *)(v199 + 10));
          sub_224553CF0(v205, (_BYTE *)(v199 + 11));
          sub_224553CF0(v205, (_BYTE *)(v199 + 12));
          sub_224553CF0(v205, (_BYTE *)(v199 + 13));
          sub_224553CF0(v205, (_BYTE *)(v199 + 14));
          sub_224553CF0(v205, (_BYTE *)(v199 + 15));
          LODWORD(__p) = 1;
          sub_224554038(a1[6], &__p);
          v206 = a1[6];
          sub_2245544CC(v206, (float *)(v199 + 16));
          sub_2245544CC(v206, (float *)(v199 + 20));
          sub_2245544CC(v206, (float *)(v199 + 24));
          v207 = a1[6];
          sub_2245544CC(v207, (float *)(v199 + 28));
          sub_2245544CC(v207, (float *)(v199 + 32));
          sub_2245544CC(v207, (float *)(v199 + 36));
          v208 = a1[6];
          sub_2245544CC(v208, (float *)(v199 + 40));
          sub_2245544CC(v208, (float *)(v199 + 44));
          sub_2245544CC(v208, (float *)(v199 + 48));
          sub_2245544CC(v208, (float *)(v199 + 52));
          sub_2245544CC(v208, (float *)(v199 + 56));
          sub_2245544CC(v208, (float *)(v199 + 60));
          sub_2245544CC(v208, (float *)(v199 + 64));
          sub_2245544CC(v208, (float *)(v199 + 68));
          sub_2245544CC(v208, (float *)(v199 + 72));
          sub_2245544CC(v208, (float *)(v199 + 76));
          sub_2245544CC(v208, (float *)(v199 + 80));
          sub_2245544CC(v208, (float *)(v199 + 84));
          sub_2245544CC(v208, (float *)(v199 + 88));
          sub_2245544CC(v208, (float *)(v199 + 92));
          sub_2245544CC(v208, (float *)(v199 + 96));
          sub_2245544CC(v208, (float *)(v199 + 100));
          sub_224553CF0(a1[6], (_BYTE *)(v199 + 104));
          sub_2245544CC(a1[6], (float *)(v199 + 108));
          LOBYTE(v362) = 0;
          sub_224553CF0(a1[6], &v362);
          if ((_BYTE)v362)
          {
            if (!*(_BYTE *)(v199 + 216))
            {
              *(_QWORD *)(v199 + 208) = 0;
              *(_OWORD *)(v199 + 176) = 0u;
              *(_OWORD *)(v199 + 192) = 0u;
              *(_OWORD *)(v199 + 144) = 0u;
              *(_OWORD *)(v199 + 160) = 0u;
              *(_OWORD *)(v199 + 112) = 0u;
              *(_OWORD *)(v199 + 128) = 0u;
              *(_BYTE *)(v199 + 216) = 1;
            }
            LODWORD(__p) = 1;
            sub_224554038(a1[6], &__p);
            sub_224553CF0(a1[6], (_BYTE *)(v199 + 112));
            LODWORD(__p) = 1;
            sub_224554038(a1[6], &__p);
            v209 = a1[6];
            sub_224554604(v209, (double *)(v199 + 120));
            sub_224554604(v209, (double *)(v199 + 128));
            sub_224554604(v209, (double *)(v199 + 136));
            sub_224554604(v209, (double *)(v199 + 144));
            sub_224554604(v209, (double *)(v199 + 152));
            sub_224554604(v209, (double *)(v199 + 160));
            sub_224554604(v209, (double *)(v199 + 168));
            sub_224554604(v209, (double *)(v199 + 176));
            sub_224554604(v209, (double *)(v199 + 184));
            sub_224554604(v209, (double *)(v199 + 192));
            sub_224554604(v209, (double *)(v199 + 200));
            sub_224554604(v209, (double *)(v199 + 208));
          }
          else if (*(_BYTE *)(v199 + 216))
          {
            *(_BYTE *)(v199 + 216) = 0;
          }
          sub_224554038(a1[6], (_DWORD *)(v199 + 224));
          LODWORD(__p) = 2;
          sub_224554038(a1[6], &__p);
          sub_2232F8E20((uint64_t)a1, v199 + 232, __p);
          v362 = (uint64_t)(*(_QWORD *)(v199 + 296) - *(_QWORD *)(v199 + 288)) >> 4;
          sub_2245543E8(a1[6], &v362);
          v211 = *(_QWORD *)(v199 + 288);
          v210 = *(_QWORD *)(v199 + 296);
          v212 = (v210 - v211) >> 4;
          if (v362 <= v212)
          {
            if (v362 < v212)
            {
              v210 = v211 + 16 * v362;
              *(_QWORD *)(v199 + 296) = v210;
            }
          }
          else
          {
            sub_2232C68D0((char **)(v199 + 288), v362 - v212);
            v211 = *(_QWORD *)(v199 + 288);
            v210 = *(_QWORD *)(v199 + 296);
          }
          if (v210 != v211)
          {
            v213 = v210;
            do
            {
              v214 = 0;
              v215 = a1[6];
              do
              {
                sub_2245564B0(v215, (uint64_t)&__p);
                if ((_DWORD)__p != 2 || (unint64_t)v357 >= 0x100)
                {
                  v327 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                  v327->__vftable = 0;
                  v328 = std::bad_cast::bad_cast(v327);
                  v328->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
                  __cxa_throw(v328, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
                }
                *(_BYTE *)(v211 + v214) = v357;
                v216 = v359;
                v359 = 0;
                if (v216)
                {
                  for (i4 = (char *)*((_QWORD *)v216 + 4); i4 != *((char **)v216 + 6); i4 -= 16)
                  {
                    v219 = (void (*)(uint64_t))*((_QWORD *)i4 - 2);
                    v218 = *((_QWORD *)i4 - 1);
                    v219(v218);
                  }
                  free(i4);
                  v220 = (_QWORD *)*((_QWORD *)v216 + 3);
                  if (v220)
                  {
                    do
                    {
                      v221 = (_QWORD *)*v220;
                      free(v220);
                      v220 = v221;
                    }
                    while (v221);
                  }
                  free(v216);
                }
                ++v214;
              }
              while (v214 != 16);
              v211 += 16;
            }
            while (v211 != v213);
          }
          LOBYTE(v362) = 0;
          sub_224553CF0(a1[6], &v362);
          if ((_BYTE)v362)
          {
            if (!*(_BYTE *)(v199 + 328))
            {
              *(_QWORD *)(v199 + 312) = 0;
              *(_QWORD *)(v199 + 320) = 0;
              *(_BYTE *)(v199 + 328) = 1;
            }
            LODWORD(__p) = 1;
            sub_224554038(a1[6], &__p);
            v222 = a1[6];
            sub_2245544CC(v222, (float *)(v199 + 312));
            sub_2245544CC(v222, (float *)(v199 + 316));
            v223 = a1[6];
            sub_2245544CC(v223, (float *)(v199 + 320));
            sub_2245544CC(v223, (float *)(v199 + 324));
          }
          else if (*(_BYTE *)(v199 + 328))
          {
            *(_BYTE *)(v199 + 328) = 0;
          }
          LOBYTE(__p) = 0;
          sub_224553CF0(a1[6], &__p);
          if ((_BYTE)__p)
          {
            v224 = (float *)(v199 + 332);
            v225 = v353;
            if (!*(_BYTE *)(v199 + 364))
            {
              *(_OWORD *)v224 = 0u;
              *(_OWORD *)(v199 + 348) = 0u;
              *(_BYTE *)(v199 + 364) = 1;
            }
            v226 = a1[6];
            sub_2245544CC(v226, v224);
            sub_2245544CC(v226, (float *)(v199 + 336));
            v227 = a1[6];
            sub_2245544CC(v227, (float *)(v199 + 340));
            sub_2245544CC(v227, (float *)(v199 + 344));
            v228 = a1[6];
            sub_2245544CC(v228, (float *)(v199 + 348));
            sub_2245544CC(v228, (float *)(v199 + 352));
            v229 = a1[6];
            sub_2245544CC(v229, (float *)(v199 + 356));
            sub_2245544CC(v229, (float *)(v199 + 360));
          }
          else
          {
            v225 = v353;
            if (*(_BYTE *)(v199 + 364))
              *(_BYTE *)(v199 + 364) = 0;
          }
          v230 = (void **)(v199 + 368);
          v361 = 0;
          sub_224553CF0(a1[6], &v361);
          if (v361)
          {
            if (!*(_BYTE *)(v199 + 392))
            {
              *v230 = 0;
              *(_QWORD *)(v199 + 376) = 0;
              *(_QWORD *)(v199 + 384) = 0;
              *(_BYTE *)(v199 + 392) = 1;
            }
            LODWORD(__p) = 1;
            sub_224554038(a1[6], &__p);
            v362 = (uint64_t)(*(_QWORD *)(v199 + 376) - *(_QWORD *)(v199 + 368)) >> 3;
            sub_2245543E8(a1[6], &v362);
            v232 = *(float **)(v199 + 368);
            v231 = *(float **)(v199 + 376);
            v233 = ((char *)v231 - (char *)v232) >> 3;
            if (v362 <= v233)
            {
              if (v362 < v233)
              {
                v231 = &v232[2 * v362];
                *(_QWORD *)(v199 + 376) = v231;
              }
            }
            else
            {
              sub_2232F8F14((void **)(v199 + 368), v362 - v233);
              v232 = *(float **)(v199 + 368);
              v231 = *(float **)(v199 + 376);
            }
            if (v231 != v232)
            {
              v235 = v231;
              while (1)
              {
                v236 = a1[6];
                sub_2245564B0(v236, (uint64_t)&__p);
                if ((_DWORD)__p == 2)
                  break;
                if ((_DWORD)__p == 3)
                {
                  *v232 = (float)v357;
                  v238 = v359;
                  v359 = 0;
                  if (!v238)
                    goto LABEL_412;
                  goto LABEL_406;
                }
                if ((_DWORD)__p != 4)
                  goto LABEL_582;
                v237 = *(double *)&v357;
                *v232 = v237;
                v238 = v359;
                v359 = 0;
                if (v238)
                  goto LABEL_406;
LABEL_412:
                sub_2245564B0(v236, (uint64_t)&__p);
                switch((_DWORD)__p)
                {
                  case 2:
                    v232[1] = (float)(unint64_t)v357;
                    v244 = v359;
                    v359 = 0;
                    if (v244)
                      goto LABEL_420;
                    break;
                  case 4:
                    v245 = *(double *)&v357;
                    v232[1] = v245;
                    v244 = v359;
                    v359 = 0;
                    if (v244)
                      goto LABEL_420;
                    break;
                  case 3:
                    v232[1] = (float)v357;
                    v244 = v359;
                    v359 = 0;
                    if (v244)
                    {
LABEL_420:
                      for (i5 = (char *)*((_QWORD *)v244 + 4); i5 != *((char **)v244 + 6); i5 -= 16)
                      {
                        v248 = (void (*)(uint64_t))*((_QWORD *)i5 - 2);
                        v247 = *((_QWORD *)i5 - 1);
                        v248(v247);
                      }
                      free(i5);
                      v249 = (_QWORD *)*((_QWORD *)v244 + 3);
                      if (v249)
                      {
                        do
                        {
                          v250 = (_QWORD *)*v249;
                          free(v249);
                          v249 = v250;
                        }
                        while (v250);
                      }
                      free(v244);
                    }
                    break;
                  default:
LABEL_582:
                    v339 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                    v339->__vftable = 0;
                    v340 = std::bad_cast::bad_cast(v339);
                    v340->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
                    __cxa_throw(v340, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
                }
                v232 += 2;
                if (v232 == v235)
                  goto LABEL_426;
              }
              *v232 = (float)(unint64_t)v357;
              v238 = v359;
              v359 = 0;
              if (!v238)
                goto LABEL_412;
LABEL_406:
              for (i6 = (char *)*((_QWORD *)v238 + 4); i6 != *((char **)v238 + 6); i6 -= 16)
              {
                v241 = (void (*)(uint64_t))*((_QWORD *)i6 - 2);
                v240 = *((_QWORD *)i6 - 1);
                v241(v240);
              }
              free(i6);
              v242 = (_QWORD *)*((_QWORD *)v238 + 3);
              if (v242)
              {
                do
                {
                  v243 = (_QWORD *)*v242;
                  free(v242);
                  v242 = v243;
                }
                while (v243);
              }
              free(v238);
              goto LABEL_412;
            }
          }
          else if (*(_BYTE *)(v199 + 392))
          {
            v234 = *v230;
            if (*v230)
            {
              *(_QWORD *)(v199 + 376) = v234;
              operator delete(v234);
            }
            *(_BYTE *)(v199 + 392) = 0;
          }
LABEL_426:
          v251 = (void **)(v199 + 400);
          v361 = 0;
          sub_224553CF0(a1[6], &v361);
          if (v361)
          {
            if (*(_BYTE *)(v199 + 424))
            {
              v253 = *(_QWORD *)(v199 + 400);
              v252 = *(_QWORD *)(v199 + 408);
            }
            else
            {
              v253 = 0;
              v252 = 0;
              *v251 = 0;
              *(_QWORD *)(v199 + 408) = 0;
              *(_QWORD *)(v199 + 416) = 0;
              *(_BYTE *)(v199 + 424) = 1;
            }
            v362 = (v252 - v253) >> 4;
            sub_2245543E8(a1[6], &v362);
            v256 = *(float **)(v199 + 400);
            v255 = *(float **)(v199 + 408);
            v257 = ((char *)v255 - (char *)v256) >> 4;
            if (v362 <= v257)
            {
              if (v362 < v257)
              {
                v255 = &v256[4 * v362];
                *(_QWORD *)(v199 + 408) = v255;
              }
            }
            else
            {
              sub_2232C68D0((char **)(v199 + 400), v362 - v257);
              v256 = *(float **)(v199 + 400);
              v255 = *(float **)(v199 + 408);
            }
            if (v255 != v256)
            {
              v258 = v255;
              while (1)
              {
                sub_2245564B0(a1[6], (uint64_t)&__p);
                if ((_DWORD)__p != 2 || HIDWORD(v357) != 0)
                {
                  v337 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                  v337->__vftable = 0;
                  v338 = std::bad_cast::bad_cast(v337);
                  v338->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
                  __cxa_throw(v338, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
                }
                v260 = v359;
                v359 = 0;
                if (v260)
                {
                  for (i7 = (char *)*((_QWORD *)v260 + 4); i7 != *((char **)v260 + 6); i7 -= 16)
                  {
                    v263 = (void (*)(uint64_t))*((_QWORD *)i7 - 2);
                    v262 = *((_QWORD *)i7 - 1);
                    v263(v262);
                  }
                  free(i7);
                  v264 = (_QWORD *)*((_QWORD *)v260 + 3);
                  if (v264)
                  {
                    do
                    {
                      v265 = (_QWORD *)*v264;
                      free(v264);
                      v264 = v265;
                    }
                    while (v265);
                  }
                  free(v260);
                }
                v266 = a1[6];
                sub_2245564B0(v266, (uint64_t)&__p);
                if ((_DWORD)__p == 2)
                  break;
                if ((_DWORD)__p == 3)
                {
                  *v256 = (float)v357;
                  v268 = v359;
                  v359 = 0;
                  if (!v268)
                    goto LABEL_468;
                  goto LABEL_462;
                }
                if ((_DWORD)__p != 4)
                  goto LABEL_583;
                v267 = *(double *)&v357;
                *v256 = v267;
                v268 = v359;
                v359 = 0;
                if (v268)
                  goto LABEL_462;
LABEL_468:
                sub_2245564B0(v266, (uint64_t)&__p);
                if ((_DWORD)__p == 2)
                {
                  v256[1] = (float)(unint64_t)v357;
                  v274 = v359;
                  v359 = 0;
                  if (!v274)
                    goto LABEL_482;
LABEL_476:
                  for (i8 = (char *)*((_QWORD *)v274 + 4); i8 != *((char **)v274 + 6); i8 -= 16)
                  {
                    v278 = (void (*)(uint64_t))*((_QWORD *)i8 - 2);
                    v277 = *((_QWORD *)i8 - 1);
                    v278(v277);
                  }
                  free(i8);
                  v279 = (_QWORD *)*((_QWORD *)v274 + 3);
                  if (v279)
                  {
                    do
                    {
                      v280 = (_QWORD *)*v279;
                      free(v279);
                      v279 = v280;
                    }
                    while (v280);
                  }
                  free(v274);
                  goto LABEL_482;
                }
                if ((_DWORD)__p == 4)
                {
                  v275 = *(double *)&v357;
                  v256[1] = v275;
                  v274 = v359;
                  v359 = 0;
                  if (!v274)
                    goto LABEL_482;
                  goto LABEL_476;
                }
                if ((_DWORD)__p != 3)
                {
LABEL_583:
                  v341 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                  v341->__vftable = 0;
                  v342 = std::bad_cast::bad_cast(v341);
                  v342->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
                  __cxa_throw(v342, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
                }
                v256[1] = (float)v357;
                v274 = v359;
                v359 = 0;
                if (v274)
                  goto LABEL_476;
LABEL_482:
                v281 = a1[6];
                sub_2245564B0(v281, (uint64_t)&__p);
                if ((_DWORD)__p == 2)
                {
                  v256[2] = (float)(unint64_t)v357;
                  v283 = v359;
                  v359 = 0;
                  if (!v283)
                    goto LABEL_496;
LABEL_490:
                  for (i9 = (char *)*((_QWORD *)v283 + 4); i9 != *((char **)v283 + 6); i9 -= 16)
                  {
                    v286 = (void (*)(uint64_t))*((_QWORD *)i9 - 2);
                    v285 = *((_QWORD *)i9 - 1);
                    v286(v285);
                  }
                  free(i9);
                  v287 = (_QWORD *)*((_QWORD *)v283 + 3);
                  if (v287)
                  {
                    do
                    {
                      v288 = (_QWORD *)*v287;
                      free(v287);
                      v287 = v288;
                    }
                    while (v288);
                  }
                  free(v283);
                  goto LABEL_496;
                }
                if ((_DWORD)__p == 3)
                {
                  v256[2] = (float)v357;
                  v283 = v359;
                  v359 = 0;
                  if (!v283)
                    goto LABEL_496;
                  goto LABEL_490;
                }
                if ((_DWORD)__p != 4)
                  goto LABEL_584;
                v282 = *(double *)&v357;
                v256[2] = v282;
                v283 = v359;
                v359 = 0;
                if (v283)
                  goto LABEL_490;
LABEL_496:
                sub_2245564B0(v281, (uint64_t)&__p);
                switch((_DWORD)__p)
                {
                  case 2:
                    v256[3] = (float)(unint64_t)v357;
                    v289 = v359;
                    v359 = 0;
                    if (v289)
                      goto LABEL_504;
                    break;
                  case 4:
                    v290 = *(double *)&v357;
                    v256[3] = v290;
                    v289 = v359;
                    v359 = 0;
                    if (v289)
                      goto LABEL_504;
                    break;
                  case 3:
                    v256[3] = (float)v357;
                    v289 = v359;
                    v359 = 0;
                    if (v289)
                    {
LABEL_504:
                      for (i10 = (char *)*((_QWORD *)v289 + 4); i10 != *((char **)v289 + 6); i10 -= 16)
                      {
                        v293 = (void (*)(uint64_t))*((_QWORD *)i10 - 2);
                        v292 = *((_QWORD *)i10 - 1);
                        v293(v292);
                      }
                      free(i10);
                      v294 = (_QWORD *)*((_QWORD *)v289 + 3);
                      if (v294)
                      {
                        do
                        {
                          v295 = (_QWORD *)*v294;
                          free(v294);
                          v294 = v295;
                        }
                        while (v295);
                      }
                      free(v289);
                    }
                    break;
                  default:
LABEL_584:
                    v343 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                    v343->__vftable = 0;
                    v344 = std::bad_cast::bad_cast(v343);
                    v344->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
                    __cxa_throw(v344, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
                }
                v256 += 4;
                if (v256 == v258)
                  goto LABEL_510;
              }
              *v256 = (float)(unint64_t)v357;
              v268 = v359;
              v359 = 0;
              if (!v268)
                goto LABEL_468;
LABEL_462:
              for (i11 = (char *)*((_QWORD *)v268 + 4); i11 != *((char **)v268 + 6); i11 -= 16)
              {
                v271 = (void (*)(uint64_t))*((_QWORD *)i11 - 2);
                v270 = *((_QWORD *)i11 - 1);
                v271(v270);
              }
              free(i11);
              v272 = (_QWORD *)*((_QWORD *)v268 + 3);
              if (v272)
              {
                do
                {
                  v273 = (_QWORD *)*v272;
                  free(v272);
                  v272 = v273;
                }
                while (v273);
              }
              free(v268);
              goto LABEL_468;
            }
          }
          else if (*(_BYTE *)(v199 + 424))
          {
            v254 = *v251;
            if (*v251)
            {
              *(_QWORD *)(v199 + 408) = v254;
              operator delete(v254);
            }
            *(_BYTE *)(v199 + 424) = 0;
          }
LABEL_510:
          v296 = (void **)(v199 + 432);
          LOBYTE(__p) = 0;
          sub_224553CF0(a1[6], &__p);
          if ((_BYTE)__p)
          {
            if (!*(_BYTE *)(v199 + 456))
            {
              *v296 = 0;
              *(_QWORD *)(v199 + 440) = 0;
              *(_QWORD *)(v199 + 448) = 0;
              *(_BYTE *)(v199 + 456) = 1;
            }
            sub_2232F90B4((uint64_t)a1, (_QWORD *)(v199 + 432));
          }
          else if (*(_BYTE *)(v199 + 456))
          {
            v297 = (char *)*v296;
            if (*v296)
            {
              v298 = *(char **)(v199 + 440);
              v299 = *v296;
              if (v298 != v297)
              {
                v300 = *(char **)(v199 + 440);
                do
                {
                  v302 = (void *)*((_QWORD *)v300 - 3);
                  v300 -= 24;
                  v301 = v302;
                  if (v302)
                  {
                    *((_QWORD *)v298 - 2) = v301;
                    operator delete(v301);
                  }
                  v298 = v300;
                }
                while (v300 != v297);
                v299 = *v296;
              }
              *(_QWORD *)(v199 + 440) = v297;
              operator delete(v299);
            }
            *(_BYTE *)(v199 + 456) = 0;
          }
          LOBYTE(__p) = 0;
          sub_224553CF0(a1[6], &__p);
          if ((_BYTE)__p)
          {
            if (!*(_BYTE *)(v199 + 465))
              *(_WORD *)(v199 + 464) = 256;
            sub_224553CF0(a1[6], (_BYTE *)(v199 + 464));
          }
          else if (*(_BYTE *)(v199 + 465))
          {
            *(_BYTE *)(v199 + 465) = 0;
          }
          v199 += 472;
          if (v199 == v225)
            goto LABEL_529;
        }
      }
      v198 = v185 + 472 * v355;
      while (v184 != v198)
      {
        v184 -= 472;
        sub_2232E7664(v184);
      }
    }
    else
    {
      v189 = *(_QWORD *)(a2 + 840);
      if (0xCBEEA4E1A08AD8F3 * ((v189 - v184) >> 3) < v188)
      {
        if (v355 > 0x8AD8F2FBA93868)
          sub_22316E078();
        v190 = 0xCBEEA4E1A08AD8F3 * ((v189 - v185) >> 3);
        v191 = 2 * v190;
        if (2 * v190 <= v355)
          v191 = v355;
        if (v190 >= 0x456C797DD49C34)
          v192 = 0x8AD8F2FBA93868;
        else
          v192 = v191;
        v360 = a2 + 840;
        if (v192 <= 0x8AD8F2FBA93868)
        {
          v193 = 472 * v192;
          v194 = (char *)operator new(472 * v192);
          __p = v194;
          v357 = (uint64_t)&v194[472 * v187];
          v359 = &v194[v193];
          v195 = 472 * v183;
          bzero((void *)v357, 472 * ((v195 - v186 - 472) / 0x1D8uLL) + 472);
          v358 = &v194[v195];
          sub_2232E9D2C((uint64_t *)(a2 + 824), &__p);
          v196 = v357;
          for (i12 = (uint64_t)v358; i12 != v196; sub_2232E7664(i12))
            i12 -= 472;
          if (__p)
            operator delete(__p);
          v198 = *(_QWORD *)(a2 + 832);
          v199 = *(_QWORD *)v182;
          if (v198 == v199)
            goto LABEL_529;
          goto LABEL_343;
        }
LABEL_588:
        sub_223174E94();
      }
      v198 = v184 + 472 * v188;
      bzero(*(void **)(a2 + 832), 472 * ((472 * v355 - v186 - 472) / 0x1D8) + 472);
    }
    *(_QWORD *)(a2 + 832) = v198;
    v199 = *(_QWORD *)v182;
    if (v198 == v199)
      goto LABEL_529;
    goto LABEL_343;
  }
  if (*(_BYTE *)(a2 + 896))
  {
    v200 = *(void **)(a2 + 872);
    if (v200)
    {
      *(_QWORD *)(a2 + 880) = v200;
      operator delete(v200);
    }
    v201 = *(void **)(a2 + 848);
    if (v201)
    {
      *(_QWORD *)(a2 + 856) = v201;
      operator delete(v201);
    }
    v202 = *(_QWORD *)v182;
    if (*(_QWORD *)v182)
    {
      v203 = *(_QWORD *)(a2 + 832);
      v204 = *(void **)v182;
      if (v203 != v202)
      {
        do
        {
          v203 -= 472;
          sub_2232E7664(v203);
        }
        while (v203 != v202);
        v204 = *(void **)v182;
      }
      *(_QWORD *)(a2 + 832) = v202;
      operator delete(v204);
    }
    *(_BYTE *)(a2 + 896) = 0;
  }
LABEL_567:
  if (v352 >= 2)
  {
    LOBYTE(__p) = 0;
    sub_224553CF0(a1[6], &__p);
    if ((_BYTE)__p)
    {
      if (!*(_BYTE *)(a2 + 908))
      {
        *(_DWORD *)(a2 + 904) = 0;
        *(_BYTE *)(a2 + 908) = 1;
      }
      sub_224554038(a1[6], (_DWORD *)(a2 + 904));
    }
    else if (*(_BYTE *)(a2 + 908))
    {
      *(_BYTE *)(a2 + 908) = 0;
    }
  }
}

