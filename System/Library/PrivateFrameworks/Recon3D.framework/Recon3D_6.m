void sub_2233AF9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,std::__shared_weak_count *a58,int a59,__int16 a60,char a61,char a62)
{
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;

  sub_2241231D8(v63);
  v65 = a58;
  if (a58)
  {
    p_shared_owners = (unint64_t *)&a58->__shared_owners_;
    do
      v67 = __ldaxr(p_shared_owners);
    while (__stlxr(v67 - 1, p_shared_owners));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  sub_2241231D8((uint64_t)&a34);
  if (v62)
  {
    v68 = (unint64_t *)&v62->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  sub_2241231D8((uint64_t)&a50);
  if (a32 < 0)
    operator delete(__p);
  sub_2231874DC((uint64_t)&a11);
  if (a24 < 0)
  {
    operator delete(a19);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2233AFDB8(_OWORD *a1, const std::string::value_type *a2, double a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::mutex *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const std::string::value_type *v14;
  void *v15;
  void **v16;
  void *v17;
  void **v18;
  void *v19;
  uint64_t v20;
  int v21;
  int v22;
  double v23;
  unsigned __int8 v24;
  std::string *v25;
  __int128 v26;
  int v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  void **v32;
  size_t v33;
  uint64_t v34;
  int v35;
  unsigned __int8 v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  std::mutex *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const std::string::value_type *v44;
  void *v45;
  void **v46;
  void *v47;
  void **v48;
  void *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  size_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  const std::string::value_type *v59;
  void *v60;
  void **v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  std::mutex *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void **v69;
  void *v70;
  void **v71;
  void *v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned __int8 v75;
  std::string *v76;
  __int128 v77;
  int v78;
  const std::string::value_type *v79;
  std::string::size_type v80;
  std::string *v81;
  __int128 v82;
  void **v83;
  size_t v84;
  uint64_t v85;
  int v86;
  int32x4_t v87;
  int32x4_t v88;
  float32x4_t v89;
  float32x2_t v90;
  unsigned __int8 v91;
  std::string *v92;
  __int128 v93;
  int v94;
  const std::string::value_type *v95;
  std::string::size_type v96;
  std::string *v97;
  __int128 v98;
  std::string *v99;
  __int128 v100;
  void **v101;
  size_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint64_t *v105;
  __int128 v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int32x4_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float32x2_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  std::mutex *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  const std::string::value_type *v121;
  void *v122;
  void **v123;
  void *v124;
  void **v125;
  void *v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  std::mutex *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  size_t v137;
  unint64_t v138;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  const std::string::value_type *v142;
  std::string *v143;
  __int128 v144;
  void *v145;
  void **v146;
  uint64_t v147;
  __int128 v148;
  std::string *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  void *v154;
  std::__shared_weak_count *v155;
  unint64_t *p_shared_owners;
  unint64_t v157;
  __int128 v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unsigned __int8 v168;
  std::string *v169;
  __int128 v170;
  int v171;
  const std::string::value_type *v172;
  std::string::size_type v173;
  std::string *v174;
  __int128 v175;
  void **v176;
  size_t v177;
  uint64_t v178;
  int v179;
  unsigned __int8 v180;
  std::string *v181;
  __int128 v182;
  int v183;
  const std::string::value_type *v184;
  std::string::size_type v185;
  std::string *v186;
  __int128 v187;
  std::string *v188;
  __int128 v189;
  std::string *v190;
  __int128 v191;
  void **v192;
  size_t v193;
  uint64_t v194;
  unsigned __int8 v195;
  uint64_t *v196;
  uint64_t v197;
  void *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  __int128 v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  void *v221[2];
  __int128 v222;
  int v223;
  std::string v224;
  void *__p[2];
  int8x16_t v226;
  int32x4_t v227;
  float32x2_t v228;
  unsigned __int32 v229;
  int v230;
  __int128 v231;
  std::string v232;
  _BYTE __dst[25];
  std::string v234;
  void *v235[2];
  _BYTE v236[360];
  uint64_t v237;

  v237 = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v6 = sub_2241471F8();
    v7 = v6[2];
    if (!v7)
    {
      v8 = v6;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v7 = v8[2];
    }
    v9 = *(_QWORD *)(v7 + 64);
    v10 = (std::mutex *)(v9 + 32);
    std::mutex::lock((std::mutex *)(v9 + 32));
    v12 = *(_QWORD *)(v9 + 96);
    v11 = *(_QWORD *)(v9 + 104);
    std::mutex::unlock(v10);
    if (v12 != v11)
    {
      v235[0] = "cv3d.recon.";
      v235[1] = (void *)11;
      v13 = *((unsigned __int8 *)a2 + 23);
      if ((v13 & 0x80u) == 0)
        v14 = a2;
      else
        v14 = *(const std::string::value_type **)a2;
      if ((v13 & 0x80u) != 0)
        v13 = *((_QWORD *)a2 + 1);
      *(_QWORD *)v236 = v14;
      *(_QWORD *)&v236[8] = v13;
      sub_2231A9820((uint64_t)v235, (uint64_t)&v236[16], 0, 0, (std::string *)__p);
      v15 = (void *)v226.u8[7];
      v16 = (void **)__p[0];
      v17 = __p[1];
      sub_2241471F8();
      if ((char)v15 >= 0)
        v18 = __p;
      else
        v18 = v16;
      if ((char)v15 >= 0)
        v19 = v15;
      else
        v19 = v17;
      v20 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v18, v19);
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
      v22 = v21;
      if (v226.i8[7] < 0)
      {
        operator delete(__p[0]);
        if (!v22)
          goto LABEL_27;
      }
      else if (!v21)
      {
        goto LABEL_27;
      }
      kdebug_trace();
      if (*(double *)&qword_255788F20 != a3)
      {
        v23 = a3 - *(double *)&qword_255788F20;
        if (*(double *)&qword_255788F20 >= a3)
          v23 = *(double *)&qword_255788F20 - a3;
        if (v23 > 0.00000001)
          qword_255788F20 = *(_QWORD *)&a3;
      }
      kdebug_trace();
    }
  }
LABEL_27:
  v24 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v24 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
  {
    sub_223197FA4(v221, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  }
  else
  {
    *(_OWORD *)v221 = *(_OWORD *)byte_25578BAF8;
    *(_QWORD *)&v222 = *(_QWORD *)&byte_25578BAF8[16];
  }
  v25 = std::string::append((std::string *)v221, ".", 1uLL);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v226.i64[0] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = a2[23];
  if (v27 >= 0)
    v28 = a2;
  else
    v28 = *(const std::string::value_type **)a2;
  if (v27 >= 0)
    v29 = *((unsigned __int8 *)a2 + 23);
  else
    v29 = *((_QWORD *)a2 + 1);
  v30 = std::string::append((std::string *)__p, v28, v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  *(_QWORD *)v236 = *((_QWORD *)&v30->__r_.__value_.__l + 2);
  *(_OWORD *)v235 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (v236[7] >= 0)
    v32 = v235;
  else
    v32 = (void **)v235[0];
  v33 = strlen((const char *)v32);
  sub_2241471F8();
  v34 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v32, v33);
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
  if ((v236[7] & 0x80000000) != 0)
  {
    operator delete(v235[0]);
    if ((v226.i8[7] & 0x80000000) == 0)
    {
LABEL_42:
      if ((SBYTE7(v222) & 0x80000000) == 0)
        goto LABEL_43;
LABEL_47:
      operator delete(v221[0]);
      if (!v35)
        goto LABEL_50;
      goto LABEL_48;
    }
  }
  else if ((v226.i8[7] & 0x80000000) == 0)
  {
    goto LABEL_42;
  }
  operator delete(__p[0]);
  if (SBYTE7(v222) < 0)
    goto LABEL_47;
LABEL_43:
  if (!v35)
    goto LABEL_50;
LABEL_48:
  v36 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v36 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  qword_25578BAF0 = *(_QWORD *)&a3;
LABEL_50:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v37 = sub_2241471F8();
    v38 = v37[2];
    if (!v38)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v38 = v37[2];
    }
    v39 = *(_QWORD *)(v38 + 64);
    v40 = (std::mutex *)(v39 + 32);
    std::mutex::lock((std::mutex *)(v39 + 32));
    v42 = *(_QWORD *)(v39 + 96);
    v41 = *(_QWORD *)(v39 + 104);
    std::mutex::unlock(v40);
    if (v42 != v41)
    {
      v235[0] = "cv3d.recon.";
      v235[1] = (void *)11;
      v43 = *((unsigned __int8 *)a2 + 23);
      if ((v43 & 0x80u) == 0)
        v44 = a2;
      else
        v44 = *(const std::string::value_type **)a2;
      if ((v43 & 0x80u) != 0)
        v43 = *((_QWORD *)a2 + 1);
      *(_QWORD *)v236 = v44;
      *(_QWORD *)&v236[8] = v43;
      sub_2231A9820((uint64_t)v235, (uint64_t)&v236[16], 0, 0, (std::string *)__p);
      v45 = (void *)v226.u8[7];
      v46 = (void **)__p[0];
      v47 = __p[1];
      sub_2241471F8();
      if ((char)v45 >= 0)
        v48 = __p;
      else
        v48 = v46;
      if ((char)v45 >= 0)
        v49 = v45;
      else
        v49 = v47;
      v50 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v48, v49);
      v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
      v52 = v51;
      if (v226.i8[7] < 0)
      {
        operator delete(__p[0]);
        if (!v52)
          goto LABEL_105;
      }
      else if (!v51)
      {
        goto LABEL_105;
      }
      v53 = a2[23];
      if (v53 >= 0)
        v54 = *((unsigned __int8 *)a2 + 23);
      else
        v54 = *((_QWORD *)a2 + 1);
      v55 = v54 + 11;
      if (v54 + 11 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v55 >= 0x17)
      {
        v57 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v55 | 7) != 0x17)
          v57 = v55 | 7;
        v58 = v57 + 1;
        v56 = operator new(v57 + 1);
        v221[1] = (void *)(v54 + 11);
        *(_QWORD *)&v222 = v58 | 0x8000000000000000;
        v221[0] = v56;
      }
      else
      {
        v221[1] = 0;
        *(_QWORD *)&v222 = 0;
        v221[0] = 0;
        v56 = v221;
        BYTE7(v222) = v54 + 11;
        if (!v54)
        {
LABEL_84:
          strcpy((char *)v56 + v54, ".CameraPose");
          v235[0] = "cv3d.recon.";
          v235[1] = (void *)11;
          v60 = (void *)BYTE7(v222);
          v61 = v221;
          if (SBYTE7(v222) < 0)
          {
            v61 = (void **)v221[0];
            v60 = v221[1];
          }
          *(_QWORD *)v236 = v61;
          *(_QWORD *)&v236[8] = v60;
          sub_2231A9820((uint64_t)v235, (uint64_t)&v236[16], 0, 0, (std::string *)__p);
          if (SBYTE7(v222) < 0)
            operator delete(v221[0]);
          sub_224569D7C();
          sub_224569A80();
          if (os_variant_has_internal_diagnostics())
          {
            v62 = sub_2241471F8();
            v63 = v62[2];
            if (!v63)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v63 = v62[2];
            }
            v64 = *(_QWORD *)(v63 + 64);
            v65 = (std::mutex *)(v64 + 32);
            std::mutex::lock((std::mutex *)(v64 + 32));
            v67 = *(_QWORD *)(v64 + 96);
            v66 = *(_QWORD *)(v64 + 104);
            std::mutex::unlock(v65);
            if (v67 != v66)
            {
              v68 = (void *)v226.u8[7];
              v69 = (void **)__p[0];
              v70 = __p[1];
              sub_2241471F8();
              v71 = (char)v68 >= 0 ? __p : v69;
              v72 = (char)v68 >= 0 ? v68 : v70;
              v73 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v71, v72);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73))
              {
                *(_OWORD *)v235 = 0u;
                *(_OWORD *)v236 = 0u;
                *(_DWORD *)&v236[16] = 728325608;
                kdebug_trace();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73))
                {
                  v221[0] = (void *)(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                  v221[1] = (void *)2;
                  v74 = sub_2241471F8();
                  sub_2233B3C14((uint64_t)v74, v73, a1, (__int128 *)v221);
                }
                kdebug_trace();
              }
            }
          }
          if (v226.i8[7] < 0)
            operator delete(__p[0]);
          goto LABEL_105;
        }
      }
      if (v53 >= 0)
        v59 = a2;
      else
        v59 = *(const std::string::value_type **)a2;
      memmove(v56, v59, v54);
      goto LABEL_84;
    }
  }
LABEL_105:
  v75 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v75 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
  {
    sub_223197FA4(v221, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  }
  else
  {
    *(_OWORD *)v221 = *(_OWORD *)byte_25578BAF8;
    *(_QWORD *)&v222 = *(_QWORD *)&byte_25578BAF8[16];
  }
  v76 = std::string::append((std::string *)v221, ".", 1uLL);
  v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  v226.i64[0] = v76->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  v78 = a2[23];
  if (v78 >= 0)
    v79 = a2;
  else
    v79 = *(const std::string::value_type **)a2;
  if (v78 >= 0)
    v80 = *((unsigned __int8 *)a2 + 23);
  else
    v80 = *((_QWORD *)a2 + 1);
  v81 = std::string::append((std::string *)__p, v79, v80);
  v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
  *(_QWORD *)v236 = *((_QWORD *)&v81->__r_.__value_.__l + 2);
  *(_OWORD *)v235 = v82;
  v81->__r_.__value_.__l.__size_ = 0;
  v81->__r_.__value_.__r.__words[2] = 0;
  v81->__r_.__value_.__r.__words[0] = 0;
  if (v236[7] >= 0)
    v83 = v235;
  else
    v83 = (void **)v235[0];
  v84 = strlen((const char *)v83);
  sub_2241471F8();
  v85 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v83, v84);
  v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 24))(v85);
  if ((v236[7] & 0x80000000) != 0)
  {
    operator delete(v235[0]);
    if ((v226.i8[7] & 0x80000000) == 0)
    {
LABEL_120:
      if ((SBYTE7(v222) & 0x80000000) == 0)
        goto LABEL_121;
LABEL_125:
      operator delete(v221[0]);
      if (!v86)
        goto LABEL_147;
LABEL_126:
      v91 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v91 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      if (byte_25578BAF8[23] < 0)
      {
        sub_223197FA4(__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)byte_25578BAF8;
        *(_QWORD *)&__dst[16] = *(_QWORD *)&byte_25578BAF8[16];
      }
      v92 = std::string::append((std::string *)__dst, ".", 1uLL);
      v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
      *(_QWORD *)&v222 = *((_QWORD *)&v92->__r_.__value_.__l + 2);
      *(_OWORD *)v221 = v93;
      v92->__r_.__value_.__l.__size_ = 0;
      v92->__r_.__value_.__r.__words[2] = 0;
      v92->__r_.__value_.__r.__words[0] = 0;
      v94 = a2[23];
      if (v94 >= 0)
        v95 = a2;
      else
        v95 = *(const std::string::value_type **)a2;
      if (v94 >= 0)
        v96 = *((unsigned __int8 *)a2 + 23);
      else
        v96 = *((_QWORD *)a2 + 1);
      v97 = std::string::append((std::string *)v221, v95, v96);
      v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
      v226.i64[0] = v97->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v98;
      v97->__r_.__value_.__l.__size_ = 0;
      v97->__r_.__value_.__r.__words[2] = 0;
      v97->__r_.__value_.__r.__words[0] = 0;
      v99 = std::string::append((std::string *)__p, ".CameraPose", 0xBuLL);
      v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
      *(_QWORD *)v236 = *((_QWORD *)&v99->__r_.__value_.__l + 2);
      *(_OWORD *)v235 = v100;
      v99->__r_.__value_.__l.__size_ = 0;
      v99->__r_.__value_.__r.__words[2] = 0;
      v99->__r_.__value_.__r.__words[0] = 0;
      if (v236[7] >= 0)
        v101 = v235;
      else
        v101 = (void **)v235[0];
      v102 = strlen((const char *)v101);
      sub_2241471F8();
      v103 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v101, v102);
      if ((v236[7] & 0x80000000) != 0)
      {
        operator delete(v235[0]);
        if ((v226.i8[7] & 0x80000000) == 0)
        {
LABEL_141:
          if ((SBYTE7(v222) & 0x80000000) == 0)
            goto LABEL_142;
          goto LABEL_168;
        }
      }
      else if ((v226.i8[7] & 0x80000000) == 0)
      {
        goto LABEL_141;
      }
      operator delete(__p[0]);
      if ((SBYTE7(v222) & 0x80000000) == 0)
      {
LABEL_142:
        if ((__dst[23] & 0x80000000) == 0)
          goto LABEL_143;
LABEL_169:
        operator delete(*(void **)__dst);
LABEL_143:
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v103 + 24))(v103))
        {
          v104 = atomic_load((unsigned __int8 *)&unk_25578BB10);
          if ((v104 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
          {
            __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
            __cxa_guard_release((__guard *)&unk_25578BB10);
          }
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v103 + 24))(v103))
          {
            v235[0] = (void *)(uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
            v235[1] = (void *)2;
            v105 = sub_2241471F8();
            sub_2233B3C14((uint64_t)v105, v103, a1, (__int128 *)v235);
          }
        }
        goto LABEL_147;
      }
LABEL_168:
      operator delete(v221[0]);
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_143;
      goto LABEL_169;
    }
  }
  else if ((v226.i8[7] & 0x80000000) == 0)
  {
    goto LABEL_120;
  }
  operator delete(__p[0]);
  if (SBYTE7(v222) < 0)
    goto LABEL_125;
LABEL_121:
  if (v86)
    goto LABEL_126;
LABEL_147:
  v87.i64[0] = *(_QWORD *)a1;
  v87.i32[2] = *((_DWORD *)a1 + 2);
  v88.i64[0] = *((_QWORD *)a1 + 2);
  v88.i32[2] = *((_DWORD *)a1 + 6);
  v89.i64[0] = *((_QWORD *)a1 + 6);
  v89.i32[2] = *((_DWORD *)a1 + 14);
  *(_QWORD *)&v106 = vzip1q_s32(v87, v88).u64[0];
  v107 = (int8x16_t)vnegq_f32(v89);
  v90.i32[0] = *((_DWORD *)a1 + 10);
  v108 = (int8x16_t)vtrn2q_s32(v87, v88);
  v108.i32[2] = HIDWORD(*((_QWORD *)a1 + 4));
  v109 = (int8x16_t)vzip2q_s32(v87, v88);
  v110 = (int32x4_t)v109;
  v110.i32[2] = v90.i32[0];
  v111 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v106, *(float *)v107.i32), *(float32x2_t *)v108.i8, *(float32x2_t *)v89.f32, 1), *(float32x2_t *)v109.i8, v89, 2);
  v112 = vmls_lane_f32(vmul_f32((float32x2_t)a1[2], *(float32x2_t *)v107.i8), (float32x2_t)vdup_lane_s32((int32x2_t)a1[2], 1), *(float32x2_t *)v89.f32, 1);
  v113 = (float32x2_t)vextq_s8(v107, v107, 8uLL).u64[0];
  *((_QWORD *)&v106 + 1) = *((_QWORD *)a1 + 4);
  v107.i32[3] = 0;
  v107.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v108, 0).i32[3];
  *(uint64_t *)((char *)v107.i64 + 4) = vextq_s8(v108, v109, 4uLL).u64[0];
  v110.i64[1] = vdupq_laneq_s32(v110, 2).u32[0];
  v226 = v107;
  v227 = v110;
  *(_OWORD *)__p = v106;
  v228 = v111;
  v229 = vmla_f32(v112, v113, v90).u32[0];
  v230 = 1065353216;
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v114 = sub_2241471F8();
    v115 = v114[2];
    if (!v115)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v115 = v114[2];
    }
    v116 = *(_QWORD *)(v115 + 64);
    v117 = (std::mutex *)(v116 + 32);
    std::mutex::lock((std::mutex *)(v116 + 32));
    v119 = *(_QWORD *)(v116 + 96);
    v118 = *(_QWORD *)(v116 + 104);
    std::mutex::unlock(v117);
    if (v119 != v118)
    {
      v235[0] = "cv3d.recon.";
      v235[1] = (void *)11;
      v120 = *((unsigned __int8 *)a2 + 23);
      if ((v120 & 0x80u) == 0)
        v121 = a2;
      else
        v121 = *(const std::string::value_type **)a2;
      if ((v120 & 0x80u) != 0)
        v120 = *((_QWORD *)a2 + 1);
      *(_QWORD *)v236 = v121;
      *(_QWORD *)&v236[8] = v120;
      sub_2231A9820((uint64_t)v235, (uint64_t)&v236[16], 0, 0, (std::string *)v221);
      v122 = (void *)BYTE7(v222);
      v123 = (void **)v221[0];
      v124 = v221[1];
      sub_2241471F8();
      v125 = (char)v122 >= 0 ? v221 : v123;
      v126 = (char)v122 >= 0 ? v122 : v124;
      v127 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v125, v126);
      v128 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v127 + 24))(v127);
      v129 = v128;
      if (SBYTE7(v222) < 0)
      {
        operator delete(v221[0]);
        if (!v129)
          goto LABEL_231;
      }
      else if (!v128)
      {
        goto LABEL_231;
      }
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v130 = sub_2241471F8();
        v131 = v130[2];
        if (!v131)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v131 = v130[2];
        }
        v132 = *(_QWORD *)(v131 + 64);
        v133 = (std::mutex *)(v132 + 32);
        std::mutex::lock((std::mutex *)(v132 + 32));
        v135 = *(_QWORD *)(v132 + 96);
        v134 = *(_QWORD *)(v132 + 104);
        std::mutex::unlock(v133);
        if (v135 != v134)
        {
          v136 = a2[23];
          if (v136 >= 0)
            v137 = *((unsigned __int8 *)a2 + 23);
          else
            v137 = *((_QWORD *)a2 + 1);
          v138 = v137 + 1;
          if (v137 + 1 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v138 >= 0x17)
          {
            v140 = (v138 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v138 | 7) != 0x17)
              v140 = v138 | 7;
            v141 = v140 + 1;
            v139 = operator new(v140 + 1);
            *(_QWORD *)&__dst[8] = v137 + 1;
            *(_QWORD *)&__dst[16] = v141 | 0x8000000000000000;
            *(_QWORD *)__dst = v139;
          }
          else
          {
            memset(__dst, 0, 24);
            v139 = __dst;
            __dst[23] = v137 + 1;
            if (!v137)
            {
LABEL_190:
              *(_WORD *)&v139[v137] = 46;
              v143 = std::string::append((std::string *)__dst, "Planes", 6uLL);
              v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
              *(_QWORD *)&v222 = *((_QWORD *)&v143->__r_.__value_.__l + 2);
              *(_OWORD *)v221 = v144;
              v143->__r_.__value_.__l.__size_ = 0;
              v143->__r_.__value_.__r.__words[2] = 0;
              v143->__r_.__value_.__r.__words[0] = 0;
              v235[0] = "cv3d.recon.";
              v235[1] = (void *)11;
              v145 = (void *)BYTE7(v222);
              v146 = v221;
              if (SBYTE7(v222) < 0)
              {
                v146 = (void **)v221[0];
                v145 = v221[1];
              }
              *(_QWORD *)v236 = v146;
              *(_QWORD *)&v236[8] = v145;
              sub_2231A9820((uint64_t)v235, (uint64_t)&v236[16], 0, 0, &v224);
              if (SBYTE7(v222) < 0)
                operator delete(v221[0]);
              if ((__dst[23] & 0x80000000) != 0)
                operator delete(*(void **)__dst);
              v147 = HIBYTE(v224.__r_.__value_.__r.__words[2]);
              v148 = *(_OWORD *)&v224.__r_.__value_.__l.__data_;
              sub_2241471F8();
              if ((v147 & 0x80u) == 0)
                v149 = &v224;
              else
                v149 = (std::string *)v148;
              if ((v147 & 0x80u) == 0)
                v150 = v147;
              else
                v150 = *((_QWORD *)&v148 + 1);
              v151 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v149, v150);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v151 + 24))(v151))
              {
                *(_OWORD *)v221 = 0u;
                v222 = 0u;
                v223 = 728325616;
                kdebug_trace();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v151 + 24))(v151))
                {
                  *(_QWORD *)&v231 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                  *((_QWORD *)&v231 + 1) = 2;
                  v152 = sub_2241471F8();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v151 + 24))(v151))
                  {
                    sub_22339ECFC((unint64_t *)v235, (float32x2_t *)__p);
                    strcpy(__dst, "CameraPose");
                    *(_WORD *)&__dst[23] = 266;
                    sub_22329F414((uint64_t)v235, (__int128 *)__dst, &v231, &v234);
                    if (__dst[24] && (__dst[23] & 0x80000000) != 0)
                      operator delete(*(void **)__dst);
                    sub_22316F8F4((uint64_t *)v235);
                    v153 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v151 + 56))(v151);
                    v154 = *(void **)v153;
                    v155 = *(std::__shared_weak_count **)(v153 + 8);
                    if (v155)
                    {
                      p_shared_owners = (unint64_t *)&v155->__shared_owners_;
                      do
                        v157 = __ldxr(p_shared_owners);
                      while (__stxr(v157 + 1, p_shared_owners));
                    }
                    v158 = *(_OWORD *)&v234.__r_.__value_.__r.__words[1];
                    v232.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
                    *(_OWORD *)&v232.__r_.__value_.__r.__words[1] = *(_OWORD *)&v234.__r_.__value_.__r.__words[1];
                    *(_OWORD *)&v234.__r_.__value_.__r.__words[1] = 0uLL;
                    v235[0] = v154;
                    v235[1] = v155;
                    if (v155)
                    {
                      v159 = (unint64_t *)&v155->__shared_owners_;
                      do
                        v160 = __ldxr(v159);
                      while (__stxr(v160 + 1, v159));
                    }
                    *(_QWORD *)v236 = &off_24EC6A3B8;
                    *(_OWORD *)&v236[8] = v158;
                    if (*((_QWORD *)&v158 + 1))
                    {
                      v161 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
                      do
                        v162 = __ldxr(v161);
                      while (__stxr(v162 + 1, v161));
                    }
                    (*(void (**)(uint64_t *, void **))(*v152 + 16))(v152, v235);
                    sub_2241231D8((uint64_t)v236);
                    v163 = (std::__shared_weak_count *)v235[1];
                    if (v235[1])
                    {
                      v164 = (unint64_t *)((char *)v235[1] + 8);
                      do
                        v165 = __ldaxr(v164);
                      while (__stlxr(v165 - 1, v164));
                      if (!v165)
                      {
                        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                        std::__shared_weak_count::__release_weak(v163);
                      }
                    }
                    sub_2241231D8((uint64_t)&v232);
                    if (v155)
                    {
                      v166 = (unint64_t *)&v155->__shared_owners_;
                      do
                        v167 = __ldaxr(v166);
                      while (__stlxr(v167 - 1, v166));
                      if (!v167)
                      {
                        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                        std::__shared_weak_count::__release_weak(v155);
                      }
                    }
                    sub_2241231D8((uint64_t)&v234);
                  }
                }
                kdebug_trace();
              }
              if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v224.__r_.__value_.__l.__data_);
              goto LABEL_231;
            }
          }
          if (v136 >= 0)
            v142 = a2;
          else
            v142 = *(const std::string::value_type **)a2;
          memmove(v139, v142, v137);
          goto LABEL_190;
        }
      }
    }
  }
LABEL_231:
  v168 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v168 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
  {
    sub_223197FA4(__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)byte_25578BAF8;
    *(_QWORD *)&__dst[16] = *(_QWORD *)&byte_25578BAF8[16];
  }
  v169 = std::string::append((std::string *)__dst, ".", 1uLL);
  v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
  *(_QWORD *)&v222 = *((_QWORD *)&v169->__r_.__value_.__l + 2);
  *(_OWORD *)v221 = v170;
  v169->__r_.__value_.__l.__size_ = 0;
  v169->__r_.__value_.__r.__words[2] = 0;
  v169->__r_.__value_.__r.__words[0] = 0;
  v171 = a2[23];
  if (v171 >= 0)
    v172 = a2;
  else
    v172 = *(const std::string::value_type **)a2;
  if (v171 >= 0)
    v173 = *((unsigned __int8 *)a2 + 23);
  else
    v173 = *((_QWORD *)a2 + 1);
  v174 = std::string::append((std::string *)v221, v172, v173);
  v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
  *(_QWORD *)v236 = *((_QWORD *)&v174->__r_.__value_.__l + 2);
  *(_OWORD *)v235 = v175;
  v174->__r_.__value_.__l.__size_ = 0;
  v174->__r_.__value_.__r.__words[2] = 0;
  v174->__r_.__value_.__r.__words[0] = 0;
  if (v236[7] >= 0)
    v176 = v235;
  else
    v176 = (void **)v235[0];
  v177 = strlen((const char *)v176);
  sub_2241471F8();
  v178 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v176, v177);
  v179 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v178 + 24))(v178);
  if ((v236[7] & 0x80000000) != 0)
  {
    operator delete(v235[0]);
    if ((SBYTE7(v222) & 0x80000000) == 0)
    {
LABEL_246:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_247;
      goto LABEL_251;
    }
  }
  else if ((SBYTE7(v222) & 0x80000000) == 0)
  {
    goto LABEL_246;
  }
  operator delete(v221[0]);
  if ((__dst[23] & 0x80000000) == 0)
  {
LABEL_247:
    if (!v179)
      return;
    goto LABEL_252;
  }
LABEL_251:
  operator delete(*(void **)__dst);
  if (!v179)
    return;
LABEL_252:
  v180 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v180 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
    sub_223197FA4(&v232, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  else
    v232 = *(std::string *)byte_25578BAF8;
  v181 = std::string::append(&v232, ".", 1uLL);
  v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
  v234.__r_.__value_.__r.__words[2] = v181->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v182;
  v181->__r_.__value_.__l.__size_ = 0;
  v181->__r_.__value_.__r.__words[2] = 0;
  v181->__r_.__value_.__r.__words[0] = 0;
  v183 = a2[23];
  if (v183 >= 0)
    v184 = a2;
  else
    v184 = *(const std::string::value_type **)a2;
  if (v183 >= 0)
    v185 = *((unsigned __int8 *)a2 + 23);
  else
    v185 = *((_QWORD *)a2 + 1);
  v186 = std::string::append(&v234, v184, v185);
  v187 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
  *(_QWORD *)&__dst[16] = *((_QWORD *)&v186->__r_.__value_.__l + 2);
  *(_OWORD *)__dst = v187;
  v186->__r_.__value_.__l.__size_ = 0;
  v186->__r_.__value_.__r.__words[2] = 0;
  v186->__r_.__value_.__r.__words[0] = 0;
  v188 = std::string::append((std::string *)__dst, ".", 1uLL);
  v189 = *(_OWORD *)&v188->__r_.__value_.__l.__data_;
  *(_QWORD *)&v222 = *((_QWORD *)&v188->__r_.__value_.__l + 2);
  *(_OWORD *)v221 = v189;
  v188->__r_.__value_.__l.__size_ = 0;
  v188->__r_.__value_.__r.__words[2] = 0;
  v188->__r_.__value_.__r.__words[0] = 0;
  v190 = std::string::append((std::string *)v221, "Planes", 6uLL);
  v191 = *(_OWORD *)&v190->__r_.__value_.__l.__data_;
  *(_QWORD *)v236 = *((_QWORD *)&v190->__r_.__value_.__l + 2);
  *(_OWORD *)v235 = v191;
  v190->__r_.__value_.__l.__size_ = 0;
  v190->__r_.__value_.__r.__words[2] = 0;
  v190->__r_.__value_.__r.__words[0] = 0;
  if (v236[7] >= 0)
    v192 = v235;
  else
    v192 = (void **)v235[0];
  v193 = strlen((const char *)v192);
  sub_2241471F8();
  v194 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v192, v193);
  if ((v236[7] & 0x80000000) != 0)
  {
    operator delete(v235[0]);
    if ((SBYTE7(v222) & 0x80000000) == 0)
    {
LABEL_267:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_268;
      goto LABEL_314;
    }
  }
  else if ((SBYTE7(v222) & 0x80000000) == 0)
  {
    goto LABEL_267;
  }
  operator delete(v221[0]);
  if ((__dst[23] & 0x80000000) == 0)
  {
LABEL_268:
    if ((SHIBYTE(v234.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_269;
LABEL_315:
    operator delete(v234.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v232.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_270;
    goto LABEL_316;
  }
LABEL_314:
  operator delete(*(void **)__dst);
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_315;
LABEL_269:
  if ((SHIBYTE(v232.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_270;
LABEL_316:
  operator delete(v232.__r_.__value_.__l.__data_);
LABEL_270:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v194 + 24))(v194))
  {
    v195 = atomic_load((unsigned __int8 *)&unk_25578BB10);
    if ((v195 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
    {
      __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
      __cxa_guard_release((__guard *)&unk_25578BB10);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v194 + 24))(v194))
    {
      v232.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
      v232.__r_.__value_.__l.__size_ = 2;
      v196 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v194 + 24))(v194))
      {
        sub_22339ECFC((unint64_t *)v235, (float32x2_t *)__p);
        v221[0] = (void *)0x6F506172656D6143;
        v221[1] = (void *)25971;
        *(_WORD *)((char *)&v222 + 7) = 266;
        sub_22329F414((uint64_t)v235, (__int128 *)v221, (__int128 *)&v232, __dst);
        if (BYTE8(v222) && SBYTE7(v222) < 0)
          operator delete(v221[0]);
        sub_22316F8F4((uint64_t *)v235);
        v197 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v194 + 56))(v194);
        v198 = *(void **)v197;
        v199 = *(std::__shared_weak_count **)(v197 + 8);
        if (v199)
        {
          v200 = (unint64_t *)&v199->__shared_owners_;
          do
            v201 = __ldxr(v200);
          while (__stxr(v201 + 1, v200));
        }
        v202 = *(_OWORD *)&__dst[8];
        v234.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
        *(_OWORD *)&v234.__r_.__value_.__r.__words[1] = *(_OWORD *)&__dst[8];
        *(_OWORD *)&__dst[8] = 0uLL;
        v235[0] = v198;
        v235[1] = v199;
        if (v199)
        {
          v203 = (unint64_t *)&v199->__shared_owners_;
          do
            v204 = __ldxr(v203);
          while (__stxr(v204 + 1, v203));
        }
        *(_QWORD *)v236 = &off_24EC6A3B8;
        *(_OWORD *)&v236[8] = v202;
        if (*((_QWORD *)&v202 + 1))
        {
          v205 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
          do
            v206 = __ldxr(v205);
          while (__stxr(v206 + 1, v205));
        }
        (*(void (**)(uint64_t *, void **))(*v196 + 16))(v196, v235);
        v207 = *(std::__shared_weak_count **)&v236[16];
        if (*(_QWORD *)&v236[16])
        {
          v208 = (unint64_t *)(*(_QWORD *)&v236[16] + 8);
          do
            v209 = __ldaxr(v208);
          while (__stlxr(v209 - 1, v208));
          if (!v209)
          {
            ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
            std::__shared_weak_count::__release_weak(v207);
          }
        }
        v210 = (std::__shared_weak_count *)v235[1];
        if (v235[1])
        {
          v211 = (unint64_t *)((char *)v235[1] + 8);
          do
            v212 = __ldaxr(v211);
          while (__stlxr(v212 - 1, v211));
          if (!v212)
          {
            ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
            std::__shared_weak_count::__release_weak(v210);
          }
        }
        v213 = (std::__shared_weak_count *)v234.__r_.__value_.__r.__words[2];
        if (v234.__r_.__value_.__r.__words[2])
        {
          v214 = (unint64_t *)(v234.__r_.__value_.__r.__words[2] + 8);
          do
            v215 = __ldaxr(v214);
          while (__stlxr(v215 - 1, v214));
          if (!v215)
          {
            ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
            std::__shared_weak_count::__release_weak(v213);
          }
        }
        if (v199)
        {
          v216 = (unint64_t *)&v199->__shared_owners_;
          do
            v217 = __ldaxr(v216);
          while (__stlxr(v217 - 1, v216));
          if (!v217)
          {
            ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
            std::__shared_weak_count::__release_weak(v199);
          }
        }
        v218 = *(std::__shared_weak_count **)&__dst[16];
        if (*(_QWORD *)&__dst[16])
        {
          v219 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
          do
            v220 = __ldaxr(v219);
          while (__stlxr(v220 - 1, v219));
          if (!v220)
          {
            ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
            std::__shared_weak_count::__release_weak(v218);
          }
        }
      }
    }
  }
}

void sub_2233B15B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,std::__shared_weak_count *a58,int a59,__int16 a60,char a61,char a62)
{
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;

  sub_2241231D8(v63);
  v65 = a58;
  if (a58)
  {
    p_shared_owners = (unint64_t *)&a58->__shared_owners_;
    do
      v67 = __ldaxr(p_shared_owners);
    while (__stlxr(v67 - 1, p_shared_owners));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  sub_2241231D8((uint64_t)&a36);
  if (v62)
  {
    v68 = (unint64_t *)&v62->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  sub_2241231D8((uint64_t)&a50);
  sub_2231874DC((uint64_t)&a9);
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2233B19E8(uint64_t *a1, const std::string::value_type *a2, double a3)
{
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::mutex *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const std::string::value_type *v14;
  void *v15;
  void **v16;
  void *v17;
  void **v18;
  void *v19;
  uint64_t v20;
  int v21;
  int v22;
  double v23;
  unsigned __int8 v24;
  std::string *v25;
  __int128 v26;
  int v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  const char *v32;
  size_t v33;
  uint64_t v34;
  int v35;
  unsigned __int8 v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  std::mutex *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const std::string::value_type *v44;
  void *v45;
  void **v46;
  void *v47;
  void **v48;
  void *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  size_t v54;
  unint64_t v55;
  std::string *p_dst;
  uint64_t v57;
  uint64_t v58;
  const std::string::value_type *v59;
  std::string *v60;
  __int128 v61;
  std::string::size_type size;
  std::string *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  std::mutex *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void **v71;
  void *v72;
  void **v73;
  void *v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned __int8 v77;
  std::string *v78;
  __int128 v79;
  int v80;
  const std::string::value_type *v81;
  std::string::size_type v82;
  std::string *v83;
  __int128 v84;
  const char *v85;
  size_t v86;
  uint64_t v87;
  int v88;
  unsigned __int8 v89;
  std::string *v90;
  __int128 v91;
  int v92;
  const std::string::value_type *v93;
  std::string::size_type v94;
  std::string *v95;
  __int128 v96;
  std::string *v97;
  __int128 v98;
  std::string *v99;
  __int128 v100;
  const char *v101;
  size_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint64_t *v105;
  std::string v106;
  std::string __dst;
  std::string v108;
  void *__p[2];
  __int128 v110;
  _QWORD v111[2];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE v122[40];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  v5 = (void *)a1[5];
  __p[0] = (void *)a1[1];
  __p[1] = v5;
  v110 = *(_OWORD *)(a1 + 7);
  v6 = *a1;
  sub_2233B3EE4((uint64_t)v122, (uint64_t *)__p);
  v112 = *(_OWORD *)&v122[8];
  v113 = *(_OWORD *)&v122[24];
  v114 = v123;
  v115 = v124;
  v118 = v127;
  v119 = v128;
  v116 = v125;
  v117 = v126;
  v120 = v129;
  v121 = v6;
  v111[0] = &off_24EC35EB0;
  v111[1] = &off_24EC35EF0;
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v7 = sub_2241471F8();
    v8 = v7[2];
    if (!v8)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_164;
      }
      v8 = v7[2];
    }
    v9 = *(_QWORD *)(v8 + 64);
    v10 = (std::mutex *)(v9 + 32);
    std::mutex::lock((std::mutex *)(v9 + 32));
    v12 = *(_QWORD *)(v9 + 96);
    v11 = *(_QWORD *)(v9 + 104);
    std::mutex::unlock(v10);
    if (v12 != v11)
    {
      *(_QWORD *)v122 = "cv3d.recon.";
      *(_QWORD *)&v122[8] = 11;
      v13 = *((unsigned __int8 *)a2 + 23);
      if ((v13 & 0x80u) == 0)
        v14 = a2;
      else
        v14 = *(const std::string::value_type **)a2;
      if ((v13 & 0x80u) != 0)
        v13 = *((_QWORD *)a2 + 1);
      *(_QWORD *)&v122[16] = v14;
      *(_QWORD *)&v122[24] = v13;
      sub_2231A9820((uint64_t)v122, (uint64_t)&v122[32], 0, 0, (std::string *)__p);
      v15 = (void *)BYTE7(v110);
      v16 = (void **)__p[0];
      v17 = __p[1];
      sub_2241471F8();
      if ((char)v15 >= 0)
        v18 = __p;
      else
        v18 = v16;
      if ((char)v15 >= 0)
        v19 = v15;
      else
        v19 = v17;
      v20 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v18, v19);
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
      v22 = v21;
      if (SBYTE7(v110) < 0)
      {
        operator delete(__p[0]);
        if (!v22)
          goto LABEL_27;
      }
      else if (!v21)
      {
        goto LABEL_27;
      }
      kdebug_trace();
      if (*(double *)&qword_255788F20 != a3)
      {
        v23 = a3 - *(double *)&qword_255788F20;
        if (*(double *)&qword_255788F20 >= a3)
          v23 = *(double *)&qword_255788F20 - a3;
        if (v23 > 0.00000001)
          qword_255788F20 = *(_QWORD *)&a3;
      }
      kdebug_trace();
    }
  }
LABEL_27:
  v24 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v24 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
    sub_223197FA4(&v108, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  else
    v108 = *(std::string *)byte_25578BAF8;
  v25 = std::string::append(&v108, ".", 1uLL);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  *(_QWORD *)&v110 = *((_QWORD *)&v25->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = a2[23];
  if (v27 >= 0)
    v28 = a2;
  else
    v28 = *(const std::string::value_type **)a2;
  if (v27 >= 0)
    v29 = *((unsigned __int8 *)a2 + 23);
  else
    v29 = *((_QWORD *)a2 + 1);
  v30 = std::string::append((std::string *)__p, v28, v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  *(_QWORD *)&v122[16] = *((_QWORD *)&v30->__r_.__value_.__l + 2);
  *(_OWORD *)v122 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (v122[23] >= 0)
    v32 = v122;
  else
    v32 = *(const char **)v122;
  v33 = strlen(v32);
  sub_2241471F8();
  v34 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v32, v33);
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
  if ((v122[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v122);
    if ((SBYTE7(v110) & 0x80000000) == 0)
    {
LABEL_42:
      if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_43;
      goto LABEL_47;
    }
  }
  else if ((SBYTE7(v110) & 0x80000000) == 0)
  {
    goto LABEL_42;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_43:
    if (!v35)
      goto LABEL_50;
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v108.__r_.__value_.__l.__data_);
  if (!v35)
    goto LABEL_50;
LABEL_48:
  v36 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v36 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  qword_25578BAF0 = *(_QWORD *)&a3;
LABEL_50:
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_107;
  v37 = sub_2241471F8();
  v38 = v37[2];
  if (!v38)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      v38 = v37[2];
      goto LABEL_54;
    }
LABEL_164:
    abort();
  }
LABEL_54:
  v39 = *(_QWORD *)(v38 + 64);
  v40 = (std::mutex *)(v39 + 32);
  std::mutex::lock((std::mutex *)(v39 + 32));
  v42 = *(_QWORD *)(v39 + 96);
  v41 = *(_QWORD *)(v39 + 104);
  std::mutex::unlock(v40);
  if (v42 == v41)
    goto LABEL_107;
  *(_QWORD *)v122 = "cv3d.recon.";
  *(_QWORD *)&v122[8] = 11;
  v43 = *((unsigned __int8 *)a2 + 23);
  if ((v43 & 0x80u) == 0)
    v44 = a2;
  else
    v44 = *(const std::string::value_type **)a2;
  if ((v43 & 0x80u) != 0)
    v43 = *((_QWORD *)a2 + 1);
  *(_QWORD *)&v122[16] = v44;
  *(_QWORD *)&v122[24] = v43;
  sub_2231A9820((uint64_t)v122, (uint64_t)&v122[32], 0, 0, (std::string *)__p);
  v45 = (void *)BYTE7(v110);
  v46 = (void **)__p[0];
  v47 = __p[1];
  sub_2241471F8();
  if ((char)v45 >= 0)
    v48 = __p;
  else
    v48 = v46;
  if ((char)v45 >= 0)
    v49 = v45;
  else
    v49 = v47;
  v50 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v48, v49);
  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
  v52 = v51;
  if (SBYTE7(v110) < 0)
  {
    operator delete(__p[0]);
    if (!v52)
      goto LABEL_107;
  }
  else if (!v51)
  {
    goto LABEL_107;
  }
  v53 = a2[23];
  if (v53 >= 0)
    v54 = *((unsigned __int8 *)a2 + 23);
  else
    v54 = *((_QWORD *)a2 + 1);
  v55 = v54 + 1;
  if (v54 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v55 >= 0x17)
  {
    v57 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v55 | 7) != 0x17)
      v57 = v55 | 7;
    v58 = v57 + 1;
    p_dst = (std::string *)operator new(v57 + 1);
    __dst.__r_.__value_.__l.__size_ = v54 + 1;
    __dst.__r_.__value_.__r.__words[2] = v58 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_80;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v54 + 1;
  if (v54)
  {
LABEL_80:
    if (v53 >= 0)
      v59 = a2;
    else
      v59 = *(const std::string::value_type **)a2;
    memmove(p_dst, v59, v54);
  }
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v54) = 46;
  v60 = std::string::append(&__dst, "color_frame_intrinsics", 0x16uLL);
  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  v108.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)v122 = "cv3d.recon.";
  *(_QWORD *)&v122[8] = 11;
  size = HIBYTE(v108.__r_.__value_.__r.__words[2]);
  v63 = &v108;
  if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = v108.__r_.__value_.__l.__size_;
    v63 = (std::string *)v108.__r_.__value_.__r.__words[0];
  }
  *(_QWORD *)&v122[16] = v63;
  *(_QWORD *)&v122[24] = size;
  sub_2231A9820((uint64_t)v122, (uint64_t)&v122[32], 0, 0, (std::string *)__p);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v64 = sub_2241471F8();
    v65 = v64[2];
    if (!v65)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v65 = v64[2];
    }
    v66 = *(_QWORD *)(v65 + 64);
    v67 = (std::mutex *)(v66 + 32);
    std::mutex::lock((std::mutex *)(v66 + 32));
    v69 = *(_QWORD *)(v66 + 96);
    v68 = *(_QWORD *)(v66 + 104);
    std::mutex::unlock(v67);
    if (v69 != v68)
    {
      v70 = (void *)BYTE7(v110);
      v71 = (void **)__p[0];
      v72 = __p[1];
      sub_2241471F8();
      v73 = (char)v70 >= 0 ? __p : v71;
      v74 = (char)v70 >= 0 ? v70 : v72;
      v75 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v73, v74);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v75 + 24))(v75))
      {
        memset(v122, 0, 32);
        *(_DWORD *)&v122[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v75 + 24))(v75))
        {
          v108.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v108.__r_.__value_.__l.__size_ = 2;
          v76 = sub_2241471F8();
          sub_2233B48CC((uint64_t)v76, v75, (uint64_t)v111, (__int128 *)&v108);
        }
        kdebug_trace();
      }
    }
  }
  if (SBYTE7(v110) < 0)
    operator delete(__p[0]);
LABEL_107:
  v77 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v77 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
    sub_223197FA4(&v108, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  else
    v108 = *(std::string *)byte_25578BAF8;
  v78 = std::string::append(&v108, ".", 1uLL);
  v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  *(_QWORD *)&v110 = *((_QWORD *)&v78->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  v80 = a2[23];
  if (v80 >= 0)
    v81 = a2;
  else
    v81 = *(const std::string::value_type **)a2;
  if (v80 >= 0)
    v82 = *((unsigned __int8 *)a2 + 23);
  else
    v82 = *((_QWORD *)a2 + 1);
  v83 = std::string::append((std::string *)__p, v81, v82);
  v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
  *(_QWORD *)&v122[16] = *((_QWORD *)&v83->__r_.__value_.__l + 2);
  *(_OWORD *)v122 = v84;
  v83->__r_.__value_.__l.__size_ = 0;
  v83->__r_.__value_.__r.__words[2] = 0;
  v83->__r_.__value_.__r.__words[0] = 0;
  if (v122[23] >= 0)
    v85 = v122;
  else
    v85 = *(const char **)v122;
  v86 = strlen(v85);
  sub_2241471F8();
  v87 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v85, v86);
  v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 24))(v87);
  if ((v122[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v122);
    if ((SBYTE7(v110) & 0x80000000) == 0)
    {
LABEL_122:
      if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_123;
      goto LABEL_127;
    }
  }
  else if ((SBYTE7(v110) & 0x80000000) == 0)
  {
    goto LABEL_122;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_123:
    if (!v88)
      return;
    goto LABEL_128;
  }
LABEL_127:
  operator delete(v108.__r_.__value_.__l.__data_);
  if (!v88)
    return;
LABEL_128:
  v89 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v89 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
    sub_223197FA4(&v106, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  else
    v106 = *(std::string *)byte_25578BAF8;
  v90 = std::string::append(&v106, ".", 1uLL);
  v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v91;
  v90->__r_.__value_.__l.__size_ = 0;
  v90->__r_.__value_.__r.__words[2] = 0;
  v90->__r_.__value_.__r.__words[0] = 0;
  v92 = a2[23];
  if (v92 >= 0)
    v93 = a2;
  else
    v93 = *(const std::string::value_type **)a2;
  if (v92 >= 0)
    v94 = *((unsigned __int8 *)a2 + 23);
  else
    v94 = *((_QWORD *)a2 + 1);
  v95 = std::string::append(&__dst, v93, v94);
  v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
  v108.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v96;
  v95->__r_.__value_.__l.__size_ = 0;
  v95->__r_.__value_.__r.__words[2] = 0;
  v95->__r_.__value_.__r.__words[0] = 0;
  v97 = std::string::append(&v108, ".", 1uLL);
  v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
  *(_QWORD *)&v110 = *((_QWORD *)&v97->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v98;
  v97->__r_.__value_.__l.__size_ = 0;
  v97->__r_.__value_.__r.__words[2] = 0;
  v97->__r_.__value_.__r.__words[0] = 0;
  v99 = std::string::append((std::string *)__p, "color_frame_intrinsics", 0x16uLL);
  v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
  *(_QWORD *)&v122[16] = *((_QWORD *)&v99->__r_.__value_.__l + 2);
  *(_OWORD *)v122 = v100;
  v99->__r_.__value_.__l.__size_ = 0;
  v99->__r_.__value_.__r.__words[2] = 0;
  v99->__r_.__value_.__r.__words[0] = 0;
  if (v122[23] >= 0)
    v101 = v122;
  else
    v101 = *(const char **)v122;
  v102 = strlen(v101);
  sub_2241471F8();
  v103 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v101, v102);
  if ((v122[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v122);
    if ((SBYTE7(v110) & 0x80000000) == 0)
    {
LABEL_143:
      if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_144;
      goto LABEL_153;
    }
  }
  else if ((SBYTE7(v110) & 0x80000000) == 0)
  {
    goto LABEL_143;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_144:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_145;
LABEL_154:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_146;
    goto LABEL_155;
  }
LABEL_153:
  operator delete(v108.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_154;
LABEL_145:
  if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_146;
LABEL_155:
  operator delete(v106.__r_.__value_.__l.__data_);
LABEL_146:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v103 + 24))(v103))
  {
    v104 = atomic_load((unsigned __int8 *)&unk_25578BB10);
    if ((v104 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
    {
      __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
      __cxa_guard_release((__guard *)&unk_25578BB10);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v103 + 24))(v103))
    {
      *(_QWORD *)v122 = (uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
      *(_QWORD *)&v122[8] = 2;
      v105 = sub_2241471F8();
      sub_2233B48CC((uint64_t)v105, v103, (uint64_t)v111, (__int128 *)v122);
    }
  }
}

void sub_2233B2628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2233B2828(_QWORD *result)
{
  *result = &off_24EC35E10;
  return result;
}

unint64_t sub_2233B2838(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD **v20;
  int v21;
  _QWORD *v22;

  v3 = 0x1555555555555555;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555)
    sub_22316E078();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 2) < 0xAAAAAAAAAAAAAAALL)
    v3 = v5;
  if (v3)
  {
    LODWORD(v22) = v3;
    v7 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v7 == -1)
      sub_22316DD70();
    v20 = &v22;
    v8 = ((uint64_t (*)(_QWORD ***, unint64_t *))off_24EC35DA0[v7])(&v20, a1 + 3);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 12 * v4;
  v11 = *a2;
  *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v10 = v11;
  v12 = v10 + 12;
  v14 = *a1;
  v13 = a1[1];
  if (v13 != *a1)
  {
    do
    {
      v15 = *(_QWORD *)(v13 - 12);
      v13 -= 12;
      v16 = *(_DWORD *)(v13 + 8);
      *(_QWORD *)(v10 - 12) = v15;
      v10 -= 12;
      *(_DWORD *)(v10 + 8) = v16;
    }
    while (v13 != v14);
    v13 = *a1;
  }
  *a1 = v10;
  a1[1] = v12;
  v17 = a1[2];
  a1[2] = v8 + 12 * v9;
  if (v13)
  {
    v20 = (_QWORD **)v13;
    v21 = -1431655765 * ((v17 - v13) >> 2);
    v18 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v18 == -1)
      sub_22316DD70();
    v22 = &v20;
    ((void (*)(_QWORD **, unint64_t *))off_24EC35DB0[v18])(&v22, a1 + 3);
  }
  return v12;
}

unint64_t sub_2233B29C0(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD **v20;
  int v21;
  _QWORD *v22;

  v3 = 0x1555555555555555;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555)
    sub_22316E078();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 2) < 0xAAAAAAAAAAAAAAALL)
    v3 = v5;
  if (v3)
  {
    LODWORD(v22) = v3;
    v7 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v7 == -1)
      sub_22316DD70();
    v20 = &v22;
    v8 = ((uint64_t (*)(_QWORD ***, unint64_t *))off_24EC35DC0[v7])(&v20, a1 + 3);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 12 * v4;
  v11 = *a2;
  *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v10 = v11;
  v12 = v10 + 12;
  v14 = *a1;
  v13 = a1[1];
  if (v13 != *a1)
  {
    do
    {
      v15 = *(_QWORD *)(v13 - 12);
      v13 -= 12;
      v16 = *(_DWORD *)(v13 + 8);
      *(_QWORD *)(v10 - 12) = v15;
      v10 -= 12;
      *(_DWORD *)(v10 + 8) = v16;
    }
    while (v13 != v14);
    v13 = *a1;
  }
  *a1 = v10;
  a1[1] = v12;
  v17 = a1[2];
  a1[2] = v8 + 12 * v9;
  if (v13)
  {
    v20 = (_QWORD **)v13;
    v21 = -1431655765 * ((v17 - v13) >> 2);
    v18 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v18 == -1)
      sub_22316DD70();
    v22 = &v20;
    ((void (*)(_QWORD **, unint64_t *))off_24EC35DD0[v18])(&v22, a1 + 3);
  }
  return v12;
}

unint64_t sub_2233B2B48(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD **v20;
  int v21;
  _QWORD *v22;

  v3 = 0x1555555555555555;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555)
    sub_22316E078();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 2) < 0xAAAAAAAAAAAAAAALL)
    v3 = v5;
  if (v3)
  {
    LODWORD(v22) = v3;
    v7 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v7 == -1)
      sub_22316DD70();
    v20 = &v22;
    v8 = ((uint64_t (*)(_QWORD ***, unint64_t *))off_24EC35DA0[v7])(&v20, a1 + 3);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 12 * v4;
  v11 = *a2;
  *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v10 = v11;
  v12 = v10 + 12;
  v14 = *a1;
  v13 = a1[1];
  if (v13 != *a1)
  {
    do
    {
      v15 = *(_QWORD *)(v13 - 12);
      v13 -= 12;
      v16 = *(_DWORD *)(v13 + 8);
      *(_QWORD *)(v10 - 12) = v15;
      v10 -= 12;
      *(_DWORD *)(v10 + 8) = v16;
    }
    while (v13 != v14);
    v13 = *a1;
  }
  *a1 = v10;
  a1[1] = v12;
  v17 = a1[2];
  a1[2] = v8 + 12 * v9;
  if (v13)
  {
    v20 = (_QWORD **)v13;
    v21 = -1431655765 * ((v17 - v13) >> 2);
    v18 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v18 == -1)
      sub_22316DD70();
    v22 = &v20;
    ((void (*)(_QWORD **, unint64_t *))off_24EC35DB0[v18])(&v22, a1 + 3);
  }
  return v12;
}

_DWORD *sub_2233B2CD0(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD **v23;
  int v24;
  _QWORD *v25;

  v5 = 0x1555555555555555;
  v6 = *(_QWORD ***)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *(_QWORD *)a1) >> 2);
  v9 = v8 + 1;
  if (v8 + 1 > 0x1555555555555555)
    sub_22316E078();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2) > v9)
    v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2) < 0xAAAAAAAAAAAAAAALL)
    v5 = v9;
  if (v5)
  {
    LODWORD(v25) = v5;
    v13 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v13 == -1)
      sub_22316DD70();
    v23 = &v25;
    v14 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC35DC0[v13])(&v23, a1 + 24);
    v6 = *(_QWORD ***)a1;
    v7 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v16 = (_DWORD *)(v14 + 12 * v8);
  *v16 = *a2;
  v16[1] = *a3;
  v16[2] = *a4;
  v17 = v16 + 3;
  if ((_QWORD **)v7 != v6)
  {
    do
    {
      v18 = *(_QWORD *)(v7 - 12);
      v7 -= 12;
      v19 = *(_DWORD *)(v7 + 8);
      *(_QWORD *)(v16 - 3) = v18;
      v16 -= 3;
      v16[2] = v19;
    }
    while ((_QWORD **)v7 != v6);
    v6 = *(_QWORD ***)a1;
  }
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v17;
  v20 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14 + 12 * v15;
  if (v6)
  {
    v23 = v6;
    v24 = -1431655765 * ((unint64_t)(v20 - (_QWORD)v6) >> 2);
    v21 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v21 == -1)
      sub_22316DD70();
    v25 = &v23;
    ((void (*)(_QWORD **, uint64_t))off_24EC35DD0[v21])(&v25, a1 + 24);
  }
  return v17;
}

_DWORD *sub_2233B2E70(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD **v23;
  int v24;
  _QWORD *v25;

  v5 = 0x1555555555555555;
  v6 = *(_QWORD ***)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *(_QWORD *)a1) >> 2);
  v9 = v8 + 1;
  if (v8 + 1 > 0x1555555555555555)
    sub_22316E078();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2) > v9)
    v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2) < 0xAAAAAAAAAAAAAAALL)
    v5 = v9;
  if (v5)
  {
    LODWORD(v25) = v5;
    v13 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v13 == -1)
      sub_22316DD70();
    v23 = &v25;
    v14 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC35DC0[v13])(&v23, a1 + 24);
    v6 = *(_QWORD ***)a1;
    v7 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v16 = (_DWORD *)(v14 + 12 * v8);
  *v16 = *a2;
  v16[1] = *a3;
  v16[2] = *a4;
  v17 = v16 + 3;
  if ((_QWORD **)v7 != v6)
  {
    do
    {
      v18 = *(_QWORD *)(v7 - 12);
      v7 -= 12;
      v19 = *(_DWORD *)(v7 + 8);
      *(_QWORD *)(v16 - 3) = v18;
      v16 -= 3;
      v16[2] = v19;
    }
    while ((_QWORD **)v7 != v6);
    v6 = *(_QWORD ***)a1;
  }
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v17;
  v20 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14 + 12 * v15;
  if (v6)
  {
    v23 = v6;
    v24 = -1431655765 * ((unint64_t)(v20 - (_QWORD)v6) >> 2);
    v21 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v21 == -1)
      sub_22316DD70();
    v25 = &v23;
    ((void (*)(_QWORD **, uint64_t))off_24EC35DD0[v21])(&v25, a1 + 24);
  }
  return v17;
}

_QWORD *sub_2233B3014(_QWORD *result)
{
  *result = &off_24EC35E10;
  return result;
}

void sub_2233B3024(_QWORD *a1)
{
  *a1 = &off_24EC35E10;
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2233B3044()
{
  return 1;
}

uint64_t sub_2233B304C()
{
  return 12;
}

uint64_t sub_2233B3054(uint64_t a1)
{
  return a1 + 152;
}

void sub_2233B305C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  __int16 v11;
  unint64_t v12;
  __n128 v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[3];
  uint64_t v20;
  __int128 v21;
  uint64_t (**v22)();

  v16 = *(_QWORD *)(a1 + 8);
  v22 = &off_24EC217B0;
  sub_224498F50(&v16, (uint64_t)&v18);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24EC217F8;
  *(_OWORD *)(v4 + 8) = v19[0];
  *(_OWORD *)(v4 + 20) = *(_OWORD *)((char *)v19 + 12);
  *(_OWORD *)(v4 + 40) = v19[2];
  *(_QWORD *)(v4 + 56) = v20;
  *(_OWORD *)(v4 + 64) = v21;
  v17 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC21890;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v17 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v18, v4, 4);
  v8 = *(_QWORD *)(v18 + 16);
  *(_OWORD *)(a2 + 3) = *(_OWORD *)v18;
  a2[5] = v8;
  v18 = 0;
  MEMORY[0x227684CE8]();
  a2[6] = a2[3];
  *(_OWORD *)(a2 + 7) = *((_OWORD *)a2 + 2);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v10 = v9;
  if ((v9 & 0xFFFFFF) <= 0x10000)
    v10 = 0;
  v11 = v9 & 0xFF00;
  if ((v9 & 0xFF0000) == 0)
    v11 = 0;
  *((_WORD *)a2 + 36) = v11 & 0xFF00 | v10;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v13.n128_f32[0] = sub_22330C974(a1, (uint64_t)(a2 + 3));
  v14 = v17;
  if (v17)
  {
    v15 = *(void **)(v17 + 48);
    if (v15)
      free(v15);
    *(_QWORD *)(v14 + 48) = 0;
    MEMORY[0x227684CE8](v14, 0x1091C406A8758A4, v13);
  }
}

void sub_2233B3254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_223167354(v5);
  sub_2231C2088((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2233B3270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_223167354(v2);
  sub_223167354((uint64_t)va);
  sub_2231C2088((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2233B32A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2231C2088((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2233B32B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (a20)
    free(a20);
  _Unwind_Resume(exception_object);
}

void sub_2233B32D0(_DWORD *a1@<X0>, _BYTE *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();

  v24 = &off_24EC21C10;
  sub_224499EE0(a1, a2, (uint64_t)&v15);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24EC21C58;
  *(_OWORD *)(v4 + 8) = v16;
  *(_OWORD *)(v4 + 24) = v17;
  *(_OWORD *)(v4 + 40) = v18;
  *(_QWORD *)(v4 + 56) = v19;
  *(_OWORD *)(v4 + 64) = v20;
  *(_QWORD *)(v4 + 80) = v21;
  *(_QWORD *)(v4 + 104) = v23;
  *(_OWORD *)(v4 + 88) = v22;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC21CF0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  *a3 = v4;
  a3[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a3[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v15, v4, 21);
  v9 = v15[1];
  v8 = v15[2];
  *(_OWORD *)(a3 + 3) = *v15;
  *(_OWORD *)(a3 + 5) = v9;
  *(_OWORD *)(a3 + 7) = v8;
  v15 = 0;
  MEMORY[0x227684CE8]();
  a3[9] = a3[3];
  a3[14] = a3[8];
  v10 = *((_OWORD *)a3 + 3);
  *((_OWORD *)a3 + 5) = *((_OWORD *)a3 + 2);
  *((_OWORD *)a3 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 104))(*a3);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a3 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_2233B34C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_223167354(v10);
  sub_223167354((uint64_t)&a10);
  sub_2231C5F84(&a9);
  _Unwind_Resume(a1);
}

void sub_2233B34FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231C5F84(&a9);
  _Unwind_Resume(a1);
}

void sub_2233B3510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21)
    free(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233B3528@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info info;
  _QWORD v16[2];
  __int128 v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v13) = info.numer;
    LODWORD(v14) = info.denom;
    *(double *)&qword_255795558 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_255795560);
  }
  v16[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v16[1] = 2;
  LOBYTE(v17) = 0;
  v19 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v17 = *a2;
    v18 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v19 = 1;
  }
  v20 = 0;
  v21 = 0;
  v22 = *a3;
  v23 = 1;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v10 = operator new();
  sub_2233B3758(v10, a1, (uint64_t)v16);
  info = 0;
  *a4 = &off_24EC6A3B8;
  a4[1] = v10;
  v11 = (_QWORD *)operator new();
  *v11 = &off_24EC6A4B0;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v10;
  a4[2] = v11;
  return sub_2231AD66C((uint64_t)v16);
}

void sub_2233B36D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_2233B36EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2231C35FC((_QWORD **)va);
  sub_2231AD66C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2233B3718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x227684CE8](v3, 0x10F3C4035895BD5);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233B3744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2233B3758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  _OWORD v12[2];

  sub_2233B3878(a2, (uint64_t)&v11);
  *(_QWORD *)a1 = &off_24EC21AC8;
  *(_QWORD *)(a1 + 8) = &off_24EC219D8;
  v5 = v11;
  v6 = v12[0];
  v11 = 0uLL;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 46) = *(_OWORD *)((char *)v12 + 14);
  sub_2231AB0FC(a1 + 64, a3);
  *(_QWORD *)a1 = &off_24EC21A48;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_24EC6A528;
  return a1;
}

void sub_2233B3828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  v5 = *(std::__shared_weak_count **)(v2 + 24);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_2231C37EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2233B3878(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(_DWORD *)(a1 + 76);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(_DWORD *)(a1 + 76);
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = 1;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a2 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a2 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_2233B3A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

unint64_t sub_2233B3A8C(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD **v20;
  int v21;
  _QWORD *v22;

  v3 = 0x1555555555555555;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555)
    sub_22316E078();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 2) < 0xAAAAAAAAAAAAAAALL)
    v3 = v5;
  if (v3)
  {
    LODWORD(v22) = v3;
    v7 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v7 == -1)
      sub_22316DD70();
    v20 = &v22;
    v8 = ((uint64_t (*)(_QWORD ***, unint64_t *))off_24EC35DA0[v7])(&v20, a1 + 3);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 12 * v4;
  v11 = *a2;
  *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v10 = v11;
  v12 = v10 + 12;
  v14 = *a1;
  v13 = a1[1];
  if (v13 != *a1)
  {
    do
    {
      v15 = *(_QWORD *)(v13 - 12);
      v13 -= 12;
      v16 = *(_DWORD *)(v13 + 8);
      *(_QWORD *)(v10 - 12) = v15;
      v10 -= 12;
      *(_DWORD *)(v10 + 8) = v16;
    }
    while (v13 != v14);
    v13 = *a1;
  }
  *a1 = v10;
  a1[1] = v12;
  v17 = a1[2];
  a1[2] = v8 + 12 * v9;
  if (v13)
  {
    v20 = (_QWORD **)v13;
    v21 = -1431655765 * ((v17 - v13) >> 2);
    v18 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v18 == -1)
      sub_22316DD70();
    v22 = &v20;
    ((void (*)(_QWORD **, unint64_t *))off_24EC35DB0[v18])(&v22, a1 + 3);
  }
  return v12;
}

uint64_t sub_2233B3C14(uint64_t a1, uint64_t a2, _OWORD *a3, __int128 *a4)
{
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  _QWORD v23[2];
  std::__shared_weak_count *v24;
  __int128 v25;
  __int128 v26;
  void *__p;
  void *v28;
  _OWORD *v29;
  _QWORD v30[2];
  char v31;
  char v32;
  char v33;
  char v34;
  __int128 v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    v9 = mach_continuous_time();
    v10 = atomic_load((unsigned __int8 *)&qword_255795560);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
    {
      mach_timebase_info((mach_timebase_info_t)&__p);
      LODWORD(v22) = HIDWORD(__p);
      LODWORD(v21) = (_DWORD)__p;
      *(double *)&qword_255795558 = (double)v21 / (double)v22;
      __cxa_guard_release(&qword_255795560);
    }
    v30[0] = llround(*(double *)&qword_255795558 * (double)v9);
    v30[1] = 2;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = *a4;
    v36 = 1;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v11 = operator new(0x40uLL);
    v28 = v11 + 4;
    v29 = v11 + 4;
    v12 = a3[1];
    *v11 = *a3;
    v11[1] = v12;
    v13 = a3[3];
    v11[2] = a3[2];
    v11[3] = v13;
    __p = v11;
    sub_22450FA68(&v26, 11, (uint64_t)&__p);
    if (__p)
    {
      v28 = __p;
      operator delete(__p);
    }
    v25 = v26;
    sub_223305AC8((uint64_t *)&v25, (uint64_t)v30, v23);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    sub_2231AD66C((uint64_t)v30);
    sub_2231AA5A4(a1, v8, (uint64_t)v23);
    v17 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  return a1;
}

void sub_2233B3E3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_2233B3E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2241231D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233B3E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_2231AD66C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2233B3E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (__p)
  {
    operator delete(__p);
    sub_2231AD66C((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  sub_2231AD66C((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_2233B3EBC(_QWORD *a1)
{
  *a1 = &off_24EC35E10;
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2233B3EDC()
{
  return 1;
}

uint64_t sub_2233B3EE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  std::logic_error *exception;

  *(_QWORD *)a1 = &off_24EC35EF0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *((_OWORD *)a2 + 1);
  v3 = *a2;
  v4 = *((double *)a2 + 1);
  v5 = 1.0 / *(double *)a2;
  v6 = *((double *)a2 + 2);
  v7 = *((double *)a2 + 3);
  *(double *)(a1 + 40) = v5;
  *(double *)(a1 + 48) = 1.0 / v4;
  *(double *)(a1 + 56) = -(v6 * v5);
  *(double *)(a1 + 64) = -(v7 * (1.0 / v4));
  *(_QWORD *)(a1 + 72) = v3;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(double *)(a1 + 104) = v4;
  *(_QWORD *)(a1 + 112) = 0;
  *(double *)(a1 + 120) = v6;
  *(double *)(a1 + 128) = v7;
  *(_QWORD *)(a1 + 136) = 0x3FF0000000000000;
  if (!sub_2233B3FC4((double *)(a1 + 8)))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PinholeModel parameters invalid");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  return a1;
}

void sub_2233B3FB0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2233B3FC4(double *a1)
{
  int v1;
  _BYTE v3[16];
  void *__p;
  char v5;
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  char v11;
  char v12;
  unsigned __int8 v13;

  sub_2233B40B8(a1, (uint64_t)v3);
  v1 = v13;
  if (v13)
  {
    sub_22320846C((uint64_t)v3);
    if (v13)
      return v1 != 0;
  }
  if (!v12)
    return v1 != 0;
  if (v11)
  {
    if ((v10 & 0x80000000) == 0)
    {
      if ((v8 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_12:
      operator delete(v7);
      if (!v6)
        return v1 != 0;
      goto LABEL_9;
    }
    operator delete(v9);
    if (v8 < 0)
      goto LABEL_12;
  }
LABEL_8:
  if (!v6)
    return v1 != 0;
LABEL_9:
  if ((v5 & 0x80000000) == 0)
    return v1 != 0;
  operator delete(__p);
  return v1 != 0;
}

void sub_2233B4080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223197D38((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2233B4094()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2233B40A8()
{
  return 1;
}

uint64_t sub_2233B40B0()
{
  return 12;
}

void sub_2233B40B8(double *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  void *__dst[2];
  uint64_t v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  char v20;
  char v21;
  void *__p[2];
  char v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  char v29;
  char v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unsigned __int8 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  char v41;

  v4 = ((_QWORD)a1[2] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
    && ((_QWORD)a1[3] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  v5 = ((_QWORD)a1[1] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
    && (*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if (v5 && v4)
  {
    if (*a1 < 0.00000001 || a1[1] < 0.00000001)
    {
      v10 = 0x3E45798EE2308C3ALL;
      sub_2233B44A0("focal length must be positive (>= ", (double *)&v10, (uint64_t)")");
      if (SHIBYTE(v12) < 0)
      {
        sub_223197FA4(__dst, v11[0], (unint64_t)v11[1]);
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)v11;
        v14 = v12;
      }
      v15 = 1;
      LOBYTE(v16) = 0;
      v20 = 0;
      v21 = 1;
      sub_2231A958C(0x16u, (__int128 *)__dst, (uint64_t)&v31);
      *(_OWORD *)a2 = v31;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 112) = 0;
      if (v41)
      {
        *(_BYTE *)(a2 + 40) = 0;
        v8 = v34;
        if (v34)
        {
          *(_OWORD *)(a2 + 16) = v32;
          *(_QWORD *)(a2 + 32) = v33;
          v33 = 0;
          v32 = 0uLL;
          *(_BYTE *)(a2 + 40) = 1;
        }
        *(_BYTE *)(a2 + 48) = 0;
        *(_BYTE *)(a2 + 104) = 0;
        if (v40)
        {
          v9 = v37;
          *(_QWORD *)(a2 + 64) = v36;
          *(_OWORD *)(a2 + 48) = v35;
          v35 = 0uLL;
          *(_QWORD *)(a2 + 72) = v9;
          *(_OWORD *)(a2 + 80) = v38;
          *(_QWORD *)(a2 + 96) = v39;
          v36 = 0;
          v38 = 0uLL;
          v39 = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        *(_BYTE *)(a2 + 112) = 1;
        *(_BYTE *)(a2 + 120) = 0;
        if (v8 && SHIBYTE(v33) < 0)
          operator delete((void *)v32);
      }
      else
      {
        *(_BYTE *)(a2 + 120) = 0;
      }
      if (v21)
      {
        if (v20)
        {
          if (v19 < 0)
            operator delete(v18);
          if (v17 < 0)
            operator delete(v16);
        }
        if (v15 && SHIBYTE(v14) < 0)
          operator delete(__dst[0]);
      }
      if (SHIBYTE(v12) < 0)
        operator delete(v11[0]);
    }
    else
    {
      *(_BYTE *)(a2 + 120) = 1;
    }
    return;
  }
  sub_223208674(__p, "focal length and principal point must be finite");
  v30 = 1;
  sub_2231A958C(0x16u, (__int128 *)__p, (uint64_t)&v31);
  *(_OWORD *)a2 = v31;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (!v41)
  {
    *(_BYTE *)(a2 + 120) = 0;
    if (!v30)
      return;
LABEL_30:
    if (!v29)
      goto LABEL_33;
    if (v28 < 0)
    {
      operator delete(v27);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_33:
        if (!v24)
          return;
        goto LABEL_34;
      }
    }
    else if ((v26 & 0x80000000) == 0)
    {
      goto LABEL_33;
    }
    operator delete(v25);
    if (!v24)
      return;
LABEL_34:
    if (v23 < 0)
      operator delete(__p[0]);
    return;
  }
  *(_BYTE *)(a2 + 40) = 0;
  v6 = v34;
  if (v34)
  {
    *(_OWORD *)(a2 + 16) = v32;
    *(_QWORD *)(a2 + 32) = v33;
    v33 = 0;
    v32 = 0uLL;
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  if (v40)
  {
    v7 = v37;
    *(_QWORD *)(a2 + 64) = v36;
    *(_OWORD *)(a2 + 48) = v35;
    v35 = 0uLL;
    *(_QWORD *)(a2 + 72) = v7;
    *(_OWORD *)(a2 + 80) = v38;
    *(_QWORD *)(a2 + 96) = v39;
    v36 = 0;
    v38 = 0uLL;
    v39 = 0;
    *(_BYTE *)(a2 + 104) = 1;
  }
  *(_BYTE *)(a2 + 112) = 1;
  *(_BYTE *)(a2 + 120) = 0;
  if (v6 && SHIBYTE(v33) < 0)
    operator delete((void *)v32);
  if (v30)
    goto LABEL_30;
}

void sub_2233B4460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233B44A0(char *__s, double *a2, uint64_t a3)
{
  uint64_t result;
  char v6;
  _DWORD v7[6];
  int v8;
  _QWORD v9[5];
  _QWORD *v10;

  v8 = 0;
  sub_223208A48(v7, __s);
  sub_2233B45E8((uint64_t)&v6, (uint64_t)v7, a2);
  v9[0] = v7;
  v9[1] = a3;
  v9[2] = v7;
  v9[3] = a3;
  v9[4] = a3;
  if (v8 == -1)
    sub_22316DD70();
  v10 = v9;
  ((void (*)(_QWORD **, _DWORD *))off_24EC35E58[v8])(&v10, v7);
  if (v8 == -1)
    sub_22316DD70();
  v9[0] = &v10;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC35E88[v8])(v9, v7);
  if (v8 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC35E40[v8])(v9, v7);
  return result;
}

void sub_2233B4598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233B45AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233B45C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233B45D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233B45E8(uint64_t a1, uint64_t a2, double *a3)
{
  std::string *v5;
  std::string *v6;
  std::string::size_type size;
  char *v8;
  int v9;
  uint64_t v10;
  std::string::size_type v11;
  std::string *v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  unint64_t v21;
  std::string v22;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;
  std::string *v26;
  std::string *v27;
  uint64_t *v28;

  std::to_string(&v22, *a3);
  v5 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v22;
  else
    v6 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  else
    size = v22.__r_.__value_.__l.__size_;
  v8 = (char *)&v6[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size)
    {
      size = -1;
      if ((*((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_14;
LABEL_11:
      if (size != HIBYTE(v22.__r_.__value_.__r.__words[2]) - 1)
      {
        v5 = &v22;
        goto LABEL_17;
      }
LABEL_15:
      v23 = a2;
      v24 = &v22;
      v25 = a2;
      v26 = &v22;
      v27 = &v22;
      v10 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v10 == -1)
        sub_22316DD70();
      goto LABEL_16;
    }
    v9 = v8[size--];
  }
  while (v9 == 48);
  if ((*((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x80) == 0)
    goto LABEL_11;
LABEL_14:
  if (size == v22.__r_.__value_.__l.__size_ - 1)
    goto LABEL_15;
LABEL_17:
  if (strtod((const char *)v5, 0) != *a3)
  {
    v23 = a2;
    v24 = &v22;
    v25 = a2;
    v26 = &v22;
    v27 = &v22;
    v10 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v10 == -1)
      sub_22316DD70();
LABEL_16:
    __p[0] = &v23;
    ((void (*)(void **, uint64_t))off_24EC35F40[v10])(__p, a2);
    goto LABEL_40;
  }
  v11 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v22;
  else
    v12 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = v22.__r_.__value_.__l.__size_;
  v13 = 1;
  if (v12->__r_.__value_.__s.__data_[size] == 46)
    v13 = 2;
  v14 = v13 + size;
  if (v11 >= v14)
    v15 = v14;
  else
    v15 = v11;
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    __p[1] = (void *)v15;
    v21 = v18 | 0x8000000000000000;
    __p[0] = v16;
    goto LABEL_37;
  }
  HIBYTE(v21) = v15;
  v16 = __p;
  if (v15)
LABEL_37:
    memmove(v16, v12, v15);
  *((_BYTE *)v16 + v15) = 0;
  v23 = a2;
  v24 = (std::string *)__p;
  v25 = a2;
  v26 = (std::string *)__p;
  v27 = (std::string *)__p;
  v19 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v19 == -1)
    sub_22316DD70();
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24EC35E70[v19])(&v28, a2);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_40:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_43;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
LABEL_43:
  operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_2233B4860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233B48CC(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  char *v11;
  std::__shared_weak_count *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v28;
  unint64_t v29;
  _QWORD v30[2];
  std::__shared_weak_count *v31;
  mach_timebase_info info;
  char *v33;
  std::__shared_weak_count *v34;
  _QWORD v35[2];
  char v36;
  char v37;
  char v38;
  char v39;
  __int128 v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    v9 = mach_continuous_time();
    v10 = atomic_load((unsigned __int8 *)&qword_255795560);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
    {
      mach_timebase_info(&info);
      LODWORD(v28) = info.numer;
      LODWORD(v29) = info.denom;
      *(double *)&qword_255795558 = (double)v28 / (double)v29;
      __cxa_guard_release(&qword_255795560);
    }
    v35[0] = llround(*(double *)&qword_255795558 * (double)v9);
    v35[1] = 2;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = *a4;
    v41 = 1;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v11 = (char *)operator new(0xB8uLL);
    v12 = (std::__shared_weak_count *)v11;
    v13 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(v11 + 40) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v11 + 56) = v13;
    v14 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(v11 + 72) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(v11 + 88) = v14;
    v15 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(v11 + 120) = *(_OWORD *)(a3 + 96);
    v16 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(v11 + 136) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(v11 + 152) = v16;
    *((_QWORD *)v11 + 1) = 0;
    v17 = (unint64_t *)(v11 + 8);
    *((_QWORD *)v11 + 2) = 0;
    *(_QWORD *)v11 = &off_24EC35F68;
    *((_QWORD *)v11 + 4) = &off_24EC35EF0;
    *(_OWORD *)(v11 + 104) = v15;
    *((_QWORD *)v11 + 3) = &off_24EC35EB0;
    v18 = *(_QWORD *)(a3 + 152);
    *((_QWORD *)v11 + 21) = *(_QWORD *)(a3 + 144);
    *((_QWORD *)v11 + 22) = v18;
    info = (mach_timebase_info)&off_24EC6D000;
    v33 = v11 + 24;
    v34 = (std::__shared_weak_count *)v11;
    do
      v19 = __ldxr(v17);
    while (__stxr(v19 + 1, v17));
    do
      v20 = __ldaxr(v17);
    while (__stlxr(v20 - 1, v17));
    if (!v20)
    {
      (*(void (**)(char *))(*(_QWORD *)v11 + 16))(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    sub_2232A55DC((uint64_t)&info, (uint64_t)v35, v30);
    info = (mach_timebase_info)&off_24EC6D000;
    v21 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    sub_2231AD66C((uint64_t)v35);
    sub_2231AA5A4(a1, v8, (uint64_t)v30);
    v24 = v31;
    if (v31)
    {
      v25 = (unint64_t *)&v31->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  return a1;
}

void sub_2233B4B70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_2233B4B88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2241231D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233B4B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_224159450((uint64_t *)va);
  sub_2231AD66C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2233B4BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233B4BCC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC35F68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2233B4BDC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC35F68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2233B4C0C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_2233B4C1C(uint64_t *a1, unsigned __int32 *a2, uint64_t a3, float32x4_t a4, float32x4_t a5, int32x4_t a6, float32x4_t a7)
{
  float32x4_t v7;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  float32x4_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char *v29;
  int32x4_t v30;
  char *v31;
  int32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  float32x4_t v41;
  float32x4_t v42;
  char v43;
  _QWORD *v44;
  uint64_t *v45;
  float *v46;
  _QWORD v47[2];
  uint64_t v48;
  unsigned int *v49;
  unint64_t v50;
  unsigned __int32 v51;
  unint64_t v52;
  unsigned __int32 v53;
  uint64_t v54;
  __int32 v55;
  unsigned __int32 v56;
  float *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  char *v62;
  _QWORD *v63;
  uint64_t *v64;
  __int32 v65;

  if (a2[1])
    return 0;
  v7.i64[0] = *(_QWORD *)(a3 + 48);
  v7.i32[2] = *(_DWORD *)(a3 + 56);
  a4.i32[0] = *a2;
  v56 = *a2;
  v9 = *a1;
  v10 = a1[1];
  if (*a1 == v10)
    return 0;
  v11 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0);
  v12 = xmmword_2245F4CE0;
  v13 = xmmword_2245F4CF0;
  v14 = xmmword_2245C76E0;
  while (1)
  {
    if (*(_BYTE *)(v9 + 120))
    {
      a5.i64[0] = *(_QWORD *)(v9 + 56);
      a5.i32[2] = *(_DWORD *)(v9 + 64);
      a6.i64[0] = *(_QWORD *)(v9 + 72);
      a6.i32[2] = *(_DWORD *)(v9 + 80);
      a4.i64[0] = *(_QWORD *)(v9 + 88);
      a4.i32[2] = *(_DWORD *)(v9 + 96);
      a7.i64[0] = *(_QWORD *)(v9 + 104);
      a7.i32[2] = *(_DWORD *)(v9 + 112);
    }
    else
    {
      a7 = 0uLL;
      a4 = (float32x4_t)v14;
      a6 = (int32x4_t)v13;
      a5 = (float32x4_t)v12;
    }
    a7 = vsubq_f32(v7, a7);
    *(float32x2_t *)v18.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)a5.f32, *(int32x2_t *)a6.i8), a7.f32[0]), (float32x2_t)vzip2_s32(*(int32x2_t *)a5.f32, *(int32x2_t *)a6.i8), *(float32x2_t *)a7.f32, 1), (float32x2_t)*(_OWORD *)&vzip2q_s32((int32x4_t)a5, a6), a7, 2);
    *(float32x2_t *)&v18.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a4.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a4.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a4, (int8x16_t)a4, 8uLL));
    v55 = v18.i32[2];
    v54 = v18.i64[0];
    a4 = vsubq_f32(v18, v11);
    v51 = a4.u32[2];
    a5 = vaddq_f32(v11, v18);
    v50 = a4.i64[0];
    v53 = a5.u32[2];
    v52 = a5.i64[0];
    a7.i32[0] = a4.i32[1];
    a6 = vcgtq_f32(a4, a5);
    a6.i8[0] = vmovn_s32(a6).u8[0];
    if ((a6.i8[0] & 1) != 0)
      v19 = a4.f32[0];
    else
      v19 = a5.f32[0];
    if ((a6.i8[0] & 1) != 0)
      v20 = a5.f32[0];
    else
      v20 = a4.f32[0];
    if (a4.f32[1] <= a5.f32[1])
      v21 = a4.f32[1];
    else
      v21 = a5.f32[1];
    if (a4.f32[2] <= a5.f32[2])
      v22 = a5.f32[2];
    else
      v22 = a4.f32[2];
    if (a4.f32[2] <= a5.f32[2])
      v23 = a4.f32[2];
    else
      v23 = a5.f32[2];
    if (*(float *)(v9 + 144) > v19)
      goto LABEL_8;
    if (a4.f32[1] <= a5.f32[1])
      a7.f32[0] = a5.f32[1];
    if (*(float *)(v9 + 148) > a7.f32[0]
      || *(float *)(v9 + 152) > v22
      || *(float *)(v9 + 156) < v20
      || *(float *)(v9 + 160) < v21
      || *(float *)(v9 + 164) < v23)
    {
      goto LABEL_8;
    }
    v38 = v14;
    v39 = v13;
    v40 = v12;
    v41 = v11;
    v42 = v7;
    sub_2233B5644(v9 + 16, v47);
    v44 = v47;
    v45 = &v54;
    v46 = (float *)&v56;
    if (*(_BYTE *)(v9 + 184))
    {
      v43 = 0;
      v62 = &v43;
      v63 = &v44;
      v64 = &v48;
      v15 = *(_QWORD *)(v9 + 168);
      v16 = *(unsigned int **)(v15 + 48);
      v60 = 0;
      v61 = 0;
      v17 = *(_QWORD *)(v15 + 120);
      v57 = (float *)&v50;
      v58 = v17;
      v59 = *(_DWORD *)(v15 + 128);
      sub_2233B596C(v15, *v16, v16[1], &v60, 0, (uint64_t)&v58, &v57, (uint64_t)&v62, *(double *)a4.i64, a5);
      if (v43)
        return 1;
      goto LABEL_7;
    }
    if (v48)
      break;
LABEL_7:
    v11 = v41;
    v7 = v42;
    v13 = v39;
    v12 = v40;
    v14 = v38;
LABEL_8:
    v9 += 192;
    if (v9 == v10)
      return 0;
  }
  v24 = v49;
  v25 = &v49[3 * v48];
  while (1)
  {
    v26 = v44[1];
    v27 = v26 + 12 * v24[1];
    v28 = v24[2];
    v62 = (char *)(v26 + 12 * *v24);
    LODWORD(v63) = -1431655765 * ((v27 - (uint64_t)v62) >> 2);
    HIDWORD(v63) = -1431655765 * ((v26 + 12 * v28 - (uint64_t)v62) >> 2);
    v29 = &v62[12 * SHIDWORD(v63)];
    a4.i64[0] = *(_QWORD *)v29;
    a4.i32[2] = *((_DWORD *)v29 + 2);
    a5.i64[0] = *(_QWORD *)v62;
    a5.i32[2] = *((_DWORD *)v62 + 2);
    v30 = (int32x4_t)vsubq_f32(a4, a5);
    v31 = &v62[12 * (int)v63];
    a6.i64[0] = *(_QWORD *)v31;
    a6.i32[2] = *((_DWORD *)v31 + 2);
    v32 = (int32x4_t)vsubq_f32(a5, (float32x4_t)a6);
    v33 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v32, v32), (int8x16_t)v32, 0xCuLL);
    v34 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 0xCuLL);
    v35 = (float32x4_t)vextq_s8(v34, (int8x16_t)v32, 8uLL);
    v36 = vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v30, (int8x16_t)v30, 0xCuLL), (int8x16_t)v30, 8uLL), v33);
    v37 = vsubq_f32(v36, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL), v35));
    v65 = v37.i32[2];
    v64 = (uint64_t *)v37.i64[0];
    LODWORD(v31) = *((_DWORD *)v45 + 2);
    v60 = *v45;
    v61 = (int)v31;
    if (sub_22345671C((uint64_t **)&v62, (uint64_t)&v60, *v46, v35, v36, v33, (float32x4_t)v34))
      return 1;
    v24 += 3;
    if (v24 == v25)
      goto LABEL_7;
  }
}

void sub_2233B4F98(uint64_t *a1@<X0>, unsigned __int32 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float32x4_t a5@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  float32x4_t v12;
  __int128 v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  unsigned __int8 v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int32x4_t v36;
  char *v37;
  int32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  unint64_t v44;
  float32x2_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  uint64_t v48;
  unint64_t v49;
  float32x2_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  unint64_t v54;
  float32x2_t *v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x4_t v58;
  uint64_t v59;
  unint64_t v60;
  float32x2_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int8x16_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int32x2_t v69;
  float32x4_t v70;
  float32x4_t v71;
  _QWORD v72[5];
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[6];
  uint64_t v76;
  __int32 v77;
  uint64_t v78;
  __int32 v79;
  uint64_t v80;
  __int32 v81;
  _BYTE v82[64];
  unsigned __int32 v83;
  float *v84;
  _BYTE v85[12];
  uint64_t v86;
  __int32 v87;
  uint64_t *v88;
  _QWORD *v89;
  float32x2_t v90;
  __int32 v91;

  if (a2[1])
  {
    sub_2241498F4(a4, 0);
  }
  else
  {
    a5.i64[0] = *(_QWORD *)(a3 + 48);
    a5.i32[2] = *(_DWORD *)(a3 + 56);
    v71 = a5;
    a5.i32[0] = *a2;
    v69 = *(int32x2_t *)a5.f32;
    v83 = *a2;
    sub_2241498F4(a4, 0);
    *(_DWORD *)(a4 + 104) = 2;
    v7 = *a1;
    v8 = a1[1];
    if (*a1 != v8)
    {
      v70 = (float32x4_t)vdupq_lane_s32(v69, 0);
      do
      {
        if (*(_BYTE *)(v7 + 120))
        {
          v12 = *(float32x4_t *)(v7 + 104);
          v13 = *(_OWORD *)(v7 + 72);
          *(_OWORD *)v82 = *(_OWORD *)(v7 + 56);
          *(_OWORD *)&v82[16] = v13;
          *(_OWORD *)&v82[32] = *(_OWORD *)(v7 + 88);
          *(float32x4_t *)&v82[48] = v12;
          v14 = v12;
        }
        else
        {
          v14 = 0uLL;
          memset(&v82[20], 0, 40);
          *(_OWORD *)&v82[4] = 0u;
          *(_DWORD *)v82 = 1065353216;
          *(_DWORD *)&v82[20] = 1065353216;
          *(_DWORD *)&v82[40] = 1065353216;
          *(_DWORD *)&v82[60] = 1065353216;
        }
        v15 = (int8x16_t)vsubq_f32(v71, v14);
        *(float32x2_t *)v16.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v82, *(int32x2_t *)&v82[16]), *(float *)v15.i32), (float32x2_t)vzip2_s32(*(int32x2_t *)v82, *(int32x2_t *)&v82[16]), *(float32x2_t *)v15.i8, 1), (float32x2_t)*(_OWORD *)&vzip2q_s32(*(int32x4_t *)v82, *(int32x4_t *)&v82[16]), (float32x4_t)v15, 2);
        *(float32x2_t *)&v16.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v82[32], *(float32x2_t *)v15.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1), *(float32x2_t *)&v82[32], 1), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&v82[32], *(int8x16_t *)&v82[32], 8uLL));
        v81 = v16.i32[2];
        v80 = v16.i64[0];
        v17 = vsubq_f32(v16, v70);
        v77 = v17.i32[2];
        v18 = vaddq_f32(v70, v16);
        v76 = v17.i64[0];
        v79 = v18.i32[2];
        v78 = v18.i64[0];
        v19 = v17.f32[1];
        v20 = vmovn_s32(vcgtq_f32(v17, v18)).u8[0];
        if ((v20 & 1) != 0)
          v21 = v17.f32[0];
        else
          v21 = v18.f32[0];
        if ((v20 & 1) != 0)
          v22 = v18.f32[0];
        else
          v22 = v17.f32[0];
        if (v17.f32[1] <= v18.f32[1])
          v23 = v17.f32[1];
        else
          v23 = v18.f32[1];
        if (v17.f32[2] <= v18.f32[2])
          v24 = v18.f32[2];
        else
          v24 = v17.f32[2];
        if (v17.f32[2] <= v18.f32[2])
          v25 = v17.f32[2];
        else
          v25 = v18.f32[2];
        if (*(float *)(v7 + 144) <= v21)
        {
          if (v17.f32[1] <= v18.f32[1])
            v19 = v18.f32[1];
          if (*(float *)(v7 + 148) <= v19
            && *(float *)(v7 + 152) <= v24
            && *(float *)(v7 + 156) >= v22
            && *(float *)(v7 + 160) >= v23
            && *(float *)(v7 + 164) >= v25)
          {
            sub_2233B5644(v7 + 16, &v73);
            v72[0] = &v73;
            v72[1] = &v80;
            v72[2] = &v83;
            v72[3] = a4;
            v72[4] = v82;
            if (*(_BYTE *)(v7 + 184))
            {
              v88 = v72;
              v89 = v75;
              v9 = *(_QWORD *)(v7 + 168);
              v10 = *(unsigned int **)(v9 + 48);
              v86 = 0;
              v87 = 0;
              v11 = *(_QWORD *)(v9 + 120);
              v84 = (float *)&v76;
              *(_QWORD *)v85 = v11;
              *(_DWORD *)&v85[8] = *(_DWORD *)(v9 + 128);
              sub_2233B61DC(v9, *v10, v10[1], &v86, 0, (uint64_t)v85, &v84, (uint64_t)&v88, *(double *)v26.i64, v27);
            }
            else if (v75[0])
            {
              v29 = 12 * v75[0];
              v30 = (unsigned int *)(v75[1] + 8);
              do
              {
                v33 = v74 + 12 * *(v30 - 1);
                v34 = v74 + 12 * *v30;
                v88 = (uint64_t *)(v74 + 12 * *(v30 - 2));
                LODWORD(v89) = -1431655765 * ((v33 - (uint64_t)v88) >> 2);
                HIDWORD(v89) = -1431655765 * ((v34 - (uint64_t)v88) >> 2);
                v35 = (char *)v88 + 12 * SHIDWORD(v89);
                v26.i64[0] = *(_QWORD *)v35;
                v26.i32[2] = *((_DWORD *)v35 + 2);
                v27.i64[0] = *v88;
                v27.i32[2] = *((_DWORD *)v88 + 2);
                v36 = (int32x4_t)vsubq_f32(v26, v27);
                v37 = (char *)v88 + 12 * (int)v89;
                v28.i64[0] = *(_QWORD *)v37;
                v28.i32[2] = *((_DWORD *)v37 + 2);
                v38 = (int32x4_t)vsubq_f32(v27, v28);
                v39 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL);
                v40 = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 0xCuLL);
                v41 = (float32x4_t)vextq_s8(v40, (int8x16_t)v38, 8uLL);
                v42 = vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v36, (int8x16_t)v36, 0xCuLL), (int8x16_t)v36, 8uLL), v39);
                v43 = vsubq_f32(v42, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v36, v36), (int8x16_t)v36, 0xCuLL), v41));
                v91 = v43.i32[2];
                v90 = *(float32x2_t *)v43.f32;
                v87 = v81;
                v86 = v80;
                if (sub_22345671C(&v88, (uint64_t)&v86, *(float *)&v83, v41, v42, v39, (float32x4_t)v40))
                {
                  v44 = *(_QWORD *)(a4 + 8);
                  v67 = *(_QWORD *)a4;
                  v45 = (float32x2_t *)(v74 + 12 * *(v30 - 2));
                  v28.i32[0] = v45[1].i32[0];
                  *(float32x2_t *)v46.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v82, COERCE_FLOAT(*v45)), *(float32x2_t *)&v82[16], *v45, 1), *(float32x2_t *)&v82[32], v28.f32[0]);
                  *(float32x2_t *)&v46.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v82, *(int8x16_t *)v82, 8uLL), *v45), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&v82[16], *(int8x16_t *)&v82[16], 8uLL), *v45, 1), *(float32x2_t *)v28.f32, (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&v82[32], *(int8x16_t *)&v82[32], 8uLL));
                  v47 = vaddq_f32(v46, *(float32x4_t *)&v82[48]);
                  *(_DWORD *)&v85[8] = v47.i32[2];
                  *(_QWORD *)v85 = v47.i64[0];
                  v68 = v44;
                  if (v44 >= *(_QWORD *)(a4 + 16))
                  {
                    v49 = sub_2233B2838((unint64_t *)a4, (uint64_t *)v85);
                  }
                  else
                  {
                    v48 = *(_QWORD *)v85;
                    *(_DWORD *)(v44 + 8) = *(_DWORD *)&v85[8];
                    *(_QWORD *)v44 = v48;
                    v49 = v44 + 12;
                  }
                  *(_QWORD *)(a4 + 8) = v49;
                  v50 = (float32x2_t *)(v74 + 12 * *(v30 - 1));
                  v28.i32[0] = v50[1].i32[0];
                  *(float32x2_t *)v51.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v82, COERCE_FLOAT(*v50)), *(float32x2_t *)&v82[16], *v50, 1), *(float32x2_t *)&v82[32], v28.f32[0]);
                  *(float32x2_t *)&v51.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v82, *(int8x16_t *)v82, 8uLL), *v50), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&v82[16], *(int8x16_t *)&v82[16], 8uLL), *v50, 1), *(float32x2_t *)v28.f32, (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&v82[32], *(int8x16_t *)&v82[32], 8uLL));
                  v52 = vaddq_f32(v51, *(float32x4_t *)&v82[48]);
                  *(_DWORD *)&v85[8] = v52.i32[2];
                  *(_QWORD *)v85 = v52.i64[0];
                  if (v49 >= *(_QWORD *)(a4 + 16))
                  {
                    v54 = sub_2233B2838((unint64_t *)a4, (uint64_t *)v85);
                  }
                  else
                  {
                    v53 = *(_QWORD *)v85;
                    *(_DWORD *)(v49 + 8) = *(_DWORD *)&v85[8];
                    *(_QWORD *)v49 = v53;
                    v54 = v49 + 12;
                  }
                  *(_QWORD *)(a4 + 8) = v54;
                  v55 = (float32x2_t *)(v74 + 12 * *v30);
                  v28.i32[0] = v55[1].i32[0];
                  *(float32x2_t *)v56.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v82, COERCE_FLOAT(*v55)), *(float32x2_t *)&v82[16], *v55, 1), *(float32x2_t *)&v82[32], v28.f32[0]);
                  v57 = vextq_s8(*(int8x16_t *)&v82[32], *(int8x16_t *)&v82[32], 8uLL);
                  *(float32x2_t *)&v56.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v82, *(int8x16_t *)v82, 8uLL), *v55), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&v82[16], *(int8x16_t *)&v82[16], 8uLL), *v55, 1), *(float32x2_t *)v28.f32, *(float32x2_t *)v57.i8);
                  v58 = vaddq_f32(v56, *(float32x4_t *)&v82[48]);
                  *(_DWORD *)&v85[8] = v58.i32[2];
                  *(_QWORD *)v85 = v58.i64[0];
                  if (v54 >= *(_QWORD *)(a4 + 16))
                  {
                    v60 = sub_2233B2838((unint64_t *)a4, (uint64_t *)v85);
                  }
                  else
                  {
                    v59 = *(_QWORD *)v85;
                    *(_DWORD *)(v54 + 8) = *(_DWORD *)&v85[8];
                    *(_QWORD *)v54 = v59;
                    v60 = v54 + 12;
                  }
                  *(_QWORD *)(a4 + 8) = v60;
                  *(_DWORD *)v85 = -1431655765 * ((v68 - v67) >> 2);
                  v61 = (float32x2_t)vadd_s32(vdup_n_s32(*(unsigned int *)v85), (int32x2_t)0x200000001);
                  *(float32x2_t *)&v85[4] = v61;
                  v62 = *(_QWORD *)(a4 + 120);
                  if (v62 >= *(_QWORD *)(a4 + 128))
                  {
                    v64 = sub_2233B29C0((unint64_t *)(a4 + 112), (uint64_t *)v85);
                  }
                  else
                  {
                    v63 = *(_QWORD *)v85;
                    *(_DWORD *)(v62 + 8) = *(_DWORD *)&v85[8];
                    *(_QWORD *)v62 = v63;
                    v64 = v62 + 12;
                  }
                  *(_QWORD *)(a4 + 120) = v64;
                  v61.i32[0] = v91;
                  *(float32x2_t *)v57.i8 = v90;
                  v28 = (float32x4_t)v57;
                  v28.i32[2] = v91;
                  v65 = (int8x16_t)vmulq_n_f32(v28, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32), (float32x2_t)vdup_lane_s32((int32x2_t)v90, 1), v90, 1), v61, v61).f32[0]));
                  *(float32x2_t *)v28.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v82, *(float *)v65.i32), *(float32x2_t *)&v82[16], *(float32x2_t *)v65.i8, 1), *(float32x2_t *)&v82[32], (float32x4_t)v65, 2);
                  v27 = (float32x4_t)vextq_s8(*(int8x16_t *)v82, *(int8x16_t *)v82, 8uLL);
                  *(float32x2_t *)v27.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v65.i8), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&v82[16], *(int8x16_t *)&v82[16], 8uLL), *(float32x2_t *)v65.i8, 1);
                  v26 = (float32x4_t)vextq_s8(v65, v65, 8uLL);
                  *(_QWORD *)v85 = v28.i64[0];
                  *(_DWORD *)&v85[8] = vmla_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v26.f32, (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&v82[32], *(int8x16_t *)&v82[32], 8uLL)).u32[0];
                  v66 = *(_QWORD *)(a4 + 80);
                  if (v66 < *(_QWORD *)(a4 + 88))
                  {
                    v31 = *(_QWORD *)v85;
                    *(_DWORD *)(v66 + 8) = *(_DWORD *)&v85[8];
                    *(_QWORD *)v66 = v31;
                    v32 = v66 + 12;
                  }
                  else
                  {
                    v32 = sub_2233B2838((unint64_t *)(a4 + 72), (uint64_t *)v85);
                  }
                  *(_QWORD *)(a4 + 80) = v32;
                }
                v30 += 3;
                v29 -= 12;
              }
              while (v29);
            }
          }
        }
        v7 += 192;
      }
      while (v7 != v8);
    }
  }
}

void sub_2233B5608(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_2233B561C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_2233B5630(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_2233B5644(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;

  v3 = *(_DWORD *)(a1 + 32);
  if (v3)
  {
    if (v3 != 1)
      sub_22316DD70();
    v5 = *(uint64_t **)(a1 + 16);
    v4 = *(std::__shared_weak_count **)(a1 + 24);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    if (!v5
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/include/Reconstruction/SceneQuery/SceneQueryState.h", 93, (uint64_t)"tri_mesh_ptr != nullptr", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v8 = *v5;
    v9 = v5[2];
    if (*v5)
      v10 = 1;
    else
      v10 = v9 == 0;
    if (!v10
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_37;
    }
    *a2 = v9;
    a2[1] = v8;
    v11 = v5[3];
    v12 = v5[5];
    if (!v11
      && v12
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_37;
    }
    a2[2] = v12;
    a2[3] = v11;
    v13 = v5[6];
    v14 = v5[8];
    if (!v13
      && v14
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_37;
    }
    a2[4] = v14;
    a2[5] = v13;
    v15 = v5[9];
    v16 = v5[11];
    if (!v15
      && v16
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
LABEL_37:
      abort();
    }
    a2[6] = v16;
    a2[7] = v15;
    if (!v4)
      return;
    v17 = (unint64_t *)&v4->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (v18)
      return;
LABEL_36:
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    return;
  }
  v19 = *(uint64_t **)(a1 + 16);
  v4 = *(std::__shared_weak_count **)(a1 + 24);
  if (v4)
  {
    v20 = (unint64_t *)&v4->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  if (!v19
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/include/Reconstruction/SceneQuery/SceneQueryState.h", 86, (uint64_t)"tri_mesh_ptr != nullptr", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v22 = *v19;
  *a2 = 0xAAAAAAAAAAAAAAABLL * ((v19[1] - *v19) >> 2);
  a2[1] = v22;
  v23 = v19[14];
  a2[2] = 0xAAAAAAAAAAAAAAABLL * ((v19[15] - v23) >> 2);
  a2[3] = v23;
  v24 = v19[9];
  a2[4] = 0xAAAAAAAAAAAAAAABLL * ((v19[10] - v24) >> 2);
  a2[5] = v24;
  v25 = v19[30];
  a2[6] = v19[31] - v25;
  a2[7] = v25;
  if (v4)
  {
    v26 = (unint64_t *)&v4->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
      goto LABEL_36;
  }
}

void sub_2233B5930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2233B5944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2233B5958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2233B596C(uint64_t a1, unsigned int a2, unsigned int a3, _DWORD *a4, int a5, uint64_t a6, float **a7, uint64_t a8, double a9, float32x4_t a10)
{
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  unsigned int *v17;
  char v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float *v36;
  uint64_t *v37;
  char v38;
  int v39;
  int v41;
  unint64_t v42;
  uint64_t v45;
  uint64_t v46;
  int v47;
  float32x4_t v48;
  uint64_t v49;
  int v50;
  float32x4_t v51;
  unsigned int v52;
  unsigned int v53;
  float v54;
  unint64_t v55;
  int v56;
  int v57;
  int v58;
  float32x4_t v59;
  float *v60;
  float32x4_t v61;
  uint64_t v62;
  char v63;
  float32x4_t v64;
  int v65;
  int v66;
  unint64_t v67;
  float32x4_t v68;
  float *v69;
  float32x4_t v70;
  char v71;
  uint64_t v72;
  float32x4_t v73;
  int v74;
  int v75;
  unint64_t v76;
  float32x4_t v77;
  float *v78;
  float32x4_t v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  int v83;
  float32x4_t v84;
  float *v85;
  float32x4_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  float32x4_t v90;
  float32x4_t v91;
  int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  float32x4_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  float32x4_t v107;
  int v108;
  int v109;
  int v110;
  unsigned int v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t *v122;
  int v123;
  int v124;
  uint64_t v125;
  __int32 v126;

  v11 = a1;
  if (*(_DWORD *)(a1 + 32) == a5)
  {
    v12 = sub_2233B60A4((unint64_t *)(a1 + 136), a2 >> 2, a3);
    if (v12)
    {
      v17 = v13;
      v18 = 0;
      v19 = 4 * v12;
      do
      {
        v20 = *v17++;
        v21 = *(_QWORD **)(a8 + 8);
        v22 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a8 + 16) + 8) + 12 * v20);
        v23 = *(_QWORD *)(*v21 + 8);
        v24 = v23 + 12 * *v22;
        v25 = v23 + 12 * v22[1];
        v26 = v23 + 12 * v22[2];
        v122 = (uint64_t *)v24;
        v123 = -1431655765 * ((v25 - v24) >> 2);
        v124 = -1431655765 * ((v26 - v24) >> 2);
        v27 = v24 + 12 * v124;
        v14.i64[0] = *(_QWORD *)v27;
        v15.i64[0] = *(_QWORD *)v24;
        v15.i32[2] = *(_DWORD *)(v24 + 8);
        v14.i32[2] = *(_DWORD *)(v27 + 8);
        v28 = v24 + 12 * v123;
        v16.i64[0] = *(_QWORD *)v28;
        v16.i32[2] = *(_DWORD *)(v28 + 8);
        v29 = (int32x4_t)vsubq_f32(v14, v15);
        v30 = (int32x4_t)vsubq_f32(v15, v16);
        v31 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL);
        v32 = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 0xCuLL);
        v33 = (float32x4_t)vextq_s8(v32, (int8x16_t)v30, 8uLL);
        v34 = vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v29, (int8x16_t)v29, 0xCuLL), (int8x16_t)v29, 8uLL), v31);
        v35 = vsubq_f32(v34, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v29, v29), (int8x16_t)v29, 0xCuLL), v33));
        v126 = v35.i32[2];
        v125 = v35.i64[0];
        v37 = (uint64_t *)v21[1];
        v36 = (float *)v21[2];
        LODWORD(v23) = *((_DWORD *)v37 + 2);
        v120 = *v37;
        v121 = v23;
        v38 = **(_BYTE **)a8 | sub_22345671C(&v122, (uint64_t)&v120, *v36, v33, v34, v31, (float32x4_t)v32);
        **(_BYTE **)a8 = v38;
        v18 |= v38 != 0;
        v19 -= 4;
      }
      while (v19);
      return v18 & 1;
    }
LABEL_7:
    v18 = 0;
    return v18 & 1;
  }
  v39 = 2 * *a4;
  if (v39 == -2)
    goto LABEL_7;
  v18 = 0;
  v41 = 2 * a4[1];
  if (v41 != -2)
  {
    v42 = (2 * a4[2]);
    if ((_DWORD)v42 != -2)
    {
      v45 = 0;
      v46 = (a5 + 1);
      v47 = 1 << (a5 + 1);
      *(float *)&a9 = (float)v47;
      a10.i64[0] = *(_QWORD *)(a1 + 36);
      a10.i32[2] = *(_DWORD *)(a1 + 44);
      v51 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a9, 0);
      v48 = vdivq_f32(a10, v51);
      v49 = *(_QWORD *)(a1 + 48) + 8 * *(_QWORD *)(a1 + 8 * v46 + 72);
      v50 = v47 << (a5 + 1);
      v51.i64[0] = *(_QWORD *)a6;
      v51.i32[2] = *(_DWORD *)(a6 + 8);
      v52 = v39 + 2;
      v53 = v41 + 2;
      v54 = v48.f32[2];
      v55 = (v42 + 2);
      v56 = v39 * v50;
      v57 = v41 << (a5 + 1);
      v58 = v42 + v57 + v39 * v50;
      do
      {
        if ((*(_DWORD *)(v49 + 8 * (v58 + v45)) & 1) == 0)
        {
          v59 = v51;
          v59.f32[2] = (float)(v54 * (float)(v45 & 1)) + *(float *)(a6 + 8);
          v60 = *a7;
          if (v51.f32[0] > (*a7)[3]
            || v51.f32[1] > v60[4]
            || (float)((float)(v54 * (float)(v45 & 1)) + *(float *)(a6 + 8)) > v60[5]
            || (v61 = vaddq_f32(v48, v59), v61.f32[0] < *v60)
            || v61.f32[1] < v60[1]
            || v61.f32[2] < v60[2])
          {
            v51 = v59;
          }
          else
          {
            v62 = v46;
            v116 = v11;
            v112 = v48;
            v108 = v41;
            v101 = v50;
            v104 = v53;
            v98 = v57;
            v93 = v56;
            v95 = v52;
            v91 = v59;
            v63 = sub_2233B596C(v11, v61.f32[2]);
            v56 = v93;
            v52 = v95;
            v57 = v98;
            v50 = v101;
            v53 = v104;
            v41 = v108;
            v48 = v112;
            v46 = v62;
            v11 = v116;
            v51 = v91;
            if ((v63 & 1) != 0)
            {
LABEL_62:
              v18 = 1;
              return v18 & 1;
            }
          }
        }
        ++v45;
      }
      while (v42 + v45 < v55);
      v64 = v51;
      v64.i32[1] = vaddq_f32(v48, v51).i32[1];
      v65 = v41 | 1;
      if ((v41 | 1u) < v53)
      {
        v66 = (v65 << v46) + v56;
        v67 = v42;
        v51 = v64;
        do
        {
          if ((*(_DWORD *)(v49 + 8 * (v66 + v67)) & 1) == 0)
          {
            v68 = v51;
            v68.f32[2] = (float)(v54 * (float)(v45 & 1)) + *(float *)(a6 + 8);
            v69 = *a7;
            if (v51.f32[0] > (*a7)[3]
              || v51.f32[1] > v69[4]
              || (float)((float)(v54 * (float)(v45 & 1)) + *(float *)(a6 + 8)) > v69[5]
              || (v70 = vaddq_f32(v48, v68), v70.f32[0] < *v69)
              || v70.f32[1] < v69[1]
              || v70.f32[2] < v69[2])
            {
              v51 = v68;
            }
            else
            {
              v92 = v65;
              v94 = v46;
              v96 = v52;
              v117 = v11;
              v113 = v48;
              v109 = v41;
              v102 = v50;
              v105 = v53;
              v99 = v57;
              v90 = v68;
              v71 = sub_2233B596C(v11, v70.f32[2]);
              v65 = v92;
              v46 = v94;
              v52 = v96;
              v57 = v99;
              v50 = v102;
              v53 = v105;
              v41 = v109;
              v48 = v113;
              v11 = v117;
              v51 = v90;
              if ((v71 & 1) != 0)
                goto LABEL_62;
            }
          }
          ++v67;
          LOBYTE(v45) = v45 + 1;
        }
        while (v67 < v55);
        v64.i32[2] = v51.i32[2];
      }
      v72 = v39 | 1u;
      if (v72 < v52)
      {
        v73 = vaddq_f32(v48, v51);
        v73.i32[1] = *(_DWORD *)(a6 + 4);
        v73.i32[2] = v64.i32[2];
        v74 = v72 * v50;
        v75 = v57 + v74;
        v76 = v42;
        do
        {
          if ((*(_DWORD *)(v49 + 8 * (v75 + v76)) & 1) == 0)
          {
            v77 = v73;
            v77.f32[2] = (float)(v54 * (float)(v45 & 1)) + *(float *)(a6 + 8);
            v78 = *a7;
            if (v73.f32[0] > (*a7)[3]
              || v73.f32[1] > v78[4]
              || (float)((float)(v54 * (float)(v45 & 1)) + *(float *)(a6 + 8)) > v78[5]
              || (v79 = vaddq_f32(v48, v77), v79.f32[0] < *v78)
              || v79.f32[1] < v78[1]
              || v79.f32[2] < v78[2])
            {
              v73 = v77;
            }
            else
            {
              v80 = v46;
              v118 = v11;
              v114 = v48;
              v110 = v41;
              v103 = v72;
              v106 = v53;
              v100 = v74;
              v97 = v77;
              v81 = sub_2233B596C(v11, v79.f32[2]);
              v74 = v100;
              v72 = v103;
              v53 = v106;
              v41 = v110;
              v48 = v114;
              v46 = v80;
              v11 = v118;
              v73 = v97;
              if ((v81 & 1) != 0)
                goto LABEL_62;
            }
          }
          ++v76;
          LOBYTE(v45) = v45 + 1;
        }
        while (v76 < v55);
        v82 = v41 | 1;
        if (v82 < v53)
        {
          v73.i32[1] = vaddq_f32(v48, v73).i32[1];
          v83 = (v82 << v46) + v74;
          while (1)
          {
            if ((*(_DWORD *)(v49 + 8 * (v83 + v42)) & 1) != 0)
            {
              v84 = v73;
            }
            else
            {
              v84 = v73;
              v84.f32[2] = (float)(v54 * (float)(v45 & 1)) + *(float *)(a6 + 8);
              v85 = *a7;
              if (v73.f32[0] <= (*a7)[3]
                && v73.f32[1] <= v85[4]
                && (float)((float)(v54 * (float)(v45 & 1)) + *(float *)(a6 + 8)) <= v85[5])
              {
                v86 = vaddq_f32(v48, v84);
                if (v86.f32[0] >= *v85 && v86.f32[1] >= v85[1] && v86.f32[2] >= v85[2])
                {
                  v87 = v46;
                  v119 = v11;
                  v115 = v48;
                  v88 = v72;
                  v111 = v82;
                  v107 = v84;
                  v89 = sub_2233B596C(v11, v86.f32[2]);
                  v84 = v107;
                  v82 = v111;
                  v72 = v88;
                  v48 = v115;
                  v46 = v87;
                  v11 = v119;
                  if ((v89 & 1) != 0)
                    goto LABEL_62;
                }
              }
            }
            v18 = 0;
            ++v42;
            LOBYTE(v45) = v45 + 1;
            v73 = v84;
            if (v42 >= v55)
              return v18 & 1;
          }
        }
      }
      goto LABEL_7;
    }
  }
  return v18 & 1;
}

unint64_t sub_2233B60A4(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  unint64_t v7;
  BOOL v8;

  if (a3 != -1)
  {
    v5 = a3;
    if (a3 + a2 > *a1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 474, (uint64_t)"offset + count <= size()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_17;
    }
    if (!v5 || a1[1])
      return v5;
LABEL_16:
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))return v5;
LABEL_17:
    abort();
  }
  v7 = *a1;
  if (*a1 < a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 471, (uint64_t)"offset <= size()", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_17;
    }
    v7 = *a1;
  }
  v5 = v7 - a2;
  if (a1[1])
    v8 = 1;
  else
    v8 = v7 == a2;
  if (!v8)
    goto LABEL_16;
  return v7 - a2;
}

uint64_t sub_2233B61DC(uint64_t result, unsigned int a2, unsigned int a3, _DWORD *a4, int a5, uint64_t a6, float **a7, uint64_t a8, double a9, float32x4_t a10)
{
  uint64_t v10;
  unsigned int *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  unsigned int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  char *v24;
  char *v25;
  int32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t *v33;
  float *v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  float32x2_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  unint64_t v46;
  float32x2_t *v47;
  unint64_t *v48;
  float32x2_t *v49;
  float32x4_t v50;
  float32x4_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  float32x2_t *v55;
  unint64_t *v56;
  float32x2_t *v57;
  float32x2_t v58;
  float32x4_t v59;
  float32x4_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  float32x2_t v65;
  unint64_t v66;
  uint64_t v67;
  float32x2_t *v68;
  unint64_t *v69;
  float32x2_t v70;
  float v71;
  int8x16_t v72;
  float32x2_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  int v78;
  int v83;
  float32x4_t v84;
  uint64_t v85;
  int v86;
  float32x4_t v87;
  unint64_t v88;
  float v89;
  float v90;
  int v91;
  int v92;
  int v93;
  float32x4_t v94;
  int v95;
  float32x4_t v96;
  float *v97;
  float32x4_t v98;
  float32x4_t v99;
  float *v100;
  float32x4_t v101;
  uint64_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float *v105;
  float32x4_t v106;
  float *v107;
  float32x4_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float32x4_t v112;
  uint64_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  _BYTE v118[24];
  uint64_t v119;
  int v120;
  uint64_t *v121;
  int v122;
  int v123;
  float32x2_t v124;
  __int32 v125;

  if (*(_DWORD *)(result + 32) != a5)
  {
    v76 = (2 * *a4);
    v77 = 2 * a4[1];
    v78 = 2 * a4[2];
    if ((_DWORD)v76 == -2 || v77 == -2 || v78 == -2)
      return result;
    v83 = 1 << (a5 + 1);
    *(float *)&a9 = (float)v83;
    a10.i64[0] = *(_QWORD *)(result + 36);
    a10.i32[2] = *(_DWORD *)(result + 44);
    v87 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a9, 0);
    v84 = vdivq_f32(a10, v87);
    v85 = *(_QWORD *)(result + 48) + 8 * *(_QWORD *)(result + 8 * (a5 + 1) + 72);
    v86 = v83 << (a5 + 1);
    v87.i64[0] = *(_QWORD *)a6;
    v87.i32[2] = *(_DWORD *)(a6 + 8);
    v88 = (v76 + 2);
    v89 = v84.f32[2];
    v90 = v84.f32[2] * 0.0;
    v91 = 2 * *a4 * v86;
    v92 = ((v77 | 1) << (a5 + 1)) + v91;
    v93 = (v77 << (a5 + 1)) + v91;
    v113 = result;
    v112 = v84;
    while (1)
    {
      v95 = v78 + v93;
      if ((*(_DWORD *)(v85 + 8 * (v78 + v93)) & 1) != 0)
      {
        v96 = v87;
        if ((*(_DWORD *)(v85 + 8 * (v95 + 1)) & 1) == 0)
          goto LABEL_41;
      }
      else
      {
        v96 = v87;
        v96.f32[2] = v90 + *(float *)(a6 + 8);
        v97 = *a7;
        if (v87.f32[0] <= (*a7)[3] && v87.f32[1] <= v97[4] && (float)(v90 + *(float *)(a6 + 8)) <= v97[5])
        {
          v98 = vaddq_f32(v84, v96);
          if (v98.f32[0] >= *v97 && v98.f32[1] >= v97[1] && v98.f32[2] >= v97[2])
          {
            v110 = a8;
            v114 = v96;
            result = sub_2233B61DC(v113, v98.f32[2]);
            v96 = v114;
            v84 = v112;
            a8 = v110;
          }
        }
        if ((*(_DWORD *)(v85 + 8 * (v95 + 1)) & 1) == 0)
        {
LABEL_41:
          v99 = v96;
          v99.f32[2] = v89 + *(float *)(a6 + 8);
          v100 = *a7;
          if (v96.f32[0] <= (*a7)[3] && v96.f32[1] <= v100[4] && (float)(v89 + *(float *)(a6 + 8)) <= v100[5])
          {
            v101 = vaddq_f32(v84, v99);
            if (v101.f32[0] >= *v100 && v101.f32[1] >= v100[1] && v101.f32[2] >= v100[2])
            {
              v102 = a8;
              v115 = v99;
              result = sub_2233B61DC(v113, v101.f32[2]);
              v99 = v115;
              v84 = v112;
              a8 = v102;
            }
          }
          goto LABEL_50;
        }
      }
      v99 = v96;
LABEL_50:
      v103 = vaddq_f32(v84, v99);
      v104 = v99;
      v104.i32[1] = v103.i32[1];
      if ((*(_DWORD *)(v85 + 8 * (v78 + v92)) & 1) != 0)
      {
        v116 = v104;
      }
      else
      {
        v104.f32[2] = v90 + *(float *)(a6 + 8);
        v105 = *a7;
        v116 = v104;
        if (v99.f32[0] <= (*a7)[3] && v103.f32[1] <= v105[4] && (float)(v90 + *(float *)(a6 + 8)) <= v105[5])
        {
          v106 = vaddq_f32(v84, v104);
          if (v106.f32[0] >= *v105 && v106.f32[1] >= v105[1] && v106.f32[2] >= v105[2])
          {
            v111 = a8;
            result = sub_2233B61DC(v113, v106.f32[2]);
            v84 = v112;
            a8 = v111;
          }
        }
      }
      if ((*(_DWORD *)(v85 + 8 * (v78 + v92 + 1)) & 1) != 0)
      {
        v94 = v116;
      }
      else
      {
        v94 = v116;
        v94.f32[2] = v89 + *(float *)(a6 + 8);
        v107 = *a7;
        if (v116.f32[0] <= (*a7)[3] && v116.f32[1] <= v107[4] && (float)(v89 + *(float *)(a6 + 8)) <= v107[5])
        {
          v108 = vaddq_f32(v84, v94);
          if (v108.f32[0] >= *v107 && v108.f32[1] >= v107[1] && v108.f32[2] >= v107[2])
          {
            v109 = a8;
            v117 = v94;
            result = sub_2233B61DC(v113, v108.f32[2]);
            v94 = v117;
            v84 = v112;
            a8 = v109;
          }
        }
      }
      v87 = vaddq_f32(v84, v94);
      v87.i32[1] = *(_DWORD *)(a6 + 4);
      v87.i32[2] = v94.i32[2];
      ++v76;
      v92 += v86;
      v93 += v86;
      if (v76 >= v88)
        return result;
    }
  }
  v10 = a8;
  result = sub_2233B60A4((unint64_t *)(result + 136), a2 >> 2, a3);
  if (result)
  {
    v15 = v10;
    v16 = v11;
    v17 = *(_QWORD **)v15;
    v18 = *(_QWORD *)(v15 + 8);
    v19 = 4 * result;
    do
    {
      v20 = (unsigned int *)(*(_QWORD *)(v18 + 8) + 12 * *v16);
      v21 = *(_QWORD *)(*v17 + 8);
      v22 = v21 + 12 * v20[1];
      v23 = v20[2];
      v121 = (uint64_t *)(v21 + 12 * *v20);
      v122 = -1431655765 * ((v22 - (uint64_t)v121) >> 2);
      v123 = -1431655765 * ((v21 + 12 * v23 - (uint64_t)v121) >> 2);
      v24 = (char *)v121 + 12 * v123;
      v12.i64[0] = *(_QWORD *)v24;
      v12.i32[2] = *((_DWORD *)v24 + 2);
      v13.i64[0] = *v121;
      v13.i32[2] = *((_DWORD *)v121 + 2);
      v25 = (char *)v121 + 12 * v122;
      v14.i64[0] = *(_QWORD *)v25;
      v14.i32[2] = *((_DWORD *)v25 + 2);
      v26 = (int32x4_t)vsubq_f32(v12, v13);
      v27 = (int32x4_t)vsubq_f32(v13, v14);
      v28 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v27, v27), (int8x16_t)v27, 0xCuLL);
      v29 = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 0xCuLL);
      v30 = (float32x4_t)vextq_s8(v29, (int8x16_t)v27, 8uLL);
      v31 = vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v26, (int8x16_t)v26, 0xCuLL), (int8x16_t)v26, 8uLL), v28);
      v32 = vsubq_f32(v31, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v26, v26), (int8x16_t)v26, 0xCuLL), v30));
      v125 = v32.i32[2];
      v124 = *(float32x2_t *)v32.f32;
      v33 = (uint64_t *)v17[1];
      v34 = (float *)v17[2];
      LODWORD(v22) = *((_DWORD *)v33 + 2);
      v119 = *v33;
      v120 = v22;
      result = sub_22345671C(&v121, (uint64_t)&v119, *v34, v30, v31, v28, (float32x4_t)v29);
      if ((_DWORD)result)
      {
        v39 = (unint64_t *)v17[3];
        v38 = (float32x2_t *)v17[4];
        v41 = *v39;
        v40 = v39[1];
        v42 = (float32x2_t *)(*(_QWORD *)(*v17 + 8) + 12 * *v20);
        v13.i32[0] = v38[1].i32[0];
        v35.i32[0] = v38[3].i32[0];
        v36.i32[0] = v38[5].i32[0];
        v37.i32[0] = v42[1].i32[0];
        *(float32x2_t *)v43.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*v38, COERCE_FLOAT(*v42)), v38[2], *v42, 1), v38[4], v37.f32[0]);
        *(float32x2_t *)&v43.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.f32, *v42), v35, *v42, 1), v37, v36);
        *(float32x2_t *)v13.f32 = v38[6];
        v13.i32[2] = v38[7].i32[0];
        v44 = vaddq_f32(v43, v13);
        *(_DWORD *)&v118[8] = v44.i32[2];
        *(_QWORD *)v118 = v44.i64[0];
        if (v40 >= v39[2])
        {
          v46 = sub_2233B2838(v39, (uint64_t *)v118);
        }
        else
        {
          v45 = *(_QWORD *)v118;
          *(_DWORD *)(v40 + 8) = *(_DWORD *)&v118[8];
          *(_QWORD *)v40 = v45;
          v46 = v40 + 12;
        }
        v39[1] = v46;
        v48 = (unint64_t *)v17[3];
        v47 = (float32x2_t *)v17[4];
        v49 = (float32x2_t *)(*(_QWORD *)(*v17 + 8) + 12 * v20[1]);
        v13.i32[0] = v47[1].i32[0];
        v35.i32[0] = v47[3].i32[0];
        v36.i32[0] = v47[5].i32[0];
        v37.i32[0] = v49[1].i32[0];
        *(float32x2_t *)v50.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*v47, COERCE_FLOAT(*v49)), v47[2], *v49, 1), v47[4], v37.f32[0]);
        *(float32x2_t *)&v50.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.f32, *v49), v35, *v49, 1), v37, v36);
        *(float32x2_t *)v13.f32 = v47[6];
        v13.i32[2] = v47[7].i32[0];
        v51 = vaddq_f32(v50, v13);
        *(_DWORD *)&v118[8] = v51.i32[2];
        *(_QWORD *)v118 = v51.i64[0];
        v52 = v48[1];
        if (v52 >= v48[2])
        {
          v54 = sub_2233B2838(v48, (uint64_t *)v118);
        }
        else
        {
          v53 = *(_QWORD *)v118;
          *(_DWORD *)(v52 + 8) = *(_DWORD *)&v118[8];
          *(_QWORD *)v52 = v53;
          v54 = v52 + 12;
        }
        v48[1] = v54;
        v56 = (unint64_t *)v17[3];
        v55 = (float32x2_t *)v17[4];
        v57 = (float32x2_t *)(*(_QWORD *)(*v17 + 8) + 12 * v20[2]);
        v13.i32[0] = v55[1].i32[0];
        v35.i32[0] = v55[3].i32[0];
        v36.i32[0] = v55[5].i32[0];
        v37.i32[0] = v57[1].i32[0];
        v58 = *v57;
        *(float32x2_t *)v59.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*v55, COERCE_FLOAT(*v57)), v55[2], *v57, 1), v55[4], v37.f32[0]);
        *(float32x2_t *)&v59.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.f32, *v57), v35, *v57, 1), v37, v36);
        *(float32x2_t *)v13.f32 = v55[6];
        v13.i32[2] = v55[7].i32[0];
        v60 = vaddq_f32(v59, v13);
        *(_DWORD *)&v118[8] = v60.i32[2];
        *(_QWORD *)v118 = v60.i64[0];
        v61 = v56[1];
        if (v61 >= v56[2])
        {
          v63 = sub_2233B2838(v56, (uint64_t *)v118);
        }
        else
        {
          v62 = *(_QWORD *)v118;
          *(_DWORD *)(v61 + 8) = *(_DWORD *)&v118[8];
          *(_QWORD *)v61 = v62;
          v63 = v61 + 12;
        }
        v56[1] = v63;
        v64 = (unint64_t *)v17[3];
        *(_DWORD *)v118 = -1431655765 * ((v40 - v41) >> 2);
        v65 = (float32x2_t)vadd_s32(vdup_n_s32(*(unsigned int *)v118), (int32x2_t)0x200000001);
        *(float32x2_t *)&v118[4] = v65;
        v66 = v64[15];
        if (v66 >= v64[16])
        {
          result = sub_2233B29C0(v64 + 14, (uint64_t *)v118);
        }
        else
        {
          v67 = *(_QWORD *)v118;
          *(_DWORD *)(v66 + 8) = *(_DWORD *)&v118[8];
          *(_QWORD *)v66 = v67;
          result = v66 + 12;
        }
        v64[15] = result;
        v69 = (unint64_t *)v17[3];
        v68 = (float32x2_t *)v17[4];
        v65.i32[0] = v125;
        *(float32x2_t *)v13.f32 = v124;
        v14 = v13;
        v14.i32[2] = v125;
        v70 = (float32x2_t)vdup_lane_s32((int32x2_t)v124, 1);
        v71 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32), v70, v124, 1), v65, v65).f32[0]);
        v70.i32[0] = v68[1].i32[0];
        v36.i32[0] = v68[3].i32[0];
        v58.i32[0] = v68[5].i32[0];
        v72 = (int8x16_t)vmulq_n_f32(v14, 1.0 / v71);
        v73 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*v68, *(float *)v72.i32), v68[2], *(float32x2_t *)v72.i8, 1), v68[4], (float32x4_t)v72, 2);
        *(float32x2_t *)v14.f32 = vmla_lane_f32(vmul_f32(v70, *(float32x2_t *)v72.i8), v36, *(float32x2_t *)v72.i8, 1);
        v12 = (float32x4_t)vextq_s8(v72, v72, 8uLL);
        *(float32x2_t *)v118 = v73;
        *(_DWORD *)&v118[8] = vmla_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v12.f32, v58).u32[0];
        v74 = v69[10];
        if (v74 >= v69[11])
        {
          result = sub_2233B2838(v69 + 9, (uint64_t *)v118);
          v69[10] = result;
        }
        else
        {
          v75 = *(_QWORD *)v118;
          *(_DWORD *)(v74 + 8) = *(_DWORD *)&v118[8];
          *(_QWORD *)v74 = v75;
          v69[10] = v74 + 12;
        }
      }
      ++v16;
      v19 -= 4;
    }
    while (v19);
  }
  return result;
}

void sub_2233B6A90(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CAC10);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAC10))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CAC08);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CAC10);
  }
  *a1 = qword_2540CAC08;
}

void sub_2233B6B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CAC10);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CAC10);
  _Unwind_Resume(a1);
}

_QWORD *sub_2233B6B84(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[25];
  if (v2)
  {
    a1[26] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[22];
  if (v3)
  {
    a1[23] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[19];
  if (v4)
  {
    a1[20] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[16];
  if (v5)
  {
    a1[17] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_2233B6BE4(uint64_t a1)
{
  int v1;
  int v2;
  void *v4;
  char *isa;
  size_t isa_high;
  BOOL v7;
  unsigned int v8;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  unsigned __int8 v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  int v20;
  const char *v21;
  _QWORD v22[3];
  int v23;
  const char *v24;
  int v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *category[2];
  _QWORD v31[2];
  _BYTE v32[37];
  os_log_t v33;
  uint64_t v34;
  char v35;
  char v36;
  _QWORD v37[5];

  v37[4] = *MEMORY[0x24BDAC8D0];
  v1 = *(_DWORD *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 68);
  if ((v1 & 2) != 0)
  {
    v7 = (*(_DWORD *)(a1 + 68) & 1) == 0;
    v8 = 1;
    goto LABEL_13;
  }
  if ((v1 & 0x10) != 0)
  {
    v7 = (*(_DWORD *)(a1 + 68) & 1) == 0;
    v8 = 3;
    goto LABEL_13;
  }
  if ((v1 & 4) != 0)
  {
    v7 = (*(_DWORD *)(a1 + 68) & 1) == 0;
    v8 = 5;
    goto LABEL_13;
  }
  if ((v1 & 0x20) != 0)
  {
    if ((v2 & 1) != 0)
      return 7;
    else
      return 9;
  }
  if ((v1 & 1) != 0)
  {
    if ((v2 & 1) != 0)
      return 8;
    else
      return 10;
  }
  if ((v1 & 8) != 0)
  {
    v7 = (*(_DWORD *)(a1 + 68) & 1) == 0;
    v8 = 11;
    goto LABEL_13;
  }
  if ((v1 & 0x40) != 0)
  {
    v7 = (*(_DWORD *)(a1 + 68) & 1) == 0;
    v8 = 13;
LABEL_13:
    if (v7)
      return v8 + 1;
    else
      return v8;
  }
  v4 = sub_2233B6FCC();
  sub_2233B703C(&v33);
  if (SHIBYTE(v33[4].isa) < 0)
  {
    isa = (char *)v33[2].isa;
    isa_high = (size_t)v33[3].isa;
  }
  else
  {
    isa = (char *)&v33[2];
    isa_high = HIBYTE(v33[4].isa);
  }
  sub_223195728((uint64_t)v4, isa, isa_high, "No PlaneUpdateReason flag set for GP %s; update reason: %d", 0x3AuLL);
  sub_2233B6A90(&v29);
  if (**(int **)(v29 + 56) <= 5)
  {
    v10 = *(unsigned __int8 *)(v29 + 72);
    v11 = sub_22322F254(v29, "OSLogSurrogateAppender", 1, 0);
    v12 = v11 ? v11 + 16 : 0;
    if (v10 || v11)
    {
      v22[0] = &v29;
      v22[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v22[2] = std::chrono::system_clock::now().__d_.__rep_;
      v23 = 5;
      v24 = "unknown file";
      v25 = 360;
      v27 = 0;
      v28 = 0;
      v26 = "unknown function";
      sub_2245664AC((unsigned __int8 *)a1, v32);
      v21 = v32;
      v20 = v1;
      v13 = (uint64_t *)(v29 + 16);
      if (*(char *)(v29 + 39) < 0)
      {
        v15 = *(char **)(v29 + 16);
        v14 = *(char **)(v29 + 24);
      }
      else
      {
        v14 = (char *)*(unsigned __int8 *)(v29 + 39);
        v15 = (char *)(*(_QWORD *)v22[0] + 16);
      }
      category[0] = v15;
      category[1] = v14;
      v16 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v33);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v33, &xmmword_255788F40);
        if (v36 && v35 < 0)
          operator delete(v33);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      v17 = byte_255788F57;
      if (byte_255788F57 >= 0)
      {
        v18 = (const char *)&xmmword_255788F40;
      }
      else
      {
        v17 = *((_QWORD *)&xmmword_255788F40 + 1);
        v18 = (const char *)xmmword_255788F40;
      }
      v31[0] = v18;
      v31[1] = v17;
      v33 = os_log_create(v18, category[0]);
      sub_223199D38(&v34, (uint64_t)v31);
      sub_223199D38(v37, (uint64_t)category);
      v19 = v33;
      sub_223199BDC((uint64_t)&v33);
      sub_2233C6510(v12, v13, v19, OS_LOG_TYPE_ERROR, &v21, &v20);
      if (v10)
      {
        sub_2245664AC((unsigned __int8 *)a1, &v33);
        sub_22322C138((uint64_t)v22, "No PlaneUpdateReason flag set for GP %s; update reason: %d",
          (const char *)&v33,
          v1);
        sub_223182C08((uint64_t)v22);
      }
      sub_223182DAC((uint64_t)v22);
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_2233B6F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void **v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  if (*(_BYTE *)(v7 - 120))
  {
    if (*(char *)(v7 - 121) < 0)
      operator delete(*v6);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233B6F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2233B6FCC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2557892F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2557892F0))
    return &unk_255789280;
  __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
  __cxa_guard_release(&qword_2557892F0);
  return &unk_255789280;
}

void sub_2233B703C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CAC20);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAC20))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CAC18);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CAC20);
  }
  *a1 = qword_2540CAC18;
}

void sub_2233B70D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CAC20);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CAC20);
  _Unwind_Resume(a1);
}

BOOL sub_2233B7130(uint64_t a1, uint64_t a2)
{
  unsigned int v3;

  v3 = sub_2233B6BE4(a1);
  return v3 < sub_2233B6BE4(a2);
}

void sub_2233B7164(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int32x4_t v12;
  float32x4_t v13;
  __int128 v14;
  _QWORD *v15;
  char *v16;
  int32x4_t v17;
  float32x4_t v18;
  float v19;
  uint64_t v20;
  float32x2_t *v21;
  float32x2_t *v22;
  float32x4_t v23;
  float32x2_t v24;
  float v25;
  float v26;
  float32x2_t v27;
  int32x4_t v28;
  float32x2_t v29;
  float v30;
  float v31;
  float32x2_t v32;
  float32x2_t v33;
  float v34;
  int8x16_t v35;
  float v36;
  float32x2_t v37;
  BOOL v38;
  _QWORD *v39;
  _QWORD *v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float v59;
  float32x2_t v60;
  float32x2_t v61;
  float v62;
  float32x2_t v63;
  float v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float v68;
  float32x2_t v69;
  float32x2_t v70;
  float v71;
  float32x2_t v72;
  float32x2_t v73;
  float v74;
  float v75;
  uint64_t v76;
  float v77;
  float32x2_t v78;
  char v79;
  float v80;
  float v81;
  __int32 v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  BOOL v89;
  float32x2_t v90;
  float32x2_t v91;
  float v92;
  float32x2_t v93;
  BOOL v94;
  int8x16_t v95;
  float v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v102;
  unsigned __int8 *v103;
  uint64_t v104;
  unint64_t v105;
  unsigned __int8 *v106;
  int v107;
  unsigned __int8 *v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  _QWORD *v112;
  int32x4_t v113;
  int32x4_t v114;
  double v115;
  float32x4_t v116;
  uint64_t v117;
  float32x4_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int32x4_t v121;
  int32x4_t v122;
  float32x2_t v123;
  float32x2_t v125;
  float32x2_t v126;
  __int128 v127;
  float32x4_t v128;
  float32x4_t v129;
  double v130;
  double v131;
  double v132;
  __n128 v133;
  __n128 v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int8x16_t v140;
  float32x2_t v141;
  float32x2_t v142;
  float32x2_t v143;
  int32x4_t v144;
  float32x4_t v145;
  simd_float3x3 v146;
  float32x2_t v147;
  float32x2_t v148;
  float32x2_t v149;
  float32x2_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x4_t v154;
  float32x4_t v155;
  int8x16_t v156;
  float32x2_t v157;
  float32x2_t v158;
  float32x2_t v159;
  float32x2_t v160;
  float32x2_t v161;
  int32x4_t v162;
  int8x16_t v163;
  float32x2_t v164;
  int8x16_t v165;
  int32x4_t v166;
  float32x4_t v167;
  int8x16_t v168;
  int32x2_t v169;
  float32x2_t v170;
  unsigned int v171;
  unsigned int v172;
  float32x4_t v173;
  float32x4_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  uint32x4_t v179;
  uint32x4_t v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  int8x16_t v191;
  int8x16_t v192;
  float32x2_t v193;
  unsigned int v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v199;
  size_t v200;
  int v201;
  unsigned __int8 v202;
  const char *v203;
  size_t v204;
  _BYTE *v205;
  size_t v206;
  uint64_t v207;
  uint64_t v208;
  _BYTE *v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  NSObject *v213;
  size_t v214;
  void *v215;
  _QWORD *v216;
  size_t v217;
  size_t v218;
  uint64_t *v219;
  void *v220;
  float32x2_t v221;
  unsigned int v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  char *v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *p_shared_owners;
  unint64_t v232;
  float32x2_t v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  int v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  unsigned __int8 v276;
  const char *v277;
  size_t v278;
  _BYTE *v279;
  uint64_t v280;
  uint64_t v281;
  _BYTE *v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  NSObject *v286;
  size_t v287;
  void *v288;
  _QWORD *v289;
  size_t v290;
  size_t v291;
  uint64_t *v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char v297;
  char *v298;
  uint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  float32x2_t v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  char *v342;
  int v343;
  __int128 v344;
  __int128 v345;
  __n128 *v346;
  char *v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  char *v351;
  char *v352;
  __int128 v353;
  int8x16_t v354;
  char *v355;
  char *v356;
  __int128 v357;
  __int128 v358;
  char *v359;
  void *v360;
  int v361;
  unint64_t v362;
  unint64_t v363;
  uint64_t v365;
  size_t v366;
  const char *v367;
  unsigned __int8 v368;
  unsigned __int8 v369;
  const char *v370;
  size_t v371;
  _BYTE *v372;
  void *v373;
  unint64_t v374;
  const char *v375;
  uint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  uint64_t v379;
  _BYTE *v380;
  NSObject *v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  size_t v385;
  std::__shared_weak_count_vtbl *v386;
  std::__shared_weak_count *v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  int v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  uint64_t v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  std::__shared_weak_count *v409;
  unint64_t *v410;
  unint64_t v411;
  std::__shared_weak_count *v412;
  unint64_t *v413;
  unint64_t v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  int v418;
  void *v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  unint64_t v422;
  __n128 *v423;
  __n128 *v424;
  char *v425;
  char *v426;
  _BYTE *v427;
  char v428;
  int64_t v429;
  __n128 *v430;
  unsigned __int32 v431;
  int v432;
  unint64_t v433;
  unint64_t v434;
  uint64_t v435;
  size_t v436;
  const char *v437;
  int v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v442;
  uint64_t v443;
  size_t v444;
  const char *v445;
  unsigned __int8 v446;
  void *v447;
  unsigned int v448;
  unsigned int v449;
  __n128 v450;
  _BYTE *v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  unint64_t v457;
  unint64_t v458;
  uint64_t v459;
  size_t v460;
  const char *v461;
  __n128 *v462;
  __n128 *v463;
  unsigned int v464;
  __n128 *v465;
  unsigned __int8 v466;
  const char *v467;
  size_t v468;
  _BYTE *v469;
  unint64_t v470;
  const char *v471;
  uint64_t v472;
  int v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  _BYTE *v477;
  uint64_t v478;
  uint64_t v479;
  NSObject *v480;
  size_t v481;
  std::__shared_weak_count_vtbl *v482;
  std::__shared_weak_count *v483;
  std::__shared_weak_count *v484;
  unint64_t *v485;
  unint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  std::__shared_weak_count *v493;
  unint64_t *v494;
  unint64_t v495;
  std::__shared_weak_count *v496;
  unint64_t *v497;
  unint64_t v498;
  uint64_t v499;
  std::__shared_weak_count *v500;
  unint64_t *v501;
  unint64_t v502;
  std::__shared_weak_count *v503;
  unint64_t *v504;
  unint64_t v505;
  std::__shared_weak_count *v506;
  unint64_t *v507;
  unint64_t v508;
  std::__shared_weak_count *v509;
  unint64_t *v510;
  unint64_t v511;
  void *v512;
  std::__shared_weak_count *v513;
  unint64_t *v514;
  unint64_t v515;
  float32x2_t v516;
  uint64_t v517;
  _BYTE *v518;
  uint64_t v519;
  int64_t v520;
  uint64_t v521;
  __n128 *v522;
  unint64_t v523;
  uint64_t v524;
  int v525;
  float v526;
  __n128 v527;
  double v528;
  unsigned __int32 v530;
  unsigned __int8 v531;
  const char *v532;
  size_t v533;
  _BYTE *v534;
  int v535;
  _QWORD *v536;
  uint64_t v537;
  uint64_t v538;
  _BYTE *v539;
  uint64_t v540;
  uint64_t v541;
  NSObject *v542;
  int v543;
  size_t v544;
  std::__shared_weak_count_vtbl *v545;
  std::__shared_weak_count *v546;
  std::__shared_weak_count *v547;
  unint64_t *v548;
  unint64_t v549;
  unint64_t v550;
  uint64_t v551;
  _DWORD *v552;
  uint64_t v553;
  uint64_t v554;
  char *v555;
  uint64_t v556;
  std::__shared_weak_count *v557;
  unint64_t *v558;
  unint64_t v559;
  std::__shared_weak_count *v560;
  unint64_t *v561;
  unint64_t v562;
  uint64_t v563;
  std::__shared_weak_count *v564;
  unint64_t *v565;
  unint64_t v566;
  std::__shared_weak_count *v567;
  unint64_t *v568;
  unint64_t v569;
  std::__shared_weak_count *v570;
  unint64_t *v571;
  unint64_t v572;
  std::__shared_weak_count *v573;
  unint64_t *v574;
  unint64_t v575;
  void *v576;
  std::__shared_weak_count *v577;
  unint64_t *v578;
  unint64_t v579;
  _OWORD *v580;
  double v581;
  _BOOL4 v582;
  __n128 v584;
  float v585;
  BOOL v586;
  float v587;
  int v588;
  int v589;
  int v590;
  int v591;
  int v592;
  unint64_t v593;
  _QWORD **v594;
  uint64_t v595;
  size_t v596;
  const char *v597;
  unsigned __int8 v598;
  const char *v599;
  size_t v600;
  _BYTE *v601;
  int v602;
  int v603;
  int v604;
  int v605;
  int v606;
  unint64_t v607;
  int v608;
  uint64_t v609;
  uint64_t v610;
  _BYTE *v611;
  uint64_t v612;
  uint64_t v613;
  NSObject *v614;
  int v615;
  size_t v616;
  std::__shared_weak_count_vtbl *v617;
  std::__shared_weak_count *v618;
  std::__shared_weak_count *v619;
  unint64_t *v620;
  unint64_t v621;
  unint64_t v622;
  uint64_t v623;
  _DWORD *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  std::__shared_weak_count *v629;
  unint64_t *v630;
  unint64_t v631;
  std::__shared_weak_count *v632;
  unint64_t *v633;
  unint64_t v634;
  uint64_t v635;
  std::__shared_weak_count *v636;
  unint64_t *v637;
  unint64_t v638;
  std::__shared_weak_count *v639;
  unint64_t *v640;
  unint64_t v641;
  std::__shared_weak_count *v642;
  unint64_t *v643;
  unint64_t v644;
  std::__shared_weak_count *v645;
  unint64_t *v646;
  unint64_t v647;
  void *v648;
  std::__shared_weak_count *v649;
  unint64_t *v650;
  unint64_t v651;
  __n128 *v652;
  __n128 *v653;
  uint64_t v654;
  unint64_t v655;
  _QWORD *v656;
  unsigned __int8 v657;
  const char *v658;
  size_t v659;
  _BYTE *v660;
  int v661;
  int v662;
  int v663;
  int v664;
  int v665;
  uint64_t v666;
  uint64_t v667;
  _BYTE *v668;
  uint64_t v669;
  uint64_t v670;
  NSObject *v671;
  int v672;
  size_t v673;
  std::__shared_weak_count_vtbl *v674;
  std::__shared_weak_count *v675;
  std::__shared_weak_count *v676;
  unint64_t *v677;
  unint64_t v678;
  unint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  std::__shared_weak_count *v686;
  unint64_t *v687;
  unint64_t v688;
  std::__shared_weak_count *v689;
  unint64_t *v690;
  unint64_t v691;
  uint64_t v692;
  std::__shared_weak_count *v693;
  unint64_t *v694;
  unint64_t v695;
  std::__shared_weak_count *v696;
  unint64_t *v697;
  unint64_t v698;
  std::__shared_weak_count *v699;
  unint64_t *v700;
  unint64_t v701;
  std::__shared_weak_count *v702;
  unint64_t *v703;
  unint64_t v704;
  void *v705;
  std::__shared_weak_count *v706;
  unint64_t *v707;
  unint64_t v708;
  __n128 *v709;
  __n128 *v710;
  uint64_t v711;
  unint64_t v712;
  uint64_t v713;
  float32x2_t v714;
  float32x2_t v715;
  float32x2_t v716;
  float32x2_t v717;
  float32x2_t v718;
  float32x2_t v719;
  float32x2_t v720;
  int8x16_t v721;
  float32x2_t v722;
  float32x2_t v723;
  float32x2_t v724;
  float32x2_t v725;
  int32x4_t v726;
  float32x2_t v727;
  float32x2_t v728;
  float32x2_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  const char *__src;
  int v734;
  unsigned int v735;
  unint64_t v736;
  char *category;
  char *categorya;
  float32x4_t v739;
  uint64_t v740;
  float32x4_t v741;
  uint64_t v742;
  int32x2_t __len;
  size_t __lena;
  unsigned __int8 *v745;
  int v746;
  char v747;
  unint64_t v748;
  float32x4_t v749;
  float32x4_t v750;
  __int128 v751;
  float32x4_t v752;
  uint64_t v753;
  int v754;
  uint64_t v755;
  _QWORD *v756;
  _QWORD *v757;
  _QWORD *v758;
  _QWORD *v759;
  char *v760;
  char *v761;
  char *v762;
  int v763;
  char *v764;
  char *v765;
  __int16 v766;
  char *v767;
  uint64_t v768;
  __int16 v769;
  uint64_t v770;
  int v771;
  uint64_t v772;
  unsigned __int32 v773;
  const char *v774;
  int v775;
  const char *v776;
  const char *v777;
  _QWORD **v778;
  void *v779;
  __n128 *v780;
  char *v781;
  uint64_t v782;
  uint64_t v783;
  __int32 v784;
  uint64_t v785;
  __int32 v786;
  uint64_t *v787;
  __int128 v788;
  _BYTE object[48];
  int8x16_t v790;
  char v791;
  void *v792;
  void *v793;
  void *v794;
  void *v795;
  void *v796;
  void *v797;
  void *__p;
  void *v799;
  char __s[8];
  int v801;
  int v802;
  _BYTE v803[32];
  int32x4_t v804;
  const char *v805;
  uint64_t v806;
  std::__shared_weak_count *v807;
  _QWORD v808[2];
  _BYTE v809[24];
  _BYTE *v810;
  std::__shared_weak_count *v811;
  uint64_t v812;

  v812 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v780 = 0;
  v779 = 0;
  v781 = 0;
  v15 = (_QWORD *)a1[5];
  if (v15 == a1 + 6)
  {
    v360 = 0;
    v767 = 0;
    v771 = 0;
    v775 = 0;
    v763 = 0;
    goto LABEL_412;
  }
  v767 = 0;
  v771 = 0;
  v16 = 0;
  v775 = 0;
  v13.i64[0] = *(_QWORD *)(a2 + 48);
  v13.i32[2] = *(_DWORD *)(a2 + 56);
  LODWORD(v14) = v13.i32[1];
  v17 = vdupq_lane_s32(*(int32x2_t *)v13.f32, 1);
  v18 = (float32x4_t)xmmword_2245F4D10;
  v19 = 1.0;
  do
  {
    v20 = v15[6];
    if (!*(_BYTE *)(v20 + 457) || *(_BYTE *)(v20 + 456) != 1)
      goto LABEL_24;
    if (!*(_BYTE *)(v20 + 384))
      goto LABEL_23;
    v21 = *(float32x2_t **)(v20 + 360);
    v22 = *(float32x2_t **)(v20 + 368);
    if ((unint64_t)((char *)v22 - (char *)v21) <= 0x17)
      goto LABEL_23;
    LODWORD(v6) = *(_DWORD *)(v20 + 36);
    v9.i64[0] = *(_QWORD *)(v20 + 28);
    v23 = (float32x4_t)v9;
    v23.i32[2] = v6;
    v24 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1);
    v25 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8), v24, *(float32x2_t *)v9.i8, 1), *(float32x2_t *)&v6, *(float32x2_t *)&v6).f32[0];
    if (v25 == v19)
      goto LABEL_17;
    v26 = v25 + -1.0;
    if (v25 < v19)
      v26 = v19 - v25;
    if (v26 <= 0.000001)
    {
LABEL_17:
      v8.i32[0] = *(_DWORD *)(v20 + 24);
      v9.i64[0] = *(_QWORD *)(v20 + 16);
      v33 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v23.f32), v24, *(float32x2_t *)v9.i8, 1);
      v7 = v9;
      v7.i32[2] = v8.i32[0];
      *(float32x2_t *)v10.i8 = vmla_f32(v33, *(float32x2_t *)&v6, *(float32x2_t *)v8.i8);
      *(float *)v10.i32 = -*(float *)v10.i32;
      v9 = (int8x16_t)v23;
      v8 = (int8x16_t)v23;
    }
    else
    {
      *(float *)v10.i32 = v19 / sqrtf(v25);
      v8 = (int8x16_t)vmulq_n_f32(v23, *(float *)v10.i32);
      v7.i64[0] = *(_QWORD *)(v20 + 16);
      v7.i32[2] = *(_DWORD *)(v20 + 24);
      v27 = vmul_lane_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v9.i8, 1);
      *(float32x2_t *)v12.i8 = vmul_f32(*(float32x2_t *)&v6, *(float32x2_t *)v10.i8);
      v28.i64[0] = v8.i64[0];
      v28.u64[1] = (unint64_t)v27;
      v9 = (int8x16_t)vuzp1q_s32(v28, v12);
      v29 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1);
      v10.i64[0] = vextq_s8(v8, v8, 8uLL).u64[0];
      v30 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), v27, *(float32x2_t *)v8.i8, 1), *(float32x2_t *)v10.i8, *(float32x2_t *)v12.i8).f32[0];
      if (v30 == v19)
        goto LABEL_32;
      v31 = v30 + -1.0;
      if (v30 < v19)
        v31 = v19 - v30;
      if (v31 <= 0.000001)
      {
LABEL_32:
        *(float *)v10.i32 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v8.i8), v29, *(float32x2_t *)v7.i8, 1), *(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0];
      }
      else
      {
        *(float *)v9.i32 = sqrtf(v30);
        v10 = (int8x16_t)vmulq_n_f32((float32x4_t)v8, v19 / *(float *)v9.i32);
        v32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v10.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), *(float32x2_t *)v7.i8, 1);
        v10.i64[0] = vextq_s8(v10, v10, 8uLL).u64[0];
        *(float *)v10.i32 = -vmla_f32(v32, *(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0];
        v9 = (int8x16_t)vdivq_f32((float32x4_t)v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 0));
        v8 = v9;
      }
    }
    v34 = *(float *)(a2 + 56);
    v11.i64[0] = *(_QWORD *)(a2 + 48);
    *(float *)&v11.i32[2] = v34;
    v35 = (int8x16_t)vsubq_f32(vaddq_f32((float32x4_t)v11, v18), (float32x4_t)v11);
    v12 = (int32x4_t)vextq_s8(v9, v9, 8uLL);
    LODWORD(v36) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v35.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1), *(float32x2_t *)v9.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), *(float32x2_t *)v12.i8).u32[0];
    if (fabsf(v36) < 0.00000011921
      || ((*(float *)v10.i32 = -*(float *)v10.i32,
           v11 = (int8x16_t)vmlsq_lane_f32((float32x4_t)v11, (float32x4_t)v8, *(float32x2_t *)v10.i8, 0),
           v37 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v11.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1), *(float32x2_t *)v11.i8, 1), v9 = vextq_s8(v11, v11, 8uLL), *(float32x2_t *)v8.i8 = vmla_f32(v37, *(float32x2_t *)v9.i8, *(float32x2_t *)v12.i8), *(float *)v8.i32 = (float)-*(float *)v8.i32 / v36, *(float *)v8.i32 >= 0.0)? (v38 = *(float *)v8.i32 <= v19): (v38 = 0), !v38))
    {
LABEL_23:
      v16 = (char *)((_DWORD)v16 + 1);
      goto LABEL_24;
    }
    v41 = v34 + (float)(*(float *)&v35.i32[2] * *(float *)v8.i32);
    if ((float)(v34 - v41) > 2.5)
    {
      ++v775;
      goto LABEL_24;
    }
    v42.i64[0] = 0xBF000000BF000000;
    v42.i64[1] = 0xBF000000BF000000;
    v749 = v18;
    v750 = (float32x4_t)v17;
    v751 = v14;
    v752 = v13;
    v10.i32[0] = *(_DWORD *)(v20 + 48);
    v8.i64[0] = *(_QWORD *)(v20 + 88);
    v8.i32[2] = *(_DWORD *)(v20 + 96);
    v43 = vsubq_f32(v13, (float32x4_t)v8);
    v10.i32[1] = *(_DWORD *)(v20 + 64);
    *(float32x2_t *)v8.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)(v20 + 40), *(int32x2_t *)(v20 + 56)), v43.f32[0]), (float32x2_t)vzip2_s32(*(int32x2_t *)(v20 + 40), *(int32x2_t *)(v20 + 56)), *(float32x2_t *)v43.f32, 1), *(float32x2_t *)v10.i8, v43, 2);
    if (*(_BYTE *)(v20 + 356))
    {
      v44 = *(float32x2_t *)(v20 + 324);
      v45 = COERCE_FLOAT(*(_QWORD *)(v20 + 332));
      LODWORD(v46) = HIDWORD(*(_QWORD *)(v20 + 332));
      if ((float)((float)((float)(v45 - v44.f32[0]) * (float)(v44.f32[1] - *(float *)&v8.i32[1]))
                 - (float)((float)(v44.f32[0] - *(float *)v8.i32) * (float)(v46 - v44.f32[1]))) < 0.0
        || (v47 = *(float *)(v20 + 340),
            v48 = *(float *)(v20 + 344),
            (float)((float)((float)(v46 - *(float *)&v8.i32[1]) * (float)(v47 - v45))
                  - (float)((float)(v45 - *(float *)v8.i32) * (float)(v48 - v46))) < 0.0)
        || (v49 = *(float *)(v20 + 348),
            v50 = *(float *)(v20 + 352),
            (float)((float)((float)(v48 - *(float *)&v8.i32[1]) * (float)(v49 - v47))
                  - (float)((float)(v47 - *(float *)v8.i32) * (float)(v50 - v48))) < 0.0)
        || (float)((float)((float)(v44.f32[0] - v49) * (float)(v50 - *(float *)&v8.i32[1]))
                 - (float)((float)(v49 - *(float *)v8.i32) * (float)(v44.f32[1] - v50))) < 0.0)
      {
        v51 = *(float32x2_t *)(v20 + 348);
        v52 = vsub_f32(*(float32x2_t *)v8.i8, v51);
        v53 = vsub_f32(v44, v51);
        v54 = vdiv_f32(vmla_lane_f32(vmul_f32(v53, v52), (float32x2_t)vdup_lane_s32((int32x2_t)v52, 1), v53, 1), vmla_lane_f32(vmul_f32(v53, v53), (float32x2_t)vdup_lane_s32((int32x2_t)v53, 1), v53, 1)).f32[0];
        v55 = v51;
        if (v54 >= 0.0)
        {
          v55 = *(float32x2_t *)(v20 + 324);
          if (v54 <= 1.0)
            v55 = vmla_n_f32(v51, v53, v54);
        }
        v56 = *(float32x2_t *)(v20 + 332);
        v57 = vsub_f32(*(float32x2_t *)v8.i8, v44);
        v58 = vsub_f32(v56, v44);
        v59 = vdiv_f32(vmla_lane_f32(vmul_f32(v58, v57), (float32x2_t)vdup_lane_s32((int32x2_t)v57, 1), v58, 1), vmla_lane_f32(vmul_f32(v58, v58), (float32x2_t)vdup_lane_s32((int32x2_t)v58, 1), v58, 1)).f32[0];
        v60 = *(float32x2_t *)(v20 + 324);
        if (v59 >= 0.0)
        {
          v60 = *(float32x2_t *)(v20 + 332);
          if (v59 <= 1.0)
            v60 = vmla_n_f32(v44, v58, v59);
        }
        v61 = vsub_f32(*(float32x2_t *)v8.i8, v55);
        v62 = fminf(sqrtf(vmla_lane_f32(vmul_f32(v61, v61), (float32x2_t)vdup_lane_s32((int32x2_t)v61, 1), v61, 1).f32[0]), INFINITY);
        v63 = vsub_f32(*(float32x2_t *)v8.i8, v60);
        v64 = sqrtf(vmla_lane_f32(vmul_f32(v63, v63), (float32x2_t)vdup_lane_s32((int32x2_t)v63, 1), v63, 1).f32[0]);
        if (v64 >= v62)
          v64 = v62;
        v65 = *(float32x2_t *)(v20 + 340);
        v66 = vsub_f32(*(float32x2_t *)v8.i8, v56);
        v67 = vsub_f32(v65, v56);
        v68 = vdiv_f32(vmla_lane_f32(vmul_f32(v67, v66), (float32x2_t)vdup_lane_s32((int32x2_t)v66, 1), v67, 1), vmla_lane_f32(vmul_f32(v67, v67), (float32x2_t)vdup_lane_s32((int32x2_t)v67, 1), v67, 1)).f32[0];
        v69 = *(float32x2_t *)(v20 + 332);
        if (v68 >= 0.0)
        {
          v69 = *(float32x2_t *)(v20 + 340);
          if (v68 <= 1.0)
            v69 = vmla_n_f32(v56, v67, v68);
        }
        v70 = vsub_f32(*(float32x2_t *)v8.i8, v69);
        v71 = sqrtf(vmla_lane_f32(vmul_f32(v70, v70), (float32x2_t)vdup_lane_s32((int32x2_t)v70, 1), v70, 1).f32[0]);
        if (v71 >= v64)
          v71 = v64;
        v72 = vsub_f32(*(float32x2_t *)v8.i8, v65);
        v73 = vsub_f32(v51, v65);
        v74 = vdiv_f32(vmla_lane_f32(vmul_f32(v73, v72), (float32x2_t)vdup_lane_s32((int32x2_t)v72, 1), v73, 1), vmla_lane_f32(vmul_f32(v73, v73), (float32x2_t)vdup_lane_s32((int32x2_t)v73, 1), v73, 1)).f32[0];
        if (v74 >= 0.0)
        {
          v72 = v52;
          if (v74 <= 1.0)
            v72 = vsub_f32(*(float32x2_t *)v8.i8, vmla_n_f32(v65, v73, v74));
        }
        *(float32x2_t *)v10.i8 = vmla_lane_f32(vmul_f32(v72, v72), (float32x2_t)vdup_lane_s32((int32x2_t)v72, 1), v72, 1);
        v75 = sqrtf(*(float *)v10.i32);
        if (v75 >= v71)
          v75 = v71;
        if (v75 > 5.0)
          goto LABEL_60;
      }
    }
    v76 = v22 - v21;
    if (!v76)
      goto LABEL_60;
    if (v76 != 1)
    {
      if (v21 == v22)
        goto LABEL_70;
      v78 = v22[-1];
      v79 = 1;
      v80 = 3.4028e38;
      do
      {
        v82 = v78.i32[0];
        v83 = v78;
        v84 = *v21++;
        v78 = v84;
        v85 = v84;
        v86.i32[0] = vdup_lane_s32((int32x2_t)v83, 1).u32[0];
        v87.i32[0] = vdup_lane_s32((int32x2_t)v84, 1).u32[0];
        v87.i32[1] = v84.i32[0];
        v86.i32[1] = v82;
        v88 = vmul_f32(vsub_f32(v83, *(float32x2_t *)v8.i8), vsub_f32(v87, v86));
        v89 = vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v88, 1), v88).f32[0] < 0.0;
        v90 = vsub_f32(*(float32x2_t *)v8.i8, v83);
        v91 = vsub_f32(v84, v83);
        v92 = vdiv_f32(vmla_lane_f32(vmul_f32(v91, v90), (float32x2_t)vdup_lane_s32((int32x2_t)v90, 1), v91, 1), vmla_lane_f32(vmul_f32(v91, v91), (float32x2_t)vdup_lane_s32((int32x2_t)v91, 1), v91, 1)).f32[0];
        v93 = v83;
        if (v92 >= 0.0)
        {
          v93 = v85;
          if (v92 <= 1.0)
            v93 = vmla_n_f32(v83, v91, v92);
        }
        *(float32x2_t *)v10.i8 = vsub_f32(*(float32x2_t *)v8.i8, v93);
        v79 &= v89;
        v81 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), *(float32x2_t *)v10.i8, 1).f32[0];
        if (v81 < v80)
          v80 = v81;
      }
      while (v21 != v22);
      if ((v79 & 1) != 0)
      {
LABEL_70:
        v77 = 0.0;
        if (!a1[3])
          goto LABEL_272;
      }
      else
      {
        v77 = sqrtf(v80);
        if (v77 > 5.0)
          goto LABEL_60;
LABEL_73:
        if (!a1[3])
        {
LABEL_272:
          v94 = v77 <= 0.5;
          goto LABEL_384;
        }
        if (v77 > 0.5)
        {
          v94 = 0;
          goto LABEL_384;
        }
      }
      v95 = (int8x16_t)v23;
      if (v25 != 1.0)
      {
        v96 = v25 + -1.0;
        if (v25 < 1.0)
          v96 = 1.0 - v25;
        v38 = v96 > 0.000001;
        v95 = (int8x16_t)v23;
        if (v38)
          v95 = (int8x16_t)vmulq_n_f32(v23, 1.0 / sqrtf(v25));
      }
      v97 = v13;
      *(float *)&v6 = (float)-(float)(vaddv_f32(vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v23.f32))
                                    - vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v95.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v95.i8, 1), *(float32x2_t *)v7.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0])/ *(float *)&v6;
      v97.i32[2] = v6;
      v741 = v97;
      __len = (int32x2_t)v6;
      v98 = vaddq_f32(v97, v42);
      v784 = v98.i32[2];
      v783 = v98.i64[0];
      __asm { FMOV            V1.4S, #1.0 }
      v102 = vaddq_f32(v98, _Q1);
      v786 = v102.i32[2];
      v785 = v102.i64[0];
      v103 = (unsigned __int8 *)a1[8];
      v104 = a1[9] - (_QWORD)v103;
      if (v104)
      {
        v756 = a3;
        v760 = v16;
        v105 = 0xCCCCCCCCCCCCCCCDLL * (v104 >> 3);
        do
        {
          v106 = &v103[40 * (v105 >> 1)];
          v107 = (char)sub_22319835C(v106, (unsigned __int8 *)v20);
          if (v107 >= 0)
            v105 >>= 1;
          else
            v105 += ~(v105 >> 1);
          if (v107 < 0)
            v103 = v106 + 40;
        }
        while (v105);
        v16 = v760;
        if ((unsigned __int8 *)a1[9] != v103
          && ((char)sub_22319835C(v103, (unsigned __int8 *)v20) & 0x80000000) == 0
          && ((char)sub_22319835C((unsigned __int8 *)v20, v103) & 0x80000000) == 0
          && v103 != (unsigned __int8 *)a1[9])
        {
          v108 = (unsigned __int8 *)*((_QWORD *)v103 + 2);
          v745 = (unsigned __int8 *)*((_QWORD *)v103 + 3);
          if (v108 != v745)
          {
            v747 = 0;
            v109 = (int32x4_t)vaddq_f32(v741, (float32x4_t)xmmword_2245F4D20);
            v110 = (int32x4_t)vaddq_f32(v741, (float32x4_t)xmmword_2245F4D30);
            v111 = (int32x4_t)vaddq_f32(v741, (float32x4_t)xmmword_2245F4D40);
            v739 = (float32x4_t)vdupq_lane_s32(__len, 0);
            v724 = (float32x2_t)vdup_laneq_s32(v109, 2);
            v725 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v109.i8, 1);
            v722 = (float32x2_t)vdup_laneq_s32(v110, 2);
            v723 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v110.i8, 1);
            v728 = *(float32x2_t *)v110.i8;
            v729 = *(float32x2_t *)v109.i8;
            v720 = (float32x2_t)vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL).u64[0];
            v721 = vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL);
            v718 = (float32x2_t)vdup_laneq_s32(v111, 2);
            v719 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v111.i8, 1);
            v726 = (int32x4_t)vaddq_f32(v741, (float32x4_t)xmmword_2245F4D50);
            v727 = *(float32x2_t *)v111.i8;
            v717 = (float32x2_t)vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL).u64[0];
            v715 = (float32x2_t)vdup_laneq_s32(v726, 2);
            v716 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v726.i8, 1);
            v714 = (float32x2_t)vextq_s8((int8x16_t)v726, (int8x16_t)v726, 8uLL).u64[0];
            while (1)
            {
              v112 = sub_223340F28(a1, (uint64_t)v108);
              if (v112)
                break;
              sub_2233B6A90(&v782);
              if (**(int **)(v782 + 56) <= 5)
              {
                v195 = *(unsigned __int8 *)(v782 + 72);
                v196 = sub_22322F254(v782, "OSLogSurrogateAppender", 1, 0);
                v197 = v196;
                _ZF = !v195 && v196 == 0;
                if (!_ZF)
                {
                  *(_QWORD *)v803 = &v782;
                  *(std::chrono::steady_clock::time_point *)&v803[8] = std::chrono::steady_clock::now();
                  *(std::chrono::system_clock::time_point *)&v803[16] = std::chrono::system_clock::now();
                  *(_DWORD *)&v803[24] = 5;
                  v804.i64[0] = (uint64_t)"unknown file";
                  v804.i32[2] = 179;
                  v805 = "unknown function";
                  v806 = 0;
                  v807 = 0;
                  sub_2245664AC(v108, __s);
                  v199 = **(_QWORD **)v803;
                  if (*(char *)(**(_QWORD **)v803 + 39) < 0)
                  {
                    v200 = *(_QWORD *)(v199 + 24);
                    categorya = *(char **)(v199 + 16);
                  }
                  else
                  {
                    v200 = *(unsigned __int8 *)(**(_QWORD **)v803 + 39);
                    categorya = (char *)(**(_QWORD **)v803 + 16);
                  }
                  v736 = v197;
                  v734 = v195;
                  v202 = atomic_load((unsigned __int8 *)&qword_255788F58);
                  v730 = **(_QWORD **)v803 + 16;
                  if ((v202 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
                  {
                    sub_224568628((uint64_t)v809);
                    sub_223199C58("com.apple.cv3d", (unint64_t)v809, &xmmword_255788F40);
                    if ((_BYTE)v810 && (v809[23] & 0x80000000) != 0)
                      operator delete(*(void **)v809);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                    __cxa_guard_release(&qword_255788F58);
                  }
                  if (byte_255788F57 >= 0)
                    v203 = (const char *)&xmmword_255788F40;
                  else
                    v203 = (const char *)xmmword_255788F40;
                  if (byte_255788F57 >= 0)
                    v204 = byte_255788F57;
                  else
                    v204 = *((_QWORD *)&xmmword_255788F40 + 1);
                  *(_QWORD *)object = os_log_create(v203, categorya);
                  if (v204 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  __src = v203;
                  if (v204 >= 0x17)
                  {
                    v731 = v199;
                    v206 = v200;
                    v207 = (v204 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v204 | 7) != 0x17)
                      v207 = v204 | 7;
                    v208 = v207 + 1;
                    v205 = operator new(v207 + 1);
                    *(_QWORD *)&object[24] = v208 | 0x8000000000000000;
                    *(_QWORD *)&object[8] = v205;
                    *(_QWORD *)&object[16] = v204;
                    v200 = v206;
                    v199 = v731;
                  }
                  else
                  {
                    object[31] = v204;
                    v205 = &object[8];
                    if (!v204)
                    {
LABEL_161:
                      v205[v204] = 0;
                      object[32] = 1;
                      if (v200 > 0x7FFFFFFFFFFFFFF7)
                        sub_22316DBC0();
                      if (v200 >= 0x17)
                      {
                        v211 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v200 | 7) != 0x17)
                          v211 = v200 | 7;
                        v212 = v211 + 1;
                        v209 = operator new(v211 + 1);
                        v790.i64[1] = v212 | 0x8000000000000000;
                        *(_QWORD *)&object[40] = v209;
                        v790.i64[0] = v200;
                        v210 = v734;
                      }
                      else
                      {
                        v790.i8[15] = v200;
                        v209 = &object[40];
                        v210 = v734;
                        if (!v200)
                        {
LABEL_169:
                          v209[v200] = 0;
                          v791 = 1;
                          v213 = *(NSObject **)object;
                          if (v790.i8[15] < 0)
                            operator delete(*(void **)&object[40]);
                          if (object[32] && (object[31] & 0x80000000) != 0)
                            operator delete(*(void **)&object[8]);
                          if (*(_QWORD *)object)
                            os_release(*(void **)object);
                          if (v736 && *(_QWORD *)(v736 + 24))
                          {
                            v214 = _os_log_pack_size();
                            a3 = v756;
                            v215 = operator new(v214, (std::align_val_t)8uLL);
                            v216 = (_QWORD *)operator new();
                            *v216 = &off_24EC1F7F0;
                            v216[1] = 0;
                            v216[2] = 0;
                            v216[3] = v215;
                            *(_QWORD *)v809 = v215;
                            *(_QWORD *)&v809[8] = v215;
                            *(_QWORD *)&v809[16] = v216;
                            v810 = 0;
                            v811 = 0;
                            v217 = strlen(__s);
                            if (v217 > 0x7FFFFFFFFFFFFFF7)
                              sub_22316DBC0();
                            v218 = v217;
                            v732 = v199;
                            if (v217 >= 0x17)
                            {
                              v224 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v217 | 7) != 0x17)
                                v224 = v217 | 7;
                              v225 = v224 + 1;
                              v219 = (uint64_t *)operator new(v224 + 1);
                              *((_QWORD *)&v788 + 1) = v225 | 0x8000000000000000;
                              v787 = v219;
                              *(_QWORD *)&v788 = v218;
                              a3 = v756;
                            }
                            else
                            {
                              HIBYTE(v788) = v217;
                              v219 = (uint64_t *)&v787;
                              if (!v217)
                                goto LABEL_196;
                            }
                            memcpy(v219, __s, v218);
LABEL_196:
                            *((_BYTE *)v219 + v218) = 0;
                            v226 = (uint64_t)v787;
                            v808[0] = v788;
                            *(_QWORD *)((char *)v808 + 7) = *(_QWORD *)((char *)&v788 + 7);
                            v227 = HIBYTE(v788);
                            v228 = (char *)operator new(0x38uLL);
                            *((_QWORD *)v228 + 1) = 0;
                            *((_QWORD *)v228 + 2) = 0;
                            *((_QWORD *)v228 + 3) = off_24EC1FA48;
                            *(_QWORD *)v228 = &off_24EC1F9F8;
                            v229 = v808[0];
                            *((_QWORD *)v228 + 4) = v226;
                            *((_QWORD *)v228 + 5) = v229;
                            *(_QWORD *)(v228 + 47) = *(_QWORD *)((char *)v808 + 7);
                            v228[55] = v227;
                            v808[0] = 0;
                            *(_QWORD *)((char *)v808 + 7) = 0;
                            v230 = v811;
                            v810 = v228 + 24;
                            v811 = (std::__shared_weak_count *)v228;
                            if (v230)
                            {
                              p_shared_owners = (unint64_t *)&v230->__shared_owners_;
                              do
                                v232 = __ldaxr(p_shared_owners);
                              while (__stlxr(v232 - 1, p_shared_owners));
                              if (!v232)
                              {
                                ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                                std::__shared_weak_count::__release_weak(v230);
                              }
                            }
                            *(_OWORD *)object = *(_OWORD *)v809;
                            v233 = (float32x2_t)v810;
                            *(_QWORD *)&object[16] = *(_QWORD *)&v809[16];
                            if (*(_QWORD *)&v809[16])
                            {
                              v234 = (unint64_t *)(*(_QWORD *)&v809[16] + 8);
                              do
                                v235 = __ldxr(v234);
                              while (__stxr(v235 + 1, v234));
                            }
                            v236 = v811;
                            *(float32x2_t *)&object[24] = v233;
                            *(_QWORD *)&object[32] = v811;
                            if (v811)
                            {
                              v237 = (unint64_t *)&v811->__shared_owners_;
                              do
                                v238 = __ldxr(v237);
                              while (__stxr(v238 + 1, v237));
                              *(float32x2_t *)&object[40] = v233;
                              do
                                v239 = __ldaxr(v237);
                              while (__stlxr(v239 - 1, v237));
                              if (!v239)
                              {
                                ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                                std::__shared_weak_count::__release_weak(v236);
                              }
                            }
                            else
                            {
                              *(float32x2_t *)&object[40] = v233;
                            }
                            v240 = *(std::__shared_weak_count **)&v809[16];
                            if (*(_QWORD *)&v809[16])
                            {
                              v241 = (unint64_t *)(*(_QWORD *)&v809[16] + 8);
                              do
                                v242 = __ldaxr(v241);
                              while (__stlxr(v242 - 1, v241));
                              if (!v242)
                              {
                                ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                                std::__shared_weak_count::__release_weak(v240);
                              }
                            }
                            v243 = *(_QWORD *)object;
                            if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                              v244 = *(_QWORD *)&object[40] + 8;
                            else
                              v244 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                            v245 = _os_log_pack_fill();
                            *(_DWORD *)v245 = 68157954;
                            *(_DWORD *)(v245 + 4) = 13;
                            *(_WORD *)(v245 + 8) = 2080;
                            *(_QWORD *)(v245 + 10) = v244;
                            v246 = operator new();
                            v247 = *(unsigned __int8 *)(v732 + 39);
                            v248 = v730;
                            if ((v247 & 0x80u) != 0)
                            {
                              v248 = *(_QWORD *)(v732 + 16);
                              v247 = *(_QWORD *)(v732 + 24);
                            }
                            *(_QWORD *)v246 = v243;
                            *(_OWORD *)(v246 + 8) = *(_OWORD *)&object[8];
                            *(_QWORD *)&object[8] = 0;
                            *(_QWORD *)&object[16] = 0;
                            *(_OWORD *)(v246 + 24) = *(_OWORD *)&object[24];
                            *(_QWORD *)&object[24] = 0;
                            *(_QWORD *)&object[32] = 0;
                            *(_QWORD *)(v246 + 40) = v248;
                            *(_QWORD *)(v246 + 48) = v247;
                            *(_BYTE *)(v246 + 56) = 16;
                            v787 = 0;
                            *(_QWORD *)v809 = v246;
                            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v736 + 24) + 40))(*(_QWORD *)(v736 + 24), v809);
                            v16 = v760;
                            v249 = *(_QWORD *)v809;
                            *(_QWORD *)v809 = 0;
                            if (v249)
                            {
                              v250 = *(std::__shared_weak_count **)(v249 + 32);
                              if (v250)
                              {
                                v251 = (unint64_t *)&v250->__shared_owners_;
                                do
                                  v252 = __ldaxr(v251);
                                while (__stlxr(v252 - 1, v251));
                                if (!v252)
                                {
                                  ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                                  std::__shared_weak_count::__release_weak(v250);
                                }
                              }
                              v253 = *(std::__shared_weak_count **)(v249 + 16);
                              if (v253)
                              {
                                v254 = (unint64_t *)&v253->__shared_owners_;
                                do
                                  v255 = __ldaxr(v254);
                                while (__stlxr(v255 - 1, v254));
                                if (!v255)
                                {
                                  ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                                  std::__shared_weak_count::__release_weak(v253);
                                }
                              }
                              MEMORY[0x227684CE8](v249, 0x10F0C40B62ED6C6);
                              v256 = (uint64_t)v787;
                              v787 = 0;
                              if (v256)
                              {
                                v257 = *(std::__shared_weak_count **)(v256 + 32);
                                if (v257)
                                {
                                  v258 = (unint64_t *)&v257->__shared_owners_;
                                  do
                                    v259 = __ldaxr(v258);
                                  while (__stlxr(v259 - 1, v258));
                                  if (!v259)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                                    std::__shared_weak_count::__release_weak(v257);
                                  }
                                }
                                v260 = *(std::__shared_weak_count **)(v256 + 16);
                                if (v260)
                                {
                                  v261 = (unint64_t *)&v260->__shared_owners_;
                                  do
                                    v262 = __ldaxr(v261);
                                  while (__stlxr(v262 - 1, v261));
                                  if (!v262)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                                    std::__shared_weak_count::__release_weak(v260);
                                  }
                                }
                                MEMORY[0x227684CE8](v256, 0x10F0C40B62ED6C6);
                              }
                            }
                            v263 = *(std::__shared_weak_count **)&object[32];
                            v210 = v734;
                            if (*(_QWORD *)&object[32])
                            {
                              v264 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                              do
                                v265 = __ldaxr(v264);
                              while (__stlxr(v265 - 1, v264));
                              if (!v265)
                              {
                                ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                                std::__shared_weak_count::__release_weak(v263);
                              }
                            }
                            v266 = *(std::__shared_weak_count **)&object[16];
                            if (*(_QWORD *)&object[16])
                            {
                              v267 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                              do
                                v268 = __ldaxr(v267);
                              while (__stlxr(v268 - 1, v267));
                              if (!v268)
                              {
                                ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                                std::__shared_weak_count::__release_weak(v266);
                              }
                            }
                          }
                          else
                          {
                            os_log_type_enabled(v213, OS_LOG_TYPE_ERROR);
                            *(_QWORD *)object = 0xD04100202;
                            *(_WORD *)&object[8] = 2080;
                            *(_QWORD *)&object[10] = __s;
                            v220 = (void *)_os_log_send_and_compose_impl();
                            a3 = v756;
                            v16 = v760;
                            if (v220)
                              free(v220);
                          }
                          if (v210)
                          {
                            sub_2245664AC(v108, object);
                            sub_22322C138((uint64_t)v803, "Keyframe %.13s in lookup structure not in state", object);
                            sub_223182C08((uint64_t)v803);
                          }
                          sub_223182C08((uint64_t)v803);
                          v269 = v807;
                          if (v807)
                          {
                            v270 = (unint64_t *)&v807->__shared_owners_;
                            do
                              v271 = __ldaxr(v270);
                            while (__stlxr(v271 - 1, v270));
                            if (!v271)
                            {
                              ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
                              std::__shared_weak_count::__release_weak(v269);
                            }
                          }
                          goto LABEL_96;
                        }
                      }
                      memmove(v209, categorya, v200);
                      goto LABEL_169;
                    }
                  }
                  memmove(v205, __src, v204);
                  goto LABEL_161;
                }
              }
LABEL_96:
              v108 += 20;
              if (v108 == v745)
                goto LABEL_312;
            }
            v117 = v112[4];
            v113.i64[0] = *(_QWORD *)(v117 + 120);
            v113.i32[2] = *(_DWORD *)(v117 + 128);
            v114.i64[0] = *(_QWORD *)(v117 + 136);
            v114.i32[2] = *(_DWORD *)(v117 + 144);
            LODWORD(v115) = *(_DWORD *)(v117 + 160);
            v118.i64[0] = vzip1q_s32(v113, v114).u64[0];
            v116.i64[0] = *(_QWORD *)(v117 + 168);
            v116.i32[2] = *(_DWORD *)(v117 + 176);
            v119 = (int8x16_t)vnegq_f32(v116);
            v120 = (int8x16_t)vtrn2q_s32(v113, v114);
            v120.i32[2] = HIDWORD(*(_QWORD *)(v117 + 152));
            v121 = vzip2q_s32(v113, v114);
            v122 = v121;
            v122.i32[2] = LODWORD(v115);
            v123 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v118.f32, *(float *)v119.i32), *(float32x2_t *)v120.i8, *(float32x2_t *)v116.f32, 1), *(float32x2_t *)v121.i8, v116, 2);
            _Q0 = (int8x16_t)vdupq_laneq_s32(v122, 2);
            v125 = vmls_lane_f32(vmul_f32(*(float32x2_t *)(v117 + 152), *(float32x2_t *)v119.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v117 + 152), 1), *(float32x2_t *)v116.f32, 1);
            v118.i64[1] = *(_QWORD *)(v117 + 152);
            v126 = (float32x2_t)vextq_s8(v119, v119, 8uLL).u64[0];
            HIDWORD(v127) = 0;
            LODWORD(v127) = vdupq_lane_s32(*(int32x2_t *)&v120, 0).i32[3];
            *(_QWORD *)((char *)&v127 + 4) = vextq_s8(v120, _Q0, 4uLL).u64[0];
            v122.i64[1] = _Q0.u32[0];
            *(_OWORD *)&v803[16] = v127;
            v804 = v122;
            *(float32x4_t *)v803 = v118;
            v805 = (const char *)v123;
            LODWORD(v806) = vmla_f32(v125, v126, *(float32x2_t *)&v115).u32[0];
            HIDWORD(v806) = 1065353216;
            *(_QWORD *)v809 = 0;
            __asm { FMOV            V0.2S, #1.0 }
            *(_QWORD *)__s = _Q0.i64[0];
            _Q0.i32[0] = 1036831949;
            sub_223EA0B54((uint64_t *)object, (float32x2_t *)v803, v117 + 24, (float *)v809, (float *)__s, (float32x4_t)_Q0, 10.0, *(double *)&v126, v115, v118, *(double *)&v127, *(double *)v119.i64);
            if (!sub_223EA4E3C((uint64_t)object, (uint64_t)&v783, v128, v129, v130, v131, v132, v133, v134))
            {
              v201 = 9;
              goto LABEL_132;
            }
            v135 = *(float32x4_t *)(v117 + 120);
            v136 = *(float32x4_t *)(v117 + 136);
            v137 = *(float32x4_t *)(v117 + 152);
            v138 = *(float32x4_t *)(v117 + 168);
            v139 = vmlaq_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v135, COERCE_FLOAT(*(_QWORD *)(v20 + 40))), v136, *(float32x2_t *)(v20 + 40), 1), v137, *(float *)(v20 + 48)), (float32x4_t)0, v138);
            v140 = (int8x16_t)vmlaq_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v135, COERCE_FLOAT(*(_QWORD *)(v20 + 56))), v136, *(float32x2_t *)(v20 + 56), 1), v137, *(float *)(v20 + 64)), (float32x4_t)0, v138);
            v146.columns[1].i64[1] = v739.i64[1];
            v146.columns[2] = (simd_float3)vaddq_f32(v138, vmlaq_f32(vmlaq_f32(vmulq_n_f32(v135, v752.f32[0]), v750, v136), v739, v137));
            v141 = *(float32x2_t *)(v117 + 72);
            v135.i32[0] = *(_DWORD *)(v117 + 80);
            v136.i64[0] = *(_QWORD *)(v117 + 84);
            v137.i32[0] = *(_DWORD *)(v117 + 92);
            v138.i64[0] = *(_QWORD *)(v117 + 96);
            v12.i32[0] = *(_DWORD *)(v117 + 104);
            v142 = (float32x2_t)vextq_s8((int8x16_t)v139, (int8x16_t)v139, 8uLL).u64[0];
            *(float32x2_t *)v146.columns[0].f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v141, v139.f32[0]), *(float32x2_t *)v136.f32, *(float32x2_t *)v139.f32, 1), *(float32x2_t *)v138.f32, v139, 2);
            *(float32x2_t *)v146.columns[1].f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v139.f32), *(float32x2_t *)v137.f32, *(float32x2_t *)v139.f32, 1);
            *(float32x2_t *)v139.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v141, *(float *)v140.i32), *(float32x2_t *)v136.f32, *(float32x2_t *)v140.i8, 1), *(float32x2_t *)v138.f32, (float32x4_t)v140, 2);
            v143 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v140.i8), *(float32x2_t *)v137.f32, *(float32x2_t *)v140.i8, 1);
            v11 = vextq_s8(v140, v140, 8uLL);
            *(float32x2_t *)&v139.u32[2] = vmla_f32(v143, *(float32x2_t *)v11.i8, *(float32x2_t *)v12.i8);
            *(float32x2_t *)v144.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v141, v146.columns[2].f32[0]), *(float32x2_t *)v136.f32, *(float32x2_t *)v146.columns[2].f32, 1), *(float32x2_t *)v138.f32, (float32x4_t)v146.columns[2], 2);
            v144.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v146.columns[2].f32), *(float32x2_t *)v137.f32, *(float32x2_t *)v146.columns[2].f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v146.columns[2], (int8x16_t)v146.columns[2], 8uLL), *(float32x2_t *)v12.i8);
            *(float32x2_t *)v146.columns[1].f32 = vmla_f32(*(float32x2_t *)v146.columns[1].f32, v142, *(float32x2_t *)v12.i8);
            *(_QWORD *)v803 = v146.columns[0].i64[0];
            *(_DWORD *)&v803[8] = v146.columns[1].i32[0];
            *(_DWORD *)&v803[20] = v139.i32[2];
            *(_QWORD *)&v803[12] = v139.i64[0];
            v804.i32[0] = v144.i32[2];
            *(_QWORD *)&v803[24] = v144.i64[0];
            v146.columns[2] = (simd_float3)vextq_s8(vextq_s8((int8x16_t)v139, (int8x16_t)v139, 0xCuLL), (int8x16_t)v139, 8uLL);
            v145 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v144, v144), (int8x16_t)v144, 0xCuLL);
            v9 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v139, (int32x4_t)v139), (int8x16_t)v139, 0xCuLL);
            v10 = vextq_s8((int8x16_t)v144, (int8x16_t)v144, 0xCuLL);
            v7 = vextq_s8(v10, (int8x16_t)v144, 8uLL);
            v8 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)v146.columns[2], v145), (float32x4_t)v9, (float32x4_t)v7);
            *(float32x2_t *)v146.columns[2].f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v146.columns[0].f32, *(float32x2_t *)v8.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1), *(float32x2_t *)v146.columns[0].f32, 1);
            v146.columns[0] = (simd_float3)vextq_s8(v8, v8, 8uLL);
            *(float32x2_t *)v146.columns[2].f32 = vmla_f32(*(float32x2_t *)v146.columns[2].f32, *(float32x2_t *)v146.columns[0].f32, *(float32x2_t *)v146.columns[1].f32);
            if (v146.columns[2].f32[0] == 0.0)
              goto LABEL_130;
            v146.columns[0].f32[0] = 0.0 - v146.columns[2].f32[0];
            if (v146.columns[2].f32[0] >= 0.0)
              v146.columns[0].f32[0] = v146.columns[2].f32[0];
            v146.columns[1].i32[0] = 897988541;
            if (v146.columns[0].f32[0] <= 0.000001)
            {
LABEL_130:
              v201 = 9;
              goto LABEL_132;
            }
            category = (char *)v108;
            sub_22322BB84((uint64_t)v803, (uint64_t)v809, v146);
            v147 = *(float32x2_t *)(v117 + 120);
            v148.i32[0] = *(_DWORD *)(v117 + 128);
            v149 = *(float32x2_t *)(v117 + 136);
            v150.i32[0] = *(_DWORD *)(v117 + 144);
            v151 = *(float32x2_t *)(v117 + 152);
            v152.i32[0] = *(_DWORD *)(v117 + 160);
            v153.i32[1] = v724.i32[1];
            *(float32x2_t *)v154.f32 = vmla_f32(vmla_f32(vmul_n_f32(v147, v729.f32[0]), v725, v149), v724, v151);
            v155.i32[3] = v721.i32[3];
            *(float32x2_t *)&v154.u32[2] = vmla_f32(vmla_f32(vmul_f32(v148, v729), v725, v150), *(float32x2_t *)v721.i8, v152);
            v155.i64[0] = *(_QWORD *)(v117 + 168);
            v155.i32[2] = *(_DWORD *)(v117 + 176);
            v156 = (int8x16_t)vaddq_f32(v154, v155);
            v157 = *(float32x2_t *)(v117 + 72);
            v153.i32[0] = *(_DWORD *)(v117 + 80);
            v158 = *(float32x2_t *)(v117 + 84);
            v159.i32[0] = *(_DWORD *)(v117 + 92);
            v160 = *(float32x2_t *)(v117 + 96);
            v161.i32[0] = *(_DWORD *)(v117 + 104);
            *(float32x2_t *)v154.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v157, *(float *)v156.i32), v158, *(float32x2_t *)v156.i8, 1), v160, (float32x4_t)v156, 2);
            *(float32x2_t *)v162.i8 = vmla_f32(vmla_lane_f32(vmul_f32(v153, *(float32x2_t *)v156.i8), v159, *(float32x2_t *)v156.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL), v161);
            *(float32x2_t *)v156.i8 = vmla_f32(vmla_f32(vmul_n_f32(v147, v728.f32[0]), v723, v149), v722, v151);
            v156.u64[1] = (unint64_t)vmla_f32(vmla_f32(vmul_f32(v148, v728), v723, v150), v720, v152);
            v163 = (int8x16_t)vaddq_f32((float32x4_t)v156, v155);
            *(float32x2_t *)v156.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v157, *(float *)v163.i32), v158, *(float32x2_t *)v163.i8, 1), v160, (float32x4_t)v163, 2);
            v164 = vmla_f32(vmla_lane_f32(vmul_f32(v153, *(float32x2_t *)v163.i8), v159, *(float32x2_t *)v163.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v163, v163, 8uLL), v161);
            *(float32x2_t *)v163.i8 = vmla_f32(vmla_f32(vmul_n_f32(v147, v727.f32[0]), v719, v149), v718, v151);
            v163.u64[1] = (unint64_t)vmla_f32(vmla_f32(vmul_f32(v148, v727), v719, v150), v717, v152);
            v165 = (int8x16_t)vaddq_f32((float32x4_t)v163, v155);
            *(float32x2_t *)v163.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v157, *(float *)v165.i32), v158, *(float32x2_t *)v165.i8, 1), v160, (float32x4_t)v165, 2);
            *(float32x2_t *)v166.i8 = vmla_f32(vmla_lane_f32(vmul_f32(v153, *(float32x2_t *)v165.i8), v159, *(float32x2_t *)v165.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v165, v165, 8uLL), v161);
            *(float32x2_t *)v167.f32 = vmla_f32(vmla_f32(vmul_n_f32(v147, *(float *)v726.i32), v716, v149), v715, v151);
            *(float32x2_t *)&v167.u32[2] = vmla_f32(vmla_f32(vmul_f32(v148, *(float32x2_t *)v726.i8), v716, v150), v714, v152);
            v168 = (int8x16_t)vaddq_f32(v167, v155);
            v169 = (int32x2_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v157, *(float *)v168.i32), v158, *(float32x2_t *)v168.i8, 1), v160, (float32x4_t)v168, 2);
            v170 = vmla_lane_f32(vmul_f32(v153, *(float32x2_t *)v168.i8), v159, *(float32x2_t *)v168.i8, 1);
            v168.i64[0] = vextq_s8(v168, v168, 8uLL).u64[0];
            v171 = *(_DWORD *)(v117 + 112);
            v172 = *(_DWORD *)(v117 + 116);
            v166.u64[1] = (unint64_t)vmla_f32(v170, *(float32x2_t *)v168.i8, v161);
            *(float *)v168.i32 = (float)v171 + -1.0;
            v162.u64[1] = (unint64_t)v164;
            *(int32x2_t *)v173.f32 = vzip1_s32(*(int32x2_t *)v154.f32, *(int32x2_t *)v156.i8);
            v173.i64[1] = __PAIR64__(v169.u32[0], v163.u32[0]);
            v174 = (float32x4_t)vuzp1q_s32(v162, v166);
            v175 = (int8x16_t)vmaxnmq_f32(vdivq_f32(v173, v174), (float32x4_t)0);
            v176 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v168.i8, 0);
            *(int32x2_t *)v154.f32 = vzip2_s32(*(int32x2_t *)v154.f32, *(int32x2_t *)v156.i8);
            v154.i64[1] = __PAIR64__(v169.u32[1], vdup_lane_s32(*(int32x2_t *)v163.i8, 1).u32[0]);
            *(float *)v169.i32 = (float)v172 + -1.0;
            v177 = (int8x16_t)vdupq_lane_s32(v169, 0);
            v178 = (int8x16_t)vmaxnmq_f32(vdivq_f32(v154, v174), (float32x4_t)0);
            v179 = vcvtq_u32_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v176, (float32x4_t)v175), v175, v176));
            v180 = vcvtq_u32_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v177, (float32x4_t)v178), v178, v177));
            v181 = vminvq_u32(v179);
            v182 = vminvq_u32(v180);
            v183 = vmaxvq_u32(v179);
            v184 = vmaxvq_u32(v180);
            v185 = v171 - 1;
            v186 = v172 - 1;
            if (v181 >= v185)
              v181 = v185;
            if (v182 >= v186)
              v187 = v186;
            else
              v187 = v182;
            if (v181 >= v183)
              v188 = v185;
            else
              v188 = v183;
            if (v181 >= v183)
              v189 = 0;
            else
              v189 = v181;
            v735 = v189;
            if (v187 >= v184)
              v190 = v186;
            else
              v190 = v184;
            sub_2242A773C(v117, (uint64_t *)__s);
            if (v187 >= v184)
              v194 = 0;
            else
              v194 = v187;
            if ((v194 > v190) | v747 & 1)
            {
              v108 = (unsigned __int8 *)category;
              if ((v747 & 1) != 0)
              {
LABEL_190:
                v201 = 8;
                v747 = 1;
                goto LABEL_191;
              }
            }
            else
            {
              v108 = (unsigned __int8 *)category;
              if (v735 <= v188)
              {
                v191.i64[0] = *(_QWORD *)&v809[12];
                v191.i32[2] = *(_DWORD *)&v809[20];
                v192.i64[0] = (uint64_t)v810;
                v192.i32[2] = (int)v811;
                v7 = vextq_s8(*(int8x16_t *)v809, *(int8x16_t *)v809, 8uLL);
                v8.i64[0] = vextq_s8(v191, v191, 8uLL).u64[0];
                v9 = vextq_s8(v192, v192, 8uLL);
LABEL_186:
                *(float *)v10.i32 = (float)v194;
                v221 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 0);
                v222 = v735 * v801;
                v223 = v735;
                while (1)
                {
                  if (*((_DWORD *)category + 4) == *(unsigned __int8 *)(*(_QWORD *)__s + v194 * v802 + v222))
                  {
                    v193.f32[0] = (float)v223;
                    v193 = vdiv_f32(vadd_f32((float32x2_t)v810, vmla_f32(vmul_n_f32(*(float32x2_t *)v809, (float)v223), v221, *(float32x2_t *)&v809[12])), (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v9.i8, vmla_f32(vmul_f32(*(float32x2_t *)v7.i8, v193), *(float32x2_t *)v10.i8, *(float32x2_t *)v8.i8)), 0));
                    if (vmla_lane_f32(vmul_f32(v193, v193), (float32x2_t)vdup_lane_s32((int32x2_t)v193, 1), v193, 1).f32[0] < 0.25)
                      goto LABEL_190;
                  }
                  ++v223;
                  v222 += v801;
                  if (v223 > v188)
                  {
                    v747 = 0;
                    v201 = 0;
                    if (++v194 > v190)
                      goto LABEL_191;
                    goto LABEL_186;
                  }
                }
              }
            }
            v747 = 0;
            v201 = 0;
LABEL_191:
            a3 = v756;
            v16 = v760;
LABEL_132:
            if (__p)
            {
              v799 = __p;
              operator delete(__p);
            }
            if (v796)
            {
              v797 = v796;
              operator delete(v796);
            }
            if (v794)
            {
              v795 = v794;
              operator delete(v794);
            }
            if (v792)
            {
              v793 = v792;
              operator delete(v792);
            }
            if (v201 != 9 && v201)
            {
LABEL_312:
              v94 = v747;
              goto LABEL_384;
            }
            goto LABEL_96;
          }
LABEL_383:
          v94 = 0;
LABEL_384:
          v342 = v16;
          v343 = v94;
          *(_OWORD *)object = *(_OWORD *)v20;
          v344 = *(_OWORD *)(v20 + 248);
          *(_OWORD *)&object[16] = *(_OWORD *)(v20 + 232);
          *(_OWORD *)&object[32] = v344;
          v790 = *(int8x16_t *)(v20 + 264);
          if (v767 >= v781)
          {
            v347 = (char *)v779;
            v348 = 0xCCCCCCCCCCCCCCCDLL * ((v767 - (_BYTE *)v779) >> 4);
            v349 = v348 + 1;
            if (v348 + 1 > 0x333333333333333)
              sub_22316E078();
            if (0x999999999999999ALL * ((v781 - (_BYTE *)v779) >> 4) > v349)
              v349 = 0x999999999999999ALL * ((v781 - (_BYTE *)v779) >> 4);
            if (0xCCCCCCCCCCCCCCCDLL * ((v781 - (_BYTE *)v779) >> 4) >= 0x199999999999999)
              v350 = 0x333333333333333;
            else
              v350 = v349;
            if (v350)
            {
              if (v350 > 0x333333333333333)
                sub_223174E94();
              v351 = (char *)operator new(80 * v350);
            }
            else
            {
              v351 = 0;
            }
            v352 = &v351[16 * ((v767 - (_BYTE *)v779) >> 4)];
            v353 = *(_OWORD *)&object[16];
            *(_OWORD *)v352 = *(_OWORD *)object;
            *((_OWORD *)v352 + 1) = v353;
            DWORD1(v6) = *(_DWORD *)&object[36];
            v354 = v790;
            *((_OWORD *)v352 + 2) = *(_OWORD *)&object[32];
            *((int8x16_t *)v352 + 3) = v354;
            *((float *)v352 + 16) = v41;
            *((_DWORD *)v352 + 17) = v343;
            *((float *)v352 + 18) = v77;
            if (v767 == v347)
            {
              v355 = &v351[80 * v348];
              v359 = v767;
            }
            else
            {
              v355 = &v351[80 * v348];
              v356 = v767;
              do
              {
                *((_OWORD *)v355 - 5) = *((_OWORD *)v356 - 5);
                v6 = *((_OWORD *)v356 - 4);
                v357 = *((_OWORD *)v356 - 3);
                v358 = *((_OWORD *)v356 - 2);
                v7 = *(int8x16_t *)(v356 - 20);
                *(int8x16_t *)(v355 - 20) = v7;
                *((_OWORD *)v355 - 3) = v357;
                *((_OWORD *)v355 - 2) = v358;
                *((_OWORD *)v355 - 4) = v6;
                v355 -= 80;
                v356 -= 80;
              }
              while (v356 != v347);
              v359 = v347;
            }
            v346 = (__n128 *)(v352 + 80);
            v779 = v355;
            v781 = &v351[80 * v350];
            if (v359)
              operator delete(v359);
          }
          else
          {
            v6 = *(_OWORD *)object;
            v345 = *(_OWORD *)&object[16];
            v7 = v790;
            *((_OWORD *)v767 + 2) = *(_OWORD *)&object[32];
            *((int8x16_t *)v767 + 3) = v7;
            *(_OWORD *)v767 = v6;
            *((_OWORD *)v767 + 1) = v345;
            *((float *)v767 + 16) = v41;
            *((_DWORD *)v767 + 17) = v343;
            v346 = (__n128 *)(v767 + 80);
            *((float *)v767 + 18) = v77;
          }
          v14 = v751;
          v13 = v752;
          v18 = v749;
          v17 = (int32x4_t)v750;
          v780 = v346;
          v767 = (char *)v346;
          v16 = v342;
          goto LABEL_404;
        }
      }
      sub_2233B6A90(&v782);
      if (**(int **)(v782 + 56) > 5)
        goto LABEL_383;
      v272 = *(unsigned __int8 *)(v782 + 72);
      v273 = sub_22322F254(v782, "OSLogSurrogateAppender", 1, 0);
      v274 = v273;
      if (!v272 && !v273)
        goto LABEL_383;
      *(_QWORD *)v803 = &v782;
      *(std::chrono::steady_clock::time_point *)&v803[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v803[16] = std::chrono::system_clock::now();
      *(_DWORD *)&v803[24] = 5;
      v804.i64[0] = (uint64_t)"unknown file";
      v804.i32[2] = 171;
      v805 = "unknown function";
      v806 = 0;
      v807 = 0;
      sub_2245664AC((unsigned __int8 *)v20, __s);
      v275 = **(_QWORD **)v803;
      v742 = **(_QWORD **)v803;
      v740 = **(_QWORD **)v803 + 16;
      if (*(char *)(**(_QWORD **)v803 + 39) < 0)
      {
        v761 = *(char **)(v275 + 16);
        __lena = *(_QWORD *)(v275 + 24);
      }
      else
      {
        __lena = *(unsigned __int8 *)(**(_QWORD **)v803 + 39);
        v761 = (char *)(**(_QWORD **)v803 + 16);
      }
      v757 = a3;
      v276 = atomic_load((unsigned __int8 *)&qword_255788F58);
      v746 = v272;
      v748 = v274;
      if ((v276 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v809);
        sub_223199C58("com.apple.cv3d", (unint64_t)v809, &xmmword_255788F40);
        if ((_BYTE)v810 && (v809[23] & 0x80000000) != 0)
          operator delete(*(void **)v809);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v277 = (const char *)&xmmword_255788F40;
      else
        v277 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v278 = byte_255788F57;
      else
        v278 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v277, v761);
      if (v278 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v278 >= 0x17)
      {
        v280 = (v278 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v278 | 7) != 0x17)
          v280 = v278 | 7;
        v281 = v280 + 1;
        v279 = operator new(v280 + 1);
        *(_QWORD *)&object[24] = v281 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v279;
        *(_QWORD *)&object[16] = v278;
      }
      else
      {
        object[31] = v278;
        v279 = &object[8];
        if (!v278)
        {
LABEL_289:
          v279[v278] = 0;
          object[32] = 1;
          if (__lena > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (__lena >= 0x17)
          {
            v284 = (__lena & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__lena | 7) != 0x17)
              v284 = __lena | 7;
            v285 = v284 + 1;
            v282 = operator new(v284 + 1);
            v790.i64[1] = v285 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v282;
            v790.i64[0] = __lena;
            v283 = v746;
          }
          else
          {
            v790.i8[15] = __lena;
            v282 = &object[40];
            v283 = v746;
            if (!__lena)
            {
LABEL_297:
              v282[__lena] = 0;
              v791 = 1;
              v286 = *(NSObject **)object;
              if (v790.i8[15] < 0)
                operator delete(*(void **)&object[40]);
              if (object[32] && (object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              v762 = v16;
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (!v748 || !*(_QWORD *)(v748 + 24))
              {
                os_log_type_enabled(v286, OS_LOG_TYPE_ERROR);
                *(_QWORD *)object = 0xD04100202;
                *(_WORD *)&object[8] = 2080;
                *(_QWORD *)&object[10] = __s;
                v293 = (void *)_os_log_send_and_compose_impl();
                a3 = v757;
                if (v293)
                  free(v293);
                goto LABEL_376;
              }
              v287 = _os_log_pack_size();
              v288 = operator new(v287, (std::align_val_t)8uLL);
              v289 = (_QWORD *)operator new();
              *v289 = &off_24EC1F7F0;
              v289[1] = 0;
              v289[2] = 0;
              v289[3] = v288;
              *(_QWORD *)v809 = v288;
              *(_QWORD *)&v809[8] = v288;
              *(_QWORD *)&v809[16] = v289;
              v810 = 0;
              v811 = 0;
              v290 = strlen(__s);
              if (v290 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v291 = v290;
              if (v290 >= 0x17)
              {
                v294 = (v290 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v290 | 7) != 0x17)
                  v294 = v290 | 7;
                v295 = v294 + 1;
                v292 = (uint64_t *)operator new(v294 + 1);
                *((_QWORD *)&v788 + 1) = v295 | 0x8000000000000000;
                v787 = v292;
                *(_QWORD *)&v788 = v291;
              }
              else
              {
                HIBYTE(v788) = v290;
                v292 = (uint64_t *)&v787;
                if (!v290)
                {
LABEL_317:
                  *((_BYTE *)v292 + v291) = 0;
                  v296 = (uint64_t)v787;
                  v808[0] = v788;
                  *(_QWORD *)((char *)v808 + 7) = *(_QWORD *)((char *)&v788 + 7);
                  v297 = HIBYTE(v788);
                  v298 = (char *)operator new(0x38uLL);
                  *((_QWORD *)v298 + 1) = 0;
                  *((_QWORD *)v298 + 2) = 0;
                  *((_QWORD *)v298 + 3) = off_24EC1FA48;
                  *(_QWORD *)v298 = &off_24EC1F9F8;
                  v299 = v808[0];
                  *((_QWORD *)v298 + 4) = v296;
                  *((_QWORD *)v298 + 5) = v299;
                  *(_QWORD *)(v298 + 47) = *(_QWORD *)((char *)v808 + 7);
                  v298[55] = v297;
                  v808[0] = 0;
                  *(_QWORD *)((char *)v808 + 7) = 0;
                  v300 = v811;
                  v810 = v298 + 24;
                  v811 = (std::__shared_weak_count *)v298;
                  a3 = v757;
                  if (v300)
                  {
                    v301 = (unint64_t *)&v300->__shared_owners_;
                    do
                      v302 = __ldaxr(v301);
                    while (__stlxr(v302 - 1, v301));
                    if (!v302)
                    {
                      ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
                      std::__shared_weak_count::__release_weak(v300);
                    }
                  }
                  *(_OWORD *)object = *(_OWORD *)v809;
                  v303 = (float32x2_t)v810;
                  *(_QWORD *)&object[16] = *(_QWORD *)&v809[16];
                  if (*(_QWORD *)&v809[16])
                  {
                    v304 = (unint64_t *)(*(_QWORD *)&v809[16] + 8);
                    do
                      v305 = __ldxr(v304);
                    while (__stxr(v305 + 1, v304));
                  }
                  v306 = v811;
                  *(float32x2_t *)&object[24] = v303;
                  *(_QWORD *)&object[32] = v811;
                  if (v811)
                  {
                    v307 = (unint64_t *)&v811->__shared_owners_;
                    do
                      v308 = __ldxr(v307);
                    while (__stxr(v308 + 1, v307));
                    *(float32x2_t *)&object[40] = v303;
                    do
                      v309 = __ldaxr(v307);
                    while (__stlxr(v309 - 1, v307));
                    if (!v309)
                    {
                      ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                      std::__shared_weak_count::__release_weak(v306);
                    }
                  }
                  else
                  {
                    *(float32x2_t *)&object[40] = v303;
                  }
                  v310 = *(std::__shared_weak_count **)&v809[16];
                  if (*(_QWORD *)&v809[16])
                  {
                    v311 = (unint64_t *)(*(_QWORD *)&v809[16] + 8);
                    do
                      v312 = __ldaxr(v311);
                    while (__stlxr(v312 - 1, v311));
                    if (!v312)
                    {
                      ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                      std::__shared_weak_count::__release_weak(v310);
                    }
                  }
                  v313 = *(_QWORD *)object;
                  if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                    v314 = *(_QWORD *)&object[40] + 8;
                  else
                    v314 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                  v315 = _os_log_pack_fill();
                  *(_DWORD *)v315 = 68157954;
                  *(_DWORD *)(v315 + 4) = 13;
                  *(_WORD *)(v315 + 8) = 2080;
                  *(_QWORD *)(v315 + 10) = v314;
                  v316 = operator new();
                  v317 = *(unsigned __int8 *)(v742 + 39);
                  v318 = v740;
                  if ((v317 & 0x80u) != 0)
                  {
                    v318 = *(_QWORD *)(v742 + 16);
                    v317 = *(_QWORD *)(v742 + 24);
                  }
                  *(_QWORD *)v316 = v313;
                  *(_OWORD *)(v316 + 8) = *(_OWORD *)&object[8];
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v316 + 24) = *(_OWORD *)&object[24];
                  *(_QWORD *)&object[24] = 0;
                  *(_QWORD *)&object[32] = 0;
                  *(_QWORD *)(v316 + 40) = v318;
                  *(_QWORD *)(v316 + 48) = v317;
                  *(_BYTE *)(v316 + 56) = 16;
                  v787 = 0;
                  *(_QWORD *)v809 = v316;
                  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v748 + 24) + 40))(*(_QWORD *)(v748 + 24), v809);
                  v16 = v762;
                  v319 = *(_QWORD *)v809;
                  *(_QWORD *)v809 = 0;
                  if (v319)
                  {
                    v320 = *(std::__shared_weak_count **)(v319 + 32);
                    if (v320)
                    {
                      v321 = (unint64_t *)&v320->__shared_owners_;
                      do
                        v322 = __ldaxr(v321);
                      while (__stlxr(v322 - 1, v321));
                      if (!v322)
                      {
                        ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
                        std::__shared_weak_count::__release_weak(v320);
                      }
                    }
                    v323 = *(std::__shared_weak_count **)(v319 + 16);
                    if (v323)
                    {
                      v324 = (unint64_t *)&v323->__shared_owners_;
                      do
                        v325 = __ldaxr(v324);
                      while (__stlxr(v325 - 1, v324));
                      if (!v325)
                      {
                        ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
                        std::__shared_weak_count::__release_weak(v323);
                      }
                    }
                    MEMORY[0x227684CE8](v319, 0x10F0C40B62ED6C6);
                    v326 = (uint64_t)v787;
                    v787 = 0;
                    if (v326)
                    {
                      v327 = *(std::__shared_weak_count **)(v326 + 32);
                      if (v327)
                      {
                        v328 = (unint64_t *)&v327->__shared_owners_;
                        do
                          v329 = __ldaxr(v328);
                        while (__stlxr(v329 - 1, v328));
                        if (!v329)
                        {
                          ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
                          std::__shared_weak_count::__release_weak(v327);
                        }
                      }
                      v330 = *(std::__shared_weak_count **)(v326 + 16);
                      if (v330)
                      {
                        v331 = (unint64_t *)&v330->__shared_owners_;
                        do
                          v332 = __ldaxr(v331);
                        while (__stlxr(v332 - 1, v331));
                        if (!v332)
                        {
                          ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
                          std::__shared_weak_count::__release_weak(v330);
                        }
                      }
                      MEMORY[0x227684CE8](v326, 0x10F0C40B62ED6C6);
                    }
                  }
                  v333 = *(std::__shared_weak_count **)&object[32];
                  v283 = v746;
                  if (*(_QWORD *)&object[32])
                  {
                    v334 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                    do
                      v335 = __ldaxr(v334);
                    while (__stlxr(v335 - 1, v334));
                    if (!v335)
                    {
                      ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
                      std::__shared_weak_count::__release_weak(v333);
                    }
                  }
                  v336 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v337 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v338 = __ldaxr(v337);
                    while (__stlxr(v338 - 1, v337));
                    if (!v338)
                    {
                      ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
                      std::__shared_weak_count::__release_weak(v336);
                    }
                  }
LABEL_376:
                  if (v283)
                  {
                    sub_2245664AC((unsigned __int8 *)v20, object);
                    sub_22322C138((uint64_t)v803, "Global plane not found in lookup structure %.13s", object);
                    sub_223182C08((uint64_t)v803);
                  }
                  sub_223182C08((uint64_t)v803);
                  v339 = v807;
                  if (v807)
                  {
                    v340 = (unint64_t *)&v807->__shared_owners_;
                    do
                      v341 = __ldaxr(v340);
                    while (__stlxr(v341 - 1, v340));
                    if (!v341)
                    {
                      ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
                      std::__shared_weak_count::__release_weak(v339);
                    }
                  }
                  goto LABEL_383;
                }
              }
              memcpy(v292, __s, v291);
              goto LABEL_317;
            }
          }
          memmove(v282, v761, __lena);
          goto LABEL_297;
        }
      }
      memmove(v279, v277, v278);
      goto LABEL_289;
    }
    *(float32x2_t *)v8.i8 = vsub_f32(*(float32x2_t *)v8.i8, *v21);
    *(float32x2_t *)v10.i8 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1), *(float32x2_t *)v8.i8, 1);
    v77 = sqrtf(*(float *)v10.i32);
    if (v77 <= 5.0)
      goto LABEL_73;
LABEL_60:
    ++v771;
LABEL_404:
    v19 = 1.0;
LABEL_24:
    v39 = (_QWORD *)v15[1];
    if (v39)
    {
      do
      {
        v40 = v39;
        v39 = (_QWORD *)*v39;
      }
      while (v39);
    }
    else
    {
      do
      {
        v40 = (_QWORD *)v15[2];
        _ZF = *v40 == (_QWORD)v15;
        v15 = v40;
      }
      while (!_ZF);
    }
    v15 = v40;
  }
  while (v40 != a1 + 6);
  v763 = (int)v16;
  v360 = v779;
LABEL_412:
  sub_2233B6A90(&v787);
  if (*(int *)v787[7] > 3)
    goto LABEL_503;
  v361 = *((unsigned __int8 *)v787 + 72);
  v362 = sub_22322F254((uint64_t)v787, "OSLogSurrogateAppender", 1, 0);
  v363 = v362;
  if (!v361 && v362 == 0)
    goto LABEL_503;
  v754 = v361;
  *(_QWORD *)v803 = &v787;
  *(std::chrono::steady_clock::time_point *)&v803[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v803[16] = std::chrono::system_clock::now();
  *(_DWORD *)&v803[24] = 3;
  v804.i64[0] = (uint64_t)"unknown file";
  v804.i32[2] = 461;
  v807 = 0;
  v805 = "unknown function";
  v806 = 0;
  v365 = **(_QWORD **)v803;
  if (*(char *)(**(_QWORD **)v803 + 39) < 0)
  {
    v367 = *(const char **)(v365 + 16);
    v366 = *(_QWORD *)(v365 + 24);
    v753 = **(_QWORD **)v803 + 16;
    v369 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v369 & 1) == 0)
    {
LABEL_937:
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
    }
  }
  else
  {
    v366 = *(unsigned __int8 *)(**(_QWORD **)v803 + 39);
    v367 = (const char *)(**(_QWORD **)v803 + 16);
    v753 = (uint64_t)v367;
    v368 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v368 & 1) == 0)
      goto LABEL_937;
  }
  if (byte_255788F57 >= 0)
    v370 = (const char *)&xmmword_255788F40;
  else
    v370 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v371 = byte_255788F57;
  else
    v371 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)object = os_log_create(v370, v367);
  v372 = &object[8];
  if (v371 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v371 >= 0x17)
  {
    v373 = v360;
    v374 = v363;
    v375 = v367;
    v376 = v365;
    v377 = a3;
    v378 = (v371 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v371 | 7) != 0x17)
      v378 = v371 | 7;
    v379 = v378 + 1;
    v372 = operator new(v378 + 1);
    *(_QWORD *)&object[24] = v379 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v372;
    *(_QWORD *)&object[16] = v371;
    a3 = v377;
    v365 = v376;
    v367 = v375;
    v363 = v374;
    v360 = v373;
    goto LABEL_434;
  }
  object[31] = v371;
  if (v371)
LABEL_434:
    memmove(v372, v370, v371);
  v372[v371] = 0;
  object[32] = 1;
  v380 = &object[40];
  if (v366 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v366 >= 0x17)
  {
    v382 = (v366 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v366 | 7) != 0x17)
      v382 = v366 | 7;
    v383 = v382 + 1;
    v380 = operator new(v382 + 1);
    v790.i64[1] = v383 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v380;
    v790.i64[0] = v366;
  }
  else
  {
    v790.i8[15] = v366;
    if (!v366)
    {
      object[40] = 0;
      v791 = 1;
      v381 = *(NSObject **)object;
      if ((v790.i8[15] & 0x80000000) == 0)
        goto LABEL_439;
LABEL_445:
      operator delete(*(void **)&object[40]);
      if (object[32])
        goto LABEL_446;
      goto LABEL_448;
    }
  }
  memmove(v380, v367, v366);
  v380[v366] = 0;
  v791 = 1;
  v381 = *(NSObject **)object;
  if (v790.i8[15] < 0)
    goto LABEL_445;
LABEL_439:
  if (object[32])
  {
LABEL_446:
    if ((object[31] & 0x80000000) != 0)
      operator delete(*(void **)&object[8]);
  }
LABEL_448:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  v384 = -858993459 * ((unint64_t)(v767 - (_BYTE *)v360) >> 4);
  if (v363 && *(_QWORD *)(v363 + 24))
  {
    v385 = _os_log_pack_size();
    v386 = (std::__shared_weak_count_vtbl *)operator new(v385, (std::align_val_t)8uLL);
    v387 = (std::__shared_weak_count *)operator new();
    v388 = v387;
    v387->__shared_owners_ = 0;
    v389 = (unint64_t *)&v387->__shared_owners_;
    v387->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v387->__shared_weak_owners_ = 0;
    v387[1].__vftable = v386;
    *(_QWORD *)object = v386;
    *(_QWORD *)&object[8] = v386;
    *(_QWORD *)&object[16] = v387;
    do
      v390 = __ldxr(v389);
    while (__stxr(v390 + 1, v389));
    memset(&object[24], 0, 24);
    do
      v391 = __ldaxr(v389);
    while (__stlxr(v391 - 1, v389));
    if (!v391)
    {
      ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
      std::__shared_weak_count::__release_weak(v388);
    }
    v392 = *(_QWORD *)object;
    v393 = _os_log_pack_fill();
    *(_DWORD *)v393 = 67109888;
    *(_DWORD *)(v393 + 4) = v384;
    *(_WORD *)(v393 + 8) = 1024;
    *(_DWORD *)(v393 + 10) = v763;
    *(_WORD *)(v393 + 14) = 1024;
    *(_DWORD *)(v393 + 16) = v775;
    *(_WORD *)(v393 + 20) = 1024;
    *(_DWORD *)(v393 + 22) = v771;
    v394 = operator new();
    v395 = *(unsigned __int8 *)(v365 + 39);
    v396 = v753;
    if ((v395 & 0x80u) != 0)
    {
      v396 = *(_QWORD *)(v365 + 16);
      v395 = *(_QWORD *)(v365 + 24);
    }
    *(_QWORD *)v394 = v392;
    *(_OWORD *)(v394 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v394 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v394 + 40) = v396;
    *(_QWORD *)(v394 + 48) = v395;
    *(_BYTE *)(v394 + 56) = 1;
    *(_QWORD *)__s = 0;
    *(_QWORD *)v809 = v394;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v363 + 24) + 40))(*(_QWORD *)(v363 + 24), v809);
    v397 = *(_QWORD *)v809;
    *(_QWORD *)v809 = 0;
    v398 = v754;
    if (v397)
    {
      v399 = *(std::__shared_weak_count **)(v397 + 32);
      if (v399)
      {
        v400 = (unint64_t *)&v399->__shared_owners_;
        do
          v401 = __ldaxr(v400);
        while (__stlxr(v401 - 1, v400));
        if (!v401)
        {
          ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
          std::__shared_weak_count::__release_weak(v399);
        }
      }
      v402 = *(std::__shared_weak_count **)(v397 + 16);
      if (v402)
      {
        v403 = (unint64_t *)&v402->__shared_owners_;
        do
          v404 = __ldaxr(v403);
        while (__stlxr(v404 - 1, v403));
        if (!v404)
        {
          ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
          std::__shared_weak_count::__release_weak(v402);
        }
      }
      MEMORY[0x227684CE8](v397, 0x10F0C40B62ED6C6);
      v405 = *(_QWORD *)__s;
      *(_QWORD *)__s = 0;
      if (v405)
      {
        v406 = *(std::__shared_weak_count **)(v405 + 32);
        if (v406)
        {
          v407 = (unint64_t *)&v406->__shared_owners_;
          do
            v408 = __ldaxr(v407);
          while (__stlxr(v408 - 1, v407));
          if (!v408)
          {
            ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
            std::__shared_weak_count::__release_weak(v406);
          }
        }
        v409 = *(std::__shared_weak_count **)(v405 + 16);
        if (v409)
        {
          v410 = (unint64_t *)&v409->__shared_owners_;
          do
            v411 = __ldaxr(v410);
          while (__stlxr(v411 - 1, v410));
          if (!v411)
          {
            ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
            std::__shared_weak_count::__release_weak(v409);
          }
        }
        MEMORY[0x227684CE8](v405, 0x10F0C40B62ED6C6);
      }
    }
    v412 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v413 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v414 = __ldaxr(v413);
      while (__stlxr(v414 - 1, v413));
      if (!v414)
      {
        ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
        std::__shared_weak_count::__release_weak(v412);
      }
    }
    v415 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v416 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v417 = __ldaxr(v416);
      while (__stlxr(v417 - 1, v416));
      if (!v417)
      {
        ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
        std::__shared_weak_count::__release_weak(v415);
      }
    }
    v418 = v763;
  }
  else
  {
    os_log_type_enabled(v381, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 67109888;
    *(_DWORD *)&object[4] = -858993459 * ((unint64_t)(v767 - (_BYTE *)v360) >> 4);
    *(_WORD *)&object[8] = 1024;
    v418 = v763;
    *(_DWORD *)&object[10] = v763;
    *(_WORD *)&object[14] = 1024;
    *(_DWORD *)&object[16] = v775;
    *(_WORD *)&object[20] = 1024;
    *(_DWORD *)&object[22] = v771;
    v419 = (void *)_os_log_send_and_compose_impl();
    v398 = v754;
    if (v419)
      free(v419);
  }
  if (v398)
  {
    sub_22322C138((uint64_t)v803, "Floor Selection: candidates: %u, filtered degenerate: %u, filtered vertical: %u, filtered horizontal: %u", v384, v418, v775, v771);
    sub_223182C08((uint64_t)v803);
  }
  sub_223182C08((uint64_t)v803);
  v420 = v807;
  if (v807)
  {
    v421 = (unint64_t *)&v807->__shared_owners_;
    do
      v422 = __ldaxr(v421);
    while (__stlxr(v422 - 1, v421));
    if (!v422)
    {
      ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
      std::__shared_weak_count::__release_weak(v420);
    }
  }
LABEL_503:
  v423 = (__n128 *)v779;
  v424 = v780;
  *(_QWORD *)object = 0;
  object[8] = 0;
  if (v779 == v780)
  {
    *(_QWORD *)v809 = &off_24EC36070;
    *(_QWORD *)&v809[8] = &v779;
    *(_QWORD *)&v809[16] = 0;
    v810 = v809;
    goto LABEL_525;
  }
  v425 = (char *)v779 + 16;
  do
  {
    if ((v425[16] & 2) != 0)
    {
      if (*(uint64_t *)object >= *(_QWORD *)v425)
        v427 = object;
      else
        v427 = v425;
      v428 = v427[8];
      *(_QWORD *)object = *(_QWORD *)v427;
      object[8] = v428;
    }
    v426 = v425 + 64;
    v425 += 80;
  }
  while (v426 != (char *)v780);
  v429 = *(_QWORD *)object;
  v430 = (__n128 *)v779;
  do
  {
    v431 = v430[2].n128_u32[0];
    if ((v431 & 2) == 0 && v430[3].n128_u8[8] && (int64_t)v430[2].n128_u64[1] >= v429)
    {
      v430[2].n128_u32[0] = v431 | 2;
      v430[1].n128_u64[0] = v430[2].n128_u64[1];
      v430[1].n128_u8[8] = v430[3].n128_u8[0];
      v430[4].n128_u32[1] |= 2u;
    }
    v430 += 5;
  }
  while (v430 != v424);
  *(_QWORD *)v809 = &off_24EC36070;
  *(_QWORD *)&v809[8] = &v779;
  *(_QWORD *)&v809[16] = 0;
  v810 = v809;
  if (v423 == v424)
  {
LABEL_525:
    sub_2233B6A90(&v783);
    if (**(int **)(v783 + 56) > 3)
      goto LABEL_630;
    v438 = *(unsigned __int8 *)(v783 + 72);
    v439 = sub_22322F254(v783, "OSLogSurrogateAppender", 1, 0);
    v440 = v439;
    if (!v438 && v439 == 0)
      goto LABEL_630;
    v758 = a3;
    *(_QWORD *)v803 = &v783;
    *(std::chrono::steady_clock::time_point *)&v803[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v803[16] = std::chrono::system_clock::now();
    *(_DWORD *)&v803[24] = 3;
    v804.i64[0] = (uint64_t)"unknown file";
    v804.i32[2] = 618;
    v807 = 0;
    v805 = "unknown function";
    v806 = 0;
    v442 = **(_QWORD **)v803;
    v443 = **(_QWORD **)v803 + 16;
    if (*(char *)(**(_QWORD **)v803 + 39) < 0)
    {
      v445 = *(const char **)(v442 + 16);
      v444 = *(_QWORD *)(v442 + 24);
      v466 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v466 & 1) != 0)
        goto LABEL_546;
    }
    else
    {
      v444 = *(unsigned __int8 *)(**(_QWORD **)v803 + 39);
      v445 = (const char *)(**(_QWORD **)v803 + 16);
      v446 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v446 & 1) != 0)
        goto LABEL_546;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_546:
    if (byte_255788F57 >= 0)
      v467 = (const char *)&xmmword_255788F40;
    else
      v467 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v468 = byte_255788F57;
    else
      v468 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v467, v445);
    v469 = &object[8];
    if (v468 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v468 >= 0x17)
    {
      v470 = v440;
      v471 = v445;
      v472 = v442;
      v473 = v438;
      v474 = v443;
      v475 = (v468 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v468 | 7) != 0x17)
        v475 = v468 | 7;
      v476 = v475 + 1;
      v469 = operator new(v475 + 1);
      *(_QWORD *)&object[24] = v476 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v469;
      *(_QWORD *)&object[16] = v468;
      v443 = v474;
      v438 = v473;
      v442 = v472;
      v445 = v471;
      v440 = v470;
    }
    else
    {
      object[31] = v468;
      if (!v468)
      {
LABEL_560:
        v469[v468] = 0;
        object[32] = 1;
        v477 = &object[40];
        if (v444 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v444 >= 0x17)
        {
          v478 = (v444 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v444 | 7) != 0x17)
            v478 = v444 | 7;
          v479 = v478 + 1;
          v477 = operator new(v478 + 1);
          v790.i64[1] = v479 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v477;
          v790.i64[0] = v444;
        }
        else
        {
          v790.i8[15] = v444;
          if (!v444)
            goto LABEL_568;
        }
        memmove(v477, v445, v444);
LABEL_568:
        v477[v444] = 0;
        v791 = 1;
        v480 = *(NSObject **)object;
        if (v790.i8[15] < 0)
          operator delete(*(void **)&object[40]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v440 && *(_QWORD *)(v440 + 24))
        {
          v481 = _os_log_pack_size();
          v482 = (std::__shared_weak_count_vtbl *)operator new(v481, (std::align_val_t)8uLL);
          v483 = (std::__shared_weak_count *)operator new();
          v484 = v483;
          v483->__shared_owners_ = 0;
          v485 = (unint64_t *)&v483->__shared_owners_;
          v483->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v483->__shared_weak_owners_ = 0;
          v483[1].__vftable = v482;
          *(_QWORD *)object = v482;
          *(_QWORD *)&object[8] = v482;
          *(_QWORD *)&object[16] = v483;
          do
            v486 = __ldxr(v485);
          while (__stxr(v486 + 1, v485));
          memset(&object[24], 0, 24);
          do
            v487 = __ldaxr(v485);
          while (__stlxr(v487 - 1, v485));
          if (!v487)
          {
            ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
            std::__shared_weak_count::__release_weak(v484);
          }
          v488 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v489 = operator new();
          v490 = *(unsigned __int8 *)(v442 + 39);
          if ((v490 & 0x80u) == 0)
            v491 = v443;
          else
            v491 = *(_QWORD *)(v442 + 16);
          if ((v490 & 0x80u) != 0)
            v490 = *(_QWORD *)(v442 + 24);
          *(_QWORD *)v489 = v488;
          *(_OWORD *)(v489 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v489 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v489 + 40) = v491;
          *(_QWORD *)(v489 + 48) = v490;
          *(_BYTE *)(v489 + 56) = 1;
          v787 = 0;
          *(_QWORD *)__s = v489;
          (*(void (**)(_QWORD, char *))(**(_QWORD **)(v440 + 24) + 40))(*(_QWORD *)(v440 + 24), __s);
          v492 = *(_QWORD *)__s;
          *(_QWORD *)__s = 0;
          a3 = v758;
          if (v492)
          {
            v493 = *(std::__shared_weak_count **)(v492 + 32);
            if (v493)
            {
              v494 = (unint64_t *)&v493->__shared_owners_;
              do
                v495 = __ldaxr(v494);
              while (__stlxr(v495 - 1, v494));
              if (!v495)
              {
                ((void (*)(std::__shared_weak_count *))v493->__on_zero_shared)(v493);
                std::__shared_weak_count::__release_weak(v493);
              }
            }
            v496 = *(std::__shared_weak_count **)(v492 + 16);
            if (v496)
            {
              v497 = (unint64_t *)&v496->__shared_owners_;
              do
                v498 = __ldaxr(v497);
              while (__stlxr(v498 - 1, v497));
              if (!v498)
              {
                ((void (*)(std::__shared_weak_count *))v496->__on_zero_shared)(v496);
                std::__shared_weak_count::__release_weak(v496);
              }
            }
            MEMORY[0x227684CE8](v492, 0x10F0C40B62ED6C6);
            v499 = (uint64_t)v787;
            v787 = 0;
            if (v499)
            {
              v500 = *(std::__shared_weak_count **)(v499 + 32);
              if (v500)
              {
                v501 = (unint64_t *)&v500->__shared_owners_;
                do
                  v502 = __ldaxr(v501);
                while (__stlxr(v502 - 1, v501));
                if (!v502)
                {
                  ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
                  std::__shared_weak_count::__release_weak(v500);
                }
              }
              v503 = *(std::__shared_weak_count **)(v499 + 16);
              if (v503)
              {
                v504 = (unint64_t *)&v503->__shared_owners_;
                do
                  v505 = __ldaxr(v504);
                while (__stlxr(v505 - 1, v504));
                if (!v505)
                {
                  ((void (*)(std::__shared_weak_count *))v503->__on_zero_shared)(v503);
                  std::__shared_weak_count::__release_weak(v503);
                }
              }
              MEMORY[0x227684CE8](v499, 0x10F0C40B62ED6C6);
            }
          }
          v506 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v507 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v508 = __ldaxr(v507);
            while (__stlxr(v508 - 1, v507));
            if (!v508)
            {
              ((void (*)(std::__shared_weak_count *))v506->__on_zero_shared)(v506);
              std::__shared_weak_count::__release_weak(v506);
            }
          }
          v509 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v510 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v511 = __ldaxr(v510);
            while (__stlxr(v511 - 1, v510));
            if (!v511)
            {
              ((void (*)(std::__shared_weak_count *))v509->__on_zero_shared)(v509);
              std::__shared_weak_count::__release_weak(v509);
            }
          }
        }
        else
        {
          os_log_type_enabled(v480, OS_LOG_TYPE_INFO);
          *(_WORD *)object = 0;
          v512 = (void *)_os_log_send_and_compose_impl();
          a3 = v758;
          if (v512)
            free(v512);
        }
        if (v438)
        {
          sub_22322C138((uint64_t)v803, "Floor Selection: No candidate floor.");
          sub_223182C08((uint64_t)v803);
        }
        sub_223182C08((uint64_t)v803);
        v513 = v807;
        if (v807)
        {
          v514 = (unint64_t *)&v807->__shared_owners_;
          do
            v515 = __ldaxr(v514);
          while (__stlxr(v515 - 1, v514));
          if (!v515)
          {
            ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
            std::__shared_weak_count::__release_weak(v513);
          }
        }
LABEL_630:
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        v516 = (float32x2_t)v810;
        if (!v810)
          goto LABEL_734;
        goto LABEL_631;
      }
    }
    memmove(v469, v467, v468);
    goto LABEL_560;
  }
  if ((char *)v424 - (char *)v423 != 80)
  {
    *(_QWORD *)object = sub_2233B7130;
    sub_2233C42BC((uint64_t)v423, v424, (uint64_t (**)(__n128 *, __n128 *))object, 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (v424 - v423)), 1);
    v447 = v779;
    v448 = sub_2233B6BE4((uint64_t)v779);
    v449 = sub_2233B6BE4((uint64_t)v447 + 80);
    v451 = v779;
    v759 = a3;
    if (v448 < v449)
    {
      v452 = *((_DWORD *)v779 + 8);
      v453 = *((_DWORD *)v779 + 17);
      v454 = *((unsigned __int16 *)v779 + 56);
      v455 = *((_DWORD *)v779 + 37);
      sub_2233B6A90(&v783);
      if (**(int **)(v783 + 56) > 3
        || (v456 = *(unsigned __int8 *)(v783 + 72),
            v457 = sub_22322F254(v783, "OSLogSurrogateAppender", 1, 0),
            v458 = v457,
            !v456)
        && !v457)
      {
LABEL_836:
        v652 = (__n128 *)v779;
        v653 = v780;
        memset(object, 0, 24);
        v654 = (char *)v780 - (_BYTE *)v779;
        if (v780 == v779)
        {
          *(_OWORD *)v759 = 0u;
          v759[2] = v654;
          v516 = (float32x2_t)v810;
          if (!v810)
            goto LABEL_734;
          goto LABEL_631;
        }
        v655 = 0xCCCCCCCCCCCCCCCDLL * (v654 >> 4);
        v656 = v759;
        if (v655 >> 60)
          sub_22316E078();
        *(_QWORD *)object = operator new(0xCCCCCCCCCCCCCCD0 * (v654 >> 4));
        *(_QWORD *)&object[8] = *(_QWORD *)object;
        *(_QWORD *)&object[16] = *(_QWORD *)object + 16 * v655;
        *(_QWORD *)__s = object;
        do
        {
          *(__n128 *)v803 = *v652;
          sub_2232E9564((char ***)__s, v803);
          v652 += 5;
        }
        while (v652 != v653);
        goto LABEL_931;
      }
      *(_QWORD *)v803 = &v783;
      *(std::chrono::steady_clock::time_point *)&v803[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v803[16] = std::chrono::system_clock::now();
      *(_DWORD *)&v803[24] = 3;
      v804.i64[0] = (uint64_t)"unknown file";
      v804.i32[2] = 636;
      v807 = 0;
      v805 = "unknown function";
      v806 = 0;
      v459 = **(_QWORD **)v803;
      v772 = **(_QWORD **)v803;
      if (*(char *)(**(_QWORD **)v803 + 39) < 0)
      {
        v461 = *(const char **)(v459 + 16);
        v460 = *(_QWORD *)(v459 + 24);
      }
      else
      {
        v460 = *(unsigned __int8 *)(**(_QWORD **)v803 + 39);
        v461 = (const char *)(**(_QWORD **)v803 + 16);
      }
      v770 = **(_QWORD **)v803 + 16;
      v598 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v598 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v599 = (const char *)&xmmword_255788F40;
      else
        v599 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v600 = byte_255788F57;
      else
        v600 = *((_QWORD *)&xmmword_255788F40 + 1);
      v777 = v461;
      *(_QWORD *)object = os_log_create(v599, v461);
      v601 = &object[8];
      if (v600 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v602 = v456;
      v603 = v453;
      if (v600 >= 0x17)
      {
        v766 = v455;
        v455 = v454;
        v605 = v453;
        v606 = v452;
        v607 = v458;
        v608 = v602;
        v609 = (v600 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v600 | 7) != 0x17)
          v609 = v600 | 7;
        v610 = v609 + 1;
        v601 = operator new(v609 + 1);
        *(_QWORD *)&object[24] = v610 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v601;
        *(_QWORD *)&object[16] = v600;
        v604 = v608;
        v458 = v607;
        v452 = v606;
        v603 = v605;
        v454 = v455;
        LOWORD(v455) = v766;
      }
      else
      {
        v604 = v602;
        object[31] = v600;
        if (!v600)
        {
LABEL_769:
          v601[v600] = 0;
          object[32] = 1;
          v611 = &object[40];
          if (v460 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v460 >= 0x17)
          {
            v612 = (v460 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v460 | 7) != 0x17)
              v612 = v460 | 7;
            v613 = v612 + 1;
            v611 = operator new(v612 + 1);
            v790.i64[1] = v613 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v611;
            v790.i64[0] = v460;
          }
          else
          {
            v790.i8[15] = v460;
            if (!v460)
              goto LABEL_777;
          }
          memmove(v611, v777, v460);
LABEL_777:
          v611[v460] = 0;
          v791 = 1;
          v614 = *(NSObject **)object;
          if (v790.i8[15] < 0)
            operator delete(*(void **)&object[40]);
          if (object[32] && (object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          v615 = (v603 << 23) | (v452 << 16) | ((v455 & 0x1FF) << 7) | v454;
          if (v458 && *(_QWORD *)(v458 + 24))
          {
            v616 = _os_log_pack_size();
            v617 = (std::__shared_weak_count_vtbl *)operator new(v616, (std::align_val_t)8uLL);
            v618 = (std::__shared_weak_count *)operator new();
            v619 = v618;
            v618->__shared_owners_ = 0;
            v620 = (unint64_t *)&v618->__shared_owners_;
            v618->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v618->__shared_weak_owners_ = 0;
            v618[1].__vftable = v617;
            *(_QWORD *)object = v617;
            *(_QWORD *)&object[8] = v617;
            *(_QWORD *)&object[16] = v618;
            do
              v621 = __ldxr(v620);
            while (__stxr(v621 + 1, v620));
            memset(&object[24], 0, 24);
            do
              v622 = __ldaxr(v620);
            while (__stlxr(v622 - 1, v620));
            if (!v622)
            {
              ((void (*)(std::__shared_weak_count *))v618->__on_zero_shared)(v618);
              std::__shared_weak_count::__release_weak(v619);
            }
            v623 = *(_QWORD *)object;
            v624 = (_DWORD *)_os_log_pack_fill();
            *v624 = 67109120;
            v624[1] = v615;
            v625 = operator new();
            v626 = *(unsigned __int8 *)(v772 + 39);
            v627 = v770;
            if ((v626 & 0x80u) != 0)
            {
              v627 = *(_QWORD *)(v772 + 16);
              v626 = *(_QWORD *)(v772 + 24);
            }
            *(_QWORD *)v625 = v623;
            *(_OWORD *)(v625 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v625 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *(_QWORD *)(v625 + 40) = v627;
            *(_QWORD *)(v625 + 48) = v626;
            *(_BYTE *)(v625 + 56) = 1;
            v787 = 0;
            *(_QWORD *)__s = v625;
            (*(void (**)(_QWORD, char *))(**(_QWORD **)(v458 + 24) + 40))(*(_QWORD *)(v458 + 24), __s);
            v628 = *(_QWORD *)__s;
            *(_QWORD *)__s = 0;
            if (v628)
            {
              v629 = *(std::__shared_weak_count **)(v628 + 32);
              if (v629)
              {
                v630 = (unint64_t *)&v629->__shared_owners_;
                do
                  v631 = __ldaxr(v630);
                while (__stlxr(v631 - 1, v630));
                if (!v631)
                {
                  ((void (*)(std::__shared_weak_count *))v629->__on_zero_shared)(v629);
                  std::__shared_weak_count::__release_weak(v629);
                }
              }
              v632 = *(std::__shared_weak_count **)(v628 + 16);
              if (v632)
              {
                v633 = (unint64_t *)&v632->__shared_owners_;
                do
                  v634 = __ldaxr(v633);
                while (__stlxr(v634 - 1, v633));
                if (!v634)
                {
                  ((void (*)(std::__shared_weak_count *))v632->__on_zero_shared)(v632);
                  std::__shared_weak_count::__release_weak(v632);
                }
              }
              MEMORY[0x227684CE8](v628, 0x10F0C40B62ED6C6);
              v635 = (uint64_t)v787;
              v787 = 0;
              if (v635)
              {
                v636 = *(std::__shared_weak_count **)(v635 + 32);
                if (v636)
                {
                  v637 = (unint64_t *)&v636->__shared_owners_;
                  do
                    v638 = __ldaxr(v637);
                  while (__stlxr(v638 - 1, v637));
                  if (!v638)
                  {
                    ((void (*)(std::__shared_weak_count *))v636->__on_zero_shared)(v636);
                    std::__shared_weak_count::__release_weak(v636);
                  }
                }
                v639 = *(std::__shared_weak_count **)(v635 + 16);
                if (v639)
                {
                  v640 = (unint64_t *)&v639->__shared_owners_;
                  do
                    v641 = __ldaxr(v640);
                  while (__stlxr(v641 - 1, v640));
                  if (!v641)
                  {
                    ((void (*)(std::__shared_weak_count *))v639->__on_zero_shared)(v639);
                    std::__shared_weak_count::__release_weak(v639);
                  }
                }
                MEMORY[0x227684CE8](v635, 0x10F0C40B62ED6C6);
              }
            }
            v642 = *(std::__shared_weak_count **)&object[32];
            if (*(_QWORD *)&object[32])
            {
              v643 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v644 = __ldaxr(v643);
              while (__stlxr(v644 - 1, v643));
              if (!v644)
              {
                ((void (*)(std::__shared_weak_count *))v642->__on_zero_shared)(v642);
                std::__shared_weak_count::__release_weak(v642);
              }
            }
            v645 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v646 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v647 = __ldaxr(v646);
              while (__stlxr(v647 - 1, v646));
              if (!v647)
              {
                ((void (*)(std::__shared_weak_count *))v645->__on_zero_shared)(v645);
                std::__shared_weak_count::__release_weak(v645);
              }
            }
          }
          else
          {
            os_log_type_enabled(v614, OS_LOG_TYPE_INFO);
            *(_DWORD *)object = 67109120;
            *(_DWORD *)&object[4] = (v603 << 23) | (v452 << 16) | ((v455 & 0x1FF) << 7) | v454;
            v648 = (void *)_os_log_send_and_compose_impl();
            if (v648)
              free(v648);
          }
          if (v604)
          {
            sub_22322C138((uint64_t)v803, "Floor Selection: Prioritized floor; update code: %08X; v2", v615);
            sub_223182C08((uint64_t)v803);
          }
          sub_223182C08((uint64_t)v803);
          v649 = v807;
          if (v807)
          {
            v650 = (unint64_t *)&v807->__shared_owners_;
            do
              v651 = __ldaxr(v650);
            while (__stlxr(v651 - 1, v650));
            if (!v651)
            {
              ((void (*)(std::__shared_weak_count *))v649->__on_zero_shared)(v649);
              std::__shared_weak_count::__release_weak(v649);
            }
          }
          goto LABEL_836;
        }
      }
      memmove(v601, v599, v600);
      goto LABEL_769;
    }
    v462 = v780;
    if (v779 == v780)
    {
      v465 = (__n128 *)v779;
      v463 = (__n128 *)v779;
    }
    else
    {
      v463 = (__n128 *)v779;
      while (1)
      {
        v464 = sub_2233B6BE4((uint64_t)v451);
        if (v464 < sub_2233B6BE4((uint64_t)v463))
          break;
        v463 += 5;
        if (v463 == v462)
        {
          v463 = v462;
          break;
        }
      }
      v465 = (__n128 *)v779;
      v451 = v780;
    }
    v520 = 0xCCCCCCCCCCCCCCCDLL * (v463 - v465);
    v521 = (v451 - (_BYTE *)v465) >> 4;
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * v521) < v520)
      v520 = 0xCCCCCCCCCCCCCCCDLL * v521;
    v522 = &v465[5 * v520];
    v523 = 126 - 2 * __clz(v520);
    if (v520)
      v524 = v523;
    else
      v524 = 0;
    v525 = 1;
    sub_2233BC1F0((uint64_t)v465, &v465[5 * v520], v524, 1, v450);
    v526 = v522[-1].n128_f32[0] - v465[4].n128_f32[0];
    if ((v465[4].n128_u8[4] & 1) == 0 || v526 >= 0.05)
    {
      v527 = sub_2233BE27C((unint64_t)v465, (unint64_t)v522, v524, 1);
      v527.n128_f64[0] = (double)v465[1].n128_i64[0] / 1000000000.0;
      v528 = (double)v465[6].n128_i64[0] / 1000000000.0;
      _NF = v527.n128_f64[0] < v528;
      if (v527.n128_f64[0] == v528)
      {
        v527.n128_u32[0] = 1028443341;
        if (v526 >= 0.05)
        {
          v525 = 0;
          goto LABEL_748;
        }
      }
      else
      {
        v581 = v527.n128_f64[0] - v528;
        v527.n128_f64[0] = v528 - v527.n128_f64[0];
        if (!_NF)
          v527.n128_f64[0] = v581;
        v38 = v527.n128_f64[0] > 0.00000001;
        v582 = v527.n128_f64[0] > 0.00000001;
        v527.n128_u32[0] = 1028443341;
        if (v38 || v526 >= 0.05)
        {
          v525 = 2 * v582;
          goto LABEL_748;
        }
      }
      v584 = sub_2233C0424((uint64_t)v465, (unint64_t)v522, v524, 1, v527);
      v584.n128_u32[0] = v465[4].n128_u32[2];
      v585 = v465[9].n128_f32[2];
      v586 = v584.n128_f32[0] < v585;
      if (v584.n128_f32[0] == v585)
        goto LABEL_747;
      v587 = v584.n128_f32[0] - v585;
      v584.n128_f32[0] = v585 - v584.n128_f32[0];
      if (!v586)
        v584.n128_f32[0] = v587;
      if (v584.n128_f32[0] <= 0.000001)
      {
LABEL_747:
        v525 = 1;
        sub_2233C2558((uint64_t)v465, v522, v524, 1, v584);
      }
      else
      {
        v525 = 3;
      }
    }
LABEL_748:
    v588 = *((_DWORD *)v779 + 8);
    v589 = *((_DWORD *)v779 + 17);
    v590 = *((unsigned __int16 *)v779 + 56);
    v591 = *((_DWORD *)v779 + 37);
    sub_2233B6A90(&v783);
    if (**(int **)(v783 + 56) > 3
      || (v592 = *(unsigned __int8 *)(v783 + 72),
          v593 = sub_22322F254(v783, "OSLogSurrogateAppender", 1, 0),
          v594 = (_QWORD **)v593,
          !v592)
      && !v593)
    {
LABEL_926:
      if (!v525)
      {
        *v759 = 0;
        v759[1] = 0;
        v759[2] = 0;
        v516 = (float32x2_t)v810;
        if (!v810)
          goto LABEL_734;
        goto LABEL_631;
      }
      v709 = (__n128 *)v779;
      v710 = v780;
      memset(object, 0, 24);
      v711 = (char *)v780 - (_BYTE *)v779;
      v656 = v759;
      if (v780 == v779)
      {
        *(_OWORD *)v759 = 0u;
        v759[2] = v711;
        v516 = (float32x2_t)v810;
        if (!v810)
          goto LABEL_734;
        goto LABEL_631;
      }
      v712 = 0xCCCCCCCCCCCCCCCDLL * (v711 >> 4);
      if (v712 >> 60)
        sub_22316E078();
      *(_QWORD *)object = operator new(0xCCCCCCCCCCCCCCD0 * (v711 >> 4));
      *(_QWORD *)&object[8] = *(_QWORD *)object;
      *(_QWORD *)&object[16] = *(_QWORD *)object + 16 * v712;
      *(_QWORD *)__s = object;
      do
      {
        *(__n128 *)v803 = *v709;
        sub_2232E9564((char ***)__s, v803);
        v709 += 5;
      }
      while (v709 != v710);
LABEL_931:
      v713 = *(_QWORD *)&object[16];
      *(_OWORD *)v656 = *(_OWORD *)object;
      v656[2] = v713;
      v516 = (float32x2_t)v810;
      if (!v810)
        goto LABEL_734;
      goto LABEL_631;
    }
    v769 = v591;
    *(_QWORD *)v803 = &v783;
    *(std::chrono::steady_clock::time_point *)&v803[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v803[16] = std::chrono::system_clock::now();
    *(_DWORD *)&v803[24] = 3;
    v804.i64[0] = (uint64_t)"unknown file";
    v804.i32[2] = 649;
    v807 = 0;
    v805 = "unknown function";
    v806 = 0;
    v595 = **(_QWORD **)v803;
    v765 = **(char ***)v803;
    if (*(char *)(**(_QWORD **)v803 + 39) < 0)
    {
      v597 = *(const char **)(v595 + 16);
      v596 = *(_QWORD *)(v595 + 24);
    }
    else
    {
      v596 = *(unsigned __int8 *)(**(_QWORD **)v803 + 39);
      v597 = (const char *)(**(_QWORD **)v803 + 16);
    }
    v755 = **(_QWORD **)v803 + 16;
    v778 = v594;
    v657 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v657 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v658 = (const char *)&xmmword_255788F40;
    else
      v658 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v659 = byte_255788F57;
    else
      v659 = *((_QWORD *)&xmmword_255788F40 + 1);
    v774 = v597;
    *(_QWORD *)object = os_log_create(v658, v597);
    v660 = &object[8];
    if (v659 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v659 >= 0x17)
    {
      v661 = v590;
      v662 = v589;
      v663 = v588;
      v664 = v592;
      v665 = v525;
      v666 = (v659 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v659 | 7) != 0x17)
        v666 = v659 | 7;
      v667 = v666 + 1;
      v660 = operator new(v666 + 1);
      *(_QWORD *)&object[24] = v667 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v660;
      *(_QWORD *)&object[16] = v659;
      v525 = v665;
      v592 = v664;
      v588 = v663;
      v589 = v662;
      v590 = v661;
    }
    else
    {
      object[31] = v659;
      if (!v659)
      {
LABEL_859:
        v660[v659] = 0;
        object[32] = 1;
        v668 = &object[40];
        if (v596 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v596 >= 0x17)
        {
          v669 = (v596 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v596 | 7) != 0x17)
            v669 = v596 | 7;
          v670 = v669 + 1;
          v668 = operator new(v669 + 1);
          v790.i64[1] = v670 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v668;
          v790.i64[0] = v596;
        }
        else
        {
          v790.i8[15] = v596;
          if (!v596)
            goto LABEL_867;
        }
        memmove(v668, v774, v596);
LABEL_867:
        v668[v596] = 0;
        v791 = 1;
        v671 = *(NSObject **)object;
        if (v790.i8[15] < 0)
          operator delete(*(void **)&object[40]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        v672 = (v589 << 23) | (v588 << 16) | ((v769 & 0x1FF) << 7) | v590;
        if (v778 && v778[3])
        {
          v673 = _os_log_pack_size();
          v674 = (std::__shared_weak_count_vtbl *)operator new(v673, (std::align_val_t)8uLL);
          v675 = (std::__shared_weak_count *)operator new();
          v676 = v675;
          v675->__shared_owners_ = 0;
          v677 = (unint64_t *)&v675->__shared_owners_;
          v675->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v675->__shared_weak_owners_ = 0;
          v675[1].__vftable = v674;
          *(_QWORD *)object = v674;
          *(_QWORD *)&object[8] = v674;
          *(_QWORD *)&object[16] = v675;
          do
            v678 = __ldxr(v677);
          while (__stxr(v678 + 1, v677));
          memset(&object[24], 0, 24);
          do
            v679 = __ldaxr(v677);
          while (__stlxr(v679 - 1, v677));
          if (!v679)
          {
            ((void (*)(std::__shared_weak_count *))v675->__on_zero_shared)(v675);
            std::__shared_weak_count::__release_weak(v676);
          }
          v680 = *(_QWORD *)object;
          v681 = _os_log_pack_fill();
          *(_DWORD *)v681 = 67109376;
          *(_DWORD *)(v681 + 4) = v672;
          *(_WORD *)(v681 + 8) = 1024;
          *(_DWORD *)(v681 + 10) = v525;
          v682 = operator new();
          v683 = v765[39];
          v684 = v755;
          if ((v683 & 0x80u) != 0)
          {
            v684 = *((_QWORD *)v765 + 2);
            v683 = *((_QWORD *)v765 + 3);
          }
          *(_QWORD *)v682 = v680;
          *(_OWORD *)(v682 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v682 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v682 + 40) = v684;
          *(_QWORD *)(v682 + 48) = v683;
          *(_BYTE *)(v682 + 56) = 1;
          v787 = 0;
          *(_QWORD *)__s = v682;
          (*(void (**)(_QWORD *, char *))(*v778[3] + 40))(v778[3], __s);
          v685 = *(_QWORD *)__s;
          *(_QWORD *)__s = 0;
          if (v685)
          {
            v686 = *(std::__shared_weak_count **)(v685 + 32);
            if (v686)
            {
              v687 = (unint64_t *)&v686->__shared_owners_;
              do
                v688 = __ldaxr(v687);
              while (__stlxr(v688 - 1, v687));
              if (!v688)
              {
                ((void (*)(std::__shared_weak_count *))v686->__on_zero_shared)(v686);
                std::__shared_weak_count::__release_weak(v686);
              }
            }
            v689 = *(std::__shared_weak_count **)(v685 + 16);
            if (v689)
            {
              v690 = (unint64_t *)&v689->__shared_owners_;
              do
                v691 = __ldaxr(v690);
              while (__stlxr(v691 - 1, v690));
              if (!v691)
              {
                ((void (*)(std::__shared_weak_count *))v689->__on_zero_shared)(v689);
                std::__shared_weak_count::__release_weak(v689);
              }
            }
            MEMORY[0x227684CE8](v685, 0x10F0C40B62ED6C6);
            v692 = (uint64_t)v787;
            v787 = 0;
            if (v692)
            {
              v693 = *(std::__shared_weak_count **)(v692 + 32);
              if (v693)
              {
                v694 = (unint64_t *)&v693->__shared_owners_;
                do
                  v695 = __ldaxr(v694);
                while (__stlxr(v695 - 1, v694));
                if (!v695)
                {
                  ((void (*)(std::__shared_weak_count *))v693->__on_zero_shared)(v693);
                  std::__shared_weak_count::__release_weak(v693);
                }
              }
              v696 = *(std::__shared_weak_count **)(v692 + 16);
              if (v696)
              {
                v697 = (unint64_t *)&v696->__shared_owners_;
                do
                  v698 = __ldaxr(v697);
                while (__stlxr(v698 - 1, v697));
                if (!v698)
                {
                  ((void (*)(std::__shared_weak_count *))v696->__on_zero_shared)(v696);
                  std::__shared_weak_count::__release_weak(v696);
                }
              }
              MEMORY[0x227684CE8](v692, 0x10F0C40B62ED6C6);
            }
          }
          v699 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v700 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v701 = __ldaxr(v700);
            while (__stlxr(v701 - 1, v700));
            if (!v701)
            {
              ((void (*)(std::__shared_weak_count *))v699->__on_zero_shared)(v699);
              std::__shared_weak_count::__release_weak(v699);
            }
          }
          v702 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v703 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v704 = __ldaxr(v703);
            while (__stlxr(v704 - 1, v703));
            if (!v704)
            {
              ((void (*)(std::__shared_weak_count *))v702->__on_zero_shared)(v702);
              std::__shared_weak_count::__release_weak(v702);
            }
          }
        }
        else
        {
          os_log_type_enabled(v671, OS_LOG_TYPE_INFO);
          *(_DWORD *)object = 67109376;
          *(_DWORD *)&object[4] = (v589 << 23) | (v588 << 16) | ((v769 & 0x1FF) << 7) | v590;
          *(_WORD *)&object[8] = 1024;
          *(_DWORD *)&object[10] = v525;
          v705 = (void *)_os_log_send_and_compose_impl();
          if (v705)
            free(v705);
        }
        if (v592)
        {
          sub_22322C138((uint64_t)v803, "Floor Selection: Ambiguous priorities; update code: %08X, disambiguation: %u; v2",
            v672,
            v525);
          sub_223182C08((uint64_t)v803);
        }
        sub_223182C08((uint64_t)v803);
        v706 = v807;
        if (v807)
        {
          v707 = (unint64_t *)&v807->__shared_owners_;
          do
            v708 = __ldaxr(v707);
          while (__stlxr(v708 - 1, v707));
          if (!v708)
          {
            ((void (*)(std::__shared_weak_count *))v706->__on_zero_shared)(v706);
            std::__shared_weak_count::__release_weak(v706);
          }
        }
        goto LABEL_926;
      }
    }
    memmove(v660, v658, v659);
    goto LABEL_859;
  }
  sub_2233B6A90(&v783);
  if (**(int **)(v783 + 56) > 3)
    goto LABEL_733;
  v432 = *(unsigned __int8 *)(v783 + 72);
  v433 = sub_22322F254(v783, "OSLogSurrogateAppender", 1, 0);
  v434 = v433;
  if (!v432 && !v433)
    goto LABEL_733;
  *(_QWORD *)v803 = &v783;
  *(std::chrono::steady_clock::time_point *)&v803[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v803[16] = std::chrono::system_clock::now();
  *(_DWORD *)&v803[24] = 3;
  v804.i64[0] = (uint64_t)"unknown file";
  v804.i32[2] = 624;
  v807 = 0;
  v805 = "unknown function";
  v806 = 0;
  v435 = **(_QWORD **)v803;
  if (*(char *)(**(_QWORD **)v803 + 39) < 0)
  {
    v437 = *(const char **)(v435 + 16);
    v436 = *(_QWORD *)(v435 + 24);
  }
  else
  {
    v436 = *(unsigned __int8 *)(**(_QWORD **)v803 + 39);
    v437 = (const char *)(**(_QWORD **)v803 + 16);
  }
  v764 = (char *)(**(_QWORD **)v803 + 16);
  v768 = **(_QWORD **)v803;
  v530 = v423[4].n128_u32[1];
  v773 = v423[2].n128_u32[0];
  v531 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v531 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v532 = (const char *)&xmmword_255788F40;
  else
    v532 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v533 = byte_255788F57;
  else
    v533 = *((_QWORD *)&xmmword_255788F40 + 1);
  v776 = v437;
  *(_QWORD *)object = os_log_create(v532, v437);
  v534 = &object[8];
  if (v533 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v535 = v432;
  if (v533 >= 0x17)
  {
    v536 = a3;
    v537 = (v533 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v533 | 7) != 0x17)
      v537 = v533 | 7;
    v538 = v537 + 1;
    v534 = operator new(v537 + 1);
    *(_QWORD *)&object[24] = v538 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v534;
    *(_QWORD *)&object[16] = v533;
    a3 = v536;
    v535 = v432;
    goto LABEL_665;
  }
  object[31] = v533;
  if (v533)
LABEL_665:
    memmove(v534, v532, v533);
  v534[v533] = 0;
  object[32] = 1;
  v539 = &object[40];
  if (v436 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v436 >= 0x17)
  {
    v540 = (v436 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v436 | 7) != 0x17)
      v540 = v436 | 7;
    v541 = v540 + 1;
    v539 = operator new(v540 + 1);
    v790.i64[1] = v541 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v539;
    v790.i64[0] = v436;
    goto LABEL_673;
  }
  v790.i8[15] = v436;
  if (v436)
LABEL_673:
    memmove(v539, v776, v436);
  v539[v436] = 0;
  v791 = 1;
  v542 = *(NSObject **)object;
  if (v790.i8[15] < 0)
    operator delete(*(void **)&object[40]);
  if (object[32] && (object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  v543 = (v530 << 23) | (v773 << 16);
  if (v434 && *(_QWORD *)(v434 + 24))
  {
    v544 = _os_log_pack_size();
    v545 = (std::__shared_weak_count_vtbl *)operator new(v544, (std::align_val_t)8uLL);
    v546 = (std::__shared_weak_count *)operator new();
    v547 = v546;
    v546->__shared_owners_ = 0;
    v548 = (unint64_t *)&v546->__shared_owners_;
    v546->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v546->__shared_weak_owners_ = 0;
    v546[1].__vftable = v545;
    *(_QWORD *)object = v545;
    *(_QWORD *)&object[8] = v545;
    *(_QWORD *)&object[16] = v546;
    do
      v549 = __ldxr(v548);
    while (__stxr(v549 + 1, v548));
    memset(&object[24], 0, 24);
    do
      v550 = __ldaxr(v548);
    while (__stlxr(v550 - 1, v548));
    if (!v550)
    {
      ((void (*)(std::__shared_weak_count *))v546->__on_zero_shared)(v546);
      std::__shared_weak_count::__release_weak(v547);
    }
    v551 = *(_QWORD *)object;
    v552 = (_DWORD *)_os_log_pack_fill();
    *v552 = 67109120;
    v552[1] = v543;
    v553 = operator new();
    v554 = *(unsigned __int8 *)(v768 + 39);
    v555 = v764;
    if ((v554 & 0x80u) != 0)
    {
      v555 = *(char **)(v768 + 16);
      v554 = *(_QWORD *)(v768 + 24);
    }
    *(_QWORD *)v553 = v551;
    *(_OWORD *)(v553 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v553 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v553 + 40) = v555;
    *(_QWORD *)(v553 + 48) = v554;
    *(_BYTE *)(v553 + 56) = 1;
    v787 = 0;
    *(_QWORD *)__s = v553;
    (*(void (**)(_QWORD, char *))(**(_QWORD **)(v434 + 24) + 40))(*(_QWORD *)(v434 + 24), __s);
    v556 = *(_QWORD *)__s;
    *(_QWORD *)__s = 0;
    if (v556)
    {
      v557 = *(std::__shared_weak_count **)(v556 + 32);
      if (v557)
      {
        v558 = (unint64_t *)&v557->__shared_owners_;
        do
          v559 = __ldaxr(v558);
        while (__stlxr(v559 - 1, v558));
        if (!v559)
        {
          ((void (*)(std::__shared_weak_count *))v557->__on_zero_shared)(v557);
          std::__shared_weak_count::__release_weak(v557);
        }
      }
      v560 = *(std::__shared_weak_count **)(v556 + 16);
      if (v560)
      {
        v561 = (unint64_t *)&v560->__shared_owners_;
        do
          v562 = __ldaxr(v561);
        while (__stlxr(v562 - 1, v561));
        if (!v562)
        {
          ((void (*)(std::__shared_weak_count *))v560->__on_zero_shared)(v560);
          std::__shared_weak_count::__release_weak(v560);
        }
      }
      MEMORY[0x227684CE8](v556, 0x10F0C40B62ED6C6);
      v563 = (uint64_t)v787;
      v787 = 0;
      if (v563)
      {
        v564 = *(std::__shared_weak_count **)(v563 + 32);
        if (v564)
        {
          v565 = (unint64_t *)&v564->__shared_owners_;
          do
            v566 = __ldaxr(v565);
          while (__stlxr(v566 - 1, v565));
          if (!v566)
          {
            ((void (*)(std::__shared_weak_count *))v564->__on_zero_shared)(v564);
            std::__shared_weak_count::__release_weak(v564);
          }
        }
        v567 = *(std::__shared_weak_count **)(v563 + 16);
        if (v567)
        {
          v568 = (unint64_t *)&v567->__shared_owners_;
          do
            v569 = __ldaxr(v568);
          while (__stlxr(v569 - 1, v568));
          if (!v569)
          {
            ((void (*)(std::__shared_weak_count *))v567->__on_zero_shared)(v567);
            std::__shared_weak_count::__release_weak(v567);
          }
        }
        MEMORY[0x227684CE8](v563, 0x10F0C40B62ED6C6);
      }
    }
    v570 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v571 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v572 = __ldaxr(v571);
      while (__stlxr(v572 - 1, v571));
      if (!v572)
      {
        ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
        std::__shared_weak_count::__release_weak(v570);
      }
    }
    v573 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v574 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v575 = __ldaxr(v574);
      while (__stlxr(v575 - 1, v574));
      if (!v575)
      {
        ((void (*)(std::__shared_weak_count *))v573->__on_zero_shared)(v573);
        std::__shared_weak_count::__release_weak(v573);
      }
    }
  }
  else
  {
    os_log_type_enabled(v542, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 67109120;
    *(_DWORD *)&object[4] = (v530 << 23) | (v773 << 16);
    v576 = (void *)_os_log_send_and_compose_impl();
    if (v576)
      free(v576);
  }
  if (v535)
  {
    sub_22322C138((uint64_t)v803, "Floor Selection: One candidate floor; update code: %08X; v2",
      (v423[4].n128_u32[1] << 23) | (v423[2].n128_u32[0] << 16));
    sub_223182C08((uint64_t)v803);
  }
  sub_223182C08((uint64_t)v803);
  v577 = v807;
  if (v807)
  {
    v578 = (unint64_t *)&v807->__shared_owners_;
    do
      v579 = __ldaxr(v578);
    while (__stlxr(v579 - 1, v578));
    if (!v579)
    {
      ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
      std::__shared_weak_count::__release_weak(v577);
    }
  }
LABEL_733:
  *(_OWORD *)object = *(_OWORD *)v779;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v580 = operator new(0x10uLL);
  a3[1] = v580 + 1;
  a3[2] = v580 + 1;
  *v580 = *(_OWORD *)object;
  *a3 = v580;
  v516 = (float32x2_t)v810;
  if (!v810)
LABEL_734:
    sub_223198474();
LABEL_631:
  (*(void (**)(float32x2_t))(**(_QWORD **)&v516 + 48))(v516);
  v518 = v810;
  if (v810 == v809)
  {
    v519 = 4;
    v518 = v809;
LABEL_635:
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v518 + 8 * v519))(v518, v517);
  }
  else if (v810)
  {
    v519 = 5;
    goto LABEL_635;
  }
  if (v779)
  {
    v780 = (__n128 *)v779;
    operator delete(v779);
  }
}

void sub_2233BBCB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  if (LOBYTE(STACK[0x268]) && SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x360]);
  sub_22318A1C8((_QWORD *)(v1 - 208));
  v3 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v3;
    operator delete(v3);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

__n128 sub_2233BC1F0(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  float v17;
  float v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  float v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 *v44;
  unint64_t v45;
  __n128 *v46;
  float v47;
  float v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  float v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 *v71;
  unint64_t v72;
  __n128 *v73;
  float v74;
  float v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __n128 v88;
  __n128 v89;
  __n128 v90;
  float v91;
  float v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  __n128 v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  uint64_t v106;
  uint64_t v107;
  float v108;
  unint64_t v109;
  __n128 *v110;
  __n128 *v111;
  float v112;
  __n128 *v113;
  float v114;
  __n128 *v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  float v119;
  float v120;
  __n128 *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  BOOL v125;
  unint64_t v126;
  float v127;
  unint64_t v128;
  float v129;
  __n128 *v130;
  __n128 *v131;
  float v132;
  uint64_t v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  float v137;
  float v138;
  __n128 *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 *v146;
  float v147;
  __n128 v148;
  __n128 v149;
  __n128 v150;
  __n128 *v151;
  __n128 *v152;
  __n128 *v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;
  __int128 v157;
  __int128 v158;
  float v159;
  float v160;
  __int128 v161;
  __int128 v162;
  float v163;
  float v164;
  __int128 v165;
  __int128 v166;
  __n128 *v167;
  BOOL v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  __n128 *v173;
  uint64_t v174;
  uint64_t v175;
  _OWORD *v176;
  __int128 v177;
  __int128 v178;
  int64_t v179;
  int64_t v180;
  BOOL v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  float v185;
  uint64_t v186;
  _OWORD *v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  int64_t v193;
  uint64_t v194;
  unint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _OWORD *v199;
  uint64_t v200;
  int64_t v201;
  __n128 v202;
  __n128 v203;
  __n128 v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  _OWORD *v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __n128 v213;
  __n128 v214;
  __n128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  unint64_t v219;
  __n128 v220;
  __n128 v221;
  __int128 v222;
  __int128 v223;
  __n128 v224;
  __n128 v225;
  __n128 v226;
  __n128 v227;
  __n128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __n128 v239;
  __n128 v240;
  __n128 v241;
  __n128 v242;
  __n128 v243;
  __n128 v244;
  __n128 v245;
  __n128 v246;
  __n128 v247;
  __n128 v248;
  __n128 v249;
  __n128 v250;
  __n128 v251;
  __n128 v252;
  __n128 v253;
  __n128 v254;
  __n128 v255;
  __n128 v256;
  __n128 v257;
  __n128 v258;
  __n128 v259;
  __n128 v260;
  __n128 v261;
  __n128 v262;
  __n128 v263;
  __n128 v264;
  __n128 v265;
  __n128 v266;
  __n128 v267;
  __n128 v268;
  __n128 v269;
  __n128 v270;
  __int128 v271;
  __n128 v272;
  __n128 v273;
  __n128 v274;
  __n128 v275;
  __n128 v276;
  __n128 v277;
  __n128 v278;
  __n128 v279;
  __n128 v280;
  __n128 v281;
  __n128 v282;
  __n128 v283;
  __n128 v284;
  __n128 v285;
  __n128 v286;
  __int128 v287;
  __n128 v288;
  __int128 v289;
  __n128 v290;
  __n128 v291;
  __n128 v292;
  __int128 v293;
  __int128 v294;
  __n128 v295;
  __n128 v296;
  __n128 v297;
  __n128 v298;
  __n128 v299;
  __n128 v300;
  __n128 v301;
  __n128 v302;
  __n128 v303;
  __n128 v304;
  __n128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __n128 v309;
  __int128 v310;
  __n128 v311;
  __n128 v312;
  __int128 v313;
  __n128 v314;
  __int128 v315;
  __n128 v316;
  __n128 v317;
  __n128 v318;
  __n128 v319;
  __n128 v320;
  __n128 v321;
  __n128 v322;
  __n128 v323;
  __n128 v324;
  __n128 v325;
  __int128 v326;
  __n128 v327;
  __int128 v328;
  __n128 v329;
  __n128 v330;
  __n128 v331;
  __int128 v332;
  __int128 v333;
  __n128 v334;
  __n128 v335;
  __n128 v336;
  __n128 v337;
  __n128 v338;
  __n128 v339;
  __n128 v340;
  __n128 v341;
  __n128 v342;
  __n128 v343;
  __n128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __n128 v348;
  __int128 v349;
  __n128 v350;
  __n128 v351;
  __int128 v352;
  __n128 v353;
  __int128 v354;
  __n128 v355;
  _BYTE v356[32];
  _BYTE v357[32];
  _BYTE v358[32];
  _BYTE v359[32];
  _BYTE v360[32];
  _BYTE v361[32];
  _BYTE v362[32];
  _BYTE v363[32];
  _BYTE v364[32];
  _BYTE v365[32];
  _BYTE v366[32];
  _BYTE v367[32];
  _BYTE v368[32];
  _BYTE v369[32];
  _BYTE v370[32];
  _BYTE v371[32];
  _BYTE v372[32];
  _BYTE v373[32];
  _BYTE v374[32];
  _BYTE v375[32];
  _BYTE v376[32];
  _BYTE v377[32];
  _BYTE v378[32];
  _BYTE v379[32];
  _BYTE v380[32];
  _BYTE v381[32];
  _BYTE v382[32];
  _BYTE v383[32];
  _BYTE v384[32];
  _BYTE v385[32];
  _BYTE v386[32];
  __n128 v387;
  __int128 v388;
  _BYTE v389[32];
  _BYTE v390[32];
  _BYTE v391[32];
  __n128 v392;
  _BYTE v393[32];
  _BYTE v394[32];

LABEL_1:
  v9 = a2 - 5;
  v10 = a2 - 10;
  v11 = a2 - 15;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v12) >> 4);
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result.n128_u32[0] = a2[-1].n128_u32[0];
        if (result.n128_f32[0] < *(float *)(v12 + 64))
        {
          v264 = *(__n128 *)v12;
          *(_OWORD *)v381 = *(_OWORD *)(v12 + 48);
          *(_OWORD *)&v381[16] = *(_OWORD *)(v12 + 64);
          v303 = *(__n128 *)(v12 + 16);
          v342 = *(__n128 *)(v12 + 32);
          v144 = a2[-3];
          v143 = a2[-2];
          v145 = a2[-4];
          *(__n128 *)(v12 + 60) = *(__n128 *)((char *)a2 - 20);
          *(__n128 *)(v12 + 32) = v144;
          *(__n128 *)(v12 + 48) = v143;
          *(__n128 *)(v12 + 16) = v145;
          *(__n128 *)v12 = a2[-5];
          *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v381[12];
          a2[-3] = v342;
          a2[-2] = *(__n128 *)v381;
          a2[-4] = v303;
          result = v264;
          a2[-5] = v264;
        }
        return result;
      case 3:
        v146 = (__n128 *)(v12 + 80);
        result.n128_u32[0] = *(_DWORD *)(v12 + 144);
        v147 = a2[-1].n128_f32[0];
        if (result.n128_f32[0] >= *(float *)(v12 + 64))
        {
          if (v147 < result.n128_f32[0])
          {
            v351 = *(__n128 *)(v12 + 112);
            *(_OWORD *)v390 = *(_OWORD *)(v12 + 128);
            *(_OWORD *)&v390[16] = *(_OWORD *)(v12 + 144);
            v273 = *v146;
            v312 = *(__n128 *)(v12 + 96);
            v214 = a2[-3];
            v213 = a2[-2];
            v215 = a2[-4];
            *(__n128 *)(v12 + 140) = *(__n128 *)((char *)a2 - 20);
            *(__n128 *)(v12 + 112) = v214;
            *(__n128 *)(v12 + 128) = v213;
            *(__n128 *)(v12 + 96) = v215;
            *v146 = *v9;
            *v9 = v273;
            result = v312;
            *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v390[12];
            a2[-3] = v351;
            a2[-2] = *(__n128 *)v390;
            a2[-4] = v312;
            result.n128_u32[0] = *(_DWORD *)(v12 + 144);
            if (result.n128_f32[0] < *(float *)(v12 + 64))
            {
              v274 = *(__n128 *)v12;
              *(_OWORD *)v391 = *(_OWORD *)(v12 + 48);
              *(_OWORD *)&v391[16] = *(_OWORD *)(v12 + 64);
              v313 = *(_OWORD *)(v12 + 16);
              v352 = *(_OWORD *)(v12 + 32);
              *(_OWORD *)(v12 + 60) = *(_OWORD *)(v12 + 140);
              v216 = *(_OWORD *)(v12 + 128);
              *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 112);
              *(_OWORD *)(v12 + 48) = v216;
              v217 = *(_OWORD *)(v12 + 96);
              *(__n128 *)v12 = *v146;
              *(_OWORD *)(v12 + 16) = v217;
              result = v274;
              *(_OWORD *)(v12 + 140) = *(_OWORD *)&v391[12];
              *(_OWORD *)(v12 + 112) = v352;
              *(_OWORD *)(v12 + 128) = *(_OWORD *)v391;
              *v146 = v274;
              *(_OWORD *)(v12 + 96) = v313;
            }
          }
        }
        else if (v147 >= result.n128_f32[0])
        {
          v276 = *(__n128 *)v12;
          *(_OWORD *)v393 = *(_OWORD *)(v12 + 48);
          *(_OWORD *)&v393[16] = *(_OWORD *)(v12 + 64);
          v315 = *(_OWORD *)(v12 + 16);
          v354 = *(_OWORD *)(v12 + 32);
          *(_OWORD *)(v12 + 60) = *(_OWORD *)(v12 + 140);
          v222 = *(_OWORD *)(v12 + 128);
          *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 112);
          *(_OWORD *)(v12 + 48) = v222;
          v223 = *(_OWORD *)(v12 + 96);
          *(__n128 *)v12 = *v146;
          *(_OWORD *)(v12 + 16) = v223;
          result = v276;
          *(_OWORD *)(v12 + 140) = *(_OWORD *)&v393[12];
          *(_OWORD *)(v12 + 112) = v354;
          *(_OWORD *)(v12 + 128) = *(_OWORD *)v393;
          *v146 = v276;
          *(_OWORD *)(v12 + 96) = v315;
          result.n128_u32[0] = a2[-1].n128_u32[0];
          if (result.n128_f32[0] < *(float *)(v12 + 144))
          {
            v355 = *(__n128 *)(v12 + 112);
            *(_OWORD *)v394 = *(_OWORD *)(v12 + 128);
            *(_OWORD *)&v394[16] = *(_OWORD *)(v12 + 144);
            v277 = *v146;
            v316 = *(__n128 *)(v12 + 96);
            v225 = a2[-3];
            v224 = a2[-2];
            v226 = a2[-4];
            *(__n128 *)(v12 + 140) = *(__n128 *)((char *)a2 - 20);
            *(__n128 *)(v12 + 112) = v225;
            *(__n128 *)(v12 + 128) = v224;
            *(__n128 *)(v12 + 96) = v226;
            *v146 = *v9;
            *v9 = v277;
            result = v316;
            *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v394[12];
            a2[-3] = v355;
            a2[-2] = *(__n128 *)v394;
            a2[-4] = v316;
          }
        }
        else
        {
          v265 = *(__n128 *)v12;
          *(_OWORD *)v382 = *(_OWORD *)(v12 + 48);
          *(_OWORD *)&v382[16] = *(_OWORD *)(v12 + 64);
          v304 = *(__n128 *)(v12 + 16);
          v343 = *(__n128 *)(v12 + 32);
          v149 = a2[-3];
          v148 = a2[-2];
          v150 = a2[-4];
          *(__n128 *)(v12 + 60) = *(__n128 *)((char *)a2 - 20);
          *(__n128 *)(v12 + 32) = v149;
          *(__n128 *)(v12 + 48) = v148;
          *(__n128 *)(v12 + 16) = v150;
          *(__n128 *)v12 = *v9;
          *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v382[12];
          a2[-3] = v343;
          a2[-2] = *(__n128 *)v382;
          a2[-4] = v304;
          result = v265;
          *v9 = v265;
        }
        return result;
      case 4:
        result.n128_u64[0] = sub_2233BDF54((_OWORD *)v12, v12 + 80, v12 + 160, (uint64_t)&a2[-5]).n128_u64[0];
        return result;
      case 5:
        v151 = (__n128 *)(v12 + 80);
        v152 = (__n128 *)(v12 + 160);
        v153 = (__n128 *)(v12 + 240);
        result = sub_2233BDF54((_OWORD *)v12, v12 + 80, v12 + 160, v12 + 240);
        result.n128_u32[0] = a2[-1].n128_u32[0];
        if (result.n128_f32[0] < *(float *)(v12 + 304))
        {
          v344 = *(__n128 *)(v12 + 272);
          *(_OWORD *)v383 = *(_OWORD *)(v12 + 288);
          *(_OWORD *)&v383[16] = *(_OWORD *)(v12 + 304);
          v266 = *v153;
          v305 = *(__n128 *)(v12 + 256);
          v155 = a2[-3];
          v154 = a2[-2];
          v156 = a2[-4];
          *(__n128 *)(v12 + 300) = *(__n128 *)((char *)a2 - 20);
          *(__n128 *)(v12 + 272) = v155;
          *(__n128 *)(v12 + 288) = v154;
          *(__n128 *)(v12 + 256) = v156;
          *v153 = a2[-5];
          a2[-5] = v266;
          result = v305;
          *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v383[12];
          a2[-3] = v344;
          a2[-2] = *(__n128 *)v383;
          a2[-4] = v305;
          result.n128_u32[0] = *(_DWORD *)(v12 + 304);
          if (result.n128_f32[0] < *(float *)(v12 + 224))
          {
            v345 = *(_OWORD *)(v12 + 192);
            *(_OWORD *)v384 = *(_OWORD *)(v12 + 208);
            *(_OWORD *)&v384[16] = *(_OWORD *)(v12 + 224);
            v267 = *v152;
            v306 = *(_OWORD *)(v12 + 176);
            v157 = *(_OWORD *)(v12 + 288);
            *(_OWORD *)(v12 + 192) = *(_OWORD *)(v12 + 272);
            *(_OWORD *)(v12 + 208) = v157;
            *(_OWORD *)(v12 + 220) = *(_OWORD *)(v12 + 300);
            v158 = *(_OWORD *)(v12 + 256);
            *v152 = *v153;
            *(_OWORD *)(v12 + 176) = v158;
            result = v267;
            *(_OWORD *)(v12 + 300) = *(_OWORD *)&v384[12];
            *(_OWORD *)(v12 + 272) = v345;
            *(_OWORD *)(v12 + 288) = *(_OWORD *)v384;
            v159 = *(float *)(v12 + 224);
            v160 = *(float *)(v12 + 144);
            *v153 = v267;
            *(_OWORD *)(v12 + 256) = v306;
            if (v159 < v160)
            {
              v346 = *(_OWORD *)(v12 + 112);
              *(_OWORD *)v385 = *(_OWORD *)(v12 + 128);
              *(_OWORD *)&v385[16] = *(_OWORD *)(v12 + 144);
              v268 = *v151;
              v307 = *(_OWORD *)(v12 + 96);
              v161 = *(_OWORD *)(v12 + 208);
              *(_OWORD *)(v12 + 112) = *(_OWORD *)(v12 + 192);
              *(_OWORD *)(v12 + 128) = v161;
              *(_OWORD *)(v12 + 140) = *(_OWORD *)(v12 + 220);
              v162 = *(_OWORD *)(v12 + 176);
              *v151 = *v152;
              *(_OWORD *)(v12 + 96) = v162;
              result = v268;
              *(_OWORD *)(v12 + 220) = *(_OWORD *)&v385[12];
              *(_OWORD *)(v12 + 192) = v346;
              *(_OWORD *)(v12 + 208) = *(_OWORD *)v385;
              v163 = *(float *)(v12 + 144);
              v164 = *(float *)(v12 + 64);
              *v152 = v268;
              *(_OWORD *)(v12 + 176) = v307;
              if (v163 < v164)
              {
                v269 = *(__n128 *)v12;
                *(_OWORD *)v386 = *(_OWORD *)(v12 + 48);
                *(_OWORD *)&v386[16] = *(_OWORD *)(v12 + 64);
                v308 = *(_OWORD *)(v12 + 16);
                v347 = *(_OWORD *)(v12 + 32);
                *(_OWORD *)(v12 + 60) = *(_OWORD *)(v12 + 140);
                v165 = *(_OWORD *)(v12 + 128);
                *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 112);
                *(_OWORD *)(v12 + 48) = v165;
                v166 = *(_OWORD *)(v12 + 96);
                *(__n128 *)v12 = *v151;
                *(_OWORD *)(v12 + 16) = v166;
                result = v269;
                *(_OWORD *)(v12 + 140) = *(_OWORD *)&v386[12];
                *(_OWORD *)(v12 + 112) = v347;
                *(_OWORD *)(v12 + 128) = *(_OWORD *)v386;
                *v151 = v269;
                *(_OWORD *)(v12 + 96) = v308;
              }
            }
          }
        }
        return result;
      default:
        if (v13 > 1919)
        {
          if (!a3)
          {
            if ((__n128 *)v12 != a2)
            {
              v179 = (unint64_t)(v14 - 2) >> 1;
              v180 = v179;
              do
              {
                if (v179 >= v180)
                {
                  v182 = (2 * v180) | 1;
                  v183 = v12 + 80 * v182;
                  if (2 * v180 + 2 < v14 && *(float *)(v183 + 64) < *(float *)(v183 + 144))
                  {
                    v183 += 80;
                    v182 = 2 * v180 + 2;
                  }
                  v184 = v12 + 80 * v180;
                  v185 = *(float *)(v184 + 64);
                  if (*(float *)(v183 + 64) >= v185)
                  {
                    v349 = *(_OWORD *)(v184 + 32);
                    v388 = *(_OWORD *)(v184 + 48);
                    v271 = *(_OWORD *)v184;
                    v310 = *(_OWORD *)(v184 + 16);
                    v186 = *(_QWORD *)(v184 + 68);
                    do
                    {
                      v187 = (_OWORD *)v184;
                      v184 = v183;
                      *v187 = *(_OWORD *)v183;
                      v188 = *(_OWORD *)(v183 + 16);
                      v189 = *(_OWORD *)(v183 + 32);
                      v190 = *(_OWORD *)(v183 + 48);
                      *(_OWORD *)((char *)v187 + 60) = *(_OWORD *)(v183 + 60);
                      v187[2] = v189;
                      v187[3] = v190;
                      v187[1] = v188;
                      if (v179 < v182)
                        break;
                      v191 = 2 * v182;
                      v182 = (2 * v182) | 1;
                      v183 = v12 + 80 * v182;
                      v192 = v191 + 2;
                      if (v192 < v14 && *(float *)(v183 + 64) < *(float *)(v183 + 144))
                      {
                        v183 += 80;
                        v182 = v192;
                      }
                    }
                    while (*(float *)(v183 + 64) >= v185);
                    *(_OWORD *)(v184 + 32) = v349;
                    *(_OWORD *)(v184 + 48) = v388;
                    *(_OWORD *)v184 = v271;
                    *(_OWORD *)(v184 + 16) = v310;
                    *(float *)(v184 + 64) = v185;
                    *(_QWORD *)(v184 + 68) = v186;
                  }
                }
                v181 = v180-- <= 0;
              }
              while (!v181);
              v193 = v13 / 0x50uLL;
              do
              {
                v194 = 0;
                v272 = *(__n128 *)v12;
                *(_OWORD *)v389 = *(_OWORD *)(v12 + 48);
                *(_OWORD *)&v389[16] = *(_OWORD *)(v12 + 64);
                v311 = *(__n128 *)(v12 + 16);
                v350 = *(__n128 *)(v12 + 32);
                v195 = v12;
                do
                {
                  v199 = (_OWORD *)v195;
                  v195 += 80 * v194 + 80;
                  v200 = 2 * v194;
                  v194 = (2 * v194) | 1;
                  v201 = v200 + 2;
                  if (v201 < v193 && *(float *)(v195 + 64) < *(float *)(v195 + 144))
                  {
                    v195 += 80;
                    v194 = v201;
                  }
                  *v199 = *(_OWORD *)v195;
                  v196 = *(_OWORD *)(v195 + 16);
                  v197 = *(_OWORD *)(v195 + 32);
                  v198 = *(_OWORD *)(v195 + 48);
                  *(_OWORD *)((char *)v199 + 60) = *(_OWORD *)(v195 + 60);
                  v199[2] = v197;
                  v199[3] = v198;
                  v199[1] = v196;
                }
                while (v194 <= (uint64_t)((unint64_t)(v193 - 2) >> 1));
                a2 -= 5;
                if ((__n128 *)v195 == a2)
                {
                  *(__n128 *)v195 = v272;
                  result = v311;
                  *(_OWORD *)(v195 + 60) = *(_OWORD *)&v389[12];
                  *(__n128 *)(v195 + 32) = v350;
                  *(_OWORD *)(v195 + 48) = *(_OWORD *)v389;
                  *(__n128 *)(v195 + 16) = v311;
                }
                else
                {
                  *(__n128 *)v195 = *a2;
                  v202 = a2[1];
                  v203 = a2[2];
                  v204 = a2[3];
                  *(__n128 *)(v195 + 60) = *(__n128 *)((char *)a2 + 60);
                  *(__n128 *)(v195 + 32) = v203;
                  *(__n128 *)(v195 + 48) = v204;
                  *(__n128 *)(v195 + 16) = v202;
                  *(__n128 *)((char *)a2 + 60) = *(__n128 *)&v389[12];
                  a2[2] = v350;
                  a2[3] = *(__n128 *)v389;
                  a2[1] = v311;
                  result = v272;
                  *a2 = v272;
                  v205 = v195 - v12 + 80;
                  if (v205 >= 81)
                  {
                    v206 = (v205 / 0x50uLL - 2) >> 1;
                    v207 = v12 + 80 * v206;
                    result.n128_u32[0] = *(_DWORD *)(v195 + 64);
                    if (*(float *)(v207 + 64) < result.n128_f32[0])
                    {
                      v235 = *(_OWORD *)(v195 + 32);
                      v238 = *(_OWORD *)(v195 + 48);
                      v229 = *(_OWORD *)v195;
                      v232 = *(_OWORD *)(v195 + 16);
                      v208 = *(_QWORD *)(v195 + 68);
                      do
                      {
                        v209 = (_OWORD *)v195;
                        v195 = v207;
                        *v209 = *(_OWORD *)v207;
                        v210 = *(_OWORD *)(v207 + 16);
                        v211 = *(_OWORD *)(v207 + 32);
                        v212 = *(_OWORD *)(v207 + 48);
                        *(_OWORD *)((char *)v209 + 60) = *(_OWORD *)(v207 + 60);
                        v209[2] = v211;
                        v209[3] = v212;
                        v209[1] = v210;
                        if (!v206)
                          break;
                        v206 = (v206 - 1) >> 1;
                        v207 = v12 + 80 * v206;
                      }
                      while (*(float *)(v207 + 64) < result.n128_f32[0]);
                      *(_OWORD *)(v195 + 32) = v235;
                      *(_OWORD *)(v195 + 48) = v238;
                      *(_OWORD *)v195 = v229;
                      *(_OWORD *)(v195 + 16) = v232;
                      *(_DWORD *)(v195 + 64) = result.n128_u32[0];
                      *(_QWORD *)(v195 + 68) = v208;
                    }
                  }
                }
                v181 = v193-- <= 2;
              }
              while (!v181);
            }
            return result;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 80 * ((unint64_t)v14 >> 1));
          v17 = a2[-1].n128_f32[0];
          if ((unint64_t)v13 < 0x2801)
          {
            v22 = *(float *)(v12 + 64);
            if (v22 >= v16[4].n128_f32[0])
            {
              if (v17 < v22)
              {
                v243 = *(__n128 *)v12;
                *(_OWORD *)v360 = *(_OWORD *)(v12 + 48);
                *(_OWORD *)&v360[16] = *(_OWORD *)(v12 + 64);
                v282 = *(__n128 *)(v12 + 16);
                v321 = *(__n128 *)(v12 + 32);
                v33 = a2[-3];
                v32 = a2[-2];
                v34 = a2[-4];
                *(__n128 *)(v12 + 60) = *(__n128 *)((char *)a2 - 20);
                *(__n128 *)(v12 + 32) = v33;
                *(__n128 *)(v12 + 48) = v32;
                *(__n128 *)(v12 + 16) = v34;
                *(__n128 *)v12 = *v9;
                *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v360[12];
                a2[-3] = v321;
                a2[-2] = *(__n128 *)v360;
                a2[-4] = v282;
                *v9 = v243;
                if (*(float *)(v12 + 64) < v16[4].n128_f32[0])
                {
                  v244 = *v16;
                  *(__n128 *)v361 = v16[3];
                  *(__n128 *)&v361[16] = v16[4];
                  v283 = v16[1];
                  v322 = v16[2];
                  v36 = *(__n128 *)(v12 + 32);
                  v35 = *(__n128 *)(v12 + 48);
                  v37 = *(__n128 *)(v12 + 16);
                  *(__n128 *)((char *)v16 + 60) = *(__n128 *)(v12 + 60);
                  v16[2] = v36;
                  v16[3] = v35;
                  v16[1] = v37;
                  *v16 = *(__n128 *)v12;
                  *(_OWORD *)(v12 + 60) = *(_OWORD *)&v361[12];
                  *(__n128 *)(v12 + 32) = v322;
                  *(_OWORD *)(v12 + 48) = *(_OWORD *)v361;
                  *(__n128 *)(v12 + 16) = v283;
                  *(__n128 *)v12 = v244;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_53;
                }
              }
            }
            else
            {
              if (v17 >= v22)
              {
                v249 = *v16;
                *(__n128 *)v366 = v16[3];
                *(__n128 *)&v366[16] = v16[4];
                v288 = v16[1];
                v327 = v16[2];
                v59 = *(__n128 *)(v12 + 32);
                v58 = *(__n128 *)(v12 + 48);
                v60 = *(__n128 *)(v12 + 16);
                *(__n128 *)((char *)v16 + 60) = *(__n128 *)(v12 + 60);
                v16[2] = v59;
                v16[3] = v58;
                v16[1] = v60;
                *v16 = *(__n128 *)v12;
                *(_OWORD *)(v12 + 60) = *(_OWORD *)&v366[12];
                *(__n128 *)(v12 + 32) = v327;
                *(_OWORD *)(v12 + 48) = *(_OWORD *)v366;
                *(__n128 *)(v12 + 16) = v288;
                *(__n128 *)v12 = v249;
                if (a2[-1].n128_f32[0] >= *(float *)(v12 + 64))
                  goto LABEL_31;
                v240 = *(__n128 *)v12;
                *(_OWORD *)v357 = *(_OWORD *)(v12 + 48);
                *(_OWORD *)&v357[16] = *(_OWORD *)(v12 + 64);
                v279 = *(__n128 *)(v12 + 16);
                v318 = *(__n128 *)(v12 + 32);
                v62 = a2[-3];
                v61 = a2[-2];
                v63 = a2[-4];
                *(__n128 *)(v12 + 60) = *(__n128 *)((char *)a2 - 20);
                *(__n128 *)(v12 + 32) = v62;
                *(__n128 *)(v12 + 48) = v61;
                *(__n128 *)(v12 + 16) = v63;
                *(__n128 *)v12 = *v9;
              }
              else
              {
                v240 = *v16;
                *(__n128 *)v357 = v16[3];
                *(__n128 *)&v357[16] = v16[4];
                v279 = v16[1];
                v318 = v16[2];
                v24 = a2[-3];
                v23 = a2[-2];
                v25 = a2[-4];
                *(__n128 *)((char *)v16 + 60) = *(__n128 *)((char *)a2 - 20);
                v16[2] = v24;
                v16[3] = v23;
                v16[1] = v25;
                *v16 = *v9;
              }
              *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v357[12];
              a2[-3] = v318;
              a2[-2] = *(__n128 *)v357;
              a2[-4] = v279;
              *v9 = v240;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_53:
            v64 = *(float *)(v12 + 64);
            if (*(float *)(v12 - 16) < v64)
              goto LABEL_54;
            result = *(__n128 *)v12;
            v234 = *(_OWORD *)(v12 + 32);
            v237 = *(_OWORD *)(v12 + 48);
            v228 = *(__n128 *)v12;
            v231 = *(_OWORD *)(v12 + 16);
            result.n128_u32[0] = *(_DWORD *)(v12 + 64);
            if (result.n128_f32[0] >= a2[-1].n128_f32[0])
            {
              v128 = v12 + 80;
              do
              {
                v12 = v128;
                if (v128 >= (unint64_t)a2)
                  break;
                v129 = *(float *)(v128 + 64);
                v128 += 80;
              }
              while (result.n128_f32[0] >= v129);
            }
            else
            {
              v126 = v12;
              do
              {
                v12 = v126 + 80;
                v127 = *(float *)(v126 + 144);
                v126 += 80;
              }
              while (result.n128_f32[0] >= v127);
            }
            v130 = a2;
            if (v12 < (unint64_t)a2)
            {
              v131 = a2;
              do
              {
                v130 = v131 - 5;
                v132 = v131[-1].n128_f32[0];
                v131 -= 5;
              }
              while (result.n128_f32[0] < v132);
            }
            v133 = *(_QWORD *)(a1 + 68);
            while (v12 < (unint64_t)v130)
            {
              v263 = *(__n128 *)v12;
              *(_OWORD *)v380 = *(_OWORD *)(v12 + 48);
              *(_OWORD *)&v380[16] = *(_OWORD *)(v12 + 64);
              v302 = *(__n128 *)(v12 + 16);
              v341 = *(__n128 *)(v12 + 32);
              v135 = v130[2];
              v134 = v130[3];
              v136 = v130[1];
              *(__n128 *)(v12 + 60) = *(__n128 *)((char *)v130 + 60);
              *(__n128 *)(v12 + 32) = v135;
              *(__n128 *)(v12 + 48) = v134;
              *(__n128 *)(v12 + 16) = v136;
              *(__n128 *)v12 = *v130;
              *(__n128 *)((char *)v130 + 60) = *(__n128 *)&v380[12];
              v130[2] = v341;
              v130[3] = *(__n128 *)v380;
              v130[1] = v302;
              *v130 = v263;
              do
              {
                v137 = *(float *)(v12 + 144);
                v12 += 80;
              }
              while (result.n128_f32[0] >= v137);
              do
              {
                v138 = v130[-1].n128_f32[0];
                v130 -= 5;
              }
              while (result.n128_f32[0] < v138);
            }
            v139 = (__n128 *)(v12 - 80);
            if (v12 - 80 != a1)
            {
              *(__n128 *)a1 = *v139;
              v140 = *(_OWORD *)(v12 - 64);
              v141 = *(_OWORD *)(v12 - 48);
              v142 = *(_OWORD *)(v12 - 32);
              *(_OWORD *)(a1 + 60) = *(_OWORD *)(v12 - 20);
              *(_OWORD *)(a1 + 32) = v141;
              *(_OWORD *)(a1 + 48) = v142;
              *(_OWORD *)(a1 + 16) = v140;
            }
            a4 = 0;
            *(_OWORD *)(v12 - 48) = v234;
            *(_OWORD *)(v12 - 32) = v237;
            *v139 = v228;
            *(_OWORD *)(v12 - 64) = v231;
            *(_DWORD *)(v12 - 16) = result.n128_u32[0];
            *(_QWORD *)(v12 - 12) = v133;
            continue;
          }
          v18 = v16[4].n128_f32[0];
          if (v18 >= *(float *)(v12 + 64))
          {
            if (v17 < v18)
            {
              v241 = *v16;
              *(__n128 *)v358 = v16[3];
              *(__n128 *)&v358[16] = v16[4];
              v280 = v16[1];
              v319 = v16[2];
              v27 = a2[-3];
              v26 = a2[-2];
              v28 = a2[-4];
              *(__n128 *)((char *)v16 + 60) = *(__n128 *)((char *)a2 - 20);
              v16[2] = v27;
              v16[3] = v26;
              v16[1] = v28;
              *v16 = *v9;
              *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v358[12];
              a2[-3] = v319;
              a2[-2] = *(__n128 *)v358;
              a2[-4] = v280;
              *v9 = v241;
              if (v16[4].n128_f32[0] < *(float *)(v12 + 64))
              {
                v242 = *(__n128 *)v12;
                *(_OWORD *)v359 = *(_OWORD *)(v12 + 48);
                *(_OWORD *)&v359[16] = *(_OWORD *)(v12 + 64);
                v281 = *(__n128 *)(v12 + 16);
                v320 = *(__n128 *)(v12 + 32);
                v30 = v16[2];
                v29 = v16[3];
                v31 = v16[1];
                *(__n128 *)(v12 + 60) = *(__n128 *)((char *)v16 + 60);
                *(__n128 *)(v12 + 32) = v30;
                *(__n128 *)(v12 + 48) = v29;
                *(__n128 *)(v12 + 16) = v31;
                *(__n128 *)v12 = *v16;
                *(__n128 *)((char *)v16 + 60) = *(__n128 *)&v359[12];
                v16[2] = v320;
                v16[3] = *(__n128 *)v359;
                v16[1] = v281;
                *v16 = v242;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v245 = *(__n128 *)v12;
              *(_OWORD *)v362 = *(_OWORD *)(v12 + 48);
              *(_OWORD *)&v362[16] = *(_OWORD *)(v12 + 64);
              v284 = *(__n128 *)(v12 + 16);
              v323 = *(__n128 *)(v12 + 32);
              v39 = v16[2];
              v38 = v16[3];
              v40 = v16[1];
              *(__n128 *)(v12 + 60) = *(__n128 *)((char *)v16 + 60);
              *(__n128 *)(v12 + 32) = v39;
              *(__n128 *)(v12 + 48) = v38;
              *(__n128 *)(v12 + 16) = v40;
              *(__n128 *)v12 = *v16;
              *(__n128 *)((char *)v16 + 60) = *(__n128 *)&v362[12];
              v16[2] = v323;
              v16[3] = *(__n128 *)v362;
              v16[1] = v284;
              *v16 = v245;
              if (a2[-1].n128_f32[0] >= v16[4].n128_f32[0])
                goto LABEL_22;
              v239 = *v16;
              *(__n128 *)v356 = v16[3];
              *(__n128 *)&v356[16] = v16[4];
              v278 = v16[1];
              v317 = v16[2];
              v42 = a2[-3];
              v41 = a2[-2];
              v43 = a2[-4];
              *(__n128 *)((char *)v16 + 60) = *(__n128 *)((char *)a2 - 20);
              v16[2] = v42;
              v16[3] = v41;
              v16[1] = v43;
              *v16 = *v9;
            }
            else
            {
              v239 = *(__n128 *)v12;
              *(_OWORD *)v356 = *(_OWORD *)(v12 + 48);
              *(_OWORD *)&v356[16] = *(_OWORD *)(v12 + 64);
              v278 = *(__n128 *)(v12 + 16);
              v317 = *(__n128 *)(v12 + 32);
              v20 = a2[-3];
              v19 = a2[-2];
              v21 = a2[-4];
              *(__n128 *)(v12 + 60) = *(__n128 *)((char *)a2 - 20);
              *(__n128 *)(v12 + 32) = v20;
              *(__n128 *)(v12 + 48) = v19;
              *(__n128 *)(v12 + 16) = v21;
              *(__n128 *)v12 = *v9;
            }
            *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v356[12];
            a2[-3] = v317;
            a2[-2] = *(__n128 *)v356;
            a2[-4] = v278;
            *v9 = v239;
          }
LABEL_22:
          v44 = (__n128 *)(v12 + 80);
          v45 = v12 + 80 * v15;
          v46 = (__n128 *)(v45 - 80);
          v47 = *(float *)(v45 - 16);
          v48 = a2[-6].n128_f32[0];
          if (v47 >= *(float *)(v12 + 144))
          {
            if (v48 < v47)
            {
              v247 = *v46;
              *(_OWORD *)v364 = *(_OWORD *)(v45 - 32);
              *(_OWORD *)&v364[16] = *(_OWORD *)(v45 - 16);
              v286 = *(__n128 *)(v45 - 64);
              v325 = *(__n128 *)(v45 - 48);
              v53 = a2[-8];
              v52 = a2[-7];
              v54 = a2[-9];
              *(__n128 *)(v45 - 20) = *(__n128 *)((char *)a2 - 100);
              *(__n128 *)(v45 - 48) = v53;
              *(__n128 *)(v45 - 32) = v52;
              *(__n128 *)(v45 - 64) = v54;
              *v46 = *v10;
              *(__n128 *)((char *)a2 - 100) = *(__n128 *)&v364[12];
              a2[-8] = v325;
              a2[-7] = *(__n128 *)v364;
              a2[-9] = v286;
              *v10 = v247;
              if (*(float *)(v45 - 16) < *(float *)(v12 + 144))
              {
                v326 = *(_OWORD *)(v12 + 112);
                *(_OWORD *)v365 = *(_OWORD *)(v12 + 128);
                *(_OWORD *)&v365[16] = *(_OWORD *)(v12 + 144);
                v248 = *v44;
                v287 = *(_OWORD *)(v12 + 96);
                v56 = *(_OWORD *)(v45 - 48);
                v55 = *(_OWORD *)(v45 - 32);
                v57 = *(_OWORD *)(v45 - 64);
                *(_OWORD *)(v12 + 140) = *(_OWORD *)(v45 - 20);
                *(_OWORD *)(v12 + 112) = v56;
                *(_OWORD *)(v12 + 128) = v55;
                *(_OWORD *)(v12 + 96) = v57;
                *v44 = *v46;
                *v46 = v248;
                *(_OWORD *)(v45 - 20) = *(_OWORD *)&v365[12];
                *(_OWORD *)(v45 - 48) = v326;
                *(_OWORD *)(v45 - 32) = *(_OWORD *)v365;
                *(_OWORD *)(v45 - 64) = v287;
              }
            }
          }
          else if (v48 >= v47)
          {
            v328 = *(_OWORD *)(v12 + 112);
            *(_OWORD *)v367 = *(_OWORD *)(v12 + 128);
            *(_OWORD *)&v367[16] = *(_OWORD *)(v12 + 144);
            v250 = *v44;
            v289 = *(_OWORD *)(v12 + 96);
            v66 = *(_OWORD *)(v45 - 48);
            v65 = *(_OWORD *)(v45 - 32);
            v67 = *(_OWORD *)(v45 - 64);
            *(_OWORD *)(v12 + 140) = *(_OWORD *)(v45 - 20);
            *(_OWORD *)(v12 + 112) = v66;
            *(_OWORD *)(v12 + 128) = v65;
            *(_OWORD *)(v12 + 96) = v67;
            *v44 = *v46;
            *v46 = v250;
            *(_OWORD *)(v45 - 20) = *(_OWORD *)&v367[12];
            *(_OWORD *)(v45 - 48) = v328;
            *(_OWORD *)(v45 - 32) = *(_OWORD *)v367;
            *(_OWORD *)(v45 - 64) = v289;
            if (a2[-6].n128_f32[0] < *(float *)(v45 - 16))
            {
              v251 = *v46;
              *(_OWORD *)v368 = *(_OWORD *)(v45 - 32);
              *(_OWORD *)&v368[16] = *(_OWORD *)(v45 - 16);
              v290 = *(__n128 *)(v45 - 64);
              v329 = *(__n128 *)(v45 - 48);
              v69 = a2[-8];
              v68 = a2[-7];
              v70 = a2[-9];
              *(__n128 *)(v45 - 20) = *(__n128 *)((char *)a2 - 100);
              *(__n128 *)(v45 - 48) = v69;
              *(__n128 *)(v45 - 32) = v68;
              *(__n128 *)(v45 - 64) = v70;
              *v46 = *v10;
              *(__n128 *)((char *)a2 - 100) = *(__n128 *)&v368[12];
              a2[-8] = v329;
              a2[-7] = *(__n128 *)v368;
              a2[-9] = v290;
              *v10 = v251;
            }
          }
          else
          {
            v324 = *(__n128 *)(v12 + 112);
            *(_OWORD *)v363 = *(_OWORD *)(v12 + 128);
            *(_OWORD *)&v363[16] = *(_OWORD *)(v12 + 144);
            v246 = *v44;
            v285 = *(__n128 *)(v12 + 96);
            v50 = a2[-8];
            v49 = a2[-7];
            v51 = a2[-9];
            *(__n128 *)(v12 + 140) = *(__n128 *)((char *)a2 - 100);
            *(__n128 *)(v12 + 112) = v50;
            *(__n128 *)(v12 + 128) = v49;
            *(__n128 *)(v12 + 96) = v51;
            *v44 = *v10;
            *v10 = v246;
            *(__n128 *)((char *)a2 - 100) = *(__n128 *)&v363[12];
            a2[-8] = v324;
            a2[-7] = *(__n128 *)v363;
            a2[-9] = v285;
          }
          v71 = (__n128 *)(v12 + 160);
          v72 = v12 + 80 * v15;
          v73 = (__n128 *)(v72 + 80);
          v74 = *(float *)(v72 + 144);
          v75 = a2[-11].n128_f32[0];
          if (v74 >= *(float *)(v12 + 224))
          {
            if (v75 < v74)
            {
              v253 = *v73;
              *(_OWORD *)v370 = *(_OWORD *)(v72 + 128);
              *(_OWORD *)&v370[16] = *(_OWORD *)(v72 + 144);
              v292 = *(__n128 *)(v72 + 96);
              v331 = *(__n128 *)(v72 + 112);
              v80 = a2[-13];
              v79 = a2[-12];
              v81 = a2[-14];
              *(__n128 *)(v72 + 140) = *(__n128 *)((char *)a2 - 180);
              *(__n128 *)(v72 + 112) = v80;
              *(__n128 *)(v72 + 128) = v79;
              *(__n128 *)(v72 + 96) = v81;
              *v73 = *v11;
              *(__n128 *)((char *)a2 - 180) = *(__n128 *)&v370[12];
              a2[-13] = v331;
              a2[-12] = *(__n128 *)v370;
              a2[-14] = v292;
              *v11 = v253;
              if (*(float *)(v72 + 144) < *(float *)(v12 + 224))
              {
                v332 = *(_OWORD *)(v12 + 192);
                *(_OWORD *)v371 = *(_OWORD *)(v12 + 208);
                *(_OWORD *)&v371[16] = *(_OWORD *)(v12 + 224);
                v254 = *v71;
                v293 = *(_OWORD *)(v12 + 176);
                v83 = *(_OWORD *)(v72 + 112);
                v82 = *(_OWORD *)(v72 + 128);
                v84 = *(_OWORD *)(v72 + 96);
                *(_OWORD *)(v12 + 220) = *(_OWORD *)(v72 + 140);
                *(_OWORD *)(v12 + 192) = v83;
                *(_OWORD *)(v12 + 208) = v82;
                *(_OWORD *)(v12 + 176) = v84;
                *v71 = *v73;
                *v73 = v254;
                *(_OWORD *)(v72 + 140) = *(_OWORD *)&v371[12];
                *(_OWORD *)(v72 + 112) = v332;
                *(_OWORD *)(v72 + 128) = *(_OWORD *)v371;
                *(_OWORD *)(v72 + 96) = v293;
              }
            }
          }
          else if (v75 >= v74)
          {
            v333 = *(_OWORD *)(v12 + 192);
            *(_OWORD *)v372 = *(_OWORD *)(v12 + 208);
            *(_OWORD *)&v372[16] = *(_OWORD *)(v12 + 224);
            v255 = *v71;
            v294 = *(_OWORD *)(v12 + 176);
            v86 = *(_OWORD *)(v72 + 112);
            v85 = *(_OWORD *)(v72 + 128);
            v87 = *(_OWORD *)(v72 + 96);
            *(_OWORD *)(v12 + 220) = *(_OWORD *)(v72 + 140);
            *(_OWORD *)(v12 + 192) = v86;
            *(_OWORD *)(v12 + 208) = v85;
            *(_OWORD *)(v12 + 176) = v87;
            *v71 = *v73;
            *v73 = v255;
            *(_OWORD *)(v72 + 140) = *(_OWORD *)&v372[12];
            *(_OWORD *)(v72 + 112) = v333;
            *(_OWORD *)(v72 + 128) = *(_OWORD *)v372;
            *(_OWORD *)(v72 + 96) = v294;
            if (a2[-11].n128_f32[0] < *(float *)(v72 + 144))
            {
              v256 = *v73;
              *(_OWORD *)v373 = *(_OWORD *)(v72 + 128);
              *(_OWORD *)&v373[16] = *(_OWORD *)(v72 + 144);
              v295 = *(__n128 *)(v72 + 96);
              v334 = *(__n128 *)(v72 + 112);
              v89 = a2[-13];
              v88 = a2[-12];
              v90 = a2[-14];
              *(__n128 *)(v72 + 140) = *(__n128 *)((char *)a2 - 180);
              *(__n128 *)(v72 + 112) = v89;
              *(__n128 *)(v72 + 128) = v88;
              *(__n128 *)(v72 + 96) = v90;
              *v73 = *v11;
              *(__n128 *)((char *)a2 - 180) = *(__n128 *)&v373[12];
              a2[-13] = v334;
              a2[-12] = *(__n128 *)v373;
              a2[-14] = v295;
              *v11 = v256;
            }
          }
          else
          {
            v330 = *(__n128 *)(v12 + 192);
            *(_OWORD *)v369 = *(_OWORD *)(v12 + 208);
            *(_OWORD *)&v369[16] = *(_OWORD *)(v12 + 224);
            v252 = *v71;
            v291 = *(__n128 *)(v12 + 176);
            v77 = a2[-13];
            v76 = a2[-12];
            v78 = a2[-14];
            *(__n128 *)(v12 + 220) = *(__n128 *)((char *)a2 - 180);
            *(__n128 *)(v12 + 192) = v77;
            *(__n128 *)(v12 + 208) = v76;
            *(__n128 *)(v12 + 176) = v78;
            *v71 = *v11;
            *v11 = v252;
            *(__n128 *)((char *)a2 - 180) = *(__n128 *)&v369[12];
            a2[-13] = v330;
            a2[-12] = *(__n128 *)v369;
            a2[-14] = v291;
          }
          v91 = v16[4].n128_f32[0];
          v92 = *(float *)(v72 + 144);
          if (v91 >= v46[4].n128_f32[0])
          {
            if (v92 < v91)
            {
              v258 = *v16;
              *(__n128 *)v375 = v16[3];
              *(__n128 *)&v375[16] = v16[4];
              v297 = v16[1];
              v336 = v16[2];
              *(__n128 *)((char *)v16 + 60) = *(__n128 *)(v72 + 140);
              v95 = *(__n128 *)(v72 + 128);
              v16[2] = *(__n128 *)(v72 + 112);
              v16[3] = v95;
              v96 = *(__n128 *)(v72 + 96);
              *v16 = *v73;
              v16[1] = v96;
              *v73 = v258;
              *(__n128 *)(v72 + 96) = v297;
              *(__n128 *)(v72 + 112) = v336;
              *(_OWORD *)(v72 + 140) = *(_OWORD *)&v375[12];
              *(_OWORD *)(v72 + 128) = *(_OWORD *)v375;
              if (v16[4].n128_f32[0] < v46[4].n128_f32[0])
              {
                v259 = *v46;
                *(__n128 *)v376 = v46[3];
                *(__n128 *)&v376[16] = v46[4];
                v298 = v46[1];
                v337 = v46[2];
                *(__n128 *)((char *)v46 + 60) = *(__n128 *)((char *)v16 + 60);
                v97 = v16[3];
                v46[2] = v16[2];
                v46[3] = v97;
                v98 = v16[1];
                *v46 = *v16;
                v46[1] = v98;
                *v16 = v259;
                v16[1] = v298;
                v16[2] = v337;
                *(__n128 *)((char *)v16 + 60) = *(__n128 *)&v376[12];
                v16[3] = *(__n128 *)v376;
              }
            }
          }
          else
          {
            if (v92 >= v91)
            {
              v260 = *v46;
              *(__n128 *)v377 = v46[3];
              *(__n128 *)&v377[16] = v46[4];
              v299 = v46[1];
              v338 = v46[2];
              *(__n128 *)((char *)v46 + 60) = *(__n128 *)((char *)v16 + 60);
              v99 = v16[3];
              v46[2] = v16[2];
              v46[3] = v99;
              v100 = v16[1];
              *v46 = *v16;
              v46[1] = v100;
              *v16 = v260;
              v16[1] = v299;
              v16[2] = v338;
              *(__n128 *)((char *)v16 + 60) = *(__n128 *)&v377[12];
              v16[3] = *(__n128 *)v377;
              if (*(float *)(v72 + 144) >= v16[4].n128_f32[0])
                goto LABEL_52;
              v257 = *v16;
              *(__n128 *)v374 = v16[3];
              *(__n128 *)&v374[16] = v16[4];
              v296 = v16[1];
              v335 = v16[2];
              *(__n128 *)((char *)v16 + 60) = *(__n128 *)(v72 + 140);
              v101 = *(__n128 *)(v72 + 128);
              v16[2] = *(__n128 *)(v72 + 112);
              v16[3] = v101;
              v102 = *(__n128 *)(v72 + 96);
              *v16 = *v73;
              v16[1] = v102;
            }
            else
            {
              v257 = *v46;
              *(__n128 *)v374 = v46[3];
              *(__n128 *)&v374[16] = v46[4];
              v296 = v46[1];
              v335 = v46[2];
              *(__n128 *)((char *)v46 + 60) = *(__n128 *)(v72 + 140);
              v93 = *(__n128 *)(v72 + 128);
              v46[2] = *(__n128 *)(v72 + 112);
              v46[3] = v93;
              v94 = *(__n128 *)(v72 + 96);
              *v46 = *v73;
              v46[1] = v94;
            }
            *v73 = v257;
            *(__n128 *)(v72 + 96) = v296;
            *(__n128 *)(v72 + 112) = v335;
            *(_OWORD *)(v72 + 140) = *(_OWORD *)&v374[12];
            *(_OWORD *)(v72 + 128) = *(_OWORD *)v374;
          }
LABEL_52:
          v261 = *(__n128 *)v12;
          *(_OWORD *)v378 = *(_OWORD *)(v12 + 48);
          *(_OWORD *)&v378[16] = *(_OWORD *)(v12 + 64);
          v300 = *(__n128 *)(v12 + 16);
          v339 = *(__n128 *)(v12 + 32);
          v104 = v16[2];
          v103 = v16[3];
          v105 = v16[1];
          *(__n128 *)(v12 + 60) = *(__n128 *)((char *)v16 + 60);
          *(__n128 *)(v12 + 32) = v104;
          *(__n128 *)(v12 + 48) = v103;
          *(__n128 *)(v12 + 16) = v105;
          *(__n128 *)v12 = *v16;
          *(__n128 *)((char *)v16 + 60) = *(__n128 *)&v378[12];
          v16[2] = v339;
          v16[3] = *(__n128 *)v378;
          v16[1] = v300;
          *v16 = v261;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_53;
LABEL_32:
          v64 = *(float *)(v12 + 64);
LABEL_54:
          v106 = 0;
          v233 = *(_OWORD *)(v12 + 32);
          v236 = *(_OWORD *)(v12 + 48);
          v227 = *(__n128 *)v12;
          v230 = *(_OWORD *)(v12 + 16);
          v107 = *(_QWORD *)(v12 + 68);
          do
          {
            v108 = *(float *)(v12 + v106 + 144);
            v106 += 80;
          }
          while (v108 < v64);
          v109 = v12 + v106;
          v110 = a2;
          if (v106 == 80)
          {
            v113 = a2;
            while (v109 < (unint64_t)v113)
            {
              v111 = v113 - 5;
              v114 = v113[-1].n128_f32[0];
              v113 -= 5;
              if (v114 < v64)
                goto LABEL_62;
            }
            v111 = v113;
            v12 = v109;
          }
          else
          {
            do
            {
              v111 = v110 - 5;
              v112 = v110[-1].n128_f32[0];
              v110 -= 5;
            }
            while (v112 >= v64);
LABEL_62:
            v12 = v109;
            if (v109 < (unint64_t)v111)
            {
              v115 = v111;
              do
              {
                v262 = *(__n128 *)v12;
                *(_OWORD *)v379 = *(_OWORD *)(v12 + 48);
                *(_OWORD *)&v379[16] = *(_OWORD *)(v12 + 64);
                v301 = *(__n128 *)(v12 + 16);
                v340 = *(__n128 *)(v12 + 32);
                v117 = v115[2];
                v116 = v115[3];
                v118 = v115[1];
                *(__n128 *)(v12 + 60) = *(__n128 *)((char *)v115 + 60);
                *(__n128 *)(v12 + 32) = v117;
                *(__n128 *)(v12 + 48) = v116;
                *(__n128 *)(v12 + 16) = v118;
                *(__n128 *)v12 = *v115;
                *(__n128 *)((char *)v115 + 60) = *(__n128 *)&v379[12];
                v115[2] = v340;
                v115[3] = *(__n128 *)v379;
                v115[1] = v301;
                *v115 = v262;
                do
                {
                  v119 = *(float *)(v12 + 144);
                  v12 += 80;
                }
                while (v119 < v64);
                do
                {
                  v120 = v115[-1].n128_f32[0];
                  v115 -= 5;
                }
                while (v120 >= v64);
              }
              while (v12 < (unint64_t)v115);
            }
          }
          v121 = (__n128 *)(v12 - 80);
          if (v12 - 80 != a1)
          {
            *(__n128 *)a1 = *v121;
            v122 = *(_OWORD *)(v12 - 64);
            v123 = *(_OWORD *)(v12 - 48);
            v124 = *(_OWORD *)(v12 - 32);
            *(_OWORD *)(a1 + 60) = *(_OWORD *)(v12 - 20);
            *(_OWORD *)(a1 + 32) = v123;
            *(_OWORD *)(a1 + 48) = v124;
            *(_OWORD *)(a1 + 16) = v122;
          }
          *(_OWORD *)(v12 - 48) = v233;
          *(_OWORD *)(v12 - 32) = v236;
          *v121 = v227;
          *(_OWORD *)(v12 - 64) = v230;
          *(float *)(v12 - 16) = v64;
          *(_QWORD *)(v12 - 12) = v107;
          if (v109 < (unint64_t)v111)
            goto LABEL_73;
          v125 = sub_2233BD878(a1, v12 - 80);
          if (!sub_2233BD878(v12, (uint64_t)a2))
          {
            if (v125)
              continue;
LABEL_73:
            sub_2233BC1F0(a1, v12 - 80, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 80);
          if (v125)
            return result;
          goto LABEL_1;
        }
        v167 = (__n128 *)(v12 + 80);
        v169 = (__n128 *)v12 == a2 || v167 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v169)
          {
            v170 = 0;
            v171 = v12;
            do
            {
              v173 = v167;
              result.n128_u32[0] = *(_DWORD *)(v171 + 144);
              if (result.n128_f32[0] < *(float *)(v171 + 64))
              {
                v348 = v167[2];
                v387 = v167[3];
                v270 = *v167;
                v309 = v167[1];
                v174 = *(_QWORD *)(v171 + 148);
                v175 = v170;
                do
                {
                  v176 = (_OWORD *)(v12 + v175);
                  v177 = *(_OWORD *)(v12 + v175 + 48);
                  v176[7] = *(_OWORD *)(v12 + v175 + 32);
                  v176[8] = v177;
                  *(_OWORD *)((char *)v176 + 140) = *(_OWORD *)(v12 + v175 + 60);
                  v178 = *(_OWORD *)(v12 + v175 + 16);
                  v176[5] = *(_OWORD *)(v12 + v175);
                  v176[6] = v178;
                  if (!v175)
                  {
                    v172 = v12;
                    goto LABEL_118;
                  }
                  v175 -= 80;
                }
                while (result.n128_f32[0] < *((float *)v176 - 4));
                v172 = v12 + v175 + 80;
LABEL_118:
                *(__n128 *)(v172 + 32) = v348;
                *(__n128 *)(v172 + 48) = v387;
                *(__n128 *)v172 = v270;
                *(__n128 *)(v172 + 16) = v309;
                *(_DWORD *)(v172 + 64) = result.n128_u32[0];
                *(_QWORD *)(v172 + 68) = v174;
              }
              v167 = v173 + 5;
              v170 += 80;
              v171 = (unint64_t)v173;
            }
            while (&v173[5] != a2);
          }
        }
        else if (!v169)
        {
          do
          {
            v218 = (uint64_t)v167;
            result.n128_u32[0] = *(_DWORD *)(a1 + 144);
            if (result.n128_f32[0] < *(float *)(a1 + 64))
            {
              v353 = v167[2];
              v392 = v167[3];
              v275 = *v167;
              v314 = v167[1];
              v219 = *(_QWORD *)(a1 + 148);
              do
              {
                v220 = v167[-2];
                v167[2] = v167[-3];
                v167[3] = v220;
                *(__n128 *)((char *)v167 + 60) = *(__n128 *)((char *)v167 - 20);
                v221 = v167[-4];
                *v167 = v167[-5];
                v167[1] = v221;
                v221.n128_u32[0] = v167[-6].n128_u32[0];
                v167 -= 5;
              }
              while (result.n128_f32[0] < v221.n128_f32[0]);
              v167[2] = v353;
              v167[3] = v392;
              *v167 = v275;
              v167[1] = v314;
              v167[4].n128_u32[0] = result.n128_u32[0];
              *(unint64_t *)((char *)v167[4].n128_u64 + 4) = v219;
            }
            v167 = (__n128 *)(v218 + 80);
            a1 = v218;
          }
          while ((__n128 *)(v218 + 80) != a2);
        }
        return result;
    }
  }
}

  v7 = (__n128 *)(a2 - 80);
  v8 = (__n128 *)(a2 - 160);
  v9 = (__n128 *)(a2 - 240);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 4);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(_QWORD *)(a2 - 64) > *(_QWORD *)(v10 + 16))
        {
          v279 = *(__n128 *)v10;
          *(_OWORD *)v396 = *(_OWORD *)(v10 + 48);
          *(_OWORD *)&v396[16] = *(_OWORD *)(v10 + 64);
          v318 = *(_OWORD *)(v10 + 16);
          v357 = *(_OWORD *)(v10 + 32);
          v147 = *(_OWORD *)(a2 - 48);
          result = *(__n128 *)(a2 - 32);
          v148 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(v10 + 60) = *(_OWORD *)(a2 - 20);
          *(_OWORD *)(v10 + 32) = v147;
          *(__n128 *)(v10 + 48) = result;
          *(_OWORD *)(v10 + 16) = v148;
          *(_OWORD *)v10 = *(_OWORD *)(a2 - 80);
          *(_OWORD *)(a2 - 20) = *(_OWORD *)&v396[12];
          *(_OWORD *)(a2 - 48) = v357;
          *(_OWORD *)(a2 - 32) = *(_OWORD *)v396;
          *(_OWORD *)(a2 - 64) = v318;
          result.n128_u64[0] = v279.n128_u64[0];
          *(__n128 *)(a2 - 80) = v279;
        }
        return result;
      case 3:
        v149 = (__n128 *)(v10 + 80);
        v150 = *(_QWORD *)(v10 + 96);
        v151 = *(_QWORD *)(a2 - 64);
        if (v150 <= *(_QWORD *)(v10 + 16))
        {
          if (v151 > v150)
          {
            v366 = *(_OWORD *)(v10 + 112);
            *(_OWORD *)v405 = *(_OWORD *)(v10 + 128);
            *(_OWORD *)&v405[16] = *(_OWORD *)(v10 + 144);
            v288 = *v149;
            v327 = *(__n128 *)(v10 + 96);
            v219 = *(_OWORD *)(a2 - 48);
            v218 = *(_OWORD *)(a2 - 32);
            v220 = *(_OWORD *)(a2 - 64);
            *(_OWORD *)(v10 + 140) = *(_OWORD *)(a2 - 20);
            *(_OWORD *)(v10 + 112) = v219;
            *(_OWORD *)(v10 + 128) = v218;
            *(_OWORD *)(v10 + 96) = v220;
            *v149 = *v7;
            *v7 = v288;
            result = v327;
            *(_OWORD *)(a2 - 20) = *(_OWORD *)&v405[12];
            *(_OWORD *)(a2 - 48) = v366;
            *(_OWORD *)(a2 - 32) = *(_OWORD *)v405;
            *(__n128 *)(a2 - 64) = v327;
            if (*(_QWORD *)(v10 + 96) > *(_QWORD *)(v10 + 16))
            {
              v289 = *(__n128 *)v10;
              *(_OWORD *)v406 = *(_OWORD *)(v10 + 48);
              *(_OWORD *)&v406[16] = *(_OWORD *)(v10 + 64);
              v328 = *(_OWORD *)(v10 + 16);
              v367 = *(_OWORD *)(v10 + 32);
              *(_OWORD *)(v10 + 60) = *(_OWORD *)(v10 + 140);
              v221 = *(_OWORD *)(v10 + 128);
              *(_OWORD *)(v10 + 32) = *(_OWORD *)(v10 + 112);
              *(_OWORD *)(v10 + 48) = v221;
              v222 = *(_OWORD *)(v10 + 96);
              *(__n128 *)v10 = *v149;
              *(_OWORD *)(v10 + 16) = v222;
              result = v289;
              *(_OWORD *)(v10 + 140) = *(_OWORD *)&v406[12];
              *(_OWORD *)(v10 + 112) = v367;
              *(_OWORD *)(v10 + 128) = *(_OWORD *)v406;
              *v149 = v289;
              *(_OWORD *)(v10 + 96) = v328;
            }
          }
        }
        else if (v151 <= v150)
        {
          v291 = *(__n128 *)v10;
          *(_OWORD *)v408 = *(_OWORD *)(v10 + 48);
          *(_OWORD *)&v408[16] = *(_OWORD *)(v10 + 64);
          v330 = *(_OWORD *)(v10 + 16);
          v369 = *(_OWORD *)(v10 + 32);
          *(_OWORD *)(v10 + 60) = *(_OWORD *)(v10 + 140);
          v230 = *(_OWORD *)(v10 + 128);
          *(_OWORD *)(v10 + 32) = *(_OWORD *)(v10 + 112);
          *(_OWORD *)(v10 + 48) = v230;
          v231 = *(_OWORD *)(v10 + 96);
          *(__n128 *)v10 = *v149;
          *(_OWORD *)(v10 + 16) = v231;
          result = v291;
          *(_OWORD *)(v10 + 140) = *(_OWORD *)&v408[12];
          *(_OWORD *)(v10 + 112) = v369;
          *(_OWORD *)(v10 + 128) = *(_OWORD *)v408;
          *v149 = v291;
          *(_OWORD *)(v10 + 96) = v330;
          if (*(_QWORD *)(a2 - 64) > *(_QWORD *)(v10 + 96))
          {
            v370 = *(_OWORD *)(v10 + 112);
            *(_OWORD *)v409 = *(_OWORD *)(v10 + 128);
            *(_OWORD *)&v409[16] = *(_OWORD *)(v10 + 144);
            v292 = *v149;
            v331 = *(__n128 *)(v10 + 96);
            v233 = *(_OWORD *)(a2 - 48);
            v232 = *(_OWORD *)(a2 - 32);
            v234 = *(_OWORD *)(a2 - 64);
            *(_OWORD *)(v10 + 140) = *(_OWORD *)(a2 - 20);
            *(_OWORD *)(v10 + 112) = v233;
            *(_OWORD *)(v10 + 128) = v232;
            *(_OWORD *)(v10 + 96) = v234;
            *v149 = *v7;
            *v7 = v292;
            result = v331;
            *(_OWORD *)(a2 - 20) = *(_OWORD *)&v409[12];
            *(_OWORD *)(a2 - 48) = v370;
            *(_OWORD *)(a2 - 32) = *(_OWORD *)v409;
            *(__n128 *)(a2 - 64) = v331;
          }
        }
        else
        {
          v280 = *(__n128 *)v10;
          *(_OWORD *)v397 = *(_OWORD *)(v10 + 48);
          *(_OWORD *)&v397[16] = *(_OWORD *)(v10 + 64);
          v319 = *(_OWORD *)(v10 + 16);
          v358 = *(_OWORD *)(v10 + 32);
          v152 = *(_OWORD *)(a2 - 48);
          result = *(__n128 *)(a2 - 32);
          v153 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(v10 + 60) = *(_OWORD *)(a2 - 20);
          *(_OWORD *)(v10 + 32) = v152;
          *(__n128 *)(v10 + 48) = result;
          *(_OWORD *)(v10 + 16) = v153;
          *(__n128 *)v10 = *v7;
          *(_OWORD *)(a2 - 20) = *(_OWORD *)&v397[12];
          *(_OWORD *)(a2 - 48) = v358;
          *(_OWORD *)(a2 - 32) = *(_OWORD *)v397;
          *(_OWORD *)(a2 - 64) = v319;
          result.n128_u64[0] = v280.n128_u64[0];
          *v7 = v280;
        }
        return result;
      case 4:
        result.n128_u64[0] = sub_2233C00FC((_OWORD *)v10, v10 + 80, v10 + 160, (__n128 *)(a2 - 80)).n128_u64[0];
        return result;
      case 5:
        v154 = (__n128 *)(v10 + 80);
        v155 = (__n128 *)(v10 + 160);
        v156 = (__n128 *)(v10 + 240);
        result.n128_u64[0] = sub_2233C00FC((_OWORD *)v10, v10 + 80, v10 + 160, (__n128 *)(v10 + 240)).n128_u64[0];
        if (*(_QWORD *)(a2 - 64) > *(_QWORD *)(v10 + 256))
        {
          v359 = *(_OWORD *)(v10 + 272);
          *(_OWORD *)v398 = *(_OWORD *)(v10 + 288);
          *(_OWORD *)&v398[16] = *(_OWORD *)(v10 + 304);
          v281 = *v156;
          v320 = *(__n128 *)(v10 + 256);
          v158 = *(_OWORD *)(a2 - 48);
          v157 = *(_OWORD *)(a2 - 32);
          v159 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(v10 + 300) = *(_OWORD *)(a2 - 20);
          *(_OWORD *)(v10 + 272) = v158;
          *(_OWORD *)(v10 + 288) = v157;
          *(_OWORD *)(v10 + 256) = v159;
          *v156 = *(__n128 *)(a2 - 80);
          *(__n128 *)(a2 - 80) = v281;
          result = v320;
          *(_OWORD *)(a2 - 20) = *(_OWORD *)&v398[12];
          *(_OWORD *)(a2 - 48) = v359;
          *(_OWORD *)(a2 - 32) = *(_OWORD *)v398;
          *(__n128 *)(a2 - 64) = v320;
          if (*(_QWORD *)(v10 + 256) > *(_QWORD *)(v10 + 176))
          {
            v360 = *(_OWORD *)(v10 + 192);
            *(_OWORD *)v399 = *(_OWORD *)(v10 + 208);
            *(_OWORD *)&v399[16] = *(_OWORD *)(v10 + 224);
            v282 = *v155;
            v321 = *(_OWORD *)(v10 + 176);
            v160 = *(_OWORD *)(v10 + 288);
            *(_OWORD *)(v10 + 192) = *(_OWORD *)(v10 + 272);
            *(_OWORD *)(v10 + 208) = v160;
            *(_OWORD *)(v10 + 220) = *(_OWORD *)(v10 + 300);
            v161 = *(_OWORD *)(v10 + 256);
            *v155 = *v156;
            *(_OWORD *)(v10 + 176) = v161;
            result = v282;
            *(_OWORD *)(v10 + 300) = *(_OWORD *)&v399[12];
            *(_OWORD *)(v10 + 272) = v360;
            *(_OWORD *)(v10 + 288) = *(_OWORD *)v399;
            *v156 = v282;
            *(_OWORD *)(v10 + 256) = v321;
            if (*(_QWORD *)(v10 + 176) > *(_QWORD *)(v10 + 96))
            {
              v361 = *(_OWORD *)(v10 + 112);
              *(_OWORD *)v400 = *(_OWORD *)(v10 + 128);
              *(_OWORD *)&v400[16] = *(_OWORD *)(v10 + 144);
              v283 = *v154;
              v322 = *(_OWORD *)(v10 + 96);
              v162 = *(_OWORD *)(v10 + 208);
              *(_OWORD *)(v10 + 112) = *(_OWORD *)(v10 + 192);
              *(_OWORD *)(v10 + 128) = v162;
              *(_OWORD *)(v10 + 140) = *(_OWORD *)(v10 + 220);
              v163 = *(_OWORD *)(v10 + 176);
              *v154 = *v155;
              *(_OWORD *)(v10 + 96) = v163;
              result = v283;
              *(_OWORD *)(v10 + 220) = *(_OWORD *)&v400[12];
              *(_OWORD *)(v10 + 192) = v361;
              *(_OWORD *)(v10 + 208) = *(_OWORD *)v400;
              *v155 = v283;
              *(_OWORD *)(v10 + 176) = v322;
              if (*(_QWORD *)(v10 + 96) > *(_QWORD *)(v10 + 16))
              {
                v284 = *(__n128 *)v10;
                *(_OWORD *)v401 = *(_OWORD *)(v10 + 48);
                *(_OWORD *)&v401[16] = *(_OWORD *)(v10 + 64);
                v323 = *(_OWORD *)(v10 + 16);
                v362 = *(_OWORD *)(v10 + 32);
                *(_OWORD *)(v10 + 60) = *(_OWORD *)(v10 + 140);
                v164 = *(_OWORD *)(v10 + 128);
                *(_OWORD *)(v10 + 32) = *(_OWORD *)(v10 + 112);
                *(_OWORD *)(v10 + 48) = v164;
                v165 = *(_OWORD *)(v10 + 96);
                *(__n128 *)v10 = *v154;
                *(_OWORD *)(v10 + 16) = v165;
                result = v284;
                *(_OWORD *)(v10 + 140) = *(_OWORD *)&v401[12];
                *(_OWORD *)(v10 + 112) = v362;
                *(_OWORD *)(v10 + 128) = *(_OWORD *)v401;
                *v154 = v284;
                *(_OWORD *)(v10 + 96) = v323;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 1919)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v179 = (unint64_t)(v12 - 2) >> 1;
              v180 = v179;
              do
              {
                v181 = v180;
                if (v179 >= v180)
                {
                  v182 = (2 * v180) | 1;
                  v183 = v10 + 80 * v182;
                  if (2 * v181 + 2 < v12)
                  {
                    v184 = *(_QWORD *)(v10 + 80 * v182 + 16);
                    v185 = *(_QWORD *)(v183 + 96);
                    v183 += 80 * (v184 > v185);
                    if (v184 > v185)
                      v182 = 2 * v181 + 2;
                  }
                  if (*(_QWORD *)(v183 + 16) <= *(_QWORD *)(v10 + 80 * v181 + 16))
                  {
                    v186 = v10 + 80 * v181;
                    v239 = *(_OWORD *)v186;
                    v187 = *(_QWORD *)(v186 + 16);
                    v403 = *(_QWORD *)(v186 + 72);
                    v325 = *(_OWORD *)(v186 + 40);
                    v364 = *(_OWORD *)(v186 + 56);
                    v286 = *(_OWORD *)(v186 + 24);
                    do
                    {
                      v188 = v183;
                      *(_OWORD *)v186 = *(_OWORD *)v183;
                      v189 = *(_OWORD *)(v183 + 16);
                      v190 = *(_OWORD *)(v183 + 32);
                      v191 = *(_OWORD *)(v183 + 48);
                      *(_OWORD *)(v186 + 60) = *(_OWORD *)(v183 + 60);
                      *(_OWORD *)(v186 + 32) = v190;
                      *(_OWORD *)(v186 + 48) = v191;
                      *(_OWORD *)(v186 + 16) = v189;
                      if (v179 < v182)
                        break;
                      v192 = (2 * v182) | 1;
                      v183 = v10 + 80 * v192;
                      v193 = 2 * v182 + 2;
                      if (v193 < v12)
                      {
                        v194 = *(_QWORD *)(v10 + 80 * v192 + 16);
                        v195 = *(_QWORD *)(v183 + 96);
                        v183 += 80 * (v194 > v195);
                        if (v194 > v195)
                          v192 = v193;
                      }
                      v186 = v188;
                      v182 = v192;
                    }
                    while (*(_QWORD *)(v183 + 16) <= v187);
                    *(_OWORD *)v188 = v239;
                    *(_QWORD *)(v188 + 16) = v187;
                    *(_OWORD *)(v188 + 24) = v286;
                    *(_OWORD *)(v188 + 40) = v325;
                    *(_OWORD *)(v188 + 56) = v364;
                    *(_DWORD *)(v188 + 72) = v403;
                  }
                }
                v180 = v181 - 1;
              }
              while (v181);
              v196 = v11 / 0x50uLL;
              do
              {
                v198 = 0;
                v287 = *(__n128 *)v10;
                *(_OWORD *)v404 = *(_OWORD *)(v10 + 48);
                *(_OWORD *)&v404[16] = *(_OWORD *)(v10 + 64);
                v326 = *(__n128 *)(v10 + 16);
                v365 = *(__n128 *)(v10 + 32);
                v199 = (_OWORD *)v10;
                do
                {
                  v203 = v198 + 1;
                  v204 = (__n128 *)&v199[5 * v198 + 5];
                  v205 = (2 * v198) | 1;
                  v206 = 2 * v198 + 2;
                  if (v206 < v196)
                  {
                    v207 = *(_QWORD *)&v199[5 * v203 + 1];
                    v208 = v204[6].n128_i64[0];
                    v204 += 5 * (v207 > v208);
                    if (v207 > v208)
                      v205 = v206;
                  }
                  *v199 = *v204;
                  v200 = v204[1];
                  v201 = v204[2];
                  v202 = v204[3];
                  *(__n128 *)((char *)v199 + 60) = *(__n128 *)((char *)&v204[3] + 12);
                  v199[2] = v201;
                  v199[3] = v202;
                  v199[1] = v200;
                  v199 = v204;
                  v198 = v205;
                }
                while (v205 <= (uint64_t)((unint64_t)(v196 - 2) >> 1));
                a2 -= 80;
                if (v204 == (__n128 *)a2)
                {
                  *v204 = v287;
                  result = v326;
                  *(__n128 *)((char *)v204 + 60) = *(__n128 *)&v404[12];
                  v204[2] = v365;
                  v204[3] = *(__n128 *)v404;
                  v204[1] = v326;
                }
                else
                {
                  *v204 = *(__n128 *)a2;
                  result = *(__n128 *)(a2 + 16);
                  v209 = *(__n128 *)(a2 + 32);
                  v210 = *(__n128 *)(a2 + 48);
                  *(__n128 *)((char *)v204 + 60) = *(__n128 *)(a2 + 60);
                  v204[2] = v209;
                  v204[3] = v210;
                  v204[1] = result;
                  *(_OWORD *)(a2 + 60) = *(_OWORD *)&v404[12];
                  *(__n128 *)(a2 + 32) = v365;
                  *(_OWORD *)(a2 + 48) = *(_OWORD *)v404;
                  *(__n128 *)(a2 + 16) = v326;
                  result.n128_u64[0] = v287.n128_u64[0];
                  *(__n128 *)a2 = v287;
                  v211 = (uint64_t)&v204[5] - v10;
                  if (v211 >= 81)
                  {
                    v212 = (v211 / 0x50uLL - 2) >> 1;
                    if (*(_QWORD *)(v10 + 80 * v212 + 16) > (int64_t)v204[1].n128_u64[0])
                    {
                      v253 = *v204;
                      v213 = v204[1].n128_i64[0];
                      v244 = *(__n128 *)((char *)v204 + 40);
                      v247 = *(__n128 *)((char *)v204 + 56);
                      v250 = v204[4].n128_i64[1];
                      v240 = *(__n128 *)((char *)v204 + 24);
                      do
                      {
                        v214 = v204;
                        v204 = (__n128 *)(v10 + 80 * v212);
                        *v214 = *v204;
                        v215 = v204[1];
                        v216 = v204[2];
                        v217 = v204[3];
                        *(__n128 *)((char *)v214 + 60) = *(__n128 *)((char *)v204 + 60);
                        v214[2] = v216;
                        v214[3] = v217;
                        v214[1] = v215;
                        if (!v212)
                          break;
                        v212 = (v212 - 1) >> 1;
                      }
                      while (*(_QWORD *)(v10 + 80 * v212 + 16) > v213);
                      *v204 = v253;
                      v204[1].n128_u64[0] = v213;
                      result = v240;
                      v204[4].n128_u32[2] = v250;
                      *(__n128 *)((char *)v204 + 56) = v247;
                      *(__n128 *)((char *)v204 + 40) = v244;
                      *(__n128 *)((char *)v204 + 24) = v240;
                    }
                  }
                }
              }
              while (v196-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = (__n128 *)(v10 + 80 * ((unint64_t)v12 >> 1));
          v15 = *(_QWORD *)(a2 - 64);
          if ((unint64_t)v11 < 0x2801)
          {
            v21 = *(_QWORD *)(v10 + 16);
            v22 = (_QWORD *)(v10 + 16 + 80 * v13);
            if (v21 <= *v22)
            {
              if (v15 > v21)
              {
                v258 = *(__n128 *)v10;
                *(_OWORD *)v375 = *(_OWORD *)(v10 + 48);
                *(_OWORD *)&v375[16] = *(_OWORD *)(v10 + 64);
                v297 = *(_OWORD *)(v10 + 16);
                v336 = *(_OWORD *)(v10 + 32);
                v33 = *(_OWORD *)(a2 - 48);
                v32 = *(_OWORD *)(a2 - 32);
                v34 = *(_OWORD *)(a2 - 64);
                *(_OWORD *)(v10 + 60) = *(_OWORD *)(a2 - 20);
                *(_OWORD *)(v10 + 32) = v33;
                *(_OWORD *)(v10 + 48) = v32;
                *(_OWORD *)(v10 + 16) = v34;
                *(__n128 *)v10 = *v7;
                *(_OWORD *)(a2 - 20) = *(_OWORD *)&v375[12];
                *(_OWORD *)(a2 - 48) = v336;
                *(_OWORD *)(a2 - 32) = *(_OWORD *)v375;
                *(_OWORD *)(a2 - 64) = v297;
                *v7 = v258;
                if (*(_QWORD *)(v10 + 16) > *v22)
                {
                  v259 = *v14;
                  *(__n128 *)v376 = v14[3];
                  *(__n128 *)&v376[16] = v14[4];
                  v298 = v14[1];
                  v337 = v14[2];
                  v36 = *(__n128 *)(v10 + 32);
                  v35 = *(__n128 *)(v10 + 48);
                  v37 = *(__n128 *)(v10 + 16);
                  *(__n128 *)((char *)v14 + 60) = *(__n128 *)(v10 + 60);
                  v14[2] = v36;
                  v14[3] = v35;
                  v14[1] = v37;
                  *v14 = *(__n128 *)v10;
                  *(_OWORD *)(v10 + 60) = *(_OWORD *)&v376[12];
                  *(__n128 *)(v10 + 32) = v337;
                  *(_OWORD *)(v10 + 48) = *(_OWORD *)v376;
                  *(__n128 *)(v10 + 16) = v298;
                  *(__n128 *)v10 = v259;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_53;
                }
              }
            }
            else
            {
              if (v15 <= v21)
              {
                v264 = *v14;
                *(__n128 *)v381 = v14[3];
                *(__n128 *)&v381[16] = v14[4];
                v303 = v14[1];
                v342 = v14[2];
                v61 = *(__n128 *)(v10 + 32);
                v60 = *(__n128 *)(v10 + 48);
                v62 = *(__n128 *)(v10 + 16);
                *(__n128 *)((char *)v14 + 60) = *(__n128 *)(v10 + 60);
                v14[2] = v61;
                v14[3] = v60;
                v14[1] = v62;
                *v14 = *(__n128 *)v10;
                *(_OWORD *)(v10 + 60) = *(_OWORD *)&v381[12];
                *(__n128 *)(v10 + 32) = v342;
                *(_OWORD *)(v10 + 48) = *(_OWORD *)v381;
                *(__n128 *)(v10 + 16) = v303;
                *(__n128 *)v10 = v264;
                if (*(_QWORD *)(a2 - 64) <= *(_QWORD *)(v10 + 16))
                  goto LABEL_31;
                v255 = *(__n128 *)v10;
                *(_OWORD *)v372 = *(_OWORD *)(v10 + 48);
                *(_OWORD *)&v372[16] = *(_OWORD *)(v10 + 64);
                v294 = *(__n128 *)(v10 + 16);
                v333 = *(__n128 *)(v10 + 32);
                v64 = *(_OWORD *)(a2 - 48);
                v63 = *(_OWORD *)(a2 - 32);
                v65 = *(_OWORD *)(a2 - 64);
                *(_OWORD *)(v10 + 60) = *(_OWORD *)(a2 - 20);
                *(_OWORD *)(v10 + 32) = v64;
                *(_OWORD *)(v10 + 48) = v63;
                *(_OWORD *)(v10 + 16) = v65;
                *(__n128 *)v10 = *v7;
              }
              else
              {
                v255 = *v14;
                *(__n128 *)v372 = v14[3];
                *(__n128 *)&v372[16] = v14[4];
                v294 = v14[1];
                v333 = v14[2];
                v24 = *(__n128 *)(a2 - 48);
                v23 = *(__n128 *)(a2 - 32);
                v25 = *(__n128 *)(a2 - 64);
                *(__n128 *)((char *)v14 + 60) = *(__n128 *)(a2 - 20);
                v14[2] = v24;
                v14[3] = v23;
                v14[1] = v25;
                *v14 = *v7;
              }
              *(_OWORD *)(a2 - 20) = *(_OWORD *)&v372[12];
              *(__n128 *)(a2 - 48) = v333;
              *(_OWORD *)(a2 - 32) = *(_OWORD *)v372;
              *(__n128 *)(a2 - 64) = v294;
              *v7 = v255;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_53:
            v66 = *(_QWORD *)(v10 + 16);
            if (*(_QWORD *)(v10 - 64) > v66)
              goto LABEL_54;
            v252 = *(__n128 *)v10;
            v243 = *(_OWORD *)(v10 + 40);
            v246 = *(_OWORD *)(v10 + 56);
            v249 = *(_QWORD *)(v10 + 72);
            v237 = *(__n128 *)(v10 + 24);
            if (v66 <= *(_QWORD *)(a2 - 64))
            {
              v133 = v10 + 80;
              do
              {
                v10 = v133;
                if (v133 >= a2)
                  break;
                v134 = *(_QWORD *)(v133 + 16);
                v133 += 80;
              }
              while (v66 <= v134);
            }
            else
            {
              v131 = v10;
              do
              {
                v10 = v131 + 80;
                v132 = *(_QWORD *)(v131 + 96);
                v131 += 80;
              }
              while (v66 <= v132);
            }
            v135 = (_OWORD *)a2;
            if (v10 < a2)
            {
              v136 = a2;
              do
              {
                v135 = (_OWORD *)(v136 - 80);
                v137 = *(_QWORD *)(v136 - 64);
                v136 -= 80;
              }
              while (v66 > v137);
            }
            while (v10 < (unint64_t)v135)
            {
              v278 = *(__n128 *)v10;
              *(_OWORD *)v395 = *(_OWORD *)(v10 + 48);
              *(_OWORD *)&v395[16] = *(_OWORD *)(v10 + 64);
              v317 = *(_OWORD *)(v10 + 16);
              v356 = *(_OWORD *)(v10 + 32);
              v139 = v135[2];
              v138 = v135[3];
              v140 = v135[1];
              *(_OWORD *)(v10 + 60) = *(_OWORD *)((char *)v135 + 60);
              *(_OWORD *)(v10 + 32) = v139;
              *(_OWORD *)(v10 + 48) = v138;
              *(_OWORD *)(v10 + 16) = v140;
              *(_OWORD *)v10 = *v135;
              *(_OWORD *)((char *)v135 + 60) = *(_OWORD *)&v395[12];
              v135[2] = v356;
              v135[3] = *(_OWORD *)v395;
              v135[1] = v317;
              *v135 = v278;
              do
              {
                v141 = *(_QWORD *)(v10 + 96);
                v10 += 80;
              }
              while (v66 <= v141);
              do
              {
                v142 = *((_QWORD *)v135 - 8);
                v135 -= 5;
              }
              while (v66 > v142);
            }
            v143 = (__n128 *)(v10 - 80);
            if (v10 - 80 != a1)
            {
              *(__n128 *)a1 = *v143;
              v144 = *(_OWORD *)(v10 - 64);
              v145 = *(_OWORD *)(v10 - 48);
              v146 = *(_OWORD *)(v10 - 32);
              *(_OWORD *)(a1 + 60) = *(_OWORD *)(v10 - 20);
              *(_OWORD *)(a1 + 32) = v145;
              *(_OWORD *)(a1 + 48) = v146;
              *(_OWORD *)(a1 + 16) = v144;
            }
            a4 = 0;
            *v143 = v252;
            *(_QWORD *)(v10 - 64) = v66;
            result = v237;
            *(_DWORD *)(v10 - 8) = v249;
            *(_OWORD *)(v10 - 24) = v246;
            *(_OWORD *)(v10 - 40) = v243;
            *(__n128 *)(v10 - 56) = v237;
            continue;
          }
          v16 = (uint64_t *)(v10 + 16 + 80 * v13);
          v17 = *v16;
          if (*v16 <= *(_QWORD *)(v10 + 16))
          {
            if (v15 > v17)
            {
              v256 = *v14;
              *(__n128 *)v373 = v14[3];
              *(__n128 *)&v373[16] = v14[4];
              v295 = v14[1];
              v334 = v14[2];
              v27 = *(__n128 *)(a2 - 48);
              v26 = *(__n128 *)(a2 - 32);
              v28 = *(__n128 *)(a2 - 64);
              *(__n128 *)((char *)v14 + 60) = *(__n128 *)(a2 - 20);
              v14[2] = v27;
              v14[3] = v26;
              v14[1] = v28;
              *v14 = *v7;
              *(_OWORD *)(a2 - 20) = *(_OWORD *)&v373[12];
              *(__n128 *)(a2 - 48) = v334;
              *(_OWORD *)(a2 - 32) = *(_OWORD *)v373;
              *(__n128 *)(a2 - 64) = v295;
              *v7 = v256;
              if (*v16 > *(_QWORD *)(v10 + 16))
              {
                v257 = *(__n128 *)v10;
                *(_OWORD *)v374 = *(_OWORD *)(v10 + 48);
                *(_OWORD *)&v374[16] = *(_OWORD *)(v10 + 64);
                v296 = *(__n128 *)(v10 + 16);
                v335 = *(__n128 *)(v10 + 32);
                v30 = v14[2];
                v29 = v14[3];
                v31 = v14[1];
                *(__n128 *)(v10 + 60) = *(__n128 *)((char *)v14 + 60);
                *(__n128 *)(v10 + 32) = v30;
                *(__n128 *)(v10 + 48) = v29;
                *(__n128 *)(v10 + 16) = v31;
                *(__n128 *)v10 = *v14;
                *(__n128 *)((char *)v14 + 60) = *(__n128 *)&v374[12];
                v14[2] = v335;
                v14[3] = *(__n128 *)v374;
                v14[1] = v296;
                *v14 = v257;
              }
            }
          }
          else
          {
            if (v15 <= v17)
            {
              v260 = *(__n128 *)v10;
              *(_OWORD *)v377 = *(_OWORD *)(v10 + 48);
              *(_OWORD *)&v377[16] = *(_OWORD *)(v10 + 64);
              v299 = *(__n128 *)(v10 + 16);
              v338 = *(__n128 *)(v10 + 32);
              v39 = v14[2];
              v38 = v14[3];
              v40 = v14[1];
              *(__n128 *)(v10 + 60) = *(__n128 *)((char *)v14 + 60);
              *(__n128 *)(v10 + 32) = v39;
              *(__n128 *)(v10 + 48) = v38;
              *(__n128 *)(v10 + 16) = v40;
              *(__n128 *)v10 = *v14;
              *(__n128 *)((char *)v14 + 60) = *(__n128 *)&v377[12];
              v14[2] = v338;
              v14[3] = *(__n128 *)v377;
              v14[1] = v299;
              *v14 = v260;
              if (*(_QWORD *)(a2 - 64) <= *v16)
                goto LABEL_22;
              v254 = *v14;
              *(__n128 *)v371 = v14[3];
              *(__n128 *)&v371[16] = v14[4];
              v293 = v14[1];
              v332 = v14[2];
              v42 = *(__n128 *)(a2 - 48);
              v41 = *(__n128 *)(a2 - 32);
              v43 = *(__n128 *)(a2 - 64);
              *(__n128 *)((char *)v14 + 60) = *(__n128 *)(a2 - 20);
              v14[2] = v42;
              v14[3] = v41;
              v14[1] = v43;
              *v14 = *v7;
            }
            else
            {
              v254 = *(__n128 *)v10;
              *(_OWORD *)v371 = *(_OWORD *)(v10 + 48);
              *(_OWORD *)&v371[16] = *(_OWORD *)(v10 + 64);
              v293 = *(__n128 *)(v10 + 16);
              v332 = *(__n128 *)(v10 + 32);
              v19 = *(_OWORD *)(a2 - 48);
              v18 = *(_OWORD *)(a2 - 32);
              v20 = *(_OWORD *)(a2 - 64);
              *(_OWORD *)(v10 + 60) = *(_OWORD *)(a2 - 20);
              *(_OWORD *)(v10 + 32) = v19;
              *(_OWORD *)(v10 + 48) = v18;
              *(_OWORD *)(v10 + 16) = v20;
              *(__n128 *)v10 = *v7;
            }
            *(_OWORD *)(a2 - 20) = *(_OWORD *)&v371[12];
            *(__n128 *)(a2 - 48) = v332;
            *(_OWORD *)(a2 - 32) = *(_OWORD *)v371;
            *(__n128 *)(a2 - 64) = v293;
            *v7 = v254;
          }
LABEL_22:
          v44 = (__n128 *)(v10 + 80);
          v45 = v10 + 80 * v13;
          v48 = *(_QWORD *)(v45 - 64);
          v46 = (__n128 *)(v45 - 64);
          v47 = v48;
          v49 = v46 - 1;
          v50 = *(_QWORD *)(a2 - 144);
          if (v48 <= *(_QWORD *)(v10 + 96))
          {
            if (v50 > v47)
            {
              v262 = *v49;
              *(__n128 *)v379 = v46[2];
              *(__n128 *)&v379[16] = v46[3];
              v301 = *v46;
              v340 = v46[1];
              v55 = *(__n128 *)(a2 - 128);
              v54 = *(__n128 *)(a2 - 112);
              v56 = *(__n128 *)(a2 - 144);
              *(__n128 *)((char *)v46 + 44) = *(__n128 *)(a2 - 100);
              v46[1] = v55;
              v46[2] = v54;
              *v46 = v56;
              *v49 = *v8;
              *(_OWORD *)(a2 - 100) = *(_OWORD *)&v379[12];
              *(__n128 *)(a2 - 128) = v340;
              *(_OWORD *)(a2 - 112) = *(_OWORD *)v379;
              *(__n128 *)(a2 - 144) = v301;
              *v8 = v262;
              if ((int64_t)v46->n128_u64[0] > *(_QWORD *)(v10 + 96))
              {
                v341 = *(__n128 *)(v10 + 112);
                *(_OWORD *)v380 = *(_OWORD *)(v10 + 128);
                *(_OWORD *)&v380[16] = *(_OWORD *)(v10 + 144);
                v263 = *v44;
                v302 = *(__n128 *)(v10 + 96);
                v58 = v46[1];
                v57 = v46[2];
                v59 = *v46;
                *(__n128 *)(v10 + 140) = *(__n128 *)((char *)v46 + 44);
                *(__n128 *)(v10 + 112) = v58;
                *(__n128 *)(v10 + 128) = v57;
                *(__n128 *)(v10 + 96) = v59;
                *v44 = *v49;
                *v49 = v263;
                *(__n128 *)((char *)v46 + 44) = *(__n128 *)&v380[12];
                v46[1] = v341;
                v46[2] = *(__n128 *)v380;
                *v46 = v302;
              }
            }
          }
          else if (v50 <= v47)
          {
            v343 = *(__n128 *)(v10 + 112);
            *(_OWORD *)v382 = *(_OWORD *)(v10 + 128);
            *(_OWORD *)&v382[16] = *(_OWORD *)(v10 + 144);
            v265 = *v44;
            v304 = *(__n128 *)(v10 + 96);
            v68 = v46[1];
            v67 = v46[2];
            v69 = *v46;
            *(__n128 *)(v10 + 140) = *(__n128 *)((char *)v46 + 44);
            *(__n128 *)(v10 + 112) = v68;
            *(__n128 *)(v10 + 128) = v67;
            *(__n128 *)(v10 + 96) = v69;
            *v44 = *v49;
            *v49 = v265;
            *(__n128 *)((char *)v46 + 44) = *(__n128 *)&v382[12];
            v46[1] = v343;
            v46[2] = *(__n128 *)v382;
            *v46 = v304;
            if (*(_QWORD *)(a2 - 144) > (int64_t)v46->n128_u64[0])
            {
              v266 = *v49;
              *(__n128 *)v383 = v46[2];
              *(__n128 *)&v383[16] = v46[3];
              v305 = *v46;
              v344 = v46[1];
              v71 = *(__n128 *)(a2 - 128);
              v70 = *(__n128 *)(a2 - 112);
              v72 = *(__n128 *)(a2 - 144);
              *(__n128 *)((char *)v46 + 44) = *(__n128 *)(a2 - 100);
              v46[1] = v71;
              v46[2] = v70;
              *v46 = v72;
              *v49 = *v8;
              *(_OWORD *)(a2 - 100) = *(_OWORD *)&v383[12];
              *(__n128 *)(a2 - 128) = v344;
              *(_OWORD *)(a2 - 112) = *(_OWORD *)v383;
              *(__n128 *)(a2 - 144) = v305;
              *v8 = v266;
            }
          }
          else
          {
            v339 = *(_OWORD *)(v10 + 112);
            *(_OWORD *)v378 = *(_OWORD *)(v10 + 128);
            *(_OWORD *)&v378[16] = *(_OWORD *)(v10 + 144);
            v261 = *v44;
            v300 = *(_OWORD *)(v10 + 96);
            v52 = *(_OWORD *)(a2 - 128);
            v51 = *(_OWORD *)(a2 - 112);
            v53 = *(_OWORD *)(a2 - 144);
            *(_OWORD *)(v10 + 140) = *(_OWORD *)(a2 - 100);
            *(_OWORD *)(v10 + 112) = v52;
            *(_OWORD *)(v10 + 128) = v51;
            *(_OWORD *)(v10 + 96) = v53;
            *v44 = *v8;
            *v8 = v261;
            *(_OWORD *)(a2 - 100) = *(_OWORD *)&v378[12];
            *(_OWORD *)(a2 - 128) = v339;
            *(_OWORD *)(a2 - 112) = *(_OWORD *)v378;
            *(_OWORD *)(a2 - 144) = v300;
          }
          v73 = (__n128 *)(v10 + 160);
          v74 = v10 + 80 * v13;
          v77 = *(_QWORD *)(v74 + 96);
          v75 = (__n128 *)(v74 + 96);
          v76 = v77;
          v78 = v75 - 1;
          v79 = *(_QWORD *)(a2 - 224);
          if (v77 <= *(_QWORD *)(v10 + 176))
          {
            if (v79 > v76)
            {
              v268 = *v78;
              *(__n128 *)v385 = v75[2];
              *(__n128 *)&v385[16] = v75[3];
              v307 = *v75;
              v346 = v75[1];
              v84 = *(__n128 *)(a2 - 208);
              v83 = *(__n128 *)(a2 - 192);
              v85 = *(__n128 *)(a2 - 224);
              *(__n128 *)((char *)v75 + 44) = *(__n128 *)(a2 - 180);
              v75[1] = v84;
              v75[2] = v83;
              *v75 = v85;
              *v78 = *v9;
              *(_OWORD *)(a2 - 180) = *(_OWORD *)&v385[12];
              *(__n128 *)(a2 - 208) = v346;
              *(_OWORD *)(a2 - 192) = *(_OWORD *)v385;
              *(__n128 *)(a2 - 224) = v307;
              *v9 = v268;
              if ((int64_t)v75->n128_u64[0] > *(_QWORD *)(v10 + 176))
              {
                v347 = *(__n128 *)(v10 + 192);
                *(_OWORD *)v386 = *(_OWORD *)(v10 + 208);
                *(_OWORD *)&v386[16] = *(_OWORD *)(v10 + 224);
                v269 = *v73;
                v308 = *(__n128 *)(v10 + 176);
                v87 = v75[1];
                v86 = v75[2];
                v88 = *v75;
                *(__n128 *)(v10 + 220) = *(__n128 *)((char *)v75 + 44);
                *(__n128 *)(v10 + 192) = v87;
                *(__n128 *)(v10 + 208) = v86;
                *(__n128 *)(v10 + 176) = v88;
                *v73 = *v78;
                *v78 = v269;
                *(__n128 *)((char *)v75 + 44) = *(__n128 *)&v386[12];
                v75[1] = v347;
                v75[2] = *(__n128 *)v386;
                *v75 = v308;
              }
            }
          }
          else if (v79 <= v76)
          {
            v348 = *(__n128 *)(v10 + 192);
            *(_OWORD *)v387 = *(_OWORD *)(v10 + 208);
            *(_OWORD *)&v387[16] = *(_OWORD *)(v10 + 224);
            v270 = *v73;
            v309 = *(__n128 *)(v10 + 176);
            v90 = v75[1];
            v89 = v75[2];
            v91 = *v75;
            *(__n128 *)(v10 + 220) = *(__n128 *)((char *)v75 + 44);
            *(__n128 *)(v10 + 192) = v90;
            *(__n128 *)(v10 + 208) = v89;
            *(__n128 *)(v10 + 176) = v91;
            *v73 = *v78;
            *v78 = v270;
            *(__n128 *)((char *)v75 + 44) = *(__n128 *)&v387[12];
            v75[1] = v348;
            v75[2] = *(__n128 *)v387;
            *v75 = v309;
            if (*(_QWORD *)(a2 - 224) > (int64_t)v75->n128_u64[0])
            {
              v271 = *v78;
              *(__n128 *)v388 = v75[2];
              *(__n128 *)&v388[16] = v75[3];
              v310 = *v75;
              v349 = v75[1];
              v93 = *(__n128 *)(a2 - 208);
              v92 = *(__n128 *)(a2 - 192);
              v94 = *(__n128 *)(a2 - 224);
              *(__n128 *)((char *)v75 + 44) = *(__n128 *)(a2 - 180);
              v75[1] = v93;
              v75[2] = v92;
              *v75 = v94;
              *v78 = *v9;
              *(_OWORD *)(a2 - 180) = *(_OWORD *)&v388[12];
              *(__n128 *)(a2 - 208) = v349;
              *(_OWORD *)(a2 - 192) = *(_OWORD *)v388;
              *(__n128 *)(a2 - 224) = v310;
              *v9 = v271;
            }
          }
          else
          {
            v345 = *(_OWORD *)(v10 + 192);
            *(_OWORD *)v384 = *(_OWORD *)(v10 + 208);
            *(_OWORD *)&v384[16] = *(_OWORD *)(v10 + 224);
            v267 = *v73;
            v306 = *(_OWORD *)(v10 + 176);
            v81 = *(_OWORD *)(a2 - 208);
            v80 = *(_OWORD *)(a2 - 192);
            v82 = *(_OWORD *)(a2 - 224);
            *(_OWORD *)(v10 + 220) = *(_OWORD *)(a2 - 180);
            *(_OWORD *)(v10 + 192) = v81;
            *(_OWORD *)(v10 + 208) = v80;
            *(_OWORD *)(v10 + 176) = v82;
            *v73 = *v9;
            *v9 = v267;
            *(_OWORD *)(a2 - 180) = *(_OWORD *)&v384[12];
            *(_OWORD *)(a2 - 208) = v345;
            *(_OWORD *)(a2 - 192) = *(_OWORD *)v384;
            *(_OWORD *)(a2 - 224) = v306;
          }
          v95 = *v16;
          v96 = v75->n128_u64[0];
          if (*v16 <= (int64_t)v46->n128_u64[0])
          {
            if (v96 > v95)
            {
              v273 = *v14;
              *(__n128 *)v390 = v14[3];
              *(__n128 *)&v390[16] = v14[4];
              v312 = v14[1];
              v351 = v14[2];
              *(__n128 *)((char *)v14 + 60) = *(__n128 *)((char *)v75 + 44);
              v99 = v75[2];
              v14[2] = v75[1];
              v14[3] = v99;
              v100 = *v75;
              *v14 = *v78;
              v14[1] = v100;
              *v78 = v273;
              *v75 = v312;
              v75[1] = v351;
              *(__n128 *)((char *)v75 + 44) = *(__n128 *)&v390[12];
              v75[2] = *(__n128 *)v390;
              if (*v16 > (int64_t)v46->n128_u64[0])
              {
                v274 = *v49;
                *(__n128 *)v391 = v46[2];
                *(__n128 *)&v391[16] = v46[3];
                v313 = *v46;
                v352 = v46[1];
                *(__n128 *)((char *)v46 + 44) = *(__n128 *)((char *)v14 + 60);
                v101 = v14[3];
                v46[1] = v14[2];
                v46[2] = v101;
                v102 = v14[1];
                *v49 = *v14;
                *v46 = v102;
                *v14 = v274;
                v14[1] = v313;
                v14[2] = v352;
                *(__n128 *)((char *)v14 + 60) = *(__n128 *)&v391[12];
                v14[3] = *(__n128 *)v391;
              }
            }
          }
          else
          {
            if (v96 <= v95)
            {
              v275 = *v49;
              *(__n128 *)v392 = v46[2];
              *(__n128 *)&v392[16] = v46[3];
              v314 = *v46;
              v353 = v46[1];
              *(__n128 *)((char *)v46 + 44) = *(__n128 *)((char *)v14 + 60);
              v103 = v14[3];
              v46[1] = v14[2];
              v46[2] = v103;
              v104 = v14[1];
              *v49 = *v14;
              *v46 = v104;
              *v14 = v275;
              v14[1] = v314;
              v14[2] = v353;
              *(__n128 *)((char *)v14 + 60) = *(__n128 *)&v392[12];
              v14[3] = *(__n128 *)v392;
              if ((int64_t)v75->n128_u64[0] <= *v16)
                goto LABEL_52;
              v272 = *v14;
              *(__n128 *)v389 = v14[3];
              *(__n128 *)&v389[16] = v14[4];
              v311 = v14[1];
              v350 = v14[2];
              *(__n128 *)((char *)v14 + 60) = *(__n128 *)((char *)v75 + 44);
              v105 = v75[2];
              v14[2] = v75[1];
              v14[3] = v105;
              v106 = *v75;
              *v14 = *v78;
              v14[1] = v106;
            }
            else
            {
              v272 = *v49;
              *(__n128 *)v389 = v46[2];
              *(__n128 *)&v389[16] = v46[3];
              v311 = *v46;
              v350 = v46[1];
              *(__n128 *)((char *)v46 + 44) = *(__n128 *)((char *)v75 + 44);
              v97 = v75[2];
              v46[1] = v75[1];
              v46[2] = v97;
              v98 = *v75;
              *v49 = *v78;
              *v46 = v98;
            }
            *v78 = v272;
            *v75 = v311;
            v75[1] = v350;
            *(__n128 *)((char *)v75 + 44) = *(__n128 *)&v389[12];
            v75[2] = *(__n128 *)v389;
          }
LABEL_52:
          v276 = *(__n128 *)v10;
          *(_OWORD *)v393 = *(_OWORD *)(v10 + 48);
          *(_OWORD *)&v393[16] = *(_OWORD *)(v10 + 64);
          v315 = *(__n128 *)(v10 + 16);
          v354 = *(__n128 *)(v10 + 32);
          v108 = v14[2];
          v107 = v14[3];
          v109 = v14[1];
          *(__n128 *)(v10 + 60) = *(__n128 *)((char *)v14 + 60);
          *(__n128 *)(v10 + 32) = v108;
          *(__n128 *)(v10 + 48) = v107;
          *(__n128 *)(v10 + 16) = v109;
          *(__n128 *)v10 = *v14;
          *(__n128 *)((char *)v14 + 60) = *(__n128 *)&v393[12];
          v14[2] = v354;
          v14[3] = *(__n128 *)v393;
          v14[1] = v315;
          *v14 = v276;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_53;
LABEL_32:
          v66 = *(_QWORD *)(v10 + 16);
LABEL_54:
          v110 = 0;
          v251 = *(__n128 *)v10;
          v242 = *(_OWORD *)(v10 + 40);
          v245 = *(_OWORD *)(v10 + 56);
          v248 = *(_QWORD *)(v10 + 72);
          v236 = *(_OWORD *)(v10 + 24);
          do
          {
            v111 = *(_QWORD *)(v10 + v110 + 96);
            v110 += 80;
          }
          while (v111 > v66);
          v112 = v10 + v110;
          v113 = a2;
          if (v110 == 80)
          {
            v116 = a2;
            while (v112 < v116)
            {
              v114 = (_OWORD *)(v116 - 80);
              v117 = *(_QWORD *)(v116 - 64);
              v116 -= 80;
              if (v117 > v66)
                goto LABEL_62;
            }
            v114 = (_OWORD *)v116;
          }
          else
          {
            do
            {
              v114 = (_OWORD *)(v113 - 80);
              v115 = *(_QWORD *)(v113 - 64);
              v113 -= 80;
            }
            while (v115 <= v66);
LABEL_62:
            if (v112 < (unint64_t)v114)
            {
              v118 = v112;
              v119 = v114;
              do
              {
                v277 = *(_OWORD *)v118;
                *(_OWORD *)v394 = *(_OWORD *)(v118 + 48);
                *(_OWORD *)&v394[16] = *(_OWORD *)(v118 + 64);
                v316 = *(_OWORD *)(v118 + 16);
                v355 = *(_OWORD *)(v118 + 32);
                v121 = v119[2];
                v120 = v119[3];
                v122 = v119[1];
                *(_OWORD *)(v118 + 60) = *(_OWORD *)((char *)v119 + 60);
                *(_OWORD *)(v118 + 32) = v121;
                *(_OWORD *)(v118 + 48) = v120;
                *(_OWORD *)(v118 + 16) = v122;
                *(_OWORD *)v118 = *v119;
                *(_OWORD *)((char *)v119 + 60) = *(_OWORD *)&v394[12];
                v119[2] = v355;
                v119[3] = *(_OWORD *)v394;
                v119[1] = v316;
                *v119 = v277;
                do
                {
                  v123 = *(_QWORD *)(v118 + 96);
                  v118 += 80;
                }
                while (v123 > v66);
                do
                {
                  v124 = *((_QWORD *)v119 - 8);
                  v119 -= 5;
                }
                while (v124 <= v66);
              }
              while (v118 < (unint64_t)v119);
              v125 = v118 - 80;
              if (v118 - 80 == v10)
                goto LABEL_73;
LABEL_72:
              *(_OWORD *)v10 = *(_OWORD *)v125;
              v126 = *(_OWORD *)(v125 + 16);
              v127 = *(_OWORD *)(v125 + 32);
              v128 = *(_OWORD *)(v125 + 48);
              *(_OWORD *)(v10 + 60) = *(_OWORD *)(v125 + 60);
              *(_OWORD *)(v10 + 32) = v127;
              *(_OWORD *)(v10 + 48) = v128;
              *(_OWORD *)(v10 + 16) = v126;
              goto LABEL_73;
            }
          }
          v125 = v112 - 80;
          if (v112 - 80 != v10)
            goto LABEL_72;
LABEL_73:
          *(__n128 *)v125 = v251;
          *(_QWORD *)(v125 + 16) = v66;
          *(_OWORD *)(v125 + 24) = v236;
          *(_OWORD *)(v125 + 40) = v242;
          *(_OWORD *)(v125 + 56) = v245;
          *(_DWORD *)(v125 + 72) = v248;
          if (v112 < (unint64_t)v114)
            goto LABEL_76;
          v129 = sub_2233BFA04(v10, v125);
          v10 = v125 + 80;
          if (!sub_2233BFA04(v125 + 80, a2))
          {
            if (v129)
              continue;
LABEL_76:
            sub_2233BE27C(a1, v125, a3, a4 & 1);
            a4 = 0;
            v10 = v125 + 80;
            continue;
          }
          a2 = v125;
          if (v129)
            return result;
          goto LABEL_1;
        }
        v166 = v10 + 80;
        v168 = v10 == a2 || v166 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v168)
          {
            v169 = 0;
            v170 = v10;
            do
            {
              v172 = *(_QWORD *)(v170 + 96);
              v173 = *(_QWORD *)(v170 + 16);
              v170 = v166;
              if (v172 > v173)
              {
                v238 = *(_OWORD *)v166;
                v174 = *(_QWORD *)(v166 + 16);
                v324 = *(_OWORD *)(v170 + 40);
                v363 = *(__n128 *)(v170 + 56);
                v402 = *(_QWORD *)(v170 + 72);
                v175 = v169;
                v285 = *(_OWORD *)(v170 + 24);
                do
                {
                  v176 = (_OWORD *)(v10 + v175);
                  v177 = *(_OWORD *)(v10 + v175 + 48);
                  v176[7] = *(_OWORD *)(v10 + v175 + 32);
                  v176[8] = v177;
                  *(_OWORD *)((char *)v176 + 140) = *(_OWORD *)(v10 + v175 + 60);
                  v178 = *(_OWORD *)(v10 + v175 + 16);
                  v176[5] = *(_OWORD *)(v10 + v175);
                  v176[6] = v178;
                  if (!v175)
                  {
                    v171 = v10;
                    goto LABEL_119;
                  }
                  v175 -= 80;
                }
                while (v174 > *((_QWORD *)v176 - 8));
                v171 = v10 + v175 + 80;
LABEL_119:
                *(_OWORD *)v171 = v238;
                *(_QWORD *)(v171 + 16) = v174;
                result = v363;
                *(_OWORD *)(v171 + 24) = v285;
                *(_OWORD *)(v171 + 40) = v324;
                *(__n128 *)(v171 + 56) = v363;
                *(_DWORD *)(v171 + 72) = v402;
              }
              v166 = v170 + 80;
              v169 += 80;
            }
            while (v170 + 80 != a2);
          }
        }
        else if (!v168)
        {
          do
          {
            v223 = *(_QWORD *)(a1 + 96);
            v224 = *(_QWORD *)(a1 + 16);
            a1 = v166;
            if (v223 > v224)
            {
              v241 = *(_OWORD *)v166;
              v225 = *(_QWORD *)(v166 + 16);
              v329 = *(_OWORD *)(v166 + 40);
              v368 = *(_OWORD *)(v166 + 56);
              v407 = *(_QWORD *)(v166 + 72);
              v226 = v166;
              v290 = *(__n128 *)(v166 + 24);
              do
              {
                v227 = *(_OWORD *)(v226 - 32);
                *(_OWORD *)(v226 + 32) = *(_OWORD *)(v226 - 48);
                *(_OWORD *)(v226 + 48) = v227;
                *(_OWORD *)(v226 + 60) = *(_OWORD *)(v226 - 20);
                v228 = *(_OWORD *)(v226 - 64);
                *(_OWORD *)v226 = *(_OWORD *)(v226 - 80);
                *(_OWORD *)(v226 + 16) = v228;
                v229 = *(_QWORD *)(v226 - 144);
                v226 -= 80;
              }
              while (v225 > v229);
              *(_OWORD *)v226 = v241;
              *(_QWORD *)(v226 + 16) = v225;
              result = v290;
              *(_DWORD *)(v226 + 72) = v407;
              *(_OWORD *)(v226 + 56) = v368;
              *(_OWORD *)(v226 + 40) = v329;
              *(__n128 *)(v226 + 24) = v290;
            }
            v166 = a1 + 80;
          }
          while (a1 + 80 != a2);
        }
        return result;
    }
  }
}

  v8 = (__n128 *)(a2 - 80);
  v9 = (__int128 *)(a2 - 160);
  v10 = (__n128 *)(a2 - 240);
  v11 = a1;
  while (2)
  {
    a1 = v11;
    v12 = a2 - v11;
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v11) >> 4);
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result.n128_u32[0] = *(_DWORD *)(a2 - 8);
        if (result.n128_f32[0] < *(float *)(v11 + 72))
        {
          v259 = *(__n128 *)v11;
          *(_OWORD *)v376 = *(_OWORD *)(v11 + 48);
          *(_OWORD *)&v376[16] = *(_OWORD *)(v11 + 64);
          v298 = *(_OWORD *)(v11 + 16);
          v337 = *(_OWORD *)(v11 + 32);
          v140 = *(_OWORD *)(a2 - 48);
          result = *(__n128 *)(a2 - 32);
          v141 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(v11 + 60) = *(_OWORD *)(a2 - 20);
          *(_OWORD *)(v11 + 32) = v140;
          *(__n128 *)(v11 + 48) = result;
          *(_OWORD *)(v11 + 16) = v141;
          *(_OWORD *)v11 = *(_OWORD *)(a2 - 80);
          *(_OWORD *)(a2 - 20) = *(_OWORD *)&v376[12];
          *(_OWORD *)(a2 - 48) = v337;
          *(_OWORD *)(a2 - 32) = *(_OWORD *)v376;
          *(_OWORD *)(a2 - 64) = v298;
          result.n128_u64[0] = v259.n128_u64[0];
          *(__n128 *)(a2 - 80) = v259;
        }
        return result;
      case 3:
        v142 = (__n128 *)(v11 + 80);
        result.n128_u32[0] = *(_DWORD *)(v11 + 152);
        v143 = *(float *)(a2 - 8);
        if (result.n128_f32[0] >= *(float *)(v11 + 72))
        {
          if (v143 < result.n128_f32[0])
          {
            v346 = *(_OWORD *)(v11 + 112);
            *(_OWORD *)v385 = *(_OWORD *)(v11 + 128);
            *(_OWORD *)&v385[16] = *(_OWORD *)(v11 + 144);
            v268 = *v142;
            v307 = *(__n128 *)(v11 + 96);
            v205 = *(_OWORD *)(a2 - 48);
            v204 = *(_OWORD *)(a2 - 32);
            v206 = *(_OWORD *)(a2 - 64);
            *(_OWORD *)(v11 + 140) = *(_OWORD *)(a2 - 20);
            *(_OWORD *)(v11 + 112) = v205;
            *(_OWORD *)(v11 + 128) = v204;
            *(_OWORD *)(v11 + 96) = v206;
            *v142 = *v8;
            *v8 = v268;
            result = v307;
            *(_OWORD *)(a2 - 20) = *(_OWORD *)&v385[12];
            *(_OWORD *)(a2 - 48) = v346;
            *(_OWORD *)(a2 - 32) = *(_OWORD *)v385;
            *(__n128 *)(a2 - 64) = v307;
            result.n128_u32[0] = *(_DWORD *)(v11 + 152);
            if (result.n128_f32[0] < *(float *)(v11 + 72))
            {
              v269 = *(__n128 *)v11;
              *(_OWORD *)v386 = *(_OWORD *)(v11 + 48);
              *(_OWORD *)&v386[16] = *(_OWORD *)(v11 + 64);
              v308 = *(_OWORD *)(v11 + 16);
              v347 = *(_OWORD *)(v11 + 32);
              *(_OWORD *)(v11 + 60) = *(_OWORD *)(v11 + 140);
              v207 = *(_OWORD *)(v11 + 128);
              *(_OWORD *)(v11 + 32) = *(_OWORD *)(v11 + 112);
              *(_OWORD *)(v11 + 48) = v207;
              v208 = *(_OWORD *)(v11 + 96);
              *(__n128 *)v11 = *v142;
              *(_OWORD *)(v11 + 16) = v208;
              result = v269;
              *(_OWORD *)(v11 + 140) = *(_OWORD *)&v386[12];
              *(_OWORD *)(v11 + 112) = v347;
              *(_OWORD *)(v11 + 128) = *(_OWORD *)v386;
              *v142 = v269;
              *(_OWORD *)(v11 + 96) = v308;
            }
          }
        }
        else if (v143 >= result.n128_f32[0])
        {
          v271 = *(__n128 *)v11;
          *(_OWORD *)v388 = *(_OWORD *)(v11 + 48);
          *(_OWORD *)&v388[16] = *(_OWORD *)(v11 + 64);
          v310 = *(_OWORD *)(v11 + 16);
          v349 = *(_OWORD *)(v11 + 32);
          *(_OWORD *)(v11 + 60) = *(_OWORD *)(v11 + 140);
          v213 = *(_OWORD *)(v11 + 128);
          *(_OWORD *)(v11 + 32) = *(_OWORD *)(v11 + 112);
          *(_OWORD *)(v11 + 48) = v213;
          v214 = *(_OWORD *)(v11 + 96);
          *(__n128 *)v11 = *v142;
          *(_OWORD *)(v11 + 16) = v214;
          result = v271;
          *(_OWORD *)(v11 + 140) = *(_OWORD *)&v388[12];
          *(_OWORD *)(v11 + 112) = v349;
          *(_OWORD *)(v11 + 128) = *(_OWORD *)v388;
          *v142 = v271;
          *(_OWORD *)(v11 + 96) = v310;
          result.n128_u32[0] = *(_DWORD *)(a2 - 8);
          if (result.n128_f32[0] < *(float *)(v11 + 152))
          {
            v350 = *(_OWORD *)(v11 + 112);
            *(_OWORD *)v389 = *(_OWORD *)(v11 + 128);
            *(_OWORD *)&v389[16] = *(_OWORD *)(v11 + 144);
            v272 = *v142;
            v311 = *(__n128 *)(v11 + 96);
            v216 = *(_OWORD *)(a2 - 48);
            v215 = *(_OWORD *)(a2 - 32);
            v217 = *(_OWORD *)(a2 - 64);
            *(_OWORD *)(v11 + 140) = *(_OWORD *)(a2 - 20);
            *(_OWORD *)(v11 + 112) = v216;
            *(_OWORD *)(v11 + 128) = v215;
            *(_OWORD *)(v11 + 96) = v217;
            *v142 = *v8;
            *v8 = v272;
            result = v311;
            *(_OWORD *)(a2 - 20) = *(_OWORD *)&v389[12];
            *(_OWORD *)(a2 - 48) = v350;
            *(_OWORD *)(a2 - 32) = *(_OWORD *)v389;
            *(__n128 *)(a2 - 64) = v311;
          }
        }
        else
        {
          v260 = *(__n128 *)v11;
          *(_OWORD *)v377 = *(_OWORD *)(v11 + 48);
          *(_OWORD *)&v377[16] = *(_OWORD *)(v11 + 64);
          v299 = *(_OWORD *)(v11 + 16);
          v338 = *(_OWORD *)(v11 + 32);
          v144 = *(_OWORD *)(a2 - 48);
          result = *(__n128 *)(a2 - 32);
          v145 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(v11 + 60) = *(_OWORD *)(a2 - 20);
          *(_OWORD *)(v11 + 32) = v144;
          *(__n128 *)(v11 + 48) = result;
          *(_OWORD *)(v11 + 16) = v145;
          *(__n128 *)v11 = *v8;
          *(_OWORD *)(a2 - 20) = *(_OWORD *)&v377[12];
          *(_OWORD *)(a2 - 48) = v338;
          *(_OWORD *)(a2 - 32) = *(_OWORD *)v377;
          *(_OWORD *)(a2 - 64) = v299;
          result.n128_u64[0] = v260.n128_u64[0];
          *v8 = v260;
        }
        return result;
      case 4:
        result.n128_u64[0] = sub_2233C2230(v11, v11 + 80, v11 + 160, a2 - 80).n128_u64[0];
        return result;
      case 5:
        v146 = (__n128 *)(v11 + 80);
        v147 = (__n128 *)(v11 + 160);
        v148 = (__n128 *)(v11 + 240);
        result = sub_2233C2230(v11, v11 + 80, v11 + 160, v11 + 240);
        result.n128_u32[0] = *(_DWORD *)(a2 - 8);
        if (result.n128_f32[0] < *(float *)(v11 + 312))
        {
          v339 = *(_OWORD *)(v11 + 272);
          *(_OWORD *)v378 = *(_OWORD *)(v11 + 288);
          *(_OWORD *)&v378[16] = *(_OWORD *)(v11 + 304);
          v261 = *v148;
          v300 = *(__n128 *)(v11 + 256);
          v150 = *(_OWORD *)(a2 - 48);
          v149 = *(_OWORD *)(a2 - 32);
          v151 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(v11 + 300) = *(_OWORD *)(a2 - 20);
          *(_OWORD *)(v11 + 272) = v150;
          *(_OWORD *)(v11 + 288) = v149;
          *(_OWORD *)(v11 + 256) = v151;
          *v148 = *(__n128 *)(a2 - 80);
          *(__n128 *)(a2 - 80) = v261;
          result = v300;
          *(_OWORD *)(a2 - 20) = *(_OWORD *)&v378[12];
          *(_OWORD *)(a2 - 48) = v339;
          *(_OWORD *)(a2 - 32) = *(_OWORD *)v378;
          *(__n128 *)(a2 - 64) = v300;
          result.n128_u32[0] = *(_DWORD *)(v11 + 312);
          if (result.n128_f32[0] < *(float *)(v11 + 232))
          {
            v340 = *(_OWORD *)(v11 + 192);
            *(_OWORD *)v379 = *(_OWORD *)(v11 + 208);
            *(_OWORD *)&v379[16] = *(_OWORD *)(v11 + 224);
            v262 = *v147;
            v301 = *(_OWORD *)(v11 + 176);
            v152 = *(_OWORD *)(v11 + 288);
            *(_OWORD *)(v11 + 192) = *(_OWORD *)(v11 + 272);
            *(_OWORD *)(v11 + 208) = v152;
            *(_OWORD *)(v11 + 220) = *(_OWORD *)(v11 + 300);
            v153 = *(_OWORD *)(v11 + 256);
            *v147 = *v148;
            *(_OWORD *)(v11 + 176) = v153;
            result = v262;
            *(_OWORD *)(v11 + 300) = *(_OWORD *)&v379[12];
            *(_OWORD *)(v11 + 272) = v340;
            *(_OWORD *)(v11 + 288) = *(_OWORD *)v379;
            v154 = *(float *)(v11 + 232);
            v155 = *(float *)(v11 + 152);
            *v148 = v262;
            *(_OWORD *)(v11 + 256) = v301;
            if (v154 < v155)
            {
              v341 = *(_OWORD *)(v11 + 112);
              *(_OWORD *)v380 = *(_OWORD *)(v11 + 128);
              *(_OWORD *)&v380[16] = *(_OWORD *)(v11 + 144);
              v263 = *v146;
              v302 = *(_OWORD *)(v11 + 96);
              v156 = *(_OWORD *)(v11 + 208);
              *(_OWORD *)(v11 + 112) = *(_OWORD *)(v11 + 192);
              *(_OWORD *)(v11 + 128) = v156;
              *(_OWORD *)(v11 + 140) = *(_OWORD *)(v11 + 220);
              v157 = *(_OWORD *)(v11 + 176);
              *v146 = *v147;
              *(_OWORD *)(v11 + 96) = v157;
              result = v263;
              *(_OWORD *)(v11 + 220) = *(_OWORD *)&v380[12];
              *(_OWORD *)(v11 + 192) = v341;
              *(_OWORD *)(v11 + 208) = *(_OWORD *)v380;
              v158 = *(float *)(v11 + 152);
              v159 = *(float *)(v11 + 72);
              *v147 = v263;
              *(_OWORD *)(v11 + 176) = v302;
              if (v158 < v159)
              {
                v264 = *(__n128 *)v11;
                *(_OWORD *)v381 = *(_OWORD *)(v11 + 48);
                *(_OWORD *)&v381[16] = *(_OWORD *)(v11 + 64);
                v303 = *(_OWORD *)(v11 + 16);
                v342 = *(_OWORD *)(v11 + 32);
                *(_OWORD *)(v11 + 60) = *(_OWORD *)(v11 + 140);
                v160 = *(_OWORD *)(v11 + 128);
                *(_OWORD *)(v11 + 32) = *(_OWORD *)(v11 + 112);
                *(_OWORD *)(v11 + 48) = v160;
                v161 = *(_OWORD *)(v11 + 96);
                *(__n128 *)v11 = *v146;
                *(_OWORD *)(v11 + 16) = v161;
                result = v264;
                *(_OWORD *)(v11 + 140) = *(_OWORD *)&v381[12];
                *(_OWORD *)(v11 + 112) = v342;
                *(_OWORD *)(v11 + 128) = *(_OWORD *)v381;
                *v146 = v264;
                *(_OWORD *)(v11 + 96) = v303;
              }
            }
          }
        }
        return result;
      default:
        if (v12 > 1919)
        {
          if (!a3)
          {
            if (v11 != a2)
            {
              v173 = (unint64_t)(v13 - 2) >> 1;
              v174 = v173;
              do
              {
                if (v173 >= v174)
                {
                  v176 = (2 * v174) | 1;
                  v177 = v11 + 80 * v176;
                  if (2 * v174 + 2 < v13 && *(float *)(v177 + 72) < *(float *)(v177 + 152))
                  {
                    v177 += 80;
                    v176 = 2 * v174 + 2;
                  }
                  v178 = v11 + 80 * v174;
                  v179 = *(float *)(v178 + 72);
                  if (*(float *)(v177 + 72) >= v179)
                  {
                    v266 = *(_OWORD *)v178;
                    v391 = *(_QWORD *)(v178 + 64);
                    v344 = *(_OWORD *)(v178 + 32);
                    v383 = *(_OWORD *)(v178 + 48);
                    v305 = *(_OWORD *)(v178 + 16);
                    do
                    {
                      v180 = (_OWORD *)v178;
                      v178 = v177;
                      *v180 = *(_OWORD *)v177;
                      v181 = *(_OWORD *)(v177 + 16);
                      v182 = *(_OWORD *)(v177 + 32);
                      v183 = *(_OWORD *)(v177 + 48);
                      *(_OWORD *)((char *)v180 + 60) = *(_OWORD *)(v177 + 60);
                      v180[2] = v182;
                      v180[3] = v183;
                      v180[1] = v181;
                      if (v173 < v176)
                        break;
                      v184 = 2 * v176;
                      v176 = (2 * v176) | 1;
                      v177 = v11 + 80 * v176;
                      v185 = v184 + 2;
                      if (v185 < v13 && *(float *)(v177 + 72) < *(float *)(v177 + 152))
                      {
                        v177 += 80;
                        v176 = v185;
                      }
                    }
                    while (*(float *)(v177 + 72) >= v179);
                    *(_OWORD *)v178 = v266;
                    *(_QWORD *)(v178 + 64) = v391;
                    *(_OWORD *)(v178 + 32) = v344;
                    *(_OWORD *)(v178 + 48) = v383;
                    *(_OWORD *)(v178 + 16) = v305;
                    *(float *)(v178 + 72) = v179;
                  }
                }
                v175 = v174-- <= 0;
              }
              while (!v175);
              v186 = v12 / 0x50uLL;
              do
              {
                v187 = 0;
                v267 = *(__n128 *)v11;
                *(_OWORD *)v384 = *(_OWORD *)(v11 + 48);
                *(_OWORD *)&v384[16] = *(_OWORD *)(v11 + 64);
                v306 = *(__n128 *)(v11 + 16);
                v345 = *(_OWORD *)(v11 + 32);
                v188 = v11;
                do
                {
                  v192 = (_OWORD *)v188;
                  v188 += 80 * v187 + 80;
                  v193 = 2 * v187;
                  v187 = (2 * v187) | 1;
                  v194 = v193 + 2;
                  if (v194 < v186 && *(float *)(v188 + 72) < *(float *)(v188 + 152))
                  {
                    v188 += 80;
                    v187 = v194;
                  }
                  *v192 = *(_OWORD *)v188;
                  v189 = *(_OWORD *)(v188 + 16);
                  v190 = *(_OWORD *)(v188 + 32);
                  v191 = *(_OWORD *)(v188 + 48);
                  *(_OWORD *)((char *)v192 + 60) = *(_OWORD *)(v188 + 60);
                  v192[2] = v190;
                  v192[3] = v191;
                  v192[1] = v189;
                }
                while (v187 <= (uint64_t)((unint64_t)(v186 - 2) >> 1));
                a2 -= 80;
                if (v188 == a2)
                {
                  *(__n128 *)v188 = v267;
                  result = v306;
                  *(_OWORD *)(v188 + 60) = *(_OWORD *)&v384[12];
                  *(_OWORD *)(v188 + 32) = v345;
                  *(_OWORD *)(v188 + 48) = *(_OWORD *)v384;
                  *(__n128 *)(v188 + 16) = v306;
                }
                else
                {
                  *(_OWORD *)v188 = *(_OWORD *)a2;
                  result = *(__n128 *)(a2 + 16);
                  v195 = *(_OWORD *)(a2 + 32);
                  v196 = *(_OWORD *)(a2 + 48);
                  *(_OWORD *)(v188 + 60) = *(_OWORD *)(a2 + 60);
                  *(_OWORD *)(v188 + 32) = v195;
                  *(_OWORD *)(v188 + 48) = v196;
                  *(__n128 *)(v188 + 16) = result;
                  *(_OWORD *)(a2 + 60) = *(_OWORD *)&v384[12];
                  *(_OWORD *)(a2 + 32) = v345;
                  *(_OWORD *)(a2 + 48) = *(_OWORD *)v384;
                  *(__n128 *)(a2 + 16) = v306;
                  result.n128_u64[0] = v267.n128_u64[0];
                  *(__n128 *)a2 = v267;
                  v197 = v188 - v11 + 80;
                  if (v197 >= 81)
                  {
                    v198 = (v197 / 0x50uLL - 2) >> 1;
                    v199 = v11 + 80 * v198;
                    result.n128_u32[0] = *(_DWORD *)(v188 + 72);
                    if (*(float *)(v199 + 72) < result.n128_f32[0])
                    {
                      v221 = *(_OWORD *)v188;
                      v233 = *(_QWORD *)(v188 + 64);
                      v227 = *(_OWORD *)(v188 + 32);
                      v230 = *(_OWORD *)(v188 + 48);
                      v224 = *(_OWORD *)(v188 + 16);
                      do
                      {
                        v200 = (_OWORD *)v188;
                        v188 = v199;
                        *v200 = *(_OWORD *)v199;
                        v201 = *(_OWORD *)(v199 + 16);
                        v202 = *(_OWORD *)(v199 + 32);
                        v203 = *(_OWORD *)(v199 + 48);
                        *(_OWORD *)((char *)v200 + 60) = *(_OWORD *)(v199 + 60);
                        v200[2] = v202;
                        v200[3] = v203;
                        v200[1] = v201;
                        if (!v198)
                          break;
                        v198 = (v198 - 1) >> 1;
                        v199 = v11 + 80 * v198;
                      }
                      while (*(float *)(v199 + 72) < result.n128_f32[0]);
                      *(_OWORD *)v188 = v221;
                      *(_QWORD *)(v188 + 64) = v233;
                      *(_OWORD *)(v188 + 32) = v227;
                      *(_OWORD *)(v188 + 48) = v230;
                      *(_OWORD *)(v188 + 16) = v224;
                      *(_DWORD *)(v188 + 72) = result.n128_u32[0];
                    }
                  }
                }
                v175 = v186-- <= 2;
              }
              while (!v175);
            }
            return result;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = v11 + 80 * ((unint64_t)v13 >> 1);
          v16 = *(float *)(a2 - 8);
          if ((unint64_t)v12 < 0x2801)
          {
            v21 = *(float *)(v11 + 72);
            if (v21 >= *(float *)(v15 + 72))
            {
              if (v16 < v21)
              {
                v238 = *(__n128 *)v11;
                *(_OWORD *)v355 = *(_OWORD *)(v11 + 48);
                *(_OWORD *)&v355[16] = *(_OWORD *)(v11 + 64);
                v277 = *(_OWORD *)(v11 + 16);
                v316 = *(_OWORD *)(v11 + 32);
                v32 = *(_OWORD *)(a2 - 48);
                v31 = *(_OWORD *)(a2 - 32);
                v33 = *(_OWORD *)(a2 - 64);
                *(_OWORD *)(v11 + 60) = *(_OWORD *)(a2 - 20);
                *(_OWORD *)(v11 + 32) = v32;
                *(_OWORD *)(v11 + 48) = v31;
                *(_OWORD *)(v11 + 16) = v33;
                *(__n128 *)v11 = *v8;
                *(_OWORD *)(a2 - 20) = *(_OWORD *)&v355[12];
                *(_OWORD *)(a2 - 48) = v316;
                *(_OWORD *)(a2 - 32) = *(_OWORD *)v355;
                *(_OWORD *)(a2 - 64) = v277;
                *v8 = v238;
                if (*(float *)(v11 + 72) < *(float *)(v15 + 72))
                {
                  v239 = *(__n128 *)v15;
                  *(_OWORD *)v356 = *(_OWORD *)(v15 + 48);
                  *(_OWORD *)&v356[16] = *(_OWORD *)(v15 + 64);
                  v278 = *(_OWORD *)(v15 + 16);
                  v317 = *(_OWORD *)(v15 + 32);
                  v35 = *(_OWORD *)(v11 + 32);
                  v34 = *(_OWORD *)(v11 + 48);
                  v36 = *(_OWORD *)(v11 + 16);
                  *(_OWORD *)(v15 + 60) = *(_OWORD *)(v11 + 60);
                  *(_OWORD *)(v15 + 32) = v35;
                  *(_OWORD *)(v15 + 48) = v34;
                  *(_OWORD *)(v15 + 16) = v36;
                  *(_OWORD *)v15 = *(_OWORD *)v11;
                  *(_OWORD *)(v11 + 60) = *(_OWORD *)&v356[12];
                  *(_OWORD *)(v11 + 32) = v317;
                  *(_OWORD *)(v11 + 48) = *(_OWORD *)v356;
                  *(_OWORD *)(v11 + 16) = v278;
                  *(__n128 *)v11 = v239;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_53;
                }
              }
            }
            else
            {
              if (v16 >= v21)
              {
                v244 = *(__n128 *)v15;
                *(_OWORD *)v361 = *(_OWORD *)(v15 + 48);
                *(_OWORD *)&v361[16] = *(_OWORD *)(v15 + 64);
                v283 = *(_OWORD *)(v15 + 16);
                v322 = *(_OWORD *)(v15 + 32);
                v58 = *(_OWORD *)(v11 + 32);
                v57 = *(_OWORD *)(v11 + 48);
                v59 = *(_OWORD *)(v11 + 16);
                *(_OWORD *)(v15 + 60) = *(_OWORD *)(v11 + 60);
                *(_OWORD *)(v15 + 32) = v58;
                *(_OWORD *)(v15 + 48) = v57;
                *(_OWORD *)(v15 + 16) = v59;
                *(_OWORD *)v15 = *(_OWORD *)v11;
                *(_OWORD *)(v11 + 60) = *(_OWORD *)&v361[12];
                *(_OWORD *)(v11 + 32) = v322;
                *(_OWORD *)(v11 + 48) = *(_OWORD *)v361;
                *(_OWORD *)(v11 + 16) = v283;
                *(__n128 *)v11 = v244;
                if (*(float *)(a2 - 8) >= *(float *)(v11 + 72))
                  goto LABEL_31;
                v235 = *(__n128 *)v11;
                *(_OWORD *)v352 = *(_OWORD *)(v11 + 48);
                *(_OWORD *)&v352[16] = *(_OWORD *)(v11 + 64);
                v274 = *(_OWORD *)(v11 + 16);
                v313 = *(_OWORD *)(v11 + 32);
                v61 = *(_OWORD *)(a2 - 48);
                v60 = *(_OWORD *)(a2 - 32);
                v62 = *(_OWORD *)(a2 - 64);
                *(_OWORD *)(v11 + 60) = *(_OWORD *)(a2 - 20);
                *(_OWORD *)(v11 + 32) = v61;
                *(_OWORD *)(v11 + 48) = v60;
                *(_OWORD *)(v11 + 16) = v62;
                *(__n128 *)v11 = *v8;
              }
              else
              {
                v235 = *(__n128 *)v15;
                *(_OWORD *)v352 = *(_OWORD *)(v15 + 48);
                *(_OWORD *)&v352[16] = *(_OWORD *)(v15 + 64);
                v274 = *(_OWORD *)(v15 + 16);
                v313 = *(_OWORD *)(v15 + 32);
                v23 = *(_OWORD *)(a2 - 48);
                v22 = *(_OWORD *)(a2 - 32);
                v24 = *(_OWORD *)(a2 - 64);
                *(_OWORD *)(v15 + 60) = *(_OWORD *)(a2 - 20);
                *(_OWORD *)(v15 + 32) = v23;
                *(_OWORD *)(v15 + 48) = v22;
                *(_OWORD *)(v15 + 16) = v24;
                *(__n128 *)v15 = *v8;
              }
              *(_OWORD *)(a2 - 20) = *(_OWORD *)&v352[12];
              *(_OWORD *)(a2 - 48) = v313;
              *(_OWORD *)(a2 - 32) = *(_OWORD *)v352;
              *(_OWORD *)(a2 - 64) = v274;
              *v8 = v235;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_53:
            v63 = *(float *)(v11 + 72);
            if (*(float *)(v11 - 8) < v63)
              goto LABEL_54;
            v220 = *(__n128 *)v11;
            result = *(__n128 *)(v11 + 16);
            v232 = *(_QWORD *)(v11 + 64);
            v226 = *(_OWORD *)(v11 + 32);
            v229 = *(_OWORD *)(v11 + 48);
            v223 = result;
            result.n128_u32[0] = *(_DWORD *)(v11 + 72);
            if (result.n128_f32[0] >= *(float *)(a2 - 8))
            {
              v126 = v11 + 80;
              do
              {
                v11 = v126;
                if (v126 >= a2)
                  break;
                v127 = *(float *)(v126 + 72);
                v126 += 80;
              }
              while (result.n128_f32[0] >= v127);
            }
            else
            {
              v124 = v11;
              do
              {
                v11 = v124 + 80;
                v125 = *(float *)(v124 + 152);
                v124 += 80;
              }
              while (result.n128_f32[0] >= v125);
            }
            v128 = (_OWORD *)a2;
            if (v11 < a2)
            {
              v129 = a2;
              do
              {
                v128 = (_OWORD *)(v129 - 80);
                v130 = *(float *)(v129 - 8);
                v129 -= 80;
              }
              while (result.n128_f32[0] < v130);
            }
            while (v11 < (unint64_t)v128)
            {
              v258 = *(__n128 *)v11;
              *(_OWORD *)v375 = *(_OWORD *)(v11 + 48);
              *(_OWORD *)&v375[16] = *(_OWORD *)(v11 + 64);
              v297 = *(_OWORD *)(v11 + 16);
              v336 = *(_OWORD *)(v11 + 32);
              v132 = v128[2];
              v131 = v128[3];
              v133 = v128[1];
              *(_OWORD *)(v11 + 60) = *(_OWORD *)((char *)v128 + 60);
              *(_OWORD *)(v11 + 32) = v132;
              *(_OWORD *)(v11 + 48) = v131;
              *(_OWORD *)(v11 + 16) = v133;
              *(_OWORD *)v11 = *v128;
              *(_OWORD *)((char *)v128 + 60) = *(_OWORD *)&v375[12];
              v128[2] = v336;
              v128[3] = *(_OWORD *)v375;
              v128[1] = v297;
              *v128 = v258;
              do
              {
                v134 = *(float *)(v11 + 152);
                v11 += 80;
              }
              while (result.n128_f32[0] >= v134);
              do
              {
                v135 = *((float *)v128 - 2);
                v128 -= 5;
              }
              while (result.n128_f32[0] < v135);
            }
            v136 = (__n128 *)(v11 - 80);
            if (v11 - 80 != a1)
            {
              *(__n128 *)a1 = *v136;
              v137 = *(_OWORD *)(v11 - 64);
              v138 = *(_OWORD *)(v11 - 48);
              v139 = *(_OWORD *)(v11 - 32);
              *(_OWORD *)(a1 + 60) = *(_OWORD *)(v11 - 20);
              *(_OWORD *)(a1 + 32) = v138;
              *(_OWORD *)(a1 + 48) = v139;
              *(_OWORD *)(a1 + 16) = v137;
            }
            a4 = 0;
            *v136 = v220;
            *(_QWORD *)(v11 - 16) = v232;
            *(_OWORD *)(v11 - 48) = v226;
            *(_OWORD *)(v11 - 32) = v229;
            *(__n128 *)(v11 - 64) = v223;
            *(_DWORD *)(v11 - 8) = result.n128_u32[0];
            continue;
          }
          v17 = *(float *)(v15 + 72);
          if (v17 >= *(float *)(v11 + 72))
          {
            if (v16 < v17)
            {
              v236 = *(__n128 *)v15;
              *(_OWORD *)v353 = *(_OWORD *)(v15 + 48);
              *(_OWORD *)&v353[16] = *(_OWORD *)(v15 + 64);
              v275 = *(_OWORD *)(v15 + 16);
              v314 = *(_OWORD *)(v15 + 32);
              v26 = *(_OWORD *)(a2 - 48);
              v25 = *(_OWORD *)(a2 - 32);
              v27 = *(_OWORD *)(a2 - 64);
              *(_OWORD *)(v15 + 60) = *(_OWORD *)(a2 - 20);
              *(_OWORD *)(v15 + 32) = v26;
              *(_OWORD *)(v15 + 48) = v25;
              *(_OWORD *)(v15 + 16) = v27;
              *(__n128 *)v15 = *v8;
              *(_OWORD *)(a2 - 20) = *(_OWORD *)&v353[12];
              *(_OWORD *)(a2 - 48) = v314;
              *(_OWORD *)(a2 - 32) = *(_OWORD *)v353;
              *(_OWORD *)(a2 - 64) = v275;
              *v8 = v236;
              if (*(float *)(v15 + 72) < *(float *)(v11 + 72))
              {
                v237 = *(__n128 *)v11;
                *(_OWORD *)v354 = *(_OWORD *)(v11 + 48);
                *(_OWORD *)&v354[16] = *(_OWORD *)(v11 + 64);
                v276 = *(_OWORD *)(v11 + 16);
                v315 = *(_OWORD *)(v11 + 32);
                v29 = *(_OWORD *)(v15 + 32);
                v28 = *(_OWORD *)(v15 + 48);
                v30 = *(_OWORD *)(v15 + 16);
                *(_OWORD *)(v11 + 60) = *(_OWORD *)(v15 + 60);
                *(_OWORD *)(v11 + 32) = v29;
                *(_OWORD *)(v11 + 48) = v28;
                *(_OWORD *)(v11 + 16) = v30;
                *(_OWORD *)v11 = *(_OWORD *)v15;
                *(_OWORD *)(v15 + 60) = *(_OWORD *)&v354[12];
                *(_OWORD *)(v15 + 32) = v315;
                *(_OWORD *)(v15 + 48) = *(_OWORD *)v354;
                *(_OWORD *)(v15 + 16) = v276;
                *(__n128 *)v15 = v237;
              }
            }
          }
          else
          {
            if (v16 >= v17)
            {
              v240 = *(__n128 *)v11;
              *(_OWORD *)v357 = *(_OWORD *)(v11 + 48);
              *(_OWORD *)&v357[16] = *(_OWORD *)(v11 + 64);
              v279 = *(_OWORD *)(v11 + 16);
              v318 = *(_OWORD *)(v11 + 32);
              v38 = *(_OWORD *)(v15 + 32);
              v37 = *(_OWORD *)(v15 + 48);
              v39 = *(_OWORD *)(v15 + 16);
              *(_OWORD *)(v11 + 60) = *(_OWORD *)(v15 + 60);
              *(_OWORD *)(v11 + 32) = v38;
              *(_OWORD *)(v11 + 48) = v37;
              *(_OWORD *)(v11 + 16) = v39;
              *(_OWORD *)v11 = *(_OWORD *)v15;
              *(_OWORD *)(v15 + 60) = *(_OWORD *)&v357[12];
              *(_OWORD *)(v15 + 32) = v318;
              *(_OWORD *)(v15 + 48) = *(_OWORD *)v357;
              *(_OWORD *)(v15 + 16) = v279;
              *(__n128 *)v15 = v240;
              if (*(float *)(a2 - 8) >= *(float *)(v15 + 72))
                goto LABEL_22;
              v234 = *(__n128 *)v15;
              *(_OWORD *)v351 = *(_OWORD *)(v15 + 48);
              *(_OWORD *)&v351[16] = *(_OWORD *)(v15 + 64);
              v273 = *(_OWORD *)(v15 + 16);
              v312 = *(_OWORD *)(v15 + 32);
              v41 = *(_OWORD *)(a2 - 48);
              v40 = *(_OWORD *)(a2 - 32);
              v42 = *(_OWORD *)(a2 - 64);
              *(_OWORD *)(v15 + 60) = *(_OWORD *)(a2 - 20);
              *(_OWORD *)(v15 + 32) = v41;
              *(_OWORD *)(v15 + 48) = v40;
              *(_OWORD *)(v15 + 16) = v42;
              *(__n128 *)v15 = *v8;
            }
            else
            {
              v234 = *(__n128 *)v11;
              *(_OWORD *)v351 = *(_OWORD *)(v11 + 48);
              *(_OWORD *)&v351[16] = *(_OWORD *)(v11 + 64);
              v273 = *(_OWORD *)(v11 + 16);
              v312 = *(_OWORD *)(v11 + 32);
              v19 = *(_OWORD *)(a2 - 48);
              v18 = *(_OWORD *)(a2 - 32);
              v20 = *(_OWORD *)(a2 - 64);
              *(_OWORD *)(v11 + 60) = *(_OWORD *)(a2 - 20);
              *(_OWORD *)(v11 + 32) = v19;
              *(_OWORD *)(v11 + 48) = v18;
              *(_OWORD *)(v11 + 16) = v20;
              *(__n128 *)v11 = *v8;
            }
            *(_OWORD *)(a2 - 20) = *(_OWORD *)&v351[12];
            *(_OWORD *)(a2 - 48) = v312;
            *(_OWORD *)(a2 - 32) = *(_OWORD *)v351;
            *(_OWORD *)(a2 - 64) = v273;
            *v8 = v234;
          }
LABEL_22:
          v43 = (__int128 *)(v11 + 80);
          v44 = v11 + 80 * v14;
          v45 = v44 - 80;
          v46 = *(float *)(v44 - 8);
          v47 = *(float *)(a2 - 88);
          if (v46 >= *(float *)(v11 + 152))
          {
            if (v47 < v46)
            {
              v242 = *(_OWORD *)v45;
              *(_OWORD *)v359 = *(_OWORD *)(v44 - 32);
              *(_OWORD *)&v359[16] = *(_OWORD *)(v44 - 16);
              v281 = *(_OWORD *)(v44 - 64);
              v320 = *(_OWORD *)(v44 - 48);
              v52 = *(_OWORD *)(a2 - 128);
              v51 = *(_OWORD *)(a2 - 112);
              v53 = *(_OWORD *)(a2 - 144);
              *(_OWORD *)(v44 - 20) = *(_OWORD *)(a2 - 100);
              *(_OWORD *)(v44 - 48) = v52;
              *(_OWORD *)(v44 - 32) = v51;
              *(_OWORD *)(v44 - 64) = v53;
              *(_OWORD *)v45 = *v9;
              *(_OWORD *)(a2 - 100) = *(_OWORD *)&v359[12];
              *(_OWORD *)(a2 - 128) = v320;
              *(_OWORD *)(a2 - 112) = *(_OWORD *)v359;
              *(_OWORD *)(a2 - 144) = v281;
              *v9 = v242;
              if (*(float *)(v44 - 8) < *(float *)(v11 + 152))
              {
                v321 = *(_OWORD *)(v11 + 112);
                *(_OWORD *)v360 = *(_OWORD *)(v11 + 128);
                *(_OWORD *)&v360[16] = *(_OWORD *)(v11 + 144);
                v243 = *v43;
                v282 = *(_OWORD *)(v11 + 96);
                v55 = *(_OWORD *)(v44 - 48);
                v54 = *(_OWORD *)(v44 - 32);
                v56 = *(_OWORD *)(v44 - 64);
                *(_OWORD *)(v11 + 140) = *(_OWORD *)(v44 - 20);
                *(_OWORD *)(v11 + 112) = v55;
                *(_OWORD *)(v11 + 128) = v54;
                *(_OWORD *)(v11 + 96) = v56;
                *v43 = *(_OWORD *)v45;
                *(_OWORD *)v45 = v243;
                *(_OWORD *)(v44 - 20) = *(_OWORD *)&v360[12];
                *(_OWORD *)(v44 - 48) = v321;
                *(_OWORD *)(v44 - 32) = *(_OWORD *)v360;
                *(_OWORD *)(v44 - 64) = v282;
              }
            }
          }
          else if (v47 >= v46)
          {
            v323 = *(_OWORD *)(v11 + 112);
            *(_OWORD *)v362 = *(_OWORD *)(v11 + 128);
            *(_OWORD *)&v362[16] = *(_OWORD *)(v11 + 144);
            v245 = *v43;
            v284 = *(_OWORD *)(v11 + 96);
            v65 = *(_OWORD *)(v44 - 48);
            v64 = *(_OWORD *)(v44 - 32);
            v66 = *(_OWORD *)(v44 - 64);
            *(_OWORD *)(v11 + 140) = *(_OWORD *)(v44 - 20);
            *(_OWORD *)(v11 + 112) = v65;
            *(_OWORD *)(v11 + 128) = v64;
            *(_OWORD *)(v11 + 96) = v66;
            *v43 = *(_OWORD *)v45;
            *(_OWORD *)v45 = v245;
            *(_OWORD *)(v44 - 20) = *(_OWORD *)&v362[12];
            *(_OWORD *)(v44 - 48) = v323;
            *(_OWORD *)(v44 - 32) = *(_OWORD *)v362;
            *(_OWORD *)(v44 - 64) = v284;
            if (*(float *)(a2 - 88) < *(float *)(v44 - 8))
            {
              v246 = *(_OWORD *)v45;
              *(_OWORD *)v363 = *(_OWORD *)(v44 - 32);
              *(_OWORD *)&v363[16] = *(_OWORD *)(v44 - 16);
              v285 = *(_OWORD *)(v44 - 64);
              v324 = *(_OWORD *)(v44 - 48);
              v68 = *(_OWORD *)(a2 - 128);
              v67 = *(_OWORD *)(a2 - 112);
              v69 = *(_OWORD *)(a2 - 144);
              *(_OWORD *)(v44 - 20) = *(_OWORD *)(a2 - 100);
              *(_OWORD *)(v44 - 48) = v68;
              *(_OWORD *)(v44 - 32) = v67;
              *(_OWORD *)(v44 - 64) = v69;
              *(_OWORD *)v45 = *v9;
              *(_OWORD *)(a2 - 100) = *(_OWORD *)&v363[12];
              *(_OWORD *)(a2 - 128) = v324;
              *(_OWORD *)(a2 - 112) = *(_OWORD *)v363;
              *(_OWORD *)(a2 - 144) = v285;
              *v9 = v246;
            }
          }
          else
          {
            v319 = *(_OWORD *)(v11 + 112);
            *(_OWORD *)v358 = *(_OWORD *)(v11 + 128);
            *(_OWORD *)&v358[16] = *(_OWORD *)(v11 + 144);
            v241 = *v43;
            v280 = *(_OWORD *)(v11 + 96);
            v49 = *(_OWORD *)(a2 - 128);
            v48 = *(_OWORD *)(a2 - 112);
            v50 = *(_OWORD *)(a2 - 144);
            *(_OWORD *)(v11 + 140) = *(_OWORD *)(a2 - 100);
            *(_OWORD *)(v11 + 112) = v49;
            *(_OWORD *)(v11 + 128) = v48;
            *(_OWORD *)(v11 + 96) = v50;
            *v43 = *v9;
            *v9 = v241;
            *(_OWORD *)(a2 - 100) = *(_OWORD *)&v358[12];
            *(_OWORD *)(a2 - 128) = v319;
            *(_OWORD *)(a2 - 112) = *(_OWORD *)v358;
            *(_OWORD *)(a2 - 144) = v280;
          }
          v70 = (__n128 *)(v11 + 160);
          v71 = v11 + 80 * v14;
          v72 = (__n128 *)(v71 + 80);
          v73 = *(float *)(v71 + 152);
          v74 = *(float *)(a2 - 168);
          if (v73 >= *(float *)(v11 + 232))
          {
            if (v74 < v73)
            {
              v248 = *v72;
              *(_OWORD *)v365 = *(_OWORD *)(v71 + 128);
              *(_OWORD *)&v365[16] = *(_OWORD *)(v71 + 144);
              v287 = *(_OWORD *)(v71 + 96);
              v326 = *(_OWORD *)(v71 + 112);
              v79 = *(_OWORD *)(a2 - 208);
              v78 = *(_OWORD *)(a2 - 192);
              v80 = *(_OWORD *)(a2 - 224);
              *(_OWORD *)(v71 + 140) = *(_OWORD *)(a2 - 180);
              *(_OWORD *)(v71 + 112) = v79;
              *(_OWORD *)(v71 + 128) = v78;
              *(_OWORD *)(v71 + 96) = v80;
              *v72 = *v10;
              *(_OWORD *)(a2 - 180) = *(_OWORD *)&v365[12];
              *(_OWORD *)(a2 - 208) = v326;
              *(_OWORD *)(a2 - 192) = *(_OWORD *)v365;
              *(_OWORD *)(a2 - 224) = v287;
              *v10 = v248;
              if (*(float *)(v71 + 152) < *(float *)(v11 + 232))
              {
                v327 = *(_OWORD *)(v11 + 192);
                *(_OWORD *)v366 = *(_OWORD *)(v11 + 208);
                *(_OWORD *)&v366[16] = *(_OWORD *)(v11 + 224);
                v249 = *v70;
                v288 = *(_OWORD *)(v11 + 176);
                v82 = *(_OWORD *)(v71 + 112);
                v81 = *(_OWORD *)(v71 + 128);
                v83 = *(_OWORD *)(v71 + 96);
                *(_OWORD *)(v11 + 220) = *(_OWORD *)(v71 + 140);
                *(_OWORD *)(v11 + 192) = v82;
                *(_OWORD *)(v11 + 208) = v81;
                *(_OWORD *)(v11 + 176) = v83;
                *v70 = *v72;
                *v72 = v249;
                *(_OWORD *)(v71 + 140) = *(_OWORD *)&v366[12];
                *(_OWORD *)(v71 + 112) = v327;
                *(_OWORD *)(v71 + 128) = *(_OWORD *)v366;
                *(_OWORD *)(v71 + 96) = v288;
              }
            }
          }
          else if (v74 >= v73)
          {
            v328 = *(_OWORD *)(v11 + 192);
            *(_OWORD *)v367 = *(_OWORD *)(v11 + 208);
            *(_OWORD *)&v367[16] = *(_OWORD *)(v11 + 224);
            v250 = *v70;
            v289 = *(_OWORD *)(v11 + 176);
            v85 = *(_OWORD *)(v71 + 112);
            v84 = *(_OWORD *)(v71 + 128);
            v86 = *(_OWORD *)(v71 + 96);
            *(_OWORD *)(v11 + 220) = *(_OWORD *)(v71 + 140);
            *(_OWORD *)(v11 + 192) = v85;
            *(_OWORD *)(v11 + 208) = v84;
            *(_OWORD *)(v11 + 176) = v86;
            *v70 = *v72;
            *v72 = v250;
            *(_OWORD *)(v71 + 140) = *(_OWORD *)&v367[12];
            *(_OWORD *)(v71 + 112) = v328;
            *(_OWORD *)(v71 + 128) = *(_OWORD *)v367;
            *(_OWORD *)(v71 + 96) = v289;
            if (*(float *)(a2 - 168) < *(float *)(v71 + 152))
            {
              v251 = *v72;
              *(_OWORD *)v368 = *(_OWORD *)(v71 + 128);
              *(_OWORD *)&v368[16] = *(_OWORD *)(v71 + 144);
              v290 = *(_OWORD *)(v71 + 96);
              v329 = *(_OWORD *)(v71 + 112);
              v88 = *(_OWORD *)(a2 - 208);
              v87 = *(_OWORD *)(a2 - 192);
              v89 = *(_OWORD *)(a2 - 224);
              *(_OWORD *)(v71 + 140) = *(_OWORD *)(a2 - 180);
              *(_OWORD *)(v71 + 112) = v88;
              *(_OWORD *)(v71 + 128) = v87;
              *(_OWORD *)(v71 + 96) = v89;
              *v72 = *v10;
              *(_OWORD *)(a2 - 180) = *(_OWORD *)&v368[12];
              *(_OWORD *)(a2 - 208) = v329;
              *(_OWORD *)(a2 - 192) = *(_OWORD *)v368;
              *(_OWORD *)(a2 - 224) = v290;
              *v10 = v251;
            }
          }
          else
          {
            v325 = *(_OWORD *)(v11 + 192);
            *(_OWORD *)v364 = *(_OWORD *)(v11 + 208);
            *(_OWORD *)&v364[16] = *(_OWORD *)(v11 + 224);
            v247 = *v70;
            v286 = *(_OWORD *)(v11 + 176);
            v76 = *(_OWORD *)(a2 - 208);
            v75 = *(_OWORD *)(a2 - 192);
            v77 = *(_OWORD *)(a2 - 224);
            *(_OWORD *)(v11 + 220) = *(_OWORD *)(a2 - 180);
            *(_OWORD *)(v11 + 192) = v76;
            *(_OWORD *)(v11 + 208) = v75;
            *(_OWORD *)(v11 + 176) = v77;
            *v70 = *v10;
            *v10 = v247;
            *(_OWORD *)(a2 - 180) = *(_OWORD *)&v364[12];
            *(_OWORD *)(a2 - 208) = v325;
            *(_OWORD *)(a2 - 192) = *(_OWORD *)v364;
            *(_OWORD *)(a2 - 224) = v286;
          }
          v90 = *(float *)(v15 + 72);
          v91 = *(float *)(v71 + 152);
          if (v90 >= *(float *)(v45 + 72))
          {
            if (v91 < v90)
            {
              v253 = *(__n128 *)v15;
              *(_OWORD *)v370 = *(_OWORD *)(v15 + 48);
              *(_OWORD *)&v370[16] = *(_OWORD *)(v15 + 64);
              v292 = *(_OWORD *)(v15 + 16);
              v331 = *(_OWORD *)(v15 + 32);
              *(_OWORD *)(v15 + 60) = *(_OWORD *)(v71 + 140);
              v94 = *(_OWORD *)(v71 + 128);
              *(_OWORD *)(v15 + 32) = *(_OWORD *)(v71 + 112);
              *(_OWORD *)(v15 + 48) = v94;
              v95 = *(_OWORD *)(v71 + 96);
              *(__n128 *)v15 = *v72;
              *(_OWORD *)(v15 + 16) = v95;
              *v72 = v253;
              *(_OWORD *)(v71 + 96) = v292;
              *(_OWORD *)(v71 + 112) = v331;
              *(_OWORD *)(v71 + 140) = *(_OWORD *)&v370[12];
              *(_OWORD *)(v71 + 128) = *(_OWORD *)v370;
              if (*(float *)(v15 + 72) < *(float *)(v45 + 72))
              {
                v254 = *(_OWORD *)v45;
                *(_OWORD *)v371 = *(_OWORD *)(v45 + 48);
                *(_OWORD *)&v371[16] = *(_OWORD *)(v45 + 64);
                v293 = *(_OWORD *)(v45 + 16);
                v332 = *(_OWORD *)(v45 + 32);
                *(_OWORD *)(v45 + 60) = *(_OWORD *)(v15 + 60);
                v96 = *(_OWORD *)(v15 + 48);
                *(_OWORD *)(v45 + 32) = *(_OWORD *)(v15 + 32);
                *(_OWORD *)(v45 + 48) = v96;
                v97 = *(_OWORD *)(v15 + 16);
                *(_OWORD *)v45 = *(_OWORD *)v15;
                *(_OWORD *)(v45 + 16) = v97;
                *(_OWORD *)v15 = v254;
                *(_OWORD *)(v15 + 16) = v293;
                *(_OWORD *)(v15 + 32) = v332;
                *(_OWORD *)(v15 + 60) = *(_OWORD *)&v371[12];
                *(_OWORD *)(v15 + 48) = *(_OWORD *)v371;
              }
            }
          }
          else
          {
            if (v91 >= v90)
            {
              v255 = *(_OWORD *)v45;
              *(_OWORD *)v372 = *(_OWORD *)(v45 + 48);
              *(_OWORD *)&v372[16] = *(_OWORD *)(v45 + 64);
              v294 = *(_OWORD *)(v45 + 16);
              v333 = *(_OWORD *)(v45 + 32);
              *(_OWORD *)(v45 + 60) = *(_OWORD *)(v15 + 60);
              v98 = *(_OWORD *)(v15 + 48);
              *(_OWORD *)(v45 + 32) = *(_OWORD *)(v15 + 32);
              *(_OWORD *)(v45 + 48) = v98;
              v99 = *(_OWORD *)(v15 + 16);
              *(_OWORD *)v45 = *(_OWORD *)v15;
              *(_OWORD *)(v45 + 16) = v99;
              *(_OWORD *)v15 = v255;
              *(_OWORD *)(v15 + 16) = v294;
              *(_OWORD *)(v15 + 32) = v333;
              *(_OWORD *)(v15 + 60) = *(_OWORD *)&v372[12];
              *(_OWORD *)(v15 + 48) = *(_OWORD *)v372;
              if (*(float *)(v71 + 152) >= *(float *)(v15 + 72))
                goto LABEL_52;
              v252 = *(__n128 *)v15;
              *(_OWORD *)v369 = *(_OWORD *)(v15 + 48);
              *(_OWORD *)&v369[16] = *(_OWORD *)(v15 + 64);
              v291 = *(_OWORD *)(v15 + 16);
              v330 = *(_OWORD *)(v15 + 32);
              *(_OWORD *)(v15 + 60) = *(_OWORD *)(v71 + 140);
              v100 = *(_OWORD *)(v71 + 128);
              *(_OWORD *)(v15 + 32) = *(_OWORD *)(v71 + 112);
              *(_OWORD *)(v15 + 48) = v100;
              v101 = *(_OWORD *)(v71 + 96);
              *(__n128 *)v15 = *v72;
              *(_OWORD *)(v15 + 16) = v101;
            }
            else
            {
              v252 = *(__n128 *)v45;
              *(_OWORD *)v369 = *(_OWORD *)(v45 + 48);
              *(_OWORD *)&v369[16] = *(_OWORD *)(v45 + 64);
              v291 = *(_OWORD *)(v45 + 16);
              v330 = *(_OWORD *)(v45 + 32);
              *(_OWORD *)(v45 + 60) = *(_OWORD *)(v71 + 140);
              v92 = *(_OWORD *)(v71 + 128);
              *(_OWORD *)(v45 + 32) = *(_OWORD *)(v71 + 112);
              *(_OWORD *)(v45 + 48) = v92;
              v93 = *(_OWORD *)(v71 + 96);
              *(__n128 *)v45 = *v72;
              *(_OWORD *)(v45 + 16) = v93;
            }
            *v72 = v252;
            *(_OWORD *)(v71 + 96) = v291;
            *(_OWORD *)(v71 + 112) = v330;
            *(_OWORD *)(v71 + 140) = *(_OWORD *)&v369[12];
            *(_OWORD *)(v71 + 128) = *(_OWORD *)v369;
          }
LABEL_52:
          v256 = *(__n128 *)v11;
          *(_OWORD *)v373 = *(_OWORD *)(v11 + 48);
          *(_OWORD *)&v373[16] = *(_OWORD *)(v11 + 64);
          v295 = *(_OWORD *)(v11 + 16);
          v334 = *(_OWORD *)(v11 + 32);
          v103 = *(_OWORD *)(v15 + 32);
          v102 = *(_OWORD *)(v15 + 48);
          v104 = *(_OWORD *)(v15 + 16);
          *(_OWORD *)(v11 + 60) = *(_OWORD *)(v15 + 60);
          *(_OWORD *)(v11 + 32) = v103;
          *(_OWORD *)(v11 + 48) = v102;
          *(_OWORD *)(v11 + 16) = v104;
          *(_OWORD *)v11 = *(_OWORD *)v15;
          *(_OWORD *)(v15 + 60) = *(_OWORD *)&v373[12];
          *(_OWORD *)(v15 + 32) = v334;
          *(_OWORD *)(v15 + 48) = *(_OWORD *)v373;
          *(_OWORD *)(v15 + 16) = v295;
          *(__n128 *)v15 = v256;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_53;
LABEL_32:
          v63 = *(float *)(v11 + 72);
LABEL_54:
          v105 = 0;
          v219 = *(__n128 *)v11;
          v231 = *(_QWORD *)(v11 + 64);
          v225 = *(_OWORD *)(v11 + 32);
          v228 = *(_OWORD *)(v11 + 48);
          v222 = *(_OWORD *)(v11 + 16);
          do
          {
            v106 = *(float *)(v11 + v105 + 152);
            v105 += 80;
          }
          while (v106 < v63);
          v107 = v11 + v105;
          v108 = a2;
          if (v105 == 80)
          {
            v111 = a2;
            while (v107 < v111)
            {
              v109 = (__n128 *)(v111 - 80);
              v112 = *(float *)(v111 - 8);
              v111 -= 80;
              if (v112 < v63)
                goto LABEL_62;
            }
            v109 = (__n128 *)v111;
            v11 = v107;
          }
          else
          {
            do
            {
              v109 = (__n128 *)(v108 - 80);
              v110 = *(float *)(v108 - 8);
              v108 -= 80;
            }
            while (v110 >= v63);
LABEL_62:
            v11 = v107;
            if (v107 < (unint64_t)v109)
            {
              v113 = v109;
              do
              {
                v257 = *(__n128 *)v11;
                *(_OWORD *)v374 = *(_OWORD *)(v11 + 48);
                *(_OWORD *)&v374[16] = *(_OWORD *)(v11 + 64);
                v296 = *(__n128 *)(v11 + 16);
                v335 = *(__n128 *)(v11 + 32);
                v115 = v113[2];
                v114 = v113[3];
                v116 = v113[1];
                *(__n128 *)(v11 + 60) = *(__n128 *)((char *)v113 + 60);
                *(__n128 *)(v11 + 32) = v115;
                *(__n128 *)(v11 + 48) = v114;
                *(__n128 *)(v11 + 16) = v116;
                *(__n128 *)v11 = *v113;
                *(__n128 *)((char *)v113 + 60) = *(__n128 *)&v374[12];
                v113[2] = v335;
                v113[3] = *(__n128 *)v374;
                v113[1] = v296;
                *v113 = v257;
                do
                {
                  v117 = *(float *)(v11 + 152);
                  v11 += 80;
                }
                while (v117 < v63);
                do
                {
                  v118 = v113[-1].n128_f32[2];
                  v113 -= 5;
                }
                while (v118 >= v63);
              }
              while (v11 < (unint64_t)v113);
            }
          }
          v119 = (__n128 *)(v11 - 80);
          if (v11 - 80 != a1)
          {
            *(__n128 *)a1 = *v119;
            v120 = *(_OWORD *)(v11 - 64);
            v121 = *(_OWORD *)(v11 - 48);
            v122 = *(_OWORD *)(v11 - 32);
            *(_OWORD *)(a1 + 60) = *(_OWORD *)(v11 - 20);
            *(_OWORD *)(a1 + 32) = v121;
            *(_OWORD *)(a1 + 48) = v122;
            *(_OWORD *)(a1 + 16) = v120;
          }
          *v119 = v219;
          *(_QWORD *)(v11 - 16) = v231;
          *(_OWORD *)(v11 - 48) = v225;
          *(_OWORD *)(v11 - 32) = v228;
          *(_OWORD *)(v11 - 64) = v222;
          *(float *)(v11 - 8) = v63;
          if (v107 < (unint64_t)v109)
            goto LABEL_73;
          v123 = sub_2233C1B4C(a1, v11 - 80);
          if (!sub_2233C1B4C(v11, a2))
          {
            if (v123)
              continue;
LABEL_73:
            sub_2233C0424(a1, v11 - 80, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v11 - 80;
          if (v123)
            return result;
          goto LABEL_1;
        }
        v162 = v11 + 80;
        v164 = v11 == a2 || v162 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v164)
          {
            v165 = 0;
            v166 = v11;
            do
            {
              result.n128_u32[0] = *(_DWORD *)(v166 + 152);
              v168 = *(float *)(v166 + 72);
              v166 = v162;
              if (result.n128_f32[0] < v168)
              {
                v265 = *(_OWORD *)v162;
                v390 = *(_QWORD *)(v162 + 64);
                v343 = *(_OWORD *)(v162 + 32);
                v382 = *(_OWORD *)(v162 + 48);
                v304 = *(_OWORD *)(v162 + 16);
                v169 = v165;
                do
                {
                  v170 = (_OWORD *)(v11 + v169);
                  v171 = *(_OWORD *)(v11 + v169 + 48);
                  v170[7] = *(_OWORD *)(v11 + v169 + 32);
                  v170[8] = v171;
                  *(_OWORD *)((char *)v170 + 140) = *(_OWORD *)(v11 + v169 + 60);
                  v172 = *(_OWORD *)(v11 + v169 + 16);
                  v170[5] = *(_OWORD *)(v11 + v169);
                  v170[6] = v172;
                  if (!v169)
                  {
                    v167 = v11;
                    goto LABEL_117;
                  }
                  v169 -= 80;
                }
                while (result.n128_f32[0] < *((float *)v170 - 2));
                v167 = v11 + v169 + 80;
LABEL_117:
                *(_OWORD *)v167 = v265;
                *(_QWORD *)(v167 + 64) = v390;
                *(_OWORD *)(v167 + 32) = v343;
                *(_OWORD *)(v167 + 48) = v382;
                *(_OWORD *)(v167 + 16) = v304;
                *(_DWORD *)(v167 + 72) = result.n128_u32[0];
              }
              v162 = v166 + 80;
              v165 += 80;
            }
            while (v166 + 80 != a2);
          }
        }
        else if (!v164)
        {
          do
          {
            result.n128_u32[0] = *(_DWORD *)(a1 + 152);
            v209 = *(float *)(a1 + 72);
            a1 = v162;
            if (result.n128_f32[0] < v209)
            {
              v270 = *(_OWORD *)v162;
              v392 = *(_QWORD *)(v162 + 64);
              v348 = *(_OWORD *)(v162 + 32);
              v387 = *(_OWORD *)(v162 + 48);
              v309 = *(_OWORD *)(v162 + 16);
              v210 = v162;
              do
              {
                v211 = *(_OWORD *)(v210 - 32);
                *(_OWORD *)(v210 + 32) = *(_OWORD *)(v210 - 48);
                *(_OWORD *)(v210 + 48) = v211;
                *(_OWORD *)(v210 + 60) = *(_OWORD *)(v210 - 20);
                v212 = *(_OWORD *)(v210 - 64);
                *(_OWORD *)v210 = *(_OWORD *)(v210 - 80);
                *(_OWORD *)(v210 + 16) = v212;
                LODWORD(v212) = *(_DWORD *)(v210 - 88);
                v210 -= 80;
              }
              while (result.n128_f32[0] < *(float *)&v212);
              *(_OWORD *)v210 = v270;
              *(_QWORD *)(v210 + 64) = v392;
              *(_OWORD *)(v210 + 32) = v348;
              *(_OWORD *)(v210 + 48) = v387;
              *(_OWORD *)(v210 + 16) = v309;
              *(_DWORD *)(v210 + 72) = result.n128_u32[0];
            }
            v162 += 80;
          }
          while (a1 + 80 != a2);
        }
        return result;
    }
  }
}

  v9 = a2 - 5;
  v10 = a2 - 10;
  v11 = a2 - 15;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v12) >> 4);
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result.n128_u32[0] = a2[-1].n128_u32[0];
        if (result.n128_f32[0] < *(float *)(v12 + 64))
        {
          v264 = *(__n128 *)v12;
          *(_OWORD *)v381 = *(_OWORD *)(v12 + 48);
          *(_OWORD *)&v381[16] = *(_OWORD *)(v12 + 64);
          v303 = *(__n128 *)(v12 + 16);
          v342 = *(__n128 *)(v12 + 32);
          v144 = a2[-3];
          v143 = a2[-2];
          v145 = a2[-4];
          *(__n128 *)(v12 + 60) = *(__n128 *)((char *)a2 - 20);
          *(__n128 *)(v12 + 32) = v144;
          *(__n128 *)(v12 + 48) = v143;
          *(__n128 *)(v12 + 16) = v145;
          *(__n128 *)v12 = a2[-5];
          *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v381[12];
          a2[-3] = v342;
          a2[-2] = *(__n128 *)v381;
          a2[-4] = v303;
          result = v264;
          a2[-5] = v264;
        }
        return result;
      case 3:
        v146 = (__n128 *)(v12 + 80);
        result.n128_u32[0] = *(_DWORD *)(v12 + 144);
        v147 = a2[-1].n128_f32[0];
        if (result.n128_f32[0] >= *(float *)(v12 + 64))
        {
          if (v147 < result.n128_f32[0])
          {
            v351 = *(__n128 *)(v12 + 112);
            *(_OWORD *)v390 = *(_OWORD *)(v12 + 128);
            *(_OWORD *)&v390[16] = *(_OWORD *)(v12 + 144);
            v273 = *v146;
            v312 = *(__n128 *)(v12 + 96);
            v214 = a2[-3];
            v213 = a2[-2];
            v215 = a2[-4];
            *(__n128 *)(v12 + 140) = *(__n128 *)((char *)a2 - 20);
            *(__n128 *)(v12 + 112) = v214;
            *(__n128 *)(v12 + 128) = v213;
            *(__n128 *)(v12 + 96) = v215;
            *v146 = *v9;
            *v9 = v273;
            result = v312;
            *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v390[12];
            a2[-3] = v351;
            a2[-2] = *(__n128 *)v390;
            a2[-4] = v312;
            result.n128_u32[0] = *(_DWORD *)(v12 + 144);
            if (result.n128_f32[0] < *(float *)(v12 + 64))
            {
              v274 = *(__n128 *)v12;
              *(_OWORD *)v391 = *(_OWORD *)(v12 + 48);
              *(_OWORD *)&v391[16] = *(_OWORD *)(v12 + 64);
              v313 = *(_OWORD *)(v12 + 16);
              v352 = *(_OWORD *)(v12 + 32);
              *(_OWORD *)(v12 + 60) = *(_OWORD *)(v12 + 140);
              v216 = *(_OWORD *)(v12 + 128);
              *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 112);
              *(_OWORD *)(v12 + 48) = v216;
              v217 = *(_OWORD *)(v12 + 96);
              *(__n128 *)v12 = *v146;
              *(_OWORD *)(v12 + 16) = v217;
              result = v274;
              *(_OWORD *)(v12 + 140) = *(_OWORD *)&v391[12];
              *(_OWORD *)(v12 + 112) = v352;
              *(_OWORD *)(v12 + 128) = *(_OWORD *)v391;
              *v146 = v274;
              *(_OWORD *)(v12 + 96) = v313;
            }
          }
        }
        else if (v147 >= result.n128_f32[0])
        {
          v276 = *(__n128 *)v12;
          *(_OWORD *)v393 = *(_OWORD *)(v12 + 48);
          *(_OWORD *)&v393[16] = *(_OWORD *)(v12 + 64);
          v315 = *(_OWORD *)(v12 + 16);
          v354 = *(_OWORD *)(v12 + 32);
          *(_OWORD *)(v12 + 60) = *(_OWORD *)(v12 + 140);
          v222 = *(_OWORD *)(v12 + 128);
          *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 112);
          *(_OWORD *)(v12 + 48) = v222;
          v223 = *(_OWORD *)(v12 + 96);
          *(__n128 *)v12 = *v146;
          *(_OWORD *)(v12 + 16) = v223;
          result = v276;
          *(_OWORD *)(v12 + 140) = *(_OWORD *)&v393[12];
          *(_OWORD *)(v12 + 112) = v354;
          *(_OWORD *)(v12 + 128) = *(_OWORD *)v393;
          *v146 = v276;
          *(_OWORD *)(v12 + 96) = v315;
          result.n128_u32[0] = a2[-1].n128_u32[0];
          if (result.n128_f32[0] < *(float *)(v12 + 144))
          {
            v355 = *(__n128 *)(v12 + 112);
            *(_OWORD *)v394 = *(_OWORD *)(v12 + 128);
            *(_OWORD *)&v394[16] = *(_OWORD *)(v12 + 144);
            v277 = *v146;
            v316 = *(__n128 *)(v12 + 96);
            v225 = a2[-3];
            v224 = a2[-2];
            v226 = a2[-4];
            *(__n128 *)(v12 + 140) = *(__n128 *)((char *)a2 - 20);
            *(__n128 *)(v12 + 112) = v225;
            *(__n128 *)(v12 + 128) = v224;
            *(__n128 *)(v12 + 96) = v226;
            *v146 = *v9;
            *v9 = v277;
            result = v316;
            *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v394[12];
            a2[-3] = v355;
            a2[-2] = *(__n128 *)v394;
            a2[-4] = v316;
          }
        }
        else
        {
          v265 = *(__n128 *)v12;
          *(_OWORD *)v382 = *(_OWORD *)(v12 + 48);
          *(_OWORD *)&v382[16] = *(_OWORD *)(v12 + 64);
          v304 = *(__n128 *)(v12 + 16);
          v343 = *(__n128 *)(v12 + 32);
          v149 = a2[-3];
          v148 = a2[-2];
          v150 = a2[-4];
          *(__n128 *)(v12 + 60) = *(__n128 *)((char *)a2 - 20);
          *(__n128 *)(v12 + 32) = v149;
          *(__n128 *)(v12 + 48) = v148;
          *(__n128 *)(v12 + 16) = v150;
          *(__n128 *)v12 = *v9;
          *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v382[12];
          a2[-3] = v343;
          a2[-2] = *(__n128 *)v382;
          a2[-4] = v304;
          result = v265;
          *v9 = v265;
        }
        return result;
      case 4:
        result.n128_u64[0] = sub_2233BDF54((_OWORD *)v12, v12 + 80, v12 + 160, (uint64_t)&a2[-5]).n128_u64[0];
        return result;
      case 5:
        v151 = (__n128 *)(v12 + 80);
        v152 = (__n128 *)(v12 + 160);
        v153 = (__n128 *)(v12 + 240);
        result = sub_2233BDF54((_OWORD *)v12, v12 + 80, v12 + 160, v12 + 240);
        result.n128_u32[0] = a2[-1].n128_u32[0];
        if (result.n128_f32[0] < *(float *)(v12 + 304))
        {
          v344 = *(__n128 *)(v12 + 272);
          *(_OWORD *)v383 = *(_OWORD *)(v12 + 288);
          *(_OWORD *)&v383[16] = *(_OWORD *)(v12 + 304);
          v266 = *v153;
          v305 = *(__n128 *)(v12 + 256);
          v155 = a2[-3];
          v154 = a2[-2];
          v156 = a2[-4];
          *(__n128 *)(v12 + 300) = *(__n128 *)((char *)a2 - 20);
          *(__n128 *)(v12 + 272) = v155;
          *(__n128 *)(v12 + 288) = v154;
          *(__n128 *)(v12 + 256) = v156;
          *v153 = a2[-5];
          a2[-5] = v266;
          result = v305;
          *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v383[12];
          a2[-3] = v344;
          a2[-2] = *(__n128 *)v383;
          a2[-4] = v305;
          result.n128_u32[0] = *(_DWORD *)(v12 + 304);
          if (result.n128_f32[0] < *(float *)(v12 + 224))
          {
            v345 = *(_OWORD *)(v12 + 192);
            *(_OWORD *)v384 = *(_OWORD *)(v12 + 208);
            *(_OWORD *)&v384[16] = *(_OWORD *)(v12 + 224);
            v267 = *v152;
            v306 = *(_OWORD *)(v12 + 176);
            v157 = *(_OWORD *)(v12 + 288);
            *(_OWORD *)(v12 + 192) = *(_OWORD *)(v12 + 272);
            *(_OWORD *)(v12 + 208) = v157;
            *(_OWORD *)(v12 + 220) = *(_OWORD *)(v12 + 300);
            v158 = *(_OWORD *)(v12 + 256);
            *v152 = *v153;
            *(_OWORD *)(v12 + 176) = v158;
            result = v267;
            *(_OWORD *)(v12 + 300) = *(_OWORD *)&v384[12];
            *(_OWORD *)(v12 + 272) = v345;
            *(_OWORD *)(v12 + 288) = *(_OWORD *)v384;
            v159 = *(float *)(v12 + 224);
            v160 = *(float *)(v12 + 144);
            *v153 = v267;
            *(_OWORD *)(v12 + 256) = v306;
            if (v159 < v160)
            {
              v346 = *(_OWORD *)(v12 + 112);
              *(_OWORD *)v385 = *(_OWORD *)(v12 + 128);
              *(_OWORD *)&v385[16] = *(_OWORD *)(v12 + 144);
              v268 = *v151;
              v307 = *(_OWORD *)(v12 + 96);
              v161 = *(_OWORD *)(v12 + 208);
              *(_OWORD *)(v12 + 112) = *(_OWORD *)(v12 + 192);
              *(_OWORD *)(v12 + 128) = v161;
              *(_OWORD *)(v12 + 140) = *(_OWORD *)(v12 + 220);
              v162 = *(_OWORD *)(v12 + 176);
              *v151 = *v152;
              *(_OWORD *)(v12 + 96) = v162;
              result = v268;
              *(_OWORD *)(v12 + 220) = *(_OWORD *)&v385[12];
              *(_OWORD *)(v12 + 192) = v346;
              *(_OWORD *)(v12 + 208) = *(_OWORD *)v385;
              v163 = *(float *)(v12 + 144);
              v164 = *(float *)(v12 + 64);
              *v152 = v268;
              *(_OWORD *)(v12 + 176) = v307;
              if (v163 < v164)
              {
                v269 = *(__n128 *)v12;
                *(_OWORD *)v386 = *(_OWORD *)(v12 + 48);
                *(_OWORD *)&v386[16] = *(_OWORD *)(v12 + 64);
                v308 = *(_OWORD *)(v12 + 16);
                v347 = *(_OWORD *)(v12 + 32);
                *(_OWORD *)(v12 + 60) = *(_OWORD *)(v12 + 140);
                v165 = *(_OWORD *)(v12 + 128);
                *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 112);
                *(_OWORD *)(v12 + 48) = v165;
                v166 = *(_OWORD *)(v12 + 96);
                *(__n128 *)v12 = *v151;
                *(_OWORD *)(v12 + 16) = v166;
                result = v269;
                *(_OWORD *)(v12 + 140) = *(_OWORD *)&v386[12];
                *(_OWORD *)(v12 + 112) = v347;
                *(_OWORD *)(v12 + 128) = *(_OWORD *)v386;
                *v151 = v269;
                *(_OWORD *)(v12 + 96) = v308;
              }
            }
          }
        }
        return result;
      default:
        if (v13 > 1919)
        {
          if (!a3)
          {
            if ((__n128 *)v12 != a2)
            {
              v179 = (unint64_t)(v14 - 2) >> 1;
              v180 = v179;
              do
              {
                if (v179 >= v180)
                {
                  v182 = (2 * v180) | 1;
                  v183 = v12 + 80 * v182;
                  if (2 * v180 + 2 < v14 && *(float *)(v183 + 64) < *(float *)(v183 + 144))
                  {
                    v183 += 80;
                    v182 = 2 * v180 + 2;
                  }
                  v184 = v12 + 80 * v180;
                  v185 = *(float *)(v184 + 64);
                  if (*(float *)(v183 + 64) >= v185)
                  {
                    v349 = *(_OWORD *)(v184 + 32);
                    v388 = *(_OWORD *)(v184 + 48);
                    v271 = *(_OWORD *)v184;
                    v310 = *(_OWORD *)(v184 + 16);
                    v186 = *(_QWORD *)(v184 + 68);
                    do
                    {
                      v187 = (_OWORD *)v184;
                      v184 = v183;
                      *v187 = *(_OWORD *)v183;
                      v188 = *(_OWORD *)(v183 + 16);
                      v189 = *(_OWORD *)(v183 + 32);
                      v190 = *(_OWORD *)(v183 + 48);
                      *(_OWORD *)((char *)v187 + 60) = *(_OWORD *)(v183 + 60);
                      v187[2] = v189;
                      v187[3] = v190;
                      v187[1] = v188;
                      if (v179 < v182)
                        break;
                      v191 = 2 * v182;
                      v182 = (2 * v182) | 1;
                      v183 = v12 + 80 * v182;
                      v192 = v191 + 2;
                      if (v192 < v14 && *(float *)(v183 + 64) < *(float *)(v183 + 144))
                      {
                        v183 += 80;
                        v182 = v192;
                      }
                    }
                    while (*(float *)(v183 + 64) >= v185);
                    *(_OWORD *)(v184 + 32) = v349;
                    *(_OWORD *)(v184 + 48) = v388;
                    *(_OWORD *)v184 = v271;
                    *(_OWORD *)(v184 + 16) = v310;
                    *(float *)(v184 + 64) = v185;
                    *(_QWORD *)(v184 + 68) = v186;
                  }
                }
                v181 = v180-- <= 0;
              }
              while (!v181);
              v193 = v13 / 0x50uLL;
              do
              {
                v194 = 0;
                v272 = *(__n128 *)v12;
                *(_OWORD *)v389 = *(_OWORD *)(v12 + 48);
                *(_OWORD *)&v389[16] = *(_OWORD *)(v12 + 64);
                v311 = *(__n128 *)(v12 + 16);
                v350 = *(__n128 *)(v12 + 32);
                v195 = v12;
                do
                {
                  v199 = (_OWORD *)v195;
                  v195 += 80 * v194 + 80;
                  v200 = 2 * v194;
                  v194 = (2 * v194) | 1;
                  v201 = v200 + 2;
                  if (v201 < v193 && *(float *)(v195 + 64) < *(float *)(v195 + 144))
                  {
                    v195 += 80;
                    v194 = v201;
                  }
                  *v199 = *(_OWORD *)v195;
                  v196 = *(_OWORD *)(v195 + 16);
                  v197 = *(_OWORD *)(v195 + 32);
                  v198 = *(_OWORD *)(v195 + 48);
                  *(_OWORD *)((char *)v199 + 60) = *(_OWORD *)(v195 + 60);
                  v199[2] = v197;
                  v199[3] = v198;
                  v199[1] = v196;
                }
                while (v194 <= (uint64_t)((unint64_t)(v193 - 2) >> 1));
                a2 -= 5;
                if ((__n128 *)v195 == a2)
                {
                  *(__n128 *)v195 = v272;
                  result = v311;
                  *(_OWORD *)(v195 + 60) = *(_OWORD *)&v389[12];
                  *(__n128 *)(v195 + 32) = v350;
                  *(_OWORD *)(v195 + 48) = *(_OWORD *)v389;
                  *(__n128 *)(v195 + 16) = v311;
                }
                else
                {
                  *(__n128 *)v195 = *a2;
                  v202 = a2[1];
                  v203 = a2[2];
                  v204 = a2[3];
                  *(__n128 *)(v195 + 60) = *(__n128 *)((char *)a2 + 60);
                  *(__n128 *)(v195 + 32) = v203;
                  *(__n128 *)(v195 + 48) = v204;
                  *(__n128 *)(v195 + 16) = v202;
                  *(__n128 *)((char *)a2 + 60) = *(__n128 *)&v389[12];
                  a2[2] = v350;
                  a2[3] = *(__n128 *)v389;
                  a2[1] = v311;
                  result = v272;
                  *a2 = v272;
                  v205 = v195 - v12 + 80;
                  if (v205 >= 81)
                  {
                    v206 = (v205 / 0x50uLL - 2) >> 1;
                    v207 = v12 + 80 * v206;
                    result.n128_u32[0] = *(_DWORD *)(v195 + 64);
                    if (*(float *)(v207 + 64) < result.n128_f32[0])
                    {
                      v235 = *(_OWORD *)(v195 + 32);
                      v238 = *(_OWORD *)(v195 + 48);
                      v229 = *(_OWORD *)v195;
                      v232 = *(_OWORD *)(v195 + 16);
                      v208 = *(_QWORD *)(v195 + 68);
                      do
                      {
                        v209 = (_OWORD *)v195;
                        v195 = v207;
                        *v209 = *(_OWORD *)v207;
                        v210 = *(_OWORD *)(v207 + 16);
                        v211 = *(_OWORD *)(v207 + 32);
                        v212 = *(_OWORD *)(v207 + 48);
                        *(_OWORD *)((char *)v209 + 60) = *(_OWORD *)(v207 + 60);
                        v209[2] = v211;
                        v209[3] = v212;
                        v209[1] = v210;
                        if (!v206)
                          break;
                        v206 = (v206 - 1) >> 1;
                        v207 = v12 + 80 * v206;
                      }
                      while (*(float *)(v207 + 64) < result.n128_f32[0]);
                      *(_OWORD *)(v195 + 32) = v235;
                      *(_OWORD *)(v195 + 48) = v238;
                      *(_OWORD *)v195 = v229;
                      *(_OWORD *)(v195 + 16) = v232;
                      *(_DWORD *)(v195 + 64) = result.n128_u32[0];
                      *(_QWORD *)(v195 + 68) = v208;
                    }
                  }
                }
                v181 = v193-- <= 2;
              }
              while (!v181);
            }
            return result;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 80 * ((unint64_t)v14 >> 1));
          v17 = a2[-1].n128_f32[0];
          if ((unint64_t)v13 < 0x2801)
          {
            v22 = *(float *)(v12 + 64);
            if (v22 >= v16[4].n128_f32[0])
            {
              if (v17 < v22)
              {
                v243 = *(__n128 *)v12;
                *(_OWORD *)v360 = *(_OWORD *)(v12 + 48);
                *(_OWORD *)&v360[16] = *(_OWORD *)(v12 + 64);
                v282 = *(__n128 *)(v12 + 16);
                v321 = *(__n128 *)(v12 + 32);
                v33 = a2[-3];
                v32 = a2[-2];
                v34 = a2[-4];
                *(__n128 *)(v12 + 60) = *(__n128 *)((char *)a2 - 20);
                *(__n128 *)(v12 + 32) = v33;
                *(__n128 *)(v12 + 48) = v32;
                *(__n128 *)(v12 + 16) = v34;
                *(__n128 *)v12 = *v9;
                *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v360[12];
                a2[-3] = v321;
                a2[-2] = *(__n128 *)v360;
                a2[-4] = v282;
                *v9 = v243;
                if (*(float *)(v12 + 64) < v16[4].n128_f32[0])
                {
                  v244 = *v16;
                  *(__n128 *)v361 = v16[3];
                  *(__n128 *)&v361[16] = v16[4];
                  v283 = v16[1];
                  v322 = v16[2];
                  v36 = *(__n128 *)(v12 + 32);
                  v35 = *(__n128 *)(v12 + 48);
                  v37 = *(__n128 *)(v12 + 16);
                  *(__n128 *)((char *)v16 + 60) = *(__n128 *)(v12 + 60);
                  v16[2] = v36;
                  v16[3] = v35;
                  v16[1] = v37;
                  *v16 = *(__n128 *)v12;
                  *(_OWORD *)(v12 + 60) = *(_OWORD *)&v361[12];
                  *(__n128 *)(v12 + 32) = v322;
                  *(_OWORD *)(v12 + 48) = *(_OWORD *)v361;
                  *(__n128 *)(v12 + 16) = v283;
                  *(__n128 *)v12 = v244;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_53;
                }
              }
            }
            else
            {
              if (v17 >= v22)
              {
                v249 = *v16;
                *(__n128 *)v366 = v16[3];
                *(__n128 *)&v366[16] = v16[4];
                v288 = v16[1];
                v327 = v16[2];
                v59 = *(__n128 *)(v12 + 32);
                v58 = *(__n128 *)(v12 + 48);
                v60 = *(__n128 *)(v12 + 16);
                *(__n128 *)((char *)v16 + 60) = *(__n128 *)(v12 + 60);
                v16[2] = v59;
                v16[3] = v58;
                v16[1] = v60;
                *v16 = *(__n128 *)v12;
                *(_OWORD *)(v12 + 60) = *(_OWORD *)&v366[12];
                *(__n128 *)(v12 + 32) = v327;
                *(_OWORD *)(v12 + 48) = *(_OWORD *)v366;
                *(__n128 *)(v12 + 16) = v288;
                *(__n128 *)v12 = v249;
                if (a2[-1].n128_f32[0] >= *(float *)(v12 + 64))
                  goto LABEL_31;
                v240 = *(__n128 *)v12;
                *(_OWORD *)v357 = *(_OWORD *)(v12 + 48);
                *(_OWORD *)&v357[16] = *(_OWORD *)(v12 + 64);
                v279 = *(__n128 *)(v12 + 16);
                v318 = *(__n128 *)(v12 + 32);
                v62 = a2[-3];
                v61 = a2[-2];
                v63 = a2[-4];
                *(__n128 *)(v12 + 60) = *(__n128 *)((char *)a2 - 20);
                *(__n128 *)(v12 + 32) = v62;
                *(__n128 *)(v12 + 48) = v61;
                *(__n128 *)(v12 + 16) = v63;
                *(__n128 *)v12 = *v9;
              }
              else
              {
                v240 = *v16;
                *(__n128 *)v357 = v16[3];
                *(__n128 *)&v357[16] = v16[4];
                v279 = v16[1];
                v318 = v16[2];
                v24 = a2[-3];
                v23 = a2[-2];
                v25 = a2[-4];
                *(__n128 *)((char *)v16 + 60) = *(__n128 *)((char *)a2 - 20);
                v16[2] = v24;
                v16[3] = v23;
                v16[1] = v25;
                *v16 = *v9;
              }
              *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v357[12];
              a2[-3] = v318;
              a2[-2] = *(__n128 *)v357;
              a2[-4] = v279;
              *v9 = v240;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_53:
            v64 = *(float *)(v12 + 64);
            if (*(float *)(v12 - 16) < v64)
              goto LABEL_54;
            result = *(__n128 *)v12;
            v234 = *(_OWORD *)(v12 + 32);
            v237 = *(_OWORD *)(v12 + 48);
            v228 = *(__n128 *)v12;
            v231 = *(_OWORD *)(v12 + 16);
            result.n128_u32[0] = *(_DWORD *)(v12 + 64);
            if (result.n128_f32[0] >= a2[-1].n128_f32[0])
            {
              v128 = v12 + 80;
              do
              {
                v12 = v128;
                if (v128 >= (unint64_t)a2)
                  break;
                v129 = *(float *)(v128 + 64);
                v128 += 80;
              }
              while (result.n128_f32[0] >= v129);
            }
            else
            {
              v126 = v12;
              do
              {
                v12 = v126 + 80;
                v127 = *(float *)(v126 + 144);
                v126 += 80;
              }
              while (result.n128_f32[0] >= v127);
            }
            v130 = a2;
            if (v12 < (unint64_t)a2)
            {
              v131 = a2;
              do
              {
                v130 = v131 - 5;
                v132 = v131[-1].n128_f32[0];
                v131 -= 5;
              }
              while (result.n128_f32[0] < v132);
            }
            v133 = *(_QWORD *)(a1 + 68);
            while (v12 < (unint64_t)v130)
            {
              v263 = *(__n128 *)v12;
              *(_OWORD *)v380 = *(_OWORD *)(v12 + 48);
              *(_OWORD *)&v380[16] = *(_OWORD *)(v12 + 64);
              v302 = *(__n128 *)(v12 + 16);
              v341 = *(__n128 *)(v12 + 32);
              v135 = v130[2];
              v134 = v130[3];
              v136 = v130[1];
              *(__n128 *)(v12 + 60) = *(__n128 *)((char *)v130 + 60);
              *(__n128 *)(v12 + 32) = v135;
              *(__n128 *)(v12 + 48) = v134;
              *(__n128 *)(v12 + 16) = v136;
              *(__n128 *)v12 = *v130;
              *(__n128 *)((char *)v130 + 60) = *(__n128 *)&v380[12];
              v130[2] = v341;
              v130[3] = *(__n128 *)v380;
              v130[1] = v302;
              *v130 = v263;
              do
              {
                v137 = *(float *)(v12 + 144);
                v12 += 80;
              }
              while (result.n128_f32[0] >= v137);
              do
              {
                v138 = v130[-1].n128_f32[0];
                v130 -= 5;
              }
              while (result.n128_f32[0] < v138);
            }
            v139 = (__n128 *)(v12 - 80);
            if (v12 - 80 != a1)
            {
              *(__n128 *)a1 = *v139;
              v140 = *(_OWORD *)(v12 - 64);
              v141 = *(_OWORD *)(v12 - 48);
              v142 = *(_OWORD *)(v12 - 32);
              *(_OWORD *)(a1 + 60) = *(_OWORD *)(v12 - 20);
              *(_OWORD *)(a1 + 32) = v141;
              *(_OWORD *)(a1 + 48) = v142;
              *(_OWORD *)(a1 + 16) = v140;
            }
            a4 = 0;
            *(_OWORD *)(v12 - 48) = v234;
            *(_OWORD *)(v12 - 32) = v237;
            *v139 = v228;
            *(_OWORD *)(v12 - 64) = v231;
            *(_DWORD *)(v12 - 16) = result.n128_u32[0];
            *(_QWORD *)(v12 - 12) = v133;
            continue;
          }
          v18 = v16[4].n128_f32[0];
          if (v18 >= *(float *)(v12 + 64))
          {
            if (v17 < v18)
            {
              v241 = *v16;
              *(__n128 *)v358 = v16[3];
              *(__n128 *)&v358[16] = v16[4];
              v280 = v16[1];
              v319 = v16[2];
              v27 = a2[-3];
              v26 = a2[-2];
              v28 = a2[-4];
              *(__n128 *)((char *)v16 + 60) = *(__n128 *)((char *)a2 - 20);
              v16[2] = v27;
              v16[3] = v26;
              v16[1] = v28;
              *v16 = *v9;
              *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v358[12];
              a2[-3] = v319;
              a2[-2] = *(__n128 *)v358;
              a2[-4] = v280;
              *v9 = v241;
              if (v16[4].n128_f32[0] < *(float *)(v12 + 64))
              {
                v242 = *(__n128 *)v12;
                *(_OWORD *)v359 = *(_OWORD *)(v12 + 48);
                *(_OWORD *)&v359[16] = *(_OWORD *)(v12 + 64);
                v281 = *(__n128 *)(v12 + 16);
                v320 = *(__n128 *)(v12 + 32);
                v30 = v16[2];
                v29 = v16[3];
                v31 = v16[1];
                *(__n128 *)(v12 + 60) = *(__n128 *)((char *)v16 + 60);
                *(__n128 *)(v12 + 32) = v30;
                *(__n128 *)(v12 + 48) = v29;
                *(__n128 *)(v12 + 16) = v31;
                *(__n128 *)v12 = *v16;
                *(__n128 *)((char *)v16 + 60) = *(__n128 *)&v359[12];
                v16[2] = v320;
                v16[3] = *(__n128 *)v359;
                v16[1] = v281;
                *v16 = v242;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v245 = *(__n128 *)v12;
              *(_OWORD *)v362 = *(_OWORD *)(v12 + 48);
              *(_OWORD *)&v362[16] = *(_OWORD *)(v12 + 64);
              v284 = *(__n128 *)(v12 + 16);
              v323 = *(__n128 *)(v12 + 32);
              v39 = v16[2];
              v38 = v16[3];
              v40 = v16[1];
              *(__n128 *)(v12 + 60) = *(__n128 *)((char *)v16 + 60);
              *(__n128 *)(v12 + 32) = v39;
              *(__n128 *)(v12 + 48) = v38;
              *(__n128 *)(v12 + 16) = v40;
              *(__n128 *)v12 = *v16;
              *(__n128 *)((char *)v16 + 60) = *(__n128 *)&v362[12];
              v16[2] = v323;
              v16[3] = *(__n128 *)v362;
              v16[1] = v284;
              *v16 = v245;
              if (a2[-1].n128_f32[0] >= v16[4].n128_f32[0])
                goto LABEL_22;
              v239 = *v16;
              *(__n128 *)v356 = v16[3];
              *(__n128 *)&v356[16] = v16[4];
              v278 = v16[1];
              v317 = v16[2];
              v42 = a2[-3];
              v41 = a2[-2];
              v43 = a2[-4];
              *(__n128 *)((char *)v16 + 60) = *(__n128 *)((char *)a2 - 20);
              v16[2] = v42;
              v16[3] = v41;
              v16[1] = v43;
              *v16 = *v9;
            }
            else
            {
              v239 = *(__n128 *)v12;
              *(_OWORD *)v356 = *(_OWORD *)(v12 + 48);
              *(_OWORD *)&v356[16] = *(_OWORD *)(v12 + 64);
              v278 = *(__n128 *)(v12 + 16);
              v317 = *(__n128 *)(v12 + 32);
              v20 = a2[-3];
              v19 = a2[-2];
              v21 = a2[-4];
              *(__n128 *)(v12 + 60) = *(__n128 *)((char *)a2 - 20);
              *(__n128 *)(v12 + 32) = v20;
              *(__n128 *)(v12 + 48) = v19;
              *(__n128 *)(v12 + 16) = v21;
              *(__n128 *)v12 = *v9;
            }
            *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v356[12];
            a2[-3] = v317;
            a2[-2] = *(__n128 *)v356;
            a2[-4] = v278;
            *v9 = v239;
          }
LABEL_22:
          v44 = (__n128 *)(v12 + 80);
          v45 = v12 + 80 * v15;
          v46 = (__n128 *)(v45 - 80);
          v47 = *(float *)(v45 - 16);
          v48 = a2[-6].n128_f32[0];
          if (v47 >= *(float *)(v12 + 144))
          {
            if (v48 < v47)
            {
              v247 = *v46;
              *(_OWORD *)v364 = *(_OWORD *)(v45 - 32);
              *(_OWORD *)&v364[16] = *(_OWORD *)(v45 - 16);
              v286 = *(__n128 *)(v45 - 64);
              v325 = *(__n128 *)(v45 - 48);
              v53 = a2[-8];
              v52 = a2[-7];
              v54 = a2[-9];
              *(__n128 *)(v45 - 20) = *(__n128 *)((char *)a2 - 100);
              *(__n128 *)(v45 - 48) = v53;
              *(__n128 *)(v45 - 32) = v52;
              *(__n128 *)(v45 - 64) = v54;
              *v46 = *v10;
              *(__n128 *)((char *)a2 - 100) = *(__n128 *)&v364[12];
              a2[-8] = v325;
              a2[-7] = *(__n128 *)v364;
              a2[-9] = v286;
              *v10 = v247;
              if (*(float *)(v45 - 16) < *(float *)(v12 + 144))
              {
                v326 = *(_OWORD *)(v12 + 112);
                *(_OWORD *)v365 = *(_OWORD *)(v12 + 128);
                *(_OWORD *)&v365[16] = *(_OWORD *)(v12 + 144);
                v248 = *v44;
                v287 = *(_OWORD *)(v12 + 96);
                v56 = *(_OWORD *)(v45 - 48);
                v55 = *(_OWORD *)(v45 - 32);
                v57 = *(_OWORD *)(v45 - 64);
                *(_OWORD *)(v12 + 140) = *(_OWORD *)(v45 - 20);
                *(_OWORD *)(v12 + 112) = v56;
                *(_OWORD *)(v12 + 128) = v55;
                *(_OWORD *)(v12 + 96) = v57;
                *v44 = *v46;
                *v46 = v248;
                *(_OWORD *)(v45 - 20) = *(_OWORD *)&v365[12];
                *(_OWORD *)(v45 - 48) = v326;
                *(_OWORD *)(v45 - 32) = *(_OWORD *)v365;
                *(_OWORD *)(v45 - 64) = v287;
              }
            }
          }
          else if (v48 >= v47)
          {
            v328 = *(_OWORD *)(v12 + 112);
            *(_OWORD *)v367 = *(_OWORD *)(v12 + 128);
            *(_OWORD *)&v367[16] = *(_OWORD *)(v12 + 144);
            v250 = *v44;
            v289 = *(_OWORD *)(v12 + 96);
            v66 = *(_OWORD *)(v45 - 48);
            v65 = *(_OWORD *)(v45 - 32);
            v67 = *(_OWORD *)(v45 - 64);
            *(_OWORD *)(v12 + 140) = *(_OWORD *)(v45 - 20);
            *(_OWORD *)(v12 + 112) = v66;
            *(_OWORD *)(v12 + 128) = v65;
            *(_OWORD *)(v12 + 96) = v67;
            *v44 = *v46;
            *v46 = v250;
            *(_OWORD *)(v45 - 20) = *(_OWORD *)&v367[12];
            *(_OWORD *)(v45 - 48) = v328;
            *(_OWORD *)(v45 - 32) = *(_OWORD *)v367;
            *(_OWORD *)(v45 - 64) = v289;
            if (a2[-6].n128_f32[0] < *(float *)(v45 - 16))
            {
              v251 = *v46;
              *(_OWORD *)v368 = *(_OWORD *)(v45 - 32);
              *(_OWORD *)&v368[16] = *(_OWORD *)(v45 - 16);
              v290 = *(__n128 *)(v45 - 64);
              v329 = *(__n128 *)(v45 - 48);
              v69 = a2[-8];
              v68 = a2[-7];
              v70 = a2[-9];
              *(__n128 *)(v45 - 20) = *(__n128 *)((char *)a2 - 100);
              *(__n128 *)(v45 - 48) = v69;
              *(__n128 *)(v45 - 32) = v68;
              *(__n128 *)(v45 - 64) = v70;
              *v46 = *v10;
              *(__n128 *)((char *)a2 - 100) = *(__n128 *)&v368[12];
              a2[-8] = v329;
              a2[-7] = *(__n128 *)v368;
              a2[-9] = v290;
              *v10 = v251;
            }
          }
          else
          {
            v324 = *(__n128 *)(v12 + 112);
            *(_OWORD *)v363 = *(_OWORD *)(v12 + 128);
            *(_OWORD *)&v363[16] = *(_OWORD *)(v12 + 144);
            v246 = *v44;
            v285 = *(__n128 *)(v12 + 96);
            v50 = a2[-8];
            v49 = a2[-7];
            v51 = a2[-9];
            *(__n128 *)(v12 + 140) = *(__n128 *)((char *)a2 - 100);
            *(__n128 *)(v12 + 112) = v50;
            *(__n128 *)(v12 + 128) = v49;
            *(__n128 *)(v12 + 96) = v51;
            *v44 = *v10;
            *v10 = v246;
            *(__n128 *)((char *)a2 - 100) = *(__n128 *)&v363[12];
            a2[-8] = v324;
            a2[-7] = *(__n128 *)v363;
            a2[-9] = v285;
          }
          v71 = (__n128 *)(v12 + 160);
          v72 = v12 + 80 * v15;
          v73 = (__n128 *)(v72 + 80);
          v74 = *(float *)(v72 + 144);
          v75 = a2[-11].n128_f32[0];
          if (v74 >= *(float *)(v12 + 224))
          {
            if (v75 < v74)
            {
              v253 = *v73;
              *(_OWORD *)v370 = *(_OWORD *)(v72 + 128);
              *(_OWORD *)&v370[16] = *(_OWORD *)(v72 + 144);
              v292 = *(__n128 *)(v72 + 96);
              v331 = *(__n128 *)(v72 + 112);
              v80 = a2[-13];
              v79 = a2[-12];
              v81 = a2[-14];
              *(__n128 *)(v72 + 140) = *(__n128 *)((char *)a2 - 180);
              *(__n128 *)(v72 + 112) = v80;
              *(__n128 *)(v72 + 128) = v79;
              *(__n128 *)(v72 + 96) = v81;
              *v73 = *v11;
              *(__n128 *)((char *)a2 - 180) = *(__n128 *)&v370[12];
              a2[-13] = v331;
              a2[-12] = *(__n128 *)v370;
              a2[-14] = v292;
              *v11 = v253;
              if (*(float *)(v72 + 144) < *(float *)(v12 + 224))
              {
                v332 = *(_OWORD *)(v12 + 192);
                *(_OWORD *)v371 = *(_OWORD *)(v12 + 208);
                *(_OWORD *)&v371[16] = *(_OWORD *)(v12 + 224);
                v254 = *v71;
                v293 = *(_OWORD *)(v12 + 176);
                v83 = *(_OWORD *)(v72 + 112);
                v82 = *(_OWORD *)(v72 + 128);
                v84 = *(_OWORD *)(v72 + 96);
                *(_OWORD *)(v12 + 220) = *(_OWORD *)(v72 + 140);
                *(_OWORD *)(v12 + 192) = v83;
                *(_OWORD *)(v12 + 208) = v82;
                *(_OWORD *)(v12 + 176) = v84;
                *v71 = *v73;
                *v73 = v254;
                *(_OWORD *)(v72 + 140) = *(_OWORD *)&v371[12];
                *(_OWORD *)(v72 + 112) = v332;
                *(_OWORD *)(v72 + 128) = *(_OWORD *)v371;
                *(_OWORD *)(v72 + 96) = v293;
              }
            }
          }
          else if (v75 >= v74)
          {
            v333 = *(_OWORD *)(v12 + 192);
            *(_OWORD *)v372 = *(_OWORD *)(v12 + 208);
            *(_OWORD *)&v372[16] = *(_OWORD *)(v12 + 224);
            v255 = *v71;
            v294 = *(_OWORD *)(v12 + 176);
            v86 = *(_OWORD *)(v72 + 112);
            v85 = *(_OWORD *)(v72 + 128);
            v87 = *(_OWORD *)(v72 + 96);
            *(_OWORD *)(v12 + 220) = *(_OWORD *)(v72 + 140);
            *(_OWORD *)(v12 + 192) = v86;
            *(_OWORD *)(v12 + 208) = v85;
            *(_OWORD *)(v12 + 176) = v87;
            *v71 = *v73;
            *v73 = v255;
            *(_OWORD *)(v72 + 140) = *(_OWORD *)&v372[12];
            *(_OWORD *)(v72 + 112) = v333;
            *(_OWORD *)(v72 + 128) = *(_OWORD *)v372;
            *(_OWORD *)(v72 + 96) = v294;
            if (a2[-11].n128_f32[0] < *(float *)(v72 + 144))
            {
              v256 = *v73;
              *(_OWORD *)v373 = *(_OWORD *)(v72 + 128);
              *(_OWORD *)&v373[16] = *(_OWORD *)(v72 + 144);
              v295 = *(__n128 *)(v72 + 96);
              v334 = *(__n128 *)(v72 + 112);
              v89 = a2[-13];
              v88 = a2[-12];
              v90 = a2[-14];
              *(__n128 *)(v72 + 140) = *(__n128 *)((char *)a2 - 180);
              *(__n128 *)(v72 + 112) = v89;
              *(__n128 *)(v72 + 128) = v88;
              *(__n128 *)(v72 + 96) = v90;
              *v73 = *v11;
              *(__n128 *)((char *)a2 - 180) = *(__n128 *)&v373[12];
              a2[-13] = v334;
              a2[-12] = *(__n128 *)v373;
              a2[-14] = v295;
              *v11 = v256;
            }
          }
          else
          {
            v330 = *(__n128 *)(v12 + 192);
            *(_OWORD *)v369 = *(_OWORD *)(v12 + 208);
            *(_OWORD *)&v369[16] = *(_OWORD *)(v12 + 224);
            v252 = *v71;
            v291 = *(__n128 *)(v12 + 176);
            v77 = a2[-13];
            v76 = a2[-12];
            v78 = a2[-14];
            *(__n128 *)(v12 + 220) = *(__n128 *)((char *)a2 - 180);
            *(__n128 *)(v12 + 192) = v77;
            *(__n128 *)(v12 + 208) = v76;
            *(__n128 *)(v12 + 176) = v78;
            *v71 = *v11;
            *v11 = v252;
            *(__n128 *)((char *)a2 - 180) = *(__n128 *)&v369[12];
            a2[-13] = v330;
            a2[-12] = *(__n128 *)v369;
            a2[-14] = v291;
          }
          v91 = v16[4].n128_f32[0];
          v92 = *(float *)(v72 + 144);
          if (v91 >= v46[4].n128_f32[0])
          {
            if (v92 < v91)
            {
              v258 = *v16;
              *(__n128 *)v375 = v16[3];
              *(__n128 *)&v375[16] = v16[4];
              v297 = v16[1];
              v336 = v16[2];
              *(__n128 *)((char *)v16 + 60) = *(__n128 *)(v72 + 140);
              v95 = *(__n128 *)(v72 + 128);
              v16[2] = *(__n128 *)(v72 + 112);
              v16[3] = v95;
              v96 = *(__n128 *)(v72 + 96);
              *v16 = *v73;
              v16[1] = v96;
              *v73 = v258;
              *(__n128 *)(v72 + 96) = v297;
              *(__n128 *)(v72 + 112) = v336;
              *(_OWORD *)(v72 + 140) = *(_OWORD *)&v375[12];
              *(_OWORD *)(v72 + 128) = *(_OWORD *)v375;
              if (v16[4].n128_f32[0] < v46[4].n128_f32[0])
              {
                v259 = *v46;
                *(__n128 *)v376 = v46[3];
                *(__n128 *)&v376[16] = v46[4];
                v298 = v46[1];
                v337 = v46[2];
                *(__n128 *)((char *)v46 + 60) = *(__n128 *)((char *)v16 + 60);
                v97 = v16[3];
                v46[2] = v16[2];
                v46[3] = v97;
                v98 = v16[1];
                *v46 = *v16;
                v46[1] = v98;
                *v16 = v259;
                v16[1] = v298;
                v16[2] = v337;
                *(__n128 *)((char *)v16 + 60) = *(__n128 *)&v376[12];
                v16[3] = *(__n128 *)v376;
              }
            }
          }
          else
          {
            if (v92 >= v91)
            {
              v260 = *v46;
              *(__n128 *)v377 = v46[3];
              *(__n128 *)&v377[16] = v46[4];
              v299 = v46[1];
              v338 = v46[2];
              *(__n128 *)((char *)v46 + 60) = *(__n128 *)((char *)v16 + 60);
              v99 = v16[3];
              v46[2] = v16[2];
              v46[3] = v99;
              v100 = v16[1];
              *v46 = *v16;
              v46[1] = v100;
              *v16 = v260;
              v16[1] = v299;
              v16[2] = v338;
              *(__n128 *)((char *)v16 + 60) = *(__n128 *)&v377[12];
              v16[3] = *(__n128 *)v377;
              if (*(float *)(v72 + 144) >= v16[4].n128_f32[0])
                goto LABEL_52;
              v257 = *v16;
              *(__n128 *)v374 = v16[3];
              *(__n128 *)&v374[16] = v16[4];
              v296 = v16[1];
              v335 = v16[2];
              *(__n128 *)((char *)v16 + 60) = *(__n128 *)(v72 + 140);
              v101 = *(__n128 *)(v72 + 128);
              v16[2] = *(__n128 *)(v72 + 112);
              v16[3] = v101;
              v102 = *(__n128 *)(v72 + 96);
              *v16 = *v73;
              v16[1] = v102;
            }
            else
            {
              v257 = *v46;
              *(__n128 *)v374 = v46[3];
              *(__n128 *)&v374[16] = v46[4];
              v296 = v46[1];
              v335 = v46[2];
              *(__n128 *)((char *)v46 + 60) = *(__n128 *)(v72 + 140);
              v93 = *(__n128 *)(v72 + 128);
              v46[2] = *(__n128 *)(v72 + 112);
              v46[3] = v93;
              v94 = *(__n128 *)(v72 + 96);
              *v46 = *v73;
              v46[1] = v94;
            }
            *v73 = v257;
            *(__n128 *)(v72 + 96) = v296;
            *(__n128 *)(v72 + 112) = v335;
            *(_OWORD *)(v72 + 140) = *(_OWORD *)&v374[12];
            *(_OWORD *)(v72 + 128) = *(_OWORD *)v374;
          }
LABEL_52:
          v261 = *(__n128 *)v12;
          *(_OWORD *)v378 = *(_OWORD *)(v12 + 48);
          *(_OWORD *)&v378[16] = *(_OWORD *)(v12 + 64);
          v300 = *(__n128 *)(v12 + 16);
          v339 = *(__n128 *)(v12 + 32);
          v104 = v16[2];
          v103 = v16[3];
          v105 = v16[1];
          *(__n128 *)(v12 + 60) = *(__n128 *)((char *)v16 + 60);
          *(__n128 *)(v12 + 32) = v104;
          *(__n128 *)(v12 + 48) = v103;
          *(__n128 *)(v12 + 16) = v105;
          *(__n128 *)v12 = *v16;
          *(__n128 *)((char *)v16 + 60) = *(__n128 *)&v378[12];
          v16[2] = v339;
          v16[3] = *(__n128 *)v378;
          v16[1] = v300;
          *v16 = v261;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_53;
LABEL_32:
          v64 = *(float *)(v12 + 64);
LABEL_54:
          v106 = 0;
          v233 = *(_OWORD *)(v12 + 32);
          v236 = *(_OWORD *)(v12 + 48);
          v227 = *(__n128 *)v12;
          v230 = *(_OWORD *)(v12 + 16);
          v107 = *(_QWORD *)(v12 + 68);
          do
          {
            v108 = *(float *)(v12 + v106 + 144);
            v106 += 80;
          }
          while (v108 < v64);
          v109 = v12 + v106;
          v110 = a2;
          if (v106 == 80)
          {
            v113 = a2;
            while (v109 < (unint64_t)v113)
            {
              v111 = v113 - 5;
              v114 = v113[-1].n128_f32[0];
              v113 -= 5;
              if (v114 < v64)
                goto LABEL_62;
            }
            v111 = v113;
            v12 = v109;
          }
          else
          {
            do
            {
              v111 = v110 - 5;
              v112 = v110[-1].n128_f32[0];
              v110 -= 5;
            }
            while (v112 >= v64);
LABEL_62:
            v12 = v109;
            if (v109 < (unint64_t)v111)
            {
              v115 = v111;
              do
              {
                v262 = *(__n128 *)v12;
                *(_OWORD *)v379 = *(_OWORD *)(v12 + 48);
                *(_OWORD *)&v379[16] = *(_OWORD *)(v12 + 64);
                v301 = *(__n128 *)(v12 + 16);
                v340 = *(__n128 *)(v12 + 32);
                v117 = v115[2];
                v116 = v115[3];
                v118 = v115[1];
                *(__n128 *)(v12 + 60) = *(__n128 *)((char *)v115 + 60);
                *(__n128 *)(v12 + 32) = v117;
                *(__n128 *)(v12 + 48) = v116;
                *(__n128 *)(v12 + 16) = v118;
                *(__n128 *)v12 = *v115;
                *(__n128 *)((char *)v115 + 60) = *(__n128 *)&v379[12];
                v115[2] = v340;
                v115[3] = *(__n128 *)v379;
                v115[1] = v301;
                *v115 = v262;
                do
                {
                  v119 = *(float *)(v12 + 144);
                  v12 += 80;
                }
                while (v119 < v64);
                do
                {
                  v120 = v115[-1].n128_f32[0];
                  v115 -= 5;
                }
                while (v120 >= v64);
              }
              while (v12 < (unint64_t)v115);
            }
          }
          v121 = (__n128 *)(v12 - 80);
          if (v12 - 80 != a1)
          {
            *(__n128 *)a1 = *v121;
            v122 = *(_OWORD *)(v12 - 64);
            v123 = *(_OWORD *)(v12 - 48);
            v124 = *(_OWORD *)(v12 - 32);
            *(_OWORD *)(a1 + 60) = *(_OWORD *)(v12 - 20);
            *(_OWORD *)(a1 + 32) = v123;
            *(_OWORD *)(a1 + 48) = v124;
            *(_OWORD *)(a1 + 16) = v122;
          }
          *(_OWORD *)(v12 - 48) = v233;
          *(_OWORD *)(v12 - 32) = v236;
          *v121 = v227;
          *(_OWORD *)(v12 - 64) = v230;
          *(float *)(v12 - 16) = v64;
          *(_QWORD *)(v12 - 12) = v107;
          if (v109 < (unint64_t)v111)
            goto LABEL_73;
          v125 = sub_2233C3BE0(a1, v12 - 80);
          if (!sub_2233C3BE0(v12, (uint64_t)a2))
          {
            if (v125)
              continue;
LABEL_73:
            sub_2233C2558(a1, v12 - 80, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 80);
          if (v125)
            return result;
          goto LABEL_1;
        }
        v167 = (__n128 *)(v12 + 80);
        v169 = (__n128 *)v12 == a2 || v167 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v169)
          {
            v170 = 0;
            v171 = v12;
            do
            {
              v173 = v167;
              result.n128_u32[0] = *(_DWORD *)(v171 + 144);
              if (result.n128_f32[0] < *(float *)(v171 + 64))
              {
                v348 = v167[2];
                v387 = v167[3];
                v270 = *v167;
                v309 = v167[1];
                v174 = *(_QWORD *)(v171 + 148);
                v175 = v170;
                do
                {
                  v176 = (_OWORD *)(v12 + v175);
                  v177 = *(_OWORD *)(v12 + v175 + 48);
                  v176[7] = *(_OWORD *)(v12 + v175 + 32);
                  v176[8] = v177;
                  *(_OWORD *)((char *)v176 + 140) = *(_OWORD *)(v12 + v175 + 60);
                  v178 = *(_OWORD *)(v12 + v175 + 16);
                  v176[5] = *(_OWORD *)(v12 + v175);
                  v176[6] = v178;
                  if (!v175)
                  {
                    v172 = v12;
                    goto LABEL_118;
                  }
                  v175 -= 80;
                }
                while (result.n128_f32[0] < *((float *)v176 - 4));
                v172 = v12 + v175 + 80;
LABEL_118:
                *(__n128 *)(v172 + 32) = v348;
                *(__n128 *)(v172 + 48) = v387;
                *(__n128 *)v172 = v270;
                *(__n128 *)(v172 + 16) = v309;
                *(_DWORD *)(v172 + 64) = result.n128_u32[0];
                *(_QWORD *)(v172 + 68) = v174;
              }
              v167 = v173 + 5;
              v170 += 80;
              v171 = (unint64_t)v173;
            }
            while (&v173[5] != a2);
          }
        }
        else if (!v169)
        {
          do
          {
            v218 = (uint64_t)v167;
            result.n128_u32[0] = *(_DWORD *)(a1 + 144);
            if (result.n128_f32[0] < *(float *)(a1 + 64))
            {
              v353 = v167[2];
              v392 = v167[3];
              v275 = *v167;
              v314 = v167[1];
              v219 = *(_QWORD *)(a1 + 148);
              do
              {
                v220 = v167[-2];
                v167[2] = v167[-3];
                v167[3] = v220;
                *(__n128 *)((char *)v167 + 60) = *(__n128 *)((char *)v167 - 20);
                v221 = v167[-4];
                *v167 = v167[-5];
                v167[1] = v221;
                v221.n128_u32[0] = v167[-6].n128_u32[0];
                v167 -= 5;
              }
              while (result.n128_f32[0] < v221.n128_f32[0]);
              v167[2] = v353;
              v167[3] = v392;
              *v167 = v275;
              v167[1] = v314;
              v167[4].n128_u32[0] = result.n128_u32[0];
              *(unint64_t *)((char *)v167[4].n128_u64 + 4) = v219;
            }
            v167 = (__n128 *)(v218 + 80);
            a1 = v218;
          }
          while ((__n128 *)(v218 + 80) != a2);
        }
        return result;
    }
  }
}

  v11 = (__n128 *)((char *)a2 - 24);
  v133 = (__n128 *)((char *)a2 - 72);
  v134 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v12) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*((_QWORD *)a2 - 1) > *(_QWORD *)(v12 + 16))
        {
          v184 = *(_QWORD *)(v12 + 16);
          v156 = *(__n128 *)v12;
          v102 = *(__int128 *)((char *)a2 - 24);
          *(_QWORD *)(v12 + 16) = *((_QWORD *)a2 - 1);
          *(_OWORD *)v12 = v102;
          result = v156;
          *((_QWORD *)a2 - 1) = v184;
          *(__int128 *)((char *)a2 - 24) = (__int128)v156;
        }
        return result;
      case 3uLL:
        v103 = (__n128 *)(v12 + 24);
        v104 = *(_QWORD *)(v12 + 40);
        v105 = *((_QWORD *)a2 - 1);
        if (v104 <= *(_QWORD *)(v12 + 16))
        {
          if (v105 > v104)
          {
            result = *v103;
            v121 = *(_QWORD *)(v12 + 40);
            v122 = *((_QWORD *)a2 - 1);
            *v103 = *v11;
            *(_QWORD *)(v12 + 40) = v122;
            *((_QWORD *)a2 - 1) = v121;
            *v11 = result;
            goto LABEL_144;
          }
        }
        else if (v105 <= v104)
        {
          v188 = *(_QWORD *)(v12 + 16);
          v162 = *(__n128 *)v12;
          *(__n128 *)v12 = *v103;
          *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
          result = v162;
          *v103 = v162;
          *(_QWORD *)(v12 + 40) = v188;
          if (*((_QWORD *)a2 - 1) > *(_QWORD *)(v12 + 40))
          {
            result = *v103;
            v128 = *(_QWORD *)(v12 + 40);
            v129 = *((_QWORD *)a2 - 1);
            *v103 = *v11;
            *(_QWORD *)(v12 + 40) = v129;
            *((_QWORD *)a2 - 1) = v128;
            *v11 = result;
          }
        }
        else
        {
          v185 = *(_QWORD *)(v12 + 16);
          v157 = *(__n128 *)v12;
          v106 = *v11;
          *(_QWORD *)(v12 + 16) = *((_QWORD *)a2 - 1);
          *(__n128 *)v12 = v106;
          result = v157;
          *((_QWORD *)a2 - 1) = v185;
          *v11 = v157;
        }
        return result;
      case 4uLL:
        v103 = (__n128 *)(v12 + 24);
        v107 = (__n128 *)(v12 + 48);
        v108 = *(_QWORD *)(v12 + 40);
        v109 = *(_QWORD *)(v12 + 64);
        if (v108 <= *(_QWORD *)(v12 + 16))
        {
          if (v109 > v108)
          {
            v123 = *(_QWORD *)(v12 + 40);
            result = *v103;
            *v103 = *v107;
            *(_QWORD *)(v12 + 40) = *(_QWORD *)(v12 + 64);
            *v107 = result;
            *(_QWORD *)(v12 + 64) = v123;
            if (*(_QWORD *)(v12 + 40) > *(_QWORD *)(v12 + 16))
            {
              v187 = *(_QWORD *)(v12 + 16);
              v160 = *(__n128 *)v12;
              *(__n128 *)v12 = *v103;
              *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
              result = v160;
              *v103 = v160;
              *(_QWORD *)(v12 + 40) = v187;
            }
          }
        }
        else
        {
          if (v109 <= v108)
          {
            v189 = *(_QWORD *)(v12 + 16);
            v163 = *(__n128 *)v12;
            *(__n128 *)v12 = *v103;
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
            result = v163;
            *v103 = v163;
            *(_QWORD *)(v12 + 40) = v189;
            if (v109 <= *(_QWORD *)(v12 + 40))
              goto LABEL_141;
            v110 = *(_QWORD *)(v12 + 40);
            result = *v103;
            *v103 = *v107;
            *(_QWORD *)(v12 + 40) = *(_QWORD *)(v12 + 64);
            *v107 = result;
          }
          else
          {
            v186 = *(_QWORD *)(v12 + 16);
            v158 = *(__n128 *)v12;
            *(__n128 *)v12 = *v107;
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 64);
            result = v158;
            *v107 = v158;
            v110 = v186;
          }
          *(_QWORD *)(v12 + 64) = v110;
        }
LABEL_141:
        if (*((_QWORD *)a2 - 1) > *(_QWORD *)(v12 + 64))
        {
          result = *v107;
          v130 = *(_QWORD *)(v12 + 64);
          v131 = *((_QWORD *)a2 - 1);
          *v107 = *v11;
          *(_QWORD *)(v12 + 64) = v131;
          *((_QWORD *)a2 - 1) = v130;
          *v11 = result;
          if (*(_QWORD *)(v12 + 64) > *(_QWORD *)(v12 + 40))
          {
            v132 = *(_QWORD *)(v12 + 40);
            result = *v103;
            *v103 = *v107;
            *(_QWORD *)(v12 + 40) = *(_QWORD *)(v12 + 64);
            *v107 = result;
            *(_QWORD *)(v12 + 64) = v132;
LABEL_144:
            if (*(_QWORD *)(v12 + 40) > *(_QWORD *)(v12 + 16))
            {
              v190 = *(_QWORD *)(v12 + 16);
              v164 = *(__n128 *)v12;
              *(__n128 *)v12 = *v103;
              *(_QWORD *)(v12 + 16) = v103[1].n128_u64[0];
              result = v164;
              *v103 = v164;
              v103[1].n128_u64[0] = v190;
            }
          }
        }
        return result;
      case 5uLL:
        result.n128_u64[0] = sub_223688CE4((__n128 *)v12, (__n128 *)(v12 + 24), (__n128 *)(v12 + 48), (__n128 *)(v12 + 72), (__n128 *)((char *)a2 - 24), result).n128_u64[0];
        return result;
      default:
        if (v13 > 575)
        {
          if (!a4)
          {
            if ((__int128 *)v12 != a2)
              sub_223688F2C(v12, a2, a2);
            return result;
          }
          v15 = v14 >> 1;
          v16 = (__n128 *)(v12 + 24 * (v14 >> 1));
          v17 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v13 < 0xC01)
          {
            v21 = *(_QWORD *)(v12 + 16);
            v22 = v12 + 24 * v15;
            v24 = *(_QWORD *)(v22 + 16);
            v23 = (_QWORD *)(v22 + 16);
            if (v21 <= v24)
            {
              if (v17 > v21)
              {
                v169 = *(_QWORD *)(v12 + 16);
                v141 = *(__n128 *)v12;
                v28 = *v11;
                *(_QWORD *)(v12 + 16) = *((_QWORD *)a2 - 1);
                *(__n128 *)v12 = v28;
                *((_QWORD *)a2 - 1) = v169;
                *v11 = v141;
                if (*(_QWORD *)(v12 + 16) > *v23)
                {
                  v170 = v16[1].n128_u64[0];
                  v142 = *v16;
                  v29 = *(__n128 *)v12;
                  v16[1].n128_u64[0] = *(_QWORD *)(v12 + 16);
                  *v16 = v29;
                  *(_QWORD *)(v12 + 16) = v170;
                  *(__n128 *)v12 = v142;
                  --a4;
                  if ((a5 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_53;
                }
              }
            }
            else
            {
              if (v17 <= v21)
              {
                v173 = v16[1].n128_u64[0];
                v145 = *v16;
                v46 = *(__n128 *)v12;
                v16[1].n128_u64[0] = *(_QWORD *)(v12 + 16);
                *v16 = v46;
                *(_QWORD *)(v12 + 16) = v173;
                *(__n128 *)v12 = v145;
                if (*((_QWORD *)a2 - 1) <= *(_QWORD *)(v12 + 16))
                  goto LABEL_31;
                v166 = *(_QWORD *)(v12 + 16);
                v138 = *(__n128 *)v12;
                v47 = *v11;
                *(_QWORD *)(v12 + 16) = *((_QWORD *)a2 - 1);
                *(__n128 *)v12 = v47;
              }
              else
              {
                v166 = v16[1].n128_u64[0];
                v138 = *v16;
                v25 = *v11;
                v16[1].n128_u64[0] = *((_QWORD *)a2 - 1);
                *v16 = v25;
              }
              *((_QWORD *)a2 - 1) = v166;
              *v11 = v138;
            }
LABEL_31:
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_32;
LABEL_53:
            v48 = *(_QWORD *)(v12 + 16);
            if (*(_QWORD *)(v12 - 8) > v48)
              goto LABEL_54;
            v136 = *(__n128 *)v12;
            if (v48 <= *((_QWORD *)a2 - 1))
            {
              v92 = v12 + 24;
              do
              {
                v12 = v92;
                if (v92 >= (unint64_t)a2)
                  break;
                v93 = *(_QWORD *)(v92 + 16);
                v92 += 24;
              }
              while (v48 <= v93);
            }
            else
            {
              v90 = v12;
              do
              {
                v12 = v90 + 24;
                v91 = *(_QWORD *)(v90 + 40);
                v90 += 24;
              }
              while (v48 <= v91);
            }
            v94 = a2;
            if (v12 < (unint64_t)a2)
            {
              v95 = a2;
              do
              {
                v94 = (__int128 *)((char *)v95 - 24);
                v96 = *((_QWORD *)v95 - 1);
                v95 = (__int128 *)((char *)v95 - 24);
              }
              while (v48 > v96);
            }
            while (v12 < (unint64_t)v94)
            {
              v183 = *(_QWORD *)(v12 + 16);
              v155 = *(__n128 *)v12;
              v97 = (__n128)*v94;
              *(_QWORD *)(v12 + 16) = *((_QWORD *)v94 + 2);
              *(__n128 *)v12 = v97;
              *((_QWORD *)v94 + 2) = v183;
              *v94 = (__int128)v155;
              do
              {
                v98 = *(_QWORD *)(v12 + 40);
                v12 += 24;
              }
              while (v48 <= v98);
              do
              {
                v99 = *((_QWORD *)v94 - 1);
                v94 = (__int128 *)((char *)v94 - 24);
              }
              while (v48 > v99);
            }
            v100 = (__n128 *)(v12 - 24);
            if (v12 - 24 != a1)
            {
              v101 = *v100;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 - 8);
              *(__n128 *)a1 = v101;
            }
            a5 = 0;
            result = v136;
            *v100 = v136;
            *(_QWORD *)(v12 - 8) = v48;
            continue;
          }
          v18 = (uint64_t *)(v12 + 16 + 24 * v15);
          v19 = *v18;
          if (*v18 <= *(_QWORD *)(v12 + 16))
          {
            if (v17 > v19)
            {
              v167 = v16[1].n128_u64[0];
              v139 = *v16;
              v26 = *v11;
              v16[1].n128_u64[0] = *((_QWORD *)a2 - 1);
              *v16 = v26;
              *((_QWORD *)a2 - 1) = v167;
              *v11 = v139;
              if (*v18 > *(_QWORD *)(v12 + 16))
              {
                v168 = *(_QWORD *)(v12 + 16);
                v140 = *(__n128 *)v12;
                v27 = *v16;
                *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
                *(__n128 *)v12 = v27;
                v16[1].n128_u64[0] = v168;
                *v16 = v140;
              }
            }
          }
          else
          {
            if (v17 <= v19)
            {
              v171 = *(_QWORD *)(v12 + 16);
              v143 = *(__n128 *)v12;
              v30 = *v16;
              *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
              *(__n128 *)v12 = v30;
              v16[1].n128_u64[0] = v171;
              *v16 = v143;
              if (*((_QWORD *)a2 - 1) <= *v18)
                goto LABEL_22;
              v165 = v16[1].n128_u64[0];
              v137 = *v16;
              v31 = *v11;
              v16[1].n128_u64[0] = *((_QWORD *)a2 - 1);
              *v16 = v31;
            }
            else
            {
              v165 = *(_QWORD *)(v12 + 16);
              v137 = *(__n128 *)v12;
              v20 = *v11;
              *(_QWORD *)(v12 + 16) = *((_QWORD *)a2 - 1);
              *(__n128 *)v12 = v20;
            }
            *((_QWORD *)a2 - 1) = v165;
            *v11 = v137;
          }
LABEL_22:
          v32 = (__int128 *)(v12 + 24);
          v33 = v12 + 24 * v15;
          v36 = *(_QWORD *)(v33 - 8);
          v34 = (unint64_t *)(v33 - 8);
          v35 = v36;
          v37 = (__n128 *)(v34 - 2);
          v38 = *((_QWORD *)a2 - 4);
          if (v36 <= *(_QWORD *)(v12 + 40))
          {
            if (v38 > v35)
            {
              v172 = *v34;
              v144 = (__int128)*v37;
              v42 = *v134;
              *v34 = *((_QWORD *)a2 - 4);
              *v37 = (__n128)v42;
              *((_QWORD *)a2 - 4) = v172;
              *v134 = v144;
              if ((int64_t)*v34 > *(_QWORD *)(v12 + 40))
              {
                v43 = *v32;
                v44 = *(_QWORD *)(v12 + 40);
                v45 = *v34;
                *v32 = (__int128)*v37;
                *(_QWORD *)(v12 + 40) = v45;
                *v34 = v44;
                *v37 = (__n128)v43;
              }
            }
          }
          else if (v38 <= v35)
          {
            v49 = *v32;
            v50 = *(_QWORD *)(v12 + 40);
            v51 = *v34;
            *v32 = (__int128)*v37;
            *(_QWORD *)(v12 + 40) = v51;
            *v34 = v50;
            *v37 = (__n128)v49;
            if (*((_QWORD *)a2 - 4) > (int64_t)*v34)
            {
              v174 = *v34;
              v146 = (__int128)*v37;
              v52 = *v134;
              *v34 = *((_QWORD *)a2 - 4);
              *v37 = (__n128)v52;
              *((_QWORD *)a2 - 4) = v174;
              *v134 = v146;
            }
          }
          else
          {
            v39 = *v32;
            v40 = *(_QWORD *)(v12 + 40);
            v41 = *((_QWORD *)a2 - 4);
            *v32 = *v134;
            *(_QWORD *)(v12 + 40) = v41;
            *((_QWORD *)a2 - 4) = v40;
            *v134 = v39;
          }
          v53 = (__n128 *)(v12 + 48);
          v54 = v12 + 24 * v15;
          v57 = *(_QWORD *)(v54 + 40);
          v55 = (unint64_t *)(v54 + 40);
          v56 = v57;
          v58 = (__n128 *)(v55 - 2);
          v59 = *((_QWORD *)a2 - 7);
          if (v57 <= *(_QWORD *)(v12 + 64))
          {
            if (v59 > v56)
            {
              v175 = *v55;
              v147 = *v58;
              v63 = *v133;
              *v55 = *((_QWORD *)a2 - 7);
              *v58 = v63;
              *((_QWORD *)a2 - 7) = v175;
              *v133 = v147;
              if ((int64_t)*v55 > *(_QWORD *)(v12 + 64))
              {
                v64 = *v53;
                v65 = *(_QWORD *)(v12 + 64);
                v66 = *v55;
                *v53 = *v58;
                *(_QWORD *)(v12 + 64) = v66;
                *v55 = v65;
                *v58 = v64;
              }
            }
          }
          else if (v59 <= v56)
          {
            v67 = *v53;
            v68 = *(_QWORD *)(v12 + 64);
            v69 = *v55;
            *v53 = *v58;
            *(_QWORD *)(v12 + 64) = v69;
            *v55 = v68;
            *v58 = v67;
            if (*((_QWORD *)a2 - 7) > (int64_t)*v55)
            {
              v176 = *v55;
              v148 = *v58;
              v70 = *v133;
              *v55 = *((_QWORD *)a2 - 7);
              *v58 = v70;
              *((_QWORD *)a2 - 7) = v176;
              *v133 = v148;
            }
          }
          else
          {
            v60 = *v53;
            v61 = *(_QWORD *)(v12 + 64);
            v62 = *((_QWORD *)a2 - 7);
            *v53 = *v133;
            *(_QWORD *)(v12 + 64) = v62;
            *((_QWORD *)a2 - 7) = v61;
            *v133 = v60;
          }
          v71 = *v18;
          v72 = *v55;
          if (*v18 <= (uint64_t)*v34)
          {
            if (v72 > v71)
            {
              v178 = v16[1].n128_u64[0];
              v150 = *v16;
              *v16 = *v58;
              v16[1].n128_u64[0] = *v55;
              *v55 = v178;
              *v58 = v150;
              if (*v18 > (uint64_t)*v34)
              {
                v179 = *v34;
                v151 = *v37;
                *v37 = *v16;
                *v34 = v16[1].n128_u64[0];
                v16[1].n128_u64[0] = v179;
                *v16 = v151;
              }
            }
          }
          else
          {
            if (v72 <= v71)
            {
              v180 = *v34;
              v152 = *v37;
              *v37 = *v16;
              *v34 = v16[1].n128_u64[0];
              v16[1].n128_u64[0] = v180;
              *v16 = v152;
              if ((uint64_t)*v55 <= *v18)
                goto LABEL_52;
              v177 = v16[1].n128_u64[0];
              v149 = *v16;
              *v16 = *v58;
              v16[1].n128_u64[0] = *v55;
            }
            else
            {
              v177 = *v34;
              v149 = *v37;
              *v37 = *v58;
              *v34 = *v55;
            }
            *v55 = v177;
            *v58 = v149;
          }
LABEL_52:
          v181 = *(_QWORD *)(v12 + 16);
          v153 = *(__n128 *)v12;
          v73 = *v16;
          *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
          *(__n128 *)v12 = v73;
          v16[1].n128_u64[0] = v181;
          *v16 = v153;
          --a4;
          if ((a5 & 1) == 0)
            goto LABEL_53;
LABEL_32:
          v48 = *(_QWORD *)(v12 + 16);
LABEL_54:
          v74 = 0;
          v135 = *(__n128 *)v12;
          do
          {
            v75 = *(_QWORD *)(v12 + v74 + 40);
            v74 += 24;
          }
          while (v75 > v48);
          v76 = v12 + v74;
          v77 = a2;
          if (v74 == 24)
          {
            v80 = a2;
            while (v76 < (unint64_t)v80)
            {
              v78 = (__int128 *)((char *)v80 - 24);
              v81 = *((_QWORD *)v80 - 1);
              v80 = (__int128 *)((char *)v80 - 24);
              if (v81 > v48)
                goto LABEL_62;
            }
            v78 = v80;
            v12 = v76;
          }
          else
          {
            do
            {
              v78 = (__int128 *)((char *)v77 - 24);
              v79 = *((_QWORD *)v77 - 1);
              v77 = (__int128 *)((char *)v77 - 24);
            }
            while (v79 <= v48);
LABEL_62:
            v12 = v76;
            if (v76 < (unint64_t)v78)
            {
              v82 = (unint64_t)v78;
              do
              {
                v182 = *(_QWORD *)(v12 + 16);
                v154 = *(__n128 *)v12;
                v83 = *(__n128 *)v82;
                *(_QWORD *)(v12 + 16) = *(_QWORD *)(v82 + 16);
                *(__n128 *)v12 = v83;
                *(_QWORD *)(v82 + 16) = v182;
                *(__n128 *)v82 = v154;
                do
                {
                  v84 = *(_QWORD *)(v12 + 40);
                  v12 += 24;
                }
                while (v84 > v48);
                do
                {
                  v85 = *(_QWORD *)(v82 - 8);
                  v82 -= 24;
                }
                while (v85 <= v48);
              }
              while (v12 < v82);
            }
          }
          v86 = (__n128 *)(v12 - 24);
          if (v12 - 24 != a1)
          {
            v87 = *v86;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 - 8);
            *(__n128 *)a1 = v87;
          }
          *v86 = v135;
          *(_QWORD *)(v12 - 8) = v48;
          if (v76 < (unint64_t)v78)
            goto LABEL_73;
          v88 = sub_223688808(a1, (__n128 *)(v12 - 24), v135);
          if (!sub_223688808(v12, (__n128 *)a2, v89))
          {
            if (v88)
              continue;
LABEL_73:
            sub_2236879B4(a1, v12 - 24, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = (__int128 *)(v12 - 24);
          if (v88)
            return result;
          goto LABEL_1;
        }
        v111 = (__int128 *)(v12 + 24);
        v113 = (__int128 *)v12 == a2 || v111 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v113)
          {
            v114 = 0;
            v115 = (__int128 *)v12;
            do
            {
              v117 = *((_QWORD *)v115 + 5);
              v118 = *((_QWORD *)v115 + 2);
              v115 = v111;
              if (v117 > v118)
              {
                v159 = (__n128)*v111;
                v119 = v114;
                do
                {
                  v120 = v12 + v119;
                  *(_OWORD *)(v120 + 24) = *(_OWORD *)(v12 + v119);
                  *(_QWORD *)(v120 + 40) = *(_QWORD *)(v12 + v119 + 16);
                  if (!v119)
                  {
                    v116 = v12;
                    goto LABEL_115;
                  }
                  v119 -= 24;
                }
                while (v117 > *(_QWORD *)(v120 - 8));
                v116 = v12 + v119 + 24;
LABEL_115:
                result = v159;
                *(__n128 *)v116 = v159;
                *(_QWORD *)(v116 + 16) = v117;
              }
              v111 = (__int128 *)((char *)v115 + 24);
              v114 += 24;
            }
            while ((__int128 *)((char *)v115 + 24) != a2);
          }
        }
        else if (!v113)
        {
          do
          {
            v124 = *(_QWORD *)(a1 + 40);
            v125 = *(_QWORD *)(a1 + 16);
            a1 = (uint64_t)v111;
            if (v124 > v125)
            {
              v161 = (__n128)*v111;
              v126 = v111;
              do
              {
                *v126 = *(__int128 *)((char *)v126 - 24);
                *((_QWORD *)v126 + 2) = *((_QWORD *)v126 - 1);
                v127 = *((_QWORD *)v126 - 4);
                v126 = (__int128 *)((char *)v126 - 24);
              }
              while (v124 > v127);
              result = v161;
              *v126 = (__int128)v161;
              *((_QWORD *)v126 + 2) = v124;
            }
            v111 = (__int128 *)(a1 + 24);
          }
          while ((__int128 *)(a1 + 24) != a2);
        }
        return result;
    }
  }
}

  v9 = (char *)a2 - 40;
  v10 = (__int128 *)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_22368A558(a3, (_QWORD *)a2 - 5, v10))
        {
          v30 = *v10;
          v31 = v10[1];
          v74 = *((_QWORD *)v10 + 4);
          v72 = v30;
          v73 = v31;
          v32 = *(_OWORD *)v9;
          v33 = *(__int128 *)((char *)a2 - 24);
          *((_QWORD *)v10 + 4) = *((_QWORD *)a2 - 1);
          *v10 = v32;
          v10[1] = v33;
          *(_OWORD *)v9 = v72;
          *(__int128 *)((char *)a2 - 24) = v73;
          *((_QWORD *)a2 - 1) = v74;
        }
        return;
      case 3uLL:
        sub_22368A828(v10, (__int128 *)((char *)v10 + 40), (__int128 *)((char *)a2 - 40), a3);
        return;
      case 4uLL:
        v34 = (__int128 *)((char *)v10 + 40);
        v35 = v10 + 5;
        sub_22368A828(v10, (__int128 *)((char *)v10 + 40), v10 + 5, a3);
        if (sub_22368A558(a3, v9, (_QWORD *)v10 + 10))
        {
          v36 = *v35;
          v37 = v10[6];
          v38 = *((_QWORD *)v10 + 14);
          v39 = *((_QWORD *)v9 + 4);
          v40 = *((_OWORD *)v9 + 1);
          *v35 = *(_OWORD *)v9;
          v10[6] = v40;
          *((_QWORD *)v10 + 14) = v39;
          *((_QWORD *)v9 + 4) = v38;
          *(_OWORD *)v9 = v36;
          *((_OWORD *)v9 + 1) = v37;
          if (sub_22368A558(a3, (_QWORD *)v10 + 10, (_QWORD *)v10 + 5))
          {
            v41 = *((_QWORD *)v10 + 9);
            v43 = *v34;
            v42 = *(__int128 *)((char *)v10 + 56);
            v44 = v10[6];
            *v34 = *v35;
            *(__int128 *)((char *)v10 + 56) = v44;
            *((_QWORD *)v10 + 9) = *((_QWORD *)v10 + 14);
            *v35 = v43;
            v10[6] = v42;
            *((_QWORD *)v10 + 14) = v41;
            if (sub_22368A558(a3, (_QWORD *)v10 + 5, v10))
            {
              v45 = *v10;
              v46 = v10[1];
              v74 = *((_QWORD *)v10 + 4);
              v72 = v45;
              v73 = v46;
              v47 = *(__int128 *)((char *)v10 + 56);
              *v10 = *v34;
              v10[1] = v47;
              *((_QWORD *)v10 + 4) = *((_QWORD *)v10 + 9);
              v48 = v73;
              *v34 = v72;
              *(__int128 *)((char *)v10 + 56) = v48;
              *((_QWORD *)v10 + 9) = v74;
            }
          }
        }
        return;
      case 5uLL:
        sub_22368B3D8((uint64_t)v10, (uint64_t)v10 + 40, (uint64_t)(v10 + 5), (__int128 *)((char *)v10 + 120), (__int128 *)((char *)a2 - 40), a3);
        return;
      default:
        if (v13 > 959)
        {
          if (v12 == 1)
          {
            if (v10 != a2)
              sub_22368B59C((uint64_t)v10, a2, a2, a3);
            return;
          }
          v15 = v14 >> 1;
          v16 = (__int128 *)((char *)v10 + 40 * (v14 >> 1));
          if ((unint64_t)v13 < 0x1401)
          {
            sub_22368A828(v16, v10, (__int128 *)((char *)a2 - 40), a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_22368A828(v10, v16, (__int128 *)((char *)a2 - 40), a3);
            v17 = 40 * v15;
            v18 = (__int128 *)((char *)v10 + 40 * v15 - 40);
            sub_22368A828((__int128 *)((char *)v10 + 40), v18, a2 - 5, a3);
            v19 = v10 + 5;
            v20 = (__int128 *)((char *)v10 + v17 + 40);
            sub_22368A828(v19, v20, (__int128 *)((char *)a2 - 120), a3);
            sub_22368A828(v18, v16, v20, a3);
            v21 = *(_OWORD *)a1;
            v22 = *(_OWORD *)(a1 + 16);
            v74 = *(_QWORD *)(a1 + 32);
            v72 = v21;
            v73 = v22;
            v23 = *v16;
            v24 = v16[1];
            *(_QWORD *)(a1 + 32) = *((_QWORD *)v16 + 4);
            *(_OWORD *)a1 = v23;
            *(_OWORD *)(a1 + 16) = v24;
            v25 = v72;
            v26 = v73;
            *((_QWORD *)v16 + 4) = v74;
            *v16 = v25;
            v16[1] = v26;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((sub_22368A558(a3, (_QWORD *)(a1 - 40), (_QWORD *)a1) & 1) == 0)
          {
            v10 = (__int128 *)sub_22368A99C((__int128 *)a1, (unint64_t)a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v27 = sub_22368AAF8((__int128 *)a1, a2, a3);
          if ((v28 & 1) == 0)
            goto LABEL_14;
          v29 = sub_22368AC54(a1, v27, a3);
          v10 = (__int128 *)(v27 + 40);
          if (!sub_22368AC54(v27 + 40, (uint64_t)a2, a3))
          {
            v11 = v12 + 1;
            if (v29)
              continue;
LABEL_14:
            sub_22368A020(a1, v27, a3, -v12, a5 & 1);
            v10 = (__int128 *)(v27 + 40);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (__int128 *)v27;
          if (v29)
            return;
          goto LABEL_1;
        }
        v49 = (__int128 *)((char *)v10 + 40);
        v51 = v10 == a2 || v49 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v51)
          {
            v52 = 0;
            v53 = v10;
            do
            {
              v57 = v53;
              v53 = v49;
              if (sub_22368A558(a3, v49, v57))
              {
                v58 = *v53;
                v59 = v53[1];
                v74 = *((_QWORD *)v53 + 4);
                v72 = v58;
                v73 = v59;
                v60 = v52;
                do
                {
                  v61 = (char *)v10 + v60;
                  v62 = *(__int128 *)((char *)v10 + v60 + 16);
                  *(_OWORD *)(v61 + 40) = *(__int128 *)((char *)v10 + v60);
                  *(_OWORD *)(v61 + 56) = v62;
                  *((_QWORD *)v61 + 9) = *(_QWORD *)((char *)v10 + v60 + 32);
                  if (!v60)
                  {
                    v54 = (uint64_t)v10;
                    goto LABEL_38;
                  }
                  v60 -= 40;
                }
                while ((sub_22368A558(a3, &v72, (__int128 *)((char *)v10 + v60)) & 1) != 0);
                v54 = (uint64_t)v10 + v60 + 40;
LABEL_38:
                v55 = v72;
                v56 = v73;
                *(_QWORD *)(v54 + 32) = v74;
                *(_OWORD *)v54 = v55;
                *(_OWORD *)(v54 + 16) = v56;
              }
              v49 = (__int128 *)((char *)v53 + 40);
              v52 += 40;
            }
            while ((__int128 *)((char *)v53 + 40) != a2);
          }
        }
        else if (!v51)
        {
          v63 = (_QWORD *)v10 - 5;
          do
          {
            v64 = (_QWORD *)a1;
            a1 = (uint64_t)v49;
            if (sub_22368A558(a3, v49, v64))
            {
              v65 = *(_OWORD *)a1;
              v66 = *(_OWORD *)(a1 + 16);
              v74 = *(_QWORD *)(a1 + 32);
              v72 = v65;
              v73 = v66;
              v67 = v63;
              do
              {
                v68 = *(_OWORD *)(v67 + 7);
                *((_OWORD *)v67 + 5) = *(_OWORD *)(v67 + 5);
                *((_OWORD *)v67 + 6) = v68;
                v67[14] = v67[9];
                v69 = sub_22368A558(a3, &v72, v67);
                v67 -= 5;
              }
              while ((v69 & 1) != 0);
              v70 = v72;
              v71 = v73;
              v67[14] = v74;
              *((_OWORD *)v67 + 5) = v70;
              *((_OWORD *)v67 + 6) = v71;
            }
            v49 = (__int128 *)(a1 + 40);
            v63 += 5;
          }
          while ((__int128 *)(a1 + 40) != a2);
        }
        return;
    }
  }
}

  v8 = a2 - 104;
  v9 = (unint64_t)a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = (_OWORD *)v9;
    v11 = v10;
    v12 = a2 - v9;
    v13 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a2 - v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_22368D350(a3, v8, v9))
        {
          v35 = *(_QWORD *)v9;
          v36 = *(_OWORD *)(v9 + 24);
          *(_OWORD *)v84 = *(_OWORD *)(v9 + 8);
          *(_OWORD *)&v84[16] = v36;
          v37 = *(_OWORD *)(v9 + 40);
          v38 = *(_OWORD *)(v9 + 56);
          v39 = *(_OWORD *)(v9 + 88);
          *(_OWORD *)&v84[64] = *(_OWORD *)(v9 + 72);
          *(_OWORD *)&v84[80] = v39;
          *(_OWORD *)&v84[32] = v37;
          *(_OWORD *)&v84[48] = v38;
          *(_QWORD *)v9 = *(_QWORD *)(a2 - 104);
          v40 = *(_OWORD *)(a2 - 96);
          *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 - 80);
          *(_OWORD *)(v9 + 8) = v40;
          v41 = *(_OWORD *)(a2 - 64);
          v42 = *(_OWORD *)(a2 - 48);
          v43 = *(_OWORD *)(a2 - 32);
          *(_OWORD *)(v9 + 88) = *(_OWORD *)(a2 - 16);
          *(_OWORD *)(v9 + 72) = v43;
          *(_OWORD *)(v9 + 56) = v42;
          *(_OWORD *)(v9 + 40) = v41;
          *(_QWORD *)(a2 - 104) = v35;
          *(_OWORD *)(a2 - 64) = *(_OWORD *)&v84[32];
          *(_OWORD *)(a2 - 48) = *(_OWORD *)&v84[48];
          *(_OWORD *)(a2 - 32) = *(_OWORD *)&v84[64];
          *(_OWORD *)(a2 - 16) = *(_OWORD *)&v84[80];
          *(_OWORD *)(a2 - 96) = *(_OWORD *)v84;
          *(_OWORD *)(a2 - 80) = *(_OWORD *)&v84[16];
        }
        return;
      case 3uLL:
        sub_22368D928(v9, v9 + 104, v8, a3);
        return;
      case 4uLL:
        sub_22368E318(v9, v9 + 104, v9 + 208, v8, a3);
        return;
      case 5uLL:
        sub_22368E510(v9, v9 + 104, v9 + 208, v9 + 312, v8, a3);
        return;
      default:
        if (v12 > 2495)
        {
          if (v10 == 1)
          {
            if (v9 != a2)
            {
              v61 = (v13 - 2) >> 1;
              v62 = v61 + 1;
              v63 = v9 + 104 * v61;
              do
              {
                sub_22368E794(v9, a3, v13, v63);
                v63 -= 104;
                --v62;
              }
              while (v62);
              v64 = v12 / 0x68uLL;
              do
              {
                sub_22368E96C(v9, a2, a3, v64);
                a2 -= 104;
              }
              while (v64-- > 2);
            }
            return;
          }
          v14 = v13 >> 1;
          v15 = (uint64_t *)(v9 + 104 * (v13 >> 1));
          if ((unint64_t)v12 < 0x3401)
          {
            sub_22368D928((uint64_t)v15, v9, v8, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_22368D928(v9, (uint64_t)v15, v8, a3);
            v16 = v9 + 104 * v14;
            sub_22368D928(v9 + 104, v16 - 104, a2 - 208, a3);
            sub_22368D928(v9 + 208, v9 + 104 + 104 * v14, a2 - 312, a3);
            sub_22368D928(v16 - 104, (uint64_t)v15, v9 + 104 + 104 * v14, a3);
            v17 = *(_QWORD *)v9;
            v18 = *(_OWORD *)(v9 + 24);
            *(_OWORD *)v84 = *(_OWORD *)(v9 + 8);
            *(_OWORD *)&v84[16] = v18;
            v19 = *(_OWORD *)(v9 + 40);
            v20 = *(_OWORD *)(v9 + 56);
            v21 = *(_OWORD *)(v9 + 88);
            *(_OWORD *)&v84[64] = *(_OWORD *)(v9 + 72);
            *(_OWORD *)&v84[80] = v21;
            *(_OWORD *)&v84[32] = v19;
            *(_OWORD *)&v84[48] = v20;
            *(_QWORD *)v9 = *v15;
            v22 = *(_OWORD *)(v16 + 24);
            *(_OWORD *)(v9 + 8) = *(_OWORD *)(v16 + 8);
            *(_OWORD *)(v9 + 24) = v22;
            v23 = *(_OWORD *)(v16 + 56);
            v24 = *(_OWORD *)(v16 + 72);
            v25 = *(_OWORD *)(v16 + 88);
            *(_OWORD *)(v9 + 40) = *(_OWORD *)(v16 + 40);
            *(_OWORD *)(v9 + 88) = v25;
            *(_OWORD *)(v9 + 72) = v24;
            *(_OWORD *)(v9 + 56) = v23;
            *v15 = v17;
            v26 = *(_OWORD *)v84;
            *(_OWORD *)(v16 + 24) = *(_OWORD *)&v84[16];
            *(_OWORD *)(v16 + 8) = v26;
            v27 = *(_OWORD *)&v84[32];
            v28 = *(_OWORD *)&v84[48];
            v29 = *(_OWORD *)&v84[64];
            *(_OWORD *)(v16 + 88) = *(_OWORD *)&v84[80];
            *(_OWORD *)(v16 + 72) = v29;
            *(_OWORD *)(v16 + 56) = v28;
            *(_OWORD *)(v16 + 40) = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((sub_22368D350(a3, v9 - 104, v9) & 1) == 0)
          {
            v9 = sub_22368DC50(v9, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v31 = sub_22368DE64((uint64_t *)v9, a2, a3);
          v32 = v30;
          if ((v33 & 1) == 0)
            goto LABEL_14;
          v34 = sub_22368E074(v9, v30, a3);
          v9 = v32 + 104;
          if (!sub_22368E074(v32 + 104, a2, a3))
          {
            v10 = v11 + 1;
            if (v34)
              continue;
LABEL_14:
            sub_22368CCE8(a1, v32, a3, -v11, a5 & 1, v31);
            v9 = v32 + 104;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v32;
          if (v34)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          if (v9 != a2)
          {
            v44 = v9 + 104;
            if (v9 + 104 != a2)
            {
              v45 = 0;
              v46 = (_OWORD *)v9;
              do
              {
                v52 = (_QWORD *)v44;
                if (sub_22368D350(a3, v44, (uint64_t)v46))
                {
                  *(_QWORD *)v84 = *v52;
                  v53 = v46[10];
                  *(_OWORD *)&v84[40] = v46[9];
                  *(_OWORD *)&v84[56] = v53;
                  v54 = v46[12];
                  *(_OWORD *)&v84[72] = v46[11];
                  *(_OWORD *)&v84[88] = v54;
                  v55 = v46[8];
                  v56 = v45;
                  *(_OWORD *)&v84[8] = v46[7];
                  *(_OWORD *)&v84[24] = v55;
                  do
                  {
                    v57 = v9 + v56;
                    *(_QWORD *)(v57 + 104) = *(_QWORD *)(v9 + v56);
                    v58 = *(_OWORD *)(v9 + v56 + 56);
                    *(_OWORD *)(v57 + 144) = *(_OWORD *)(v9 + v56 + 40);
                    *(_OWORD *)(v57 + 160) = v58;
                    v59 = *(_OWORD *)(v9 + v56 + 88);
                    *(_OWORD *)(v57 + 176) = *(_OWORD *)(v9 + v56 + 72);
                    *(_OWORD *)(v57 + 192) = v59;
                    v60 = *(_OWORD *)(v9 + v56 + 24);
                    *(_OWORD *)(v57 + 112) = *(_OWORD *)(v9 + v56 + 8);
                    *(_OWORD *)(v57 + 128) = v60;
                    if (!v56)
                    {
                      v47 = (_QWORD *)v9;
                      goto LABEL_30;
                    }
                    v56 -= 104;
                  }
                  while ((sub_22368D350(a3, (uint64_t)v84, v56 + v9) & 1) != 0);
                  v47 = (_QWORD *)(v9 + v56 + 104);
LABEL_30:
                  *v47 = *(_QWORD *)v84;
                  v48 = *(_OWORD *)&v84[8];
                  *(_OWORD *)(v57 + 24) = *(_OWORD *)&v84[24];
                  *(_OWORD *)(v57 + 8) = v48;
                  v49 = *(_OWORD *)&v84[40];
                  v50 = *(_OWORD *)&v84[56];
                  v51 = *(_OWORD *)&v84[72];
                  *(_OWORD *)(v57 + 88) = *(_OWORD *)&v84[88];
                  *(_OWORD *)(v57 + 72) = v51;
                  *(_OWORD *)(v57 + 56) = v50;
                  *(_OWORD *)(v57 + 40) = v49;
                }
                v44 = (uint64_t)(v52 + 13);
                v45 += 104;
                v46 = v52;
              }
              while (v52 + 13 != (_QWORD *)a2);
            }
          }
        }
        else if (v9 != a2)
        {
          v66 = v9 + 104;
          if (v9 + 104 != a2)
          {
            v67 = v9 - 104;
            do
            {
              v68 = (_QWORD *)v66;
              if (sub_22368D350(a3, v66, (uint64_t)a1))
              {
                *(_QWORD *)v84 = *v68;
                v69 = a1[10];
                *(_OWORD *)&v84[40] = a1[9];
                *(_OWORD *)&v84[56] = v69;
                v70 = a1[12];
                *(_OWORD *)&v84[72] = a1[11];
                *(_OWORD *)&v84[88] = v70;
                v71 = a1[7];
                v72 = a1[8];
                v73 = v67;
                *(_OWORD *)&v84[8] = v71;
                *(_OWORD *)&v84[24] = v72;
                do
                {
                  v74 = *(_OWORD *)(v73 + 160);
                  *(_OWORD *)(v73 + 248) = *(_OWORD *)(v73 + 144);
                  v75 = *(_OWORD *)(v73 + 176);
                  v76 = *(_OWORD *)(v73 + 192);
                  *(_OWORD *)(v73 + 264) = v74;
                  *(_OWORD *)(v73 + 280) = v75;
                  *(_OWORD *)(v73 + 296) = v76;
                  v77 = *(_OWORD *)(v73 + 128);
                  *(_OWORD *)(v73 + 216) = *(_OWORD *)(v73 + 112);
                  *(_QWORD *)(v73 + 208) = *(_QWORD *)(v73 + 104);
                  *(_OWORD *)(v73 + 232) = v77;
                  v78 = sub_22368D350(a3, (uint64_t)v84, v73);
                  v73 -= 104;
                }
                while ((v78 & 1) != 0);
                *(_QWORD *)(v73 + 208) = *(_QWORD *)v84;
                v79 = *(_OWORD *)&v84[8];
                *(_OWORD *)(v73 + 232) = *(_OWORD *)&v84[24];
                *(_OWORD *)(v73 + 216) = v79;
                v80 = *(_OWORD *)&v84[40];
                v81 = *(_OWORD *)&v84[56];
                v82 = *(_OWORD *)&v84[88];
                *(_OWORD *)(v73 + 280) = *(_OWORD *)&v84[72];
                *(_OWORD *)(v73 + 296) = v82;
                *(_OWORD *)(v73 + 264) = v81;
                *(_OWORD *)(v73 + 248) = v80;
              }
              v66 = (uint64_t)(v68 + 13);
              v67 += 104;
              a1 = v68;
            }
            while (v68 + 13 != (_QWORD *)a2);
          }
        }
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v59 = a2 - 4;
        v60 = *((_DWORD *)a2 - 4);
        if (v60 < *(_DWORD *)v8 || (v60 == *(_DWORD *)v8 ? (v61 = *(a2 - 1) < v8[3]) : (v61 = 0), v61))
        {
          v137 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v59;
          *(_OWORD *)v59 = v137;
        }
        return;
      case 3uLL:
        sub_2236B6494(v8, v8 + 4, a2 - 4);
        return;
      case 4uLL:
        v62 = (__int128 *)(v8 + 4);
        v63 = (__int128 *)(v8 + 8);
        sub_2236B6494(v8, v8 + 4, v8 + 8);
        v64 = a2 - 4;
        v65 = *((_DWORD *)a2 - 4);
        v66 = *((_DWORD *)v8 + 8);
        if (v65 < v66 || (v65 == v66 ? (v67 = *(a2 - 1) < v8[11]) : (v67 = 0), v67))
        {
          v68 = *v63;
          *v63 = *(_OWORD *)v64;
          *(_OWORD *)v64 = v68;
          v69 = *((_DWORD *)v8 + 8);
          v70 = *((_DWORD *)v8 + 4);
          if (v69 < v70 || v69 == v70 && v8[11] < v8[7])
          {
            v71 = *v62;
            *v62 = *v63;
            *v63 = v71;
            v72 = *((_DWORD *)v8 + 4);
            if (v72 < *(_DWORD *)v8 || v72 == *(_DWORD *)v8 && v8[7] < v8[3])
            {
              v138 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *v62;
              *v62 = v138;
            }
          }
        }
        return;
      case 5uLL:
        sub_2236B62E8((uint64_t)v8, v8 + 4, v8 + 8, (uint64_t)(v8 + 12), (uint64_t)(a2 - 4));
        return;
      default:
        if (v9 > 383)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v88 = (v10 - 2) >> 1;
              v89 = v88;
              do
              {
                v90 = v89;
                if (v88 >= v89)
                {
                  v91 = (2 * v89) | 1;
                  v92 = &v8[4 * v91];
                  if (2 * v90 + 2 < (uint64_t)v10)
                  {
                    v93 = *((_DWORD *)v92 + 4);
                    if (*(_DWORD *)v92 < v93 || (*(_DWORD *)v92 == v93 ? (v94 = v92[3] < v92[7]) : (v94 = 0), v94))
                    {
                      v92 += 4;
                      v91 = 2 * v90 + 2;
                    }
                  }
                  v95 = &v8[4 * v90];
                  v96 = *(_DWORD *)v95;
                  if (*(_DWORD *)v92 >= *(_DWORD *)v95)
                  {
                    v97 = v95[3];
                    if (*(_DWORD *)v92 != v96 || v92[3] >= v97)
                    {
                      v99 = *(_QWORD *)(v95 + 1);
                      do
                      {
                        v100 = v95;
                        v95 = v92;
                        *(_OWORD *)v100 = *(_OWORD *)v92;
                        if (v88 < v91)
                          break;
                        v101 = 2 * v91;
                        v91 = (2 * v91) | 1;
                        v92 = &v8[4 * v91];
                        v102 = v101 + 2;
                        if (v102 < (uint64_t)v10)
                        {
                          v103 = *((_DWORD *)v92 + 4);
                          if (*(_DWORD *)v92 < v103
                            || (*(_DWORD *)v92 == v103 ? (v104 = v92[3] < v92[7]) : (v104 = 0), v104))
                          {
                            v92 += 4;
                            v91 = v102;
                          }
                        }
                        if (*(_DWORD *)v92 < v96)
                          break;
                      }
                      while (*(_DWORD *)v92 != v96 || v92[3] >= v97);
                      *(_DWORD *)v95 = v96;
                      *(_QWORD *)(v95 + 1) = v99;
                      v95[3] = v97;
                    }
                  }
                }
                v89 = v90 - 1;
              }
              while (v90);
              v106 = (unint64_t)v9 >> 4;
              do
              {
                v108 = 0;
                v139 = *(_OWORD *)v8;
                v109 = v8;
                do
                {
                  v110 = v109;
                  v109 += 4 * v108 + 4;
                  v111 = 2 * v108;
                  v108 = (2 * v108) | 1;
                  v112 = v111 + 2;
                  if (v112 < v106)
                  {
                    v113 = *((_DWORD *)v109 + 4);
                    if (*(_DWORD *)v109 < v113
                      || (*(_DWORD *)v109 == v113 ? (v114 = v109[3] < v109[7]) : (v114 = 0), v114))
                    {
                      v109 += 4;
                      v108 = v112;
                    }
                  }
                  *(_OWORD *)v110 = *(_OWORD *)v109;
                }
                while (v108 <= (uint64_t)((unint64_t)(v106 - 2) >> 1));
                a2 -= 4;
                if (v109 == a2)
                {
                  *(_OWORD *)v109 = v139;
                }
                else
                {
                  *(_OWORD *)v109 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v139;
                  v115 = (char *)v109 - (char *)v8 + 16;
                  if (v115 >= 17)
                  {
                    v116 = ((unint64_t)v115 >> 4) - 2;
                    v117 = v116 >> 1;
                    v118 = &v8[4 * (v116 >> 1)];
                    v119 = *(_DWORD *)v109;
                    v120 = v109[3];
                    if (*(_DWORD *)v118 < *(_DWORD *)v109
                      || (*(_DWORD *)v118 == v119 ? (v121 = v118[3] < v120) : (v121 = 0), v121))
                    {
                      v122 = *(_QWORD *)(v109 + 1);
                      *(_OWORD *)v109 = *(_OWORD *)v118;
                      if (v116 >= 2)
                      {
                        while (1)
                        {
                          v123 = v117 - 1;
                          v117 = (v117 - 1) >> 1;
                          v124 = &v8[4 * v117];
                          if (*(_DWORD *)v124 >= v119 && (*(_DWORD *)v124 != v119 || v124[3] >= v120))
                            break;
                          *(_OWORD *)v118 = *(_OWORD *)v124;
                          v118 = &v8[4 * v117];
                          if (v123 <= 1)
                            goto LABEL_219;
                        }
                      }
                      v124 = v118;
LABEL_219:
                      *(_DWORD *)v124 = v119;
                      *(_QWORD *)(v124 + 1) = v122;
                      v124[3] = v120;
                    }
                  }
                }
              }
              while (v106-- > 2);
            }
            return;
          }
          v11 = v10 >> 1;
          v12 = &v8[4 * (v10 >> 1)];
          if ((unint64_t)v9 >= 0x801)
          {
            sub_2236B6494(a1, &a1[4 * (v10 >> 1)], a2 - 4);
            v13 = 4 * v11;
            v14 = &a1[4 * v11 - 4];
            sub_2236B6494(a1 + 4, v14, a2 - 8);
            sub_2236B6494(a1 + 8, &a1[v13 + 4], a2 - 12);
            sub_2236B6494(v14, v12, &a1[v13 + 4]);
            v134 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v12;
            *(_OWORD *)v12 = v134;
            --a3;
            v15 = *a1;
            if ((a4 & 1) != 0)
              goto LABEL_23;
LABEL_7:
            v16 = *((_DWORD *)a1 - 4);
            v17 = a1[3];
            if (v16 < SLODWORD(v15) || v16 == LODWORD(v15) && *(a1 - 1) < v17)
              goto LABEL_24;
            v18 = *((_DWORD *)a2 - 4);
            if (SLODWORD(v15) < v18 || LODWORD(v15) == v18 && v17 < *(a2 - 1))
            {
              v19 = a1 + 4;
              do
              {
                v8 = v19;
                v20 = *v19;
                if (SLODWORD(v15) < *(_DWORD *)v19)
                  break;
                v21 = v19[3];
                v19 += 4;
              }
              while (LODWORD(v15) != LODWORD(v20) || v17 >= v21);
            }
            else
            {
              v55 = a1 + 4;
              do
              {
                v8 = v55;
                if (v55 >= a2)
                  break;
                v56 = *v55;
                if (SLODWORD(v15) < *(_DWORD *)v55)
                  break;
                v57 = v55[3];
                v55 += 4;
              }
              while (LODWORD(v15) != LODWORD(v56) || v17 >= v57);
            }
            i = a2;
            if (v8 < a2)
            {
              for (i = a2 - 4; SLODWORD(v15) < v18 || LODWORD(v15) == v18 && v17 < i[3]; i -= 4)
              {
                v45 = *((_DWORD *)i - 4);
                v18 = v45;
              }
            }
            v46 = *(_QWORD *)(a1 + 1);
            while (v8 < i)
            {
              v136 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *(_OWORD *)i;
              *(_OWORD *)i = v136;
              v47 = v8 + 4;
              do
              {
                v8 = v47;
                v48 = *v47;
                if (SLODWORD(v15) < *(_DWORD *)v47)
                  break;
                v49 = v47[3];
                v47 += 4;
              }
              while (LODWORD(v15) != LODWORD(v48) || v17 >= v49);
              do
              {
                do
                {
                  v51 = *((_DWORD *)i - 4);
                  i -= 4;
                  v52 = LODWORD(v15) == v51;
                }
                while (SLODWORD(v15) < v51);
              }
              while (v52 && v17 < i[3]);
            }
            if (v8 - 4 != a1)
              *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
            a4 = 0;
            *(v8 - 4) = v15;
            *(_QWORD *)(v8 - 3) = v46;
            *(v8 - 1) = v17;
            continue;
          }
          sub_2236B6494(&a1[4 * (v10 >> 1)], a1, a2 - 4);
          --a3;
          v15 = *a1;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_23:
          v17 = a1[3];
LABEL_24:
          v24 = 0;
          v25 = *(_QWORD *)(a1 + 1);
          while (1)
          {
            v26 = LODWORD(a1[v24 + 4]);
            if (v26 >= SLODWORD(v15) && (v26 != LODWORD(v15) || a1[v24 + 7] >= v17))
              break;
            v24 += 4;
          }
          v28 = (unint64_t)&a1[v24 + 4];
          v29 = a2 - 4;
          if (v24 * 4)
          {
            do
            {
              v30 = (unint64_t)v29;
              v31 = *(_DWORD *)v29;
              if (*(_DWORD *)v29 < SLODWORD(v15))
                break;
              v32 = v29[3];
              v29 -= 4;
            }
            while (v31 != LODWORD(v15) || v32 >= v17);
LABEL_47:
            v8 = (float *)v28;
            if (v28 < v30)
            {
              v37 = (float *)v30;
              do
              {
                v135 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *(_OWORD *)v37;
                *(_OWORD *)v37 = v135;
                do
                {
                  do
                  {
                    v38 = *((_DWORD *)v8 + 4);
                    v8 += 4;
                    v39 = v38 == LODWORD(v15);
                  }
                  while (v38 < SLODWORD(v15));
                }
                while (v39 && v8[3] < v17);
                v41 = v37 - 4;
                do
                {
                  v37 = v41;
                  v42 = *(_DWORD *)v41;
                  if (*(_DWORD *)v41 < SLODWORD(v15))
                    break;
                  v43 = v41[3];
                  v41 -= 4;
                }
                while (v42 != LODWORD(v15) || v43 >= v17);
              }
              while (v8 < v37);
            }
          }
          else
          {
            v34 = a2 - 4;
            while (1)
            {
              v30 = (unint64_t)v34;
              v35 = (unint64_t)(v34 + 4);
              if (v28 >= v35)
                break;
              if (*(_DWORD *)v30 >= SLODWORD(v15))
              {
                v34 = (float *)(v30 - 16);
                if (*(_DWORD *)v30 != LODWORD(v15) || *(float *)(v30 + 12) >= v17)
                  continue;
              }
              goto LABEL_47;
            }
            v30 = v35;
            v8 = (float *)v28;
          }
          if (v8 - 4 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          *(v8 - 4) = v15;
          *(_QWORD *)(v8 - 3) = v25;
          *(v8 - 1) = v17;
          if (v28 < v30)
            goto LABEL_89;
          v54 = sub_2236B6590(a1, v8 - 4);
          if (!sub_2236B6590(v8, a2))
          {
            if (v54)
              continue;
LABEL_89:
            sub_2236B598C(a1, v8 - 4, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v8 - 4;
          if (v54)
            return;
          goto LABEL_1;
        }
        v73 = v8 + 4;
        v75 = v8 == a2 || v73 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v75)
          {
            v76 = 0;
            v77 = v8;
            do
            {
              v79 = v73;
              v80 = *((_DWORD *)v77 + 4);
              v81 = v77[7];
              if (v80 < *(_DWORD *)v77 || (v80 == *(_DWORD *)v77 ? (v82 = v81 < v77[3]) : (v82 = 0), v82))
              {
                v83 = *(_QWORD *)(v77 + 5);
                *(_OWORD *)v79 = *(_OWORD *)v77;
                v78 = v8;
                if (v77 != v8)
                {
                  v84 = v76;
                  while (1)
                  {
                    v85 = (float *)((char *)v8 + v84);
                    v86 = *(_DWORD *)((char *)v8 + v84 - 16);
                    if (v80 >= v86 && (v80 != v86 || v81 >= *(v85 - 1)))
                      break;
                    *(_OWORD *)v85 = *(_OWORD *)((char *)v8 + v84 - 16);
                    v84 -= 16;
                    if (!v84)
                    {
                      v78 = v8;
                      goto LABEL_137;
                    }
                  }
                  v78 = (float *)((char *)v8 + v84);
                }
LABEL_137:
                *(_DWORD *)v78 = v80;
                *(_QWORD *)(v78 + 1) = v83;
                v78[3] = v81;
              }
              v73 = v79 + 4;
              v76 += 16;
              v77 = v79;
            }
            while (v79 + 4 != a2);
          }
        }
        else if (!v75)
        {
          do
          {
            v126 = v73;
            v127 = *((_DWORD *)a1 + 4);
            v128 = a1[7];
            if (v127 < *(_DWORD *)a1 || (v127 == *(_DWORD *)a1 ? (v129 = v128 < a1[3]) : (v129 = 0), v129))
            {
              v130 = *(_QWORD *)(a1 + 5);
              for (j = v126; ; j -= 4)
              {
                *(_OWORD *)j = *((_OWORD *)j - 1);
                v132 = *((_DWORD *)j - 8);
                if (v127 >= v132 && (v127 != v132 || v128 >= *(j - 5)))
                  break;
              }
              *((_DWORD *)j - 4) = v127;
              *(_QWORD *)(j - 3) = v130;
              *(j - 1) = v128;
            }
            v73 = v126 + 4;
            a1 = v126;
          }
          while (v126 + 4 != a2);
        }
        return;
    }
  }
}

  v6 = a2;
  v7 = a1;
  v467 = (_QWORD *)(a2 - 80);
  while (2)
  {
    v8 = v6 - v7;
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - v7) >> 4);
    a1 = v7;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v198 = *(_DWORD *)(a2 - 40);
        v199 = ((v198 >> 3) & 1) == 0;
        if ((v198 & 0x10) != 0)
          v199 = 0;
        if ((v198 & 2) != 0)
          v200 = 2;
        else
          v200 = v199;
        v202 = (__int128 *)(a2 - 56);
        v201 = *(_QWORD *)(a2 - 56);
        v203 = *(_DWORD *)(v7 + 40);
        v204 = ((v203 >> 3) & 1) == 0;
        if ((v203 & 0x10) != 0)
          v204 = 0;
        v205 = (__int128 *)(v7 + 24);
        v206 = *(_QWORD *)(v7 + 24);
        if ((*(_DWORD *)(v7 + 40) & 2) != 0)
          v204 = 2;
        v208 = *(_QWORD *)v7;
        v207 = *(_QWORD *)(v7 + 8);
        v209 = v200 == v204;
        if (v200 < v204)
          v210 = -1;
        else
          v210 = 1;
        if (!v209)
          goto LABEL_423;
        if (v201 < v206)
          return result;
        if (v206 < v201)
          goto LABEL_424;
        v211 = (uint64_t)(*(_QWORD *)(a2 - 72) - *(_QWORD *)(a2 - 80)) >> 5;
        v212 = (v207 - v208) >> 5;
        v213 = v211 == v212;
        if (v211 < v212)
          v210 = -1;
        else
          v210 = 1;
        if (!v213
          || ((LODWORD(result) = *(_DWORD *)(a2 - 8), v214 = *(float *)(v7 + 72), *(float *)&result != v214)
            ? (v215 = -127)
            : (v215 = 0),
              *(float *)&result > v214 ? (v210 = 1) : (v210 = v215),
              *(float *)&result >= v214))
        {
LABEL_423:
          if (v210 >= 1)
          {
LABEL_424:
            v216 = *(_QWORD *)(v7 + 16);
            *(_QWORD *)v7 = 0;
            *(_QWORD *)(v7 + 8) = 0;
            *(_QWORD *)(v7 + 16) = 0;
            v489 = *v205;
            v497 = *(_OWORD *)(v7 + 40);
            v502 = *(_OWORD *)(v7 + 56);
            v507 = *(_DWORD *)(v7 + 72);
            *(_OWORD *)v7 = *(_OWORD *)(a2 - 80);
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 - 64);
            *v467 = 0;
            *(_QWORD *)(a2 - 72) = 0;
            *(_QWORD *)(a2 - 64) = 0;
            v217 = *v202;
            v218 = *(_OWORD *)(a2 - 40);
            v219 = *(_OWORD *)(a2 - 24);
            *(_DWORD *)(v7 + 72) = *(_DWORD *)(a2 - 8);
            *(_OWORD *)(v7 + 40) = v218;
            *(_OWORD *)(v7 + 56) = v219;
            *v205 = v217;
            v220 = *(void **)(a2 - 80);
            if (v220)
            {
              *(_QWORD *)(a2 - 72) = v220;
              operator delete(v220);
            }
            *(_QWORD *)(a2 - 80) = v208;
            *(_QWORD *)(a2 - 72) = v207;
            *(_QWORD *)(a2 - 64) = v216;
            result = *(double *)&v489;
            *(_DWORD *)(a2 - 8) = v507;
            *(_OWORD *)(a2 - 40) = v497;
            *(_OWORD *)(a2 - 24) = v502;
            *v202 = v489;
          }
        }
        return result;
      case 3uLL:
        *(_QWORD *)&result = sub_2236C77A0((uint64_t *)v7, v7 + 80, (uint64_t)v467).n128_u64[0];
        return result;
      case 4uLL:
        *(_QWORD *)&result = sub_2236C8294(v7, v7 + 80, v7 + 160, (uint64_t)v467).n128_u64[0];
        return result;
      case 5uLL:
        *(_QWORD *)&result = sub_2236C720C(v7, v7 + 80, v7 + 160, v7 + 240, (uint64_t)v467).n128_u64[0];
        return result;
      default:
        v10 = v7;
        if (v8 <= 1919)
        {
          v221 = v7 + 80;
          v223 = v7 == v6 || v221 == v6;
          if ((a4 & 1) != 0)
          {
            if (!v223)
            {
              v224 = 0;
              v225 = v7;
              while (1)
              {
                v226 = v225;
                v225 = v221;
                v227 = *(_DWORD *)(v221 + 40);
                v228 = ((v227 >> 3) & 1) == 0;
                if ((v227 & 0x10) != 0)
                  v228 = 0;
                if ((v227 & 2) != 0)
                  v229 = 2;
                else
                  v229 = v228;
                v230 = *(_DWORD *)(v226 + 40);
                v231 = ((v230 >> 3) & 1) == 0;
                if ((v230 & 0x10) != 0)
                  v231 = 0;
                if ((v230 & 2) != 0)
                  v232 = 2;
                else
                  v232 = v231;
                v233 = v229 == v232;
                if (v229 < v232)
                  v234 = -1;
                else
                  v234 = 1;
                if (!v233)
                  goto LABEL_469;
                v235 = *(_QWORD *)(v225 + 24);
                v236 = *(_QWORD *)(v226 + 24);
                if (v235 >= v236)
                {
                  if (v236 < v235)
                    goto LABEL_470;
                  v237 = (uint64_t)(*(_QWORD *)(v225 + 8) - *(_QWORD *)v225) >> 5;
                  v238 = (uint64_t)(*(_QWORD *)(v226 + 8) - *(_QWORD *)v226) >> 5;
                  v239 = v237 == v238;
                  v234 = v237 < v238 ? -1 : 1;
                  if (!v239)
                    goto LABEL_469;
                  LODWORD(result) = *(_DWORD *)(v225 + 72);
                  v240 = *(float *)(v226 + 72);
                  if (*(float *)&result == v240)
                    v234 = 0;
                  else
                    v234 = -127;
                  if (*(float *)&result > v240)
                    v234 = 1;
                  if (*(float *)&result >= v240)
                  {
LABEL_469:
                    if (v234 >= 1)
                    {
LABEL_470:
                      v241 = *(_QWORD *)v225;
                      v242 = *(_OWORD *)(v226 + 88);
                      *(_QWORD *)(v225 + 8) = 0;
                      *(_QWORD *)(v225 + 16) = 0;
                      *(_QWORD *)v225 = 0;
                      v243 = *(_QWORD *)(v226 + 104);
                      v460 = *(_QWORD *)(v226 + 112);
                      v244 = *(_DWORD *)(v226 + 120);
                      *(_OWORD *)v490 = *(_OWORD *)(v226 + 124);
                      *(_OWORD *)&v490[12] = *(_OWORD *)(v226 + 136);
                      v245 = *(float *)(v226 + 152);
                      v246 = ((v244 >> 3) & 1) == 0;
                      v465 = v242;
                      v468 = v241;
                      v478 = ((uint64_t)v242 - v241) >> 5;
                      if ((v244 & 0x10) != 0)
                        v246 = 0;
                      v456 = *(_DWORD *)(v226 + 120);
                      if ((v244 & 2) != 0)
                        v247 = 2;
                      else
                        v247 = v246;
                      v248 = v224;
                      while (1)
                      {
                        v251 = v226;
                        v252 = v248;
                        v253 = a1 + v248;
                        v254 = *(void **)(a1 + v248 + 80);
                        if (v254)
                        {
                          *(_QWORD *)(v253 + 88) = v254;
                          operator delete(v254);
                          *(_QWORD *)(v253 + 88) = 0;
                          *(_QWORD *)(v253 + 96) = 0;
                        }
                        *(_OWORD *)(v253 + 80) = *(_OWORD *)v253;
                        *(_QWORD *)(v253 + 96) = *(_QWORD *)(v253 + 16);
                        *(_QWORD *)(v253 + 8) = 0;
                        *(_QWORD *)(v253 + 16) = 0;
                        *(_QWORD *)v253 = 0;
                        *(_OWORD *)(v253 + 104) = *(_OWORD *)(v253 + 24);
                        *(_OWORD *)(v253 + 120) = *(_OWORD *)(v253 + 40);
                        *(_OWORD *)(v253 + 136) = *(_OWORD *)(v253 + 56);
                        *(_DWORD *)(v253 + 152) = *(_DWORD *)(v253 + 72);
                        if (!v252)
                          break;
                        v255 = a1 + v252;
                        v256 = *(_DWORD *)(a1 + v252 - 40);
                        v257 = ((v256 >> 3) & 1) == 0;
                        if ((v256 & 0x10) != 0)
                          v257 = 0;
                        if ((v256 & 2) != 0)
                          v258 = 2;
                        else
                          v258 = v257;
                        v259 = v247 == v258;
                        if (v247 < v258)
                          v249 = -1;
                        else
                          v249 = 1;
                        if (v259)
                        {
                          v260 = *(_QWORD *)(v255 - 56);
                          if (v243 < v260)
                          {
                            v251 = a1 + v252;
                            v265 = *(void **)(a1 + v252);
                            if (!v265)
                            {
LABEL_439:
                              *(_QWORD *)v251 = v468;
                              *(_OWORD *)(v251 + 8) = v465;
                              *(_QWORD *)(a1 + v252 + 24) = v243;
                              *(_QWORD *)(v251 + 32) = v460;
                              *(_DWORD *)(v251 + 40) = v456;
                              *(_OWORD *)(v251 + 44) = *(_OWORD *)v490;
                              result = *(double *)&v490[12];
                              *(_OWORD *)(v251 + 56) = *(_OWORD *)&v490[12];
                              *(float *)(v251 + 72) = v245;
                              goto LABEL_440;
                            }
LABEL_508:
                            *(_QWORD *)(v251 + 8) = v265;
                            operator delete(v265);
                            goto LABEL_439;
                          }
                          if (v260 < v243)
                          {
                            v249 = 1;
                          }
                          else
                          {
                            v261 = (uint64_t)(*(_QWORD *)(v255 - 72) - *(_QWORD *)(v255 - 80)) >> 5;
                            v262 = v478 == v261;
                            if (v478 < v261)
                              v249 = -1;
                            else
                              v249 = 1;
                            if (v262)
                            {
                              v263 = *(float *)(v255 - 8);
                              v264 = v245 == v263 ? 0 : -127;
                              v249 = v245 > v263 ? 1 : v264;
                              if (v245 < v263)
                                goto LABEL_507;
                            }
                          }
                        }
                        v226 = v251 - 80;
                        v250 = v249;
                        v248 = v252 - 80;
                        if (v250 <= 0)
                          goto LABEL_507;
                      }
                      v251 = a1;
LABEL_507:
                      v265 = *(void **)v251;
                      if (!*(_QWORD *)v251)
                        goto LABEL_439;
                      goto LABEL_508;
                    }
                  }
                }
LABEL_440:
                v221 = v225 + 80;
                v224 += 80;
                if (v225 + 80 == a2)
                  return result;
              }
            }
          }
          else if (!v223)
          {
            while (1)
            {
              v410 = a1;
              v409 = v221;
              v411 = *(_DWORD *)(v221 + 40);
              v412 = ((v411 >> 3) & 1) == 0;
              if ((v411 & 0x10) != 0)
                v412 = 0;
              if ((v411 & 2) != 0)
                v413 = 2;
              else
                v413 = v412;
              v414 = *(_DWORD *)(a1 + 40);
              v415 = ((v414 >> 3) & 1) == 0;
              if ((v414 & 0x10) != 0)
                v415 = 0;
              v416 = (v414 & 2) != 0 ? 2 : v415;
              v417 = v413 == v416;
              v418 = v413 < v416 ? -1 : 1;
              a1 = v409;
              if (!v417)
                break;
              v419 = *(_QWORD *)(v409 + 24);
              v420 = *(_QWORD *)(v410 + 24);
              if (v419 < v420)
                goto LABEL_782;
              if (v420 < v419)
                goto LABEL_812;
              v421 = (uint64_t)(*(_QWORD *)(v409 + 8) - *(_QWORD *)v409) >> 5;
              v422 = (uint64_t)(*(_QWORD *)(v410 + 8) - *(_QWORD *)v410) >> 5;
              v423 = v421 == v422;
              if (v421 < v422)
                v418 = -1;
              else
                v418 = 1;
              if (!v423)
                break;
              LODWORD(result) = *(_DWORD *)(v409 + 72);
              v424 = *(float *)(v410 + 72);
              if (*(float *)&result == v424)
                v418 = 0;
              else
                v418 = -127;
              if (*(float *)&result > v424)
                v418 = 1;
              if (*(float *)&result >= v424)
                break;
LABEL_782:
              v221 = v409 + 80;
              if (v409 + 80 == a2)
                return result;
            }
            if (v418 < 1)
              goto LABEL_782;
LABEL_812:
            v425 = *(_QWORD *)v409;
            v426 = *(_OWORD *)(v410 + 88);
            *(_QWORD *)(v409 + 8) = 0;
            *(_QWORD *)(v409 + 16) = 0;
            *(_QWORD *)v409 = 0;
            v427 = *(_DWORD *)(v410 + 120);
            *(_OWORD *)v493 = *(_OWORD *)(v410 + 124);
            *(_OWORD *)&v493[12] = *(_OWORD *)(v410 + 136);
            v428 = *(float *)(v410 + 152);
            v429 = ((v427 >> 3) & 1) == 0;
            v482 = v426;
            v430 = ((uint64_t)v426 - v425) >> 5;
            if ((v427 & 0x10) != 0)
              v429 = 0;
            if ((v427 & 2) != 0)
              v431 = 2;
            else
              v431 = v429;
            v472 = *(_OWORD *)(v410 + 104);
            v432 = *(_QWORD *)(v410 + 104);
            while (1)
            {
              v434 = v410;
              v435 = *(void **)(v410 + 80);
              if (v435)
              {
                *(_QWORD *)(v410 + 88) = v435;
                operator delete(v435);
                *(_QWORD *)(v434 + 88) = 0;
                *(_QWORD *)(v434 + 96) = 0;
              }
              *(_OWORD *)(v434 + 80) = *(_OWORD *)v434;
              *(_QWORD *)(v434 + 96) = *(_QWORD *)(v434 + 16);
              *(_QWORD *)(v434 + 8) = 0;
              *(_QWORD *)(v434 + 16) = 0;
              *(_QWORD *)v434 = 0;
              *(_OWORD *)(v434 + 104) = *(_OWORD *)(v434 + 24);
              *(_OWORD *)(v434 + 120) = *(_OWORD *)(v434 + 40);
              *(_OWORD *)(v434 + 136) = *(_OWORD *)(v434 + 56);
              *(_DWORD *)(v434 + 152) = *(_DWORD *)(v434 + 72);
              v436 = *(_DWORD *)(v434 - 40);
              v437 = ((v436 >> 3) & 1) == 0;
              if ((v436 & 0x10) != 0)
                v437 = 0;
              if ((v436 & 2) != 0)
                v438 = 2;
              else
                v438 = v437;
              if (v431 < v438)
                v433 = -1;
              else
                v433 = 1;
              if (v431 == v438)
              {
                v439 = *(_QWORD *)(v434 - 56);
                if (v432 < v439)
                  goto LABEL_844;
                if (v439 < v432)
                {
                  v433 = 1;
                }
                else
                {
                  v440 = (uint64_t)(*(_QWORD *)(v434 - 72) - *(_QWORD *)(v434 - 80)) >> 5;
                  if (v430 < v440)
                    v433 = -1;
                  else
                    v433 = 1;
                  if (v430 == v440)
                  {
                    v441 = *(float *)(v434 - 8);
                    v442 = v428 == v441 ? 0 : -127;
                    v433 = v428 > v441 ? 1 : v442;
                    if (v428 < v441)
                    {
LABEL_844:
                      v443 = *(void **)v434;
                      if (*(_QWORD *)v434)
                      {
                        *(_QWORD *)(v434 + 8) = v443;
                        operator delete(v443);
                      }
                      *(_QWORD *)v434 = v425;
                      *(_OWORD *)(v434 + 8) = v482;
                      *(_OWORD *)(v434 + 24) = v472;
                      *(_DWORD *)(v434 + 40) = v427;
                      result = *(double *)v493;
                      *(_OWORD *)(v434 + 56) = *(_OWORD *)&v493[12];
                      *(_OWORD *)(v434 + 44) = *(_OWORD *)v493;
                      *(float *)(v434 + 72) = v428;
                      v409 = a1;
                      goto LABEL_782;
                    }
                  }
                }
              }
              v410 = v434 - 80;
              if (v433 <= 0)
                goto LABEL_844;
            }
          }
          return result;
        }
        if (a3)
        {
          v11 = v7 + 80 * (v9 >> 1);
          if ((unint64_t)v8 >= 0x2801)
          {
            sub_2236C77A0((uint64_t *)v10, v10 + 80 * (v9 >> 1), (uint64_t)v467);
            v12 = (uint64_t *)(v10 + 80);
            v13 = 80 * (v9 >> 1);
            v14 = v10 + v13;
            v15 = v10 + v13 - 80;
            sub_2236C77A0(v12, v15, a2 - 160);
            v16 = (uint64_t)&v12[(unint64_t)v13 / 8];
            sub_2236C77A0((uint64_t *)(a1 + 160), v16, a2 - 240);
            v17 = (uint64_t *)v15;
            v10 = a1;
            sub_2236C77A0(v17, v11, v16);
            v18 = *(_QWORD *)(a1 + 16);
            v19 = *(_OWORD *)a1;
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = 0;
            v504 = *(_DWORD *)(a1 + 72);
            v494 = *(_OWORD *)(a1 + 40);
            v499 = *(_OWORD *)(a1 + 56);
            v486 = *(_OWORD *)(a1 + 24);
            *(_OWORD *)a1 = *(_OWORD *)v11;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v11 + 16);
            v20 = *(_OWORD *)(v14 + 56);
            v21 = *(_DWORD *)(v14 + 72);
            v22 = *(_OWORD *)(v14 + 40);
            *(_OWORD *)(a1 + 24) = *(_OWORD *)(v14 + 24);
            *(_OWORD *)(a1 + 40) = v22;
            *(_DWORD *)(a1 + 72) = v21;
            *(_OWORD *)(a1 + 56) = v20;
            *(_OWORD *)v11 = v19;
            *(_QWORD *)(v11 + 16) = v18;
            *(_DWORD *)(v14 + 72) = v504;
            *(_OWORD *)(v14 + 56) = v499;
            *(_OWORD *)(v14 + 40) = v494;
            *(_OWORD *)(v14 + 24) = v486;
            v459 = a3 - 1;
            if ((a4 & 1) != 0)
              goto LABEL_12;
LABEL_7:
            v23 = *(_DWORD *)(v10 - 40);
            if ((v23 & 2) != 0)
            {
              v24 = 2;
              v25 = *(_DWORD *)(v10 + 40);
              if ((v25 & 2) == 0)
                goto LABEL_14;
            }
            else if ((v23 & 0x10) != 0)
            {
              v24 = 0;
              v25 = *(_DWORD *)(v10 + 40);
              if ((v25 & 2) == 0)
              {
LABEL_14:
                v32 = (v25 & 0x10) == 0 && ((v25 >> 3) & 1) == 0;
                goto LABEL_19;
              }
            }
            else
            {
              v24 = ((v23 >> 3) & 1) == 0;
              v25 = *(_DWORD *)(v10 + 40);
              if ((v25 & 2) == 0)
                goto LABEL_14;
            }
            v32 = 2;
LABEL_19:
            v30 = v25 & 2;
            v27 = *(_QWORD *)v10;
            v26 = *(_QWORD *)(v10 + 8);
            v31 = (v26 - *(_QWORD *)v10) >> 5;
            v28 = *(_QWORD *)(v10 + 24);
            v29 = *(float *)(v10 + 72);
            v33 = v24 == v32;
            if (v24 < v32)
              v34 = -1;
            else
              v34 = 1;
            if (!v33)
              goto LABEL_37;
            v35 = *(_QWORD *)(v10 - 56);
            if (v35 >= v28)
            {
              if (v28 < v35)
                goto LABEL_38;
              v36 = (uint64_t)(*(_QWORD *)(v10 - 72) - *(_QWORD *)(v10 - 80)) >> 5;
              v37 = v36 == v31;
              v34 = v36 < v31 ? -1 : 1;
              if (!v37)
                goto LABEL_37;
              v38 = *(float *)(v10 - 8);
              if (v38 == v29)
                v34 = 0;
              else
                v34 = -127;
              if (v38 > v29)
                v34 = 1;
              if (v38 >= v29)
              {
LABEL_37:
                if (v34 > 0)
                  goto LABEL_38;
              }
            }
            v115 = *(_QWORD *)(v10 + 16);
            *(_QWORD *)v10 = 0;
            *(_QWORD *)(v10 + 8) = 0;
            *(_QWORD *)(v10 + 16) = 0;
            *(_OWORD *)v484 = *(_OWORD *)(v10 + 44);
            *(_OWORD *)&v484[12] = *(_OWORD *)(v10 + 56);
            v116 = ((v25 >> 3) & 1) == 0;
            if ((v25 & 2) != 0)
            {
              v117 = 2;
              v118 = *(_DWORD *)(v6 - 40);
              if ((v118 & 2) != 0)
                goto LABEL_202;
            }
            else if ((v25 & 0x10) != 0)
            {
              v117 = 0;
              v118 = *(_DWORD *)(v6 - 40);
              if ((v118 & 2) != 0)
              {
LABEL_202:
                v119 = 2;
                goto LABEL_204;
              }
            }
            else
            {
              v117 = ((v25 >> 3) & 1) == 0;
              v118 = *(_DWORD *)(v6 - 40);
              if ((v118 & 2) != 0)
                goto LABEL_202;
            }
            v119 = (v118 & 0x10) == 0 && ((v118 >> 3) & 1) == 0;
LABEL_204:
            v120 = v117 == v119;
            if (v117 < v119)
              v121 = -1;
            else
              v121 = 1;
            v464 = v25;
            v451 = v27;
            v455 = v26;
            v475 = v115;
            v449 = *(_QWORD *)(v10 + 32);
            if (!v120)
              goto LABEL_222;
            v122 = *(_QWORD *)(v6 - 56);
            if (v28 >= v122)
            {
              if (v122 < v28)
                goto LABEL_223;
              v123 = (uint64_t)(*(_QWORD *)(v6 - 72) - *(_QWORD *)(v6 - 80)) >> 5;
              v124 = v31 == v123;
              v121 = v31 < v123 ? -1 : 1;
              if (!v124)
                goto LABEL_222;
              v125 = *(float *)(v6 - 8);
              if (v29 == v125)
                v121 = 0;
              else
                v121 = -127;
              if (v29 > v125)
                v121 = 1;
              if (v29 >= v125)
              {
LABEL_222:
                if (v121 > 0)
                {
LABEL_223:
                  v126 = (v25 & 0x10) == 0 && ((v25 >> 3) & 1) == 0;
                  if ((v25 & 2) != 0)
                    v126 = 2;
                  v127 = v10 + 80;
                  while (1)
                  {
                    v7 = v127;
                    v130 = *(_DWORD *)(v127 + 40);
                    v131 = ((v130 >> 3) & 1) == 0;
                    if ((v130 & 0x10) != 0)
                      v131 = 0;
                    if ((v130 & 2) != 0)
                      v132 = 2;
                    else
                      v132 = v131;
                    v133 = v126 == v132;
                    if (v126 < v132)
                      v128 = -1;
                    else
                      v128 = 1;
                    if (v133)
                    {
                      v134 = *(_QWORD *)(v7 + 24);
                      if (v28 < v134)
                      {
                        v128 = -1;
                      }
                      else
                      {
                        if (v134 < v28)
                          goto LABEL_288;
                        v135 = (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 5;
                        v136 = v31 == v135;
                        if (v31 < v135)
                          v128 = -1;
                        else
                          v128 = 1;
                        if (v136)
                        {
                          v137 = *(float *)(v7 + 72);
                          if (v29 == v137)
                            v128 = 0;
                          else
                            v128 = -127;
                          if (v29 > v137)
                            v128 = 1;
                          if (v29 < v137)
                            v128 = -1;
                        }
                      }
                    }
                    v129 = v128;
                    v127 = v7 + 80;
                    if (v129 > 0)
                      goto LABEL_288;
                  }
                }
              }
            }
            v138 = (v25 & 0x10) == 0 && ((v25 >> 3) & 1) == 0;
            if ((v25 & 2) != 0)
              v138 = 2;
            v139 = v10 + 80;
            do
            {
              v7 = v139;
              if (v139 >= v6)
                break;
              v142 = *(_DWORD *)(v139 + 40);
              v143 = ((v142 >> 3) & 1) == 0;
              if ((v142 & 0x10) != 0)
                v143 = 0;
              if ((v142 & 2) != 0)
                v144 = 2;
              else
                v144 = v143;
              v145 = v138 == v144;
              if (v138 < v144)
                v140 = -1;
              else
                v140 = 1;
              if (v145)
              {
                v146 = *(_QWORD *)(v7 + 24);
                if (v28 < v146)
                {
                  v140 = -1;
                }
                else
                {
                  if (v146 < v28)
                    break;
                  v147 = (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 5;
                  v148 = v31 == v147;
                  if (v31 < v147)
                    v140 = -1;
                  else
                    v140 = 1;
                  if (v148)
                  {
                    v149 = *(float *)(v7 + 72);
                    if (v29 == v149)
                      v140 = 0;
                    else
                      v140 = -127;
                    if (v29 > v149)
                      v140 = 1;
                    if (v29 < v149)
                      v140 = -1;
                  }
                }
              }
              v141 = v140;
              v139 = v7 + 80;
            }
            while (v141 < 1);
LABEL_288:
            v150 = v6;
            if (v7 < v6)
            {
              v151 = (v464 & 0x10) == 0 && v116;
              if (v30)
                v151 = 2;
              v152 = a2 - 80;
              do
              {
                v150 = v152;
                v155 = *(_DWORD *)(v152 + 40);
                v156 = ((v155 >> 3) & 1) == 0;
                if ((v155 & 0x10) != 0)
                  v156 = 0;
                if ((v155 & 2) != 0)
                  v157 = 2;
                else
                  v157 = v156;
                v158 = v151 == v157;
                if (v151 < v157)
                  v153 = -1;
                else
                  v153 = 1;
                if (v158)
                {
                  v159 = *(_QWORD *)(v150 + 24);
                  if (v28 < v159)
                    break;
                  if (v159 < v28)
                  {
                    v153 = 1;
                  }
                  else
                  {
                    v160 = (uint64_t)(*(_QWORD *)(v150 + 8) - *(_QWORD *)v150) >> 5;
                    v161 = v31 == v160;
                    if (v31 < v160)
                      v153 = -1;
                    else
                      v153 = 1;
                    if (v161)
                    {
                      v162 = *(float *)(v150 + 72);
                      if (v29 == v162)
                        v153 = 0;
                      else
                        v153 = -127;
                      if (v29 > v162)
                        v153 = 1;
                      if (v29 < v162)
                        break;
                    }
                  }
                }
                v154 = v153;
                v152 = v150 - 80;
              }
              while (v154 > 0);
            }
            if (v7 >= v150)
              goto LABEL_384;
            if ((v464 & 0x10) != 0)
              v116 = 0;
            if (v30)
              v163 = 2;
            else
              v163 = v116;
            v164 = *(_QWORD *)v7;
            while (2)
            {
              v165 = *(_OWORD *)(v7 + 8);
              *(_QWORD *)(v7 + 8) = 0;
              *(_QWORD *)(v7 + 16) = 0;
              *(_QWORD *)v7 = 0;
              v488 = *(_OWORD *)(v7 + 24);
              v496 = *(_OWORD *)(v7 + 40);
              v501 = *(_OWORD *)(v7 + 56);
              v506 = *(_DWORD *)(v7 + 72);
              *(_OWORD *)v7 = *(_OWORD *)v150;
              *(_QWORD *)(v7 + 16) = *(_QWORD *)(v150 + 16);
              *(_QWORD *)v150 = 0;
              *(_QWORD *)(v150 + 8) = 0;
              *(_QWORD *)(v150 + 16) = 0;
              v166 = *(_OWORD *)(v150 + 24);
              v167 = *(_OWORD *)(v150 + 40);
              v168 = *(_OWORD *)(v150 + 56);
              *(_DWORD *)(v7 + 72) = *(_DWORD *)(v150 + 72);
              *(_OWORD *)(v7 + 56) = v168;
              *(_OWORD *)(v7 + 40) = v167;
              *(_OWORD *)(v7 + 24) = v166;
              v169 = *(void **)v150;
              if (*(_QWORD *)v150)
              {
                *(_QWORD *)(v150 + 8) = v169;
                v477 = v165;
                operator delete(v169);
                v165 = v477;
              }
              *(_QWORD *)v150 = v164;
              *(_OWORD *)(v150 + 8) = v165;
              *(_OWORD *)(v150 + 24) = v488;
              *(_OWORD *)(v150 + 40) = v496;
              *(_OWORD *)(v150 + 56) = v501;
              *(_DWORD *)(v150 + 72) = v506;
              v170 = v7 + 80;
              while (1)
              {
                v7 = v170;
                v173 = *(_DWORD *)(v170 + 40);
                v174 = ((v173 >> 3) & 1) == 0;
                if ((v173 & 0x10) != 0)
                  v174 = 0;
                if ((v173 & 2) != 0)
                  v175 = 2;
                else
                  v175 = v174;
                v164 = *(_QWORD *)v7;
                v176 = v163 == v175;
                if (v163 < v175)
                  v171 = -1;
                else
                  v171 = 1;
                if (!v176)
                  goto LABEL_332;
                v177 = *(_QWORD *)(v7 + 24);
                if (v28 >= v177)
                  break;
                v171 = -1;
LABEL_332:
                v172 = v171;
                v170 = v7 + 80;
                if (v172 >= 1)
                  goto LABEL_357;
              }
              if (v177 >= v28)
              {
                v178 = (*(_QWORD *)(v7 + 8) - v164) >> 5;
                v179 = v31 == v178;
                if (v31 < v178)
                  v171 = -1;
                else
                  v171 = 1;
                if (v179)
                {
                  v180 = *(float *)(v7 + 72);
                  if (v29 == v180)
                    v171 = 0;
                  else
                    v171 = -127;
                  if (v29 > v180)
                    v171 = 1;
                  if (v29 < v180)
                    v171 = -1;
                }
                goto LABEL_332;
              }
LABEL_357:
              v181 = v150 - 80;
              while (1)
              {
                v150 = v181;
                v184 = *(_DWORD *)(v181 + 40);
                v185 = ((v184 >> 3) & 1) == 0;
                if ((v184 & 0x10) != 0)
                  v185 = 0;
                if ((v184 & 2) != 0)
                  v186 = 2;
                else
                  v186 = v185;
                v187 = v163 == v186;
                if (v163 < v186)
                  v182 = -1;
                else
                  v182 = 1;
                if (!v187)
                  goto LABEL_359;
                v188 = *(_QWORD *)(v150 + 24);
                if (v28 < v188)
                  goto LABEL_327;
                if (v188 >= v28)
                  break;
                v182 = 1;
LABEL_359:
                v183 = v182;
                v181 = v150 - 80;
                if (v183 <= 0)
                  goto LABEL_327;
              }
              v189 = (uint64_t)(*(_QWORD *)(v150 + 8) - *(_QWORD *)v150) >> 5;
              v190 = v31 == v189;
              if (v31 < v189)
                v182 = -1;
              else
                v182 = 1;
              if (!v190)
                goto LABEL_359;
              v191 = *(float *)(v150 + 72);
              if (v29 == v191)
                v182 = 0;
              else
                v182 = -127;
              if (v29 > v191)
                v182 = 1;
              if (v29 >= v191)
                goto LABEL_359;
LABEL_327:
              if (v7 < v150)
                continue;
              break;
            }
LABEL_384:
            v192 = (void **)(v7 - 80);
            v6 = a2;
            a3 = v459;
            if (v7 - 80 != v10)
            {
              v193 = *(void **)v10;
              if (*(_QWORD *)v10)
              {
                *(_QWORD *)(v10 + 8) = v193;
                operator delete(v193);
                *(_QWORD *)v10 = 0;
                *(_QWORD *)(v10 + 8) = 0;
                *(_QWORD *)(v10 + 16) = 0;
              }
              *(_OWORD *)v10 = *(_OWORD *)(v7 - 80);
              *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 - 64);
              *v192 = 0;
              *(_QWORD *)(v7 - 72) = 0;
              *(_QWORD *)(v7 - 64) = 0;
              v194 = *(_OWORD *)(v7 - 56);
              v195 = *(_OWORD *)(v7 - 40);
              v196 = *(_OWORD *)(v7 - 24);
              *(_DWORD *)(v10 + 72) = *(_DWORD *)(v7 - 8);
              *(_OWORD *)(v10 + 40) = v195;
              *(_OWORD *)(v10 + 56) = v196;
              *(_OWORD *)(v10 + 24) = v194;
            }
            v197 = *v192;
            if (*v192)
            {
              *(_QWORD *)(v7 - 72) = v197;
              operator delete(v197);
            }
            a4 = 0;
            *(_QWORD *)(v7 - 80) = v451;
            *(_QWORD *)(v7 - 72) = v455;
            *(_QWORD *)(v7 - 64) = v475;
            *(_QWORD *)(v7 - 56) = v28;
            *(_QWORD *)(v7 - 48) = v449;
            *(_DWORD *)(v7 - 40) = v464;
            result = *(double *)v484;
            *(_OWORD *)(v7 - 24) = *(_OWORD *)&v484[12];
            *(_OWORD *)(v7 - 36) = *(_OWORD *)v484;
            *(float *)(v7 - 8) = v29;
            continue;
          }
          sub_2236C77A0((uint64_t *)(v10 + 80 * (v9 >> 1)), v10, (uint64_t)v467);
          v459 = a3 - 1;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_12:
          v27 = *(_QWORD *)v10;
          v26 = *(_QWORD *)(v10 + 8);
          v28 = *(_QWORD *)(v10 + 24);
          v25 = *(_DWORD *)(v10 + 40);
          v29 = *(float *)(v10 + 72);
          v30 = v25 & 2;
          v31 = (v26 - *(_QWORD *)v10) >> 5;
LABEL_38:
          v39 = 0;
          v40 = *(_QWORD *)(v10 + 16);
          *(_QWORD *)v10 = 0;
          *(_QWORD *)(v10 + 8) = 0;
          *(_QWORD *)(v10 + 16) = 0;
          v41 = ((v25 >> 3) & 1) == 0;
          if ((v25 & 0x10) != 0)
            v41 = 0;
          *(_OWORD *)v483 = *(_OWORD *)(v10 + 44);
          *(_OWORD *)&v483[12] = *(_OWORD *)(v10 + 56);
          if (v30)
            v42 = 2;
          else
            v42 = v41;
          while (1)
          {
            v44 = v39;
            v45 = v10 + v39;
            v46 = *(_DWORD *)(v45 + 120);
            v47 = ((v46 >> 3) & 1) == 0;
            if ((v46 & 0x10) != 0)
              v47 = 0;
            if ((v46 & 2) != 0)
              v48 = 2;
            else
              v48 = v47;
            v49 = *(_QWORD *)(v45 + 80);
            v50 = v48 == v42;
            if (v48 < v42)
              v43 = -1;
            else
              v43 = 1;
            if (!v50)
              goto LABEL_44;
            v51 = *(_QWORD *)(v45 + 104);
            if (v51 < v28)
              goto LABEL_69;
            if (v28 >= v51)
              break;
            v43 = 1;
LABEL_44:
            v39 = v44 + 80;
            if (v43 <= 0)
              goto LABEL_69;
          }
          v52 = (*(_QWORD *)(v45 + 88) - v49) >> 5;
          v53 = v52 == v31;
          if (v52 < v31)
            v43 = -1;
          else
            v43 = 1;
          if (!v53)
            goto LABEL_44;
          v54 = *(float *)(v45 + 152);
          v55 = v54 == v29 ? 0 : -127;
          v43 = v54 > v29 ? 1 : v55;
          if (v54 >= v29)
            goto LABEL_44;
LABEL_69:
          v7 = v10 + v44 + 80;
          v56 = a2 - 80;
          if (v44)
          {
            while (1)
            {
              v59 = v56;
              v60 = *(_DWORD *)(v56 + 40);
              v61 = ((v60 >> 3) & 1) == 0;
              if ((v60 & 0x10) != 0)
                v61 = 0;
              if ((v60 & 2) != 0)
                v62 = 2;
              else
                v62 = v61;
              v63 = v62 == v42;
              if (v62 < v42)
                v58 = -1;
              else
                v58 = 1;
              if (v63)
              {
                v64 = *(_QWORD *)(v59 + 24);
                if (v64 < v28)
                {
                  v58 = -1;
                }
                else
                {
                  if (v28 < v64)
                    goto LABEL_125;
                  v65 = (uint64_t)(*(_QWORD *)(v59 + 8) - *(_QWORD *)v59) >> 5;
                  v66 = v65 == v31;
                  if (v65 < v31)
                    v58 = -1;
                  else
                    v58 = 1;
                  if (v66)
                  {
                    v67 = *(float *)(v59 + 72);
                    if (v67 == v29)
                      v58 = 0;
                    else
                      v58 = -127;
                    if (v67 > v29)
                      v58 = 1;
                    if (v67 < v29)
                      v58 = -1;
                  }
                }
              }
              v56 = v59 - 80;
              if (v58 > 0)
                goto LABEL_125;
            }
          }
          v57 = a2 - 80;
          while (1)
          {
            v59 = v57;
            v70 = v57 + 80;
            if (v7 >= v70)
              break;
            v71 = *(_DWORD *)(v59 + 40);
            v72 = ((v71 >> 3) & 1) == 0;
            if ((v71 & 0x10) != 0)
              v72 = 0;
            if ((v71 & 2) != 0)
              v73 = 2;
            else
              v73 = v72;
            v74 = v73 == v42;
            if (v73 < v42)
              v68 = -1;
            else
              v68 = 1;
            if (v74)
            {
              v75 = *(_QWORD *)(v59 + 24);
              if (v75 < v28)
              {
                v68 = -1;
              }
              else
              {
                if (v28 < v75)
                  goto LABEL_125;
                v76 = (uint64_t)(*(_QWORD *)(v59 + 8) - *(_QWORD *)v59) >> 5;
                v77 = v76 == v31;
                if (v76 < v31)
                  v68 = -1;
                else
                  v68 = 1;
                if (v77)
                {
                  v78 = *(float *)(v59 + 72);
                  if (v78 == v29)
                    v68 = 0;
                  else
                    v68 = -127;
                  if (v78 > v29)
                    v68 = 1;
                  if (v78 < v29)
                    v68 = -1;
                }
              }
            }
            v69 = v68;
            v57 = v59 - 80;
            if (v69 > 0)
              goto LABEL_125;
          }
          v59 = v70;
LABEL_125:
          v463 = v25;
          v450 = v27;
          v454 = v26;
          v447 = *(_QWORD *)(v10 + 32);
          v448 = v40;
          v445 = v10 + 24;
          v446 = v7;
          if (v7 < v59)
          {
            v79 = v59;
            do
            {
              v80 = *(_OWORD *)(v7 + 8);
              *(_QWORD *)(v7 + 8) = 0;
              *(_QWORD *)(v7 + 16) = 0;
              *(_QWORD *)v7 = 0;
              v487 = *(_OWORD *)(v7 + 24);
              v495 = *(_OWORD *)(v7 + 40);
              v500 = *(_OWORD *)(v7 + 56);
              v505 = *(_DWORD *)(v7 + 72);
              *(_OWORD *)v7 = *(_OWORD *)v79;
              *(_QWORD *)(v7 + 16) = *(_QWORD *)(v79 + 16);
              *(_QWORD *)v79 = 0;
              *(_QWORD *)(v79 + 8) = 0;
              *(_QWORD *)(v79 + 16) = 0;
              v81 = *(_OWORD *)(v79 + 24);
              v82 = *(_OWORD *)(v79 + 40);
              v83 = *(_OWORD *)(v79 + 56);
              *(_DWORD *)(v7 + 72) = *(_DWORD *)(v79 + 72);
              *(_OWORD *)(v7 + 56) = v83;
              *(_OWORD *)(v7 + 40) = v82;
              *(_OWORD *)(v7 + 24) = v81;
              v84 = *(void **)v79;
              if (*(_QWORD *)v79)
              {
                *(_QWORD *)(v79 + 8) = v84;
                v476 = v80;
                operator delete(v84);
                v80 = v476;
              }
              *(_QWORD *)v79 = v49;
              *(_OWORD *)(v79 + 8) = v80;
              *(_OWORD *)(v79 + 24) = v487;
              *(_OWORD *)(v79 + 40) = v495;
              *(_OWORD *)(v79 + 56) = v500;
              *(_DWORD *)(v79 + 72) = v505;
              v85 = v7 + 80;
              while (1)
              {
                v7 = v85;
                v88 = *(_DWORD *)(v85 + 40);
                v89 = ((v88 >> 3) & 1) == 0;
                if ((v88 & 0x10) != 0)
                  v89 = 0;
                if ((v88 & 2) != 0)
                  v90 = 2;
                else
                  v90 = v89;
                v49 = *(_QWORD *)v7;
                v91 = v90 == v42;
                if (v90 < v42)
                  v86 = -1;
                else
                  v86 = 1;
                if (!v91)
                  goto LABEL_132;
                v92 = *(_QWORD *)(v7 + 24);
                if (v92 < v28)
                  goto LABEL_156;
                if (v28 >= v92)
                  break;
                v86 = 1;
LABEL_132:
                v87 = v86;
                v85 = v7 + 80;
                if (v87 <= 0)
                  goto LABEL_156;
              }
              v93 = (*(_QWORD *)(v7 + 8) - v49) >> 5;
              v94 = v93 == v31;
              if (v93 < v31)
                v86 = -1;
              else
                v86 = 1;
              if (!v94)
                goto LABEL_132;
              v95 = *(float *)(v7 + 72);
              if (v95 == v29)
                v86 = 0;
              else
                v86 = -127;
              if (v95 > v29)
                v86 = 1;
              if (v95 >= v29)
                goto LABEL_132;
LABEL_156:
              v96 = v79 - 80;
              while (1)
              {
                v79 = v96;
                v99 = *(_DWORD *)(v96 + 40);
                v100 = ((v99 >> 3) & 1) == 0;
                if ((v99 & 0x10) != 0)
                  v100 = 0;
                if ((v99 & 2) != 0)
                  v101 = 2;
                else
                  v101 = v100;
                v102 = v101 == v42;
                if (v101 < v42)
                  v97 = -1;
                else
                  v97 = 1;
                if (!v102)
                  goto LABEL_158;
                v103 = *(_QWORD *)(v79 + 24);
                if (v103 >= v28)
                  break;
                v97 = -1;
LABEL_158:
                v98 = v97;
                v96 = v79 - 80;
                if (v98 >= 1)
                  goto LABEL_127;
              }
              if (v28 >= v103)
              {
                v104 = (uint64_t)(*(_QWORD *)(v79 + 8) - *(_QWORD *)v79) >> 5;
                v105 = v104 == v31;
                if (v104 < v31)
                  v97 = -1;
                else
                  v97 = 1;
                if (v105)
                {
                  v106 = *(float *)(v79 + 72);
                  if (v106 == v29)
                    v97 = 0;
                  else
                    v97 = -127;
                  if (v106 > v29)
                    v97 = 1;
                  if (v106 < v29)
                    v97 = -1;
                }
                goto LABEL_158;
              }
LABEL_127:
              ;
            }
            while (v7 < v79);
          }
          v107 = (void **)(v7 - 80);
          v6 = a2;
          if (v7 - 80 != a1)
          {
            v108 = *(void **)a1;
            if (*(_QWORD *)a1)
            {
              *(_QWORD *)(a1 + 8) = v108;
              operator delete(v108);
              *(_QWORD *)a1 = 0;
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
            }
            *(_OWORD *)a1 = *(_OWORD *)(v7 - 80);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 64);
            *v107 = 0;
            *(_QWORD *)(v7 - 72) = 0;
            *(_QWORD *)(v7 - 64) = 0;
            v109 = *(_OWORD *)(v7 - 56);
            v110 = *(_OWORD *)(v7 - 40);
            v111 = *(_OWORD *)(v7 - 24);
            *(_DWORD *)(v445 + 48) = *(_DWORD *)(v7 - 8);
            *(_OWORD *)(v445 + 16) = v110;
            *(_OWORD *)(v445 + 32) = v111;
            *(_OWORD *)v445 = v109;
          }
          v112 = *v107;
          if (*v107)
          {
            *(_QWORD *)(v7 - 72) = v112;
            operator delete(v112);
          }
          *(_QWORD *)(v7 - 80) = v450;
          *(_QWORD *)(v7 - 72) = v454;
          *(_QWORD *)(v7 - 64) = v448;
          *(_QWORD *)(v7 - 56) = v28;
          *(_QWORD *)(v7 - 48) = v447;
          *(_DWORD *)(v7 - 40) = v463;
          *(_OWORD *)(v7 - 24) = *(_OWORD *)&v483[12];
          *(_OWORD *)(v7 - 36) = *(_OWORD *)v483;
          *(float *)(v7 - 8) = v29;
          v113 = v446 >= v59;
          a3 = v459;
          if (!v113)
            goto LABEL_193;
          v114 = sub_2236C7DBC(a1, v7 - 80);
          if (!sub_2236C7DBC(v7, a2))
          {
            if (v114)
              continue;
LABEL_193:
            sub_2236C545C(a1, v7 - 80, v459, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v7 - 80;
          if (v114)
            return result;
          goto LABEL_1;
        }
        if (v7 != v6)
        {
          v266 = (v9 - 2) >> 1;
          v267 = v266;
          while (1)
          {
            v268 = v267;
            if (v266 < v267)
              goto LABEL_514;
            v269 = (2 * v267) | 1;
            v270 = a1 + 80 * v269;
            if (2 * v268 + 2 >= (uint64_t)v9)
              goto LABEL_554;
            v271 = *(_DWORD *)(a1 + 80 * v269 + 40);
            if ((v271 & 2) != 0)
            {
              v272 = 2;
              v273 = *(_DWORD *)(v270 + 120);
              if ((v273 & 2) != 0)
                goto LABEL_529;
            }
            else if ((v271 & 0x10) != 0)
            {
              v272 = 0;
              v273 = *(_DWORD *)(v270 + 120);
              if ((v273 & 2) != 0)
              {
LABEL_529:
                v277 = v272 == 2;
                if (v272 < 2)
                  v276 = -1;
                else
                  v276 = 1;
                if (v277)
                  goto LABEL_536;
                goto LABEL_552;
              }
            }
            else
            {
              v272 = ((v271 >> 3) & 1) == 0;
              v273 = *(_DWORD *)(v270 + 120);
              if ((v273 & 2) != 0)
                goto LABEL_529;
            }
            if ((v273 & 0x10) != 0)
            {
              v33 = v272 == 0;
              v276 = 1;
              if (v33)
                goto LABEL_536;
            }
            else
            {
              v274 = ((v273 >> 3) & 1) == 0;
              v275 = v272 == v274;
              if (v272 < v274)
                v276 = -1;
              else
                v276 = 1;
              if (v275)
              {
LABEL_536:
                v278 = a1 + 80 * v269;
                v279 = *(_QWORD *)(v278 + 24);
                v280 = *(_QWORD *)(v270 + 104);
                if (v279 >= v280)
                {
                  if (v280 >= v279)
                  {
                    v281 = (uint64_t)(*(_QWORD *)(v270 + 8) - *(_QWORD *)v270) >> 5;
                    v282 = (uint64_t)(*(_QWORD *)(v270 + 88) - *(_QWORD *)(v270 + 80)) >> 5;
                    v283 = v281 == v282;
                    if (v281 < v282)
                      v276 = -1;
                    else
                      v276 = 1;
                    if (v283)
                    {
                      v284 = *(float *)(v278 + 72);
                      v285 = *(float *)(v270 + 152);
                      if (v284 == v285)
                        v276 = 0;
                      else
                        v276 = -127;
                      if (v284 > v285)
                        v276 = 1;
                      if (v284 < v285)
                        v276 = -1;
                    }
                  }
                  else
                  {
                    v276 = 1;
                  }
                }
                else
                {
                  v276 = -1;
                }
              }
            }
LABEL_552:
            if (v276 > 0)
            {
              v270 += 80;
              v269 = 2 * v268 + 2;
            }
LABEL_554:
            v286 = a1 + 80 * v268;
            v287 = *(_DWORD *)(v270 + 40);
            v288 = ((v287 >> 3) & 1) == 0;
            if ((v287 & 0x10) != 0)
              v288 = 0;
            if ((v287 & 2) != 0)
              v289 = 2;
            else
              v289 = v288;
            v290 = *(_DWORD *)(a1 + 80 * v268 + 40);
            v291 = ((v290 >> 3) & 1) == 0;
            v292 = (v290 & 0x10) == 0 && ((v290 >> 3) & 1) == 0;
            if ((v290 & 2) != 0)
              v293 = 2;
            else
              v293 = v292;
            v294 = a1 + 80 * v268;
            v297 = *(_QWORD *)(v294 + 24);
            v295 = v294 + 24;
            v296 = v297;
            v479 = (uint64_t)(*(_QWORD *)(v286 + 8) - *(_QWORD *)v286) >> 5;
            v298 = v289 == v293;
            if (v289 < v293)
              v299 = -1;
            else
              v299 = 1;
            if (v298)
            {
              v300 = *(_QWORD *)(v270 + 24);
              if (v300 < v296)
                goto LABEL_584;
              if (v296 < v300)
                goto LABEL_514;
              v301 = (uint64_t)(*(_QWORD *)(v270 + 8) - *(_QWORD *)v270) >> 5;
              v302 = v301 == v479;
              v299 = v301 < v479 ? -1 : 1;
              if (v302)
              {
                v303 = *(float *)(v270 + 72);
                v304 = *(float *)(v295 + 48);
                if (v303 == v304)
                  v299 = 0;
                else
                  v299 = -127;
                if (v303 > v304)
                  v299 = 1;
                if (v303 < v304)
                  goto LABEL_584;
              }
            }
            if (v299 <= 0)
            {
LABEL_584:
              v461 = *(_QWORD *)v286;
              v466 = *(_QWORD *)(v286 + 8);
              v305 = 0;
              v457 = *(_QWORD *)(v286 + 16);
              *(_QWORD *)v286 = 0;
              *(_QWORD *)(v286 + 8) = 0;
              *(_QWORD *)(v286 + 16) = 0;
              v452 = *(_QWORD *)(v295 + 8);
              *(_OWORD *)&v491[12] = *(_OWORD *)(v295 + 32);
              *(_OWORD *)v491 = *(_OWORD *)(v295 + 20);
              v306 = *(float *)(v295 + 48);
              if ((v290 & 0x10) != 0)
                v291 = 0;
              v469 = v290;
              if ((v290 & 2) != 0)
                v307 = 2;
              else
                v307 = v291;
              while (1)
              {
                v308 = v270;
                if (v305)
                {
                  *(_QWORD *)(v286 + 8) = v305;
                  operator delete(v305);
                  *(_QWORD *)v286 = 0;
                  *(_QWORD *)(v286 + 8) = 0;
                  *(_QWORD *)(v286 + 16) = 0;
                }
                *(_OWORD *)v286 = *(_OWORD *)v308;
                *(_QWORD *)(v286 + 16) = *(_QWORD *)(v308 + 16);
                *(_QWORD *)v308 = 0;
                *(_QWORD *)(v308 + 8) = 0;
                *(_QWORD *)(v308 + 16) = 0;
                v309 = *(_OWORD *)(v308 + 24);
                v310 = *(_OWORD *)(v308 + 40);
                v311 = *(_OWORD *)(v308 + 56);
                *(_DWORD *)(v286 + 72) = *(_DWORD *)(v308 + 72);
                *(_OWORD *)(v286 + 56) = v311;
                *(_OWORD *)(v286 + 40) = v310;
                *(_OWORD *)(v286 + 24) = v309;
                if (v266 < v269)
                {
LABEL_658:
                  v337 = *(void **)v308;
                  if (*(_QWORD *)v308)
                  {
                    *(_QWORD *)(v308 + 8) = v337;
                    operator delete(v337);
                  }
                  *(_QWORD *)v308 = v461;
                  *(_QWORD *)(v308 + 8) = v466;
                  *(_QWORD *)(v308 + 16) = v457;
                  *(_QWORD *)(v308 + 24) = v296;
                  *(_QWORD *)(v308 + 32) = v452;
                  *(_DWORD *)(v308 + 40) = v469;
                  *(_OWORD *)(v308 + 44) = *(_OWORD *)v491;
                  *(_OWORD *)(v308 + 56) = *(_OWORD *)&v491[12];
                  *(float *)(v308 + 72) = v306;
                  goto LABEL_514;
                }
                v312 = (2 * v269) | 1;
                v270 = a1 + 80 * v312;
                if (2 * v269 + 2 < (uint64_t)v9)
                  break;
                v269 = (2 * v269) | 1;
LABEL_634:
                v328 = *(_DWORD *)(v270 + 40);
                v329 = ((v328 >> 3) & 1) == 0;
                if ((v328 & 0x10) != 0)
                  v329 = 0;
                if ((v328 & 2) != 0)
                  v330 = 2;
                else
                  v330 = v329;
                v331 = v330 == v307;
                if (v330 < v307)
                  v332 = -1;
                else
                  v332 = 1;
                if (!v331)
                  goto LABEL_589;
                v333 = *(_QWORD *)(v270 + 24);
                if (v333 >= v296)
                {
                  if (v296 < v333)
                    goto LABEL_658;
                  v334 = (uint64_t)(*(_QWORD *)(v270 + 8) - *(_QWORD *)v270) >> 5;
                  v335 = v334 == v479;
                  v332 = v334 < v479 ? -1 : 1;
                  if (!v335)
                    goto LABEL_589;
                  v336 = *(float *)(v270 + 72);
                  if (v336 == v306)
                    v332 = 0;
                  else
                    v332 = -127;
                  if (v336 > v306)
                    v332 = 1;
                  if (v336 >= v306)
                  {
LABEL_589:
                    if (v332 >= 1)
                      goto LABEL_658;
                  }
                }
                v305 = *(void **)v308;
                v286 = v308;
              }
              v313 = *(_DWORD *)(a1 + 80 * v312 + 40);
              if ((v313 & 2) != 0)
              {
                v314 = 2;
                v315 = *(_DWORD *)(v270 + 120);
                if ((v315 & 2) != 0)
                  goto LABEL_608;
              }
              else if ((v313 & 0x10) != 0)
              {
                v314 = 0;
                v315 = *(_DWORD *)(v270 + 120);
                if ((v315 & 2) != 0)
                  goto LABEL_608;
              }
              else
              {
                v314 = ((v313 >> 3) & 1) == 0;
                v315 = *(_DWORD *)(v270 + 120);
                if ((v315 & 2) != 0)
                {
LABEL_608:
                  v319 = v314 == 2;
                  if (v314 < 2)
                    v318 = -1;
                  else
                    v318 = 1;
                  if (!v319)
                    goto LABEL_631;
                  goto LABEL_615;
                }
              }
              if ((v315 & 0x10) != 0)
              {
                v33 = v314 == 0;
                v318 = 1;
                if (!v33)
                {
LABEL_631:
                  if (v318 <= 0)
                  {
                    v269 = (2 * v269) | 1;
                  }
                  else
                  {
                    v270 += 80;
                    v269 = 2 * v269 + 2;
                  }
                  goto LABEL_634;
                }
              }
              else
              {
                v316 = ((v315 >> 3) & 1) == 0;
                v317 = v314 == v316;
                if (v314 < v316)
                  v318 = -1;
                else
                  v318 = 1;
                if (!v317)
                  goto LABEL_631;
              }
LABEL_615:
              v320 = a1 + 80 * v312;
              v321 = *(_QWORD *)(v320 + 24);
              v322 = *(_QWORD *)(v270 + 104);
              if (v321 >= v322)
              {
                if (v322 >= v321)
                {
                  v323 = (uint64_t)(*(_QWORD *)(v270 + 8) - *(_QWORD *)v270) >> 5;
                  v324 = (uint64_t)(*(_QWORD *)(v270 + 88) - *(_QWORD *)(v270 + 80)) >> 5;
                  v325 = v323 == v324;
                  if (v323 < v324)
                    v318 = -1;
                  else
                    v318 = 1;
                  if (v325)
                  {
                    v326 = *(float *)(v320 + 72);
                    v327 = *(float *)(v270 + 152);
                    if (v326 == v327)
                      v318 = 0;
                    else
                      v318 = -127;
                    if (v326 > v327)
                      v318 = 1;
                    if (v326 < v327)
                      v318 = -1;
                  }
                }
                else
                {
                  v318 = 1;
                }
              }
              else
              {
                v318 = -1;
              }
              goto LABEL_631;
            }
LABEL_514:
            v267 = v268 - 1;
            if (!v268)
            {
              v338 = v8 / 0x50uLL;
              while (1)
              {
                v340 = 0;
                v341 = a2;
                v342 = a1;
                v480 = *(_QWORD *)a1;
                v343 = *(_QWORD *)(a1 + 16);
                v470 = *(_QWORD *)(a1 + 8);
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)a1 = 0;
                v498 = *(_OWORD *)(a1 + 40);
                v503 = *(_OWORD *)(a1 + 56);
                v508 = *(_DWORD *)(a1 + 72);
                v492 = *(_OWORD *)(a1 + 24);
                do
                {
                  v347 = v340 + 1;
                  v348 = v342 + 80 * (v340 + 1);
                  v349 = 2 * v340;
                  v340 = (2 * v340) | 1;
                  v350 = v349 + 2;
                  if (v349 + 2 >= v338)
                    goto LABEL_704;
                  v351 = *(_DWORD *)(v342 + 80 * v347 + 40);
                  if ((v351 & 2) != 0)
                  {
                    v352 = 2;
                    v353 = *(_DWORD *)(v348 + 120);
                    if ((v353 & 2) != 0)
                      goto LABEL_678;
                  }
                  else if ((v351 & 0x10) != 0)
                  {
                    v352 = 0;
                    v353 = *(_DWORD *)(v348 + 120);
                    if ((v353 & 2) != 0)
                    {
LABEL_678:
                      v357 = v352 == 2;
                      if (v352 < 2)
                        v356 = -1;
                      else
                        v356 = 1;
                      if (v357)
                        goto LABEL_685;
                      goto LABEL_702;
                    }
                  }
                  else
                  {
                    v352 = ((v351 >> 3) & 1) == 0;
                    v353 = *(_DWORD *)(v348 + 120);
                    if ((v353 & 2) != 0)
                      goto LABEL_678;
                  }
                  if ((v353 & 0x10) != 0)
                  {
                    v33 = v352 == 0;
                    v356 = 1;
                    if (v33)
                      goto LABEL_685;
                  }
                  else
                  {
                    v354 = ((v353 >> 3) & 1) == 0;
                    v355 = v352 == v354;
                    if (v352 < v354)
                      v356 = -1;
                    else
                      v356 = 1;
                    if (v355)
                    {
LABEL_685:
                      v358 = v342 + 80 * v347;
                      v359 = *(_QWORD *)(v358 + 24);
                      v360 = *(_QWORD *)(v348 + 104);
                      if (v359 >= v360)
                      {
                        if (v360 >= v359)
                        {
                          v361 = (uint64_t)(*(_QWORD *)(v348 + 8) - *(_QWORD *)v348) >> 5;
                          v362 = (uint64_t)(*(_QWORD *)(v348 + 88) - *(_QWORD *)(v348 + 80)) >> 5;
                          v363 = v361 == v362;
                          if (v361 < v362)
                            v356 = -1;
                          else
                            v356 = 1;
                          if (v363)
                          {
                            v364 = *(float *)(v358 + 72);
                            v365 = *(float *)(v348 + 152);
                            if (v364 == v365)
                              v366 = 0;
                            else
                              v366 = -127;
                            if (v364 > v365)
                              v366 = 1;
                            if (v364 < v365)
                              v356 = -1;
                            else
                              v356 = v366;
                          }
                        }
                        else
                        {
                          v356 = 1;
                        }
                      }
                      else
                      {
                        v356 = -1;
                      }
                    }
                  }
LABEL_702:
                  if (v356 > 0)
                  {
                    v348 += 80;
                    v340 = v350;
                  }
LABEL_704:
                  v367 = *(void **)v342;
                  if (*(_QWORD *)v342)
                  {
                    *(_QWORD *)(v342 + 8) = v367;
                    operator delete(v367);
                    *(_QWORD *)v342 = 0;
                    *(_QWORD *)(v342 + 8) = 0;
                    *(_QWORD *)(v342 + 16) = 0;
                  }
                  *(_OWORD *)v342 = *(_OWORD *)v348;
                  *(_QWORD *)(v342 + 16) = *(_QWORD *)(v348 + 16);
                  *(_QWORD *)v348 = 0;
                  *(_QWORD *)(v348 + 8) = 0;
                  *(_QWORD *)(v348 + 16) = 0;
                  v344 = *(_OWORD *)(v348 + 24);
                  v345 = *(_OWORD *)(v348 + 40);
                  v346 = *(_OWORD *)(v348 + 56);
                  *(_DWORD *)(v342 + 72) = *(_DWORD *)(v348 + 72);
                  *(_OWORD *)(v342 + 56) = v346;
                  *(_OWORD *)(v342 + 40) = v345;
                  *(_OWORD *)(v342 + 24) = v344;
                  v342 = v348;
                }
                while (v340 <= (uint64_t)((unint64_t)(v338 - 2) >> 1));
                v368 = (_OWORD *)(v348 + 24);
                v369 = *(void **)v348;
                a2 -= 80;
                if (v348 == v341 - 80)
                {
                  if (v369)
                  {
                    *(_QWORD *)(v348 + 8) = v369;
                    operator delete(v369);
                  }
                  *(_QWORD *)v348 = v480;
                  *(_QWORD *)(v348 + 8) = v470;
                  *(_QWORD *)(v348 + 16) = v343;
                  result = *(double *)&v492;
                  *(_DWORD *)(v348 + 72) = v508;
                  *(_OWORD *)(v348 + 40) = v498;
                  *(_OWORD *)(v348 + 56) = v503;
                  *v368 = v492;
                  goto LABEL_662;
                }
                if (v369)
                {
                  *(_QWORD *)(v348 + 8) = v369;
                  operator delete(v369);
                  *(_QWORD *)v348 = 0;
                  *(_QWORD *)(v348 + 8) = 0;
                  *(_QWORD *)(v348 + 16) = 0;
                }
                *(_OWORD *)v348 = *(_OWORD *)(v341 - 80);
                *(_QWORD *)(v348 + 16) = *(_QWORD *)(v341 - 64);
                *(_QWORD *)(v341 - 80) = 0;
                *(_QWORD *)(v341 - 72) = 0;
                *(_QWORD *)(v341 - 64) = 0;
                v370 = *(_OWORD *)(v341 - 56);
                v371 = *(_OWORD *)(v341 - 40);
                v372 = *(_OWORD *)(v341 - 24);
                *(_DWORD *)(v348 + 72) = *(_DWORD *)(v341 - 8);
                *(_OWORD *)(v348 + 40) = v371;
                *(_OWORD *)(v348 + 56) = v372;
                *v368 = v370;
                v373 = *(void **)(v341 - 80);
                if (v373)
                {
                  *(_QWORD *)(v341 - 72) = v373;
                  operator delete(v373);
                }
                v374 = v341 - 56;
                *(_QWORD *)(v341 - 80) = v480;
                *(_QWORD *)(v341 - 72) = v470;
                *(_QWORD *)(v341 - 64) = v343;
                result = *(double *)&v492;
                *(_DWORD *)(v374 + 48) = v508;
                *(_OWORD *)(v374 + 16) = v498;
                *(_OWORD *)(v374 + 32) = v503;
                *(_OWORD *)v374 = v492;
                v375 = v348 + 80 - a1;
                if (v375 < 81)
                  goto LABEL_662;
                v376 = (v375 / 0x50uLL - 2) >> 1;
                v377 = a1 + 80 * v376;
                v378 = *(_DWORD *)(v377 + 40);
                v379 = ((v378 >> 3) & 1) == 0;
                if ((v378 & 0x10) != 0)
                  v379 = 0;
                if ((v378 & 2) != 0)
                  v380 = 2;
                else
                  v380 = v379;
                v381 = *(_DWORD *)(v348 + 40);
                if ((v381 & 2) != 0)
                  v382 = 2;
                else
                  v382 = (v381 & 0x10) == 0 && ((v381 >> 3) & 1) == 0;
                v481 = (uint64_t)(*(_QWORD *)(v348 + 8) - *(_QWORD *)v348) >> 5;
                v383 = *(_QWORD *)(v348 + 24);
                v384 = *(float *)(v348 + 72);
                v385 = v380 == v382;
                if (v380 < v382)
                  v386 = -1;
                else
                  v386 = 1;
                if (!v385)
                  goto LABEL_742;
                v387 = a1 + 80 * v376;
                v388 = *(_QWORD *)(v387 + 24);
                if (v388 < v383)
                  goto LABEL_662;
                if (v383 < v388)
                {
LABEL_743:
                  v471 = *(_QWORD *)(v348 + 8);
                  v391 = 0;
                  v458 = *(_QWORD *)(v348 + 16);
                  v462 = *(_QWORD *)v348;
                  *(_QWORD *)v348 = 0;
                  *(_QWORD *)(v348 + 8) = 0;
                  *(_QWORD *)(v348 + 16) = 0;
                  v453 = *(_QWORD *)(v348 + 32);
                  *(_OWORD *)&v485[12] = *(_OWORD *)(v348 + 56);
                  *(_OWORD *)v485 = *(_OWORD *)(v348 + 44);
                  v392 = ((v381 >> 3) & 1) == 0;
                  if ((v381 & 0x10) != 0)
                    v392 = 0;
                  if ((v381 & 2) != 0)
                    v393 = 2;
                  else
                    v393 = v392;
                  while (2)
                  {
                    if (v391)
                    {
                      *(_QWORD *)(v348 + 8) = v391;
                      operator delete(v391);
                      *(_QWORD *)v348 = 0;
                      *(_QWORD *)(v348 + 8) = 0;
                      *(_QWORD *)(v348 + 16) = 0;
                    }
                    *(_OWORD *)v348 = *(_OWORD *)v377;
                    *(_QWORD *)(v348 + 16) = *(_QWORD *)(v377 + 16);
                    *(_QWORD *)v377 = 0;
                    *(_QWORD *)(v377 + 8) = 0;
                    *(_QWORD *)(v377 + 16) = 0;
                    v394 = *(_OWORD *)(v377 + 24);
                    v395 = *(_OWORD *)(v377 + 40);
                    v396 = *(_OWORD *)(v377 + 56);
                    *(_DWORD *)(v348 + 72) = *(_DWORD *)(v377 + 72);
                    *(_OWORD *)(v348 + 56) = v396;
                    *(_OWORD *)(v348 + 40) = v395;
                    *(_OWORD *)(v348 + 24) = v394;
                    if (!v376)
                    {
LABEL_776:
                      v408 = *(void **)v377;
                      if (*(_QWORD *)v377)
                      {
                        *(_QWORD *)(v377 + 8) = v408;
                        operator delete(v408);
                      }
                      *(_QWORD *)v377 = v462;
                      *(_QWORD *)(v377 + 8) = v471;
                      *(_QWORD *)(v377 + 16) = v458;
                      *(_QWORD *)(v377 + 24) = v383;
                      *(_QWORD *)(v377 + 32) = v453;
                      *(_DWORD *)(v377 + 40) = v381;
                      *(_OWORD *)(v377 + 44) = *(_OWORD *)v485;
                      result = *(double *)&v485[12];
                      *(_OWORD *)(v377 + 56) = *(_OWORD *)&v485[12];
                      *(float *)(v377 + 72) = v384;
                      goto LABEL_662;
                    }
                    v376 = (v376 - 1) >> 1;
                    v397 = a1 + 80 * v376;
                    v398 = *(_DWORD *)(v397 + 40);
                    v399 = ((v398 >> 3) & 1) == 0;
                    if ((v398 & 0x10) != 0)
                      v399 = 0;
                    if ((v398 & 2) != 0)
                      v400 = 2;
                    else
                      v400 = v399;
                    v401 = v400 == v393;
                    if (v400 < v393)
                      v402 = -1;
                    else
                      v402 = 1;
                    if (v401)
                    {
                      v403 = a1 + 80 * v376;
                      v404 = *(_QWORD *)(v403 + 24);
                      if (v404 < v383)
                        goto LABEL_776;
                      if (v383 >= v404)
                      {
                        v405 = (uint64_t)(*(_QWORD *)(v397 + 8) - *(_QWORD *)v397) >> 5;
                        v406 = v405 == v481;
                        if (v405 < v481)
                          v402 = -1;
                        else
                          v402 = 1;
                        if (v406)
                        {
                          v407 = *(float *)(v403 + 72);
                          if (v407 == v384)
                            v402 = 0;
                          else
                            v402 = -127;
                          if (v407 > v384)
                            v402 = 1;
                          if (v407 < v384)
                            goto LABEL_776;
                        }
                        goto LABEL_748;
                      }
                    }
                    else
                    {
LABEL_748:
                      if (v402 <= 0)
                        goto LABEL_776;
                    }
                    v391 = *(void **)v377;
                    v348 = v377;
                    v377 = a1 + 80 * v376;
                    continue;
                  }
                }
                v389 = (uint64_t)(*(_QWORD *)(v377 + 8) - *(_QWORD *)v377) >> 5;
                v390 = v389 == v481;
                if (v389 < v481)
                  v386 = -1;
                else
                  v386 = 1;
                if (!v390)
                  goto LABEL_742;
                LODWORD(result) = *(_DWORD *)(v387 + 72);
                if (*(float *)&result == v384)
                  v386 = 0;
                else
                  v386 = -127;
                if (*(float *)&result > v384)
                  v386 = 1;
                if (*(float *)&result >= v384)
                {
LABEL_742:
                  if (v386 < 1)
                    goto LABEL_662;
                  goto LABEL_743;
                }
LABEL_662:
                if (v338-- <= 2)
                  return result;
              }
            }
          }
        }
        return result;
    }
  }
}

  v7 = a2;
  v657 = (int8x16_t *)(a2 - 200);
  while (2)
  {
    v8 = v7 - a1;
    v9 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v7 - a1) >> 3);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        if (sub_2237843D8((uint64_t)v657, a1))
        {
          v312 = *(__n128 *)(a1 + 32);
          v313 = *(_OWORD *)(a1 + 48);
          v314 = *(_OWORD *)(a1 + 64);
          v315 = *(__n128 *)(a1 + 16);
          v672 = *(int8x16_t *)a1;
          v673 = v315;
          v675 = v313;
          v676 = v314;
          v674 = v312;
          v316 = *(_OWORD *)(a1 + 128);
          v318 = *(_OWORD *)(a1 + 80);
          v317 = *(_OWORD *)(a1 + 96);
          v678 = *(_OWORD *)(a1 + 112);
          v679 = v316;
          *(_OWORD *)v677 = v318;
          *(_OWORD *)&v677[16] = v317;
          v320 = *(_OWORD *)(a1 + 160);
          v319 = *(_OWORD *)(a1 + 176);
          v321 = *(_OWORD *)(a1 + 144);
          v683 = *(_QWORD *)(a1 + 192);
          v681 = v320;
          v682 = v319;
          v680 = v321;
          *(int8x16_t *)a1 = *v657;
          v322 = *(_OWORD *)(a2 - 104);
          v323 = *(_OWORD *)(a2 - 72);
          v324 = *(_OWORD *)(a2 - 120);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 - 88);
          *(_OWORD *)(a1 + 128) = v323;
          *(_OWORD *)(a1 + 80) = v324;
          *(_OWORD *)(a1 + 96) = v322;
          v325 = *(_OWORD *)(a2 - 40);
          v326 = *(_OWORD *)(a2 - 24);
          v327 = *(_OWORD *)(a2 - 56);
          *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(a1 + 160) = v325;
          *(_OWORD *)(a1 + 176) = v326;
          *(_OWORD *)(a1 + 144) = v327;
          v328 = *(_OWORD *)(a2 - 184);
          v329 = *(_OWORD *)(a2 - 168);
          v330 = *(_OWORD *)(a2 - 136);
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 152);
          *(_OWORD *)(a1 + 64) = v330;
          *(_OWORD *)(a1 + 16) = v328;
          *(_OWORD *)(a1 + 32) = v329;
          *v657 = v672;
          v331 = v678;
          v332 = v679;
          v333 = *(_OWORD *)&v677[16];
          *(_OWORD *)(a2 - 120) = *(_OWORD *)v677;
          *(_OWORD *)(a2 - 72) = v332;
          *(_OWORD *)(a2 - 88) = v331;
          *(_OWORD *)(a2 - 104) = v333;
          v335 = v681;
          v334 = v682;
          v336 = v683;
          *(_OWORD *)(a2 - 56) = v680;
          *(_QWORD *)(a2 - 8) = v336;
          *(_OWORD *)(a2 - 24) = v334;
          *(_OWORD *)(a2 - 40) = v335;
          a5 = v673;
          v337 = v674;
          v338 = v675;
          *(_OWORD *)(a2 - 136) = v676;
          *(_OWORD *)(a2 - 152) = v338;
          *(__n128 *)(a2 - 168) = v337;
          *(__n128 *)(a2 - 184) = a5;
        }
        return a5.n128_f64[0];
      case 3uLL:
        a5.n128_u64[0] = sub_223784580(a1, a1 + 200, (uint64_t)v657).n128_u64[0];
        return a5.n128_f64[0];
      case 4uLL:
        v339 = (int8x16_t *)(a1 + 200);
        v340 = (int8x16_t *)(a1 + 400);
        sub_223784580(a1, a1 + 200, a1 + 400);
        if (sub_2237843D8((uint64_t)v657, a1 + 400))
        {
          v341 = *v340;
          v342 = *(_OWORD *)(a1 + 544);
          v343 = *(_OWORD *)(a1 + 576);
          v681 = *(_OWORD *)(a1 + 560);
          v682 = v343;
          v683 = *(_QWORD *)(a1 + 592);
          v344 = *(_OWORD *)(a1 + 480);
          v345 = *(_OWORD *)(a1 + 512);
          v346 = *(_OWORD *)(a1 + 528);
          *(_OWORD *)&v677[16] = *(_OWORD *)(a1 + 496);
          v678 = v345;
          v679 = v346;
          v680 = v342;
          v347 = *(__n128 *)(a1 + 416);
          v348 = *(__n128 *)(a1 + 432);
          v672 = v341;
          v673 = v347;
          v349 = *(_OWORD *)(a1 + 448);
          v350 = *(_OWORD *)(a1 + 464);
          v674 = v348;
          v675 = v349;
          v676 = v350;
          *(_OWORD *)v677 = v344;
          *v340 = *v657;
          v351 = *(_OWORD *)(a2 - 184);
          v352 = *(_OWORD *)(a2 - 136);
          v353 = *(_OWORD *)(a2 - 152);
          *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 - 168);
          *(_OWORD *)(a1 + 448) = v353;
          *(_OWORD *)(a1 + 464) = v352;
          v354 = *(_OWORD *)(a2 - 72);
          v355 = *(_OWORD *)(a2 - 88);
          v356 = *(_OWORD *)(a2 - 104);
          *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 - 120);
          *(_OWORD *)(a1 + 496) = v356;
          *(_OWORD *)(a1 + 512) = v355;
          *(_OWORD *)(a1 + 528) = v354;
          v357 = *(_QWORD *)(a2 - 8);
          v358 = *(_OWORD *)(a2 - 24);
          v359 = *(_OWORD *)(a2 - 40);
          *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 - 56);
          *(_OWORD *)(a1 + 560) = v359;
          *(_OWORD *)(a1 + 576) = v358;
          *(_QWORD *)(a1 + 592) = v357;
          *(_OWORD *)(a1 + 416) = v351;
          *v657 = v672;
          v360 = v678;
          v361 = v679;
          v362 = *(_OWORD *)&v677[16];
          *(_OWORD *)(a2 - 120) = *(_OWORD *)v677;
          *(_OWORD *)(a2 - 72) = v361;
          *(_OWORD *)(a2 - 88) = v360;
          *(_OWORD *)(a2 - 104) = v362;
          v364 = v681;
          v363 = v682;
          v365 = v683;
          *(_OWORD *)(a2 - 56) = v680;
          *(_QWORD *)(a2 - 8) = v365;
          *(_OWORD *)(a2 - 24) = v363;
          *(_OWORD *)(a2 - 40) = v364;
          v366 = v673;
          v367 = v674;
          v368 = v675;
          *(_OWORD *)(a2 - 136) = v676;
          *(_OWORD *)(a2 - 152) = v368;
          *(__n128 *)(a2 - 168) = v367;
          *(__n128 *)(a2 - 184) = v366;
          if (sub_2237843D8(a1 + 400, a1 + 200))
          {
            v369 = *(__n128 *)(a1 + 216);
            v672 = *v339;
            v673 = v369;
            v370 = *(_OWORD *)(a1 + 248);
            v674 = *(__n128 *)(a1 + 232);
            v675 = v370;
            v371 = *(_OWORD *)(a1 + 376);
            v681 = *(_OWORD *)(a1 + 360);
            v682 = v371;
            v372 = *(_OWORD *)(a1 + 312);
            *(_OWORD *)&v677[16] = *(_OWORD *)(a1 + 296);
            v678 = v372;
            v373 = *(_OWORD *)(a1 + 344);
            v679 = *(_OWORD *)(a1 + 328);
            v680 = v373;
            v374 = *(_OWORD *)(a1 + 280);
            v676 = *(_OWORD *)(a1 + 264);
            *(_OWORD *)v677 = v374;
            *v339 = *v340;
            v375 = *(_OWORD *)(a1 + 544);
            v376 = *(_OWORD *)(a1 + 576);
            *(_OWORD *)(a1 + 360) = *(_OWORD *)(a1 + 560);
            *(_OWORD *)(a1 + 376) = v376;
            v377 = *(_OWORD *)(a1 + 480);
            v378 = *(_OWORD *)(a1 + 512);
            v379 = *(_OWORD *)(a1 + 528);
            *(_OWORD *)(a1 + 296) = *(_OWORD *)(a1 + 496);
            *(_OWORD *)(a1 + 312) = v378;
            *(_OWORD *)(a1 + 328) = v379;
            *(_OWORD *)(a1 + 344) = v375;
            v380 = *(_OWORD *)(a1 + 432);
            *(_OWORD *)(a1 + 216) = *(_OWORD *)(a1 + 416);
            *(_OWORD *)(a1 + 232) = v380;
            v381 = *(_OWORD *)(a1 + 464);
            *(_OWORD *)(a1 + 248) = *(_OWORD *)(a1 + 448);
            *(_OWORD *)(a1 + 264) = v381;
            *(_OWORD *)(a1 + 280) = v377;
            v382 = v673;
            *v340 = v672;
            v383 = v681;
            v384 = v682;
            v385 = v679;
            *(_OWORD *)(a1 + 544) = v680;
            *(_OWORD *)(a1 + 560) = v383;
            *(_OWORD *)(a1 + 576) = v384;
            v386 = *(_OWORD *)&v677[16];
            v387 = v678;
            v388 = v676;
            *(_OWORD *)(a1 + 480) = *(_OWORD *)v677;
            *(_OWORD *)(a1 + 496) = v386;
            *(_OWORD *)(a1 + 512) = v387;
            *(_OWORD *)(a1 + 528) = v385;
            v389 = v674;
            v390 = v675;
            *(__n128 *)(a1 + 416) = v382;
            *(__n128 *)(a1 + 432) = v389;
            v683 = *(_QWORD *)(a1 + 392);
            *(_QWORD *)(a1 + 392) = *(_QWORD *)(a1 + 592);
            *(_QWORD *)(a1 + 592) = v683;
            *(_OWORD *)(a1 + 448) = v390;
            *(_OWORD *)(a1 + 464) = v388;
            if (sub_2237843D8(a1 + 200, a1))
            {
              v391 = *(__n128 *)(a1 + 32);
              v392 = *(_OWORD *)(a1 + 48);
              v393 = *(_OWORD *)(a1 + 64);
              v394 = *(__n128 *)(a1 + 16);
              v672 = *(int8x16_t *)a1;
              v673 = v394;
              v675 = v392;
              v676 = v393;
              v674 = v391;
              v395 = *(_OWORD *)(a1 + 128);
              v397 = *(_OWORD *)(a1 + 80);
              v396 = *(_OWORD *)(a1 + 96);
              v678 = *(_OWORD *)(a1 + 112);
              v679 = v395;
              *(_OWORD *)v677 = v397;
              *(_OWORD *)&v677[16] = v396;
              v399 = *(_OWORD *)(a1 + 160);
              v398 = *(_OWORD *)(a1 + 176);
              v400 = *(_OWORD *)(a1 + 144);
              v683 = *(_QWORD *)(a1 + 192);
              v681 = v399;
              v682 = v398;
              v680 = v400;
              v401 = *(_OWORD *)(a1 + 216);
              v402 = *(_OWORD *)(a1 + 232);
              *(int8x16_t *)a1 = *v339;
              *(_OWORD *)(a1 + 16) = v401;
              v403 = *(_OWORD *)(a1 + 248);
              v404 = *(_OWORD *)(a1 + 264);
              *(_OWORD *)(a1 + 32) = v402;
              *(_OWORD *)(a1 + 48) = v403;
              v406 = *(_OWORD *)(a1 + 312);
              v405 = *(_OWORD *)(a1 + 328);
              v407 = *(_OWORD *)(a1 + 280);
              *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 296);
              *(_OWORD *)(a1 + 112) = v406;
              *(_OWORD *)(a1 + 64) = v404;
              *(_OWORD *)(a1 + 80) = v407;
              *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 392);
              v408 = *(_OWORD *)(a1 + 376);
              v409 = *(_OWORD *)(a1 + 344);
              *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 360);
              *(_OWORD *)(a1 + 176) = v408;
              *(_OWORD *)(a1 + 128) = v405;
              *(_OWORD *)(a1 + 144) = v409;
              v410 = v673;
              *v339 = v672;
              v411 = v681;
              v412 = v682;
              v413 = v679;
              *(_OWORD *)(a1 + 344) = v680;
              *(_OWORD *)(a1 + 360) = v411;
              *(_OWORD *)(a1 + 376) = v412;
              v414 = *(_OWORD *)&v677[16];
              v415 = v678;
              v416 = v676;
              *(_OWORD *)(a1 + 280) = *(_OWORD *)v677;
              *(_OWORD *)(a1 + 296) = v414;
              *(_QWORD *)(a1 + 392) = v683;
              *(_OWORD *)(a1 + 312) = v415;
              *(_OWORD *)(a1 + 328) = v413;
              a5 = v674;
              v417 = v675;
              *(__n128 *)(a1 + 216) = v410;
              *(__n128 *)(a1 + 232) = a5;
              *(_OWORD *)(a1 + 248) = v417;
              *(_OWORD *)(a1 + 264) = v416;
            }
          }
        }
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = sub_223785064(a1, a1 + 200, a1 + 400, a1 + 600, (uint64_t)v657).n128_u64[0];
        return a5.n128_f64[0];
      default:
        v661 = a1;
        if (v8 > 4799)
        {
          if (!a3)
          {
            if (a1 != a2)
            {
              v420 = (v9 - 2) >> 1;
              v421 = v420;
              do
              {
                v430 = v421;
                if (v420 >= v421)
                {
                  v431 = (2 * v421) | 1;
                  v432 = a1 + 200 * v431;
                  if (2 * v421 + 2 < (uint64_t)v9 && sub_2237843D8(v432, v432 + 200))
                  {
                    v432 += 200;
                    v431 = 2 * v430 + 2;
                  }
                  a1 = v661;
                  v433 = v661 + 200 * v430;
                  if ((sub_2237843D8(v432, v433) & 1) == 0)
                  {
                    v672 = *(int8x16_t *)v433;
                    v434 = v661 + 200 * v430;
                    v435 = *(_OWORD *)(v434 + 128);
                    v437 = *(_OWORD *)(v434 + 80);
                    v436 = *(_OWORD *)(v434 + 96);
                    v678 = *(_OWORD *)(v434 + 112);
                    v679 = v435;
                    *(_OWORD *)v677 = v437;
                    *(_OWORD *)&v677[16] = v436;
                    v439 = *(_OWORD *)(v434 + 160);
                    v438 = *(_OWORD *)(v434 + 176);
                    v440 = *(_OWORD *)(v434 + 144);
                    v683 = *(_QWORD *)(v434 + 192);
                    v681 = v439;
                    v682 = v438;
                    v680 = v440;
                    v441 = *(__n128 *)(v434 + 16);
                    v442 = *(__n128 *)(v434 + 32);
                    v443 = *(_OWORD *)(v434 + 64);
                    v675 = *(_OWORD *)(v434 + 48);
                    v676 = v443;
                    v673 = v441;
                    v674 = v442;
                    do
                    {
                      v444 = v432;
                      *(_OWORD *)v433 = *(_OWORD *)v432;
                      v445 = *(_OWORD *)(v432 + 128);
                      v447 = *(_OWORD *)(v432 + 80);
                      v446 = *(_OWORD *)(v432 + 96);
                      *(_OWORD *)(v433 + 112) = *(_OWORD *)(v432 + 112);
                      *(_OWORD *)(v433 + 128) = v445;
                      *(_OWORD *)(v433 + 80) = v447;
                      *(_OWORD *)(v433 + 96) = v446;
                      v449 = *(_OWORD *)(v432 + 160);
                      v448 = *(_OWORD *)(v432 + 176);
                      v450 = *(_OWORD *)(v432 + 144);
                      *(_QWORD *)(v433 + 192) = *(_QWORD *)(v432 + 192);
                      *(_OWORD *)(v433 + 160) = v449;
                      *(_OWORD *)(v433 + 176) = v448;
                      *(_OWORD *)(v433 + 144) = v450;
                      v451 = *(_OWORD *)(v432 + 16);
                      v452 = *(_OWORD *)(v432 + 32);
                      v453 = *(_OWORD *)(v432 + 64);
                      *(_OWORD *)(v433 + 48) = *(_OWORD *)(v432 + 48);
                      *(_OWORD *)(v433 + 64) = v453;
                      *(_OWORD *)(v433 + 16) = v451;
                      *(_OWORD *)(v433 + 32) = v452;
                      if (v420 < v431)
                        break;
                      v454 = (2 * v431) | 1;
                      v432 = v661 + 200 * v454;
                      v455 = 2 * v431 + 2;
                      if (v455 < (uint64_t)v9 && sub_2237843D8(v661 + 200 * v454, v432 + 200))
                      {
                        v432 += 200;
                        v454 = v455;
                      }
                      v433 = v444;
                      v431 = v454;
                    }
                    while (!sub_2237843D8(v432, (uint64_t)&v672));
                    *(int8x16_t *)v444 = v672;
                    v422 = v679;
                    v424 = *(_OWORD *)v677;
                    v423 = *(_OWORD *)&v677[16];
                    *(_OWORD *)(v444 + 112) = v678;
                    *(_OWORD *)(v444 + 128) = v422;
                    *(_OWORD *)(v444 + 80) = v424;
                    *(_OWORD *)(v444 + 96) = v423;
                    v426 = v681;
                    v425 = v682;
                    v427 = v680;
                    *(_QWORD *)(v444 + 192) = v683;
                    *(_OWORD *)(v444 + 160) = v426;
                    *(_OWORD *)(v444 + 176) = v425;
                    *(_OWORD *)(v444 + 144) = v427;
                    a5 = v673;
                    v428 = v674;
                    v429 = v676;
                    *(_OWORD *)(v444 + 48) = v675;
                    *(_OWORD *)(v444 + 64) = v429;
                    *(__n128 *)(v444 + 16) = a5;
                    *(__n128 *)(v444 + 32) = v428;
                    a1 = v661;
                  }
                }
                v421 = v430 - 1;
              }
              while (v430);
              v513 = v8 / 0xC8uLL;
              v514 = a1 + 16;
              do
              {
                if (v513 >= 2)
                {
                  v523 = 0;
                  v662 = *(int8x16_t *)a1;
                  v524 = *(_OWORD *)(v514 + 48);
                  v526 = *(__n128 *)v514;
                  v525 = *(_OWORD *)(v514 + 16);
                  *(_OWORD *)v665 = *(_OWORD *)(v514 + 32);
                  *(_OWORD *)&v665[16] = v524;
                  v663 = v526;
                  v664 = v525;
                  v527 = *(_OWORD *)(v514 + 112);
                  v529 = *(_OWORD *)(v514 + 64);
                  v528 = *(_OWORD *)(v514 + 80);
                  v666 = *(_OWORD *)(v514 + 96);
                  v667 = v527;
                  *(_OWORD *)&v665[32] = v529;
                  *(_OWORD *)&v665[48] = v528;
                  v531 = *(_OWORD *)(v514 + 144);
                  v530 = *(_OWORD *)(v514 + 160);
                  v532 = *(_OWORD *)(v514 + 128);
                  v671 = *(_QWORD *)(v514 + 176);
                  v669 = v531;
                  v670 = v530;
                  v668 = v532;
                  v533 = a1;
                  do
                  {
                    v543 = v533 + 200 * v523 + 200;
                    v544 = (2 * v523) | 1;
                    v545 = 2 * v523 + 2;
                    if (v545 < v513 && sub_2237843D8(v533 + 200 * v523 + 200, v533 + 200 * v523 + 400))
                    {
                      v543 += 200;
                      v544 = v545;
                    }
                    *(_OWORD *)v533 = *(_OWORD *)v543;
                    v534 = *(_OWORD *)(v543 + 128);
                    v536 = *(_OWORD *)(v543 + 80);
                    v535 = *(_OWORD *)(v543 + 96);
                    *(_OWORD *)(v533 + 112) = *(_OWORD *)(v543 + 112);
                    *(_OWORD *)(v533 + 128) = v534;
                    *(_OWORD *)(v533 + 80) = v536;
                    *(_OWORD *)(v533 + 96) = v535;
                    v538 = *(_OWORD *)(v543 + 160);
                    v537 = *(_OWORD *)(v543 + 176);
                    v539 = *(_OWORD *)(v543 + 144);
                    *(_QWORD *)(v533 + 192) = *(_QWORD *)(v543 + 192);
                    *(_OWORD *)(v533 + 160) = v538;
                    *(_OWORD *)(v533 + 176) = v537;
                    *(_OWORD *)(v533 + 144) = v539;
                    v540 = *(_OWORD *)(v543 + 16);
                    v541 = *(_OWORD *)(v543 + 32);
                    v542 = *(_OWORD *)(v543 + 64);
                    *(_OWORD *)(v533 + 48) = *(_OWORD *)(v543 + 48);
                    *(_OWORD *)(v533 + 64) = v542;
                    *(_OWORD *)(v533 + 16) = v540;
                    *(_OWORD *)(v533 + 32) = v541;
                    v533 = v543;
                    v523 = v544;
                  }
                  while (v544 <= (uint64_t)((unint64_t)(v513 - 2) >> 1));
                  v546 = (__n128 *)(v543 + 16);
                  v547 = (int8x16_t *)(a2 - 200);
                  if (v543 == a2 - 200)
                  {
                    *(int8x16_t *)v543 = v662;
                    v515 = v667;
                    v517 = *(_OWORD *)&v665[32];
                    v516 = *(_OWORD *)&v665[48];
                    *(_OWORD *)(v543 + 112) = v666;
                    *(_OWORD *)(v543 + 128) = v515;
                    *(_OWORD *)(v543 + 80) = v517;
                    *(_OWORD *)(v543 + 96) = v516;
                    v519 = v669;
                    v518 = v670;
                    v520 = v668;
                    *(_QWORD *)(v543 + 192) = v671;
                    *(_OWORD *)(v543 + 160) = v519;
                    *(_OWORD *)(v543 + 176) = v518;
                    *(_OWORD *)(v543 + 144) = v520;
                    a5 = v663;
                    v521 = v664;
                    v522 = *(_OWORD *)&v665[16];
                    *(_OWORD *)(v543 + 48) = *(_OWORD *)v665;
                    *(_OWORD *)(v543 + 64) = v522;
                    *v546 = a5;
                    *(_OWORD *)(v543 + 32) = v521;
                  }
                  else
                  {
                    *(int8x16_t *)v543 = *v547;
                    v548 = *(_OWORD *)(a2 - 104);
                    v549 = *(_OWORD *)(a2 - 72);
                    v550 = *(_OWORD *)(a2 - 120);
                    *(_OWORD *)(v543 + 112) = *(_OWORD *)(a2 - 88);
                    *(_OWORD *)(v543 + 128) = v549;
                    *(_OWORD *)(v543 + 80) = v550;
                    *(_OWORD *)(v543 + 96) = v548;
                    v551 = *(_OWORD *)(a2 - 40);
                    v552 = *(_OWORD *)(a2 - 24);
                    v553 = *(_OWORD *)(a2 - 56);
                    *(_QWORD *)(v543 + 192) = *(_QWORD *)(a2 - 8);
                    *(_OWORD *)(v543 + 160) = v551;
                    *(_OWORD *)(v543 + 176) = v552;
                    *(_OWORD *)(v543 + 144) = v553;
                    v554 = *(__n128 *)(a2 - 184);
                    v555 = *(_OWORD *)(a2 - 168);
                    v556 = *(_OWORD *)(a2 - 136);
                    *(_OWORD *)(v543 + 48) = *(_OWORD *)(a2 - 152);
                    *(_OWORD *)(v543 + 64) = v556;
                    *v546 = v554;
                    *(_OWORD *)(v543 + 32) = v555;
                    *v547 = v662;
                    v557 = v666;
                    v558 = v667;
                    v559 = *(_OWORD *)&v665[48];
                    *(_OWORD *)(a2 - 120) = *(_OWORD *)&v665[32];
                    *(_OWORD *)(a2 - 72) = v558;
                    *(_OWORD *)(a2 - 88) = v557;
                    *(_OWORD *)(a2 - 104) = v559;
                    v561 = v669;
                    v560 = v670;
                    v562 = v671;
                    *(_OWORD *)(a2 - 56) = v668;
                    *(_QWORD *)(a2 - 8) = v562;
                    *(_OWORD *)(a2 - 24) = v560;
                    *(_OWORD *)(a2 - 40) = v561;
                    a5 = v663;
                    v563 = v664;
                    v564 = *(_OWORD *)v665;
                    *(_OWORD *)(a2 - 136) = *(_OWORD *)&v665[16];
                    *(_OWORD *)(a2 - 152) = v564;
                    *(_OWORD *)(a2 - 168) = v563;
                    *(__n128 *)(a2 - 184) = a5;
                    v565 = v543 - v661 + 200;
                    if (v565 >= 201)
                    {
                      v566 = (v565 / 0xC8uLL - 2) >> 1;
                      v567 = v661 + 200 * v566;
                      if (sub_2237843D8(v567, v543))
                      {
                        v672 = *(int8x16_t *)v543;
                        v568 = *(_OWORD *)(v543 + 128);
                        v570 = *(_OWORD *)(v543 + 80);
                        v569 = *(_OWORD *)(v543 + 96);
                        v678 = *(_OWORD *)(v543 + 112);
                        v679 = v568;
                        *(_OWORD *)v677 = v570;
                        *(_OWORD *)&v677[16] = v569;
                        v572 = *(_OWORD *)(v543 + 160);
                        v571 = *(_OWORD *)(v543 + 176);
                        v573 = *(_OWORD *)(v543 + 144);
                        v683 = *(_QWORD *)(v543 + 192);
                        v681 = v572;
                        v682 = v571;
                        v680 = v573;
                        v574 = *v546;
                        v575 = *(__n128 *)(v543 + 32);
                        v576 = *(_OWORD *)(v543 + 64);
                        v675 = *(_OWORD *)(v543 + 48);
                        v676 = v576;
                        v673 = v574;
                        v674 = v575;
                        do
                        {
                          v577 = v567;
                          *(_OWORD *)v543 = *(_OWORD *)v567;
                          v578 = *(_OWORD *)(v567 + 128);
                          v580 = *(_OWORD *)(v567 + 80);
                          v579 = *(_OWORD *)(v567 + 96);
                          *(_OWORD *)(v543 + 112) = *(_OWORD *)(v567 + 112);
                          *(_OWORD *)(v543 + 128) = v578;
                          *(_OWORD *)(v543 + 80) = v580;
                          *(_OWORD *)(v543 + 96) = v579;
                          v582 = *(_OWORD *)(v567 + 160);
                          v581 = *(_OWORD *)(v567 + 176);
                          v583 = *(_OWORD *)(v567 + 144);
                          *(_QWORD *)(v543 + 192) = *(_QWORD *)(v567 + 192);
                          *(_OWORD *)(v543 + 160) = v582;
                          *(_OWORD *)(v543 + 176) = v581;
                          *(_OWORD *)(v543 + 144) = v583;
                          v584 = *(_OWORD *)(v567 + 16);
                          v585 = *(_OWORD *)(v567 + 32);
                          v586 = *(_OWORD *)(v567 + 64);
                          *(_OWORD *)(v543 + 48) = *(_OWORD *)(v567 + 48);
                          *(_OWORD *)(v543 + 64) = v586;
                          *(_OWORD *)(v543 + 16) = v584;
                          *(_OWORD *)(v543 + 32) = v585;
                          if (!v566)
                            break;
                          v566 = (v566 - 1) >> 1;
                          v567 = v661 + 200 * v566;
                          v543 = v577;
                        }
                        while ((sub_2237843D8(v567, (uint64_t)&v672) & 1) != 0);
                        *(int8x16_t *)v577 = v672;
                        v587 = v679;
                        v589 = *(_OWORD *)v677;
                        v588 = *(_OWORD *)&v677[16];
                        *(_OWORD *)(v577 + 112) = v678;
                        *(_OWORD *)(v577 + 128) = v587;
                        *(_OWORD *)(v577 + 80) = v589;
                        *(_OWORD *)(v577 + 96) = v588;
                        v591 = v681;
                        v590 = v682;
                        v592 = v680;
                        *(_QWORD *)(v577 + 192) = v683;
                        *(_OWORD *)(v577 + 160) = v591;
                        *(_OWORD *)(v577 + 176) = v590;
                        *(_OWORD *)(v577 + 144) = v592;
                        a5 = v673;
                        v593 = v674;
                        v594 = v676;
                        *(_OWORD *)(v577 + 48) = v675;
                        *(_OWORD *)(v577 + 64) = v594;
                        *(__n128 *)(v577 + 16) = a5;
                        *(__n128 *)(v577 + 32) = v593;
                      }
                    }
                  }
                  a1 = v661;
                }
                a2 -= 200;
                v55 = (unint64_t)v513-- > 2;
              }
              while (v55);
            }
            return a5.n128_f64[0];
          }
          v658 = a3;
          v10 = v9 >> 1;
          v11 = (_OWORD *)(a1 + 200 * (v9 >> 1));
          if ((unint64_t)v8 < 0x6401)
          {
            sub_223784580(a1 + 200 * (v9 >> 1), a1, (uint64_t)v657);
            v7 = a2;
            a3 = v658 - 1;
            if ((a4 & 1) != 0)
              goto LABEL_10;
          }
          else
          {
            sub_223784580(a1, a1 + 200 * (v9 >> 1), (uint64_t)v657);
            v12 = 200 * v10;
            v13 = a1 + 200 * v10;
            sub_223784580(a1 + 200, v13 - 200, a2 - 400);
            sub_223784580(a1 + 400, a1 + 200 + v12, a2 - 600);
            sub_223784580(v13 - 200, (uint64_t)v11, a1 + 200 + v12);
            v14 = *(__n128 *)(a1 + 16);
            v672 = *(int8x16_t *)a1;
            v15 = *(__n128 *)(a1 + 32);
            v16 = *(_OWORD *)(a1 + 64);
            v675 = *(_OWORD *)(a1 + 48);
            v676 = v16;
            v673 = v14;
            v674 = v15;
            v17 = *(_OWORD *)(a1 + 128);
            v19 = *(_OWORD *)(a1 + 80);
            v18 = *(_OWORD *)(a1 + 96);
            v678 = *(_OWORD *)(a1 + 112);
            v679 = v17;
            *(_OWORD *)v677 = v19;
            *(_OWORD *)&v677[16] = v18;
            v21 = *(_OWORD *)(a1 + 160);
            v20 = *(_OWORD *)(a1 + 176);
            v22 = *(_OWORD *)(a1 + 144);
            v683 = *(_QWORD *)(a1 + 192);
            v681 = v21;
            v682 = v20;
            v680 = v22;
            v23 = *(_OWORD *)(v13 + 48);
            v24 = *(_OWORD *)(v13 + 64);
            v26 = *(_OWORD *)(v13 + 16);
            v25 = *(_OWORD *)(v13 + 32);
            *(_OWORD *)a1 = *v11;
            *(_OWORD *)(a1 + 16) = v26;
            *(_OWORD *)(a1 + 48) = v23;
            *(_OWORD *)(a1 + 64) = v24;
            *(_OWORD *)(a1 + 32) = v25;
            v27 = *(_OWORD *)(v13 + 128);
            v29 = *(_OWORD *)(v13 + 80);
            v28 = *(_OWORD *)(v13 + 96);
            *(_OWORD *)(a1 + 112) = *(_OWORD *)(v13 + 112);
            *(_OWORD *)(a1 + 128) = v27;
            *(_OWORD *)(a1 + 80) = v29;
            *(_OWORD *)(a1 + 96) = v28;
            v31 = *(_OWORD *)(v13 + 160);
            v30 = *(_OWORD *)(v13 + 176);
            v32 = *(_OWORD *)(v13 + 144);
            *(_QWORD *)(a1 + 192) = *(_QWORD *)(v13 + 192);
            *(_OWORD *)(a1 + 160) = v31;
            *(_OWORD *)(a1 + 176) = v30;
            *(_OWORD *)(a1 + 144) = v32;
            *v11 = v672;
            v33 = v679;
            v35 = *(_OWORD *)v677;
            v34 = *(_OWORD *)&v677[16];
            *(_OWORD *)(v13 + 112) = v678;
            *(_OWORD *)(v13 + 128) = v33;
            *(_OWORD *)(v13 + 80) = v35;
            *(_OWORD *)(v13 + 96) = v34;
            v37 = v681;
            v36 = v682;
            v38 = v680;
            *(_QWORD *)(v13 + 192) = v683;
            *(_OWORD *)(v13 + 160) = v37;
            *(_OWORD *)(v13 + 176) = v36;
            *(_OWORD *)(v13 + 144) = v38;
            v39 = v673;
            v40 = v674;
            v41 = v676;
            *(_OWORD *)(v13 + 48) = v675;
            *(_OWORD *)(v13 + 64) = v41;
            *(__n128 *)(v13 + 16) = v39;
            *(__n128 *)(v13 + 32) = v40;
            v7 = a2;
            a3 = v658 - 1;
            if ((a4 & 1) != 0)
              goto LABEL_10;
          }
          if ((sub_2237843D8(a1 - 200, a1) & 1) == 0)
          {
            v201 = *(__n128 *)(a1 + 16);
            v662 = *(int8x16_t *)a1;
            v202 = *(_OWORD *)(a1 + 32);
            v203 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)v665 = *(_OWORD *)(a1 + 48);
            *(_OWORD *)&v665[16] = v203;
            v663 = v201;
            v664 = v202;
            v204 = *(_OWORD *)(a1 + 128);
            v206 = *(_OWORD *)(a1 + 80);
            v205 = *(_OWORD *)(a1 + 96);
            v666 = *(_OWORD *)(a1 + 112);
            v667 = v204;
            *(_OWORD *)&v665[32] = v206;
            *(_OWORD *)&v665[48] = v205;
            v208 = *(_OWORD *)(a1 + 160);
            v207 = *(_OWORD *)(a1 + 176);
            v209 = *(_OWORD *)(a1 + 144);
            v671 = *(_QWORD *)(a1 + 192);
            v669 = v208;
            v670 = v207;
            v668 = v209;
            if ((sub_2237843D8((uint64_t)&v662, (uint64_t)v657) & 1) != 0)
            {
              do
                a1 += 200;
              while ((sub_2237843D8((uint64_t)&v662, a1) & 1) == 0);
            }
            else
            {
              v210 = a1 + 200;
              do
              {
                a1 = v210;
                if (v210 >= v7)
                  break;
                v211 = sub_2237843D8((uint64_t)&v662, v210);
                v210 = a1 + 200;
              }
              while (!v211);
            }
            v212 = v7;
            if (a1 < v7)
            {
              v212 = v7;
              do
                v212 -= 200;
              while ((sub_2237843D8((uint64_t)&v662, v212) & 1) != 0);
            }
LABEL_286:
            while (a1 < v212)
            {
              v213 = *(__n128 *)(a1 + 16);
              v672 = *(int8x16_t *)a1;
              v214 = *(__n128 *)(a1 + 32);
              v215 = *(_OWORD *)(a1 + 64);
              v675 = *(_OWORD *)(a1 + 48);
              v676 = v215;
              v673 = v213;
              v674 = v214;
              v216 = *(_OWORD *)(a1 + 128);
              v218 = *(_OWORD *)(a1 + 80);
              v217 = *(_OWORD *)(a1 + 96);
              v678 = *(_OWORD *)(a1 + 112);
              v679 = v216;
              *(_OWORD *)v677 = v218;
              *(_OWORD *)&v677[16] = v217;
              v220 = *(_OWORD *)(a1 + 160);
              v219 = *(_OWORD *)(a1 + 176);
              v221 = *(_OWORD *)(a1 + 144);
              v683 = *(_QWORD *)(a1 + 192);
              v681 = v220;
              v682 = v219;
              v680 = v221;
              *(_OWORD *)a1 = *(_OWORD *)v212;
              v222 = *(_OWORD *)(v212 + 128);
              v224 = *(_OWORD *)(v212 + 80);
              v223 = *(_OWORD *)(v212 + 96);
              *(_OWORD *)(a1 + 112) = *(_OWORD *)(v212 + 112);
              *(_OWORD *)(a1 + 128) = v222;
              *(_OWORD *)(a1 + 80) = v224;
              *(_OWORD *)(a1 + 96) = v223;
              v226 = *(_OWORD *)(v212 + 160);
              v225 = *(_OWORD *)(v212 + 176);
              v227 = *(_OWORD *)(v212 + 144);
              *(_QWORD *)(a1 + 192) = *(_QWORD *)(v212 + 192);
              *(_OWORD *)(a1 + 160) = v226;
              *(_OWORD *)(a1 + 176) = v225;
              *(_OWORD *)(a1 + 144) = v227;
              v228 = *(_OWORD *)(v212 + 16);
              v229 = *(_OWORD *)(v212 + 32);
              v230 = *(_OWORD *)(v212 + 64);
              *(_OWORD *)(a1 + 48) = *(_OWORD *)(v212 + 48);
              *(_OWORD *)(a1 + 64) = v230;
              *(_OWORD *)(a1 + 16) = v228;
              *(_OWORD *)(a1 + 32) = v229;
              *(int8x16_t *)v212 = v672;
              v231 = v679;
              v233 = *(_OWORD *)v677;
              v232 = *(_OWORD *)&v677[16];
              *(_OWORD *)(v212 + 112) = v678;
              *(_OWORD *)(v212 + 128) = v231;
              *(_OWORD *)(v212 + 80) = v233;
              *(_OWORD *)(v212 + 96) = v232;
              v235 = v681;
              v234 = v682;
              v236 = v680;
              *(_QWORD *)(v212 + 192) = v683;
              *(_OWORD *)(v212 + 160) = v235;
              *(_OWORD *)(v212 + 176) = v234;
              *(_OWORD *)(v212 + 144) = v236;
              v237 = v673;
              v238 = v674;
              v239 = v676;
              *(_OWORD *)(v212 + 48) = v675;
              *(_OWORD *)(v212 + 64) = v239;
              *(__n128 *)(v212 + 16) = v237;
              *(__n128 *)(v212 + 32) = v238;
              while (1)
              {
LABEL_201:
                while (1)
                {
                  v240 = a1;
                  a1 += 200;
                  v241 = *(_QWORD *)(v240 + 248);
                  if (*(_QWORD *)v665 == v241)
                    break;
                  if (*(uint64_t *)v665 < v241)
                    goto LABEL_245;
                }
                v242 = *(_QWORD *)(v240 + 256);
                v243 = *(_QWORD *)&v665[8] < v242;
                if (*(_QWORD *)&v665[8] == v242)
                {
                  v244 = *(_QWORD *)(v240 + 264);
                  v243 = *(_QWORD *)&v665[16] < v244;
                  if (*(_QWORD *)&v665[16] == v244)
                    v243 = *(_OWORD *)&v665[24] < *(_OWORD *)(v240 + 272);
                }
                if (v243)
                  break;
                if (*(_QWORD *)&v665[24] == *(_QWORD *)(v240 + 272)
                  && *(_OWORD *)&v665[8] == *(_OWORD *)(v240 + 256)
                  && *(_QWORD *)&v665[32] == *(_QWORD *)(v240 + 280))
                {
                  if (vabdd_f64(*(double *)&v665[56], *(double *)(v240 + 304)) < 50.0
                    && (v672 = *(int8x16_t *)&v665[40],
                        sub_2233E5290((int64_t)&v672),
                        v687 = *(std::logic_error *)(v240 + 288),
                        sub_2233E5290((int64_t)&v687),
                        *(_OWORD *)&v672 == v687)
                    && *(_OWORD *)&v662 == *(_OWORD *)(v240 + 200))
                  {
                    if ((sub_223784F00((uint64_t)&v662, a1) & 1) != 0)
                      goto LABEL_245;
                  }
                  else
                  {
                    v245 = *(double *)(v240 + 304);
                    if (vabdd_f64(*(double *)&v665[56], v245) >= 50.0)
                    {
                      if (*(double *)&v665[56] < v245)
                        goto LABEL_245;
                    }
                    else
                    {
                      v672 = *(int8x16_t *)&v665[40];
                      sub_2233E5290((int64_t)&v672);
                      v687 = *(std::logic_error *)(v240 + 288);
                      sub_2233E5290((int64_t)&v687);
                      v246 = v672.i64[1];
                      v247 = v672.i64[0] / v672.i64[1];
                      v248 = v672.i64[0] % v672.i64[1];
                      if (v672.i64[0] % v672.i64[1] < 0)
                      {
                        v250 = ((unint64_t)(v672.i64[1] + v248) >> 63)
                             + (((v672.i64[1] + v248) & ~((v672.i64[1] + v248) >> 63))
                              - (((unint64_t)(v672.i64[1] + v248) >> 63)
                               + v672.i64[1]
                               + v248))
                             / v672.i64[1]
                             + 1;
                        v249.i64[0] = -1;
                        v249.i64[1] = -1;
                        if (v250 < 4)
                          goto LABEL_451;
                        v248 += (v250 & 0xFFFFFFFFFFFFFFFCLL) * v672.i64[1];
                        v251 = 0uLL;
                        v252 = (int64x2_t)(unint64_t)(v672.i64[0] / v672.i64[1]);
                        v253 = v250 & 0xFFFFFFFFFFFFFFFCLL;
                        do
                        {
                          v252 = vaddq_s64(v252, v249);
                          v251 = vaddq_s64(v251, v249);
                          v253 -= 4;
                        }
                        while (v253);
                        v247 = vaddvq_s64(vaddq_s64(v251, v252));
                        if (v250 != (v250 & 0xFFFFFFFFFFFFFFFCLL))
                        {
LABEL_451:
                          do
                          {
                            v248 += v672.i64[1];
                            --v247;
                          }
                          while (v248 < 0);
                        }
                      }
                      else
                      {
                        v249.i64[0] = -1;
                        v249.i64[1] = -1;
                      }
                      imp = v687.__imp_.__imp_;
                      v255 = (uint64_t)v687.__vftable / (uint64_t)v687.__imp_.__imp_;
                      v256 = (uint64_t)v687.__vftable % (uint64_t)v687.__imp_.__imp_;
                      if ((uint64_t)v687.__vftable % (uint64_t)v687.__imp_.__imp_ < 0)
                      {
                        v257 = ((unint64_t)&v687.__imp_.__imp_[v256] >> 63)
                             + (((uint64_t)&v687.__imp_.__imp_[v256] & ~((uint64_t)&v687.__imp_.__imp_[v256] >> 63))
                              - (unint64_t)&v687.__imp_.__imp_[v256
                                                                    + ((unint64_t)&v687.__imp_.__imp_[v256] >> 63)])
                             / (unint64_t)v687.__imp_.__imp_
                             + 1;
                        if (v257 < 4)
                          goto LABEL_452;
                        v256 += (v257 & 0xFFFFFFFFFFFFFFFCLL) * (unint64_t)v687.__imp_.__imp_;
                        v258 = 0uLL;
                        v259 = (int64x2_t)(unint64_t)((uint64_t)v687.__vftable / (uint64_t)v687.__imp_.__imp_);
                        v260 = v257 & 0xFFFFFFFFFFFFFFFCLL;
                        do
                        {
                          v259 = vaddq_s64(v259, v249);
                          v258 = vaddq_s64(v258, v249);
                          v260 -= 4;
                        }
                        while (v260);
                        v255 = vaddvq_s64(vaddq_s64(v258, v259));
                        if (v257 != (v257 & 0xFFFFFFFFFFFFFFFCLL))
                        {
LABEL_452:
                          do
                          {
                            v256 += (uint64_t)v687.__imp_.__imp_;
                            --v255;
                          }
                          while (v256 < 0);
                        }
                      }
                      v261 = v247 < v255;
                      if (v247 == v255)
                      {
                        v262 = 0;
                        do
                        {
                          v263 = v248;
                          v264 = (const char *)v256;
                          v262 ^= 1u;
                          if (!v248 || !v256)
                          {
                            if (v248 != v256 && (v262 != 0) != (v248 != 0))
                              goto LABEL_245;
                            goto LABEL_201;
                          }
                          v265 = v246 / v248;
                          v248 = v246 % v248;
                          v266 = (uint64_t)imp / v256;
                          v256 = (uint64_t)imp % v256;
                          imp = v264;
                          v246 = v263;
                        }
                        while (v265 == v266);
                        v261 = v265 < v266;
                        if (!v262)
                          goto LABEL_238;
                        if (v265 > v266)
                          goto LABEL_245;
                      }
                      else
                      {
LABEL_238:
                        if (v261)
                          goto LABEL_245;
                      }
                    }
                  }
                }
              }
              while (1)
              {
                do
                {
LABEL_245:
                  while (1)
                  {
                    v267 = v212;
                    v212 -= 200;
                    v268 = *(_QWORD *)(v267 - 152);
                    if (*(_QWORD *)v665 == v268)
                      break;
                    if (*(uint64_t *)v665 >= v268)
                      goto LABEL_286;
                  }
                  v269 = *(_QWORD *)(v267 - 144);
                  v270 = *(_QWORD *)&v665[8] < v269;
                  if (*(_QWORD *)&v665[8] == v269)
                  {
                    v271 = *(_QWORD *)(v267 - 136);
                    v270 = *(_QWORD *)&v665[16] < v271;
                    if (*(_QWORD *)&v665[16] == v271)
                      v270 = *(_OWORD *)&v665[24] < *(_OWORD *)(v267 - 128);
                  }
                }
                while (v270);
                if (*(_QWORD *)&v665[24] != *(_QWORD *)(v267 - 128)
                  || *(_OWORD *)&v665[8] != *(_OWORD *)(v267 - 144)
                  || *(_QWORD *)&v665[32] != *(_QWORD *)(v267 - 120))
                {
                  break;
                }
                if (vabdd_f64(*(double *)&v665[56], *(double *)(v267 - 96)) < 50.0
                  && (v672 = *(int8x16_t *)&v665[40],
                      sub_2233E5290((int64_t)&v672),
                      v687 = *(std::logic_error *)(v267 - 112),
                      sub_2233E5290((int64_t)&v687),
                      *(_OWORD *)&v672 == v687)
                  && *(_OWORD *)&v662 == *(_OWORD *)(v267 - 200))
                {
                  if ((sub_223784F00((uint64_t)&v662, v212) & 1) == 0)
                    goto LABEL_286;
                }
                else
                {
                  v272 = *(double *)(v267 - 96);
                  if (vabdd_f64(*(double *)&v665[56], v272) >= 50.0)
                  {
                    if (*(double *)&v665[56] >= v272)
                      goto LABEL_286;
                  }
                  else
                  {
                    v672 = *(int8x16_t *)&v665[40];
                    sub_2233E5290((int64_t)&v672);
                    v687 = *(std::logic_error *)(v267 - 112);
                    sub_2233E5290((int64_t)&v687);
                    v273 = v672.i64[1];
                    v274 = v672.i64[0] / v672.i64[1];
                    v275 = v672.i64[0] % v672.i64[1];
                    if (v672.i64[0] % v672.i64[1] < 0)
                    {
                      v277 = ((unint64_t)(v672.i64[1] + v275) >> 63)
                           + (((v672.i64[1] + v275) & ~((v672.i64[1] + v275) >> 63))
                            - (((unint64_t)(v672.i64[1] + v275) >> 63)
                             + v672.i64[1]
                             + v275))
                           / v672.i64[1]
                           + 1;
                      v276.i64[0] = -1;
                      v276.i64[1] = -1;
                      if (v277 < 4)
                        goto LABEL_453;
                      v275 += (v277 & 0xFFFFFFFFFFFFFFFCLL) * v672.i64[1];
                      v278 = 0uLL;
                      v279 = (int64x2_t)(unint64_t)(v672.i64[0] / v672.i64[1]);
                      v280 = v277 & 0xFFFFFFFFFFFFFFFCLL;
                      do
                      {
                        v279 = vaddq_s64(v279, v276);
                        v278 = vaddq_s64(v278, v276);
                        v280 -= 4;
                      }
                      while (v280);
                      v274 = vaddvq_s64(vaddq_s64(v278, v279));
                      if (v277 != (v277 & 0xFFFFFFFFFFFFFFFCLL))
                      {
LABEL_453:
                        do
                        {
                          v275 += v672.i64[1];
                          --v274;
                        }
                        while (v275 < 0);
                      }
                    }
                    else
                    {
                      v276.i64[0] = -1;
                      v276.i64[1] = -1;
                    }
                    v281 = v687.__imp_.__imp_;
                    v282 = (uint64_t)v687.__vftable / (uint64_t)v687.__imp_.__imp_;
                    v283 = (uint64_t)v687.__vftable % (uint64_t)v687.__imp_.__imp_;
                    if ((uint64_t)v687.__vftable % (uint64_t)v687.__imp_.__imp_ < 0)
                    {
                      v284 = ((unint64_t)&v687.__imp_.__imp_[v283] >> 63)
                           + (((uint64_t)&v687.__imp_.__imp_[v283] & ~((uint64_t)&v687.__imp_.__imp_[v283] >> 63))
                            - (unint64_t)&v687.__imp_.__imp_[v283
                                                                  + ((unint64_t)&v687.__imp_.__imp_[v283] >> 63)])
                           / (unint64_t)v687.__imp_.__imp_
                           + 1;
                      if (v284 < 4)
                        goto LABEL_454;
                      v283 += (v284 & 0xFFFFFFFFFFFFFFFCLL) * (unint64_t)v687.__imp_.__imp_;
                      v285 = 0uLL;
                      v286 = (int64x2_t)(unint64_t)((uint64_t)v687.__vftable / (uint64_t)v687.__imp_.__imp_);
                      v287 = v284 & 0xFFFFFFFFFFFFFFFCLL;
                      do
                      {
                        v286 = vaddq_s64(v286, v276);
                        v285 = vaddq_s64(v285, v276);
                        v287 -= 4;
                      }
                      while (v287);
                      v282 = vaddvq_s64(vaddq_s64(v285, v286));
                      if (v284 != (v284 & 0xFFFFFFFFFFFFFFFCLL))
                      {
LABEL_454:
                        do
                        {
                          v283 += (uint64_t)v687.__imp_.__imp_;
                          --v282;
                        }
                        while (v283 < 0);
                      }
                    }
                    v288 = v274 < v282;
                    if (v274 == v282)
                    {
                      v289 = 0;
                      do
                      {
                        v290 = v275;
                        v291 = (const char *)v283;
                        v289 ^= 1u;
                        if (!v275 || !v283)
                        {
                          if (v275 != v283 && (v289 != 0) != (v275 != 0))
                            goto LABEL_245;
                          goto LABEL_286;
                        }
                        v292 = v273 / v275;
                        v275 = v273 % v275;
                        v293 = (uint64_t)v281 / v283;
                        v283 = (uint64_t)v281 % v283;
                        v281 = v291;
                        v273 = v290;
                      }
                      while (v292 == v293);
                      v288 = v292 < v293;
                      if (!v289)
                        goto LABEL_282;
                      if (v292 > v293)
                        goto LABEL_245;
                      goto LABEL_286;
                    }
LABEL_282:
                    if (!v288)
                      goto LABEL_286;
                  }
                }
              }
            }
            v294 = (int8x16_t *)(a1 - 200);
            if (a1 - 200 != v661)
            {
              *(int8x16_t *)v661 = *v294;
              v295 = *(_OWORD *)(a1 - 104);
              v296 = *(_OWORD *)(a1 - 72);
              v297 = *(_OWORD *)(a1 - 120);
              *(_OWORD *)(v661 + 112) = *(_OWORD *)(a1 - 88);
              *(_OWORD *)(v661 + 128) = v296;
              *(_OWORD *)(v661 + 80) = v297;
              *(_OWORD *)(v661 + 96) = v295;
              v298 = *(_OWORD *)(a1 - 40);
              v299 = *(_OWORD *)(a1 - 24);
              v300 = *(_OWORD *)(a1 - 56);
              *(_QWORD *)(v661 + 192) = *(_QWORD *)(a1 - 8);
              *(_OWORD *)(v661 + 160) = v298;
              *(_OWORD *)(v661 + 176) = v299;
              *(_OWORD *)(v661 + 144) = v300;
              v301 = *(_OWORD *)(a1 - 184);
              v302 = *(_OWORD *)(a1 - 168);
              v303 = *(_OWORD *)(a1 - 136);
              *(_OWORD *)(v661 + 48) = *(_OWORD *)(a1 - 152);
              *(_OWORD *)(v661 + 64) = v303;
              *(_OWORD *)(v661 + 16) = v301;
              *(_OWORD *)(v661 + 32) = v302;
            }
            a4 = 0;
            *v294 = v662;
            v304 = v666;
            v305 = v667;
            v306 = *(_OWORD *)&v665[48];
            *(_OWORD *)(a1 - 120) = *(_OWORD *)&v665[32];
            *(_OWORD *)(a1 - 72) = v305;
            *(_OWORD *)(a1 - 88) = v304;
            *(_OWORD *)(a1 - 104) = v306;
            v308 = v669;
            v307 = v670;
            v309 = v668;
            *(_QWORD *)(a1 - 8) = v671;
            *(_OWORD *)(a1 - 56) = v309;
            *(_OWORD *)(a1 - 24) = v307;
            *(_OWORD *)(a1 - 40) = v308;
            a5 = v663;
            v310 = v664;
            v311 = *(_OWORD *)v665;
            *(_OWORD *)(a1 - 136) = *(_OWORD *)&v665[16];
            *(_OWORD *)(a1 - 152) = v311;
            *(_OWORD *)(a1 - 168) = v310;
            *(__n128 *)(a1 - 184) = a5;
            continue;
          }
LABEL_10:
          v42 = *(__n128 *)(a1 + 16);
          v662 = *(int8x16_t *)a1;
          v659 = a1 + 16;
          v43 = *(_OWORD *)(a1 + 32);
          v44 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)v665 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v665[16] = v44;
          v663 = v42;
          v664 = v43;
          v45 = *(_OWORD *)(a1 + 128);
          v47 = *(_OWORD *)(a1 + 80);
          v46 = *(_OWORD *)(a1 + 96);
          v666 = *(_OWORD *)(a1 + 112);
          v667 = v45;
          *(_OWORD *)&v665[32] = v47;
          *(_OWORD *)&v665[48] = v46;
          v49 = *(_OWORD *)(a1 + 160);
          v48 = *(_OWORD *)(a1 + 176);
          v50 = *(_OWORD *)(a1 + 144);
          v671 = *(_QWORD *)(a1 + 192);
          v669 = v49;
          v670 = v48;
          v668 = v50;
          v51 = a1;
          while (1)
          {
            do
            {
LABEL_12:
              while (1)
              {
                v52 = v51;
                v51 += 200;
                v53 = *(_QWORD *)(v52 + 248);
                if (v53 == *(_QWORD *)v665)
                  break;
                if (v53 >= *(uint64_t *)v665)
                  goto LABEL_53;
              }
              v54 = *(_QWORD *)(v52 + 256);
              v55 = v54 < *(_QWORD *)&v665[8];
              if (v54 == *(_QWORD *)&v665[8])
              {
                v56 = *(_QWORD *)(v52 + 264);
                v55 = v56 < *(_QWORD *)&v665[16];
                if (v56 == *(_QWORD *)&v665[16])
                  v55 = *(_OWORD *)(v52 + 272) < *(_OWORD *)&v665[24];
              }
            }
            while (v55);
            if (*(_QWORD *)(v52 + 272) != *(_QWORD *)&v665[24]
              || *(_OWORD *)(v52 + 256) != *(_OWORD *)&v665[8]
              || *(_QWORD *)(v52 + 280) != *(_QWORD *)&v665[32])
            {
              break;
            }
            if (vabdd_f64(*(double *)(v52 + 304), *(double *)&v665[56]) < 50.0
              && (v672 = *(int8x16_t *)(v52 + 288),
                  sub_2233E5290((int64_t)&v672),
                  v687 = *(std::logic_error *)&v665[40],
                  sub_2233E5290((int64_t)&v687),
                  *(_OWORD *)&v672 == v687)
              && *(_OWORD *)(v52 + 200) == *(_OWORD *)&v662)
            {
              if ((sub_223784F00(v51, (uint64_t)&v662) & 1) == 0)
                break;
            }
            else
            {
              v57 = *(double *)(v52 + 304);
              if (vabdd_f64(v57, *(double *)&v665[56]) >= 50.0)
              {
                if (v57 >= *(double *)&v665[56])
                  break;
              }
              else
              {
                v672 = *(int8x16_t *)(v52 + 288);
                sub_2233E5290((int64_t)&v672);
                v687 = *(std::logic_error *)&v665[40];
                sub_2233E5290((int64_t)&v687);
                v58 = v672.i64[1];
                v59 = v672.i64[0] / v672.i64[1];
                v60 = v672.i64[0] % v672.i64[1];
                if (v672.i64[0] % v672.i64[1] < 0)
                {
                  v62 = ((unint64_t)(v672.i64[1] + v60) >> 63)
                      + (((v672.i64[1] + v60) & ~((v672.i64[1] + v60) >> 63))
                       - (((unint64_t)(v672.i64[1] + v60) >> 63)
                        + v672.i64[1]
                        + v60))
                      / v672.i64[1]
                      + 1;
                  v61.i64[0] = -1;
                  v61.i64[1] = -1;
                  if (v62 < 4)
                    goto LABEL_455;
                  v60 += (v62 & 0xFFFFFFFFFFFFFFFCLL) * v672.i64[1];
                  v63 = 0uLL;
                  v64 = (int64x2_t)(unint64_t)(v672.i64[0] / v672.i64[1]);
                  v65 = v62 & 0xFFFFFFFFFFFFFFFCLL;
                  do
                  {
                    v64 = vaddq_s64(v64, v61);
                    v63 = vaddq_s64(v63, v61);
                    v65 -= 4;
                  }
                  while (v65);
                  v59 = vaddvq_s64(vaddq_s64(v63, v64));
                  if (v62 != (v62 & 0xFFFFFFFFFFFFFFFCLL))
                  {
LABEL_455:
                    do
                    {
                      v60 += v672.i64[1];
                      --v59;
                    }
                    while (v60 < 0);
                  }
                }
                else
                {
                  v61.i64[0] = -1;
                  v61.i64[1] = -1;
                }
                v66 = v687.__imp_.__imp_;
                v67 = (uint64_t)v687.__vftable / (uint64_t)v687.__imp_.__imp_;
                v68 = (uint64_t)v687.__vftable % (uint64_t)v687.__imp_.__imp_;
                if ((uint64_t)v687.__vftable % (uint64_t)v687.__imp_.__imp_ < 0)
                {
                  v69 = ((unint64_t)&v687.__imp_.__imp_[v68] >> 63)
                      + (((uint64_t)&v687.__imp_.__imp_[v68] & ~((uint64_t)&v687.__imp_.__imp_[v68] >> 63))
                       - (unint64_t)&v687.__imp_.__imp_[v68 + ((unint64_t)&v687.__imp_.__imp_[v68] >> 63)])
                      / (unint64_t)v687.__imp_.__imp_
                      + 1;
                  if (v69 < 4)
                    goto LABEL_456;
                  v68 += (v69 & 0xFFFFFFFFFFFFFFFCLL) * (unint64_t)v687.__imp_.__imp_;
                  v70 = 0uLL;
                  v71 = (int64x2_t)(unint64_t)((uint64_t)v687.__vftable / (uint64_t)v687.__imp_.__imp_);
                  v72 = v69 & 0xFFFFFFFFFFFFFFFCLL;
                  do
                  {
                    v71 = vaddq_s64(v71, v61);
                    v70 = vaddq_s64(v70, v61);
                    v72 -= 4;
                  }
                  while (v72);
                  v67 = vaddvq_s64(vaddq_s64(v70, v71));
                  if (v69 != (v69 & 0xFFFFFFFFFFFFFFFCLL))
                  {
LABEL_456:
                    do
                    {
                      v68 += (uint64_t)v687.__imp_.__imp_;
                      --v67;
                    }
                    while (v68 < 0);
                  }
                }
                v73 = v59 < v67;
                if (v59 == v67)
                {
                  v74 = 0;
                  do
                  {
                    v75 = v60;
                    v76 = (const char *)v68;
                    v74 ^= 1u;
                    if (!v60 || !v68)
                    {
                      if (v60 != v68 && (v74 != 0) != (v60 != 0))
                        goto LABEL_12;
                      goto LABEL_53;
                    }
                    v77 = v58 / v60;
                    v60 = v58 % v60;
                    v78 = (uint64_t)v66 / v68;
                    v68 = (uint64_t)v66 % v68;
                    v66 = v76;
                    v58 = v75;
                  }
                  while (v77 == v78);
                  v73 = v77 < v78;
                  if (!v74)
                    goto LABEL_49;
                  if (v77 > v78)
                    goto LABEL_12;
                  break;
                }
LABEL_49:
                if (!v73)
                  break;
              }
            }
          }
LABEL_53:
          v79 = v7;
          if (v52 == a1)
          {
            v79 = v7;
            do
            {
              if (v51 >= v79)
                break;
              v79 -= 200;
            }
            while ((sub_2237843D8(v79, (uint64_t)&v662) & 1) == 0);
          }
          else
          {
            do
              v79 -= 200;
            while (!sub_2237843D8(v79, (uint64_t)&v662));
          }
          a1 = v51;
          if (v51 < v79)
          {
            v80 = v79;
            v81.i64[0] = -1;
            v81.i64[1] = -1;
            do
            {
              v82 = *(__n128 *)(a1 + 16);
              v672 = *(int8x16_t *)a1;
              v83 = *(_OWORD *)(a1 + 160);
              v84 = *(_OWORD *)(a1 + 176);
              v85 = *(_OWORD *)(a1 + 128);
              v680 = *(_OWORD *)(a1 + 144);
              v681 = v83;
              v682 = v84;
              v683 = *(_QWORD *)(a1 + 192);
              v86 = *(_OWORD *)(a1 + 96);
              v87 = *(_OWORD *)(a1 + 112);
              v88 = *(_OWORD *)(a1 + 64);
              *(_OWORD *)v677 = *(_OWORD *)(a1 + 80);
              *(_OWORD *)&v677[16] = v86;
              v678 = v87;
              v679 = v85;
              v89 = *(__n128 *)(a1 + 32);
              v90 = *(_OWORD *)(a1 + 48);
              v673 = v82;
              v674 = v89;
              v675 = v90;
              v676 = v88;
              *(_OWORD *)a1 = *(_OWORD *)v80;
              v92 = *(_OWORD *)(v80 + 48);
              v91 = *(_OWORD *)(v80 + 64);
              v93 = *(_OWORD *)(v80 + 16);
              *(_OWORD *)(a1 + 32) = *(_OWORD *)(v80 + 32);
              *(_OWORD *)(a1 + 48) = v92;
              *(_OWORD *)(a1 + 64) = v91;
              v95 = *(_OWORD *)(v80 + 112);
              v94 = *(_OWORD *)(v80 + 128);
              v96 = *(_OWORD *)(v80 + 96);
              *(_OWORD *)(a1 + 80) = *(_OWORD *)(v80 + 80);
              *(_OWORD *)(a1 + 96) = v96;
              *(_OWORD *)(a1 + 112) = v95;
              *(_OWORD *)(a1 + 128) = v94;
              v97 = *(_QWORD *)(v80 + 192);
              v99 = *(_OWORD *)(v80 + 160);
              v98 = *(_OWORD *)(v80 + 176);
              *(_OWORD *)(a1 + 144) = *(_OWORD *)(v80 + 144);
              *(_OWORD *)(a1 + 160) = v99;
              *(_OWORD *)(a1 + 176) = v98;
              *(_QWORD *)(a1 + 192) = v97;
              *(_OWORD *)(a1 + 16) = v93;
              *(int8x16_t *)v80 = v672;
              v100 = v679;
              v102 = *(_OWORD *)v677;
              v101 = *(_OWORD *)&v677[16];
              *(_OWORD *)(v80 + 112) = v678;
              *(_OWORD *)(v80 + 128) = v100;
              *(_OWORD *)(v80 + 80) = v102;
              *(_OWORD *)(v80 + 96) = v101;
              v104 = v681;
              v103 = v682;
              v105 = v680;
              *(_QWORD *)(v80 + 192) = v683;
              *(_OWORD *)(v80 + 160) = v104;
              *(_OWORD *)(v80 + 176) = v103;
              *(_OWORD *)(v80 + 144) = v105;
              v106 = v673;
              v107 = v674;
              v108 = v676;
              *(_OWORD *)(v80 + 48) = v675;
              *(_OWORD *)(v80 + 64) = v108;
              *(__n128 *)(v80 + 16) = v106;
              *(__n128 *)(v80 + 32) = v107;
              while (1)
              {
                do
                {
LABEL_64:
                  while (1)
                  {
                    v109 = a1;
                    a1 += 200;
                    v110 = *(_QWORD *)(v109 + 248);
                    if (v110 == *(_QWORD *)v665)
                      break;
                    if (v110 >= *(uint64_t *)v665)
                      goto LABEL_140;
                  }
                  v111 = *(_QWORD *)(v109 + 256);
                  v112 = v111 < *(_QWORD *)&v665[8];
                  if (v111 == *(_QWORD *)&v665[8])
                  {
                    v113 = *(_QWORD *)(v109 + 264);
                    v112 = v113 < *(_QWORD *)&v665[16];
                    if (v113 == *(_QWORD *)&v665[16])
                      v112 = *(_OWORD *)(v109 + 272) < *(_OWORD *)&v665[24];
                  }
                }
                while (v112);
                if (*(_QWORD *)(v109 + 272) != *(_QWORD *)&v665[24] || *(_QWORD *)(v109 + 264) != *(_QWORD *)&v665[16])
                  break;
                if (v111 != *(_QWORD *)&v665[8] || *(_QWORD *)(v109 + 280) != *(_QWORD *)&v665[32])
                  break;
                if (vabdd_f64(*(double *)(v109 + 304), *(double *)&v665[56]) >= 50.0)
                  goto LABEL_96;
                v115 = *(_QWORD *)(v109 + 288);
                v116 = *(_QWORD *)(v109 + 296);
                v685 = v115;
                v686 = v116;
                if (!v116)
                {
                  v647 = std::logic_error::logic_error(&v687, "bad rational: zero denominator");
                  v687.__vftable = (std::logic_error_vtbl *)off_24EC36578;
                  v672.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applicat"
                                         "ions/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iP"
                                         "honeOS18.0.Internal.sdk/usr/local/include/boost/rational.hpp";
                  v672.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
                  v673.n128_u64[0] = 892;
                  sub_2233E53EC(v647, &v672);
                }
                if (v115)
                {
                  v117 = sub_2233E544C(&v685, &v686);
                  v118 = v685 / v117;
                  v119 = v686 / v117;
                  v685 /= v117;
                  v686 = v119;
                  if (v119 == 0x8000000000000000)
                  {
                    v651 = std::logic_error::logic_error(&v687, "bad rational: non-zero singular denominator");
                    v687.__vftable = (std::logic_error_vtbl *)off_24EC36578;
                    v672.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applic"
                                           "ations/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDK"
                                           "s/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/rational.hpp";
                    v672.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
                    v673.n128_u64[0] = 906;
                    sub_2233E53EC(v651, &v672);
                  }
                  v81.i64[0] = -1;
                  v81.i64[1] = -1;
                  if ((v119 & 0x8000000000000000) == 0)
                    goto LABEL_84;
                  v685 = -v118;
                  v120 = -v119;
                }
                else
                {
                  v120 = 1;
                }
                v686 = v120;
LABEL_84:
                v684 = *(_OWORD *)&v665[40];
                if (!*(_QWORD *)&v665[48])
                {
                  v648 = std::logic_error::logic_error(&v687, "bad rational: zero denominator");
                  v687.__vftable = (std::logic_error_vtbl *)off_24EC36578;
                  v672.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applicat"
                                         "ions/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iP"
                                         "honeOS18.0.Internal.sdk/usr/local/include/boost/rational.hpp";
                  v672.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
                  v673.n128_u64[0] = 892;
                  sub_2233E53EC(v648, &v672);
                }
                if (*(_QWORD *)&v665[40])
                {
                  v121 = sub_2233E544C((int64_t *)&v684, (uint64_t *)&v684 + 1);
                  v122 = (uint64_t)v684 / v121;
                  v123 = *((_QWORD *)&v684 + 1) / v121;
                  *(_QWORD *)&v684 = (uint64_t)v684 / v121;
                  *((_QWORD *)&v684 + 1) = v123;
                  if (v123 == 0x8000000000000000)
                  {
                    v652 = std::logic_error::logic_error(&v687, "bad rational: non-zero singular denominator");
                    v687.__vftable = (std::logic_error_vtbl *)off_24EC36578;
                    v672.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applic"
                                           "ations/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDK"
                                           "s/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/rational.hpp";
                    v672.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
                    v673.n128_u64[0] = 906;
                    sub_2233E53EC(v652, &v672);
                  }
                  if (v123 < 0)
                  {
                    v123 = -v123;
                    v122 = -v122;
                  }
                  v81.i64[0] = -1;
                  v81.i64[1] = -1;
                  if (v685 != v122)
                    goto LABEL_96;
LABEL_92:
                  if (v686 != v123 || *(_OWORD *)(v109 + 200) != *(_OWORD *)&v662)
                    goto LABEL_96;
                  v124 = sub_223784F00(a1, (uint64_t)&v662);
                  v81.i64[0] = -1;
                  v81.i64[1] = -1;
                  if ((v124 & 1) == 0)
                    goto LABEL_140;
                }
                else
                {
                  v123 = 1;
                  if (!v685)
                    goto LABEL_92;
LABEL_96:
                  v125 = *(double *)(v109 + 304);
                  if (vabdd_f64(v125, *(double *)&v665[56]) >= 50.0)
                  {
                    if (v125 >= *(double *)&v665[56])
                      goto LABEL_140;
                  }
                  else
                  {
                    v126 = *(_QWORD *)(v109 + 288);
                    v127 = *(_QWORD *)(v109 + 296);
                    v685 = v126;
                    v686 = v127;
                    if (!v127)
                    {
                      v650 = std::logic_error::logic_error(&v687, "bad rational: zero denominator");
                      v687.__vftable = (std::logic_error_vtbl *)off_24EC36578;
                      v672.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Appl"
                                             "ications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer"
                                             "/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/rational.hpp";
                      v672.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
                      v673.n128_u64[0] = 892;
                      sub_2233E53EC(v650, &v672);
                    }
                    if (!v126)
                    {
                      v131 = 1;
                      goto LABEL_105;
                    }
                    v128 = sub_2233E544C(&v685, &v686);
                    v129 = v685 / v128;
                    v130 = v686 / v128;
                    v685 /= v128;
                    v686 = v130;
                    if (v130 == 0x8000000000000000)
                    {
                      v654 = std::logic_error::logic_error(&v687, "bad rational: non-zero singular denominator");
                      v687.__vftable = (std::logic_error_vtbl *)off_24EC36578;
                      v672.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Appl"
                                             "ications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer"
                                             "/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/rational.hpp";
                      v672.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
                      v673.n128_u64[0] = 906;
                      sub_2233E53EC(v654, &v672);
                    }
                    v81.i64[0] = -1;
                    v81.i64[1] = -1;
                    if (v130 < 0)
                    {
                      v685 = -v129;
                      v131 = -v130;
LABEL_105:
                      v686 = v131;
                    }
                    v684 = *(_OWORD *)&v665[40];
                    if (!*(_QWORD *)&v665[48])
                    {
                      v649 = std::logic_error::logic_error(&v687, "bad rational: zero denominator");
                      v687.__vftable = (std::logic_error_vtbl *)off_24EC36578;
                      v672.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Appl"
                                             "ications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer"
                                             "/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/rational.hpp";
                      v672.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
                      v673.n128_u64[0] = 892;
                      sub_2233E53EC(v649, &v672);
                    }
                    if (*(_QWORD *)&v665[40])
                    {
                      v132 = sub_2233E544C((int64_t *)&v684, (uint64_t *)&v684 + 1);
                      v133 = (uint64_t)v684 / v132;
                      v134 = *((_QWORD *)&v684 + 1) / v132;
                      *(_QWORD *)&v684 = (uint64_t)v684 / v132;
                      *((_QWORD *)&v684 + 1) = v134;
                      if (v134 == 0x8000000000000000)
                      {
                        v653 = std::logic_error::logic_error(&v687, "bad rational: non-zero singular denominator");
                        v687.__vftable = (std::logic_error_vtbl *)off_24EC36578;
                        v672.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Ap"
                                               "plications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Devel"
                                               "oper/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/rational.hpp";
                        v672.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
                        v673.n128_u64[0] = 906;
                        sub_2233E53EC(v653, &v672);
                      }
                      v81.i64[0] = -1;
                      v81.i64[1] = -1;
                      if (v134 < 0)
                      {
                        v133 = -v133;
                        v134 = -v134;
                        v135 = v686;
                        v136 = v685 / v686;
                        v137 = v685 % v686;
                        if (v685 % v686 < 0)
                        {
LABEL_115:
                          v138 = ((unint64_t)(v135 + v137) >> 63)
                               + (((v135 + v137) & ~((v135 + v137) >> 63))
                                - (((unint64_t)(v135 + v137) >> 63)
                                 + v135
                                 + v137))
                               / v135
                               + 1;
                          if (v138 < 4)
                            goto LABEL_457;
                          v137 += (v138 & 0xFFFFFFFFFFFFFFFCLL) * v135;
                          v139 = 0uLL;
                          v140 = (int64x2_t)(unint64_t)v136;
                          v141 = v138 & 0xFFFFFFFFFFFFFFFCLL;
                          do
                          {
                            v140 = vaddq_s64(v140, v81);
                            v139 = vaddq_s64(v139, v81);
                            v141 -= 4;
                          }
                          while (v141);
                          v136 = vaddvq_s64(vaddq_s64(v139, v140));
                          if (v138 != (v138 & 0xFFFFFFFFFFFFFFFCLL))
                          {
LABEL_457:
                            do
                            {
                              v137 += v135;
                              --v136;
                            }
                            while (v137 < 0);
                          }
                        }
                      }
                      else
                      {
                        v135 = v686;
                        v136 = v685 / v686;
                        v137 = v685 % v686;
                        if (v685 % v686 < 0)
                          goto LABEL_115;
                      }
                    }
                    else
                    {
                      v133 = 0;
                      v134 = 1;
                      v135 = v686;
                      v136 = v685 / v686;
                      v137 = v685 % v686;
                      if (v685 % v686 < 0)
                        goto LABEL_115;
                    }
                    v142 = v133 / v134;
                    v143 = v133 % v134;
                    if (v143 < 0)
                    {
                      v144 = ((unint64_t)(v134 + v143) >> 63)
                           + (((v134 + v143) & ~((v134 + v143) >> 63))
                            - (((unint64_t)(v134 + v143) >> 63)
                             + v134
                             + v143))
                           / v134
                           + 1;
                      if (v144 < 4)
                        goto LABEL_458;
                      v143 += (v144 & 0xFFFFFFFFFFFFFFFCLL) * v134;
                      v145 = 0uLL;
                      v146 = (int64x2_t)(unint64_t)v142;
                      v147 = v144 & 0xFFFFFFFFFFFFFFFCLL;
                      do
                      {
                        v146 = vaddq_s64(v146, v81);
                        v145 = vaddq_s64(v145, v81);
                        v147 -= 4;
                      }
                      while (v147);
                      v142 = vaddvq_s64(vaddq_s64(v145, v146));
                      if (v144 != (v144 & 0xFFFFFFFFFFFFFFFCLL))
                      {
LABEL_458:
                        do
                        {
                          v143 += v134;
                          --v142;
                        }
                        while (v143 < 0);
                      }
                    }
                    v148 = v136 < v142;
                    if (v136 == v142)
                    {
                      v149 = 0;
                      do
                      {
                        v150 = v137;
                        v151 = v143;
                        v149 ^= 1u;
                        if (!v137 || !v143)
                        {
                          if (v137 == v143 || (v149 != 0) == (v137 != 0))
                            goto LABEL_140;
                          goto LABEL_64;
                        }
                        v152 = v135 / v137;
                        v137 = v135 % v137;
                        v153 = v134 / v143;
                        v143 = v134 % v143;
                        v134 = v151;
                        v135 = v150;
                      }
                      while (v152 == v153);
                      v148 = v152 < v153;
                      if (!v149)
                        goto LABEL_134;
                      if (v152 <= v153)
                        goto LABEL_140;
                    }
                    else
                    {
LABEL_134:
                      if (!v148)
                        goto LABEL_140;
                    }
                  }
                }
              }
              while (1)
              {
LABEL_140:
                while (1)
                {
                  v154 = v80;
                  v80 -= 200;
                  v155 = *(_QWORD *)(v154 - 152);
                  if (v155 == *(_QWORD *)v665)
                    break;
                  if (v155 < *(uint64_t *)v665)
                    goto LABEL_61;
                }
                v156 = *(_QWORD *)(v154 - 144);
                v157 = v156 < *(_QWORD *)&v665[8];
                if (v156 == *(_QWORD *)&v665[8])
                {
                  v158 = *(_QWORD *)(v154 - 136);
                  v157 = v158 < *(_QWORD *)&v665[16];
                  if (v158 == *(_QWORD *)&v665[16])
                    v157 = *(_OWORD *)(v154 - 128) < *(_OWORD *)&v665[24];
                }
                if (v157)
                  break;
                if (*(_QWORD *)(v154 - 128) == *(_QWORD *)&v665[24]
                  && *(_OWORD *)(v154 - 144) == *(_OWORD *)&v665[8]
                  && *(_QWORD *)(v154 - 120) == *(_QWORD *)&v665[32])
                {
                  if (vabdd_f64(*(double *)(v154 - 96), *(double *)&v665[56]) < 50.0
                    && (v672 = *(int8x16_t *)(v154 - 112),
                        sub_2233E5290((int64_t)&v672),
                        v687 = *(std::logic_error *)&v665[40],
                        sub_2233E5290((int64_t)&v687),
                        v81.i64[0] = -1,
                        v81.i64[1] = -1,
                        *(_OWORD *)&v672 == v687)
                    && *(_OWORD *)(v154 - 200) == *(_OWORD *)&v662)
                  {
                    v159 = sub_223784F00(v80, (uint64_t)&v662);
                    v81.i64[0] = -1;
                    v81.i64[1] = -1;
                    if ((v159 & 1) != 0)
                      break;
                  }
                  else
                  {
                    v160 = *(double *)(v154 - 96);
                    if (vabdd_f64(v160, *(double *)&v665[56]) >= 50.0)
                    {
                      if (v160 < *(double *)&v665[56])
                        break;
                    }
                    else
                    {
                      v672 = *(int8x16_t *)(v154 - 112);
                      sub_2233E5290((int64_t)&v672);
                      v687 = *(std::logic_error *)&v665[40];
                      sub_2233E5290((int64_t)&v687);
                      v161 = v672.i64[1];
                      v162 = v672.i64[0] / v672.i64[1];
                      v163 = v672.i64[0] % v672.i64[1];
                      if (v672.i64[0] % v672.i64[1] < 0)
                      {
                        v164 = ((unint64_t)(v672.i64[1] + v163) >> 63)
                             + (((v672.i64[1] + v163) & ~((v672.i64[1] + v163) >> 63))
                              - (((unint64_t)(v672.i64[1] + v163) >> 63)
                               + v672.i64[1]
                               + v163))
                             / v672.i64[1]
                             + 1;
                        v81.i64[0] = -1;
                        v81.i64[1] = -1;
                        if (v164 < 4)
                          goto LABEL_459;
                        v163 += (v164 & 0xFFFFFFFFFFFFFFFCLL) * v672.i64[1];
                        v165 = 0uLL;
                        v166 = (int64x2_t)(unint64_t)(v672.i64[0] / v672.i64[1]);
                        v167 = v164 & 0xFFFFFFFFFFFFFFFCLL;
                        do
                        {
                          v166 = vaddq_s64(v166, v81);
                          v165 = vaddq_s64(v165, v81);
                          v167 -= 4;
                        }
                        while (v167);
                        v162 = vaddvq_s64(vaddq_s64(v165, v166));
                        if (v164 != (v164 & 0xFFFFFFFFFFFFFFFCLL))
                        {
LABEL_459:
                          do
                          {
                            v163 += v672.i64[1];
                            --v162;
                          }
                          while (v163 < 0);
                        }
                      }
                      else
                      {
                        v81.i64[0] = -1;
                        v81.i64[1] = -1;
                      }
                      v168 = v687.__imp_.__imp_;
                      v169 = (uint64_t)v687.__vftable / (uint64_t)v687.__imp_.__imp_;
                      v170 = (uint64_t)v687.__vftable % (uint64_t)v687.__imp_.__imp_;
                      if ((uint64_t)v687.__vftable % (uint64_t)v687.__imp_.__imp_ < 0)
                      {
                        v171 = ((unint64_t)&v687.__imp_.__imp_[v170] >> 63)
                             + (((uint64_t)&v687.__imp_.__imp_[v170] & ~((uint64_t)&v687.__imp_.__imp_[v170] >> 63))
                              - (unint64_t)&v687.__imp_.__imp_[v170
                                                                    + ((unint64_t)&v687.__imp_.__imp_[v170] >> 63)])
                             / (unint64_t)v687.__imp_.__imp_
                             + 1;
                        if (v171 < 4)
                          goto LABEL_460;
                        v170 += (v171 & 0xFFFFFFFFFFFFFFFCLL) * (unint64_t)v687.__imp_.__imp_;
                        v172 = 0uLL;
                        v173 = (int64x2_t)(unint64_t)((uint64_t)v687.__vftable / (uint64_t)v687.__imp_.__imp_);
                        v174 = v171 & 0xFFFFFFFFFFFFFFFCLL;
                        do
                        {
                          v173 = vaddq_s64(v173, v81);
                          v172 = vaddq_s64(v172, v81);
                          v174 -= 4;
                        }
                        while (v174);
                        v169 = vaddvq_s64(vaddq_s64(v172, v173));
                        if (v171 != (v171 & 0xFFFFFFFFFFFFFFFCLL))
                        {
LABEL_460:
                          do
                          {
                            v170 += (uint64_t)v687.__imp_.__imp_;
                            --v169;
                          }
                          while (v170 < 0);
                        }
                      }
                      v175 = v162 < v169;
                      if (v162 == v169)
                      {
                        v176 = 0;
                        do
                        {
                          v177 = v163;
                          v178 = (const char *)v170;
                          v176 ^= 1u;
                          if (!v163 || !v170)
                          {
                            if (v163 == v170 || (v176 != 0) == (v163 != 0))
                              goto LABEL_140;
                            goto LABEL_61;
                          }
                          v179 = v161 / v163;
                          v163 = v161 % v163;
                          v180 = (uint64_t)v168 / v170;
                          v170 = (uint64_t)v168 % v170;
                          v168 = v178;
                          v161 = v177;
                        }
                        while (v179 == v180);
                        v175 = v179 < v180;
                        if (!v176)
                          goto LABEL_177;
                        if (v179 <= v180)
                          continue;
                        break;
                      }
LABEL_177:
                      if (v175)
                        break;
                    }
                  }
                }
              }
LABEL_61:
              ;
            }
            while (a1 < v80);
          }
          v181 = (int8x16_t *)(a1 - 200);
          if (a1 - 200 != v661)
          {
            *(int8x16_t *)v661 = *v181;
            v182 = *(_OWORD *)(a1 - 104);
            v183 = *(_OWORD *)(a1 - 72);
            v184 = *(_OWORD *)(a1 - 120);
            *(_OWORD *)(v659 + 96) = *(_OWORD *)(a1 - 88);
            *(_OWORD *)(v659 + 112) = v183;
            *(_OWORD *)(v659 + 64) = v184;
            *(_OWORD *)(v659 + 80) = v182;
            v185 = *(_OWORD *)(a1 - 40);
            v186 = *(_OWORD *)(a1 - 24);
            v187 = *(_OWORD *)(a1 - 56);
            *(_QWORD *)(v659 + 176) = *(_QWORD *)(a1 - 8);
            *(_OWORD *)(v659 + 144) = v185;
            *(_OWORD *)(v659 + 160) = v186;
            *(_OWORD *)(v659 + 128) = v187;
            v188 = *(_OWORD *)(a1 - 184);
            v189 = *(_OWORD *)(a1 - 168);
            v190 = *(_OWORD *)(a1 - 136);
            *(_OWORD *)(v659 + 32) = *(_OWORD *)(a1 - 152);
            *(_OWORD *)(v659 + 48) = v190;
            *(_OWORD *)v659 = v188;
            *(_OWORD *)(v659 + 16) = v189;
          }
          *v181 = v662;
          v191 = v666;
          v192 = v667;
          v193 = *(_OWORD *)&v665[48];
          *(_OWORD *)(a1 - 120) = *(_OWORD *)&v665[32];
          *(_OWORD *)(a1 - 72) = v192;
          *(_OWORD *)(a1 - 88) = v191;
          *(_OWORD *)(a1 - 104) = v193;
          v195 = v669;
          v194 = v670;
          v196 = v671;
          *(_OWORD *)(a1 - 56) = v668;
          *(_QWORD *)(a1 - 8) = v196;
          *(_OWORD *)(a1 - 24) = v194;
          *(_OWORD *)(a1 - 40) = v195;
          v197 = v663;
          v198 = v664;
          v199 = *(_OWORD *)v665;
          *(_OWORD *)(a1 - 136) = *(_OWORD *)&v665[16];
          *(_OWORD *)(a1 - 152) = v199;
          *(_OWORD *)(a1 - 168) = v198;
          *(__n128 *)(a1 - 184) = v197;
          v7 = a2;
          if (v51 < v79)
            goto LABEL_188;
          v200 = sub_223784938(v661, a1 - 200);
          if (!sub_223784938(a1, a2))
          {
            if (v200)
              continue;
LABEL_188:
            sub_223781780(v661, a1 - 200, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = a1 - 200;
          a1 = v661;
          if (v200)
            return a5.n128_f64[0];
          goto LABEL_1;
        }
        if ((a4 & 1) == 0)
        {
          if (a1 == a2)
            return a5.n128_f64[0];
          v595 = a1 + 200;
          if (a1 + 200 == a2)
            return a5.n128_f64[0];
          while (1)
          {
            v604 = (int8x16_t *)v595;
            if (!sub_2237843D8(v595, a1))
              goto LABEL_394;
            v672 = *v604;
            v605 = *(__n128 *)(a1 + 232);
            v673 = *(__n128 *)(a1 + 216);
            v674 = v605;
            v606 = *(_OWORD *)(a1 + 360);
            v607 = *(_OWORD *)(a1 + 376);
            v608 = *(_OWORD *)(a1 + 328);
            v680 = *(_OWORD *)(a1 + 344);
            v681 = v606;
            v682 = v607;
            v609 = *(_OWORD *)(a1 + 296);
            v610 = *(_OWORD *)(a1 + 312);
            v611 = *(_OWORD *)(a1 + 264);
            *(_OWORD *)v677 = *(_OWORD *)(a1 + 280);
            *(_OWORD *)&v677[16] = v609;
            v683 = *(_QWORD *)(a1 + 392);
            v678 = v610;
            v679 = v608;
            v612 = (unint64_t)v604;
            v675 = *(_OWORD *)(a1 + 248);
            v676 = v611;
            do
            {
              do
              {
LABEL_398:
                while (1)
                {
                  v613 = v612;
                  v612 = a1;
                  *(_OWORD *)v613 = *(_OWORD *)a1;
                  v614 = *(_OWORD *)(a1 + 128);
                  *(_OWORD *)(v613 + 112) = *(_OWORD *)(a1 + 112);
                  *(_OWORD *)(v613 + 128) = v614;
                  v615 = *(_OWORD *)(a1 + 96);
                  *(_OWORD *)(v613 + 80) = *(_OWORD *)(a1 + 80);
                  *(_OWORD *)(v613 + 96) = v615;
                  *(_QWORD *)(v613 + 192) = *(_QWORD *)(a1 + 192);
                  v616 = *(_OWORD *)(a1 + 176);
                  v617 = *(_OWORD *)(a1 + 144);
                  *(_OWORD *)(v613 + 160) = *(_OWORD *)(a1 + 160);
                  *(_OWORD *)(v613 + 176) = v616;
                  *(_OWORD *)(v613 + 144) = v617;
                  v618 = *(_OWORD *)(a1 + 32);
                  *(_OWORD *)(v613 + 16) = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)(v613 + 32) = v618;
                  v619 = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)(v613 + 48) = *(_OWORD *)(a1 + 48);
                  *(_OWORD *)(v613 + 64) = v619;
                  a1 -= 200;
                  v620 = *(_QWORD *)(v612 - 152);
                  if ((_QWORD)v675 == v620)
                    break;
                  if ((uint64_t)v675 >= v620)
                    goto LABEL_393;
                }
                v621 = *(_QWORD *)(v612 - 144);
                v622 = *((_QWORD *)&v675 + 1) < v621;
                if (*((_QWORD *)&v675 + 1) == v621)
                {
                  v623 = *(_QWORD *)(v612 - 136);
                  v622 = (uint64_t)v676 < v623;
                  if ((_QWORD)v676 == v623)
                    v622 = (__int128)__PAIR128__(*(unint64_t *)v677, *((unint64_t *)&v676 + 1)) < *(_OWORD *)(v612 - 128);
                }
              }
              while (v622);
              if (v676 != *(_OWORD *)(v612 - 136)
                || *((_QWORD *)&v675 + 1) != v621
                || *(_QWORD *)v677 != *(_QWORD *)(v612 - 120))
              {
                break;
              }
              v624 = *(double *)&v677[24];
              if (vabdd_f64(*(double *)&v677[24], *(double *)(v612 - 96)) < 50.0)
              {
                v662 = *(int8x16_t *)&v677[8];
                sub_2233E5290((int64_t)&v662);
                v687 = *(std::logic_error *)(v612 - 112);
                sub_2233E5290((int64_t)&v687);
                if (*(_OWORD *)&v662 == v687 && *(_OWORD *)&v672 == *(_OWORD *)(v612 - 200))
                {
                  if ((sub_223784F00((uint64_t)&v672, a1) & 1) == 0)
                    break;
                  goto LABEL_398;
                }
              }
              v625 = *(double *)(v612 - 96);
              if (vabdd_f64(v624, v625) >= 50.0)
              {
                if (v624 >= v625)
                  break;
                goto LABEL_398;
              }
              v662 = *(int8x16_t *)&v677[8];
              sub_2233E5290((int64_t)&v662);
              v687 = *(std::logic_error *)(v612 - 112);
              sub_2233E5290((int64_t)&v687);
              v626 = v662.i64[1];
              v627 = v662.i64[0] / v662.i64[1];
              v628 = v662.i64[0] % v662.i64[1];
              if (v662.i64[0] % v662.i64[1] < 0)
              {
                v630 = ((unint64_t)(v662.i64[1] + v628) >> 63)
                     + (((v662.i64[1] + v628) & ~((v662.i64[1] + v628) >> 63))
                      - (((unint64_t)(v662.i64[1] + v628) >> 63)
                       + v662.i64[1]
                       + v628))
                     / v662.i64[1]
                     + 1;
                v629.i64[0] = -1;
                v629.i64[1] = -1;
                if (v630 < 4)
                  goto LABEL_461;
                v628 += (v630 & 0xFFFFFFFFFFFFFFFCLL) * v662.i64[1];
                v631 = 0uLL;
                v632 = (int64x2_t)(unint64_t)(v662.i64[0] / v662.i64[1]);
                v633 = v630 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v632 = vaddq_s64(v632, v629);
                  v631 = vaddq_s64(v631, v629);
                  v633 -= 4;
                }
                while (v633);
                v627 = vaddvq_s64(vaddq_s64(v631, v632));
                if (v630 != (v630 & 0xFFFFFFFFFFFFFFFCLL))
                {
LABEL_461:
                  do
                  {
                    v628 += v662.i64[1];
                    --v627;
                  }
                  while (v628 < 0);
                }
              }
              else
              {
                v629.i64[0] = -1;
                v629.i64[1] = -1;
              }
              v634 = v687.__imp_.__imp_;
              v635 = (uint64_t)v687.__vftable / (uint64_t)v687.__imp_.__imp_;
              v636 = (uint64_t)v687.__vftable % (uint64_t)v687.__imp_.__imp_;
              if ((uint64_t)v687.__vftable % (uint64_t)v687.__imp_.__imp_ < 0)
              {
                v637 = ((unint64_t)&v687.__imp_.__imp_[v636] >> 63)
                     + (((uint64_t)&v687.__imp_.__imp_[v636] & ~((uint64_t)&v687.__imp_.__imp_[v636] >> 63))
                      - (unint64_t)&v687.__imp_.__imp_[v636 + ((unint64_t)&v687.__imp_.__imp_[v636] >> 63)])
                     / (unint64_t)v687.__imp_.__imp_
                     + 1;
                if (v637 < 4)
                  goto LABEL_462;
                v636 += (v637 & 0xFFFFFFFFFFFFFFFCLL) * (unint64_t)v687.__imp_.__imp_;
                v638 = 0uLL;
                v639 = (int64x2_t)(unint64_t)((uint64_t)v687.__vftable / (uint64_t)v687.__imp_.__imp_);
                v640 = v637 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v639 = vaddq_s64(v639, v629);
                  v638 = vaddq_s64(v638, v629);
                  v640 -= 4;
                }
                while (v640);
                v635 = vaddvq_s64(vaddq_s64(v638, v639));
                if (v637 != (v637 & 0xFFFFFFFFFFFFFFFCLL))
                {
LABEL_462:
                  do
                  {
                    v636 += (uint64_t)v687.__imp_.__imp_;
                    --v635;
                  }
                  while (v636 < 0);
                }
              }
              v641 = v627 < v635;
              if (v627 != v635)
                continue;
              v642 = 0;
              do
              {
                v643 = v628;
                v644 = (const char *)v636;
                v642 ^= 1u;
                if (!v628 || !v636)
                {
                  if (v628 == v636 || (v642 != 0) == (v628 != 0))
                    goto LABEL_393;
                  goto LABEL_398;
                }
                v645 = v626 / v628;
                v628 = v626 % v628;
                v646 = (uint64_t)v634 / v636;
                v636 = (uint64_t)v634 % v636;
                v634 = v644;
                v626 = v643;
              }
              while (v645 == v646);
              v641 = v645 < v646;
              if (v642)
              {
                if (v645 <= v646)
                  break;
                goto LABEL_398;
              }
            }
            while (v641);
LABEL_393:
            *(int8x16_t *)v612 = v672;
            v596 = v679;
            v598 = *(_OWORD *)v677;
            v597 = *(_OWORD *)&v677[16];
            *(_OWORD *)(v612 + 112) = v678;
            *(_OWORD *)(v612 + 128) = v596;
            *(_OWORD *)(v612 + 80) = v598;
            *(_OWORD *)(v612 + 96) = v597;
            v600 = v681;
            v599 = v682;
            v601 = v680;
            *(_QWORD *)(v612 + 192) = v683;
            *(_OWORD *)(v612 + 160) = v600;
            *(_OWORD *)(v612 + 176) = v599;
            *(_OWORD *)(v612 + 144) = v601;
            a5 = v673;
            v602 = v674;
            v603 = v676;
            *(_OWORD *)(v612 + 48) = v675;
            *(_OWORD *)(v612 + 64) = v603;
            *(__n128 *)(v612 + 16) = a5;
            *(__n128 *)(v612 + 32) = v602;
LABEL_394:
            v595 = (uint64_t)&v604[12].i64[1];
            a1 = (unint64_t)v604;
            if (&v604[12].u64[1] == (unint64_t *)a2)
              return a5.n128_f64[0];
          }
        }
        if (a1 == a2)
          return a5.n128_f64[0];
        v418 = a1 + 200;
        if (a1 + 200 == a2)
          return a5.n128_f64[0];
        v419 = a1;
        while (2)
        {
          v465 = v418;
          if (!sub_2237843D8(v418, v419))
            goto LABEL_324;
          v672 = *(int8x16_t *)v465;
          v466 = *(_OWORD *)(v419 + 296);
          v467 = *(_OWORD *)(v419 + 328);
          v468 = *(_OWORD *)(v419 + 344);
          v678 = *(_OWORD *)(v419 + 312);
          v679 = v467;
          v469 = *(_OWORD *)(v419 + 264);
          *(_OWORD *)v677 = *(_OWORD *)(v419 + 280);
          *(_OWORD *)&v677[16] = v466;
          v470 = *(_OWORD *)(v419 + 376);
          v681 = *(_OWORD *)(v419 + 360);
          v682 = v470;
          v683 = *(_QWORD *)(v419 + 392);
          v680 = v468;
          v471 = *(__n128 *)(v419 + 232);
          v673 = *(__n128 *)(v419 + 216);
          v674 = v471;
          v675 = *(_OWORD *)(v419 + 248);
          v676 = v469;
          *(_OWORD *)v465 = *(_OWORD *)v419;
          v472 = v419 + 16;
          v473 = *(_OWORD *)(v419 + 32);
          *(_OWORD *)(v465 + 16) = *(_OWORD *)(v419 + 16);
          *(_OWORD *)(v465 + 32) = v473;
          v474 = *(_OWORD *)(v419 + 64);
          *(_OWORD *)(v465 + 48) = *(_OWORD *)(v419 + 48);
          *(_OWORD *)(v465 + 64) = v474;
          v475 = *(_OWORD *)(v419 + 96);
          *(_OWORD *)(v465 + 80) = *(_OWORD *)(v419 + 80);
          *(_OWORD *)(v465 + 96) = v475;
          v476 = *(_OWORD *)(v419 + 128);
          *(_OWORD *)(v465 + 112) = *(_OWORD *)(v419 + 112);
          *(_OWORD *)(v465 + 128) = v476;
          v477 = *(_OWORD *)(v419 + 176);
          v478 = *(_OWORD *)(v419 + 144);
          *(_OWORD *)(v465 + 160) = *(_OWORD *)(v419 + 160);
          *(_OWORD *)(v465 + 176) = v477;
          *(_OWORD *)(v465 + 144) = v478;
          *(_QWORD *)(v465 + 192) = *(_QWORD *)(v419 + 192);
          v456 = a1;
          if (v419 == a1)
            goto LABEL_323;
          while (1)
          {
            v456 = v419;
            v419 -= 200;
            v486 = *(_QWORD *)(v456 - 152);
            v487 = (uint64_t)v675 < v486;
            if ((_QWORD)v675 != v486)
              goto LABEL_328;
            v488 = *(_QWORD *)(v456 - 144);
            v489 = *((_QWORD *)&v675 + 1) < v488;
            if (*((_QWORD *)&v675 + 1) == v488)
            {
              v490 = *(_QWORD *)(v456 - 136);
              v489 = (uint64_t)v676 < v490;
              if ((_QWORD)v676 == v490)
                v489 = (__int128)__PAIR128__(*(unint64_t *)v677, *((unint64_t *)&v676 + 1)) < *(_OWORD *)(v456 - 128);
            }
            if (!v489)
              break;
LABEL_330:
            v479 = *(_OWORD *)v419;
            v472 = v456 - 184;
            v480 = *(_OWORD *)(v456 - 56);
            v481 = *(_OWORD *)(v456 - 24);
            *(_OWORD *)(v456 + 160) = *(_OWORD *)(v456 - 40);
            *(_OWORD *)(v456 + 176) = v481;
            *(_QWORD *)(v456 + 192) = *(_QWORD *)(v456 - 8);
            v482 = *(_OWORD *)(v456 - 120);
            v483 = *(_OWORD *)(v456 - 88);
            *(_OWORD *)(v456 + 96) = *(_OWORD *)(v456 - 104);
            *(_OWORD *)(v456 + 112) = v483;
            *(_OWORD *)(v456 + 128) = *(_OWORD *)(v456 - 72);
            *(_OWORD *)(v456 + 144) = v480;
            v484 = *(_OWORD *)(v456 - 184);
            *(_OWORD *)v456 = v479;
            *(_OWORD *)(v456 + 16) = v484;
            v485 = *(_OWORD *)(v456 - 152);
            *(_OWORD *)(v456 + 32) = *(_OWORD *)(v456 - 168);
            *(_OWORD *)(v456 + 48) = v485;
            *(_OWORD *)(v456 + 64) = *(_OWORD *)(v456 - 136);
            *(_OWORD *)(v456 + 80) = v482;
            if (v419 == a1)
            {
              v456 = a1;
              goto LABEL_323;
            }
          }
          if (v676 != *(_OWORD *)(v456 - 136)
            || *((_QWORD *)&v675 + 1) != v488
            || *(_QWORD *)v677 != *(_QWORD *)(v456 - 120))
          {
            goto LABEL_323;
          }
          v491 = *(double *)&v677[24];
          if (vabdd_f64(*(double *)&v677[24], *(double *)(v456 - 96)) < 50.0)
          {
            v662 = *(int8x16_t *)&v677[8];
            sub_2233E5290((int64_t)&v662);
            v687 = *(std::logic_error *)(v456 - 112);
            sub_2233E5290((int64_t)&v687);
            if (*(_OWORD *)&v662 == v687 && *(_OWORD *)&v672 == *(_OWORD *)(v456 - 200))
            {
              if (!sub_223784F00((uint64_t)&v672, v419))
                goto LABEL_323;
              goto LABEL_330;
            }
          }
          v492 = *(double *)(v456 - 96);
          if (vabdd_f64(v491, v492) >= 50.0)
          {
            if (v491 >= v492)
              goto LABEL_323;
            goto LABEL_330;
          }
          v662 = *(int8x16_t *)&v677[8];
          sub_2233E5290((int64_t)&v662);
          v687 = *(std::logic_error *)(v456 - 112);
          sub_2233E5290((int64_t)&v687);
          v493 = v662.i64[1];
          v494 = v662.i64[0] / v662.i64[1];
          v495 = v662.i64[0] % v662.i64[1];
          if (v662.i64[0] % v662.i64[1] < 0)
          {
            v497 = ((unint64_t)(v662.i64[1] + v495) >> 63)
                 + (((v662.i64[1] + v495) & ~((v662.i64[1] + v495) >> 63))
                  - (((unint64_t)(v662.i64[1] + v495) >> 63)
                   + v662.i64[1]
                   + v495))
                 / v662.i64[1]
                 + 1;
            v496.i64[0] = -1;
            v496.i64[1] = -1;
            if (v497 < 4)
              goto LABEL_463;
            v495 += (v497 & 0xFFFFFFFFFFFFFFFCLL) * v662.i64[1];
            v498 = 0uLL;
            v499 = (int64x2_t)(unint64_t)(v662.i64[0] / v662.i64[1]);
            v500 = v497 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v499 = vaddq_s64(v499, v496);
              v498 = vaddq_s64(v498, v496);
              v500 -= 4;
            }
            while (v500);
            v494 = vaddvq_s64(vaddq_s64(v498, v499));
            if (v497 != (v497 & 0xFFFFFFFFFFFFFFFCLL))
            {
LABEL_463:
              do
              {
                v495 += v662.i64[1];
                --v494;
              }
              while (v495 < 0);
            }
          }
          else
          {
            v496.i64[0] = -1;
            v496.i64[1] = -1;
          }
          v501 = v687.__imp_.__imp_;
          v502 = (uint64_t)v687.__vftable / (uint64_t)v687.__imp_.__imp_;
          v503 = (uint64_t)v687.__vftable % (uint64_t)v687.__imp_.__imp_;
          if ((uint64_t)v687.__vftable % (uint64_t)v687.__imp_.__imp_ < 0)
          {
            v504 = ((unint64_t)&v687.__imp_.__imp_[v503] >> 63)
                 + (((uint64_t)&v687.__imp_.__imp_[v503] & ~((uint64_t)&v687.__imp_.__imp_[v503] >> 63))
                  - (unint64_t)&v687.__imp_.__imp_[v503 + ((unint64_t)&v687.__imp_.__imp_[v503] >> 63)])
                 / (unint64_t)v687.__imp_.__imp_
                 + 1;
            if (v504 < 4)
              goto LABEL_464;
            v503 += (v504 & 0xFFFFFFFFFFFFFFFCLL) * (unint64_t)v687.__imp_.__imp_;
            v505 = 0uLL;
            v506 = (int64x2_t)(unint64_t)((uint64_t)v687.__vftable / (uint64_t)v687.__imp_.__imp_);
            v507 = v504 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v506 = vaddq_s64(v506, v496);
              v505 = vaddq_s64(v505, v496);
              v507 -= 4;
            }
            while (v507);
            v502 = vaddvq_s64(vaddq_s64(v505, v506));
            if (v504 != (v504 & 0xFFFFFFFFFFFFFFFCLL))
            {
LABEL_464:
              do
              {
                v503 += (uint64_t)v687.__imp_.__imp_;
                --v502;
              }
              while (v503 < 0);
            }
          }
          v487 = v494 < v502;
          if (v494 != v502)
          {
LABEL_328:
            if (!v487)
              goto LABEL_323;
            goto LABEL_330;
          }
          v508 = 0;
          do
          {
            v509 = v495;
            v510 = (const char *)v503;
            v508 ^= 1u;
            if (!v495 || !v503)
            {
              if (v495 != v503 && (v508 != 0) != (v495 != 0))
                goto LABEL_330;
              goto LABEL_323;
            }
            v511 = v493 / v495;
            v495 = v493 % v495;
            v512 = (uint64_t)v501 / v503;
            v503 = (uint64_t)v501 % v503;
            v501 = v510;
            v493 = v509;
          }
          while (v511 == v512);
          v487 = v511 < v512;
          if (!v508)
            goto LABEL_328;
          if (v511 > v512)
            goto LABEL_330;
LABEL_323:
          *(int8x16_t *)v456 = v672;
          v457 = v679;
          v459 = *(_OWORD *)v677;
          v458 = *(_OWORD *)&v677[16];
          *(_OWORD *)(v472 + 96) = v678;
          *(_OWORD *)(v472 + 112) = v457;
          *(_OWORD *)(v472 + 64) = v459;
          *(_OWORD *)(v472 + 80) = v458;
          v461 = v681;
          v460 = v682;
          v462 = v680;
          *(_QWORD *)(v472 + 176) = v683;
          *(_OWORD *)(v472 + 144) = v461;
          *(_OWORD *)(v472 + 160) = v460;
          *(_OWORD *)(v472 + 128) = v462;
          a5 = v673;
          v463 = v674;
          v464 = v676;
          *(_OWORD *)(v472 + 32) = v675;
          *(_OWORD *)(v472 + 48) = v464;
          *(__n128 *)v472 = a5;
          *(__n128 *)(v472 + 16) = v463;
LABEL_324:
          v418 = v465 + 200;
          v419 = v465;
          if (v465 + 200 != a2)
            continue;
          return a5.n128_f64[0];
        }
    }
  }
}

  v7 = a2;
  v657 = (int8x16_t *)(a2 - 200);
  while (2)
  {
    v8 = v7 - a1;
    v9 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v7 - a1) >> 3);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        if (sub_223788278((uint64_t)v657, a1))
        {
          v312 = *(__n128 *)(a1 + 32);
          v313 = *(_OWORD *)(a1 + 48);
          v314 = *(_OWORD *)(a1 + 64);
          v315 = *(__n128 *)(a1 + 16);
          v672 = *(int8x16_t *)a1;
          v673 = v315;
          v675 = v313;
          v676 = v314;
          v674 = v312;
          v316 = *(_OWORD *)(a1 + 128);
          v318 = *(_OWORD *)(a1 + 80);
          v317 = *(_OWORD *)(a1 + 96);
          v679 = *(_OWORD *)(a1 + 112);
          v680 = v316;
          v677 = v318;
          v678 = v317;
          v320 = *(_OWORD *)(a1 + 160);
          v319 = *(_OWORD *)(a1 + 176);
          v321 = *(_OWORD *)(a1 + 144);
          v683 = *(_QWORD *)(a1 + 192);
          *(_OWORD *)v682 = v320;
          *(_OWORD *)&v682[16] = v319;
          v681 = v321;
          *(int8x16_t *)a1 = *v657;
          v322 = *(_OWORD *)(a2 - 104);
          v323 = *(_OWORD *)(a2 - 72);
          v324 = *(_OWORD *)(a2 - 120);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 - 88);
          *(_OWORD *)(a1 + 128) = v323;
          *(_OWORD *)(a1 + 80) = v324;
          *(_OWORD *)(a1 + 96) = v322;
          v325 = *(_OWORD *)(a2 - 40);
          v326 = *(_OWORD *)(a2 - 24);
          v327 = *(_OWORD *)(a2 - 56);
          *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(a1 + 160) = v325;
          *(_OWORD *)(a1 + 176) = v326;
          *(_OWORD *)(a1 + 144) = v327;
          v328 = *(_OWORD *)(a2 - 184);
          v329 = *(_OWORD *)(a2 - 168);
          v330 = *(_OWORD *)(a2 - 136);
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 152);
          *(_OWORD *)(a1 + 64) = v330;
          *(_OWORD *)(a1 + 16) = v328;
          *(_OWORD *)(a1 + 32) = v329;
          *v657 = v672;
          v331 = v679;
          v332 = v680;
          v333 = v678;
          *(_OWORD *)(a2 - 120) = v677;
          *(_OWORD *)(a2 - 72) = v332;
          *(_OWORD *)(a2 - 88) = v331;
          *(_OWORD *)(a2 - 104) = v333;
          v335 = *(_OWORD *)v682;
          v334 = *(_OWORD *)&v682[16];
          v336 = v683;
          *(_OWORD *)(a2 - 56) = v681;
          *(_QWORD *)(a2 - 8) = v336;
          *(_OWORD *)(a2 - 24) = v334;
          *(_OWORD *)(a2 - 40) = v335;
          a5 = v673;
          v337 = v674;
          v338 = v675;
          *(_OWORD *)(a2 - 136) = v676;
          *(_OWORD *)(a2 - 152) = v338;
          *(__n128 *)(a2 - 168) = v337;
          *(__n128 *)(a2 - 184) = a5;
        }
        return a5.n128_f64[0];
      case 3uLL:
        a5.n128_u64[0] = sub_223788420(a1, a1 + 200, (uint64_t)v657).n128_u64[0];
        return a5.n128_f64[0];
      case 4uLL:
        v339 = (int8x16_t *)(a1 + 200);
        v340 = (int8x16_t *)(a1 + 400);
        sub_223788420(a1, a1 + 200, a1 + 400);
        if (sub_223788278((uint64_t)v657, a1 + 400))
        {
          v341 = *v340;
          v342 = *(_OWORD *)(a1 + 544);
          v343 = *(_OWORD *)(a1 + 576);
          *(_OWORD *)v682 = *(_OWORD *)(a1 + 560);
          *(_OWORD *)&v682[16] = v343;
          v683 = *(_QWORD *)(a1 + 592);
          v344 = *(_OWORD *)(a1 + 480);
          v345 = *(_OWORD *)(a1 + 512);
          v346 = *(_OWORD *)(a1 + 528);
          v678 = *(_OWORD *)(a1 + 496);
          v679 = v345;
          v680 = v346;
          v681 = v342;
          v347 = *(__n128 *)(a1 + 416);
          v348 = *(__n128 *)(a1 + 432);
          v672 = v341;
          v673 = v347;
          v349 = *(_OWORD *)(a1 + 448);
          v350 = *(_OWORD *)(a1 + 464);
          v674 = v348;
          v675 = v349;
          v676 = v350;
          v677 = v344;
          *v340 = *v657;
          v351 = *(_OWORD *)(a2 - 184);
          v352 = *(_OWORD *)(a2 - 136);
          v353 = *(_OWORD *)(a2 - 152);
          *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 - 168);
          *(_OWORD *)(a1 + 448) = v353;
          *(_OWORD *)(a1 + 464) = v352;
          v354 = *(_OWORD *)(a2 - 72);
          v355 = *(_OWORD *)(a2 - 88);
          v356 = *(_OWORD *)(a2 - 104);
          *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 - 120);
          *(_OWORD *)(a1 + 496) = v356;
          *(_OWORD *)(a1 + 512) = v355;
          *(_OWORD *)(a1 + 528) = v354;
          v357 = *(_QWORD *)(a2 - 8);
          v358 = *(_OWORD *)(a2 - 24);
          v359 = *(_OWORD *)(a2 - 40);
          *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 - 56);
          *(_OWORD *)(a1 + 560) = v359;
          *(_OWORD *)(a1 + 576) = v358;
          *(_QWORD *)(a1 + 592) = v357;
          *(_OWORD *)(a1 + 416) = v351;
          *v657 = v672;
          v360 = v679;
          v361 = v680;
          v362 = v678;
          *(_OWORD *)(a2 - 120) = v677;
          *(_OWORD *)(a2 - 72) = v361;
          *(_OWORD *)(a2 - 88) = v360;
          *(_OWORD *)(a2 - 104) = v362;
          v364 = *(_OWORD *)v682;
          v363 = *(_OWORD *)&v682[16];
          v365 = v683;
          *(_OWORD *)(a2 - 56) = v681;
          *(_QWORD *)(a2 - 8) = v365;
          *(_OWORD *)(a2 - 24) = v363;
          *(_OWORD *)(a2 - 40) = v364;
          v366 = v673;
          v367 = v674;
          v368 = v675;
          *(_OWORD *)(a2 - 136) = v676;
          *(_OWORD *)(a2 - 152) = v368;
          *(__n128 *)(a2 - 168) = v367;
          *(__n128 *)(a2 - 184) = v366;
          if (sub_223788278(a1 + 400, a1 + 200))
          {
            v369 = *(__n128 *)(a1 + 216);
            v672 = *v339;
            v673 = v369;
            v370 = *(_OWORD *)(a1 + 248);
            v674 = *(__n128 *)(a1 + 232);
            v675 = v370;
            v371 = *(_OWORD *)(a1 + 376);
            *(_OWORD *)v682 = *(_OWORD *)(a1 + 360);
            *(_OWORD *)&v682[16] = v371;
            v372 = *(_OWORD *)(a1 + 312);
            v678 = *(_OWORD *)(a1 + 296);
            v679 = v372;
            v373 = *(_OWORD *)(a1 + 344);
            v680 = *(_OWORD *)(a1 + 328);
            v681 = v373;
            v374 = *(_OWORD *)(a1 + 280);
            v676 = *(_OWORD *)(a1 + 264);
            v677 = v374;
            *v339 = *v340;
            v375 = *(_OWORD *)(a1 + 544);
            v376 = *(_OWORD *)(a1 + 576);
            *(_OWORD *)(a1 + 360) = *(_OWORD *)(a1 + 560);
            *(_OWORD *)(a1 + 376) = v376;
            v377 = *(_OWORD *)(a1 + 480);
            v378 = *(_OWORD *)(a1 + 512);
            v379 = *(_OWORD *)(a1 + 528);
            *(_OWORD *)(a1 + 296) = *(_OWORD *)(a1 + 496);
            *(_OWORD *)(a1 + 312) = v378;
            *(_OWORD *)(a1 + 328) = v379;
            *(_OWORD *)(a1 + 344) = v375;
            v380 = *(_OWORD *)(a1 + 432);
            *(_OWORD *)(a1 + 216) = *(_OWORD *)(a1 + 416);
            *(_OWORD *)(a1 + 232) = v380;
            v381 = *(_OWORD *)(a1 + 464);
            *(_OWORD *)(a1 + 248) = *(_OWORD *)(a1 + 448);
            *(_OWORD *)(a1 + 264) = v381;
            *(_OWORD *)(a1 + 280) = v377;
            v382 = v673;
            *v340 = v672;
            v383 = *(_OWORD *)v682;
            v384 = *(_OWORD *)&v682[16];
            v385 = v680;
            *(_OWORD *)(a1 + 544) = v681;
            *(_OWORD *)(a1 + 560) = v383;
            *(_OWORD *)(a1 + 576) = v384;
            v386 = v678;
            v387 = v679;
            v388 = v676;
            *(_OWORD *)(a1 + 480) = v677;
            *(_OWORD *)(a1 + 496) = v386;
            *(_OWORD *)(a1 + 512) = v387;
            *(_OWORD *)(a1 + 528) = v385;
            v389 = v674;
            v390 = v675;
            *(__n128 *)(a1 + 416) = v382;
            *(__n128 *)(a1 + 432) = v389;
            v683 = *(_QWORD *)(a1 + 392);
            *(_QWORD *)(a1 + 392) = *(_QWORD *)(a1 + 592);
            *(_QWORD *)(a1 + 592) = v683;
            *(_OWORD *)(a1 + 448) = v390;
            *(_OWORD *)(a1 + 464) = v388;
            if (sub_223788278(a1 + 200, a1))
            {
              v391 = *(__n128 *)(a1 + 32);
              v392 = *(_OWORD *)(a1 + 48);
              v393 = *(_OWORD *)(a1 + 64);
              v394 = *(__n128 *)(a1 + 16);
              v672 = *(int8x16_t *)a1;
              v673 = v394;
              v675 = v392;
              v676 = v393;
              v674 = v391;
              v395 = *(_OWORD *)(a1 + 128);
              v397 = *(_OWORD *)(a1 + 80);
              v396 = *(_OWORD *)(a1 + 96);
              v679 = *(_OWORD *)(a1 + 112);
              v680 = v395;
              v677 = v397;
              v678 = v396;
              v399 = *(_OWORD *)(a1 + 160);
              v398 = *(_OWORD *)(a1 + 176);
              v400 = *(_OWORD *)(a1 + 144);
              v683 = *(_QWORD *)(a1 + 192);
              *(_OWORD *)v682 = v399;
              *(_OWORD *)&v682[16] = v398;
              v681 = v400;
              v401 = *(_OWORD *)(a1 + 216);
              v402 = *(_OWORD *)(a1 + 232);
              *(int8x16_t *)a1 = *v339;
              *(_OWORD *)(a1 + 16) = v401;
              v403 = *(_OWORD *)(a1 + 248);
              v404 = *(_OWORD *)(a1 + 264);
              *(_OWORD *)(a1 + 32) = v402;
              *(_OWORD *)(a1 + 48) = v403;
              v406 = *(_OWORD *)(a1 + 312);
              v405 = *(_OWORD *)(a1 + 328);
              v407 = *(_OWORD *)(a1 + 280);
              *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 296);
              *(_OWORD *)(a1 + 112) = v406;
              *(_OWORD *)(a1 + 64) = v404;
              *(_OWORD *)(a1 + 80) = v407;
              *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 392);
              v408 = *(_OWORD *)(a1 + 376);
              v409 = *(_OWORD *)(a1 + 344);
              *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 360);
              *(_OWORD *)(a1 + 176) = v408;
              *(_OWORD *)(a1 + 128) = v405;
              *(_OWORD *)(a1 + 144) = v409;
              v410 = v673;
              *v339 = v672;
              v411 = *(_OWORD *)v682;
              v412 = *(_OWORD *)&v682[16];
              v413 = v680;
              *(_OWORD *)(a1 + 344) = v681;
              *(_OWORD *)(a1 + 360) = v411;
              *(_OWORD *)(a1 + 376) = v412;
              v414 = v678;
              v415 = v679;
              v416 = v676;
              *(_OWORD *)(a1 + 280) = v677;
              *(_OWORD *)(a1 + 296) = v414;
              *(_QWORD *)(a1 + 392) = v683;
              *(_OWORD *)(a1 + 312) = v415;
              *(_OWORD *)(a1 + 328) = v413;
              a5 = v674;
              v417 = v675;
              *(__n128 *)(a1 + 216) = v410;
              *(__n128 *)(a1 + 232) = a5;
              *(_OWORD *)(a1 + 248) = v417;
              *(_OWORD *)(a1 + 264) = v416;
            }
          }
        }
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = sub_223788F04(a1, a1 + 200, a1 + 400, a1 + 600, (uint64_t)v657).n128_u64[0];
        return a5.n128_f64[0];
      default:
        v661 = a1;
        if (v8 > 4799)
        {
          if (!a3)
          {
            if (a1 != a2)
            {
              v420 = (v9 - 2) >> 1;
              v421 = v420;
              do
              {
                v430 = v421;
                if (v420 >= v421)
                {
                  v431 = (2 * v421) | 1;
                  v432 = a1 + 200 * v431;
                  if (2 * v421 + 2 < (uint64_t)v9 && sub_223788278(v432, v432 + 200))
                  {
                    v432 += 200;
                    v431 = 2 * v430 + 2;
                  }
                  a1 = v661;
                  v433 = v661 + 200 * v430;
                  if ((sub_223788278(v432, v433) & 1) == 0)
                  {
                    v672 = *(int8x16_t *)v433;
                    v434 = v661 + 200 * v430;
                    v435 = *(_OWORD *)(v434 + 128);
                    v437 = *(_OWORD *)(v434 + 80);
                    v436 = *(_OWORD *)(v434 + 96);
                    v679 = *(_OWORD *)(v434 + 112);
                    v680 = v435;
                    v677 = v437;
                    v678 = v436;
                    v439 = *(_OWORD *)(v434 + 160);
                    v438 = *(_OWORD *)(v434 + 176);
                    v440 = *(_OWORD *)(v434 + 144);
                    v683 = *(_QWORD *)(v434 + 192);
                    *(_OWORD *)v682 = v439;
                    *(_OWORD *)&v682[16] = v438;
                    v681 = v440;
                    v441 = *(__n128 *)(v434 + 16);
                    v442 = *(__n128 *)(v434 + 32);
                    v443 = *(_OWORD *)(v434 + 64);
                    v675 = *(_OWORD *)(v434 + 48);
                    v676 = v443;
                    v673 = v441;
                    v674 = v442;
                    do
                    {
                      v444 = v432;
                      *(_OWORD *)v433 = *(_OWORD *)v432;
                      v445 = *(_OWORD *)(v432 + 128);
                      v447 = *(_OWORD *)(v432 + 80);
                      v446 = *(_OWORD *)(v432 + 96);
                      *(_OWORD *)(v433 + 112) = *(_OWORD *)(v432 + 112);
                      *(_OWORD *)(v433 + 128) = v445;
                      *(_OWORD *)(v433 + 80) = v447;
                      *(_OWORD *)(v433 + 96) = v446;
                      v449 = *(_OWORD *)(v432 + 160);
                      v448 = *(_OWORD *)(v432 + 176);
                      v450 = *(_OWORD *)(v432 + 144);
                      *(_QWORD *)(v433 + 192) = *(_QWORD *)(v432 + 192);
                      *(_OWORD *)(v433 + 160) = v449;
                      *(_OWORD *)(v433 + 176) = v448;
                      *(_OWORD *)(v433 + 144) = v450;
                      v451 = *(_OWORD *)(v432 + 16);
                      v452 = *(_OWORD *)(v432 + 32);
                      v453 = *(_OWORD *)(v432 + 64);
                      *(_OWORD *)(v433 + 48) = *(_OWORD *)(v432 + 48);
                      *(_OWORD *)(v433 + 64) = v453;
                      *(_OWORD *)(v433 + 16) = v451;
                      *(_OWORD *)(v433 + 32) = v452;
                      if (v420 < v431)
                        break;
                      v454 = (2 * v431) | 1;
                      v432 = v661 + 200 * v454;
                      v455 = 2 * v431 + 2;
                      if (v455 < (uint64_t)v9 && sub_223788278(v661 + 200 * v454, v432 + 200))
                      {
                        v432 += 200;
                        v454 = v455;
                      }
                      v433 = v444;
                      v431 = v454;
                    }
                    while (!sub_223788278(v432, (uint64_t)&v672));
                    *(int8x16_t *)v444 = v672;
                    v422 = v680;
                    v424 = v677;
                    v423 = v678;
                    *(_OWORD *)(v444 + 112) = v679;
                    *(_OWORD *)(v444 + 128) = v422;
                    *(_OWORD *)(v444 + 80) = v424;
                    *(_OWORD *)(v444 + 96) = v423;
                    v426 = *(_OWORD *)v682;
                    v425 = *(_OWORD *)&v682[16];
                    v427 = v681;
                    *(_QWORD *)(v444 + 192) = v683;
                    *(_OWORD *)(v444 + 160) = v426;
                    *(_OWORD *)(v444 + 176) = v425;
                    *(_OWORD *)(v444 + 144) = v427;
                    a5 = v673;
                    v428 = v674;
                    v429 = v676;
                    *(_OWORD *)(v444 + 48) = v675;
                    *(_OWORD *)(v444 + 64) = v429;
                    *(__n128 *)(v444 + 16) = a5;
                    *(__n128 *)(v444 + 32) = v428;
                    a1 = v661;
                  }
                }
                v421 = v430 - 1;
              }
              while (v430);
              v513 = v8 / 0xC8uLL;
              v514 = a1 + 16;
              do
              {
                if (v513 >= 2)
                {
                  v523 = 0;
                  v662 = *(int8x16_t *)a1;
                  v524 = *(_OWORD *)(v514 + 48);
                  v526 = *(__n128 *)v514;
                  v525 = *(_OWORD *)(v514 + 16);
                  v665 = *(_OWORD *)(v514 + 32);
                  v666 = v524;
                  v663 = v526;
                  v664 = v525;
                  v527 = *(_OWORD *)(v514 + 112);
                  v529 = *(_OWORD *)(v514 + 64);
                  v528 = *(_OWORD *)(v514 + 80);
                  v669 = *(_OWORD *)(v514 + 96);
                  *(_OWORD *)v670 = v527;
                  v667 = v529;
                  v668 = v528;
                  v531 = *(_OWORD *)(v514 + 144);
                  v530 = *(_OWORD *)(v514 + 160);
                  v532 = *(_OWORD *)(v514 + 128);
                  v671 = *(_QWORD *)(v514 + 176);
                  *(_OWORD *)&v670[32] = v531;
                  *(_OWORD *)&v670[48] = v530;
                  *(_OWORD *)&v670[16] = v532;
                  v533 = a1;
                  do
                  {
                    v543 = v533 + 200 * v523 + 200;
                    v544 = (2 * v523) | 1;
                    v545 = 2 * v523 + 2;
                    if (v545 < v513 && sub_223788278(v533 + 200 * v523 + 200, v533 + 200 * v523 + 400))
                    {
                      v543 += 200;
                      v544 = v545;
                    }
                    *(_OWORD *)v533 = *(_OWORD *)v543;
                    v534 = *(_OWORD *)(v543 + 128);
                    v536 = *(_OWORD *)(v543 + 80);
                    v535 = *(_OWORD *)(v543 + 96);
                    *(_OWORD *)(v533 + 112) = *(_OWORD *)(v543 + 112);
                    *(_OWORD *)(v533 + 128) = v534;
                    *(_OWORD *)(v533 + 80) = v536;
                    *(_OWORD *)(v533 + 96) = v535;
                    v538 = *(_OWORD *)(v543 + 160);
                    v537 = *(_OWORD *)(v543 + 176);
                    v539 = *(_OWORD *)(v543 + 144);
                    *(_QWORD *)(v533 + 192) = *(_QWORD *)(v543 + 192);
                    *(_OWORD *)(v533 + 160) = v538;
                    *(_OWORD *)(v533 + 176) = v537;
                    *(_OWORD *)(v533 + 144) = v539;
                    v540 = *(_OWORD *)(v543 + 16);
                    v541 = *(_OWORD *)(v543 + 32);
                    v542 = *(_OWORD *)(v543 + 64);
                    *(_OWORD *)(v533 + 48) = *(_OWORD *)(v543 + 48);
                    *(_OWORD *)(v533 + 64) = v542;
                    *(_OWORD *)(v533 + 16) = v540;
                    *(_OWORD *)(v533 + 32) = v541;
                    v533 = v543;
                    v523 = v544;
                  }
                  while (v544 <= (uint64_t)((unint64_t)(v513 - 2) >> 1));
                  v546 = (__n128 *)(v543 + 16);
                  v547 = (int8x16_t *)(a2 - 200);
                  if (v543 == a2 - 200)
                  {
                    *(int8x16_t *)v543 = v662;
                    v515 = *(_OWORD *)v670;
                    v517 = v667;
                    v516 = v668;
                    *(_OWORD *)(v543 + 112) = v669;
                    *(_OWORD *)(v543 + 128) = v515;
                    *(_OWORD *)(v543 + 80) = v517;
                    *(_OWORD *)(v543 + 96) = v516;
                    v519 = *(_OWORD *)&v670[32];
                    v518 = *(_OWORD *)&v670[48];
                    v520 = *(_OWORD *)&v670[16];
                    *(_QWORD *)(v543 + 192) = v671;
                    *(_OWORD *)(v543 + 160) = v519;
                    *(_OWORD *)(v543 + 176) = v518;
                    *(_OWORD *)(v543 + 144) = v520;
                    a5 = v663;
                    v521 = v664;
                    v522 = v666;
                    *(_OWORD *)(v543 + 48) = v665;
                    *(_OWORD *)(v543 + 64) = v522;
                    *v546 = a5;
                    *(_OWORD *)(v543 + 32) = v521;
                  }
                  else
                  {
                    *(int8x16_t *)v543 = *v547;
                    v548 = *(_OWORD *)(a2 - 104);
                    v549 = *(_OWORD *)(a2 - 72);
                    v550 = *(_OWORD *)(a2 - 120);
                    *(_OWORD *)(v543 + 112) = *(_OWORD *)(a2 - 88);
                    *(_OWORD *)(v543 + 128) = v549;
                    *(_OWORD *)(v543 + 80) = v550;
                    *(_OWORD *)(v543 + 96) = v548;
                    v551 = *(_OWORD *)(a2 - 40);
                    v552 = *(_OWORD *)(a2 - 24);
                    v553 = *(_OWORD *)(a2 - 56);
                    *(_QWORD *)(v543 + 192) = *(_QWORD *)(a2 - 8);
                    *(_OWORD *)(v543 + 160) = v551;
                    *(_OWORD *)(v543 + 176) = v552;
                    *(_OWORD *)(v543 + 144) = v553;
                    v554 = *(__n128 *)(a2 - 184);
                    v555 = *(_OWORD *)(a2 - 168);
                    v556 = *(_OWORD *)(a2 - 136);
                    *(_OWORD *)(v543 + 48) = *(_OWORD *)(a2 - 152);
                    *(_OWORD *)(v543 + 64) = v556;
                    *v546 = v554;
                    *(_OWORD *)(v543 + 32) = v555;
                    *v547 = v662;
                    v557 = v669;
                    v558 = *(_OWORD *)v670;
                    v559 = v668;
                    *(_OWORD *)(a2 - 120) = v667;
                    *(_OWORD *)(a2 - 72) = v558;
                    *(_OWORD *)(a2 - 88) = v557;
                    *(_OWORD *)(a2 - 104) = v559;
                    v561 = *(_OWORD *)&v670[32];
                    v560 = *(_OWORD *)&v670[48];
                    v562 = v671;
                    *(_OWORD *)(a2 - 56) = *(_OWORD *)&v670[16];
                    *(_QWORD *)(a2 - 8) = v562;
                    *(_OWORD *)(a2 - 24) = v560;
                    *(_OWORD *)(a2 - 40) = v561;
                    a5 = v663;
                    v563 = v664;
                    v564 = v665;
                    *(_OWORD *)(a2 - 136) = v666;
                    *(_OWORD *)(a2 - 152) = v564;
                    *(_OWORD *)(a2 - 168) = v563;
                    *(__n128 *)(a2 - 184) = a5;
                    v565 = v543 - v661 + 200;
                    if (v565 >= 201)
                    {
                      v566 = (v565 / 0xC8uLL - 2) >> 1;
                      v567 = v661 + 200 * v566;
                      if (sub_223788278(v567, v543))
                      {
                        v672 = *(int8x16_t *)v543;
                        v568 = *(_OWORD *)(v543 + 128);
                        v570 = *(_OWORD *)(v543 + 80);
                        v569 = *(_OWORD *)(v543 + 96);
                        v679 = *(_OWORD *)(v543 + 112);
                        v680 = v568;
                        v677 = v570;
                        v678 = v569;
                        v572 = *(_OWORD *)(v543 + 160);
                        v571 = *(_OWORD *)(v543 + 176);
                        v573 = *(_OWORD *)(v543 + 144);
                        v683 = *(_QWORD *)(v543 + 192);
                        *(_OWORD *)v682 = v572;
                        *(_OWORD *)&v682[16] = v571;
                        v681 = v573;
                        v574 = *v546;
                        v575 = *(__n128 *)(v543 + 32);
                        v576 = *(_OWORD *)(v543 + 64);
                        v675 = *(_OWORD *)(v543 + 48);
                        v676 = v576;
                        v673 = v574;
                        v674 = v575;
                        do
                        {
                          v577 = v567;
                          *(_OWORD *)v543 = *(_OWORD *)v567;
                          v578 = *(_OWORD *)(v567 + 128);
                          v580 = *(_OWORD *)(v567 + 80);
                          v579 = *(_OWORD *)(v567 + 96);
                          *(_OWORD *)(v543 + 112) = *(_OWORD *)(v567 + 112);
                          *(_OWORD *)(v543 + 128) = v578;
                          *(_OWORD *)(v543 + 80) = v580;
                          *(_OWORD *)(v543 + 96) = v579;
                          v582 = *(_OWORD *)(v567 + 160);
                          v581 = *(_OWORD *)(v567 + 176);
                          v583 = *(_OWORD *)(v567 + 144);
                          *(_QWORD *)(v543 + 192) = *(_QWORD *)(v567 + 192);
                          *(_OWORD *)(v543 + 160) = v582;
                          *(_OWORD *)(v543 + 176) = v581;
                          *(_OWORD *)(v543 + 144) = v583;
                          v584 = *(_OWORD *)(v567 + 16);
                          v585 = *(_OWORD *)(v567 + 32);
                          v586 = *(_OWORD *)(v567 + 64);
                          *(_OWORD *)(v543 + 48) = *(_OWORD *)(v567 + 48);
                          *(_OWORD *)(v543 + 64) = v586;
                          *(_OWORD *)(v543 + 16) = v584;
                          *(_OWORD *)(v543 + 32) = v585;
                          if (!v566)
                            break;
                          v566 = (v566 - 1) >> 1;
                          v567 = v661 + 200 * v566;
                          v543 = v577;
                        }
                        while ((sub_223788278(v567, (uint64_t)&v672) & 1) != 0);
                        *(int8x16_t *)v577 = v672;
                        v587 = v680;
                        v589 = v677;
                        v588 = v678;
                        *(_OWORD *)(v577 + 112) = v679;
                        *(_OWORD *)(v577 + 128) = v587;
                        *(_OWORD *)(v577 + 80) = v589;
                        *(_OWORD *)(v577 + 96) = v588;
                        v591 = *(_OWORD *)v682;
                        v590 = *(_OWORD *)&v682[16];
                        v592 = v681;
                        *(_QWORD *)(v577 + 192) = v683;
                        *(_OWORD *)(v577 + 160) = v591;
                        *(_OWORD *)(v577 + 176) = v590;
                        *(_OWORD *)(v577 + 144) = v592;
                        a5 = v673;
                        v593 = v674;
                        v594 = v676;
                        *(_OWORD *)(v577 + 48) = v675;
                        *(_OWORD *)(v577 + 64) = v594;
                        *(__n128 *)(v577 + 16) = a5;
                        *(__n128 *)(v577 + 32) = v593;
                      }
                    }
                  }
                  a1 = v661;
                }
                a2 -= 200;
                v55 = (unint64_t)v513-- > 2;
              }
              while (v55);
            }
            return a5.n128_f64[0];
          }
          v658 = a3;
          v10 = v9 >> 1;
          v11 = (_OWORD *)(a1 + 200 * (v9 >> 1));
          if ((unint64_t)v8 < 0x6401)
          {
            sub_223788420(a1 + 200 * (v9 >> 1), a1, (uint64_t)v657);
            v7 = a2;
            a3 = v658 - 1;
            if ((a4 & 1) != 0)
              goto LABEL_10;
          }
          else
          {
            sub_223788420(a1, a1 + 200 * (v9 >> 1), (uint64_t)v657);
            v12 = 200 * v10;
            v13 = a1 + 200 * v10;
            sub_223788420(a1 + 200, v13 - 200, a2 - 400);
            sub_223788420(a1 + 400, a1 + 200 + v12, a2 - 600);
            sub_223788420(v13 - 200, (uint64_t)v11, a1 + 200 + v12);
            v14 = *(__n128 *)(a1 + 16);
            v672 = *(int8x16_t *)a1;
            v15 = *(__n128 *)(a1 + 32);
            v16 = *(_OWORD *)(a1 + 64);
            v675 = *(_OWORD *)(a1 + 48);
            v676 = v16;
            v673 = v14;
            v674 = v15;
            v17 = *(_OWORD *)(a1 + 128);
            v19 = *(_OWORD *)(a1 + 80);
            v18 = *(_OWORD *)(a1 + 96);
            v679 = *(_OWORD *)(a1 + 112);
            v680 = v17;
            v677 = v19;
            v678 = v18;
            v21 = *(_OWORD *)(a1 + 160);
            v20 = *(_OWORD *)(a1 + 176);
            v22 = *(_OWORD *)(a1 + 144);
            v683 = *(_QWORD *)(a1 + 192);
            *(_OWORD *)v682 = v21;
            *(_OWORD *)&v682[16] = v20;
            v681 = v22;
            v23 = *(_OWORD *)(v13 + 48);
            v24 = *(_OWORD *)(v13 + 64);
            v26 = *(_OWORD *)(v13 + 16);
            v25 = *(_OWORD *)(v13 + 32);
            *(_OWORD *)a1 = *v11;
            *(_OWORD *)(a1 + 16) = v26;
            *(_OWORD *)(a1 + 48) = v23;
            *(_OWORD *)(a1 + 64) = v24;
            *(_OWORD *)(a1 + 32) = v25;
            v27 = *(_OWORD *)(v13 + 128);
            v29 = *(_OWORD *)(v13 + 80);
            v28 = *(_OWORD *)(v13 + 96);
            *(_OWORD *)(a1 + 112) = *(_OWORD *)(v13 + 112);
            *(_OWORD *)(a1 + 128) = v27;
            *(_OWORD *)(a1 + 80) = v29;
            *(_OWORD *)(a1 + 96) = v28;
            v31 = *(_OWORD *)(v13 + 160);
            v30 = *(_OWORD *)(v13 + 176);
            v32 = *(_OWORD *)(v13 + 144);
            *(_QWORD *)(a1 + 192) = *(_QWORD *)(v13 + 192);
            *(_OWORD *)(a1 + 160) = v31;
            *(_OWORD *)(a1 + 176) = v30;
            *(_OWORD *)(a1 + 144) = v32;
            *v11 = v672;
            v33 = v680;
            v35 = v677;
            v34 = v678;
            *(_OWORD *)(v13 + 112) = v679;
            *(_OWORD *)(v13 + 128) = v33;
            *(_OWORD *)(v13 + 80) = v35;
            *(_OWORD *)(v13 + 96) = v34;
            v37 = *(_OWORD *)v682;
            v36 = *(_OWORD *)&v682[16];
            v38 = v681;
            *(_QWORD *)(v13 + 192) = v683;
            *(_OWORD *)(v13 + 160) = v37;
            *(_OWORD *)(v13 + 176) = v36;
            *(_OWORD *)(v13 + 144) = v38;
            v39 = v673;
            v40 = v674;
            v41 = v676;
            *(_OWORD *)(v13 + 48) = v675;
            *(_OWORD *)(v13 + 64) = v41;
            *(__n128 *)(v13 + 16) = v39;
            *(__n128 *)(v13 + 32) = v40;
            v7 = a2;
            a3 = v658 - 1;
            if ((a4 & 1) != 0)
              goto LABEL_10;
          }
          if ((sub_223788278(a1 - 200, a1) & 1) == 0)
          {
            v201 = *(__n128 *)(a1 + 16);
            v662 = *(int8x16_t *)a1;
            v202 = *(_OWORD *)(a1 + 32);
            v203 = *(_OWORD *)(a1 + 64);
            v665 = *(_OWORD *)(a1 + 48);
            v666 = v203;
            v663 = v201;
            v664 = v202;
            v204 = *(_OWORD *)(a1 + 128);
            v206 = *(_OWORD *)(a1 + 80);
            v205 = *(_OWORD *)(a1 + 96);
            v669 = *(_OWORD *)(a1 + 112);
            *(_OWORD *)v670 = v204;
            v667 = v206;
            v668 = v205;
            v208 = *(_OWORD *)(a1 + 160);
            v207 = *(_OWORD *)(a1 + 176);
            v209 = *(_OWORD *)(a1 + 144);
            v671 = *(_QWORD *)(a1 + 192);
            *(_OWORD *)&v670[32] = v208;
            *(_OWORD *)&v670[48] = v207;
            *(_OWORD *)&v670[16] = v209;
            if ((sub_223788278((uint64_t)&v662, (uint64_t)v657) & 1) != 0)
            {
              do
                a1 += 200;
              while ((sub_223788278((uint64_t)&v662, a1) & 1) == 0);
            }
            else
            {
              v210 = a1 + 200;
              do
              {
                a1 = v210;
                if (v210 >= v7)
                  break;
                v211 = sub_223788278((uint64_t)&v662, v210);
                v210 = a1 + 200;
              }
              while (!v211);
            }
            v212 = v7;
            if (a1 < v7)
            {
              v212 = v7;
              do
                v212 -= 200;
              while ((sub_223788278((uint64_t)&v662, v212) & 1) != 0);
            }
LABEL_286:
            while (a1 < v212)
            {
              v213 = *(__n128 *)(a1 + 16);
              v672 = *(int8x16_t *)a1;
              v214 = *(__n128 *)(a1 + 32);
              v215 = *(_OWORD *)(a1 + 64);
              v675 = *(_OWORD *)(a1 + 48);
              v676 = v215;
              v673 = v213;
              v674 = v214;
              v216 = *(_OWORD *)(a1 + 128);
              v218 = *(_OWORD *)(a1 + 80);
              v217 = *(_OWORD *)(a1 + 96);
              v679 = *(_OWORD *)(a1 + 112);
              v680 = v216;
              v677 = v218;
              v678 = v217;
              v220 = *(_OWORD *)(a1 + 160);
              v219 = *(_OWORD *)(a1 + 176);
              v221 = *(_OWORD *)(a1 + 144);
              v683 = *(_QWORD *)(a1 + 192);
              *(_OWORD *)v682 = v220;
              *(_OWORD *)&v682[16] = v219;
              v681 = v221;
              *(_OWORD *)a1 = *(_OWORD *)v212;
              v222 = *(_OWORD *)(v212 + 128);
              v224 = *(_OWORD *)(v212 + 80);
              v223 = *(_OWORD *)(v212 + 96);
              *(_OWORD *)(a1 + 112) = *(_OWORD *)(v212 + 112);
              *(_OWORD *)(a1 + 128) = v222;
              *(_OWORD *)(a1 + 80) = v224;
              *(_OWORD *)(a1 + 96) = v223;
              v226 = *(_OWORD *)(v212 + 160);
              v225 = *(_OWORD *)(v212 + 176);
              v227 = *(_OWORD *)(v212 + 144);
              *(_QWORD *)(a1 + 192) = *(_QWORD *)(v212 + 192);
              *(_OWORD *)(a1 + 160) = v226;
              *(_OWORD *)(a1 + 176) = v225;
              *(_OWORD *)(a1 + 144) = v227;
              v228 = *(_OWORD *)(v212 + 16);
              v229 = *(_OWORD *)(v212 + 32);
              v230 = *(_OWORD *)(v212 + 64);
              *(_OWORD *)(a1 + 48) = *(_OWORD *)(v212 + 48);
              *(_OWORD *)(a1 + 64) = v230;
              *(_OWORD *)(a1 + 16) = v228;
              *(_OWORD *)(a1 + 32) = v229;
              *(int8x16_t *)v212 = v672;
              v231 = v680;
              v233 = v677;
              v232 = v678;
              *(_OWORD *)(v212 + 112) = v679;
              *(_OWORD *)(v212 + 128) = v231;
              *(_OWORD *)(v212 + 80) = v233;
              *(_OWORD *)(v212 + 96) = v232;
              v235 = *(_OWORD *)v682;
              v234 = *(_OWORD *)&v682[16];
              v236 = v681;
              *(_QWORD *)(v212 + 192) = v683;
              *(_OWORD *)(v212 + 160) = v235;
              *(_OWORD *)(v212 + 176) = v234;
              *(_OWORD *)(v212 + 144) = v236;
              v237 = v673;
              v238 = v674;
              v239 = v676;
              *(_OWORD *)(v212 + 48) = v675;
              *(_OWORD *)(v212 + 64) = v239;
              *(__n128 *)(v212 + 16) = v237;
              *(__n128 *)(v212 + 32) = v238;
              while (1)
              {
LABEL_201:
                while (1)
                {
                  v240 = a1;
                  a1 += 200;
                  v241 = *(_QWORD *)(v240 + 328);
                  if (*(_QWORD *)v670 == v241)
                    break;
                  if (*(uint64_t *)v670 < v241)
                    goto LABEL_245;
                }
                v242 = *(_QWORD *)(v240 + 336);
                v243 = *(_QWORD *)&v670[8] < v242;
                if (*(_QWORD *)&v670[8] == v242)
                {
                  v244 = *(_QWORD *)(v240 + 344);
                  v243 = *(_QWORD *)&v670[16] < v244;
                  if (*(_QWORD *)&v670[16] == v244)
                    v243 = *(_OWORD *)&v670[24] < *(_OWORD *)(v240 + 352);
                }
                if (v243)
                  break;
                if (*(_QWORD *)&v670[24] == *(_QWORD *)(v240 + 352)
                  && *(_OWORD *)&v670[8] == *(_OWORD *)(v240 + 336)
                  && *(_QWORD *)&v670[32] == *(_QWORD *)(v240 + 360))
                {
                  if (vabdd_f64(*(double *)&v670[56], *(double *)(v240 + 384)) < 50.0
                    && (v672 = *(int8x16_t *)&v670[40],
                        sub_2233E5290((int64_t)&v672),
                        v688 = *(std::logic_error *)(v240 + 368),
                        sub_2233E5290((int64_t)&v688),
                        *(_OWORD *)&v672 == v688)
                    && *(_OWORD *)&v662 == *(_OWORD *)(v240 + 200))
                  {
                    if ((sub_223788DA0((uint64_t)&v662, a1) & 1) != 0)
                      goto LABEL_245;
                  }
                  else
                  {
                    v245 = *(double *)(v240 + 384);
                    if (vabdd_f64(*(double *)&v670[56], v245) >= 50.0)
                    {
                      if (*(double *)&v670[56] < v245)
                        goto LABEL_245;
                    }
                    else
                    {
                      v672 = *(int8x16_t *)&v670[40];
                      sub_2233E5290((int64_t)&v672);
                      v688 = *(std::logic_error *)(v240 + 368);
                      sub_2233E5290((int64_t)&v688);
                      v246 = v672.i64[1];
                      v247 = v672.i64[0] / v672.i64[1];
                      v248 = v672.i64[0] % v672.i64[1];
                      if (v672.i64[0] % v672.i64[1] < 0)
                      {
                        v250 = ((unint64_t)(v672.i64[1] + v248) >> 63)
                             + (((v672.i64[1] + v248) & ~((v672.i64[1] + v248) >> 63))
                              - (((unint64_t)(v672.i64[1] + v248) >> 63)
                               + v672.i64[1]
                               + v248))
                             / v672.i64[1]
                             + 1;
                        v249.i64[0] = -1;
                        v249.i64[1] = -1;
                        if (v250 < 4)
                          goto LABEL_451;
                        v248 += (v250 & 0xFFFFFFFFFFFFFFFCLL) * v672.i64[1];
                        v251 = 0uLL;
                        v252 = (int64x2_t)(unint64_t)(v672.i64[0] / v672.i64[1]);
                        v253 = v250 & 0xFFFFFFFFFFFFFFFCLL;
                        do
                        {
                          v252 = vaddq_s64(v252, v249);
                          v251 = vaddq_s64(v251, v249);
                          v253 -= 4;
                        }
                        while (v253);
                        v247 = vaddvq_s64(vaddq_s64(v251, v252));
                        if (v250 != (v250 & 0xFFFFFFFFFFFFFFFCLL))
                        {
LABEL_451:
                          do
                          {
                            v248 += v672.i64[1];
                            --v247;
                          }
                          while (v248 < 0);
                        }
                      }
                      else
                      {
                        v249.i64[0] = -1;
                        v249.i64[1] = -1;
                      }
                      imp = v688.__imp_.__imp_;
                      v255 = (uint64_t)v688.__vftable / (uint64_t)v688.__imp_.__imp_;
                      v256 = (uint64_t)v688.__vftable % (uint64_t)v688.__imp_.__imp_;
                      if ((uint64_t)v688.__vftable % (uint64_t)v688.__imp_.__imp_ < 0)
                      {
                        v257 = ((unint64_t)&v688.__imp_.__imp_[v256] >> 63)
                             + (((uint64_t)&v688.__imp_.__imp_[v256] & ~((uint64_t)&v688.__imp_.__imp_[v256] >> 63))
                              - (unint64_t)&v688.__imp_.__imp_[v256
                                                                    + ((unint64_t)&v688.__imp_.__imp_[v256] >> 63)])
                             / (unint64_t)v688.__imp_.__imp_
                             + 1;
                        if (v257 < 4)
                          goto LABEL_452;
                        v256 += (v257 & 0xFFFFFFFFFFFFFFFCLL) * (unint64_t)v688.__imp_.__imp_;
                        v258 = 0uLL;
                        v259 = (int64x2_t)(unint64_t)((uint64_t)v688.__vftable / (uint64_t)v688.__imp_.__imp_);
                        v260 = v257 & 0xFFFFFFFFFFFFFFFCLL;
                        do
                        {
                          v259 = vaddq_s64(v259, v249);
                          v258 = vaddq_s64(v258, v249);
                          v260 -= 4;
                        }
                        while (v260);
                        v255 = vaddvq_s64(vaddq_s64(v258, v259));
                        if (v257 != (v257 & 0xFFFFFFFFFFFFFFFCLL))
                        {
LABEL_452:
                          do
                          {
                            v256 += (uint64_t)v688.__imp_.__imp_;
                            --v255;
                          }
                          while (v256 < 0);
                        }
                      }
                      v261 = v247 < v255;
                      if (v247 == v255)
                      {
                        v262 = 0;
                        do
                        {
                          v263 = v248;
                          v264 = (const char *)v256;
                          v262 ^= 1u;
                          if (!v248 || !v256)
                          {
                            if (v248 != v256 && (v262 != 0) != (v248 != 0))
                              goto LABEL_245;
                            goto LABEL_201;
                          }
                          v265 = v246 / v248;
                          v248 = v246 % v248;
                          v266 = (uint64_t)imp / v256;
                          v256 = (uint64_t)imp % v256;
                          imp = v264;
                          v246 = v263;
                        }
                        while (v265 == v266);
                        v261 = v265 < v266;
                        if (!v262)
                          goto LABEL_238;
                        if (v265 > v266)
                          goto LABEL_245;
                      }
                      else
                      {
LABEL_238:
                        if (v261)
                          goto LABEL_245;
                      }
                    }
                  }
                }
              }
              while (1)
              {
                do
                {
LABEL_245:
                  while (1)
                  {
                    v267 = v212;
                    v212 -= 200;
                    v268 = *(_QWORD *)(v267 - 72);
                    if (*(_QWORD *)v670 == v268)
                      break;
                    if (*(uint64_t *)v670 >= v268)
                      goto LABEL_286;
                  }
                  v269 = *(_QWORD *)(v267 - 64);
                  v270 = *(_QWORD *)&v670[8] < v269;
                  if (*(_QWORD *)&v670[8] == v269)
                  {
                    v271 = *(_QWORD *)(v267 - 56);
                    v270 = *(_QWORD *)&v670[16] < v271;
                    if (*(_QWORD *)&v670[16] == v271)
                      v270 = *(_OWORD *)&v670[24] < *(_OWORD *)(v267 - 48);
                  }
                }
                while (v270);
                if (*(_QWORD *)&v670[24] != *(_QWORD *)(v267 - 48)
                  || *(_OWORD *)&v670[8] != *(_OWORD *)(v267 - 64)
                  || *(_QWORD *)&v670[32] != *(_QWORD *)(v267 - 40))
                {
                  break;
                }
                if (vabdd_f64(*(double *)&v670[56], *(double *)(v267 - 16)) < 50.0
                  && (v672 = *(int8x16_t *)&v670[40],
                      sub_2233E5290((int64_t)&v672),
                      v688 = *(std::logic_error *)(v267 - 32),
                      sub_2233E5290((int64_t)&v688),
                      *(_OWORD *)&v672 == v688)
                  && *(_OWORD *)&v662 == *(_OWORD *)(v267 - 200))
                {
                  if ((sub_223788DA0((uint64_t)&v662, v212) & 1) == 0)
                    goto LABEL_286;
                }
                else
                {
                  v272 = *(double *)(v267 - 16);
                  if (vabdd_f64(*(double *)&v670[56], v272) >= 50.0)
                  {
                    if (*(double *)&v670[56] >= v272)
                      goto LABEL_286;
                  }
                  else
                  {
                    v672 = *(int8x16_t *)&v670[40];
                    sub_2233E5290((int64_t)&v672);
                    v688 = *(std::logic_error *)(v267 - 32);
                    sub_2233E5290((int64_t)&v688);
                    v273 = v672.i64[1];
                    v274 = v672.i64[0] / v672.i64[1];
                    v275 = v672.i64[0] % v672.i64[1];
                    if (v672.i64[0] % v672.i64[1] < 0)
                    {
                      v277 = ((unint64_t)(v672.i64[1] + v275) >> 63)
                           + (((v672.i64[1] + v275) & ~((v672.i64[1] + v275) >> 63))
                            - (((unint64_t)(v672.i64[1] + v275) >> 63)
                             + v672.i64[1]
                             + v275))
                           / v672.i64[1]
                           + 1;
                      v276.i64[0] = -1;
                      v276.i64[1] = -1;
                      if (v277 < 4)
                        goto LABEL_453;
                      v275 += (v277 & 0xFFFFFFFFFFFFFFFCLL) * v672.i64[1];
                      v278 = 0uLL;
                      v279 = (int64x2_t)(unint64_t)(v672.i64[0] / v672.i64[1]);
                      v280 = v277 & 0xFFFFFFFFFFFFFFFCLL;
                      do
                      {
                        v279 = vaddq_s64(v279, v276);
                        v278 = vaddq_s64(v278, v276);
                        v280 -= 4;
                      }
                      while (v280);
                      v274 = vaddvq_s64(vaddq_s64(v278, v279));
                      if (v277 != (v277 & 0xFFFFFFFFFFFFFFFCLL))
                      {
LABEL_453:
                        do
                        {
                          v275 += v672.i64[1];
                          --v274;
                        }
                        while (v275 < 0);
                      }
                    }
                    else
                    {
                      v276.i64[0] = -1;
                      v276.i64[1] = -1;
                    }
                    v281 = v688.__imp_.__imp_;
                    v282 = (uint64_t)v688.__vftable / (uint64_t)v688.__imp_.__imp_;
                    v283 = (uint64_t)v688.__vftable % (uint64_t)v688.__imp_.__imp_;
                    if ((uint64_t)v688.__vftable % (uint64_t)v688.__imp_.__imp_ < 0)
                    {
                      v284 = ((unint64_t)&v688.__imp_.__imp_[v283] >> 63)
                           + (((uint64_t)&v688.__imp_.__imp_[v283] & ~((uint64_t)&v688.__imp_.__imp_[v283] >> 63))
                            - (unint64_t)&v688.__imp_.__imp_[v283
                                                                  + ((unint64_t)&v688.__imp_.__imp_[v283] >> 63)])
                           / (unint64_t)v688.__imp_.__imp_
                           + 1;
                      if (v284 < 4)
                        goto LABEL_454;
                      v283 += (v284 & 0xFFFFFFFFFFFFFFFCLL) * (unint64_t)v688.__imp_.__imp_;
                      v285 = 0uLL;
                      v286 = (int64x2_t)(unint64_t)((uint64_t)v688.__vftable / (uint64_t)v688.__imp_.__imp_);
                      v287 = v284 & 0xFFFFFFFFFFFFFFFCLL;
                      do
                      {
                        v286 = vaddq_s64(v286, v276);
                        v285 = vaddq_s64(v285, v276);
                        v287 -= 4;
                      }
                      while (v287);
                      v282 = vaddvq_s64(vaddq_s64(v285, v286));
                      if (v284 != (v284 & 0xFFFFFFFFFFFFFFFCLL))
                      {
LABEL_454:
                        do
                        {
                          v283 += (uint64_t)v688.__imp_.__imp_;
                          --v282;
                        }
                        while (v283 < 0);
                      }
                    }
                    v288 = v274 < v282;
                    if (v274 == v282)
                    {
                      v289 = 0;
                      do
                      {
                        v290 = v275;
                        v291 = (const char *)v283;
                        v289 ^= 1u;
                        if (!v275 || !v283)
                        {
                          if (v275 != v283 && (v289 != 0) != (v275 != 0))
                            goto LABEL_245;
                          goto LABEL_286;
                        }
                        v292 = v273 / v275;
                        v275 = v273 % v275;
                        v293 = (uint64_t)v281 / v283;
                        v283 = (uint64_t)v281 % v283;
                        v281 = v291;
                        v273 = v290;
                      }
                      while (v292 == v293);
                      v288 = v292 < v293;
                      if (!v289)
                        goto LABEL_282;
                      if (v292 > v293)
                        goto LABEL_245;
                      goto LABEL_286;
                    }
LABEL_282:
                    if (!v288)
                      goto LABEL_286;
                  }
                }
              }
            }
            v294 = (int8x16_t *)(a1 - 200);
            if (a1 - 200 != v661)
            {
              *(int8x16_t *)v661 = *v294;
              v295 = *(_OWORD *)(a1 - 104);
              v296 = *(_OWORD *)(a1 - 72);
              v297 = *(_OWORD *)(a1 - 120);
              *(_OWORD *)(v661 + 112) = *(_OWORD *)(a1 - 88);
              *(_OWORD *)(v661 + 128) = v296;
              *(_OWORD *)(v661 + 80) = v297;
              *(_OWORD *)(v661 + 96) = v295;
              v298 = *(_OWORD *)(a1 - 40);
              v299 = *(_OWORD *)(a1 - 24);
              v300 = *(_OWORD *)(a1 - 56);
              *(_QWORD *)(v661 + 192) = *(_QWORD *)(a1 - 8);
              *(_OWORD *)(v661 + 160) = v298;
              *(_OWORD *)(v661 + 176) = v299;
              *(_OWORD *)(v661 + 144) = v300;
              v301 = *(_OWORD *)(a1 - 184);
              v302 = *(_OWORD *)(a1 - 168);
              v303 = *(_OWORD *)(a1 - 136);
              *(_OWORD *)(v661 + 48) = *(_OWORD *)(a1 - 152);
              *(_OWORD *)(v661 + 64) = v303;
              *(_OWORD *)(v661 + 16) = v301;
              *(_OWORD *)(v661 + 32) = v302;
            }
            a4 = 0;
            *v294 = v662;
            v304 = v669;
            v305 = *(_OWORD *)v670;
            v306 = v668;
            *(_OWORD *)(a1 - 120) = v667;
            *(_OWORD *)(a1 - 72) = v305;
            *(_OWORD *)(a1 - 88) = v304;
            *(_OWORD *)(a1 - 104) = v306;
            v308 = *(_OWORD *)&v670[32];
            v307 = *(_OWORD *)&v670[48];
            v309 = *(_OWORD *)&v670[16];
            *(_QWORD *)(a1 - 8) = v671;
            *(_OWORD *)(a1 - 56) = v309;
            *(_OWORD *)(a1 - 24) = v307;
            *(_OWORD *)(a1 - 40) = v308;
            a5 = v663;
            v310 = v664;
            v311 = v665;
            *(_OWORD *)(a1 - 136) = v666;
            *(_OWORD *)(a1 - 152) = v311;
            *(_OWORD *)(a1 - 168) = v310;
            *(__n128 *)(a1 - 184) = a5;
            continue;
          }
LABEL_10:
          v42 = *(__n128 *)(a1 + 16);
          v662 = *(int8x16_t *)a1;
          v659 = a1 + 16;
          v43 = *(_OWORD *)(a1 + 32);
          v44 = *(_OWORD *)(a1 + 64);
          v665 = *(_OWORD *)(a1 + 48);
          v666 = v44;
          v663 = v42;
          v664 = v43;
          v45 = *(_OWORD *)(a1 + 128);
          v47 = *(_OWORD *)(a1 + 80);
          v46 = *(_OWORD *)(a1 + 96);
          v669 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v670 = v45;
          v667 = v47;
          v668 = v46;
          v49 = *(_OWORD *)(a1 + 160);
          v48 = *(_OWORD *)(a1 + 176);
          v50 = *(_OWORD *)(a1 + 144);
          v671 = *(_QWORD *)(a1 + 192);
          *(_OWORD *)&v670[32] = v49;
          *(_OWORD *)&v670[48] = v48;
          *(_OWORD *)&v670[16] = v50;
          v51 = a1;
          while (1)
          {
            do
            {
LABEL_12:
              while (1)
              {
                v52 = v51;
                v51 += 200;
                v53 = *(_QWORD *)(v52 + 328);
                if (v53 == *(_QWORD *)v670)
                  break;
                if (v53 >= *(uint64_t *)v670)
                  goto LABEL_53;
              }
              v54 = *(_QWORD *)(v52 + 336);
              v55 = v54 < *(_QWORD *)&v670[8];
              if (v54 == *(_QWORD *)&v670[8])
              {
                v56 = *(_QWORD *)(v52 + 344);
                v55 = v56 < *(_QWORD *)&v670[16];
                if (v56 == *(_QWORD *)&v670[16])
                  v55 = *(_OWORD *)(v52 + 352) < *(_OWORD *)&v670[24];
              }
            }
            while (v55);
            if (*(_QWORD *)(v52 + 352) != *(_QWORD *)&v670[24]
              || *(_OWORD *)(v52 + 336) != *(_OWORD *)&v670[8]
              || *(_QWORD *)(v52 + 360) != *(_QWORD *)&v670[32])
            {
              break;
            }
            if (vabdd_f64(*(double *)(v52 + 384), *(double *)&v670[56]) < 50.0
              && (v672 = *(int8x16_t *)(v52 + 368),
                  sub_2233E5290((int64_t)&v672),
                  v688 = *(std::logic_error *)&v670[40],
                  sub_2233E5290((int64_t)&v688),
                  *(_OWORD *)&v672 == v688)
              && *(_OWORD *)(v52 + 200) == *(_OWORD *)&v662)
            {
              if ((sub_223788DA0(v51, (uint64_t)&v662) & 1) == 0)
                break;
            }
            else
            {
              v57 = *(double *)(v52 + 384);
              if (vabdd_f64(v57, *(double *)&v670[56]) >= 50.0)
              {
                if (v57 >= *(double *)&v670[56])
                  break;
              }
              else
              {
                v672 = *(int8x16_t *)(v52 + 368);
                sub_2233E5290((int64_t)&v672);
                v688 = *(std::logic_error *)&v670[40];
                sub_2233E5290((int64_t)&v688);
                v58 = v672.i64[1];
                v59 = v672.i64[0] / v672.i64[1];
                v60 = v672.i64[0] % v672.i64[1];
                if (v672.i64[0] % v672.i64[1] < 0)
                {
                  v62 = ((unint64_t)(v672.i64[1] + v60) >> 63)
                      + (((v672.i64[1] + v60) & ~((v672.i64[1] + v60) >> 63))
                       - (((unint64_t)(v672.i64[1] + v60) >> 63)
                        + v672.i64[1]
                        + v60))
                      / v672.i64[1]
                      + 1;
                  v61.i64[0] = -1;
                  v61.i64[1] = -1;
                  if (v62 < 4)
                    goto LABEL_455;
                  v60 += (v62 & 0xFFFFFFFFFFFFFFFCLL) * v672.i64[1];
                  v63 = 0uLL;
                  v64 = (int64x2_t)(unint64_t)(v672.i64[0] / v672.i64[1]);
                  v65 = v62 & 0xFFFFFFFFFFFFFFFCLL;
                  do
                  {
                    v64 = vaddq_s64(v64, v61);
                    v63 = vaddq_s64(v63, v61);
                    v65 -= 4;
                  }
                  while (v65);
                  v59 = vaddvq_s64(vaddq_s64(v63, v64));
                  if (v62 != (v62 & 0xFFFFFFFFFFFFFFFCLL))
                  {
LABEL_455:
                    do
                    {
                      v60 += v672.i64[1];
                      --v59;
                    }
                    while (v60 < 0);
                  }
                }
                else
                {
                  v61.i64[0] = -1;
                  v61.i64[1] = -1;
                }
                v66 = v688.__imp_.__imp_;
                v67 = (uint64_t)v688.__vftable / (uint64_t)v688.__imp_.__imp_;
                v68 = (uint64_t)v688.__vftable % (uint64_t)v688.__imp_.__imp_;
                if ((uint64_t)v688.__vftable % (uint64_t)v688.__imp_.__imp_ < 0)
                {
                  v69 = ((unint64_t)&v688.__imp_.__imp_[v68] >> 63)
                      + (((uint64_t)&v688.__imp_.__imp_[v68] & ~((uint64_t)&v688.__imp_.__imp_[v68] >> 63))
                       - (unint64_t)&v688.__imp_.__imp_[v68 + ((unint64_t)&v688.__imp_.__imp_[v68] >> 63)])
                      / (unint64_t)v688.__imp_.__imp_
                      + 1;
                  if (v69 < 4)
                    goto LABEL_456;
                  v68 += (v69 & 0xFFFFFFFFFFFFFFFCLL) * (unint64_t)v688.__imp_.__imp_;
                  v70 = 0uLL;
                  v71 = (int64x2_t)(unint64_t)((uint64_t)v688.__vftable / (uint64_t)v688.__imp_.__imp_);
                  v72 = v69 & 0xFFFFFFFFFFFFFFFCLL;
                  do
                  {
                    v71 = vaddq_s64(v71, v61);
                    v70 = vaddq_s64(v70, v61);
                    v72 -= 4;
                  }
                  while (v72);
                  v67 = vaddvq_s64(vaddq_s64(v70, v71));
                  if (v69 != (v69 & 0xFFFFFFFFFFFFFFFCLL))
                  {
LABEL_456:
                    do
                    {
                      v68 += (uint64_t)v688.__imp_.__imp_;
                      --v67;
                    }
                    while (v68 < 0);
                  }
                }
                v73 = v59 < v67;
                if (v59 == v67)
                {
                  v74 = 0;
                  do
                  {
                    v75 = v60;
                    v76 = (const char *)v68;
                    v74 ^= 1u;
                    if (!v60 || !v68)
                    {
                      if (v60 != v68 && (v74 != 0) != (v60 != 0))
                        goto LABEL_12;
                      goto LABEL_53;
                    }
                    v77 = v58 / v60;
                    v60 = v58 % v60;
                    v78 = (uint64_t)v66 / v68;
                    v68 = (uint64_t)v66 % v68;
                    v66 = v76;
                    v58 = v75;
                  }
                  while (v77 == v78);
                  v73 = v77 < v78;
                  if (!v74)
                    goto LABEL_49;
                  if (v77 > v78)
                    goto LABEL_12;
                  break;
                }
LABEL_49:
                if (!v73)
                  break;
              }
            }
          }
LABEL_53:
          v79 = v7;
          if (v52 == a1)
          {
            v79 = v7;
            do
            {
              if (v51 >= v79)
                break;
              v79 -= 200;
            }
            while ((sub_223788278(v79, (uint64_t)&v662) & 1) == 0);
          }
          else
          {
            do
              v79 -= 200;
            while (!sub_223788278(v79, (uint64_t)&v662));
          }
          a1 = v51;
          if (v51 < v79)
          {
            v80 = v79;
            v81.i64[0] = -1;
            v81.i64[1] = -1;
            do
            {
              v82 = *(__n128 *)(a1 + 16);
              v672 = *(int8x16_t *)a1;
              v83 = *(_OWORD *)(a1 + 160);
              v84 = *(_OWORD *)(a1 + 176);
              v85 = *(_OWORD *)(a1 + 128);
              v681 = *(_OWORD *)(a1 + 144);
              *(_OWORD *)v682 = v83;
              *(_OWORD *)&v682[16] = v84;
              v683 = *(_QWORD *)(a1 + 192);
              v86 = *(_OWORD *)(a1 + 96);
              v87 = *(_OWORD *)(a1 + 112);
              v88 = *(_OWORD *)(a1 + 64);
              v677 = *(_OWORD *)(a1 + 80);
              v678 = v86;
              v679 = v87;
              v680 = v85;
              v89 = *(__n128 *)(a1 + 32);
              v90 = *(_OWORD *)(a1 + 48);
              v673 = v82;
              v674 = v89;
              v675 = v90;
              v676 = v88;
              *(_OWORD *)a1 = *(_OWORD *)v80;
              v92 = *(_OWORD *)(v80 + 48);
              v91 = *(_OWORD *)(v80 + 64);
              v93 = *(_OWORD *)(v80 + 16);
              *(_OWORD *)(a1 + 32) = *(_OWORD *)(v80 + 32);
              *(_OWORD *)(a1 + 48) = v92;
              *(_OWORD *)(a1 + 64) = v91;
              v95 = *(_OWORD *)(v80 + 112);
              v94 = *(_OWORD *)(v80 + 128);
              v96 = *(_OWORD *)(v80 + 96);
              *(_OWORD *)(a1 + 80) = *(_OWORD *)(v80 + 80);
              *(_OWORD *)(a1 + 96) = v96;
              *(_OWORD *)(a1 + 112) = v95;
              *(_OWORD *)(a1 + 128) = v94;
              v97 = *(_QWORD *)(v80 + 192);
              v99 = *(_OWORD *)(v80 + 160);
              v98 = *(_OWORD *)(v80 + 176);
              *(_OWORD *)(a1 + 144) = *(_OWORD *)(v80 + 144);
              *(_OWORD *)(a1 + 160) = v99;
              *(_OWORD *)(a1 + 176) = v98;
              *(_QWORD *)(a1 + 192) = v97;
              *(_OWORD *)(a1 + 16) = v93;
              *(int8x16_t *)v80 = v672;
              v100 = v680;
              v102 = v677;
              v101 = v678;
              *(_OWORD *)(v80 + 112) = v679;
              *(_OWORD *)(v80 + 128) = v100;
              *(_OWORD *)(v80 + 80) = v102;
              *(_OWORD *)(v80 + 96) = v101;
              v104 = *(_OWORD *)v682;
              v103 = *(_OWORD *)&v682[16];
              v105 = v681;
              *(_QWORD *)(v80 + 192) = v683;
              *(_OWORD *)(v80 + 160) = v104;
              *(_OWORD *)(v80 + 176) = v103;
              *(_OWORD *)(v80 + 144) = v105;
              v106 = v673;
              v107 = v674;
              v108 = v676;
              *(_OWORD *)(v80 + 48) = v675;
              *(_OWORD *)(v80 + 64) = v108;
              *(__n128 *)(v80 + 16) = v106;
              *(__n128 *)(v80 + 32) = v107;
              while (1)
              {
                do
                {
LABEL_64:
                  while (1)
                  {
                    v109 = a1;
                    a1 += 200;
                    v110 = *(_QWORD *)(v109 + 328);
                    if (v110 == *(_QWORD *)v670)
                      break;
                    if (v110 >= *(uint64_t *)v670)
                      goto LABEL_140;
                  }
                  v111 = *(_QWORD *)(v109 + 336);
                  v112 = v111 < *(_QWORD *)&v670[8];
                  if (v111 == *(_QWORD *)&v670[8])
                  {
                    v113 = *(_QWORD *)(v109 + 344);
                    v112 = v113 < *(_QWORD *)&v670[16];
                    if (v113 == *(_QWORD *)&v670[16])
                      v112 = *(_OWORD *)(v109 + 352) < *(_OWORD *)&v670[24];
                  }
                }
                while (v112);
                if (*(_QWORD *)(v109 + 352) != *(_QWORD *)&v670[24] || *(_QWORD *)(v109 + 344) != *(_QWORD *)&v670[16])
                  break;
                if (v111 != *(_QWORD *)&v670[8] || *(_QWORD *)(v109 + 360) != *(_QWORD *)&v670[32])
                  break;
                if (vabdd_f64(*(double *)(v109 + 384), *(double *)&v670[56]) >= 50.0)
                  goto LABEL_96;
                v115 = *(_QWORD *)(v109 + 368);
                v116 = *(_QWORD *)(v109 + 376);
                v686 = v115;
                v687 = v116;
                if (!v116)
                {
                  v647 = std::logic_error::logic_error(&v688, "bad rational: zero denominator");
                  v688.__vftable = (std::logic_error_vtbl *)off_24EC36578;
                  v672.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applicat"
                                         "ions/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iP"
                                         "honeOS18.0.Internal.sdk/usr/local/include/boost/rational.hpp";
                  v672.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
                  v673.n128_u64[0] = 892;
                  sub_2233E53EC(v647, &v672);
                }
                if (v115)
                {
                  v117 = sub_2233E544C(&v686, &v687);
                  v118 = v686 / v117;
                  v119 = v687 / v117;
                  v686 /= v117;
                  v687 = v119;
                  if (v119 == 0x8000000000000000)
                  {
                    v651 = std::logic_error::logic_error(&v688, "bad rational: non-zero singular denominator");
                    v688.__vftable = (std::logic_error_vtbl *)off_24EC36578;
                    v672.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applic"
                                           "ations/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDK"
                                           "s/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/rational.hpp";
                    v672.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
                    v673.n128_u64[0] = 906;
                    sub_2233E53EC(v651, &v672);
                  }
                  v81.i64[0] = -1;
                  v81.i64[1] = -1;
                  if ((v119 & 0x8000000000000000) == 0)
                    goto LABEL_84;
                  v686 = -v118;
                  v120 = -v119;
                }
                else
                {
                  v120 = 1;
                }
                v687 = v120;
LABEL_84:
                v684 = *(_QWORD *)&v670[40];
                v685 = *(_QWORD *)&v670[48];
                if (!*(_QWORD *)&v670[48])
                {
                  v648 = std::logic_error::logic_error(&v688, "bad rational: zero denominator");
                  v688.__vftable = (std::logic_error_vtbl *)off_24EC36578;
                  v672.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applicat"
                                         "ions/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iP"
                                         "honeOS18.0.Internal.sdk/usr/local/include/boost/rational.hpp";
                  v672.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
                  v673.n128_u64[0] = 892;
                  sub_2233E53EC(v648, &v672);
                }
                if (*(_QWORD *)&v670[40])
                {
                  v121 = sub_2233E544C(&v684, &v685);
                  v122 = v684 / v121;
                  v123 = v685 / v121;
                  v684 /= v121;
                  v685 = v123;
                  if (v123 == 0x8000000000000000)
                  {
                    v652 = std::logic_error::logic_error(&v688, "bad rational: non-zero singular denominator");
                    v688.__vftable = (std::logic_error_vtbl *)off_24EC36578;
                    v672.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applic"
                                           "ations/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDK"
                                           "s/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/rational.hpp";
                    v672.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
                    v673.n128_u64[0] = 906;
                    sub_2233E53EC(v652, &v672);
                  }
                  if (v123 < 0)
                  {
                    v123 = -v123;
                    v122 = -v122;
                  }
                  v81.i64[0] = -1;
                  v81.i64[1] = -1;
                  if (v686 != v122)
                    goto LABEL_96;
LABEL_92:
                  if (v687 != v123 || *(_OWORD *)(v109 + 200) != *(_OWORD *)&v662)
                    goto LABEL_96;
                  v124 = sub_223788DA0(a1, (uint64_t)&v662);
                  v81.i64[0] = -1;
                  v81.i64[1] = -1;
                  if ((v124 & 1) == 0)
                    goto LABEL_140;
                }
                else
                {
                  v123 = 1;
                  if (!v686)
                    goto LABEL_92;
LABEL_96:
                  v125 = *(double *)(v109 + 384);
                  if (vabdd_f64(v125, *(double *)&v670[56]) >= 50.0)
                  {
                    if (v125 >= *(double *)&v670[56])
                      goto LABEL_140;
                  }
                  else
                  {
                    v126 = *(_QWORD *)(v109 + 368);
                    v127 = *(_QWORD *)(v109 + 376);
                    v686 = v126;
                    v687 = v127;
                    if (!v127)
                    {
                      v650 = std::logic_error::logic_error(&v688, "bad rational: zero denominator");
                      v688.__vftable = (std::logic_error_vtbl *)off_24EC36578;
                      v672.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Appl"
                                             "ications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer"
                                             "/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/rational.hpp";
                      v672.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
                      v673.n128_u64[0] = 892;
                      sub_2233E53EC(v650, &v672);
                    }
                    if (!v126)
                    {
                      v131 = 1;
                      goto LABEL_105;
                    }
                    v128 = sub_2233E544C(&v686, &v687);
                    v129 = v686 / v128;
                    v130 = v687 / v128;
                    v686 /= v128;
                    v687 = v130;
                    if (v130 == 0x8000000000000000)
                    {
                      v654 = std::logic_error::logic_error(&v688, "bad rational: non-zero singular denominator");
                      v688.__vftable = (std::logic_error_vtbl *)off_24EC36578;
                      v672.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Appl"
                                             "ications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer"
                                             "/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/rational.hpp";
                      v672.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
                      v673.n128_u64[0] = 906;
                      sub_2233E53EC(v654, &v672);
                    }
                    v81.i64[0] = -1;
                    v81.i64[1] = -1;
                    if (v130 < 0)
                    {
                      v686 = -v129;
                      v131 = -v130;
LABEL_105:
                      v687 = v131;
                    }
                    v684 = *(_QWORD *)&v670[40];
                    v685 = *(_QWORD *)&v670[48];
                    if (!*(_QWORD *)&v670[48])
                    {
                      v649 = std::logic_error::logic_error(&v688, "bad rational: zero denominator");
                      v688.__vftable = (std::logic_error_vtbl *)off_24EC36578;
                      v672.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Appl"
                                             "ications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer"
                                             "/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/rational.hpp";
                      v672.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
                      v673.n128_u64[0] = 892;
                      sub_2233E53EC(v649, &v672);
                    }
                    if (*(_QWORD *)&v670[40])
                    {
                      v132 = sub_2233E544C(&v684, &v685);
                      v133 = v684 / v132;
                      v134 = v685 / v132;
                      v684 /= v132;
                      v685 = v134;
                      if (v134 == 0x8000000000000000)
                      {
                        v653 = std::logic_error::logic_error(&v688, "bad rational: non-zero singular denominator");
                        v688.__vftable = (std::logic_error_vtbl *)off_24EC36578;
                        v672.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Ap"
                                               "plications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Devel"
                                               "oper/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/rational.hpp";
                        v672.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
                        v673.n128_u64[0] = 906;
                        sub_2233E53EC(v653, &v672);
                      }
                      v81.i64[0] = -1;
                      v81.i64[1] = -1;
                      if (v134 < 0)
                      {
                        v133 = -v133;
                        v134 = -v134;
                        v135 = v687;
                        v136 = v686 / v687;
                        v137 = v686 % v687;
                        if (v686 % v687 < 0)
                        {
LABEL_115:
                          v138 = ((unint64_t)(v135 + v137) >> 63)
                               + (((v135 + v137) & ~((v135 + v137) >> 63))
                                - (((unint64_t)(v135 + v137) >> 63)
                                 + v135
                                 + v137))
                               / v135
                               + 1;
                          if (v138 < 4)
                            goto LABEL_457;
                          v137 += (v138 & 0xFFFFFFFFFFFFFFFCLL) * v135;
                          v139 = 0uLL;
                          v140 = (int64x2_t)(unint64_t)v136;
                          v141 = v138 & 0xFFFFFFFFFFFFFFFCLL;
                          do
                          {
                            v140 = vaddq_s64(v140, v81);
                            v139 = vaddq_s64(v139, v81);
                            v141 -= 4;
                          }
                          while (v141);
                          v136 = vaddvq_s64(vaddq_s64(v139, v140));
                          if (v138 != (v138 & 0xFFFFFFFFFFFFFFFCLL))
                          {
LABEL_457:
                            do
                            {
                              v137 += v135;
                              --v136;
                            }
                            while (v137 < 0);
                          }
                        }
                      }
                      else
                      {
                        v135 = v687;
                        v136 = v686 / v687;
                        v137 = v686 % v687;
                        if (v686 % v687 < 0)
                          goto LABEL_115;
                      }
                    }
                    else
                    {
                      v133 = 0;
                      v134 = 1;
                      v135 = v687;
                      v136 = v686 / v687;
                      v137 = v686 % v687;
                      if (v686 % v687 < 0)
                        goto LABEL_115;
                    }
                    v142 = v133 / v134;
                    v143 = v133 % v134;
                    if (v143 < 0)
                    {
                      v144 = ((unint64_t)(v134 + v143) >> 63)
                           + (((v134 + v143) & ~((v134 + v143) >> 63))
                            - (((unint64_t)(v134 + v143) >> 63)
                             + v134
                             + v143))
                           / v134
                           + 1;
                      if (v144 < 4)
                        goto LABEL_458;
                      v143 += (v144 & 0xFFFFFFFFFFFFFFFCLL) * v134;
                      v145 = 0uLL;
                      v146 = (int64x2_t)(unint64_t)v142;
                      v147 = v144 & 0xFFFFFFFFFFFFFFFCLL;
                      do
                      {
                        v146 = vaddq_s64(v146, v81);
                        v145 = vaddq_s64(v145, v81);
                        v147 -= 4;
                      }
                      while (v147);
                      v142 = vaddvq_s64(vaddq_s64(v145, v146));
                      if (v144 != (v144 & 0xFFFFFFFFFFFFFFFCLL))
                      {
LABEL_458:
                        do
                        {
                          v143 += v134;
                          --v142;
                        }
                        while (v143 < 0);
                      }
                    }
                    v148 = v136 < v142;
                    if (v136 == v142)
                    {
                      v149 = 0;
                      do
                      {
                        v150 = v137;
                        v151 = v143;
                        v149 ^= 1u;
                        if (!v137 || !v143)
                        {
                          if (v137 == v143 || (v149 != 0) == (v137 != 0))
                            goto LABEL_140;
                          goto LABEL_64;
                        }
                        v152 = v135 / v137;
                        v137 = v135 % v137;
                        v153 = v134 / v143;
                        v143 = v134 % v143;
                        v134 = v151;
                        v135 = v150;
                      }
                      while (v152 == v153);
                      v148 = v152 < v153;
                      if (!v149)
                        goto LABEL_134;
                      if (v152 <= v153)
                        goto LABEL_140;
                    }
                    else
                    {
LABEL_134:
                      if (!v148)
                        goto LABEL_140;
                    }
                  }
                }
              }
              while (1)
              {
LABEL_140:
                while (1)
                {
                  v154 = v80;
                  v80 -= 200;
                  v155 = *(_QWORD *)(v154 - 72);
                  if (v155 == *(_QWORD *)v670)
                    break;
                  if (v155 < *(uint64_t *)v670)
                    goto LABEL_61;
                }
                v156 = *(_QWORD *)(v154 - 64);
                v157 = v156 < *(_QWORD *)&v670[8];
                if (v156 == *(_QWORD *)&v670[8])
                {
                  v158 = *(_QWORD *)(v154 - 56);
                  v157 = v158 < *(_QWORD *)&v670[16];
                  if (v158 == *(_QWORD *)&v670[16])
                    v157 = *(_OWORD *)(v154 - 48) < *(_OWORD *)&v670[24];
                }
                if (v157)
                  break;
                if (*(_QWORD *)(v154 - 48) == *(_QWORD *)&v670[24]
                  && *(_OWORD *)(v154 - 64) == *(_OWORD *)&v670[8]
                  && *(_QWORD *)(v154 - 40) == *(_QWORD *)&v670[32])
                {
                  if (vabdd_f64(*(double *)(v154 - 16), *(double *)&v670[56]) < 50.0
                    && (v672 = *(int8x16_t *)(v154 - 32),
                        sub_2233E5290((int64_t)&v672),
                        v688 = *(std::logic_error *)&v670[40],
                        sub_2233E5290((int64_t)&v688),
                        v81.i64[0] = -1,
                        v81.i64[1] = -1,
                        *(_OWORD *)&v672 == v688)
                    && *(_OWORD *)(v154 - 200) == *(_OWORD *)&v662)
                  {
                    v159 = sub_223788DA0(v80, (uint64_t)&v662);
                    v81.i64[0] = -1;
                    v81.i64[1] = -1;
                    if ((v159 & 1) != 0)
                      break;
                  }
                  else
                  {
                    v160 = *(double *)(v154 - 16);
                    if (vabdd_f64(v160, *(double *)&v670[56]) >= 50.0)
                    {
                      if (v160 < *(double *)&v670[56])
                        break;
                    }
                    else
                    {
                      v672 = *(int8x16_t *)(v154 - 32);
                      sub_2233E5290((int64_t)&v672);
                      v688 = *(std::logic_error *)&v670[40];
                      sub_2233E5290((int64_t)&v688);
                      v161 = v672.i64[1];
                      v162 = v672.i64[0] / v672.i64[1];
                      v163 = v672.i64[0] % v672.i64[1];
                      if (v672.i64[0] % v672.i64[1] < 0)
                      {
                        v164 = ((unint64_t)(v672.i64[1] + v163) >> 63)
                             + (((v672.i64[1] + v163) & ~((v672.i64[1] + v163) >> 63))
                              - (((unint64_t)(v672.i64[1] + v163) >> 63)
                               + v672.i64[1]
                               + v163))
                             / v672.i64[1]
                             + 1;
                        v81.i64[0] = -1;
                        v81.i64[1] = -1;
                        if (v164 < 4)
                          goto LABEL_459;
                        v163 += (v164 & 0xFFFFFFFFFFFFFFFCLL) * v672.i64[1];
                        v165 = 0uLL;
                        v166 = (int64x2_t)(unint64_t)(v672.i64[0] / v672.i64[1]);
                        v167 = v164 & 0xFFFFFFFFFFFFFFFCLL;
                        do
                        {
                          v166 = vaddq_s64(v166, v81);
                          v165 = vaddq_s64(v165, v81);
                          v167 -= 4;
                        }
                        while (v167);
                        v162 = vaddvq_s64(vaddq_s64(v165, v166));
                        if (v164 != (v164 & 0xFFFFFFFFFFFFFFFCLL))
                        {
LABEL_459:
                          do
                          {
                            v163 += v672.i64[1];
                            --v162;
                          }
                          while (v163 < 0);
                        }
                      }
                      else
                      {
                        v81.i64[0] = -1;
                        v81.i64[1] = -1;
                      }
                      v168 = v688.__imp_.__imp_;
                      v169 = (uint64_t)v688.__vftable / (uint64_t)v688.__imp_.__imp_;
                      v170 = (uint64_t)v688.__vftable % (uint64_t)v688.__imp_.__imp_;
                      if ((uint64_t)v688.__vftable % (uint64_t)v688.__imp_.__imp_ < 0)
                      {
                        v171 = ((unint64_t)&v688.__imp_.__imp_[v170] >> 63)
                             + (((uint64_t)&v688.__imp_.__imp_[v170] & ~((uint64_t)&v688.__imp_.__imp_[v170] >> 63))
                              - (unint64_t)&v688.__imp_.__imp_[v170
                                                                    + ((unint64_t)&v688.__imp_.__imp_[v170] >> 63)])
                             / (unint64_t)v688.__imp_.__imp_
                             + 1;
                        if (v171 < 4)
                          goto LABEL_460;
                        v170 += (v171 & 0xFFFFFFFFFFFFFFFCLL) * (unint64_t)v688.__imp_.__imp_;
                        v172 = 0uLL;
                        v173 = (int64x2_t)(unint64_t)((uint64_t)v688.__vftable / (uint64_t)v688.__imp_.__imp_);
                        v174 = v171 & 0xFFFFFFFFFFFFFFFCLL;
                        do
                        {
                          v173 = vaddq_s64(v173, v81);
                          v172 = vaddq_s64(v172, v81);
                          v174 -= 4;
                        }
                        while (v174);
                        v169 = vaddvq_s64(vaddq_s64(v172, v173));
                        if (v171 != (v171 & 0xFFFFFFFFFFFFFFFCLL))
                        {
LABEL_460:
                          do
                          {
                            v170 += (uint64_t)v688.__imp_.__imp_;
                            --v169;
                          }
                          while (v170 < 0);
                        }
                      }
                      v175 = v162 < v169;
                      if (v162 == v169)
                      {
                        v176 = 0;
                        do
                        {
                          v177 = v163;
                          v178 = (const char *)v170;
                          v176 ^= 1u;
                          if (!v163 || !v170)
                          {
                            if (v163 == v170 || (v176 != 0) == (v163 != 0))
                              goto LABEL_140;
                            goto LABEL_61;
                          }
                          v179 = v161 / v163;
                          v163 = v161 % v163;
                          v180 = (uint64_t)v168 / v170;
                          v170 = (uint64_t)v168 % v170;
                          v168 = v178;
                          v161 = v177;
                        }
                        while (v179 == v180);
                        v175 = v179 < v180;
                        if (!v176)
                          goto LABEL_177;
                        if (v179 <= v180)
                          continue;
                        break;
                      }
LABEL_177:
                      if (v175)
                        break;
                    }
                  }
                }
              }
LABEL_61:
              ;
            }
            while (a1 < v80);
          }
          v181 = (int8x16_t *)(a1 - 200);
          if (a1 - 200 != v661)
          {
            *(int8x16_t *)v661 = *v181;
            v182 = *(_OWORD *)(a1 - 104);
            v183 = *(_OWORD *)(a1 - 72);
            v184 = *(_OWORD *)(a1 - 120);
            *(_OWORD *)(v659 + 96) = *(_OWORD *)(a1 - 88);
            *(_OWORD *)(v659 + 112) = v183;
            *(_OWORD *)(v659 + 64) = v184;
            *(_OWORD *)(v659 + 80) = v182;
            v185 = *(_OWORD *)(a1 - 40);
            v186 = *(_OWORD *)(a1 - 24);
            v187 = *(_OWORD *)(a1 - 56);
            *(_QWORD *)(v659 + 176) = *(_QWORD *)(a1 - 8);
            *(_OWORD *)(v659 + 144) = v185;
            *(_OWORD *)(v659 + 160) = v186;
            *(_OWORD *)(v659 + 128) = v187;
            v188 = *(_OWORD *)(a1 - 184);
            v189 = *(_OWORD *)(a1 - 168);
            v190 = *(_OWORD *)(a1 - 136);
            *(_OWORD *)(v659 + 32) = *(_OWORD *)(a1 - 152);
            *(_OWORD *)(v659 + 48) = v190;
            *(_OWORD *)v659 = v188;
            *(_OWORD *)(v659 + 16) = v189;
          }
          *v181 = v662;
          v191 = v669;
          v192 = *(_OWORD *)v670;
          v193 = v668;
          *(_OWORD *)(a1 - 120) = v667;
          *(_OWORD *)(a1 - 72) = v192;
          *(_OWORD *)(a1 - 88) = v191;
          *(_OWORD *)(a1 - 104) = v193;
          v195 = *(_OWORD *)&v670[32];
          v194 = *(_OWORD *)&v670[48];
          v196 = v671;
          *(_OWORD *)(a1 - 56) = *(_OWORD *)&v670[16];
          *(_QWORD *)(a1 - 8) = v196;
          *(_OWORD *)(a1 - 24) = v194;
          *(_OWORD *)(a1 - 40) = v195;
          v197 = v663;
          v198 = v664;
          v199 = v665;
          *(_OWORD *)(a1 - 136) = v666;
          *(_OWORD *)(a1 - 152) = v199;
          *(_OWORD *)(a1 - 168) = v198;
          *(__n128 *)(a1 - 184) = v197;
          v7 = a2;
          if (v51 < v79)
            goto LABEL_188;
          v200 = sub_2237887D8(v661, a1 - 200);
          if (!sub_2237887D8(a1, a2))
          {
            if (v200)
              continue;
LABEL_188:
            sub_223785600(v661, a1 - 200, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = a1 - 200;
          a1 = v661;
          if (v200)
            return a5.n128_f64[0];
          goto LABEL_1;
        }
        if ((a4 & 1) == 0)
        {
          if (a1 == a2)
            return a5.n128_f64[0];
          v595 = a1 + 200;
          if (a1 + 200 == a2)
            return a5.n128_f64[0];
          while (1)
          {
            v604 = (int8x16_t *)v595;
            if (!sub_223788278(v595, a1))
              goto LABEL_394;
            v672 = *v604;
            v605 = *(__n128 *)(a1 + 232);
            v673 = *(__n128 *)(a1 + 216);
            v674 = v605;
            v606 = *(_OWORD *)(a1 + 360);
            v607 = *(_OWORD *)(a1 + 376);
            v608 = *(_OWORD *)(a1 + 328);
            v681 = *(_OWORD *)(a1 + 344);
            *(_OWORD *)v682 = v606;
            *(_OWORD *)&v682[16] = v607;
            v609 = *(_OWORD *)(a1 + 296);
            v610 = *(_OWORD *)(a1 + 312);
            v611 = *(_OWORD *)(a1 + 264);
            v677 = *(_OWORD *)(a1 + 280);
            v678 = v609;
            v683 = *(_QWORD *)(a1 + 392);
            v679 = v610;
            v680 = v608;
            v612 = (unint64_t)v604;
            v675 = *(_OWORD *)(a1 + 248);
            v676 = v611;
            do
            {
              do
              {
LABEL_398:
                while (1)
                {
                  v613 = v612;
                  v612 = a1;
                  *(_OWORD *)v613 = *(_OWORD *)a1;
                  v614 = *(_OWORD *)(a1 + 128);
                  *(_OWORD *)(v613 + 112) = *(_OWORD *)(a1 + 112);
                  *(_OWORD *)(v613 + 128) = v614;
                  v615 = *(_OWORD *)(a1 + 96);
                  *(_OWORD *)(v613 + 80) = *(_OWORD *)(a1 + 80);
                  *(_OWORD *)(v613 + 96) = v615;
                  *(_QWORD *)(v613 + 192) = *(_QWORD *)(a1 + 192);
                  v616 = *(_OWORD *)(a1 + 176);
                  v617 = *(_OWORD *)(a1 + 144);
                  *(_OWORD *)(v613 + 160) = *(_OWORD *)(a1 + 160);
                  *(_OWORD *)(v613 + 176) = v616;
                  *(_OWORD *)(v613 + 144) = v617;
                  v618 = *(_OWORD *)(a1 + 32);
                  *(_OWORD *)(v613 + 16) = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)(v613 + 32) = v618;
                  v619 = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)(v613 + 48) = *(_OWORD *)(a1 + 48);
                  *(_OWORD *)(v613 + 64) = v619;
                  a1 -= 200;
                  v620 = *(_QWORD *)(v612 - 72);
                  if ((_QWORD)v680 == v620)
                    break;
                  if ((uint64_t)v680 >= v620)
                    goto LABEL_393;
                }
                v621 = *(_QWORD *)(v612 - 64);
                v622 = *((_QWORD *)&v680 + 1) < v621;
                if (*((_QWORD *)&v680 + 1) == v621)
                {
                  v623 = *(_QWORD *)(v612 - 56);
                  v622 = (uint64_t)v681 < v623;
                  if ((_QWORD)v681 == v623)
                    v622 = (__int128)__PAIR128__(*(unint64_t *)v682, *((unint64_t *)&v681 + 1)) < *(_OWORD *)(v612 - 48);
                }
              }
              while (v622);
              if (v681 != *(_OWORD *)(v612 - 56)
                || *((_QWORD *)&v680 + 1) != v621
                || *(_QWORD *)v682 != *(_QWORD *)(v612 - 40))
              {
                break;
              }
              v624 = *(double *)&v682[24];
              if (vabdd_f64(*(double *)&v682[24], *(double *)(v612 - 16)) < 50.0)
              {
                v662 = *(int8x16_t *)&v682[8];
                sub_2233E5290((int64_t)&v662);
                v688 = *(std::logic_error *)(v612 - 32);
                sub_2233E5290((int64_t)&v688);
                if (*(_OWORD *)&v662 == v688 && *(_OWORD *)&v672 == *(_OWORD *)(v612 - 200))
                {
                  if ((sub_223788DA0((uint64_t)&v672, a1) & 1) == 0)
                    break;
                  goto LABEL_398;
                }
              }
              v625 = *(double *)(v612 - 16);
              if (vabdd_f64(v624, v625) >= 50.0)
              {
                if (v624 >= v625)
                  break;
                goto LABEL_398;
              }
              v662 = *(int8x16_t *)&v682[8];
              sub_2233E5290((int64_t)&v662);
              v688 = *(std::logic_error *)(v612 - 32);
              sub_2233E5290((int64_t)&v688);
              v626 = v662.i64[1];
              v627 = v662.i64[0] / v662.i64[1];
              v628 = v662.i64[0] % v662.i64[1];
              if (v662.i64[0] % v662.i64[1] < 0)
              {
                v630 = ((unint64_t)(v662.i64[1] + v628) >> 63)
                     + (((v662.i64[1] + v628) & ~((v662.i64[1] + v628) >> 63))
                      - (((unint64_t)(v662.i64[1] + v628) >> 63)
                       + v662.i64[1]
                       + v628))
                     / v662.i64[1]
                     + 1;
                v629.i64[0] = -1;
                v629.i64[1] = -1;
                if (v630 < 4)
                  goto LABEL_461;
                v628 += (v630 & 0xFFFFFFFFFFFFFFFCLL) * v662.i64[1];
                v631 = 0uLL;
                v632 = (int64x2_t)(unint64_t)(v662.i64[0] / v662.i64[1]);
                v633 = v630 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v632 = vaddq_s64(v632, v629);
                  v631 = vaddq_s64(v631, v629);
                  v633 -= 4;
                }
                while (v633);
                v627 = vaddvq_s64(vaddq_s64(v631, v632));
                if (v630 != (v630 & 0xFFFFFFFFFFFFFFFCLL))
                {
LABEL_461:
                  do
                  {
                    v628 += v662.i64[1];
                    --v627;
                  }
                  while (v628 < 0);
                }
              }
              else
              {
                v629.i64[0] = -1;
                v629.i64[1] = -1;
              }
              v634 = v688.__imp_.__imp_;
              v635 = (uint64_t)v688.__vftable / (uint64_t)v688.__imp_.__imp_;
              v636 = (uint64_t)v688.__vftable % (uint64_t)v688.__imp_.__imp_;
              if ((uint64_t)v688.__vftable % (uint64_t)v688.__imp_.__imp_ < 0)
              {
                v637 = ((unint64_t)&v688.__imp_.__imp_[v636] >> 63)
                     + (((uint64_t)&v688.__imp_.__imp_[v636] & ~((uint64_t)&v688.__imp_.__imp_[v636] >> 63))
                      - (unint64_t)&v688.__imp_.__imp_[v636 + ((unint64_t)&v688.__imp_.__imp_[v636] >> 63)])
                     / (unint64_t)v688.__imp_.__imp_
                     + 1;
                if (v637 < 4)
                  goto LABEL_462;
                v636 += (v637 & 0xFFFFFFFFFFFFFFFCLL) * (unint64_t)v688.__imp_.__imp_;
                v638 = 0uLL;
                v639 = (int64x2_t)(unint64_t)((uint64_t)v688.__vftable / (uint64_t)v688.__imp_.__imp_);
                v640 = v637 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v639 = vaddq_s64(v639, v629);
                  v638 = vaddq_s64(v638, v629);
                  v640 -= 4;
                }
                while (v640);
                v635 = vaddvq_s64(vaddq_s64(v638, v639));
                if (v637 != (v637 & 0xFFFFFFFFFFFFFFFCLL))
                {
LABEL_462:
                  do
                  {
                    v636 += (uint64_t)v688.__imp_.__imp_;
                    --v635;
                  }
                  while (v636 < 0);
                }
              }
              v641 = v627 < v635;
              if (v627 != v635)
                continue;
              v642 = 0;
              do
              {
                v643 = v628;
                v644 = (const char *)v636;
                v642 ^= 1u;
                if (!v628 || !v636)
                {
                  if (v628 == v636 || (v642 != 0) == (v628 != 0))
                    goto LABEL_393;
                  goto LABEL_398;
                }
                v645 = v626 / v628;
                v628 = v626 % v628;
                v646 = (uint64_t)v634 / v636;
                v636 = (uint64_t)v634 % v636;
                v634 = v644;
                v626 = v643;
              }
              while (v645 == v646);
              v641 = v645 < v646;
              if (v642)
              {
                if (v645 <= v646)
                  break;
                goto LABEL_398;
              }
            }
            while (v641);
LABEL_393:
            *(int8x16_t *)v612 = v672;
            v596 = v680;
            v598 = v677;
            v597 = v678;
            *(_OWORD *)(v612 + 112) = v679;
            *(_OWORD *)(v612 + 128) = v596;
            *(_OWORD *)(v612 + 80) = v598;
            *(_OWORD *)(v612 + 96) = v597;
            v600 = *(_OWORD *)v682;
            v599 = *(_OWORD *)&v682[16];
            v601 = v681;
            *(_QWORD *)(v612 + 192) = v683;
            *(_OWORD *)(v612 + 160) = v600;
            *(_OWORD *)(v612 + 176) = v599;
            *(_OWORD *)(v612 + 144) = v601;
            a5 = v673;
            v602 = v674;
            v603 = v676;
            *(_OWORD *)(v612 + 48) = v675;
            *(_OWORD *)(v612 + 64) = v603;
            *(__n128 *)(v612 + 16) = a5;
            *(__n128 *)(v612 + 32) = v602;
LABEL_394:
            v595 = (uint64_t)&v604[12].i64[1];
            a1 = (unint64_t)v604;
            if (&v604[12].u64[1] == (unint64_t *)a2)
              return a5.n128_f64[0];
          }
        }
        if (a1 == a2)
          return a5.n128_f64[0];
        v418 = a1 + 200;
        if (a1 + 200 == a2)
          return a5.n128_f64[0];
        v419 = a1;
        while (2)
        {
          v465 = v418;
          if (!sub_223788278(v418, v419))
            goto LABEL_324;
          v672 = *(int8x16_t *)v465;
          v466 = *(_OWORD *)(v419 + 296);
          v467 = *(_OWORD *)(v419 + 328);
          v468 = *(_OWORD *)(v419 + 344);
          v679 = *(_OWORD *)(v419 + 312);
          v680 = v467;
          v469 = *(_OWORD *)(v419 + 264);
          v677 = *(_OWORD *)(v419 + 280);
          v678 = v466;
          v470 = *(_OWORD *)(v419 + 376);
          *(_OWORD *)v682 = *(_OWORD *)(v419 + 360);
          *(_OWORD *)&v682[16] = v470;
          v683 = *(_QWORD *)(v419 + 392);
          v681 = v468;
          v471 = *(__n128 *)(v419 + 232);
          v673 = *(__n128 *)(v419 + 216);
          v674 = v471;
          v675 = *(_OWORD *)(v419 + 248);
          v676 = v469;
          *(_OWORD *)v465 = *(_OWORD *)v419;
          v472 = v419 + 16;
          v473 = *(_OWORD *)(v419 + 32);
          *(_OWORD *)(v465 + 16) = *(_OWORD *)(v419 + 16);
          *(_OWORD *)(v465 + 32) = v473;
          v474 = *(_OWORD *)(v419 + 64);
          *(_OWORD *)(v465 + 48) = *(_OWORD *)(v419 + 48);
          *(_OWORD *)(v465 + 64) = v474;
          v475 = *(_OWORD *)(v419 + 96);
          *(_OWORD *)(v465 + 80) = *(_OWORD *)(v419 + 80);
          *(_OWORD *)(v465 + 96) = v475;
          v476 = *(_OWORD *)(v419 + 128);
          *(_OWORD *)(v465 + 112) = *(_OWORD *)(v419 + 112);
          *(_OWORD *)(v465 + 128) = v476;
          v477 = *(_OWORD *)(v419 + 176);
          v478 = *(_OWORD *)(v419 + 144);
          *(_OWORD *)(v465 + 160) = *(_OWORD *)(v419 + 160);
          *(_OWORD *)(v465 + 176) = v477;
          *(_OWORD *)(v465 + 144) = v478;
          *(_QWORD *)(v465 + 192) = *(_QWORD *)(v419 + 192);
          v456 = a1;
          if (v419 == a1)
            goto LABEL_323;
          while (1)
          {
            v456 = v419;
            v419 -= 200;
            v486 = *(_QWORD *)(v456 - 72);
            v487 = (uint64_t)v680 < v486;
            if ((_QWORD)v680 != v486)
              goto LABEL_328;
            v488 = *(_QWORD *)(v456 - 64);
            v489 = *((_QWORD *)&v680 + 1) < v488;
            if (*((_QWORD *)&v680 + 1) == v488)
            {
              v490 = *(_QWORD *)(v456 - 56);
              v489 = (uint64_t)v681 < v490;
              if ((_QWORD)v681 == v490)
                v489 = (__int128)__PAIR128__(*(unint64_t *)v682, *((unint64_t *)&v681 + 1)) < *(_OWORD *)(v456 - 48);
            }
            if (!v489)
              break;
LABEL_330:
            v479 = *(_OWORD *)v419;
            v472 = v456 - 184;
            v480 = *(_OWORD *)(v456 - 56);
            v481 = *(_OWORD *)(v456 - 24);
            *(_OWORD *)(v456 + 160) = *(_OWORD *)(v456 - 40);
            *(_OWORD *)(v456 + 176) = v481;
            *(_QWORD *)(v456 + 192) = *(_QWORD *)(v456 - 8);
            v482 = *(_OWORD *)(v456 - 120);
            v483 = *(_OWORD *)(v456 - 88);
            *(_OWORD *)(v456 + 96) = *(_OWORD *)(v456 - 104);
            *(_OWORD *)(v456 + 112) = v483;
            *(_OWORD *)(v456 + 128) = *(_OWORD *)(v456 - 72);
            *(_OWORD *)(v456 + 144) = v480;
            v484 = *(_OWORD *)(v456 - 184);
            *(_OWORD *)v456 = v479;
            *(_OWORD *)(v456 + 16) = v484;
            v485 = *(_OWORD *)(v456 - 152);
            *(_OWORD *)(v456 + 32) = *(_OWORD *)(v456 - 168);
            *(_OWORD *)(v456 + 48) = v485;
            *(_OWORD *)(v456 + 64) = *(_OWORD *)(v456 - 136);
            *(_OWORD *)(v456 + 80) = v482;
            if (v419 == a1)
            {
              v456 = a1;
              goto LABEL_323;
            }
          }
          if (v681 != *(_OWORD *)(v456 - 56)
            || *((_QWORD *)&v680 + 1) != v488
            || *(_QWORD *)v682 != *(_QWORD *)(v456 - 40))
          {
            goto LABEL_323;
          }
          v491 = *(double *)&v682[24];
          if (vabdd_f64(*(double *)&v682[24], *(double *)(v456 - 16)) < 50.0)
          {
            v662 = *(int8x16_t *)&v682[8];
            sub_2233E5290((int64_t)&v662);
            v688 = *(std::logic_error *)(v456 - 32);
            sub_2233E5290((int64_t)&v688);
            if (*(_OWORD *)&v662 == v688 && *(_OWORD *)&v672 == *(_OWORD *)(v456 - 200))
            {
              if (!sub_223788DA0((uint64_t)&v672, v419))
                goto LABEL_323;
              goto LABEL_330;
            }
          }
          v492 = *(double *)(v456 - 16);
          if (vabdd_f64(v491, v492) >= 50.0)
          {
            if (v491 >= v492)
              goto LABEL_323;
            goto LABEL_330;
          }
          v662 = *(int8x16_t *)&v682[8];
          sub_2233E5290((int64_t)&v662);
          v688 = *(std::logic_error *)(v456 - 32);
          sub_2233E5290((int64_t)&v688);
          v493 = v662.i64[1];
          v494 = v662.i64[0] / v662.i64[1];
          v495 = v662.i64[0] % v662.i64[1];
          if (v662.i64[0] % v662.i64[1] < 0)
          {
            v497 = ((unint64_t)(v662.i64[1] + v495) >> 63)
                 + (((v662.i64[1] + v495) & ~((v662.i64[1] + v495) >> 63))
                  - (((unint64_t)(v662.i64[1] + v495) >> 63)
                   + v662.i64[1]
                   + v495))
                 / v662.i64[1]
                 + 1;
            v496.i64[0] = -1;
            v496.i64[1] = -1;
            if (v497 < 4)
              goto LABEL_463;
            v495 += (v497 & 0xFFFFFFFFFFFFFFFCLL) * v662.i64[1];
            v498 = 0uLL;
            v499 = (int64x2_t)(unint64_t)(v662.i64[0] / v662.i64[1]);
            v500 = v497 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v499 = vaddq_s64(v499, v496);
              v498 = vaddq_s64(v498, v496);
              v500 -= 4;
            }
            while (v500);
            v494 = vaddvq_s64(vaddq_s64(v498, v499));
            if (v497 != (v497 & 0xFFFFFFFFFFFFFFFCLL))
            {
LABEL_463:
              do
              {
                v495 += v662.i64[1];
                --v494;
              }
              while (v495 < 0);
            }
          }
          else
          {
            v496.i64[0] = -1;
            v496.i64[1] = -1;
          }
          v501 = v688.__imp_.__imp_;
          v502 = (uint64_t)v688.__vftable / (uint64_t)v688.__imp_.__imp_;
          v503 = (uint64_t)v688.__vftable % (uint64_t)v688.__imp_.__imp_;
          if ((uint64_t)v688.__vftable % (uint64_t)v688.__imp_.__imp_ < 0)
          {
            v504 = ((unint64_t)&v688.__imp_.__imp_[v503] >> 63)
                 + (((uint64_t)&v688.__imp_.__imp_[v503] & ~((uint64_t)&v688.__imp_.__imp_[v503] >> 63))
                  - (unint64_t)&v688.__imp_.__imp_[v503 + ((unint64_t)&v688.__imp_.__imp_[v503] >> 63)])
                 / (unint64_t)v688.__imp_.__imp_
                 + 1;
            if (v504 < 4)
              goto LABEL_464;
            v503 += (v504 & 0xFFFFFFFFFFFFFFFCLL) * (unint64_t)v688.__imp_.__imp_;
            v505 = 0uLL;
            v506 = (int64x2_t)(unint64_t)((uint64_t)v688.__vftable / (uint64_t)v688.__imp_.__imp_);
            v507 = v504 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v506 = vaddq_s64(v506, v496);
              v505 = vaddq_s64(v505, v496);
              v507 -= 4;
            }
            while (v507);
            v502 = vaddvq_s64(vaddq_s64(v505, v506));
            if (v504 != (v504 & 0xFFFFFFFFFFFFFFFCLL))
            {
LABEL_464:
              do
              {
                v503 += (uint64_t)v688.__imp_.__imp_;
                --v502;
              }
              while (v503 < 0);
            }
          }
          v487 = v494 < v502;
          if (v494 != v502)
          {
LABEL_328:
            if (!v487)
              goto LABEL_323;
            goto LABEL_330;
          }
          v508 = 0;
          do
          {
            v509 = v495;
            v510 = (const char *)v503;
            v508 ^= 1u;
            if (!v495 || !v503)
            {
              if (v495 != v503 && (v508 != 0) != (v495 != 0))
                goto LABEL_330;
              goto LABEL_323;
            }
            v511 = v493 / v495;
            v495 = v493 % v495;
            v512 = (uint64_t)v501 / v503;
            v503 = (uint64_t)v501 % v503;
            v501 = v510;
            v493 = v509;
          }
          while (v511 == v512);
          v487 = v511 < v512;
          if (!v508)
            goto LABEL_328;
          if (v511 > v512)
            goto LABEL_330;
LABEL_323:
          *(int8x16_t *)v456 = v672;
          v457 = v680;
          v459 = v677;
          v458 = v678;
          *(_OWORD *)(v472 + 96) = v679;
          *(_OWORD *)(v472 + 112) = v457;
          *(_OWORD *)(v472 + 64) = v459;
          *(_OWORD *)(v472 + 80) = v458;
          v461 = *(_OWORD *)v682;
          v460 = *(_OWORD *)&v682[16];
          v462 = v681;
          *(_QWORD *)(v472 + 176) = v683;
          *(_OWORD *)(v472 + 144) = v461;
          *(_OWORD *)(v472 + 160) = v460;
          *(_OWORD *)(v472 + 128) = v462;
          a5 = v673;
          v463 = v674;
          v464 = v676;
          *(_OWORD *)(v472 + 32) = v675;
          *(_OWORD *)(v472 + 48) = v464;
          *(__n128 *)v472 = a5;
          *(__n128 *)(v472 + 16) = v463;
LABEL_324:
          v418 = v465 + 200;
          v419 = v465;
          if (v465 + 200 != a2)
            continue;
          return a5.n128_f64[0];
        }
    }
  }
}

  v9 = a2 - 16;
  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = a2 - v10;
    v14 = (a2 - v10) >> 4;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((sub_22319835C(a2 - 16, v10) & 0x80) != 0)
        {
          v30 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *(_OWORD *)v9;
          *(_OWORD *)v9 = v30;
        }
        return;
      case 3uLL:
        sub_2237A680C(v10, v10 + 16, a2 - 16);
        return;
      case 4uLL:
        v22 = (__int128 *)(v10 + 16);
        v23 = (__int128 *)(v10 + 32);
        sub_2237A680C(v10, v10 + 16, v10 + 32);
        if ((sub_22319835C(v9, v10 + 32) & 0x80) != 0)
        {
          v24 = *v23;
          *v23 = *(_OWORD *)v9;
          *(_OWORD *)v9 = v24;
          if ((sub_22319835C(v10 + 32, v10 + 16) & 0x80) != 0)
          {
            v25 = *v22;
            *v22 = *v23;
            *v23 = v25;
            if ((sub_22319835C(v10 + 16, v10) & 0x80) != 0)
            {
              v31 = *(_OWORD *)v10;
              *(_OWORD *)v10 = *v22;
              *v22 = v31;
            }
          }
        }
        return;
      case 5uLL:
        sub_2237A7B70(v10, v10 + 16, v10 + 32, v10 + 48, a2 - 16);
        return;
      default:
        if (v13 <= 383)
        {
          if ((a5 & 1) != 0)
            sub_2237A63C8((uint64_t)v10, a2);
          else
            sub_2237A6614((uint64_t)v10, a2);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[16 * (v14 >> 1)];
          if ((unint64_t)v13 < 0x801)
          {
            sub_2237A680C(v16, v10, a2 - 16);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_2237A680C(v10, v16, a2 - 16);
            v17 = 16 * v15;
            v18 = &v10[16 * v15 - 16];
            sub_2237A680C(v10 + 16, v18, a2 - 32);
            sub_2237A680C(v10 + 32, &v10[v17 + 16], a2 - 48);
            sub_2237A680C(v18, v16, &v10[v17 + 16]);
            v29 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v16;
            *(_OWORD *)v16 = v29;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((sub_22319835C(v10 - 16, v10) & 0x80) == 0)
          {
            v10 = sub_2237A6928(v10, a2);
            goto LABEL_16;
          }
LABEL_11:
          v19 = sub_2237A70C8(v10, a2);
          if ((v20 & 1) == 0)
            goto LABEL_14;
          v21 = sub_2237A7790(v10, v19);
          v10 = v19 + 16;
          if (!sub_2237A7790(v19 + 16, a2))
          {
            v11 = v12 + 1;
            if (v21)
              continue;
LABEL_14:
            sub_2237A5F44(a1, v19, a3, -v12, a5 & 1);
            v10 = v19 + 16;
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = v19;
          if (v21)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
        {
          v26 = (v14 - 2) >> 1;
          v27 = v26 + 1;
          v28 = &v10[16 * v26];
          do
          {
            sub_2237A7CC8((uint64_t)v10, a3, (a2 - v10) >> 4, v28);
            v28 -= 16;
            --v27;
          }
          while (v27);
          sub_2237A7FF4((uint64_t)v10, a2, a3);
        }
        return;
    }
  }
}

  v7 = (uint64_t)(a2 - 8);
  v253 = a2 - 24;
  v254 = a2 - 16;
  v252 = (_QWORD *)a2 - 21;
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 7;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v100 = a2 - 3;
        v101 = *((_QWORD *)a2 - 1);
        v102 = (_QWORD *)(v8 + 80);
        v103 = *(_QWORD *)(v8 + 120);
        v104 = v101 + *((_QWORD *)a2 - 5);
        v105 = v103 + *(_QWORD *)(v8 + 88);
        v106 = v104 < v105;
        if (v104 == v105)
          v106 = *(_QWORD *)v100 + v101 < *v102 + v103;
        if (v106)
        {
          v107 = a2 - 7;
          v303 = *(_OWORD *)(v8 + 32);
          v311 = *(_OWORD *)(v8 + 48);
          v287 = *(_OWORD *)v8;
          v295 = *(_OWORD *)(v8 + 16);
          v319 = *(_OWORD *)(v8 + 64);
          v327 = *(_OWORD *)v102;
          v332 = *(_OWORD *)(v8 + 96);
          v337 = *(_OWORD *)(v8 + 112);
          *(_OWORD *)v8 = *(_OWORD *)v7;
          v108 = *(a2 - 7);
          v109 = *(a2 - 6);
          v110 = *(a2 - 4);
          *(_OWORD *)(v8 + 48) = *(a2 - 5);
          *(_OWORD *)(v8 + 64) = v110;
          *(_OWORD *)(v8 + 16) = v108;
          *(_OWORD *)(v8 + 32) = v109;
          v111 = *v100;
          v112 = *(a2 - 1);
          *(_OWORD *)(v8 + 96) = *(a2 - 2);
          *(_OWORD *)(v8 + 112) = v112;
          *(_OWORD *)v102 = v111;
          *(_OWORD *)v7 = v287;
          v107[2] = v311;
          v107[3] = v319;
          *v107 = v295;
          v107[1] = v303;
          *(a2 - 2) = v332;
          *(a2 - 1) = v337;
          *v100 = v327;
        }
        return;
      case 3uLL:
        sub_2238419E8((__int128 *)v8, (__int128 *)(v8 + 128), (__int128 *)v7);
        return;
      case 4uLL:
        sub_223842110(v8, v8 + 128, v8 + 256, v7);
        return;
      case 5uLL:
        sub_2238416AC(v8, v8 + 128, v8 + 256, v8 + 384, v7);
        return;
      default:
        if (v9 > 3071)
        {
          if (!a3)
          {
            if ((__int128 *)v8 != a2)
            {
              v116 = (v10 - 2) >> 1;
              v117 = v116;
              do
              {
                v119 = v117;
                if (v116 >= v117)
                {
                  v120 = (2 * v117) | 1;
                  v121 = v8 + (v120 << 7);
                  if (2 * v119 + 2 < (uint64_t)v10)
                  {
                    v122 = *(_QWORD *)(v121 + 120);
                    v123 = *(_QWORD *)(v121 + 248);
                    v124 = v122 + *(_QWORD *)(v121 + 88);
                    v125 = v123 + *(_QWORD *)(v121 + 216);
                    v126 = v124 < v125;
                    if (v124 == v125)
                      v126 = *(_QWORD *)(v121 + 80) + v122 < *(_QWORD *)(v121 + 208) + v123;
                    if (v126)
                    {
                      v121 += 128;
                      v120 = 2 * v119 + 2;
                    }
                  }
                  v127 = v8 + (v119 << 7);
                  v129 = *(_QWORD *)(v127 + 80);
                  v130 = *(_QWORD *)(v127 + 88);
                  v128 = v127 + 80;
                  v131 = *(_QWORD *)(v121 + 120);
                  v132 = *(_QWORD *)(v128 + 40);
                  v133 = v131 + *(_QWORD *)(v121 + 88);
                  v134 = v132 + v130;
                  v135 = v133 < v132 + v130;
                  if (v133 == v132 + v130)
                    v135 = *(_QWORD *)(v121 + 80) + v131 < v132 + v129;
                  if (!v135)
                  {
                    v136 = (__int128 *)(v8 + (v119 << 7));
                    v137 = (_OWORD *)(v128 - 64);
                    v288 = *v136;
                    v312 = *(_OWORD *)(v128 - 32);
                    v320 = *(_OWORD *)(v128 - 16);
                    v296 = *(_OWORD *)(v128 - 64);
                    v304 = *(_OWORD *)(v128 - 48);
                    v271 = *(_QWORD *)(v128 + 32);
                    v265 = *(_OWORD *)(v128 + 16);
                    *v136 = *(_OWORD *)v121;
                    v138 = (_OWORD *)(v121 + 16);
                    v139 = *(_OWORD *)(v121 + 16);
                    v140 = *(_OWORD *)(v121 + 32);
                    v141 = *(_OWORD *)(v121 + 64);
                    v137[2] = *(_OWORD *)(v121 + 48);
                    v137[3] = v141;
                    *v137 = v139;
                    v137[1] = v140;
                    v142 = *(_OWORD *)(v121 + 80);
                    v143 = *(_OWORD *)(v121 + 112);
                    *(_OWORD *)(v128 + 16) = *(_OWORD *)(v121 + 96);
                    *(_OWORD *)(v128 + 32) = v143;
                    *(_OWORD *)v128 = v142;
                    if (v116 >= v120)
                    {
                      while (1)
                      {
                        v149 = 2 * v120;
                        v120 = (2 * v120) | 1;
                        v118 = v8 + (v120 << 7);
                        v150 = v149 + 2;
                        if (v150 < (uint64_t)v10)
                        {
                          v151 = *(_QWORD *)(v118 + 120);
                          v152 = *(_QWORD *)(v118 + 248);
                          v153 = v151 + *(_QWORD *)(v118 + 88);
                          v154 = v152 + *(_QWORD *)(v118 + 216);
                          v155 = v153 < v154;
                          if (v153 == v154)
                            v155 = *(_QWORD *)(v118 + 80) + v151 < *(_QWORD *)(v118 + 208) + v152;
                          if (v155)
                          {
                            v118 += 128;
                            v120 = v150;
                          }
                        }
                        v156 = *(_QWORD *)(v118 + 120);
                        v157 = v156 + *(_QWORD *)(v118 + 88);
                        if (v157 == v134)
                        {
                          if (*(_QWORD *)(v118 + 80) + v156 < v132 + v129)
                            break;
                        }
                        else if (v157 < v134)
                        {
                          break;
                        }
                        *(_OWORD *)v121 = *(_OWORD *)v118;
                        v138 = (_OWORD *)(v118 + 16);
                        v144 = *(_OWORD *)(v118 + 16);
                        v145 = *(_OWORD *)(v118 + 32);
                        v146 = *(_OWORD *)(v118 + 64);
                        *(_OWORD *)(v121 + 48) = *(_OWORD *)(v118 + 48);
                        *(_OWORD *)(v121 + 64) = v146;
                        *(_OWORD *)(v121 + 16) = v144;
                        *(_OWORD *)(v121 + 32) = v145;
                        v147 = *(_OWORD *)(v118 + 80);
                        v148 = *(_OWORD *)(v118 + 112);
                        *(_OWORD *)(v121 + 96) = *(_OWORD *)(v118 + 96);
                        *(_OWORD *)(v121 + 112) = v148;
                        *(_OWORD *)(v121 + 80) = v147;
                        v121 = v118;
                        if (v116 < v120)
                          goto LABEL_108;
                      }
                    }
                    v118 = v121;
LABEL_108:
                    *(_OWORD *)v118 = v288;
                    v138[2] = v312;
                    v138[3] = v320;
                    *v138 = v296;
                    v138[1] = v304;
                    *(_QWORD *)(v118 + 80) = v129;
                    *(_QWORD *)(v118 + 88) = v130;
                    *(_OWORD *)(v118 + 96) = v265;
                    *(_QWORD *)(v118 + 112) = v271;
                    *(_QWORD *)(v118 + 120) = v132;
                  }
                }
                v117 = v119 - 1;
              }
              while (v119);
              v178 = (unint64_t)v9 >> 7;
              do
              {
                v179 = 0;
                v180 = a2;
                v290 = *(_OWORD *)v8;
                v314 = *(_OWORD *)(v8 + 48);
                v322 = *(_OWORD *)(v8 + 64);
                v298 = *(_OWORD *)(v8 + 16);
                v306 = *(_OWORD *)(v8 + 32);
                v328 = *(_OWORD *)(v8 + 80);
                v333 = *(_OWORD *)(v8 + 96);
                v181 = v8;
                v338 = *(_OWORD *)(v8 + 112);
                do
                {
                  v187 = (_OWORD *)v181;
                  v181 += (v179 + 1) << 7;
                  v188 = 2 * v179;
                  v179 = (2 * v179) | 1;
                  v189 = v188 + 2;
                  if (v189 < v178)
                  {
                    v190 = *(_QWORD *)(v181 + 120);
                    v191 = *(_QWORD *)(v181 + 248);
                    v192 = v190 + *(_QWORD *)(v181 + 88);
                    v193 = v191 + *(_QWORD *)(v181 + 216);
                    v194 = v192 < v193;
                    if (v192 == v193)
                      v194 = *(_QWORD *)(v181 + 80) + v190 < *(_QWORD *)(v181 + 208) + v191;
                    if (v194)
                    {
                      v181 += 128;
                      v179 = v189;
                    }
                  }
                  *v187 = *(_OWORD *)v181;
                  v182 = *(_OWORD *)(v181 + 16);
                  v183 = *(_OWORD *)(v181 + 32);
                  v184 = *(_OWORD *)(v181 + 64);
                  v187[3] = *(_OWORD *)(v181 + 48);
                  v187[4] = v184;
                  v187[1] = v182;
                  v187[2] = v183;
                  v185 = *(_OWORD *)(v181 + 80);
                  v186 = *(_OWORD *)(v181 + 112);
                  v187[6] = *(_OWORD *)(v181 + 96);
                  v187[7] = v186;
                  v187[5] = v185;
                }
                while (v179 <= (uint64_t)((unint64_t)(v178 - 2) >> 1));
                v195 = (__int128 *)(v181 + 16);
                v196 = (__int128 *)(v181 + 80);
                a2 -= 8;
                if ((__int128 *)v181 == v180 - 8)
                {
                  *(_OWORD *)v181 = v290;
                  *(_OWORD *)(v181 + 48) = v314;
                  *(_OWORD *)(v181 + 64) = v322;
                  *v195 = v298;
                  *(_OWORD *)(v181 + 32) = v306;
                  *(_OWORD *)(v181 + 96) = v333;
                  *(_OWORD *)(v181 + 112) = v338;
                  *v196 = v328;
                }
                else
                {
                  *(_OWORD *)v181 = *a2;
                  v197 = *(v180 - 7);
                  v198 = *(v180 - 6);
                  v199 = *(v180 - 4);
                  *(_OWORD *)(v181 + 48) = *(v180 - 5);
                  *(_OWORD *)(v181 + 64) = v199;
                  *v195 = v197;
                  *(_OWORD *)(v181 + 32) = v198;
                  v200 = *(v180 - 3);
                  v201 = *(v180 - 1);
                  *(_OWORD *)(v181 + 96) = *(v180 - 2);
                  *(_OWORD *)(v181 + 112) = v201;
                  *v196 = v200;
                  *a2 = v290;
                  *(v180 - 5) = v314;
                  *(v180 - 4) = v322;
                  *(v180 - 7) = v298;
                  *(v180 - 6) = v306;
                  *(v180 - 2) = v333;
                  *(v180 - 1) = v338;
                  *(v180 - 3) = v328;
                  v202 = v181 - v8 + 128;
                  if (v202 >= 129)
                  {
                    v203 = ((unint64_t)v202 >> 7) - 2;
                    v204 = v203 >> 1;
                    v205 = v8 + (v203 >> 1 << 7);
                    v206 = (_QWORD *)(v205 + 80);
                    v207 = *(_QWORD *)(v205 + 120);
                    v208 = *(_QWORD *)(v181 + 80);
                    v209 = *(_QWORD *)(v181 + 88);
                    v210 = *(_QWORD *)(v181 + 120);
                    v211 = v207 + *(_QWORD *)(v205 + 88);
                    v212 = v210 + v209;
                    v213 = v211 < v210 + v209;
                    if (v211 == v210 + v209)
                      v213 = *v206 + v207 < v210 + v208;
                    if (v213)
                    {
                      v267 = *(_OWORD *)v181;
                      v280 = *(_OWORD *)(v181 + 48);
                      v283 = *(_OWORD *)(v181 + 64);
                      v273 = *v195;
                      v277 = *(_OWORD *)(v181 + 32);
                      v262 = *(_QWORD *)(v181 + 112);
                      v259 = *(_OWORD *)(v181 + 96);
                      *(_OWORD *)v181 = *(_OWORD *)v205;
                      v214 = (_OWORD *)(v8 + (v204 << 7));
                      v215 = v214 + 1;
                      v216 = v214[1];
                      v217 = v214[2];
                      v218 = v214[4];
                      v195[2] = v214[3];
                      v195[3] = v218;
                      *v195 = v216;
                      v195[1] = v217;
                      v219 = *(_OWORD *)v206;
                      v220 = *(_OWORD *)(v205 + 112);
                      v196[1] = *(_OWORD *)(v205 + 96);
                      v196[2] = v220;
                      *v196 = v219;
                      if (v203 >= 2)
                      {
                        while (1)
                        {
                          v223 = v204 - 1;
                          v204 = (v204 - 1) >> 1;
                          v221 = v8 + (v204 << 7);
                          v222 = (_QWORD *)(v221 + 80);
                          v224 = *(_QWORD *)(v221 + 120);
                          v225 = v224 + *(_QWORD *)(v221 + 88);
                          v226 = v225 < v212;
                          if (v225 == v212)
                            v226 = *v222 + v224 < v210 + v208;
                          if (!v226)
                            break;
                          *(_OWORD *)v205 = *(_OWORD *)v221;
                          v227 = (_OWORD *)(v8 + (v204 << 7));
                          v215 = v227 + 1;
                          v228 = v227[1];
                          v229 = v227[2];
                          v230 = v227[4];
                          *(_OWORD *)(v205 + 48) = v227[3];
                          *(_OWORD *)(v205 + 64) = v230;
                          *(_OWORD *)(v205 + 16) = v228;
                          *(_OWORD *)(v205 + 32) = v229;
                          v231 = *(_OWORD *)v222;
                          v232 = *(_OWORD *)(v221 + 112);
                          *(_OWORD *)(v205 + 96) = *(_OWORD *)(v221 + 96);
                          *(_OWORD *)(v205 + 112) = v232;
                          *(_OWORD *)(v205 + 80) = v231;
                          v206 = (_QWORD *)(v221 + 80);
                          v205 = v8 + (v204 << 7);
                          if (v223 <= 1)
                            goto LABEL_173;
                        }
                      }
                      v221 = v205;
                      v222 = v206;
LABEL_173:
                      *(_OWORD *)v221 = v267;
                      v215[2] = v280;
                      v215[3] = v283;
                      *v215 = v273;
                      v215[1] = v277;
                      *v222 = v208;
                      *(_QWORD *)(v221 + 88) = v209;
                      *(_OWORD *)(v221 + 96) = v259;
                      *(_QWORD *)(v221 + 112) = v262;
                      *(_QWORD *)(v221 + 120) = v210;
                    }
                  }
                }
                v35 = v178-- <= 2;
              }
              while (!v35);
            }
            return;
          }
          v11 = v10 >> 1;
          v12 = (__int128 *)(v8 + (v10 >> 1 << 7));
          if ((unint64_t)v9 > 0x4000)
          {
            sub_2238419E8((__int128 *)a1, (__int128 *)(a1 + (v10 >> 1 << 7)), (__int128 *)v7);
            v255 = a3;
            v13 = a2;
            v14 = v7;
            v15 = v11 << 7;
            v16 = (_OWORD *)(a1 + (v11 << 7));
            sub_2238419E8((__int128 *)(a1 + 128), v16 - 8, v254);
            v17 = (__int128 *)(a1 + 128 + v15);
            v7 = v14;
            a2 = v13;
            sub_2238419E8((__int128 *)(a1 + 256), v17, v253);
            sub_2238419E8(v16 - 8, v12, v17);
            v284 = *(_OWORD *)a1;
            v308 = *(_OWORD *)(a1 + 48);
            v316 = *(_OWORD *)(a1 + 64);
            v292 = *(_OWORD *)(a1 + 16);
            v300 = *(_OWORD *)(a1 + 32);
            v324 = *(_OWORD *)(a1 + 80);
            v329 = *(_OWORD *)(a1 + 96);
            v334 = *(_OWORD *)(a1 + 112);
            v18 = v16[3];
            v19 = v16[4];
            v21 = v16[1];
            v20 = v16[2];
            *(_OWORD *)a1 = *v12;
            *(_OWORD *)(a1 + 16) = v21;
            *(_OWORD *)(a1 + 32) = v20;
            *(_OWORD *)(a1 + 48) = v18;
            v22 = v16[5];
            v23 = v16[7];
            *(_OWORD *)(a1 + 96) = v16[6];
            *(_OWORD *)(a1 + 112) = v23;
            *(_OWORD *)(a1 + 64) = v19;
            *(_OWORD *)(a1 + 80) = v22;
            *v12 = v284;
            v16[3] = v308;
            v16[4] = v316;
            v16[1] = v292;
            v16[2] = v300;
            v16[6] = v329;
            v16[7] = v334;
            v16[5] = v324;
            a3 = v255 - 1;
            if ((a4 & 1) != 0)
              goto LABEL_11;
LABEL_7:
            v24 = *(_QWORD *)(a1 - 8);
            v25 = *(_QWORD *)(a1 + 80);
            v26 = *(_QWORD *)(a1 + 88);
            v27 = *(_QWORD *)(a1 + 120);
            v28 = v24 + *(_QWORD *)(a1 - 40);
            v29 = v27 + v26;
            if (v28 == v27 + v26)
            {
              if (*(_QWORD *)(a1 - 48) + v24 < v27 + v25)
              {
                v29 = v24 + *(_QWORD *)(a1 - 40);
                goto LABEL_13;
              }
            }
            else if (v28 < v27 + v26)
            {
              goto LABEL_13;
            }
            v264 = *(_OWORD *)a1;
            v279 = *(_OWORD *)(a1 + 48);
            v282 = *(_OWORD *)(a1 + 64);
            v270 = *(_OWORD *)(a1 + 16);
            v276 = *(_OWORD *)(a1 + 32);
            v258 = *(_OWORD *)(a1 + 96);
            v261 = *(_QWORD *)(a1 + 112);
            v67 = *((_QWORD *)a2 - 5);
            v68 = *((_QWORD *)a2 - 1);
            if (v29 == v68 + v67)
            {
              v69 = v27 + v25;
              if (v27 + v25 >= *((_QWORD *)a2 - 6) + v68)
                goto LABEL_63;
            }
            else
            {
              if (v29 >= v68 + v67)
              {
LABEL_63:
                v8 = a1 + 128;
                if (a1 + 128 < (unint64_t)a2)
                {
                  while (1)
                  {
                    v74 = *(_QWORD *)(v8 + 120);
                    v75 = v74 + *(_QWORD *)(v8 + 88);
                    if (v29 == v75)
                    {
                      if (v27 + v25 < *(_QWORD *)(v8 + 80) + v74)
                        goto LABEL_69;
                    }
                    else if (v29 < v75)
                    {
                      goto LABEL_69;
                    }
                    v8 += 128;
                    if (v8 >= (unint64_t)a2)
                      goto LABEL_69;
                  }
                }
                goto LABEL_69;
              }
              v69 = v27 + v25;
            }
            v8 = a1 + 128;
            v70 = *(_QWORD *)(a1 + 248);
            v71 = v70 + *(_QWORD *)(a1 + 216);
            v72 = v29 < v71;
            if (v29 != v71)
              goto LABEL_60;
LABEL_59:
            v72 = v69 < *(_QWORD *)(v8 + 80) + v70;
LABEL_60:
            while (!v72)
            {
              v8 += 128;
              v70 = *(_QWORD *)(v8 + 120);
              v73 = v70 + *(_QWORD *)(v8 + 88);
              v72 = v29 < v73;
              if (v29 == v73)
                goto LABEL_59;
            }
LABEL_69:
            v76 = a2;
            if (v8 < (unint64_t)a2)
            {
              v77 = v252;
              v78 = v67 + v68;
              v79 = v29 < v78;
              if (v29 != v78)
                goto LABEL_74;
LABEL_73:
              v79 = v27 + v25 < v77[15] + v68;
LABEL_74:
              while (v79)
              {
                v80 = *v77;
                v68 = v77[4];
                v77 -= 16;
                v81 = v80 + v68;
                v79 = v29 < v81;
                if (v29 == v81)
                  goto LABEL_73;
              }
              v76 = (__int128 *)(v77 + 5);
            }
            if (v8 < (unint64_t)v76)
            {
              v82 = v27 + v25;
              do
              {
                v286 = *(_OWORD *)v8;
                v310 = *(_OWORD *)(v8 + 48);
                v318 = *(_OWORD *)(v8 + 64);
                v294 = *(_OWORD *)(v8 + 16);
                v302 = *(_OWORD *)(v8 + 32);
                v326 = *(_OWORD *)(v8 + 80);
                v331 = *(_OWORD *)(v8 + 96);
                v336 = *(_OWORD *)(v8 + 112);
                *(_OWORD *)v8 = *v76;
                v83 = v76[1];
                v84 = v76[2];
                v85 = v76[4];
                *(_OWORD *)(v8 + 48) = v76[3];
                *(_OWORD *)(v8 + 64) = v85;
                *(_OWORD *)(v8 + 16) = v83;
                *(_OWORD *)(v8 + 32) = v84;
                v86 = v76[5];
                v87 = v76[7];
                *(_OWORD *)(v8 + 96) = v76[6];
                *(_OWORD *)(v8 + 112) = v87;
                *(_OWORD *)(v8 + 80) = v86;
                *v76 = v286;
                v76[3] = v310;
                v76[4] = v318;
                v76[1] = v294;
                v76[2] = v302;
                v76[6] = v331;
                v76[7] = v336;
                v76[5] = v326;
                do
                {
                  v8 += 128;
                  v88 = *(_QWORD *)(v8 + 120);
                  v89 = v88 + *(_QWORD *)(v8 + 88);
                  v90 = v29 < v89;
                  if (v29 == v89)
                    v90 = v82 < *(_QWORD *)(v8 + 80) + v88;
                }
                while (!v90);
                do
                {
                  v76 -= 8;
                  v91 = *((_QWORD *)v76 + 15);
                  v92 = v91 + *((_QWORD *)v76 + 11);
                  v93 = v29 < v92;
                  if (v29 == v92)
                    v93 = v82 < *((_QWORD *)v76 + 10) + v91;
                }
                while (v93);
              }
              while (v8 < (unint64_t)v76);
            }
            v94 = (__int128 *)(v8 - 128);
            if (v8 - 128 != a1)
            {
              *(_OWORD *)a1 = *v94;
              v95 = *(_OWORD *)(v8 - 112);
              v96 = *(_OWORD *)(v8 - 96);
              v97 = *(_OWORD *)(v8 - 64);
              *(_OWORD *)(a1 + 48) = *(_OWORD *)(v8 - 80);
              *(_OWORD *)(a1 + 64) = v97;
              *(_OWORD *)(a1 + 16) = v95;
              *(_OWORD *)(a1 + 32) = v96;
              v98 = *(_OWORD *)(v8 - 48);
              v99 = *(_OWORD *)(v8 - 16);
              *(_OWORD *)(a1 + 96) = *(_OWORD *)(v8 - 32);
              *(_OWORD *)(a1 + 112) = v99;
              *(_OWORD *)(a1 + 80) = v98;
            }
            a4 = 0;
            *v94 = v264;
            *(_OWORD *)(v8 - 112) = v270;
            *(_OWORD *)(v8 - 96) = v276;
            *(_OWORD *)(v8 - 80) = v279;
            *(_OWORD *)(v8 - 64) = v282;
            *(_QWORD *)(v8 - 48) = v25;
            *(_QWORD *)(v8 - 40) = v26;
            *(_OWORD *)(v8 - 32) = v258;
            *(_QWORD *)(v8 - 16) = v261;
            *(_QWORD *)(v8 - 8) = v27;
            continue;
          }
          sub_2238419E8((__int128 *)(a1 + (v10 >> 1 << 7)), (__int128 *)a1, (__int128 *)v7);
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_11:
          v25 = *(_QWORD *)(a1 + 80);
          v26 = *(_QWORD *)(a1 + 88);
          v27 = *(_QWORD *)(a1 + 120);
          v29 = v27 + v26;
LABEL_13:
          v30 = 0;
          v263 = *(_OWORD *)a1;
          v278 = *(_OWORD *)(a1 + 48);
          v281 = *(_OWORD *)(a1 + 64);
          v269 = *(_OWORD *)(a1 + 16);
          v275 = *(_OWORD *)(a1 + 32);
          v260 = *(_QWORD *)(a1 + 112);
          v31 = v25 + v27;
          v257 = *(_OWORD *)(a1 + 96);
          v32 = a1;
          v33 = *(_QWORD *)(a1 + 248);
          v34 = v33 + *(_QWORD *)(a1 + 216);
          v35 = v34 < v29;
          if (v34 != v29)
            goto LABEL_17;
LABEL_16:
          v35 = *(_QWORD *)(v32 + 208) + v33 < v31;
LABEL_17:
          while (v35)
          {
            v30 += 128;
            v32 = a1 + v30;
            v33 = *(_QWORD *)(a1 + v30 + 248);
            v36 = v33 + *(_QWORD *)(a1 + v30 + 216);
            v35 = v36 < v29;
            if (v36 == v29)
              goto LABEL_16;
          }
          v37 = a1 + v30 + 128;
          v38 = (_QWORD *)v7;
          if (v30)
          {
            v39 = *(_QWORD *)(v7 + 120);
            v40 = v39 + *(_QWORD *)(v7 + 88);
            v41 = v40 < v29;
            if (v40 != v29)
              goto LABEL_21;
LABEL_20:
            v41 = v38[10] + v39 < v31;
LABEL_21:
            while (!v41)
            {
              v38 -= 16;
              v39 = v38[15];
              v42 = v39 + v38[11];
              v41 = v42 < v29;
              if (v42 == v29)
                goto LABEL_20;
            }
          }
          else
          {
            v38 = a2;
            if (v37 < (unint64_t)a2)
            {
              v38 = (_QWORD *)v7;
              v43 = *(_QWORD *)(v7 + 120);
              v44 = v43 + *(_QWORD *)(v7 + 88);
              v45 = v44 < v29;
              if (v44 != v29)
                goto LABEL_29;
LABEL_28:
              v45 = v38[10] + v43 < v31;
LABEL_29:
              while (!v45 && v37 < (unint64_t)v38)
              {
                v38 -= 16;
                v43 = v38[15];
                v46 = v43 + v38[11];
                v45 = v46 < v29;
                if (v46 == v29)
                  goto LABEL_28;
              }
            }
          }
          v8 = v37;
          if (v37 < (unint64_t)v38)
          {
            v48 = v38;
            do
            {
              v285 = *(_OWORD *)v8;
              v309 = *(_OWORD *)(v8 + 48);
              v317 = *(_OWORD *)(v8 + 64);
              v293 = *(_OWORD *)(v8 + 16);
              v301 = *(_OWORD *)(v8 + 32);
              v325 = *(_OWORD *)(v8 + 80);
              v330 = *(_OWORD *)(v8 + 96);
              v335 = *(_OWORD *)(v8 + 112);
              *(_OWORD *)v8 = *(_OWORD *)v48;
              v49 = *((_OWORD *)v48 + 1);
              v50 = *((_OWORD *)v48 + 2);
              v51 = *((_OWORD *)v48 + 4);
              *(_OWORD *)(v8 + 48) = *((_OWORD *)v48 + 3);
              *(_OWORD *)(v8 + 64) = v51;
              *(_OWORD *)(v8 + 16) = v49;
              *(_OWORD *)(v8 + 32) = v50;
              v52 = *((_OWORD *)v48 + 5);
              v53 = *((_OWORD *)v48 + 7);
              *(_OWORD *)(v8 + 96) = *((_OWORD *)v48 + 6);
              *(_OWORD *)(v8 + 112) = v53;
              *(_OWORD *)(v8 + 80) = v52;
              *(_OWORD *)v48 = v285;
              *((_OWORD *)v48 + 3) = v309;
              *((_OWORD *)v48 + 4) = v317;
              *((_OWORD *)v48 + 1) = v293;
              *((_OWORD *)v48 + 2) = v301;
              *((_OWORD *)v48 + 6) = v330;
              *((_OWORD *)v48 + 7) = v335;
              *((_OWORD *)v48 + 5) = v325;
              do
              {
                v8 += 128;
                v54 = *(_QWORD *)(v8 + 120);
                v55 = v54 + *(_QWORD *)(v8 + 88);
                v56 = v55 < v29;
                if (v55 == v29)
                  v56 = *(_QWORD *)(v8 + 80) + v54 < v31;
              }
              while (v56);
              do
              {
                v48 -= 16;
                v57 = v48[15];
                v58 = v57 + v48[11];
                v59 = v58 < v29;
                if (v58 == v29)
                  v59 = v48[10] + v57 < v31;
              }
              while (!v59);
            }
            while (v8 < (unint64_t)v48);
          }
          v60 = (__int128 *)(v8 - 128);
          if (v8 - 128 != a1)
          {
            *(_OWORD *)a1 = *v60;
            v61 = *(_OWORD *)(v8 - 112);
            v62 = *(_OWORD *)(v8 - 96);
            v63 = *(_OWORD *)(v8 - 64);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(v8 - 80);
            *(_OWORD *)(a1 + 64) = v63;
            *(_OWORD *)(a1 + 16) = v61;
            *(_OWORD *)(a1 + 32) = v62;
            v64 = *(_OWORD *)(v8 - 48);
            v65 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 112) = v65;
            *(_OWORD *)(a1 + 80) = v64;
          }
          *v60 = v263;
          *(_OWORD *)(v8 - 112) = v269;
          *(_OWORD *)(v8 - 96) = v275;
          *(_OWORD *)(v8 - 80) = v278;
          *(_OWORD *)(v8 - 64) = v281;
          *(_QWORD *)(v8 - 48) = v25;
          *(_QWORD *)(v8 - 40) = v26;
          *(_OWORD *)(v8 - 32) = v257;
          *(_QWORD *)(v8 - 16) = v260;
          *(_QWORD *)(v8 - 8) = v27;
          if (v37 < (unint64_t)v38)
            goto LABEL_50;
          v66 = sub_223841D58(a1, v8 - 128);
          if (!sub_223841D58(v8, (uint64_t)a2))
          {
            if (v66)
              continue;
LABEL_50:
            sub_223840540(a1, v8 - 128, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__int128 *)(v8 - 128);
          if (v66)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if ((__int128 *)v8 == a2)
            return;
          v113 = (_OWORD *)(v8 + 128);
          if ((__int128 *)(v8 + 128) == a2)
            return;
          v114 = 0;
          v115 = (_OWORD *)v8;
LABEL_137:
          v159 = v115;
          v115 = v113;
          v160 = *((_QWORD *)v159 + 26);
          v161 = *((_QWORD *)v159 + 27);
          v162 = *((_QWORD *)v159 + 31);
          v163 = *((_QWORD *)v159 + 15);
          v164 = v162 + v161;
          v165 = v163 + *((_QWORD *)v159 + 11);
          if (v162 + v161 == v165)
          {
            if (v162 + v160 >= *((_QWORD *)v159 + 10) + v163)
              goto LABEL_136;
          }
          else if (v162 + v161 >= v165)
          {
            goto LABEL_136;
          }
          v289 = *v115;
          v313 = v159[11];
          v321 = v159[12];
          v297 = v159[9];
          v305 = v159[10];
          v266 = v159[14];
          v272 = *((_QWORD *)v159 + 30);
          *v115 = *v159;
          v166 = v159 + 1;
          v167 = v159[2];
          v115[1] = v159[1];
          v115[2] = v167;
          v168 = v159[4];
          v115[3] = v159[3];
          v115[4] = v168;
          v158 = v159 + 5;
          v169 = v159[6];
          v115[5] = v159[5];
          v115[6] = v169;
          v115[7] = v159[7];
          if (v159 == (_OWORD *)v8)
          {
LABEL_134:
            v159 = (_OWORD *)v8;
            goto LABEL_135;
          }
          v170 = v114;
          while (1)
          {
            v175 = (_OWORD *)(v8 + v170);
            v176 = *(_QWORD *)(v8 + v170 - 8);
            v177 = v176 + *(_QWORD *)(v8 + v170 - 40);
            if (v164 == v177)
            {
              if (v162 + v160 >= *((_QWORD *)v175 - 6) + v176)
                goto LABEL_135;
            }
            else if (v164 >= v177)
            {
              v159 = (_OWORD *)(v8 + v170);
              v158 = (_QWORD *)(v8 + v170 + 80);
              v166 = (_OWORD *)(v8 + v170 + 16);
LABEL_135:
              *v159 = v289;
              v166[2] = v313;
              v166[3] = v321;
              *v166 = v297;
              v166[1] = v305;
              *v158 = v160;
              *((_QWORD *)v159 + 11) = v161;
              v159[6] = v266;
              *((_QWORD *)v159 + 14) = v272;
              *((_QWORD *)v159 + 15) = v162;
LABEL_136:
              v113 = v115 + 8;
              v114 += 128;
              if (v115 + 8 == a2)
                return;
              goto LABEL_137;
            }
            *v175 = *(v175 - 8);
            v166 = v159 - 7;
            v158 = v159 - 3;
            v159 -= 8;
            v171 = (_OWORD *)(v8 + v170);
            v172 = *(_OWORD *)(v8 + v170 - 96);
            v171[1] = *(_OWORD *)(v8 + v170 - 112);
            v171[2] = v172;
            v173 = *(_OWORD *)(v8 + v170 - 64);
            v171[3] = *(_OWORD *)(v8 + v170 - 80);
            v171[4] = v173;
            v174 = *(_OWORD *)(v8 + v170 - 32);
            v171[5] = *(_OWORD *)(v8 + v170 - 48);
            v171[6] = v174;
            v171[7] = *(_OWORD *)(v8 + v170 - 16);
            v170 -= 128;
            if (!v170)
            {
              v158 = (_QWORD *)(v8 + 80);
              goto LABEL_134;
            }
          }
        }
        if ((__int128 *)v8 != a2)
        {
          v233 = v8 + 128;
          if ((__int128 *)(v8 + 128) != a2)
          {
            v234 = v8 + 80;
            do
            {
              v235 = a1;
              a1 = v233;
              v236 = *(_QWORD *)(v235 + 208);
              v237 = *(_QWORD *)(v235 + 216);
              v238 = *(_QWORD *)(v235 + 248);
              v239 = *(_QWORD *)(v235 + 120);
              v240 = v238 + v237;
              v241 = v239 + *(_QWORD *)(v235 + 88);
              if (v238 + v237 == v241)
              {
                v242 = v238 + v236;
                if (v238 + v236 < *(_QWORD *)(v235 + 80) + v239)
                  goto LABEL_183;
              }
              else if (v238 + v237 < v241)
              {
                v242 = v238 + v236;
LABEL_183:
                v291 = *(_OWORD *)a1;
                v299 = *(_OWORD *)(v235 + 144);
                v307 = *(_OWORD *)(v235 + 160);
                v315 = *(_OWORD *)(v235 + 176);
                v323 = *(_OWORD *)(v235 + 192);
                v268 = *(_OWORD *)(v235 + 224);
                v243 = *(_QWORD *)(v235 + 240);
                v244 = v234;
                v274 = v243;
                while (1)
                {
                  v245 = *(_OWORD *)(v244 - 64);
                  *(_OWORD *)(v244 + 48) = *(_OWORD *)(v244 - 80);
                  *(_OWORD *)(v244 + 64) = v245;
                  v246 = *(_OWORD *)(v244 - 32);
                  *(_OWORD *)(v244 + 80) = *(_OWORD *)(v244 - 48);
                  *(_OWORD *)(v244 + 96) = v246;
                  v247 = *(_OWORD *)v244;
                  *(_OWORD *)(v244 + 112) = *(_OWORD *)(v244 - 16);
                  *(_OWORD *)(v244 + 128) = v247;
                  v248 = *(_OWORD *)(v244 + 32);
                  v249 = *(_QWORD *)(v244 - 88);
                  v250 = v249 + *(_QWORD *)(v244 - 120);
                  *(_OWORD *)(v244 + 144) = *(_OWORD *)(v244 + 16);
                  *(_OWORD *)(v244 + 160) = v248;
                  v251 = v240 < v250;
                  if (v240 == v250)
                    v251 = v242 < *(_QWORD *)(v244 - 128) + v249;
                  if (!v251)
                    break;
                  v244 -= 128;
                }
                *(_OWORD *)(v244 - 80) = v291;
                *(_OWORD *)(v244 - 64) = v299;
                *(_OWORD *)(v244 - 48) = v307;
                *(_OWORD *)(v244 - 32) = v315;
                *(_OWORD *)(v244 - 16) = v323;
                *(_QWORD *)v244 = v236;
                *(_QWORD *)(v244 + 8) = v237;
                *(_OWORD *)(v244 + 16) = v268;
                *(_QWORD *)(v244 + 32) = v274;
                *(_QWORD *)(v244 + 40) = v238;
              }
              v233 = a1 + 128;
              v234 += 128;
            }
            while ((__int128 *)(a1 + 128) != a2);
          }
        }
        return;
    }
  }
}

  v7 = a2 - 8;
  v242 = a2 - 24;
  v243 = a2 - 16;
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 7;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v108 = a2 - 3;
        v109 = *((_QWORD *)a2 - 6);
        v111 = *(_QWORD *)(v8 + 80);
        v112 = *(_QWORD *)(v8 + 88);
        v110 = (__int128 *)(v8 + 80);
        v28 = v109 == v111;
        LODWORD(v109) = v109 < v111;
        v113 = *((_QWORD *)a2 - 5);
        v114 = (unint64_t)v109 << 7;
        if (v28)
          v114 = 0;
        v28 = v113 == v112;
        v115 = (unint64_t)(v113 < v112) << 7;
        if (!v28)
          v114 = v115;
        if (v114)
        {
          v292 = *(_OWORD *)(v8 + 32);
          v300 = *(_OWORD *)(v8 + 48);
          v276 = *(_OWORD *)v8;
          v284 = *(_OWORD *)(v8 + 16);
          v308 = *(_OWORD *)(v8 + 64);
          v316 = *v110;
          v321 = *(_OWORD *)(v8 + 96);
          v326 = *(_OWORD *)(v8 + 112);
          *(_OWORD *)v8 = *(a2 - 8);
          v116 = *(a2 - 7);
          v117 = *(a2 - 6);
          v118 = *(a2 - 4);
          *(_OWORD *)(v8 + 48) = *(a2 - 5);
          *(_OWORD *)(v8 + 64) = v118;
          *(_OWORD *)(v8 + 16) = v116;
          *(_OWORD *)(v8 + 32) = v117;
          v119 = *v108;
          v120 = *(a2 - 1);
          *(_OWORD *)(v8 + 96) = *(a2 - 2);
          *(_OWORD *)(v8 + 112) = v120;
          *v110 = v119;
          *(a2 - 8) = v276;
          *(a2 - 5) = v300;
          *(a2 - 4) = v308;
          *(a2 - 7) = v284;
          *(a2 - 6) = v292;
          *(a2 - 2) = v321;
          *(a2 - 1) = v326;
          *v108 = v316;
        }
        return;
      case 3uLL:
        sub_223843DB4((__int128 *)v8, (__int128 *)(v8 + 128), v7);
        return;
      case 4uLL:
        sub_2238443FC(v8, v8 + 128, v8 + 256, (uint64_t)v7);
        return;
      case 5uLL:
        sub_223843AA0(v8, v8 + 128, v8 + 256, v8 + 384, (uint64_t)v7);
        return;
      default:
        if (v9 > 3071)
        {
          if (!a3)
          {
            if ((__int128 *)v8 != a2)
            {
              v142 = (v10 - 2) >> 1;
              v143 = v142;
              do
              {
                v144 = v143;
                if (v142 >= v143)
                {
                  v145 = (2 * v143) | 1;
                  v146 = v8 + (v145 << 7);
                  if (2 * v144 + 2 < (uint64_t)v10)
                  {
                    v147 = *(_QWORD *)(v146 + 80);
                    v148 = *(_QWORD *)(v146 + 88);
                    v149 = *(_QWORD *)(v146 + 208);
                    v150 = *(_QWORD *)(v146 + 216);
                    v28 = v147 == v149;
                    v151 = (unint64_t)(v147 < v149) << 7;
                    if (v28)
                      v151 = 0;
                    v28 = v148 == v150;
                    v152 = (unint64_t)(v148 < v150) << 7;
                    if (!v28)
                      v151 = v152;
                    v146 += v151;
                    if (v151)
                      v145 = 2 * v144 + 2;
                  }
                  v153 = v8 + (v144 << 7);
                  v155 = *(_QWORD *)(v146 + 80);
                  v154 = *(_QWORD *)(v146 + 88);
                  v157 = *(_QWORD *)(v153 + 80);
                  v156 = *(_QWORD *)(v153 + 88);
                  v28 = v155 == v157;
                  v158 = (unint64_t)(v155 < v157) << 7;
                  if (v28)
                    v158 = 0;
                  v28 = v154 == v156;
                  v159 = (unint64_t)(v154 < v156) << 7;
                  if (!v28)
                    v158 = v159;
                  if (!v158)
                  {
                    v160 = v8 + (v144 << 7);
                    v278 = *(_OWORD *)v160;
                    v302 = *(_OWORD *)(v153 + 48);
                    v310 = *(_OWORD *)(v153 + 64);
                    v286 = *(_OWORD *)(v153 + 16);
                    v294 = *(_OWORD *)(v153 + 32);
                    v255 = *(_OWORD *)(v153 + 96);
                    v261 = *(_OWORD *)(v153 + 112);
                    do
                    {
                      v165 = (_OWORD *)v160;
                      v160 = v146;
                      *v165 = *(_OWORD *)v146;
                      v166 = *(_OWORD *)(v146 + 16);
                      v167 = *(_OWORD *)(v146 + 32);
                      v168 = *(_OWORD *)(v146 + 64);
                      v165[3] = *(_OWORD *)(v146 + 48);
                      v165[4] = v168;
                      v165[1] = v166;
                      v165[2] = v167;
                      v169 = *(_OWORD *)(v146 + 80);
                      v170 = *(_OWORD *)(v146 + 112);
                      v165[6] = *(_OWORD *)(v146 + 96);
                      v165[7] = v170;
                      v165[5] = v169;
                      if (v142 < v145)
                        break;
                      v171 = (2 * v145) | 1;
                      v146 = v8 + (v171 << 7);
                      v172 = 2 * v145 + 2;
                      if (v172 < (uint64_t)v10)
                      {
                        v173 = *(_QWORD *)(v146 + 80);
                        v174 = *(_QWORD *)(v146 + 88);
                        v175 = *(_QWORD *)(v146 + 208);
                        v176 = *(_QWORD *)(v146 + 216);
                        v28 = v173 == v175;
                        v177 = (unint64_t)(v173 < v175) << 7;
                        if (v28)
                          v177 = 0;
                        v28 = v174 == v176;
                        v178 = (unint64_t)(v174 < v176) << 7;
                        if (!v28)
                          v177 = v178;
                        v146 += v177;
                        if (v177)
                          v171 = v172;
                      }
                      v162 = *(_QWORD *)(v146 + 80);
                      v161 = *(_QWORD *)(v146 + 88);
                      v28 = v162 == v157;
                      v163 = (unint64_t)(v162 < v157) << 7;
                      if (v28)
                        v163 = 0;
                      v28 = v161 == v156;
                      v164 = (unint64_t)(v161 < v156) << 7;
                      if (v28)
                        v164 = v163;
                      v145 = v171;
                    }
                    while (!v164);
                    *(_OWORD *)v160 = v278;
                    *(_OWORD *)(v160 + 48) = v302;
                    *(_OWORD *)(v160 + 64) = v310;
                    *(_OWORD *)(v160 + 16) = v286;
                    *(_OWORD *)(v160 + 32) = v294;
                    *(_QWORD *)(v160 + 80) = v157;
                    *(_QWORD *)(v160 + 88) = v156;
                    *(_OWORD *)(v160 + 96) = v255;
                    *(_OWORD *)(v160 + 112) = v261;
                  }
                }
                v143 = v144 - 1;
              }
              while (v144);
              v179 = (unint64_t)v9 >> 7;
              do
              {
                v181 = 0;
                v182 = a2;
                v279 = *(_OWORD *)v8;
                v303 = *(_OWORD *)(v8 + 48);
                v311 = *(_OWORD *)(v8 + 64);
                v287 = *(_OWORD *)(v8 + 16);
                v295 = *(_OWORD *)(v8 + 32);
                v317 = *(_OWORD *)(v8 + 80);
                v322 = *(_OWORD *)(v8 + 96);
                v183 = (_OWORD *)v8;
                v327 = *(_OWORD *)(v8 + 112);
                do
                {
                  v189 = &v183[8 * v181 + 8];
                  v190 = (2 * v181) | 1;
                  v191 = 2 * v181 + 2;
                  if (v191 < v179)
                  {
                    v192 = *((_QWORD *)v189 + 10);
                    v193 = *((_QWORD *)v189 + 11);
                    v194 = *((_QWORD *)v189 + 26);
                    v195 = *((_QWORD *)v189 + 27);
                    v28 = v192 == v194;
                    v196 = (unint64_t)(v192 < v194) << 7;
                    if (v28)
                      v196 = 0;
                    v28 = v193 == v195;
                    v197 = (unint64_t)(v193 < v195) << 7;
                    if (!v28)
                      v196 = v197;
                    v189 = (__int128 *)((char *)v189 + v196);
                    if (v196)
                      v190 = v191;
                  }
                  *v183 = *v189;
                  v184 = v189[1];
                  v185 = v189[2];
                  v186 = v189[4];
                  v183[3] = v189[3];
                  v183[4] = v186;
                  v183[1] = v184;
                  v183[2] = v185;
                  v187 = v189[5];
                  v188 = v189[7];
                  v183[6] = v189[6];
                  v183[7] = v188;
                  v183[5] = v187;
                  v183 = v189;
                  v181 = v190;
                }
                while (v190 <= (uint64_t)((unint64_t)(v179 - 2) >> 1));
                v198 = v189 + 1;
                v199 = v189 + 5;
                a2 -= 8;
                if (v189 == v182 - 8)
                {
                  *v189 = v279;
                  v189[3] = v303;
                  v189[4] = v311;
                  *v198 = v287;
                  v189[2] = v295;
                  v189[6] = v322;
                  v189[7] = v327;
                  *v199 = v317;
                }
                else
                {
                  *v189 = *a2;
                  v200 = *(v182 - 7);
                  v201 = *(v182 - 6);
                  v202 = *(v182 - 4);
                  v189[3] = *(v182 - 5);
                  v189[4] = v202;
                  *v198 = v200;
                  v189[2] = v201;
                  v203 = *(v182 - 3);
                  v204 = *(v182 - 1);
                  v189[6] = *(v182 - 2);
                  v189[7] = v204;
                  *v199 = v203;
                  *a2 = v279;
                  *(v182 - 5) = v303;
                  *(v182 - 4) = v311;
                  *(v182 - 7) = v287;
                  *(v182 - 6) = v295;
                  *(v182 - 2) = v322;
                  *(v182 - 1) = v327;
                  *(v182 - 3) = v317;
                  v205 = (uint64_t)v189 - v8 + 128;
                  if (v205 >= 129)
                  {
                    v206 = (((unint64_t)v205 >> 7) - 2) >> 1;
                    v207 = v8 + (v206 << 7);
                    v208 = *(_QWORD *)(v207 + 80);
                    v209 = *(_QWORD *)(v207 + 88);
                    v211 = *((_QWORD *)v189 + 10);
                    v210 = *((_QWORD *)v189 + 11);
                    v28 = v208 == v211;
                    v212 = (unint64_t)(v208 < v211) << 7;
                    if (v28)
                      v212 = 0;
                    v28 = v209 == v210;
                    v213 = (unint64_t)(v209 < v210) << 7;
                    if (!v28)
                      v212 = v213;
                    if (v212)
                    {
                      v256 = *v189;
                      v269 = v189[3];
                      v272 = v189[4];
                      v262 = *v198;
                      v266 = v189[2];
                      v248 = v189[6];
                      v251 = v189[7];
                      do
                      {
                        v214 = v189;
                        v189 = (__int128 *)(v8 + (v206 << 7));
                        *v214 = *v189;
                        v215 = v189[1];
                        v216 = v189[2];
                        v217 = v189[4];
                        v214[3] = v189[3];
                        v214[4] = v217;
                        v214[1] = v215;
                        v214[2] = v216;
                        v218 = v189[5];
                        v219 = v189[7];
                        v214[6] = v189[6];
                        v214[7] = v219;
                        v214[5] = v218;
                        if (!v206)
                          break;
                        v206 = (v206 - 1) >> 1;
                        v220 = v8 + (v206 << 7);
                        v221 = *(_QWORD *)(v220 + 80);
                        v222 = *(_QWORD *)(v220 + 88);
                        v28 = v221 == v211;
                        v223 = (unint64_t)(v221 < v211) << 7;
                        if (v28)
                          v223 = 0;
                        v28 = v222 == v210;
                        v224 = (unint64_t)(v222 < v210) << 7;
                        if (v28)
                          v224 = v223;
                      }
                      while (v224);
                      *v189 = v256;
                      v189[1] = v262;
                      v189[2] = v266;
                      v189[3] = v269;
                      v189[4] = v272;
                      *((_QWORD *)v189 + 10) = v211;
                      *((_QWORD *)v189 + 11) = v210;
                      v189[6] = v248;
                      v189[7] = v251;
                    }
                  }
                }
              }
              while (v179-- > 2);
            }
            return;
          }
          v11 = v10 >> 1;
          v12 = (__int128 *)(v8 + (v10 >> 1 << 7));
          if ((unint64_t)v9 > 0x4000)
          {
            sub_223843DB4((__int128 *)a1, (__int128 *)(a1 + (v10 >> 1 << 7)), v7);
            v244 = a3;
            v13 = a2;
            v14 = v7;
            v15 = v11 << 7;
            v16 = (_OWORD *)(a1 + (v11 << 7));
            sub_223843DB4((__int128 *)(a1 + 128), v16 - 8, v243);
            v17 = (__int128 *)(a1 + 128 + v15);
            v7 = v14;
            a2 = v13;
            sub_223843DB4((__int128 *)(a1 + 256), v17, v242);
            sub_223843DB4(v16 - 8, v12, v17);
            v273 = *(_OWORD *)a1;
            v297 = *(_OWORD *)(a1 + 48);
            v305 = *(_OWORD *)(a1 + 64);
            v281 = *(_OWORD *)(a1 + 16);
            v289 = *(_OWORD *)(a1 + 32);
            v313 = *(_OWORD *)(a1 + 80);
            v318 = *(_OWORD *)(a1 + 96);
            v323 = *(_OWORD *)(a1 + 112);
            v18 = v16[3];
            v19 = v16[4];
            v21 = v16[1];
            v20 = v16[2];
            *(_OWORD *)a1 = *v12;
            *(_OWORD *)(a1 + 16) = v21;
            *(_OWORD *)(a1 + 32) = v20;
            *(_OWORD *)(a1 + 48) = v18;
            v22 = v16[5];
            v23 = v16[7];
            *(_OWORD *)(a1 + 96) = v16[6];
            *(_OWORD *)(a1 + 112) = v23;
            *(_OWORD *)(a1 + 64) = v19;
            *(_OWORD *)(a1 + 80) = v22;
            *v12 = v273;
            v16[3] = v297;
            v16[4] = v305;
            v16[1] = v281;
            v16[2] = v289;
            v16[6] = v318;
            v16[7] = v323;
            v16[5] = v313;
            a3 = v244 - 1;
            if ((a4 & 1) != 0)
              goto LABEL_24;
LABEL_7:
            v24 = *(_QWORD *)(a1 - 48);
            v25 = *(_QWORD *)(a1 - 40);
            v26 = *(_QWORD *)(a1 + 80);
            v27 = *(_QWORD *)(a1 + 88);
            v28 = v24 == v26;
            v29 = (unint64_t)(v24 < v26) << 7;
            if (v28)
              v29 = 0;
            v28 = v25 == v27;
            v30 = (unint64_t)(v25 < v27) << 7;
            if (!v28)
              v29 = v30;
            if (v29)
              goto LABEL_25;
            v267 = *(_OWORD *)(a1 + 48);
            v270 = *(_OWORD *)(a1 + 64);
            v258 = *(_OWORD *)(a1 + 16);
            v264 = *(_OWORD *)(a1 + 32);
            v246 = *(_OWORD *)(a1 + 96);
            v249 = *(_OWORD *)(a1 + 112);
            v252 = *(_OWORD *)a1;
            v31 = *((_QWORD *)a2 - 6);
            v32 = *((_QWORD *)a2 - 5);
            v28 = v26 == v31;
            v33 = (unint64_t)(v26 < v31) << 7;
            if (v28)
              v33 = 0;
            v28 = v27 == v32;
            v34 = (unint64_t)(v27 < v32) << 7;
            if (v28)
              v34 = v33;
            v35 = a1;
            if (v34)
            {
              do
              {
                v8 = v35 + 128;
                v37 = *(_QWORD *)(v35 + 208);
                v36 = *(_QWORD *)(v35 + 216);
                v28 = v26 == v37;
                v38 = (unint64_t)(v26 < v37) << 7;
                if (v28)
                  v38 = 0;
                v28 = v27 == v36;
                v39 = (unint64_t)(v27 < v36) << 7;
                if (!v28)
                  v38 = v39;
                v35 = v8;
              }
              while (!v38);
            }
            else
            {
              v78 = a1 + 128;
              do
              {
                v8 = v78;
                if (v78 >= (unint64_t)a2)
                  break;
                v79 = *(_QWORD *)(v78 + 80);
                v80 = *(_QWORD *)(v8 + 88);
                v28 = v26 == v79;
                v81 = (unint64_t)(v26 < v79) << 7;
                if (v28)
                  v81 = 0;
                v28 = v27 == v80;
                v82 = (unint64_t)(v27 < v80) << 7;
                if (v28)
                  v82 = v81;
                v78 = v8 + 128;
              }
              while (!v82);
            }
            v83 = a2;
            if (v8 < (unint64_t)a2)
            {
              v84 = a2;
              do
              {
                v83 = v84 - 8;
                v86 = *((_QWORD *)v84 - 6);
                v85 = *((_QWORD *)v84 - 5);
                v28 = v26 == v86;
                v87 = (unint64_t)(v26 < v86) << 7;
                if (v28)
                  v87 = 0;
                v28 = v27 == v85;
                v88 = (unint64_t)(v27 < v85) << 7;
                if (!v28)
                  v87 = v88;
                v84 = v83;
              }
              while (v87);
            }
            while (v8 < (unint64_t)v83)
            {
              v275 = *(_OWORD *)v8;
              v299 = *(_OWORD *)(v8 + 48);
              v307 = *(_OWORD *)(v8 + 64);
              v283 = *(_OWORD *)(v8 + 16);
              v291 = *(_OWORD *)(v8 + 32);
              v315 = *(_OWORD *)(v8 + 80);
              v320 = *(_OWORD *)(v8 + 96);
              v325 = *(_OWORD *)(v8 + 112);
              *(_OWORD *)v8 = *v83;
              v89 = v83[1];
              v90 = v83[2];
              v91 = v83[4];
              *(_OWORD *)(v8 + 48) = v83[3];
              *(_OWORD *)(v8 + 64) = v91;
              *(_OWORD *)(v8 + 16) = v89;
              *(_OWORD *)(v8 + 32) = v90;
              v92 = v83[5];
              v93 = v83[7];
              *(_OWORD *)(v8 + 96) = v83[6];
              *(_OWORD *)(v8 + 112) = v93;
              *(_OWORD *)(v8 + 80) = v92;
              *v83 = v275;
              v83[3] = v299;
              v83[4] = v307;
              v83[1] = v283;
              v83[2] = v291;
              v83[6] = v320;
              v83[7] = v325;
              v83[5] = v315;
              do
              {
                v94 = *(_QWORD *)(v8 + 208);
                v95 = *(_QWORD *)(v8 + 216);
                v8 += 128;
                v28 = v26 == v94;
                v96 = (unint64_t)(v26 < v94) << 7;
                if (v28)
                  v96 = 0;
                v28 = v27 == v95;
                v97 = (unint64_t)(v27 < v95) << 7;
                if (!v28)
                  v96 = v97;
              }
              while (!v96);
              do
              {
                v98 = *((_QWORD *)v83 - 6);
                v99 = *((_QWORD *)v83 - 5);
                v83 -= 8;
                v28 = v26 == v98;
                v100 = (unint64_t)(v26 < v98) << 7;
                if (v28)
                  v100 = 0;
                v28 = v27 == v99;
                v101 = (unint64_t)(v27 < v99) << 7;
                if (!v28)
                  v100 = v101;
              }
              while (v100);
            }
            v102 = (__int128 *)(v8 - 128);
            if (v8 - 128 != a1)
            {
              *(_OWORD *)a1 = *v102;
              v103 = *(_OWORD *)(v8 - 112);
              v104 = *(_OWORD *)(v8 - 96);
              v105 = *(_OWORD *)(v8 - 64);
              *(_OWORD *)(a1 + 48) = *(_OWORD *)(v8 - 80);
              *(_OWORD *)(a1 + 64) = v105;
              *(_OWORD *)(a1 + 16) = v103;
              *(_OWORD *)(a1 + 32) = v104;
              v106 = *(_OWORD *)(v8 - 48);
              v107 = *(_OWORD *)(v8 - 16);
              *(_OWORD *)(a1 + 96) = *(_OWORD *)(v8 - 32);
              *(_OWORD *)(a1 + 112) = v107;
              *(_OWORD *)(a1 + 80) = v106;
            }
            a4 = 0;
            *v102 = v252;
            *(_OWORD *)(v8 - 112) = v258;
            *(_OWORD *)(v8 - 96) = v264;
            *(_OWORD *)(v8 - 80) = v267;
            *(_OWORD *)(v8 - 64) = v270;
            *(_QWORD *)(v8 - 48) = v26;
            *(_QWORD *)(v8 - 40) = v27;
            *(_OWORD *)(v8 - 32) = v246;
            *(_OWORD *)(v8 - 16) = v249;
            continue;
          }
          sub_223843DB4((__int128 *)(a1 + (v10 >> 1 << 7)), (__int128 *)a1, v7);
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_24:
          v26 = *(_QWORD *)(a1 + 80);
          v27 = *(_QWORD *)(a1 + 88);
LABEL_25:
          v40 = 0;
          v268 = *(_OWORD *)(a1 + 48);
          v271 = *(_OWORD *)(a1 + 64);
          v259 = *(_OWORD *)(a1 + 16);
          v265 = *(_OWORD *)(a1 + 32);
          v250 = *(_OWORD *)(a1 + 112);
          v253 = *(_OWORD *)a1;
          v247 = *(_OWORD *)(a1 + 96);
          do
          {
            v42 = *(_QWORD *)(a1 + v40 + 208);
            v41 = *(_QWORD *)(a1 + v40 + 216);
            v28 = v42 == v26;
            v43 = (unint64_t)(v42 < v26) << 7;
            if (v28)
              v43 = 0;
            v28 = v41 == v27;
            v44 = (unint64_t)(v41 < v27) << 7;
            if (v28)
              v44 = v43;
            v40 += 128;
          }
          while (v44);
          v45 = a1 + v40;
          v46 = a2;
          if (v40 == 128)
          {
            v52 = a2;
            while (v45 < (unint64_t)v52)
            {
              v47 = v52 - 8;
              v54 = *((_QWORD *)v52 - 6);
              v53 = *((_QWORD *)v52 - 5);
              v28 = v54 == v26;
              v55 = (unint64_t)(v54 < v26) << 7;
              if (v28)
                v55 = 0;
              v28 = v53 == v27;
              v56 = (unint64_t)(v53 < v27) << 7;
              if (!v28)
                v55 = v56;
              v52 = v47;
              if (v55)
                goto LABEL_45;
            }
            v47 = v52;
            v8 = v45;
          }
          else
          {
            do
            {
              v47 = v46 - 8;
              v49 = *((_QWORD *)v46 - 6);
              v48 = *((_QWORD *)v46 - 5);
              v28 = v49 == v26;
              v50 = (unint64_t)(v49 < v26) << 7;
              if (v28)
                v50 = 0;
              v28 = v48 == v27;
              v51 = (unint64_t)(v48 < v27) << 7;
              if (!v28)
                v50 = v51;
              v46 = v47;
            }
            while (!v50);
LABEL_45:
            v8 = v45;
            if (v45 < (unint64_t)v47)
            {
              v57 = v47;
              do
              {
                v274 = *(_OWORD *)v8;
                v298 = *(_OWORD *)(v8 + 48);
                v306 = *(_OWORD *)(v8 + 64);
                v282 = *(_OWORD *)(v8 + 16);
                v290 = *(_OWORD *)(v8 + 32);
                v314 = *(_OWORD *)(v8 + 80);
                v319 = *(_OWORD *)(v8 + 96);
                v324 = *(_OWORD *)(v8 + 112);
                *(_OWORD *)v8 = *v57;
                v58 = v57[1];
                v59 = v57[2];
                v60 = v57[4];
                *(_OWORD *)(v8 + 48) = v57[3];
                *(_OWORD *)(v8 + 64) = v60;
                *(_OWORD *)(v8 + 16) = v58;
                *(_OWORD *)(v8 + 32) = v59;
                v61 = v57[5];
                v62 = v57[7];
                *(_OWORD *)(v8 + 96) = v57[6];
                *(_OWORD *)(v8 + 112) = v62;
                *(_OWORD *)(v8 + 80) = v61;
                *v57 = v274;
                v57[3] = v298;
                v57[4] = v306;
                v57[1] = v282;
                v57[2] = v290;
                v57[6] = v319;
                v57[7] = v324;
                v57[5] = v314;
                do
                {
                  v63 = *(_QWORD *)(v8 + 208);
                  v64 = *(_QWORD *)(v8 + 216);
                  v8 += 128;
                  v28 = v63 == v26;
                  v65 = (unint64_t)(v63 < v26) << 7;
                  if (v28)
                    v65 = 0;
                  v28 = v64 == v27;
                  v66 = (unint64_t)(v64 < v27) << 7;
                  if (!v28)
                    v65 = v66;
                }
                while (v65);
                do
                {
                  v67 = *((_QWORD *)v57 - 6);
                  v68 = *((_QWORD *)v57 - 5);
                  v57 -= 8;
                  v28 = v67 == v26;
                  v69 = (unint64_t)(v67 < v26) << 7;
                  if (v28)
                    v69 = 0;
                  v28 = v68 == v27;
                  v70 = (unint64_t)(v68 < v27) << 7;
                  if (!v28)
                    v69 = v70;
                }
                while (!v69);
              }
              while (v8 < (unint64_t)v57);
            }
          }
          v71 = (__int128 *)(v8 - 128);
          if (v8 - 128 != a1)
          {
            *(_OWORD *)a1 = *v71;
            v72 = *(_OWORD *)(v8 - 112);
            v73 = *(_OWORD *)(v8 - 96);
            v74 = *(_OWORD *)(v8 - 64);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(v8 - 80);
            *(_OWORD *)(a1 + 64) = v74;
            *(_OWORD *)(a1 + 16) = v72;
            *(_OWORD *)(a1 + 32) = v73;
            v75 = *(_OWORD *)(v8 - 48);
            v76 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 112) = v76;
            *(_OWORD *)(a1 + 80) = v75;
          }
          *v71 = v253;
          *(_OWORD *)(v8 - 112) = v259;
          *(_OWORD *)(v8 - 96) = v265;
          *(_OWORD *)(v8 - 80) = v268;
          *(_OWORD *)(v8 - 64) = v271;
          *(_QWORD *)(v8 - 48) = v26;
          *(_QWORD *)(v8 - 40) = v27;
          *(_OWORD *)(v8 - 32) = v247;
          *(_OWORD *)(v8 - 16) = v250;
          if (v45 < (unint64_t)v47)
            goto LABEL_64;
          v77 = sub_22384410C(a1, v8 - 128);
          if (!sub_22384410C(v8, (uint64_t)a2))
          {
            if (v77)
              continue;
LABEL_64:
            sub_223842BC0(a1, v8 - 128, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__int128 *)(v8 - 128);
          if (v77)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if ((__int128 *)v8 != a2)
          {
            v121 = (_OWORD *)(v8 + 128);
            if ((__int128 *)(v8 + 128) != a2)
            {
              v122 = 0;
              v123 = (_OWORD *)v8;
              do
              {
                v125 = v121;
                v126 = *((_QWORD *)v123 + 26);
                v127 = *((_QWORD *)v123 + 27);
                v128 = *((_QWORD *)v123 + 10);
                v129 = *((_QWORD *)v123 + 11);
                v28 = v126 == v128;
                v130 = (unint64_t)(v126 < v128) << 7;
                if (v28)
                  v130 = 0;
                v28 = v127 == v129;
                v131 = (unint64_t)(v127 < v129) << 7;
                if (!v28)
                  v130 = v131;
                if (v130)
                {
                  v277 = *v125;
                  v285 = v123[9];
                  v293 = v123[10];
                  v301 = v123[11];
                  v309 = v123[12];
                  v132 = v122;
                  v254 = v123[14];
                  v260 = v123[15];
                  do
                  {
                    v133 = v8 + v132;
                    v134 = *(_OWORD *)(v8 + v132 + 16);
                    *(_OWORD *)(v133 + 128) = *(_OWORD *)(v8 + v132);
                    *(_OWORD *)(v133 + 144) = v134;
                    v135 = *(_OWORD *)(v8 + v132 + 48);
                    *(_OWORD *)(v133 + 160) = *(_OWORD *)(v8 + v132 + 32);
                    *(_OWORD *)(v133 + 176) = v135;
                    v136 = *(_OWORD *)(v8 + v132 + 80);
                    *(_OWORD *)(v133 + 192) = *(_OWORD *)(v8 + v132 + 64);
                    *(_OWORD *)(v133 + 208) = v136;
                    v137 = *(_OWORD *)(v8 + v132 + 112);
                    *(_OWORD *)(v133 + 224) = *(_OWORD *)(v8 + v132 + 96);
                    *(_OWORD *)(v133 + 240) = v137;
                    if (!v132)
                    {
                      v124 = v8;
                      goto LABEL_113;
                    }
                    v138 = *(_QWORD *)(v133 - 48);
                    v139 = *(_QWORD *)(v133 - 40);
                    v28 = v126 == v138;
                    v140 = (unint64_t)(v126 < v138) << 7;
                    if (v28)
                      v140 = 0;
                    v28 = v127 == v139;
                    v141 = (unint64_t)(v127 < v139) << 7;
                    if (!v28)
                      v140 = v141;
                    v132 -= 128;
                  }
                  while (v140);
                  v124 = v8 + v132 + 128;
LABEL_113:
                  *(_OWORD *)v124 = v277;
                  *(_OWORD *)(v133 + 48) = v301;
                  *(_OWORD *)(v133 + 64) = v309;
                  *(_OWORD *)(v133 + 16) = v285;
                  *(_OWORD *)(v133 + 32) = v293;
                  *(_QWORD *)(v133 + 80) = v126;
                  *(_QWORD *)(v124 + 88) = v127;
                  *(_OWORD *)(v124 + 96) = v254;
                  *(_OWORD *)(v124 + 112) = v260;
                }
                v121 = v125 + 8;
                v122 += 128;
                v123 = v125;
              }
              while (v125 + 8 != a2);
            }
          }
        }
        else if ((__int128 *)v8 != a2)
        {
          v225 = (_OWORD *)(v8 + 128);
          if ((__int128 *)(v8 + 128) != a2)
          {
            do
            {
              v226 = v225;
              v227 = *(_QWORD *)(a1 + 208);
              v228 = *(_QWORD *)(a1 + 216);
              v229 = *(_QWORD *)(a1 + 80);
              v230 = *(_QWORD *)(a1 + 88);
              v28 = v227 == v229;
              v231 = (unint64_t)(v227 < v229) << 7;
              if (v28)
                v231 = 0;
              v28 = v228 == v230;
              v232 = (unint64_t)(v228 < v230) << 7;
              if (!v28)
                v231 = v232;
              if (v231)
              {
                v280 = *v226;
                v288 = *(_OWORD *)(a1 + 144);
                v296 = *(_OWORD *)(a1 + 160);
                v304 = *(_OWORD *)(a1 + 176);
                v312 = *(_OWORD *)(a1 + 192);
                v233 = v226;
                v257 = *(_OWORD *)(a1 + 224);
                v263 = *(_OWORD *)(a1 + 240);
                do
                {
                  v234 = *(v233 - 7);
                  *v233 = *(v233 - 8);
                  v233[1] = v234;
                  v235 = *(v233 - 5);
                  v233[2] = *(v233 - 6);
                  v233[3] = v235;
                  v236 = *(v233 - 3);
                  v233[4] = *(v233 - 4);
                  v233[5] = v236;
                  v237 = *(v233 - 1);
                  v233[6] = *(v233 - 2);
                  v233[7] = v237;
                  v238 = *((_QWORD *)v233 - 22);
                  v239 = *((_QWORD *)v233 - 21);
                  v233 -= 8;
                  v28 = v227 == v238;
                  v240 = (unint64_t)(v227 < v238) << 7;
                  if (v28)
                    v240 = 0;
                  v28 = v228 == v239;
                  v241 = (unint64_t)(v228 < v239) << 7;
                  if (!v28)
                    v240 = v241;
                }
                while (v240);
                *v233 = v280;
                v233[1] = v288;
                v233[2] = v296;
                v233[3] = v304;
                v233[4] = v312;
                *((_QWORD *)v233 + 10) = v227;
                *((_QWORD *)v233 + 11) = v228;
                v233[6] = v257;
                v233[7] = v263;
              }
              v225 = v226 + 8;
              a1 = (uint64_t)v226;
            }
            while (v226 + 8 != a2);
          }
        }
        return;
    }
  }
}

  v9 = (__int128 *)((char *)a2 - 20);
  v10 = (float *)a2 - 1;
  v144 = (__int128 *)((char *)a2 - 40);
  v145 = (float *)a2 - 6;
  v143 = (__int128 *)((char *)a2 - 60);
  v11 = (float *)a2 - 11;
  v12 = (unint64_t)a1;
  while (2)
  {
    a1 = (_OWORD *)v12;
    v13 = (uint64_t)a2 - v12;
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v12) >> 2);
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = *((float *)a2 - 1);
        if (result < *(float *)(v12 + 16))
        {
          v171 = *(_OWORD *)v12;
          *(_OWORD *)v12 = *(__int128 *)((char *)a2 - 20);
          *(__int128 *)((char *)a2 - 20) = v171;
          result = *(float *)(v12 + 16);
          *(_DWORD *)(v12 + 16) = *((_DWORD *)a2 - 1);
          *((float *)a2 - 1) = result;
        }
        return result;
      case 3:
        v90 = (float *)(v12 + 16);
        v92 = *((float *)a2 - 1);
        v91 = (float *)a2 - 1;
        result = v92;
        v93 = (__int128 *)(v12 + 20);
        v94 = v91 - 4;
        v95 = (float *)(v12 + 36);
        v96 = *(float *)(v12 + 36);
        if (v96 < *(float *)(v12 + 16))
        {
          if (result >= v96)
          {
            v179 = *(_OWORD *)v12;
            *(_OWORD *)v12 = *v93;
            *v93 = v179;
            result = *(float *)(v12 + 16);
            *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 36);
            *(float *)(v12 + 36) = result;
            if (*v91 >= result)
              return result;
            v142 = *v93;
            *v93 = *(_OWORD *)v94;
            *(_OWORD *)v94 = v142;
            v90 = (float *)(v12 + 36);
          }
          else
          {
            v172 = *(_OWORD *)v12;
            *(_OWORD *)v12 = *(_OWORD *)v94;
            *(_OWORD *)v94 = v172;
          }
          v95 = v91;
          goto LABEL_174;
        }
        if (result < v96)
        {
          v136 = *v93;
          *v93 = *(_OWORD *)v94;
          *(_OWORD *)v94 = v136;
          *(float *)&v136 = *v95;
          *v95 = *v91;
          *(_DWORD *)v91 = v136;
          result = *v95;
          if (*v95 < *v90)
          {
            v177 = *(_OWORD *)v12;
            *(_OWORD *)v12 = *v93;
            *v93 = v177;
LABEL_174:
            result = *v90;
            *v90 = *v95;
            *v95 = result;
            return result;
          }
        }
        return result;
      case 4:
        return sub_2238E481C((float *)v12, (float *)(v12 + 20), (float *)(v12 + 40), (float *)a2 - 5);
      case 5:
        v97 = (__int128 *)(v12 + 20);
        v98 = (__int128 *)(v12 + 40);
        v99 = (__int128 *)(v12 + 60);
        sub_2238E481C((float *)v12, (float *)(v12 + 20), (float *)(v12 + 40), (float *)(v12 + 60));
        result = *((float *)a2 - 1);
        if (result < *(float *)(v12 + 76))
        {
          v100 = *v99;
          *v99 = *(__int128 *)((char *)a2 - 20);
          *(__int128 *)((char *)a2 - 20) = v100;
          LODWORD(v100) = *(_DWORD *)(v12 + 76);
          *(_DWORD *)(v12 + 76) = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v100;
          result = *(float *)(v12 + 76);
          if (result < *(float *)(v12 + 56))
          {
            v101 = *v98;
            *v98 = *v99;
            *v99 = v101;
            LODWORD(v101) = *(_DWORD *)(v12 + 56);
            v102 = *(float *)(v12 + 76);
            *(float *)(v12 + 56) = v102;
            *(_DWORD *)(v12 + 76) = v101;
            result = *(float *)(v12 + 36);
            if (v102 < result)
            {
              v103 = *v97;
              *v97 = *v98;
              *v98 = v103;
              LODWORD(v103) = *(_DWORD *)(v12 + 36);
              v104 = *(float *)(v12 + 56);
              *(float *)(v12 + 36) = v104;
              *(_DWORD *)(v12 + 56) = v103;
              result = *(float *)(v12 + 16);
              if (v104 < result)
              {
                v173 = *(_OWORD *)v12;
                *(_OWORD *)v12 = *v97;
                *v97 = v173;
                result = *(float *)(v12 + 16);
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 36);
                *(float *)(v12 + 36) = result;
              }
            }
          }
        }
        return result;
      default:
        if (v13 <= 479)
        {
          v105 = (__int128 *)(v12 + 20);
          v107 = (__int128 *)v12 == a2 || v105 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v107)
            {
              v108 = 0;
              v109 = (__int128 *)v12;
              do
              {
                result = *((float *)v109 + 9);
                v111 = *((float *)v109 + 4);
                v109 = v105;
                if (result < v111)
                {
                  v174 = *v105;
                  v112 = v108;
                  do
                  {
                    v113 = v12 + v112;
                    *(_OWORD *)(v113 + 20) = *(_OWORD *)(v12 + v112);
                    *(_DWORD *)(v113 + 36) = *(_DWORD *)(v12 + v112 + 16);
                    if (!v112)
                    {
                      v110 = v12;
                      goto LABEL_123;
                    }
                    v112 -= 20;
                  }
                  while (result < *(float *)(v113 - 4));
                  v110 = v12 + v112 + 20;
LABEL_123:
                  *(_OWORD *)v110 = v174;
                  *(float *)(v110 + 16) = result;
                }
                v105 = (__int128 *)((char *)v109 + 20);
                v108 += 20;
              }
              while ((__int128 *)((char *)v109 + 20) != a2);
            }
          }
          else if (!v107)
          {
            v137 = (float *)(v12 + 36);
            do
            {
              result = *((float *)a1 + 9);
              v138 = *((float *)a1 + 4);
              a1 = v105;
              if (result < v138)
              {
                v178 = *v105;
                v139 = v137;
                do
                {
                  v140 = v139;
                  *((_OWORD *)v139 - 1) = *(_OWORD *)(v139 - 9);
                  v141 = *((_DWORD *)v139 - 5);
                  v139 -= 5;
                  *(_DWORD *)v140 = v141;
                }
                while (result < *(v140 - 10));
                *((_OWORD *)v139 - 1) = v178;
                *v139 = result;
              }
              v105 = (_OWORD *)((char *)a1 + 20);
              v137 += 5;
            }
            while ((_OWORD *)((char *)a1 + 20) != a2);
          }
          return result;
        }
        if (a3)
        {
          v15 = (unint64_t)v14 >> 1;
          v16 = v12 + 20 * ((unint64_t)v14 >> 1);
          v17 = *v10;
          if ((unint64_t)v13 >= 0xA01)
          {
            v18 = (float *)(v16 + 16);
            v19 = *(float *)(v16 + 16);
            v20 = (float *)(v12 + 16);
            if (v19 >= *(float *)(v12 + 16))
            {
              if (v17 >= v19
                || (v151 = *(_OWORD *)v16,
                    *(_OWORD *)v16 = *v9,
                    *v9 = v151,
                    v24 = *(_DWORD *)(v16 + 16),
                    *(float *)(v16 + 16) = *v10,
                    *(_DWORD *)v10 = v24,
                    *(float *)(v16 + 16) >= *v20))
              {
LABEL_22:
                v29 = (__int128 *)(v12 + 20);
                v30 = v12 + 20 * v15;
                v32 = *(float *)(v30 - 4);
                v31 = (float *)(v30 - 4);
                v33 = v32;
                v34 = v31 - 4;
                v35 = (float *)(v12 + 36);
                v36 = *v145;
                if (v32 >= *(float *)(v12 + 36))
                {
                  if (v36 >= v33
                    || (v157 = *(_OWORD *)v34,
                        *(_OWORD *)v34 = *v144,
                        *v144 = v157,
                        v38 = *v31,
                        *v31 = *v145,
                        *v145 = v38,
                        *v31 >= *v35))
                  {
LABEL_35:
                    v44 = (__int128 *)(v12 + 40);
                    v45 = v12 + 20 * v15;
                    v47 = *(float *)(v45 + 36);
                    v46 = (float *)(v45 + 36);
                    v48 = v47;
                    v49 = v46 - 4;
                    v50 = (float *)(v12 + 56);
                    v51 = *v11;
                    if (v47 >= *(float *)(v12 + 56))
                    {
                      if (v51 >= v48
                        || (v161 = *(_OWORD *)v49,
                            *(_OWORD *)v49 = *v143,
                            *v143 = v161,
                            v53 = *v46,
                            *v46 = *v11,
                            *v11 = v53,
                            v48 = *v46,
                            *v46 >= *v50))
                      {
LABEL_45:
                        v58 = *v18;
                        if (*v18 >= *v31)
                        {
                          if (v48 >= v58)
                            goto LABEL_55;
                          v164 = *(_OWORD *)v16;
                          *(_OWORD *)v16 = *(_OWORD *)v49;
                          *(_OWORD *)v49 = v164;
                          v59 = *(_DWORD *)(v16 + 16);
                          v60 = *v46;
                          *(float *)(v16 + 16) = *v46;
                          *(_DWORD *)v46 = v59;
                          if (v60 >= *v31)
                            goto LABEL_55;
                          v165 = *(_OWORD *)v34;
                          *(_OWORD *)v34 = *(_OWORD *)v16;
                          *(_OWORD *)v16 = v165;
                        }
                        else
                        {
                          if (v48 >= v58)
                          {
                            v166 = *(_OWORD *)v34;
                            *(_OWORD *)v34 = *(_OWORD *)v16;
                            *(_OWORD *)v16 = v166;
                            v61 = *v31;
                            *v31 = *(float *)(v16 + 16);
                            *(float *)(v16 + 16) = v61;
                            if (*v46 >= v61)
                            {
LABEL_55:
                              v168 = *(_OWORD *)v12;
                              *(_OWORD *)v12 = *(_OWORD *)v16;
                              *(_OWORD *)v16 = v168;
                              v22 = (float *)(v12 + 20 * v15 + 16);
                              goto LABEL_56;
                            }
                            v167 = *(_OWORD *)v16;
                            *(_OWORD *)v16 = *(_OWORD *)v49;
                            *(_OWORD *)v49 = v167;
                            v31 = (float *)(v16 + 16);
                          }
                          else
                          {
                            v163 = *(_OWORD *)v34;
                            *(_OWORD *)v34 = *(_OWORD *)v49;
                            *(_OWORD *)v49 = v163;
                          }
                          v18 = v46;
                        }
                        v62 = *v31;
                        *v31 = *v18;
                        *v18 = v62;
                        goto LABEL_55;
                      }
                      v54 = *v44;
                      *v44 = *(_OWORD *)v49;
                      *(_OWORD *)v49 = v54;
                      v55 = v46;
                    }
                    else
                    {
                      if (v51 >= v48)
                      {
                        v56 = *v44;
                        *v44 = *(_OWORD *)v49;
                        *(_OWORD *)v49 = v56;
                        v48 = *v50;
                        *v50 = *v46;
                        *v46 = v48;
                        if (*v11 >= v48)
                          goto LABEL_45;
                        v162 = *(_OWORD *)v49;
                        *(_OWORD *)v49 = *v143;
                        *v143 = v162;
                        v50 = v46;
                      }
                      else
                      {
                        v52 = *v44;
                        *v44 = *v143;
                        *v143 = v52;
                      }
                      v55 = (float *)a2 - 11;
                    }
                    v57 = *v50;
                    *v50 = *v55;
                    *v55 = v57;
                    v48 = *v46;
                    goto LABEL_45;
                  }
                  v39 = *v29;
                  *v29 = *(_OWORD *)v34;
                  *(_OWORD *)v34 = v39;
                  v40 = v31;
                }
                else
                {
                  if (v36 >= v33)
                  {
                    v42 = *v29;
                    *v29 = *(_OWORD *)v34;
                    *(_OWORD *)v34 = v42;
                    *(float *)&v42 = *v35;
                    *v35 = *v31;
                    *(_DWORD *)v31 = v42;
                    if (*v145 >= *(float *)&v42)
                      goto LABEL_35;
                    v160 = *(_OWORD *)v34;
                    *(_OWORD *)v34 = *v144;
                    *v144 = v160;
                    v35 = v31;
                  }
                  else
                  {
                    v37 = *v29;
                    *v29 = *v144;
                    *v144 = v37;
                  }
                  v40 = (float *)a2 - 6;
                }
                v43 = *v35;
                *v35 = *v40;
                *v40 = v43;
                goto LABEL_35;
              }
              v152 = *(_OWORD *)v12;
              *(_OWORD *)v12 = *(_OWORD *)v16;
              *(_OWORD *)v16 = v152;
              v21 = (int *)(v12 + 16);
              v25 = (int *)(v16 + 16);
            }
            else
            {
              if (v17 >= v19)
              {
                v155 = *(_OWORD *)v12;
                *(_OWORD *)v12 = *(_OWORD *)v16;
                *(_OWORD *)v16 = v155;
                v27 = *(float *)(v12 + 16);
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v16 + 16);
                *(float *)(v16 + 16) = v27;
                if (*v10 >= v27)
                  goto LABEL_22;
                v156 = *(_OWORD *)v16;
                *(_OWORD *)v16 = *v9;
                *v9 = v156;
                v21 = (int *)(v16 + 16);
              }
              else
              {
                v149 = *(_OWORD *)v12;
                *(_OWORD *)v12 = *v9;
                *v9 = v149;
                v21 = (int *)(v12 + 16);
              }
              v25 = (int *)a2 - 1;
            }
            v28 = *v21;
            *v21 = *v25;
            *v25 = v28;
            goto LABEL_22;
          }
          v22 = (float *)(v12 + 16);
          v23 = *(float *)(v12 + 16);
          v20 = (float *)(v16 + 16);
          if (v23 < *(float *)(v16 + 16))
          {
            if (v17 >= v23)
            {
              v158 = *(_OWORD *)v16;
              *(_OWORD *)v16 = *(_OWORD *)v12;
              *(_OWORD *)v12 = v158;
              v41 = *(float *)(v16 + 16);
              *(_DWORD *)(v16 + 16) = *(_DWORD *)(v12 + 16);
              *(float *)(v12 + 16) = v41;
              if (*v10 >= v41)
                goto LABEL_57;
              v159 = *(_OWORD *)v12;
              *(_OWORD *)v12 = *v9;
              *v9 = v159;
              v20 = (float *)(v12 + 16);
            }
            else
            {
              v150 = *(_OWORD *)v16;
              *(_OWORD *)v16 = *v9;
              *v9 = v150;
            }
            v22 = (float *)a2 - 1;
            goto LABEL_56;
          }
          if (v17 < v23)
          {
            v153 = *(_OWORD *)v12;
            *(_OWORD *)v12 = *v9;
            *v9 = v153;
            v26 = *(_DWORD *)(v12 + 16);
            *(float *)(v12 + 16) = *v10;
            *(_DWORD *)v10 = v26;
            if (*(float *)(v12 + 16) < *v20)
            {
              v154 = *(_OWORD *)v16;
              *(_OWORD *)v16 = *(_OWORD *)v12;
              *(_OWORD *)v12 = v154;
LABEL_56:
              v63 = *v20;
              *v20 = *v22;
              *v22 = v63;
            }
          }
LABEL_57:
          --a3;
          if ((a4 & 1) == 0)
          {
            v64 = *(float *)(v12 + 16);
            if (*(float *)(v12 - 4) < v64)
              goto LABEL_60;
            v147 = *(_OWORD *)v12;
            result = *(float *)(v12 + 16);
            if (result >= *v10)
            {
              v81 = v12 + 20;
              do
              {
                v12 = v81;
                if (v81 >= (unint64_t)a2)
                  break;
                v82 = *(float *)(v81 + 16);
                v81 += 20;
              }
              while (result >= v82);
            }
            else
            {
              v79 = v12;
              do
              {
                v12 = v79 + 20;
                v80 = *(float *)(v79 + 36);
                v79 += 20;
              }
              while (result >= v80);
            }
            v83 = a2;
            if (v12 < (unint64_t)a2)
            {
              v84 = a2;
              do
              {
                v83 = (__int128 *)((char *)v84 - 20);
                v85 = *((float *)v84 - 1);
                v84 = (__int128 *)((char *)v84 - 20);
              }
              while (result < v85);
            }
            while (v12 < (unint64_t)v83)
            {
              v170 = *(_OWORD *)v12;
              *(_OWORD *)v12 = *v83;
              *v83 = v170;
              v86 = *(_DWORD *)(v12 + 16);
              *(_DWORD *)(v12 + 16) = *((_DWORD *)v83 + 4);
              *((_DWORD *)v83 + 4) = v86;
              do
              {
                v87 = *(float *)(v12 + 36);
                v12 += 20;
              }
              while (result >= v87);
              do
              {
                v88 = *((float *)v83 - 1);
                v83 = (__int128 *)((char *)v83 - 20);
              }
              while (result < v88);
            }
            v89 = (__int128 *)(v12 - 20);
            if ((_OWORD *)(v12 - 20) != a1)
            {
              *a1 = *v89;
              *((_DWORD *)a1 + 4) = *(_DWORD *)(v12 - 4);
            }
            a4 = 0;
            *v89 = v147;
            *(float *)(v12 - 4) = result;
            continue;
          }
          v64 = *(float *)(v12 + 16);
LABEL_60:
          v65 = 0;
          v146 = *(_OWORD *)v12;
          do
          {
            v66 = *(float *)(v12 + v65 + 36);
            v65 += 20;
          }
          while (v66 < v64);
          v67 = v12 + v65;
          v68 = a2;
          if (v65 == 20)
          {
            v71 = a2;
            while (v67 < (unint64_t)v71)
            {
              v69 = (__int128 *)((char *)v71 - 20);
              v72 = *((float *)v71 - 1);
              v71 = (__int128 *)((char *)v71 - 20);
              if (v72 < v64)
                goto LABEL_68;
            }
            v69 = v71;
            v12 = v67;
          }
          else
          {
            do
            {
              v69 = (__int128 *)((char *)v68 - 20);
              v70 = *((float *)v68 - 1);
              v68 = (__int128 *)((char *)v68 - 20);
            }
            while (v70 >= v64);
LABEL_68:
            v12 = v67;
            if (v67 < (unint64_t)v69)
            {
              v73 = (unint64_t)v69;
              do
              {
                v169 = *(_OWORD *)v12;
                *(_OWORD *)v12 = *(_OWORD *)v73;
                *(_OWORD *)v73 = v169;
                v74 = *(_DWORD *)(v12 + 16);
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v73 + 16);
                *(_DWORD *)(v73 + 16) = v74;
                do
                {
                  v75 = *(float *)(v12 + 36);
                  v12 += 20;
                }
                while (v75 < v64);
                do
                {
                  v76 = *(float *)(v73 - 4);
                  v73 -= 20;
                }
                while (v76 >= v64);
              }
              while (v12 < v73);
            }
          }
          v77 = (__int128 *)(v12 - 20);
          if ((_OWORD *)(v12 - 20) != a1)
          {
            *a1 = *v77;
            *((_DWORD *)a1 + 4) = *(_DWORD *)(v12 - 4);
          }
          *v77 = v146;
          *(float *)(v12 - 4) = v64;
          if (v67 < (unint64_t)v69)
            goto LABEL_79;
          v78 = sub_2238E440C(a1, (__int128 *)(v12 - 20));
          if (!sub_2238E440C((__int128 *)v12, a2))
          {
            if (v78)
              continue;
LABEL_79:
            sub_2238E359C(a1, v12 - 20, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__int128 *)(v12 - 20);
          if (v78)
            return result;
          goto LABEL_1;
        }
        if ((__int128 *)v12 != a2)
        {
          v114 = (unint64_t)(v14 - 2) >> 1;
          v115 = v114;
          do
          {
            if (v114 >= v115)
            {
              v117 = (2 * v115) | 1;
              v118 = v12 + 20 * v117;
              if (2 * v115 + 2 < v14 && *(float *)(v118 + 16) < *(float *)(v118 + 36))
              {
                v118 += 20;
                v117 = 2 * v115 + 2;
              }
              v119 = v12 + 20 * v115;
              v120 = *(float *)(v119 + 16);
              if (*(float *)(v118 + 16) >= v120)
              {
                v175 = *(_OWORD *)v119;
                do
                {
                  v121 = v119;
                  v119 = v118;
                  *(_OWORD *)v121 = *(_OWORD *)v118;
                  *(_DWORD *)(v121 + 16) = *(_DWORD *)(v118 + 16);
                  if (v114 < v117)
                    break;
                  v122 = 2 * v117;
                  v117 = (2 * v117) | 1;
                  v118 = v12 + 20 * v117;
                  v123 = v122 + 2;
                  if (v123 < v14 && *(float *)(v118 + 16) < *(float *)(v118 + 36))
                  {
                    v118 += 20;
                    v117 = v123;
                  }
                }
                while (*(float *)(v118 + 16) >= v120);
                *(_OWORD *)v119 = v175;
                *(float *)(v119 + 16) = v120;
              }
            }
            v116 = v115-- <= 0;
          }
          while (!v116);
          v124 = v13 / 0x14uLL;
          do
          {
            v126 = 0;
            v127 = a2;
            v148 = *(_OWORD *)v12;
            result = *(float *)(v12 + 16);
            v128 = v12;
            do
            {
              v129 = v128;
              v128 += 20 * v126 + 20;
              v130 = 2 * v126;
              v126 = (2 * v126) | 1;
              v131 = v130 + 2;
              if (v131 < v124 && *(float *)(v128 + 16) < *(float *)(v128 + 36))
              {
                v128 += 20;
                v126 = v131;
              }
              *(_OWORD *)v129 = *(_OWORD *)v128;
              *(_DWORD *)(v129 + 16) = *(_DWORD *)(v128 + 16);
            }
            while (v126 <= (uint64_t)((unint64_t)(v124 - 2) >> 1));
            a2 = (__int128 *)((char *)a2 - 20);
            if ((__int128 *)v128 == (__int128 *)((char *)v127 - 20))
            {
              v125 = v148;
            }
            else
            {
              *(_OWORD *)v128 = *a2;
              *(_DWORD *)(v128 + 16) = *((_DWORD *)v127 - 1);
              *a2 = v148;
              *((float *)v127 - 1) = result;
              v132 = v128 - v12 + 20;
              if (v132 < 21)
                goto LABEL_148;
              v133 = (v132 / 0x14uLL - 2) >> 1;
              v134 = v12 + 20 * v133;
              result = *(float *)(v128 + 16);
              if (*(float *)(v134 + 16) >= result)
                goto LABEL_148;
              v176 = *(_OWORD *)v128;
              do
              {
                v135 = v128;
                v128 = v134;
                *(_OWORD *)v135 = *(_OWORD *)v134;
                *(_DWORD *)(v135 + 16) = *(_DWORD *)(v134 + 16);
                if (!v133)
                  break;
                v133 = (v133 - 1) >> 1;
                v134 = v12 + 20 * v133;
              }
              while (*(float *)(v134 + 16) < result);
              v125 = v176;
            }
            *(_OWORD *)v128 = v125;
            *(float *)(v128 + 16) = result;
LABEL_148:
            v116 = v124-- <= 2;
          }
          while (!v116);
        }
        return result;
    }
  }
}

  v6 = (unint64_t)a2;
  v234 = a2 - 7;
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = v6 - v7;
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - v7) >> 4);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v100 = *((float *)a2 - 2);
        v101 = *(float *)(a1 + 104);
        v102 = *((_QWORD *)a2 - 4) > *(_QWORD *)(a1 + 80);
        if (vabds_f32(v100, v101) >= 0.00000011921)
          v102 = v100 < v101;
        if (v102)
          sub_2238E5DD0((__int128 *)a1, v234);
        return;
      case 3:
        sub_2238E60A0(a1, a1 + 112, (uint64_t)v234);
        return;
      case 4:
        sub_2238E6548(a1, a1 + 112, a1 + 224, (uint64_t)v234);
        return;
      case 5:
        sub_2238E5F40(a1, a1 + 112, a1 + 224, a1 + 336, (uint64_t)v234);
        return;
      default:
        if (v8 <= 2687)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 != v6)
            {
              v103 = (_OWORD *)(a1 + 112);
              if ((__int128 *)(a1 + 112) != a2)
              {
                v104 = (_OWORD *)a1;
                do
                {
                  v105 = v103;
                  v106 = *((float *)v104 + 54);
                  v107 = *((float *)v104 + 26);
                  v108 = *((_QWORD *)v104 + 24) > *((_QWORD *)v104 + 10);
                  if (vabds_f32(v106, v107) >= 0.00000011921)
                    v108 = v106 < v107;
                  if (v108)
                  {
                    v254 = *v105;
                    v261 = v104[8];
                    v268 = v104[9];
                    v275 = v104[10];
                    v282 = v104[11];
                    v109 = *((_QWORD *)v104 + 24);
                    v110 = *((_QWORD *)v104 + 25);
                    v111 = *((_QWORD *)v104 + 26);
                    *((_QWORD *)v104 + 25) = 0;
                    *((_QWORD *)v104 + 26) = 0;
                    v112 = v105;
                    v113 = *((float *)v104 + 54);
                    while (1)
                    {
                      v114 = v104;
                      *v112 = *v104;
                      v115 = v104[2];
                      v112[1] = v104[1];
                      v112[2] = v115;
                      v116 = v104[4];
                      v112[3] = v104[3];
                      v112[4] = v116;
                      *((_QWORD *)v112 + 10) = *((_QWORD *)v104 + 10);
                      v117 = *(_OWORD *)((char *)v104 + 88);
                      *((_QWORD *)v104 + 11) = 0;
                      *((_QWORD *)v104 + 12) = 0;
                      v118 = (std::__shared_weak_count *)*((_QWORD *)v112 + 12);
                      *(_OWORD *)((char *)v112 + 88) = v117;
                      if (v118)
                      {
                        p_shared_owners = (unint64_t *)&v118->__shared_owners_;
                        do
                          v120 = __ldaxr(p_shared_owners);
                        while (__stlxr(v120 - 1, p_shared_owners));
                        if (!v120)
                        {
                          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                          std::__shared_weak_count::__release_weak(v118);
                        }
                      }
                      *((_DWORD *)v112 + 26) = *((_DWORD *)v114 + 26);
                      if (v114 == (_OWORD *)a1)
                        break;
                      v104 = v114 - 7;
                      v121 = *((float *)v114 - 2);
                      v122 = v109 > *((_QWORD *)v114 - 4);
                      if (vabds_f32(v113, v121) >= 0.00000011921)
                        v122 = v113 < v121;
                      v112 = v114;
                      if (!v122)
                      {
                        v123 = (uint64_t)v114;
                        goto LABEL_134;
                      }
                    }
                    v123 = a1;
LABEL_134:
                    *(_OWORD *)v123 = v254;
                    v114[3] = v275;
                    v114[4] = v282;
                    v114[1] = v261;
                    v114[2] = v268;
                    *(_QWORD *)(v123 + 80) = v109;
                    *((_QWORD *)v114 + 11) = v110;
                    v124 = *(std::__shared_weak_count **)(v123 + 96);
                    *(_QWORD *)(v123 + 96) = v111;
                    if (v124)
                    {
                      v125 = (unint64_t *)&v124->__shared_owners_;
                      do
                        v126 = __ldaxr(v125);
                      while (__stlxr(v126 - 1, v125));
                      if (!v126)
                      {
                        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                        std::__shared_weak_count::__release_weak(v124);
                      }
                    }
                    *(float *)(v123 + 104) = v113;
                  }
                  v103 = v105 + 7;
                  v104 = v105;
                }
                while (v105 + 7 != a2);
              }
            }
          }
          else if (a1 != v6)
          {
            v213 = (_OWORD *)(a1 + 112);
            if ((__int128 *)(a1 + 112) != a2)
            {
              do
              {
                v214 = v213;
                v215 = *(float *)(a1 + 216);
                v216 = *(float *)(a1 + 104);
                v217 = *(_QWORD *)(a1 + 192) > *(_QWORD *)(a1 + 80);
                if (vabds_f32(v215, v216) >= 0.00000011921)
                  v217 = v215 < v216;
                if (v217)
                {
                  v257 = *v214;
                  v264 = *(_OWORD *)(a1 + 128);
                  v271 = *(_OWORD *)(a1 + 144);
                  v278 = *(_OWORD *)(a1 + 160);
                  v285 = *(_OWORD *)(a1 + 176);
                  v218 = *(_QWORD *)(a1 + 192);
                  v242 = *(_OWORD *)(a1 + 200);
                  *(_QWORD *)(a1 + 200) = 0;
                  *(_QWORD *)(a1 + 208) = 0;
                  v219 = v214;
                  v220 = *(float *)(a1 + 216);
                  do
                  {
                    v223 = v219;
                    v219 = (_OWORD *)a1;
                    *v223 = *(_OWORD *)a1;
                    v224 = *(_OWORD *)(a1 + 32);
                    v223[1] = *(_OWORD *)(a1 + 16);
                    v223[2] = v224;
                    v225 = *(_OWORD *)(a1 + 64);
                    v223[3] = *(_OWORD *)(a1 + 48);
                    v223[4] = v225;
                    *((_QWORD *)v223 + 10) = *(_QWORD *)(a1 + 80);
                    v226 = *(_OWORD *)(a1 + 88);
                    *(_QWORD *)(a1 + 88) = 0;
                    *(_QWORD *)(a1 + 96) = 0;
                    v227 = (std::__shared_weak_count *)*((_QWORD *)v223 + 12);
                    *(_OWORD *)((char *)v223 + 88) = v226;
                    if (v227)
                    {
                      v228 = (unint64_t *)&v227->__shared_owners_;
                      do
                        v229 = __ldaxr(v228);
                      while (__stlxr(v229 - 1, v228));
                      if (!v229)
                      {
                        ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                        std::__shared_weak_count::__release_weak(v227);
                      }
                    }
                    *((_DWORD *)v223 + 26) = *(_DWORD *)(a1 + 104);
                    a1 -= 112;
                    v221 = *((float *)v219 - 2);
                    v222 = v218 > *((_QWORD *)v219 - 4);
                    if (vabds_f32(v220, v221) >= 0.00000011921)
                      v222 = v220 < v221;
                  }
                  while (v222);
                  *v219 = v257;
                  v219[3] = v278;
                  v219[4] = v285;
                  v219[1] = v264;
                  v219[2] = v271;
                  *((_QWORD *)v219 + 10) = v218;
                  v230 = (std::__shared_weak_count *)*((_QWORD *)v219 + 12);
                  *(_OWORD *)((char *)v219 + 88) = v242;
                  if (v230)
                  {
                    v231 = (unint64_t *)&v230->__shared_owners_;
                    do
                      v232 = __ldaxr(v231);
                    while (__stlxr(v232 - 1, v231));
                    if (!v232)
                    {
                      ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                      std::__shared_weak_count::__release_weak(v230);
                    }
                  }
                  *((float *)v219 + 26) = v220;
                }
                v213 = v214 + 7;
                a1 = (uint64_t)v214;
              }
              while (v214 + 7 != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 == v6)
            return;
          v127 = (unint64_t)(v9 - 2) >> 1;
          v128 = v127;
          do
          {
            v129 = v128;
            if (v127 >= v128)
            {
              v130 = (2 * v128) | 1;
              v131 = a1 + 112 * v130;
              if (2 * v129 + 2 < v9)
              {
                v132 = *(float *)(v131 + 104);
                v133 = *(float *)(v131 + 216);
                v134 = *(_QWORD *)(v131 + 80) > *(_QWORD *)(v131 + 192);
                if (vabds_f32(v132, v133) >= 0.00000011921)
                  v134 = v132 < v133;
                v131 += 112 * v134;
                if (v134)
                  v130 = 2 * v129 + 2;
              }
              v135 = a1 + 112 * v129;
              v136 = *(float *)(v131 + 104);
              v137 = *(_QWORD *)(v135 + 80);
              v138 = *(float *)(v135 + 104);
              v139 = *(_QWORD *)(v131 + 80) > v137;
              if (vabds_f32(v136, v138) >= 0.00000011921)
                v139 = v136 < v138;
              if (!v139)
              {
                v255 = *(_OWORD *)v135;
                v140 = a1 + 112 * v129;
                v276 = *(_OWORD *)(v140 + 48);
                v283 = *(_OWORD *)(v140 + 64);
                v262 = *(_OWORD *)(v140 + 16);
                v269 = *(_OWORD *)(v140 + 32);
                v237 = *(_OWORD *)(v140 + 88);
                *(_QWORD *)(v140 + 88) = 0;
                *(_QWORD *)(v140 + 96) = 0;
                do
                {
                  v143 = v131;
                  *(_OWORD *)v135 = *(_OWORD *)v131;
                  v144 = *(_OWORD *)(v131 + 16);
                  v145 = *(_OWORD *)(v131 + 32);
                  v146 = *(_OWORD *)(v131 + 64);
                  *(_OWORD *)(v135 + 48) = *(_OWORD *)(v131 + 48);
                  *(_OWORD *)(v135 + 64) = v146;
                  *(_OWORD *)(v135 + 16) = v144;
                  *(_OWORD *)(v135 + 32) = v145;
                  *(_QWORD *)(v135 + 80) = *(_QWORD *)(v131 + 80);
                  v147 = *(_OWORD *)(v131 + 88);
                  *(_QWORD *)(v131 + 88) = 0;
                  *(_QWORD *)(v131 + 96) = 0;
                  v148 = *(std::__shared_weak_count **)(v135 + 96);
                  *(_OWORD *)(v135 + 88) = v147;
                  if (v148)
                  {
                    v149 = (unint64_t *)&v148->__shared_owners_;
                    do
                      v150 = __ldaxr(v149);
                    while (__stlxr(v150 - 1, v149));
                    if (!v150)
                    {
                      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                      std::__shared_weak_count::__release_weak(v148);
                    }
                  }
                  *(_DWORD *)(v135 + 104) = *(_DWORD *)(v143 + 104);
                  if (v127 < v130)
                    break;
                  v151 = (2 * v130) | 1;
                  v131 = a1 + 112 * v151;
                  if (2 * v130 + 2 < v9)
                  {
                    v152 = *(float *)(v131 + 104);
                    v153 = *(float *)(v131 + 216);
                    v154 = *(_QWORD *)(v131 + 80) > *(_QWORD *)(v131 + 192);
                    if (vabds_f32(v152, v153) >= 0.00000011921)
                      v154 = v152 < v153;
                    v131 += 112 * v154;
                    if (v154)
                      v151 = 2 * v130 + 2;
                  }
                  v141 = *(float *)(v131 + 104);
                  v142 = *(_QWORD *)(v131 + 80) > v137;
                  if (vabds_f32(v141, v138) >= 0.00000011921)
                    v142 = v141 < v138;
                  v135 = v143;
                  v130 = v151;
                }
                while (!v142);
                *(_OWORD *)v143 = v255;
                *(_OWORD *)(v143 + 48) = v276;
                *(_OWORD *)(v143 + 64) = v283;
                *(_OWORD *)(v143 + 16) = v262;
                *(_OWORD *)(v143 + 32) = v269;
                *(_QWORD *)(v143 + 80) = v137;
                v155 = *(std::__shared_weak_count **)(v143 + 96);
                *(_OWORD *)(v143 + 88) = v237;
                if (v155)
                {
                  v156 = (unint64_t *)&v155->__shared_owners_;
                  do
                    v157 = __ldaxr(v156);
                  while (__stlxr(v157 - 1, v156));
                  if (!v157)
                  {
                    ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                    std::__shared_weak_count::__release_weak(v155);
                  }
                }
                *(float *)(v143 + 104) = v138;
              }
            }
            v128 = v129 - 1;
          }
          while (v129);
          v158 = (((unint64_t)v8 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64;
          while (2)
          {
            v160 = 0;
            v161 = a2;
            v246 = *(_OWORD *)a1;
            v249 = *(_OWORD *)(a1 + 48);
            v250 = *(_OWORD *)(a1 + 64);
            v247 = *(_OWORD *)(a1 + 16);
            v248 = *(_OWORD *)(a1 + 32);
            v235 = *(_QWORD *)(a1 + 88);
            v238 = *(_QWORD *)(a1 + 80);
            v244 = *(_QWORD *)(a1 + 96);
            *(_QWORD *)(a1 + 88) = 0;
            *(_QWORD *)(a1 + 96) = 0;
            v162 = a1;
            v163 = *(_DWORD *)(a1 + 104);
            do
            {
              v164 = v162;
              v162 += 112 * v160 + 112;
              v165 = 2 * v160;
              v160 = (2 * v160) | 1;
              v166 = v165 + 2;
              if (v165 + 2 < v158)
              {
                v167 = *(float *)(v162 + 104);
                v168 = *(float *)(v162 + 216);
                v169 = *(_QWORD *)(v162 + 80) > *(_QWORD *)(v162 + 192);
                if (vabds_f32(v167, v168) >= 0.00000011921)
                  v169 = v167 < v168;
                v162 += 112 * v169;
                if (v169)
                  v160 = v166;
              }
              *(_OWORD *)v164 = *(_OWORD *)v162;
              v170 = *(_OWORD *)(v162 + 16);
              v171 = *(_OWORD *)(v162 + 32);
              v172 = *(_OWORD *)(v162 + 64);
              *(_OWORD *)(v164 + 48) = *(_OWORD *)(v162 + 48);
              *(_OWORD *)(v164 + 64) = v172;
              *(_OWORD *)(v164 + 16) = v170;
              *(_OWORD *)(v164 + 32) = v171;
              v173 = *(_OWORD *)(v162 + 88);
              *(_QWORD *)(v164 + 80) = *(_QWORD *)(v162 + 80);
              *(_QWORD *)(v162 + 88) = 0;
              *(_QWORD *)(v162 + 96) = 0;
              v174 = *(std::__shared_weak_count **)(v164 + 96);
              *(_OWORD *)(v164 + 88) = v173;
              if (v174)
              {
                v175 = (unint64_t *)&v174->__shared_owners_;
                do
                  v176 = __ldaxr(v175);
                while (__stlxr(v176 - 1, v175));
                if (!v176)
                {
                  ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                  std::__shared_weak_count::__release_weak(v174);
                }
              }
              *(_DWORD *)(v164 + 104) = *(_DWORD *)(v162 + 104);
            }
            while (v160 <= (uint64_t)((unint64_t)(v158 - 2) >> 1));
            v177 = (__int128 *)(v162 + 16);
            v178 = v161 - 7;
            if ((__int128 *)v162 == v161 - 7)
            {
              *(_OWORD *)v162 = v246;
              *(_OWORD *)(v162 + 48) = v249;
              *(_OWORD *)(v162 + 64) = v250;
              *v177 = v247;
              *(_OWORD *)(v162 + 32) = v248;
              *(_QWORD *)(v162 + 80) = v238;
              *(_QWORD *)(v162 + 88) = v235;
              v210 = *(std::__shared_weak_count **)(v162 + 96);
              *(_QWORD *)(v162 + 96) = v244;
              if (v210)
              {
                v211 = (unint64_t *)&v210->__shared_owners_;
                do
                  v212 = __ldaxr(v211);
                while (__stlxr(v212 - 1, v211));
                if (!v212)
                {
                  ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                  std::__shared_weak_count::__release_weak(v210);
                }
              }
              *(_DWORD *)(v162 + 104) = v163;
            }
            else
            {
              *(_OWORD *)v162 = *v178;
              v179 = *(v161 - 6);
              v180 = *(v161 - 5);
              v181 = *(v161 - 3);
              *(_OWORD *)(v162 + 48) = *(v161 - 4);
              *(_OWORD *)(v162 + 64) = v181;
              *v177 = v179;
              *(_OWORD *)(v162 + 32) = v180;
              *(_QWORD *)(v162 + 80) = *((_QWORD *)v161 - 4);
              v182 = *(__int128 *)((char *)v161 - 24);
              *((_QWORD *)v161 - 3) = 0;
              *((_QWORD *)v161 - 2) = 0;
              v183 = *(std::__shared_weak_count **)(v162 + 96);
              *(_OWORD *)(v162 + 88) = v182;
              if (v183)
              {
                v184 = (unint64_t *)&v183->__shared_owners_;
                do
                  v185 = __ldaxr(v184);
                while (__stlxr(v185 - 1, v184));
                if (!v185)
                {
                  ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                  std::__shared_weak_count::__release_weak(v183);
                }
              }
              v186 = v161 - 6;
              *(_DWORD *)(v162 + 104) = *((_DWORD *)v161 - 2);
              *v178 = v246;
              v186[2] = v249;
              v186[3] = v250;
              *v186 = v247;
              v186[1] = v248;
              *((_QWORD *)v161 - 4) = v238;
              *((_QWORD *)v161 - 3) = v235;
              v187 = (std::__shared_weak_count *)*((_QWORD *)v161 - 2);
              *((_QWORD *)v161 - 2) = v244;
              if (!v187)
                goto LABEL_198;
              v188 = (unint64_t *)&v187->__shared_owners_;
              do
                v189 = __ldaxr(v188);
              while (__stlxr(v189 - 1, v188));
              if (!v189)
              {
                ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                std::__shared_weak_count::__release_weak(v187);
                *((_DWORD *)v161 - 2) = v163;
                v190 = v162 + 112 - a1;
                if (v190 >= 113)
                {
LABEL_199:
                  v191 = (unint64_t)(((((unint64_t)v190 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                          - 2) >> 1;
                  v192 = a1 + 112 * v191;
                  v193 = *(float *)(v192 + 104);
                  v194 = *(_QWORD *)(v162 + 80);
                  v195 = *(float *)(v162 + 104);
                  v196 = *(_QWORD *)(v192 + 80) > v194;
                  if (vabds_f32(v193, v195) >= 0.00000011921)
                    v196 = v193 < v195;
                  if (v196)
                  {
                    v256 = *(_OWORD *)v162;
                    v277 = *(_OWORD *)(v162 + 48);
                    v284 = *(_OWORD *)(v162 + 64);
                    v263 = *v177;
                    v270 = *(_OWORD *)(v162 + 32);
                    v245 = *(_OWORD *)(v162 + 88);
                    *(_QWORD *)(v162 + 88) = 0;
                    *(_QWORD *)(v162 + 96) = 0;
                    do
                    {
                      v197 = v192;
                      *(_OWORD *)v162 = *(_OWORD *)v192;
                      v198 = *(_OWORD *)(v192 + 16);
                      v199 = *(_OWORD *)(v192 + 32);
                      v200 = *(_OWORD *)(v192 + 64);
                      *(_OWORD *)(v162 + 48) = *(_OWORD *)(v192 + 48);
                      *(_OWORD *)(v162 + 64) = v200;
                      *(_OWORD *)(v162 + 16) = v198;
                      *(_OWORD *)(v162 + 32) = v199;
                      *(_QWORD *)(v162 + 80) = *(_QWORD *)(v192 + 80);
                      v201 = *(_OWORD *)(v192 + 88);
                      *(_QWORD *)(v192 + 88) = 0;
                      *(_QWORD *)(v192 + 96) = 0;
                      v202 = *(std::__shared_weak_count **)(v162 + 96);
                      *(_OWORD *)(v162 + 88) = v201;
                      if (v202)
                      {
                        v203 = (unint64_t *)&v202->__shared_owners_;
                        do
                          v204 = __ldaxr(v203);
                        while (__stlxr(v204 - 1, v203));
                        if (!v204)
                        {
                          ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                          std::__shared_weak_count::__release_weak(v202);
                        }
                      }
                      *(_DWORD *)(v162 + 104) = *(_DWORD *)(v197 + 104);
                      if (!v191)
                        break;
                      v191 = (v191 - 1) >> 1;
                      v192 = a1 + 112 * v191;
                      v205 = *(float *)(v192 + 104);
                      v206 = *(_QWORD *)(v192 + 80) > v194;
                      if (vabds_f32(v205, v195) >= 0.00000011921)
                        v206 = v205 < v195;
                      v162 = v197;
                    }
                    while (v206);
                    *(_OWORD *)v197 = v256;
                    *(_OWORD *)(v197 + 48) = v277;
                    *(_OWORD *)(v197 + 64) = v284;
                    *(_OWORD *)(v197 + 16) = v263;
                    *(_OWORD *)(v197 + 32) = v270;
                    *(_QWORD *)(v197 + 80) = v194;
                    v207 = *(std::__shared_weak_count **)(v197 + 96);
                    *(_OWORD *)(v197 + 88) = v245;
                    if (v207)
                    {
                      v208 = (unint64_t *)&v207->__shared_owners_;
                      do
                        v209 = __ldaxr(v208);
                      while (__stlxr(v209 - 1, v208));
                      if (!v209)
                      {
                        ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                        std::__shared_weak_count::__release_weak(v207);
                      }
                    }
                    *(float *)(v197 + 104) = v195;
                  }
                }
              }
              else
              {
LABEL_198:
                *((_DWORD *)v161 - 2) = v163;
                v190 = v162 + 112 - a1;
                if (v190 >= 113)
                  goto LABEL_199;
              }
            }
            a2 = v178;
            if (v158-- <= 2)
              return;
            continue;
          }
        }
        v10 = a3;
        v11 = (unint64_t)v9 >> 1;
        v12 = (__int128 *)(a1 + 112 * ((unint64_t)v9 >> 1));
        if ((unint64_t)v8 < 0x3801)
        {
          sub_2238E60A0((uint64_t)v12, a1, (uint64_t)v234);
          a3 = v10 - 1;
          if ((a4 & 1) != 0)
            goto LABEL_29;
LABEL_17:
          v30 = *(float *)(a1 - 8);
          v31 = *(_QWORD *)(a1 + 80);
          v32 = *(float *)(a1 + 104);
          v33 = *(_QWORD *)(a1 - 32) > v31;
          if (vabds_f32(v30, v32) >= 0.00000011921)
            v33 = v30 < v32;
          if (v33)
            goto LABEL_30;
          v252 = *(_OWORD *)a1;
          v273 = *(_OWORD *)(a1 + 48);
          v280 = *(_OWORD *)(a1 + 64);
          v259 = *(_OWORD *)(a1 + 16);
          v266 = *(_OWORD *)(a1 + 32);
          v34 = *(_QWORD *)(a1 + 80);
          v240 = *(_OWORD *)(a1 + 88);
          *(_QWORD *)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 96) = 0;
          v35 = *(float *)(a1 + 104);
          v36 = *(float *)(v6 - 8);
          v37 = v34 > *(_QWORD *)(v6 - 32);
          if (vabds_f32(v35, v36) >= 0.00000011921)
            v37 = v35 < v36;
          if (v37)
          {
            v38 = a1;
            do
            {
              v7 = v38 + 112;
              v39 = *(float *)(v38 + 216);
              v40 = v34 > *(_QWORD *)(v38 + 192);
              v41 = v35 < v39;
              if (vabds_f32(v35, v39) < 0.00000011921)
                v41 = v40;
              v38 = v7;
            }
            while (!v41);
          }
          else
          {
            v73 = a1 + 112;
            do
            {
              v7 = v73;
              if (v73 >= v6)
                break;
              v74 = *(float *)(v73 + 104);
              v75 = v34 > *(_QWORD *)(v73 + 80);
              v76 = v35 < v74;
              if (vabds_f32(v35, v74) < 0.00000011921)
                v76 = v75;
              v73 = v7 + 112;
            }
            while (!v76);
          }
          v77 = (__int128 *)v6;
          if (v7 < v6)
          {
            v78 = v6;
            do
            {
              v77 = (__int128 *)(v78 - 112);
              v79 = *(float *)(v78 - 8);
              v80 = v34 > *(_QWORD *)(v78 - 32);
              v81 = v35 < v79;
              if (vabds_f32(v35, v79) < 0.00000011921)
                v81 = v80;
              v78 = (unint64_t)v77;
            }
            while (v81);
          }
          while (v7 < (unint64_t)v77)
          {
            sub_2238E5DD0((__int128 *)v7, v77);
            do
            {
              v82 = *(_QWORD *)(v7 + 192);
              v83 = *(float *)(v7 + 216);
              v7 += 112;
              v84 = v34 > v82;
              if (vabds_f32(v35, v83) >= 0.00000011921)
                v84 = v35 < v83;
            }
            while (!v84);
            do
            {
              v85 = *((_QWORD *)v77 - 4);
              v86 = *((float *)v77 - 2);
              v77 -= 7;
              v87 = v34 > v85;
              if (vabds_f32(v35, v86) >= 0.00000011921)
                v87 = v35 < v86;
            }
            while (v87);
          }
          v88 = a3;
          v89 = (__int128 *)(v7 - 112);
          if (v7 - 112 != a1)
          {
            *(_OWORD *)a1 = *v89;
            v90 = *(_OWORD *)(v7 - 96);
            v91 = *(_OWORD *)(v7 - 80);
            v92 = *(_OWORD *)(v7 - 48);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(v7 - 64);
            *(_OWORD *)(a1 + 64) = v92;
            *(_OWORD *)(a1 + 16) = v90;
            *(_OWORD *)(a1 + 32) = v91;
            *(_QWORD *)(a1 + 80) = *(_QWORD *)(v7 - 32);
            v93 = *(_OWORD *)(v7 - 24);
            *(_QWORD *)(v7 - 24) = 0;
            *(_QWORD *)(v7 - 16) = 0;
            v94 = *(std::__shared_weak_count **)(a1 + 96);
            *(_OWORD *)(a1 + 88) = v93;
            if (v94)
            {
              v95 = (unint64_t *)&v94->__shared_owners_;
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 - 1, v95));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
            }
            *(_DWORD *)(a1 + 104) = *(_DWORD *)(v7 - 8);
          }
          *v89 = v252;
          *(_OWORD *)(v7 - 64) = v273;
          *(_OWORD *)(v7 - 48) = v280;
          *(_OWORD *)(v7 - 96) = v259;
          *(_OWORD *)(v7 - 80) = v266;
          *(_QWORD *)(v7 - 32) = v34;
          v97 = *(std::__shared_weak_count **)(v7 - 16);
          *(_OWORD *)(v7 - 24) = v240;
          a3 = v88;
          if (v97)
          {
            v98 = (unint64_t *)&v97->__shared_owners_;
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
          a4 = 0;
          *(float *)(v7 - 8) = v35;
          continue;
        }
        sub_2238E60A0(a1, (uint64_t)v12, (uint64_t)v234);
        v13 = a1 + 112 * v11;
        sub_2238E60A0(a1 + 112, v13 - 112, (uint64_t)(a2 - 14));
        sub_2238E60A0(a1 + 224, a1 + 112 + 112 * v11, (uint64_t)(a2 - 21));
        sub_2238E60A0(v13 - 112, (uint64_t)v12, a1 + 112 + 112 * v11);
        v251 = *(_OWORD *)a1;
        v272 = *(_OWORD *)(a1 + 48);
        v279 = *(_OWORD *)(a1 + 64);
        v258 = *(_OWORD *)(a1 + 16);
        v265 = *(_OWORD *)(a1 + 32);
        v14 = *(_QWORD *)(a1 + 80);
        v15 = *(_OWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 88) = 0;
        *(_QWORD *)(a1 + 96) = 0;
        v16 = *(_DWORD *)(a1 + 104);
        v17 = *(_OWORD *)(v13 + 48);
        v18 = *(_OWORD *)(v13 + 64);
        v20 = *(_OWORD *)(v13 + 16);
        v19 = *(_OWORD *)(v13 + 32);
        *(_OWORD *)a1 = *v12;
        *(_OWORD *)(a1 + 16) = v20;
        *(_OWORD *)(a1 + 48) = v17;
        *(_OWORD *)(a1 + 64) = v18;
        v21 = *(_QWORD *)(v13 + 80);
        *(_OWORD *)(a1 + 32) = v19;
        *(_QWORD *)(a1 + 80) = v21;
        v22 = *(_OWORD *)(v13 + 88);
        *(_QWORD *)(v13 + 96) = 0;
        *(_QWORD *)(v13 + 88) = 0;
        v23 = *(std::__shared_weak_count **)(a1 + 96);
        *(_OWORD *)(a1 + 88) = v22;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            v239 = v15;
            v233 = v14;
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
            v14 = v233;
            v15 = v239;
          }
        }
        v26 = (_DWORD *)(a1 + 104 + 112 * v11);
        *(_DWORD *)(a1 + 104) = *v26;
        *v12 = v251;
        *(_OWORD *)(v13 + 48) = v272;
        *(_OWORD *)(v13 + 64) = v279;
        *(_OWORD *)(v13 + 16) = v258;
        *(_OWORD *)(v13 + 32) = v265;
        *(_QWORD *)(v13 + 80) = v14;
        v27 = *(std::__shared_weak_count **)(v13 + 96);
        *(_OWORD *)(v13 + 88) = v15;
        v6 = (unint64_t)a2;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        *v26 = v16;
        a3 = v10 - 1;
        if ((a4 & 1) == 0)
          goto LABEL_17;
LABEL_29:
        v31 = *(_QWORD *)(a1 + 80);
        v32 = *(float *)(a1 + 104);
LABEL_30:
        v42 = 0;
        v253 = *(_OWORD *)a1;
        v274 = *(_OWORD *)(a1 + 48);
        v281 = *(_OWORD *)(a1 + 64);
        v260 = *(_OWORD *)(a1 + 16);
        v267 = *(_OWORD *)(a1 + 32);
        v241 = *(_OWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 88) = 0;
        *(_QWORD *)(a1 + 96) = 0;
        do
        {
          v43 = *(float *)(a1 + v42 + 216);
          v44 = *(_QWORD *)(a1 + v42 + 192) > v31;
          if (vabds_f32(v43, v32) >= 0.00000011921)
            v44 = v43 < v32;
          v42 += 112;
        }
        while (v44);
        v45 = a1 + v42;
        v46 = v6;
        if (v42 == 112)
        {
          v50 = v6;
          while (v45 < v50)
          {
            v47 = (__int128 *)(v50 - 112);
            v51 = *(float *)(v50 - 8);
            v52 = *(_QWORD *)(v50 - 32) > v31;
            v53 = v51 < v32;
            if (vabds_f32(v51, v32) < 0.00000011921)
              v53 = v52;
            v50 = (unint64_t)v47;
            if (v53)
              goto LABEL_44;
          }
          v47 = (__int128 *)v50;
          v7 = v45;
        }
        else
        {
          do
          {
            v47 = (__int128 *)(v46 - 112);
            v48 = *(float *)(v46 - 8);
            v49 = *(_QWORD *)(v46 - 32) > v31;
            if (vabds_f32(v48, v32) >= 0.00000011921)
              v49 = v48 < v32;
            v46 -= 112;
          }
          while (!v49);
LABEL_44:
          v7 = v45;
          if (v45 < (unint64_t)v47)
          {
            v54 = v47;
            do
            {
              sub_2238E5DD0((__int128 *)v7, v54);
              do
              {
                v55 = *(_QWORD *)(v7 + 192);
                v56 = *(float *)(v7 + 216);
                v7 += 112;
                v57 = v55 > v31;
                if (vabds_f32(v56, v32) >= 0.00000011921)
                  v57 = v56 < v32;
              }
              while (v57);
              do
              {
                v58 = *((_QWORD *)v54 - 4);
                v59 = *((float *)v54 - 2);
                v54 -= 7;
                v60 = v58 > v31;
                if (vabds_f32(v59, v32) >= 0.00000011921)
                  v60 = v59 < v32;
              }
              while (!v60);
            }
            while (v7 < (unint64_t)v54);
          }
        }
        v61 = (__int128 *)(v7 - 112);
        if (v7 - 112 != a1)
        {
          *(_OWORD *)a1 = *v61;
          v62 = *(_OWORD *)(v7 - 96);
          v63 = *(_OWORD *)(v7 - 80);
          v64 = *(_OWORD *)(v7 - 48);
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(v7 - 64);
          *(_OWORD *)(a1 + 64) = v64;
          *(_OWORD *)(a1 + 16) = v62;
          *(_OWORD *)(a1 + 32) = v63;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(v7 - 32);
          v65 = *(_OWORD *)(v7 - 24);
          *(_QWORD *)(v7 - 24) = 0;
          *(_QWORD *)(v7 - 16) = 0;
          v66 = *(std::__shared_weak_count **)(a1 + 96);
          *(_OWORD *)(a1 + 88) = v65;
          if (v66)
          {
            v67 = (unint64_t *)&v66->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(v7 - 8);
        }
        *v61 = v253;
        *(_OWORD *)(v7 - 64) = v274;
        *(_OWORD *)(v7 - 48) = v281;
        *(_OWORD *)(v7 - 96) = v260;
        *(_OWORD *)(v7 - 80) = v267;
        *(_QWORD *)(v7 - 32) = v31;
        v69 = *(std::__shared_weak_count **)(v7 - 16);
        *(_OWORD *)(v7 - 24) = v241;
        if (v69)
        {
          v70 = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        *(float *)(v7 - 8) = v32;
        if (v45 < (unint64_t)v47)
        {
LABEL_69:
          sub_2238E49D8(a1, v7 - 112, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v72 = sub_2238E61E4(a1, v7 - 112);
        if (!sub_2238E61E4(v7, v6))
        {
          if (v72)
            continue;
          goto LABEL_69;
        }
        a2 = (__int128 *)(v7 - 112);
        if (!v72)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = (__int128 *)((char *)a2 - 20);
  v10 = (float *)a2 - 1;
  v144 = (__int128 *)((char *)a2 - 40);
  v145 = (float *)a2 - 6;
  v143 = (__int128 *)((char *)a2 - 60);
  v11 = (float *)a2 - 11;
  v12 = (unint64_t)a1;
  while (2)
  {
    a1 = (_OWORD *)v12;
    v13 = (uint64_t)a2 - v12;
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v12) >> 2);
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = *((float *)a2 - 1);
        if (result > *(float *)(v12 + 16))
        {
          v171 = *(_OWORD *)v12;
          *(_OWORD *)v12 = *(__int128 *)((char *)a2 - 20);
          *(__int128 *)((char *)a2 - 20) = v171;
          result = *(float *)(v12 + 16);
          *(_DWORD *)(v12 + 16) = *((_DWORD *)a2 - 1);
          *((float *)a2 - 1) = result;
        }
        return result;
      case 3:
        v90 = (float *)(v12 + 16);
        v92 = *((float *)a2 - 1);
        v91 = (float *)a2 - 1;
        result = v92;
        v93 = (__int128 *)(v12 + 20);
        v94 = v91 - 4;
        v95 = (float *)(v12 + 36);
        v96 = *(float *)(v12 + 36);
        if (v96 > *(float *)(v12 + 16))
        {
          if (result <= v96)
          {
            v179 = *(_OWORD *)v12;
            *(_OWORD *)v12 = *v93;
            *v93 = v179;
            result = *(float *)(v12 + 16);
            *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 36);
            *(float *)(v12 + 36) = result;
            if (*v91 <= result)
              return result;
            v142 = *v93;
            *v93 = *(_OWORD *)v94;
            *(_OWORD *)v94 = v142;
            v90 = (float *)(v12 + 36);
          }
          else
          {
            v172 = *(_OWORD *)v12;
            *(_OWORD *)v12 = *(_OWORD *)v94;
            *(_OWORD *)v94 = v172;
          }
          v95 = v91;
          goto LABEL_174;
        }
        if (result > v96)
        {
          v136 = *v93;
          *v93 = *(_OWORD *)v94;
          *(_OWORD *)v94 = v136;
          *(float *)&v136 = *v95;
          *v95 = *v91;
          *(_DWORD *)v91 = v136;
          result = *v95;
          if (*v95 > *v90)
          {
            v177 = *(_OWORD *)v12;
            *(_OWORD *)v12 = *v93;
            *v93 = v177;
LABEL_174:
            result = *v90;
            *v90 = *v95;
            *v95 = result;
            return result;
          }
        }
        return result;
      case 4:
        return sub_2238F129C((float *)v12, (float *)(v12 + 20), (float *)(v12 + 40), (float *)a2 - 5);
      case 5:
        v97 = (__int128 *)(v12 + 20);
        v98 = (__int128 *)(v12 + 40);
        v99 = (__int128 *)(v12 + 60);
        sub_2238F129C((float *)v12, (float *)(v12 + 20), (float *)(v12 + 40), (float *)(v12 + 60));
        result = *((float *)a2 - 1);
        if (result > *(float *)(v12 + 76))
        {
          v100 = *v99;
          *v99 = *(__int128 *)((char *)a2 - 20);
          *(__int128 *)((char *)a2 - 20) = v100;
          LODWORD(v100) = *(_DWORD *)(v12 + 76);
          *(_DWORD *)(v12 + 76) = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v100;
          result = *(float *)(v12 + 76);
          if (result > *(float *)(v12 + 56))
          {
            v101 = *v98;
            *v98 = *v99;
            *v99 = v101;
            LODWORD(v101) = *(_DWORD *)(v12 + 56);
            v102 = *(float *)(v12 + 76);
            *(float *)(v12 + 56) = v102;
            *(_DWORD *)(v12 + 76) = v101;
            result = *(float *)(v12 + 36);
            if (v102 > result)
            {
              v103 = *v97;
              *v97 = *v98;
              *v98 = v103;
              LODWORD(v103) = *(_DWORD *)(v12 + 36);
              v104 = *(float *)(v12 + 56);
              *(float *)(v12 + 36) = v104;
              *(_DWORD *)(v12 + 56) = v103;
              result = *(float *)(v12 + 16);
              if (v104 > result)
              {
                v173 = *(_OWORD *)v12;
                *(_OWORD *)v12 = *v97;
                *v97 = v173;
                result = *(float *)(v12 + 16);
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 36);
                *(float *)(v12 + 36) = result;
              }
            }
          }
        }
        return result;
      default:
        if (v13 <= 479)
        {
          v105 = (__int128 *)(v12 + 20);
          v107 = (__int128 *)v12 == a2 || v105 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v107)
            {
              v108 = 0;
              v109 = (__int128 *)v12;
              do
              {
                result = *((float *)v109 + 9);
                v111 = *((float *)v109 + 4);
                v109 = v105;
                if (result > v111)
                {
                  v174 = *v105;
                  v112 = v108;
                  do
                  {
                    v113 = v12 + v112;
                    *(_OWORD *)(v113 + 20) = *(_OWORD *)(v12 + v112);
                    *(_DWORD *)(v113 + 36) = *(_DWORD *)(v12 + v112 + 16);
                    if (!v112)
                    {
                      v110 = v12;
                      goto LABEL_123;
                    }
                    v112 -= 20;
                  }
                  while (result > *(float *)(v113 - 4));
                  v110 = v12 + v112 + 20;
LABEL_123:
                  *(_OWORD *)v110 = v174;
                  *(float *)(v110 + 16) = result;
                }
                v105 = (__int128 *)((char *)v109 + 20);
                v108 += 20;
              }
              while ((__int128 *)((char *)v109 + 20) != a2);
            }
          }
          else if (!v107)
          {
            v137 = (float *)(v12 + 36);
            do
            {
              result = *((float *)a1 + 9);
              v138 = *((float *)a1 + 4);
              a1 = v105;
              if (result > v138)
              {
                v178 = *v105;
                v139 = v137;
                do
                {
                  v140 = v139;
                  *((_OWORD *)v139 - 1) = *(_OWORD *)(v139 - 9);
                  v141 = *((_DWORD *)v139 - 5);
                  v139 -= 5;
                  *(_DWORD *)v140 = v141;
                }
                while (result > *(v140 - 10));
                *((_OWORD *)v139 - 1) = v178;
                *v139 = result;
              }
              v105 = (_OWORD *)((char *)a1 + 20);
              v137 += 5;
            }
            while ((_OWORD *)((char *)a1 + 20) != a2);
          }
          return result;
        }
        if (a3)
        {
          v15 = (unint64_t)v14 >> 1;
          v16 = v12 + 20 * ((unint64_t)v14 >> 1);
          v17 = *v10;
          if ((unint64_t)v13 >= 0xA01)
          {
            v18 = (float *)(v16 + 16);
            v19 = *(float *)(v16 + 16);
            v20 = (float *)(v12 + 16);
            if (v19 <= *(float *)(v12 + 16))
            {
              if (v17 <= v19
                || (v151 = *(_OWORD *)v16,
                    *(_OWORD *)v16 = *v9,
                    *v9 = v151,
                    v24 = *(_DWORD *)(v16 + 16),
                    *(float *)(v16 + 16) = *v10,
                    *(_DWORD *)v10 = v24,
                    *(float *)(v16 + 16) <= *v20))
              {
LABEL_22:
                v29 = (__int128 *)(v12 + 20);
                v30 = v12 + 20 * v15;
                v32 = *(float *)(v30 - 4);
                v31 = (float *)(v30 - 4);
                v33 = v32;
                v34 = v31 - 4;
                v35 = (float *)(v12 + 36);
                v36 = *v145;
                if (v32 <= *(float *)(v12 + 36))
                {
                  if (v36 <= v33
                    || (v157 = *(_OWORD *)v34,
                        *(_OWORD *)v34 = *v144,
                        *v144 = v157,
                        v38 = *v31,
                        *v31 = *v145,
                        *v145 = v38,
                        *v31 <= *v35))
                  {
LABEL_35:
                    v44 = (__int128 *)(v12 + 40);
                    v45 = v12 + 20 * v15;
                    v47 = *(float *)(v45 + 36);
                    v46 = (float *)(v45 + 36);
                    v48 = v47;
                    v49 = v46 - 4;
                    v50 = (float *)(v12 + 56);
                    v51 = *v11;
                    if (v47 <= *(float *)(v12 + 56))
                    {
                      if (v51 <= v48
                        || (v161 = *(_OWORD *)v49,
                            *(_OWORD *)v49 = *v143,
                            *v143 = v161,
                            v53 = *v46,
                            *v46 = *v11,
                            *v11 = v53,
                            v48 = *v46,
                            *v46 <= *v50))
                      {
LABEL_45:
                        v58 = *v18;
                        if (*v18 <= *v31)
                        {
                          if (v48 <= v58)
                            goto LABEL_55;
                          v164 = *(_OWORD *)v16;
                          *(_OWORD *)v16 = *(_OWORD *)v49;
                          *(_OWORD *)v49 = v164;
                          v59 = *(_DWORD *)(v16 + 16);
                          v60 = *v46;
                          *(float *)(v16 + 16) = *v46;
                          *(_DWORD *)v46 = v59;
                          if (v60 <= *v31)
                            goto LABEL_55;
                          v165 = *(_OWORD *)v34;
                          *(_OWORD *)v34 = *(_OWORD *)v16;
                          *(_OWORD *)v16 = v165;
                        }
                        else
                        {
                          if (v48 <= v58)
                          {
                            v166 = *(_OWORD *)v34;
                            *(_OWORD *)v34 = *(_OWORD *)v16;
                            *(_OWORD *)v16 = v166;
                            v61 = *v31;
                            *v31 = *(float *)(v16 + 16);
                            *(float *)(v16 + 16) = v61;
                            if (*v46 <= v61)
                            {
LABEL_55:
                              v168 = *(_OWORD *)v12;
                              *(_OWORD *)v12 = *(_OWORD *)v16;
                              *(_OWORD *)v16 = v168;
                              v22 = (float *)(v12 + 20 * v15 + 16);
                              goto LABEL_56;
                            }
                            v167 = *(_OWORD *)v16;
                            *(_OWORD *)v16 = *(_OWORD *)v49;
                            *(_OWORD *)v49 = v167;
                            v31 = (float *)(v16 + 16);
                          }
                          else
                          {
                            v163 = *(_OWORD *)v34;
                            *(_OWORD *)v34 = *(_OWORD *)v49;
                            *(_OWORD *)v49 = v163;
                          }
                          v18 = v46;
                        }
                        v62 = *v31;
                        *v31 = *v18;
                        *v18 = v62;
                        goto LABEL_55;
                      }
                      v54 = *v44;
                      *v44 = *(_OWORD *)v49;
                      *(_OWORD *)v49 = v54;
                      v55 = v46;
                    }
                    else
                    {
                      if (v51 <= v48)
                      {
                        v56 = *v44;
                        *v44 = *(_OWORD *)v49;
                        *(_OWORD *)v49 = v56;
                        v48 = *v50;
                        *v50 = *v46;
                        *v46 = v48;
                        if (*v11 <= v48)
                          goto LABEL_45;
                        v162 = *(_OWORD *)v49;
                        *(_OWORD *)v49 = *v143;
                        *v143 = v162;
                        v50 = v46;
                      }
                      else
                      {
                        v52 = *v44;
                        *v44 = *v143;
                        *v143 = v52;
                      }
                      v55 = (float *)a2 - 11;
                    }
                    v57 = *v50;
                    *v50 = *v55;
                    *v55 = v57;
                    v48 = *v46;
                    goto LABEL_45;
                  }
                  v39 = *v29;
                  *v29 = *(_OWORD *)v34;
                  *(_OWORD *)v34 = v39;
                  v40 = v31;
                }
                else
                {
                  if (v36 <= v33)
                  {
                    v42 = *v29;
                    *v29 = *(_OWORD *)v34;
                    *(_OWORD *)v34 = v42;
                    *(float *)&v42 = *v35;
                    *v35 = *v31;
                    *(_DWORD *)v31 = v42;
                    if (*v145 <= *(float *)&v42)
                      goto LABEL_35;
                    v160 = *(_OWORD *)v34;
                    *(_OWORD *)v34 = *v144;
                    *v144 = v160;
                    v35 = v31;
                  }
                  else
                  {
                    v37 = *v29;
                    *v29 = *v144;
                    *v144 = v37;
                  }
                  v40 = (float *)a2 - 6;
                }
                v43 = *v35;
                *v35 = *v40;
                *v40 = v43;
                goto LABEL_35;
              }
              v152 = *(_OWORD *)v12;
              *(_OWORD *)v12 = *(_OWORD *)v16;
              *(_OWORD *)v16 = v152;
              v21 = (int *)(v12 + 16);
              v25 = (int *)(v16 + 16);
            }
            else
            {
              if (v17 <= v19)
              {
                v155 = *(_OWORD *)v12;
                *(_OWORD *)v12 = *(_OWORD *)v16;
                *(_OWORD *)v16 = v155;
                v27 = *(float *)(v12 + 16);
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v16 + 16);
                *(float *)(v16 + 16) = v27;
                if (*v10 <= v27)
                  goto LABEL_22;
                v156 = *(_OWORD *)v16;
                *(_OWORD *)v16 = *v9;
                *v9 = v156;
                v21 = (int *)(v16 + 16);
              }
              else
              {
                v149 = *(_OWORD *)v12;
                *(_OWORD *)v12 = *v9;
                *v9 = v149;
                v21 = (int *)(v12 + 16);
              }
              v25 = (int *)a2 - 1;
            }
            v28 = *v21;
            *v21 = *v25;
            *v25 = v28;
            goto LABEL_22;
          }
          v22 = (float *)(v12 + 16);
          v23 = *(float *)(v12 + 16);
          v20 = (float *)(v16 + 16);
          if (v23 > *(float *)(v16 + 16))
          {
            if (v17 <= v23)
            {
              v158 = *(_OWORD *)v16;
              *(_OWORD *)v16 = *(_OWORD *)v12;
              *(_OWORD *)v12 = v158;
              v41 = *(float *)(v16 + 16);
              *(_DWORD *)(v16 + 16) = *(_DWORD *)(v12 + 16);
              *(float *)(v12 + 16) = v41;
              if (*v10 <= v41)
                goto LABEL_57;
              v159 = *(_OWORD *)v12;
              *(_OWORD *)v12 = *v9;
              *v9 = v159;
              v20 = (float *)(v12 + 16);
            }
            else
            {
              v150 = *(_OWORD *)v16;
              *(_OWORD *)v16 = *v9;
              *v9 = v150;
            }
            v22 = (float *)a2 - 1;
            goto LABEL_56;
          }
          if (v17 > v23)
          {
            v153 = *(_OWORD *)v12;
            *(_OWORD *)v12 = *v9;
            *v9 = v153;
            v26 = *(_DWORD *)(v12 + 16);
            *(float *)(v12 + 16) = *v10;
            *(_DWORD *)v10 = v26;
            if (*(float *)(v12 + 16) > *v20)
            {
              v154 = *(_OWORD *)v16;
              *(_OWORD *)v16 = *(_OWORD *)v12;
              *(_OWORD *)v12 = v154;
LABEL_56:
              v63 = *v20;
              *v20 = *v22;
              *v22 = v63;
            }
          }
LABEL_57:
          --a3;
          if ((a4 & 1) == 0)
          {
            v64 = *(float *)(v12 + 16);
            if (*(float *)(v12 - 4) > v64)
              goto LABEL_60;
            v147 = *(_OWORD *)v12;
            result = *(float *)(v12 + 16);
            if (result <= *v10)
            {
              v81 = v12 + 20;
              do
              {
                v12 = v81;
                if (v81 >= (unint64_t)a2)
                  break;
                v82 = *(float *)(v81 + 16);
                v81 += 20;
              }
              while (result <= v82);
            }
            else
            {
              v79 = v12;
              do
              {
                v12 = v79 + 20;
                v80 = *(float *)(v79 + 36);
                v79 += 20;
              }
              while (result <= v80);
            }
            v83 = a2;
            if (v12 < (unint64_t)a2)
            {
              v84 = a2;
              do
              {
                v83 = (__int128 *)((char *)v84 - 20);
                v85 = *((float *)v84 - 1);
                v84 = (__int128 *)((char *)v84 - 20);
              }
              while (result > v85);
            }
            while (v12 < (unint64_t)v83)
            {
              v170 = *(_OWORD *)v12;
              *(_OWORD *)v12 = *v83;
              *v83 = v170;
              v86 = *(_DWORD *)(v12 + 16);
              *(_DWORD *)(v12 + 16) = *((_DWORD *)v83 + 4);
              *((_DWORD *)v83 + 4) = v86;
              do
              {
                v87 = *(float *)(v12 + 36);
                v12 += 20;
              }
              while (result <= v87);
              do
              {
                v88 = *((float *)v83 - 1);
                v83 = (__int128 *)((char *)v83 - 20);
              }
              while (result > v88);
            }
            v89 = (__int128 *)(v12 - 20);
            if ((_OWORD *)(v12 - 20) != a1)
            {
              *a1 = *v89;
              *((_DWORD *)a1 + 4) = *(_DWORD *)(v12 - 4);
            }
            a4 = 0;
            *v89 = v147;
            *(float *)(v12 - 4) = result;
            continue;
          }
          v64 = *(float *)(v12 + 16);
LABEL_60:
          v65 = 0;
          v146 = *(_OWORD *)v12;
          do
          {
            v66 = *(float *)(v12 + v65 + 36);
            v65 += 20;
          }
          while (v66 > v64);
          v67 = v12 + v65;
          v68 = a2;
          if (v65 == 20)
          {
            v71 = a2;
            while (v67 < (unint64_t)v71)
            {
              v69 = (__int128 *)((char *)v71 - 20);
              v72 = *((float *)v71 - 1);
              v71 = (__int128 *)((char *)v71 - 20);
              if (v72 > v64)
                goto LABEL_68;
            }
            v69 = v71;
            v12 = v67;
          }
          else
          {
            do
            {
              v69 = (__int128 *)((char *)v68 - 20);
              v70 = *((float *)v68 - 1);
              v68 = (__int128 *)((char *)v68 - 20);
            }
            while (v70 <= v64);
LABEL_68:
            v12 = v67;
            if (v67 < (unint64_t)v69)
            {
              v73 = (unint64_t)v69;
              do
              {
                v169 = *(_OWORD *)v12;
                *(_OWORD *)v12 = *(_OWORD *)v73;
                *(_OWORD *)v73 = v169;
                v74 = *(_DWORD *)(v12 + 16);
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v73 + 16);
                *(_DWORD *)(v73 + 16) = v74;
                do
                {
                  v75 = *(float *)(v12 + 36);
                  v12 += 20;
                }
                while (v75 > v64);
                do
                {
                  v76 = *(float *)(v73 - 4);
                  v73 -= 20;
                }
                while (v76 <= v64);
              }
              while (v12 < v73);
            }
          }
          v77 = (__int128 *)(v12 - 20);
          if ((_OWORD *)(v12 - 20) != a1)
          {
            *a1 = *v77;
            *((_DWORD *)a1 + 4) = *(_DWORD *)(v12 - 4);
          }
          *v77 = v146;
          *(float *)(v12 - 4) = v64;
          if (v67 < (unint64_t)v69)
            goto LABEL_79;
          v78 = sub_2238F0E8C(a1, (__int128 *)(v12 - 20));
          if (!sub_2238F0E8C((__int128 *)v12, a2))
          {
            if (v78)
              continue;
LABEL_79:
            sub_2238F001C(a1, v12 - 20, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__int128 *)(v12 - 20);
          if (v78)
            return result;
          goto LABEL_1;
        }
        if ((__int128 *)v12 != a2)
        {
          v114 = (unint64_t)(v14 - 2) >> 1;
          v115 = v114;
          do
          {
            if (v114 >= v115)
            {
              v117 = (2 * v115) | 1;
              v118 = v12 + 20 * v117;
              if (2 * v115 + 2 < v14 && *(float *)(v118 + 16) > *(float *)(v118 + 36))
              {
                v118 += 20;
                v117 = 2 * v115 + 2;
              }
              v119 = v12 + 20 * v115;
              v120 = *(float *)(v119 + 16);
              if (*(float *)(v118 + 16) <= v120)
              {
                v175 = *(_OWORD *)v119;
                do
                {
                  v121 = v119;
                  v119 = v118;
                  *(_OWORD *)v121 = *(_OWORD *)v118;
                  *(_DWORD *)(v121 + 16) = *(_DWORD *)(v118 + 16);
                  if (v114 < v117)
                    break;
                  v122 = 2 * v117;
                  v117 = (2 * v117) | 1;
                  v118 = v12 + 20 * v117;
                  v123 = v122 + 2;
                  if (v123 < v14 && *(float *)(v118 + 16) > *(float *)(v118 + 36))
                  {
                    v118 += 20;
                    v117 = v123;
                  }
                }
                while (*(float *)(v118 + 16) <= v120);
                *(_OWORD *)v119 = v175;
                *(float *)(v119 + 16) = v120;
              }
            }
            v116 = v115-- <= 0;
          }
          while (!v116);
          v124 = v13 / 0x14uLL;
          do
          {
            v126 = 0;
            v127 = a2;
            v148 = *(_OWORD *)v12;
            result = *(float *)(v12 + 16);
            v128 = v12;
            do
            {
              v129 = v128;
              v128 += 20 * v126 + 20;
              v130 = 2 * v126;
              v126 = (2 * v126) | 1;
              v131 = v130 + 2;
              if (v131 < v124 && *(float *)(v128 + 16) > *(float *)(v128 + 36))
              {
                v128 += 20;
                v126 = v131;
              }
              *(_OWORD *)v129 = *(_OWORD *)v128;
              *(_DWORD *)(v129 + 16) = *(_DWORD *)(v128 + 16);
            }
            while (v126 <= (uint64_t)((unint64_t)(v124 - 2) >> 1));
            a2 = (__int128 *)((char *)a2 - 20);
            if ((__int128 *)v128 == (__int128 *)((char *)v127 - 20))
            {
              v125 = v148;
            }
            else
            {
              *(_OWORD *)v128 = *a2;
              *(_DWORD *)(v128 + 16) = *((_DWORD *)v127 - 1);
              *a2 = v148;
              *((float *)v127 - 1) = result;
              v132 = v128 - v12 + 20;
              if (v132 < 21)
                goto LABEL_148;
              v133 = (v132 / 0x14uLL - 2) >> 1;
              v134 = v12 + 20 * v133;
              result = *(float *)(v128 + 16);
              if (*(float *)(v134 + 16) <= result)
                goto LABEL_148;
              v176 = *(_OWORD *)v128;
              do
              {
                v135 = v128;
                v128 = v134;
                *(_OWORD *)v135 = *(_OWORD *)v134;
                *(_DWORD *)(v135 + 16) = *(_DWORD *)(v134 + 16);
                if (!v133)
                  break;
                v133 = (v133 - 1) >> 1;
                v134 = v12 + 20 * v133;
              }
              while (*(float *)(v134 + 16) > result);
              v125 = v176;
            }
            *(_OWORD *)v128 = v125;
            *(float *)(v128 + 16) = result;
LABEL_148:
            v116 = v124-- <= 2;
          }
          while (!v116);
        }
        return result;
    }
  }
}

  v9 = (unint64_t)a1;
  while (2)
  {
    a1 = (float *)v9;
    v10 = (uint64_t)a2 - v9;
    v11 = (uint64_t)((uint64_t)a2 - v9) >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return a5.n128_f32[0];
      case 2:
        a5.n128_u32[0] = *((_DWORD *)a2 - 1);
        if (a5.n128_f32[0] < *(float *)(v9 + 4))
        {
          v72 = *(_QWORD *)v9;
          goto LABEL_105;
        }
        return a5.n128_f32[0];
      case 3:
        a5.n128_u32[0] = *(_DWORD *)(v9 + 12);
        v73 = *((float *)a2 - 1);
        if (a5.n128_f32[0] >= *(float *)(v9 + 4))
        {
          if (v73 < a5.n128_f32[0])
          {
            v111 = *(_QWORD *)(v9 + 8);
            *(_QWORD *)(v9 + 8) = *(a2 - 1);
            *(a2 - 1) = v111;
            a5.n128_u32[0] = *(_DWORD *)(v9 + 12);
            if (a5.n128_f32[0] < *(float *)(v9 + 4))
            {
              a5 = (__n128)vextq_s8(*(int8x16_t *)v9, *(int8x16_t *)v9, 8uLL);
              *(__n128 *)v9 = a5;
            }
          }
        }
        else
        {
          v72 = *(_QWORD *)v9;
          if (v73 < a5.n128_f32[0])
          {
LABEL_105:
            *(_QWORD *)v9 = *(a2 - 1);
LABEL_106:
            *(a2 - 1) = v72;
            return a5.n128_f32[0];
          }
          *(_QWORD *)v9 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v9 + 8) = v72;
          a5.n128_u32[0] = *((_DWORD *)a2 - 1);
          if (a5.n128_f32[0] < *((float *)&v72 + 1))
          {
            *(_QWORD *)(v9 + 8) = *(a2 - 1);
            goto LABEL_106;
          }
        }
        return a5.n128_f32[0];
      case 4:
        sub_2239A4F60((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (float *)a2 - 2);
        return a5.n128_f32[0];
      case 5:
        sub_2239A4F60((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (float *)(v9 + 24));
        a5.n128_u32[0] = *((_DWORD *)a2 - 1);
        if (a5.n128_f32[0] < *(float *)(v9 + 28))
        {
          v74 = *(_QWORD *)(v9 + 24);
          *(_QWORD *)(v9 + 24) = *(a2 - 1);
          *(a2 - 1) = v74;
          a5.n128_u32[0] = *(_DWORD *)(v9 + 28);
          if (a5.n128_f32[0] < *(float *)(v9 + 20))
          {
            v76 = *(_QWORD *)(v9 + 16);
            v75 = *(_QWORD *)(v9 + 24);
            *(_QWORD *)(v9 + 16) = v75;
            *(_QWORD *)(v9 + 24) = v76;
            a5.n128_u32[0] = HIDWORD(v75);
            if (*(float *)(v9 + 12) > *((float *)&v75 + 1))
            {
              v77 = *(_QWORD *)(v9 + 8);
              *(_QWORD *)(v9 + 8) = v75;
              *(_QWORD *)(v9 + 16) = v77;
              if (*(float *)(v9 + 4) > *((float *)&v75 + 1))
              {
                v78 = *(_QWORD *)v9;
                *(_QWORD *)v9 = v75;
                *(_QWORD *)(v9 + 8) = v78;
              }
            }
          }
        }
        return a5.n128_f32[0];
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if ((uint64_t *)v9 != a2)
            {
              v89 = (unint64_t)(v11 - 2) >> 1;
              v90 = v89;
              do
              {
                if (v89 >= v90)
                {
                  v92 = (2 * v90) | 1;
                  v93 = v9 + 8 * v92;
                  if (2 * v90 + 2 < v11 && *(float *)(v93 + 4) < *(float *)(v93 + 12))
                  {
                    v93 += 8;
                    v92 = 2 * v90 + 2;
                  }
                  v94 = (_DWORD *)(v9 + 8 * v90);
                  a5.n128_u32[0] = v94[1];
                  if (*(float *)(v93 + 4) >= a5.n128_f32[0])
                  {
                    v95 = *v94;
                    do
                    {
                      v96 = v94;
                      v94 = (_DWORD *)v93;
                      *v96 = *(_QWORD *)v93;
                      if (v89 < v92)
                        break;
                      v97 = 2 * v92;
                      v92 = (2 * v92) | 1;
                      v93 = v9 + 8 * v92;
                      v98 = v97 + 2;
                      if (v98 < v11 && *(float *)(v93 + 4) < *(float *)(v93 + 12))
                      {
                        v93 += 8;
                        v92 = v98;
                      }
                    }
                    while (*(float *)(v93 + 4) >= a5.n128_f32[0]);
                    *v94 = v95;
                    v94[1] = a5.n128_u32[0];
                  }
                }
                v91 = v90-- <= 0;
              }
              while (!v91);
              v99 = (unint64_t)v10 >> 3;
              do
              {
                v100 = 0;
                v101 = *(_QWORD *)v9;
                v102 = v9;
                do
                {
                  v103 = (_QWORD *)v102;
                  v102 += 8 * v100 + 8;
                  v104 = 2 * v100;
                  v100 = (2 * v100) | 1;
                  v105 = v104 + 2;
                  if (v105 < v99)
                  {
                    a5.n128_u32[0] = *(_DWORD *)(v102 + 4);
                    if (a5.n128_f32[0] < *(float *)(v102 + 12))
                    {
                      v102 += 8;
                      v100 = v105;
                    }
                  }
                  *v103 = *(_QWORD *)v102;
                }
                while (v100 <= (uint64_t)((unint64_t)(v99 - 2) >> 1));
                if ((uint64_t *)v102 == --a2)
                {
                  *(_QWORD *)v102 = v101;
                }
                else
                {
                  *(_QWORD *)v102 = *a2;
                  *a2 = v101;
                  v106 = v102 - v9 + 8;
                  if (v106 >= 9)
                  {
                    v107 = (((unint64_t)v106 >> 3) - 2) >> 1;
                    v108 = v9 + 8 * v107;
                    a5.n128_u32[0] = *(_DWORD *)(v102 + 4);
                    if (*(float *)(v108 + 4) < a5.n128_f32[0])
                    {
                      v109 = *(_DWORD *)v102;
                      do
                      {
                        v110 = (_QWORD *)v102;
                        v102 = v108;
                        *v110 = *(_QWORD *)v108;
                        if (!v107)
                          break;
                        v107 = (v107 - 1) >> 1;
                        v108 = v9 + 8 * v107;
                      }
                      while (*(float *)(v108 + 4) < a5.n128_f32[0]);
                      *(_DWORD *)v102 = v109;
                      *(_DWORD *)(v102 + 4) = a5.n128_u32[0];
                    }
                  }
                }
                v91 = v99-- <= 2;
              }
              while (!v91);
            }
            return a5.n128_f32[0];
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = v9 + 8 * ((unint64_t)v11 >> 1);
          v14 = *((float *)a2 - 1);
          if ((unint64_t)v10 < 0x401)
          {
            v17 = *(float *)(v9 + 4);
            if (v17 >= *(float *)(v13 + 4))
            {
              if (v14 < v17)
              {
                v21 = *(_QWORD *)v9;
                *(_QWORD *)v9 = *(a2 - 1);
                *(a2 - 1) = v21;
                if (*(float *)(v9 + 4) < *(float *)(v13 + 4))
                {
                  v22 = *(_QWORD *)v13;
                  *(_QWORD *)v13 = *(_QWORD *)v9;
                  *(_QWORD *)v9 = v22;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_56;
                }
              }
              goto LABEL_31;
            }
            v18 = *(_QWORD *)v13;
            if (v14 >= v17)
            {
              *(_QWORD *)v13 = *(_QWORD *)v9;
              *(_QWORD *)v9 = v18;
              if (*((float *)a2 - 1) >= *((float *)&v18 + 1))
                goto LABEL_31;
              *(_QWORD *)v9 = *(a2 - 1);
            }
            else
            {
              *(_QWORD *)v13 = *(a2 - 1);
            }
            *(a2 - 1) = v18;
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
            goto LABEL_56;
          }
          v15 = *(float *)(v13 + 4);
          if (v15 >= *(float *)(v9 + 4))
          {
            if (v14 < v15)
            {
              v19 = *(_QWORD *)v13;
              *(_QWORD *)v13 = *(a2 - 1);
              *(a2 - 1) = v19;
              if (*(float *)(v13 + 4) < *(float *)(v9 + 4))
              {
                v20 = *(_QWORD *)v9;
                *(_QWORD *)v9 = *(_QWORD *)v13;
                *(_QWORD *)v13 = v20;
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)v9;
            if (v14 >= v15)
            {
              *(_QWORD *)v9 = *(_QWORD *)v13;
              *(_QWORD *)v13 = v16;
              if (*((float *)a2 - 1) >= *((float *)&v16 + 1))
                goto LABEL_22;
              *(_QWORD *)v13 = *(a2 - 1);
            }
            else
            {
              *(_QWORD *)v9 = *(a2 - 1);
            }
            *(a2 - 1) = v16;
          }
LABEL_22:
          v23 = v9 + 8 * v12;
          v24 = v23 - 8;
          v25 = *(float *)(v23 - 4);
          v26 = *((float *)a2 - 3);
          if (v25 >= *(float *)(v9 + 12))
          {
            if (v26 < v25)
            {
              v28 = *(_QWORD *)v24;
              *(_QWORD *)v24 = *(a2 - 2);
              *(a2 - 2) = v28;
              if (*(float *)(v24 + 4) < *(float *)(v9 + 12))
              {
                v29 = *(_QWORD *)(v9 + 8);
                *(_QWORD *)(v9 + 8) = *(_QWORD *)v24;
                *(_QWORD *)v24 = v29;
              }
            }
          }
          else
          {
            v27 = *(_QWORD *)(v9 + 8);
            if (v26 >= v25)
            {
              *(_QWORD *)(v9 + 8) = *(_QWORD *)v24;
              *(_QWORD *)v24 = v27;
              if (*((float *)a2 - 3) >= *((float *)&v27 + 1))
                goto LABEL_36;
              *(_QWORD *)v24 = *(a2 - 2);
            }
            else
            {
              *(_QWORD *)(v9 + 8) = *(a2 - 2);
            }
            *(a2 - 2) = v27;
          }
LABEL_36:
          v31 = v9 + 8 * v12;
          v32 = v31 + 8;
          v33 = *(float *)(v31 + 12);
          v34 = *((float *)a2 - 5);
          if (v33 >= *(float *)(v9 + 20))
          {
            if (v34 < v33)
            {
              v36 = *(_QWORD *)v32;
              *(_QWORD *)v32 = *(a2 - 3);
              *(a2 - 3) = v36;
              if (*(float *)(v32 + 4) < *(float *)(v9 + 20))
              {
                v37 = *(_QWORD *)(v9 + 16);
                *(_QWORD *)(v9 + 16) = *(_QWORD *)v32;
                *(_QWORD *)v32 = v37;
              }
            }
          }
          else
          {
            v35 = *(_QWORD *)(v9 + 16);
            if (v34 >= v33)
            {
              *(_QWORD *)(v9 + 16) = *(_QWORD *)v32;
              *(_QWORD *)v32 = v35;
              if (*((float *)a2 - 5) >= *((float *)&v35 + 1))
                goto LABEL_45;
              *(_QWORD *)v32 = *(a2 - 3);
            }
            else
            {
              *(_QWORD *)(v9 + 16) = *(a2 - 3);
            }
            *(a2 - 3) = v35;
          }
LABEL_45:
          v38 = *(float *)(v13 + 4);
          v39 = *(float *)(v24 + 4);
          v40 = *(float *)(v32 + 4);
          if (v38 < v39)
          {
            v41 = *(_QWORD *)v24;
            if (v40 < v38)
            {
              *(_QWORD *)v24 = *(_QWORD *)v32;
              *(_QWORD *)v32 = v41;
              v42 = *(_QWORD *)v9;
              *(_QWORD *)v9 = *(_QWORD *)v13;
              *(_QWORD *)v13 = v42;
              --a3;
              if ((a4 & 1) != 0)
                goto LABEL_32;
              goto LABEL_56;
            }
            *(_QWORD *)v24 = *(_QWORD *)v13;
            *(_QWORD *)v13 = v41;
            if (v40 < *((float *)&v41 + 1))
            {
              v46 = *(_QWORD *)v32;
              *(_QWORD *)v13 = *(_QWORD *)v32;
              *(_QWORD *)v32 = v41;
              v41 = v46;
            }
            goto LABEL_55;
          }
          v41 = *(_QWORD *)v13;
          if (v40 >= v38)
          {
LABEL_55:
            v47 = *(_QWORD *)v9;
            *(_QWORD *)v9 = v41;
            *(_QWORD *)v13 = v47;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_56:
            a5.n128_u32[0] = *(_DWORD *)(v9 + 4);
            v30 = *(_DWORD *)v9;
            if (*(float *)(v9 - 4) < a5.n128_f32[0])
              goto LABEL_57;
            if (*((float *)a2 - 1) <= a5.n128_f32[0])
            {
              v64 = v9 + 8;
              do
              {
                v9 = v64;
                if (v64 >= (unint64_t)a2)
                  break;
                v65 = *(float *)(v64 + 4);
                v64 += 8;
              }
              while (v65 <= a5.n128_f32[0]);
            }
            else
            {
              v62 = v9;
              do
              {
                v9 = v62 + 8;
                v63 = *(float *)(v62 + 12);
                v62 += 8;
              }
              while (v63 <= a5.n128_f32[0]);
            }
            v66 = a2;
            if (v9 < (unint64_t)a2)
            {
              v67 = a2;
              do
              {
                v66 = v67 - 1;
                v68 = *((float *)v67-- - 1);
              }
              while (v68 > a5.n128_f32[0]);
            }
            while (v9 < (unint64_t)v66)
            {
              v69 = *(_QWORD *)v9;
              *(_QWORD *)v9 = *v66;
              *v66 = v69;
              do
              {
                v70 = *(float *)(v9 + 12);
                v9 += 8;
              }
              while (v70 <= a5.n128_f32[0]);
              do
                v71 = *((float *)v66-- - 1);
              while (v71 > a5.n128_f32[0]);
            }
            if ((float *)(v9 - 8) != a1)
              *(_QWORD *)a1 = *(_QWORD *)(v9 - 8);
            a4 = 0;
            *(_DWORD *)(v9 - 8) = v30;
            *(_DWORD *)(v9 - 4) = a5.n128_u32[0];
            continue;
          }
          v43 = *(_QWORD *)v32;
          *(_QWORD *)v13 = *(_QWORD *)v32;
          *(_QWORD *)v32 = v41;
          if (v39 > *((float *)&v43 + 1))
          {
            v44 = *(_QWORD *)v24;
            *(_QWORD *)v24 = v43;
            *(_QWORD *)v13 = v44;
            v45 = *(_QWORD *)v9;
            *(_QWORD *)v9 = v44;
            *(_QWORD *)v13 = v45;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
            goto LABEL_56;
          }
          v61 = *(_QWORD *)v9;
          *(_QWORD *)v9 = v43;
          *(_QWORD *)v13 = v61;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_56;
LABEL_32:
          v30 = *(_DWORD *)v9;
          a5.n128_u32[0] = *(_DWORD *)(v9 + 4);
LABEL_57:
          v48 = 0;
          do
          {
            v49 = *(float *)(v9 + v48 + 12);
            v48 += 8;
          }
          while (v49 < a5.n128_f32[0]);
          v50 = v9 + v48;
          v51 = a2;
          if (v48 == 8)
          {
            v54 = a2;
            while (v50 < (unint64_t)v54)
            {
              v52 = v54 - 1;
              v55 = *((float *)v54-- - 1);
              if (v55 < a5.n128_f32[0])
                goto LABEL_65;
            }
            v52 = v54;
            v9 = v50;
          }
          else
          {
            do
            {
              v52 = v51 - 1;
              v53 = *((float *)v51-- - 1);
            }
            while (v53 >= a5.n128_f32[0]);
LABEL_65:
            v9 = v50;
            if (v50 < (unint64_t)v52)
            {
              v56 = (float *)v52;
              do
              {
                v57 = *(_QWORD *)v9;
                *(_QWORD *)v9 = *(_QWORD *)v56;
                *(_QWORD *)v56 = v57;
                do
                {
                  v58 = *(float *)(v9 + 12);
                  v9 += 8;
                }
                while (v58 < a5.n128_f32[0]);
                do
                {
                  v59 = *(v56 - 1);
                  v56 -= 2;
                }
                while (v59 >= a5.n128_f32[0]);
              }
              while (v9 < (unint64_t)v56);
            }
          }
          if ((float *)(v9 - 8) != a1)
            *(_QWORD *)a1 = *(_QWORD *)(v9 - 8);
          *(_DWORD *)(v9 - 8) = v30;
          *(_DWORD *)(v9 - 4) = a5.n128_u32[0];
          if (v50 < (unint64_t)v52)
            goto LABEL_76;
          v60 = sub_2239A4C50(a1, (uint64_t *)(v9 - 8));
          if (!sub_2239A4C50((float *)v9, a2))
          {
            if (v60)
              continue;
LABEL_76:
            sub_2239A41F4(a1, v9 - 8, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (uint64_t *)(v9 - 8);
          if (v60)
            return a5.n128_f32[0];
          goto LABEL_1;
        }
        v79 = (uint64_t *)(v9 + 8);
        v81 = (uint64_t *)v9 == a2 || v79 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v81)
          {
            v82 = 0;
            v83 = (uint64_t *)v9;
            do
            {
              a5.n128_u32[0] = *((_DWORD *)v83 + 3);
              v85 = *((float *)v83 + 1);
              v83 = v79;
              if (a5.n128_f32[0] < v85)
              {
                v86 = *(_DWORD *)v79;
                v87 = v82;
                do
                {
                  *(_QWORD *)(v9 + v87 + 8) = *(_QWORD *)(v9 + v87);
                  if (!v87)
                  {
                    v84 = (_DWORD *)v9;
                    goto LABEL_123;
                  }
                  v88 = *(float *)(v9 + v87 - 4);
                  v87 -= 8;
                }
                while (v88 > a5.n128_f32[0]);
                v84 = (_DWORD *)(v9 + v87 + 8);
LABEL_123:
                *v84 = v86;
                v84[1] = a5.n128_u32[0];
              }
              v79 = v83 + 1;
              v82 += 8;
            }
            while (v83 + 1 != a2);
          }
        }
        else if (!v81)
        {
          do
          {
            a5.n128_f32[0] = a1[3];
            v112 = a1[1];
            a1 = (float *)v79;
            if (a5.n128_f32[0] < v112)
            {
              v113 = *(_DWORD *)v79;
              do
              {
                v114 = (float *)v79;
                v115 = *--v79;
                *(_QWORD *)v114 = v115;
              }
              while (*(v114 - 3) > a5.n128_f32[0]);
              *(_DWORD *)v79 = v113;
              *((_DWORD *)v79 + 1) = a5.n128_u32[0];
            }
            v79 = (uint64_t *)(a1 + 2);
          }
          while (a1 + 2 != (float *)a2);
        }
        return a5.n128_f32[0];
    }
  }
}

  v9 = (unint64_t)a1;
  while (2)
  {
    a1 = (float *)v9;
    v10 = (uint64_t)a2 - v9;
    v11 = (uint64_t)((uint64_t)a2 - v9) >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return a5.n128_f32[0];
      case 2:
        a5.n128_u32[0] = *((_DWORD *)a2 - 1);
        if (a5.n128_f32[0] > *(float *)(v9 + 4))
        {
          v72 = *(_QWORD *)v9;
          goto LABEL_105;
        }
        return a5.n128_f32[0];
      case 3:
        a5.n128_u32[0] = *(_DWORD *)(v9 + 12);
        v73 = *((float *)a2 - 1);
        if (a5.n128_f32[0] <= *(float *)(v9 + 4))
        {
          if (v73 > a5.n128_f32[0])
          {
            v111 = *(_QWORD *)(v9 + 8);
            *(_QWORD *)(v9 + 8) = *(a2 - 1);
            *(a2 - 1) = v111;
            a5.n128_u32[0] = *(_DWORD *)(v9 + 12);
            if (a5.n128_f32[0] > *(float *)(v9 + 4))
            {
              a5 = (__n128)vextq_s8(*(int8x16_t *)v9, *(int8x16_t *)v9, 8uLL);
              *(__n128 *)v9 = a5;
            }
          }
        }
        else
        {
          v72 = *(_QWORD *)v9;
          if (v73 > a5.n128_f32[0])
          {
LABEL_105:
            *(_QWORD *)v9 = *(a2 - 1);
LABEL_106:
            *(a2 - 1) = v72;
            return a5.n128_f32[0];
          }
          *(_QWORD *)v9 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v9 + 8) = v72;
          a5.n128_u32[0] = *((_DWORD *)a2 - 1);
          if (a5.n128_f32[0] > *((float *)&v72 + 1))
          {
            *(_QWORD *)(v9 + 8) = *(a2 - 1);
            goto LABEL_106;
          }
        }
        return a5.n128_f32[0];
      case 4:
        sub_2239AEE14((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (float *)a2 - 2);
        return a5.n128_f32[0];
      case 5:
        sub_2239AEE14((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (float *)(v9 + 24));
        a5.n128_u32[0] = *((_DWORD *)a2 - 1);
        if (a5.n128_f32[0] > *(float *)(v9 + 28))
        {
          v74 = *(_QWORD *)(v9 + 24);
          *(_QWORD *)(v9 + 24) = *(a2 - 1);
          *(a2 - 1) = v74;
          a5.n128_u32[0] = *(_DWORD *)(v9 + 28);
          if (a5.n128_f32[0] > *(float *)(v9 + 20))
          {
            v76 = *(_QWORD *)(v9 + 16);
            v75 = *(_QWORD *)(v9 + 24);
            *(_QWORD *)(v9 + 16) = v75;
            *(_QWORD *)(v9 + 24) = v76;
            a5.n128_u32[0] = HIDWORD(v75);
            if (*(float *)(v9 + 12) < *((float *)&v75 + 1))
            {
              v77 = *(_QWORD *)(v9 + 8);
              *(_QWORD *)(v9 + 8) = v75;
              *(_QWORD *)(v9 + 16) = v77;
              if (*(float *)(v9 + 4) < *((float *)&v75 + 1))
              {
                v78 = *(_QWORD *)v9;
                *(_QWORD *)v9 = v75;
                *(_QWORD *)(v9 + 8) = v78;
              }
            }
          }
        }
        return a5.n128_f32[0];
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if ((uint64_t *)v9 != a2)
            {
              v89 = (unint64_t)(v11 - 2) >> 1;
              v90 = v89;
              do
              {
                if (v89 >= v90)
                {
                  v92 = (2 * v90) | 1;
                  v93 = v9 + 8 * v92;
                  if (2 * v90 + 2 < v11 && *(float *)(v93 + 4) > *(float *)(v93 + 12))
                  {
                    v93 += 8;
                    v92 = 2 * v90 + 2;
                  }
                  v94 = (_DWORD *)(v9 + 8 * v90);
                  a5.n128_u32[0] = v94[1];
                  if (*(float *)(v93 + 4) <= a5.n128_f32[0])
                  {
                    v95 = *v94;
                    do
                    {
                      v96 = v94;
                      v94 = (_DWORD *)v93;
                      *v96 = *(_QWORD *)v93;
                      if (v89 < v92)
                        break;
                      v97 = 2 * v92;
                      v92 = (2 * v92) | 1;
                      v93 = v9 + 8 * v92;
                      v98 = v97 + 2;
                      if (v98 < v11 && *(float *)(v93 + 4) > *(float *)(v93 + 12))
                      {
                        v93 += 8;
                        v92 = v98;
                      }
                    }
                    while (*(float *)(v93 + 4) <= a5.n128_f32[0]);
                    *v94 = v95;
                    v94[1] = a5.n128_u32[0];
                  }
                }
                v91 = v90-- <= 0;
              }
              while (!v91);
              v99 = (unint64_t)v10 >> 3;
              do
              {
                v100 = 0;
                v101 = *(_QWORD *)v9;
                v102 = v9;
                do
                {
                  v103 = (_QWORD *)v102;
                  v102 += 8 * v100 + 8;
                  v104 = 2 * v100;
                  v100 = (2 * v100) | 1;
                  v105 = v104 + 2;
                  if (v105 < v99)
                  {
                    a5.n128_u32[0] = *(_DWORD *)(v102 + 4);
                    if (a5.n128_f32[0] > *(float *)(v102 + 12))
                    {
                      v102 += 8;
                      v100 = v105;
                    }
                  }
                  *v103 = *(_QWORD *)v102;
                }
                while (v100 <= (uint64_t)((unint64_t)(v99 - 2) >> 1));
                if ((uint64_t *)v102 == --a2)
                {
                  *(_QWORD *)v102 = v101;
                }
                else
                {
                  *(_QWORD *)v102 = *a2;
                  *a2 = v101;
                  v106 = v102 - v9 + 8;
                  if (v106 >= 9)
                  {
                    v107 = (((unint64_t)v106 >> 3) - 2) >> 1;
                    v108 = v9 + 8 * v107;
                    a5.n128_u32[0] = *(_DWORD *)(v102 + 4);
                    if (*(float *)(v108 + 4) > a5.n128_f32[0])
                    {
                      v109 = *(_DWORD *)v102;
                      do
                      {
                        v110 = (_QWORD *)v102;
                        v102 = v108;
                        *v110 = *(_QWORD *)v108;
                        if (!v107)
                          break;
                        v107 = (v107 - 1) >> 1;
                        v108 = v9 + 8 * v107;
                      }
                      while (*(float *)(v108 + 4) > a5.n128_f32[0]);
                      *(_DWORD *)v102 = v109;
                      *(_DWORD *)(v102 + 4) = a5.n128_u32[0];
                    }
                  }
                }
                v91 = v99-- <= 2;
              }
              while (!v91);
            }
            return a5.n128_f32[0];
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = v9 + 8 * ((unint64_t)v11 >> 1);
          v14 = *((float *)a2 - 1);
          if ((unint64_t)v10 < 0x401)
          {
            v17 = *(float *)(v9 + 4);
            if (v17 <= *(float *)(v13 + 4))
            {
              if (v14 > v17)
              {
                v21 = *(_QWORD *)v9;
                *(_QWORD *)v9 = *(a2 - 1);
                *(a2 - 1) = v21;
                if (*(float *)(v9 + 4) > *(float *)(v13 + 4))
                {
                  v22 = *(_QWORD *)v13;
                  *(_QWORD *)v13 = *(_QWORD *)v9;
                  *(_QWORD *)v9 = v22;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_56;
                }
              }
              goto LABEL_31;
            }
            v18 = *(_QWORD *)v13;
            if (v14 <= v17)
            {
              *(_QWORD *)v13 = *(_QWORD *)v9;
              *(_QWORD *)v9 = v18;
              if (*((float *)a2 - 1) <= *((float *)&v18 + 1))
                goto LABEL_31;
              *(_QWORD *)v9 = *(a2 - 1);
            }
            else
            {
              *(_QWORD *)v13 = *(a2 - 1);
            }
            *(a2 - 1) = v18;
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
            goto LABEL_56;
          }
          v15 = *(float *)(v13 + 4);
          if (v15 <= *(float *)(v9 + 4))
          {
            if (v14 > v15)
            {
              v19 = *(_QWORD *)v13;
              *(_QWORD *)v13 = *(a2 - 1);
              *(a2 - 1) = v19;
              if (*(float *)(v13 + 4) > *(float *)(v9 + 4))
              {
                v20 = *(_QWORD *)v9;
                *(_QWORD *)v9 = *(_QWORD *)v13;
                *(_QWORD *)v13 = v20;
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)v9;
            if (v14 <= v15)
            {
              *(_QWORD *)v9 = *(_QWORD *)v13;
              *(_QWORD *)v13 = v16;
              if (*((float *)a2 - 1) <= *((float *)&v16 + 1))
                goto LABEL_22;
              *(_QWORD *)v13 = *(a2 - 1);
            }
            else
            {
              *(_QWORD *)v9 = *(a2 - 1);
            }
            *(a2 - 1) = v16;
          }
LABEL_22:
          v23 = v9 + 8 * v12;
          v24 = v23 - 8;
          v25 = *(float *)(v23 - 4);
          v26 = *((float *)a2 - 3);
          if (v25 <= *(float *)(v9 + 12))
          {
            if (v26 > v25)
            {
              v28 = *(_QWORD *)v24;
              *(_QWORD *)v24 = *(a2 - 2);
              *(a2 - 2) = v28;
              if (*(float *)(v24 + 4) > *(float *)(v9 + 12))
              {
                v29 = *(_QWORD *)(v9 + 8);
                *(_QWORD *)(v9 + 8) = *(_QWORD *)v24;
                *(_QWORD *)v24 = v29;
              }
            }
          }
          else
          {
            v27 = *(_QWORD *)(v9 + 8);
            if (v26 <= v25)
            {
              *(_QWORD *)(v9 + 8) = *(_QWORD *)v24;
              *(_QWORD *)v24 = v27;
              if (*((float *)a2 - 3) <= *((float *)&v27 + 1))
                goto LABEL_36;
              *(_QWORD *)v24 = *(a2 - 2);
            }
            else
            {
              *(_QWORD *)(v9 + 8) = *(a2 - 2);
            }
            *(a2 - 2) = v27;
          }
LABEL_36:
          v31 = v9 + 8 * v12;
          v32 = v31 + 8;
          v33 = *(float *)(v31 + 12);
          v34 = *((float *)a2 - 5);
          if (v33 <= *(float *)(v9 + 20))
          {
            if (v34 > v33)
            {
              v36 = *(_QWORD *)v32;
              *(_QWORD *)v32 = *(a2 - 3);
              *(a2 - 3) = v36;
              if (*(float *)(v32 + 4) > *(float *)(v9 + 20))
              {
                v37 = *(_QWORD *)(v9 + 16);
                *(_QWORD *)(v9 + 16) = *(_QWORD *)v32;
                *(_QWORD *)v32 = v37;
              }
            }
          }
          else
          {
            v35 = *(_QWORD *)(v9 + 16);
            if (v34 <= v33)
            {
              *(_QWORD *)(v9 + 16) = *(_QWORD *)v32;
              *(_QWORD *)v32 = v35;
              if (*((float *)a2 - 5) <= *((float *)&v35 + 1))
                goto LABEL_45;
              *(_QWORD *)v32 = *(a2 - 3);
            }
            else
            {
              *(_QWORD *)(v9 + 16) = *(a2 - 3);
            }
            *(a2 - 3) = v35;
          }
LABEL_45:
          v38 = *(float *)(v13 + 4);
          v39 = *(float *)(v24 + 4);
          v40 = *(float *)(v32 + 4);
          if (v38 > v39)
          {
            v41 = *(_QWORD *)v24;
            if (v40 > v38)
            {
              *(_QWORD *)v24 = *(_QWORD *)v32;
              *(_QWORD *)v32 = v41;
              v42 = *(_QWORD *)v9;
              *(_QWORD *)v9 = *(_QWORD *)v13;
              *(_QWORD *)v13 = v42;
              --a3;
              if ((a4 & 1) != 0)
                goto LABEL_32;
              goto LABEL_56;
            }
            *(_QWORD *)v24 = *(_QWORD *)v13;
            *(_QWORD *)v13 = v41;
            if (v40 > *((float *)&v41 + 1))
            {
              v46 = *(_QWORD *)v32;
              *(_QWORD *)v13 = *(_QWORD *)v32;
              *(_QWORD *)v32 = v41;
              v41 = v46;
            }
            goto LABEL_55;
          }
          v41 = *(_QWORD *)v13;
          if (v40 <= v38)
          {
LABEL_55:
            v47 = *(_QWORD *)v9;
            *(_QWORD *)v9 = v41;
            *(_QWORD *)v13 = v47;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_56:
            a5.n128_u32[0] = *(_DWORD *)(v9 + 4);
            v30 = *(_DWORD *)v9;
            if (*(float *)(v9 - 4) > a5.n128_f32[0])
              goto LABEL_57;
            if (*((float *)a2 - 1) >= a5.n128_f32[0])
            {
              v64 = v9 + 8;
              do
              {
                v9 = v64;
                if (v64 >= (unint64_t)a2)
                  break;
                v65 = *(float *)(v64 + 4);
                v64 += 8;
              }
              while (v65 >= a5.n128_f32[0]);
            }
            else
            {
              v62 = v9;
              do
              {
                v9 = v62 + 8;
                v63 = *(float *)(v62 + 12);
                v62 += 8;
              }
              while (v63 >= a5.n128_f32[0]);
            }
            v66 = a2;
            if (v9 < (unint64_t)a2)
            {
              v67 = a2;
              do
              {
                v66 = v67 - 1;
                v68 = *((float *)v67-- - 1);
              }
              while (v68 < a5.n128_f32[0]);
            }
            while (v9 < (unint64_t)v66)
            {
              v69 = *(_QWORD *)v9;
              *(_QWORD *)v9 = *v66;
              *v66 = v69;
              do
              {
                v70 = *(float *)(v9 + 12);
                v9 += 8;
              }
              while (v70 >= a5.n128_f32[0]);
              do
                v71 = *((float *)v66-- - 1);
              while (v71 < a5.n128_f32[0]);
            }
            if ((float *)(v9 - 8) != a1)
              *(_QWORD *)a1 = *(_QWORD *)(v9 - 8);
            a4 = 0;
            *(_DWORD *)(v9 - 8) = v30;
            *(_DWORD *)(v9 - 4) = a5.n128_u32[0];
            continue;
          }
          v43 = *(_QWORD *)v32;
          *(_QWORD *)v13 = *(_QWORD *)v32;
          *(_QWORD *)v32 = v41;
          if (v39 < *((float *)&v43 + 1))
          {
            v44 = *(_QWORD *)v24;
            *(_QWORD *)v24 = v43;
            *(_QWORD *)v13 = v44;
            v45 = *(_QWORD *)v9;
            *(_QWORD *)v9 = v44;
            *(_QWORD *)v13 = v45;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
            goto LABEL_56;
          }
          v61 = *(_QWORD *)v9;
          *(_QWORD *)v9 = v43;
          *(_QWORD *)v13 = v61;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_56;
LABEL_32:
          v30 = *(_DWORD *)v9;
          a5.n128_u32[0] = *(_DWORD *)(v9 + 4);
LABEL_57:
          v48 = 0;
          do
          {
            v49 = *(float *)(v9 + v48 + 12);
            v48 += 8;
          }
          while (v49 > a5.n128_f32[0]);
          v50 = v9 + v48;
          v51 = a2;
          if (v48 == 8)
          {
            v54 = a2;
            while (v50 < (unint64_t)v54)
            {
              v52 = v54 - 1;
              v55 = *((float *)v54-- - 1);
              if (v55 > a5.n128_f32[0])
                goto LABEL_65;
            }
            v52 = v54;
            v9 = v50;
          }
          else
          {
            do
            {
              v52 = v51 - 1;
              v53 = *((float *)v51-- - 1);
            }
            while (v53 <= a5.n128_f32[0]);
LABEL_65:
            v9 = v50;
            if (v50 < (unint64_t)v52)
            {
              v56 = (float *)v52;
              do
              {
                v57 = *(_QWORD *)v9;
                *(_QWORD *)v9 = *(_QWORD *)v56;
                *(_QWORD *)v56 = v57;
                do
                {
                  v58 = *(float *)(v9 + 12);
                  v9 += 8;
                }
                while (v58 > a5.n128_f32[0]);
                do
                {
                  v59 = *(v56 - 1);
                  v56 -= 2;
                }
                while (v59 <= a5.n128_f32[0]);
              }
              while (v9 < (unint64_t)v56);
            }
          }
          if ((float *)(v9 - 8) != a1)
            *(_QWORD *)a1 = *(_QWORD *)(v9 - 8);
          *(_DWORD *)(v9 - 8) = v30;
          *(_DWORD *)(v9 - 4) = a5.n128_u32[0];
          if (v50 < (unint64_t)v52)
            goto LABEL_76;
          v60 = sub_2239AEB04(a1, (uint64_t *)(v9 - 8));
          if (!sub_2239AEB04((float *)v9, a2))
          {
            if (v60)
              continue;
LABEL_76:
            sub_2239AE0A8(a1, v9 - 8, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (uint64_t *)(v9 - 8);
          if (v60)
            return a5.n128_f32[0];
          goto LABEL_1;
        }
        v79 = (uint64_t *)(v9 + 8);
        v81 = (uint64_t *)v9 == a2 || v79 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v81)
          {
            v82 = 0;
            v83 = (uint64_t *)v9;
            do
            {
              a5.n128_u32[0] = *((_DWORD *)v83 + 3);
              v85 = *((float *)v83 + 1);
              v83 = v79;
              if (a5.n128_f32[0] > v85)
              {
                v86 = *(_DWORD *)v79;
                v87 = v82;
                do
                {
                  *(_QWORD *)(v9 + v87 + 8) = *(_QWORD *)(v9 + v87);
                  if (!v87)
                  {
                    v84 = (_DWORD *)v9;
                    goto LABEL_123;
                  }
                  v88 = *(float *)(v9 + v87 - 4);
                  v87 -= 8;
                }
                while (v88 < a5.n128_f32[0]);
                v84 = (_DWORD *)(v9 + v87 + 8);
LABEL_123:
                *v84 = v86;
                v84[1] = a5.n128_u32[0];
              }
              v79 = v83 + 1;
              v82 += 8;
            }
            while (v83 + 1 != a2);
          }
        }
        else if (!v81)
        {
          do
          {
            a5.n128_f32[0] = a1[3];
            v112 = a1[1];
            a1 = (float *)v79;
            if (a5.n128_f32[0] > v112)
            {
              v113 = *(_DWORD *)v79;
              do
              {
                v114 = (float *)v79;
                v115 = *--v79;
                *(_QWORD *)v114 = v115;
              }
              while (*(v114 - 3) < a5.n128_f32[0]);
              *(_DWORD *)v79 = v113;
              *((_DWORD *)v79 + 1) = a5.n128_u32[0];
            }
            v79 = (uint64_t *)(a1 + 2);
          }
          while (a1 + 2 != (float *)a2);
        }
        return a5.n128_f32[0];
    }
  }
}

  v9 = (unint64_t)a1;
  while (2)
  {
    a1 = (float *)v9;
    v10 = (uint64_t)a2 - v9;
    v11 = (uint64_t)((uint64_t)a2 - v9) >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return a5.n128_f32[0];
      case 2:
        a5.n128_u32[0] = *((_DWORD *)a2 - 1);
        if (a5.n128_f32[0] > *(float *)(v9 + 4))
        {
          v72 = *(_QWORD *)v9;
          goto LABEL_105;
        }
        return a5.n128_f32[0];
      case 3:
        a5.n128_u32[0] = *(_DWORD *)(v9 + 12);
        v73 = *((float *)a2 - 1);
        if (a5.n128_f32[0] <= *(float *)(v9 + 4))
        {
          if (v73 > a5.n128_f32[0])
          {
            v111 = *(_QWORD *)(v9 + 8);
            *(_QWORD *)(v9 + 8) = *(a2 - 1);
            *(a2 - 1) = v111;
            a5.n128_u32[0] = *(_DWORD *)(v9 + 12);
            if (a5.n128_f32[0] > *(float *)(v9 + 4))
            {
              a5 = (__n128)vextq_s8(*(int8x16_t *)v9, *(int8x16_t *)v9, 8uLL);
              *(__n128 *)v9 = a5;
            }
          }
        }
        else
        {
          v72 = *(_QWORD *)v9;
          if (v73 > a5.n128_f32[0])
          {
LABEL_105:
            *(_QWORD *)v9 = *(a2 - 1);
LABEL_106:
            *(a2 - 1) = v72;
            return a5.n128_f32[0];
          }
          *(_QWORD *)v9 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v9 + 8) = v72;
          a5.n128_u32[0] = *((_DWORD *)a2 - 1);
          if (a5.n128_f32[0] > *((float *)&v72 + 1))
          {
            *(_QWORD *)(v9 + 8) = *(a2 - 1);
            goto LABEL_106;
          }
        }
        return a5.n128_f32[0];
      case 4:
        sub_2239AEE14((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (float *)a2 - 2);
        return a5.n128_f32[0];
      case 5:
        sub_2239AEE14((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (float *)(v9 + 24));
        a5.n128_u32[0] = *((_DWORD *)a2 - 1);
        if (a5.n128_f32[0] > *(float *)(v9 + 28))
        {
          v74 = *(_QWORD *)(v9 + 24);
          *(_QWORD *)(v9 + 24) = *(a2 - 1);
          *(a2 - 1) = v74;
          a5.n128_u32[0] = *(_DWORD *)(v9 + 28);
          if (a5.n128_f32[0] > *(float *)(v9 + 20))
          {
            v76 = *(_QWORD *)(v9 + 16);
            v75 = *(_QWORD *)(v9 + 24);
            *(_QWORD *)(v9 + 16) = v75;
            *(_QWORD *)(v9 + 24) = v76;
            a5.n128_u32[0] = HIDWORD(v75);
            if (*(float *)(v9 + 12) < *((float *)&v75 + 1))
            {
              v77 = *(_QWORD *)(v9 + 8);
              *(_QWORD *)(v9 + 8) = v75;
              *(_QWORD *)(v9 + 16) = v77;
              if (*(float *)(v9 + 4) < *((float *)&v75 + 1))
              {
                v78 = *(_QWORD *)v9;
                *(_QWORD *)v9 = v75;
                *(_QWORD *)(v9 + 8) = v78;
              }
            }
          }
        }
        return a5.n128_f32[0];
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if ((uint64_t *)v9 != a2)
            {
              v89 = (unint64_t)(v11 - 2) >> 1;
              v90 = v89;
              do
              {
                if (v89 >= v90)
                {
                  v92 = (2 * v90) | 1;
                  v93 = v9 + 8 * v92;
                  if (2 * v90 + 2 < v11 && *(float *)(v93 + 4) > *(float *)(v93 + 12))
                  {
                    v93 += 8;
                    v92 = 2 * v90 + 2;
                  }
                  v94 = (_DWORD *)(v9 + 8 * v90);
                  a5.n128_u32[0] = v94[1];
                  if (*(float *)(v93 + 4) <= a5.n128_f32[0])
                  {
                    v95 = *v94;
                    do
                    {
                      v96 = v94;
                      v94 = (_DWORD *)v93;
                      *v96 = *(_QWORD *)v93;
                      if (v89 < v92)
                        break;
                      v97 = 2 * v92;
                      v92 = (2 * v92) | 1;
                      v93 = v9 + 8 * v92;
                      v98 = v97 + 2;
                      if (v98 < v11 && *(float *)(v93 + 4) > *(float *)(v93 + 12))
                      {
                        v93 += 8;
                        v92 = v98;
                      }
                    }
                    while (*(float *)(v93 + 4) <= a5.n128_f32[0]);
                    *v94 = v95;
                    v94[1] = a5.n128_u32[0];
                  }
                }
                v91 = v90-- <= 0;
              }
              while (!v91);
              v99 = (unint64_t)v10 >> 3;
              do
              {
                v100 = 0;
                v101 = *(_QWORD *)v9;
                v102 = v9;
                do
                {
                  v103 = (_QWORD *)v102;
                  v102 += 8 * v100 + 8;
                  v104 = 2 * v100;
                  v100 = (2 * v100) | 1;
                  v105 = v104 + 2;
                  if (v105 < v99)
                  {
                    a5.n128_u32[0] = *(_DWORD *)(v102 + 4);
                    if (a5.n128_f32[0] > *(float *)(v102 + 12))
                    {
                      v102 += 8;
                      v100 = v105;
                    }
                  }
                  *v103 = *(_QWORD *)v102;
                }
                while (v100 <= (uint64_t)((unint64_t)(v99 - 2) >> 1));
                if ((uint64_t *)v102 == --a2)
                {
                  *(_QWORD *)v102 = v101;
                }
                else
                {
                  *(_QWORD *)v102 = *a2;
                  *a2 = v101;
                  v106 = v102 - v9 + 8;
                  if (v106 >= 9)
                  {
                    v107 = (((unint64_t)v106 >> 3) - 2) >> 1;
                    v108 = v9 + 8 * v107;
                    a5.n128_u32[0] = *(_DWORD *)(v102 + 4);
                    if (*(float *)(v108 + 4) > a5.n128_f32[0])
                    {
                      v109 = *(_DWORD *)v102;
                      do
                      {
                        v110 = (_QWORD *)v102;
                        v102 = v108;
                        *v110 = *(_QWORD *)v108;
                        if (!v107)
                          break;
                        v107 = (v107 - 1) >> 1;
                        v108 = v9 + 8 * v107;
                      }
                      while (*(float *)(v108 + 4) > a5.n128_f32[0]);
                      *(_DWORD *)v102 = v109;
                      *(_DWORD *)(v102 + 4) = a5.n128_u32[0];
                    }
                  }
                }
                v91 = v99-- <= 2;
              }
              while (!v91);
            }
            return a5.n128_f32[0];
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = v9 + 8 * ((unint64_t)v11 >> 1);
          v14 = *((float *)a2 - 1);
          if ((unint64_t)v10 < 0x401)
          {
            v17 = *(float *)(v9 + 4);
            if (v17 <= *(float *)(v13 + 4))
            {
              if (v14 > v17)
              {
                v21 = *(_QWORD *)v9;
                *(_QWORD *)v9 = *(a2 - 1);
                *(a2 - 1) = v21;
                if (*(float *)(v9 + 4) > *(float *)(v13 + 4))
                {
                  v22 = *(_QWORD *)v13;
                  *(_QWORD *)v13 = *(_QWORD *)v9;
                  *(_QWORD *)v9 = v22;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_56;
                }
              }
              goto LABEL_31;
            }
            v18 = *(_QWORD *)v13;
            if (v14 <= v17)
            {
              *(_QWORD *)v13 = *(_QWORD *)v9;
              *(_QWORD *)v9 = v18;
              if (*((float *)a2 - 1) <= *((float *)&v18 + 1))
                goto LABEL_31;
              *(_QWORD *)v9 = *(a2 - 1);
            }
            else
            {
              *(_QWORD *)v13 = *(a2 - 1);
            }
            *(a2 - 1) = v18;
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
            goto LABEL_56;
          }
          v15 = *(float *)(v13 + 4);
          if (v15 <= *(float *)(v9 + 4))
          {
            if (v14 > v15)
            {
              v19 = *(_QWORD *)v13;
              *(_QWORD *)v13 = *(a2 - 1);
              *(a2 - 1) = v19;
              if (*(float *)(v13 + 4) > *(float *)(v9 + 4))
              {
                v20 = *(_QWORD *)v9;
                *(_QWORD *)v9 = *(_QWORD *)v13;
                *(_QWORD *)v13 = v20;
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)v9;
            if (v14 <= v15)
            {
              *(_QWORD *)v9 = *(_QWORD *)v13;
              *(_QWORD *)v13 = v16;
              if (*((float *)a2 - 1) <= *((float *)&v16 + 1))
                goto LABEL_22;
              *(_QWORD *)v13 = *(a2 - 1);
            }
            else
            {
              *(_QWORD *)v9 = *(a2 - 1);
            }
            *(a2 - 1) = v16;
          }
LABEL_22:
          v23 = v9 + 8 * v12;
          v24 = v23 - 8;
          v25 = *(float *)(v23 - 4);
          v26 = *((float *)a2 - 3);
          if (v25 <= *(float *)(v9 + 12))
          {
            if (v26 > v25)
            {
              v28 = *(_QWORD *)v24;
              *(_QWORD *)v24 = *(a2 - 2);
              *(a2 - 2) = v28;
              if (*(float *)(v24 + 4) > *(float *)(v9 + 12))
              {
                v29 = *(_QWORD *)(v9 + 8);
                *(_QWORD *)(v9 + 8) = *(_QWORD *)v24;
                *(_QWORD *)v24 = v29;
              }
            }
          }
          else
          {
            v27 = *(_QWORD *)(v9 + 8);
            if (v26 <= v25)
            {
              *(_QWORD *)(v9 + 8) = *(_QWORD *)v24;
              *(_QWORD *)v24 = v27;
              if (*((float *)a2 - 3) <= *((float *)&v27 + 1))
                goto LABEL_36;
              *(_QWORD *)v24 = *(a2 - 2);
            }
            else
            {
              *(_QWORD *)(v9 + 8) = *(a2 - 2);
            }
            *(a2 - 2) = v27;
          }
LABEL_36:
          v31 = v9 + 8 * v12;
          v32 = v31 + 8;
          v33 = *(float *)(v31 + 12);
          v34 = *((float *)a2 - 5);
          if (v33 <= *(float *)(v9 + 20))
          {
            if (v34 > v33)
            {
              v36 = *(_QWORD *)v32;
              *(_QWORD *)v32 = *(a2 - 3);
              *(a2 - 3) = v36;
              if (*(float *)(v32 + 4) > *(float *)(v9 + 20))
              {
                v37 = *(_QWORD *)(v9 + 16);
                *(_QWORD *)(v9 + 16) = *(_QWORD *)v32;
                *(_QWORD *)v32 = v37;
              }
            }
          }
          else
          {
            v35 = *(_QWORD *)(v9 + 16);
            if (v34 <= v33)
            {
              *(_QWORD *)(v9 + 16) = *(_QWORD *)v32;
              *(_QWORD *)v32 = v35;
              if (*((float *)a2 - 5) <= *((float *)&v35 + 1))
                goto LABEL_45;
              *(_QWORD *)v32 = *(a2 - 3);
            }
            else
            {
              *(_QWORD *)(v9 + 16) = *(a2 - 3);
            }
            *(a2 - 3) = v35;
          }
LABEL_45:
          v38 = *(float *)(v13 + 4);
          v39 = *(float *)(v24 + 4);
          v40 = *(float *)(v32 + 4);
          if (v38 > v39)
          {
            v41 = *(_QWORD *)v24;
            if (v40 > v38)
            {
              *(_QWORD *)v24 = *(_QWORD *)v32;
              *(_QWORD *)v32 = v41;
              v42 = *(_QWORD *)v9;
              *(_QWORD *)v9 = *(_QWORD *)v13;
              *(_QWORD *)v13 = v42;
              --a3;
              if ((a4 & 1) != 0)
                goto LABEL_32;
              goto LABEL_56;
            }
            *(_QWORD *)v24 = *(_QWORD *)v13;
            *(_QWORD *)v13 = v41;
            if (v40 > *((float *)&v41 + 1))
            {
              v46 = *(_QWORD *)v32;
              *(_QWORD *)v13 = *(_QWORD *)v32;
              *(_QWORD *)v32 = v41;
              v41 = v46;
            }
            goto LABEL_55;
          }
          v41 = *(_QWORD *)v13;
          if (v40 <= v38)
          {
LABEL_55:
            v47 = *(_QWORD *)v9;
            *(_QWORD *)v9 = v41;
            *(_QWORD *)v13 = v47;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_56:
            a5.n128_u32[0] = *(_DWORD *)(v9 + 4);
            v30 = *(_DWORD *)v9;
            if (*(float *)(v9 - 4) > a5.n128_f32[0])
              goto LABEL_57;
            if (*((float *)a2 - 1) >= a5.n128_f32[0])
            {
              v64 = v9 + 8;
              do
              {
                v9 = v64;
                if (v64 >= (unint64_t)a2)
                  break;
                v65 = *(float *)(v64 + 4);
                v64 += 8;
              }
              while (v65 >= a5.n128_f32[0]);
            }
            else
            {
              v62 = v9;
              do
              {
                v9 = v62 + 8;
                v63 = *(float *)(v62 + 12);
                v62 += 8;
              }
              while (v63 >= a5.n128_f32[0]);
            }
            v66 = a2;
            if (v9 < (unint64_t)a2)
            {
              v67 = a2;
              do
              {
                v66 = v67 - 1;
                v68 = *((float *)v67-- - 1);
              }
              while (v68 < a5.n128_f32[0]);
            }
            while (v9 < (unint64_t)v66)
            {
              v69 = *(_QWORD *)v9;
              *(_QWORD *)v9 = *v66;
              *v66 = v69;
              do
              {
                v70 = *(float *)(v9 + 12);
                v9 += 8;
              }
              while (v70 >= a5.n128_f32[0]);
              do
                v71 = *((float *)v66-- - 1);
              while (v71 < a5.n128_f32[0]);
            }
            if ((float *)(v9 - 8) != a1)
              *(_QWORD *)a1 = *(_QWORD *)(v9 - 8);
            a4 = 0;
            *(_DWORD *)(v9 - 8) = v30;
            *(_DWORD *)(v9 - 4) = a5.n128_u32[0];
            continue;
          }
          v43 = *(_QWORD *)v32;
          *(_QWORD *)v13 = *(_QWORD *)v32;
          *(_QWORD *)v32 = v41;
          if (v39 < *((float *)&v43 + 1))
          {
            v44 = *(_QWORD *)v24;
            *(_QWORD *)v24 = v43;
            *(_QWORD *)v13 = v44;
            v45 = *(_QWORD *)v9;
            *(_QWORD *)v9 = v44;
            *(_QWORD *)v13 = v45;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
            goto LABEL_56;
          }
          v61 = *(_QWORD *)v9;
          *(_QWORD *)v9 = v43;
          *(_QWORD *)v13 = v61;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_56;
LABEL_32:
          v30 = *(_DWORD *)v9;
          a5.n128_u32[0] = *(_DWORD *)(v9 + 4);
LABEL_57:
          v48 = 0;
          do
          {
            v49 = *(float *)(v9 + v48 + 12);
            v48 += 8;
          }
          while (v49 > a5.n128_f32[0]);
          v50 = v9 + v48;
          v51 = a2;
          if (v48 == 8)
          {
            v54 = a2;
            while (v50 < (unint64_t)v54)
            {
              v52 = v54 - 1;
              v55 = *((float *)v54-- - 1);
              if (v55 > a5.n128_f32[0])
                goto LABEL_65;
            }
            v52 = v54;
            v9 = v50;
          }
          else
          {
            do
            {
              v52 = v51 - 1;
              v53 = *((float *)v51-- - 1);
            }
            while (v53 <= a5.n128_f32[0]);
LABEL_65:
            v9 = v50;
            if (v50 < (unint64_t)v52)
            {
              v56 = (float *)v52;
              do
              {
                v57 = *(_QWORD *)v9;
                *(_QWORD *)v9 = *(_QWORD *)v56;
                *(_QWORD *)v56 = v57;
                do
                {
                  v58 = *(float *)(v9 + 12);
                  v9 += 8;
                }
                while (v58 > a5.n128_f32[0]);
                do
                {
                  v59 = *(v56 - 1);
                  v56 -= 2;
                }
                while (v59 <= a5.n128_f32[0]);
              }
              while (v9 < (unint64_t)v56);
            }
          }
          if ((float *)(v9 - 8) != a1)
            *(_QWORD *)a1 = *(_QWORD *)(v9 - 8);
          *(_DWORD *)(v9 - 8) = v30;
          *(_DWORD *)(v9 - 4) = a5.n128_u32[0];
          if (v50 < (unint64_t)v52)
            goto LABEL_76;
          v60 = sub_223AEADAC(a1, (uint64_t *)(v9 - 8));
          if (!sub_223AEADAC((float *)v9, a2))
          {
            if (v60)
              continue;
LABEL_76:
            sub_223AEA350(a1, v9 - 8, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (uint64_t *)(v9 - 8);
          if (v60)
            return a5.n128_f32[0];
          goto LABEL_1;
        }
        v79 = (uint64_t *)(v9 + 8);
        v81 = (uint64_t *)v9 == a2 || v79 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v81)
          {
            v82 = 0;
            v83 = (uint64_t *)v9;
            do
            {
              a5.n128_u32[0] = *((_DWORD *)v83 + 3);
              v85 = *((float *)v83 + 1);
              v83 = v79;
              if (a5.n128_f32[0] > v85)
              {
                v86 = *(_DWORD *)v79;
                v87 = v82;
                do
                {
                  *(_QWORD *)(v9 + v87 + 8) = *(_QWORD *)(v9 + v87);
                  if (!v87)
                  {
                    v84 = (_DWORD *)v9;
                    goto LABEL_123;
                  }
                  v88 = *(float *)(v9 + v87 - 4);
                  v87 -= 8;
                }
                while (v88 < a5.n128_f32[0]);
                v84 = (_DWORD *)(v9 + v87 + 8);
LABEL_123:
                *v84 = v86;
                v84[1] = a5.n128_u32[0];
              }
              v79 = v83 + 1;
              v82 += 8;
            }
            while (v83 + 1 != a2);
          }
        }
        else if (!v81)
        {
          do
          {
            a5.n128_f32[0] = a1[3];
            v112 = a1[1];
            a1 = (float *)v79;
            if (a5.n128_f32[0] > v112)
            {
              v113 = *(_DWORD *)v79;
              do
              {
                v114 = (float *)v79;
                v115 = *--v79;
                *(_QWORD *)v114 = v115;
              }
              while (*(v114 - 3) < a5.n128_f32[0]);
              *(_DWORD *)v79 = v113;
              *((_DWORD *)v79 + 1) = a5.n128_u32[0];
            }
            v79 = (uint64_t *)(a1 + 2);
          }
          while (a1 + 2 != (float *)a2);
        }
        return a5.n128_f32[0];
    }
  }
}

  v9 = a2 - 2;
  v10 = a2 - 4;
  v11 = a2 - 6;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = (uint64_t)((uint64_t)a2 - v12) >> 5;
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        v175 = *((_DWORD *)a2 - 1);
        v176 = *(_DWORD *)(v12 + 28);
        v217 = v175 == v176;
        v177 = v175 < v176;
        if (v217)
          v177 = *((float *)a2 - 2) < *(float *)(v12 + 24);
        if (v177)
        {
          v321 = *(_OWORD *)v12;
          v352 = *(_OWORD *)(v12 + 16);
          v178 = *(a2 - 1);
          *(_OWORD *)v12 = *(a2 - 2);
          *(_OWORD *)(v12 + 16) = v178;
          *(a2 - 2) = v321;
          *(a2 - 1) = v352;
        }
        return;
      case 3:
        v179 = (__int128 *)(v12 + 32);
        v180 = *(float *)(v12 + 56);
        v181 = *(_DWORD *)(v12 + 60);
        v182 = *(_DWORD *)(v12 + 28);
        v217 = v181 == v182;
        v183 = v181 < v182;
        if (v217)
          v183 = v180 < *(float *)(v12 + 24);
        v184 = *((_DWORD *)a2 - 1);
        v217 = v184 == v181;
        v185 = v184 < v181;
        if (v217)
          v185 = *((float *)a2 - 2) < v180;
        if (v183)
        {
          if (v185)
            goto LABEL_189;
          v322 = *(_OWORD *)v12;
          v353 = *(_OWORD *)(v12 + 16);
          v186 = *(_OWORD *)(v12 + 48);
          *(_OWORD *)v12 = *v179;
          *(_OWORD *)(v12 + 16) = v186;
          *v179 = v322;
          *(_OWORD *)(v12 + 48) = v353;
          v187 = *((_DWORD *)a2 - 1);
          v188 = *(_DWORD *)(v12 + 60);
          v217 = v187 == v188;
          v189 = v187 < v188;
          if (v217)
            v189 = *((float *)a2 - 2) < *(float *)(v12 + 56);
          if (v189)
          {
            v190 = *v179;
            v191 = *(_OWORD *)(v12 + 48);
            v192 = *(a2 - 1);
            *v179 = *v9;
            *(_OWORD *)(v12 + 48) = v192;
            goto LABEL_190;
          }
        }
        else if (v185)
        {
          v280 = *v179;
          v359 = *(_OWORD *)(v12 + 48);
          v281 = *(a2 - 1);
          *v179 = *v9;
          *(_OWORD *)(v12 + 48) = v281;
          *v9 = v280;
          *(a2 - 1) = v359;
          v282 = *(_DWORD *)(v12 + 60);
          v283 = *(_DWORD *)(v12 + 28);
          v217 = v282 == v283;
          v284 = v282 < v283;
          if (v217)
            v284 = *(float *)(v12 + 56) < *(float *)(v12 + 24);
          if (v284)
          {
            v327 = *(_OWORD *)v12;
            v360 = *(_OWORD *)(v12 + 16);
            v285 = *(_OWORD *)(v12 + 48);
            *(_OWORD *)v12 = *v179;
            *(_OWORD *)(v12 + 16) = v285;
            *v179 = v327;
            *(_OWORD *)(v12 + 48) = v360;
          }
        }
        return;
      case 4:
        sub_223B7E5C0((__int128 *)v12, (__int128 *)(v12 + 32), (__int128 *)(v12 + 64), a2 - 2, a5);
        return;
      case 5:
        v9 = (__int128 *)(v12 + 32);
        v193 = (__int128 *)(v12 + 64);
        v194 = (__int128 *)(v12 + 96);
        sub_223B7E5C0((__int128 *)v12, (__int128 *)(v12 + 32), (__int128 *)(v12 + 64), (__int128 *)(v12 + 96), a5);
        v195 = *((_DWORD *)a2 - 1);
        v196 = *(_DWORD *)(v12 + 124);
        v217 = v195 == v196;
        v197 = v195 < v196;
        if (v217)
          v197 = *((float *)a2 - 2) < *(float *)(v12 + 120);
        if (v197)
        {
          v198 = *v194;
          v354 = *(_OWORD *)(v12 + 112);
          v199 = *(a2 - 1);
          *v194 = *(a2 - 2);
          *(_OWORD *)(v12 + 112) = v199;
          *(a2 - 2) = v198;
          *(a2 - 1) = v354;
          v200 = *(_DWORD *)(v12 + 124);
          v201 = *(_DWORD *)(v12 + 92);
          v217 = v200 == v201;
          v202 = v200 < v201;
          if (v217)
            v202 = *(float *)(v12 + 120) < *(float *)(v12 + 88);
          if (v202)
          {
            v204 = *v193;
            v203 = *(_OWORD *)(v12 + 80);
            v205 = *(_OWORD *)(v12 + 112);
            *v193 = *v194;
            *(_OWORD *)(v12 + 80) = v205;
            *v194 = v204;
            *(_OWORD *)(v12 + 112) = v203;
            v206 = *(_DWORD *)(v12 + 92);
            v207 = *(_DWORD *)(v12 + 60);
            v217 = v206 == v207;
            v208 = v206 < v207;
            if (v217)
              v208 = *(float *)(v12 + 88) < *(float *)(v12 + 56);
            if (v208)
            {
              v210 = *v9;
              v209 = *(_OWORD *)(v12 + 48);
              v211 = *(_OWORD *)(v12 + 80);
              *v9 = *v193;
              *(_OWORD *)(v12 + 48) = v211;
              *v193 = v210;
              *(_OWORD *)(v12 + 80) = v209;
              v212 = *(_DWORD *)(v12 + 60);
              v213 = *(_DWORD *)(v12 + 28);
              v217 = v212 == v213;
              v214 = v212 < v213;
              if (v217)
                v214 = *(float *)(v12 + 56) < *(float *)(v12 + 24);
              if (v214)
              {
LABEL_189:
                v323 = *(_OWORD *)v12;
                v355 = *(_OWORD *)(v12 + 16);
                v215 = v9[1];
                *(_OWORD *)v12 = *v9;
                *(_OWORD *)(v12 + 16) = v215;
                v190 = v323;
                v191 = v355;
LABEL_190:
                *v9 = v190;
                v9[1] = v191;
              }
            }
          }
        }
        return;
      default:
        if (v13 > 767)
        {
          if (!a3)
          {
            if ((__int128 *)v12 != a2)
            {
              v234 = (unint64_t)(v14 - 2) >> 1;
              v235 = v234;
              do
              {
                v236 = v235;
                if (v234 >= v235)
                {
                  v237 = (2 * v235) | 1;
                  v238 = v12 + 32 * v237;
                  if (2 * v236 + 2 < v14)
                  {
                    v239 = *(_DWORD *)(v238 + 28);
                    v240 = *(_DWORD *)(v238 + 60);
                    v217 = v239 == v240;
                    LODWORD(v241) = v239 < v240;
                    v241 = v217 ? *(float *)(v238 + 24) < *(float *)(v238 + 56) : v241;
                    v238 += 32 * v241;
                    if ((_DWORD)v241)
                      v237 = 2 * v236 + 2;
                  }
                  v242 = v12 + 32 * v236;
                  v243 = *(_DWORD *)(v238 + 28);
                  v244 = *(float *)(v242 + 24);
                  v245 = *(_DWORD *)(v242 + 28);
                  v217 = v243 == v245;
                  v246 = v243 < v245;
                  if (v217)
                    v246 = *(float *)(v238 + 24) < v244;
                  if (!v246)
                  {
                    v357 = *(_QWORD *)(v242 + 16);
                    v325 = *(_OWORD *)v242;
                    do
                    {
                      v250 = (_OWORD *)v242;
                      v242 = v238;
                      v251 = *(_OWORD *)(v238 + 16);
                      *v250 = *(_OWORD *)v238;
                      v250[1] = v251;
                      if (v234 < v237)
                        break;
                      v252 = (2 * v237) | 1;
                      v238 = v12 + 32 * v252;
                      v253 = 2 * v237 + 2;
                      if (v253 < v14)
                      {
                        v254 = *(_DWORD *)(v238 + 28);
                        v255 = *(_DWORD *)(v238 + 60);
                        v217 = v254 == v255;
                        LODWORD(v256) = v254 < v255;
                        v256 = v217 ? *(float *)(v238 + 24) < *(float *)(v238 + 56) : v256;
                        v238 += 32 * v256;
                        if ((_DWORD)v256)
                          v252 = v253;
                      }
                      v247 = *(_DWORD *)(v238 + 28);
                      v248 = *(float *)(v238 + 24) < v244;
                      v217 = v247 == v245;
                      v249 = v247 < v245;
                      if (!v217)
                        v248 = v249;
                      v237 = v252;
                    }
                    while (!v248);
                    *(_QWORD *)(v242 + 16) = v357;
                    *(_OWORD *)v242 = v325;
                    *(float *)(v242 + 24) = v244;
                    *(_DWORD *)(v242 + 28) = v245;
                  }
                }
                v235 = v236 - 1;
              }
              while (v236);
              v257 = (unint64_t)v13 >> 5;
              do
              {
                v259 = 0;
                v326 = *(_OWORD *)v12;
                v358 = *(_OWORD *)(v12 + 16);
                v260 = (_OWORD *)v12;
                do
                {
                  v262 = (uint64_t)&v260[2 * v259 + 2];
                  v263 = (2 * v259) | 1;
                  v264 = 2 * v259 + 2;
                  if (v264 < v257)
                  {
                    v265 = *(_DWORD *)(v262 + 28);
                    v266 = *(_DWORD *)(v262 + 60);
                    v217 = v265 == v266;
                    LODWORD(v267) = v265 < v266;
                    v267 = v217 ? *(float *)(v262 + 24) < *(float *)(v262 + 56) : v267;
                    v262 += 32 * v267;
                    if ((_DWORD)v267)
                      v263 = v264;
                  }
                  v261 = *(_OWORD *)(v262 + 16);
                  *v260 = *(_OWORD *)v262;
                  v260[1] = v261;
                  v260 = (_OWORD *)v262;
                  v259 = v263;
                }
                while (v263 <= (uint64_t)((unint64_t)(v257 - 2) >> 1));
                a2 -= 2;
                if ((__int128 *)v262 == a2)
                {
                  *(_OWORD *)v262 = v326;
                  *(_OWORD *)(v262 + 16) = v358;
                }
                else
                {
                  v268 = a2[1];
                  *(_OWORD *)v262 = *a2;
                  *(_OWORD *)(v262 + 16) = v268;
                  *a2 = v326;
                  a2[1] = v358;
                  v269 = v262 - v12 + 32;
                  if (v269 >= 33)
                  {
                    v270 = (((unint64_t)v269 >> 5) - 2) >> 1;
                    v271 = v12 + 32 * v270;
                    v272 = *(_DWORD *)(v271 + 28);
                    v273 = *(float *)(v262 + 24);
                    v274 = *(_DWORD *)(v262 + 28);
                    v217 = v272 == v274;
                    v275 = v272 < v274;
                    if (v217)
                      v275 = *(float *)(v271 + 24) < v273;
                    if (v275)
                    {
                      v301 = *(_QWORD *)(v262 + 16);
                      v298 = *(_OWORD *)v262;
                      do
                      {
                        v276 = (_OWORD *)v262;
                        v262 = v271;
                        v277 = *(_OWORD *)(v271 + 16);
                        *v276 = *(_OWORD *)v271;
                        v276[1] = v277;
                        if (!v270)
                          break;
                        v270 = (v270 - 1) >> 1;
                        v271 = v12 + 32 * v270;
                        v278 = *(_DWORD *)(v271 + 28);
                        v217 = v278 == v274;
                        v279 = v278 < v274;
                        if (v217)
                          v279 = *(float *)(v271 + 24) < v273;
                      }
                      while (v279);
                      *(_QWORD *)(v262 + 16) = v301;
                      *(_OWORD *)v262 = v298;
                      *(float *)(v262 + 24) = v273;
                      *(_DWORD *)(v262 + 28) = v274;
                    }
                  }
                }
              }
              while (v257-- > 2);
            }
            return;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = v12 + 32 * ((unint64_t)v14 >> 1);
          v17 = *((float *)a2 - 2);
          v18 = *((_DWORD *)a2 - 1);
          if ((unint64_t)v13 <= 0x1000)
          {
            v25 = *(float *)(v12 + 24);
            v26 = *(_DWORD *)(v12 + 28);
            v27 = *(_DWORD *)(v16 + 28);
            v217 = v26 == v27;
            v28 = v26 < v27;
            if (v217)
              v28 = v25 < *(float *)(v16 + 24);
            v217 = v18 == v26;
            v29 = v18 < v26;
            if (v217)
              v29 = v17 < v25;
            if (v28)
            {
              if (v29)
              {
                v303 = *(__n128 *)v16;
                v330 = *(_OWORD *)(v16 + 16);
                v30 = *(a2 - 1);
                *(_OWORD *)v16 = *v9;
                *(_OWORD *)(v16 + 16) = v30;
LABEL_52:
                a5 = v303;
                *v9 = (__int128)v303;
                *(a2 - 1) = v330;
                goto LABEL_53;
              }
              v310 = *(__n128 *)v16;
              v338 = *(_OWORD *)(v16 + 16);
              v64 = *(_OWORD *)(v12 + 16);
              *(_OWORD *)v16 = *(_OWORD *)v12;
              *(_OWORD *)(v16 + 16) = v64;
              a5 = v310;
              *(__n128 *)v12 = v310;
              *(_OWORD *)(v12 + 16) = v338;
              v65 = *((_DWORD *)a2 - 1);
              v66 = *(_DWORD *)(v12 + 28);
              v217 = v65 == v66;
              v67 = v65 < v66;
              if (v217)
                v67 = *((float *)a2 - 2) < *(float *)(v12 + 24);
              if (v67)
              {
                v303 = *(__n128 *)v12;
                v330 = *(_OWORD *)(v12 + 16);
                v68 = *(a2 - 1);
                *(_OWORD *)v12 = *v9;
                *(_OWORD *)(v12 + 16) = v68;
                goto LABEL_52;
              }
            }
            else if (v29)
            {
              v306 = *(__n128 *)v12;
              v333 = *(_OWORD *)(v12 + 16);
              v36 = *(a2 - 1);
              *(_OWORD *)v12 = *v9;
              *(_OWORD *)(v12 + 16) = v36;
              a5 = v306;
              *v9 = (__int128)v306;
              *(a2 - 1) = v333;
              v37 = *(_DWORD *)(v12 + 28);
              v38 = *(_DWORD *)(v16 + 28);
              v217 = v37 == v38;
              v39 = v37 < v38;
              if (v217)
                v39 = *(float *)(v12 + 24) < *(float *)(v16 + 24);
              if (v39)
              {
                v307 = *(__n128 *)v16;
                v334 = *(_OWORD *)(v16 + 16);
                v40 = *(_OWORD *)(v12 + 16);
                *(_OWORD *)v16 = *(_OWORD *)v12;
                *(_OWORD *)(v16 + 16) = v40;
                a5 = v307;
                *(__n128 *)v12 = v307;
                *(_OWORD *)(v12 + 16) = v334;
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_54;
                goto LABEL_95;
              }
            }
LABEL_53:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_54;
LABEL_95:
            v118 = *(_DWORD *)(v12 - 4);
            a5.n128_u32[0] = *(_DWORD *)(v12 + 24);
            v69 = *(_DWORD *)(v12 + 28);
            v217 = v118 == v69;
            v119 = v118 < v69;
            if (v217)
              v119 = *(float *)(v12 - 8) < a5.n128_f32[0];
            if (v119)
              goto LABEL_98;
            a5 = *(__n128 *)v12;
            v300 = *(_QWORD *)(v12 + 16);
            v297 = *(_OWORD *)v12;
            a5.n128_u32[0] = *(_DWORD *)(v12 + 24);
            v147 = *(_DWORD *)(v12 + 28);
            v148 = *((_DWORD *)a2 - 1);
            v217 = v147 == v148;
            v149 = v147 < v148;
            if (v217)
              v149 = a5.n128_f32[0] < *((float *)a2 - 2);
            if (v149)
            {
              v150 = v12;
              do
              {
                v12 = v150 + 32;
                v151 = *(float *)(v150 + 56);
                v152 = *(_DWORD *)(v150 + 60);
                v153 = a5.n128_f32[0] < v151;
                v217 = v147 == v152;
                v154 = v147 < v152;
                if (!v217)
                  v153 = v154;
                v150 = v12;
              }
              while (!v153);
            }
            else
            {
              v155 = v12 + 32;
              do
              {
                v12 = v155;
                if (v155 >= (unint64_t)a2)
                  break;
                v156 = *(float *)(v155 + 24);
                v157 = *(_DWORD *)(v155 + 28);
                v158 = a5.n128_f32[0] < v156;
                v217 = v147 == v157;
                v159 = v147 < v157;
                if (!v217)
                  v158 = v159;
                v155 = v12 + 32;
              }
              while (!v158);
            }
            v160 = (float *)a2;
            if (v12 < (unint64_t)a2)
            {
              v161 = (float *)a2;
              do
              {
                v160 = v161 - 8;
                v162 = *(v161 - 2);
                v163 = *((_DWORD *)v161 - 1);
                v164 = a5.n128_f32[0] < v162;
                v217 = v147 == v163;
                v165 = v147 < v163;
                if (!v217)
                  v164 = v165;
                v161 = v160;
              }
              while (v164);
            }
            while (v12 < (unint64_t)v160)
            {
              v320 = *(_OWORD *)v12;
              v351 = *(_OWORD *)(v12 + 16);
              v166 = *((_OWORD *)v160 + 1);
              *(_OWORD *)v12 = *(_OWORD *)v160;
              *(_OWORD *)(v12 + 16) = v166;
              *(_OWORD *)v160 = v320;
              *((_OWORD *)v160 + 1) = v351;
              do
              {
                v167 = *(float *)(v12 + 56);
                v168 = *(_DWORD *)(v12 + 60);
                v12 += 32;
                v217 = v147 == v168;
                v169 = v147 < v168;
                if (v217)
                  v169 = a5.n128_f32[0] < v167;
              }
              while (!v169);
              do
              {
                v170 = *(v160 - 2);
                v171 = *((_DWORD *)v160 - 1);
                v160 -= 8;
                v217 = v147 == v171;
                v172 = v147 < v171;
                if (v217)
                  v172 = a5.n128_f32[0] < v170;
              }
              while (v172);
            }
            v173 = (__int128 *)(v12 - 32);
            if (v12 - 32 != a1)
            {
              v174 = *(_OWORD *)(v12 - 16);
              *(_OWORD *)a1 = *v173;
              *(_OWORD *)(a1 + 16) = v174;
            }
            a4 = 0;
            *(_QWORD *)(v12 - 16) = v300;
            *v173 = v297;
            *(_DWORD *)(v12 - 8) = a5.n128_u32[0];
            *(_DWORD *)(v12 - 4) = v147;
            continue;
          }
          v19 = *(float *)(v16 + 24);
          v20 = *(_DWORD *)(v16 + 28);
          v21 = *(_DWORD *)(v12 + 28);
          v217 = v20 == v21;
          v22 = v20 < v21;
          if (v217)
            v22 = v19 < *(float *)(v12 + 24);
          v217 = v18 == v20;
          v23 = v18 < v20;
          if (v217)
            v23 = v17 < v19;
          if (v22)
          {
            if (v23)
            {
              v302 = *(_OWORD *)v12;
              v329 = *(_OWORD *)(v12 + 16);
              v24 = *(a2 - 1);
              *(_OWORD *)v12 = *v9;
              *(_OWORD *)(v12 + 16) = v24;
LABEL_35:
              *v9 = v302;
              *(a2 - 1) = v329;
              goto LABEL_36;
            }
            v308 = *(_OWORD *)v12;
            v335 = *(_OWORD *)(v12 + 16);
            v41 = *(_OWORD *)(v16 + 16);
            *(_OWORD *)v12 = *(_OWORD *)v16;
            *(_OWORD *)(v12 + 16) = v41;
            *(_OWORD *)v16 = v308;
            *(_OWORD *)(v16 + 16) = v335;
            v42 = *((_DWORD *)a2 - 1);
            v43 = *(_DWORD *)(v16 + 28);
            v217 = v42 == v43;
            v44 = v42 < v43;
            if (v217)
              v44 = *((float *)a2 - 2) < *(float *)(v16 + 24);
            if (v44)
            {
              v302 = *(_OWORD *)v16;
              v329 = *(_OWORD *)(v16 + 16);
              v45 = *(a2 - 1);
              *(_OWORD *)v16 = *v9;
              *(_OWORD *)(v16 + 16) = v45;
              goto LABEL_35;
            }
          }
          else if (v23)
          {
            v304 = *(__n128 *)v16;
            v331 = *(_OWORD *)(v16 + 16);
            v31 = *(a2 - 1);
            *(_OWORD *)v16 = *v9;
            *(_OWORD *)(v16 + 16) = v31;
            *v9 = (__int128)v304;
            *(a2 - 1) = v331;
            v32 = *(_DWORD *)(v16 + 28);
            v33 = *(_DWORD *)(v12 + 28);
            v217 = v32 == v33;
            v34 = v32 < v33;
            if (v217)
              v34 = *(float *)(v16 + 24) < *(float *)(v12 + 24);
            if (v34)
            {
              v305 = *(_OWORD *)v12;
              v332 = *(_OWORD *)(v12 + 16);
              v35 = *(_OWORD *)(v16 + 16);
              *(_OWORD *)v12 = *(_OWORD *)v16;
              *(_OWORD *)(v12 + 16) = v35;
              *(_OWORD *)v16 = v305;
              *(_OWORD *)(v16 + 16) = v332;
            }
          }
LABEL_36:
          v46 = (__int128 *)(v12 + 32);
          v47 = v12 + 32 * v15;
          v48 = v47 - 32;
          v49 = *(float *)(v47 - 8);
          v50 = *(_DWORD *)(v47 - 4);
          v51 = *(_DWORD *)(v12 + 60);
          v217 = v50 == v51;
          v52 = v50 < v51;
          if (v217)
            v52 = v49 < *(float *)(v12 + 56);
          v53 = *((_DWORD *)a2 - 9);
          v217 = v53 == v50;
          v54 = v53 < v50;
          if (v217)
            v54 = *((float *)a2 - 10) < v49;
          if (v52)
          {
            if (v54)
            {
              v55 = *v46;
              v56 = *(_OWORD *)(v12 + 48);
              v57 = *(a2 - 3);
              *v46 = *v10;
              *(_OWORD *)(v12 + 48) = v57;
LABEL_59:
              *v10 = v55;
              *(a2 - 3) = v56;
              goto LABEL_60;
            }
            v70 = *v46;
            v339 = *(_OWORD *)(v12 + 48);
            v71 = *(_OWORD *)(v48 + 16);
            *v46 = *(_OWORD *)v48;
            *(_OWORD *)(v12 + 48) = v71;
            *(_OWORD *)v48 = v70;
            *(_OWORD *)(v48 + 16) = v339;
            v72 = *((_DWORD *)a2 - 9);
            v73 = *(_DWORD *)(v48 + 28);
            v217 = v72 == v73;
            v74 = v72 < v73;
            if (v217)
              v74 = *((float *)a2 - 10) < *(float *)(v48 + 24);
            if (v74)
            {
              v311 = *(_OWORD *)v48;
              v340 = *(_OWORD *)(v48 + 16);
              v75 = *(a2 - 3);
              *(_OWORD *)v48 = *v10;
              *(_OWORD *)(v48 + 16) = v75;
              v55 = v311;
              v56 = v340;
              goto LABEL_59;
            }
          }
          else if (v54)
          {
            v309 = *(_OWORD *)v48;
            v336 = *(_OWORD *)(v48 + 16);
            v58 = *(a2 - 3);
            *(_OWORD *)v48 = *v10;
            *(_OWORD *)(v48 + 16) = v58;
            *v10 = v309;
            *(a2 - 3) = v336;
            v59 = *(_DWORD *)(v48 + 28);
            v60 = *(_DWORD *)(v12 + 60);
            v217 = v59 == v60;
            v61 = v59 < v60;
            if (v217)
              v61 = *(float *)(v48 + 24) < *(float *)(v12 + 56);
            if (v61)
            {
              v62 = *v46;
              v337 = *(_OWORD *)(v12 + 48);
              v63 = *(_OWORD *)(v48 + 16);
              *v46 = *(_OWORD *)v48;
              *(_OWORD *)(v12 + 48) = v63;
              *(_OWORD *)v48 = v62;
              *(_OWORD *)(v48 + 16) = v337;
            }
          }
LABEL_60:
          v76 = (__int128 *)(v12 + 64);
          v77 = v12 + 32 * v15;
          v78 = v77 + 32;
          v79 = *(float *)(v77 + 56);
          v80 = *(_DWORD *)(v77 + 60);
          v81 = *(_DWORD *)(v12 + 92);
          v217 = v80 == v81;
          v82 = v80 < v81;
          if (v217)
            v82 = v79 < *(float *)(v12 + 88);
          v83 = *((_DWORD *)a2 - 17);
          v217 = v83 == v80;
          v84 = v83 < v80;
          if (v217)
            v84 = *((float *)a2 - 18) < v79;
          if (v82)
          {
            if (v84)
            {
              v85 = *v76;
              v86 = *(_OWORD *)(v12 + 80);
              v87 = *(a2 - 5);
              *v76 = *v11;
              *(_OWORD *)(v12 + 80) = v87;
LABEL_76:
              *v11 = v85;
              *(a2 - 5) = v86;
              goto LABEL_77;
            }
            v94 = *v76;
            v343 = *(_OWORD *)(v12 + 80);
            v95 = *(_OWORD *)(v78 + 16);
            *v76 = *(_OWORD *)v78;
            *(_OWORD *)(v12 + 80) = v95;
            *(_OWORD *)v78 = v94;
            *(_OWORD *)(v78 + 16) = v343;
            v96 = *((_DWORD *)a2 - 17);
            v97 = *(_DWORD *)(v78 + 28);
            v217 = v96 == v97;
            v98 = v96 < v97;
            if (v217)
              v98 = *((float *)a2 - 18) < *(float *)(v78 + 24);
            if (v98)
            {
              v313 = *(_OWORD *)v78;
              v344 = *(_OWORD *)(v78 + 16);
              v99 = *(a2 - 5);
              *(_OWORD *)v78 = *v11;
              *(_OWORD *)(v78 + 16) = v99;
              v85 = v313;
              v86 = v344;
              goto LABEL_76;
            }
          }
          else if (v84)
          {
            v312 = *(_OWORD *)v78;
            v341 = *(_OWORD *)(v78 + 16);
            v88 = *(a2 - 5);
            *(_OWORD *)v78 = *v11;
            *(_OWORD *)(v78 + 16) = v88;
            *v11 = v312;
            *(a2 - 5) = v341;
            v89 = *(_DWORD *)(v78 + 28);
            v90 = *(_DWORD *)(v12 + 92);
            v217 = v89 == v90;
            v91 = v89 < v90;
            if (v217)
              v91 = *(float *)(v78 + 24) < *(float *)(v12 + 88);
            if (v91)
            {
              v92 = *v76;
              v342 = *(_OWORD *)(v12 + 80);
              v93 = *(_OWORD *)(v78 + 16);
              *v76 = *(_OWORD *)v78;
              *(_OWORD *)(v12 + 80) = v93;
              *(_OWORD *)v78 = v92;
              *(_OWORD *)(v78 + 16) = v342;
            }
          }
LABEL_77:
          v100 = *(float *)(v16 + 24);
          v101 = *(_DWORD *)(v16 + 28);
          v102 = *(_DWORD *)(v48 + 28);
          v217 = v101 == v102;
          v103 = v101 < v102;
          if (v217)
            v103 = v100 < *(float *)(v48 + 24);
          v104 = *(_DWORD *)(v78 + 28);
          v217 = v104 == v101;
          v105 = v104 < v101;
          if (v217)
            v105 = *(float *)(v78 + 24) < v100;
          if (v103)
          {
            if (v105)
            {
              v314 = *(__n128 *)v48;
              v345 = *(_OWORD *)(v48 + 16);
              v106 = *(_OWORD *)(v78 + 16);
              *(_OWORD *)v48 = *(_OWORD *)v78;
              *(_OWORD *)(v48 + 16) = v106;
LABEL_93:
              *(__n128 *)v78 = v314;
              *(_OWORD *)(v78 + 16) = v345;
              goto LABEL_94;
            }
            v317 = *(__n128 *)v48;
            v348 = *(_OWORD *)(v48 + 16);
            v112 = *(_OWORD *)(v16 + 16);
            *(_OWORD *)v48 = *(_OWORD *)v16;
            *(_OWORD *)(v48 + 16) = v112;
            *(__n128 *)v16 = v317;
            *(_OWORD *)(v16 + 16) = v348;
            v113 = *(_DWORD *)(v78 + 28);
            v114 = *(_DWORD *)(v16 + 28);
            v217 = v113 == v114;
            v115 = v113 < v114;
            if (v217)
              v115 = *(float *)(v78 + 24) < *(float *)(v16 + 24);
            if (v115)
            {
              v314 = *(__n128 *)v16;
              v345 = *(_OWORD *)(v16 + 16);
              v116 = *(_OWORD *)(v78 + 16);
              *(_OWORD *)v16 = *(_OWORD *)v78;
              *(_OWORD *)(v16 + 16) = v116;
              goto LABEL_93;
            }
          }
          else if (v105)
          {
            v315 = *(__n128 *)v16;
            v346 = *(_OWORD *)(v16 + 16);
            v107 = *(_OWORD *)(v78 + 16);
            *(_OWORD *)v16 = *(_OWORD *)v78;
            *(_OWORD *)(v16 + 16) = v107;
            *(__n128 *)v78 = v315;
            *(_OWORD *)(v78 + 16) = v346;
            v108 = *(_DWORD *)(v16 + 28);
            v109 = *(_DWORD *)(v48 + 28);
            v217 = v108 == v109;
            v110 = v108 < v109;
            if (v217)
              v110 = *(float *)(v16 + 24) < *(float *)(v48 + 24);
            if (v110)
            {
              v316 = *(__n128 *)v48;
              v347 = *(_OWORD *)(v48 + 16);
              v111 = *(_OWORD *)(v16 + 16);
              *(_OWORD *)v48 = *(_OWORD *)v16;
              *(_OWORD *)(v48 + 16) = v111;
              *(__n128 *)v16 = v316;
              *(_OWORD *)(v16 + 16) = v347;
            }
          }
LABEL_94:
          v318 = *(__n128 *)v12;
          v349 = *(_OWORD *)(v12 + 16);
          v117 = *(_OWORD *)(v16 + 16);
          *(_OWORD *)v12 = *(_OWORD *)v16;
          *(_OWORD *)(v12 + 16) = v117;
          a5 = v318;
          *(__n128 *)v16 = v318;
          *(_OWORD *)(v16 + 16) = v349;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_95;
LABEL_54:
          a5.n128_u32[0] = *(_DWORD *)(v12 + 24);
          v69 = *(_DWORD *)(v12 + 28);
LABEL_98:
          v120 = 0;
          v299 = *(_QWORD *)(v12 + 16);
          v296 = *(_OWORD *)v12;
          do
          {
            v121 = *(_DWORD *)(v12 + v120 + 60);
            v217 = v121 == v69;
            v122 = v121 < v69;
            if (v217)
              v122 = *(float *)(v12 + v120 + 56) < a5.n128_f32[0];
            v120 += 32;
          }
          while (v122);
          v123 = v12 + v120;
          v124 = a2;
          if (v120 == 32)
          {
            v130 = a2;
            while (v123 < (unint64_t)v130)
            {
              v125 = v130 - 2;
              v131 = *((float *)v130 - 2);
              v132 = *((_DWORD *)v130 - 1);
              v133 = v131 < a5.n128_f32[0];
              v217 = v132 == v69;
              v134 = v132 < v69;
              if (!v217)
                v133 = v134;
              v130 = v125;
              if (v133)
                goto LABEL_112;
            }
            v125 = v130;
            v12 = v123;
          }
          else
          {
            do
            {
              v125 = v124 - 2;
              v126 = *((float *)v124 - 2);
              v127 = *((_DWORD *)v124 - 1);
              v128 = v126 < a5.n128_f32[0];
              v217 = v127 == v69;
              v129 = v127 < v69;
              if (!v217)
                v128 = v129;
              v124 = v125;
            }
            while (!v128);
LABEL_112:
            v12 = v123;
            if (v123 < (unint64_t)v125)
            {
              v135 = (float *)v125;
              do
              {
                v319 = *(_OWORD *)v12;
                v350 = *(_OWORD *)(v12 + 16);
                v136 = *((_OWORD *)v135 + 1);
                *(_OWORD *)v12 = *(_OWORD *)v135;
                *(_OWORD *)(v12 + 16) = v136;
                *(_OWORD *)v135 = v319;
                *((_OWORD *)v135 + 1) = v350;
                do
                {
                  v137 = *(float *)(v12 + 56);
                  v138 = *(_DWORD *)(v12 + 60);
                  v12 += 32;
                  v217 = v138 == v69;
                  v139 = v138 < v69;
                  if (v217)
                    v139 = v137 < a5.n128_f32[0];
                }
                while (v139);
                do
                {
                  v140 = *(v135 - 2);
                  v141 = *((_DWORD *)v135 - 1);
                  v135 -= 8;
                  v217 = v141 == v69;
                  v142 = v141 < v69;
                  if (v217)
                    v142 = v140 < a5.n128_f32[0];
                }
                while (!v142);
              }
              while (v12 < (unint64_t)v135);
            }
          }
          v143 = (__int128 *)(v12 - 32);
          if (v12 - 32 != a1)
          {
            v144 = *(_OWORD *)(v12 - 16);
            *(_OWORD *)a1 = *v143;
            *(_OWORD *)(a1 + 16) = v144;
          }
          *(_QWORD *)(v12 - 16) = v299;
          *v143 = v296;
          *(_DWORD *)(v12 - 8) = a5.n128_u32[0];
          *(_DWORD *)(v12 - 4) = v69;
          if (v123 < (unint64_t)v125)
            goto LABEL_127;
          v145 = sub_223B7E0E0(a1, v12 - 32, a5);
          if (!sub_223B7E0E0(v12, (uint64_t)a2, v146))
          {
            if (v145)
              continue;
LABEL_127:
            sub_223B7CFE0(a1, v12 - 32, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__int128 *)(v12 - 32);
          if (v145)
            return;
          goto LABEL_1;
        }
        v216 = (__int128 *)(v12 + 32);
        v217 = (__int128 *)v12 == a2 || v216 == a2;
        v218 = v217;
        if ((a4 & 1) != 0)
        {
          if ((v218 & 1) == 0)
          {
            v219 = 0;
            v220 = v12;
            do
            {
              v222 = *(float *)(v220 + 56);
              v223 = *(_DWORD *)(v220 + 60);
              v224 = *(float *)(v220 + 24);
              v225 = *(_DWORD *)(v220 + 28);
              v220 = (unint64_t)v216;
              v226 = v222 < v224;
              v217 = v223 == v225;
              v227 = v223 < v225;
              if (!v217)
                v226 = v227;
              if (v226)
              {
                v356 = *(_QWORD *)(v220 + 16);
                v324 = *(_OWORD *)v220;
                v228 = v219;
                do
                {
                  v229 = v12 + v228;
                  v230 = *(_OWORD *)(v12 + v228 + 16);
                  *(_OWORD *)(v229 + 32) = *(_OWORD *)(v12 + v228);
                  *(_OWORD *)(v229 + 48) = v230;
                  if (!v228)
                  {
                    v221 = v12;
                    goto LABEL_201;
                  }
                  v231 = *(float *)(v229 - 8);
                  v232 = *(_DWORD *)(v229 - 4);
                  v217 = v223 == v232;
                  v233 = v223 < v232;
                  if (v217)
                    v233 = v222 < v231;
                  v228 -= 32;
                }
                while (v233);
                v221 = v12 + v228 + 32;
LABEL_201:
                *(_QWORD *)(v221 + 16) = v356;
                *(_OWORD *)v221 = v324;
                *(float *)(v221 + 24) = v222;
                *(_DWORD *)(v221 + 28) = v223;
              }
              v216 = (__int128 *)(v220 + 32);
              v219 += 32;
            }
            while ((__int128 *)(v220 + 32) != a2);
          }
        }
        else if ((v218 & 1) == 0)
        {
          do
          {
            v286 = *(float *)(a1 + 56);
            v287 = *(_DWORD *)(a1 + 60);
            v288 = *(float *)(a1 + 24);
            v289 = *(_DWORD *)(a1 + 28);
            a1 = (uint64_t)v216;
            v217 = v287 == v289;
            v290 = v287 < v289;
            if (v217)
              v290 = v286 < v288;
            if (v290)
            {
              v361 = *((_QWORD *)v216 + 2);
              v328 = *v216;
              v291 = v216;
              do
              {
                v292 = *(v291 - 1);
                *v291 = *(v291 - 2);
                v291[1] = v292;
                v293 = *((float *)v291 - 10);
                v294 = *((_DWORD *)v291 - 9);
                v291 -= 2;
                v217 = v287 == v294;
                v295 = v287 < v294;
                if (v217)
                  v295 = v286 < v293;
              }
              while (v295);
              *((_QWORD *)v291 + 2) = v361;
              *v291 = v328;
              *((float *)v291 + 6) = v286;
              *((_DWORD *)v291 + 7) = v287;
            }
            v216 += 2;
          }
          while ((__int128 *)(a1 + 32) != a2);
        }
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v59 = a2 - 4;
        v60 = *((_DWORD *)a2 - 4);
        if (v60 < *(_DWORD *)v8 || (v60 == *(_DWORD *)v8 ? (v61 = *(a2 - 1) < v8[3]) : (v61 = 0), v61))
        {
          v137 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v59;
          *(_OWORD *)v59 = v137;
        }
        return;
      case 3uLL:
        sub_2236B6494(v8, v8 + 4, a2 - 4);
        return;
      case 4uLL:
        v62 = (__int128 *)(v8 + 4);
        v63 = (__int128 *)(v8 + 8);
        sub_2236B6494(v8, v8 + 4, v8 + 8);
        v64 = a2 - 4;
        v65 = *((_DWORD *)a2 - 4);
        v66 = *((_DWORD *)v8 + 8);
        if (v65 < v66 || (v65 == v66 ? (v67 = *(a2 - 1) < v8[11]) : (v67 = 0), v67))
        {
          v68 = *v63;
          *v63 = *(_OWORD *)v64;
          *(_OWORD *)v64 = v68;
          v69 = *((_DWORD *)v8 + 8);
          v70 = *((_DWORD *)v8 + 4);
          if (v69 < v70 || v69 == v70 && v8[11] < v8[7])
          {
            v71 = *v62;
            *v62 = *v63;
            *v63 = v71;
            v72 = *((_DWORD *)v8 + 4);
            if (v72 < *(_DWORD *)v8 || v72 == *(_DWORD *)v8 && v8[7] < v8[3])
            {
              v138 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *v62;
              *v62 = v138;
            }
          }
        }
        return;
      case 5uLL:
        sub_2236B62E8((uint64_t)v8, v8 + 4, v8 + 8, (uint64_t)(v8 + 12), (uint64_t)(a2 - 4));
        return;
      default:
        if (v9 > 383)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v88 = (v10 - 2) >> 1;
              v89 = v88;
              do
              {
                v90 = v89;
                if (v88 >= v89)
                {
                  v91 = (2 * v89) | 1;
                  v92 = &v8[4 * v91];
                  if (2 * v90 + 2 < (uint64_t)v10)
                  {
                    v93 = *((_DWORD *)v92 + 4);
                    if (*(_DWORD *)v92 < v93 || (*(_DWORD *)v92 == v93 ? (v94 = v92[3] < v92[7]) : (v94 = 0), v94))
                    {
                      v92 += 4;
                      v91 = 2 * v90 + 2;
                    }
                  }
                  v95 = &v8[4 * v90];
                  v96 = *(_DWORD *)v95;
                  if (*(_DWORD *)v92 >= *(_DWORD *)v95)
                  {
                    v97 = v95[3];
                    if (*(_DWORD *)v92 != v96 || v92[3] >= v97)
                    {
                      v99 = *(_QWORD *)(v95 + 1);
                      do
                      {
                        v100 = v95;
                        v95 = v92;
                        *(_OWORD *)v100 = *(_OWORD *)v92;
                        if (v88 < v91)
                          break;
                        v101 = 2 * v91;
                        v91 = (2 * v91) | 1;
                        v92 = &v8[4 * v91];
                        v102 = v101 + 2;
                        if (v102 < (uint64_t)v10)
                        {
                          v103 = *((_DWORD *)v92 + 4);
                          if (*(_DWORD *)v92 < v103
                            || (*(_DWORD *)v92 == v103 ? (v104 = v92[3] < v92[7]) : (v104 = 0), v104))
                          {
                            v92 += 4;
                            v91 = v102;
                          }
                        }
                        if (*(_DWORD *)v92 < v96)
                          break;
                      }
                      while (*(_DWORD *)v92 != v96 || v92[3] >= v97);
                      *(_DWORD *)v95 = v96;
                      *(_QWORD *)(v95 + 1) = v99;
                      v95[3] = v97;
                    }
                  }
                }
                v89 = v90 - 1;
              }
              while (v90);
              v106 = (unint64_t)v9 >> 4;
              do
              {
                v108 = 0;
                v139 = *(_OWORD *)v8;
                v109 = v8;
                do
                {
                  v110 = v109;
                  v109 += 4 * v108 + 4;
                  v111 = 2 * v108;
                  v108 = (2 * v108) | 1;
                  v112 = v111 + 2;
                  if (v112 < v106)
                  {
                    v113 = *((_DWORD *)v109 + 4);
                    if (*(_DWORD *)v109 < v113
                      || (*(_DWORD *)v109 == v113 ? (v114 = v109[3] < v109[7]) : (v114 = 0), v114))
                    {
                      v109 += 4;
                      v108 = v112;
                    }
                  }
                  *(_OWORD *)v110 = *(_OWORD *)v109;
                }
                while (v108 <= (uint64_t)((unint64_t)(v106 - 2) >> 1));
                a2 -= 4;
                if (v109 == a2)
                {
                  *(_OWORD *)v109 = v139;
                }
                else
                {
                  *(_OWORD *)v109 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v139;
                  v115 = (char *)v109 - (char *)v8 + 16;
                  if (v115 >= 17)
                  {
                    v116 = ((unint64_t)v115 >> 4) - 2;
                    v117 = v116 >> 1;
                    v118 = &v8[4 * (v116 >> 1)];
                    v119 = *(_DWORD *)v109;
                    v120 = v109[3];
                    if (*(_DWORD *)v118 < *(_DWORD *)v109
                      || (*(_DWORD *)v118 == v119 ? (v121 = v118[3] < v120) : (v121 = 0), v121))
                    {
                      v122 = *(_QWORD *)(v109 + 1);
                      *(_OWORD *)v109 = *(_OWORD *)v118;
                      if (v116 >= 2)
                      {
                        while (1)
                        {
                          v123 = v117 - 1;
                          v117 = (v117 - 1) >> 1;
                          v124 = &v8[4 * v117];
                          if (*(_DWORD *)v124 >= v119 && (*(_DWORD *)v124 != v119 || v124[3] >= v120))
                            break;
                          *(_OWORD *)v118 = *(_OWORD *)v124;
                          v118 = &v8[4 * v117];
                          if (v123 <= 1)
                            goto LABEL_219;
                        }
                      }
                      v124 = v118;
LABEL_219:
                      *(_DWORD *)v124 = v119;
                      *(_QWORD *)(v124 + 1) = v122;
                      v124[3] = v120;
                    }
                  }
                }
              }
              while (v106-- > 2);
            }
            return;
          }
          v11 = v10 >> 1;
          v12 = &v8[4 * (v10 >> 1)];
          if ((unint64_t)v9 >= 0x801)
          {
            sub_2236B6494(a1, &a1[4 * (v10 >> 1)], a2 - 4);
            v13 = 4 * v11;
            v14 = &a1[4 * v11 - 4];
            sub_2236B6494(a1 + 4, v14, a2 - 8);
            sub_2236B6494(a1 + 8, &a1[v13 + 4], a2 - 12);
            sub_2236B6494(v14, v12, &a1[v13 + 4]);
            v134 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v12;
            *(_OWORD *)v12 = v134;
            --a3;
            v15 = *a1;
            if ((a4 & 1) != 0)
              goto LABEL_23;
LABEL_7:
            v16 = *((_DWORD *)a1 - 4);
            v17 = a1[3];
            if (v16 < SLODWORD(v15) || v16 == LODWORD(v15) && *(a1 - 1) < v17)
              goto LABEL_24;
            v18 = *((_DWORD *)a2 - 4);
            if (SLODWORD(v15) < v18 || LODWORD(v15) == v18 && v17 < *(a2 - 1))
            {
              v19 = a1 + 4;
              do
              {
                v8 = v19;
                v20 = *v19;
                if (SLODWORD(v15) < *(_DWORD *)v19)
                  break;
                v21 = v19[3];
                v19 += 4;
              }
              while (LODWORD(v15) != LODWORD(v20) || v17 >= v21);
            }
            else
            {
              v55 = a1 + 4;
              do
              {
                v8 = v55;
                if (v55 >= a2)
                  break;
                v56 = *v55;
                if (SLODWORD(v15) < *(_DWORD *)v55)
                  break;
                v57 = v55[3];
                v55 += 4;
              }
              while (LODWORD(v15) != LODWORD(v56) || v17 >= v57);
            }
            i = a2;
            if (v8 < a2)
            {
              for (i = a2 - 4; SLODWORD(v15) < v18 || LODWORD(v15) == v18 && v17 < i[3]; i -= 4)
              {
                v45 = *((_DWORD *)i - 4);
                v18 = v45;
              }
            }
            v46 = *(_QWORD *)(a1 + 1);
            while (v8 < i)
            {
              v136 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *(_OWORD *)i;
              *(_OWORD *)i = v136;
              v47 = v8 + 4;
              do
              {
                v8 = v47;
                v48 = *v47;
                if (SLODWORD(v15) < *(_DWORD *)v47)
                  break;
                v49 = v47[3];
                v47 += 4;
              }
              while (LODWORD(v15) != LODWORD(v48) || v17 >= v49);
              do
              {
                do
                {
                  v51 = *((_DWORD *)i - 4);
                  i -= 4;
                  v52 = LODWORD(v15) == v51;
                }
                while (SLODWORD(v15) < v51);
              }
              while (v52 && v17 < i[3]);
            }
            if (v8 - 4 != a1)
              *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
            a4 = 0;
            *(v8 - 4) = v15;
            *(_QWORD *)(v8 - 3) = v46;
            *(v8 - 1) = v17;
            continue;
          }
          sub_2236B6494(&a1[4 * (v10 >> 1)], a1, a2 - 4);
          --a3;
          v15 = *a1;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_23:
          v17 = a1[3];
LABEL_24:
          v24 = 0;
          v25 = *(_QWORD *)(a1 + 1);
          while (1)
          {
            v26 = LODWORD(a1[v24 + 4]);
            if (v26 >= SLODWORD(v15) && (v26 != LODWORD(v15) || a1[v24 + 7] >= v17))
              break;
            v24 += 4;
          }
          v28 = (unint64_t)&a1[v24 + 4];
          v29 = a2 - 4;
          if (v24 * 4)
          {
            do
            {
              v30 = (unint64_t)v29;
              v31 = *(_DWORD *)v29;
              if (*(_DWORD *)v29 < SLODWORD(v15))
                break;
              v32 = v29[3];
              v29 -= 4;
            }
            while (v31 != LODWORD(v15) || v32 >= v17);
LABEL_47:
            v8 = (float *)v28;
            if (v28 < v30)
            {
              v37 = (float *)v30;
              do
              {
                v135 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *(_OWORD *)v37;
                *(_OWORD *)v37 = v135;
                do
                {
                  do
                  {
                    v38 = *((_DWORD *)v8 + 4);
                    v8 += 4;
                    v39 = v38 == LODWORD(v15);
                  }
                  while (v38 < SLODWORD(v15));
                }
                while (v39 && v8[3] < v17);
                v41 = v37 - 4;
                do
                {
                  v37 = v41;
                  v42 = *(_DWORD *)v41;
                  if (*(_DWORD *)v41 < SLODWORD(v15))
                    break;
                  v43 = v41[3];
                  v41 -= 4;
                }
                while (v42 != LODWORD(v15) || v43 >= v17);
              }
              while (v8 < v37);
            }
          }
          else
          {
            v34 = a2 - 4;
            while (1)
            {
              v30 = (unint64_t)v34;
              v35 = (unint64_t)(v34 + 4);
              if (v28 >= v35)
                break;
              if (*(_DWORD *)v30 >= SLODWORD(v15))
              {
                v34 = (float *)(v30 - 16);
                if (*(_DWORD *)v30 != LODWORD(v15) || *(float *)(v30 + 12) >= v17)
                  continue;
              }
              goto LABEL_47;
            }
            v30 = v35;
            v8 = (float *)v28;
          }
          if (v8 - 4 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          *(v8 - 4) = v15;
          *(_QWORD *)(v8 - 3) = v25;
          *(v8 - 1) = v17;
          if (v28 < v30)
            goto LABEL_89;
          v54 = sub_223EE6478(a1, v8 - 4);
          if (!sub_223EE6478(v8, a2))
          {
            if (v54)
              continue;
LABEL_89:
            sub_223EE5B1C(a1, v8 - 4, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v8 - 4;
          if (v54)
            return;
          goto LABEL_1;
        }
        v73 = v8 + 4;
        v75 = v8 == a2 || v73 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v75)
          {
            v76 = 0;
            v77 = v8;
            do
            {
              v79 = v73;
              v80 = *((_DWORD *)v77 + 4);
              v81 = v77[7];
              if (v80 < *(_DWORD *)v77 || (v80 == *(_DWORD *)v77 ? (v82 = v81 < v77[3]) : (v82 = 0), v82))
              {
                v83 = *(_QWORD *)(v77 + 5);
                *(_OWORD *)v79 = *(_OWORD *)v77;
                v78 = v8;
                if (v77 != v8)
                {
                  v84 = v76;
                  while (1)
                  {
                    v85 = (float *)((char *)v8 + v84);
                    v86 = *(_DWORD *)((char *)v8 + v84 - 16);
                    if (v80 >= v86 && (v80 != v86 || v81 >= *(v85 - 1)))
                      break;
                    *(_OWORD *)v85 = *(_OWORD *)((char *)v8 + v84 - 16);
                    v84 -= 16;
                    if (!v84)
                    {
                      v78 = v8;
                      goto LABEL_137;
                    }
                  }
                  v78 = (float *)((char *)v8 + v84);
                }
LABEL_137:
                *(_DWORD *)v78 = v80;
                *(_QWORD *)(v78 + 1) = v83;
                v78[3] = v81;
              }
              v73 = v79 + 4;
              v76 += 16;
              v77 = v79;
            }
            while (v79 + 4 != a2);
          }
        }
        else if (!v75)
        {
          do
          {
            v126 = v73;
            v127 = *((_DWORD *)a1 + 4);
            v128 = a1[7];
            if (v127 < *(_DWORD *)a1 || (v127 == *(_DWORD *)a1 ? (v129 = v128 < a1[3]) : (v129 = 0), v129))
            {
              v130 = *(_QWORD *)(a1 + 5);
              for (j = v126; ; j -= 4)
              {
                *(_OWORD *)j = *((_OWORD *)j - 1);
                v132 = *((_DWORD *)j - 8);
                if (v127 >= v132 && (v127 != v132 || v128 >= *(j - 5)))
                  break;
              }
              *((_DWORD *)j - 4) = v127;
              *(_QWORD *)(j - 3) = v130;
              *(j - 1) = v128;
            }
            v73 = v126 + 4;
            a1 = v126;
          }
          while (v126 + 4 != a2);
        }
        return;
    }
  }
}

  v9 = a2 - 10;
  v10 = (int *)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_223F0C258(a3, a2 - 10, v10))
        {
          v50 = *((_QWORD *)v10 + 4);
          v44 = *(_OWORD *)v10;
          v47 = *((_OWORD *)v10 + 1);
          v26 = *(_OWORD *)v9;
          v27 = *(_OWORD *)(a2 - 6);
          *((_QWORD *)v10 + 4) = *((_QWORD *)a2 - 1);
          *(_OWORD *)v10 = v26;
          *((_OWORD *)v10 + 1) = v27;
          *(_OWORD *)v9 = v44;
          *(_OWORD *)(a2 - 6) = v47;
          *((_QWORD *)a2 - 1) = v50;
        }
        return;
      case 3uLL:
        sub_223F0C8C4((__int128 *)v10, v10 + 10, a2 - 10, a3);
        return;
      case 4uLL:
        v28 = (__int128 *)(v10 + 10);
        v29 = (__int128 *)(v10 + 20);
        sub_223F0C8C4((__int128 *)v10, v10 + 10, v10 + 20, a3);
        if (sub_223F0C258(a3, v9, v10 + 20))
        {
          v30 = *v29;
          v31 = *((_OWORD *)v10 + 6);
          v32 = *((_QWORD *)v10 + 14);
          v33 = *((_QWORD *)v9 + 4);
          v34 = *((_OWORD *)v9 + 1);
          *v29 = *(_OWORD *)v9;
          *((_OWORD *)v10 + 6) = v34;
          *((_QWORD *)v10 + 14) = v33;
          *((_QWORD *)v9 + 4) = v32;
          *(_OWORD *)v9 = v30;
          *((_OWORD *)v9 + 1) = v31;
          if (sub_223F0C258(a3, v10 + 20, v10 + 10))
          {
            v35 = *((_QWORD *)v10 + 9);
            v37 = *v28;
            v36 = *(_OWORD *)(v10 + 14);
            v38 = *((_OWORD *)v10 + 6);
            *v28 = *v29;
            *(_OWORD *)(v10 + 14) = v38;
            *((_QWORD *)v10 + 9) = *((_QWORD *)v10 + 14);
            *v29 = v37;
            *((_OWORD *)v10 + 6) = v36;
            *((_QWORD *)v10 + 14) = v35;
            if (sub_223F0C258(a3, v10 + 10, v10))
            {
              v51 = *((_QWORD *)v10 + 4);
              v45 = *(_OWORD *)v10;
              v48 = *((_OWORD *)v10 + 1);
              v39 = *(_OWORD *)(v10 + 14);
              *(_OWORD *)v10 = *v28;
              *((_OWORD *)v10 + 1) = v39;
              *((_QWORD *)v10 + 4) = *((_QWORD *)v10 + 9);
              *v28 = v45;
              *(_OWORD *)(v10 + 14) = v48;
              *((_QWORD *)v10 + 9) = v51;
            }
          }
        }
        return;
      case 5uLL:
        sub_223F0D458((uint64_t)v10, (__int128 *)(v10 + 10), v10 + 20, (__int128 *)(v10 + 30), (__int128 *)(a2 - 10), a3);
        return;
      default:
        if (v13 <= 959)
        {
          if ((a5 & 1) != 0)
            sub_223F0C3AC((uint64_t)v10, a2, a3);
          else
            sub_223F0C67C((uint64_t)v10, a2, a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = (__int128 *)&v10[10 * (v14 >> 1)];
          if ((unint64_t)v13 < 0x1401)
          {
            sub_223F0C8C4(v16, v10, a2 - 10, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_223F0C8C4((__int128 *)v10, (int *)v16, a2 - 10, a3);
            v17 = 10 * v15;
            v18 = &v10[10 * v15 - 10];
            sub_223F0C8C4((__int128 *)(v10 + 10), v18, a2 - 20, a3);
            v19 = (__int128 *)(v10 + 20);
            v20 = &v10[v17 + 10];
            sub_223F0C8C4(v19, v20, a2 - 30, a3);
            sub_223F0C8C4((__int128 *)v18, (int *)v16, v20, a3);
            v49 = *(_QWORD *)(a1 + 32);
            v43 = *(_OWORD *)a1;
            v46 = *(_OWORD *)(a1 + 16);
            v21 = *v16;
            v22 = v16[1];
            *(_QWORD *)(a1 + 32) = *((_QWORD *)v16 + 4);
            *(_OWORD *)a1 = v21;
            *(_OWORD *)(a1 + 16) = v22;
            *((_QWORD *)v16 + 4) = v49;
            *v16 = v43;
            v16[1] = v46;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((sub_223F0C258(a3, (int *)(a1 - 40), (_DWORD *)a1) & 1) == 0)
          {
            v10 = sub_223F0CA38((__int128 *)a1, (unint64_t)a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v23 = sub_223F0CE08((__int128 *)a1, a2, a3);
          if ((v24 & 1) == 0)
            goto LABEL_14;
          v25 = sub_223F0D1B8(a1, v23, a3);
          v10 = (int *)(v23 + 40);
          if (!sub_223F0D1B8(v23 + 40, (uint64_t)a2, a3))
          {
            v11 = v12 + 1;
            if (v25)
              continue;
LABEL_14:
            sub_223F0BDE4(a1, v23, a3, -v12, a5 & 1);
            v10 = (int *)(v23 + 40);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (int *)v23;
          if (v25)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
        {
          v40 = (v14 - 2) >> 1;
          v41 = v40 + 1;
          v42 = (__n128 *)&v10[10 * v40];
          do
          {
            sub_223F0D61C((uint64_t)v10, a3, v14, v42);
            v42 = (__n128 *)((char *)v42 - 40);
            --v41;
          }
          while (v41);
          sub_223F0D788((unint64_t)v10, (__int128 *)a2, a3);
        }
        return;
    }
  }
}

  v9 = a2 - 40;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (uint64_t)&a2[-v10];
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a2[-v10] >> 3);
    switch(v12)
    {
      case 0:
      case 1:
        return a5.n128_f64[0];
      case 2:
        v71 = a2 - 32;
        a5.n128_u32[0] = *((_DWORD *)a2 - 8);
        v72 = (__int128 *)(v10 + 8);
        if (a5.n128_f32[0] >= *(float *)(v10 + 8))
          return a5.n128_f64[0];
        v73 = *(_BYTE *)v10;
        *(_BYTE *)v10 = *(a2 - 40);
        *(a2 - 40) = v73;
        v144 = *v72;
        if (*(_BYTE *)(v10 + 32))
        {
          v74 = *(_QWORD *)(v10 + 24);
          *v72 = *(_OWORD *)v71;
          v76 = *(a2 - 8);
          v75 = a2 - 8;
          v77 = v75 - 8;
          if (v76)
            *(_QWORD *)(v10 + 24) = *(_QWORD *)v77;
          else
            *(_BYTE *)(v10 + 32) = 0;
          v131 = 1;
        }
        else
        {
          *v72 = *(_OWORD *)v71;
          if (!*(a2 - 8))
          {
            a5.n128_u64[0] = v144;
            *(_OWORD *)v71 = v144;
            return a5.n128_f64[0];
          }
          v74 = 0;
          v131 = 0;
          v77 = a2 - 16;
          *(_QWORD *)(v10 + 24) = *((_QWORD *)a2 - 2);
          *(_BYTE *)(v10 + 32) = 1;
          v75 = a2 - 8;
        }
        v132 = *v75;
        a5.n128_u64[0] = v144;
        *(_OWORD *)v71 = v144;
        if (v132 == v131)
        {
          if (v132)
            *(_QWORD *)v77 = v74;
        }
        else if (v132)
        {
          *v75 = 0;
        }
        else
        {
          *(_QWORD *)v77 = v74;
          *v75 = 1;
        }
        return a5.n128_f64[0];
      case 3:
        a5.n128_u64[0] = sub_223F34424((char *)v10, (char *)(v10 + 40), v9).n128_u64[0];
        return a5.n128_f64[0];
      case 4:
        a5.n128_u64[0] = sub_223F34D1C(v10, v10 + 40, v10 + 80, (uint64_t)v9).n128_u64[0];
        return a5.n128_f64[0];
      case 5:
        a5.n128_u64[0] = sub_223F33F3C(v10, v10 + 40, v10 + 80, v10 + 120, (uint64_t)v9).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v11 > 959)
        {
          if (!a3)
          {
            if ((char *)v10 == a2)
              return a5.n128_f64[0];
            v91 = (unint64_t)(v12 - 2) >> 1;
            v92 = v91;
            while (1)
            {
              v93 = v92;
              if (v91 >= v92)
              {
                v94 = (2 * v92) | 1;
                v95 = v10 + 40 * v94;
                if (2 * v92 + 2 < v12 && *(float *)(v95 + 8) < *(float *)(v95 + 48))
                {
                  v95 += 40;
                  v94 = 2 * v92 + 2;
                }
                v96 = v10 + 40 * v92;
                v97 = *(float *)(v96 + 8);
                if (*(float *)(v95 + 8) >= v97)
                  break;
              }
LABEL_160:
              v92 = v93 - 1;
              if (!v93)
              {
                v105 = v11 / 0x28uLL;
                while (1)
                {
                  v107 = a2;
                  v108 = *(_BYTE *)v10;
                  v148 = *(_OWORD *)(v10 + 8);
                  if (*(_BYTE *)(v10 + 32))
                  {
                    v109 = *(_QWORD *)(v10 + 24);
                    v110 = 1;
                  }
                  else
                  {
                    v110 = 0;
                    v109 = 0;
                  }
                  v111 = 0;
                  v112 = v10;
                  do
                  {
                    v113 = v112;
                    v112 += 40 * v111 + 40;
                    v114 = 2 * v111;
                    v111 = (2 * v111) | 1;
                    v115 = v114 + 2;
                    if (v115 < v105 && *(float *)(v112 + 8) < *(float *)(v112 + 48))
                    {
                      v112 += 40;
                      v111 = v115;
                    }
                    *(_BYTE *)v113 = *(_BYTE *)v112;
                    *(_OWORD *)(v113 + 8) = *(_OWORD *)(v112 + 8);
                    if (*(unsigned __int8 *)(v113 + 32) == *(unsigned __int8 *)(v112 + 32))
                    {
                      if (*(_BYTE *)(v113 + 32))
                        *(_QWORD *)(v113 + 24) = *(_QWORD *)(v112 + 24);
                    }
                    else if (*(_BYTE *)(v113 + 32))
                    {
                      *(_BYTE *)(v113 + 32) = 0;
                    }
                    else
                    {
                      *(_QWORD *)(v113 + 24) = *(_QWORD *)(v112 + 24);
                      *(_BYTE *)(v113 + 32) = 1;
                    }
                  }
                  while (v111 <= (uint64_t)((unint64_t)(v105 - 2) >> 1));
                  v116 = (_OWORD *)(v112 + 8);
                  a2 -= 40;
                  if ((char *)v112 != v107 - 40)
                    break;
                  *(_BYTE *)v112 = v108;
                  a5.n128_u64[0] = v148;
                  *v116 = v148;
                  if (*(unsigned __int8 *)(v112 + 32) == v110)
                  {
                    if (*(_BYTE *)(v112 + 32))
                      *(_QWORD *)(v112 + 24) = v109;
                  }
                  else if (*(_BYTE *)(v112 + 32))
                  {
                    *(_BYTE *)(v112 + 32) = 0;
                  }
                  else
                  {
                    *(_QWORD *)(v112 + 24) = v109;
                    *(_BYTE *)(v112 + 32) = 1;
                  }
LABEL_189:
                  if (v105-- <= 2)
                    return a5.n128_f64[0];
                }
                *(_BYTE *)v112 = *(v107 - 40);
                *v116 = *((_OWORD *)v107 - 2);
                v117 = *(unsigned __int8 *)(v112 + 32);
                if (v117 == *(v107 - 8))
                {
                  if (*(_BYTE *)(v112 + 32))
                  {
                    *(_QWORD *)(v112 + 24) = *((_QWORD *)v107 - 2);
                    goto LABEL_214;
                  }
                }
                else
                {
                  if (*(_BYTE *)(v112 + 32))
                  {
                    *(_BYTE *)(v112 + 32) = 0;
                  }
                  else
                  {
                    *(_QWORD *)(v112 + 24) = *((_QWORD *)v107 - 2);
                    *(_BYTE *)(v112 + 32) = 1;
                  }
LABEL_214:
                  v117 = *(v107 - 8);
                }
                *a2 = v108;
                a5.n128_u64[0] = v148;
                *((_OWORD *)v107 - 2) = v148;
                if (v117 == v110)
                {
                  if (v117)
                  {
                    *((_QWORD *)v107 - 2) = v109;
                    v118 = v112 + 40 - v10;
                    if (v118 < 41)
                      goto LABEL_189;
                    goto LABEL_222;
                  }
LABEL_221:
                  v118 = v112 + 40 - v10;
                  if (v118 < 41)
                    goto LABEL_189;
                }
                else
                {
                  if (v117)
                  {
                    *(v107 - 8) = 0;
                    goto LABEL_221;
                  }
                  *((_QWORD *)v107 - 2) = v109;
                  *(v107 - 8) = 1;
                  v118 = v112 + 40 - v10;
                  if (v118 < 41)
                    goto LABEL_189;
                }
LABEL_222:
                v119 = (v118 / 0x28uLL - 2) >> 1;
                v120 = v10 + 40 * v119;
                a5.n128_u32[0] = *(_DWORD *)v116;
                if (*(float *)(v120 + 8) >= *(float *)v116)
                  goto LABEL_189;
                v121 = *(_BYTE *)v112;
                v140 = *(_DWORD *)(v112 + 20);
                v137 = *(_QWORD *)(v112 + 12);
                if (*(_BYTE *)(v112 + 32))
                {
                  v122 = *(_QWORD *)(v112 + 24);
                  v123 = 1;
                }
                else
                {
                  v122 = 0;
                  v123 = 0;
                }
                while (2)
                {
                  v124 = v120;
                  *(_BYTE *)v112 = *(_BYTE *)v120;
                  *(_OWORD *)(v112 + 8) = *(_OWORD *)(v120 + 8);
                  if (*(unsigned __int8 *)(v112 + 32) == *(unsigned __int8 *)(v120 + 32))
                  {
                    if (*(_BYTE *)(v112 + 32))
                    {
                      *(_QWORD *)(v112 + 24) = *(_QWORD *)(v120 + 24);
                      if (!v119)
                        goto LABEL_239;
                      goto LABEL_236;
                    }
                  }
                  else
                  {
                    if (!*(_BYTE *)(v112 + 32))
                    {
                      *(_QWORD *)(v112 + 24) = *(_QWORD *)(v120 + 24);
                      *(_BYTE *)(v112 + 32) = 1;
                      if (!v119)
                      {
LABEL_239:
                        *(_BYTE *)v124 = v121;
                        *(_DWORD *)(v124 + 8) = a5.n128_u32[0];
                        *(_QWORD *)(v124 + 12) = v137;
                        *(_DWORD *)(v124 + 20) = v140;
                        if (*(unsigned __int8 *)(v124 + 32) == v123)
                        {
                          if (*(_BYTE *)(v124 + 32))
                            *(_QWORD *)(v124 + 24) = v122;
                        }
                        else if (*(_BYTE *)(v124 + 32))
                        {
                          *(_BYTE *)(v124 + 32) = 0;
                        }
                        else
                        {
                          *(_QWORD *)(v124 + 24) = v122;
                          *(_BYTE *)(v124 + 32) = 1;
                        }
                        goto LABEL_189;
                      }
                      goto LABEL_236;
                    }
                    *(_BYTE *)(v112 + 32) = 0;
                  }
                  if (!v119)
                    goto LABEL_239;
LABEL_236:
                  v119 = (v119 - 1) >> 1;
                  v120 = v10 + 40 * v119;
                  v112 = v124;
                  if (*(float *)(v120 + 8) >= a5.n128_f32[0])
                    goto LABEL_239;
                  continue;
                }
              }
            }
            v98 = *(_BYTE *)v96;
            v99 = v10 + 40 * v93;
            v150 = *(_DWORD *)(v99 + 20);
            v146 = *(_QWORD *)(v99 + 12);
            if (*(_BYTE *)(v99 + 32))
            {
              v100 = *(_QWORD *)(v10 + 40 * v93 + 24);
              v101 = 1;
            }
            else
            {
              v100 = 0;
              v101 = 0;
            }
            while (1)
            {
              v102 = v96;
              v96 = v95;
              *(_BYTE *)v102 = *(_BYTE *)v95;
              *(_OWORD *)(v102 + 8) = *(_OWORD *)(v95 + 8);
              if (*(unsigned __int8 *)(v102 + 32) != *(unsigned __int8 *)(v95 + 32))
                break;
              if (!*(_BYTE *)(v102 + 32))
                goto LABEL_176;
              *(_QWORD *)(v102 + 24) = *(_QWORD *)(v95 + 24);
              if (v91 < v94)
                goto LABEL_181;
LABEL_177:
              v103 = 2 * v94;
              v94 = (2 * v94) | 1;
              v95 = v10 + 40 * v94;
              v104 = v103 + 2;
              if (v104 < v12 && *(float *)(v95 + 8) < *(float *)(v95 + 48))
              {
                v95 += 40;
                v94 = v104;
              }
              if (*(float *)(v95 + 8) < v97)
              {
LABEL_181:
                *(_BYTE *)v96 = v98;
                *(float *)(v96 + 8) = v97;
                *(_QWORD *)(v96 + 12) = v146;
                *(_DWORD *)(v96 + 20) = v150;
                if (*(unsigned __int8 *)(v96 + 32) == v101)
                {
                  if (*(_BYTE *)(v96 + 32))
                    *(_QWORD *)(v96 + 24) = v100;
                }
                else if (*(_BYTE *)(v96 + 32))
                {
                  *(_BYTE *)(v96 + 32) = 0;
                }
                else
                {
                  *(_QWORD *)(v96 + 24) = v100;
                  *(_BYTE *)(v96 + 32) = 1;
                }
                goto LABEL_160;
              }
            }
            if (!*(_BYTE *)(v102 + 32))
            {
              *(_QWORD *)(v102 + 24) = *(_QWORD *)(v95 + 24);
              *(_BYTE *)(v102 + 32) = 1;
              if (v91 < v94)
                goto LABEL_181;
              goto LABEL_177;
            }
            *(_BYTE *)(v102 + 32) = 0;
LABEL_176:
            if (v91 < v94)
              goto LABEL_181;
            goto LABEL_177;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = (char *)(v10 + 40 * ((unint64_t)v12 >> 1));
          if ((unint64_t)v11 < 0x1401)
          {
            a5 = sub_223F34424(v14, (char *)a1, v9);
            goto LABEL_10;
          }
          sub_223F34424((char *)a1, v14, v9);
          sub_223F34424((char *)(a1 + 40), (char *)(40 * v13 + a1 - 40), a2 - 80);
          sub_223F34424((char *)(a1 + 80), (char *)(a1 + 40 + 40 * v13), a2 - 120);
          sub_223F34424((char *)(40 * v13 + a1 - 40), v14, (char *)(a1 + 40 + 40 * v13));
          v15 = *(_BYTE *)a1;
          *(_BYTE *)a1 = *v14;
          *v14 = v15;
          v16 = (__n128 *)(a1 + 8);
          v17 = (__n128 *)(a1 + 8 + 40 * v13);
          v141 = *(__n128 *)(a1 + 8);
          if (*(_BYTE *)(a1 + 32))
          {
            v18 = *(_QWORD *)(a1 + 24);
            *v16 = *v17;
            v19 = a1 + 40 * v13;
            v21 = *(unsigned __int8 *)(v19 + 32);
            v20 = (_BYTE *)(v19 + 32);
            v22 = v20 - 8;
            if (v21 == 1)
            {
              *(_QWORD *)(a1 + 24) = *v22;
              a5 = v141;
              *v17 = v141;
              *v22 = v18;
              goto LABEL_10;
            }
            v47 = 0;
            v46 = 1;
          }
          else
          {
            *v16 = *v17;
            v44 = a1 + 40 * v13;
            v45 = *(unsigned __int8 *)(v44 + 32);
            v20 = (_BYTE *)(v44 + 32);
            if (!v45)
            {
              a5 = v141;
              *v17 = v141;
              goto LABEL_10;
            }
            v18 = 0;
            v46 = 0;
            v22 = (_QWORD *)(a1 + 24 + 40 * v13);
            *(_QWORD *)(a1 + 24) = *v22;
            v47 = 1;
          }
          *(_BYTE *)(a1 + 32) = v47;
          v48 = *v20;
          a5 = v141;
          *v17 = v141;
          if (v48 == v46)
          {
            if (v48)
              *v22 = v18;
          }
          else if (v48)
          {
            *v20 = 0;
          }
          else
          {
            *v22 = v18;
            *v20 = 1;
          }
LABEL_10:
          --a3;
          if ((a4 & 1) == 0)
          {
            a5.n128_u32[0] = *(_DWORD *)(a1 + 8);
            if (*(float *)(a1 - 32) < a5.n128_f32[0])
              goto LABEL_13;
            v53 = *(_BYTE *)a1;
            v136 = *(_QWORD *)(a1 + 12);
            v139 = *(_DWORD *)(a1 + 20);
            if (*(_BYTE *)(a1 + 32))
            {
              v54 = *(_QWORD *)(a1 + 24);
              v5 = 1;
              if (a5.n128_f32[0] < *((float *)a2 - 8))
                goto LABEL_74;
            }
            else
            {
              v54 = 0;
              v5 = 0;
              if (a5.n128_f32[0] < *((float *)a2 - 8))
              {
LABEL_74:
                v55 = a1;
                do
                {
                  v10 = v55 + 40;
                  v56 = *(float *)(v55 + 48);
                  v55 += 40;
                }
                while (a5.n128_f32[0] >= v56);
                goto LABEL_81;
              }
            }
            v57 = a1 + 40;
            do
            {
              v10 = v57;
              if (v57 >= (unint64_t)a2)
                break;
              v58 = *(float *)(v57 + 8);
              v57 += 40;
            }
            while (a5.n128_f32[0] >= v58);
LABEL_81:
            v59 = a2;
            if (v10 < (unint64_t)a2)
            {
              v60 = a2;
              do
              {
                v59 = v60 - 40;
                v61 = *((float *)v60 - 8);
                v60 -= 40;
              }
              while (a5.n128_f32[0] < v61);
            }
            while (v10 < (unint64_t)v59)
            {
              v62 = *(_BYTE *)v10;
              *(_BYTE *)v10 = *v59;
              *v59 = v62;
              v63 = v59 + 8;
              v64 = (_OWORD *)(v10 + 8);
              v143 = *(_OWORD *)(v10 + 8);
              if (*(_BYTE *)(v10 + 32))
              {
                v65 = *(_QWORD *)(v10 + 24);
                *v64 = *v63;
                v66 = v59 + 32;
                v67 = v59 + 24;
                if (v59[32])
                {
                  *(_QWORD *)(v10 + 24) = *v67;
                  v68 = *v66;
                  *v63 = v143;
                  if (v68 != 1)
                    goto LABEL_94;
                }
                else
                {
                  *(_BYTE *)(v10 + 32) = 0;
                  v68 = *v66;
                  *v63 = v143;
                  if (v68 != 1)
                  {
LABEL_94:
                    if (v68)
                    {
                      *v66 = 0;
                    }
                    else
                    {
                      *v67 = v65;
                      *v66 = 1;
                    }
                    goto LABEL_98;
                  }
                }
              }
              else
              {
                *v64 = *v63;
                v66 = v59 + 32;
                if (!v59[32])
                {
                  *v63 = v143;
                  goto LABEL_98;
                }
                v65 = 0;
                v67 = v59 + 24;
                *(_QWORD *)(v10 + 24) = *((_QWORD *)v59 + 3);
                *(_BYTE *)(v10 + 32) = 1;
                v68 = *v66;
                *v63 = v143;
                if (v68)
                  goto LABEL_94;
              }
              if (v68)
                *v67 = v65;
              do
              {
LABEL_98:
                v69 = *(float *)(v10 + 48);
                v10 += 40;
              }
              while (a5.n128_f32[0] >= v69);
              do
              {
                v70 = *((float *)v59 - 8);
                v59 -= 40;
              }
              while (a5.n128_f32[0] < v70);
            }
            if (v10 - 40 != a1)
            {
              *(_BYTE *)a1 = *(_BYTE *)(v10 - 40);
              *(_OWORD *)(a1 + 8) = *(_OWORD *)(v10 - 32);
              if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(v10 - 8))
              {
                if (*(_BYTE *)(a1 + 32))
                  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v10 - 16);
              }
              else if (*(_BYTE *)(a1 + 32))
              {
                *(_BYTE *)(a1 + 32) = 0;
              }
              else
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(v10 - 16);
                *(_BYTE *)(a1 + 32) = 1;
              }
            }
            *(_BYTE *)(v10 - 40) = v53;
            *(_DWORD *)(v10 - 32) = a5.n128_u32[0];
            *(_DWORD *)(v10 - 20) = v139;
            *(_QWORD *)(v10 - 28) = v136;
            if (*(unsigned __int8 *)(v10 - 8) == (_DWORD)v5)
            {
              if (!*(_BYTE *)(v10 - 8))
                goto LABEL_114;
              *(_QWORD *)(v10 - 16) = v54;
              a4 = 0;
            }
            else if (*(_BYTE *)(v10 - 8))
            {
              *(_BYTE *)(v10 - 8) = 0;
              a4 = 0;
            }
            else
            {
              *(_QWORD *)(v10 - 16) = v54;
              *(_BYTE *)(v10 - 8) = 1;
LABEL_114:
              a4 = 0;
            }
            continue;
          }
          a5.n128_u32[0] = *(_DWORD *)(a1 + 8);
LABEL_13:
          v23 = *(_BYTE *)a1;
          v135 = *(_QWORD *)(a1 + 12);
          v138 = *(_DWORD *)(a1 + 20);
          if (*(_BYTE *)(a1 + 32))
          {
            v24 = *(_QWORD *)(a1 + 24);
            v25 = 1;
          }
          else
          {
            v24 = 0;
            v25 = 0;
          }
          v26 = 0;
          do
          {
            v27 = *(float *)(a1 + v26 + 48);
            v26 += 40;
          }
          while (v27 < a5.n128_f32[0]);
          v28 = a1 + v26;
          v29 = a2;
          if (v26 == 40)
          {
            v32 = a2;
            while (v28 < (unint64_t)v32)
            {
              v30 = v32 - 40;
              v33 = *((float *)v32 - 8);
              v32 -= 40;
              if (v33 < a5.n128_f32[0])
                goto LABEL_24;
            }
            v30 = v32;
            v10 = v28;
          }
          else
          {
            do
            {
              v30 = v29 - 40;
              v31 = *((float *)v29 - 8);
              v29 -= 40;
            }
            while (v31 >= a5.n128_f32[0]);
LABEL_24:
            v10 = v28;
            if (v28 < (unint64_t)v30)
            {
              v34 = (unint64_t)v30;
              do
              {
                v35 = *(_BYTE *)v10;
                *(_BYTE *)v10 = *(_BYTE *)v34;
                *(_BYTE *)v34 = v35;
                v36 = (_OWORD *)(v34 + 8);
                v37 = (_OWORD *)(v10 + 8);
                v142 = *(_OWORD *)(v10 + 8);
                if (*(_BYTE *)(v10 + 32))
                {
                  v38 = *(_QWORD *)(v10 + 24);
                  *v37 = *v36;
                  v39 = (_BYTE *)(v34 + 32);
                  v40 = (_QWORD *)(v34 + 24);
                  if (*(_BYTE *)(v34 + 32))
                  {
                    *(_QWORD *)(v10 + 24) = *v40;
                    v41 = *v39;
                    *v36 = v142;
                    if (v41 == 1)
                      goto LABEL_29;
                  }
                  else
                  {
                    *(_BYTE *)(v10 + 32) = 0;
                    v41 = *v39;
                    *v36 = v142;
                    if (v41 == 1)
                    {
LABEL_29:
                      if (v41)
                        *v40 = v38;
                      goto LABEL_39;
                    }
                  }
                }
                else
                {
                  *v37 = *v36;
                  v39 = (_BYTE *)(v34 + 32);
                  if (!*(_BYTE *)(v34 + 32))
                  {
                    *v36 = v142;
                    goto LABEL_39;
                  }
                  v38 = 0;
                  v40 = (_QWORD *)(v34 + 24);
                  *(_QWORD *)(v10 + 24) = *(_QWORD *)(v34 + 24);
                  *(_BYTE *)(v10 + 32) = 1;
                  v41 = *v39;
                  *v36 = v142;
                  if (!v41)
                    goto LABEL_29;
                }
                if (v41)
                {
                  *v39 = 0;
                }
                else
                {
                  *v40 = v38;
                  *v39 = 1;
                }
                do
                {
LABEL_39:
                  v42 = *(float *)(v10 + 48);
                  v10 += 40;
                }
                while (v42 < a5.n128_f32[0]);
                do
                {
                  v43 = *(float *)(v34 - 32);
                  v34 -= 40;
                }
                while (v43 >= a5.n128_f32[0]);
              }
              while (v10 < v34);
            }
          }
          if (v10 - 40 != a1)
          {
            *(_BYTE *)a1 = *(_BYTE *)(v10 - 40);
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(v10 - 32);
            if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(v10 - 8))
            {
              if (*(_BYTE *)(a1 + 32))
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(v10 - 16);
            }
            else if (*(_BYTE *)(a1 + 32))
            {
              *(_BYTE *)(a1 + 32) = 0;
            }
            else
            {
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(v10 - 16);
              *(_BYTE *)(a1 + 32) = 1;
            }
          }
          *(_BYTE *)(v10 - 40) = v23;
          *(_DWORD *)(v10 - 32) = a5.n128_u32[0];
          *(_DWORD *)(v10 - 20) = v138;
          *(_QWORD *)(v10 - 28) = v135;
          if (*(unsigned __int8 *)(v10 - 8) == v25)
          {
            if (*(_BYTE *)(v10 - 8))
            {
              *(_QWORD *)(v10 - 16) = v24;
              if (v28 < (unint64_t)v30)
                goto LABEL_67;
              goto LABEL_65;
            }
            goto LABEL_64;
          }
          if (*(_BYTE *)(v10 - 8))
          {
            *(_BYTE *)(v10 - 8) = 0;
LABEL_64:
            if (v28 < (unint64_t)v30)
              goto LABEL_67;
            goto LABEL_65;
          }
          *(_QWORD *)(v10 - 16) = v24;
          *(_BYTE *)(v10 - 8) = 1;
          if (v28 < (unint64_t)v30)
            goto LABEL_67;
LABEL_65:
          v49 = sub_223F34984(a1, v10 - 40, a5);
          v51 = v50;
          a5.n128_u64[0] = sub_223F34984(v10, (uint64_t)a2, v49).n128_u64[0];
          if (!v52)
          {
            if ((v51 & 1) != 0)
              continue;
LABEL_67:
            sub_223F32EA8(a1, v10 - 40, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (char *)(v10 - 40);
          if ((v51 & 1) != 0)
            return a5.n128_f64[0];
          goto LABEL_1;
        }
        v78 = (char *)(v10 + 40);
        v80 = (char *)v10 == a2 || v78 == a2;
        if ((a4 & 1) == 0)
        {
          if (!v80)
          {
            v125 = (_BYTE *)(v10 + 72);
            do
            {
              v126 = v78;
              a5.n128_u32[0] = *(_DWORD *)(a1 + 48);
              if (a5.n128_f32[0] < *(float *)(a1 + 8))
              {
                v127 = *v78;
                v147 = *(_QWORD *)(a1 + 52);
                v151 = *(_DWORD *)(a1 + 60);
                v128 = *(unsigned __int8 *)(a1 + 72);
                if (*(_BYTE *)(a1 + 72))
                {
                  v5 = *(_QWORD *)(a1 + 64);
                  v128 = 1;
                }
                else
                {
                  v5 &= 0xFFFFFFFFFFFFFF00;
                }
                v129 = v125;
                do
                {
                  *(v129 - 32) = *(v129 - 72);
                  *(_OWORD *)(v129 - 24) = *((_OWORD *)v129 - 4);
                  if (*v129 == *(v129 - 40))
                  {
                    if (*v129)
                      *((_QWORD *)v129 - 1) = *((_QWORD *)v129 - 6);
                  }
                  else if (*v129)
                  {
                    *v129 = 0;
                  }
                  else
                  {
                    *((_QWORD *)v129 - 1) = *((_QWORD *)v129 - 6);
                    *v129 = 1;
                  }
                  v130 = *((float *)v129 - 26);
                  v129 -= 40;
                }
                while (a5.n128_f32[0] < v130);
                *(v129 - 32) = v127;
                *((_DWORD *)v129 - 6) = a5.n128_u32[0];
                *((_DWORD *)v129 - 3) = v151;
                *(_QWORD *)(v129 - 20) = v147;
                if (*v129 == v128)
                {
                  if (*v129)
                    *((_QWORD *)v129 - 1) = v5;
                }
                else if (*v129)
                {
                  *v129 = 0;
                }
                else
                {
                  *((_QWORD *)v129 - 1) = v5;
                  *v129 = 1;
                }
              }
              v78 = v126 + 40;
              v125 += 40;
              a1 = (uint64_t)v126;
            }
            while (v126 + 40 != a2);
          }
          return a5.n128_f64[0];
        }
        if (v80)
          return a5.n128_f64[0];
        v81 = 0;
        v82 = v10;
        while (2)
        {
          v83 = v78;
          a5.n128_u32[0] = *(_DWORD *)(v82 + 48);
          if (a5.n128_f32[0] >= *(float *)(v82 + 8))
            goto LABEL_136;
          v84 = *v78;
          v145 = *(_QWORD *)(v82 + 52);
          v149 = *(_DWORD *)(v82 + 60);
          v85 = *(unsigned __int8 *)(v82 + 72);
          if (*(_BYTE *)(v82 + 72))
          {
            v5 = *(_QWORD *)(v82 + 64);
            v85 = 1;
          }
          else
          {
            v5 &= 0xFFFFFFFFFFFFFF00;
          }
          v86 = v81;
          while (1)
          {
            v87 = v86;
            v88 = v10 + v86;
            *(_BYTE *)(v88 + 40) = *(_BYTE *)v88;
            *(_OWORD *)(v88 + 48) = *(_OWORD *)(v88 + 8);
            if (*(unsigned __int8 *)(v88 + 72) != *(unsigned __int8 *)(v88 + 32))
              break;
            if (*(_BYTE *)(v88 + 72))
            {
              *(_QWORD *)(v88 + 64) = *(_QWORD *)(v88 + 24);
              if (!v87)
                goto LABEL_152;
              goto LABEL_149;
            }
LABEL_148:
            if (!v87)
              goto LABEL_152;
LABEL_149:
            v86 = v87 - 40;
            if (a5.n128_f32[0] >= *(float *)(v10 + v87 - 32))
            {
              v89 = v10 + v87;
              goto LABEL_153;
            }
          }
          if (*(_BYTE *)(v88 + 72))
          {
            *(_BYTE *)(v88 + 72) = 0;
            goto LABEL_148;
          }
          *(_QWORD *)(v88 + 64) = *(_QWORD *)(v88 + 24);
          *(_BYTE *)(v88 + 72) = 1;
          if (v87)
            goto LABEL_149;
LABEL_152:
          v89 = v10;
LABEL_153:
          *(_BYTE *)v89 = v84;
          v90 = v10 + v87;
          *(_DWORD *)(v10 + v87 + 8) = a5.n128_u32[0];
          *(_QWORD *)(v89 + 12) = v145;
          *(_DWORD *)(v89 + 20) = v149;
          if (*(unsigned __int8 *)(v89 + 32) == v85)
          {
            if (*(_BYTE *)(v89 + 32))
              *(_QWORD *)(v90 + 24) = v5;
          }
          else if (*(_BYTE *)(v89 + 32))
          {
            *(_BYTE *)(v89 + 32) = 0;
          }
          else
          {
            *(_QWORD *)(v90 + 24) = v5;
            *(_BYTE *)(v89 + 32) = 1;
          }
LABEL_136:
          v78 = v83 + 40;
          v81 += 40;
          v82 = (unint64_t)v83;
          if (v83 + 40 != a2)
            continue;
          return a5.n128_f64[0];
        }
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v59 = a2 - 4;
        v60 = *((_DWORD *)a2 - 4);
        if (v60 < *(_DWORD *)v8 || (v60 == *(_DWORD *)v8 ? (v61 = *(a2 - 1) < v8[3]) : (v61 = 0), v61))
        {
          v137 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v59;
          *(_OWORD *)v59 = v137;
        }
        return;
      case 3uLL:
        sub_2236B6494(v8, v8 + 4, a2 - 4);
        return;
      case 4uLL:
        v62 = (__int128 *)(v8 + 4);
        v63 = (__int128 *)(v8 + 8);
        sub_2236B6494(v8, v8 + 4, v8 + 8);
        v64 = a2 - 4;
        v65 = *((_DWORD *)a2 - 4);
        v66 = *((_DWORD *)v8 + 8);
        if (v65 < v66 || (v65 == v66 ? (v67 = *(a2 - 1) < v8[11]) : (v67 = 0), v67))
        {
          v68 = *v63;
          *v63 = *(_OWORD *)v64;
          *(_OWORD *)v64 = v68;
          v69 = *((_DWORD *)v8 + 8);
          v70 = *((_DWORD *)v8 + 4);
          if (v69 < v70 || v69 == v70 && v8[11] < v8[7])
          {
            v71 = *v62;
            *v62 = *v63;
            *v63 = v71;
            v72 = *((_DWORD *)v8 + 4);
            if (v72 < *(_DWORD *)v8 || v72 == *(_DWORD *)v8 && v8[7] < v8[3])
            {
              v138 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *v62;
              *v62 = v138;
            }
          }
        }
        return;
      case 5uLL:
        sub_2236B62E8((uint64_t)v8, v8 + 4, v8 + 8, (uint64_t)(v8 + 12), (uint64_t)(a2 - 4));
        return;
      default:
        if (v9 > 383)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v88 = (v10 - 2) >> 1;
              v89 = v88;
              do
              {
                v90 = v89;
                if (v88 >= v89)
                {
                  v91 = (2 * v89) | 1;
                  v92 = &v8[4 * v91];
                  if (2 * v90 + 2 < (uint64_t)v10)
                  {
                    v93 = *((_DWORD *)v92 + 4);
                    if (*(_DWORD *)v92 < v93 || (*(_DWORD *)v92 == v93 ? (v94 = v92[3] < v92[7]) : (v94 = 0), v94))
                    {
                      v92 += 4;
                      v91 = 2 * v90 + 2;
                    }
                  }
                  v95 = &v8[4 * v90];
                  v96 = *(_DWORD *)v95;
                  if (*(_DWORD *)v92 >= *(_DWORD *)v95)
                  {
                    v97 = v95[3];
                    if (*(_DWORD *)v92 != v96 || v92[3] >= v97)
                    {
                      v99 = *(_QWORD *)(v95 + 1);
                      do
                      {
                        v100 = v95;
                        v95 = v92;
                        *(_OWORD *)v100 = *(_OWORD *)v92;
                        if (v88 < v91)
                          break;
                        v101 = 2 * v91;
                        v91 = (2 * v91) | 1;
                        v92 = &v8[4 * v91];
                        v102 = v101 + 2;
                        if (v102 < (uint64_t)v10)
                        {
                          v103 = *((_DWORD *)v92 + 4);
                          if (*(_DWORD *)v92 < v103
                            || (*(_DWORD *)v92 == v103 ? (v104 = v92[3] < v92[7]) : (v104 = 0), v104))
                          {
                            v92 += 4;
                            v91 = v102;
                          }
                        }
                        if (*(_DWORD *)v92 < v96)
                          break;
                      }
                      while (*(_DWORD *)v92 != v96 || v92[3] >= v97);
                      *(_DWORD *)v95 = v96;
                      *(_QWORD *)(v95 + 1) = v99;
                      v95[3] = v97;
                    }
                  }
                }
                v89 = v90 - 1;
              }
              while (v90);
              v106 = (unint64_t)v9 >> 4;
              do
              {
                v108 = 0;
                v139 = *(_OWORD *)v8;
                v109 = v8;
                do
                {
                  v110 = v109;
                  v109 += 4 * v108 + 4;
                  v111 = 2 * v108;
                  v108 = (2 * v108) | 1;
                  v112 = v111 + 2;
                  if (v112 < v106)
                  {
                    v113 = *((_DWORD *)v109 + 4);
                    if (*(_DWORD *)v109 < v113
                      || (*(_DWORD *)v109 == v113 ? (v114 = v109[3] < v109[7]) : (v114 = 0), v114))
                    {
                      v109 += 4;
                      v108 = v112;
                    }
                  }
                  *(_OWORD *)v110 = *(_OWORD *)v109;
                }
                while (v108 <= (uint64_t)((unint64_t)(v106 - 2) >> 1));
                a2 -= 4;
                if (v109 == a2)
                {
                  *(_OWORD *)v109 = v139;
                }
                else
                {
                  *(_OWORD *)v109 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v139;
                  v115 = (char *)v109 - (char *)v8 + 16;
                  if (v115 >= 17)
                  {
                    v116 = ((unint64_t)v115 >> 4) - 2;
                    v117 = v116 >> 1;
                    v118 = &v8[4 * (v116 >> 1)];
                    v119 = *(_DWORD *)v109;
                    v120 = v109[3];
                    if (*(_DWORD *)v118 < *(_DWORD *)v109
                      || (*(_DWORD *)v118 == v119 ? (v121 = v118[3] < v120) : (v121 = 0), v121))
                    {
                      v122 = *(_QWORD *)(v109 + 1);
                      *(_OWORD *)v109 = *(_OWORD *)v118;
                      if (v116 >= 2)
                      {
                        while (1)
                        {
                          v123 = v117 - 1;
                          v117 = (v117 - 1) >> 1;
                          v124 = &v8[4 * v117];
                          if (*(_DWORD *)v124 >= v119 && (*(_DWORD *)v124 != v119 || v124[3] >= v120))
                            break;
                          *(_OWORD *)v118 = *(_OWORD *)v124;
                          v118 = &v8[4 * v117];
                          if (v123 <= 1)
                            goto LABEL_219;
                        }
                      }
                      v124 = v118;
LABEL_219:
                      *(_DWORD *)v124 = v119;
                      *(_QWORD *)(v124 + 1) = v122;
                      v124[3] = v120;
                    }
                  }
                }
              }
              while (v106-- > 2);
            }
            return;
          }
          v11 = v10 >> 1;
          v12 = &v8[4 * (v10 >> 1)];
          if ((unint64_t)v9 >= 0x801)
          {
            sub_2236B6494(a1, &a1[4 * (v10 >> 1)], a2 - 4);
            v13 = 4 * v11;
            v14 = &a1[4 * v11 - 4];
            sub_2236B6494(a1 + 4, v14, a2 - 8);
            sub_2236B6494(a1 + 8, &a1[v13 + 4], a2 - 12);
            sub_2236B6494(v14, v12, &a1[v13 + 4]);
            v134 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v12;
            *(_OWORD *)v12 = v134;
            --a3;
            v15 = *a1;
            if ((a4 & 1) != 0)
              goto LABEL_23;
LABEL_7:
            v16 = *((_DWORD *)a1 - 4);
            v17 = a1[3];
            if (v16 < SLODWORD(v15) || v16 == LODWORD(v15) && *(a1 - 1) < v17)
              goto LABEL_24;
            v18 = *((_DWORD *)a2 - 4);
            if (SLODWORD(v15) < v18 || LODWORD(v15) == v18 && v17 < *(a2 - 1))
            {
              v19 = a1 + 4;
              do
              {
                v8 = v19;
                v20 = *v19;
                if (SLODWORD(v15) < *(_DWORD *)v19)
                  break;
                v21 = v19[3];
                v19 += 4;
              }
              while (LODWORD(v15) != LODWORD(v20) || v17 >= v21);
            }
            else
            {
              v55 = a1 + 4;
              do
              {
                v8 = v55;
                if (v55 >= a2)
                  break;
                v56 = *v55;
                if (SLODWORD(v15) < *(_DWORD *)v55)
                  break;
                v57 = v55[3];
                v55 += 4;
              }
              while (LODWORD(v15) != LODWORD(v56) || v17 >= v57);
            }
            i = a2;
            if (v8 < a2)
            {
              for (i = a2 - 4; SLODWORD(v15) < v18 || LODWORD(v15) == v18 && v17 < i[3]; i -= 4)
              {
                v45 = *((_DWORD *)i - 4);
                v18 = v45;
              }
            }
            v46 = *(_QWORD *)(a1 + 1);
            while (v8 < i)
            {
              v136 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *(_OWORD *)i;
              *(_OWORD *)i = v136;
              v47 = v8 + 4;
              do
              {
                v8 = v47;
                v48 = *v47;
                if (SLODWORD(v15) < *(_DWORD *)v47)
                  break;
                v49 = v47[3];
                v47 += 4;
              }
              while (LODWORD(v15) != LODWORD(v48) || v17 >= v49);
              do
              {
                do
                {
                  v51 = *((_DWORD *)i - 4);
                  i -= 4;
                  v52 = LODWORD(v15) == v51;
                }
                while (SLODWORD(v15) < v51);
              }
              while (v52 && v17 < i[3]);
            }
            if (v8 - 4 != a1)
              *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
            a4 = 0;
            *(v8 - 4) = v15;
            *(_QWORD *)(v8 - 3) = v46;
            *(v8 - 1) = v17;
            continue;
          }
          sub_2236B6494(&a1[4 * (v10 >> 1)], a1, a2 - 4);
          --a3;
          v15 = *a1;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_23:
          v17 = a1[3];
LABEL_24:
          v24 = 0;
          v25 = *(_QWORD *)(a1 + 1);
          while (1)
          {
            v26 = LODWORD(a1[v24 + 4]);
            if (v26 >= SLODWORD(v15) && (v26 != LODWORD(v15) || a1[v24 + 7] >= v17))
              break;
            v24 += 4;
          }
          v28 = (unint64_t)&a1[v24 + 4];
          v29 = a2 - 4;
          if (v24 * 4)
          {
            do
            {
              v30 = (unint64_t)v29;
              v31 = *(_DWORD *)v29;
              if (*(_DWORD *)v29 < SLODWORD(v15))
                break;
              v32 = v29[3];
              v29 -= 4;
            }
            while (v31 != LODWORD(v15) || v32 >= v17);
LABEL_47:
            v8 = (float *)v28;
            if (v28 < v30)
            {
              v37 = (float *)v30;
              do
              {
                v135 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *(_OWORD *)v37;
                *(_OWORD *)v37 = v135;
                do
                {
                  do
                  {
                    v38 = *((_DWORD *)v8 + 4);
                    v8 += 4;
                    v39 = v38 == LODWORD(v15);
                  }
                  while (v38 < SLODWORD(v15));
                }
                while (v39 && v8[3] < v17);
                v41 = v37 - 4;
                do
                {
                  v37 = v41;
                  v42 = *(_DWORD *)v41;
                  if (*(_DWORD *)v41 < SLODWORD(v15))
                    break;
                  v43 = v41[3];
                  v41 -= 4;
                }
                while (v42 != LODWORD(v15) || v43 >= v17);
              }
              while (v8 < v37);
            }
          }
          else
          {
            v34 = a2 - 4;
            while (1)
            {
              v30 = (unint64_t)v34;
              v35 = (unint64_t)(v34 + 4);
              if (v28 >= v35)
                break;
              if (*(_DWORD *)v30 >= SLODWORD(v15))
              {
                v34 = (float *)(v30 - 16);
                if (*(_DWORD *)v30 != LODWORD(v15) || *(float *)(v30 + 12) >= v17)
                  continue;
              }
              goto LABEL_47;
            }
            v30 = v35;
            v8 = (float *)v28;
          }
          if (v8 - 4 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          *(v8 - 4) = v15;
          *(_QWORD *)(v8 - 3) = v25;
          *(v8 - 1) = v17;
          if (v28 < v30)
            goto LABEL_89;
          v54 = sub_223F3B2BC(a1, v8 - 4);
          if (!sub_223F3B2BC(v8, a2))
          {
            if (v54)
              continue;
LABEL_89:
            sub_223F3A960(a1, v8 - 4, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v8 - 4;
          if (v54)
            return;
          goto LABEL_1;
        }
        v73 = v8 + 4;
        v75 = v8 == a2 || v73 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v75)
          {
            v76 = 0;
            v77 = v8;
            do
            {
              v79 = v73;
              v80 = *((_DWORD *)v77 + 4);
              v81 = v77[7];
              if (v80 < *(_DWORD *)v77 || (v80 == *(_DWORD *)v77 ? (v82 = v81 < v77[3]) : (v82 = 0), v82))
              {
                v83 = *(_QWORD *)(v77 + 5);
                *(_OWORD *)v79 = *(_OWORD *)v77;
                v78 = v8;
                if (v77 != v8)
                {
                  v84 = v76;
                  while (1)
                  {
                    v85 = (float *)((char *)v8 + v84);
                    v86 = *(_DWORD *)((char *)v8 + v84 - 16);
                    if (v80 >= v86 && (v80 != v86 || v81 >= *(v85 - 1)))
                      break;
                    *(_OWORD *)v85 = *(_OWORD *)((char *)v8 + v84 - 16);
                    v84 -= 16;
                    if (!v84)
                    {
                      v78 = v8;
                      goto LABEL_137;
                    }
                  }
                  v78 = (float *)((char *)v8 + v84);
                }
LABEL_137:
                *(_DWORD *)v78 = v80;
                *(_QWORD *)(v78 + 1) = v83;
                v78[3] = v81;
              }
              v73 = v79 + 4;
              v76 += 16;
              v77 = v79;
            }
            while (v79 + 4 != a2);
          }
        }
        else if (!v75)
        {
          do
          {
            v126 = v73;
            v127 = *((_DWORD *)a1 + 4);
            v128 = a1[7];
            if (v127 < *(_DWORD *)a1 || (v127 == *(_DWORD *)a1 ? (v129 = v128 < a1[3]) : (v129 = 0), v129))
            {
              v130 = *(_QWORD *)(a1 + 5);
              for (j = v126; ; j -= 4)
              {
                *(_OWORD *)j = *((_OWORD *)j - 1);
                v132 = *((_DWORD *)j - 8);
                if (v127 >= v132 && (v127 != v132 || v128 >= *(j - 5)))
                  break;
              }
              *((_DWORD *)j - 4) = v127;
              *(_QWORD *)(j - 3) = v130;
              *(j - 1) = v128;
            }
            v73 = v126 + 4;
            a1 = v126;
          }
          while (v126 + 4 != a2);
        }
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v59 = a2 - 4;
        v60 = *((_DWORD *)a2 - 4);
        if (v60 < *(_DWORD *)v8 || (v60 == *(_DWORD *)v8 ? (v61 = *(a2 - 1) < v8[3]) : (v61 = 0), v61))
        {
          v137 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v59;
          *(_OWORD *)v59 = v137;
        }
        return;
      case 3uLL:
        sub_2236B6494(v8, v8 + 4, a2 - 4);
        return;
      case 4uLL:
        v62 = (__int128 *)(v8 + 4);
        v63 = (__int128 *)(v8 + 8);
        sub_2236B6494(v8, v8 + 4, v8 + 8);
        v64 = a2 - 4;
        v65 = *((_DWORD *)a2 - 4);
        v66 = *((_DWORD *)v8 + 8);
        if (v65 < v66 || (v65 == v66 ? (v67 = *(a2 - 1) < v8[11]) : (v67 = 0), v67))
        {
          v68 = *v63;
          *v63 = *(_OWORD *)v64;
          *(_OWORD *)v64 = v68;
          v69 = *((_DWORD *)v8 + 8);
          v70 = *((_DWORD *)v8 + 4);
          if (v69 < v70 || v69 == v70 && v8[11] < v8[7])
          {
            v71 = *v62;
            *v62 = *v63;
            *v63 = v71;
            v72 = *((_DWORD *)v8 + 4);
            if (v72 < *(_DWORD *)v8 || v72 == *(_DWORD *)v8 && v8[7] < v8[3])
            {
              v138 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *v62;
              *v62 = v138;
            }
          }
        }
        return;
      case 5uLL:
        sub_2236B62E8((uint64_t)v8, v8 + 4, v8 + 8, (uint64_t)(v8 + 12), (uint64_t)(a2 - 4));
        return;
      default:
        if (v9 > 383)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v88 = (v10 - 2) >> 1;
              v89 = v88;
              do
              {
                v90 = v89;
                if (v88 >= v89)
                {
                  v91 = (2 * v89) | 1;
                  v92 = &v8[4 * v91];
                  if (2 * v90 + 2 < (uint64_t)v10)
                  {
                    v93 = *((_DWORD *)v92 + 4);
                    if (*(_DWORD *)v92 < v93 || (*(_DWORD *)v92 == v93 ? (v94 = v92[3] < v92[7]) : (v94 = 0), v94))
                    {
                      v92 += 4;
                      v91 = 2 * v90 + 2;
                    }
                  }
                  v95 = &v8[4 * v90];
                  v96 = *(_DWORD *)v95;
                  if (*(_DWORD *)v92 >= *(_DWORD *)v95)
                  {
                    v97 = v95[3];
                    if (*(_DWORD *)v92 != v96 || v92[3] >= v97)
                    {
                      v99 = *(_QWORD *)(v95 + 1);
                      do
                      {
                        v100 = v95;
                        v95 = v92;
                        *(_OWORD *)v100 = *(_OWORD *)v92;
                        if (v88 < v91)
                          break;
                        v101 = 2 * v91;
                        v91 = (2 * v91) | 1;
                        v92 = &v8[4 * v91];
                        v102 = v101 + 2;
                        if (v102 < (uint64_t)v10)
                        {
                          v103 = *((_DWORD *)v92 + 4);
                          if (*(_DWORD *)v92 < v103
                            || (*(_DWORD *)v92 == v103 ? (v104 = v92[3] < v92[7]) : (v104 = 0), v104))
                          {
                            v92 += 4;
                            v91 = v102;
                          }
                        }
                        if (*(_DWORD *)v92 < v96)
                          break;
                      }
                      while (*(_DWORD *)v92 != v96 || v92[3] >= v97);
                      *(_DWORD *)v95 = v96;
                      *(_QWORD *)(v95 + 1) = v99;
                      v95[3] = v97;
                    }
                  }
                }
                v89 = v90 - 1;
              }
              while (v90);
              v106 = (unint64_t)v9 >> 4;
              do
              {
                v108 = 0;
                v139 = *(_OWORD *)v8;
                v109 = v8;
                do
                {
                  v110 = v109;
                  v109 += 4 * v108 + 4;
                  v111 = 2 * v108;
                  v108 = (2 * v108) | 1;
                  v112 = v111 + 2;
                  if (v112 < v106)
                  {
                    v113 = *((_DWORD *)v109 + 4);
                    if (*(_DWORD *)v109 < v113
                      || (*(_DWORD *)v109 == v113 ? (v114 = v109[3] < v109[7]) : (v114 = 0), v114))
                    {
                      v109 += 4;
                      v108 = v112;
                    }
                  }
                  *(_OWORD *)v110 = *(_OWORD *)v109;
                }
                while (v108 <= (uint64_t)((unint64_t)(v106 - 2) >> 1));
                a2 -= 4;
                if (v109 == a2)
                {
                  *(_OWORD *)v109 = v139;
                }
                else
                {
                  *(_OWORD *)v109 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v139;
                  v115 = (char *)v109 - (char *)v8 + 16;
                  if (v115 >= 17)
                  {
                    v116 = ((unint64_t)v115 >> 4) - 2;
                    v117 = v116 >> 1;
                    v118 = &v8[4 * (v116 >> 1)];
                    v119 = *(_DWORD *)v109;
                    v120 = v109[3];
                    if (*(_DWORD *)v118 < *(_DWORD *)v109
                      || (*(_DWORD *)v118 == v119 ? (v121 = v118[3] < v120) : (v121 = 0), v121))
                    {
                      v122 = *(_QWORD *)(v109 + 1);
                      *(_OWORD *)v109 = *(_OWORD *)v118;
                      if (v116 >= 2)
                      {
                        while (1)
                        {
                          v123 = v117 - 1;
                          v117 = (v117 - 1) >> 1;
                          v124 = &v8[4 * v117];
                          if (*(_DWORD *)v124 >= v119 && (*(_DWORD *)v124 != v119 || v124[3] >= v120))
                            break;
                          *(_OWORD *)v118 = *(_OWORD *)v124;
                          v118 = &v8[4 * v117];
                          if (v123 <= 1)
                            goto LABEL_219;
                        }
                      }
                      v124 = v118;
LABEL_219:
                      *(_DWORD *)v124 = v119;
                      *(_QWORD *)(v124 + 1) = v122;
                      v124[3] = v120;
                    }
                  }
                }
              }
              while (v106-- > 2);
            }
            return;
          }
          v11 = v10 >> 1;
          v12 = &v8[4 * (v10 >> 1)];
          if ((unint64_t)v9 >= 0x801)
          {
            sub_2236B6494(a1, &a1[4 * (v10 >> 1)], a2 - 4);
            v13 = 4 * v11;
            v14 = &a1[4 * v11 - 4];
            sub_2236B6494(a1 + 4, v14, a2 - 8);
            sub_2236B6494(a1 + 8, &a1[v13 + 4], a2 - 12);
            sub_2236B6494(v14, v12, &a1[v13 + 4]);
            v134 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v12;
            *(_OWORD *)v12 = v134;
            --a3;
            v15 = *a1;
            if ((a4 & 1) != 0)
              goto LABEL_23;
LABEL_7:
            v16 = *((_DWORD *)a1 - 4);
            v17 = a1[3];
            if (v16 < SLODWORD(v15) || v16 == LODWORD(v15) && *(a1 - 1) < v17)
              goto LABEL_24;
            v18 = *((_DWORD *)a2 - 4);
            if (SLODWORD(v15) < v18 || LODWORD(v15) == v18 && v17 < *(a2 - 1))
            {
              v19 = a1 + 4;
              do
              {
                v8 = v19;
                v20 = *v19;
                if (SLODWORD(v15) < *(_DWORD *)v19)
                  break;
                v21 = v19[3];
                v19 += 4;
              }
              while (LODWORD(v15) != LODWORD(v20) || v17 >= v21);
            }
            else
            {
              v55 = a1 + 4;
              do
              {
                v8 = v55;
                if (v55 >= a2)
                  break;
                v56 = *v55;
                if (SLODWORD(v15) < *(_DWORD *)v55)
                  break;
                v57 = v55[3];
                v55 += 4;
              }
              while (LODWORD(v15) != LODWORD(v56) || v17 >= v57);
            }
            i = a2;
            if (v8 < a2)
            {
              for (i = a2 - 4; SLODWORD(v15) < v18 || LODWORD(v15) == v18 && v17 < i[3]; i -= 4)
              {
                v45 = *((_DWORD *)i - 4);
                v18 = v45;
              }
            }
            v46 = *(_QWORD *)(a1 + 1);
            while (v8 < i)
            {
              v136 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *(_OWORD *)i;
              *(_OWORD *)i = v136;
              v47 = v8 + 4;
              do
              {
                v8 = v47;
                v48 = *v47;
                if (SLODWORD(v15) < *(_DWORD *)v47)
                  break;
                v49 = v47[3];
                v47 += 4;
              }
              while (LODWORD(v15) != LODWORD(v48) || v17 >= v49);
              do
              {
                do
                {
                  v51 = *((_DWORD *)i - 4);
                  i -= 4;
                  v52 = LODWORD(v15) == v51;
                }
                while (SLODWORD(v15) < v51);
              }
              while (v52 && v17 < i[3]);
            }
            if (v8 - 4 != a1)
              *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
            a4 = 0;
            *(v8 - 4) = v15;
            *(_QWORD *)(v8 - 3) = v46;
            *(v8 - 1) = v17;
            continue;
          }
          sub_2236B6494(&a1[4 * (v10 >> 1)], a1, a2 - 4);
          --a3;
          v15 = *a1;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_23:
          v17 = a1[3];
LABEL_24:
          v24 = 0;
          v25 = *(_QWORD *)(a1 + 1);
          while (1)
          {
            v26 = LODWORD(a1[v24 + 4]);
            if (v26 >= SLODWORD(v15) && (v26 != LODWORD(v15) || a1[v24 + 7] >= v17))
              break;
            v24 += 4;
          }
          v28 = (unint64_t)&a1[v24 + 4];
          v29 = a2 - 4;
          if (v24 * 4)
          {
            do
            {
              v30 = (unint64_t)v29;
              v31 = *(_DWORD *)v29;
              if (*(_DWORD *)v29 < SLODWORD(v15))
                break;
              v32 = v29[3];
              v29 -= 4;
            }
            while (v31 != LODWORD(v15) || v32 >= v17);
LABEL_47:
            v8 = (float *)v28;
            if (v28 < v30)
            {
              v37 = (float *)v30;
              do
              {
                v135 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *(_OWORD *)v37;
                *(_OWORD *)v37 = v135;
                do
                {
                  do
                  {
                    v38 = *((_DWORD *)v8 + 4);
                    v8 += 4;
                    v39 = v38 == LODWORD(v15);
                  }
                  while (v38 < SLODWORD(v15));
                }
                while (v39 && v8[3] < v17);
                v41 = v37 - 4;
                do
                {
                  v37 = v41;
                  v42 = *(_DWORD *)v41;
                  if (*(_DWORD *)v41 < SLODWORD(v15))
                    break;
                  v43 = v41[3];
                  v41 -= 4;
                }
                while (v42 != LODWORD(v15) || v43 >= v17);
              }
              while (v8 < v37);
            }
          }
          else
          {
            v34 = a2 - 4;
            while (1)
            {
              v30 = (unint64_t)v34;
              v35 = (unint64_t)(v34 + 4);
              if (v28 >= v35)
                break;
              if (*(_DWORD *)v30 >= SLODWORD(v15))
              {
                v34 = (float *)(v30 - 16);
                if (*(_DWORD *)v30 != LODWORD(v15) || *(float *)(v30 + 12) >= v17)
                  continue;
              }
              goto LABEL_47;
            }
            v30 = v35;
            v8 = (float *)v28;
          }
          if (v8 - 4 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          *(v8 - 4) = v15;
          *(_QWORD *)(v8 - 3) = v25;
          *(v8 - 1) = v17;
          if (v28 < v30)
            goto LABEL_89;
          v54 = sub_223F44B00(a1, v8 - 4);
          if (!sub_223F44B00(v8, a2))
          {
            if (v54)
              continue;
LABEL_89:
            sub_223F441A4(a1, v8 - 4, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v8 - 4;
          if (v54)
            return;
          goto LABEL_1;
        }
        v73 = v8 + 4;
        v75 = v8 == a2 || v73 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v75)
          {
            v76 = 0;
            v77 = v8;
            do
            {
              v79 = v73;
              v80 = *((_DWORD *)v77 + 4);
              v81 = v77[7];
              if (v80 < *(_DWORD *)v77 || (v80 == *(_DWORD *)v77 ? (v82 = v81 < v77[3]) : (v82 = 0), v82))
              {
                v83 = *(_QWORD *)(v77 + 5);
                *(_OWORD *)v79 = *(_OWORD *)v77;
                v78 = v8;
                if (v77 != v8)
                {
                  v84 = v76;
                  while (1)
                  {
                    v85 = (float *)((char *)v8 + v84);
                    v86 = *(_DWORD *)((char *)v8 + v84 - 16);
                    if (v80 >= v86 && (v80 != v86 || v81 >= *(v85 - 1)))
                      break;
                    *(_OWORD *)v85 = *(_OWORD *)((char *)v8 + v84 - 16);
                    v84 -= 16;
                    if (!v84)
                    {
                      v78 = v8;
                      goto LABEL_137;
                    }
                  }
                  v78 = (float *)((char *)v8 + v84);
                }
LABEL_137:
                *(_DWORD *)v78 = v80;
                *(_QWORD *)(v78 + 1) = v83;
                v78[3] = v81;
              }
              v73 = v79 + 4;
              v76 += 16;
              v77 = v79;
            }
            while (v79 + 4 != a2);
          }
        }
        else if (!v75)
        {
          do
          {
            v126 = v73;
            v127 = *((_DWORD *)a1 + 4);
            v128 = a1[7];
            if (v127 < *(_DWORD *)a1 || (v127 == *(_DWORD *)a1 ? (v129 = v128 < a1[3]) : (v129 = 0), v129))
            {
              v130 = *(_QWORD *)(a1 + 5);
              for (j = v126; ; j -= 4)
              {
                *(_OWORD *)j = *((_OWORD *)j - 1);
                v132 = *((_DWORD *)j - 8);
                if (v127 >= v132 && (v127 != v132 || v128 >= *(j - 5)))
                  break;
              }
              *((_DWORD *)j - 4) = v127;
              *(_QWORD *)(j - 3) = v130;
              *(j - 1) = v128;
            }
            v73 = v126 + 4;
            a1 = v126;
          }
          while (v126 + 4 != a2);
        }
        return;
    }
  }
}

  v120 = a2 - 3;
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (char *)a2 - (char *)v7;
    v9 = 0xAAAAAAAAAAAAAAABLL * (a2 - v7);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v52 = *(a2 - 3);
        v53 = *v7;
        if (*(a2 - 2) - v52 > (unint64_t)(v7[1] - *v7))
        {
          *v7 = v52;
          *(a2 - 3) = v53;
          v54 = v7[1];
          v7[1] = *(a2 - 2);
          *(a2 - 2) = v54;
          v55 = v7[2];
          v7[2] = *(a2 - 1);
          *(a2 - 1) = v55;
        }
        return;
      case 3:
        sub_223F4A098(v7, v7 + 3, v120);
        return;
      case 4:
        sub_223F4A3E4(v7, v7 + 3, v7 + 6, v120);
        return;
      case 5:
        sub_223F49F58(v7, v7 + 3, v7 + 6, v7 + 9, v120);
        return;
      default:
        if (v8 > 575)
        {
          if (!a3)
          {
            if (v7 != a2)
            {
              v70 = (unint64_t)(v9 - 2) >> 1;
              v71 = v70;
              do
              {
                v72 = v71;
                if (v70 >= v71)
                {
                  v73 = (2 * v71) | 1;
                  v74 = &v7[3 * v73];
                  if (2 * v72 + 2 >= v9)
                  {
                    v78 = *v74;
                  }
                  else
                  {
                    v75 = v74[1] - *v74;
                    v76 = v74[4] - v74[3];
                    v77 = v75 > v76;
                    if (v75 <= v76)
                      v78 = *v74;
                    else
                      v78 = v74[3];
                    if (v77)
                    {
                      v74 += 3;
                      v73 = 2 * v72 + 2;
                    }
                  }
                  v79 = &v7[3 * v72];
                  v80 = *v79;
                  v81 = v79[1];
                  v82 = v74[1] - v78;
                  v83 = v81 - *v79;
                  if (v82 <= v83)
                  {
                    v84 = v7[3 * v72 + 2];
                    *v79 = 0;
                    v79[1] = 0;
                    v79[2] = 0;
                    v85 = *v74;
                    while (1)
                    {
                      v86 = v74;
                      v87 = v74[1];
                      *v79 = v85;
                      v79[1] = v87;
                      v79[2] = v86[2];
                      *v86 = 0;
                      v86[1] = 0;
                      v86[2] = 0;
                      if (v70 < v73)
                        break;
                      v88 = (2 * v73) | 1;
                      v74 = &v7[3 * v88];
                      v73 = 2 * v73 + 2;
                      if (v73 < v9)
                      {
                        v85 = *v74;
                        if (v74[1] - *v74 <= (unint64_t)(v74[4] - v74[3]))
                        {
                          v73 = v88;
                        }
                        else
                        {
                          v85 = v74[3];
                          v74 += 3;
                        }
                        v79 = v86;
                        if (v74[1] - v85 > v83)
                          break;
                      }
                      else
                      {
                        v73 = v88;
                        v85 = *v74;
                        v79 = v86;
                        if (v74[1] - *v74 > v83)
                          break;
                      }
                    }
                    *v86 = v80;
                    v86[1] = v81;
                    v86[2] = v84;
                  }
                }
                v71 = v72 - 1;
              }
              while (v72);
              v89 = v8 / 0x18uLL;
              do
              {
                v90 = 0;
                v91 = *v7;
                v92 = v7[1];
                v93 = v7[2];
                v7[1] = 0;
                v7[2] = 0;
                v94 = v7;
                *v7 = 0;
                do
                {
                  v96 = &v94[3 * v90 + 3];
                  v98 = (2 * v90) | 1;
                  v90 = 2 * v90 + 2;
                  if (v90 < v89)
                  {
                    v95 = *v96;
                    if (v96[1] - *v96 <= (unint64_t)(v96[4] - v96[3]))
                    {
                      v90 = v98;
                    }
                    else
                    {
                      v95 = v96[3];
                      v96 += 3;
                    }
                  }
                  else
                  {
                    v95 = *v96;
                    v90 = v98;
                  }
                  v97 = v96[1];
                  *v94 = v95;
                  v94[1] = v97;
                  v94[2] = v96[2];
                  *v96 = 0;
                  v96[1] = 0;
                  v96[2] = 0;
                  v94 = v96;
                }
                while (v90 <= (uint64_t)((unint64_t)(v89 - 2) >> 1));
                if (v96 == a2 - 3)
                {
                  *v96 = v91;
                  v96[1] = v92;
                  v96[2] = v93;
                }
                else
                {
                  *(_OWORD *)v96 = *(_OWORD *)(a2 - 3);
                  v96[2] = *(a2 - 1);
                  *(a2 - 3) = v91;
                  *(a2 - 2) = v92;
                  *(a2 - 1) = v93;
                  v99 = (char *)v96 - (char *)v7 + 24;
                  if (v99 >= 25)
                  {
                    v100 = (v99 / 0x18uLL - 2) >> 1;
                    v101 = &v7[3 * v100];
                    v102 = *v96;
                    v103 = v96[1];
                    v104 = v103 - *v96;
                    if (v101[1] - *v101 > v104)
                    {
                      v105 = v96[2];
                      *v96 = 0;
                      v96[1] = 0;
                      v96[2] = 0;
                      v106 = *v101;
                      do
                      {
                        v107 = v101;
                        v108 = v101[1];
                        *v96 = v106;
                        v96[1] = v108;
                        v96[2] = v107[2];
                        *v107 = 0;
                        v107[1] = 0;
                        v107[2] = 0;
                        if (!v100)
                          break;
                        v100 = (v100 - 1) >> 1;
                        v101 = &v7[3 * v100];
                        v106 = *v101;
                        v96 = v107;
                      }
                      while (v101[1] - *v101 > v104);
                      *v107 = v102;
                      v107[1] = v103;
                      v107[2] = v105;
                    }
                  }
                }
                a2 -= 3;
                v77 = v89-- <= 2;
              }
              while (!v77);
            }
            return;
          }
          v10 = (unint64_t)v9 >> 1;
          v11 = &v7[3 * ((unint64_t)v9 >> 1)];
          if ((unint64_t)v8 >= 0xC01)
          {
            sub_223F4A098(a1, &a1[3 * v10], v120);
            v12 = 3 * v10;
            sub_223F4A098(a1 + 3, &a1[v12 - 3], a2 - 6);
            sub_223F4A098(a1 + 6, &a1[v12 + 3], a2 - 9);
            sub_223F4A098(&a1[v12 - 3], v11, &a1[v12 + 3]);
            v13 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v11;
            *(_OWORD *)v11 = v13;
            v14 = a1[2];
            a1[2] = a1[v12 + 2];
            a1[v12 + 2] = v14;
            --a3;
            v15 = *a1;
            if ((a4 & 1) != 0)
              goto LABEL_13;
LABEL_7:
            v16 = a1[1];
            v17 = v16 - v15;
            if (*(a1 - 2) - *(a1 - 3) > (unint64_t)(v16 - v15))
              goto LABEL_14;
            v18 = a1[2];
            *a1 = 0;
            a1[1] = 0;
            a1[2] = 0;
            if (v17 <= *(a2 - 2) - *(a2 - 3))
            {
              v40 = a1 + 3;
              do
              {
                v7 = v40;
                if (v40 >= a2)
                  break;
                v41 = v40[1] - *v40;
                v40 += 3;
              }
              while (v17 <= v41);
            }
            else
            {
              v7 = a1;
              do
              {
                v19 = v7[3];
                v20 = v7[4];
                v7 += 3;
              }
              while (v17 <= v20 - v19);
            }
            v42 = a2;
            if (v7 < a2)
            {
              v42 = a2;
              do
              {
                v43 = *(v42 - 3);
                v44 = *(v42 - 2);
                v42 -= 3;
              }
              while (v17 > v44 - v43);
            }
            if (v7 >= v42)
            {
              v51 = 0;
              if (v7 - 3 != a1)
                goto LABEL_52;
            }
            else
            {
              v45 = *v7;
              v46 = *v42;
              do
              {
                *v7 = v46;
                *v42 = v45;
                v47 = v7[1];
                v7[1] = v42[1];
                v42[1] = v47;
                v48 = v7[2];
                v7[2] = v42[2];
                v42[2] = v48;
                do
                {
                  v45 = v7[3];
                  v49 = v7[4];
                  v7 += 3;
                }
                while (v17 <= v49 - v45);
                do
                {
                  v46 = *(v42 - 3);
                  v50 = *(v42 - 2);
                  v42 -= 3;
                }
                while (v17 > v50 - v46);
              }
              while (v7 < v42);
              v51 = (void *)*a1;
              if (v7 - 3 != a1)
              {
LABEL_52:
                if (v51)
                {
                  a1[1] = (uint64_t)v51;
                  operator delete(v51);
                  *a1 = 0;
                  a1[1] = 0;
                  a1[2] = 0;
                }
                *(_OWORD *)a1 = *(_OWORD *)(v7 - 3);
                a1[2] = *(v7 - 1);
                goto LABEL_58;
              }
            }
            if (v51)
            {
              *(v7 - 2) = (uint64_t)v51;
              operator delete(v51);
            }
LABEL_58:
            a4 = 0;
            *(v7 - 3) = v15;
            *(v7 - 2) = v16;
            *(v7 - 1) = v18;
            continue;
          }
          sub_223F4A098(&a1[3 * v10], a1, v120);
          --a3;
          v15 = *a1;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_13:
          v16 = a1[1];
          v17 = v16 - v15;
LABEL_14:
          v21 = 0;
          v22 = a1[2];
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          do
          {
            v23 = a1[v21 + 3];
            v24 = a1[v21 + 4] - v23;
            v21 += 3;
          }
          while (v24 > v17);
          v25 = &a1[v21];
          v26 = a2;
          if (v21 == 3)
          {
            v26 = a2;
            do
            {
              if (v25 >= v26)
                break;
              v29 = *(v26 - 3);
              v30 = *(v26 - 2);
              v26 -= 3;
            }
            while (v30 - v29 <= v17);
          }
          else
          {
            do
            {
              v27 = *(v26 - 3);
              v28 = *(v26 - 2);
              v26 -= 3;
            }
            while (v28 - v27 <= v17);
          }
          if (v25 >= v26)
          {
            v37 = 0;
            v7 = v25;
            v38 = v25 - 3;
            if (v25 - 3 == a1)
              goto LABEL_33;
          }
          else
          {
            v31 = *v26;
            v7 = v25;
            v32 = v26;
            do
            {
              *v7 = v31;
              *v32 = v23;
              v33 = v7[1];
              v7[1] = v32[1];
              v32[1] = v33;
              v34 = v7[2];
              v7[2] = v32[2];
              v32[2] = v34;
              do
              {
                v23 = v7[3];
                v35 = v7[4];
                v7 += 3;
              }
              while (v35 - v23 > v17);
              do
              {
                v31 = *(v32 - 3);
                v36 = *(v32 - 2);
                v32 -= 3;
              }
              while (v36 - v31 <= v17);
            }
            while (v7 < v32);
            v37 = (void *)*a1;
            v38 = v7 - 3;
            if (v7 - 3 == a1)
            {
LABEL_33:
              if (v37)
              {
                *(v7 - 2) = (uint64_t)v37;
                operator delete(v37);
              }
              goto LABEL_35;
            }
          }
          if (v37)
          {
            a1[1] = (uint64_t)v37;
            operator delete(v37);
            *a1 = 0;
            a1[1] = 0;
            a1[2] = 0;
          }
          *(_OWORD *)a1 = *(_OWORD *)(v7 - 3);
          a1[2] = *(v7 - 1);
LABEL_35:
          *(v7 - 3) = v15;
          *(v7 - 2) = v16;
          *(v7 - 1) = v22;
          if (v25 < v26)
            goto LABEL_38;
          v39 = sub_223F4A1BC(a1, v38);
          if (!sub_223F4A1BC(v7, a2))
          {
            if (v39)
              continue;
LABEL_38:
            sub_223F4962C(a1, v38, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v38;
          if (v39)
            return;
          goto LABEL_1;
        }
        v56 = v7 + 3;
        v58 = v7 == a2 || v56 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v58)
          {
            v59 = 0;
            v60 = v7;
            do
            {
              v62 = v56;
              v63 = v60[3];
              v64 = v60[4];
              v65 = *v60;
              if (v64 - v63 > (unint64_t)(v60[1] - *v60))
              {
                v66 = v60[5];
                *v62 = 0;
                v62[1] = 0;
                v67 = v59;
                v62[2] = 0;
                do
                {
                  v68 = (uint64_t *)((char *)v7 + v67);
                  v69 = *(uint64_t *)((char *)v7 + v67 + 16);
                  v68[4] = *(uint64_t *)((char *)v7 + v67 + 8);
                  v68[5] = v69;
                  v68[2] = 0;
                  v68[3] = v65;
                  *v68 = 0;
                  v68[1] = 0;
                  if (!v67)
                  {
                    v61 = v7;
                    goto LABEL_78;
                  }
                  v65 = *(v68 - 3);
                  v67 -= 24;
                }
                while (v64 - v63 > (unint64_t)(*(v68 - 2) - v65));
                v61 = (uint64_t *)((char *)v7 + v67 + 24);
LABEL_78:
                *v61 = v63;
                v61[1] = v64;
                v61[2] = v66;
              }
              v56 = v62 + 3;
              v59 += 24;
              v60 = v62;
            }
            while (v62 + 3 != a2);
          }
        }
        else if (!v58)
        {
          v109 = v7 + 5;
          do
          {
            v110 = v56;
            v111 = a1[3];
            v112 = a1[4];
            v113 = *a1;
            if (v112 - v111 > (unint64_t)(a1[1] - *a1))
            {
              v114 = a1[5];
              *v110 = 0;
              v110[1] = 0;
              v110[2] = 0;
              v115 = v109;
              v116 = v109;
              do
              {
                v117 = *(v115 - 4);
                *(v115 - 2) = v113;
                *(v115 - 1) = v117;
                v118 = *(v116 - 3);
                v116 -= 3;
                *v115 = v118;
                *v116 = 0;
                *(v115 - 5) = 0;
                *(v115 - 4) = 0;
                v113 = *(v115 - 8);
                v119 = *(v115 - 7) - v113;
                v115 = v116;
              }
              while (v112 - v111 > v119);
              *(v116 - 2) = v111;
              *(v116 - 1) = v112;
              *v116 = v114;
            }
            v56 = v110 + 3;
            v109 += 3;
            a1 = v110;
          }
          while (v110 + 3 != a2);
        }
        return;
    }
  }
}

  v9 = a2 - 1;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (uint64_t)a2 - v10;
    v12 = (uint64_t)((uint64_t)a2 - v10) >> 3;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = *(a2 - 2);
        v98 = *(float *)v10;
        if (result <= *(float *)v10)
        {
          *(float *)v10 = result;
          *(a2 - 2) = v98;
          result = *(float *)(v10 + 4);
          *(float *)(v10 + 4) = *(a2 - 1);
          *(a2 - 1) = result;
        }
        return result;
      case 3:
        v99 = *(float *)(v10 + 8);
        result = *(float *)v10;
        v100 = *(a2 - 2);
        if (v99 <= *(float *)v10)
        {
          if (v100 <= v99)
          {
            v103 = (float *)(v10 + 4);
            *(float *)v10 = v100;
          }
          else
          {
            v103 = (float *)(v10 + 12);
            v145 = *(_DWORD *)(v10 + 12);
            v146 = *(_DWORD *)(v10 + 4);
            *(float *)v10 = v99;
            *(_DWORD *)(v10 + 4) = v145;
            *(float *)(v10 + 8) = result;
            *(_DWORD *)(v10 + 12) = v146;
            v147 = *(a2 - 2);
            if (v147 > result)
              return result;
            *(float *)(v10 + 8) = v147;
          }
          *(a2 - 2) = result;
          goto LABEL_177;
        }
        if (v100 <= v99)
        {
          *(float *)(v10 + 8) = v100;
          *(a2 - 2) = v99;
          v9 = (float *)(v10 + 12);
          v101 = *(_DWORD *)(v10 + 12);
          *(float *)(v10 + 12) = *(a2 - 1);
          *((_DWORD *)a2 - 1) = v101;
          result = *(float *)(v10 + 8);
          v102 = *(float *)v10;
          if (result <= *(float *)v10)
          {
            *(float *)v10 = result;
            *(float *)(v10 + 8) = v102;
            v103 = (float *)(v10 + 4);
LABEL_177:
            result = *v103;
            *v103 = *v9;
            *v9 = result;
            return result;
          }
        }
        return result;
      case 4:
        return sub_223F50A0C((_DWORD *)v10, v10 + 8, v10 + 16, (uint64_t)(a2 - 2));
      case 5:
        sub_223F50A0C((_DWORD *)v10, v10 + 8, v10 + 16, v10 + 24);
        result = *(a2 - 2);
        v104 = *(float *)(v10 + 24);
        if (result <= v104)
        {
          *(float *)(v10 + 24) = result;
          *(a2 - 2) = v104;
          v105 = *(_DWORD *)(v10 + 28);
          *(float *)(v10 + 28) = *(a2 - 1);
          *((_DWORD *)a2 - 1) = v105;
          result = *(float *)(v10 + 24);
          v106 = *(float *)(v10 + 16);
          if (result <= v106)
          {
            v107 = *(_DWORD *)(v10 + 20);
            v108 = *(_DWORD *)(v10 + 28);
            *(float *)(v10 + 16) = result;
            *(_DWORD *)(v10 + 20) = v108;
            *(float *)(v10 + 24) = v106;
            *(_DWORD *)(v10 + 28) = v107;
            v109 = *(float *)(v10 + 8);
            if (result <= v109)
            {
              v110 = *(_DWORD *)(v10 + 12);
              *(float *)(v10 + 8) = result;
              *(_DWORD *)(v10 + 12) = v108;
              *(float *)(v10 + 16) = v109;
              *(_DWORD *)(v10 + 20) = v110;
              v111 = *(float *)v10;
              if (result <= *(float *)v10)
              {
                v112 = *(_DWORD *)(v10 + 4);
                *(float *)v10 = result;
                *(_DWORD *)(v10 + 4) = v108;
                *(float *)(v10 + 8) = v111;
                *(_DWORD *)(v10 + 12) = v112;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a3)
          {
            if ((float *)v10 != a2)
            {
              v123 = (unint64_t)(v12 - 2) >> 1;
              v124 = v123;
              do
              {
                if (v123 >= v124)
                {
                  v126 = (2 * v124) | 1;
                  v127 = (float *)(v10 + 8 * v126);
                  if (2 * v124 + 2 < v12 && *v127 <= v127[2])
                  {
                    v127 += 2;
                    v126 = 2 * v124 + 2;
                  }
                  v128 = (float *)(v10 + 8 * v124);
                  result = *v128;
                  if (*v127 > *v128)
                  {
                    v129 = *((_DWORD *)v128 + 1);
                    do
                    {
                      v130 = v128;
                      v128 = v127;
                      *(_QWORD *)v130 = *(_QWORD *)v127;
                      if (v123 < v126)
                        break;
                      v131 = 2 * v126;
                      v126 = (2 * v126) | 1;
                      v127 = (float *)(v10 + 8 * v126);
                      v132 = v131 + 2;
                      if (v132 < v12 && *v127 <= v127[2])
                      {
                        v127 += 2;
                        v126 = v132;
                      }
                    }
                    while (*v127 > result);
                    *v128 = result;
                    *((_DWORD *)v128 + 1) = v129;
                  }
                }
                v125 = v124-- <= 0;
              }
              while (!v125);
              v133 = (unint64_t)v11 >> 3;
              do
              {
                v134 = 0;
                v135 = *(_QWORD *)v10;
                v136 = (float *)v10;
                do
                {
                  v137 = v136;
                  v136 += 2 * v134 + 2;
                  v138 = 2 * v134;
                  v134 = (2 * v134) | 1;
                  v139 = v138 + 2;
                  if (v139 < v133)
                  {
                    result = v136[2];
                    if (*v136 <= result)
                    {
                      v136 += 2;
                      v134 = v139;
                    }
                  }
                  *(_QWORD *)v137 = *(_QWORD *)v136;
                }
                while (v134 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
                a2 -= 2;
                if (v136 == a2)
                {
                  *(_QWORD *)v136 = v135;
                }
                else
                {
                  *(_QWORD *)v136 = *(_QWORD *)a2;
                  *(_QWORD *)a2 = v135;
                  v140 = (uint64_t)v136 - v10 + 8;
                  if (v140 >= 9)
                  {
                    v141 = (((unint64_t)v140 >> 3) - 2) >> 1;
                    v142 = (float *)(v10 + 8 * v141);
                    result = *v136;
                    if (*v142 <= *v136)
                    {
                      v143 = *((_DWORD *)v136 + 1);
                      do
                      {
                        v144 = v136;
                        v136 = v142;
                        *(_QWORD *)v144 = *(_QWORD *)v142;
                        if (!v141)
                          break;
                        v141 = (v141 - 1) >> 1;
                        v142 = (float *)(v10 + 8 * v141);
                      }
                      while (*v142 <= result);
                      *v136 = result;
                      *((_DWORD *)v136 + 1) = v143;
                    }
                  }
                }
                v125 = v133-- <= 2;
              }
              while (!v125);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = v10 + 8 * ((unint64_t)v12 >> 1);
          v15 = *(a2 - 2);
          if ((unint64_t)v11 >= 0x401)
          {
            v16 = *(float *)v14;
            v17 = *(float *)v10;
            if (*(float *)v14 <= *(float *)v10)
            {
              if (v15 <= v16)
              {
                v21 = (int *)(v10 + 4);
                *(float *)v10 = v15;
              }
              else
              {
                v21 = (int *)(v14 + 4);
                v28 = *(_DWORD *)(v14 + 4);
                v29 = *(_DWORD *)(v10 + 4);
                *(float *)v10 = v16;
                *(_DWORD *)(v10 + 4) = v28;
                *(float *)v14 = v17;
                *(_DWORD *)(v14 + 4) = v29;
                v30 = *(a2 - 2);
                if (v30 > v17)
                  goto LABEL_23;
                *(float *)v14 = v30;
              }
              *(a2 - 2) = v17;
              v18 = a2 - 1;
            }
            else
            {
              if (v15 > v16
                || (*(float *)v14 = v15,
                    *(a2 - 2) = v16,
                    v18 = (float *)(v14 + 4),
                    v19 = *(_DWORD *)(v14 + 4),
                    *(float *)(v14 + 4) = *(a2 - 1),
                    *((_DWORD *)a2 - 1) = v19,
                    v20 = *(float *)v10,
                    *(float *)v14 > *(float *)v10))
              {
LABEL_23:
                v35 = v10 + 8 * v13;
                v37 = *(float *)(v35 - 8);
                v36 = v35 - 8;
                v38 = v37;
                v39 = *(float *)(v10 + 8);
                v40 = *(a2 - 4);
                if (v37 <= v39)
                {
                  if (v40 <= v38)
                  {
                    v44 = (int *)(v10 + 12);
                    *(float *)(v10 + 8) = v40;
                  }
                  else
                  {
                    v44 = (int *)(v36 + 4);
                    v45 = *(_DWORD *)(v36 + 4);
                    v46 = *(_DWORD *)(v10 + 12);
                    *(float *)(v10 + 8) = v38;
                    *(_DWORD *)(v10 + 12) = v45;
                    *(float *)v36 = v39;
                    *(_DWORD *)(v36 + 4) = v46;
                    v47 = *(a2 - 4);
                    if (v47 > v39)
                      goto LABEL_35;
                    *(float *)v36 = v47;
                  }
                  *(a2 - 4) = v39;
                  v41 = a2 - 3;
                }
                else
                {
                  if (v40 > v38
                    || (*(float *)v36 = v40,
                        *(a2 - 4) = v38,
                        v41 = (float *)(v36 + 4),
                        v42 = *(_DWORD *)(v36 + 4),
                        *(float *)(v36 + 4) = *(a2 - 3),
                        *((_DWORD *)a2 - 3) = v42,
                        v43 = *(float *)(v10 + 8),
                        *(float *)v36 > v43))
                  {
LABEL_35:
                    v49 = v10 + 8 * v13;
                    v51 = *(float *)(v49 + 8);
                    v50 = v49 + 8;
                    v52 = v51;
                    v53 = *(float *)(v10 + 16);
                    v54 = *(a2 - 6);
                    if (v51 <= v53)
                    {
                      if (v54 <= v52)
                      {
                        v55 = (int *)(v10 + 20);
                        *(float *)(v10 + 16) = v54;
                      }
                      else
                      {
                        v55 = (int *)(v50 + 4);
                        v56 = *(_DWORD *)(v50 + 4);
                        v57 = *(_DWORD *)(v10 + 20);
                        *(float *)(v10 + 16) = v52;
                        *(_DWORD *)(v10 + 20) = v56;
                        *(float *)v50 = v53;
                        *(_DWORD *)(v50 + 4) = v57;
                        v58 = *(a2 - 6);
                        if (v58 > v53)
                          goto LABEL_46;
                        *(float *)v50 = v58;
                      }
                      *(a2 - 6) = v53;
                      v59 = a2 - 5;
                    }
                    else
                    {
                      if (v54 > v52)
                      {
                        v53 = v52;
                        goto LABEL_46;
                      }
                      *(float *)v50 = v54;
                      *(a2 - 6) = v52;
                      v59 = (float *)(v50 + 4);
                      v60 = *(_DWORD *)(v50 + 4);
                      *(float *)(v50 + 4) = *(a2 - 5);
                      *((_DWORD *)a2 - 5) = v60;
                      v53 = *(float *)v50;
                      v61 = *(float *)(v10 + 16);
                      if (*(float *)v50 > v61)
                      {
LABEL_46:
                        v63 = *(float *)v14;
                        v64 = *(float *)v36;
                        if (*(float *)v14 <= *(float *)v36)
                        {
                          if (v53 <= v63)
                          {
                            *(float *)v36 = v53;
                            v68 = (int *)(v36 + 4);
                            *(float *)v50 = v64;
                            v67 = (int *)(v50 + 4);
                          }
                          else
                          {
                            v65 = *(_DWORD *)(v14 + 4);
                            *(float *)v14 = v64;
                            v66 = *(_DWORD *)(v36 + 4);
                            *(float *)v36 = v63;
                            *(_DWORD *)(v36 + 4) = v65;
                            *(_DWORD *)(v14 + 4) = v66;
                            if (v53 > v64)
                              goto LABEL_58;
                            *(float *)v14 = v53;
                            *(float *)v50 = v64;
                            v67 = (int *)(v50 + 4);
                            v68 = (int *)(v14 + 4);
                          }
                          v69 = v67;
                        }
                        else
                        {
                          if (v53 > v63)
                          {
                            v64 = *(float *)v14;
LABEL_58:
                            v72 = *(float *)v10;
                            *(float *)v10 = v64;
                            v26 = (int *)(v10 + 4);
                            *(float *)v14 = v72;
                            v27 = (float *)(v14 + 4);
                            goto LABEL_59;
                          }
                          v69 = (int *)(v14 + 4);
                          v70 = *(_DWORD *)(v14 + 4);
                          *(float *)v14 = v53;
                          *(_DWORD *)(v14 + 4) = *(_DWORD *)(v50 + 4);
                          *(float *)v50 = v63;
                          *(_DWORD *)(v50 + 4) = v70;
                          if (v53 > v64)
                          {
                            v64 = v53;
                            goto LABEL_58;
                          }
                          *(float *)v36 = v53;
                          v68 = (int *)(v36 + 4);
                          *(float *)v14 = v64;
                        }
                        v71 = *v68;
                        *v68 = *v69;
                        *v69 = v71;
                        v64 = *(float *)v14;
                        goto LABEL_58;
                      }
                      *(float *)(v10 + 16) = v53;
                      *(float *)v50 = v61;
                      v55 = (int *)(v10 + 20);
                    }
                    v62 = *v55;
                    *v55 = *(_DWORD *)v59;
                    *(_DWORD *)v59 = v62;
                    v53 = *(float *)v50;
                    goto LABEL_46;
                  }
                  *(_DWORD *)(v10 + 8) = *(_DWORD *)v36;
                  *(float *)v36 = v43;
                  v44 = (int *)(v10 + 12);
                }
                v48 = *v44;
                *v44 = *(_DWORD *)v41;
                *(_DWORD *)v41 = v48;
                goto LABEL_35;
              }
              *(_DWORD *)v10 = *(_DWORD *)v14;
              v21 = (int *)(v10 + 4);
              *(float *)v14 = v20;
            }
            v34 = *v21;
            *v21 = *(_DWORD *)v18;
            *(_DWORD *)v18 = v34;
            goto LABEL_23;
          }
          v22 = *(float *)v10;
          v23 = *(float *)v14;
          if (*(float *)v10 <= *(float *)v14)
          {
            if (v15 <= v22)
            {
              v26 = (int *)(v14 + 4);
              *(float *)v14 = v15;
            }
            else
            {
              v26 = (int *)(v10 + 4);
              v31 = *(_DWORD *)(v10 + 4);
              v32 = *(_DWORD *)(v14 + 4);
              *(float *)v14 = v22;
              *(_DWORD *)(v14 + 4) = v31;
              *(float *)v10 = v23;
              *(_DWORD *)(v10 + 4) = v32;
              v33 = *(a2 - 2);
              if (v33 > v23)
                goto LABEL_60;
              *(float *)v10 = v33;
            }
            *(a2 - 2) = v23;
            v27 = a2 - 1;
            goto LABEL_59;
          }
          if (v15 <= v22)
          {
            *(float *)v10 = v15;
            *(a2 - 2) = v22;
            v24 = *(_DWORD *)(v10 + 4);
            *(float *)(v10 + 4) = *(a2 - 1);
            *((_DWORD *)a2 - 1) = v24;
            v25 = *(float *)v14;
            if (*(float *)v10 <= *(float *)v14)
            {
              *(_DWORD *)v14 = *(_DWORD *)v10;
              *(float *)v10 = v25;
              v26 = (int *)(v14 + 4);
              v27 = (float *)(v10 + 4);
LABEL_59:
              v73 = *v26;
              *v26 = *(_DWORD *)v27;
              *(_DWORD *)v27 = v73;
            }
          }
LABEL_60:
          --a3;
          if ((a4 & 1) == 0)
          {
            result = *(float *)v10;
            if (*(float *)(v10 - 8) <= *(float *)v10)
              goto LABEL_63;
            if (*(a2 - 2) >= result)
            {
              do
              {
                v89 = *(float *)(v10 + 8);
                v10 += 8;
              }
              while (v89 < result);
            }
            else
            {
              v88 = v10 + 8;
              do
              {
                v10 = v88;
                if (v88 >= (unint64_t)a2)
                  break;
                v88 += 8;
              }
              while (*(float *)v10 < result);
            }
            v90 = a2;
            if (v10 < (unint64_t)a2)
            {
              v90 = a2;
              do
              {
                v91 = *(v90 - 2);
                v90 -= 2;
              }
              while (v91 >= result);
            }
            v92 = *(_DWORD *)(a1 + 4);
            if (v10 < (unint64_t)v90)
            {
              v93 = *(float *)v10;
              v94 = *v90;
              do
              {
                *(float *)v10 = v94;
                *v90 = v93;
                v95 = *(_DWORD *)(v10 + 4);
                *(float *)(v10 + 4) = v90[1];
                *((_DWORD *)v90 + 1) = v95;
                do
                {
                  v96 = *(float *)(v10 + 8);
                  v10 += 8;
                  v93 = v96;
                }
                while (v96 < result);
                do
                {
                  v97 = *(v90 - 2);
                  v90 -= 2;
                  v94 = v97;
                }
                while (v97 >= result);
              }
              while (v10 < (unint64_t)v90);
            }
            if (v10 - 8 != a1)
              *(_QWORD *)a1 = *(_QWORD *)(v10 - 8);
            a4 = 0;
            *(float *)(v10 - 8) = result;
            *(_DWORD *)(v10 - 4) = v92;
            continue;
          }
          result = *(float *)v10;
LABEL_63:
          v74 = 0;
          v75 = *(_DWORD *)(v10 + 4);
          do
          {
            v76 = *(float *)(v10 + v74 + 8);
            v74 += 8;
          }
          while (v76 <= result);
          v77 = v10 + v74;
          v78 = a2;
          if (v74 == 8)
          {
            v78 = a2;
            do
            {
              if (v77 >= (unint64_t)v78)
                break;
              v80 = *(v78 - 2);
              v78 -= 2;
            }
            while (v80 > result);
          }
          else
          {
            do
            {
              v79 = *(v78 - 2);
              v78 -= 2;
            }
            while (v79 > result);
          }
          if (v77 >= (unint64_t)v78)
          {
            v10 += v74;
            v86 = (float *)(v77 - 8);
            if (v77 - 8 == a1)
              goto LABEL_79;
          }
          else
          {
            v81 = *v78;
            v10 += v74;
            v82 = v78;
            do
            {
              *(float *)v10 = v81;
              *v82 = v76;
              v83 = *(_DWORD *)(v10 + 4);
              *(float *)(v10 + 4) = v82[1];
              *((_DWORD *)v82 + 1) = v83;
              do
              {
                v84 = *(float *)(v10 + 8);
                v10 += 8;
                v76 = v84;
              }
              while (v84 <= result);
              do
              {
                v85 = *(v82 - 2);
                v82 -= 2;
                v81 = v85;
              }
              while (v85 > result);
            }
            while (v10 < (unint64_t)v82);
            v86 = (float *)(v10 - 8);
            if (v10 - 8 == a1)
              goto LABEL_79;
          }
          *(_QWORD *)a1 = *(_QWORD *)v86;
LABEL_79:
          *(float *)(v10 - 8) = result;
          *(_DWORD *)(v10 - 4) = v75;
          if (v77 < (unint64_t)v78)
            goto LABEL_82;
          v87 = sub_223F506BC(a1, (uint64_t)v86);
          if (!sub_223F506BC(v10, (uint64_t)a2))
          {
            if (v87)
              continue;
LABEL_82:
            sub_223F4FC14(a1, v86, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v86;
          if (v87)
            return result;
          goto LABEL_1;
        }
        v113 = (float *)(v10 + 8);
        v115 = (float *)v10 == a2 || v113 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v115)
          {
            v116 = 0;
            v117 = v10;
            do
            {
              v119 = v113;
              result = *(float *)(v117 + 8);
              if (result <= *(float *)v117)
              {
                v120 = *(_DWORD *)(v117 + 12);
                v121 = v116;
                do
                {
                  *(_QWORD *)(v10 + v121 + 8) = *(_QWORD *)(v10 + v121);
                  if (!v121)
                  {
                    v118 = v10;
                    goto LABEL_128;
                  }
                  v122 = *(float *)(v10 + v121 - 8);
                  v121 -= 8;
                }
                while (v122 >= result);
                v118 = v10 + v121 + 8;
LABEL_128:
                *(float *)v118 = result;
                *(_DWORD *)(v118 + 4) = v120;
              }
              v113 = v119 + 2;
              v116 += 8;
              v117 = (unint64_t)v119;
            }
            while (v119 + 2 != a2);
          }
        }
        else if (!v115)
        {
          do
          {
            v148 = (uint64_t)v113;
            result = *(float *)(a1 + 8);
            if (result <= *(float *)a1)
            {
              v149 = *(_DWORD *)(a1 + 12);
              do
              {
                v150 = v113;
                v151 = *((_QWORD *)v113 - 1);
                v113 -= 2;
                *(_QWORD *)v150 = v151;
              }
              while (*(v150 - 4) >= result);
              *v113 = result;
              *((_DWORD *)v113 + 1) = v149;
            }
            v113 = (float *)(v148 + 8);
            a1 = v148;
          }
          while ((float *)(v148 + 8) != a2);
        }
        return result;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v59 = a2 - 4;
        v60 = *((_DWORD *)a2 - 4);
        if (v60 < *(_DWORD *)v8 || (v60 == *(_DWORD *)v8 ? (v61 = *(a2 - 1) < v8[3]) : (v61 = 0), v61))
        {
          v137 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v59;
          *(_OWORD *)v59 = v137;
        }
        return;
      case 3uLL:
        sub_2236B6494(v8, v8 + 4, a2 - 4);
        return;
      case 4uLL:
        v62 = (__int128 *)(v8 + 4);
        v63 = (__int128 *)(v8 + 8);
        sub_2236B6494(v8, v8 + 4, v8 + 8);
        v64 = a2 - 4;
        v65 = *((_DWORD *)a2 - 4);
        v66 = *((_DWORD *)v8 + 8);
        if (v65 < v66 || (v65 == v66 ? (v67 = *(a2 - 1) < v8[11]) : (v67 = 0), v67))
        {
          v68 = *v63;
          *v63 = *(_OWORD *)v64;
          *(_OWORD *)v64 = v68;
          v69 = *((_DWORD *)v8 + 8);
          v70 = *((_DWORD *)v8 + 4);
          if (v69 < v70 || v69 == v70 && v8[11] < v8[7])
          {
            v71 = *v62;
            *v62 = *v63;
            *v63 = v71;
            v72 = *((_DWORD *)v8 + 4);
            if (v72 < *(_DWORD *)v8 || v72 == *(_DWORD *)v8 && v8[7] < v8[3])
            {
              v138 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *v62;
              *v62 = v138;
            }
          }
        }
        return;
      case 5uLL:
        sub_2236B62E8((uint64_t)v8, v8 + 4, v8 + 8, (uint64_t)(v8 + 12), (uint64_t)(a2 - 4));
        return;
      default:
        if (v9 > 383)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v88 = (v10 - 2) >> 1;
              v89 = v88;
              do
              {
                v90 = v89;
                if (v88 >= v89)
                {
                  v91 = (2 * v89) | 1;
                  v92 = &v8[4 * v91];
                  if (2 * v90 + 2 < (uint64_t)v10)
                  {
                    v93 = *((_DWORD *)v92 + 4);
                    if (*(_DWORD *)v92 < v93 || (*(_DWORD *)v92 == v93 ? (v94 = v92[3] < v92[7]) : (v94 = 0), v94))
                    {
                      v92 += 4;
                      v91 = 2 * v90 + 2;
                    }
                  }
                  v95 = &v8[4 * v90];
                  v96 = *(_DWORD *)v95;
                  if (*(_DWORD *)v92 >= *(_DWORD *)v95)
                  {
                    v97 = v95[3];
                    if (*(_DWORD *)v92 != v96 || v92[3] >= v97)
                    {
                      v99 = *(_QWORD *)(v95 + 1);
                      do
                      {
                        v100 = v95;
                        v95 = v92;
                        *(_OWORD *)v100 = *(_OWORD *)v92;
                        if (v88 < v91)
                          break;
                        v101 = 2 * v91;
                        v91 = (2 * v91) | 1;
                        v92 = &v8[4 * v91];
                        v102 = v101 + 2;
                        if (v102 < (uint64_t)v10)
                        {
                          v103 = *((_DWORD *)v92 + 4);
                          if (*(_DWORD *)v92 < v103
                            || (*(_DWORD *)v92 == v103 ? (v104 = v92[3] < v92[7]) : (v104 = 0), v104))
                          {
                            v92 += 4;
                            v91 = v102;
                          }
                        }
                        if (*(_DWORD *)v92 < v96)
                          break;
                      }
                      while (*(_DWORD *)v92 != v96 || v92[3] >= v97);
                      *(_DWORD *)v95 = v96;
                      *(_QWORD *)(v95 + 1) = v99;
                      v95[3] = v97;
                    }
                  }
                }
                v89 = v90 - 1;
              }
              while (v90);
              v106 = (unint64_t)v9 >> 4;
              do
              {
                v108 = 0;
                v139 = *(_OWORD *)v8;
                v109 = v8;
                do
                {
                  v110 = v109;
                  v109 += 4 * v108 + 4;
                  v111 = 2 * v108;
                  v108 = (2 * v108) | 1;
                  v112 = v111 + 2;
                  if (v112 < v106)
                  {
                    v113 = *((_DWORD *)v109 + 4);
                    if (*(_DWORD *)v109 < v113
                      || (*(_DWORD *)v109 == v113 ? (v114 = v109[3] < v109[7]) : (v114 = 0), v114))
                    {
                      v109 += 4;
                      v108 = v112;
                    }
                  }
                  *(_OWORD *)v110 = *(_OWORD *)v109;
                }
                while (v108 <= (uint64_t)((unint64_t)(v106 - 2) >> 1));
                a2 -= 4;
                if (v109 == a2)
                {
                  *(_OWORD *)v109 = v139;
                }
                else
                {
                  *(_OWORD *)v109 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v139;
                  v115 = (char *)v109 - (char *)v8 + 16;
                  if (v115 >= 17)
                  {
                    v116 = ((unint64_t)v115 >> 4) - 2;
                    v117 = v116 >> 1;
                    v118 = &v8[4 * (v116 >> 1)];
                    v119 = *(_DWORD *)v109;
                    v120 = v109[3];
                    if (*(_DWORD *)v118 < *(_DWORD *)v109
                      || (*(_DWORD *)v118 == v119 ? (v121 = v118[3] < v120) : (v121 = 0), v121))
                    {
                      v122 = *(_QWORD *)(v109 + 1);
                      *(_OWORD *)v109 = *(_OWORD *)v118;
                      if (v116 >= 2)
                      {
                        while (1)
                        {
                          v123 = v117 - 1;
                          v117 = (v117 - 1) >> 1;
                          v124 = &v8[4 * v117];
                          if (*(_DWORD *)v124 >= v119 && (*(_DWORD *)v124 != v119 || v124[3] >= v120))
                            break;
                          *(_OWORD *)v118 = *(_OWORD *)v124;
                          v118 = &v8[4 * v117];
                          if (v123 <= 1)
                            goto LABEL_219;
                        }
                      }
                      v124 = v118;
LABEL_219:
                      *(_DWORD *)v124 = v119;
                      *(_QWORD *)(v124 + 1) = v122;
                      v124[3] = v120;
                    }
                  }
                }
              }
              while (v106-- > 2);
            }
            return;
          }
          v11 = v10 >> 1;
          v12 = &v8[4 * (v10 >> 1)];
          if ((unint64_t)v9 >= 0x801)
          {
            sub_2236B6494(a1, &a1[4 * (v10 >> 1)], a2 - 4);
            v13 = 4 * v11;
            v14 = &a1[4 * v11 - 4];
            sub_2236B6494(a1 + 4, v14, a2 - 8);
            sub_2236B6494(a1 + 8, &a1[v13 + 4], a2 - 12);
            sub_2236B6494(v14, v12, &a1[v13 + 4]);
            v134 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v12;
            *(_OWORD *)v12 = v134;
            --a3;
            v15 = *a1;
            if ((a4 & 1) != 0)
              goto LABEL_23;
LABEL_7:
            v16 = *((_DWORD *)a1 - 4);
            v17 = a1[3];
            if (v16 < SLODWORD(v15) || v16 == LODWORD(v15) && *(a1 - 1) < v17)
              goto LABEL_24;
            v18 = *((_DWORD *)a2 - 4);
            if (SLODWORD(v15) < v18 || LODWORD(v15) == v18 && v17 < *(a2 - 1))
            {
              v19 = a1 + 4;
              do
              {
                v8 = v19;
                v20 = *v19;
                if (SLODWORD(v15) < *(_DWORD *)v19)
                  break;
                v21 = v19[3];
                v19 += 4;
              }
              while (LODWORD(v15) != LODWORD(v20) || v17 >= v21);
            }
            else
            {
              v55 = a1 + 4;
              do
              {
                v8 = v55;
                if (v55 >= a2)
                  break;
                v56 = *v55;
                if (SLODWORD(v15) < *(_DWORD *)v55)
                  break;
                v57 = v55[3];
                v55 += 4;
              }
              while (LODWORD(v15) != LODWORD(v56) || v17 >= v57);
            }
            i = a2;
            if (v8 < a2)
            {
              for (i = a2 - 4; SLODWORD(v15) < v18 || LODWORD(v15) == v18 && v17 < i[3]; i -= 4)
              {
                v45 = *((_DWORD *)i - 4);
                v18 = v45;
              }
            }
            v46 = *(_QWORD *)(a1 + 1);
            while (v8 < i)
            {
              v136 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *(_OWORD *)i;
              *(_OWORD *)i = v136;
              v47 = v8 + 4;
              do
              {
                v8 = v47;
                v48 = *v47;
                if (SLODWORD(v15) < *(_DWORD *)v47)
                  break;
                v49 = v47[3];
                v47 += 4;
              }
              while (LODWORD(v15) != LODWORD(v48) || v17 >= v49);
              do
              {
                do
                {
                  v51 = *((_DWORD *)i - 4);
                  i -= 4;
                  v52 = LODWORD(v15) == v51;
                }
                while (SLODWORD(v15) < v51);
              }
              while (v52 && v17 < i[3]);
            }
            if (v8 - 4 != a1)
              *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
            a4 = 0;
            *(v8 - 4) = v15;
            *(_QWORD *)(v8 - 3) = v46;
            *(v8 - 1) = v17;
            continue;
          }
          sub_2236B6494(&a1[4 * (v10 >> 1)], a1, a2 - 4);
          --a3;
          v15 = *a1;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_23:
          v17 = a1[3];
LABEL_24:
          v24 = 0;
          v25 = *(_QWORD *)(a1 + 1);
          while (1)
          {
            v26 = LODWORD(a1[v24 + 4]);
            if (v26 >= SLODWORD(v15) && (v26 != LODWORD(v15) || a1[v24 + 7] >= v17))
              break;
            v24 += 4;
          }
          v28 = (unint64_t)&a1[v24 + 4];
          v29 = a2 - 4;
          if (v24 * 4)
          {
            do
            {
              v30 = (unint64_t)v29;
              v31 = *(_DWORD *)v29;
              if (*(_DWORD *)v29 < SLODWORD(v15))
                break;
              v32 = v29[3];
              v29 -= 4;
            }
            while (v31 != LODWORD(v15) || v32 >= v17);
LABEL_47:
            v8 = (float *)v28;
            if (v28 < v30)
            {
              v37 = (float *)v30;
              do
              {
                v135 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *(_OWORD *)v37;
                *(_OWORD *)v37 = v135;
                do
                {
                  do
                  {
                    v38 = *((_DWORD *)v8 + 4);
                    v8 += 4;
                    v39 = v38 == LODWORD(v15);
                  }
                  while (v38 < SLODWORD(v15));
                }
                while (v39 && v8[3] < v17);
                v41 = v37 - 4;
                do
                {
                  v37 = v41;
                  v42 = *(_DWORD *)v41;
                  if (*(_DWORD *)v41 < SLODWORD(v15))
                    break;
                  v43 = v41[3];
                  v41 -= 4;
                }
                while (v42 != LODWORD(v15) || v43 >= v17);
              }
              while (v8 < v37);
            }
          }
          else
          {
            v34 = a2 - 4;
            while (1)
            {
              v30 = (unint64_t)v34;
              v35 = (unint64_t)(v34 + 4);
              if (v28 >= v35)
                break;
              if (*(_DWORD *)v30 >= SLODWORD(v15))
              {
                v34 = (float *)(v30 - 16);
                if (*(_DWORD *)v30 != LODWORD(v15) || *(float *)(v30 + 12) >= v17)
                  continue;
              }
              goto LABEL_47;
            }
            v30 = v35;
            v8 = (float *)v28;
          }
          if (v8 - 4 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          *(v8 - 4) = v15;
          *(_QWORD *)(v8 - 3) = v25;
          *(v8 - 1) = v17;
          if (v28 < v30)
            goto LABEL_89;
          v54 = sub_223F79328(a1, v8 - 4);
          if (!sub_223F79328(v8, a2))
          {
            if (v54)
              continue;
LABEL_89:
            sub_223F789CC(a1, v8 - 4, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v8 - 4;
          if (v54)
            return;
          goto LABEL_1;
        }
        v73 = v8 + 4;
        v75 = v8 == a2 || v73 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v75)
          {
            v76 = 0;
            v77 = v8;
            do
            {
              v79 = v73;
              v80 = *((_DWORD *)v77 + 4);
              v81 = v77[7];
              if (v80 < *(_DWORD *)v77 || (v80 == *(_DWORD *)v77 ? (v82 = v81 < v77[3]) : (v82 = 0), v82))
              {
                v83 = *(_QWORD *)(v77 + 5);
                *(_OWORD *)v79 = *(_OWORD *)v77;
                v78 = v8;
                if (v77 != v8)
                {
                  v84 = v76;
                  while (1)
                  {
                    v85 = (float *)((char *)v8 + v84);
                    v86 = *(_DWORD *)((char *)v8 + v84 - 16);
                    if (v80 >= v86 && (v80 != v86 || v81 >= *(v85 - 1)))
                      break;
                    *(_OWORD *)v85 = *(_OWORD *)((char *)v8 + v84 - 16);
                    v84 -= 16;
                    if (!v84)
                    {
                      v78 = v8;
                      goto LABEL_137;
                    }
                  }
                  v78 = (float *)((char *)v8 + v84);
                }
LABEL_137:
                *(_DWORD *)v78 = v80;
                *(_QWORD *)(v78 + 1) = v83;
                v78[3] = v81;
              }
              v73 = v79 + 4;
              v76 += 16;
              v77 = v79;
            }
            while (v79 + 4 != a2);
          }
        }
        else if (!v75)
        {
          do
          {
            v126 = v73;
            v127 = *((_DWORD *)a1 + 4);
            v128 = a1[7];
            if (v127 < *(_DWORD *)a1 || (v127 == *(_DWORD *)a1 ? (v129 = v128 < a1[3]) : (v129 = 0), v129))
            {
              v130 = *(_QWORD *)(a1 + 5);
              for (j = v126; ; j -= 4)
              {
                *(_OWORD *)j = *((_OWORD *)j - 1);
                v132 = *((_DWORD *)j - 8);
                if (v127 >= v132 && (v127 != v132 || v128 >= *(j - 5)))
                  break;
              }
              *((_DWORD *)j - 4) = v127;
              *(_QWORD *)(j - 3) = v130;
              *(j - 1) = v128;
            }
            v73 = v126 + 4;
            a1 = v126;
          }
          while (v126 + 4 != a2);
        }
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v59 = a2 - 4;
        v60 = *((_DWORD *)a2 - 4);
        if (v60 < *(_DWORD *)v8 || (v60 == *(_DWORD *)v8 ? (v61 = *(a2 - 1) < v8[3]) : (v61 = 0), v61))
        {
          v137 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v59;
          *(_OWORD *)v59 = v137;
        }
        return;
      case 3uLL:
        sub_2236B6494(v8, v8 + 4, a2 - 4);
        return;
      case 4uLL:
        v62 = (__int128 *)(v8 + 4);
        v63 = (__int128 *)(v8 + 8);
        sub_2236B6494(v8, v8 + 4, v8 + 8);
        v64 = a2 - 4;
        v65 = *((_DWORD *)a2 - 4);
        v66 = *((_DWORD *)v8 + 8);
        if (v65 < v66 || (v65 == v66 ? (v67 = *(a2 - 1) < v8[11]) : (v67 = 0), v67))
        {
          v68 = *v63;
          *v63 = *(_OWORD *)v64;
          *(_OWORD *)v64 = v68;
          v69 = *((_DWORD *)v8 + 8);
          v70 = *((_DWORD *)v8 + 4);
          if (v69 < v70 || v69 == v70 && v8[11] < v8[7])
          {
            v71 = *v62;
            *v62 = *v63;
            *v63 = v71;
            v72 = *((_DWORD *)v8 + 4);
            if (v72 < *(_DWORD *)v8 || v72 == *(_DWORD *)v8 && v8[7] < v8[3])
            {
              v138 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *v62;
              *v62 = v138;
            }
          }
        }
        return;
      case 5uLL:
        sub_2236B62E8((uint64_t)v8, v8 + 4, v8 + 8, (uint64_t)(v8 + 12), (uint64_t)(a2 - 4));
        return;
      default:
        if (v9 > 383)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v88 = (v10 - 2) >> 1;
              v89 = v88;
              do
              {
                v90 = v89;
                if (v88 >= v89)
                {
                  v91 = (2 * v89) | 1;
                  v92 = &v8[4 * v91];
                  if (2 * v90 + 2 < (uint64_t)v10)
                  {
                    v93 = *((_DWORD *)v92 + 4);
                    if (*(_DWORD *)v92 < v93 || (*(_DWORD *)v92 == v93 ? (v94 = v92[3] < v92[7]) : (v94 = 0), v94))
                    {
                      v92 += 4;
                      v91 = 2 * v90 + 2;
                    }
                  }
                  v95 = &v8[4 * v90];
                  v96 = *(_DWORD *)v95;
                  if (*(_DWORD *)v92 >= *(_DWORD *)v95)
                  {
                    v97 = v95[3];
                    if (*(_DWORD *)v92 != v96 || v92[3] >= v97)
                    {
                      v99 = *(_QWORD *)(v95 + 1);
                      do
                      {
                        v100 = v95;
                        v95 = v92;
                        *(_OWORD *)v100 = *(_OWORD *)v92;
                        if (v88 < v91)
                          break;
                        v101 = 2 * v91;
                        v91 = (2 * v91) | 1;
                        v92 = &v8[4 * v91];
                        v102 = v101 + 2;
                        if (v102 < (uint64_t)v10)
                        {
                          v103 = *((_DWORD *)v92 + 4);
                          if (*(_DWORD *)v92 < v103
                            || (*(_DWORD *)v92 == v103 ? (v104 = v92[3] < v92[7]) : (v104 = 0), v104))
                          {
                            v92 += 4;
                            v91 = v102;
                          }
                        }
                        if (*(_DWORD *)v92 < v96)
                          break;
                      }
                      while (*(_DWORD *)v92 != v96 || v92[3] >= v97);
                      *(_DWORD *)v95 = v96;
                      *(_QWORD *)(v95 + 1) = v99;
                      v95[3] = v97;
                    }
                  }
                }
                v89 = v90 - 1;
              }
              while (v90);
              v106 = (unint64_t)v9 >> 4;
              do
              {
                v108 = 0;
                v139 = *(_OWORD *)v8;
                v109 = v8;
                do
                {
                  v110 = v109;
                  v109 += 4 * v108 + 4;
                  v111 = 2 * v108;
                  v108 = (2 * v108) | 1;
                  v112 = v111 + 2;
                  if (v112 < v106)
                  {
                    v113 = *((_DWORD *)v109 + 4);
                    if (*(_DWORD *)v109 < v113
                      || (*(_DWORD *)v109 == v113 ? (v114 = v109[3] < v109[7]) : (v114 = 0), v114))
                    {
                      v109 += 4;
                      v108 = v112;
                    }
                  }
                  *(_OWORD *)v110 = *(_OWORD *)v109;
                }
                while (v108 <= (uint64_t)((unint64_t)(v106 - 2) >> 1));
                a2 -= 4;
                if (v109 == a2)
                {
                  *(_OWORD *)v109 = v139;
                }
                else
                {
                  *(_OWORD *)v109 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v139;
                  v115 = (char *)v109 - (char *)v8 + 16;
                  if (v115 >= 17)
                  {
                    v116 = ((unint64_t)v115 >> 4) - 2;
                    v117 = v116 >> 1;
                    v118 = &v8[4 * (v116 >> 1)];
                    v119 = *(_DWORD *)v109;
                    v120 = v109[3];
                    if (*(_DWORD *)v118 < *(_DWORD *)v109
                      || (*(_DWORD *)v118 == v119 ? (v121 = v118[3] < v120) : (v121 = 0), v121))
                    {
                      v122 = *(_QWORD *)(v109 + 1);
                      *(_OWORD *)v109 = *(_OWORD *)v118;
                      if (v116 >= 2)
                      {
                        while (1)
                        {
                          v123 = v117 - 1;
                          v117 = (v117 - 1) >> 1;
                          v124 = &v8[4 * v117];
                          if (*(_DWORD *)v124 >= v119 && (*(_DWORD *)v124 != v119 || v124[3] >= v120))
                            break;
                          *(_OWORD *)v118 = *(_OWORD *)v124;
                          v118 = &v8[4 * v117];
                          if (v123 <= 1)
                            goto LABEL_219;
                        }
                      }
                      v124 = v118;
LABEL_219:
                      *(_DWORD *)v124 = v119;
                      *(_QWORD *)(v124 + 1) = v122;
                      v124[3] = v120;
                    }
                  }
                }
              }
              while (v106-- > 2);
            }
            return;
          }
          v11 = v10 >> 1;
          v12 = &v8[4 * (v10 >> 1)];
          if ((unint64_t)v9 >= 0x801)
          {
            sub_2236B6494(a1, &a1[4 * (v10 >> 1)], a2 - 4);
            v13 = 4 * v11;
            v14 = &a1[4 * v11 - 4];
            sub_2236B6494(a1 + 4, v14, a2 - 8);
            sub_2236B6494(a1 + 8, &a1[v13 + 4], a2 - 12);
            sub_2236B6494(v14, v12, &a1[v13 + 4]);
            v134 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v12;
            *(_OWORD *)v12 = v134;
            --a3;
            v15 = *a1;
            if ((a4 & 1) != 0)
              goto LABEL_23;
LABEL_7:
            v16 = *((_DWORD *)a1 - 4);
            v17 = a1[3];
            if (v16 < SLODWORD(v15) || v16 == LODWORD(v15) && *(a1 - 1) < v17)
              goto LABEL_24;
            v18 = *((_DWORD *)a2 - 4);
            if (SLODWORD(v15) < v18 || LODWORD(v15) == v18 && v17 < *(a2 - 1))
            {
              v19 = a1 + 4;
              do
              {
                v8 = v19;
                v20 = *v19;
                if (SLODWORD(v15) < *(_DWORD *)v19)
                  break;
                v21 = v19[3];
                v19 += 4;
              }
              while (LODWORD(v15) != LODWORD(v20) || v17 >= v21);
            }
            else
            {
              v55 = a1 + 4;
              do
              {
                v8 = v55;
                if (v55 >= a2)
                  break;
                v56 = *v55;
                if (SLODWORD(v15) < *(_DWORD *)v55)
                  break;
                v57 = v55[3];
                v55 += 4;
              }
              while (LODWORD(v15) != LODWORD(v56) || v17 >= v57);
            }
            i = a2;
            if (v8 < a2)
            {
              for (i = a2 - 4; SLODWORD(v15) < v18 || LODWORD(v15) == v18 && v17 < i[3]; i -= 4)
              {
                v45 = *((_DWORD *)i - 4);
                v18 = v45;
              }
            }
            v46 = *(_QWORD *)(a1 + 1);
            while (v8 < i)
            {
              v136 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *(_OWORD *)i;
              *(_OWORD *)i = v136;
              v47 = v8 + 4;
              do
              {
                v8 = v47;
                v48 = *v47;
                if (SLODWORD(v15) < *(_DWORD *)v47)
                  break;
                v49 = v47[3];
                v47 += 4;
              }
              while (LODWORD(v15) != LODWORD(v48) || v17 >= v49);
              do
              {
                do
                {
                  v51 = *((_DWORD *)i - 4);
                  i -= 4;
                  v52 = LODWORD(v15) == v51;
                }
                while (SLODWORD(v15) < v51);
              }
              while (v52 && v17 < i[3]);
            }
            if (v8 - 4 != a1)
              *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
            a4 = 0;
            *(v8 - 4) = v15;
            *(_QWORD *)(v8 - 3) = v46;
            *(v8 - 1) = v17;
            continue;
          }
          sub_2236B6494(&a1[4 * (v10 >> 1)], a1, a2 - 4);
          --a3;
          v15 = *a1;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_23:
          v17 = a1[3];
LABEL_24:
          v24 = 0;
          v25 = *(_QWORD *)(a1 + 1);
          while (1)
          {
            v26 = LODWORD(a1[v24 + 4]);
            if (v26 >= SLODWORD(v15) && (v26 != LODWORD(v15) || a1[v24 + 7] >= v17))
              break;
            v24 += 4;
          }
          v28 = (unint64_t)&a1[v24 + 4];
          v29 = a2 - 4;
          if (v24 * 4)
          {
            do
            {
              v30 = (unint64_t)v29;
              v31 = *(_DWORD *)v29;
              if (*(_DWORD *)v29 < SLODWORD(v15))
                break;
              v32 = v29[3];
              v29 -= 4;
            }
            while (v31 != LODWORD(v15) || v32 >= v17);
LABEL_47:
            v8 = (float *)v28;
            if (v28 < v30)
            {
              v37 = (float *)v30;
              do
              {
                v135 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *(_OWORD *)v37;
                *(_OWORD *)v37 = v135;
                do
                {
                  do
                  {
                    v38 = *((_DWORD *)v8 + 4);
                    v8 += 4;
                    v39 = v38 == LODWORD(v15);
                  }
                  while (v38 < SLODWORD(v15));
                }
                while (v39 && v8[3] < v17);
                v41 = v37 - 4;
                do
                {
                  v37 = v41;
                  v42 = *(_DWORD *)v41;
                  if (*(_DWORD *)v41 < SLODWORD(v15))
                    break;
                  v43 = v41[3];
                  v41 -= 4;
                }
                while (v42 != LODWORD(v15) || v43 >= v17);
              }
              while (v8 < v37);
            }
          }
          else
          {
            v34 = a2 - 4;
            while (1)
            {
              v30 = (unint64_t)v34;
              v35 = (unint64_t)(v34 + 4);
              if (v28 >= v35)
                break;
              if (*(_DWORD *)v30 >= SLODWORD(v15))
              {
                v34 = (float *)(v30 - 16);
                if (*(_DWORD *)v30 != LODWORD(v15) || *(float *)(v30 + 12) >= v17)
                  continue;
              }
              goto LABEL_47;
            }
            v30 = v35;
            v8 = (float *)v28;
          }
          if (v8 - 4 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          *(v8 - 4) = v15;
          *(_QWORD *)(v8 - 3) = v25;
          *(v8 - 1) = v17;
          if (v28 < v30)
            goto LABEL_89;
          v54 = sub_223F7B20C(a1, v8 - 4);
          if (!sub_223F7B20C(v8, a2))
          {
            if (v54)
              continue;
LABEL_89:
            sub_223F7A8B0(a1, v8 - 4, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v8 - 4;
          if (v54)
            return;
          goto LABEL_1;
        }
        v73 = v8 + 4;
        v75 = v8 == a2 || v73 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v75)
          {
            v76 = 0;
            v77 = v8;
            do
            {
              v79 = v73;
              v80 = *((_DWORD *)v77 + 4);
              v81 = v77[7];
              if (v80 < *(_DWORD *)v77 || (v80 == *(_DWORD *)v77 ? (v82 = v81 < v77[3]) : (v82 = 0), v82))
              {
                v83 = *(_QWORD *)(v77 + 5);
                *(_OWORD *)v79 = *(_OWORD *)v77;
                v78 = v8;
                if (v77 != v8)
                {
                  v84 = v76;
                  while (1)
                  {
                    v85 = (float *)((char *)v8 + v84);
                    v86 = *(_DWORD *)((char *)v8 + v84 - 16);
                    if (v80 >= v86 && (v80 != v86 || v81 >= *(v85 - 1)))
                      break;
                    *(_OWORD *)v85 = *(_OWORD *)((char *)v8 + v84 - 16);
                    v84 -= 16;
                    if (!v84)
                    {
                      v78 = v8;
                      goto LABEL_137;
                    }
                  }
                  v78 = (float *)((char *)v8 + v84);
                }
LABEL_137:
                *(_DWORD *)v78 = v80;
                *(_QWORD *)(v78 + 1) = v83;
                v78[3] = v81;
              }
              v73 = v79 + 4;
              v76 += 16;
              v77 = v79;
            }
            while (v79 + 4 != a2);
          }
        }
        else if (!v75)
        {
          do
          {
            v126 = v73;
            v127 = *((_DWORD *)a1 + 4);
            v128 = a1[7];
            if (v127 < *(_DWORD *)a1 || (v127 == *(_DWORD *)a1 ? (v129 = v128 < a1[3]) : (v129 = 0), v129))
            {
              v130 = *(_QWORD *)(a1 + 5);
              for (j = v126; ; j -= 4)
              {
                *(_OWORD *)j = *((_OWORD *)j - 1);
                v132 = *((_DWORD *)j - 8);
                if (v127 >= v132 && (v127 != v132 || v128 >= *(j - 5)))
                  break;
              }
              *((_DWORD *)j - 4) = v127;
              *(_QWORD *)(j - 3) = v130;
              *(j - 1) = v128;
            }
            v73 = v126 + 4;
            a1 = v126;
          }
          while (v126 + 4 != a2);
        }
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v59 = a2 - 4;
        v60 = *((_DWORD *)a2 - 4);
        if (v60 < *(_DWORD *)v8 || (v60 == *(_DWORD *)v8 ? (v61 = *(a2 - 1) < v8[3]) : (v61 = 0), v61))
        {
          v137 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v59;
          *(_OWORD *)v59 = v137;
        }
        return;
      case 3uLL:
        sub_2236B6494(v8, v8 + 4, a2 - 4);
        return;
      case 4uLL:
        v62 = (__int128 *)(v8 + 4);
        v63 = (__int128 *)(v8 + 8);
        sub_2236B6494(v8, v8 + 4, v8 + 8);
        v64 = a2 - 4;
        v65 = *((_DWORD *)a2 - 4);
        v66 = *((_DWORD *)v8 + 8);
        if (v65 < v66 || (v65 == v66 ? (v67 = *(a2 - 1) < v8[11]) : (v67 = 0), v67))
        {
          v68 = *v63;
          *v63 = *(_OWORD *)v64;
          *(_OWORD *)v64 = v68;
          v69 = *((_DWORD *)v8 + 8);
          v70 = *((_DWORD *)v8 + 4);
          if (v69 < v70 || v69 == v70 && v8[11] < v8[7])
          {
            v71 = *v62;
            *v62 = *v63;
            *v63 = v71;
            v72 = *((_DWORD *)v8 + 4);
            if (v72 < *(_DWORD *)v8 || v72 == *(_DWORD *)v8 && v8[7] < v8[3])
            {
              v138 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *v62;
              *v62 = v138;
            }
          }
        }
        return;
      case 5uLL:
        sub_2236B62E8((uint64_t)v8, v8 + 4, v8 + 8, (uint64_t)(v8 + 12), (uint64_t)(a2 - 4));
        return;
      default:
        if (v9 > 383)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v88 = (v10 - 2) >> 1;
              v89 = v88;
              do
              {
                v90 = v89;
                if (v88 >= v89)
                {
                  v91 = (2 * v89) | 1;
                  v92 = &v8[4 * v91];
                  if (2 * v90 + 2 < (uint64_t)v10)
                  {
                    v93 = *((_DWORD *)v92 + 4);
                    if (*(_DWORD *)v92 < v93 || (*(_DWORD *)v92 == v93 ? (v94 = v92[3] < v92[7]) : (v94 = 0), v94))
                    {
                      v92 += 4;
                      v91 = 2 * v90 + 2;
                    }
                  }
                  v95 = &v8[4 * v90];
                  v96 = *(_DWORD *)v95;
                  if (*(_DWORD *)v92 >= *(_DWORD *)v95)
                  {
                    v97 = v95[3];
                    if (*(_DWORD *)v92 != v96 || v92[3] >= v97)
                    {
                      v99 = *(_QWORD *)(v95 + 1);
                      do
                      {
                        v100 = v95;
                        v95 = v92;
                        *(_OWORD *)v100 = *(_OWORD *)v92;
                        if (v88 < v91)
                          break;
                        v101 = 2 * v91;
                        v91 = (2 * v91) | 1;
                        v92 = &v8[4 * v91];
                        v102 = v101 + 2;
                        if (v102 < (uint64_t)v10)
                        {
                          v103 = *((_DWORD *)v92 + 4);
                          if (*(_DWORD *)v92 < v103
                            || (*(_DWORD *)v92 == v103 ? (v104 = v92[3] < v92[7]) : (v104 = 0), v104))
                          {
                            v92 += 4;
                            v91 = v102;
                          }
                        }
                        if (*(_DWORD *)v92 < v96)
                          break;
                      }
                      while (*(_DWORD *)v92 != v96 || v92[3] >= v97);
                      *(_DWORD *)v95 = v96;
                      *(_QWORD *)(v95 + 1) = v99;
                      v95[3] = v97;
                    }
                  }
                }
                v89 = v90 - 1;
              }
              while (v90);
              v106 = (unint64_t)v9 >> 4;
              do
              {
                v108 = 0;
                v139 = *(_OWORD *)v8;
                v109 = v8;
                do
                {
                  v110 = v109;
                  v109 += 4 * v108 + 4;
                  v111 = 2 * v108;
                  v108 = (2 * v108) | 1;
                  v112 = v111 + 2;
                  if (v112 < v106)
                  {
                    v113 = *((_DWORD *)v109 + 4);
                    if (*(_DWORD *)v109 < v113
                      || (*(_DWORD *)v109 == v113 ? (v114 = v109[3] < v109[7]) : (v114 = 0), v114))
                    {
                      v109 += 4;
                      v108 = v112;
                    }
                  }
                  *(_OWORD *)v110 = *(_OWORD *)v109;
                }
                while (v108 <= (uint64_t)((unint64_t)(v106 - 2) >> 1));
                a2 -= 4;
                if (v109 == a2)
                {
                  *(_OWORD *)v109 = v139;
                }
                else
                {
                  *(_OWORD *)v109 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v139;
                  v115 = (char *)v109 - (char *)v8 + 16;
                  if (v115 >= 17)
                  {
                    v116 = ((unint64_t)v115 >> 4) - 2;
                    v117 = v116 >> 1;
                    v118 = &v8[4 * (v116 >> 1)];
                    v119 = *(_DWORD *)v109;
                    v120 = v109[3];
                    if (*(_DWORD *)v118 < *(_DWORD *)v109
                      || (*(_DWORD *)v118 == v119 ? (v121 = v118[3] < v120) : (v121 = 0), v121))
                    {
                      v122 = *(_QWORD *)(v109 + 1);
                      *(_OWORD *)v109 = *(_OWORD *)v118;
                      if (v116 >= 2)
                      {
                        while (1)
                        {
                          v123 = v117 - 1;
                          v117 = (v117 - 1) >> 1;
                          v124 = &v8[4 * v117];
                          if (*(_DWORD *)v124 >= v119 && (*(_DWORD *)v124 != v119 || v124[3] >= v120))
                            break;
                          *(_OWORD *)v118 = *(_OWORD *)v124;
                          v118 = &v8[4 * v117];
                          if (v123 <= 1)
                            goto LABEL_219;
                        }
                      }
                      v124 = v118;
LABEL_219:
                      *(_DWORD *)v124 = v119;
                      *(_QWORD *)(v124 + 1) = v122;
                      v124[3] = v120;
                    }
                  }
                }
              }
              while (v106-- > 2);
            }
            return;
          }
          v11 = v10 >> 1;
          v12 = &v8[4 * (v10 >> 1)];
          if ((unint64_t)v9 >= 0x801)
          {
            sub_2236B6494(a1, &a1[4 * (v10 >> 1)], a2 - 4);
            v13 = 4 * v11;
            v14 = &a1[4 * v11 - 4];
            sub_2236B6494(a1 + 4, v14, a2 - 8);
            sub_2236B6494(a1 + 8, &a1[v13 + 4], a2 - 12);
            sub_2236B6494(v14, v12, &a1[v13 + 4]);
            v134 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v12;
            *(_OWORD *)v12 = v134;
            --a3;
            v15 = *a1;
            if ((a4 & 1) != 0)
              goto LABEL_23;
LABEL_7:
            v16 = *((_DWORD *)a1 - 4);
            v17 = a1[3];
            if (v16 < SLODWORD(v15) || v16 == LODWORD(v15) && *(a1 - 1) < v17)
              goto LABEL_24;
            v18 = *((_DWORD *)a2 - 4);
            if (SLODWORD(v15) < v18 || LODWORD(v15) == v18 && v17 < *(a2 - 1))
            {
              v19 = a1 + 4;
              do
              {
                v8 = v19;
                v20 = *v19;
                if (SLODWORD(v15) < *(_DWORD *)v19)
                  break;
                v21 = v19[3];
                v19 += 4;
              }
              while (LODWORD(v15) != LODWORD(v20) || v17 >= v21);
            }
            else
            {
              v55 = a1 + 4;
              do
              {
                v8 = v55;
                if (v55 >= a2)
                  break;
                v56 = *v55;
                if (SLODWORD(v15) < *(_DWORD *)v55)
                  break;
                v57 = v55[3];
                v55 += 4;
              }
              while (LODWORD(v15) != LODWORD(v56) || v17 >= v57);
            }
            i = a2;
            if (v8 < a2)
            {
              for (i = a2 - 4; SLODWORD(v15) < v18 || LODWORD(v15) == v18 && v17 < i[3]; i -= 4)
              {
                v45 = *((_DWORD *)i - 4);
                v18 = v45;
              }
            }
            v46 = *(_QWORD *)(a1 + 1);
            while (v8 < i)
            {
              v136 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *(_OWORD *)i;
              *(_OWORD *)i = v136;
              v47 = v8 + 4;
              do
              {
                v8 = v47;
                v48 = *v47;
                if (SLODWORD(v15) < *(_DWORD *)v47)
                  break;
                v49 = v47[3];
                v47 += 4;
              }
              while (LODWORD(v15) != LODWORD(v48) || v17 >= v49);
              do
              {
                do
                {
                  v51 = *((_DWORD *)i - 4);
                  i -= 4;
                  v52 = LODWORD(v15) == v51;
                }
                while (SLODWORD(v15) < v51);
              }
              while (v52 && v17 < i[3]);
            }
            if (v8 - 4 != a1)
              *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
            a4 = 0;
            *(v8 - 4) = v15;
            *(_QWORD *)(v8 - 3) = v46;
            *(v8 - 1) = v17;
            continue;
          }
          sub_2236B6494(&a1[4 * (v10 >> 1)], a1, a2 - 4);
          --a3;
          v15 = *a1;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_23:
          v17 = a1[3];
LABEL_24:
          v24 = 0;
          v25 = *(_QWORD *)(a1 + 1);
          while (1)
          {
            v26 = LODWORD(a1[v24 + 4]);
            if (v26 >= SLODWORD(v15) && (v26 != LODWORD(v15) || a1[v24 + 7] >= v17))
              break;
            v24 += 4;
          }
          v28 = (unint64_t)&a1[v24 + 4];
          v29 = a2 - 4;
          if (v24 * 4)
          {
            do
            {
              v30 = (unint64_t)v29;
              v31 = *(_DWORD *)v29;
              if (*(_DWORD *)v29 < SLODWORD(v15))
                break;
              v32 = v29[3];
              v29 -= 4;
            }
            while (v31 != LODWORD(v15) || v32 >= v17);
LABEL_47:
            v8 = (float *)v28;
            if (v28 < v30)
            {
              v37 = (float *)v30;
              do
              {
                v135 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *(_OWORD *)v37;
                *(_OWORD *)v37 = v135;
                do
                {
                  do
                  {
                    v38 = *((_DWORD *)v8 + 4);
                    v8 += 4;
                    v39 = v38 == LODWORD(v15);
                  }
                  while (v38 < SLODWORD(v15));
                }
                while (v39 && v8[3] < v17);
                v41 = v37 - 4;
                do
                {
                  v37 = v41;
                  v42 = *(_DWORD *)v41;
                  if (*(_DWORD *)v41 < SLODWORD(v15))
                    break;
                  v43 = v41[3];
                  v41 -= 4;
                }
                while (v42 != LODWORD(v15) || v43 >= v17);
              }
              while (v8 < v37);
            }
          }
          else
          {
            v34 = a2 - 4;
            while (1)
            {
              v30 = (unint64_t)v34;
              v35 = (unint64_t)(v34 + 4);
              if (v28 >= v35)
                break;
              if (*(_DWORD *)v30 >= SLODWORD(v15))
              {
                v34 = (float *)(v30 - 16);
                if (*(_DWORD *)v30 != LODWORD(v15) || *(float *)(v30 + 12) >= v17)
                  continue;
              }
              goto LABEL_47;
            }
            v30 = v35;
            v8 = (float *)v28;
          }
          if (v8 - 4 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          *(v8 - 4) = v15;
          *(_QWORD *)(v8 - 3) = v25;
          *(v8 - 1) = v17;
          if (v28 < v30)
            goto LABEL_89;
          v54 = sub_223FA52EC(a1, v8 - 4);
          if (!sub_223FA52EC(v8, a2))
          {
            if (v54)
              continue;
LABEL_89:
            sub_223FA4990(a1, v8 - 4, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v8 - 4;
          if (v54)
            return;
          goto LABEL_1;
        }
        v73 = v8 + 4;
        v75 = v8 == a2 || v73 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v75)
          {
            v76 = 0;
            v77 = v8;
            do
            {
              v79 = v73;
              v80 = *((_DWORD *)v77 + 4);
              v81 = v77[7];
              if (v80 < *(_DWORD *)v77 || (v80 == *(_DWORD *)v77 ? (v82 = v81 < v77[3]) : (v82 = 0), v82))
              {
                v83 = *(_QWORD *)(v77 + 5);
                *(_OWORD *)v79 = *(_OWORD *)v77;
                v78 = v8;
                if (v77 != v8)
                {
                  v84 = v76;
                  while (1)
                  {
                    v85 = (float *)((char *)v8 + v84);
                    v86 = *(_DWORD *)((char *)v8 + v84 - 16);
                    if (v80 >= v86 && (v80 != v86 || v81 >= *(v85 - 1)))
                      break;
                    *(_OWORD *)v85 = *(_OWORD *)((char *)v8 + v84 - 16);
                    v84 -= 16;
                    if (!v84)
                    {
                      v78 = v8;
                      goto LABEL_137;
                    }
                  }
                  v78 = (float *)((char *)v8 + v84);
                }
LABEL_137:
                *(_DWORD *)v78 = v80;
                *(_QWORD *)(v78 + 1) = v83;
                v78[3] = v81;
              }
              v73 = v79 + 4;
              v76 += 16;
              v77 = v79;
            }
            while (v79 + 4 != a2);
          }
        }
        else if (!v75)
        {
          do
          {
            v126 = v73;
            v127 = *((_DWORD *)a1 + 4);
            v128 = a1[7];
            if (v127 < *(_DWORD *)a1 || (v127 == *(_DWORD *)a1 ? (v129 = v128 < a1[3]) : (v129 = 0), v129))
            {
              v130 = *(_QWORD *)(a1 + 5);
              for (j = v126; ; j -= 4)
              {
                *(_OWORD *)j = *((_OWORD *)j - 1);
                v132 = *((_DWORD *)j - 8);
                if (v127 >= v132 && (v127 != v132 || v128 >= *(j - 5)))
                  break;
              }
              *((_DWORD *)j - 4) = v127;
              *(_QWORD *)(j - 3) = v130;
              *(j - 1) = v128;
            }
            v73 = v126 + 4;
            a1 = v126;
          }
          while (v126 + 4 != a2);
        }
        return;
    }
  }
}

  v8 = a2 - 2;
  v146 = a2 - 4;
  v144 = a2 - 1;
  v145 = a2 - 6;
  v139 = a2 - 5;
  v140 = a2 - 3;
  n128_u64 = (unint64_t)a1;
  v143 = a2;
  v141 = a2 - 2;
  while (2)
  {
    a1 = (__n128 *)n128_u64;
    v10 = (uint64_t)a2 - n128_u64;
    v11 = (uint64_t)((uint64_t)a2 - n128_u64) >> 5;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(v8, (__n128 *)n128_u64))
        {
          v80 = *(__n128 *)(n128_u64 + 16);
          v152 = *(__n128 *)n128_u64;
          v153 = v80;
          *(__n128 *)n128_u64 = *v8;
          *(__n128 *)(n128_u64 + 16) = a2[-1];
          goto LABEL_101;
        }
        return;
      case 3uLL:
        v81 = (__n128 *)(n128_u64 + 32);
        v82 = (*a3)((__n128 *)(n128_u64 + 32), (__n128 *)n128_u64);
        v83 = (*a3)(v8, (__n128 *)(n128_u64 + 32));
        if ((v82 & 1) != 0)
        {
          v84 = (__n128 *)(n128_u64 + 16);
          if (v83)
          {
            v85 = *v84;
            v152 = *(__n128 *)n128_u64;
            v153 = v85;
            *(__n128 *)n128_u64 = *v8;
            *v84 = a2[-1];
LABEL_101:
            v86 = v152;
          }
          else
          {
            v136 = *v84;
            v152 = *(__n128 *)n128_u64;
            v153 = v136;
            *(__n128 *)n128_u64 = *v81;
            *v84 = *(__n128 *)(n128_u64 + 48);
            v137 = v153;
            *v81 = v152;
            *(__n128 *)(n128_u64 + 48) = v137;
            if (!(*a3)(v8, (__n128 *)(n128_u64 + 32)))
              return;
            v86 = *v81;
            v138 = *(__n128 *)(n128_u64 + 48);
            v152 = *v81;
            v153 = v138;
            *v81 = *v8;
            *(__n128 *)(n128_u64 + 48) = a2[-1];
          }
          *v8 = v86;
          a2[-1] = v153;
          return;
        }
        if (v83)
        {
          v126 = *(__n128 *)(n128_u64 + 48);
          v152 = *v81;
          v125 = v152;
          v153 = v126;
          *v81 = *v8;
          *(__n128 *)(n128_u64 + 48) = a2[-1];
          *v8 = v125;
          a2[-1] = v153;
          goto LABEL_154;
        }
        return;
      case 4uLL:
        sub_223FCE960((__n128 *)n128_u64, (__n128 *)(n128_u64 + 32), (__n128 *)(n128_u64 + 64), v8, a3);
        return;
      case 5uLL:
        v81 = (__n128 *)(n128_u64 + 32);
        v87 = (__n128 *)(n128_u64 + 64);
        v88 = (__n128 *)(n128_u64 + 96);
        v89 = sub_223FCE960((__n128 *)n128_u64, (__n128 *)(n128_u64 + 32), (__n128 *)(n128_u64 + 64), (__n128 *)(n128_u64 + 96), a3);
        if (((unsigned int (*)(__n128 *, unint64_t, __n128))*a3)(v8, n128_u64 + 96, v89))
        {
          v91 = *(__n128 *)(n128_u64 + 112);
          v152 = *v88;
          v90 = v152;
          v153 = v91;
          *v88 = *v8;
          *(__n128 *)(n128_u64 + 112) = a2[-1];
          *v8 = v90;
          a2[-1] = v153;
          if ((*a3)((__n128 *)(n128_u64 + 96), (__n128 *)(n128_u64 + 64)))
          {
            v92 = *v87;
            v93 = *(_OWORD *)(n128_u64 + 80);
            *v87 = *v88;
            *(_OWORD *)(n128_u64 + 80) = *(_OWORD *)(n128_u64 + 112);
            *v88 = v92;
            *(_OWORD *)(n128_u64 + 112) = v93;
            if ((*a3)((__n128 *)(n128_u64 + 64), (__n128 *)(n128_u64 + 32)))
            {
              v94 = *v81;
              v95 = *(_OWORD *)(n128_u64 + 48);
              *v81 = *v87;
              *(_OWORD *)(n128_u64 + 48) = *(_OWORD *)(n128_u64 + 80);
              *v87 = v94;
              *(_OWORD *)(n128_u64 + 80) = v95;
LABEL_154:
              if ((*a3)(v81, (__n128 *)n128_u64))
              {
                v127 = *(__n128 *)(n128_u64 + 16);
                v152 = *(__n128 *)n128_u64;
                v153 = v127;
                v128 = *(_OWORD *)(n128_u64 + 48);
                *(__n128 *)n128_u64 = *v81;
                *(_OWORD *)(n128_u64 + 16) = v128;
                v129 = v153;
                *v81 = v152;
                *(__n128 *)(n128_u64 + 48) = v129;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 767)
        {
          if ((a5 & 1) != 0)
          {
            if ((__n128 *)n128_u64 != a2)
            {
              v96 = (__n128 *)(n128_u64 + 32);
              if ((__n128 *)(n128_u64 + 32) != a2)
              {
                v97 = 0;
                v98 = (__n128 *)n128_u64;
                do
                {
                  v100 = v96;
                  if ((*a3)(v96, v98))
                  {
                    v152 = *v100;
                    v153 = v98[3];
                    v101 = v97;
                    do
                    {
                      v102 = (_OWORD *)(n128_u64 + v101);
                      v103 = *(_OWORD *)(n128_u64 + v101 + 16);
                      v102[2] = *(_OWORD *)(n128_u64 + v101);
                      v102[3] = v103;
                      if (!v101)
                      {
                        v99 = (_OWORD *)n128_u64;
                        goto LABEL_113;
                      }
                      v101 -= 32;
                    }
                    while (((*a3)(&v152, (__n128 *)(v101 + n128_u64)) & 1) != 0);
                    v99 = (_OWORD *)(n128_u64 + v101 + 32);
LABEL_113:
                    *v99 = v152;
                    v102[1] = v153;
                  }
                  v96 = v100 + 2;
                  v97 += 32;
                  v98 = v100;
                }
                while (&v100[2] != a2);
              }
            }
          }
          else if ((__n128 *)n128_u64 != a2)
          {
            v130 = (__n128 *)(n128_u64 + 32);
            if ((__n128 *)(n128_u64 + 32) != a2)
            {
              v131 = (__n128 *)(n128_u64 - 32);
              do
              {
                v132 = v130;
                if ((*a3)(v130, a1))
                {
                  v152 = *v132;
                  v153 = a1[3];
                  v133 = v131;
                  do
                  {
                    v134 = v133[3];
                    v133[4] = v133[2];
                    v133[5] = v134;
                    v135 = (*a3)(&v152, v133);
                    v133 -= 2;
                  }
                  while ((v135 & 1) != 0);
                  v133[4] = v152;
                  v133[5] = v153;
                }
                v130 = v132 + 2;
                v131 += 2;
                a1 = v132;
              }
              while (&v132[2] != a2);
            }
          }
          return;
        }
        if (!a4)
        {
          if ((__n128 *)n128_u64 != a2)
          {
            v104 = (v11 - 2) >> 1;
            v149 = v104;
            do
            {
              if (v149 >= v104)
              {
                v106 = (2 * v104) | 1;
                v107 = &a1[2 * v106];
                if (2 * v104 + 2 < (uint64_t)v11 && (*a3)(&a1[2 * v106], v107 + 2))
                {
                  v107 += 2;
                  v106 = 2 * v104 + 2;
                }
                v108 = &a1[2 * v104];
                if (((*a3)(v107, v108) & 1) == 0)
                {
                  v152 = *v108;
                  v153 = a1[2 * v104 + 1];
                  do
                  {
                    v109 = v107;
                    *v108 = *v107;
                    v108[1] = v107[1];
                    if (v149 < v106)
                      break;
                    v110 = (2 * v106) | 1;
                    v107 = &a1[2 * v110];
                    v111 = 2 * v106 + 2;
                    if (v111 < (uint64_t)v11 && (*a3)(&a1[2 * v110], v107 + 2))
                    {
                      v107 += 2;
                      v110 = v111;
                    }
                    v108 = v109;
                    v106 = v110;
                  }
                  while (!(*a3)(v107, &v152));
                  *v109 = v152;
                  v109[1] = v153;
                }
              }
              v105 = v104-- <= 0;
            }
            while (!v105);
            v112 = (unint64_t)v10 >> 5;
            v113 = v143;
            do
            {
              v114 = 0;
              v115 = v113;
              v150 = *a1;
              v151 = a1[1];
              v116 = a1;
              do
              {
                v117 = &v116[2 * v114 + 2];
                v118 = (2 * v114) | 1;
                v119 = 2 * v114 + 2;
                if (v119 < v112 && (*a3)(&v116[2 * v114 + 2], &v116[2 * v114 + 4]))
                {
                  v117 += 2;
                  v118 = v119;
                }
                *v116 = *v117;
                v116[1] = v117[1];
                v116 = v117;
                v114 = v118;
              }
              while (v118 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
              v120 = v117 + 1;
              v113 = v115 - 2;
              if (v117 == &v115[-2])
              {
                *v117 = v150;
                *v120 = v151;
              }
              else
              {
                *v117 = *v113;
                *v120 = v115[-1];
                *v113 = v150;
                v115[-1] = v151;
                v121 = (char *)v117 - (char *)a1 + 32;
                if (v121 >= 33)
                {
                  v122 = (((unint64_t)v121 >> 5) - 2) >> 1;
                  v123 = &a1[2 * v122];
                  if ((*a3)(v123, v117))
                  {
                    v152 = *v117;
                    v153 = *v120;
                    do
                    {
                      v124 = v123;
                      *v117 = *v123;
                      v117[1] = v123[1];
                      if (!v122)
                        break;
                      v122 = (v122 - 1) >> 1;
                      v123 = &a1[2 * v122];
                      v117 = v124;
                    }
                    while (((*a3)(v123, &v152) & 1) != 0);
                    *v124 = v152;
                    v124[1] = v153;
                  }
                }
              }
              v105 = v112-- <= 2;
            }
            while (!v105);
          }
          return;
        }
        v12 = v11 >> 1;
        v13 = (__n128 *)(n128_u64 + 32 * (v11 >> 1));
        v14 = *a3;
        if ((unint64_t)v10 <= 0x1000)
        {
          v18 = v14(a1, &a1[2 * (v11 >> 1)]);
          v19 = (*a3)(v8, a1);
          if ((v18 & 1) != 0)
          {
            v20 = &a1[2 * v12 + 1];
            if (v19)
            {
              v152 = *v13;
              v153 = *v20;
              *v13 = *v8;
            }
            else
            {
              v152 = *v13;
              v153 = *v20;
              v38 = a1[1];
              *v13 = *a1;
              *v20 = v38;
              *a1 = v152;
              a1[1] = v153;
              if (!(*a3)(v8, a1))
                goto LABEL_31;
              v20 = a1 + 1;
              v152 = *a1;
              v153 = a1[1];
              *a1 = *v8;
            }
            *v20 = *v144;
            *v8 = v152;
            *v144 = v153;
          }
          else if (v19)
          {
            v24 = a1[1];
            v152 = *a1;
            v153 = v24;
            *a1 = *v8;
            a1[1] = *v144;
            *v8 = v152;
            *v144 = v153;
            if ((*a3)(a1, v13))
            {
              v152 = *v13;
              v25 = &a1[2 * v12];
              v153 = v25[1];
              *v13 = *a1;
              v25[1] = a1[1];
              *a1 = v152;
              a1[1] = v153;
              --a4;
              if ((a5 & 1) != 0)
                goto LABEL_55;
              goto LABEL_54;
            }
          }
LABEL_31:
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          if (((*a3)(a1 - 2, a1) & 1) != 0)
            goto LABEL_55;
          v74 = a1[1];
          v150 = *a1;
          v151 = v74;
          if (((*a3)(&v150, v8) & 1) != 0)
          {
            n128_u64 = (unint64_t)a1;
            do
              n128_u64 += 32;
            while (((*a3)(&v150, (__n128 *)n128_u64) & 1) == 0);
          }
          else
          {
            v75 = a1 + 2;
            do
            {
              n128_u64 = (unint64_t)v75;
              if (v75 >= a2)
                break;
              v76 = (*a3)(&v150, v75);
              v75 = (__n128 *)(n128_u64 + 32);
            }
            while (!v76);
          }
          v77 = a2;
          if (n128_u64 < (unint64_t)a2)
          {
            v77 = a2;
            do
              v77 -= 2;
            while (((*a3)(&v150, v77) & 1) != 0);
          }
          while (n128_u64 < (unint64_t)v77)
          {
            v78 = *(__n128 *)(n128_u64 + 16);
            v152 = *(__n128 *)n128_u64;
            v153 = v78;
            *(__n128 *)n128_u64 = *v77;
            *(__n128 *)(n128_u64 + 16) = v77[1];
            *v77 = v152;
            v77[1] = v153;
            do
              n128_u64 += 32;
            while (!(*a3)(&v150, (__n128 *)n128_u64));
            do
              v77 -= 2;
            while (((*a3)(&v150, v77) & 1) != 0);
          }
          v79 = (__n128 *)(n128_u64 - 32);
          if ((__n128 *)(n128_u64 - 32) != a1)
          {
            *a1 = *v79;
            a1[1] = *(__n128 *)(n128_u64 - 16);
          }
          a5 = 0;
          *v79 = v150;
          *(__n128 *)(n128_u64 - 16) = v151;
          continue;
        }
        v15 = v14(&a1[2 * (v11 >> 1)], a1);
        v16 = (*a3)(v8, v13);
        if ((v15 & 1) != 0)
        {
          v17 = a1 + 1;
          if (v16)
          {
            v152 = *a1;
            v153 = *v17;
            *a1 = *v8;
            goto LABEL_21;
          }
          v152 = *a1;
          v153 = *v17;
          *a1 = *v13;
          v26 = &a1[2 * v12];
          *v17 = v26[1];
          *v13 = v152;
          v26[1] = v153;
          if ((*a3)(v8, v13))
          {
            v17 = v26 + 1;
            v152 = *v13;
            v153 = v26[1];
            *v13 = *v8;
LABEL_21:
            *v17 = *v144;
            *v8 = v152;
            *v144 = v153;
          }
        }
        else if (v16)
        {
          v152 = *v13;
          v21 = &a1[2 * v12];
          v153 = v21[1];
          *v13 = *v8;
          v21[1] = *v144;
          *v8 = v152;
          *v144 = v153;
          if ((*a3)(v13, a1))
          {
            v22 = a1[1];
            v152 = *a1;
            v153 = v22;
            v23 = v21[1];
            *a1 = *v13;
            a1[1] = v23;
            *v13 = v152;
            v21[1] = v153;
          }
        }
        v27 = a1 + 2;
        v28 = v12 - 1;
        v29 = &a1[2 * v12 - 2];
        v30 = (*a3)(v29, a1 + 2);
        v31 = (*a3)(v146, v29);
        if ((v30 & 1) != 0)
        {
          v32 = a1 + 3;
          if (v31)
          {
            v33 = *v27;
            v152 = *v27;
            v153 = *v32;
            v34 = v146;
            *v27 = *v146;
            v35 = v140;
            *v32 = *v140;
            goto LABEL_35;
          }
          v152 = *v27;
          v39 = v152;
          v153 = *v32;
          *v27 = *v29;
          v40 = &a1[2 * v28];
          *v32 = v40[1];
          *v29 = v39;
          v40[1] = v153;
          if ((*a3)(v146, &a1[2 * v12 - 2]))
          {
            v152 = *v29;
            v153 = v40[1];
            v34 = v146;
            *v29 = *v146;
            v35 = v140;
            v40[1] = *v140;
            v33 = v152;
LABEL_35:
            *v34 = v33;
            *v35 = v153;
          }
        }
        else if (v31)
        {
          v152 = *v29;
          v36 = &a1[2 * v28];
          v153 = v36[1];
          *v29 = *v146;
          v36[1] = *v140;
          *v146 = v152;
          *v140 = v153;
          if ((*a3)(&a1[2 * v12 - 2], a1 + 2))
          {
            v152 = *v27;
            v37 = v152;
            v153 = a1[3];
            *v27 = *v29;
            a1[3] = v36[1];
            *v29 = v37;
            v36[1] = v153;
          }
        }
        v142 = v12 - 1;
        v41 = a1 + 4;
        v42 = v12 + 1;
        v43 = &a1[2 * v12 + 2];
        v44 = (*a3)(v43, a1 + 4);
        v45 = (*a3)(v145, v43);
        if ((v44 & 1) != 0)
        {
          v46 = a1 + 5;
          if (v45)
          {
            v47 = *v41;
            v152 = *v41;
            v153 = *v46;
            v48 = v145;
            *v41 = *v145;
            v49 = v139;
            *v46 = *v139;
            goto LABEL_44;
          }
          v152 = *v41;
          v52 = v152;
          v153 = *v46;
          *v41 = *v43;
          v53 = &a1[2 * v42];
          *v46 = v53[1];
          *v43 = v52;
          v53[1] = v153;
          if ((*a3)(v145, &a1[2 * v12 + 2]))
          {
            v152 = *v43;
            v153 = v53[1];
            v48 = v145;
            *v43 = *v145;
            v49 = v139;
            v53[1] = *v139;
            v47 = v152;
LABEL_44:
            *v48 = v47;
            *v49 = v153;
          }
        }
        else if (v45)
        {
          v152 = *v43;
          v50 = &a1[2 * v42];
          v153 = v50[1];
          *v43 = *v145;
          v50[1] = *v139;
          *v145 = v152;
          *v139 = v153;
          if ((*a3)(&a1[2 * v12 + 2], a1 + 4))
          {
            v152 = *v41;
            v51 = v152;
            v153 = a1[5];
            *v41 = *v43;
            a1[5] = v50[1];
            *v43 = v51;
            v50[1] = v153;
          }
        }
        v54 = (*a3)(v13, &a1[2 * v12 - 2]);
        v55 = (*a3)(&a1[2 * v12 + 2], v13);
        if ((v54 & 1) != 0)
        {
          v56 = &a1[2 * v142 + 1];
          if (v55)
          {
            v152 = *v29;
            v153 = *v56;
            *v29 = *v43;
            v57 = &a1[2 * v42];
            *v56 = v57[1];
            *v43 = v152;
            v57[1] = v153;
            a2 = v143;
          }
          else
          {
            v152 = *v29;
            v153 = *v56;
            *v29 = *v13;
            v61 = &a1[2 * v12];
            *v56 = v61[1];
            *v13 = v152;
            v61[1] = v153;
            a2 = v143;
            if ((*a3)(&a1[2 * v12 + 2], v13))
            {
              v152 = *v13;
              v153 = v61[1];
              *v13 = *v43;
              v62 = &a1[2 * v42];
              v61[1] = v62[1];
              *v43 = v152;
              v62[1] = v153;
            }
          }
        }
        else
        {
          a2 = v143;
          if (v55)
          {
            v152 = *v13;
            v58 = &a1[2 * v12];
            v153 = v58[1];
            *v13 = *v43;
            v59 = &a1[2 * v42];
            v58[1] = v59[1];
            *v43 = v152;
            v59[1] = v153;
            if ((*a3)(v13, &a1[2 * v12 - 2]))
            {
              v152 = *v29;
              v60 = &a1[2 * v142];
              v153 = v60[1];
              *v29 = *v13;
              v60[1] = v58[1];
              *v13 = v152;
              v58[1] = v153;
            }
          }
        }
        v63 = a1[1];
        v152 = *a1;
        v153 = v63;
        v64 = &a1[2 * v12];
        v65 = v64[1];
        *a1 = *v13;
        a1[1] = v65;
        *v13 = v152;
        v64[1] = v153;
        v8 = v141;
        --a4;
        if ((a5 & 1) == 0)
          goto LABEL_54;
LABEL_55:
        v66 = 0;
        v67 = a1[1];
        v150 = *a1;
        v151 = v67;
        do
          v66 += 2;
        while (((*a3)(&a1[v66], &v150) & 1) != 0);
        v68 = &a1[v66];
        v69 = a2;
        if (v66 == 2)
        {
          v69 = a2;
          do
          {
            if (v68 >= v69)
              break;
            v69 -= 2;
          }
          while (((*a3)(v69, &v150) & 1) == 0);
        }
        else
        {
          do
            v69 -= 2;
          while (!(*a3)(v69, &v150));
        }
        n128_u64 = (unint64_t)a1[v66].n128_u64;
        if (v68 < v69)
        {
          v70 = v69;
          do
          {
            v71 = *(__n128 *)(n128_u64 + 16);
            v152 = *(__n128 *)n128_u64;
            v153 = v71;
            *(__n128 *)n128_u64 = *v70;
            *(__n128 *)(n128_u64 + 16) = v70[1];
            *v70 = v152;
            v70[1] = v153;
            do
              n128_u64 += 32;
            while (((*a3)((__n128 *)n128_u64, &v150) & 1) != 0);
            do
              v70 -= 2;
            while (!(*a3)(v70, &v150));
          }
          while (n128_u64 < (unint64_t)v70);
        }
        v72 = (__n128 *)(n128_u64 - 32);
        if ((__n128 *)(n128_u64 - 32) != a1)
        {
          *a1 = *v72;
          a1[1] = *(__n128 *)(n128_u64 - 16);
        }
        *v72 = v150;
        *(__n128 *)(n128_u64 - 16) = v151;
        if (v68 < v69)
        {
LABEL_74:
          sub_223FCD350(a1, n128_u64 - 32, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v73 = sub_223FCE500((uint64_t)a1, (__n128 *)(n128_u64 - 32), a3);
        if (!sub_223FCE500(n128_u64, a2, a3))
        {
          if (v73)
            continue;
          goto LABEL_74;
        }
        a2 = (__n128 *)(n128_u64 - 32);
        if (!v73)
          goto LABEL_1;
        return;
    }
  }
}

  while (2)
  {
    v37 = a1;
    v38 = a4;
    v36 = *(_QWORD **)(a1 + 48);
    v5 = v36[6];
    v4 = v36[7];
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
    v7 = a2[12];
    v33 = v7;
    v34 = a3;
    if (v7 >= v6)
      v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
    v32 = v7;
    v8 = v7 - a3;
    v9 = v6 - a3;
    if (v6 < a3)
      v9 = 0;
    if ((uint64_t)v6 < v9)
      v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
    v10 = (unsigned __int8 *)(v5 + 24 * (v6 - v9));
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v10) >> 3);
    if (v11 >= v8)
      v11 = v8;
    v12 = &v10[24 * v11];
    v35 = a2;
    sub_224128E44((uint64_t)v39, a2, a3, v8);
    v13 = v40;
    v14 = v41;
    v15 = v42;
    v16 = v43;
    v17 = v44;
    v18 = v45;
    v19 = v46;
    v20 = v47;
LABEL_11:
    while (1)
    {
      if (v10 == v12)
      {
        v21 = v20 == v18 && v15 == v13;
        if (v21 || v14 == v19)
          break;
      }
      if ((char)v10[23] < 0)
      {
        v22 = *(unsigned __int8 **)v10;
        if (v16 != *((_QWORD *)v10 + 1))
          goto LABEL_28;
      }
      else
      {
        v22 = v10;
        if (v16 != v10[23])
          goto LABEL_28;
      }
      if (memcmp(v14, v22, v16))
      {
LABEL_28:
        a4 = v38;
        if (*(_QWORD *)v38 != v37)
          return 0;
        v25 = v36[9];
        if (v25)
        {
          *(_QWORD *)v38 = v25;
          a1 = v36[9];
          a3 = v34;
          a2 = v35;
          goto LABEL_1;
        }
        return 1;
      }
      v10 += 24;
      v15 = &v14[v16];
      v14 = v13;
      v16 = 0;
      if (v15 != v13)
      {
        v16 = 0;
        v23 = v15 + 1;
        v14 = v13;
        if (v15 + 1 != v13)
        {
          v16 = 0;
          do
          {
            if (v23[v16] == v17)
            {
              v14 = v15 + 1;
              goto LABEL_11;
            }
            ++v16;
          }
          while (v13 - v23 != v16);
          v14 = v15 + 1;
          v16 = v13 - v23;
        }
      }
    }
    if (v33 > v6)
    {
      *(_QWORD *)v38 = v37;
      v26 = *(_QWORD *)(v37 + 48);
      v27 = *(_QWORD **)(v26 + 80);
      v28 = (_QWORD *)(v26 + 88);
      if (v27 != (_QWORD *)(v26 + 88))
      {
        do
        {
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v27[4] + 48) + 56) - *(_QWORD *)(*(_QWORD *)(v27[4] + 48) + 48)) >> 3) <= v35[12]
            && (sub_224128B7C() & 1) != 0)
          {
            break;
          }
          v29 = (_QWORD *)v27[1];
          if (v29)
          {
            do
            {
              v30 = v29;
              v29 = (_QWORD *)*v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              v30 = (_QWORD *)v27[2];
              v21 = *v30 == (_QWORD)v27;
              v27 = v30;
            }
            while (!v21);
          }
          v27 = v30;
        }
        while (v30 != v28);
      }
      return 1;
    }
    if (v6 > v33)
    {
      v31 = v36[9];
      a4 = v38;
      if (v31)
      {
        *(_QWORD *)v38 = v31;
        a1 = v36[9];
        a2 = v35;
        a3 = v32;
        continue;
      }
      return 1;
    }
    break;
  }
  *(_QWORD *)v38 = v37;
  result = 1;
  *(_BYTE *)(v38 + 8) = 1;
  return result;
}

  v9 = (const std::__fs::filesystem::path *)((char *)a2 - 32);
  p_size = (uint64_t *)a1;
LABEL_2:
  v11 = 1 - a4;
  v40 = a5;
  while (2)
  {
    a1 = (uint64_t)p_size;
    v12 = (char *)a2 - (char *)p_size;
    v13 = v12 >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v29 = *(char *)(a1 + 23);
        if (v29 >= 0)
          v30.__data_ = (const std::string_view::value_type *)a1;
        else
          v30.__data_ = *(const std::string_view::value_type **)a1;
        if (v29 >= 0)
          v30.__size_ = *(unsigned __int8 *)(a1 + 23);
        else
          v30.__size_ = *(_QWORD *)(a1 + 8);
        if (std::__fs::filesystem::path::__compare(v9, v30) < 0)
        {
          v31 = *(const std::string_view::value_type **)a1;
          *(_QWORD *)v42 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)&v42[7] = *(_QWORD *)(a1 + 15);
          v32 = *(_BYTE *)(a1 + 23);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v33 = *(_QWORD *)(a1 + 24);
          v34 = v9->__pn_.__r_.__value_.__r.__words[2];
          *(_OWORD *)a1 = *(_OWORD *)&v9->__pn_.__r_.__value_.__l.__data_;
          *(_QWORD *)(a1 + 16) = v34;
          a2[-1].__pn_.__r_.__value_.__s.__data_[15] = 0;
          a2[-2].__pn_.__r_.__value_.__s.__data_[16] = 0;
          *(_QWORD *)(a1 + 24) = *((_QWORD *)&a2[-1].__pn_.__r_.__value_.__l + 2);
          if (a2[-1].__pn_.__r_.__value_.__s.__data_[15] < 0)
            operator delete(v9->__pn_.__r_.__value_.__l.__data_);
          a2[-2].__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)v31;
          a2[-1].__pn_.__r_.__value_.__r.__words[0] = *(_QWORD *)v42;
          *(std::string::size_type *)((char *)a2[-1].__pn_.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v42[7];
          a2[-1].__pn_.__r_.__value_.__s.__data_[15] = v32;
          a2[-1].__pn_.__r_.__value_.__r.__words[2] = v33;
        }
        return;
      case 3uLL:
        sub_2242B22A0((uint64_t *)a1, (std::__fs::filesystem::path *)(a1 + 32), (uint64_t)v9);
        return;
      case 4uLL:
        sub_2242B2EDC(a1, (uint64_t *)(a1 + 32), a1 + 64, (uint64_t)v9);
        return;
      case 5uLL:
        sub_2242B3140(a1, a1 + 32, a1 + 64, a1 + 96, (uint64_t)v9);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0)
            sub_2242B1FEC(a1, a2);
          else
            sub_2242B2154(a1, a2);
          return;
        }
        v14 = v11;
        if (v11 != 1)
        {
          v15 = v13 >> 1;
          v16 = a1 + 32 * (v13 >> 1);
          if ((unint64_t)v12 <= 0x1000)
          {
            sub_2242B22A0((uint64_t *)v16, (std::__fs::filesystem::path *)a1, (uint64_t)v9);
            if ((a5 & 1) != 0)
              goto LABEL_17;
          }
          else
          {
            sub_2242B22A0((uint64_t *)a1, (std::__fs::filesystem::path *)v16, (uint64_t)v9);
            v17 = v9;
            v18 = a1 + 32 * v15;
            sub_2242B22A0((uint64_t *)(a1 + 32), (std::__fs::filesystem::path *)(v18 - 32), (uint64_t)&a2[-3].__pn_.__r_.__value_.__l.__size_);
            sub_2242B22A0((uint64_t *)(a1 + 64), (std::__fs::filesystem::path *)(a1 + 32 + 32 * v15), (uint64_t)&a2[-4]);
            sub_2242B22A0((uint64_t *)(v18 - 32), (std::__fs::filesystem::path *)v16, a1 + 32 + 32 * v15);
            v19 = *(const std::string_view::value_type **)a1;
            *(_QWORD *)((char *)&v41 + 7) = *(_QWORD *)(a1 + 15);
            *(_QWORD *)&v41 = *(_QWORD *)(a1 + 8);
            v20 = *(_BYTE *)(a1 + 23);
            *(_QWORD *)a1 = 0;
            *(_QWORD *)(a1 + 8) = 0;
            v21 = *(_QWORD *)(a1 + 24);
            v22 = *(_QWORD *)(v18 + 24);
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)(a1 + 24) = v22;
            v23 = *(_OWORD *)v16;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v16 + 16);
            *(_OWORD *)a1 = v23;
            *(_BYTE *)(v16 + 23) = 0;
            *(_QWORD *)v16 = v19;
            *(_QWORD *)(v16 + 8) = v41;
            *(_QWORD *)(v16 + 15) = *(_QWORD *)((char *)&v41 + 7);
            *(_BYTE *)(v16 + 23) = v20;
            *(_QWORD *)(v18 + 24) = v21;
            v9 = v17;
            a5 = v40;
            if ((v40 & 1) != 0)
              goto LABEL_17;
          }
          v24 = *(char *)(a1 + 23);
          if (v24 >= 0)
            v25.__data_ = (const std::string_view::value_type *)a1;
          else
            v25.__data_ = *(const std::string_view::value_type **)a1;
          if (v24 >= 0)
            v25.__size_ = *(unsigned __int8 *)(a1 + 23);
          else
            v25.__size_ = *(_QWORD *)(a1 + 8);
          if ((std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(a1 - 32), v25) & 0x80000000) == 0)
          {
            p_size = sub_2242B2618(a1, (unint64_t)a2);
            goto LABEL_22;
          }
LABEL_17:
          v26 = (const std::__fs::filesystem::path *)sub_2242B28F4(a1, a2);
          if ((v27 & 1) == 0)
            goto LABEL_20;
          v28 = sub_2242B2BC8(a1, v26);
          p_size = (uint64_t *)&v26[1].__pn_.__r_.__value_.__l.__size_;
          if (!sub_2242B2BC8((uint64_t)&v26[1].__pn_.__r_.__value_.__l.__size_, a2))
          {
            v11 = v14 + 1;
            if (v28)
              continue;
LABEL_20:
            sub_2242B1ADC(a1, v26, a3, -v14, a5 & 1);
            p_size = (uint64_t *)&v26[1].__pn_.__r_.__value_.__l.__size_;
LABEL_22:
            a5 = 0;
            a4 = -v14;
            goto LABEL_2;
          }
          a4 = -v14;
          a2 = v26;
          if (v28)
            return;
          goto LABEL_1;
        }
        if ((const std::__fs::filesystem::path *)a1 != a2)
        {
          v35 = (v13 - 2) >> 1;
          v36 = v35 + 1;
          v37 = (__n128 *)(a1 + 32 * v35);
          do
          {
            sub_2242B3454(a1, a3, v12 >> 5, v37);
            v37 -= 2;
            --v36;
          }
          while (v36);
          v38 = (unint64_t)v12 >> 5;
          do
          {
            sub_2242B3638(a1, (uint64_t)a2, a3, v38);
            a2 = (const std::__fs::filesystem::path *)((char *)a2 - 32);
          }
          while (v38-- > 2);
        }
        return;
    }
  }
}

BOOL sub_2233BD878(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  float v11;
  float v12;
  float v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  __int128 *v17;
  float v18;
  float v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  float v31;
  float v32;
  __int128 v33;
  __int128 v34;
  float v35;
  float v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  float v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  float v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _BYTE v111[32];
  _BYTE v112[32];
  _BYTE v113[32];
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[32];
  _BYTE v118[32];
  _BYTE v119[32];
  _BYTE v120[32];
  _BYTE v121[32];
  _BYTE v122[32];
  __int128 v123;
  _BYTE v124[32];

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 16) < *(float *)(a1 + 64))
      {
        v97 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)v111 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)&v111[16] = *(_OWORD *)(a1 + 64);
        v69 = *(_OWORD *)a1;
        v83 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 80);
        v7 = *(_OWORD *)(a2 - 48);
        v6 = *(_OWORD *)(a2 - 32);
        v8 = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 - 20);
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a1 + 48) = v6;
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v111[12];
        *(_OWORD *)(a2 - 48) = v97;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v111;
        *(_OWORD *)(a2 - 80) = v69;
        *(_OWORD *)(a2 - 64) = v83;
      }
      return result;
    case 3uLL:
      v16 = (__int128 *)(a1 + 80);
      v17 = (__int128 *)(a2 - 80);
      v18 = *(float *)(a1 + 144);
      v19 = *(float *)(a2 - 16);
      if (v18 >= *(float *)(a1 + 64))
      {
        if (v19 < v18)
        {
          v106 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v120 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)&v120[16] = *(_OWORD *)(a1 + 144);
          v78 = *v16;
          v92 = *(_OWORD *)(a1 + 96);
          *v16 = *v17;
          v45 = *(_OWORD *)(a2 - 48);
          v44 = *(_OWORD *)(a2 - 32);
          v46 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 - 20);
          *(_OWORD *)(a1 + 112) = v45;
          *(_OWORD *)(a1 + 128) = v44;
          *(_OWORD *)(a1 + 96) = v46;
          *(_OWORD *)(a2 - 20) = *(_OWORD *)&v120[12];
          *(_OWORD *)(a2 - 48) = v106;
          *(_OWORD *)(a2 - 32) = *(_OWORD *)v120;
          *v17 = v78;
          *(_OWORD *)(a2 - 64) = v92;
          if (*(float *)(a1 + 144) < *(float *)(a1 + 64))
          {
            v107 = *(_OWORD *)(a1 + 32);
            *(_OWORD *)v121 = *(_OWORD *)(a1 + 48);
            *(_OWORD *)&v121[16] = *(_OWORD *)(a1 + 64);
            v79 = *(_OWORD *)a1;
            v93 = *(_OWORD *)(a1 + 16);
            v47 = *(_OWORD *)(a1 + 128);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
            *(_OWORD *)(a1 + 48) = v47;
            *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
            v48 = *(_OWORD *)(a1 + 96);
            *(_OWORD *)a1 = *v16;
            *(_OWORD *)(a1 + 16) = v48;
            *(_OWORD *)(a1 + 140) = *(_OWORD *)&v121[12];
            *(_OWORD *)(a1 + 112) = v107;
            *(_OWORD *)(a1 + 128) = *(_OWORD *)v121;
            *v16 = v79;
            *(_OWORD *)(a1 + 96) = v93;
          }
        }
      }
      else
      {
        if (v19 >= v18)
        {
          v110 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)v124 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v124[16] = *(_OWORD *)(a1 + 64);
          v82 = *(_OWORD *)a1;
          v96 = *(_OWORD *)(a1 + 16);
          v64 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
          *(_OWORD *)(a1 + 48) = v64;
          *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
          v65 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v16;
          *(_OWORD *)(a1 + 16) = v65;
          *(_OWORD *)(a1 + 140) = *(_OWORD *)&v124[12];
          *(_OWORD *)(a1 + 112) = v110;
          *(_OWORD *)(a1 + 128) = *(_OWORD *)v124;
          *v16 = v82;
          *(_OWORD *)(a1 + 96) = v96;
          if (*(float *)(a2 - 16) >= *(float *)(a1 + 144))
            return result;
          v99 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v113 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)&v113[16] = *(_OWORD *)(a1 + 144);
          v71 = *v16;
          v85 = *(_OWORD *)(a1 + 96);
          *v16 = *v17;
          v67 = *(_OWORD *)(a2 - 48);
          v66 = *(_OWORD *)(a2 - 32);
          v68 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 - 20);
          *(_OWORD *)(a1 + 112) = v67;
          *(_OWORD *)(a1 + 128) = v66;
          *(_OWORD *)(a1 + 96) = v68;
        }
        else
        {
          v99 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)v113 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v113[16] = *(_OWORD *)(a1 + 64);
          v71 = *(_OWORD *)a1;
          v85 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)a1 = *v17;
          v21 = *(_OWORD *)(a2 - 48);
          v20 = *(_OWORD *)(a2 - 32);
          v22 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 - 20);
          *(_OWORD *)(a1 + 32) = v21;
          *(_OWORD *)(a1 + 48) = v20;
          *(_OWORD *)(a1 + 16) = v22;
        }
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v113[12];
        *(_OWORD *)(a2 - 48) = v99;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v113;
        *v17 = v71;
        *(_OWORD *)(a2 - 64) = v85;
      }
      return result;
    case 4uLL:
      sub_2233BDF54((_OWORD *)a1, a1 + 80, a1 + 160, a2 - 80);
      return 1;
    case 5uLL:
      v23 = (__int128 *)(a1 + 80);
      v24 = (__int128 *)(a1 + 160);
      v25 = (__int128 *)(a1 + 240);
      sub_2233BDF54((_OWORD *)a1, a1 + 80, a1 + 160, a1 + 240);
      if (*(float *)(a2 - 16) >= *(float *)(a1 + 304))
        return 1;
      v100 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)v114 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)&v114[16] = *(_OWORD *)(a1 + 304);
      v72 = *v25;
      v86 = *(_OWORD *)(a1 + 256);
      *v25 = *(_OWORD *)(a2 - 80);
      v27 = *(_OWORD *)(a2 - 48);
      v26 = *(_OWORD *)(a2 - 32);
      v28 = *(_OWORD *)(a2 - 64);
      *(_OWORD *)(a1 + 300) = *(_OWORD *)(a2 - 20);
      *(_OWORD *)(a1 + 272) = v27;
      *(_OWORD *)(a1 + 288) = v26;
      *(_OWORD *)(a1 + 256) = v28;
      *(_OWORD *)(a2 - 20) = *(_OWORD *)&v114[12];
      *(_OWORD *)(a2 - 48) = v100;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v114;
      *(_OWORD *)(a2 - 80) = v72;
      *(_OWORD *)(a2 - 64) = v86;
      if (*(float *)(a1 + 304) >= *(float *)(a1 + 224))
        return 1;
      v101 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)v115 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)&v115[16] = *(_OWORD *)(a1 + 224);
      v73 = *v24;
      v87 = *(_OWORD *)(a1 + 176);
      v29 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 208) = v29;
      *(_OWORD *)(a1 + 220) = *(_OWORD *)(a1 + 300);
      v30 = *(_OWORD *)(a1 + 256);
      *v24 = *v25;
      *(_OWORD *)(a1 + 176) = v30;
      *(_OWORD *)(a1 + 300) = *(_OWORD *)&v115[12];
      *(_OWORD *)(a1 + 272) = v101;
      *(_OWORD *)(a1 + 288) = *(_OWORD *)v115;
      v31 = *(float *)(a1 + 224);
      v32 = *(float *)(a1 + 144);
      *v25 = v73;
      *(_OWORD *)(a1 + 256) = v87;
      if (v31 >= v32)
        return 1;
      v102 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)v116 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)&v116[16] = *(_OWORD *)(a1 + 144);
      v74 = *v23;
      v88 = *(_OWORD *)(a1 + 96);
      v33 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 128) = v33;
      *(_OWORD *)(a1 + 140) = *(_OWORD *)(a1 + 220);
      v34 = *(_OWORD *)(a1 + 176);
      *v23 = *v24;
      *(_OWORD *)(a1 + 96) = v34;
      *(_OWORD *)(a1 + 220) = *(_OWORD *)&v116[12];
      *(_OWORD *)(a1 + 192) = v102;
      *(_OWORD *)(a1 + 208) = *(_OWORD *)v116;
      v35 = *(float *)(a1 + 144);
      v36 = *(float *)(a1 + 64);
      *v24 = v74;
      *(_OWORD *)(a1 + 176) = v88;
      if (v35 >= v36)
        return 1;
      v103 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)v117 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)&v117[16] = *(_OWORD *)(a1 + 64);
      v75 = *(_OWORD *)a1;
      v89 = *(_OWORD *)(a1 + 16);
      v37 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 48) = v37;
      *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
      v38 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)a1 = *v23;
      *(_OWORD *)(a1 + 16) = v38;
      *(_OWORD *)(a1 + 140) = *(_OWORD *)&v117[12];
      *(_OWORD *)(a1 + 112) = v103;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)v117;
      result = 1;
      *v23 = v75;
      *(_OWORD *)(a1 + 96) = v89;
      return result;
    default:
      v9 = a1 + 160;
      v10 = (__int128 *)(a1 + 80);
      v11 = *(float *)(a1 + 144);
      v12 = *(float *)(a1 + 64);
      v13 = *(float *)(a1 + 224);
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          v104 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v118 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)&v118[16] = *(_OWORD *)(a1 + 144);
          v76 = *v10;
          v90 = *(_OWORD *)(a1 + 96);
          v39 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(a1 + 128) = v39;
          *(_OWORD *)(a1 + 140) = *(_OWORD *)(a1 + 220);
          v40 = *(_OWORD *)(a1 + 176);
          *v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 96) = v40;
          *(_OWORD *)(a1 + 220) = *(_OWORD *)&v118[12];
          *(_OWORD *)(a1 + 192) = v104;
          *(_OWORD *)(a1 + 208) = *(_OWORD *)v118;
          v41 = *(float *)(a1 + 144);
          *(_OWORD *)v9 = v76;
          *(_OWORD *)(a1 + 176) = v90;
          if (v41 < v12)
          {
            v105 = *(_OWORD *)(a1 + 32);
            *(_OWORD *)v119 = *(_OWORD *)(a1 + 48);
            *(_OWORD *)&v119[16] = *(_OWORD *)(a1 + 64);
            v77 = *(_OWORD *)a1;
            v91 = *(_OWORD *)(a1 + 16);
            v42 = *(_OWORD *)(a1 + 128);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
            *(_OWORD *)(a1 + 48) = v42;
            *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
            v43 = *(_OWORD *)(a1 + 96);
            *(_OWORD *)a1 = *v10;
            *(_OWORD *)(a1 + 16) = v43;
            *(_OWORD *)(a1 + 140) = *(_OWORD *)&v119[12];
            *(_OWORD *)(a1 + 112) = v105;
            *(_OWORD *)(a1 + 128) = *(_OWORD *)v119;
            *v10 = v77;
            *(_OWORD *)(a1 + 96) = v91;
          }
        }
      }
      else
      {
        if (v13 >= v11)
        {
          v108 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)v122 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v122[16] = *(_OWORD *)(a1 + 64);
          v80 = *(_OWORD *)a1;
          v94 = *(_OWORD *)(a1 + 16);
          v49 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
          *(_OWORD *)(a1 + 48) = v49;
          *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
          v50 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v10;
          *(_OWORD *)(a1 + 16) = v50;
          *(_OWORD *)(a1 + 140) = *(_OWORD *)&v122[12];
          *(_OWORD *)(a1 + 112) = v108;
          *(_OWORD *)(a1 + 128) = *(_OWORD *)v122;
          v51 = *(float *)(a1 + 144);
          *v10 = v80;
          *(_OWORD *)(a1 + 96) = v94;
          if (v13 >= v51)
            goto LABEL_25;
          v98 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v112 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)&v112[16] = *(_OWORD *)(a1 + 144);
          v70 = *v10;
          v84 = *(_OWORD *)(a1 + 96);
          v52 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(a1 + 128) = v52;
          *(_OWORD *)(a1 + 140) = *(_OWORD *)(a1 + 220);
          v53 = *(_OWORD *)(a1 + 176);
          *v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 96) = v53;
        }
        else
        {
          v98 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)v112 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v112[16] = *(_OWORD *)(a1 + 64);
          v70 = *(_OWORD *)a1;
          v84 = *(_OWORD *)(a1 + 16);
          v14 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(a1 + 48) = v14;
          *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 220);
          v15 = *(_OWORD *)(a1 + 176);
          *(_OWORD *)a1 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 16) = v15;
        }
        *(_OWORD *)(a1 + 220) = *(_OWORD *)&v112[12];
        *(_OWORD *)(a1 + 192) = v98;
        *(_OWORD *)(a1 + 208) = *(_OWORD *)v112;
        *(_OWORD *)v9 = v70;
        *(_OWORD *)(a1 + 176) = v84;
      }
LABEL_25:
      v54 = a1 + 240;
      if (a1 + 240 == a2)
        return 1;
      v55 = 0;
      v56 = 0;
      break;
  }
  while (1)
  {
    v58 = *(float *)(v54 + 64);
    if (v58 < *(float *)(v9 + 64))
    {
      v81 = *(_OWORD *)v54;
      v95 = *(_OWORD *)(v54 + 16);
      v109 = *(_OWORD *)(v54 + 32);
      v123 = *(_OWORD *)(v54 + 48);
      v59 = *(_QWORD *)(v54 + 68);
      v60 = v55;
      do
      {
        v61 = a1 + v60;
        v62 = *(_OWORD *)(a1 + v60 + 208);
        *(_OWORD *)(v61 + 272) = *(_OWORD *)(a1 + v60 + 192);
        *(_OWORD *)(v61 + 288) = v62;
        *(_OWORD *)(a1 + v60 + 300) = *(_OWORD *)(a1 + v60 + 220);
        v63 = *(_OWORD *)(a1 + v60 + 176);
        *(_OWORD *)(v61 + 240) = *(_OWORD *)(a1 + v60 + 160);
        *(_OWORD *)(v61 + 256) = v63;
        if (v60 == -160)
        {
          v57 = a1;
          goto LABEL_28;
        }
        v60 -= 80;
      }
      while (v58 < *(float *)(v61 + 144));
      v57 = a1 + v60 + 240;
LABEL_28:
      *(_OWORD *)v57 = v81;
      *(_OWORD *)(v57 + 16) = v95;
      *(_OWORD *)(v57 + 32) = v109;
      *(_OWORD *)(v57 + 48) = v123;
      *(float *)(v57 + 64) = v58;
      *(_QWORD *)(v57 + 68) = v59;
      if (++v56 == 8)
        return v54 + 80 == a2;
    }
    v9 = v54;
    v55 += 80;
    v54 += 80;
    if (v54 == a2)
      return 1;
  }
}

__n128 sub_2233BDF54(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v4;
  float v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[32];
  _BYTE v53[32];
  _BYTE v54[32];
  _BYTE v55[32];
  _BYTE v56[32];
  _BYTE v57[32];
  _BYTE v58[32];

  v4 = *(float *)(a2 + 64);
  v5 = *(float *)(a3 + 64);
  if (v4 >= *((float *)a1 + 16))
  {
    if (v5 < v4)
    {
      v46 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v53 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v53[16] = *(_OWORD *)(a2 + 64);
      v32 = *(__n128 *)a2;
      v39 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v10 = *(_OWORD *)(a3 + 32);
      v9 = *(_OWORD *)(a3 + 48);
      v11 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 60) = *(_OWORD *)(a3 + 60);
      *(_OWORD *)(a2 + 32) = v10;
      *(_OWORD *)(a2 + 48) = v9;
      *(_OWORD *)(a2 + 16) = v11;
      *(_OWORD *)(a3 + 60) = *(_OWORD *)&v53[12];
      *(_OWORD *)(a3 + 32) = v46;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v53;
      result = v32;
      *(__n128 *)a3 = v32;
      *(_OWORD *)(a3 + 16) = v39;
      if (*(float *)(a2 + 64) < *((float *)a1 + 16))
      {
        v47 = a1[2];
        *(_OWORD *)v54 = a1[3];
        *(_OWORD *)&v54[16] = a1[4];
        v33 = *(__n128 *)a1;
        v40 = a1[1];
        *a1 = *(_OWORD *)a2;
        v14 = *(_OWORD *)(a2 + 32);
        v13 = *(_OWORD *)(a2 + 48);
        v15 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)(a2 + 60);
        a1[2] = v14;
        a1[3] = v13;
        a1[1] = v15;
        *(_OWORD *)(a2 + 60) = *(_OWORD *)&v54[12];
        *(_OWORD *)(a2 + 32) = v47;
        *(_OWORD *)(a2 + 48) = *(_OWORD *)v54;
        result = v33;
        *(__n128 *)a2 = v33;
        *(_OWORD *)(a2 + 16) = v40;
      }
    }
  }
  else
  {
    if (v5 < v4)
    {
      v45 = a1[2];
      *(_OWORD *)v52 = a1[3];
      *(_OWORD *)&v52[16] = a1[4];
      v31 = *(__n128 *)a1;
      v38 = a1[1];
      *a1 = *(_OWORD *)a3;
      v7 = *(_OWORD *)(a3 + 32);
      v6 = *(_OWORD *)(a3 + 48);
      v8 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)(a3 + 60);
      a1[2] = v7;
      a1[3] = v6;
      a1[1] = v8;
LABEL_9:
      *(_OWORD *)(a3 + 60) = *(_OWORD *)&v52[12];
      *(_OWORD *)(a3 + 32) = v45;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v52;
      result = v31;
      *(__n128 *)a3 = v31;
      *(_OWORD *)(a3 + 16) = v38;
      goto LABEL_10;
    }
    v48 = a1[2];
    *(_OWORD *)v55 = a1[3];
    *(_OWORD *)&v55[16] = a1[4];
    v34 = *(__n128 *)a1;
    v41 = a1[1];
    *a1 = *(_OWORD *)a2;
    v17 = *(_OWORD *)(a2 + 32);
    v16 = *(_OWORD *)(a2 + 48);
    v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)(a2 + 60);
    a1[2] = v17;
    a1[3] = v16;
    a1[1] = v18;
    *(_OWORD *)(a2 + 60) = *(_OWORD *)&v55[12];
    *(_OWORD *)(a2 + 32) = v48;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v55;
    result = v34;
    *(__n128 *)a2 = v34;
    *(_OWORD *)(a2 + 16) = v41;
    if (*(float *)(a3 + 64) < *(float *)(a2 + 64))
    {
      v45 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v52 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v52[16] = *(_OWORD *)(a2 + 64);
      v31 = *(__n128 *)a2;
      v38 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v20 = *(_OWORD *)(a3 + 32);
      v19 = *(_OWORD *)(a3 + 48);
      v21 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 60) = *(_OWORD *)(a3 + 60);
      *(_OWORD *)(a2 + 32) = v20;
      *(_OWORD *)(a2 + 48) = v19;
      *(_OWORD *)(a2 + 16) = v21;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_u32[0] = *(_DWORD *)(a4 + 64);
  if (result.n128_f32[0] < *(float *)(a3 + 64))
  {
    v49 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)v56 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)&v56[16] = *(_OWORD *)(a3 + 64);
    v35 = *(__n128 *)a3;
    v42 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    v23 = *(_OWORD *)(a4 + 32);
    v22 = *(_OWORD *)(a4 + 48);
    v24 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(a3 + 60) = *(_OWORD *)(a4 + 60);
    *(_OWORD *)(a3 + 32) = v23;
    *(_OWORD *)(a3 + 48) = v22;
    *(_OWORD *)(a3 + 16) = v24;
    *(_OWORD *)(a4 + 60) = *(_OWORD *)&v56[12];
    *(_OWORD *)(a4 + 32) = v49;
    *(_OWORD *)(a4 + 48) = *(_OWORD *)v56;
    result = v35;
    *(__n128 *)a4 = v35;
    *(_OWORD *)(a4 + 16) = v42;
    result.n128_u32[0] = *(_DWORD *)(a3 + 64);
    if (result.n128_f32[0] < *(float *)(a2 + 64))
    {
      v50 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v57 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v57[16] = *(_OWORD *)(a2 + 64);
      v36 = *(__n128 *)a2;
      v43 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v26 = *(_OWORD *)(a3 + 32);
      v25 = *(_OWORD *)(a3 + 48);
      v27 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 60) = *(_OWORD *)(a3 + 60);
      *(_OWORD *)(a2 + 32) = v26;
      *(_OWORD *)(a2 + 48) = v25;
      *(_OWORD *)(a2 + 16) = v27;
      *(_OWORD *)(a3 + 60) = *(_OWORD *)&v57[12];
      *(_OWORD *)(a3 + 32) = v50;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v57;
      result = v36;
      *(__n128 *)a3 = v36;
      *(_OWORD *)(a3 + 16) = v43;
      result.n128_u32[0] = *(_DWORD *)(a2 + 64);
      if (result.n128_f32[0] < *((float *)a1 + 16))
      {
        v51 = a1[2];
        *(_OWORD *)v58 = a1[3];
        *(_OWORD *)&v58[16] = a1[4];
        v37 = *(__n128 *)a1;
        v44 = a1[1];
        *a1 = *(_OWORD *)a2;
        v29 = *(_OWORD *)(a2 + 32);
        v28 = *(_OWORD *)(a2 + 48);
        v30 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)(a2 + 60);
        a1[2] = v29;
        a1[3] = v28;
        a1[1] = v30;
        *(_OWORD *)(a2 + 60) = *(_OWORD *)&v58[12];
        *(_OWORD *)(a2 + 32) = v51;
        *(_OWORD *)(a2 + 48) = *(_OWORD *)v58;
        result = v37;
        *(__n128 *)a2 = v37;
        *(_OWORD *)(a2 + 16) = v44;
      }
    }
  }
  return result;
}

__n128 sub_2233BE27C(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  __n128 *v7;
  __n128 *v8;
  __n128 *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 *v44;
  unint64_t v45;
  __n128 *v46;
  uint64_t v47;
  uint64_t v48;
  __n128 *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __n128 *v73;
  unint64_t v74;
  __n128 *v75;
  uint64_t v76;
  uint64_t v77;
  __n128 *v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __n128 v83;
  __n128 v84;
  __n128 v85;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  __n128 v89;
  __n128 v90;
  __n128 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  __n128 v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  __n128 v106;
  __n128 v107;
  __n128 v108;
  __n128 v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _OWORD *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _OWORD *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  BOOL v129;
  __n128 result;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  _OWORD *v135;
  unint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  __n128 *v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __n128 *v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __n128 *v154;
  __n128 *v155;
  __n128 *v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  unint64_t v166;
  BOOL v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _OWORD *v176;
  __int128 v177;
  __int128 v178;
  int64_t v179;
  int64_t v180;
  int64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int64_t v196;
  uint64_t v198;
  _OWORD *v199;
  __n128 v200;
  __n128 v201;
  __n128 v202;
  uint64_t v203;
  __n128 *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __n128 v209;
  __n128 v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  __n128 *v214;
  __n128 v215;
  __n128 v216;
  __n128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v236;
  __n128 v237;
  __int128 v238;
  __int128 v239;
  __n128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __n128 v244;
  __int128 v245;
  __int128 v246;
  __n128 v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  __n128 v251;
  __n128 v252;
  __n128 v253;
  __n128 v254;
  __n128 v255;
  __n128 v256;
  __n128 v257;
  __n128 v258;
  __n128 v259;
  __n128 v260;
  __n128 v261;
  __n128 v262;
  __n128 v263;
  __n128 v264;
  __n128 v265;
  __n128 v266;
  __n128 v267;
  __n128 v268;
  __n128 v269;
  __n128 v270;
  __n128 v271;
  __n128 v272;
  __n128 v273;
  __n128 v274;
  __n128 v275;
  __n128 v276;
  __int128 v277;
  __n128 v278;
  __n128 v279;
  __n128 v280;
  __n128 v281;
  __n128 v282;
  __n128 v283;
  __n128 v284;
  __int128 v285;
  __int128 v286;
  __n128 v287;
  __n128 v288;
  __n128 v289;
  __n128 v290;
  __n128 v291;
  __n128 v292;
  __n128 v293;
  __n128 v294;
  __n128 v295;
  __n128 v296;
  __int128 v297;
  __n128 v298;
  __n128 v299;
  __int128 v300;
  __n128 v301;
  __n128 v302;
  __n128 v303;
  __n128 v304;
  __n128 v305;
  __int128 v306;
  __n128 v307;
  __n128 v308;
  __n128 v309;
  __n128 v310;
  __n128 v311;
  __n128 v312;
  __n128 v313;
  __n128 v314;
  __n128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __n128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __n128 v326;
  __n128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __n128 v331;
  __n128 v332;
  __n128 v333;
  __n128 v334;
  __n128 v335;
  __int128 v336;
  __n128 v337;
  __n128 v338;
  __int128 v339;
  __n128 v340;
  __n128 v341;
  __n128 v342;
  __n128 v343;
  __n128 v344;
  __int128 v345;
  __n128 v346;
  __n128 v347;
  __n128 v348;
  __n128 v349;
  __n128 v350;
  __n128 v351;
  __n128 v352;
  __n128 v353;
  __n128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __n128 v363;
  __int128 v364;
  __n128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  _BYTE v371[32];
  _BYTE v372[32];
  _BYTE v373[32];
  _BYTE v374[32];
  _BYTE v375[32];
  _BYTE v376[32];
  _BYTE v377[32];
  _BYTE v378[32];
  _BYTE v379[32];
  _BYTE v380[32];
  _BYTE v381[32];
  _BYTE v382[32];
  _BYTE v383[32];
  _BYTE v384[32];
  _BYTE v385[32];
  _BYTE v386[32];
  _BYTE v387[32];
  _BYTE v388[32];
  _BYTE v389[32];
  _BYTE v390[32];
  _BYTE v391[32];
  _BYTE v392[32];
  _BYTE v393[32];
  _BYTE v394[32];
  _BYTE v395[32];
  _BYTE v396[32];
  _BYTE v397[32];
  _BYTE v398[32];
  _BYTE v399[32];
  _BYTE v400[32];
  _BYTE v401[32];
  uint64_t v402;
  uint64_t v403;
  _BYTE v404[32];
  _BYTE v405[32];
  _BYTE v406[32];
  uint64_t v407;
  _BYTE v408[32];
  _BYTE v409[32];

BOOL sub_2233BFA04(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _BYTE v105[32];
  _BYTE v106[32];
  _BYTE v107[32];
  _BYTE v108[32];
  _BYTE v109[32];
  _BYTE v110[32];
  _BYTE v111[32];
  _BYTE v112[32];
  _BYTE v113[32];
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  uint64_t v117;
  _BYTE v118[32];

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_QWORD *)(a2 - 64) > *(_QWORD *)(a1 + 16))
      {
        v91 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)v105 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)&v105[16] = *(_OWORD *)(a1 + 64);
        v63 = *(_OWORD *)a1;
        v77 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 80);
        v7 = *(_OWORD *)(a2 - 48);
        v6 = *(_OWORD *)(a2 - 32);
        v8 = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 - 20);
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a1 + 48) = v6;
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v105[12];
        *(_OWORD *)(a2 - 48) = v91;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v105;
        *(_OWORD *)(a2 - 80) = v63;
        *(_OWORD *)(a2 - 64) = v77;
      }
      return result;
    case 3uLL:
      v16 = (__int128 *)(a1 + 80);
      v17 = (__int128 *)(a2 - 80);
      v18 = *(_QWORD *)(a1 + 96);
      v19 = *(_QWORD *)(a2 - 64);
      if (v18 <= *(_QWORD *)(a1 + 16))
      {
        if (v19 > v18)
        {
          v100 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v114 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)&v114[16] = *(_OWORD *)(a1 + 144);
          v72 = *v16;
          v86 = *(_OWORD *)(a1 + 96);
          *v16 = *v17;
          v40 = *(_OWORD *)(a2 - 48);
          v39 = *(_OWORD *)(a2 - 32);
          v41 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 - 20);
          *(_OWORD *)(a1 + 112) = v40;
          *(_OWORD *)(a1 + 128) = v39;
          *(_OWORD *)(a1 + 96) = v41;
          *(_OWORD *)(a2 - 20) = *(_OWORD *)&v114[12];
          *(_OWORD *)(a2 - 48) = v100;
          *(_OWORD *)(a2 - 32) = *(_OWORD *)v114;
          *v17 = v72;
          *(_OWORD *)(a2 - 64) = v86;
          if (*(_QWORD *)(a1 + 96) > *(_QWORD *)(a1 + 16))
          {
            v101 = *(_OWORD *)(a1 + 32);
            *(_OWORD *)v115 = *(_OWORD *)(a1 + 48);
            *(_OWORD *)&v115[16] = *(_OWORD *)(a1 + 64);
            v73 = *(_OWORD *)a1;
            v87 = *(_OWORD *)(a1 + 16);
            v42 = *(_OWORD *)(a1 + 128);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
            *(_OWORD *)(a1 + 48) = v42;
            *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
            v43 = *(_OWORD *)(a1 + 96);
            *(_OWORD *)a1 = *v16;
            *(_OWORD *)(a1 + 16) = v43;
            *(_OWORD *)(a1 + 140) = *(_OWORD *)&v115[12];
            *(_OWORD *)(a1 + 112) = v101;
            *(_OWORD *)(a1 + 128) = *(_OWORD *)v115;
            *v16 = v73;
            *(_OWORD *)(a1 + 96) = v87;
          }
        }
      }
      else
      {
        if (v19 <= v18)
        {
          v104 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)v118 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v118[16] = *(_OWORD *)(a1 + 64);
          v76 = *(_OWORD *)a1;
          v90 = *(_OWORD *)(a1 + 16);
          v57 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
          *(_OWORD *)(a1 + 48) = v57;
          *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
          v58 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v16;
          *(_OWORD *)(a1 + 16) = v58;
          *(_OWORD *)(a1 + 140) = *(_OWORD *)&v118[12];
          *(_OWORD *)(a1 + 112) = v104;
          *(_OWORD *)(a1 + 128) = *(_OWORD *)v118;
          *v16 = v76;
          *(_OWORD *)(a1 + 96) = v90;
          if (*(_QWORD *)(a2 - 64) <= *(_QWORD *)(a1 + 96))
            return result;
          v93 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v107 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)&v107[16] = *(_OWORD *)(a1 + 144);
          v65 = *v16;
          v79 = *(_OWORD *)(a1 + 96);
          *v16 = *v17;
          v60 = *(_OWORD *)(a2 - 48);
          v59 = *(_OWORD *)(a2 - 32);
          v61 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 - 20);
          *(_OWORD *)(a1 + 112) = v60;
          *(_OWORD *)(a1 + 128) = v59;
          *(_OWORD *)(a1 + 96) = v61;
        }
        else
        {
          v93 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)v107 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v107[16] = *(_OWORD *)(a1 + 64);
          v65 = *(_OWORD *)a1;
          v79 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)a1 = *v17;
          v21 = *(_OWORD *)(a2 - 48);
          v20 = *(_OWORD *)(a2 - 32);
          v22 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 - 20);
          *(_OWORD *)(a1 + 32) = v21;
          *(_OWORD *)(a1 + 48) = v20;
          *(_OWORD *)(a1 + 16) = v22;
        }
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v107[12];
        *(_OWORD *)(a2 - 48) = v93;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v107;
        *v17 = v65;
        *(_OWORD *)(a2 - 64) = v79;
      }
      return result;
    case 4uLL:
      sub_2233C00FC((_OWORD *)a1, a1 + 80, a1 + 160, (__n128 *)(a2 - 80));
      return 1;
    case 5uLL:
      v23 = (__int128 *)(a1 + 80);
      v24 = (__int128 *)(a1 + 160);
      v25 = (__int128 *)(a1 + 240);
      sub_2233C00FC((_OWORD *)a1, a1 + 80, a1 + 160, (__n128 *)(a1 + 240));
      if (*(_QWORD *)(a2 - 64) <= *(_QWORD *)(a1 + 256))
        return 1;
      v94 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)v108 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)&v108[16] = *(_OWORD *)(a1 + 304);
      v66 = *v25;
      v80 = *(_OWORD *)(a1 + 256);
      *v25 = *(_OWORD *)(a2 - 80);
      v27 = *(_OWORD *)(a2 - 48);
      v26 = *(_OWORD *)(a2 - 32);
      v28 = *(_OWORD *)(a2 - 64);
      *(_OWORD *)(a1 + 300) = *(_OWORD *)(a2 - 20);
      *(_OWORD *)(a1 + 272) = v27;
      *(_OWORD *)(a1 + 288) = v26;
      *(_OWORD *)(a1 + 256) = v28;
      *(_OWORD *)(a2 - 20) = *(_OWORD *)&v108[12];
      *(_OWORD *)(a2 - 48) = v94;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v108;
      *(_OWORD *)(a2 - 80) = v66;
      *(_OWORD *)(a2 - 64) = v80;
      if (*(_QWORD *)(a1 + 256) <= *(_QWORD *)(a1 + 176))
        return 1;
      v95 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)v109 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)&v109[16] = *(_OWORD *)(a1 + 224);
      v67 = *v24;
      v81 = *(_OWORD *)(a1 + 176);
      v29 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 208) = v29;
      *(_OWORD *)(a1 + 220) = *(_OWORD *)(a1 + 300);
      v30 = *(_OWORD *)(a1 + 256);
      *v24 = *v25;
      *(_OWORD *)(a1 + 176) = v30;
      *(_OWORD *)(a1 + 300) = *(_OWORD *)&v109[12];
      *(_OWORD *)(a1 + 272) = v95;
      *(_OWORD *)(a1 + 288) = *(_OWORD *)v109;
      *v25 = v67;
      *(_OWORD *)(a1 + 256) = v81;
      if (*(_QWORD *)(a1 + 176) <= *(_QWORD *)(a1 + 96))
        return 1;
      v96 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)v110 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)&v110[16] = *(_OWORD *)(a1 + 144);
      v68 = *v23;
      v82 = *(_OWORD *)(a1 + 96);
      v31 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 128) = v31;
      *(_OWORD *)(a1 + 140) = *(_OWORD *)(a1 + 220);
      v32 = *(_OWORD *)(a1 + 176);
      *v23 = *v24;
      *(_OWORD *)(a1 + 96) = v32;
      *(_OWORD *)(a1 + 220) = *(_OWORD *)&v110[12];
      *(_OWORD *)(a1 + 192) = v96;
      *(_OWORD *)(a1 + 208) = *(_OWORD *)v110;
      *v24 = v68;
      *(_OWORD *)(a1 + 176) = v82;
      if (*(_QWORD *)(a1 + 96) <= *(_QWORD *)(a1 + 16))
        return 1;
      v97 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)v111 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)&v111[16] = *(_OWORD *)(a1 + 64);
      v69 = *(_OWORD *)a1;
      v83 = *(_OWORD *)(a1 + 16);
      v33 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 48) = v33;
      *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
      v34 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)a1 = *v23;
      *(_OWORD *)(a1 + 16) = v34;
      *(_OWORD *)(a1 + 140) = *(_OWORD *)&v111[12];
      *(_OWORD *)(a1 + 112) = v97;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)v111;
      result = 1;
      *v23 = v69;
      *(_OWORD *)(a1 + 96) = v83;
      return result;
    default:
      v9 = a1 + 160;
      v10 = (__int128 *)(a1 + 80);
      v11 = *(_QWORD *)(a1 + 96);
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(_QWORD *)(a1 + 176);
      if (v11 <= v12)
      {
        if (v13 > v11)
        {
          v98 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v112 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)&v112[16] = *(_OWORD *)(a1 + 144);
          v70 = *v10;
          v84 = *(_OWORD *)(a1 + 96);
          v35 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(a1 + 128) = v35;
          *(_OWORD *)(a1 + 140) = *(_OWORD *)(a1 + 220);
          v36 = *(_OWORD *)(a1 + 176);
          *v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 96) = v36;
          *(_OWORD *)(a1 + 220) = *(_OWORD *)&v112[12];
          *(_OWORD *)(a1 + 192) = v98;
          *(_OWORD *)(a1 + 208) = *(_OWORD *)v112;
          *(_OWORD *)v9 = v70;
          *(_OWORD *)(a1 + 176) = v84;
          if (*(_QWORD *)(a1 + 96) > v12)
          {
            v99 = *(_OWORD *)(a1 + 32);
            *(_OWORD *)v113 = *(_OWORD *)(a1 + 48);
            *(_OWORD *)&v113[16] = *(_OWORD *)(a1 + 64);
            v71 = *(_OWORD *)a1;
            v85 = *(_OWORD *)(a1 + 16);
            v37 = *(_OWORD *)(a1 + 128);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
            *(_OWORD *)(a1 + 48) = v37;
            *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
            v38 = *(_OWORD *)(a1 + 96);
            *(_OWORD *)a1 = *v10;
            *(_OWORD *)(a1 + 16) = v38;
            *(_OWORD *)(a1 + 140) = *(_OWORD *)&v113[12];
            *(_OWORD *)(a1 + 112) = v99;
            *(_OWORD *)(a1 + 128) = *(_OWORD *)v113;
            *v10 = v71;
            *(_OWORD *)(a1 + 96) = v85;
          }
        }
      }
      else
      {
        if (v13 <= v11)
        {
          v102 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)v116 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v116[16] = *(_OWORD *)(a1 + 64);
          v74 = *(_OWORD *)a1;
          v88 = *(_OWORD *)(a1 + 16);
          v44 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
          *(_OWORD *)(a1 + 48) = v44;
          *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
          v45 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v10;
          *(_OWORD *)(a1 + 16) = v45;
          *(_OWORD *)(a1 + 140) = *(_OWORD *)&v116[12];
          *(_OWORD *)(a1 + 112) = v102;
          *(_OWORD *)(a1 + 128) = *(_OWORD *)v116;
          *v10 = v74;
          *(_OWORD *)(a1 + 96) = v88;
          if (v13 <= *(_QWORD *)(a1 + 96))
            goto LABEL_25;
          v92 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v106 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)&v106[16] = *(_OWORD *)(a1 + 144);
          v64 = *v10;
          v78 = *(_OWORD *)(a1 + 96);
          v46 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(a1 + 128) = v46;
          *(_OWORD *)(a1 + 140) = *(_OWORD *)(a1 + 220);
          v47 = *(_OWORD *)(a1 + 176);
          *v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 96) = v47;
        }
        else
        {
          v92 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)v106 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v106[16] = *(_OWORD *)(a1 + 64);
          v64 = *(_OWORD *)a1;
          v78 = *(_OWORD *)(a1 + 16);
          v14 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(a1 + 48) = v14;
          *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 220);
          v15 = *(_OWORD *)(a1 + 176);
          *(_OWORD *)a1 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 16) = v15;
        }
        *(_OWORD *)(a1 + 220) = *(_OWORD *)&v106[12];
        *(_OWORD *)(a1 + 192) = v92;
        *(_OWORD *)(a1 + 208) = *(_OWORD *)v106;
        *(_OWORD *)v9 = v64;
        *(_OWORD *)(a1 + 176) = v78;
      }
LABEL_25:
      v48 = a1 + 240;
      if (a1 + 240 == a2)
        return 1;
      v49 = 0;
      v50 = 0;
      break;
  }
  while (1)
  {
    v52 = *(_QWORD *)(v48 + 16);
    if (v52 > *(_QWORD *)(v9 + 16))
    {
      v62 = *(_OWORD *)v48;
      v75 = *(_OWORD *)(v48 + 24);
      v89 = *(_OWORD *)(v48 + 40);
      v103 = *(_OWORD *)(v48 + 56);
      v117 = *(_QWORD *)(v48 + 72);
      v53 = v49;
      do
      {
        v54 = a1 + v53;
        v55 = *(_OWORD *)(a1 + v53 + 208);
        *(_OWORD *)(v54 + 272) = *(_OWORD *)(a1 + v53 + 192);
        *(_OWORD *)(v54 + 288) = v55;
        *(_OWORD *)(a1 + v53 + 300) = *(_OWORD *)(a1 + v53 + 220);
        v56 = *(_OWORD *)(a1 + v53 + 176);
        *(_OWORD *)(v54 + 240) = *(_OWORD *)(a1 + v53 + 160);
        *(_OWORD *)(v54 + 256) = v56;
        if (v53 == -160)
        {
          v51 = a1;
          goto LABEL_28;
        }
        v53 -= 80;
      }
      while (v52 > *(_QWORD *)(v54 + 96));
      v51 = a1 + v53 + 240;
LABEL_28:
      *(_OWORD *)v51 = v62;
      *(_QWORD *)(v51 + 16) = v52;
      *(_OWORD *)(v51 + 24) = v75;
      *(_OWORD *)(v51 + 40) = v89;
      *(_OWORD *)(v51 + 56) = v103;
      ++v50;
      *(_DWORD *)(v51 + 72) = v117;
      if (v50 == 8)
        return v48 + 80 == a2;
    }
    v9 = v48;
    v49 += 80;
    v48 += 80;
    if (v48 == a2)
      return 1;
  }
}

__n128 sub_2233C00FC(_OWORD *a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __n128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __n128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[32];
  _BYTE v53[32];
  _BYTE v54[32];
  _BYTE v55[32];
  _BYTE v56[32];
  _BYTE v57[32];
  _BYTE v58[32];

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a3 + 16);
  if (v4 <= *((_QWORD *)a1 + 2))
  {
    if (v5 > v4)
    {
      v46 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v53 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v53[16] = *(_OWORD *)(a2 + 64);
      v32 = *(__n128 *)a2;
      v39 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v10 = *(_OWORD *)(a3 + 32);
      v9 = *(_OWORD *)(a3 + 48);
      v11 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 60) = *(_OWORD *)(a3 + 60);
      *(_OWORD *)(a2 + 32) = v10;
      *(_OWORD *)(a2 + 48) = v9;
      *(_OWORD *)(a2 + 16) = v11;
      *(_OWORD *)(a3 + 60) = *(_OWORD *)&v53[12];
      *(_OWORD *)(a3 + 32) = v46;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v53;
      result = v32;
      *(__n128 *)a3 = v32;
      *(_OWORD *)(a3 + 16) = v39;
      if (*(_QWORD *)(a2 + 16) > *((_QWORD *)a1 + 2))
      {
        v47 = a1[2];
        *(_OWORD *)v54 = a1[3];
        *(_OWORD *)&v54[16] = a1[4];
        v33 = *(__n128 *)a1;
        v40 = a1[1];
        *a1 = *(_OWORD *)a2;
        v14 = *(_OWORD *)(a2 + 32);
        v13 = *(_OWORD *)(a2 + 48);
        v15 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)(a2 + 60);
        a1[2] = v14;
        a1[3] = v13;
        a1[1] = v15;
        *(_OWORD *)(a2 + 60) = *(_OWORD *)&v54[12];
        *(_OWORD *)(a2 + 32) = v47;
        *(_OWORD *)(a2 + 48) = *(_OWORD *)v54;
        result = v33;
        *(__n128 *)a2 = v33;
        *(_OWORD *)(a2 + 16) = v40;
      }
    }
  }
  else
  {
    if (v5 > v4)
    {
      v45 = a1[2];
      *(_OWORD *)v52 = a1[3];
      *(_OWORD *)&v52[16] = a1[4];
      v31 = *(__n128 *)a1;
      v38 = a1[1];
      *a1 = *(_OWORD *)a3;
      v7 = *(_OWORD *)(a3 + 32);
      v6 = *(_OWORD *)(a3 + 48);
      v8 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)(a3 + 60);
      a1[2] = v7;
      a1[3] = v6;
      a1[1] = v8;
LABEL_9:
      *(_OWORD *)(a3 + 60) = *(_OWORD *)&v52[12];
      *(_OWORD *)(a3 + 32) = v45;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v52;
      result = v31;
      *(__n128 *)a3 = v31;
      *(_OWORD *)(a3 + 16) = v38;
      goto LABEL_10;
    }
    v48 = a1[2];
    *(_OWORD *)v55 = a1[3];
    *(_OWORD *)&v55[16] = a1[4];
    v34 = *(__n128 *)a1;
    v41 = a1[1];
    *a1 = *(_OWORD *)a2;
    v17 = *(_OWORD *)(a2 + 32);
    v16 = *(_OWORD *)(a2 + 48);
    v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)(a2 + 60);
    a1[2] = v17;
    a1[3] = v16;
    a1[1] = v18;
    *(_OWORD *)(a2 + 60) = *(_OWORD *)&v55[12];
    *(_OWORD *)(a2 + 32) = v48;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v55;
    result = v34;
    *(__n128 *)a2 = v34;
    *(_OWORD *)(a2 + 16) = v41;
    if (*(_QWORD *)(a3 + 16) > *(_QWORD *)(a2 + 16))
    {
      v45 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v52 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v52[16] = *(_OWORD *)(a2 + 64);
      v31 = *(__n128 *)a2;
      v38 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v20 = *(_OWORD *)(a3 + 32);
      v19 = *(_OWORD *)(a3 + 48);
      v21 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 60) = *(_OWORD *)(a3 + 60);
      *(_OWORD *)(a2 + 32) = v20;
      *(_OWORD *)(a2 + 48) = v19;
      *(_OWORD *)(a2 + 16) = v21;
      goto LABEL_9;
    }
  }
LABEL_10:
  if ((int64_t)a4[1].n128_u64[0] > *(_QWORD *)(a3 + 16))
  {
    v49 = *(__n128 *)(a3 + 32);
    *(_OWORD *)v56 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)&v56[16] = *(_OWORD *)(a3 + 64);
    v35 = *(__n128 *)a3;
    v42 = *(__n128 *)(a3 + 16);
    *(__n128 *)a3 = *a4;
    v23 = a4[2];
    v22 = a4[3];
    v24 = a4[1];
    *(__n128 *)(a3 + 60) = *(__n128 *)((char *)a4 + 60);
    *(__n128 *)(a3 + 32) = v23;
    *(__n128 *)(a3 + 48) = v22;
    *(__n128 *)(a3 + 16) = v24;
    *(__n128 *)((char *)a4 + 60) = *(__n128 *)&v56[12];
    a4[2] = v49;
    a4[3] = *(__n128 *)v56;
    result = v35;
    *a4 = v35;
    a4[1] = v42;
    if (*(_QWORD *)(a3 + 16) > *(_QWORD *)(a2 + 16))
    {
      v50 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v57 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v57[16] = *(_OWORD *)(a2 + 64);
      v36 = *(__n128 *)a2;
      v43 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v26 = *(_OWORD *)(a3 + 32);
      v25 = *(_OWORD *)(a3 + 48);
      v27 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 60) = *(_OWORD *)(a3 + 60);
      *(_OWORD *)(a2 + 32) = v26;
      *(_OWORD *)(a2 + 48) = v25;
      *(_OWORD *)(a2 + 16) = v27;
      *(_OWORD *)(a3 + 60) = *(_OWORD *)&v57[12];
      *(_OWORD *)(a3 + 32) = v50;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v57;
      result = v36;
      *(__n128 *)a3 = v36;
      *(_OWORD *)(a3 + 16) = v43;
      if (*(_QWORD *)(a2 + 16) > *((_QWORD *)a1 + 2))
      {
        v51 = a1[2];
        *(_OWORD *)v58 = a1[3];
        *(_OWORD *)&v58[16] = a1[4];
        v37 = *(__n128 *)a1;
        v44 = a1[1];
        *a1 = *(_OWORD *)a2;
        v29 = *(_OWORD *)(a2 + 32);
        v28 = *(_OWORD *)(a2 + 48);
        v30 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)(a2 + 60);
        a1[2] = v29;
        a1[3] = v28;
        a1[1] = v30;
        *(_OWORD *)(a2 + 60) = *(_OWORD *)&v58[12];
        *(_OWORD *)(a2 + 32) = v51;
        *(_OWORD *)(a2 + 48) = *(_OWORD *)v58;
        result = v37;
        *(__n128 *)a2 = v37;
        *(_OWORD *)(a2 + 16) = v44;
      }
    }
  }
  return result;
}

__n128 sub_2233C0424(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v8;
  __int128 *v9;
  __n128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float v16;
  float v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  float v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 *v43;
  unint64_t v44;
  unint64_t v45;
  float v46;
  float v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  float v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __n128 *v70;
  unint64_t v71;
  __n128 *v72;
  float v73;
  float v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  float v90;
  float v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  float v106;
  unint64_t v107;
  unint64_t v108;
  __n128 *v109;
  float v110;
  unint64_t v111;
  float v112;
  __n128 *v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;
  float v117;
  float v118;
  __n128 *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  BOOL v123;
  unint64_t v124;
  float v125;
  unint64_t v126;
  float v127;
  _OWORD *v128;
  unint64_t v129;
  float v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  float v134;
  float v135;
  __n128 *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __n128 *v142;
  float v143;
  __int128 v144;
  __int128 v145;
  __n128 *v146;
  __n128 *v147;
  __n128 *v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  float v154;
  float v155;
  __int128 v156;
  __int128 v157;
  float v158;
  float v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  BOOL v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  float v168;
  uint64_t v169;
  _OWORD *v170;
  __int128 v171;
  __int128 v172;
  int64_t v173;
  int64_t v174;
  BOOL v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  float v179;
  _OWORD *v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  int64_t v186;
  uint64_t v187;
  unint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  _OWORD *v192;
  uint64_t v193;
  int64_t v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  _OWORD *v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  float v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __n128 v219;
  __n128 v220;
  __int128 v221;
  __int128 v222;
  __n128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __n128 v234;
  __n128 v235;
  __n128 v236;
  __n128 v237;
  __n128 v238;
  __n128 v239;
  __n128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __n128 v244;
  __int128 v245;
  __int128 v246;
  __n128 v247;
  __n128 v248;
  __n128 v249;
  __n128 v250;
  __n128 v251;
  __n128 v252;
  __n128 v253;
  __int128 v254;
  __int128 v255;
  __n128 v256;
  __n128 v257;
  __n128 v258;
  __n128 v259;
  __n128 v260;
  __n128 v261;
  __n128 v262;
  __n128 v263;
  __n128 v264;
  __int128 v265;
  __int128 v266;
  __n128 v267;
  __n128 v268;
  __n128 v269;
  __int128 v270;
  __n128 v271;
  __n128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __n128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __n128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __n128 v306;
  __n128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __n128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __n128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  _BYTE v351[32];
  _BYTE v352[32];
  _BYTE v353[32];
  _BYTE v354[32];
  _BYTE v355[32];
  _BYTE v356[32];
  _BYTE v357[32];
  _BYTE v358[32];
  _BYTE v359[32];
  _BYTE v360[32];
  _BYTE v361[32];
  _BYTE v362[32];
  _BYTE v363[32];
  _BYTE v364[32];
  _BYTE v365[32];
  _BYTE v366[32];
  _BYTE v367[32];
  _BYTE v368[32];
  _BYTE v369[32];
  _BYTE v370[32];
  _BYTE v371[32];
  _BYTE v372[32];
  _BYTE v373[32];
  _BYTE v374[32];
  _BYTE v375[32];
  _BYTE v376[32];
  _BYTE v377[32];
  _BYTE v378[32];
  _BYTE v379[32];
  _BYTE v380[32];
  _BYTE v381[32];
  __int128 v382;
  __int128 v383;
  _BYTE v384[32];
  _BYTE v385[32];
  _BYTE v386[32];
  __int128 v387;
  _BYTE v388[32];
  _BYTE v389[32];
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;

BOOL sub_2233C1B4C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  float v11;
  float v12;
  float v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  __int128 *v17;
  float v18;
  float v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  float v31;
  float v32;
  __int128 v33;
  __int128 v34;
  float v35;
  float v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  float v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  float v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _BYTE v110[32];
  _BYTE v111[32];
  _BYTE v112[32];
  _BYTE v113[32];
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[32];
  _BYTE v118[32];
  _BYTE v119[32];
  _BYTE v120[32];
  _BYTE v121[32];
  __int128 v122;
  _BYTE v123[32];
  uint64_t v124;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 8) < *(float *)(a1 + 72))
      {
        v96 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)v110 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)&v110[16] = *(_OWORD *)(a1 + 64);
        v68 = *(_OWORD *)a1;
        v82 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 80);
        v7 = *(_OWORD *)(a2 - 48);
        v6 = *(_OWORD *)(a2 - 32);
        v8 = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 - 20);
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a1 + 48) = v6;
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v110[12];
        *(_OWORD *)(a2 - 48) = v96;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v110;
        *(_OWORD *)(a2 - 80) = v68;
        *(_OWORD *)(a2 - 64) = v82;
      }
      return result;
    case 3uLL:
      v16 = (__int128 *)(a1 + 80);
      v17 = (__int128 *)(a2 - 80);
      v18 = *(float *)(a1 + 152);
      v19 = *(float *)(a2 - 8);
      if (v18 >= *(float *)(a1 + 72))
      {
        if (v19 < v18)
        {
          v105 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v119 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)&v119[16] = *(_OWORD *)(a1 + 144);
          v77 = *v16;
          v91 = *(_OWORD *)(a1 + 96);
          *v16 = *v17;
          v45 = *(_OWORD *)(a2 - 48);
          v44 = *(_OWORD *)(a2 - 32);
          v46 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 - 20);
          *(_OWORD *)(a1 + 112) = v45;
          *(_OWORD *)(a1 + 128) = v44;
          *(_OWORD *)(a1 + 96) = v46;
          *(_OWORD *)(a2 - 20) = *(_OWORD *)&v119[12];
          *(_OWORD *)(a2 - 48) = v105;
          *(_OWORD *)(a2 - 32) = *(_OWORD *)v119;
          *v17 = v77;
          *(_OWORD *)(a2 - 64) = v91;
          if (*(float *)(a1 + 152) < *(float *)(a1 + 72))
          {
            v106 = *(_OWORD *)(a1 + 32);
            *(_OWORD *)v120 = *(_OWORD *)(a1 + 48);
            *(_OWORD *)&v120[16] = *(_OWORD *)(a1 + 64);
            v78 = *(_OWORD *)a1;
            v92 = *(_OWORD *)(a1 + 16);
            v47 = *(_OWORD *)(a1 + 128);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
            *(_OWORD *)(a1 + 48) = v47;
            *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
            v48 = *(_OWORD *)(a1 + 96);
            *(_OWORD *)a1 = *v16;
            *(_OWORD *)(a1 + 16) = v48;
            *(_OWORD *)(a1 + 140) = *(_OWORD *)&v120[12];
            *(_OWORD *)(a1 + 112) = v106;
            *(_OWORD *)(a1 + 128) = *(_OWORD *)v120;
            *v16 = v78;
            *(_OWORD *)(a1 + 96) = v92;
          }
        }
      }
      else
      {
        if (v19 >= v18)
        {
          v109 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)v123 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v123[16] = *(_OWORD *)(a1 + 64);
          v81 = *(_OWORD *)a1;
          v95 = *(_OWORD *)(a1 + 16);
          v63 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
          *(_OWORD *)(a1 + 48) = v63;
          *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
          v64 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v16;
          *(_OWORD *)(a1 + 16) = v64;
          *(_OWORD *)(a1 + 140) = *(_OWORD *)&v123[12];
          *(_OWORD *)(a1 + 112) = v109;
          *(_OWORD *)(a1 + 128) = *(_OWORD *)v123;
          *v16 = v81;
          *(_OWORD *)(a1 + 96) = v95;
          if (*(float *)(a2 - 8) >= *(float *)(a1 + 152))
            return result;
          v98 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v112 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)&v112[16] = *(_OWORD *)(a1 + 144);
          v70 = *v16;
          v84 = *(_OWORD *)(a1 + 96);
          *v16 = *v17;
          v66 = *(_OWORD *)(a2 - 48);
          v65 = *(_OWORD *)(a2 - 32);
          v67 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 - 20);
          *(_OWORD *)(a1 + 112) = v66;
          *(_OWORD *)(a1 + 128) = v65;
          *(_OWORD *)(a1 + 96) = v67;
        }
        else
        {
          v98 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)v112 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v112[16] = *(_OWORD *)(a1 + 64);
          v70 = *(_OWORD *)a1;
          v84 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)a1 = *v17;
          v21 = *(_OWORD *)(a2 - 48);
          v20 = *(_OWORD *)(a2 - 32);
          v22 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 - 20);
          *(_OWORD *)(a1 + 32) = v21;
          *(_OWORD *)(a1 + 48) = v20;
          *(_OWORD *)(a1 + 16) = v22;
        }
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v112[12];
        *(_OWORD *)(a2 - 48) = v98;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v112;
        *v17 = v70;
        *(_OWORD *)(a2 - 64) = v84;
      }
      return result;
    case 4uLL:
      sub_2233C2230(a1, a1 + 80, a1 + 160, a2 - 80);
      return 1;
    case 5uLL:
      v23 = (__int128 *)(a1 + 80);
      v24 = (__int128 *)(a1 + 160);
      v25 = (__int128 *)(a1 + 240);
      sub_2233C2230(a1, a1 + 80, a1 + 160, a1 + 240);
      if (*(float *)(a2 - 8) >= *(float *)(a1 + 312))
        return 1;
      v99 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)v113 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)&v113[16] = *(_OWORD *)(a1 + 304);
      v71 = *v25;
      v85 = *(_OWORD *)(a1 + 256);
      *v25 = *(_OWORD *)(a2 - 80);
      v27 = *(_OWORD *)(a2 - 48);
      v26 = *(_OWORD *)(a2 - 32);
      v28 = *(_OWORD *)(a2 - 64);
      *(_OWORD *)(a1 + 300) = *(_OWORD *)(a2 - 20);
      *(_OWORD *)(a1 + 272) = v27;
      *(_OWORD *)(a1 + 288) = v26;
      *(_OWORD *)(a1 + 256) = v28;
      *(_OWORD *)(a2 - 20) = *(_OWORD *)&v113[12];
      *(_OWORD *)(a2 - 48) = v99;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v113;
      *(_OWORD *)(a2 - 80) = v71;
      *(_OWORD *)(a2 - 64) = v85;
      if (*(float *)(a1 + 312) >= *(float *)(a1 + 232))
        return 1;
      v100 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)v114 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)&v114[16] = *(_OWORD *)(a1 + 224);
      v72 = *v24;
      v86 = *(_OWORD *)(a1 + 176);
      v29 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 208) = v29;
      *(_OWORD *)(a1 + 220) = *(_OWORD *)(a1 + 300);
      v30 = *(_OWORD *)(a1 + 256);
      *v24 = *v25;
      *(_OWORD *)(a1 + 176) = v30;
      *(_OWORD *)(a1 + 300) = *(_OWORD *)&v114[12];
      *(_OWORD *)(a1 + 272) = v100;
      *(_OWORD *)(a1 + 288) = *(_OWORD *)v114;
      v31 = *(float *)(a1 + 232);
      v32 = *(float *)(a1 + 152);
      *v25 = v72;
      *(_OWORD *)(a1 + 256) = v86;
      if (v31 >= v32)
        return 1;
      v101 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)v115 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)&v115[16] = *(_OWORD *)(a1 + 144);
      v73 = *v23;
      v87 = *(_OWORD *)(a1 + 96);
      v33 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 128) = v33;
      *(_OWORD *)(a1 + 140) = *(_OWORD *)(a1 + 220);
      v34 = *(_OWORD *)(a1 + 176);
      *v23 = *v24;
      *(_OWORD *)(a1 + 96) = v34;
      *(_OWORD *)(a1 + 220) = *(_OWORD *)&v115[12];
      *(_OWORD *)(a1 + 192) = v101;
      *(_OWORD *)(a1 + 208) = *(_OWORD *)v115;
      v35 = *(float *)(a1 + 152);
      v36 = *(float *)(a1 + 72);
      *v24 = v73;
      *(_OWORD *)(a1 + 176) = v87;
      if (v35 >= v36)
        return 1;
      v102 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)v116 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)&v116[16] = *(_OWORD *)(a1 + 64);
      v74 = *(_OWORD *)a1;
      v88 = *(_OWORD *)(a1 + 16);
      v37 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 48) = v37;
      *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
      v38 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)a1 = *v23;
      *(_OWORD *)(a1 + 16) = v38;
      *(_OWORD *)(a1 + 140) = *(_OWORD *)&v116[12];
      *(_OWORD *)(a1 + 112) = v102;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)v116;
      result = 1;
      *v23 = v74;
      *(_OWORD *)(a1 + 96) = v88;
      return result;
    default:
      v9 = a1 + 160;
      v10 = (__int128 *)(a1 + 80);
      v11 = *(float *)(a1 + 152);
      v12 = *(float *)(a1 + 72);
      v13 = *(float *)(a1 + 232);
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          v103 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v117 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)&v117[16] = *(_OWORD *)(a1 + 144);
          v75 = *v10;
          v89 = *(_OWORD *)(a1 + 96);
          v39 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(a1 + 128) = v39;
          *(_OWORD *)(a1 + 140) = *(_OWORD *)(a1 + 220);
          v40 = *(_OWORD *)(a1 + 176);
          *v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 96) = v40;
          *(_OWORD *)(a1 + 220) = *(_OWORD *)&v117[12];
          *(_OWORD *)(a1 + 192) = v103;
          *(_OWORD *)(a1 + 208) = *(_OWORD *)v117;
          v41 = *(float *)(a1 + 152);
          *(_OWORD *)v9 = v75;
          *(_OWORD *)(a1 + 176) = v89;
          if (v41 < v12)
          {
            v104 = *(_OWORD *)(a1 + 32);
            *(_OWORD *)v118 = *(_OWORD *)(a1 + 48);
            *(_OWORD *)&v118[16] = *(_OWORD *)(a1 + 64);
            v76 = *(_OWORD *)a1;
            v90 = *(_OWORD *)(a1 + 16);
            v42 = *(_OWORD *)(a1 + 128);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
            *(_OWORD *)(a1 + 48) = v42;
            *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
            v43 = *(_OWORD *)(a1 + 96);
            *(_OWORD *)a1 = *v10;
            *(_OWORD *)(a1 + 16) = v43;
            *(_OWORD *)(a1 + 140) = *(_OWORD *)&v118[12];
            *(_OWORD *)(a1 + 112) = v104;
            *(_OWORD *)(a1 + 128) = *(_OWORD *)v118;
            *v10 = v76;
            *(_OWORD *)(a1 + 96) = v90;
          }
        }
      }
      else
      {
        if (v13 >= v11)
        {
          v107 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)v121 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v121[16] = *(_OWORD *)(a1 + 64);
          v79 = *(_OWORD *)a1;
          v93 = *(_OWORD *)(a1 + 16);
          v49 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
          *(_OWORD *)(a1 + 48) = v49;
          *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
          v50 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v10;
          *(_OWORD *)(a1 + 16) = v50;
          *(_OWORD *)(a1 + 140) = *(_OWORD *)&v121[12];
          *(_OWORD *)(a1 + 112) = v107;
          *(_OWORD *)(a1 + 128) = *(_OWORD *)v121;
          v51 = *(float *)(a1 + 152);
          *v10 = v79;
          *(_OWORD *)(a1 + 96) = v93;
          if (v13 >= v51)
            goto LABEL_25;
          v97 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v111 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)&v111[16] = *(_OWORD *)(a1 + 144);
          v69 = *v10;
          v83 = *(_OWORD *)(a1 + 96);
          v52 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(a1 + 128) = v52;
          *(_OWORD *)(a1 + 140) = *(_OWORD *)(a1 + 220);
          v53 = *(_OWORD *)(a1 + 176);
          *v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 96) = v53;
        }
        else
        {
          v97 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)v111 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v111[16] = *(_OWORD *)(a1 + 64);
          v69 = *(_OWORD *)a1;
          v83 = *(_OWORD *)(a1 + 16);
          v14 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(a1 + 48) = v14;
          *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 220);
          v15 = *(_OWORD *)(a1 + 176);
          *(_OWORD *)a1 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 16) = v15;
        }
        *(_OWORD *)(a1 + 220) = *(_OWORD *)&v111[12];
        *(_OWORD *)(a1 + 192) = v97;
        *(_OWORD *)(a1 + 208) = *(_OWORD *)v111;
        *(_OWORD *)v9 = v69;
        *(_OWORD *)(a1 + 176) = v83;
      }
LABEL_25:
      v54 = a1 + 240;
      if (a1 + 240 == a2)
        return 1;
      v55 = 0;
      v56 = 0;
      break;
  }
  while (1)
  {
    v58 = *(float *)(v54 + 72);
    if (v58 < *(float *)(v9 + 72))
    {
      v108 = *(_OWORD *)(v54 + 32);
      v122 = *(_OWORD *)(v54 + 48);
      v124 = *(_QWORD *)(v54 + 64);
      v80 = *(_OWORD *)v54;
      v94 = *(_OWORD *)(v54 + 16);
      v59 = v55;
      do
      {
        v60 = a1 + v59;
        v61 = *(_OWORD *)(a1 + v59 + 208);
        *(_OWORD *)(v60 + 272) = *(_OWORD *)(a1 + v59 + 192);
        *(_OWORD *)(v60 + 288) = v61;
        *(_OWORD *)(a1 + v59 + 300) = *(_OWORD *)(a1 + v59 + 220);
        v62 = *(_OWORD *)(a1 + v59 + 176);
        *(_OWORD *)(v60 + 240) = *(_OWORD *)(a1 + v59 + 160);
        *(_OWORD *)(v60 + 256) = v62;
        if (v59 == -160)
        {
          v57 = a1;
          goto LABEL_28;
        }
        v59 -= 80;
      }
      while (v58 < *(float *)(v60 + 152));
      v57 = a1 + v59 + 240;
LABEL_28:
      *(_OWORD *)(v57 + 32) = v108;
      *(_OWORD *)(v57 + 48) = v122;
      *(_QWORD *)(v57 + 64) = v124;
      *(_OWORD *)v57 = v80;
      *(_OWORD *)(v57 + 16) = v94;
      ++v56;
      *(float *)(v57 + 72) = v58;
      if (v56 == 8)
        return v54 + 80 == a2;
    }
    v9 = v54;
    v55 += 80;
    v54 += 80;
    if (v54 == a2)
      return 1;
  }
}

__n128 sub_2233C2230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v4;
  float v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[32];
  _BYTE v53[32];
  _BYTE v54[32];
  _BYTE v55[32];
  _BYTE v56[32];
  _BYTE v57[32];
  _BYTE v58[32];

  v4 = *(float *)(a2 + 72);
  v5 = *(float *)(a3 + 72);
  if (v4 >= *(float *)(a1 + 72))
  {
    if (v5 < v4)
    {
      v46 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v53 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v53[16] = *(_OWORD *)(a2 + 64);
      v32 = *(__n128 *)a2;
      v39 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v10 = *(_OWORD *)(a3 + 32);
      v9 = *(_OWORD *)(a3 + 48);
      v11 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 60) = *(_OWORD *)(a3 + 60);
      *(_OWORD *)(a2 + 32) = v10;
      *(_OWORD *)(a2 + 48) = v9;
      *(_OWORD *)(a2 + 16) = v11;
      *(_OWORD *)(a3 + 60) = *(_OWORD *)&v53[12];
      *(_OWORD *)(a3 + 32) = v46;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v53;
      result = v32;
      *(__n128 *)a3 = v32;
      *(_OWORD *)(a3 + 16) = v39;
      if (*(float *)(a2 + 72) < *(float *)(a1 + 72))
      {
        v47 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)v54 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)&v54[16] = *(_OWORD *)(a1 + 64);
        v33 = *(__n128 *)a1;
        v40 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v14 = *(_OWORD *)(a2 + 32);
        v13 = *(_OWORD *)(a2 + 48);
        v15 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
        *(_OWORD *)(a1 + 32) = v14;
        *(_OWORD *)(a1 + 48) = v13;
        *(_OWORD *)(a1 + 16) = v15;
        *(_OWORD *)(a2 + 60) = *(_OWORD *)&v54[12];
        *(_OWORD *)(a2 + 32) = v47;
        *(_OWORD *)(a2 + 48) = *(_OWORD *)v54;
        result = v33;
        *(__n128 *)a2 = v33;
        *(_OWORD *)(a2 + 16) = v40;
      }
    }
  }
  else
  {
    if (v5 < v4)
    {
      v45 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)v52 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 64);
      v31 = *(__n128 *)a1;
      v38 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      v7 = *(_OWORD *)(a3 + 32);
      v6 = *(_OWORD *)(a3 + 48);
      v8 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a1 + 60) = *(_OWORD *)(a3 + 60);
      *(_OWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 16) = v8;
LABEL_9:
      *(_OWORD *)(a3 + 60) = *(_OWORD *)&v52[12];
      *(_OWORD *)(a3 + 32) = v45;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v52;
      result = v31;
      *(__n128 *)a3 = v31;
      *(_OWORD *)(a3 + 16) = v38;
      goto LABEL_10;
    }
    v48 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)v55 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&v55[16] = *(_OWORD *)(a1 + 64);
    v34 = *(__n128 *)a1;
    v41 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v17 = *(_OWORD *)(a2 + 32);
    v16 = *(_OWORD *)(a2 + 48);
    v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
    *(_OWORD *)(a1 + 32) = v17;
    *(_OWORD *)(a1 + 48) = v16;
    *(_OWORD *)(a1 + 16) = v18;
    *(_OWORD *)(a2 + 60) = *(_OWORD *)&v55[12];
    *(_OWORD *)(a2 + 32) = v48;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v55;
    result = v34;
    *(__n128 *)a2 = v34;
    *(_OWORD *)(a2 + 16) = v41;
    if (*(float *)(a3 + 72) < *(float *)(a2 + 72))
    {
      v45 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v52 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v52[16] = *(_OWORD *)(a2 + 64);
      v31 = *(__n128 *)a2;
      v38 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v20 = *(_OWORD *)(a3 + 32);
      v19 = *(_OWORD *)(a3 + 48);
      v21 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 60) = *(_OWORD *)(a3 + 60);
      *(_OWORD *)(a2 + 32) = v20;
      *(_OWORD *)(a2 + 48) = v19;
      *(_OWORD *)(a2 + 16) = v21;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_u32[0] = *(_DWORD *)(a4 + 72);
  if (result.n128_f32[0] < *(float *)(a3 + 72))
  {
    v49 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)v56 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)&v56[16] = *(_OWORD *)(a3 + 64);
    v35 = *(__n128 *)a3;
    v42 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    v23 = *(_OWORD *)(a4 + 32);
    v22 = *(_OWORD *)(a4 + 48);
    v24 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(a3 + 60) = *(_OWORD *)(a4 + 60);
    *(_OWORD *)(a3 + 32) = v23;
    *(_OWORD *)(a3 + 48) = v22;
    *(_OWORD *)(a3 + 16) = v24;
    *(_OWORD *)(a4 + 60) = *(_OWORD *)&v56[12];
    *(_OWORD *)(a4 + 32) = v49;
    *(_OWORD *)(a4 + 48) = *(_OWORD *)v56;
    result = v35;
    *(__n128 *)a4 = v35;
    *(_OWORD *)(a4 + 16) = v42;
    result.n128_u32[0] = *(_DWORD *)(a3 + 72);
    if (result.n128_f32[0] < *(float *)(a2 + 72))
    {
      v50 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v57 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v57[16] = *(_OWORD *)(a2 + 64);
      v36 = *(__n128 *)a2;
      v43 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v26 = *(_OWORD *)(a3 + 32);
      v25 = *(_OWORD *)(a3 + 48);
      v27 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 60) = *(_OWORD *)(a3 + 60);
      *(_OWORD *)(a2 + 32) = v26;
      *(_OWORD *)(a2 + 48) = v25;
      *(_OWORD *)(a2 + 16) = v27;
      *(_OWORD *)(a3 + 60) = *(_OWORD *)&v57[12];
      *(_OWORD *)(a3 + 32) = v50;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v57;
      result = v36;
      *(__n128 *)a3 = v36;
      *(_OWORD *)(a3 + 16) = v43;
      result.n128_u32[0] = *(_DWORD *)(a2 + 72);
      if (result.n128_f32[0] < *(float *)(a1 + 72))
      {
        v51 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)v58 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)&v58[16] = *(_OWORD *)(a1 + 64);
        v37 = *(__n128 *)a1;
        v44 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v29 = *(_OWORD *)(a2 + 32);
        v28 = *(_OWORD *)(a2 + 48);
        v30 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
        *(_OWORD *)(a1 + 32) = v29;
        *(_OWORD *)(a1 + 48) = v28;
        *(_OWORD *)(a1 + 16) = v30;
        *(_OWORD *)(a2 + 60) = *(_OWORD *)&v58[12];
        *(_OWORD *)(a2 + 32) = v51;
        *(_OWORD *)(a2 + 48) = *(_OWORD *)v58;
        result = v37;
        *(__n128 *)a2 = v37;
        *(_OWORD *)(a2 + 16) = v44;
      }
    }
  }
  return result;
}

__n128 sub_2233C2558(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  float v17;
  float v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  float v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 *v44;
  unint64_t v45;
  __n128 *v46;
  float v47;
  float v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  float v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 *v71;
  unint64_t v72;
  __n128 *v73;
  float v74;
  float v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __n128 v88;
  __n128 v89;
  __n128 v90;
  float v91;
  float v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  __n128 v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  uint64_t v106;
  uint64_t v107;
  float v108;
  unint64_t v109;
  __n128 *v110;
  __n128 *v111;
  float v112;
  __n128 *v113;
  float v114;
  __n128 *v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  float v119;
  float v120;
  __n128 *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  BOOL v125;
  unint64_t v126;
  float v127;
  unint64_t v128;
  float v129;
  __n128 *v130;
  __n128 *v131;
  float v132;
  uint64_t v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  float v137;
  float v138;
  __n128 *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 *v146;
  float v147;
  __n128 v148;
  __n128 v149;
  __n128 v150;
  __n128 *v151;
  __n128 *v152;
  __n128 *v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;
  __int128 v157;
  __int128 v158;
  float v159;
  float v160;
  __int128 v161;
  __int128 v162;
  float v163;
  float v164;
  __int128 v165;
  __int128 v166;
  __n128 *v167;
  BOOL v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  __n128 *v173;
  uint64_t v174;
  uint64_t v175;
  _OWORD *v176;
  __int128 v177;
  __int128 v178;
  int64_t v179;
  int64_t v180;
  BOOL v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  float v185;
  uint64_t v186;
  _OWORD *v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  int64_t v193;
  uint64_t v194;
  unint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _OWORD *v199;
  uint64_t v200;
  int64_t v201;
  __n128 v202;
  __n128 v203;
  __n128 v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  _OWORD *v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __n128 v213;
  __n128 v214;
  __n128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  unint64_t v219;
  __n128 v220;
  __n128 v221;
  __int128 v222;
  __int128 v223;
  __n128 v224;
  __n128 v225;
  __n128 v226;
  __n128 v227;
  __n128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __n128 v239;
  __n128 v240;
  __n128 v241;
  __n128 v242;
  __n128 v243;
  __n128 v244;
  __n128 v245;
  __n128 v246;
  __n128 v247;
  __n128 v248;
  __n128 v249;
  __n128 v250;
  __n128 v251;
  __n128 v252;
  __n128 v253;
  __n128 v254;
  __n128 v255;
  __n128 v256;
  __n128 v257;
  __n128 v258;
  __n128 v259;
  __n128 v260;
  __n128 v261;
  __n128 v262;
  __n128 v263;
  __n128 v264;
  __n128 v265;
  __n128 v266;
  __n128 v267;
  __n128 v268;
  __n128 v269;
  __n128 v270;
  __int128 v271;
  __n128 v272;
  __n128 v273;
  __n128 v274;
  __n128 v275;
  __n128 v276;
  __n128 v277;
  __n128 v278;
  __n128 v279;
  __n128 v280;
  __n128 v281;
  __n128 v282;
  __n128 v283;
  __n128 v284;
  __n128 v285;
  __n128 v286;
  __int128 v287;
  __n128 v288;
  __int128 v289;
  __n128 v290;
  __n128 v291;
  __n128 v292;
  __int128 v293;
  __int128 v294;
  __n128 v295;
  __n128 v296;
  __n128 v297;
  __n128 v298;
  __n128 v299;
  __n128 v300;
  __n128 v301;
  __n128 v302;
  __n128 v303;
  __n128 v304;
  __n128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __n128 v309;
  __int128 v310;
  __n128 v311;
  __n128 v312;
  __int128 v313;
  __n128 v314;
  __int128 v315;
  __n128 v316;
  __n128 v317;
  __n128 v318;
  __n128 v319;
  __n128 v320;
  __n128 v321;
  __n128 v322;
  __n128 v323;
  __n128 v324;
  __n128 v325;
  __int128 v326;
  __n128 v327;
  __int128 v328;
  __n128 v329;
  __n128 v330;
  __n128 v331;
  __int128 v332;
  __int128 v333;
  __n128 v334;
  __n128 v335;
  __n128 v336;
  __n128 v337;
  __n128 v338;
  __n128 v339;
  __n128 v340;
  __n128 v341;
  __n128 v342;
  __n128 v343;
  __n128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __n128 v348;
  __int128 v349;
  __n128 v350;
  __n128 v351;
  __int128 v352;
  __n128 v353;
  __int128 v354;
  __n128 v355;
  _BYTE v356[32];
  _BYTE v357[32];
  _BYTE v358[32];
  _BYTE v359[32];
  _BYTE v360[32];
  _BYTE v361[32];
  _BYTE v362[32];
  _BYTE v363[32];
  _BYTE v364[32];
  _BYTE v365[32];
  _BYTE v366[32];
  _BYTE v367[32];
  _BYTE v368[32];
  _BYTE v369[32];
  _BYTE v370[32];
  _BYTE v371[32];
  _BYTE v372[32];
  _BYTE v373[32];
  _BYTE v374[32];
  _BYTE v375[32];
  _BYTE v376[32];
  _BYTE v377[32];
  _BYTE v378[32];
  _BYTE v379[32];
  _BYTE v380[32];
  _BYTE v381[32];
  _BYTE v382[32];
  _BYTE v383[32];
  _BYTE v384[32];
  _BYTE v385[32];
  _BYTE v386[32];
  __n128 v387;
  __int128 v388;
  _BYTE v389[32];
  _BYTE v390[32];
  _BYTE v391[32];
  __n128 v392;
  _BYTE v393[32];
  _BYTE v394[32];

BOOL sub_2233C3BE0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  float v11;
  float v12;
  float v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  __int128 *v17;
  float v18;
  float v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  float v31;
  float v32;
  __int128 v33;
  __int128 v34;
  float v35;
  float v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  float v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  float v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _BYTE v111[32];
  _BYTE v112[32];
  _BYTE v113[32];
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[32];
  _BYTE v118[32];
  _BYTE v119[32];
  _BYTE v120[32];
  _BYTE v121[32];
  _BYTE v122[32];
  __int128 v123;
  _BYTE v124[32];

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 16) < *(float *)(a1 + 64))
      {
        v97 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)v111 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)&v111[16] = *(_OWORD *)(a1 + 64);
        v69 = *(_OWORD *)a1;
        v83 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 80);
        v7 = *(_OWORD *)(a2 - 48);
        v6 = *(_OWORD *)(a2 - 32);
        v8 = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 - 20);
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a1 + 48) = v6;
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v111[12];
        *(_OWORD *)(a2 - 48) = v97;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v111;
        *(_OWORD *)(a2 - 80) = v69;
        *(_OWORD *)(a2 - 64) = v83;
      }
      return result;
    case 3uLL:
      v16 = (__int128 *)(a1 + 80);
      v17 = (__int128 *)(a2 - 80);
      v18 = *(float *)(a1 + 144);
      v19 = *(float *)(a2 - 16);
      if (v18 >= *(float *)(a1 + 64))
      {
        if (v19 < v18)
        {
          v106 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v120 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)&v120[16] = *(_OWORD *)(a1 + 144);
          v78 = *v16;
          v92 = *(_OWORD *)(a1 + 96);
          *v16 = *v17;
          v45 = *(_OWORD *)(a2 - 48);
          v44 = *(_OWORD *)(a2 - 32);
          v46 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 - 20);
          *(_OWORD *)(a1 + 112) = v45;
          *(_OWORD *)(a1 + 128) = v44;
          *(_OWORD *)(a1 + 96) = v46;
          *(_OWORD *)(a2 - 20) = *(_OWORD *)&v120[12];
          *(_OWORD *)(a2 - 48) = v106;
          *(_OWORD *)(a2 - 32) = *(_OWORD *)v120;
          *v17 = v78;
          *(_OWORD *)(a2 - 64) = v92;
          if (*(float *)(a1 + 144) < *(float *)(a1 + 64))
          {
            v107 = *(_OWORD *)(a1 + 32);
            *(_OWORD *)v121 = *(_OWORD *)(a1 + 48);
            *(_OWORD *)&v121[16] = *(_OWORD *)(a1 + 64);
            v79 = *(_OWORD *)a1;
            v93 = *(_OWORD *)(a1 + 16);
            v47 = *(_OWORD *)(a1 + 128);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
            *(_OWORD *)(a1 + 48) = v47;
            *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
            v48 = *(_OWORD *)(a1 + 96);
            *(_OWORD *)a1 = *v16;
            *(_OWORD *)(a1 + 16) = v48;
            *(_OWORD *)(a1 + 140) = *(_OWORD *)&v121[12];
            *(_OWORD *)(a1 + 112) = v107;
            *(_OWORD *)(a1 + 128) = *(_OWORD *)v121;
            *v16 = v79;
            *(_OWORD *)(a1 + 96) = v93;
          }
        }
      }
      else
      {
        if (v19 >= v18)
        {
          v110 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)v124 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v124[16] = *(_OWORD *)(a1 + 64);
          v82 = *(_OWORD *)a1;
          v96 = *(_OWORD *)(a1 + 16);
          v64 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
          *(_OWORD *)(a1 + 48) = v64;
          *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
          v65 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v16;
          *(_OWORD *)(a1 + 16) = v65;
          *(_OWORD *)(a1 + 140) = *(_OWORD *)&v124[12];
          *(_OWORD *)(a1 + 112) = v110;
          *(_OWORD *)(a1 + 128) = *(_OWORD *)v124;
          *v16 = v82;
          *(_OWORD *)(a1 + 96) = v96;
          if (*(float *)(a2 - 16) >= *(float *)(a1 + 144))
            return result;
          v99 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v113 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)&v113[16] = *(_OWORD *)(a1 + 144);
          v71 = *v16;
          v85 = *(_OWORD *)(a1 + 96);
          *v16 = *v17;
          v67 = *(_OWORD *)(a2 - 48);
          v66 = *(_OWORD *)(a2 - 32);
          v68 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 - 20);
          *(_OWORD *)(a1 + 112) = v67;
          *(_OWORD *)(a1 + 128) = v66;
          *(_OWORD *)(a1 + 96) = v68;
        }
        else
        {
          v99 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)v113 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v113[16] = *(_OWORD *)(a1 + 64);
          v71 = *(_OWORD *)a1;
          v85 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)a1 = *v17;
          v21 = *(_OWORD *)(a2 - 48);
          v20 = *(_OWORD *)(a2 - 32);
          v22 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 - 20);
          *(_OWORD *)(a1 + 32) = v21;
          *(_OWORD *)(a1 + 48) = v20;
          *(_OWORD *)(a1 + 16) = v22;
        }
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v113[12];
        *(_OWORD *)(a2 - 48) = v99;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v113;
        *v17 = v71;
        *(_OWORD *)(a2 - 64) = v85;
      }
      return result;
    case 4uLL:
      sub_2233BDF54((_OWORD *)a1, a1 + 80, a1 + 160, a2 - 80);
      return 1;
    case 5uLL:
      v23 = (__int128 *)(a1 + 80);
      v24 = (__int128 *)(a1 + 160);
      v25 = (__int128 *)(a1 + 240);
      sub_2233BDF54((_OWORD *)a1, a1 + 80, a1 + 160, a1 + 240);
      if (*(float *)(a2 - 16) >= *(float *)(a1 + 304))
        return 1;
      v100 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)v114 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)&v114[16] = *(_OWORD *)(a1 + 304);
      v72 = *v25;
      v86 = *(_OWORD *)(a1 + 256);
      *v25 = *(_OWORD *)(a2 - 80);
      v27 = *(_OWORD *)(a2 - 48);
      v26 = *(_OWORD *)(a2 - 32);
      v28 = *(_OWORD *)(a2 - 64);
      *(_OWORD *)(a1 + 300) = *(_OWORD *)(a2 - 20);
      *(_OWORD *)(a1 + 272) = v27;
      *(_OWORD *)(a1 + 288) = v26;
      *(_OWORD *)(a1 + 256) = v28;
      *(_OWORD *)(a2 - 20) = *(_OWORD *)&v114[12];
      *(_OWORD *)(a2 - 48) = v100;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v114;
      *(_OWORD *)(a2 - 80) = v72;
      *(_OWORD *)(a2 - 64) = v86;
      if (*(float *)(a1 + 304) >= *(float *)(a1 + 224))
        return 1;
      v101 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)v115 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)&v115[16] = *(_OWORD *)(a1 + 224);
      v73 = *v24;
      v87 = *(_OWORD *)(a1 + 176);
      v29 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 208) = v29;
      *(_OWORD *)(a1 + 220) = *(_OWORD *)(a1 + 300);
      v30 = *(_OWORD *)(a1 + 256);
      *v24 = *v25;
      *(_OWORD *)(a1 + 176) = v30;
      *(_OWORD *)(a1 + 300) = *(_OWORD *)&v115[12];
      *(_OWORD *)(a1 + 272) = v101;
      *(_OWORD *)(a1 + 288) = *(_OWORD *)v115;
      v31 = *(float *)(a1 + 224);
      v32 = *(float *)(a1 + 144);
      *v25 = v73;
      *(_OWORD *)(a1 + 256) = v87;
      if (v31 >= v32)
        return 1;
      v102 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)v116 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)&v116[16] = *(_OWORD *)(a1 + 144);
      v74 = *v23;
      v88 = *(_OWORD *)(a1 + 96);
      v33 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 128) = v33;
      *(_OWORD *)(a1 + 140) = *(_OWORD *)(a1 + 220);
      v34 = *(_OWORD *)(a1 + 176);
      *v23 = *v24;
      *(_OWORD *)(a1 + 96) = v34;
      *(_OWORD *)(a1 + 220) = *(_OWORD *)&v116[12];
      *(_OWORD *)(a1 + 192) = v102;
      *(_OWORD *)(a1 + 208) = *(_OWORD *)v116;
      v35 = *(float *)(a1 + 144);
      v36 = *(float *)(a1 + 64);
      *v24 = v74;
      *(_OWORD *)(a1 + 176) = v88;
      if (v35 >= v36)
        return 1;
      v103 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)v117 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)&v117[16] = *(_OWORD *)(a1 + 64);
      v75 = *(_OWORD *)a1;
      v89 = *(_OWORD *)(a1 + 16);
      v37 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 48) = v37;
      *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
      v38 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)a1 = *v23;
      *(_OWORD *)(a1 + 16) = v38;
      *(_OWORD *)(a1 + 140) = *(_OWORD *)&v117[12];
      *(_OWORD *)(a1 + 112) = v103;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)v117;
      result = 1;
      *v23 = v75;
      *(_OWORD *)(a1 + 96) = v89;
      return result;
    default:
      v9 = a1 + 160;
      v10 = (__int128 *)(a1 + 80);
      v11 = *(float *)(a1 + 144);
      v12 = *(float *)(a1 + 64);
      v13 = *(float *)(a1 + 224);
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          v104 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v118 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)&v118[16] = *(_OWORD *)(a1 + 144);
          v76 = *v10;
          v90 = *(_OWORD *)(a1 + 96);
          v39 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(a1 + 128) = v39;
          *(_OWORD *)(a1 + 140) = *(_OWORD *)(a1 + 220);
          v40 = *(_OWORD *)(a1 + 176);
          *v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 96) = v40;
          *(_OWORD *)(a1 + 220) = *(_OWORD *)&v118[12];
          *(_OWORD *)(a1 + 192) = v104;
          *(_OWORD *)(a1 + 208) = *(_OWORD *)v118;
          v41 = *(float *)(a1 + 144);
          *(_OWORD *)v9 = v76;
          *(_OWORD *)(a1 + 176) = v90;
          if (v41 < v12)
          {
            v105 = *(_OWORD *)(a1 + 32);
            *(_OWORD *)v119 = *(_OWORD *)(a1 + 48);
            *(_OWORD *)&v119[16] = *(_OWORD *)(a1 + 64);
            v77 = *(_OWORD *)a1;
            v91 = *(_OWORD *)(a1 + 16);
            v42 = *(_OWORD *)(a1 + 128);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
            *(_OWORD *)(a1 + 48) = v42;
            *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
            v43 = *(_OWORD *)(a1 + 96);
            *(_OWORD *)a1 = *v10;
            *(_OWORD *)(a1 + 16) = v43;
            *(_OWORD *)(a1 + 140) = *(_OWORD *)&v119[12];
            *(_OWORD *)(a1 + 112) = v105;
            *(_OWORD *)(a1 + 128) = *(_OWORD *)v119;
            *v10 = v77;
            *(_OWORD *)(a1 + 96) = v91;
          }
        }
      }
      else
      {
        if (v13 >= v11)
        {
          v108 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)v122 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v122[16] = *(_OWORD *)(a1 + 64);
          v80 = *(_OWORD *)a1;
          v94 = *(_OWORD *)(a1 + 16);
          v49 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
          *(_OWORD *)(a1 + 48) = v49;
          *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
          v50 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v10;
          *(_OWORD *)(a1 + 16) = v50;
          *(_OWORD *)(a1 + 140) = *(_OWORD *)&v122[12];
          *(_OWORD *)(a1 + 112) = v108;
          *(_OWORD *)(a1 + 128) = *(_OWORD *)v122;
          v51 = *(float *)(a1 + 144);
          *v10 = v80;
          *(_OWORD *)(a1 + 96) = v94;
          if (v13 >= v51)
            goto LABEL_25;
          v98 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v112 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)&v112[16] = *(_OWORD *)(a1 + 144);
          v70 = *v10;
          v84 = *(_OWORD *)(a1 + 96);
          v52 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(a1 + 128) = v52;
          *(_OWORD *)(a1 + 140) = *(_OWORD *)(a1 + 220);
          v53 = *(_OWORD *)(a1 + 176);
          *v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 96) = v53;
        }
        else
        {
          v98 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)v112 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v112[16] = *(_OWORD *)(a1 + 64);
          v70 = *(_OWORD *)a1;
          v84 = *(_OWORD *)(a1 + 16);
          v14 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(a1 + 48) = v14;
          *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 220);
          v15 = *(_OWORD *)(a1 + 176);
          *(_OWORD *)a1 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 16) = v15;
        }
        *(_OWORD *)(a1 + 220) = *(_OWORD *)&v112[12];
        *(_OWORD *)(a1 + 192) = v98;
        *(_OWORD *)(a1 + 208) = *(_OWORD *)v112;
        *(_OWORD *)v9 = v70;
        *(_OWORD *)(a1 + 176) = v84;
      }
LABEL_25:
      v54 = a1 + 240;
      if (a1 + 240 == a2)
        return 1;
      v55 = 0;
      v56 = 0;
      break;
  }
  while (1)
  {
    v58 = *(float *)(v54 + 64);
    if (v58 < *(float *)(v9 + 64))
    {
      v81 = *(_OWORD *)v54;
      v95 = *(_OWORD *)(v54 + 16);
      v109 = *(_OWORD *)(v54 + 32);
      v123 = *(_OWORD *)(v54 + 48);
      v59 = *(_QWORD *)(v54 + 68);
      v60 = v55;
      do
      {
        v61 = a1 + v60;
        v62 = *(_OWORD *)(a1 + v60 + 208);
        *(_OWORD *)(v61 + 272) = *(_OWORD *)(a1 + v60 + 192);
        *(_OWORD *)(v61 + 288) = v62;
        *(_OWORD *)(a1 + v60 + 300) = *(_OWORD *)(a1 + v60 + 220);
        v63 = *(_OWORD *)(a1 + v60 + 176);
        *(_OWORD *)(v61 + 240) = *(_OWORD *)(a1 + v60 + 160);
        *(_OWORD *)(v61 + 256) = v63;
        if (v60 == -160)
        {
          v57 = a1;
          goto LABEL_28;
        }
        v60 -= 80;
      }
      while (v58 < *(float *)(v61 + 144));
      v57 = a1 + v60 + 240;
LABEL_28:
      *(_OWORD *)v57 = v81;
      *(_OWORD *)(v57 + 16) = v95;
      *(_OWORD *)(v57 + 32) = v109;
      *(_OWORD *)(v57 + 48) = v123;
      *(float *)(v57 + 64) = v58;
      *(_QWORD *)(v57 + 68) = v59;
      if (++v56 == 8)
        return v54 + 80 == a2;
    }
    v9 = v54;
    v55 += 80;
    v54 += 80;
    if (v54 == a2)
      return 1;
  }
}

__n128 sub_2233C42BC(uint64_t a1, __n128 *a2, uint64_t (**a3)(__n128 *, __n128 *), uint64_t a4, char a5)
{
  __n128 *v9;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 *v14;
  uint64_t (*v15)(__n128 *, __n128 *);
  char v16;
  int v17;
  __n128 v18;
  __n128 v19;
  __int128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  char v24;
  int v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __int128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __int128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __int128 v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __int128 v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  __n128 v85;
  __n128 *v86;
  __n128 *v87;
  char v88;
  int v89;
  __int128 v90;
  __n128 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  __int128 v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  __n128 v106;
  __int128 v107;
  __n128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __n128 v112;
  __n128 v113;
  __int128 v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  __n128 v119;
  __n128 v120;
  __int128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __int128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __int128 v133;
  __n128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __n128 v138;
  __n128 v139;
  __int128 v140;
  __n128 v141;
  __n128 v142;
  __int128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;
  __n128 *v150;
  __n128 *v151;
  char v152;
  int v153;
  __int128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __int128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __int128 v179;
  __n128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  __n128 v186;
  __n128 v187;
  __n128 v188;
  __n128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  __n128 v194;
  __n128 v195;
  char v196;
  int v197;
  __n128 v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  __n128 v202;
  __n128 v203;
  __n128 v204;
  __n128 v205;
  __n128 v206;
  __n128 v207;
  __n128 v208;
  __n128 v209;
  __n128 v210;
  __n128 v211;
  __n128 v212;
  __n128 v213;
  __n128 v214;
  __n128 v215;
  __n128 v216;
  __n128 v217;
  __n128 v218;
  __n128 v219;
  __n128 v220;
  __n128 v221;
  __n128 v222;
  __n128 v223;
  __n128 v224;
  __n128 v225;
  __n128 v226;
  __n128 v227;
  __n128 v228;
  __n128 v229;
  __n128 v230;
  __n128 v231;
  __n128 v232;
  __n128 v233;
  __n128 v234;
  __n128 v235;
  __n128 v236;
  __int128 v237;
  __n128 v238;
  __n128 v239;
  __n128 v240;
  __n128 v241;
  __n128 v242;
  __n128 v243;
  uint64_t v244;
  uint64_t v245;
  __n128 v246;
  __n128 v247;
  __int128 v248;
  __n128 *v249;
  __n128 *v250;
  __n128 *v251;
  __n128 *v252;
  __n128 v253;
  __n128 v254;
  __n128 v255;
  __n128 v256;
  __n128 v257;
  __n128 v258;
  __n128 v259;
  __n128 v260;
  __n128 v261;
  __n128 *v262;
  __n128 v263;
  __n128 v264;
  __n128 v265;
  __n128 v266;
  __n128 v267;
  __n128 v268;
  BOOL v269;
  __n128 result;
  __n128 v271;
  __n128 v272;
  __int128 v273;
  __n128 *v274;
  int v275;
  __n128 *v276;
  __n128 v277;
  __n128 v278;
  __n128 v279;
  __n128 v280;
  __n128 v281;
  __n128 v282;
  __n128 v283;
  __n128 v284;
  __n128 v285;
  __n128 *v286;
  __n128 v287;
  __n128 v288;
  __n128 v289;
  __n128 v290;
  __n128 v291;
  __n128 *v292;
  char v293;
  int v294;
  __n128 v295;
  __n128 v296;
  __int128 v297;
  __n128 v298;
  __n128 v299;
  __n128 v300;
  __n128 v301;
  __n128 v302;
  __n128 *v303;
  __n128 *v304;
  __n128 v305;
  __int128 v306;
  __n128 v307;
  __n128 v308;
  __n128 v309;
  __n128 v310;
  __n128 v311;
  __n128 v312;
  __n128 v313;
  __int128 v314;
  __n128 v315;
  __int128 v316;
  __int128 v317;
  __n128 v318;
  __n128 v319;
  __int128 v320;
  __int128 v321;
  __n128 v322;
  __int128 v323;
  __int128 v324;
  __n128 v325;
  __n128 v326;
  __int128 v327;
  __n128 *v328;
  BOOL v329;
  char v330;
  uint64_t v331;
  __n128 *v332;
  uint64_t v333;
  __n128 v334;
  __int128 v335;
  __n128 *v336;
  __n128 v337;
  __n128 v338;
  __n128 v339;
  uint64_t v340;
  _OWORD *v341;
  __int128 v342;
  __int128 v343;
  int64_t v344;
  __n128 v345;
  __n128 v346;
  __n128 v347;
  BOOL v348;
  uint64_t v349;
  _OWORD *v350;
  __n128 *v351;
  __n128 v352;
  __n128 v353;
  __n128 v354;
  __n128 *v355;
  __n128 v356;
  __n128 v357;
  __n128 v358;
  uint64_t v359;
  uint64_t v360;
  int64_t v361;
  __n128 *v362;
  __n128 v363;
  __n128 v364;
  uint64_t v365;
  __n128 v366;
  __n128 v367;
  __int128 v368;
  _OWORD *v369;
  __n128 v370;
  __n128 v371;
  __n128 v372;
  __n128 *v373;
  uint64_t v374;
  uint64_t v375;
  __n128 v376;
  __n128 v377;
  __n128 v378;
  __n128 v379;
  __n128 v380;
  __n128 v381;
  uint64_t v382;
  unint64_t v383;
  _OWORD *v384;
  __n128 v385;
  __n128 v386;
  __n128 v387;
  __n128 *v388;
  __n128 v389;
  __n128 v390;
  __n128 v391;
  __n128 v392;
  __n128 v393;
  __int128 v394;
  __n128 v395;
  __n128 v396;
  __n128 v397;
  __n128 v398;
  __n128 v399;
  __n128 v400;
  __n128 v401;
  __n128 v402;
  __n128 v403;
  __int128 v404;
  __n128 v405;
  __n128 v406;
  __n128 v407;
  __n128 v408;
  _OWORD *v409;
  __n128 *v410;
  __n128 v411;
  __n128 v412;
  __int128 v413;
  _OWORD *v414;
  __int128 v415;
  __int128 v416;
  char v417;
  __n128 v418;
  __int128 v419;
  __n128 v420;
  __n128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __n128 v425;
  __n128 v426;
  __int128 v427;
  __int128 v428;
  __n128 v429;
  __n128 v430;
  __n128 v431;
  __n128 v432;
  __n128 v433;
  __n128 v434;
  __n128 *v435;
  __n128 *v436;
  __n128 *v437;
  __n128 *v438;
  int64_t v440;
  __n128 v441;
  __n128 v442;
  __n128 v443;
  _BYTE v444[32];
  __n128 v445;
  __n128 v446;
  __n128 v447;
  _BYTE v448[32];
  uint64_t v449;

  v449 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v9 = a2 - 5;
  v435 = a2 - 15;
  v436 = a2 - 10;
  v10 = (__n128 *)a1;
  v437 = a2;
  while (2)
  {
    a1 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xCCCCCCCCCCCCCCCDLL * (v11 >> 4);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if ((*a3)(v9, (__n128 *)a1))
          goto LABEL_102;
        return result;
      case 3:
        v292 = (__n128 *)(a1 + 80);
        v293 = (*a3)((__n128 *)(a1 + 80), (__n128 *)a1);
        v294 = (*a3)(v9, (__n128 *)(a1 + 80));
        if ((v293 & 1) != 0)
        {
          if (v294)
          {
LABEL_102:
            v445 = *(__n128 *)a1;
            v295 = *(__n128 *)(a1 + 16);
            v296 = *(__n128 *)(a1 + 32);
            v297 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)v448 = *(_OWORD *)(a1 + 48);
            *(_OWORD *)&v448[16] = v297;
            v446 = v295;
            v447 = v296;
            v299 = v9[2];
            v298 = v9[3];
            v300 = v9[1];
            *(__n128 *)(a1 + 60) = *(__n128 *)((char *)v9 + 60);
            *(__n128 *)(a1 + 32) = v299;
            *(__n128 *)(a1 + 48) = v298;
            *(__n128 *)(a1 + 16) = v300;
            *(__n128 *)a1 = *v9;
            v301 = v447;
            result = *(__n128 *)v448;
            v302 = v446;
            *(__n128 *)((char *)v9 + 60) = *(__n128 *)&v448[12];
            v9[2] = v301;
            v9[3] = result;
            v9[1] = v302;
            result.n128_u64[0] = v445.n128_u64[0];
            *v9 = v445;
          }
          else
          {
            v445 = *(__n128 *)a1;
            v420 = *(__n128 *)(a1 + 16);
            v421 = *(__n128 *)(a1 + 32);
            v422 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)v448 = *(_OWORD *)(a1 + 48);
            *(_OWORD *)&v448[16] = v422;
            v446 = v420;
            v447 = v421;
            *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
            v423 = *(_OWORD *)(a1 + 128);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
            *(_OWORD *)(a1 + 48) = v423;
            v424 = *(_OWORD *)(a1 + 96);
            *(__n128 *)a1 = *v292;
            *(_OWORD *)(a1 + 16) = v424;
            v425 = v445;
            v426 = v446;
            *(_OWORD *)(a1 + 140) = *(_OWORD *)&v448[12];
            v427 = *(_OWORD *)v448;
            *(__n128 *)(a1 + 112) = v447;
            *(_OWORD *)(a1 + 128) = v427;
            *v292 = v425;
            *(__n128 *)(a1 + 96) = v426;
            if ((*a3)(v9, (__n128 *)(a1 + 80)))
            {
              v428 = *(_OWORD *)(a1 + 128);
              v447 = *(__n128 *)(a1 + 112);
              *(_OWORD *)v448 = v428;
              *(_OWORD *)&v448[16] = *(_OWORD *)(a1 + 144);
              v429 = *(__n128 *)(a1 + 96);
              v445 = *v292;
              v446 = v429;
              v431 = v9[2];
              v430 = v9[3];
              v432 = v9[1];
              *(__n128 *)(a1 + 140) = *(__n128 *)((char *)v9 + 60);
              *(__n128 *)(a1 + 112) = v431;
              *(__n128 *)(a1 + 128) = v430;
              *(__n128 *)(a1 + 96) = v432;
              *v292 = *v9;
              *v9 = v445;
              result = v446;
              v433 = v447;
              v434 = *(__n128 *)v448;
              *(__n128 *)((char *)v9 + 60) = *(__n128 *)&v448[12];
              v9[2] = v433;
              v9[3] = v434;
              v9[1] = result;
            }
          }
        }
        else if (v294)
        {
          v394 = *(_OWORD *)(a1 + 128);
          v447 = *(__n128 *)(a1 + 112);
          *(_OWORD *)v448 = v394;
          *(_OWORD *)&v448[16] = *(_OWORD *)(a1 + 144);
          v395 = *(__n128 *)(a1 + 96);
          v445 = *v292;
          v446 = v395;
          v397 = v9[2];
          v396 = v9[3];
          v398 = v9[1];
          *(__n128 *)(a1 + 140) = *(__n128 *)((char *)v9 + 60);
          *(__n128 *)(a1 + 112) = v397;
          *(__n128 *)(a1 + 128) = v396;
          *(__n128 *)(a1 + 96) = v398;
          *v292 = *v9;
          *v9 = v445;
          v399 = v446;
          v400 = v447;
          v401 = *(__n128 *)v448;
          *(__n128 *)((char *)v9 + 60) = *(__n128 *)&v448[12];
          v9[2] = v400;
          v9[3] = v401;
          v9[1] = v399;
          goto LABEL_159;
        }
        return result;
      case 4:
        result.n128_u64[0] = sub_2233C619C((__n128 *)a1, (__n128 *)(a1 + 80), (__n128 *)(a1 + 160), v9, a3).n128_u64[0];
        return result;
      case 5:
        v292 = (__n128 *)(a1 + 80);
        v303 = (__n128 *)(a1 + 160);
        v304 = (__n128 *)(a1 + 240);
        v305 = sub_2233C619C((__n128 *)a1, (__n128 *)(a1 + 80), (__n128 *)(a1 + 160), (__n128 *)(a1 + 240), a3);
        if (((unsigned int (*)(__n128 *, uint64_t, __n128))*a3)(v9, a1 + 240, v305))
        {
          v306 = *(_OWORD *)(a1 + 288);
          v447 = *(__n128 *)(a1 + 272);
          *(_OWORD *)v448 = v306;
          *(_OWORD *)&v448[16] = *(_OWORD *)(a1 + 304);
          v307 = *(__n128 *)(a1 + 256);
          v445 = *v304;
          v446 = v307;
          v309 = v9[2];
          v308 = v9[3];
          v310 = v9[1];
          *(__n128 *)(a1 + 300) = *(__n128 *)((char *)v9 + 60);
          *(__n128 *)(a1 + 272) = v309;
          *(__n128 *)(a1 + 288) = v308;
          *(__n128 *)(a1 + 256) = v310;
          *v304 = *v9;
          *v9 = v445;
          v311 = v446;
          v312 = v447;
          v313 = *(__n128 *)v448;
          *(__n128 *)((char *)v9 + 60) = *(__n128 *)&v448[12];
          v9[2] = v312;
          v9[3] = v313;
          v9[1] = v311;
          if ((*a3)((__n128 *)(a1 + 240), (__n128 *)(a1 + 160)))
          {
            v314 = *(_OWORD *)(a1 + 208);
            v447 = *(__n128 *)(a1 + 192);
            *(_OWORD *)v448 = v314;
            *(_OWORD *)&v448[16] = *(_OWORD *)(a1 + 224);
            v315 = *(__n128 *)(a1 + 176);
            v445 = *v303;
            v446 = v315;
            v316 = *(_OWORD *)(a1 + 288);
            *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 272);
            *(_OWORD *)(a1 + 208) = v316;
            *(_OWORD *)(a1 + 220) = *(_OWORD *)(a1 + 300);
            v317 = *(_OWORD *)(a1 + 256);
            *v303 = *v304;
            *(_OWORD *)(a1 + 176) = v317;
            v318 = v445;
            v319 = v446;
            *(_OWORD *)(a1 + 300) = *(_OWORD *)&v448[12];
            v320 = *(_OWORD *)v448;
            *(__n128 *)(a1 + 272) = v447;
            *(_OWORD *)(a1 + 288) = v320;
            *v304 = v318;
            *(__n128 *)(a1 + 256) = v319;
            if ((*a3)((__n128 *)(a1 + 160), (__n128 *)(a1 + 80)))
            {
              v321 = *(_OWORD *)(a1 + 128);
              v447 = *(__n128 *)(a1 + 112);
              *(_OWORD *)v448 = v321;
              *(_OWORD *)&v448[16] = *(_OWORD *)(a1 + 144);
              v322 = *(__n128 *)(a1 + 96);
              v445 = *v292;
              v446 = v322;
              v323 = *(_OWORD *)(a1 + 208);
              *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
              *(_OWORD *)(a1 + 128) = v323;
              *(_OWORD *)(a1 + 140) = *(_OWORD *)(a1 + 220);
              v324 = *(_OWORD *)(a1 + 176);
              *v292 = *v303;
              *(_OWORD *)(a1 + 96) = v324;
              v325 = v445;
              v326 = v446;
              *(_OWORD *)(a1 + 220) = *(_OWORD *)&v448[12];
              v327 = *(_OWORD *)v448;
              *(__n128 *)(a1 + 192) = v447;
              *(_OWORD *)(a1 + 208) = v327;
              *v303 = v325;
              *(__n128 *)(a1 + 176) = v326;
LABEL_159:
              if ((*a3)(v292, (__n128 *)a1))
              {
                v445 = *(__n128 *)a1;
                v402 = *(__n128 *)(a1 + 16);
                v403 = *(__n128 *)(a1 + 32);
                v404 = *(_OWORD *)(a1 + 64);
                *(_OWORD *)v448 = *(_OWORD *)(a1 + 48);
                *(_OWORD *)&v448[16] = v404;
                v446 = v402;
                v447 = v403;
                *(__n128 *)(a1 + 60) = *(__n128 *)((char *)v292 + 60);
                v405 = v292[3];
                *(__n128 *)(a1 + 32) = v292[2];
                *(__n128 *)(a1 + 48) = v405;
                v406 = v292[1];
                *(__n128 *)a1 = *v292;
                *(__n128 *)(a1 + 16) = v406;
                result = v445;
                v407 = v446;
                *(__n128 *)((char *)v292 + 60) = *(__n128 *)&v448[12];
                v408 = *(__n128 *)v448;
                v292[2] = v447;
                v292[3] = v408;
                *v292 = result;
                v292[1] = v407;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 1919)
        {
          if (!a4)
          {
            if ((__n128 *)a1 != a2)
            {
              v344 = (unint64_t)(v12 - 2) >> 1;
              v440 = v344;
              do
              {
                if (v440 >= v344)
                {
                  v349 = (2 * v344) | 1;
                  v350 = (_OWORD *)(a1 + 80 * v349);
                  if (2 * v344 + 2 < v12 && (*a3)((__n128 *)(a1 + 80 * v349), (__n128 *)v350 + 5))
                  {
                    v350 += 5;
                    v349 = 2 * v344 + 2;
                  }
                  v351 = (__n128 *)(a1 + 80 * v344);
                  if (((*a3)((__n128 *)v350, v351) & 1) == 0)
                  {
                    v445 = *v351;
                    v352 = v351[1];
                    v353 = v351[2];
                    v354 = v351[4];
                    *(__n128 *)v448 = v351[3];
                    *(__n128 *)&v448[16] = v354;
                    v446 = v352;
                    v447 = v353;
                    do
                    {
                      v355 = (__n128 *)v350;
                      *v351 = *(__n128 *)v350;
                      v356 = *((__n128 *)v350 + 1);
                      v357 = *((__n128 *)v350 + 2);
                      v358 = *((__n128 *)v350 + 3);
                      *(__n128 *)((char *)v351 + 60) = *(__n128 *)((char *)v350 + 60);
                      v351[2] = v357;
                      v351[3] = v358;
                      v351[1] = v356;
                      if (v440 < v349)
                        break;
                      v359 = (2 * v349) | 1;
                      v350 = (_OWORD *)(a1 + 80 * v359);
                      v360 = 2 * v349 + 2;
                      if (v360 < v12 && (*a3)((__n128 *)(a1 + 80 * v359), (__n128 *)v350 + 5))
                      {
                        v350 += 5;
                        v359 = v360;
                      }
                      v351 = v355;
                      v349 = v359;
                    }
                    while (!(*a3)((__n128 *)v350, &v445));
                    *v355 = v445;
                    v345 = v446;
                    v346 = v447;
                    v347 = *(__n128 *)v448;
                    *(__n128 *)((char *)v355 + 60) = *(__n128 *)&v448[12];
                    v355[2] = v346;
                    v355[3] = v347;
                    v355[1] = v345;
                  }
                }
                v348 = v344-- <= 0;
              }
              while (!v348);
              v361 = v11 / 0x50uLL;
              v362 = v437;
              do
              {
                v438 = v362;
                v365 = 0;
                v441 = *(__n128 *)a1;
                v366 = *(__n128 *)(a1 + 16);
                v367 = *(__n128 *)(a1 + 32);
                v368 = *(_OWORD *)(a1 + 64);
                *(_OWORD *)v444 = *(_OWORD *)(a1 + 48);
                *(_OWORD *)&v444[16] = v368;
                v442 = v366;
                v443 = v367;
                v369 = (_OWORD *)a1;
                do
                {
                  v373 = (__n128 *)&v369[5 * v365 + 5];
                  v374 = (2 * v365) | 1;
                  v375 = 2 * v365 + 2;
                  if (v375 < v361 && (*a3)((__n128 *)&v369[5 * v365 + 5], (__n128 *)&v369[5 * v365 + 10]))
                  {
                    v373 += 5;
                    v374 = v375;
                  }
                  *v369 = *v373;
                  v370 = v373[1];
                  v371 = v373[2];
                  v372 = v373[3];
                  *(__n128 *)((char *)v369 + 60) = *(__n128 *)((char *)&v373[3] + 12);
                  v369[2] = v371;
                  v369[3] = v372;
                  v369[1] = v370;
                  v369 = v373;
                  v365 = v374;
                }
                while (v374 <= (uint64_t)((unint64_t)(v361 - 2) >> 1));
                v362 = v438 - 5;
                if (v373 == &v438[-5])
                {
                  *v373 = v441;
                  result = v442;
                  v363 = v443;
                  v364 = *(__n128 *)v444;
                  *(__n128 *)((char *)v373 + 60) = *(__n128 *)&v444[12];
                  v373[2] = v363;
                  v373[3] = v364;
                  v373[1] = result;
                }
                else
                {
                  *v373 = *v362;
                  v376 = v438[-4];
                  v377 = v438[-3];
                  v378 = v438[-2];
                  *(__n128 *)((char *)v373 + 60) = *(__n128 *)((char *)v438 - 20);
                  v373[2] = v377;
                  v373[3] = v378;
                  v373[1] = v376;
                  v380 = v443;
                  v379 = *(__n128 *)v444;
                  v381 = v442;
                  *(__n128 *)((char *)v438 - 20) = *(__n128 *)&v444[12];
                  v438[-3] = v380;
                  v438[-2] = v379;
                  v438[-4] = v381;
                  result = v441;
                  *v362 = v441;
                  v382 = (uint64_t)&v373[5] - a1;
                  if (v382 >= 81)
                  {
                    v383 = (v382 / 0x50uLL - 2) >> 1;
                    v384 = (_OWORD *)(a1 + 80 * v383);
                    if ((*a3)((__n128 *)v384, v373))
                    {
                      v445 = *v373;
                      v385 = v373[1];
                      v386 = v373[2];
                      v387 = v373[4];
                      *(__n128 *)v448 = v373[3];
                      *(__n128 *)&v448[16] = v387;
                      v446 = v385;
                      v447 = v386;
                      do
                      {
                        v388 = (__n128 *)v384;
                        *v373 = *(__n128 *)v384;
                        v389 = *((__n128 *)v384 + 1);
                        v390 = *((__n128 *)v384 + 2);
                        v391 = *((__n128 *)v384 + 3);
                        *(__n128 *)((char *)v373 + 60) = *(__n128 *)((char *)v384 + 60);
                        v373[2] = v390;
                        v373[3] = v391;
                        v373[1] = v389;
                        if (!v383)
                          break;
                        v383 = (v383 - 1) >> 1;
                        v384 = (_OWORD *)(a1 + 80 * v383);
                        v373 = v388;
                      }
                      while (((*a3)((__n128 *)v384, &v445) & 1) != 0);
                      *v388 = v445;
                      result = v446;
                      v392 = v447;
                      v393 = *(__n128 *)v448;
                      *(__n128 *)((char *)v388 + 60) = *(__n128 *)&v448[12];
                      v388[2] = v392;
                      v388[3] = v393;
                      v388[1] = result;
                    }
                  }
                }
                v348 = v361-- <= 2;
              }
              while (!v348);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = (__n128 *)(a1 + 80 * v13);
          v15 = *a3;
          if ((unint64_t)v11 < 0x2801)
          {
            v24 = v15((__n128 *)a1, (__n128 *)(a1 + 80 * v13));
            v25 = (*a3)(v9, (__n128 *)a1);
            if ((v24 & 1) == 0)
            {
              if (v25)
              {
                v445 = *(__n128 *)a1;
                v50 = *(__n128 *)(a1 + 16);
                v51 = *(__n128 *)(a1 + 32);
                v52 = *(_OWORD *)(a1 + 64);
                *(_OWORD *)v448 = *(_OWORD *)(a1 + 48);
                *(_OWORD *)&v448[16] = v52;
                v446 = v50;
                v447 = v51;
                v54 = v9[2];
                v53 = v9[3];
                v55 = v9[1];
                *(__n128 *)(a1 + 60) = *(__n128 *)((char *)v9 + 60);
                *(__n128 *)(a1 + 32) = v54;
                *(__n128 *)(a1 + 48) = v53;
                *(__n128 *)(a1 + 16) = v55;
                *(__n128 *)a1 = *v9;
                v57 = v447;
                v56 = *(__n128 *)v448;
                v58 = v446;
                *(__n128 *)((char *)v9 + 60) = *(__n128 *)&v448[12];
                v9[2] = v57;
                v9[3] = v56;
                v9[1] = v58;
                *v9 = v445;
                if ((*a3)((__n128 *)a1, (__n128 *)(a1 + 80 * v13)))
                {
                  v445 = *v14;
                  v59 = v14[1];
                  v60 = v14[2];
                  v61 = v14[4];
                  *(__n128 *)v448 = v14[3];
                  *(__n128 *)&v448[16] = v61;
                  v446 = v59;
                  v447 = v60;
                  v63 = *(__n128 *)(a1 + 32);
                  v62 = *(__n128 *)(a1 + 48);
                  v64 = *(__n128 *)(a1 + 16);
                  *(__n128 *)((char *)v14 + 60) = *(__n128 *)(a1 + 60);
                  v14[2] = v63;
                  v14[3] = v62;
                  v14[1] = v64;
                  *v14 = *(__n128 *)a1;
                  v66 = v447;
                  v65 = *(_OWORD *)v448;
                  v67 = v446;
                  *(_OWORD *)(a1 + 60) = *(_OWORD *)&v448[12];
                  *(__n128 *)(a1 + 32) = v66;
                  *(_OWORD *)(a1 + 48) = v65;
                  *(__n128 *)(a1 + 16) = v67;
                  *(__n128 *)a1 = v445;
                  --a4;
                  if ((a5 & 1) != 0)
                    goto LABEL_55;
                  goto LABEL_54;
                }
              }
              goto LABEL_32;
            }
            if (v25)
            {
              v445 = *v14;
              v26 = v14[1];
              v27 = v14[2];
              v28 = v14[4];
              *(__n128 *)v448 = v14[3];
              *(__n128 *)&v448[16] = v28;
              v446 = v26;
              v447 = v27;
              v30 = v9[2];
              v29 = v9[3];
              v31 = v9[1];
              *(__n128 *)((char *)v14 + 60) = *(__n128 *)((char *)v9 + 60);
              v14[2] = v30;
              v14[3] = v29;
              v14[1] = v31;
              *v14 = *v9;
            }
            else
            {
              v445 = *v14;
              v115 = v14[1];
              v116 = v14[2];
              v117 = v14[4];
              *(__n128 *)v448 = v14[3];
              *(__n128 *)&v448[16] = v117;
              v446 = v115;
              v447 = v116;
              v119 = *(__n128 *)(a1 + 32);
              v118 = *(__n128 *)(a1 + 48);
              v120 = *(__n128 *)(a1 + 16);
              *(__n128 *)((char *)v14 + 60) = *(__n128 *)(a1 + 60);
              v14[2] = v119;
              v14[3] = v118;
              v14[1] = v120;
              *v14 = *(__n128 *)a1;
              v122 = v447;
              v121 = *(_OWORD *)v448;
              v123 = v446;
              *(_OWORD *)(a1 + 60) = *(_OWORD *)&v448[12];
              *(__n128 *)(a1 + 32) = v122;
              *(_OWORD *)(a1 + 48) = v121;
              *(__n128 *)(a1 + 16) = v123;
              *(__n128 *)a1 = v445;
              if (!(*a3)(v9, (__n128 *)a1))
                goto LABEL_32;
              v445 = *(__n128 *)a1;
              v124 = *(__n128 *)(a1 + 16);
              v125 = *(__n128 *)(a1 + 32);
              v126 = *(_OWORD *)(a1 + 64);
              *(_OWORD *)v448 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)&v448[16] = v126;
              v446 = v124;
              v447 = v125;
              v128 = v9[2];
              v127 = v9[3];
              v129 = v9[1];
              *(__n128 *)(a1 + 60) = *(__n128 *)((char *)v9 + 60);
              *(__n128 *)(a1 + 32) = v128;
              *(__n128 *)(a1 + 48) = v127;
              *(__n128 *)(a1 + 16) = v129;
              *(__n128 *)a1 = *v9;
            }
            v131 = v447;
            v130 = *(__n128 *)v448;
            v132 = v446;
            *(__n128 *)((char *)v9 + 60) = *(__n128 *)&v448[12];
            v9[2] = v131;
            v9[3] = v130;
            v9[1] = v132;
            *v9 = v445;
LABEL_32:
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_55;
            goto LABEL_54;
          }
          v16 = v15((__n128 *)(a1 + 80 * v13), (__n128 *)a1);
          v17 = (*a3)(v9, (__n128 *)(a1 + 80 * v13));
          if ((v16 & 1) != 0)
          {
            if (v17)
            {
              v445 = *(__n128 *)a1;
              v18 = *(__n128 *)(a1 + 16);
              v19 = *(__n128 *)(a1 + 32);
              v20 = *(_OWORD *)(a1 + 64);
              *(_OWORD *)v448 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)&v448[16] = v20;
              v446 = v18;
              v447 = v19;
              v22 = v9[2];
              v21 = v9[3];
              v23 = v9[1];
              *(__n128 *)(a1 + 60) = *(__n128 *)((char *)v9 + 60);
              *(__n128 *)(a1 + 32) = v22;
              *(__n128 *)(a1 + 48) = v21;
              *(__n128 *)(a1 + 16) = v23;
              *(__n128 *)a1 = *v9;
            }
            else
            {
              v445 = *(__n128 *)a1;
              v68 = *(__n128 *)(a1 + 16);
              v69 = *(__n128 *)(a1 + 32);
              v70 = *(_OWORD *)(a1 + 64);
              *(_OWORD *)v448 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)&v448[16] = v70;
              v446 = v68;
              v447 = v69;
              v72 = v14[2];
              v71 = v14[3];
              v73 = v14[1];
              *(__n128 *)(a1 + 60) = *(__n128 *)((char *)v14 + 60);
              *(__n128 *)(a1 + 32) = v72;
              *(__n128 *)(a1 + 48) = v71;
              *(__n128 *)(a1 + 16) = v73;
              *(__n128 *)a1 = *v14;
              v75 = v447;
              v74 = *(__n128 *)v448;
              v76 = v446;
              *(__n128 *)((char *)v14 + 60) = *(__n128 *)&v448[12];
              v14[2] = v75;
              v14[3] = v74;
              v14[1] = v76;
              *v14 = v445;
              if (!(*a3)(v9, (__n128 *)(a1 + 80 * v13)))
                goto LABEL_23;
              v445 = *v14;
              v77 = v14[1];
              v78 = v14[2];
              v79 = v14[4];
              *(__n128 *)v448 = v14[3];
              *(__n128 *)&v448[16] = v79;
              v446 = v77;
              v447 = v78;
              v81 = v9[2];
              v80 = v9[3];
              v82 = v9[1];
              *(__n128 *)((char *)v14 + 60) = *(__n128 *)((char *)v9 + 60);
              v14[2] = v81;
              v14[3] = v80;
              v14[1] = v82;
              *v14 = *v9;
            }
            v84 = v447;
            v83 = *(__n128 *)v448;
            v85 = v446;
            *(__n128 *)((char *)v9 + 60) = *(__n128 *)&v448[12];
            v9[2] = v84;
            v9[3] = v83;
            v9[1] = v85;
            *v9 = v445;
          }
          else if (v17)
          {
            v445 = *v14;
            v32 = v14[1];
            v33 = v14[2];
            v34 = v14[4];
            *(__n128 *)v448 = v14[3];
            *(__n128 *)&v448[16] = v34;
            v446 = v32;
            v447 = v33;
            v36 = v9[2];
            v35 = v9[3];
            v37 = v9[1];
            *(__n128 *)((char *)v14 + 60) = *(__n128 *)((char *)v9 + 60);
            v14[2] = v36;
            v14[3] = v35;
            v14[1] = v37;
            *v14 = *v9;
            v39 = v447;
            v38 = *(__n128 *)v448;
            v40 = v446;
            *(__n128 *)((char *)v9 + 60) = *(__n128 *)&v448[12];
            v9[2] = v39;
            v9[3] = v38;
            v9[1] = v40;
            *v9 = v445;
            if ((*a3)((__n128 *)(a1 + 80 * v13), (__n128 *)a1))
            {
              v445 = *(__n128 *)a1;
              v41 = *(__n128 *)(a1 + 16);
              v42 = *(__n128 *)(a1 + 32);
              v43 = *(_OWORD *)(a1 + 64);
              *(_OWORD *)v448 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)&v448[16] = v43;
              v446 = v41;
              v447 = v42;
              v45 = v14[2];
              v44 = v14[3];
              v46 = v14[1];
              *(__n128 *)(a1 + 60) = *(__n128 *)((char *)v14 + 60);
              *(__n128 *)(a1 + 32) = v45;
              *(__n128 *)(a1 + 48) = v44;
              *(__n128 *)(a1 + 16) = v46;
              *(__n128 *)a1 = *v14;
              v48 = v447;
              v47 = *(__n128 *)v448;
              v49 = v446;
              *(__n128 *)((char *)v14 + 60) = *(__n128 *)&v448[12];
              v14[2] = v48;
              v14[3] = v47;
              v14[1] = v49;
              *v14 = v445;
            }
          }
LABEL_23:
          v86 = (__n128 *)(a1 + 80);
          v87 = (__n128 *)(a1 + 80 * v13 - 80);
          v88 = (*a3)(v87, (__n128 *)(a1 + 80));
          v89 = (*a3)(v436, v87);
          if ((v88 & 1) != 0)
          {
            if (v89)
            {
              v90 = *(_OWORD *)(a1 + 128);
              v447 = *(__n128 *)(a1 + 112);
              *(_OWORD *)v448 = v90;
              *(_OWORD *)&v448[16] = *(_OWORD *)(a1 + 144);
              v91 = *(__n128 *)(a1 + 96);
              v445 = *v86;
              v446 = v91;
              v93 = v436[2];
              v92 = v436[3];
              v94 = v436[1];
              *(__n128 *)(a1 + 140) = *(__n128 *)((char *)v436 + 60);
              *(__n128 *)(a1 + 112) = v93;
              *(__n128 *)(a1 + 128) = v92;
              *(__n128 *)(a1 + 96) = v94;
              *v86 = *v436;
              *v436 = v445;
              v95 = v446;
              v96 = v447;
              v97 = *(__n128 *)v448;
              *(__n128 *)((char *)v436 + 60) = *(__n128 *)&v448[12];
              v436[2] = v96;
              v436[3] = v97;
              v436[1] = v95;
            }
            else
            {
              v133 = *(_OWORD *)(a1 + 128);
              v447 = *(__n128 *)(a1 + 112);
              *(_OWORD *)v448 = v133;
              *(_OWORD *)&v448[16] = *(_OWORD *)(a1 + 144);
              v134 = *(__n128 *)(a1 + 96);
              v445 = *v86;
              v446 = v134;
              v136 = *(_OWORD *)(a1 + 80 * v13 - 48);
              v135 = *(_OWORD *)(a1 + 80 * v13 - 32);
              v137 = *(_OWORD *)(a1 + 80 * v13 - 64);
              *(_OWORD *)(a1 + 140) = *(_OWORD *)(a1 + 80 * v13 - 20);
              *(_OWORD *)(a1 + 112) = v136;
              *(_OWORD *)(a1 + 128) = v135;
              *(_OWORD *)(a1 + 96) = v137;
              *v86 = *v87;
              *v87 = v445;
              v138 = v446;
              v139 = v447;
              v140 = *(_OWORD *)v448;
              *(_OWORD *)(a1 + 80 * v13 - 20) = *(_OWORD *)&v448[12];
              *(__n128 *)(a1 + 80 * v13 - 48) = v139;
              *(_OWORD *)(a1 + 80 * v13 - 32) = v140;
              *(__n128 *)(a1 + 80 * v13 - 64) = v138;
              if ((*a3)(v436, (__n128 *)(a1 + 80 * v13 - 80)))
              {
                v445 = *v87;
                v141 = *(__n128 *)(a1 + 80 * v13 - 64);
                v142 = *(__n128 *)(a1 + 80 * v13 - 48);
                v143 = *(_OWORD *)(a1 + 80 * v13 - 16);
                *(_OWORD *)v448 = *(_OWORD *)(a1 + 80 * v13 - 32);
                *(_OWORD *)&v448[16] = v143;
                v446 = v141;
                v447 = v142;
                v145 = v436[2];
                v144 = v436[3];
                v146 = v436[1];
                *(__n128 *)(a1 + 80 * v13 - 20) = *(__n128 *)((char *)v436 + 60);
                *(__n128 *)(a1 + 80 * v13 - 48) = v145;
                *(__n128 *)(a1 + 80 * v13 - 32) = v144;
                *(__n128 *)(a1 + 80 * v13 - 64) = v146;
                *v87 = *v436;
                v148 = v447;
                v147 = *(__n128 *)v448;
                v149 = v446;
                *(__n128 *)((char *)v436 + 60) = *(__n128 *)&v448[12];
                v436[2] = v148;
                v436[3] = v147;
                v436[1] = v149;
                *v436 = v445;
              }
            }
          }
          else if (v89)
          {
            v445 = *v87;
            v98 = *(__n128 *)(a1 + 80 * v13 - 64);
            v99 = *(__n128 *)(a1 + 80 * v13 - 48);
            v100 = *(_OWORD *)(a1 + 80 * v13 - 16);
            *(_OWORD *)v448 = *(_OWORD *)(a1 + 80 * v13 - 32);
            *(_OWORD *)&v448[16] = v100;
            v446 = v98;
            v447 = v99;
            v102 = v436[2];
            v101 = v436[3];
            v103 = v436[1];
            *(__n128 *)(a1 + 80 * v13 - 20) = *(__n128 *)((char *)v436 + 60);
            *(__n128 *)(a1 + 80 * v13 - 48) = v102;
            *(__n128 *)(a1 + 80 * v13 - 32) = v101;
            *(__n128 *)(a1 + 80 * v13 - 64) = v103;
            *v87 = *v436;
            v105 = v447;
            v104 = *(__n128 *)v448;
            v106 = v446;
            *(__n128 *)((char *)v436 + 60) = *(__n128 *)&v448[12];
            v436[2] = v105;
            v436[3] = v104;
            v436[1] = v106;
            *v436 = v445;
            if ((*a3)((__n128 *)(a1 + 80 * v13 - 80), (__n128 *)(a1 + 80)))
            {
              v107 = *(_OWORD *)(a1 + 128);
              v447 = *(__n128 *)(a1 + 112);
              *(_OWORD *)v448 = v107;
              *(_OWORD *)&v448[16] = *(_OWORD *)(a1 + 144);
              v108 = *(__n128 *)(a1 + 96);
              v445 = *v86;
              v446 = v108;
              v110 = *(_OWORD *)(a1 + 80 * v13 - 48);
              v109 = *(_OWORD *)(a1 + 80 * v13 - 32);
              v111 = *(_OWORD *)(a1 + 80 * v13 - 64);
              *(_OWORD *)(a1 + 140) = *(_OWORD *)(a1 + 80 * v13 - 20);
              *(_OWORD *)(a1 + 112) = v110;
              *(_OWORD *)(a1 + 128) = v109;
              *(_OWORD *)(a1 + 96) = v111;
              *v86 = *v87;
              *v87 = v445;
              v112 = v446;
              v113 = v447;
              v114 = *(_OWORD *)v448;
              *(_OWORD *)(a1 + 80 * v13 - 20) = *(_OWORD *)&v448[12];
              *(__n128 *)(a1 + 80 * v13 - 48) = v113;
              *(_OWORD *)(a1 + 80 * v13 - 32) = v114;
              *(__n128 *)(a1 + 80 * v13 - 64) = v112;
            }
          }
          v150 = (__n128 *)(a1 + 160);
          v151 = (__n128 *)(a1 + 80 * v13 + 80);
          v152 = (*a3)(v151, (__n128 *)(a1 + 160));
          v153 = (*a3)(v435, v151);
          if ((v152 & 1) != 0)
          {
            if (v153)
            {
              v154 = *(_OWORD *)(a1 + 208);
              v447 = *(__n128 *)(a1 + 192);
              *(_OWORD *)v448 = v154;
              *(_OWORD *)&v448[16] = *(_OWORD *)(a1 + 224);
              v155 = *(__n128 *)(a1 + 176);
              v445 = *v150;
              v446 = v155;
              v157 = v435[2];
              v156 = v435[3];
              v158 = v435[1];
              *(__n128 *)(a1 + 220) = *(__n128 *)((char *)v435 + 60);
              *(__n128 *)(a1 + 192) = v157;
              *(__n128 *)(a1 + 208) = v156;
              *(__n128 *)(a1 + 176) = v158;
              *v150 = *v435;
              *v435 = v445;
              v159 = v446;
              v160 = v447;
              v161 = *(__n128 *)v448;
              *(__n128 *)((char *)v435 + 60) = *(__n128 *)&v448[12];
              v435[2] = v160;
              v435[3] = v161;
              v435[1] = v159;
            }
            else
            {
              v179 = *(_OWORD *)(a1 + 208);
              v447 = *(__n128 *)(a1 + 192);
              *(_OWORD *)v448 = v179;
              *(_OWORD *)&v448[16] = *(_OWORD *)(a1 + 224);
              v180 = *(__n128 *)(a1 + 176);
              v445 = *v150;
              v446 = v180;
              v182 = v151[2];
              v181 = v151[3];
              v183 = v151[1];
              *(__n128 *)(a1 + 220) = *(__n128 *)((char *)v151 + 60);
              *(__n128 *)(a1 + 192) = v182;
              *(__n128 *)(a1 + 208) = v181;
              *(__n128 *)(a1 + 176) = v183;
              *v150 = *v151;
              *v151 = v445;
              v184 = v446;
              v185 = v447;
              v186 = *(__n128 *)v448;
              *(__n128 *)((char *)v151 + 60) = *(__n128 *)&v448[12];
              v151[2] = v185;
              v151[3] = v186;
              v151[1] = v184;
              if ((*a3)(v435, v151))
              {
                v445 = *v151;
                v187 = v151[1];
                v188 = v151[2];
                v189 = v151[4];
                *(__n128 *)v448 = v151[3];
                *(__n128 *)&v448[16] = v189;
                v446 = v187;
                v447 = v188;
                v191 = v435[2];
                v190 = v435[3];
                v192 = v435[1];
                *(__n128 *)((char *)v151 + 60) = *(__n128 *)((char *)v435 + 60);
                v151[2] = v191;
                v151[3] = v190;
                v151[1] = v192;
                *v151 = *v435;
                v194 = v447;
                v193 = *(__n128 *)v448;
                v195 = v446;
                *(__n128 *)((char *)v435 + 60) = *(__n128 *)&v448[12];
                v435[2] = v194;
                v435[3] = v193;
                v435[1] = v195;
                *v435 = v445;
              }
            }
          }
          else if (v153)
          {
            v445 = *v151;
            v162 = v151[1];
            v163 = v151[2];
            v164 = v151[4];
            *(__n128 *)v448 = v151[3];
            *(__n128 *)&v448[16] = v164;
            v446 = v162;
            v447 = v163;
            v166 = v435[2];
            v165 = v435[3];
            v167 = v435[1];
            *(__n128 *)((char *)v151 + 60) = *(__n128 *)((char *)v435 + 60);
            v151[2] = v166;
            v151[3] = v165;
            v151[1] = v167;
            *v151 = *v435;
            v169 = v447;
            v168 = *(__n128 *)v448;
            v170 = v446;
            *(__n128 *)((char *)v435 + 60) = *(__n128 *)&v448[12];
            v435[2] = v169;
            v435[3] = v168;
            v435[1] = v170;
            *v435 = v445;
            if ((*a3)(v151, (__n128 *)(a1 + 160)))
            {
              v171 = *(_OWORD *)(a1 + 208);
              v447 = *(__n128 *)(a1 + 192);
              *(_OWORD *)v448 = v171;
              *(_OWORD *)&v448[16] = *(_OWORD *)(a1 + 224);
              v172 = *(__n128 *)(a1 + 176);
              v445 = *v150;
              v446 = v172;
              v174 = v151[2];
              v173 = v151[3];
              v175 = v151[1];
              *(__n128 *)(a1 + 220) = *(__n128 *)((char *)v151 + 60);
              *(__n128 *)(a1 + 192) = v174;
              *(__n128 *)(a1 + 208) = v173;
              *(__n128 *)(a1 + 176) = v175;
              *v150 = *v151;
              *v151 = v445;
              v176 = v446;
              v177 = v447;
              v178 = *(__n128 *)v448;
              *(__n128 *)((char *)v151 + 60) = *(__n128 *)&v448[12];
              v151[2] = v177;
              v151[3] = v178;
              v151[1] = v176;
            }
          }
          v196 = (*a3)(v14, v87);
          v197 = (*a3)(v151, v14);
          if ((v196 & 1) != 0)
          {
            if (v197)
            {
              v445 = *v87;
              v198 = v87[1];
              v199 = v87[2];
              v200 = v87[4];
              *(__n128 *)v448 = v87[3];
              *(__n128 *)&v448[16] = v200;
              v446 = v198;
              v447 = v199;
              *(__n128 *)((char *)v87 + 60) = *(__n128 *)((char *)v151 + 60);
              v201 = v151[3];
              v87[2] = v151[2];
              v87[3] = v201;
              v202 = v151[1];
              *v87 = *v151;
              v87[1] = v202;
            }
            else
            {
              v445 = *v87;
              v219 = v87[1];
              v220 = v87[2];
              v221 = v87[4];
              *(__n128 *)v448 = v87[3];
              *(__n128 *)&v448[16] = v221;
              v446 = v219;
              v447 = v220;
              *(__n128 *)((char *)v87 + 60) = *(__n128 *)((char *)v14 + 60);
              v222 = v14[3];
              v87[2] = v14[2];
              v87[3] = v222;
              v223 = v14[1];
              *v87 = *v14;
              v87[1] = v223;
              *v14 = v445;
              v225 = v447;
              v224 = *(__n128 *)v448;
              v226 = *(__n128 *)&v448[12];
              v14[1] = v446;
              v14[2] = v225;
              *(__n128 *)((char *)v14 + 60) = v226;
              v14[3] = v224;
              if (!(*a3)(v151, v14))
                goto LABEL_53;
              v445 = *v14;
              v227 = v14[1];
              v228 = v14[2];
              v229 = v14[4];
              *(__n128 *)v448 = v14[3];
              *(__n128 *)&v448[16] = v229;
              v446 = v227;
              v447 = v228;
              *(__n128 *)((char *)v14 + 60) = *(__n128 *)((char *)v151 + 60);
              v230 = v151[3];
              v14[2] = v151[2];
              v14[3] = v230;
              v231 = v151[1];
              *v14 = *v151;
              v14[1] = v231;
            }
            *v151 = v445;
            v233 = v447;
            v232 = *(__n128 *)v448;
            v234 = *(__n128 *)&v448[12];
            v151[1] = v446;
            v151[2] = v233;
            *(__n128 *)((char *)v151 + 60) = v234;
            v151[3] = v232;
          }
          else if (v197)
          {
            v445 = *v14;
            v203 = v14[1];
            v204 = v14[2];
            v205 = v14[4];
            *(__n128 *)v448 = v14[3];
            *(__n128 *)&v448[16] = v205;
            v446 = v203;
            v447 = v204;
            *(__n128 *)((char *)v14 + 60) = *(__n128 *)((char *)v151 + 60);
            v206 = v151[3];
            v14[2] = v151[2];
            v14[3] = v206;
            v207 = v151[1];
            *v14 = *v151;
            v14[1] = v207;
            *v151 = v445;
            v209 = v447;
            v208 = *(__n128 *)v448;
            v210 = *(__n128 *)&v448[12];
            v151[1] = v446;
            v151[2] = v209;
            *(__n128 *)((char *)v151 + 60) = v210;
            v151[3] = v208;
            if ((*a3)(v14, v87))
            {
              v445 = *v87;
              v211 = v87[1];
              v212 = v87[2];
              v213 = v87[4];
              *(__n128 *)v448 = v87[3];
              *(__n128 *)&v448[16] = v213;
              v446 = v211;
              v447 = v212;
              *(__n128 *)((char *)v87 + 60) = *(__n128 *)((char *)v14 + 60);
              v214 = v14[3];
              v87[2] = v14[2];
              v87[3] = v214;
              v215 = v14[1];
              *v87 = *v14;
              v87[1] = v215;
              *v14 = v445;
              v217 = v447;
              v216 = *(__n128 *)v448;
              v218 = *(__n128 *)&v448[12];
              v14[1] = v446;
              v14[2] = v217;
              *(__n128 *)((char *)v14 + 60) = v218;
              v14[3] = v216;
            }
          }
LABEL_53:
          v445 = *(__n128 *)a1;
          v235 = *(__n128 *)(a1 + 16);
          v236 = *(__n128 *)(a1 + 32);
          v237 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)v448 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v448[16] = v237;
          v446 = v235;
          v447 = v236;
          v239 = v14[2];
          v238 = v14[3];
          v240 = v14[1];
          *(__n128 *)(a1 + 60) = *(__n128 *)((char *)v14 + 60);
          *(__n128 *)(a1 + 32) = v239;
          *(__n128 *)(a1 + 48) = v238;
          *(__n128 *)(a1 + 16) = v240;
          *(__n128 *)a1 = *v14;
          v242 = v447;
          v241 = *(__n128 *)v448;
          v243 = v446;
          *(__n128 *)((char *)v14 + 60) = *(__n128 *)&v448[12];
          v14[2] = v242;
          v14[3] = v241;
          v14[1] = v243;
          *v14 = v445;
          a2 = v437;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          if (((*a3)((__n128 *)(a1 - 80), (__n128 *)a1) & 1) == 0)
          {
            v441 = *(__n128 *)a1;
            v271 = *(__n128 *)(a1 + 16);
            v272 = *(__n128 *)(a1 + 32);
            v273 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)v444 = *(_OWORD *)(a1 + 48);
            *(_OWORD *)&v444[16] = v273;
            v442 = v271;
            v443 = v272;
            if (((*a3)(&v441, v9) & 1) != 0)
            {
              v10 = (__n128 *)a1;
              do
                v10 += 5;
              while (((*a3)(&v441, v10) & 1) == 0);
            }
            else
            {
              v274 = (__n128 *)(a1 + 80);
              do
              {
                v10 = v274;
                if (v274 >= a2)
                  break;
                v275 = (*a3)(&v441, v274);
                v274 = v10 + 5;
              }
              while (!v275);
            }
            v276 = a2;
            if (v10 < a2)
            {
              v276 = a2;
              do
                v276 -= 5;
              while (((*a3)(&v441, v276) & 1) != 0);
            }
            while (v10 < v276)
            {
              v445 = *v10;
              v277 = v10[1];
              v278 = v10[2];
              v279 = v10[4];
              *(__n128 *)v448 = v10[3];
              *(__n128 *)&v448[16] = v279;
              v446 = v277;
              v447 = v278;
              v281 = v276[2];
              v280 = v276[3];
              v282 = v276[1];
              *(__n128 *)((char *)v10 + 60) = *(__n128 *)((char *)v276 + 60);
              v10[2] = v281;
              v10[3] = v280;
              v10[1] = v282;
              *v10 = *v276;
              v284 = v447;
              v283 = *(__n128 *)v448;
              v285 = v446;
              *(__n128 *)((char *)v276 + 60) = *(__n128 *)&v448[12];
              v276[2] = v284;
              v276[3] = v283;
              v276[1] = v285;
              *v276 = v445;
              do
                v10 += 5;
              while (!(*a3)(&v441, v10));
              do
                v276 -= 5;
              while (((*a3)(&v441, v276) & 1) != 0);
            }
            v286 = v10 - 5;
            if (&v10[-5] != (__n128 *)a1)
            {
              *(__n128 *)a1 = *v286;
              v287 = v10[-4];
              v288 = v10[-3];
              v289 = v10[-2];
              *(__n128 *)(a1 + 60) = *(__n128 *)((char *)v10 - 20);
              *(__n128 *)(a1 + 32) = v288;
              *(__n128 *)(a1 + 48) = v289;
              *(__n128 *)(a1 + 16) = v287;
            }
            a5 = 0;
            *v286 = v441;
            result = v442;
            v290 = v443;
            v291 = *(__n128 *)v444;
            *(__n128 *)((char *)v10 - 20) = *(__n128 *)&v444[12];
            v10[-3] = v290;
            v10[-2] = v291;
            v10[-4] = result;
            continue;
          }
LABEL_55:
          v244 = a4;
          v245 = 0;
          v441 = *(__n128 *)a1;
          v246 = *(__n128 *)(a1 + 16);
          v247 = *(__n128 *)(a1 + 32);
          v248 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)v444 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v444[16] = v248;
          v442 = v246;
          v443 = v247;
          do
            v245 += 80;
          while (((*a3)((__n128 *)(v245 + a1), &v441) & 1) != 0);
          v249 = (__n128 *)(a1 + v245);
          v250 = a2;
          v329 = v245 == 80;
          a4 = v244;
          if (v329)
          {
            v250 = a2;
            do
            {
              if (v249 >= v250)
                break;
              v250 -= 5;
            }
            while (((*a3)(v250, &v441) & 1) == 0);
          }
          else
          {
            do
              v250 -= 5;
            while (!(*a3)(v250, &v441));
          }
          if (v249 < v250)
          {
            v251 = v249;
            v252 = v250;
            do
            {
              v445 = *v251;
              v253 = v251[1];
              v254 = v251[2];
              v255 = v251[4];
              *(__n128 *)v448 = v251[3];
              *(__n128 *)&v448[16] = v255;
              v446 = v253;
              v447 = v254;
              v257 = v252[2];
              v256 = v252[3];
              v258 = v252[1];
              *(__n128 *)((char *)v251 + 60) = *(__n128 *)((char *)v252 + 60);
              v251[2] = v257;
              v251[3] = v256;
              v251[1] = v258;
              *v251 = *v252;
              v260 = v447;
              v259 = *(__n128 *)v448;
              v261 = v446;
              *(__n128 *)((char *)v252 + 60) = *(__n128 *)&v448[12];
              v252[2] = v260;
              v252[3] = v259;
              v252[1] = v261;
              *v252 = v445;
              do
                v251 += 5;
              while (((*a3)(v251, &v441) & 1) != 0);
              do
                v252 -= 5;
              while (!(*a3)(v252, &v441));
            }
            while (v251 < v252);
            v262 = v251 - 5;
            if (v262 == (__n128 *)a1)
              goto LABEL_73;
LABEL_72:
            *(__n128 *)a1 = *v262;
            v263 = v262[1];
            v264 = v262[2];
            v265 = v262[3];
            *(__n128 *)(a1 + 60) = *(__n128 *)((char *)v262 + 60);
            *(__n128 *)(a1 + 32) = v264;
            *(__n128 *)(a1 + 48) = v265;
            *(__n128 *)(a1 + 16) = v263;
            goto LABEL_73;
          }
          v262 = v249 - 5;
          if (&v249[-5] != (__n128 *)a1)
            goto LABEL_72;
LABEL_73:
          *v262 = v441;
          v266 = v442;
          v267 = v443;
          v268 = *(__n128 *)v444;
          *(__n128 *)((char *)v262 + 60) = *(__n128 *)&v444[12];
          v262[2] = v267;
          v262[3] = v268;
          v262[1] = v266;
          if (v249 < v250)
            goto LABEL_76;
          v269 = sub_2233C5A48(a1, v262, a3);
          v10 = v262 + 5;
          if (!sub_2233C5A48((uint64_t)&v262[5], a2, a3))
          {
            if (v269)
              continue;
LABEL_76:
            sub_2233C42BC(a1, v262, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v262 + 5;
            continue;
          }
          a2 = v262;
          if (v269)
            return result;
          goto LABEL_2;
        }
        v328 = (__n128 *)(a1 + 80);
        v329 = (__n128 *)a1 == a2 || v328 == a2;
        v330 = v329;
        if ((a5 & 1) != 0)
        {
          if ((v330 & 1) == 0)
          {
            v331 = 0;
            v332 = (__n128 *)a1;
            do
            {
              v336 = v332;
              v332 = v328;
              if ((*a3)(v328, v336))
              {
                v445 = *v332;
                v337 = v332[1];
                v338 = v332[2];
                v339 = v332[4];
                *(__n128 *)v448 = v332[3];
                *(__n128 *)&v448[16] = v339;
                v446 = v337;
                v447 = v338;
                v340 = v331;
                do
                {
                  v341 = (_OWORD *)(a1 + v340);
                  v342 = *(_OWORD *)(a1 + v340 + 48);
                  v341[7] = *(_OWORD *)(a1 + v340 + 32);
                  v341[8] = v342;
                  *(_OWORD *)((char *)v341 + 140) = *(_OWORD *)(a1 + v340 + 60);
                  v343 = *(_OWORD *)(a1 + v340 + 16);
                  v341[5] = *(_OWORD *)(a1 + v340);
                  v341[6] = v343;
                  if (!v340)
                  {
                    v333 = a1;
                    goto LABEL_118;
                  }
                  v340 -= 80;
                }
                while (((*a3)(&v445, (__n128 *)(v340 + a1)) & 1) != 0);
                v333 = a1 + v340 + 80;
LABEL_118:
                *(__n128 *)v333 = v445;
                result = v446;
                v334 = v447;
                v335 = *(_OWORD *)v448;
                *(_OWORD *)(v333 + 60) = *(_OWORD *)&v448[12];
                *(__n128 *)(v333 + 32) = v334;
                *(_OWORD *)(v333 + 48) = v335;
                *(__n128 *)(v333 + 16) = result;
              }
              v328 = v332 + 5;
              v331 += 80;
            }
            while (&v332[5] != a2);
          }
        }
        else if ((v330 & 1) == 0)
        {
          v409 = (_OWORD *)(a1 - 80);
          do
          {
            v410 = (__n128 *)a1;
            a1 = (uint64_t)v328;
            if ((*a3)(v328, v410))
            {
              v445 = *(__n128 *)a1;
              v411 = *(__n128 *)(a1 + 16);
              v412 = *(__n128 *)(a1 + 32);
              v413 = *(_OWORD *)(a1 + 64);
              *(_OWORD *)v448 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)&v448[16] = v413;
              v446 = v411;
              v447 = v412;
              v414 = v409;
              do
              {
                v415 = v414[8];
                v414[12] = v414[7];
                v414[13] = v415;
                *(_OWORD *)((char *)v414 + 220) = *(_OWORD *)((char *)v414 + 140);
                v416 = v414[6];
                v414[10] = v414[5];
                v414[11] = v416;
                v417 = (*a3)(&v445, (__n128 *)v414);
                v414 -= 5;
              }
              while ((v417 & 1) != 0);
              v414[10] = v445;
              result = v446;
              v418 = v447;
              v419 = *(_OWORD *)v448;
              *(_OWORD *)((char *)v414 + 220) = *(_OWORD *)&v448[12];
              v414[12] = v418;
              v414[13] = v419;
              v414[11] = result;
            }
            v328 = (__n128 *)(a1 + 80);
            v409 += 5;
          }
          while ((__n128 *)(a1 + 80) != a2);
        }
        return result;
    }
  }
}

BOOL sub_2233C5A48(uint64_t a1, __n128 *a2, uint64_t (**a3)(__n128 *, __n128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __n128 *v8;
  __int128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 *v16;
  __n128 *v17;
  char v18;
  int v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __n128 *v24;
  __n128 *v25;
  char v26;
  int v27;
  __int128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 *v33;
  __n128 *v34;
  __n128 *v35;
  __n128 v36;
  __int128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __int128 v44;
  __n128 v45;
  __int128 v46;
  __int128 v47;
  __n128 v48;
  __n128 v49;
  __int128 v50;
  __int128 v51;
  __n128 v52;
  __int128 v53;
  __int128 v54;
  __n128 v55;
  __n128 v56;
  __int128 v57;
  __int128 v58;
  __n128 v59;
  __int128 v60;
  __int128 v61;
  __n128 v62;
  __n128 v63;
  __int128 v64;
  __int128 v65;
  __n128 v66;
  __int128 v67;
  __int128 v68;
  __n128 v69;
  __n128 v70;
  __int128 v71;
  __int128 v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __int128 v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  __n128 v85;
  __int128 v86;
  __n128 v87;
  __int128 v88;
  __int128 v89;
  __n128 v90;
  __n128 v91;
  __int128 v92;
  __int128 v93;
  __n128 v94;
  __int128 v95;
  __int128 v96;
  __n128 v97;
  __n128 v98;
  __int128 v99;
  __n128 *v100;
  uint64_t v101;
  int v102;
  __n128 *v103;
  __n128 v104;
  __n128 v105;
  __n128 v106;
  __n128 v107;
  uint64_t v108;
  __n128 *v109;
  __n128 v110;
  __n128 v111;
  __int128 v112;
  __n128 v113;
  __int128 v114;
  __int128 v115;
  __n128 v116;
  __n128 v117;
  __int128 v118;
  __int128 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  _BYTE v129[32];
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  v6 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 5;
      if (!(*a3)(a2 - 5, (__n128 *)a1))
        return 1;
      v9 = *(_OWORD *)(a1 + 48);
      v128 = *(__n128 *)(a1 + 32);
      *(_OWORD *)v129 = v9;
      *(_OWORD *)&v129[16] = *(_OWORD *)(a1 + 64);
      v10 = *(__n128 *)(a1 + 16);
      v126 = *(__n128 *)a1;
      v127 = v10;
      *(__n128 *)a1 = *v8;
      v12 = a2[-3];
      v11 = a2[-2];
      v13 = a2[-4];
      *(__n128 *)(a1 + 60) = *(__n128 *)((char *)a2 - 20);
      *(__n128 *)(a1 + 32) = v12;
      *(__n128 *)(a1 + 48) = v11;
      *(__n128 *)(a1 + 16) = v13;
      *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v129[12];
      v14 = *(__n128 *)v129;
      a2[-3] = v128;
      a2[-2] = v14;
      v15 = v127;
      result = 1;
      *v8 = v126;
      a2[-4] = v15;
      return result;
    case 3uLL:
      v24 = (__n128 *)(a1 + 80);
      v25 = a2 - 5;
      v26 = (*a3)((__n128 *)(a1 + 80), (__n128 *)a1);
      v27 = (*a3)(v25, (__n128 *)(a1 + 80));
      if ((v26 & 1) == 0)
      {
        if (!v27)
          return 1;
        v72 = *(_OWORD *)(a1 + 128);
        v128 = *(__n128 *)(a1 + 112);
        *(_OWORD *)v129 = v72;
        *(_OWORD *)&v129[16] = *(_OWORD *)(a1 + 144);
        v73 = *(__n128 *)(a1 + 96);
        v126 = *v24;
        v127 = v73;
        *v24 = *v25;
        v75 = v25[2];
        v74 = v25[3];
        v76 = v25[1];
        *(__n128 *)(a1 + 140) = *(__n128 *)((char *)v25 + 60);
        *(__n128 *)(a1 + 112) = v75;
        *(__n128 *)(a1 + 128) = v74;
        *(__n128 *)(a1 + 96) = v76;
        *(__n128 *)((char *)v25 + 60) = *(__n128 *)&v129[12];
        v77 = *(__n128 *)v129;
        v25[2] = v128;
        v25[3] = v77;
        v78 = v127;
        *v25 = v126;
        v25[1] = v78;
        goto LABEL_20;
      }
      if (v27)
      {
        v28 = *(_OWORD *)(a1 + 48);
        v128 = *(__n128 *)(a1 + 32);
        *(_OWORD *)v129 = v28;
        *(_OWORD *)&v129[16] = *(_OWORD *)(a1 + 64);
        v29 = *(__n128 *)(a1 + 16);
        v126 = *(__n128 *)a1;
        v127 = v29;
        *(__n128 *)a1 = *v25;
        v31 = v25[2];
        v30 = v25[3];
        v32 = v25[1];
        *(__n128 *)(a1 + 60) = *(__n128 *)((char *)v25 + 60);
        *(__n128 *)(a1 + 32) = v31;
        *(__n128 *)(a1 + 48) = v30;
        *(__n128 *)(a1 + 16) = v32;
      }
      else
      {
        v112 = *(_OWORD *)(a1 + 48);
        v128 = *(__n128 *)(a1 + 32);
        *(_OWORD *)v129 = v112;
        *(_OWORD *)&v129[16] = *(_OWORD *)(a1 + 64);
        v113 = *(__n128 *)(a1 + 16);
        v126 = *(__n128 *)a1;
        v127 = v113;
        v114 = *(_OWORD *)(a1 + 128);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
        *(_OWORD *)(a1 + 48) = v114;
        *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
        v115 = *(_OWORD *)(a1 + 96);
        *(__n128 *)a1 = *v24;
        *(_OWORD *)(a1 + 16) = v115;
        v116 = v126;
        v117 = v127;
        *(_OWORD *)(a1 + 140) = *(_OWORD *)&v129[12];
        v118 = *(_OWORD *)v129;
        *(__n128 *)(a1 + 112) = v128;
        *(_OWORD *)(a1 + 128) = v118;
        *v24 = v116;
        *(__n128 *)(a1 + 96) = v117;
        if (!(*a3)(v25, (__n128 *)(a1 + 80)))
          return 1;
        v119 = *(_OWORD *)(a1 + 128);
        v128 = *(__n128 *)(a1 + 112);
        *(_OWORD *)v129 = v119;
        *(_OWORD *)&v129[16] = *(_OWORD *)(a1 + 144);
        v120 = *(__n128 *)(a1 + 96);
        v126 = *v24;
        v127 = v120;
        *v24 = *v25;
        v122 = v25[2];
        v121 = v25[3];
        v123 = v25[1];
        *(__n128 *)(a1 + 140) = *(__n128 *)((char *)v25 + 60);
        *(__n128 *)(a1 + 112) = v122;
        *(__n128 *)(a1 + 128) = v121;
        *(__n128 *)(a1 + 96) = v123;
      }
      *(__n128 *)((char *)v25 + 60) = *(__n128 *)&v129[12];
      v124 = *(__n128 *)v129;
      v25[2] = v128;
      v25[3] = v124;
      v125 = v127;
      result = 1;
      *v25 = v126;
      v25[1] = v125;
      return result;
    case 4uLL:
      sub_2233C619C((__n128 *)a1, (__n128 *)(a1 + 80), (__n128 *)(a1 + 160), a2 - 5, a3);
      return 1;
    case 5uLL:
      v24 = (__n128 *)(a1 + 80);
      v33 = (__n128 *)(a1 + 160);
      v34 = (__n128 *)(a1 + 240);
      v35 = a2 - 5;
      v36 = sub_2233C619C((__n128 *)a1, (__n128 *)(a1 + 80), (__n128 *)(a1 + 160), (__n128 *)(a1 + 240), a3);
      if (!((unsigned int (*)(__n128 *, uint64_t, __n128))*a3)(v35, a1 + 240, v36))
        return 1;
      v37 = *(_OWORD *)(a1 + 288);
      v128 = *(__n128 *)(a1 + 272);
      *(_OWORD *)v129 = v37;
      *(_OWORD *)&v129[16] = *(_OWORD *)(a1 + 304);
      v38 = *(__n128 *)(a1 + 256);
      v126 = *v34;
      v127 = v38;
      *v34 = *v35;
      v40 = v35[2];
      v39 = v35[3];
      v41 = v35[1];
      *(__n128 *)(a1 + 300) = *(__n128 *)((char *)v35 + 60);
      *(__n128 *)(a1 + 272) = v40;
      *(__n128 *)(a1 + 288) = v39;
      *(__n128 *)(a1 + 256) = v41;
      *(__n128 *)((char *)v35 + 60) = *(__n128 *)&v129[12];
      v42 = *(__n128 *)v129;
      v35[2] = v128;
      v35[3] = v42;
      v43 = v127;
      *v35 = v126;
      v35[1] = v43;
      if (!(*a3)((__n128 *)(a1 + 240), (__n128 *)(a1 + 160)))
        return 1;
      v44 = *(_OWORD *)(a1 + 208);
      v128 = *(__n128 *)(a1 + 192);
      *(_OWORD *)v129 = v44;
      *(_OWORD *)&v129[16] = *(_OWORD *)(a1 + 224);
      v45 = *(__n128 *)(a1 + 176);
      v126 = *v33;
      v127 = v45;
      v46 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 208) = v46;
      *(_OWORD *)(a1 + 220) = *(_OWORD *)(a1 + 300);
      v47 = *(_OWORD *)(a1 + 256);
      *v33 = *v34;
      *(_OWORD *)(a1 + 176) = v47;
      v48 = v126;
      v49 = v127;
      *(_OWORD *)(a1 + 300) = *(_OWORD *)&v129[12];
      v50 = *(_OWORD *)v129;
      *(__n128 *)(a1 + 272) = v128;
      *(_OWORD *)(a1 + 288) = v50;
      *v34 = v48;
      *(__n128 *)(a1 + 256) = v49;
      if (!(*a3)((__n128 *)(a1 + 160), (__n128 *)(a1 + 80)))
        return 1;
      v51 = *(_OWORD *)(a1 + 128);
      v128 = *(__n128 *)(a1 + 112);
      *(_OWORD *)v129 = v51;
      *(_OWORD *)&v129[16] = *(_OWORD *)(a1 + 144);
      v52 = *(__n128 *)(a1 + 96);
      v126 = *v24;
      v127 = v52;
      v53 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 128) = v53;
      *(_OWORD *)(a1 + 140) = *(_OWORD *)(a1 + 220);
      v54 = *(_OWORD *)(a1 + 176);
      *v24 = *v33;
      *(_OWORD *)(a1 + 96) = v54;
      v55 = v126;
      v56 = v127;
      *(_OWORD *)(a1 + 220) = *(_OWORD *)&v129[12];
      v57 = *(_OWORD *)v129;
      *(__n128 *)(a1 + 192) = v128;
      *(_OWORD *)(a1 + 208) = v57;
      *v33 = v55;
      *(__n128 *)(a1 + 176) = v56;
LABEL_20:
      if (!(*a3)(v24, (__n128 *)a1))
        return 1;
      v79 = *(_OWORD *)(a1 + 48);
      v128 = *(__n128 *)(a1 + 32);
      *(_OWORD *)v129 = v79;
      *(_OWORD *)&v129[16] = *(_OWORD *)(a1 + 64);
      v80 = *(__n128 *)(a1 + 16);
      v126 = *(__n128 *)a1;
      v127 = v80;
      v81 = v24[3];
      *(__n128 *)(a1 + 32) = v24[2];
      *(__n128 *)(a1 + 48) = v81;
      *(__n128 *)(a1 + 60) = *(__n128 *)((char *)v24 + 60);
      v82 = v24[1];
      *(__n128 *)a1 = *v24;
      *(__n128 *)(a1 + 16) = v82;
      v83 = v126;
      v84 = v127;
      *(__n128 *)((char *)v24 + 60) = *(__n128 *)&v129[12];
      v85 = *(__n128 *)v129;
      v24[2] = v128;
      v24[3] = v85;
      result = 1;
      *v24 = v83;
      v24[1] = v84;
      return result;
    default:
      v16 = (__n128 *)(a1 + 160);
      v17 = (__n128 *)(a1 + 80);
      v18 = (*a3)((__n128 *)(a1 + 80), (__n128 *)a1);
      v19 = (*a3)((__n128 *)(a1 + 160), (__n128 *)(a1 + 80));
      if ((v18 & 1) != 0)
      {
        if (v19)
        {
          v20 = *(_OWORD *)(a1 + 48);
          v128 = *(__n128 *)(a1 + 32);
          *(_OWORD *)v129 = v20;
          *(_OWORD *)&v129[16] = *(_OWORD *)(a1 + 64);
          v21 = *(__n128 *)(a1 + 16);
          v126 = *(__n128 *)a1;
          v127 = v21;
          v22 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(a1 + 48) = v22;
          *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 220);
          v23 = *(_OWORD *)(a1 + 176);
          *(__n128 *)a1 = *v16;
          *(_OWORD *)(a1 + 16) = v23;
        }
        else
        {
          v86 = *(_OWORD *)(a1 + 48);
          v128 = *(__n128 *)(a1 + 32);
          *(_OWORD *)v129 = v86;
          *(_OWORD *)&v129[16] = *(_OWORD *)(a1 + 64);
          v87 = *(__n128 *)(a1 + 16);
          v126 = *(__n128 *)a1;
          v127 = v87;
          v88 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
          *(_OWORD *)(a1 + 48) = v88;
          *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
          v89 = *(_OWORD *)(a1 + 96);
          *(__n128 *)a1 = *v17;
          *(_OWORD *)(a1 + 16) = v89;
          v90 = v126;
          v91 = v127;
          *(_OWORD *)(a1 + 140) = *(_OWORD *)&v129[12];
          v92 = *(_OWORD *)v129;
          *(__n128 *)(a1 + 112) = v128;
          *(_OWORD *)(a1 + 128) = v92;
          *v17 = v90;
          *(__n128 *)(a1 + 96) = v91;
          if (!(*a3)((__n128 *)(a1 + 160), (__n128 *)(a1 + 80)))
            goto LABEL_25;
          v93 = *(_OWORD *)(a1 + 128);
          v128 = *(__n128 *)(a1 + 112);
          *(_OWORD *)v129 = v93;
          *(_OWORD *)&v129[16] = *(_OWORD *)(a1 + 144);
          v94 = *(__n128 *)(a1 + 96);
          v126 = *v17;
          v127 = v94;
          v95 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(a1 + 128) = v95;
          *(_OWORD *)(a1 + 140) = *(_OWORD *)(a1 + 220);
          v96 = *(_OWORD *)(a1 + 176);
          *v17 = *v16;
          *(_OWORD *)(a1 + 96) = v96;
        }
        v97 = v126;
        v98 = v127;
        *(_OWORD *)(a1 + 220) = *(_OWORD *)&v129[12];
        v99 = *(_OWORD *)v129;
        *(__n128 *)(a1 + 192) = v128;
        *(_OWORD *)(a1 + 208) = v99;
        *v16 = v97;
        *(__n128 *)(a1 + 176) = v98;
      }
      else if (v19)
      {
        v58 = *(_OWORD *)(a1 + 128);
        v128 = *(__n128 *)(a1 + 112);
        *(_OWORD *)v129 = v58;
        *(_OWORD *)&v129[16] = *(_OWORD *)(a1 + 144);
        v59 = *(__n128 *)(a1 + 96);
        v126 = *v17;
        v127 = v59;
        v60 = *(_OWORD *)(a1 + 208);
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
        *(_OWORD *)(a1 + 128) = v60;
        *(_OWORD *)(a1 + 140) = *(_OWORD *)(a1 + 220);
        v61 = *(_OWORD *)(a1 + 176);
        *v17 = *v16;
        *(_OWORD *)(a1 + 96) = v61;
        v62 = v126;
        v63 = v127;
        *(_OWORD *)(a1 + 220) = *(_OWORD *)&v129[12];
        v64 = *(_OWORD *)v129;
        *(__n128 *)(a1 + 192) = v128;
        *(_OWORD *)(a1 + 208) = v64;
        *v16 = v62;
        *(__n128 *)(a1 + 176) = v63;
        if ((*a3)((__n128 *)(a1 + 80), (__n128 *)a1))
        {
          v65 = *(_OWORD *)(a1 + 48);
          v128 = *(__n128 *)(a1 + 32);
          *(_OWORD *)v129 = v65;
          *(_OWORD *)&v129[16] = *(_OWORD *)(a1 + 64);
          v66 = *(__n128 *)(a1 + 16);
          v126 = *(__n128 *)a1;
          v127 = v66;
          v67 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
          *(_OWORD *)(a1 + 48) = v67;
          *(_OWORD *)(a1 + 60) = *(_OWORD *)(a1 + 140);
          v68 = *(_OWORD *)(a1 + 96);
          *(__n128 *)a1 = *v17;
          *(_OWORD *)(a1 + 16) = v68;
          v69 = v126;
          v70 = v127;
          *(_OWORD *)(a1 + 140) = *(_OWORD *)&v129[12];
          v71 = *(_OWORD *)v129;
          *(__n128 *)(a1 + 112) = v128;
          *(_OWORD *)(a1 + 128) = v71;
          *v17 = v69;
          *(__n128 *)(a1 + 96) = v70;
        }
      }
LABEL_25:
      v100 = (__n128 *)(a1 + 240);
      if ((__n128 *)(a1 + 240) == a2)
        return 1;
      v101 = 0;
      v102 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v100, v16))
    {
      v106 = v100[3];
      v128 = v100[2];
      *(__n128 *)v129 = v106;
      *(__n128 *)&v129[16] = v100[4];
      v107 = v100[1];
      v126 = *v100;
      v127 = v107;
      v108 = v101;
      do
      {
        v109 = (__n128 *)(a1 + v108);
        v110 = *(__n128 *)(a1 + v108 + 208);
        v109[17] = *(__n128 *)(a1 + v108 + 192);
        v109[18] = v110;
        *(_OWORD *)(a1 + v108 + 300) = *(_OWORD *)(a1 + v108 + 220);
        v111 = *(__n128 *)(a1 + v108 + 176);
        v109[15] = *(__n128 *)(a1 + v108 + 160);
        v109[16] = v111;
        if (v108 == -160)
        {
          v103 = (__n128 *)a1;
          goto LABEL_28;
        }
        v108 -= 80;
      }
      while (((*a3)(&v126, v109 + 5) & 1) != 0);
      v103 = (__n128 *)(a1 + v108 + 240);
LABEL_28:
      v104 = *(__n128 *)v129;
      v103[2] = v128;
      v103[3] = v104;
      *(__n128 *)((char *)v103 + 60) = *(__n128 *)&v129[12];
      v105 = v127;
      *v103 = v126;
      v103[1] = v105;
      if (++v102 == 8)
        return &v100[5] == a2;
    }
    v16 = v100;
    v101 += 80;
    v100 += 5;
    if (v100 == a2)
      return 1;
  }
}

__n128 sub_2233C619C(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, uint64_t (**a5)(__n128 *, __n128 *))
{
  char v10;
  int v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 result;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  _BYTE v58[32];
  _BYTE v59[32];
  _BYTE v60[32];
  _BYTE v61[32];
  _BYTE v62[32];
  _BYTE v63[32];
  _BYTE v64[32];

  v10 = (*a5)(a2, a1);
  v11 = (*a5)(a3, a2);
  if ((v10 & 1) != 0)
  {
    if (v11)
    {
      v51 = a1[2];
      *(__n128 *)v58 = a1[3];
      *(__n128 *)&v58[16] = a1[4];
      v37 = *a1;
      v44 = a1[1];
      *a1 = *a3;
      v13 = a3[2];
      v12 = a3[3];
      v14 = a3[1];
      *(__n128 *)((char *)a1 + 60) = *(__n128 *)((char *)a3 + 60);
      a1[2] = v13;
      a1[3] = v12;
      a1[1] = v14;
LABEL_9:
      *(__n128 *)((char *)a3 + 60) = *(__n128 *)&v58[12];
      a3[2] = v51;
      a3[3] = *(__n128 *)v58;
      *a3 = v37;
      a3[1] = v44;
      goto LABEL_10;
    }
    v54 = a1[2];
    *(__n128 *)v61 = a1[3];
    *(__n128 *)&v61[16] = a1[4];
    v40 = *a1;
    v47 = a1[1];
    *a1 = *a2;
    v22 = a2[2];
    v21 = a2[3];
    v23 = a2[1];
    *(__n128 *)((char *)a1 + 60) = *(__n128 *)((char *)a2 + 60);
    a1[2] = v22;
    a1[3] = v21;
    a1[1] = v23;
    *(__n128 *)((char *)a2 + 60) = *(__n128 *)&v61[12];
    a2[2] = v54;
    a2[3] = *(__n128 *)v61;
    *a2 = v40;
    a2[1] = v47;
    if ((*a5)(a3, a2))
    {
      v51 = a2[2];
      *(__n128 *)v58 = a2[3];
      *(__n128 *)&v58[16] = a2[4];
      v37 = *a2;
      v44 = a2[1];
      *a2 = *a3;
      v25 = a3[2];
      v24 = a3[3];
      v26 = a3[1];
      *(__n128 *)((char *)a2 + 60) = *(__n128 *)((char *)a3 + 60);
      a2[2] = v25;
      a2[3] = v24;
      a2[1] = v26;
      goto LABEL_9;
    }
  }
  else if (v11)
  {
    v52 = a2[2];
    *(__n128 *)v59 = a2[3];
    *(__n128 *)&v59[16] = a2[4];
    v38 = *a2;
    v45 = a2[1];
    *a2 = *a3;
    v16 = a3[2];
    v15 = a3[3];
    v17 = a3[1];
    *(__n128 *)((char *)a2 + 60) = *(__n128 *)((char *)a3 + 60);
    a2[2] = v16;
    a2[3] = v15;
    a2[1] = v17;
    *(__n128 *)((char *)a3 + 60) = *(__n128 *)&v59[12];
    a3[2] = v52;
    a3[3] = *(__n128 *)v59;
    *a3 = v38;
    a3[1] = v45;
    if ((*a5)(a2, a1))
    {
      v53 = a1[2];
      *(__n128 *)v60 = a1[3];
      *(__n128 *)&v60[16] = a1[4];
      v39 = *a1;
      v46 = a1[1];
      *a1 = *a2;
      v19 = a2[2];
      v18 = a2[3];
      v20 = a2[1];
      *(__n128 *)((char *)a1 + 60) = *(__n128 *)((char *)a2 + 60);
      a1[2] = v19;
      a1[3] = v18;
      a1[1] = v20;
      *(__n128 *)((char *)a2 + 60) = *(__n128 *)&v60[12];
      a2[2] = v53;
      a2[3] = *(__n128 *)v60;
      *a2 = v39;
      a2[1] = v46;
    }
  }
LABEL_10:
  if ((*a5)(a4, a3))
  {
    v55 = a3[2];
    *(__n128 *)v62 = a3[3];
    *(__n128 *)&v62[16] = a3[4];
    v41 = *a3;
    v48 = a3[1];
    *a3 = *a4;
    v29 = a4[2];
    v28 = a4[3];
    v30 = a4[1];
    *(__n128 *)((char *)a3 + 60) = *(__n128 *)((char *)a4 + 60);
    a3[2] = v29;
    a3[3] = v28;
    a3[1] = v30;
    *(__n128 *)((char *)a4 + 60) = *(__n128 *)&v62[12];
    a4[2] = v55;
    a4[3] = *(__n128 *)v62;
    *a4 = v41;
    a4[1] = v48;
    if ((*a5)(a3, a2))
    {
      v56 = a2[2];
      *(__n128 *)v63 = a2[3];
      *(__n128 *)&v63[16] = a2[4];
      v42 = *a2;
      v49 = a2[1];
      *a2 = *a3;
      v32 = a3[2];
      v31 = a3[3];
      v33 = a3[1];
      *(__n128 *)((char *)a2 + 60) = *(__n128 *)((char *)a3 + 60);
      a2[2] = v32;
      a2[3] = v31;
      a2[1] = v33;
      *(__n128 *)((char *)a3 + 60) = *(__n128 *)&v63[12];
      a3[2] = v56;
      a3[3] = *(__n128 *)v63;
      *a3 = v42;
      a3[1] = v49;
      if ((*a5)(a2, a1))
      {
        v57 = a1[2];
        *(__n128 *)v64 = a1[3];
        *(__n128 *)&v64[16] = a1[4];
        v43 = *a1;
        v50 = a1[1];
        *a1 = *a2;
        v35 = a2[2];
        v34 = a2[3];
        v36 = a2[1];
        *(__n128 *)((char *)a1 + 60) = *(__n128 *)((char *)a2 + 60);
        a1[2] = v35;
        a1[3] = v34;
        a1[1] = v36;
        *(__n128 *)((char *)a2 + 60) = *(__n128 *)&v64[12];
        a2[2] = v57;
        a2[3] = *(__n128 *)v64;
        result = v43;
        *a2 = v43;
        a2[1] = v50;
      }
    }
  }
  return result;
}

void sub_2233C6510(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5, int *a6)
{
  size_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  _QWORD *p_dst;
  const char *v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  _QWORD *__dst;
  __int128 v68;
  _BYTE v69[24];
  __int128 v70;
  uint64_t v71;
  _QWORD v72[3];

  v72[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v11 = _os_log_pack_size();
    v12 = (std::__shared_weak_count_vtbl *)operator new(v11, (std::align_val_t)8uLL);
    v13 = (std::__shared_weak_count *)operator new();
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13[1].__vftable = v12;
    *(_QWORD *)&v64 = v12;
    *((_QWORD *)&v64 + 1) = v12;
    v66 = 0uLL;
    v65 = v13;
    v14 = *a5;
    v15 = strlen(*a5);
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v16 = v15;
    if (v15 >= 0x17)
    {
      v21 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v21 = v15 | 7;
      v22 = v21 + 1;
      p_dst = operator new(v21 + 1);
      *(_QWORD *)&v68 = v16;
      *((_QWORD *)&v68 + 1) = v22 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v68) = v15;
      p_dst = &__dst;
      if (!v15)
      {
LABEL_13:
        *((_BYTE *)p_dst + v16) = 0;
        v23 = __dst;
        v72[0] = v68;
        *(_QWORD *)((char *)v72 + 7) = *(_QWORD *)((char *)&v68 + 7);
        v24 = HIBYTE(v68);
        v25 = operator new(0x38uLL);
        v25[1] = 0;
        v25[2] = 0;
        v25[3] = off_24EC36038;
        *v25 = &off_24EC35FE8;
        v26 = v72[0];
        v25[4] = v23;
        v25[5] = v26;
        *(_QWORD *)((char *)v25 + 47) = *(_QWORD *)((char *)v72 + 7);
        *((_BYTE *)v25 + 55) = v24;
        v72[0] = 0;
        *(_QWORD *)((char *)v72 + 7) = 0;
        v27 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        *(_QWORD *)&v66 = v25 + 3;
        *((_QWORD *)&v66 + 1) = v25;
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        *(_OWORD *)v69 = v64;
        *(_QWORD *)&v69[16] = v65;
        if (v65)
        {
          v30 = &v65->__shared_owners_;
          do
            v31 = __ldxr((unint64_t *)v30);
          while (__stxr(v31 + 1, (unint64_t *)v30));
        }
        v70 = v66;
        if (*((_QWORD *)&v66 + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
          v71 = v66;
          do
            v34 = __ldaxr(v32);
          while (__stlxr(v34 - 1, v32));
          if (!v34)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 16))(*((_QWORD *)&v66 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v66 + 1));
          }
        }
        else
        {
          v71 = v66;
        }
        if (v65)
        {
          v35 = &v65->__shared_owners_;
          do
            v36 = __ldaxr((unint64_t *)v35);
          while (__stlxr(v36 - 1, (unint64_t *)v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v37 = *a6;
        v38 = *(_QWORD *)v69;
        if (*(char *)(v71 + 31) >= 0)
          v39 = v71 + 8;
        else
          v39 = *(_QWORD *)(v71 + 8);
        v40 = _os_log_pack_fill();
        *(_DWORD *)v40 = 136315394;
        *(_QWORD *)(v40 + 4) = v39;
        *(_WORD *)(v40 + 12) = 1024;
        *(_DWORD *)(v40 + 14) = v37;
        v41 = operator new();
        v42 = *((unsigned __int8 *)a2 + 23);
        if ((v42 & 0x80u) == 0)
          v43 = a2;
        else
          v43 = (uint64_t *)*a2;
        if ((v42 & 0x80u) != 0)
          v42 = a2[1];
        *(_QWORD *)v41 = v38;
        *(_OWORD *)(v41 + 8) = *(_OWORD *)&v69[8];
        *(_QWORD *)&v69[8] = 0;
        *(_QWORD *)&v69[16] = 0;
        *(_OWORD *)(v41 + 24) = v70;
        v70 = 0uLL;
        *(_QWORD *)(v41 + 40) = v43;
        *(_QWORD *)(v41 + 48) = v42;
        *(_BYTE *)(v41 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v64 = v41;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v64);
        v44 = v64;
        *(_QWORD *)&v64 = 0;
        if (v44)
        {
          v45 = *(std::__shared_weak_count **)(v44 + 32);
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v48 = *(std::__shared_weak_count **)(v44 + 16);
          if (v48)
          {
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          MEMORY[0x227684CE8](v44, 0x10F0C40B62ED6C6);
          v51 = __dst;
          __dst = 0;
          if (v51)
          {
            v52 = (std::__shared_weak_count *)v51[4];
            if (v52)
            {
              v53 = (unint64_t *)&v52->__shared_owners_;
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v55 = (std::__shared_weak_count *)v51[2];
            if (v55)
            {
              v56 = (unint64_t *)&v55->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            MEMORY[0x227684CE8](v51, 0x10F0C40B62ED6C6);
          }
        }
        v58 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
        if (*((_QWORD *)&v70 + 1))
        {
          v59 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v61 = *(std::__shared_weak_count **)&v69[16];
        if (*(_QWORD *)&v69[16])
        {
          v62 = (unint64_t *)(*(_QWORD *)&v69[16] + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v14, v16);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v18 = *a5;
  v19 = *a6;
  *(_DWORD *)v69 = 136315394;
  *(_QWORD *)&v69[4] = v18;
  *(_WORD *)&v69[12] = 1024;
  *(_DWORD *)&v69[14] = v19;
  v20 = (void *)_os_log_send_and_compose_impl();
  if (v20)
    free(v20);
}

void sub_2233C6AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2233C6AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233C6AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_2233C6B40(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_2233C6B80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC35FE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2233C6B90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC35FE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2233C6BC0(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_2233C6BD8(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

void sub_2233C6C1C()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_2233C6C30(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC36070;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2233C6C68(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC36070;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2233C6C88()
{
  return kdebug_trace();
}

uint64_t sub_2233C6CD0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon11scene_query15FindFloorPlanesERKNS6_16Scen"
                     "eQueryPlanesERKN3cva15SE3GroupStorageIfNSA_6MatrixIfLj4ELj4ELb1EEEEEE3$_2JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon11scene_query15FindFloorPlanesER"
                                "KNS6_16SceneQueryPlanesERKN3cva15SE3GroupStorageIfNSA_6MatrixIfLj4ELj4ELb1EEEEEE3$_2JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon11scene_query15FindFloorPlanesERKNS6_16SceneQueryPlanesERKN3cva15SE3GroupStorageIfNSA_6MatrixIfLj4ELj4ELb1EEEEEE3$_2JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon11scene_query15FindFloorPlanesERKNS6_16SceneQueryPlanesERKN3cva15SE3GroupStorageIfNSA_6MatrixIfLj4ELj4ELb1EEEEEE3$_2JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233C6D3C()
{
  return &unk_24EC360D0;
}

_QWORD *sub_2233C6D48(_QWORD *a1, uint64_t a2, uint64_t a3, float32x4_t a4)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  _QWORD *v9;
  float32x4_t v10;
  float32x4_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v17;
  __int32 v18;
  uint64_t v19;
  __int32 v20;

  *a1 = 0;
  a1[1] = 0;
  a4.i64[0] = *(_QWORD *)a3;
  a4.i32[2] = *(_DWORD *)(a3 + 8);
  v6 = (float32x4_t)vdupq_n_s32(0xBD23D70A);
  v7 = vaddq_f32(a4, v6);
  v6.i64[0] = *(_QWORD *)(a3 + 12);
  v6.i32[2] = *(_DWORD *)(a3 + 20);
  v18 = v7.i32[2];
  v8 = vaddq_f32(v6, (float32x4_t)vdupq_n_s32(0x3D23D70Au));
  v17 = v7.i64[0];
  v20 = v8.i32[2];
  v19 = v8.i64[0];
  v9 = operator new(0xC8uLL);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &off_24EC360F0;
  v12 = sub_2233C7348((uint64_t)(v9 + 3), a2, (uint64_t)&v17, 2u, v10, v11);
  v13 = (std::__shared_weak_count *)a1[1];
  *a1 = v12;
  a1[1] = v9;
  if (!v13)
    return a1;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return a1;
}

void sub_2233C6E58(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2233C6E78(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2233C6E8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC360F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2233C6E9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC360F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2233C6ECC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_2233C6EDC(uint64_t a1, uint64_t a2, unsigned int a3, float32x4_t a4, float32x4_t a5)
{
  int v6;
  uint64_t *v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  void **v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  unint64_t v20;
  unsigned int v21;
  double v22;
  double v23;
  _BYTE *v24;
  _QWORD *v25;
  _DWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  size_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v49;

  *(_QWORD *)a1 = &off_24EC36140;
  v6 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
  v7 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = v6;
  v8 = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 28) = v8;
  v9 = *(float *)(a1 + 8);
  v10 = *(float *)(a1 + 20);
  if (v9 > v10)
  {
    *(float *)v7 = v10;
    *(float *)(a1 + 20) = v9;
    v11 = *(float *)(a1 + 12);
    v12 = *(float *)(a1 + 24);
    if (v11 <= v12)
    {
LABEL_3:
      v13 = *(float *)(a1 + 16);
      v14 = *(float *)(a1 + 28);
      if (v13 <= v14)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v11 = *(float *)(a1 + 12);
    v12 = *(float *)(a1 + 24);
    if (v11 <= v12)
      goto LABEL_3;
  }
  *(float *)(a1 + 12) = v12;
  *(float *)(a1 + 24) = v11;
  v13 = *(float *)(a1 + 16);
  v14 = *(float *)(a1 + 28);
  if (v13 > v14)
  {
LABEL_4:
    *(float *)(a1 + 16) = v14;
    *(float *)(a1 + 28) = v13;
  }
LABEL_5:
  *(_QWORD *)(a1 + 48) = 0;
  v15 = (void **)(a1 + 48);
  *(_DWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  if (a3 > 4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/Octree.cpp", 53, (uint64_t)"max_depth_ <= 4", 15, (uint64_t)&unk_224584F5D, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    a3 = *(_DWORD *)(a1 + 32);
    v17.i64[0] = *(_QWORD *)(a1 + 20);
    v17.i32[2] = *(_DWORD *)(a1 + 28);
    v18.i64[0] = *(_QWORD *)(a1 + 8);
    v18.i32[2] = *(_DWORD *)(a1 + 16);
    v19 = vsubq_f32(v17, v18);
    *(_DWORD *)(a1 + 44) = v19.i32[2];
    *(_QWORD *)(a1 + 36) = v19.i64[0];
    if (a3 == -1)
    {
      v20 = 0;
      v25 = (_QWORD *)(a1 + 56);
      v26 = *(_DWORD **)(a1 + 48);
      v27 = (uint64_t)(*(_QWORD *)(a1 + 56) - (_QWORD)v26) >> 3;
      goto LABEL_36;
    }
  }
  else
  {
    a4.i64[0] = *(_QWORD *)(a1 + 20);
    a4.i32[2] = *(_DWORD *)(a1 + 28);
    a5.i64[0] = *(_QWORD *)(a1 + 8);
    a5.i32[2] = *(_DWORD *)(a1 + 16);
    v16 = vsubq_f32(a4, a5);
    *(_DWORD *)(a1 + 44) = v16.i32[2];
    *(_QWORD *)(a1 + 36) = v16.i64[0];
  }
  v20 = 0;
  v21 = a3 + 1;
  v22 = 0.0;
  do
  {
    v23 = exp2(v22 * 3.0) + (double)v20;
    v20 = (unint64_t)v23;
    v22 = v22 + 1.0;
    --v21;
  }
  while (v21);
  v25 = (_QWORD *)(a1 + 56);
  v24 = *(_BYTE **)(a1 + 56);
  v26 = *(_DWORD **)(a1 + 48);
  v27 = (v24 - (_BYTE *)v26) >> 3;
  v28 = v20 - v27;
  if (v20 > v27)
  {
    v29 = *(_QWORD *)(a1 + 64);
    if (v28 <= (v29 - (uint64_t)v24) >> 3)
    {
      memset_pattern16(*(void **)(a1 + 56), &unk_2245F51C0, 8 * v28);
      *v25 = &v24[8 * v28];
    }
    else
    {
      if (v20 >> 61)
        sub_2233C8450();
      v30 = v29 - (_QWORD)v26;
      v31 = v30 >> 2;
      if (v30 >> 2 <= v20)
        v31 = (unint64_t)v23;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
        v32 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      if (v32 >> 61)
        sub_223174E94();
      v33 = (char *)operator new(8 * v32);
      v34 = &v33[8 * v27];
      v35 = 8 * v28;
      v49 = v33;
      v36 = &v33[8 * v32];
      memset_pattern16(v34, &unk_2245F51C0, v35);
      v37 = &v34[v35];
      if (v24 != (_BYTE *)v26)
      {
        v38 = v24 - (_BYTE *)v26 - 8;
        if (v38 < 0x58)
          goto LABEL_44;
        if ((unint64_t)((char *)v26 - v49) < 0x20)
          goto LABEL_44;
        v39 = (v38 >> 3) + 1;
        v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
        v41 = &v24[-v40];
        v34 -= v40;
        v42 = &v49[8 * v27 - 16];
        v43 = (__int128 *)(v24 - 16);
        v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v45 = *v43;
          *((_OWORD *)v42 - 1) = *(v43 - 1);
          *(_OWORD *)v42 = v45;
          v42 -= 32;
          v43 -= 2;
          v44 -= 4;
        }
        while (v44);
        v24 = v41;
        if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_44:
          do
          {
            v46 = *((_QWORD *)v24 - 1);
            v24 -= 8;
            *((_QWORD *)v34 - 1) = v46;
            v34 -= 8;
          }
          while (v24 != (_BYTE *)v26);
        }
        v24 = *v15;
      }
      *(_QWORD *)(a1 + 48) = v34;
      *(_QWORD *)(a1 + 56) = v37;
      *(_QWORD *)(a1 + 64) = v36;
      if (v24)
        operator delete(v24);
    }
    v26 = *v15;
    goto LABEL_38;
  }
LABEL_36:
  if (v27 > v20)
    *v25 = &v26[2 * v20];
LABEL_38:
  *v26 &= ~1u;
  *(_OWORD *)(a1 + 72) = xmmword_2245F5110;
  *(_OWORD *)(a1 + 88) = unk_2245F5120;
  *(_QWORD *)(a1 + 104) = 585;
  v47 = *v7;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 48) + 8 * *(_QWORD *)(a1 + 72 + 8 * *(unsigned int *)(a1 + 32));
  *(_QWORD *)(a1 + 120) = v47;
  *(_DWORD *)(a1 + 128) = *((_DWORD *)v7 + 2);
  return a1;
}

void sub_2233C72A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2233C72C0(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24EC36140;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_2233C72FC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24EC36140;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233C7348(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, float32x4_t a5, float32x4_t a6)
{
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  long double v10;
  float32x4_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  char *v28;
  uint64_t v29;
  float32x2_t *v30;
  float32x2_t *v31;
  float32x2_t *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float32x2_t v37;
  float32x2_t v38;
  int8x16_t v39;
  unsigned int v40;
  int8x16_t v41;
  unsigned int v42;
  int32x2_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  _DWORD *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  char *v59;
  uint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint32x2_t v65;
  unsigned __int32 v66;
  __int32 v67;
  int v68;
  __int32 v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  _DWORD *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  char *v85;
  char *v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float32x4_t *v93;
  float32x4_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float32x4_t *v99;
  float32x4_t *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  char *v104;
  int v105;
  int *v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  unint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  size_t v122;
  char *v123;
  unint64_t v124;
  vm_address_t v125;
  _QWORD *v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _OWORD *v132;
  __int128 *v133;
  uint64_t v134;
  __int128 v135;
  int v136;
  uint64_t v137;
  int64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  unsigned int v143;
  uint64_t v144;
  std::bad_alloc *exception;
  std::bad_alloc *v147;
  unsigned int *v148;
  float32x4_t v149;
  uint64_t v150;
  unsigned int *v151;
  int v152;
  __int32 v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  __int32 v158;
  unsigned int v159;
  int v160;
  __int32 v161;
  unsigned __int32 v162;
  vm_address_t v163;
  _QWORD *v164;
  float32x4_t v165;
  uint64_t v166;
  vm_address_t v167;
  char *v168;
  char *v169;
  vm_address_t address[4];

  v7 = a1;
  v8 = sub_2233C6EDC(a1, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_24EC36160;
  *(_QWORD *)(v8 + 152) = 0;
  *(_QWORD *)(v8 + 160) = 0;
  *(_QWORD *)(v8 + 168) = 0;
  v9.i64[0] = *(_QWORD *)(v8 + 36);
  v9.i32[2] = *(_DWORD *)(v8 + 44);
  v165 = v9;
  v159 = *(_DWORD *)(v8 + 32);
  v10 = exp2((double)v159 * 3.0);
  v12 = v10;
  v150 = a2;
  v13 = *(_QWORD *)(a2 + 16);
  if (2 * v13)
  {
    if ((unint64_t)(2 * v13) >> 61)
      sub_2233C8450();
    v14 = (char *)operator new(16 * v13);
    v15 = &v14[16 * v13];
    v16 = (unint64_t)v12;
    v168 = 0;
    v169 = 0;
    if ((unint64_t)v12)
    {
LABEL_4:
      if (v16 >> 62)
        sub_22316E078();
      v17 = (char *)operator new(4 * v16);
      v18 = &v17[4 * v16];
      v168 = v17;
      bzero(v17, 4 * v16);
      v169 = v18;
      v164 = (_QWORD *)v7;
      if (v13)
        goto LABEL_6;
      goto LABEL_104;
    }
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = (unint64_t)v10;
    v168 = 0;
    v169 = 0;
    if ((unint64_t)v10)
      goto LABEL_4;
  }
  v18 = 0;
  v17 = 0;
  v164 = (_QWORD *)v7;
  if (v13)
  {
LABEL_6:
    v154 = 1 << v159 << v159;
    *(float *)&v10 = (float)(1 << v159);
    __asm { FMOV            V1.4S, #1.0 }
    v24 = *(unsigned int **)(v150 + 24);
    v148 = &v24[3 * v13];
    v25 = 0;
    v26 = v7 + 72;
    v27 = vdivq_f32(_Q1, vdivq_f32(v165, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v10, 0)));
    v149 = v27;
    v28 = v14;
    while (1)
    {
      v29 = *(_QWORD *)(v150 + 8);
      v30 = (float32x2_t *)(v29 + 12 * *v24);
      v31 = (float32x2_t *)(v29 + 12 * v24[1]);
      v32 = (float32x2_t *)(v29 + 12 * v24[2]);
      v27.i32[0] = v30[1].i32[0];
      v33 = v31[1].f32[0];
      v34 = v32[1].f32[0];
      if (v33 >= v27.f32[0])
        v35 = v30[1].f32[0];
      else
        v35 = v31[1].f32[0];
      if (v27.f32[0] < v33)
        v27.i32[0] = v31[1].i32[0];
      if (v34 >= v35)
        v36 = v35;
      else
        v36 = v32[1].f32[0];
      v37 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v31, *v30), (int8x8_t)*v31, (int8x8_t)*v30);
      v38 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v30, *v31), (int8x8_t)*v31, (int8x8_t)*v30);
      *(int8x8_t *)v11.f32 = vbsl_s8((int8x8_t)vcgt_f32(v38, *v32), (int8x8_t)*v32, (int8x8_t)v38);
      v11.f32[2] = v36;
      *(int8x8_t *)_Q1.f32 = vbsl_s8((int8x8_t)vcgt_f32(*v32, v37), (int8x8_t)*v32, (int8x8_t)v37);
      if (v27.f32[0] < v34)
        v27.i32[0] = v32[1].i32[0];
      _Q1.i32[2] = v27.i32[0];
      v27.i64[0] = *(_QWORD *)(v7 + 120);
      v27.i32[2] = *(_DWORD *)(v7 + 128);
      v39 = (int8x16_t)vmulq_f32(v149, vsubq_f32(_Q1, v27));
      v40 = *(float *)v39.i32;
      v41 = (int8x16_t)vmulq_f32(v149, vsubq_f32(v11, v27));
      v42 = *(float *)v41.i32;
      v27 = (float32x4_t)vextq_s8(v39, v39, 8uLL);
      v39.i32[0] = v27.i32[0];
      *(uint32x2_t *)v27.f32 = vcvt_u32_f32(*(float32x2_t *)v39.i8);
      _Q1 = (float32x4_t)vextq_s8(v41, v41, 8uLL);
      v41.i32[0] = _Q1.i32[0];
      *(uint32x2_t *)_Q1.f32 = vcvt_u32_f32(*(float32x2_t *)v41.i8);
      v155 = v40;
      v151 = v24;
      v152 = v25;
      if (v40 != v42
        || (v43 = vceq_s32(*(int32x2_t *)v27.f32, *(int32x2_t *)_Q1.f32), (v43.i8[4] & 1) == 0)
        || (v43.i8[0] & 1) == 0)
      {
        if (v42 > v40)
          goto LABEL_8;
        v65 = vcgt_u32(*(uint32x2_t *)_Q1.f32, *(uint32x2_t *)v27.f32);
        if (((v65.i32[1] | v65.i32[0]) & 1) != 0)
          goto LABEL_8;
        v166 = v25 << 32;
        v153 = _Q1.i32[1];
        v158 = _Q1.i32[0];
        v157 = v27.u32[1];
        v66 = v27.i32[0];
        v162 = v27.i32[0];
        while (2)
        {
          v67 = v153;
          v156 = v42;
          v160 = v42 * v154;
LABEL_50:
          v161 = v67;
          v68 = (v67 << v159) + v160;
          v69 = v158;
LABEL_52:
          while (2)
          {
            v70 = (v68 + v69);
            v71 = *(_DWORD *)&v168[4 * v70];
            if (v71)
            {
LABEL_58:
              *(_DWORD *)&v168[4 * v70] = v71 + 1;
              if (v28 < v15)
                goto LABEL_51;
            }
            else
            {
              v72 = *(_DWORD *)(v7 + 32);
              if (v72 >= 2)
              {
                v73 = v72 - 1;
                v74 = 2 * v72;
                v75 = v68 + v69;
                do
                {
                  v76 = v75 & ~(-1 << v72);
                  v77 = v75 >> v72;
                  v78 = v75 >> v74 >> 1;
                  v74 -= 2;
                  v79 = (v77 & ~(-1 << v72--)) >> 1;
                  v75 = (v78 << v74) + (v76 >> 1) + (v79 << v72);
                  v80 = (_DWORD *)(*(_QWORD *)(v7 + 48) + 8 * *(_QWORD *)(v26 + 8 * v73) + 8 * v75);
                  if ((*v80 & 1) == 0)
                    break;
                  *v80 &= 0xFFFFFFFC;
                  --v73;
                }
                while (v72 > 1);
                v71 = *(_DWORD *)&v168[4 * v70];
                goto LABEL_58;
              }
              *(_DWORD *)&v168[4 * v70] = 1;
              if (v28 < v15)
              {
LABEL_51:
                *(_QWORD *)v28 = v166 | v70;
                v28 += 8;
                if (++v69 > v66)
                  goto LABEL_49;
                continue;
              }
            }
            break;
          }
          v81 = (v28 - v14) >> 3;
          v82 = v81 + 1;
          if ((unint64_t)(v81 + 1) >> 61)
            sub_2233C8450();
          if ((v15 - v14) >> 2 > v82)
            v82 = (v15 - v14) >> 2;
          if ((unint64_t)(v15 - v14) >= 0x7FFFFFFFFFFFFFF8)
            v83 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v83 = v82;
          if (v83)
          {
            if (v83 >> 61)
              sub_223174E94();
            v84 = operator new(8 * v83);
          }
          else
          {
            v84 = 0;
          }
          v85 = &v84[8 * v81];
          *(_QWORD *)v85 = v166 | v70;
          v86 = v85 + 8;
          if (v28 != v14)
          {
            v87 = v28 - v14 - 8;
            if (v87 < 0x168
              || (v90 = (v28 - 8 - v14) & 0xFFFFFFFFFFFFFFF8, &v84[v28 - v14 - 8 - v90] > &v84[v28 - v14 - 8])
              || &v28[-v90 - 8] > v28 - 8
              || (unint64_t)(v14 - v84) < 0x20)
            {
              v88 = v28;
              v7 = (uint64_t)v164;
            }
            else
            {
              v91 = (v87 >> 3) + 1;
              v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
              v88 = &v28[-v92];
              v85 -= v92;
              v93 = (float32x4_t *)&v84[8 * v81 - 16];
              v94 = (float32x4_t *)(v28 - 16);
              v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                _Q1 = v94[-1];
                v27 = *v94;
                v93[-1] = _Q1;
                *v93 = v27;
                v93 -= 2;
                v94 -= 2;
                v95 -= 4;
              }
              while (v95);
              v7 = (uint64_t)v164;
              if (v91 == (v91 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_75:
                v15 = &v84[8 * v83];
                if (v14)
                  goto LABEL_76;
                goto LABEL_77;
              }
            }
            do
            {
              v89 = *((_QWORD *)v88 - 1);
              v88 -= 8;
              *((_QWORD *)v85 - 1) = v89;
              v85 -= 8;
            }
            while (v88 != v14);
            goto LABEL_75;
          }
          v7 = (uint64_t)v164;
          v15 = &v84[8 * v83];
          if (v14)
LABEL_76:
            operator delete(v14);
LABEL_77:
          v14 = v85;
          v28 = v86;
          v66 = v162;
          if (++v69 > v162)
          {
LABEL_49:
            v67 = v161 + 1;
            if (v161 + 1 > v157)
            {
              v42 = v156 + 1;
              if (v156 + 1 > v155)
                goto LABEL_8;
              continue;
            }
            goto LABEL_50;
          }
          goto LABEL_52;
        }
      }
      v44 = v27.i32[0] + v154 * v40 + (v27.i32[1] << v159);
      v45 = *(_DWORD *)&v168[4 * v44];
      if (v45)
        goto LABEL_28;
      v46 = *(_DWORD *)(v7 + 32);
      if (v46 >= 2)
        break;
      *(_DWORD *)&v168[4 * v44] = 1;
      if (v28 >= v15)
      {
LABEL_29:
        v55 = (v28 - v14) >> 3;
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 61)
          sub_2233C8450();
        if ((v15 - v14) >> 2 > v56)
          v56 = (v15 - v14) >> 2;
        if ((unint64_t)(v15 - v14) >= 0x7FFFFFFFFFFFFFF8)
          v57 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v57 = v56;
        if (v57)
        {
          if (v57 >> 61)
            sub_223174E94();
          v58 = operator new(8 * v57);
          v59 = &v58[8 * v55];
          *(_QWORD *)v59 = v44 | (v25 << 32);
          v60 = (uint64_t)(v59 + 8);
          v61 = v28 - v14;
          if (v28 != v14)
          {
LABEL_38:
            v62 = v61 - 8;
            if (v62 < 0x168
              || (v96 = (v28 - 8 - v14) & 0xFFFFFFFFFFFFFFF8, &v58[v28 - v14 - 8 - v96] > &v58[v28 - v14 - 8])
              || &v28[-v96 - 8] > v28 - 8
              || (unint64_t)(v14 - v58) < 0x20)
            {
              v63 = v28;
              v7 = (uint64_t)v164;
            }
            else
            {
              v97 = (v62 >> 3) + 1;
              v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v28[-v98];
              v59 -= v98;
              v99 = (float32x4_t *)&v58[8 * v55 - 16];
              v100 = (float32x4_t *)(v28 - 16);
              v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
              v7 = (uint64_t)v164;
              do
              {
                _Q1 = v100[-1];
                v27 = *v100;
                v99[-1] = _Q1;
                *v99 = v27;
                v99 -= 2;
                v100 -= 2;
                v101 -= 4;
              }
              while (v101);
              if (v97 == (v97 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_41:
                v15 = &v58[8 * v57];
                if (v14)
                  goto LABEL_42;
                goto LABEL_43;
              }
            }
            do
            {
              v64 = *((_QWORD *)v63 - 1);
              v63 -= 8;
              *((_QWORD *)v59 - 1) = v64;
              v59 -= 8;
            }
            while (v63 != v14);
            goto LABEL_41;
          }
        }
        else
        {
          v58 = 0;
          v59 = (char *)(8 * v55);
          *(_QWORD *)(8 * v55) = v44 | (v25 << 32);
          v60 = 8 * v55 + 8;
          v61 = v28 - v14;
          if (v28 != v14)
            goto LABEL_38;
        }
        v7 = (uint64_t)v164;
        v15 = &v58[8 * v57];
        if (v14)
LABEL_42:
          operator delete(v14);
LABEL_43:
        v14 = v59;
        v28 = (char *)v60;
        goto LABEL_8;
      }
LABEL_7:
      *(_QWORD *)v28 = v44 | (v25 << 32);
      v28 += 8;
LABEL_8:
      v24 = v151 + 3;
      v25 = (v152 + 1);
      if (v151 + 3 == v148)
      {
        v17 = v168;
        v18 = v169;
        if (v168 == v169)
          goto LABEL_109;
        goto LABEL_105;
      }
    }
    v47 = v46 - 1;
    v48 = 2 * v46;
    v49 = v44;
    do
    {
      v50 = v49 & ~(-1 << v46);
      v51 = v49 >> v46;
      v52 = v49 >> v48 >> 1;
      v48 -= 2;
      v53 = (v51 & ~(-1 << v46--)) >> 1;
      v49 = (v52 << v48) + (v50 >> 1) + (v53 << v46);
      v54 = (_DWORD *)(*(_QWORD *)(v7 + 48) + 8 * *(_QWORD *)(v26 + 8 * v47) + 8 * v49);
      if ((*v54 & 1) == 0)
        break;
      *v54 &= 0xFFFFFFFC;
      --v47;
    }
    while (v46 > 1);
    v45 = *(_DWORD *)&v168[4 * v44];
LABEL_28:
    *(_DWORD *)&v168[4 * v44] = v45 + 1;
    if (v28 >= v15)
      goto LABEL_29;
    goto LABEL_7;
  }
LABEL_104:
  v28 = v14;
  if (v17 == v18)
    goto LABEL_109;
LABEL_105:
  v102 = 0;
  v103 = 0;
  v104 = v17;
  do
  {
    v105 = *(_DWORD *)v104;
    if (*(_DWORD *)v104)
    {
      v106 = (int *)(*(_QWORD *)(v7 + 112) + v102);
      *v106 = (4 * v103) | 2;
      v106[1] = v105;
      v103 += *(_DWORD *)v104;
    }
    v104 += 4;
    v102 += 8;
  }
  while (v104 != v18);
LABEL_109:
  v107 = (v28 - v14) >> 3;
  v108 = *(_QWORD *)(v7 + 152);
  v109 = *(char **)(v7 + 160);
  v110 = &v109[-v108];
  v111 = (uint64_t)&v109[-v108] >> 2;
  v112 = (_QWORD *)v7;
  v113 = v107 - v111;
  if (v107 <= v111)
  {
    v126 = v112;
    if (v107 >= v111)
      goto LABEL_133;
    v127 = (char *)(v108 + 4 * v107);
    goto LABEL_124;
  }
  v114 = v112[21];
  if (v113 <= (v114 - (uint64_t)v109) >> 2)
  {
    bzero(v109, 4 * v113);
    v127 = &v109[4 * v113];
    v126 = v164;
LABEL_124:
    v126[20] = v127;
    goto LABEL_133;
  }
  if (v28 - v14 < 0)
    sub_2233C8450();
  v115 = v114 - v108;
  if (v115 >> 1 > v107)
    v107 = v115 >> 1;
  v116 = (v107 + 1023) & 0x3FFFFFFFFFFFFC00;
  if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
    v117 = 0;
  else
    v117 = v116;
  address[0] = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], address, 4 * v117, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v147 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v147, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v118 = v117;
  v120 = v164[19];
  v119 = v164[20];
  v121 = (char *)(address[0] + 4 * v111);
  v163 = address[0];
  v167 = address[0] + 4 * v118;
  v122 = 4 * v113;
  bzero(v121, v122);
  v123 = &v121[v122];
  if (v119 == v120)
  {
    v126 = v164;
    v125 = v167;
    goto LABEL_131;
  }
  v124 = v119 - v120 - 4;
  if (v124 < 0x2C)
  {
    v126 = v164;
    v125 = v167;
    do
    {
LABEL_130:
      v136 = *(_DWORD *)(v119 - 4);
      v119 -= 4;
      *((_DWORD *)v121 - 1) = v136;
      v121 -= 4;
    }
    while (v119 != v120);
    goto LABEL_131;
  }
  v128 = v119 - v163 - (_QWORD)v110;
  v126 = v164;
  v125 = v167;
  if (v128 < 0x20)
    goto LABEL_130;
  v129 = (v124 >> 2) + 1;
  v130 = 4 * (v129 & 0x7FFFFFFFFFFFFFF8);
  v131 = v119 - v130;
  v121 -= v130;
  v132 = (_OWORD *)(v163 + 4 * v111 - 16);
  v133 = (__int128 *)(v119 - 16);
  v134 = v129 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v135 = *v133;
    *(v132 - 1) = *(v133 - 1);
    *v132 = v135;
    v132 -= 2;
    v133 -= 2;
    v134 -= 8;
  }
  while (v134);
  v119 = v131;
  if (v129 != (v129 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_130;
LABEL_131:
  v126[19] = v121;
  v126[20] = v123;
  v137 = v126[21];
  v126[21] = v125;
  if (v120 && MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], v120, v137 - v120))
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)&unk_224584F5D, 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
    abort();
  }
LABEL_133:
  memset(address, 0, 24);
  v138 = v18 - v17;
  if (v18 == v17)
  {
    if (v14 == v28)
      goto LABEL_142;
    v139 = 0;
  }
  else
  {
    if (v138 < 0)
      sub_22316E078();
    v139 = operator new(v18 - v17);
    bzero(v139, v138 & 0xFFFFFFFFFFFFFFFCLL);
    if (v14 == v28)
      goto LABEL_141;
  }
  v140 = v126[14];
  v141 = v126[19];
  v142 = v14;
  do
  {
    *(_DWORD *)(v141
              + 4
              * (*((_DWORD *)v139 + *(unsigned int *)v142)
                             + (*(_DWORD *)(v140 + 8 * *(unsigned int *)v142) >> 2))) = *((_DWORD *)v142 + 1);
    v143 = *(_DWORD *)v142;
    v142 += 8;
    ++*((_DWORD *)v139 + v143);
  }
  while (v142 != v28);
LABEL_141:
  operator delete(v139);
  v18 = v168;
LABEL_142:
  v144 = v126[19];
  v126[17] = (v126[20] - v144) >> 2;
  v126[18] = v144;
  if (v18)
    operator delete(v18);
  if (v14)
    operator delete(v14);
  return v126;
}

void sub_2233C7E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  void *v27;
  void *v28;
  void *v30;

  if (v28)
    operator delete(v28);
  if (v27)
    operator delete(v27);
  sub_2233C7EEC(a9);
  *a22 = &off_24EC36140;
  v30 = (void *)a22[6];
  if (v30)
  {
    a22[7] = v30;
    operator delete(v30);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_2233C7EEC(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    if (MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], v2, a1[2] - v2))
    {
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)&unk_224584F5D, 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
      abort();
    }
  }
  return a1;
}

_QWORD *sub_2233C7F70(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24EC36160;
  v2 = a1[19];
  if (v2)
  {
    a1[20] = v2;
    if (MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], v2, a1[21] - v2))
    {
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)&unk_224584F5D, 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
      abort();
    }
  }
  *a1 = &off_24EC36140;
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_2233C801C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24EC36160;
  v2 = a1[19];
  if (!v2 || (a1[20] = v2, !MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], v2, a1[21] - v2)))
  {
    *a1 = &off_24EC36140;
    v3 = (void *)a1[6];
    if (v3)
    {
      a1[7] = v3;
      operator delete(v3);
    }
    JUMPOUT(0x227684CE8);
  }
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)&unk_224584F5D, 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
  abort();
}

uint64_t sub_2233C80D8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _QWORD *a5, float32x4_t a6, float32x4_t a7)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _DWORD *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  _DWORD *v34;

  v10 = sub_2233C6EDC(a1, a2, a3, a6, a7);
  *(_QWORD *)v10 = &off_24EC36180;
  *(_QWORD *)(v10 + 152) = 0;
  *(_QWORD *)(v10 + 160) = 0;
  *(_QWORD *)(v10 + 168) = 0;
  LODWORD(v11) = *(_DWORD *)(v10 + 32);
  v12 = (unint64_t)exp2((double)v11 * 3.0);
  if (*(_QWORD *)(a4 + 16) != v12)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/Octree.cpp", 180, (uint64_t)"num_leafs == leafs_primitive_extents.size()", 43, (uint64_t)&unk_224584F5D, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v12 = *(_QWORD *)(a4 + 16);
  }
  v13 = *(unint64_t **)a4;
  if (v12)
    v14 = v13 == 0;
  else
    v14 = 0;
  if (v14)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_224584F5D, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
  else if (!v12)
  {
    goto LABEL_9;
  }
  v22 = 0;
  v23 = &v13[v12];
  do
  {
    v24 = *v13;
    if (*v13)
    {
      v25 = (_DWORD *)(*(_QWORD *)(a1 + 112) + 8 * v22);
      *v25 = (v24 >> 30) & 0xFFFFFFFC | 2;
      v25[1] = v24;
      v26 = *(_DWORD *)(a1 + 32);
      if (v26 >= 2)
      {
        v27 = v26 - 1;
        v28 = 2 * v26;
        v29 = v22;
        do
        {
          v30 = v29 & ~(-1 << v26);
          v31 = v29 >> v26;
          v32 = v29 >> v28 >> 1;
          v28 -= 2;
          v33 = (v31 & ~(-1 << v26--)) >> 1;
          v29 = (v32 << v28) + (v30 >> 1) + (v33 << v26);
          v34 = (_DWORD *)(*(_QWORD *)(a1 + 48) + 8 * *(_QWORD *)(a1 + 72 + 8 * v27) + 8 * v29);
          if ((*v34 & 1) == 0)
            break;
          *v34 &= 0xFFFFFFFC;
          --v27;
        }
        while (v26 > 1);
      }
    }
    ++v13;
    ++v22;
  }
  while (v13 != v23);
LABEL_9:
  v15 = *(_QWORD *)(a1 + 152);
  v16 = *(_QWORD *)(a1 + 160);
  v17 = a5[1];
  *(_QWORD *)(a1 + 152) = *a5;
  *(_QWORD *)(a1 + 160) = v17;
  *a5 = v15;
  a5[1] = v16;
  v18 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = a5[2];
  a5[2] = v18;
  v19 = *(_QWORD *)(a1 + 152);
  v20 = *(_QWORD *)(a1 + 168);
  if (!v19
    && v20
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_224584F5D, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_QWORD *)(a1 + 136) = v20;
  *(_QWORD *)(a1 + 144) = v19;
  return a1;
}

void sub_2233C8310(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  sub_2233C8348(v2);
  *v1 = &off_24EC36140;
  v4 = (void *)v1[6];
  if (v4)
  {
    v1[7] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2233C8348(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    munmap(v2, *(_QWORD *)(a1 + 8));
    *(_QWORD *)a1 = 0;
  }
  return a1;
}

_QWORD *sub_2233C8380(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24EC36180;
  v2 = (void *)a1[19];
  if (v2)
  {
    munmap(v2, a1[20]);
    a1[19] = 0;
  }
  *a1 = &off_24EC36140;
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_2233C83E0(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24EC36180;
  v2 = (void *)a1[19];
  if (v2)
  {
    munmap(v2, a1[20]);
    a1[19] = 0;
  }
  *a1 = &off_24EC36140;
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x227684CE8);
}

void sub_2233C8450()
{
  sub_22316DBD4("vector");
}

uint64_t **sub_2233C8464(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = **a1;
    if (v3)
    {
      v2[1] = v3;
      if (MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], v3, v2[2] - v3))
      {
        sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)&unk_224584F5D, 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
        abort();
      }
    }
  }
  return a1;
}

uint64_t sub_2233C84F4(uint64_t a1)
{
  uint64_t v2;
  _DWORD v4[2];
  __int16 v5;
  int v6;
  __int16 v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 850045863;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  v4[0] = 3;
  v4[1] = 65793;
  v5 = 0;
  v6 = 16843009;
  v7 = 1;
  v8 = 1048576000;
  v2 = operator new();
  sub_223427C60(v2, v4);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v2;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 128;
  *(_DWORD *)(a1 + 144) = 1084227584;
  *(_BYTE *)(a1 + 148) = 0;
  return a1;
}

void sub_2233C85D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  MEMORY[0x227684CE8](v4, 0x1060C40EFCE1224);
  std::mutex::~mutex(v2);
  sub_2232D319C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_2233C8614(uint64_t a1, unsigned __int8 *a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 8;
  do
  {
    v7 = sub_22319835C((unsigned __int8 *)(v5 + 32), a2);
    if (v7 >= 0)
      v8 = (uint64_t *)v5;
    else
      v8 = (uint64_t *)(v5 + 8);
    if (v7 >= 0)
      v6 = v5;
    v5 = *v8;
  }
  while (*v8);
  if (v6 == a1 + 8 || (char)sub_22319835C(a2, (unsigned __int8 *)(v6 + 32)) < 0)
  {
LABEL_11:
    v9 = operator new();
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)v9 = v9 + 8;
    *(_QWORD *)(v9 + 24) = v9 + 32;
    *(_QWORD *)(v9 + 40) = 0;
    sub_2233C8858(v9 + 48, 3);
    *(_BYTE *)(v9 + 112) = 0;
    v13 = a2;
    v10 = sub_2233C8FB8((uint64_t **)a1, a2, (uint64_t)&unk_2245BA939, (_OWORD **)&v13);
    v11 = v10[6];
    v10[6] = v9;
    if (v11)
    {
      v12 = sub_2232D3200(v11);
      MEMORY[0x227684CE8](v12, 0x1060C40D4449886);
    }
    v13 = a2;
    *(_BYTE *)(sub_2233C8FB8((uint64_t **)a1, a2, (uint64_t)&unk_2245BA939, (_OWORD **)&v13)[6] + 112) = 0;
  }
  std::mutex::unlock(v4);
}

void sub_2233C8778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_2233C8814((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_2233C8794(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  uint64_t v3;

  sub_223198030(v3, *(_QWORD **)(v2 + 32));
  sub_223198030(v2, *(_QWORD **)(v2 + 8));
  MEMORY[0x227684CE8](v2, 0x1060C40D4449886);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2233C87D8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2233C87EC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2233C8800(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2233C8814(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_2232D3200(v2);
    MEMORY[0x227684CE8](v3, 0x1060C40D4449886);
  }
  return a1;
}

uint64_t sub_2233C8858(uint64_t a1, char a2)
{
  char *v4;
  char *v5;
  _QWORD *v6;
  char *v7;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  if ((a2 & 1) != 0)
  {
    v4 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = &off_24EC361F0;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 152) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *((_DWORD *)v4 + 14) = 1065353216;
    *((_QWORD *)v4 + 10) = 0;
    *((_QWORD *)v4 + 11) = 0;
    *((_QWORD *)v4 + 9) = 0;
    *((_QWORD *)v4 + 8) = v4 + 72;
    *((_QWORD *)v4 + 12) = 0;
    *((_QWORD *)v4 + 13) = 0;
    *((_QWORD *)v4 + 15) = 0;
    *((_QWORD *)v4 + 16) = 0;
    *((_QWORD *)v4 + 17) = 0;
    *(_QWORD *)a1 = v4 + 24;
    *(_QWORD *)(a1 + 8) = v4;
  }
  if ((a2 & 2) != 0)
  {
    v5 = (char *)operator new(0x38uLL);
    *((_QWORD *)v5 + 1) = 0;
    *((_QWORD *)v5 + 2) = 0;
    *(_QWORD *)v5 = &off_24EC36240;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_QWORD *)(a1 + 16) = v5 + 24;
    *(_QWORD *)(a1 + 24) = v5;
  }
  if ((a2 & 4) != 0)
  {
    v6 = operator new(0x30uLL);
    v6[1] = 0;
    v6[2] = 0;
    *v6 = &off_24EC36290;
    v6[4] = 0;
    v6[5] = 0;
    v6[3] = v6 + 4;
    *(_QWORD *)(a1 + 32) = v6 + 3;
    *(_QWORD *)(a1 + 40) = v6;
  }
  if ((a2 & 8) != 0)
  {
    v7 = (char *)operator new(0xA0uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &off_24EC362E0;
    *((_OWORD *)v7 + 3) = 0u;
    *((_OWORD *)v7 + 4) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_OWORD *)v7 + 6) = 0u;
    *((_OWORD *)v7 + 7) = 0u;
    *((_OWORD *)v7 + 8) = 0u;
    *((_OWORD *)v7 + 2) = 0u;
    *((_QWORD *)v7 + 3) = v7 + 32;
    *((_OWORD *)v7 + 9) = 0u;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 6) = v7 + 56;
    *(_OWORD *)(v7 + 120) = unk_2245F5208;
    *(_OWORD *)(v7 + 104) = xmmword_2245F51F8;
    *(_OWORD *)(v7 + 88) = unk_2245F51E8;
    *(_OWORD *)(v7 + 72) = xmmword_2245F51D8;
    *(_QWORD *)(a1 + 48) = v7 + 24;
    *(_QWORD *)(a1 + 56) = v7;
  }
  return a1;
}

void sub_2233C89F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_223167354(v4);
  sub_223167354(v3);
  sub_223167354(v2);
  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2233C8A2C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC361F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2233C8A3C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC361F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2233C8A6C(uint64_t a1)
{
  return sub_2233C8A78(a1 + 24);
}

uint64_t sub_2233C8A78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v2 = *(_QWORD *)(a1 + 96);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 104);
    v4 = *(void **)(a1 + 96);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 96);
    }
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v4);
  }
  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 72);
    v8 = *(void **)(a1 + 64);
    if (v7 != v6)
    {
      do
      {
        v9 = *(void **)(v7 - 24);
        if (v9)
        {
          *(_QWORD *)(v7 - 16) = v9;
          operator delete(v9);
        }
        v7 -= 40;
      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v6;
    operator delete(v8);
  }
  sub_2231F5848(a1 + 40, *(_QWORD **)(a1 + 48));
  v10 = *(_QWORD **)(a1 + 16);
  while (v10)
  {
    v13 = v10;
    v10 = (_QWORD *)*v10;
    v14 = (std::__shared_weak_count *)v13[5];
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    operator delete(v13);
  }
  v11 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v11)
    operator delete(v11);
  return a1;
}

void sub_2233C8BA4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2233C8BB4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36240;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2233C8BE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    return;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(a1 + 24);
  if (v3 == v1)
    goto LABEL_15;
  do
  {
    if (!*(_BYTE *)(v3 - 8))
      goto LABEL_10;
    v5 = *(std::__shared_weak_count **)(v3 - 16);
    if (!v5)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (v7)
    {
LABEL_10:
      v8 = *(unsigned int *)(v3 - 144);
      if ((_DWORD)v8 == -1)
        goto LABEL_4;
LABEL_11:
      ((void (*)(char *, uint64_t))off_24EC361D0[v8])(&v9, v3 - 160);
      goto LABEL_4;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = *(unsigned int *)(v3 - 144);
    if ((_DWORD)v8 != -1)
      goto LABEL_11;
LABEL_4:
    *(_DWORD *)(v3 - 144) = -1;
    v3 -= 192;
  }
  while (v3 != v1);
  v4 = *(void **)(a1 + 24);
LABEL_15:
  *(_QWORD *)(a1 + 32) = v1;
  operator delete(v4);
}

void sub_2233C8CD8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_2233C8D30(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_2233C8D88(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2233C8D98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2233C8DC8(uint64_t a1)
{
  sub_2231F5848(a1 + 24, *(_QWORD **)(a1 + 32));
}

void sub_2233C8DDC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC362E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2233C8DEC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC362E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2233C8E1C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 24;
  sub_2233C8E54(a1 + 48, *(_QWORD **)(a1 + 56));
  sub_2233C8E54(v2, *(_QWORD **)(a1 + 32));
}

void sub_2233C8E54(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_2233C8E54(a1, *a2);
    sub_2233C8E54(a1, a2[1]);
    sub_223173E64(a2 + 6);
    operator delete(a2);
  }
}

uint64_t sub_2233C8E9C(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v6;
  char v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (unsigned __int8 *)(a1 + 1);
  v3 = a1[1];
  if (!v3)
    return 0;
  v6 = (unsigned __int8 *)(a1 + 1);
  do
  {
    v7 = sub_22319835C(v3 + 32, a2);
    if (v7 >= 0)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7 >= 0)
      v6 = v3;
    v3 = (unsigned __int8 *)*v8;
  }
  while (*v8);
  if (v6 == v2 || (sub_22319835C(a2, v6 + 32) & 0x80) != 0)
    return 0;
  v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  if (v9)
  {
    do
    {
      v10 = v9;
      v9 = *(unsigned __int8 **)v9;
    }
    while (v9);
  }
  else
  {
    v12 = v6;
    do
    {
      v10 = (unsigned __int8 *)*((_QWORD *)v12 + 2);
      v13 = *(_QWORD *)v10 == (_QWORD)v12;
      v12 = v10;
    }
    while (!v13);
  }
  if (*a1 == v6)
    *a1 = v10;
  v14 = (uint64_t *)a1[1];
  --a1[2];
  sub_2231AFE60(v14, (uint64_t *)v6);
  v15 = *((_QWORD *)v6 + 6);
  *((_QWORD *)v6 + 6) = 0;
  if (v15)
  {
    v16 = sub_2232D3200(v15);
    MEMORY[0x227684CE8](v16, 0x1060C40D4449886);
  }
  operator delete(v6);
  return 1;
}

uint64_t *sub_2233C8FB8(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v9;
  unsigned __int8 *v10;
  _OWORD *v12;
  uint64_t *v13;
  uint64_t *v14;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = (unsigned __int8 *)(v6 + 4);
        if ((sub_22319835C(a2, (unsigned __int8 *)v6 + 32) & 0x80) == 0)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_11;
      }
      if ((sub_22319835C(v10, a2) & 0x80) == 0)
        break;
      v7 = v9 + 1;
      v6 = v9[1];
      if (!v6)
        goto LABEL_11;
    }
    if (*v7)
      return *v7;
  }
  else
  {
    v9 = a1 + 1;
  }
LABEL_11:
  v12 = operator new(0x38uLL);
  v12[2] = **a4;
  *((_QWORD *)v12 + 6) = 0;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = v9;
  *v7 = (uint64_t *)v12;
  v13 = (uint64_t *)**a1;
  v14 = (uint64_t *)v12;
  if (v13)
  {
    *a1 = v13;
    v14 = *v7;
  }
  sub_2231A9A8C(a1[1], v14);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t *)v12;
}

uint64_t sub_2233C90C8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, float32x4_t a5@<Q0>, int8x16_t a6@<Q1>, float32x4_t a7@<Q2>, int8x16_t a8@<Q3>, float32x4_t a9@<Q4>, int32x4_t a10@<Q5>, int8x16_t a11@<Q6>, float32x4_t a12@<Q7>)
{
  float32x4_t v12;
  float32x2_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  float32x2_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int8x16_t v20;
  unint64_t v21;
  float32x2_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x2_t v28;
  int8x16_t v29;
  float32x2_t v30;
  unsigned __int8 *v31;
  float32x2_t v32;
  float v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  int32x4_t v37;
  float v38;
  int32x2_t v40;
  int v41;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  float32x2_t v52;
  float32x2_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  const char *v58;
  size_t v59;
  unsigned __int8 v60;
  _QWORD *v61;
  float32x2_t *v62;
  float32x4_t v63;
  unint64_t v64;
  int v67;
  unint64_t v68;
  BOOL v69;
  uint64_t v70;
  size_t v71;
  const char *v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  const char *v75;
  size_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  size_t v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  size_t v89;
  size_t v90;
  _QWORD *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  char v96;
  _QWORD *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  char *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  _QWORD *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unsigned __int8 v141;
  const char *v142;
  size_t v143;
  _BYTE *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  NSObject *v150;
  size_t v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  size_t v154;
  size_t v155;
  _QWORD *v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  char v161;
  _QWORD *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *p_shared_owners;
  unint64_t v166;
  char *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  const char *v182;
  void *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  _QWORD *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  __int16 v208;
  float32x2_t v209;
  float32x4_t v210;
  __int16 v211;
  unint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  char *v215;
  _QWORD *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  char *v222;
  char *v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  const char *__src;
  int v235;
  int8x16_t v236;
  float32x2_t v237;
  int8x16_t v238;
  float32x4_t v239;
  float32x2_t v240;
  float32x2_t v241;
  int8x16_t v242;
  const char *v243;
  float32x4_t v244;
  unint64_t v245;
  uint64_t *v246;
  uint64_t *v247;
  _QWORD *v248;
  int8x16_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  float32x4_t v253;
  int8x16_t v254;
  uint64_t v255;
  __n128 v256;
  int8x16_t v257;
  float32x4_t v258;
  __n128 v259;
  float32x4_t v260;
  uint64_t *v261;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v263;
  int v264;
  const char *v265;
  int v266;
  const char *v267;
  uint64_t v268;
  std::__shared_weak_count *v269;
  uint64_t v270;
  void *__p[2];
  std::__shared_weak_count *v272;
  char *v273;
  std::__shared_weak_count *v274;
  _QWORD *v275;
  __int128 v276;
  char __s[37];
  _BYTE v278[24];
  __int128 v279;
  char *v280;
  size_t v281;
  unint64_t v282;
  char v283;
  _QWORD v284[5];

  v14 = a4;
  v284[2] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 28) & 1) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  v15 = a2;
  v16 = (_QWORD *)result;
  a7.i32[0] = *(_DWORD *)(a3 + 8);
  a9.i64[0] = *(_QWORD *)a3;
  a8.i32[0] = *(_DWORD *)(a3 + 24);
  a10.i64[0] = *(_QWORD *)(a3 + 16);
  a6.i32[0] = *(_DWORD *)(a3 + 40);
  a11.i64[0] = *(_QWORD *)(a3 + 32);
  v12.i64[0] = *(_QWORD *)(a3 + 48);
  v12.i32[2] = *(_DWORD *)(a3 + 56);
  v17 = *(float32x2_t *)a2;
  v13.i32[0] = *(_DWORD *)(a2 + 8);
  a12.i64[0] = *(_QWORD *)(a2 + 12);
  a12.i32[2] = *(_DWORD *)(a2 + 20);
  a5.i64[0] = *(_QWORD *)(a2 + 24);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v18 = (_QWORD *)(result + 48);
  v19 = *(_QWORD **)(result + 40);
  if (v19 != (_QWORD *)(result + 48))
  {
    v20 = a11;
    v20.i32[2] = a6.i32[0];
    v21 = vzip1q_s32((int32x4_t)a9, a10).u64[0];
    a10.i32[2] = a8.i32[0];
    a9.i32[2] = a7.i32[0];
    v22 = (float32x2_t)vtrn2q_s32((int32x4_t)a9, a10).u64[0];
    v23 = (int8x16_t)vnegq_f32(v12);
    v240 = (float32x2_t)vzip2q_s32((int32x4_t)a9, a10).u64[0];
    v241 = (float32x2_t)v21;
    *(float32x2_t *)v24.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)a9.f32, *(int32x2_t *)a10.i8), *(float *)v23.i32), v22, *(float32x2_t *)v12.f32, 1), v240, v12, 2);
    *(float32x2_t *)&v24.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)a11.i8, *(float32x2_t *)v23.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a11.i8, 1), *(float32x2_t *)v12.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL), *(float32x2_t *)a6.i8);
    v238 = vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v22, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v22, 1), 0xCuLL);
    v239 = v24;
    *(float32x2_t *)v25.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a9.f32, v17.f32[0]), *(float32x2_t *)a10.i8, v17, 1), *(float32x2_t *)a11.i8, v13.f32[0]);
    *(float32x2_t *)&v25.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, v17), *(float32x2_t *)a8.i8, v17, 1), v13, *(float32x2_t *)a6.i8);
    v26 = (int8x16_t)vaddq_f32(v12, v25);
    *(float32x2_t *)v27.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a9.f32, a12.f32[0]), *(float32x2_t *)a10.i8, *(float32x2_t *)a12.f32, 1), *(float32x2_t *)a11.i8, a12, 2);
    *(float32x2_t *)&v27.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a12.f32), *(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 8uLL), *(float32x2_t *)a6.i8);
    v28 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1);
    a8 = vextq_s8(v26, v26, 8uLL);
    v259 = (__n128)a8;
    v260 = (float32x4_t)v26;
    a7 = vmlaq_n_f32((float32x4_t)v26, vmulq_n_f32(v27, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.f32, 1), *(float32x2_t *)v27.f32, 1), *(float32x2_t *)&v27.u32[2], *(float32x2_t *)&v27.u32[2]).f32[0])), a5.f32[0]);
    v29 = (int8x16_t)vsubq_f32(a7, (float32x4_t)v26);
    v30 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1);
    v258 = (float32x4_t)v29;
    v257 = vextq_s8(v29, v29, 8uLL);
    v237 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a11.i8, 1);
    v242 = v20;
    v236 = vextq_s8(v20, v20, 8uLL);
    v248 = (_QWORD *)result;
    while (1)
    {
      v31 = (unsigned __int8 *)v19[6];
      a7.i32[0] = *((_DWORD *)v31 + 9);
      a8.i64[0] = *(_QWORD *)(v31 + 28);
      a5 = (float32x4_t)a8;
      a5.i32[2] = a7.i32[0];
      v32 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a8.i8, 1);
      *(float32x2_t *)a9.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a8.i8), v32, *(float32x2_t *)a8.i8, 1), *(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32);
      if (a9.f32[0] == 1.0)
        break;
      v33 = a9.f32[0] + -1.0;
      if (a9.f32[0] < 1.0)
        v33 = 1.0 - a9.f32[0];
      if (v33 <= 0.000001)
        break;
      a12.f32[0] = 1.0 / sqrtf(a9.f32[0]);
      a6 = (int8x16_t)vmulq_n_f32(a5, a12.f32[0]);
      a9.i32[0] = *((_DWORD *)v31 + 6);
      a10.i64[0] = *((_QWORD *)v31 + 2);
      v34 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.i8, 1);
      v35 = (float32x2_t)vextq_s8(a6, a6, 8uLL).u64[0];
      *(float32x2_t *)a11.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a10.i8, *(float32x2_t *)a6.i8), v34, *(float32x2_t *)a10.i8, 1), v35, *(float32x2_t *)a9.f32);
      a5.i64[1] = v260.i64[1];
      *(float32x2_t *)a5.f32 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v260.f32, *(float32x2_t *)a6.i8), v28, *(float32x2_t *)a6.i8, 1), v35, (float32x2_t)v259.n128_u64[0]), *(float32x2_t *)a11.i8);
      if (a5.f32[0] < 0.0)
        goto LABEL_312;
      v36 = vmul_lane_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)a8.i8, 1);
      v37.i64[0] = a6.i64[0];
      v37.u64[1] = (unint64_t)v36;
      *(float32x2_t *)a12.f32 = vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a12.f32);
      a5 = (float32x4_t)vuzp1q_s32(v37, (int32x4_t)a12);
      *(float32x2_t *)a7.f32 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)a6.i8, *(float32x2_t *)a6.i8), v34, v36), v35, *(float32x2_t *)a12.f32);
      if (a7.f32[0] != 1.0)
      {
        v38 = a7.f32[0] + -1.0;
        if (a7.f32[0] < 1.0)
          v38 = 1.0 - a7.f32[0];
        if (v38 > 0.000001)
        {
          v36.f32[0] = sqrtf(a7.f32[0]);
          a7 = vmulq_n_f32((float32x4_t)a6, 1.0 / v36.f32[0]);
          a7.f32[0] = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a10.i8, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a10.i8, 1), *(float32x2_t *)a7.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL), *(float32x2_t *)a9.f32).f32[0];
          a5 = vdivq_f32((float32x4_t)a6, (float32x4_t)vdupq_lane_s32((int32x2_t)v36, 0));
LABEL_18:
          a6 = (int8x16_t)a5;
          goto LABEL_19;
        }
      }
      a7.f32[0] = -*(float *)a11.i32;
LABEL_19:
      a8 = vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL);
      a10 = (int32x4_t)v257;
      *(float32x2_t *)a9.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.f32, *(float32x2_t *)v258.f32), v30, *(float32x2_t *)a5.f32, 1), *(float32x2_t *)v257.i8, *(float32x2_t *)a8.i8);
      *(float *)a10.i32 = fabsf(a9.f32[0]);
      if (*(float *)a10.i32 < 0.00000011921)
        goto LABEL_312;
      *(int32x2_t *)a10.i8 = vdup_lane_s32(*(int32x2_t *)a5.f32, 1);
      a7.f32[0] = -a7.f32[0];
      a11 = (int8x16_t)vmlsq_lane_f32(v260, (float32x4_t)a6, *(float32x2_t *)a7.f32, 0);
      a6 = vextq_s8(a11, a11, 8uLL);
      *(float32x2_t *)a5.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.f32, *(float32x2_t *)a11.i8), *(float32x2_t *)a10.i8, *(float32x2_t *)a11.i8, 1), *(float32x2_t *)a6.i8, *(float32x2_t *)a8.i8);
      a5.f32[0] = (float)-a5.f32[0] / a9.f32[0];
      if (a5.f32[0] < 0.0 || a5.f32[0] > 1.0)
        goto LABEL_312;
      a6.i64[1] = v258.i64[1];
      a7 = vmlaq_n_f32(v260, v258, a5.f32[0]);
      v254 = (int8x16_t)a7;
      if (v31[320])
      {
        v40 = *(int32x2_t *)(v31 + 40);
        v41 = *((_DWORD *)v31 + 12);
        a8.i64[0] = *((_QWORD *)v31 + 7);
        a5.i64[0] = *((_QWORD *)v31 + 11);
        a5.i32[2] = *((_DWORD *)v31 + 24);
        a9 = vsubq_f32((float32x4_t)v254, a5);
        *(float32x2_t *)a5.f32 = vmul_n_f32((float32x2_t)vzip1_s32(v40, *(int32x2_t *)a8.i8), a9.f32[0]);
        *(int32x2_t *)a6.i8 = vzip2_s32(v40, *(int32x2_t *)a8.i8);
        a7.i32[1] = *((_DWORD *)v31 + 16);
        *(float32x2_t *)a5.f32 = vmla_laneq_f32(vmla_lane_f32(*(float32x2_t *)a5.f32, *(float32x2_t *)a6.i8, *(float32x2_t *)a9.f32, 1), *(float32x2_t *)a7.f32, a9, 2);
        a6.i32[0] = *((_DWORD *)v31 + 76);
        a7.i32[0] = *((_DWORD *)v31 + 78);
        if (a5.f32[0] < *(float *)a6.i32 || a5.f32[0] > a7.f32[0])
          goto LABEL_312;
        a5.i32[0] = a5.i32[1];
        a6.i32[0] = *((_DWORD *)v31 + 77);
        a7.i32[0] = *((_DWORD *)v31 + 79);
        if (a5.f32[1] < *(float *)a6.i32 || a5.f32[1] > a7.f32[0])
          goto LABEL_312;
      }
      v45 = (unsigned __int8 *)v16[8];
      v44 = (unsigned __int8 *)v16[9];
      if (v44 == v45)
        goto LABEL_62;
      v46 = 0xCCCCCCCCCCCCCCCDLL * ((v44 - v45) >> 3);
      do
      {
        v47 = v46 >> 1;
        v48 = &v45[40 * (v46 >> 1)];
        v49 = *v48;
        v50 = *v31;
        if (v49 != v50)
          goto LABEL_53;
        v49 = v48[1];
        v50 = v31[1];
        if (v49 != v50)
          goto LABEL_53;
        v49 = v48[2];
        v50 = v31[2];
        if (v49 != v50)
          goto LABEL_53;
        v49 = v48[3];
        v50 = v31[3];
        if (v49 != v50)
          goto LABEL_53;
        v49 = v48[4];
        v50 = v31[4];
        if (v49 != v50)
          goto LABEL_53;
        v49 = v48[5];
        v50 = v31[5];
        if (v49 != v50)
          goto LABEL_53;
        v49 = v48[6];
        v50 = v31[6];
        if (v49 != v50)
          goto LABEL_53;
        v49 = v48[7];
        v50 = v31[7];
        if (v49 != v50)
          goto LABEL_53;
        v49 = v48[8];
        v50 = v31[8];
        if (v49 != v50)
          goto LABEL_53;
        v49 = v48[9];
        v50 = v31[9];
        if (v49 != v50)
          goto LABEL_53;
        v49 = v48[10];
        v50 = v31[10];
        if (v49 != v50)
          goto LABEL_53;
        v49 = v48[11];
        v50 = v31[11];
        if (v49 != v50)
          goto LABEL_53;
        v49 = v48[12];
        v50 = v31[12];
        if (v49 != v50
          || (v49 = v48[13], v50 = v31[13], v49 != v50)
          || (v49 = v48[14], v50 = v31[14], v49 != v50)
          || (v49 = v48[15], v50 = v31[15], v49 != v50))
        {
LABEL_53:
          if (v49 < v50)
          {
            v47 = v46 + ~v47;
            v45 = v48 + 40;
          }
        }
        v46 = v47;
      }
      while (v47);
      if (v44 == v45
        || (char)sub_22319835C(v45, v31) < 0
        || (char)sub_22319835C(v31, v45) < 0
        || v45 == (unsigned __int8 *)v16[9])
      {
LABEL_62:
        sub_2233CB4D4(&v270);
        if (**(int **)(v270 + 56) > 5)
          goto LABEL_312;
        v54 = *(unsigned __int8 *)(v270 + 72);
        v55 = sub_22322F254(v270, "OSLogSurrogateAppender", 1, 0);
        v56 = v55;
        if (!v54 && !v55)
          goto LABEL_312;
        v252 = v54;
        v261 = &v270;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v263 = std::chrono::system_clock::now().__d_.__rep_;
        v264 = 5;
        v265 = "unknown file";
        v266 = 60;
        v267 = "unknown function";
        v268 = 0;
        v269 = 0;
        v247 = v14;
        sub_2245664AC(v31, __s);
        v255 = v15;
        v57 = *v261;
        v58 = (const char *)(*v261 + 16);
        v250 = *v261;
        v243 = v58;
        if (*(char *)(*v261 + 39) < 0)
        {
          v58 = *(const char **)(v57 + 16);
          v59 = *(_QWORD *)(v57 + 24);
          v141 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v141 & 1) == 0)
          {
LABEL_338:
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)__p);
              sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
              if ((_BYTE)v273 && SHIBYTE(v272) < 0)
                operator delete(__p[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
          }
        }
        else
        {
          v59 = *(unsigned __int8 *)(*v261 + 39);
          v60 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v60 & 1) == 0)
            goto LABEL_338;
        }
        if (byte_255788F57 >= 0)
          v142 = (const char *)&xmmword_255788F40;
        else
          v142 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v143 = byte_255788F57;
        else
          v143 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)v278 = os_log_create(v142, v58);
        if (v143 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v143 >= 0x17)
        {
          v145 = (v143 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v143 | 7) != 0x17)
            v145 = v143 | 7;
          v146 = v145 + 1;
          v144 = operator new(v145 + 1);
          *(_QWORD *)&v278[16] = v143;
          *(_QWORD *)&v279 = v146 | 0x8000000000000000;
          *(_QWORD *)&v278[8] = v144;
        }
        else
        {
          BYTE7(v279) = v143;
          v144 = &v278[8];
          if (!v143)
          {
LABEL_219:
            v144[v143] = 0;
            BYTE8(v279) = 1;
            if (v59 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v14 = v247;
            v16 = v248;
            if (v59 >= 0x17)
            {
              v148 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v59 | 7) != 0x17)
                v148 = v59 | 7;
              v149 = v148 + 1;
              v147 = (char *)operator new(v148 + 1);
              v281 = v59;
              v282 = v149 | 0x8000000000000000;
              v280 = v147;
            }
            else
            {
              HIBYTE(v282) = v59;
              v147 = (char *)&v280;
              if (!v59)
              {
LABEL_227:
                v147[v59] = 0;
                v283 = 1;
                v150 = *(NSObject **)v278;
                if (SHIBYTE(v282) < 0)
                  operator delete(v280);
                v15 = v255;
                if (BYTE8(v279) && SBYTE7(v279) < 0)
                  operator delete(*(void **)&v278[8]);
                if (*(_QWORD *)v278)
                  os_release(*(void **)v278);
                if (v56 && *(_QWORD *)(v56 + 24))
                {
                  v151 = _os_log_pack_size();
                  v152 = (std::__shared_weak_count_vtbl *)operator new(v151, (std::align_val_t)8uLL);
                  v153 = (std::__shared_weak_count *)operator new();
                  v153->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                  v153->__shared_owners_ = 0;
                  v153->__shared_weak_owners_ = 0;
                  v153[1].__vftable = v152;
                  __p[0] = v152;
                  __p[1] = v152;
                  v272 = v153;
                  v273 = 0;
                  v274 = 0;
                  v154 = strlen(__s);
                  if (v154 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v155 = v154;
                  if (v154 >= 0x17)
                  {
                    v158 = (v154 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v154 | 7) != 0x17)
                      v158 = v154 | 7;
                    v159 = v158 + 1;
                    v156 = operator new(v158 + 1);
                    *(_QWORD *)&v276 = v155;
                    *((_QWORD *)&v276 + 1) = v159 | 0x8000000000000000;
                    v275 = v156;
                  }
                  else
                  {
                    HIBYTE(v276) = v154;
                    v156 = &v275;
                    if (!v154)
                      goto LABEL_246;
                  }
                  memcpy(v156, __s, v155);
LABEL_246:
                  *((_BYTE *)v156 + v155) = 0;
                  v160 = v275;
                  v284[0] = v276;
                  *(_QWORD *)((char *)v284 + 7) = *(_QWORD *)((char *)&v276 + 7);
                  v161 = HIBYTE(v276);
                  v162 = operator new(0x38uLL);
                  v162[1] = 0;
                  v162[2] = 0;
                  v162[3] = off_24EC1FA48;
                  *v162 = &off_24EC1F9F8;
                  v163 = v284[0];
                  v162[4] = v160;
                  v162[5] = v163;
                  *(_QWORD *)((char *)v162 + 47) = *(_QWORD *)((char *)v284 + 7);
                  *((_BYTE *)v162 + 55) = v161;
                  v284[0] = 0;
                  *(_QWORD *)((char *)v284 + 7) = 0;
                  v164 = v274;
                  v273 = (char *)(v162 + 3);
                  v274 = (std::__shared_weak_count *)v162;
                  v16 = v248;
                  if (v164)
                  {
                    p_shared_owners = (unint64_t *)&v164->__shared_owners_;
                    do
                      v166 = __ldaxr(p_shared_owners);
                    while (__stlxr(v166 - 1, p_shared_owners));
                    if (!v166)
                    {
                      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                      std::__shared_weak_count::__release_weak(v164);
                    }
                  }
                  *(_OWORD *)v278 = *(_OWORD *)__p;
                  v167 = v273;
                  *(_QWORD *)&v278[16] = v272;
                  if (v272)
                  {
                    v168 = (unint64_t *)&v272->__shared_owners_;
                    do
                      v169 = __ldxr(v168);
                    while (__stxr(v169 + 1, v168));
                  }
                  v170 = v274;
                  *(_QWORD *)&v279 = v167;
                  *((_QWORD *)&v279 + 1) = v274;
                  if (v274)
                  {
                    v171 = (unint64_t *)&v274->__shared_owners_;
                    do
                      v172 = __ldxr(v171);
                    while (__stxr(v172 + 1, v171));
                    v280 = v167;
                    do
                      v173 = __ldaxr(v171);
                    while (__stlxr(v173 - 1, v171));
                    if (!v173)
                    {
                      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                      std::__shared_weak_count::__release_weak(v170);
                    }
                  }
                  else
                  {
                    v280 = v167;
                  }
                  v174 = v272;
                  if (v272)
                  {
                    v175 = (unint64_t *)&v272->__shared_owners_;
                    do
                      v176 = __ldaxr(v175);
                    while (__stlxr(v176 - 1, v175));
                    if (!v176)
                    {
                      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                      std::__shared_weak_count::__release_weak(v174);
                    }
                  }
                  v177 = *(_QWORD *)v278;
                  if (v280[31] >= 0)
                    v178 = v280 + 8;
                  else
                    v178 = (char *)*((_QWORD *)v280 + 1);
                  v179 = _os_log_pack_fill();
                  *(_DWORD *)v179 = 68157954;
                  *(_DWORD *)(v179 + 4) = 13;
                  *(_WORD *)(v179 + 8) = 2080;
                  *(_QWORD *)(v179 + 10) = v178;
                  v180 = (char *)operator new();
                  v181 = *(unsigned __int8 *)(v250 + 39);
                  v182 = v243;
                  if ((v181 & 0x80u) != 0)
                  {
                    v182 = *(const char **)(v250 + 16);
                    v181 = *(_QWORD *)(v250 + 24);
                  }
                  *(_QWORD *)v180 = v177;
                  *(_OWORD *)(v180 + 8) = *(_OWORD *)&v278[8];
                  *(_QWORD *)&v278[8] = 0;
                  *(_QWORD *)&v278[16] = 0;
                  *(_OWORD *)(v180 + 24) = v279;
                  v279 = 0uLL;
                  *((_QWORD *)v180 + 5) = v182;
                  *((_QWORD *)v180 + 6) = v181;
                  v180[56] = 16;
                  v275 = 0;
                  __p[0] = v180;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v56 + 24) + 40))(*(_QWORD *)(v56 + 24), __p);
                  v183 = __p[0];
                  __p[0] = 0;
                  if (v183)
                  {
                    v184 = (std::__shared_weak_count *)*((_QWORD *)v183 + 4);
                    if (v184)
                    {
                      v185 = (unint64_t *)&v184->__shared_owners_;
                      do
                        v186 = __ldaxr(v185);
                      while (__stlxr(v186 - 1, v185));
                      if (!v186)
                      {
                        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                        std::__shared_weak_count::__release_weak(v184);
                      }
                    }
                    v187 = (std::__shared_weak_count *)*((_QWORD *)v183 + 2);
                    if (v187)
                    {
                      v188 = (unint64_t *)&v187->__shared_owners_;
                      do
                        v189 = __ldaxr(v188);
                      while (__stlxr(v189 - 1, v188));
                      if (!v189)
                      {
                        ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                        std::__shared_weak_count::__release_weak(v187);
                      }
                    }
                    MEMORY[0x227684CE8](v183, 0x10F0C40B62ED6C6);
                    v190 = v275;
                    v275 = 0;
                    if (v190)
                    {
                      v191 = (std::__shared_weak_count *)v190[4];
                      if (v191)
                      {
                        v192 = (unint64_t *)&v191->__shared_owners_;
                        do
                          v193 = __ldaxr(v192);
                        while (__stlxr(v193 - 1, v192));
                        if (!v193)
                        {
                          ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                          std::__shared_weak_count::__release_weak(v191);
                        }
                      }
                      v194 = (std::__shared_weak_count *)v190[2];
                      if (v194)
                      {
                        v195 = (unint64_t *)&v194->__shared_owners_;
                        do
                          v196 = __ldaxr(v195);
                        while (__stlxr(v196 - 1, v195));
                        if (!v196)
                        {
                          ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                          std::__shared_weak_count::__release_weak(v194);
                        }
                      }
                      MEMORY[0x227684CE8](v190, 0x10F0C40B62ED6C6);
                    }
                  }
                  v197 = (std::__shared_weak_count *)*((_QWORD *)&v279 + 1);
                  if (*((_QWORD *)&v279 + 1))
                  {
                    v198 = (unint64_t *)(*((_QWORD *)&v279 + 1) + 8);
                    do
                      v199 = __ldaxr(v198);
                    while (__stlxr(v199 - 1, v198));
                    if (!v199)
                    {
                      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                      std::__shared_weak_count::__release_weak(v197);
                    }
                  }
                  v200 = *(std::__shared_weak_count **)&v278[16];
                  if (*(_QWORD *)&v278[16])
                  {
                    v201 = (unint64_t *)(*(_QWORD *)&v278[16] + 8);
                    do
                      v202 = __ldaxr(v201);
                    while (__stlxr(v202 - 1, v201));
                    if (!v202)
                    {
                      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                      std::__shared_weak_count::__release_weak(v200);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v150, OS_LOG_TYPE_ERROR);
                  *(_QWORD *)v278 = 0xD04100202;
                  *(_WORD *)&v278[8] = 2080;
                  *(_QWORD *)&v278[10] = __s;
                  v157 = (void *)_os_log_send_and_compose_impl();
                  if (v157)
                    free(v157);
                }
                if (v252)
                {
                  sub_2245664AC(v31, v278);
                  sub_22322C138((uint64_t)&v261, "Global plane not found in lookup structure %.13s", v278);
                  sub_223182C08((uint64_t)&v261);
                }
                sub_223182C08((uint64_t)&v261);
                v203 = v269;
                if (v269)
                {
                  v204 = (unint64_t *)&v269->__shared_owners_;
                  do
                    v205 = __ldaxr(v204);
                  while (__stlxr(v205 - 1, v204));
                  if (!v205)
                  {
                    ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                    std::__shared_weak_count::__release_weak(v203);
                  }
                }
LABEL_312:
                v206 = (_QWORD *)v19[1];
                if (!v206)
                  goto LABEL_335;
                do
                {
LABEL_313:
                  v207 = v206;
                  v206 = (_QWORD *)*v206;
                }
                while (v206);
                goto LABEL_5;
              }
            }
            memmove(v147, v58, v59);
            goto LABEL_227;
          }
        }
        memmove(v144, v142, v143);
        goto LABEL_219;
      }
      v51 = *((_QWORD *)v45 + 2);
      v251 = *((_QWORD *)v45 + 3);
      if (v51 == v251)
        goto LABEL_312;
      v52 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v254.i8, 1);
      v53 = (float32x2_t)vdup_laneq_s32((int32x4_t)v254, 2);
      v249 = vextq_s8(v254, v254, 8uLL);
      v246 = v14;
      while (1)
      {
        v61 = sub_223340F28(v16, v51);
        if (v61)
          break;
        sub_2233CB4D4(&v270);
        if (**(int **)(v270 + 56) <= 5)
        {
          v67 = *(unsigned __int8 *)(v270 + 72);
          v68 = sub_22322F254(v270, "OSLogSurrogateAppender", 1, 0);
          v69 = !v67 && v68 == 0;
          if (!v69)
          {
            v245 = v68;
            v235 = v67;
            v261 = &v270;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v263 = std::chrono::system_clock::now().__d_.__rep_;
            v264 = 5;
            v265 = "unknown file";
            v266 = 68;
            v267 = "unknown function";
            v268 = 0;
            v269 = 0;
            sub_2245664AC((unsigned __int8 *)v51, __s);
            v70 = *v261;
            v233 = *v261;
            if (*(char *)(*v261 + 39) < 0)
            {
              v72 = *(const char **)(v70 + 16);
              v71 = *(_QWORD *)(v70 + 24);
              v232 = *v261 + 16;
              v74 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v74 & 1) == 0)
              {
LABEL_199:
                if (__cxa_guard_acquire(&qword_255788F58))
                {
                  sub_224568628((uint64_t)__p);
                  sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
                  if ((_BYTE)v273 && SHIBYTE(v272) < 0)
                    operator delete(__p[0]);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                  __cxa_guard_release(&qword_255788F58);
                }
              }
            }
            else
            {
              v71 = *(unsigned __int8 *)(*v261 + 39);
              v72 = (const char *)(*v261 + 16);
              v232 = (uint64_t)v72;
              v73 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v73 & 1) == 0)
                goto LABEL_199;
            }
            if (byte_255788F57 >= 0)
              v75 = (const char *)&xmmword_255788F40;
            else
              v75 = (const char *)xmmword_255788F40;
            if (byte_255788F57 >= 0)
              v76 = byte_255788F57;
            else
              v76 = *((_QWORD *)&xmmword_255788F40 + 1);
            *(_QWORD *)v278 = os_log_create(v75, v72);
            if (v76 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            __src = v72;
            if (v76 >= 0x17)
            {
              v78 = v15;
              v79 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v76 | 7) != 0x17)
                v79 = v76 | 7;
              v80 = v79 + 1;
              v77 = operator new(v79 + 1);
              *(_QWORD *)&v278[16] = v76;
              *(_QWORD *)&v279 = v80 | 0x8000000000000000;
              *(_QWORD *)&v278[8] = v77;
              v15 = v78;
            }
            else
            {
              BYTE7(v279) = v76;
              v77 = &v278[8];
              if (!v76)
              {
LABEL_106:
                v77[v76] = 0;
                BYTE8(v279) = 1;
                if (v71 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v14 = v246;
                v16 = v248;
                if (v71 >= 0x17)
                {
                  v82 = v15;
                  v83 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v71 | 7) != 0x17)
                    v83 = v71 | 7;
                  v84 = v83 + 1;
                  v81 = (char *)operator new(v83 + 1);
                  v281 = v71;
                  v282 = v84 | 0x8000000000000000;
                  v280 = v81;
                  v15 = v82;
                }
                else
                {
                  HIBYTE(v282) = v71;
                  v81 = (char *)&v280;
                  if (!v71)
                  {
LABEL_114:
                    v81[v71] = 0;
                    v283 = 1;
                    v85 = *(NSObject **)v278;
                    if (SHIBYTE(v282) < 0)
                      operator delete(v280);
                    if (BYTE8(v279) && SBYTE7(v279) < 0)
                      operator delete(*(void **)&v278[8]);
                    if (*(_QWORD *)v278)
                      os_release(*(void **)v278);
                    if (v245 && *(_QWORD *)(v245 + 24))
                    {
                      v86 = _os_log_pack_size();
                      v87 = (std::__shared_weak_count_vtbl *)operator new(v86, (std::align_val_t)8uLL);
                      v88 = (std::__shared_weak_count *)operator new();
                      v88->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                      v88->__shared_owners_ = 0;
                      v88->__shared_weak_owners_ = 0;
                      v88[1].__vftable = v87;
                      __p[0] = v87;
                      __p[1] = v87;
                      v272 = v88;
                      v273 = 0;
                      v274 = 0;
                      v89 = strlen(__s);
                      if (v89 > 0x7FFFFFFFFFFFFFF7)
                        sub_22316DBC0();
                      v90 = v89;
                      if (v89 >= 0x17)
                      {
                        v93 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v89 | 7) != 0x17)
                          v93 = v89 | 7;
                        v94 = v93 + 1;
                        v91 = operator new(v93 + 1);
                        *(_QWORD *)&v276 = v90;
                        *((_QWORD *)&v276 + 1) = v94 | 0x8000000000000000;
                        v275 = v91;
                      }
                      else
                      {
                        HIBYTE(v276) = v89;
                        v91 = &v275;
                        if (!v89)
                          goto LABEL_133;
                      }
                      memcpy(v91, __s, v90);
LABEL_133:
                      *((_BYTE *)v91 + v90) = 0;
                      v95 = v275;
                      v284[0] = v276;
                      *(_QWORD *)((char *)v284 + 7) = *(_QWORD *)((char *)&v276 + 7);
                      v96 = HIBYTE(v276);
                      v97 = operator new(0x38uLL);
                      v97[1] = 0;
                      v97[2] = 0;
                      v97[3] = off_24EC1FA48;
                      *v97 = &off_24EC1F9F8;
                      v98 = v284[0];
                      v97[4] = v95;
                      v97[5] = v98;
                      *(_QWORD *)((char *)v97 + 47) = *(_QWORD *)((char *)v284 + 7);
                      *((_BYTE *)v97 + 55) = v96;
                      v284[0] = 0;
                      *(_QWORD *)((char *)v284 + 7) = 0;
                      v99 = v274;
                      v273 = (char *)(v97 + 3);
                      v274 = (std::__shared_weak_count *)v97;
                      v16 = v248;
                      if (v99)
                      {
                        v100 = (unint64_t *)&v99->__shared_owners_;
                        do
                          v101 = __ldaxr(v100);
                        while (__stlxr(v101 - 1, v100));
                        if (!v101)
                        {
                          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                          std::__shared_weak_count::__release_weak(v99);
                        }
                      }
                      *(_OWORD *)v278 = *(_OWORD *)__p;
                      v102 = v273;
                      *(_QWORD *)&v278[16] = v272;
                      if (v272)
                      {
                        v103 = (unint64_t *)&v272->__shared_owners_;
                        do
                          v104 = __ldxr(v103);
                        while (__stxr(v104 + 1, v103));
                      }
                      v105 = v274;
                      *(_QWORD *)&v279 = v102;
                      *((_QWORD *)&v279 + 1) = v274;
                      if (v274)
                      {
                        v106 = (unint64_t *)&v274->__shared_owners_;
                        do
                          v107 = __ldxr(v106);
                        while (__stxr(v107 + 1, v106));
                        v280 = v102;
                        do
                          v108 = __ldaxr(v106);
                        while (__stlxr(v108 - 1, v106));
                        if (!v108)
                        {
                          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                          std::__shared_weak_count::__release_weak(v105);
                        }
                      }
                      else
                      {
                        v280 = v102;
                      }
                      v109 = v272;
                      if (v272)
                      {
                        v110 = (unint64_t *)&v272->__shared_owners_;
                        do
                          v111 = __ldaxr(v110);
                        while (__stlxr(v111 - 1, v110));
                        if (!v111)
                        {
                          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                          std::__shared_weak_count::__release_weak(v109);
                        }
                      }
                      v112 = *(_QWORD *)v278;
                      if (v280[31] >= 0)
                        v113 = v280 + 8;
                      else
                        v113 = (char *)*((_QWORD *)v280 + 1);
                      v114 = _os_log_pack_fill();
                      *(_DWORD *)v114 = 68157954;
                      *(_DWORD *)(v114 + 4) = 13;
                      *(_WORD *)(v114 + 8) = 2080;
                      *(_QWORD *)(v114 + 10) = v113;
                      v115 = (char *)operator new();
                      v116 = *(unsigned __int8 *)(v233 + 39);
                      v117 = v232;
                      if ((v116 & 0x80u) != 0)
                      {
                        v117 = *(_QWORD *)(v233 + 16);
                        v116 = *(_QWORD *)(v233 + 24);
                      }
                      *(_QWORD *)v115 = v112;
                      *(_OWORD *)(v115 + 8) = *(_OWORD *)&v278[8];
                      *(_QWORD *)&v278[8] = 0;
                      *(_QWORD *)&v278[16] = 0;
                      *(_OWORD *)(v115 + 24) = v279;
                      v279 = 0uLL;
                      *((_QWORD *)v115 + 5) = v117;
                      *((_QWORD *)v115 + 6) = v116;
                      v115[56] = 16;
                      v275 = 0;
                      __p[0] = v115;
                      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v245 + 24) + 40))(*(_QWORD *)(v245 + 24), __p);
                      v118 = __p[0];
                      __p[0] = 0;
                      if (v118)
                      {
                        v119 = (std::__shared_weak_count *)*((_QWORD *)v118 + 4);
                        if (v119)
                        {
                          v120 = (unint64_t *)&v119->__shared_owners_;
                          do
                            v121 = __ldaxr(v120);
                          while (__stlxr(v121 - 1, v120));
                          if (!v121)
                          {
                            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                            std::__shared_weak_count::__release_weak(v119);
                          }
                        }
                        v122 = (std::__shared_weak_count *)*((_QWORD *)v118 + 2);
                        if (v122)
                        {
                          v123 = (unint64_t *)&v122->__shared_owners_;
                          do
                            v124 = __ldaxr(v123);
                          while (__stlxr(v124 - 1, v123));
                          if (!v124)
                          {
                            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                            std::__shared_weak_count::__release_weak(v122);
                          }
                        }
                        MEMORY[0x227684CE8](v118, 0x10F0C40B62ED6C6);
                        v125 = v275;
                        v275 = 0;
                        if (v125)
                        {
                          v126 = (std::__shared_weak_count *)v125[4];
                          if (v126)
                          {
                            v127 = (unint64_t *)&v126->__shared_owners_;
                            do
                              v128 = __ldaxr(v127);
                            while (__stlxr(v128 - 1, v127));
                            if (!v128)
                            {
                              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                              std::__shared_weak_count::__release_weak(v126);
                            }
                          }
                          v129 = (std::__shared_weak_count *)v125[2];
                          if (v129)
                          {
                            v130 = (unint64_t *)&v129->__shared_owners_;
                            do
                              v131 = __ldaxr(v130);
                            while (__stlxr(v131 - 1, v130));
                            if (!v131)
                            {
                              ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                              std::__shared_weak_count::__release_weak(v129);
                            }
                          }
                          MEMORY[0x227684CE8](v125, 0x10F0C40B62ED6C6);
                        }
                      }
                      v132 = (std::__shared_weak_count *)*((_QWORD *)&v279 + 1);
                      if (*((_QWORD *)&v279 + 1))
                      {
                        v133 = (unint64_t *)(*((_QWORD *)&v279 + 1) + 8);
                        do
                          v134 = __ldaxr(v133);
                        while (__stlxr(v134 - 1, v133));
                        if (!v134)
                        {
                          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                          std::__shared_weak_count::__release_weak(v132);
                        }
                      }
                      v135 = *(std::__shared_weak_count **)&v278[16];
                      if (*(_QWORD *)&v278[16])
                      {
                        v136 = (unint64_t *)(*(_QWORD *)&v278[16] + 8);
                        do
                          v137 = __ldaxr(v136);
                        while (__stlxr(v137 - 1, v136));
                        if (!v137)
                        {
                          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                          std::__shared_weak_count::__release_weak(v135);
                        }
                      }
                    }
                    else
                    {
                      os_log_type_enabled(v85, OS_LOG_TYPE_ERROR);
                      *(_QWORD *)v278 = 0xD04100202;
                      *(_WORD *)&v278[8] = 2080;
                      *(_QWORD *)&v278[10] = __s;
                      v92 = (void *)_os_log_send_and_compose_impl();
                      if (v92)
                        free(v92);
                    }
                    if (v235)
                    {
                      sub_2245664AC((unsigned __int8 *)v51, v278);
                      sub_22322C138((uint64_t)&v261, "Keyframe %.13s in lookup structure not in state", v278);
                      sub_223182C08((uint64_t)&v261);
                    }
                    sub_223182C08((uint64_t)&v261);
                    v138 = v269;
                    if (v269)
                    {
                      v139 = (unint64_t *)&v269->__shared_owners_;
                      do
                        v140 = __ldaxr(v139);
                      while (__stlxr(v140 - 1, v139));
                      if (!v140)
                      {
                        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                        std::__shared_weak_count::__release_weak(v138);
                      }
                    }
                    goto LABEL_68;
                  }
                }
                memmove(v81, __src, v71);
                goto LABEL_114;
              }
            }
            memmove(v77, v75, v76);
            goto LABEL_106;
          }
        }
LABEL_68:
        v51 += 20;
        if (v51 == v251)
          goto LABEL_312;
      }
      v62 = (float32x2_t *)v61[4];
      a6.i32[0] = v62[16].i32[0];
      a8.i32[0] = v62[18].i32[0];
      *(float32x2_t *)a9.f32 = v62[19];
      a10.i32[0] = v62[20].i32[0];
      a11.i32[1] = v254.i32[1];
      *(float32x2_t *)v63.f32 = vmla_f32(vmla_f32(vmul_n_f32(v62[15], *(float *)v254.i32), v52, v62[17]), v53, *(float32x2_t *)a9.f32);
      a7 = (float32x4_t)v249;
      *(float32x2_t *)&v63.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)a6.i8, *(float32x2_t *)v254.i8), v52, *(float32x2_t *)a8.i8), *(float32x2_t *)v249.i8, *(float32x2_t *)a10.i8);
      *(float32x2_t *)a6.i8 = v62[21];
      a6.i32[2] = v62[22].i32[0];
      a5 = vaddq_f32(v63, (float32x4_t)a6);
      a6.i32[0] = a5.i32[2];
      a7.i32[0] = 897988541;
      if (a5.f32[2] <= 0.000001)
        goto LABEL_68;
      v64 = (unint64_t)vdiv_f32(vmul_f32(*(float32x2_t *)a5.f32, v62[5]), (float32x2_t)vdup_laneq_s32((int32x4_t)a5, 2));
      *(float32x2_t *)a7.f32 = vadd_f32(v62[6], (float32x2_t)v64);
      LODWORD(v64) = v62[14].i32[0];
      a6.i64[0] = -0.5;
      *(double *)a5.i64 = (double)v64 + -0.5;
      a5.f32[0] = *(double *)a5.i64;
      if (a7.f32[0] < -0.5 || a7.f32[0] >= a5.f32[0])
        goto LABEL_68;
      a5.i32[0] = v62[14].i32[1];
      *(double *)a5.i64 = (double)a5.u64[0] + -0.5;
      a5.f32[0] = *(double *)a5.i64;
      a6.i32[0] = a7.i32[1];
      if (a7.f32[1] < -0.5 || a7.f32[1] >= a5.f32[0])
        goto LABEL_68;
      v244 = a7;
      sub_2242A773C((uint64_t)v62, (uint64_t *)v278);
      a6.i64[1] = v244.i64[1];
      *(int32x2_t *)a5.f32 = vmul_s32(*(int32x2_t *)&v278[16], (int32x2_t)vcvt_u32_f32(vrndm_f32(vadd_f32(*(float32x2_t *)v244.f32, (float32x2_t)0x3F0000003F000000))));
      *(int32x2_t *)a6.i8 = vdup_lane_s32(*(int32x2_t *)a5.f32, 1);
      *(int32x2_t *)a5.f32 = vadd_s32(*(int32x2_t *)a6.i8, *(int32x2_t *)a5.f32);
      if (*(_DWORD *)(v51 + 16) != *(unsigned __int8 *)(*(_QWORD *)v278 + a5.u32[0]))
        goto LABEL_68;
      if (v31[457])
        v208 = v31[456];
      else
        v208 = 255;
      *(float32x2_t *)a9.f32 = v240;
      a10 = (int32x4_t)v238;
      v209 = vmla_f32(vmla_f32(vmul_n_f32(v241, *(float *)v254.i32), v52, *(float32x2_t *)v238.i8), v53, v240);
      a7.i64[1] = v242.i64[1];
      a11.i32[1] = v237.i32[1];
      a12 = (float32x4_t)v236;
      *(float32x2_t *)&a5.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v242.i8, *(float32x2_t *)v254.i8), v52, v237), *(float32x2_t *)v249.i8, *(float32x2_t *)v236.i8);
      a6 = (int8x16_t)v239;
      v210 = vaddq_f32(a5, v239);
      a5.i64[0] = *(_QWORD *)(v31 + 28);
      a6.i32[0] = *((_DWORD *)v31 + 9);
      *(float32x2_t *)a8.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v241, a5.f32[0]), *(float32x2_t *)v238.i8, *(float32x2_t *)a5.f32, 1), v240, *(float *)a6.i32);
      *(float32x2_t *)a7.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v242.i8, *(float32x2_t *)a5.f32), v237, *(float32x2_t *)a5.f32, 1), *(float32x2_t *)a6.i8, *(float32x2_t *)v236.i8);
      a8.i64[1] = a7.i64[0];
      v211 = v208 << 8;
      v213 = (_QWORD *)v14[1];
      v212 = v14[2];
      if ((unint64_t)v213 >= v212)
      {
        v216 = (_QWORD *)*v14;
        v217 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v213 - *v14) >> 2);
        v218 = v217 + 1;
        if ((unint64_t)(v217 + 1) > 0x924924924924924)
          sub_22316E078();
        v214 = v15;
        v253 = v210;
        v256 = (__n128)a8;
        v219 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v212 - (_QWORD)v216) >> 2);
        if (2 * v219 > v218)
          v218 = 2 * v219;
        if (v219 >= 0x492492492492492)
          v220 = 0x924924924924924;
        else
          v220 = v218;
        if (v220 > 0x924924924924924)
          sub_223174E94();
        v221 = (char *)operator new(28 * v220);
        v222 = &v221[28 * v217];
        *(_QWORD *)v222 = v253.i64[0];
        *((_DWORD *)v222 + 2) = v253.i32[2];
        a5 = (float32x4_t)v256;
        *(_QWORD *)(v222 + 12) = v256.n128_u64[0];
        *((_DWORD *)v222 + 5) = v256.n128_u32[2];
        *((_WORD *)v222 + 12) = v211;
        v223 = v222;
        if (v213 == v216)
        {
          v16 = v248;
        }
        else
        {
          v16 = v248;
          do
          {
            v224 = *(_QWORD *)((char *)v213 - 28);
            v213 = (_QWORD *)((char *)v213 - 28);
            v225 = *((_DWORD *)v213 + 2);
            *(_QWORD *)(v223 - 28) = v224;
            v223 -= 28;
            *((_DWORD *)v223 + 2) = v225;
            v226 = *(_QWORD *)((char *)v213 + 12);
            *((_DWORD *)v223 + 5) = *((_DWORD *)v213 + 5);
            *(_QWORD *)(v223 + 12) = v226;
            *((_WORD *)v223 + 12) = *((_WORD *)v213 + 12);
          }
          while (v213 != v216);
        }
        v227 = &v221[28 * v220];
        v215 = v222 + 28;
        *v14 = (uint64_t)v223;
        v14[1] = (uint64_t)(v222 + 28);
        v14[2] = (uint64_t)v227;
        if (v216)
          operator delete(v216);
      }
      else
      {
        v214 = v15;
        *((_DWORD *)v213 + 2) = v210.i32[2];
        *v213 = v210.i64[0];
        *((_DWORD *)v213 + 5) = a7.i32[0];
        *(_QWORD *)((char *)v213 + 12) = a8.i64[0];
        v215 = (char *)v213 + 28;
        *((_WORD *)v213 + 12) = v211;
        v16 = v248;
      }
      v14[1] = (uint64_t)v215;
      v15 = v214;
      v206 = (_QWORD *)v19[1];
      if (v206)
        goto LABEL_313;
      do
      {
LABEL_335:
        v207 = (_QWORD *)v19[2];
        v69 = *v207 == (_QWORD)v19;
        v19 = v207;
      }
      while (!v69);
LABEL_5:
      v19 = v207;
      if (v207 == v18)
      {
        v228 = *v14;
        v229 = (uint64_t *)v14[1];
        goto LABEL_345;
      }
    }
    a11.i32[0] = *((_DWORD *)v31 + 6);
    *(float32x2_t *)a9.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(v31 + 16), *(float32x2_t *)a8.i8), v32, *(float32x2_t *)(v31 + 16), 1), *(float32x2_t *)a7.f32, *(float32x2_t *)a11.i8);
    a10 = (int32x4_t)v260;
    a6.i64[1] = v259.n128_i64[1];
    *(float32x2_t *)a8.i8 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v260.f32, *(float32x2_t *)a8.i8), v32, v28), *(float32x2_t *)a7.f32, (float32x2_t)v259.n128_u64[0]);
    *(float32x2_t *)a6.i8 = vsub_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a9.f32);
    if (*(float *)a6.i32 < 0.0)
      goto LABEL_312;
    a7.f32[0] = -a9.f32[0];
    goto LABEL_18;
  }
  v229 = 0;
  v228 = 0;
LABEL_345:
  v230 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((uint64_t)v229 - v228) >> 2));
  *(_QWORD *)v278 = v15;
  if (v229 == (uint64_t *)v228)
    v231 = 0;
  else
    v231 = v230;
  return sub_2233CB5C8(v228, v229, (unint64_t **)v278, v231, 1, a5, (float32x4_t)a6, (int8x16_t)a7, *(double *)a8.i64, *(double *)a9.i64, (float32x4_t)a10);
}

void sub_2233CABE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a70;
  char a71;
  void *v72;

  if (a71 && a70 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a55);
  v72 = *(void **)a38;
  if (*(_QWORD *)a38)
  {
    *(_QWORD *)(a38 + 8) = v72;
    operator delete(v72);
  }
  _Unwind_Resume(a1);
}

void sub_2233CADDC(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  float32x4_t v8;
  float32x4_t v9;
  __int128 v10;
  float32x4_t v11;
  float32x2_t v12;
  float32x2_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float32x2_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float v34;
  float v35;
  BOOL v36;
  float v37;
  float v38;
  float v39;
  BOOL v40;
  float v41;
  BOOL v42;
  float v43;
  BOOL v44;
  float v45;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  int32x4_t v52;
  float32x4_t v53;
  unint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x2_t v59;
  float v60;
  int v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int32x4_t v70;
  uint64_t v71;
  int32x4_t v72;
  float32x2_t v73;
  float v74;
  int8x16_t v75;
  float v76;
  float32x2_t v77;
  float v78;
  float v79;
  float v80;
  float32x2_t v82;
  float32x2_t v83;
  float v84;
  BOOL v85;
  __int16 v87;
  int8x16_t v88;
  int8x16_t v89;
  float32x4_t v90;
  __int16 v91;
  char *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  __int32 v96;
  uint64_t v97[8];
  BOOL v98;
  _QWORD v99[2];
  _QWORD v100[4];
  _QWORD v101[2];
  _BYTE v102[20];
  __int32 v103;
  float v104;
  int v105;
  _BYTE v106[64];
  uint64_t v107;
  __int32 v108;
  uint64_t v109;
  __int32 v110;
  __int16 v111;
  unsigned __int8 v112;
  int v113;
  unint64_t *v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;

  if ((*(_BYTE *)(a2 + 28) & 2) == 0)
    goto LABEL_55;
  v113 = 2139095040;
  LOBYTE(v107) = 0;
  v112 = 0;
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
    goto LABEL_55;
  v7 = 0uLL;
  v8.i64[0] = 0x3F0000003F000000;
  v8.i64[1] = 0x3F0000003F000000;
  do
  {
    while (1)
    {
      if (*(_BYTE *)(v4 + 120))
      {
        v9 = *(float32x4_t *)(v4 + 104);
        v10 = *(_OWORD *)(v4 + 72);
        *(_OWORD *)v106 = *(_OWORD *)(v4 + 56);
        *(_OWORD *)&v106[16] = v10;
        *(_OWORD *)&v106[32] = *(_OWORD *)(v4 + 88);
        *(float32x4_t *)&v106[48] = v9;
        v11 = v9;
      }
      else
      {
        *(_QWORD *)&v106[52] = 0;
        *(_OWORD *)&v106[20] = v7;
        *(_OWORD *)&v106[36] = v7;
        *(_OWORD *)&v106[4] = v7;
        *(_DWORD *)v106 = 1065353216;
        *(_DWORD *)&v106[20] = 1065353216;
        v11 = 0uLL;
        *(_DWORD *)&v106[40] = 1065353216;
        *(_DWORD *)&v106[60] = 1065353216;
      }
      v12 = (float32x2_t)vtrn2q_s32(*(int32x4_t *)v106, *(int32x4_t *)&v106[16]).u64[0];
      v13 = (float32x2_t)vzip2q_s32(*(int32x4_t *)v106, *(int32x4_t *)&v106[16]).u64[0];
      v14 = (int8x16_t)vdupq_lane_s32((int32x2_t)v12, 1);
      v15 = (int8x16_t)vdupq_lane_s32((int32x2_t)v12, 0);
      v16 = (int8x16_t)vnegq_f32(v11);
      v17 = (float32x2_t)vzip1_s32(*(int32x2_t *)v106, *(int32x2_t *)&v106[16]);
      *(float32x2_t *)v18.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v17, *(float *)v16.i32), v12, *(float32x2_t *)v11.f32, 1), v13, v11, 2);
      v19 = vmls_lane_f32(vmul_f32(*(float32x2_t *)&v106[32], *(float32x2_t *)v16.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v106[32], 1), *(float32x2_t *)v11.f32, 1);
      v20 = (float32x4_t)vextq_s8(*(int8x16_t *)&v106[32], *(int8x16_t *)&v106[32], 8uLL);
      v14.i64[0] = vextq_s8(v15, v14, 0xCuLL).u64[0];
      *(float32x2_t *)&v18.u32[2] = vmla_f32(v19, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), *(float32x2_t *)v20.f32);
      v15.i32[0] = *(_DWORD *)(a2 + 8);
      *(float32x2_t *)v16.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v17, COERCE_FLOAT(*(_QWORD *)a2)), *(float32x2_t *)v14.i8, *(float32x2_t *)a2, 1), v13, *(float *)v15.i32);
      v16.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v106[32], *(float32x2_t *)a2), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2, 1), *(float32x2_t *)&v106[32], 1), *(float32x2_t *)v15.i8, *(float32x2_t *)v20.f32);
      v21 = vaddq_f32((float32x4_t)v16, v18);
      v22 = *(float32x2_t *)(a2 + 12);
      v23 = vmla_lane_f32(vmul_n_f32(v17, v22.f32[0]), *(float32x2_t *)v14.i8, v22, 1);
      v14.i32[0] = *(_DWORD *)(a2 + 20);
      v15.i32[0] = *(_DWORD *)(a2 + 24);
      *(float32x2_t *)v24.f32 = vmla_n_f32(v23, v13, *(float *)v14.i32);
      *(float32x2_t *)&v24.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v106[32], v22), (float32x2_t)vdup_lane_s32((int32x2_t)v22, 1), *(float32x2_t *)&v106[32], 1), *(float32x2_t *)v14.i8, *(float32x2_t *)v20.f32);
      *(_DWORD *)&v102[8] = v21.i32[2];
      *(_QWORD *)v102 = v21.i64[0];
      v25 = vmulq_n_f32(v24, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.f32, 1), *(float32x2_t *)v24.f32, 1), *(float32x2_t *)&v24.u32[2], *(float32x2_t *)&v24.u32[2]).f32[0]));
      v103 = v25.i32[2];
      *(_QWORD *)&v102[12] = v25.i64[0];
      v104 = *(float *)v15.i32;
      v105 = 3;
      v26 = vmlaq_n_f32(v21, v25, *(float *)v15.i32);
      v27 = (int8x16_t)vsubq_f32(v26, v21);
      v24.i64[0] = vextq_s8(v27, v27, 8uLL).u64[0];
      v20.f32[0] = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1), *(float32x2_t *)v27.i8, 1), *(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32).f32[0]);
      v28 = v20.f32[0] * 0.5;
      v29 = vaddq_f32(v21, v26);
      v30 = vmulq_n_f32((float32x4_t)v27, 1.0 / v20.f32[0]);
      v20.i64[0] = *(_QWORD *)(v4 + 156);
      v20.i32[2] = *(_DWORD *)(v4 + 164);
      v21.i64[0] = *(_QWORD *)(v4 + 144);
      v21.i32[2] = *(_DWORD *)(v4 + 152);
      v31 = vmulq_f32(vsubq_f32(v20, v21), v8);
      v32 = vmlsq_f32(vmulq_f32(vaddq_f32(v20, v21), v8), v29, v8);
      v33 = fabsf(v30.f32[0]);
      v34 = fabsf(v32.f32[1]);
      v35 = fabsf(v30.f32[1]);
      v36 = fabsf(v32.f32[0]) <= (float)((float)(v31.f32[0] + (float)(v28 * v33)) + 0.000001)
         && v34 <= (float)((float)(v31.f32[1] + (float)(v28 * v35)) + 0.000001);
      v37 = fabsf(v32.f32[2]);
      v38 = fabsf(v30.f32[2]);
      v39 = (float)(v31.f32[2] + (float)(v28 * v38)) + 0.000001;
      v40 = v36 && v37 <= v39;
      v41 = vabds_f32(v32.f32[1] * v30.f32[2], v32.f32[2] * v30.f32[1]);
      v42 = v40 && v41 <= (float)((float)((float)(v31.f32[2] * v35) + (float)(v31.f32[1] * v38)) + 0.000001);
      v43 = vabds_f32(v32.f32[2] * v30.f32[0], v32.f32[0] * v30.f32[2]);
      v44 = v42 && v43 <= (float)((float)((float)(v31.f32[2] * v33) + (float)(v31.f32[0] * v38)) + 0.000001);
      v45 = vabds_f32(v32.f32[0] * v30.f32[1], v32.f32[1] * v30.f32[0]);
      if (v44 && v45 <= (float)((float)((float)(v31.f32[1] * v33) + (float)(v31.f32[0] * v35)) + 0.000001))
        break;
      v4 += 192;
      if (v4 == v5)
        goto LABEL_53;
    }
    sub_2233B5644(v4 + 16, v99);
    v98 = v101[0] == v100[0];
    v97[0] = (uint64_t)v100;
    v97[1] = (uint64_t)v99;
    v97[2] = (uint64_t)v102;
    v97[3] = (uint64_t)&v113;
    v97[4] = (uint64_t)&v107;
    v97[5] = (uint64_t)v106;
    v97[6] = (uint64_t)&v98;
    v97[7] = (uint64_t)v101;
    if (*(_BYTE *)(v4 + 184))
    {
      v47.i64[0] = *(_QWORD *)&v102[12];
      v47.i32[2] = v103;
      v53 = vaddq_f32(*(float32x4_t *)v102, vmulq_n_f32(v47, v104));
      v93 = *(_QWORD *)v102;
      v94 = *(_DWORD *)&v102[8];
      v96 = v53.i32[2];
      v95 = v53.i64[0];
      v54 = *(_QWORD *)(v4 + 168);
      v114 = (unint64_t *)&v93;
      v55 = *(unsigned int **)(v54 + 48);
      v117 = 0;
      v118 = 0;
      v115 = *(_QWORD *)(v54 + 120);
      v116 = *(_DWORD *)(v54 + 128);
      sub_2233CF288(v54, *v55, v55[1], &v117, 0, (uint64_t)&v115, &v114, v97, *(double *)v53.i64, *(float32x4_t *)v102, v49);
    }
    else if (v100[0])
    {
      v56 = 0;
      v50.i64[0] = *(_QWORD *)&v102[12];
      v57 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v102[12], 1);
      v48.i32[0] = v103;
      v57.i32[1] = v103;
      v57.i32[2] = *(_DWORD *)&v102[12];
      v58 = v48;
      *(uint64_t *)((char *)v58.i64 + 4) = *(_QWORD *)&v102[12];
      v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v102[12], 1);
      v50.i32[2] = v103;
      v60 = *(float *)&v113;
      v61 = v112;
      v62 = (float32x2_t)vextq_s8(*(int8x16_t *)v106, *(int8x16_t *)v106, 8uLL).u64[0];
      v63 = (float32x2_t)vextq_s8(*(int8x16_t *)&v106[16], *(int8x16_t *)&v106[16], 8uLL).u64[0];
      v64 = (float32x2_t)vextq_s8(*(int8x16_t *)&v106[32], *(int8x16_t *)&v106[32], 8uLL).u64[0];
      v65 = 12 * v100[0];
      do
      {
        while (1)
        {
          v66 = (unsigned int *)(v100[1] + 12 * v56);
          v67 = v99[1] + 12 * *v66;
          v68 = -1431655765 * ((12 * v66[1] - 12 * (unint64_t)*v66) >> 2);
          v69 = v67 + 12 * (int)(-1431655765 * ((12 * v66[2] - 12 * (unint64_t)*v66) >> 2));
          v51.i64[0] = *(_QWORD *)v69;
          v51.i32[2] = *(_DWORD *)(v69 + 8);
          v52.i64[0] = *(_QWORD *)v67;
          v52.i32[2] = *(_DWORD *)(v67 + 8);
          v70 = (int32x4_t)vsubq_f32((float32x4_t)v51, (float32x4_t)v52);
          v71 = v67 + 12 * v68;
          v51.i64[0] = *(_QWORD *)v71;
          v51.i32[2] = *(_DWORD *)(v71 + 8);
          v72 = (int32x4_t)vsubq_f32((float32x4_t)v52, (float32x4_t)v51);
          v51 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v70, (int8x16_t)v70, 0xCuLL), (int8x16_t)v70, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v72, v72), (int8x16_t)v72, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v70, v70), (int8x16_t)v70, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v72, (int8x16_t)v72, 0xCuLL), (int8x16_t)v72, 8uLL));
          v73 = (float32x2_t)vextq_s8(v51, v51, 8uLL).u64[0];
          v74 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)&v102[12]), v59, *(float32x2_t *)v51.i8, 1), *(float32x2_t *)v48.f32, v73).f32[0];
          if (v74 <= 0.0)
          {
            v52 = (int32x4_t)vsubq_f32((float32x4_t)v52, *(float32x4_t *)v102);
            v75 = (int8x16_t)vmlsq_f32(vmulq_f32(v57, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v52, v52), (int8x16_t)v52, 0xCuLL)), v58, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v52, (int8x16_t)v52, 0xCuLL), (int8x16_t)v52, 8uLL));
            v76 = 1.0 / v74;
            v77 = (float32x2_t)vextq_s8(v75, v75, 8uLL).u64[0];
            v78 = -(float)(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v70.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1), *(float32x2_t *)v75.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL), v77).f32[0]* v76);
            if (v78 >= 0.0)
            {
              v79 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v72.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1), *(float32x2_t *)v72.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL), v77).f32[0];
              v80 = v78 - (float)(v79 * v76);
              if ((float)-(float)(v79 * v76) >= 0.0 && v80 <= 1.0)
              {
                v82 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1);
                v83 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v52.i8), v82, *(float32x2_t *)v52.i8, 1);
                v52 = (int32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL);
                v84 = v76 * vmla_f32(v83, *(float32x2_t *)v52.i8, v73).f32[0];
                v85 = v84 < 0.0 || v84 > v104;
                if (!v85 && v84 <= v60)
                  break;
              }
            }
          }
          ++v56;
          v65 -= 12;
          if (!v65)
            goto LABEL_27;
        }
        v113 = LODWORD(v84);
        if (v101[0] == v100[0])
          v87 = *(unsigned __int8 *)(v101[1] + v56);
        else
          v87 = 255;
        v88 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)v102, v50, v84);
        *(float32x2_t *)v52.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v106, *(float *)v88.i32), *(float32x2_t *)&v106[16], *(float32x2_t *)v88.i8, 1), *(float32x2_t *)&v106[32], (float32x4_t)v88, 2);
        v52.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(v62, *(float32x2_t *)v88.i8), v63, *(float32x2_t *)v88.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL), v64);
        v89 = (int8x16_t)vmulq_n_f32((float32x4_t)v51, 1.0/ sqrtf(vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8), v82, v82), v73, v73).f32[0]));
        *(float32x2_t *)v51.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v106, *(float *)v89.i32), *(float32x2_t *)&v106[16], *(float32x2_t *)v89.i8, 1), *(float32x2_t *)&v106[32], (float32x4_t)v89, 2);
        v51.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(v62, *(float32x2_t *)v89.i8), v63, *(float32x2_t *)v89.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL), v64);
        v90 = vaddq_f32((float32x4_t)v52, *(float32x4_t *)&v106[48]);
        v108 = v90.i32[2];
        v107 = v90.i64[0];
        v110 = v51.i32[2];
        v109 = v51.i64[0];
        if (!v61)
        {
          v61 = 1;
          v112 = 1;
        }
        v111 = (v87 << 8) | 1;
        ++v56;
        v60 = v84;
        v65 -= 12;
      }
      while (v65);
    }
LABEL_27:
    v7 = 0uLL;
    v8.i64[0] = 0x3F0000003F000000;
    v8.i64[1] = 0x3F0000003F000000;
    v4 += 192;
  }
  while (v4 != v5);
LABEL_53:
  if (v112)
  {
    v91 = v111;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v92 = (char *)operator new(0x1CuLL);
    a3[1] = v92 + 28;
    a3[2] = v92 + 28;
    *(_QWORD *)v92 = v107;
    *((_DWORD *)v92 + 2) = v108;
    *(_QWORD *)(v92 + 12) = *(_QWORD *)((unint64_t)&v107 | 0xC);
    *((_DWORD *)v92 + 5) = *(_DWORD *)(((unint64_t)&v107 | 0xC) + 8);
    *((_WORD *)v92 + 12) = v91;
    *a3 = v92;
  }
  else
  {
LABEL_55:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_2233CB4D4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CAC30);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAC30))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CAC28);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CAC30);
  }
  *a1 = qword_2540CAC28;
}

void sub_2233CB570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CAC30);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CAC30);
  _Unwind_Resume(a1);
}

uint64_t sub_2233CB5C8(uint64_t result, uint64_t *a2, unint64_t **a3, uint64_t a4, char a5, float32x4_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, float32x4_t a11)
{
  uint64_t v14;
  unint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int8x16_t v21;
  unint64_t v22;
  float32x2_t v23;
  float v24;
  int8x16_t v25;
  float32x2_t v26;
  float v27;
  int8x16_t v28;
  float32x2_t v29;
  uint64_t *v30;
  __int16 v31;
  int v32;
  int v33;
  float32x2_t v34;
  float v35;
  float32x2_t v36;
  unint64_t v37;
  unint64_t v38;
  __int16 *v39;
  __int16 v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  _WORD *v47;
  __int16 v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  __int16 v52;
  int v53;
  int v54;
  _QWORD *v55;
  __int16 v56;
  int v57;
  int v58;
  float32x2_t v59;
  float32x2_t v60;
  unint64_t v61;
  __int16 v62;
  int v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  int8x16_t v78;
  float32x2_t v79;
  float v80;
  float32x2_t v81;
  float v82;
  int8x16_t v83;
  int8x16_t v84;
  float32x2_t v85;
  _BOOL4 v86;
  uint64_t *v87;
  __int16 v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  _WORD *v95;
  __int16 v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  __int16 v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t *v104;
  int v105;
  float32x2_t v106;
  float32x2_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  unint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  int8x16_t v122;
  float32x2_t v123;
  float v124;
  float32x2_t v125;
  float v126;
  int8x16_t v127;
  int8x16_t v128;
  float32x2_t v129;
  _BOOL4 v130;
  uint64_t *v131;
  __int16 v132;
  int v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  _WORD *v139;
  __int16 v140;
  float32x2_t v141;
  float32x2_t v142;
  float32x2_t v143;
  __int16 v144;
  int v145;
  uint64_t v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  _WORD *v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x2_t v154;
  uint64_t v155;
  uint64_t v156;
  int8x16_t v157;
  float32x2_t v158;
  float v159;
  float32x2_t v160;
  float v161;
  _BOOL4 v162;
  unint64_t v163;
  unint64_t v164;
  __int16 *v165;
  __int16 v166;
  unint64_t v167;
  unint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  _WORD *v171;
  __int16 v172;
  float32x2_t v173;
  float32x2_t v174;
  unint64_t v175;
  __int16 v176;
  __int16 v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  float32x2_t v181;
  float32x2_t v182;
  unint64_t v183;
  __int16 v184;
  int v185;
  unint64_t v186;
  int v187;
  int8x16_t v188;
  float32x2_t v189;
  float32x2_t v190;
  float v191;
  float32x2_t v192;
  uint64_t v193;
  __int16 v194;
  float32x2_t v195;
  unint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  float32x2_t v199;
  uint64_t v200;
  float32x2_t v201;
  unint64_t v202;
  __int16 v203;
  int v204;
  int v205;
  int8x16_t v206;
  float32x2_t v207;
  uint64_t v208;
  float32x2_t v209;
  uint64_t v210;
  float32x2_t v211;
  uint64_t v212;
  uint64_t v213;
  BOOL v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  _QWORD *v218;
  int8x16_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  __int16 v224;
  __int16 v225;
  int v226;
  int v227;
  int8x16_t v228;
  float32x2_t v229;
  float v230;
  uint64_t v231;
  float32x2_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  int8x16_t v237;
  float32x2_t v238;
  float32x2_t v239;
  int8x16_t v240;
  float32x2_t v241;
  __int16 v242;
  int v243;
  int v244;
  uint64_t *v245;
  uint64_t *v246;
  int8x16_t v247;
  float32x2_t v248;
  float v249;
  float32x2_t v250;
  float v251;
  int8x16_t v252;
  int8x16_t v253;
  float32x2_t v254;
  _BOOL4 v255;
  uint64_t *v256;
  __int16 v257;
  int v258;
  int v259;
  uint64_t *v260;
  uint64_t *v261;
  uint64_t *v262;
  uint64_t *v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x2_t v266;
  float32x2_t v267;
  int8x16_t v268;
  int8x16_t v269;
  float32x2_t v270;
  _QWORD *v271;
  __int16 v272;
  int v273;
  uint64_t v274;
  float32x2_t v275;
  float32x2_t v276;
  int8x16_t v277;
  int8x16_t v278;
  float32x2_t v279;
  uint64_t v280;
  int v281;
  _QWORD *v282;
  __int16 v283;
  __int16 v284;
  float32x2_t v285;
  float32x2_t v286;
  int8x16_t v287;
  int8x16_t v288;
  float32x2_t v289;
  uint64_t v290;
  int v291;
  _QWORD *v292;
  __int16 v293;
  int8x16_t v294;
  float32x2_t v295;
  float32x2_t v296;
  int8x16_t v297;
  float32x2_t v298;
  __int16 v299;
  uint64_t *v300;
  BOOL v302;
  uint64_t v303;
  unint64_t *v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  int8x16_t v308;
  float32x2_t v309;
  float32x2_t v310;
  float32x2_t v311;
  __int16 v312;
  uint64_t v313;
  uint64_t v314;
  int8x16_t v315;
  float32x2_t v316;
  float v317;
  float32x2_t v318;
  int64_t v319;
  int64_t v320;
  BOOL v321;
  uint64_t v322;
  unint64_t v323;
  int8x16_t v324;
  float32x2_t v325;
  float v326;
  float32x2_t v327;
  unint64_t v328;
  float32x2_t v329;
  float32x2_t v330;
  float32x2_t v331;
  unint64_t v332;
  __int16 v333;
  float32x2_t v334;
  float32x2_t v335;
  unint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int8x16_t v341;
  float32x2_t v342;
  float v343;
  float32x2_t v344;
  int64_t v345;
  uint64_t v346;
  uint64_t *v347;
  __int16 v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  float32x2_t v354;
  float v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  float32x2_t v361;
  float32x2_t v362;
  float32x2_t v363;
  __int16 v364;
  unint64_t v365;
  uint64_t v366;
  float32x2_t v367;
  float32x2_t v368;
  _QWORD *v369;
  __int16 v370;
  int v371;
  uint64_t v372;
  int8x16_t v373;
  float32x2_t v374;
  float32x2_t v375;
  int8x16_t v376;
  float32x2_t v377;
  __int16 v378;
  unint64_t *v379;
  _WORD *v380;
  uint64_t v381;
  int8x16_t v382;
  float32x2_t v383;
  float32x2_t v384;
  float32x2_t v385;
  __int16 v386;
  _WORD *v387;
  _WORD *v388;
  uint64_t v389;
  __int16 v390;
  int8x16_t v391;
  float32x2_t v392;
  float v393;
  __int16 v394;
  uint64_t *v395;
  int8x16_t v396;
  float32x2_t v397;
  float32x2_t v398;
  int8x16_t v399;
  float32x2_t v400;
  int v401;
  uint64_t v402;
  uint64_t *v403;
  uint64_t *v404;
  uint64_t *v405;
  uint64_t *v406;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  int v411;
  int v412;
  int v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  int v454;
  int v455;
  int v456;
  int v457;
  int v458;
  int v459;
  int v460;
  int v461;
  int v462;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  int v479;
  int v480;
  int v481;
  int v482;
  int v483;
  int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  int v490;
  int v491;
  int v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  int v533;
  int v534;
  int v535;
  int v536;
  int v537;
  int v538;
  int v539;
  int v540;
  int v541;
  unsigned int v542;
  int v543;
  int v544;
  int v545;
  unsigned int v546;
  int v547;
  int v548;
  int v549;
  unsigned int v550;
  int v551;
  int v552;
  int v553;
  int v554;
  int v555;
  int v556;
  int v557;
  int v558;
  int v559;
  int v560;
  int v561;
  int v562;
  int v563;
  int v564;
  int v565;
  int v566;
  unsigned int v567;
  int v568;
  int v569;
  int v570;
  int v571;

  v14 = result;
LABEL_2:
  v15 = (unint64_t *)((char *)a2 - 28);
  v405 = a2 - 2;
  v406 = a2 - 7;
  v16 = (uint64_t *)((char *)a2 - 84);
  v403 = a2 - 9;
  v404 = (uint64_t *)((char *)a2 - 44);
  v17 = v14;
  while (2)
  {
    v14 = v17;
    v18 = (uint64_t)a2 - v17;
    v19 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)a2 - v17) >> 2);
    switch(v19)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v236 = (uint64_t *)((char *)a2 - 28);
        a6.i64[0] = **a3;
        a6.i32[2] = *((_DWORD *)*a3 + 2);
        a7.i64[0] = *(uint64_t *)((char *)a2 - 28);
        a7.i32[2] = *((_DWORD *)a2 - 5);
        v237 = (int8x16_t)vsubq_f32(a6, a7);
        v238 = (float32x2_t)vextq_s8(v237, v237, 8uLL).u64[0];
        v239 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v237.i8, *(float32x2_t *)v237.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v237.i8, 1), *(float32x2_t *)v237.i8, 1);
        v237.i64[0] = *(_QWORD *)v17;
        v237.i32[2] = *(_DWORD *)(v17 + 8);
        v240 = (int8x16_t)vsubq_f32(a6, (float32x4_t)v237);
        v241 = (float32x2_t)vextq_s8(v240, v240, 8uLL).u64[0];
        if (vmla_f32(v239, v238, v238).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v240.i8, *(float32x2_t *)v240.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v240.i8, 1), *(float32x2_t *)v240.i8, 1), v241, v241).f32[0])
        {
          v482 = *(_DWORD *)(v17 + 8);
          v442 = *(_QWORD *)v17;
          v522 = *(_QWORD *)(v17 + 12);
          v561 = *(_DWORD *)(v17 + 20);
          v242 = *(_WORD *)(v17 + 24);
          v243 = *((_DWORD *)a2 - 5);
          *(_QWORD *)v17 = *v236;
          *(_DWORD *)(v17 + 8) = v243;
          v244 = *((_DWORD *)a2 - 2);
          *(_QWORD *)(v17 + 12) = *(a2 - 2);
          *(_DWORD *)(v17 + 20) = v244;
          *(_WORD *)(v17 + 24) = *((_WORD *)a2 - 2);
          *((_DWORD *)a2 - 5) = v482;
          *v236 = v442;
          *((_DWORD *)a2 - 2) = v561;
          *(a2 - 2) = v522;
          *((_WORD *)a2 - 2) = v242;
        }
        return result;
      case 3:
        v245 = (uint64_t *)(v17 + 28);
        v246 = (uint64_t *)((char *)a2 - 28);
        a6.i64[0] = **a3;
        a6.i32[2] = *((_DWORD *)*a3 + 2);
        a7.i64[0] = *(_QWORD *)(v17 + 28);
        a7.i32[2] = *(_DWORD *)(v17 + 36);
        v247 = (int8x16_t)vsubq_f32(a6, a7);
        v248 = (float32x2_t)vextq_s8(v247, v247, 8uLL).u64[0];
        v249 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v247.i8, *(float32x2_t *)v247.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v247.i8, 1), *(float32x2_t *)v247.i8, 1), v248, v248).f32[0];
        v247.i64[0] = *(_QWORD *)v17;
        v247.i32[2] = *(_DWORD *)(v17 + 8);
        v252 = (int8x16_t)vsubq_f32(a6, (float32x4_t)v247);
        v250 = (float32x2_t)vextq_s8(v252, v252, 8uLL).u64[0];
        v251 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v252.i8, *(float32x2_t *)v252.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v252.i8, 1), *(float32x2_t *)v252.i8, 1), v250, v250).f32[0];
        v252.i64[0] = *(uint64_t *)((char *)a2 - 28);
        v252.i32[2] = *((_DWORD *)a2 - 5);
        v253 = (int8x16_t)vsubq_f32(a6, (float32x4_t)v252);
        v254 = (float32x2_t)vextq_s8(v253, v253, 8uLL).u64[0];
        v255 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v253.i8, *(float32x2_t *)v253.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v253.i8, 1), *(float32x2_t *)v253.i8, 1), v254, v254).f32[0] < v249;
        if (v249 >= v251)
        {
          if (v255)
          {
            v449 = *v245;
            v489 = *(_DWORD *)(v17 + 36);
            v369 = (_QWORD *)(v17 + 40);
            v529 = *(_QWORD *)(v17 + 40);
            v568 = *(_DWORD *)(v17 + 48);
            v370 = *(_WORD *)(v17 + 52);
            v371 = *((_DWORD *)a2 - 5);
            *v245 = *v246;
            *(_DWORD *)(v17 + 36) = v371;
            v372 = *(a2 - 2);
            *(_DWORD *)(v17 + 48) = *((_DWORD *)a2 - 2);
            *(_QWORD *)(v17 + 40) = v372;
            *(_WORD *)(v17 + 52) = *((_WORD *)a2 - 2);
            *((_DWORD *)a2 - 5) = v489;
            *v246 = v449;
            *((_DWORD *)a2 - 2) = v568;
            *(a2 - 2) = v529;
            *((_WORD *)a2 - 2) = v370;
            v253.i64[0] = **a3;
            v253.i32[2] = *((_DWORD *)*a3 + 2);
            v252.i64[0] = *(_QWORD *)(v17 + 28);
            v252.i32[2] = *(_DWORD *)(v17 + 36);
            v373 = (int8x16_t)vsubq_f32((float32x4_t)v253, (float32x4_t)v252);
            v374 = (float32x2_t)vextq_s8(v373, v373, 8uLL).u64[0];
            v375 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v373.i8, *(float32x2_t *)v373.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v373.i8, 1), *(float32x2_t *)v373.i8, 1);
            v373.i64[0] = *(_QWORD *)v17;
            v373.i32[2] = *(_DWORD *)(v17 + 8);
            v376 = (int8x16_t)vsubq_f32((float32x4_t)v253, (float32x4_t)v373);
            v377 = (float32x2_t)vextq_s8(v376, v376, 8uLL).u64[0];
            if (vmla_f32(v375, v374, v374).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v376.i8, *(float32x2_t *)v376.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v376.i8, 1), *(float32x2_t *)v376.i8, 1), v377, v377).f32[0])
            {
              v490 = *(_DWORD *)(v17 + 8);
              v450 = *(_QWORD *)v17;
              v530 = *(_QWORD *)(v17 + 12);
              v569 = *(_DWORD *)(v17 + 20);
              v378 = *(_WORD *)(v17 + 24);
              *(_QWORD *)v17 = *v245;
              *(_DWORD *)(v17 + 8) = *(_DWORD *)(v17 + 36);
              *(_QWORD *)(v17 + 12) = *v369;
              *(_DWORD *)(v17 + 20) = *(_DWORD *)(v17 + 48);
              *(_WORD *)(v17 + 24) = *(_WORD *)(v17 + 52);
              *(_DWORD *)(v17 + 36) = v490;
              *v245 = v450;
              *(_DWORD *)(v17 + 48) = v569;
              *v369 = v530;
              *(_WORD *)(v17 + 52) = v378;
            }
          }
        }
        else
        {
          v256 = (uint64_t *)(v17 + 12);
          if (v255)
          {
            v483 = *(_DWORD *)(v17 + 8);
            v443 = *(_QWORD *)v17;
            v523 = *v256;
            v562 = *(_DWORD *)(v17 + 20);
            v257 = *(_WORD *)(v17 + 24);
            v258 = *((_DWORD *)a2 - 5);
            *(_QWORD *)v17 = *v246;
            *(_DWORD *)(v17 + 8) = v258;
            v259 = *((_DWORD *)a2 - 2);
            *v256 = *(a2 - 2);
            *(_DWORD *)(v17 + 20) = v259;
            *(_WORD *)(v17 + 24) = *((_WORD *)a2 - 2);
            *((_DWORD *)a2 - 5) = v483;
            *v246 = v443;
            *((_DWORD *)a2 - 2) = v562;
            *(a2 - 2) = v523;
            *((_WORD *)a2 - 2) = v257;
          }
          else
          {
            v492 = *(_DWORD *)(v17 + 8);
            v452 = *(_QWORD *)v17;
            v531 = *v256;
            v570 = *(_DWORD *)(v17 + 20);
            v394 = *(_WORD *)(v17 + 24);
            *(_QWORD *)v17 = *v245;
            *(_DWORD *)(v17 + 8) = *(_DWORD *)(v17 + 36);
            v395 = (uint64_t *)(v17 + 40);
            *v256 = *(_QWORD *)(v17 + 40);
            *(_DWORD *)(v17 + 20) = *(_DWORD *)(v17 + 48);
            *(_WORD *)(v17 + 24) = *(_WORD *)(v17 + 52);
            *(_DWORD *)(v17 + 36) = v492;
            *v245 = v452;
            *(_DWORD *)(v17 + 48) = v570;
            *(_QWORD *)(v17 + 40) = v531;
            *(_WORD *)(v17 + 52) = v394;
            v253.i64[0] = **a3;
            v253.i32[2] = *((_DWORD *)*a3 + 2);
            v252.i64[0] = *v246;
            v252.i32[2] = *((_DWORD *)a2 - 5);
            v396 = (int8x16_t)vsubq_f32((float32x4_t)v253, (float32x4_t)v252);
            v397 = (float32x2_t)vextq_s8(v396, v396, 8uLL).u64[0];
            v398 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v396.i8, *(float32x2_t *)v396.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v396.i8, 1), *(float32x2_t *)v396.i8, 1);
            v396.i64[0] = *(_QWORD *)(v17 + 28);
            v396.i32[2] = *(_DWORD *)(v17 + 36);
            v399 = (int8x16_t)vsubq_f32((float32x4_t)v253, (float32x4_t)v396);
            v400 = (float32x2_t)vextq_s8(v399, v399, 8uLL).u64[0];
            if (vmla_f32(v398, v397, v397).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v399.i8, *(float32x2_t *)v399.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v399.i8, 1), *(float32x2_t *)v399.i8, 1), v400, v400).f32[0])
            {
              v453 = *v245;
              v493 = *(_DWORD *)(v17 + 36);
              v532 = *v395;
              v571 = *(_DWORD *)(v17 + 48);
              v401 = *((_DWORD *)a2 - 5);
              *v245 = *v246;
              *(_DWORD *)(v17 + 36) = v401;
              v402 = *(a2 - 2);
              *(_DWORD *)(v17 + 48) = *((_DWORD *)a2 - 2);
              *v395 = v402;
              *(_WORD *)(v17 + 52) = *((_WORD *)a2 - 2);
              *((_DWORD *)a2 - 5) = v493;
              *v246 = v453;
              *((_DWORD *)a2 - 2) = v571;
              *(a2 - 2) = v532;
              *((_WORD *)a2 - 2) = v394;
            }
          }
        }
        return result;
      case 4:
        return sub_2233CECB4(v17, v17 + 28, v17 + 56, (uint64_t)a2 - 28, a3, a6, a7);
      case 5:
        v260 = (uint64_t *)(v17 + 28);
        v261 = (uint64_t *)(v17 + 56);
        v262 = (uint64_t *)(v17 + 84);
        result = sub_2233CECB4(v17, v17 + 28, v17 + 56, v17 + 84, a3, a6, a7);
        v263 = (uint64_t *)((char *)a2 - 28);
        v264.i64[0] = **a3;
        v264.i32[2] = *((_DWORD *)*a3 + 2);
        v265.i64[0] = *(uint64_t *)((char *)a2 - 28);
        v265.i32[2] = *((_DWORD *)a2 - 5);
        v268 = (int8x16_t)vsubq_f32(v264, v265);
        v266 = (float32x2_t)vextq_s8(v268, v268, 8uLL).u64[0];
        v267 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v268.i8, *(float32x2_t *)v268.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v268.i8, 1), *(float32x2_t *)v268.i8, 1);
        v268.i64[0] = *(_QWORD *)(v17 + 84);
        v268.i32[2] = *(_DWORD *)(v17 + 92);
        v269 = (int8x16_t)vsubq_f32(v264, (float32x4_t)v268);
        v270 = (float32x2_t)vextq_s8(v269, v269, 8uLL).u64[0];
        if (vmla_f32(v267, v266, v266).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v269.i8, *(float32x2_t *)v269.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v269.i8, 1), *(float32x2_t *)v269.i8, 1), v270, v270).f32[0])
        {
          v444 = *v262;
          v484 = *(_DWORD *)(v17 + 92);
          v271 = (_QWORD *)(v17 + 96);
          v524 = *(_QWORD *)(v17 + 96);
          v563 = *(_DWORD *)(v17 + 104);
          v272 = *(_WORD *)(v17 + 108);
          v273 = *((_DWORD *)a2 - 5);
          *v262 = *v263;
          *(_DWORD *)(v17 + 92) = v273;
          v274 = *(a2 - 2);
          *(_DWORD *)(v17 + 104) = *((_DWORD *)a2 - 2);
          *(_QWORD *)(v17 + 96) = v274;
          *(_WORD *)(v17 + 108) = *((_WORD *)a2 - 2);
          *((_DWORD *)a2 - 5) = v484;
          *v263 = v444;
          *((_DWORD *)a2 - 2) = v563;
          *(a2 - 2) = v524;
          *((_WORD *)a2 - 2) = v272;
          v269.i64[0] = **a3;
          v269.i32[2] = *((_DWORD *)*a3 + 2);
          v268.i64[0] = *(_QWORD *)(v17 + 84);
          v268.i32[2] = *(_DWORD *)(v17 + 92);
          v277 = (int8x16_t)vsubq_f32((float32x4_t)v269, (float32x4_t)v268);
          v275 = (float32x2_t)vextq_s8(v277, v277, 8uLL).u64[0];
          v276 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v277.i8, *(float32x2_t *)v277.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v277.i8, 1), *(float32x2_t *)v277.i8, 1);
          v277.i64[0] = *(_QWORD *)(v17 + 56);
          v277.i32[2] = *(_DWORD *)(v17 + 64);
          v278 = (int8x16_t)vsubq_f32((float32x4_t)v269, (float32x4_t)v277);
          v279 = (float32x2_t)vextq_s8(v278, v278, 8uLL).u64[0];
          if (vmla_f32(v276, v275, v275).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v278.i8, *(float32x2_t *)v278.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v278.i8, 1), *(float32x2_t *)v278.i8, 1), v279, v279).f32[0])
          {
            v280 = *v261;
            v281 = *(_DWORD *)(v17 + 64);
            v282 = (_QWORD *)(v17 + 68);
            v525 = *(_QWORD *)(v17 + 68);
            v564 = *(_DWORD *)(v17 + 76);
            v283 = *(_WORD *)(v17 + 80);
            *v261 = *v262;
            *(_DWORD *)(v17 + 64) = *(_DWORD *)(v17 + 92);
            *(_QWORD *)(v17 + 68) = *v271;
            *(_DWORD *)(v17 + 76) = *(_DWORD *)(v17 + 104);
            v284 = *(_WORD *)(v17 + 108);
            *(_WORD *)(v17 + 80) = v284;
            *(_DWORD *)(v17 + 92) = v281;
            *v262 = v280;
            *(_DWORD *)(v17 + 104) = v564;
            *v271 = v525;
            *(_WORD *)(v17 + 108) = v283;
            v278.i64[0] = **a3;
            v278.i32[2] = *((_DWORD *)*a3 + 2);
            v277.i64[0] = *(_QWORD *)(v17 + 56);
            v277.i32[2] = *(_DWORD *)(v17 + 64);
            v287 = (int8x16_t)vsubq_f32((float32x4_t)v278, (float32x4_t)v277);
            v285 = (float32x2_t)vextq_s8(v287, v287, 8uLL).u64[0];
            v286 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v287.i8, *(float32x2_t *)v287.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v287.i8, 1), *(float32x2_t *)v287.i8, 1);
            v287.i64[0] = *(_QWORD *)(v17 + 28);
            v287.i32[2] = *(_DWORD *)(v17 + 36);
            v288 = (int8x16_t)vsubq_f32((float32x4_t)v278, (float32x4_t)v287);
            v289 = (float32x2_t)vextq_s8(v288, v288, 8uLL).u64[0];
            if (vmla_f32(v286, v285, v285).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v288.i8, *(float32x2_t *)v288.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v288.i8, 1), *(float32x2_t *)v288.i8, 1), v289, v289).f32[0])
            {
              v290 = *v260;
              v291 = *(_DWORD *)(v17 + 36);
              v292 = (_QWORD *)(v17 + 40);
              v526 = *(_QWORD *)(v17 + 40);
              v565 = *(_DWORD *)(v17 + 48);
              v293 = *(_WORD *)(v17 + 52);
              *v260 = *v261;
              *(_DWORD *)(v17 + 36) = *(_DWORD *)(v17 + 64);
              *(_QWORD *)(v17 + 40) = *v282;
              *(_DWORD *)(v17 + 48) = *(_DWORD *)(v17 + 76);
              *(_WORD *)(v17 + 52) = v284;
              *(_DWORD *)(v17 + 64) = v291;
              *v261 = v290;
              *(_DWORD *)(v17 + 76) = v565;
              *v282 = v526;
              *(_WORD *)(v17 + 80) = v293;
              v288.i64[0] = **a3;
              v288.i32[2] = *((_DWORD *)*a3 + 2);
              v287.i64[0] = *(_QWORD *)(v17 + 28);
              v287.i32[2] = *(_DWORD *)(v17 + 36);
              v294 = (int8x16_t)vsubq_f32((float32x4_t)v288, (float32x4_t)v287);
              v295 = (float32x2_t)vextq_s8(v294, v294, 8uLL).u64[0];
              v296 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v294.i8, *(float32x2_t *)v294.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v294.i8, 1), *(float32x2_t *)v294.i8, 1);
              v294.i64[0] = *(_QWORD *)v17;
              v294.i32[2] = *(_DWORD *)(v17 + 8);
              v297 = (int8x16_t)vsubq_f32((float32x4_t)v288, (float32x4_t)v294);
              v298 = (float32x2_t)vextq_s8(v297, v297, 8uLL).u64[0];
              if (vmla_f32(v296, v295, v295).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v297.i8, *(float32x2_t *)v297.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v297.i8, 1), *(float32x2_t *)v297.i8, 1), v298, v298).f32[0])
              {
                v485 = *(_DWORD *)(v17 + 8);
                v445 = *(_QWORD *)v17;
                v527 = *(_QWORD *)(v17 + 12);
                v566 = *(_DWORD *)(v17 + 20);
                v299 = *(_WORD *)(v17 + 24);
                *(_QWORD *)v17 = *v260;
                *(_DWORD *)(v17 + 8) = *(_DWORD *)(v17 + 36);
                *(_QWORD *)(v17 + 12) = *v292;
                *(_DWORD *)(v17 + 20) = *(_DWORD *)(v17 + 48);
                *(_WORD *)(v17 + 24) = v284;
                *(_DWORD *)(v17 + 36) = v485;
                *v260 = v445;
                *(_DWORD *)(v17 + 48) = v566;
                *v292 = v527;
                *(_WORD *)(v17 + 52) = v299;
              }
            }
          }
        }
        return result;
      default:
        if (v18 > 671)
        {
          if (!a4)
          {
            if ((uint64_t *)v17 != a2)
            {
              v319 = (unint64_t)(v19 - 2) >> 1;
              v320 = v319;
              do
              {
                if (v319 >= v320)
                {
                  v322 = (2 * v320) | 1;
                  v323 = v17 + 28 * v322;
                  a7.i64[0] = **a3;
                  a7.i32[2] = *((_DWORD *)*a3 + 2);
                  if (2 * v320 + 2 < v19)
                  {
                    a6.i64[0] = *(_QWORD *)v323;
                    a6.i32[2] = *(_DWORD *)(v323 + 8);
                    v324 = (int8x16_t)vsubq_f32(a7, a6);
                    v325 = (float32x2_t)vextq_s8(v324, v324, 8uLL).u64[0];
                    v326 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v324.i8, *(float32x2_t *)v324.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v324.i8, 1), *(float32x2_t *)v324.i8, 1), v325, v325).f32[0];
                    v324.i64[0] = *(_QWORD *)(v323 + 28);
                    v324.i32[2] = *(_DWORD *)(v323 + 36);
                    a6 = vsubq_f32(a7, (float32x4_t)v324);
                    v327 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
                    if (v326 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), v327, v327).f32[0])
                    {
                      v323 += 28;
                      v322 = 2 * v320 + 2;
                    }
                  }
                  v328 = v17 + 28 * v320;
                  a6.i64[0] = *(_QWORD *)v323;
                  a6.i32[2] = *(_DWORD *)(v323 + 8);
                  a6 = vsubq_f32(a7, a6);
                  v329 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
                  v330 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1);
                  a6.i64[0] = *(_QWORD *)v328;
                  a6.i32[2] = *(_DWORD *)(v328 + 8);
                  a7 = vsubq_f32(a7, a6);
                  v330.f32[0] = vmla_f32(v330, v329, v329).f32[0];
                  v331 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
                  if (v330.f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1), v331, v331).f32[0])
                  {
                    v332 = v17 + 28 * v320;
                    v487 = *(_DWORD *)(v332 + 20);
                    v447 = *(_QWORD *)(v332 + 12);
                    v333 = *(_WORD *)(v332 + 24);
                    do
                    {
                      v336 = v328;
                      v328 = v323;
                      v337 = *(_QWORD *)v323;
                      *(_DWORD *)(v336 + 8) = *(_DWORD *)(v328 + 8);
                      *(_QWORD *)v336 = v337;
                      v338 = *(_QWORD *)(v328 + 12);
                      *(_DWORD *)(v336 + 20) = *(_DWORD *)(v328 + 20);
                      *(_QWORD *)(v336 + 12) = v338;
                      *(_WORD *)(v336 + 24) = *(_WORD *)(v328 + 24);
                      if (v319 < v322)
                        break;
                      v339 = (2 * v322) | 1;
                      v323 = v17 + 28 * v339;
                      v340 = 2 * v322 + 2;
                      a7.i64[0] = **a3;
                      a7.i32[2] = *((_DWORD *)*a3 + 2);
                      if (v340 < v19)
                      {
                        a8.i64[0] = *(_QWORD *)v323;
                        a8.i32[2] = *(_DWORD *)(v323 + 8);
                        v341 = (int8x16_t)vsubq_f32(a7, (float32x4_t)a8);
                        v342 = (float32x2_t)vextq_s8(v341, v341, 8uLL).u64[0];
                        v343 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v341.i8, *(float32x2_t *)v341.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v341.i8, 1), *(float32x2_t *)v341.i8, 1), v342, v342).f32[0];
                        v341.i64[0] = *(_QWORD *)(v323 + 28);
                        v341.i32[2] = *(_DWORD *)(v323 + 36);
                        a8 = (int8x16_t)vsubq_f32(a7, (float32x4_t)v341);
                        v344 = (float32x2_t)vextq_s8(a8, a8, 8uLL).u64[0];
                        if (v343 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a8.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a8.i8, 1), *(float32x2_t *)a8.i8, 1), v344, v344).f32[0])
                        {
                          v323 += 28;
                          v339 = v340;
                        }
                      }
                      a8.i64[0] = *(_QWORD *)v323;
                      a8.i32[2] = *(_DWORD *)(v323 + 8);
                      a8 = (int8x16_t)vsubq_f32(a7, (float32x4_t)a8);
                      v334 = (float32x2_t)vextq_s8(a8, a8, 8uLL).u64[0];
                      a7 = vsubq_f32(a7, a6);
                      v335 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
                      v322 = v339;
                    }
                    while (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a8.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a8.i8, 1), *(float32x2_t *)a8.i8, 1), v334, v334).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1), v335, v335).f32[0]);
                    *(_DWORD *)(v328 + 8) = a6.i32[2];
                    *(_QWORD *)v328 = a6.i64[0];
                    *(_QWORD *)(v328 + 12) = v447;
                    *(_DWORD *)(v328 + 20) = v487;
                    *(_WORD *)(v328 + 24) = v333;
                  }
                }
                v321 = v320-- <= 0;
              }
              while (!v321);
              v345 = v18 / 0x1CuLL;
              do
              {
                v346 = 0;
                v347 = a2;
                v488 = *(_DWORD *)(v17 + 8);
                v448 = *(_QWORD *)v17;
                v528 = *(_QWORD *)(v17 + 12);
                v567 = *(_DWORD *)(v17 + 20);
                v348 = *(_WORD *)(v17 + 24);
                result = v17;
                do
                {
                  v352 = result + 28 * v346 + 28;
                  v353 = (2 * v346) | 1;
                  if (2 * v346 + 2 < v345)
                  {
                    a6.i64[0] = **a3;
                    a6.i32[2] = *((_DWORD *)*a3 + 2);
                    a7.i64[0] = *(_QWORD *)v352;
                    a7.i32[2] = *(_DWORD *)(result + 28 * v346 + 36);
                    a7 = vsubq_f32(a6, a7);
                    v354 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
                    v355 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1), v354, v354).f32[0];
                    a7.i64[0] = *(_QWORD *)(result + 28 * v346 + 56);
                    a7.i32[2] = *(_DWORD *)(result + 28 * v346 + 64);
                    a6 = vsubq_f32(a6, a7);
                    a8 = vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL);
                    if (v355 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), *(float32x2_t *)a8.i8, *(float32x2_t *)a8.i8).f32[0])
                    {
                      v352 = result + 28 * v346 + 56;
                      v353 = 2 * v346 + 2;
                    }
                  }
                  v349 = *(_QWORD *)v352;
                  *(_DWORD *)(result + 8) = *(_DWORD *)(v352 + 8);
                  *(_QWORD *)result = v349;
                  v351 = (uint64_t *)(v352 + 12);
                  v350 = *(_QWORD *)(v352 + 12);
                  *(_DWORD *)(result + 20) = *(_DWORD *)(v352 + 20);
                  *(_QWORD *)(result + 12) = v350;
                  *(_WORD *)(result + 24) = *(_WORD *)(v352 + 24);
                  result = v352;
                  v346 = v353;
                }
                while (v353 <= (uint64_t)((unint64_t)(v345 - 2) >> 1));
                a2 = (uint64_t *)((char *)a2 - 28);
                if ((uint64_t *)v352 == (uint64_t *)((char *)v347 - 28))
                {
                  *(_DWORD *)(v352 + 8) = v488;
                  *(_QWORD *)v352 = v448;
                  *(_DWORD *)(v352 + 20) = v567;
                  *v351 = v528;
                  *(_WORD *)(v352 + 24) = v348;
                }
                else
                {
                  v356 = *a2;
                  *(_DWORD *)(v352 + 8) = *((_DWORD *)v347 - 5);
                  *(_QWORD *)v352 = v356;
                  v357 = *(v347 - 2);
                  *(_DWORD *)(v352 + 20) = *((_DWORD *)v347 - 2);
                  *v351 = v357;
                  *(_WORD *)(v352 + 24) = *((_WORD *)v347 - 2);
                  *((_DWORD *)v347 - 5) = v488;
                  *a2 = v448;
                  result = v567;
                  *((_DWORD *)v347 - 2) = v567;
                  *(v347 - 2) = v528;
                  *((_WORD *)v347 - 2) = v348;
                  v358 = v352 - v17 + 28;
                  if (v358 >= 29)
                  {
                    v359 = (v358 / 0x1CuLL - 2) >> 1;
                    a7.i64[0] = **a3;
                    a7.i32[2] = *((_DWORD *)*a3 + 2);
                    v360 = v17 + 28 * v359;
                    a6.i64[0] = *(_QWORD *)v360;
                    a6.i32[2] = *(_DWORD *)(v360 + 8);
                    a6 = vsubq_f32(a7, a6);
                    v361 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
                    v362 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1);
                    a6.i64[0] = *(_QWORD *)v352;
                    a6.i32[2] = *(_DWORD *)(v352 + 8);
                    a7 = vsubq_f32(a7, a6);
                    v362.f32[0] = vmla_f32(v362, v361, v361).f32[0];
                    v363 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
                    if (v362.f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1), v363, v363).f32[0])
                    {
                      v413 = *(_DWORD *)(v352 + 20);
                      v410 = *v351;
                      v364 = *(_WORD *)(v352 + 24);
                      do
                      {
                        result = v352;
                        v352 = v360;
                        v365 = *(_QWORD *)v360;
                        *(_DWORD *)(result + 8) = *(_DWORD *)(v352 + 8);
                        *(_QWORD *)result = v365;
                        v366 = *(_QWORD *)(v352 + 12);
                        *(_DWORD *)(result + 20) = *(_DWORD *)(v352 + 20);
                        *(_QWORD *)(result + 12) = v366;
                        *(_WORD *)(result + 24) = *(_WORD *)(v352 + 24);
                        if (!v359)
                          break;
                        v359 = (v359 - 1) >> 1;
                        v360 = v17 + 28 * v359;
                        a7.i64[0] = **a3;
                        a7.i32[2] = *((_DWORD *)*a3 + 2);
                        a8.i64[0] = *(_QWORD *)v360;
                        result = v360 + 8;
                        a8.i32[2] = *(_DWORD *)(v360 + 8);
                        a8 = (int8x16_t)vsubq_f32(a7, (float32x4_t)a8);
                        v367 = (float32x2_t)vextq_s8(a8, a8, 8uLL).u64[0];
                        a7 = vsubq_f32(a7, a6);
                        v368 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
                      }
                      while (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a8.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a8.i8, 1), *(float32x2_t *)a8.i8, 1), v367, v367).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1), v368, v368).f32[0]);
                      *(_DWORD *)(v352 + 8) = a6.i32[2];
                      *(_QWORD *)v352 = a6.i64[0];
                      *(_QWORD *)(v352 + 12) = v410;
                      *(_DWORD *)(v352 + 20) = v413;
                      *(_WORD *)(v352 + 24) = v364;
                    }
                  }
                }
                v321 = v345-- <= 2;
              }
              while (!v321);
            }
            return result;
          }
          v20 = (unint64_t)v19 >> 1;
          a7.i64[0] = **a3;
          a7.i32[2] = *((_DWORD *)*a3 + 2);
          a6.i64[0] = *v15;
          a6.i32[2] = *((_DWORD *)a2 - 5);
          v21 = (int8x16_t)vsubq_f32(a7, a6);
          v22 = v17 + 28 * ((unint64_t)v19 >> 1);
          v23 = (float32x2_t)vextq_s8(v21, v21, 8uLL).u64[0];
          LODWORD(v24) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1), *(float32x2_t *)v21.i8, 1), v23, v23).u32[0];
          if ((unint64_t)v18 >= 0xE01)
          {
            v21.i64[0] = *(_QWORD *)v22;
            v21.i32[2] = *(_DWORD *)(v22 + 8);
            v25 = (int8x16_t)vsubq_f32(a7, (float32x4_t)v21);
            v26 = (float32x2_t)vextq_s8(v25, v25, 8uLL).u64[0];
            v27 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 1), *(float32x2_t *)v25.i8, 1), v26, v26).f32[0];
            v25.i64[0] = *(_QWORD *)v17;
            v25.i32[2] = *(_DWORD *)(v17 + 8);
            v28 = (int8x16_t)vsubq_f32(a7, (float32x4_t)v25);
            v29 = (float32x2_t)vextq_s8(v28, v28, 8uLL).u64[0];
            if (v27 >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1), *(float32x2_t *)v28.i8, 1), v29, v29).f32[0])
            {
              if (v24 < v27)
              {
                v456 = *(_DWORD *)(v22 + 8);
                v416 = *(_QWORD *)v22;
                v43 = v17 + 28 * v20;
                v44 = v43 + 12;
                v535 = *(_DWORD *)(v43 + 20);
                v496 = *(_QWORD *)(v43 + 12);
                v45 = *((_DWORD *)a2 - 5);
                *(_QWORD *)v22 = *v15;
                *(_DWORD *)(v22 + 8) = v45;
                v46 = *v405;
                *(_DWORD *)(v43 + 20) = *((_DWORD *)a2 - 2);
                v48 = *(_WORD *)(v43 + 24);
                v47 = (_WORD *)(v43 + 24);
                *(_QWORD *)v44 = v46;
                *v47 = *((_WORD *)a2 - 2);
                *((_DWORD *)a2 - 5) = v456;
                *v15 = v416;
                *((_DWORD *)a2 - 2) = v535;
                *v405 = v496;
                *((_WORD *)a2 - 2) = v48;
                a6.i64[0] = **a3;
                a6.i32[2] = *((_DWORD *)*a3 + 2);
                v28.i64[0] = *(_QWORD *)v22;
                v28.i32[2] = *(_DWORD *)(v22 + 8);
                v28 = (int8x16_t)vsubq_f32(a6, (float32x4_t)v28);
                v49 = (float32x2_t)vextq_s8(v28, v28, 8uLL).u64[0];
                v50 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1), *(float32x2_t *)v28.i8, 1);
                v28.i64[0] = *(_QWORD *)v17;
                v28.i32[2] = *(_DWORD *)(v17 + 8);
                a6 = vsubq_f32(a6, (float32x4_t)v28);
                v51 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
                if (vmla_f32(v50, v49, v49).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), v51, v51).f32[0])
                {
                  v457 = *(_DWORD *)(v17 + 8);
                  v417 = *(_QWORD *)v17;
                  v497 = *(_QWORD *)(v17 + 12);
                  v536 = *(_DWORD *)(v17 + 20);
                  v52 = *(_WORD *)(v17 + 24);
                  v53 = *(_DWORD *)(v22 + 8);
                  *(_QWORD *)v17 = *(_QWORD *)v22;
                  *(_DWORD *)(v17 + 8) = v53;
                  v54 = *(_DWORD *)(v44 + 8);
                  *(_QWORD *)(v17 + 12) = *(_QWORD *)v44;
                  *(_DWORD *)(v17 + 20) = v54;
                  *(_WORD *)(v17 + 24) = *v47;
                  *(_DWORD *)(v22 + 8) = v457;
                  *(_QWORD *)v22 = v417;
                  *(_DWORD *)(v44 + 8) = v536;
                  *(_QWORD *)v44 = v497;
                  *v47 = v52;
                }
              }
            }
            else
            {
              v30 = (uint64_t *)(v17 + 12);
              if (v24 >= v27)
              {
                v460 = *(_DWORD *)(v17 + 8);
                v420 = *(_QWORD *)v17;
                v500 = *v30;
                v539 = *(_DWORD *)(v17 + 20);
                v31 = *(_WORD *)(v17 + 24);
                v65 = *(_DWORD *)(v22 + 8);
                *(_QWORD *)v17 = *(_QWORD *)v22;
                *(_DWORD *)(v17 + 8) = v65;
                v66 = v17 + 28 * v20;
                v68 = *(_QWORD *)(v66 + 12);
                v67 = v66 + 12;
                v69 = *(_DWORD *)(v67 + 8);
                *v30 = v68;
                *(_DWORD *)(v17 + 20) = v69;
                *(_WORD *)(v17 + 24) = *(_WORD *)(v67 + 12);
                *(_DWORD *)(v22 + 8) = v460;
                *(_QWORD *)v22 = v420;
                *(_DWORD *)(v67 + 8) = v539;
                *(_QWORD *)v67 = v500;
                *(_WORD *)(v67 + 12) = v31;
                a6.i64[0] = **a3;
                a6.i32[2] = *((_DWORD *)*a3 + 2);
                v28.i64[0] = *v15;
                v28.i32[2] = *((_DWORD *)a2 - 5);
                v28 = (int8x16_t)vsubq_f32(a6, (float32x4_t)v28);
                v70 = (float32x2_t)vextq_s8(v28, v28, 8uLL).u64[0];
                v71 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1), *(float32x2_t *)v28.i8, 1);
                v28.i64[0] = *(_QWORD *)v22;
                v28.i32[2] = *(_DWORD *)(v22 + 8);
                a6 = vsubq_f32(a6, (float32x4_t)v28);
                v72 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
                if (vmla_f32(v71, v70, v70).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), v72, v72).f32[0])goto LABEL_22;
                v461 = *(_DWORD *)(v22 + 8);
                v421 = *(_QWORD *)v22;
                v540 = *(_DWORD *)(v67 + 8);
                v501 = *(_QWORD *)v67;
                v73 = *v15;
                *(_DWORD *)(v22 + 8) = *((_DWORD *)a2 - 5);
                *(_QWORD *)v22 = v73;
                v74 = *v405;
                *(_DWORD *)(v67 + 8) = *((_DWORD *)a2 - 2);
                *(_QWORD *)v67 = v74;
                *(_WORD *)(v67 + 12) = *((_WORD *)a2 - 2);
                *((_DWORD *)a2 - 5) = v461;
                *v15 = v421;
                *((_DWORD *)a2 - 2) = v540;
                *v405 = v501;
              }
              else
              {
                v454 = *(_DWORD *)(v17 + 8);
                v414 = *(_QWORD *)v17;
                v494 = *v30;
                v533 = *(_DWORD *)(v17 + 20);
                v31 = *(_WORD *)(v17 + 24);
                v32 = *((_DWORD *)a2 - 5);
                *(_QWORD *)v17 = *v15;
                *(_DWORD *)(v17 + 8) = v32;
                v33 = *((_DWORD *)a2 - 2);
                *v30 = *v405;
                *(_DWORD *)(v17 + 20) = v33;
                *(_WORD *)(v17 + 24) = *((_WORD *)a2 - 2);
                *((_DWORD *)a2 - 5) = v454;
                *v15 = v414;
                *((_DWORD *)a2 - 2) = v533;
                *v405 = v494;
              }
              *((_WORD *)a2 - 2) = v31;
            }
LABEL_22:
            v75 = (uint64_t *)(v17 + 28);
            v76 = v20 - 1;
            v77 = v17 + 28 * (v20 - 1);
            a6.i64[0] = **a3;
            a6.i32[2] = *((_DWORD *)*a3 + 2);
            v28.i64[0] = *(_QWORD *)v77;
            v28.i32[2] = *(_DWORD *)(v77 + 8);
            v78 = (int8x16_t)vsubq_f32(a6, (float32x4_t)v28);
            v79 = (float32x2_t)vextq_s8(v78, v78, 8uLL).u64[0];
            v80 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v78.i8, *(float32x2_t *)v78.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v78.i8, 1), *(float32x2_t *)v78.i8, 1), v79, v79).f32[0];
            v78.i64[0] = *(_QWORD *)(v17 + 28);
            v78.i32[2] = *(_DWORD *)(v17 + 36);
            v83 = (int8x16_t)vsubq_f32(a6, (float32x4_t)v78);
            v81 = (float32x2_t)vextq_s8(v83, v83, 8uLL).u64[0];
            v82 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v83.i8, *(float32x2_t *)v83.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1), *(float32x2_t *)v83.i8, 1), v81, v81).f32[0];
            v83.i64[0] = *v406;
            v83.i32[2] = *((_DWORD *)a2 - 12);
            v84 = (int8x16_t)vsubq_f32(a6, (float32x4_t)v83);
            v85 = (float32x2_t)vextq_s8(v84, v84, 8uLL).u64[0];
            v86 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)v84.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v84.i8, 1), *(float32x2_t *)v84.i8, 1), v85, v85).f32[0] < v80;
            if (v80 >= v82)
            {
              if (v86)
              {
                v463 = *(_DWORD *)(v77 + 8);
                v423 = *(_QWORD *)v77;
                v91 = v17 + 28 * v76;
                v92 = v91 + 12;
                v542 = *(_DWORD *)(v91 + 20);
                v503 = *(_QWORD *)(v91 + 12);
                v93 = *((_DWORD *)a2 - 12);
                *(_QWORD *)v77 = *v406;
                *(_DWORD *)(v77 + 8) = v93;
                v94 = *v404;
                *(_DWORD *)(v91 + 20) = *((_DWORD *)a2 - 9);
                v96 = *(_WORD *)(v91 + 24);
                v95 = (_WORD *)(v91 + 24);
                *(_QWORD *)v92 = v94;
                *v95 = *((_WORD *)a2 - 16);
                *((_DWORD *)a2 - 12) = v463;
                *v406 = v423;
                result = v542;
                *((_DWORD *)a2 - 9) = v542;
                *v404 = v503;
                *((_WORD *)a2 - 16) = v96;
                v84.i64[0] = **a3;
                v84.i32[2] = *((_DWORD *)*a3 + 2);
                v83.i64[0] = *(_QWORD *)v77;
                v83.i32[2] = *(_DWORD *)(v77 + 8);
                v83 = (int8x16_t)vsubq_f32((float32x4_t)v84, (float32x4_t)v83);
                v97 = (float32x2_t)vextq_s8(v83, v83, 8uLL).u64[0];
                v98 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v83.i8, *(float32x2_t *)v83.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1), *(float32x2_t *)v83.i8, 1);
                v83.i64[0] = *(_QWORD *)(v17 + 28);
                v83.i32[2] = *(_DWORD *)(v17 + 36);
                v84 = (int8x16_t)vsubq_f32((float32x4_t)v84, (float32x4_t)v83);
                v99 = (float32x2_t)vextq_s8(v84, v84, 8uLL).u64[0];
                if (vmla_f32(v98, v97, v97).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)v84.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v84.i8, 1), *(float32x2_t *)v84.i8, 1), v99, v99).f32[0])
                {
                  v424 = *v75;
                  v464 = *(_DWORD *)(v17 + 36);
                  v504 = *(_QWORD *)(v17 + 40);
                  v543 = *(_DWORD *)(v17 + 48);
                  v100 = *(_WORD *)(v17 + 52);
                  v101 = *(_DWORD *)(v77 + 8);
                  *v75 = *(_QWORD *)v77;
                  *(_DWORD *)(v17 + 36) = v101;
                  v102 = *(_QWORD *)v92;
                  *(_DWORD *)(v17 + 48) = *(_DWORD *)(v92 + 8);
                  *(_QWORD *)(v17 + 40) = v102;
                  *(_WORD *)(v17 + 52) = *v95;
                  *(_DWORD *)(v77 + 8) = v464;
                  *(_QWORD *)v77 = v424;
                  *(_DWORD *)(v92 + 8) = v543;
                  *(_QWORD *)v92 = v504;
                  *v95 = v100;
                }
              }
            }
            else
            {
              v87 = (uint64_t *)(v17 + 40);
              if (v86)
              {
                v422 = *v75;
                v462 = *(_DWORD *)(v17 + 36);
                v502 = *v87;
                v541 = *(_DWORD *)(v17 + 48);
                v88 = *(_WORD *)(v17 + 52);
                v89 = *((_DWORD *)a2 - 12);
                *v75 = *v406;
                *(_DWORD *)(v17 + 36) = v89;
                v90 = *v404;
                *(_DWORD *)(v17 + 48) = *((_DWORD *)a2 - 9);
                *v87 = v90;
                *(_WORD *)(v17 + 52) = *((_WORD *)a2 - 16);
                *((_DWORD *)a2 - 12) = v462;
                *v406 = v422;
                *((_DWORD *)a2 - 9) = v541;
                *v404 = v502;
              }
              else
              {
                v427 = *v75;
                v467 = *(_DWORD *)(v17 + 36);
                v507 = *v87;
                v546 = *(_DWORD *)(v17 + 48);
                v88 = *(_WORD *)(v17 + 52);
                v110 = *(_DWORD *)(v77 + 8);
                *v75 = *(_QWORD *)v77;
                *(_DWORD *)(v17 + 36) = v110;
                v111 = v17 + 28 * v76;
                v113 = *(_QWORD *)(v111 + 12);
                v112 = (uint64_t *)(v111 + 12);
                *(_DWORD *)(v17 + 48) = *(_DWORD *)(v111 + 20);
                *v87 = v113;
                *(_WORD *)(v17 + 52) = *(_WORD *)(v111 + 24);
                *(_DWORD *)(v77 + 8) = v467;
                *(_QWORD *)v77 = v427;
                result = v546;
                *(_DWORD *)(v111 + 20) = v546;
                *(_QWORD *)(v111 + 12) = v507;
                *(_WORD *)(v111 + 24) = v88;
                v84.i64[0] = **a3;
                v84.i32[2] = *((_DWORD *)*a3 + 2);
                v83.i64[0] = *v406;
                v83.i32[2] = *((_DWORD *)a2 - 12);
                v83 = (int8x16_t)vsubq_f32((float32x4_t)v84, (float32x4_t)v83);
                v114 = (float32x2_t)vextq_s8(v83, v83, 8uLL).u64[0];
                v115 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v83.i8, *(float32x2_t *)v83.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1), *(float32x2_t *)v83.i8, 1);
                v83.i64[0] = *(_QWORD *)v77;
                v83.i32[2] = *(_DWORD *)(v77 + 8);
                v84 = (int8x16_t)vsubq_f32((float32x4_t)v84, (float32x4_t)v83);
                v116 = (float32x2_t)vextq_s8(v84, v84, 8uLL).u64[0];
                if (vmla_f32(v115, v114, v114).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)v84.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v84.i8, 1), *(float32x2_t *)v84.i8, 1), v116, v116).f32[0])goto LABEL_34;
                v468 = *(_DWORD *)(v77 + 8);
                v428 = *(_QWORD *)v77;
                v547 = *(_DWORD *)(v111 + 20);
                v508 = *v112;
                v117 = *v406;
                *(_DWORD *)(v77 + 8) = *((_DWORD *)a2 - 12);
                *(_QWORD *)v77 = v117;
                result = (uint64_t)a2 - 44;
                v118 = *v404;
                *(_DWORD *)(v111 + 20) = *((_DWORD *)a2 - 9);
                *v112 = v118;
                *(_WORD *)(v111 + 24) = *((_WORD *)a2 - 16);
                *((_DWORD *)a2 - 12) = v468;
                *v406 = v428;
                *((_DWORD *)a2 - 9) = v547;
                *v404 = v508;
              }
              *((_WORD *)a2 - 16) = v88;
            }
LABEL_34:
            v119 = (uint64_t *)(v17 + 56);
            v120 = v20 + 1;
            v121 = v17 + 28 * (v20 + 1);
            v84.i64[0] = **a3;
            v84.i32[2] = *((_DWORD *)*a3 + 2);
            v83.i64[0] = *(_QWORD *)v121;
            v83.i32[2] = *(_DWORD *)(v121 + 8);
            v122 = (int8x16_t)vsubq_f32((float32x4_t)v84, (float32x4_t)v83);
            v123 = (float32x2_t)vextq_s8(v122, v122, 8uLL).u64[0];
            v124 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v122.i8, *(float32x2_t *)v122.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v122.i8, 1), *(float32x2_t *)v122.i8, 1), v123, v123).f32[0];
            v122.i64[0] = *(_QWORD *)(v17 + 56);
            v122.i32[2] = *(_DWORD *)(v17 + 64);
            v127 = (int8x16_t)vsubq_f32((float32x4_t)v84, (float32x4_t)v122);
            v125 = (float32x2_t)vextq_s8(v127, v127, 8uLL).u64[0];
            v126 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)v127.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v127.i8, 1), *(float32x2_t *)v127.i8, 1), v125, v125).f32[0];
            v127.i64[0] = *v16;
            v127.i32[2] = *((_DWORD *)a2 - 19);
            v128 = (int8x16_t)vsubq_f32((float32x4_t)v84, (float32x4_t)v127);
            v129 = (float32x2_t)vextq_s8(v128, v128, 8uLL).u64[0];
            v130 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v128.i8, *(float32x2_t *)v128.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v128.i8, 1), *(float32x2_t *)v128.i8, 1), v129, v129).f32[0] < v124;
            if (v124 >= v126)
            {
              if (v130)
              {
                v470 = *(_DWORD *)(v121 + 8);
                v430 = *(_QWORD *)v121;
                v135 = v17 + 28 * v120;
                v136 = v135 + 12;
                v549 = *(_DWORD *)(v135 + 20);
                v510 = *(_QWORD *)(v135 + 12);
                v137 = *((_DWORD *)a2 - 19);
                *(_QWORD *)v121 = *v16;
                *(_DWORD *)(v121 + 8) = v137;
                v138 = *v403;
                *(_DWORD *)(v135 + 20) = *((_DWORD *)a2 - 16);
                v140 = *(_WORD *)(v135 + 24);
                v139 = (_WORD *)(v135 + 24);
                *(_QWORD *)v136 = v138;
                *v139 = *((_WORD *)a2 - 30);
                *((_DWORD *)a2 - 19) = v470;
                *v16 = v430;
                *((_DWORD *)a2 - 16) = v549;
                *v403 = v510;
                *((_WORD *)a2 - 30) = v140;
                result = (uint64_t)(*a3 + 1);
                v128.i64[0] = **a3;
                v128.i32[2] = *(_DWORD *)result;
                v127.i64[0] = *(_QWORD *)v121;
                v127.i32[2] = *(_DWORD *)(v121 + 8);
                v127 = (int8x16_t)vsubq_f32((float32x4_t)v128, (float32x4_t)v127);
                v141 = (float32x2_t)vextq_s8(v127, v127, 8uLL).u64[0];
                v142 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)v127.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v127.i8, 1), *(float32x2_t *)v127.i8, 1);
                v127.i64[0] = *(_QWORD *)(v17 + 56);
                v127.i32[2] = *(_DWORD *)(v17 + 64);
                v128 = (int8x16_t)vsubq_f32((float32x4_t)v128, (float32x4_t)v127);
                v143 = (float32x2_t)vextq_s8(v128, v128, 8uLL).u64[0];
                if (vmla_f32(v142, v141, v141).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v128.i8, *(float32x2_t *)v128.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v128.i8, 1), *(float32x2_t *)v128.i8, 1), v143, v143).f32[0])
                {
                  v431 = *v119;
                  v471 = *(_DWORD *)(v17 + 64);
                  v511 = *(_QWORD *)(v17 + 68);
                  v550 = *(_DWORD *)(v17 + 76);
                  v144 = *(_WORD *)(v17 + 80);
                  v145 = *(_DWORD *)(v121 + 8);
                  *v119 = *(_QWORD *)v121;
                  *(_DWORD *)(v17 + 64) = v145;
                  v146 = *(_QWORD *)v136;
                  *(_DWORD *)(v17 + 76) = *(_DWORD *)(v136 + 8);
                  *(_QWORD *)(v17 + 68) = v146;
                  *(_WORD *)(v17 + 80) = *v139;
                  *(_DWORD *)(v121 + 8) = v471;
                  *(_QWORD *)v121 = v431;
                  result = v550;
                  *(_DWORD *)(v136 + 8) = v550;
                  *(_QWORD *)v136 = v511;
                  *v139 = v144;
                }
              }
              goto LABEL_43;
            }
            v131 = (uint64_t *)(v17 + 68);
            if (v130)
            {
              v429 = *v119;
              v469 = *(_DWORD *)(v17 + 64);
              v509 = *v131;
              v548 = *(_DWORD *)(v17 + 76);
              v132 = *(_WORD *)(v17 + 80);
              v133 = *((_DWORD *)a2 - 19);
              *v119 = *v16;
              *(_DWORD *)(v17 + 64) = v133;
              result = (uint64_t)(a2 - 9);
              v134 = *v403;
              *(_DWORD *)(v17 + 76) = *((_DWORD *)a2 - 16);
              *v131 = v134;
              *(_WORD *)(v17 + 80) = *((_WORD *)a2 - 30);
              *((_DWORD *)a2 - 19) = v469;
              *v16 = v429;
              *((_DWORD *)a2 - 16) = v548;
              *v403 = v509;
            }
            else
            {
              v432 = *v119;
              v472 = *(_DWORD *)(v17 + 64);
              v512 = *v131;
              v551 = *(_DWORD *)(v17 + 76);
              v132 = *(_WORD *)(v17 + 80);
              v147 = *(_DWORD *)(v121 + 8);
              *v119 = *(_QWORD *)v121;
              *(_DWORD *)(v17 + 64) = v147;
              v148 = v17 + 28 * v120;
              v150 = *(_QWORD *)(v148 + 12);
              v149 = v148 + 12;
              *(_DWORD *)(v17 + 76) = *(_DWORD *)(v148 + 20);
              *v131 = v150;
              v151 = (_WORD *)(v148 + 24);
              *(_WORD *)(v17 + 80) = *(_WORD *)(v148 + 24);
              *(_DWORD *)(v121 + 8) = v472;
              *(_QWORD *)v121 = v432;
              *(_DWORD *)(v148 + 20) = v551;
              *(_QWORD *)(v148 + 12) = v512;
              *(_WORD *)(v148 + 24) = v132;
              v128.i64[0] = **a3;
              v128.i32[2] = *((_DWORD *)*a3 + 2);
              v127.i64[0] = *v16;
              result = (uint64_t)a2 - 76;
              v127.i32[2] = *((_DWORD *)a2 - 19);
              v127 = (int8x16_t)vsubq_f32((float32x4_t)v128, (float32x4_t)v127);
              v152 = (float32x2_t)vextq_s8(v127, v127, 8uLL).u64[0];
              v153 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)v127.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v127.i8, 1), *(float32x2_t *)v127.i8, 1);
              v127.i64[0] = *(_QWORD *)v121;
              v127.i32[2] = *(_DWORD *)(v121 + 8);
              v128 = (int8x16_t)vsubq_f32((float32x4_t)v128, (float32x4_t)v127);
              v154 = (float32x2_t)vextq_s8(v128, v128, 8uLL).u64[0];
              if (vmla_f32(v153, v152, v152).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v128.i8, *(float32x2_t *)v128.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v128.i8, 1), *(float32x2_t *)v128.i8, 1), v154, v154).f32[0])
              {
LABEL_43:
                v128.i64[0] = **a3;
                v128.i32[2] = *((_DWORD *)*a3 + 2);
                v127.i64[0] = *(_QWORD *)v22;
                v127.i32[2] = *(_DWORD *)(v22 + 8);
                v157 = (int8x16_t)vsubq_f32((float32x4_t)v128, (float32x4_t)v127);
                v158 = (float32x2_t)vextq_s8(v157, v157, 8uLL).u64[0];
                v159 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v157.i8, *(float32x2_t *)v157.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v157.i8, 1), *(float32x2_t *)v157.i8, 1), v158, v158).f32[0];
                v157.i64[0] = *(_QWORD *)v77;
                v157.i32[2] = *(_DWORD *)(v77 + 8);
                a7 = vsubq_f32((float32x4_t)v128, (float32x4_t)v157);
                v160 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
                v161 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1), v160, v160).f32[0];
                a7.i64[0] = *(_QWORD *)v121;
                a7.i32[2] = *(_DWORD *)(v121 + 8);
                a6 = vsubq_f32((float32x4_t)v128, a7);
                a8 = vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL);
                v162 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), *(float32x2_t *)a8.i8, *(float32x2_t *)a8.i8).f32[0] < v159;
                if (v159 >= v161)
                {
                  if (v162)
                  {
                    v475 = *(_DWORD *)(v22 + 8);
                    v435 = *(_QWORD *)v22;
                    v168 = v17 + 28 * v20;
                    v169 = (_QWORD *)(v168 + 12);
                    v554 = *(_DWORD *)(v168 + 20);
                    v515 = *(_QWORD *)(v168 + 12);
                    v170 = v17 + 28 * v120;
                    *(_DWORD *)(v168 + 20) = *(_DWORD *)(v170 + 20);
                    v172 = *(_WORD *)(v168 + 24);
                    v171 = (_WORD *)(v168 + 24);
                    *(_QWORD *)v22 = *(_QWORD *)v121;
                    *(_DWORD *)(v22 + 8) = *(_DWORD *)(v121 + 8);
                    *(_QWORD *)(v168 + 12) = *(_QWORD *)(v170 + 12);
                    *(_WORD *)(v168 + 24) = *(_WORD *)(v170 + 24);
                    *(_DWORD *)(v121 + 8) = v475;
                    *(_QWORD *)v121 = v435;
                    result = v515;
                    *(_QWORD *)(v170 + 12) = v515;
                    *(_DWORD *)(v170 + 20) = v554;
                    *(_WORD *)(v170 + 24) = v172;
                    a6.i64[0] = **a3;
                    a6.i32[2] = *((_DWORD *)*a3 + 2);
                    a7.i64[0] = *(_QWORD *)v22;
                    a7.i32[2] = *(_DWORD *)(v22 + 8);
                    a7 = vsubq_f32(a6, a7);
                    v173 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
                    v174 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1);
                    a7.i64[0] = *(_QWORD *)v77;
                    a7.i32[2] = *(_DWORD *)(v77 + 8);
                    a6 = vsubq_f32(a6, a7);
                    a8 = vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL);
                    if (vmla_f32(v174, v173, v173).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), *(float32x2_t *)a8.i8, *(float32x2_t *)a8.i8).f32[0])
                    {
                      v476 = *(_DWORD *)(v77 + 8);
                      v436 = *(_QWORD *)v77;
                      v175 = v17 + 28 * v76;
                      v555 = *(_DWORD *)(v175 + 20);
                      v516 = *(_QWORD *)(v175 + 12);
                      v176 = *(_WORD *)(v175 + 24);
                      *(_QWORD *)v77 = *(_QWORD *)v22;
                      *(_DWORD *)(v77 + 8) = *(_DWORD *)(v22 + 8);
                      *(_QWORD *)(v175 + 12) = *v169;
                      *(_DWORD *)(v175 + 20) = *(_DWORD *)(v168 + 20);
                      *(_WORD *)(v175 + 24) = *v171;
                      *(_DWORD *)(v22 + 8) = v476;
                      *(_QWORD *)v22 = v436;
                      *v169 = v516;
                      *(_DWORD *)(v168 + 20) = v555;
                      *v171 = v176;
                    }
                  }
                }
                else
                {
                  v163 = v17 + 28 * v76;
                  v164 = v163 + 12;
                  v165 = (__int16 *)(v163 + 24);
                  if (v162)
                  {
                    v474 = *(_DWORD *)(v77 + 8);
                    v434 = *(_QWORD *)v77;
                    v553 = *(_DWORD *)(v163 + 20);
                    v514 = *(_QWORD *)v164;
                    v166 = *v165;
                    *(_QWORD *)v77 = *(_QWORD *)v121;
                    *(_DWORD *)(v77 + 8) = *(_DWORD *)(v121 + 8);
                    v167 = v17 + 28 * v120;
                    *(_QWORD *)v164 = *(_QWORD *)(v167 + 12);
                    *(_DWORD *)(v164 + 8) = *(_DWORD *)(v167 + 20);
                    *v165 = *(_WORD *)(v167 + 24);
                    *(_DWORD *)(v121 + 8) = v474;
                    *(_QWORD *)v121 = v434;
                    *(_QWORD *)(v167 + 12) = v514;
                    *(_DWORD *)(v167 + 20) = v553;
                    *(_WORD *)(v167 + 24) = v166;
                  }
                  else
                  {
                    v477 = *(_DWORD *)(v77 + 8);
                    v437 = *(_QWORD *)v77;
                    v556 = *(_DWORD *)(v163 + 20);
                    v517 = *(_QWORD *)v164;
                    v177 = *v165;
                    *(_QWORD *)v77 = *(_QWORD *)v22;
                    *(_DWORD *)(v77 + 8) = *(_DWORD *)(v22 + 8);
                    v178 = v17 + 28 * v20;
                    v180 = *(_QWORD *)(v178 + 12);
                    v179 = v178 + 12;
                    *(_QWORD *)v164 = v180;
                    *(_DWORD *)(v164 + 8) = *(_DWORD *)(v179 + 8);
                    *v165 = *(_WORD *)(v179 + 12);
                    *(_DWORD *)(v22 + 8) = v477;
                    *(_QWORD *)v22 = v437;
                    *(_QWORD *)v179 = v517;
                    *(_DWORD *)(v179 + 8) = v556;
                    *(_WORD *)(v179 + 12) = v177;
                    a6.i64[0] = **a3;
                    a6.i32[2] = *((_DWORD *)*a3 + 2);
                    a7.i64[0] = *(_QWORD *)v121;
                    a7.i32[2] = *(_DWORD *)(v121 + 8);
                    a7 = vsubq_f32(a6, a7);
                    v181 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
                    v182 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1);
                    a7.i64[0] = *(_QWORD *)v22;
                    a7.i32[2] = *(_DWORD *)(v22 + 8);
                    a6 = vsubq_f32(a6, a7);
                    a8 = vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL);
                    if (vmla_f32(v182, v181, v181).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), *(float32x2_t *)a8.i8, *(float32x2_t *)a8.i8).f32[0])
                    {
                      v478 = *(_DWORD *)(v22 + 8);
                      v438 = *(_QWORD *)v22;
                      v557 = *(_DWORD *)(v179 + 8);
                      v518 = *(_QWORD *)v179;
                      *(_QWORD *)v22 = *(_QWORD *)v121;
                      *(_DWORD *)(v22 + 8) = *(_DWORD *)(v121 + 8);
                      v183 = v17 + 28 * v120;
                      *(_QWORD *)v179 = *(_QWORD *)(v183 + 12);
                      *(_DWORD *)(v179 + 8) = *(_DWORD *)(v183 + 20);
                      *(_WORD *)(v179 + 12) = *(_WORD *)(v183 + 24);
                      *(_DWORD *)(v121 + 8) = v478;
                      *(_QWORD *)v121 = v438;
                      *(_DWORD *)(v183 + 20) = v557;
                      *(_QWORD *)(v183 + 12) = v518;
                      *(_WORD *)(v183 + 24) = v177;
                    }
                  }
                }
                v479 = *(_DWORD *)(v17 + 8);
                v439 = *(_QWORD *)v17;
                v519 = *(_QWORD *)(v17 + 12);
                v558 = *(_DWORD *)(v17 + 20);
                v184 = *(_WORD *)(v17 + 24);
                v185 = *(_DWORD *)(v22 + 8);
                *(_QWORD *)v17 = *(_QWORD *)v22;
                *(_DWORD *)(v17 + 8) = v185;
                v186 = v17 + 28 * v20;
                v187 = *(_DWORD *)(v186 + 20);
                *(_QWORD *)(v17 + 12) = *(_QWORD *)(v186 + 12);
                *(_DWORD *)(v17 + 20) = v187;
                *(_WORD *)(v17 + 24) = *(_WORD *)(v186 + 24);
                *(_DWORD *)(v22 + 8) = v479;
                *(_QWORD *)v22 = v439;
                *(_DWORD *)(v186 + 20) = v558;
                *(_QWORD *)(v186 + 12) = v519;
                *(_WORD *)(v186 + 24) = v184;
                goto LABEL_52;
              }
              v473 = *(_DWORD *)(v121 + 8);
              v433 = *(_QWORD *)v121;
              v552 = *(_DWORD *)(v149 + 8);
              v513 = *(_QWORD *)v149;
              v155 = *v16;
              *(_DWORD *)(v121 + 8) = *((_DWORD *)a2 - 19);
              *(_QWORD *)v121 = v155;
              v156 = *v403;
              result = *((unsigned int *)a2 - 16);
              *(_DWORD *)(v149 + 8) = result;
              *(_QWORD *)v149 = v156;
              *v151 = *((_WORD *)a2 - 30);
              *((_DWORD *)a2 - 19) = v473;
              *v16 = v433;
              *((_DWORD *)a2 - 16) = v552;
              *v403 = v513;
            }
            *((_WORD *)a2 - 30) = v132;
            goto LABEL_43;
          }
          v21.i64[0] = *(_QWORD *)v17;
          v21.i32[2] = *(_DWORD *)(v17 + 8);
          a8 = (int8x16_t)vsubq_f32(a7, (float32x4_t)v21);
          v34 = (float32x2_t)vextq_s8(a8, a8, 8uLL).u64[0];
          v35 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a8.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a8.i8, 1), *(float32x2_t *)a8.i8, 1), v34, v34).f32[0];
          a8.i64[0] = *(_QWORD *)v22;
          a8.i32[2] = *(_DWORD *)(v22 + 8);
          a7 = vsubq_f32(a7, (float32x4_t)a8);
          v36 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
          if (v35 >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1), v36, v36).f32[0])
          {
            if (v24 < v35)
            {
              v458 = *(_DWORD *)(v17 + 8);
              v418 = *(_QWORD *)v17;
              v55 = (_QWORD *)(v17 + 12);
              v498 = *(_QWORD *)(v17 + 12);
              v537 = *(_DWORD *)(v17 + 20);
              v56 = *(_WORD *)(v17 + 24);
              v57 = *((_DWORD *)a2 - 5);
              *(_QWORD *)v17 = *v15;
              *(_DWORD *)(v17 + 8) = v57;
              v58 = *((_DWORD *)a2 - 2);
              *(_QWORD *)(v17 + 12) = *v405;
              *(_DWORD *)(v17 + 20) = v58;
              *(_WORD *)(v17 + 24) = *((_WORD *)a2 - 2);
              *((_DWORD *)a2 - 5) = v458;
              *v15 = v418;
              *((_DWORD *)a2 - 2) = v537;
              *v405 = v498;
              *((_WORD *)a2 - 2) = v56;
              a6.i64[0] = **a3;
              a6.i32[2] = *((_DWORD *)*a3 + 2);
              a7.i64[0] = *(_QWORD *)v17;
              a7.i32[2] = *(_DWORD *)(v17 + 8);
              a7 = vsubq_f32(a6, a7);
              v59 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
              v60 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1);
              a7.i64[0] = *(_QWORD *)v22;
              a7.i32[2] = *(_DWORD *)(v22 + 8);
              a6 = vsubq_f32(a6, a7);
              a8 = vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL);
              if (vmla_f32(v60, v59, v59).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), *(float32x2_t *)a8.i8, *(float32x2_t *)a8.i8).f32[0])
              {
                v459 = *(_DWORD *)(v22 + 8);
                v419 = *(_QWORD *)v22;
                v61 = v17 + 28 * v20;
                v538 = *(_DWORD *)(v61 + 20);
                v499 = *(_QWORD *)(v61 + 12);
                v62 = *(_WORD *)(v61 + 24);
                v63 = *(_DWORD *)(v17 + 8);
                *(_QWORD *)v22 = *(_QWORD *)v17;
                *(_DWORD *)(v22 + 8) = v63;
                v64 = *(_DWORD *)(v17 + 20);
                *(_QWORD *)(v61 + 12) = *v55;
                *(_DWORD *)(v61 + 20) = v64;
                *(_WORD *)(v61 + 24) = *(_WORD *)(v17 + 24);
                *(_DWORD *)(v17 + 8) = v459;
                *(_QWORD *)v17 = v419;
                *(_DWORD *)(v17 + 20) = v538;
                *v55 = v499;
                *(_WORD *)(v17 + 24) = v62;
              }
            }
          }
          else
          {
            v37 = v17 + 28 * v20;
            v38 = v37 + 12;
            v39 = (__int16 *)(v37 + 24);
            if (v24 >= v35)
            {
              v465 = *(_DWORD *)(v22 + 8);
              v425 = *(_QWORD *)v22;
              v544 = *(_DWORD *)(v37 + 20);
              v505 = *(_QWORD *)v38;
              v40 = *v39;
              v103 = *(_DWORD *)(v17 + 8);
              *(_QWORD *)v22 = *(_QWORD *)v17;
              *(_DWORD *)(v22 + 8) = v103;
              v104 = (uint64_t *)(v17 + 12);
              v105 = *(_DWORD *)(v17 + 20);
              *(_QWORD *)v38 = *(_QWORD *)(v17 + 12);
              *(_DWORD *)(v38 + 8) = v105;
              *v39 = *(_WORD *)(v17 + 24);
              *(_DWORD *)(v17 + 8) = v465;
              *(_QWORD *)v17 = v425;
              *(_DWORD *)(v17 + 20) = v544;
              *(_QWORD *)(v17 + 12) = v505;
              *(_WORD *)(v17 + 24) = v40;
              a6.i64[0] = **a3;
              a6.i32[2] = *((_DWORD *)*a3 + 2);
              a7.i64[0] = *v15;
              a7.i32[2] = *((_DWORD *)a2 - 5);
              a7 = vsubq_f32(a6, a7);
              v106 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
              v107 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1);
              a7.i64[0] = *(_QWORD *)v17;
              a7.i32[2] = *(_DWORD *)(v17 + 8);
              a6 = vsubq_f32(a6, a7);
              a8 = vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL);
              if (vmla_f32(v107, v106, v106).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), *(float32x2_t *)a8.i8, *(float32x2_t *)a8.i8).f32[0])goto LABEL_52;
              v466 = *(_DWORD *)(v17 + 8);
              v426 = *(_QWORD *)v17;
              v506 = *v104;
              v545 = *(_DWORD *)(v17 + 20);
              v108 = *v15;
              *(_DWORD *)(v17 + 8) = *((_DWORD *)a2 - 5);
              *(_QWORD *)v17 = v108;
              v109 = *v405;
              *(_DWORD *)(v17 + 20) = *((_DWORD *)a2 - 2);
              *v104 = v109;
              *(_WORD *)(v17 + 24) = *((_WORD *)a2 - 2);
              *((_DWORD *)a2 - 5) = v466;
              *v15 = v426;
              *((_DWORD *)a2 - 2) = v545;
              *v405 = v506;
            }
            else
            {
              v455 = *(_DWORD *)(v22 + 8);
              v415 = *(_QWORD *)v22;
              v534 = *(_DWORD *)(v37 + 20);
              v495 = *(_QWORD *)v38;
              v40 = *v39;
              v41 = *((_DWORD *)a2 - 5);
              *(_QWORD *)v22 = *v15;
              *(_DWORD *)(v22 + 8) = v41;
              v42 = *((_DWORD *)a2 - 2);
              *(_QWORD *)v38 = *v405;
              *(_DWORD *)(v38 + 8) = v42;
              *v39 = *((_WORD *)a2 - 2);
              *((_DWORD *)a2 - 5) = v455;
              *v15 = v415;
              *((_DWORD *)a2 - 2) = v534;
              *v405 = v495;
            }
            *((_WORD *)a2 - 2) = v40;
          }
LABEL_52:
          a6.i64[0] = *(_QWORD *)v17;
          a6.i32[2] = *(_DWORD *)(v17 + 8);
          --a4;
          a7.i64[0] = **a3;
          a7.i32[2] = *((_DWORD *)*a3 + 2);
          if ((a5 & 1) == 0)
          {
            a8.i64[0] = *(_QWORD *)(v17 - 28);
            a8.i32[2] = *(_DWORD *)(v17 - 20);
            a8 = (int8x16_t)vsubq_f32(a7, (float32x4_t)a8);
            v190 = (float32x2_t)vextq_s8(a8, a8, 8uLL).u64[0];
            v188 = (int8x16_t)vsubq_f32(a7, a6);
            v191 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a8.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a8.i8, 1), *(float32x2_t *)a8.i8, 1), v190, v190).f32[0];
            v192 = (float32x2_t)vextq_s8(v188, v188, 8uLL).u64[0];
            *(float32x2_t *)a8.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v188.i8, *(float32x2_t *)v188.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v188.i8, 1), *(float32x2_t *)v188.i8, 1), v192, v192);
            if (v191 < *(float *)a8.i32)
              goto LABEL_55;
            v218 = (_QWORD *)(v17 + 12);
            v409 = *(_QWORD *)(v17 + 12);
            v412 = *(_DWORD *)(v17 + 20);
            v188.i64[0] = *v15;
            v188.i32[2] = *((_DWORD *)a2 - 5);
            v219 = (int8x16_t)vsubq_f32(a7, (float32x4_t)v188);
            a11 = (float32x4_t)vextq_s8(v219, v219, 8uLL);
            if (*(float *)a8.i32 >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v219.i8, *(float32x2_t *)v219.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v219.i8, 1), *(float32x2_t *)v219.i8, 1), *(float32x2_t *)a11.f32, *(float32x2_t *)a11.f32).f32[0])
            {
              v221 = v17 + 28;
              do
              {
                v17 = v221;
                if (v221 >= (unint64_t)a2)
                  break;
                v219.i64[0] = *(_QWORD *)v221;
                v219.i32[2] = *(_DWORD *)(v221 + 8);
                v219 = (int8x16_t)vsubq_f32(a7, (float32x4_t)v219);
                a11 = (float32x4_t)vextq_s8(v219, v219, 8uLL);
                v221 += 28;
              }
              while (*(float *)a8.i32 >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v219.i8, *(float32x2_t *)v219.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v219.i8, 1), *(float32x2_t *)v219.i8, 1), *(float32x2_t *)a11.f32, *(float32x2_t *)a11.f32).f32[0]);
            }
            else
            {
              do
              {
                v220 = *(_QWORD *)(v17 + 28);
                v17 += 28;
                v219.i64[0] = v220;
                v219.i32[2] = *(_DWORD *)(v17 + 8);
                v219 = (int8x16_t)vsubq_f32(a7, (float32x4_t)v219);
                a11 = (float32x4_t)vextq_s8(v219, v219, 8uLL);
              }
              while (*(float *)a8.i32 >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v219.i8, *(float32x2_t *)v219.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v219.i8, 1), *(float32x2_t *)v219.i8, 1), *(float32x2_t *)a11.f32, *(float32x2_t *)a11.f32).f32[0]);
            }
            v222 = a2;
            if (v17 < (unint64_t)a2)
            {
              v222 = a2;
              do
              {
                v223 = *(uint64_t *)((char *)v222 - 28);
                v222 = (uint64_t *)((char *)v222 - 28);
                v219.i64[0] = v223;
                v219.i32[2] = *((_DWORD *)v222 + 2);
                v219 = (int8x16_t)vsubq_f32(a7, (float32x4_t)v219);
                a11 = (float32x4_t)vextq_s8(v219, v219, 8uLL);
              }
              while (*(float *)a8.i32 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v219.i8, *(float32x2_t *)v219.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v219.i8, 1), *(float32x2_t *)v219.i8, 1), *(float32x2_t *)a11.f32, *(float32x2_t *)a11.f32).f32[0]);
            }
            v224 = *(_WORD *)(v14 + 24);
            while (v17 < (unint64_t)v222)
            {
              v481 = *(_DWORD *)(v17 + 8);
              v441 = *(_QWORD *)v17;
              v521 = *(_QWORD *)(v17 + 12);
              v560 = *(_DWORD *)(v17 + 20);
              v225 = *(_WORD *)(v17 + 24);
              v226 = *((_DWORD *)v222 + 2);
              *(_QWORD *)v17 = *v222;
              *(_DWORD *)(v17 + 8) = v226;
              v227 = *((_DWORD *)v222 + 5);
              *(_QWORD *)(v17 + 12) = *(uint64_t *)((char *)v222 + 12);
              *(_DWORD *)(v17 + 20) = v227;
              *(_WORD *)(v17 + 24) = *((_WORD *)v222 + 12);
              *((_DWORD *)v222 + 2) = v481;
              *v222 = v441;
              *((_DWORD *)v222 + 5) = v560;
              *(uint64_t *)((char *)v222 + 12) = v521;
              *((_WORD *)v222 + 12) = v225;
              a7.i64[0] = **a3;
              a7.i32[2] = *((_DWORD *)*a3 + 2);
              v228 = (int8x16_t)vsubq_f32(a7, a6);
              v229 = (float32x2_t)vextq_s8(v228, v228, 8uLL).u64[0];
              LODWORD(v230) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v228.i8, *(float32x2_t *)v228.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v228.i8, 1), *(float32x2_t *)v228.i8, 1), v229, v229).u32[0];
              do
              {
                v231 = *(_QWORD *)(v17 + 28);
                v17 += 28;
                v228.i64[0] = v231;
                v228.i32[2] = *(_DWORD *)(v17 + 8);
                v228 = (int8x16_t)vsubq_f32(a7, (float32x4_t)v228);
                v232 = (float32x2_t)vextq_s8(v228, v228, 8uLL).u64[0];
              }
              while (v230 >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v228.i8, *(float32x2_t *)v228.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v228.i8, 1), *(float32x2_t *)v228.i8, 1), v232, v232).f32[0]);
              do
              {
                v233 = *(uint64_t *)((char *)v222 - 28);
                v222 = (uint64_t *)((char *)v222 - 28);
                v228.i64[0] = v233;
                v228.i32[2] = *((_DWORD *)v222 + 2);
                v228 = (int8x16_t)vsubq_f32(a7, (float32x4_t)v228);
                a11 = (float32x4_t)vextq_s8(v228, v228, 8uLL);
              }
              while (v230 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v228.i8, *(float32x2_t *)v228.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v228.i8, 1), *(float32x2_t *)v228.i8, 1), *(float32x2_t *)a11.f32, *(float32x2_t *)a11.f32).f32[0]);
            }
            if (v17 - 28 != v14)
            {
              v234 = *(_QWORD *)(v17 - 28);
              *(_DWORD *)(v14 + 8) = *(_DWORD *)(v17 - 20);
              *(_QWORD *)v14 = v234;
              v235 = *(_QWORD *)(v17 - 16);
              *(_DWORD *)(v14 + 20) = *(_DWORD *)(v17 - 8);
              *v218 = v235;
              *(_WORD *)(v14 + 24) = *(_WORD *)(v17 - 4);
            }
            a5 = 0;
            *(_DWORD *)(v17 - 20) = a6.i32[2];
            *(_QWORD *)(v17 - 28) = a6.i64[0];
            *(_DWORD *)(v17 - 8) = v412;
            *(_QWORD *)(v17 - 16) = v409;
            *(_WORD *)(v17 - 4) = v224;
            continue;
          }
          v188 = (int8x16_t)vsubq_f32(a7, a6);
          v189 = (float32x2_t)vextq_s8(v188, v188, 8uLL).u64[0];
          *(float32x2_t *)a8.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v188.i8, *(float32x2_t *)v188.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v188.i8, 1), *(float32x2_t *)v188.i8, 1), v189, v189);
LABEL_55:
          v193 = 0;
          v408 = *(_QWORD *)(v17 + 12);
          v411 = *(_DWORD *)(v17 + 20);
          v194 = *(_WORD *)(v17 + 24);
          do
          {
            v188.i64[0] = *(_QWORD *)(v17 + v193 + 28);
            v188.i32[2] = *(_DWORD *)(v17 + v193 + 36);
            v188 = (int8x16_t)vsubq_f32(a7, (float32x4_t)v188);
            v195 = (float32x2_t)vextq_s8(v188, v188, 8uLL).u64[0];
            v193 += 28;
          }
          while (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v188.i8, *(float32x2_t *)v188.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v188.i8, 1), *(float32x2_t *)v188.i8, 1), v195, v195).f32[0] < *(float *)a8.i32);
          v196 = v17 + v193;
          v197 = a2;
          if (v193 == 28)
          {
            v197 = a2;
            do
            {
              if (v196 >= (unint64_t)v197)
                break;
              v200 = *(uint64_t *)((char *)v197 - 28);
              v197 = (uint64_t *)((char *)v197 - 28);
              v188.i64[0] = v200;
              v188.i32[2] = *((_DWORD *)v197 + 2);
              v188 = (int8x16_t)vsubq_f32(a7, (float32x4_t)v188);
              v201 = (float32x2_t)vextq_s8(v188, v188, 8uLL).u64[0];
            }
            while (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v188.i8, *(float32x2_t *)v188.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v188.i8, 1), *(float32x2_t *)v188.i8, 1), v201, v201).f32[0] >= *(float *)a8.i32);
          }
          else
          {
            do
            {
              v198 = *(uint64_t *)((char *)v197 - 28);
              v197 = (uint64_t *)((char *)v197 - 28);
              v188.i64[0] = v198;
              v188.i32[2] = *((_DWORD *)v197 + 2);
              v188 = (int8x16_t)vsubq_f32(a7, (float32x4_t)v188);
              v199 = (float32x2_t)vextq_s8(v188, v188, 8uLL).u64[0];
            }
            while (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v188.i8, *(float32x2_t *)v188.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v188.i8, 1), *(float32x2_t *)v188.i8, 1), v199, v199).f32[0] >= *(float *)a8.i32);
          }
          v17 += v193;
          if (v196 < (unint64_t)v197)
          {
            v202 = (unint64_t)v197;
            do
            {
              v480 = *(_DWORD *)(v17 + 8);
              v440 = *(_QWORD *)v17;
              v520 = *(_QWORD *)(v17 + 12);
              v559 = *(_DWORD *)(v17 + 20);
              v203 = *(_WORD *)(v17 + 24);
              v204 = *(_DWORD *)(v202 + 8);
              *(_QWORD *)v17 = *(_QWORD *)v202;
              *(_DWORD *)(v17 + 8) = v204;
              v205 = *(_DWORD *)(v202 + 20);
              *(_QWORD *)(v17 + 12) = *(_QWORD *)(v202 + 12);
              *(_DWORD *)(v17 + 20) = v205;
              *(_WORD *)(v17 + 24) = *(_WORD *)(v202 + 24);
              *(_DWORD *)(v202 + 8) = v480;
              *(_QWORD *)v202 = v440;
              *(_DWORD *)(v202 + 20) = v559;
              *(_QWORD *)(v202 + 12) = v520;
              *(_WORD *)(v202 + 24) = v203;
              a7.i64[0] = **a3;
              a7.i32[2] = *((_DWORD *)*a3 + 2);
              v206 = (int8x16_t)vsubq_f32(a7, a6);
              v207 = (float32x2_t)vextq_s8(v206, v206, 8uLL).u64[0];
              *(float32x2_t *)a8.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v206.i8, *(float32x2_t *)v206.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v206.i8, 1), *(float32x2_t *)v206.i8, 1), v207, v207);
              do
              {
                v208 = *(_QWORD *)(v17 + 28);
                v17 += 28;
                v206.i64[0] = v208;
                v206.i32[2] = *(_DWORD *)(v17 + 8);
                v206 = (int8x16_t)vsubq_f32(a7, (float32x4_t)v206);
                v209 = (float32x2_t)vextq_s8(v206, v206, 8uLL).u64[0];
              }
              while (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v206.i8, *(float32x2_t *)v206.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v206.i8, 1), *(float32x2_t *)v206.i8, 1), v209, v209).f32[0] < *(float *)a8.i32);
              do
              {
                v210 = *(_QWORD *)(v202 - 28);
                v202 -= 28;
                v206.i64[0] = v210;
                v206.i32[2] = *(_DWORD *)(v202 + 8);
                v206 = (int8x16_t)vsubq_f32(a7, (float32x4_t)v206);
                v211 = (float32x2_t)vextq_s8(v206, v206, 8uLL).u64[0];
              }
              while (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v206.i8, *(float32x2_t *)v206.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v206.i8, 1), *(float32x2_t *)v206.i8, 1), v211, v211).f32[0] >= *(float *)a8.i32);
            }
            while (v17 < v202);
          }
          if (v17 - 28 != v14)
          {
            v212 = *(_QWORD *)(v17 - 28);
            *(_DWORD *)(v14 + 8) = *(_DWORD *)(v17 - 20);
            *(_QWORD *)v14 = v212;
            v213 = *(_QWORD *)(v17 - 16);
            *(_DWORD *)(v14 + 20) = *(_DWORD *)(v17 - 8);
            *(_QWORD *)(v14 + 12) = v213;
            *(_WORD *)(v14 + 24) = *(_WORD *)(v17 - 4);
          }
          *(_DWORD *)(v17 - 20) = a6.i32[2];
          *(_QWORD *)(v17 - 28) = a6.i64[0];
          *(_DWORD *)(v17 - 8) = v411;
          *(_QWORD *)(v17 - 16) = v408;
          *(_WORD *)(v17 - 4) = v194;
          if (v196 < (unint64_t)v197)
            goto LABEL_74;
          v214 = sub_2233CDEEC(v14, v17 - 28, a3, a6, a7, (float32x4_t)a8);
          result = sub_2233CDEEC(v17, (uint64_t)a2, a3, v215, v216, v217);
          if (!(_DWORD)result)
          {
            if (v214)
              continue;
LABEL_74:
            result = sub_2233CB5C8(v14, v17 - 28, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = (uint64_t *)(v17 - 28);
          if (v214)
            return result;
          goto LABEL_2;
        }
        v300 = (uint64_t *)(v17 + 28);
        v302 = (uint64_t *)v17 == a2 || v300 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v302)
          {
            v303 = 0;
            v304 = *a3;
            v305 = v17;
            do
            {
              v307 = v300;
              a7.i64[0] = *v304;
              a7.i32[2] = *((_DWORD *)v304 + 2);
              a6.i64[0] = *(_QWORD *)(v305 + 28);
              a6.i32[2] = *(_DWORD *)(v305 + 36);
              v308 = (int8x16_t)vsubq_f32(a7, a6);
              v309 = (float32x2_t)vextq_s8(v308, v308, 8uLL).u64[0];
              v310 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v308.i8, *(float32x2_t *)v308.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v308.i8, 1), *(float32x2_t *)v308.i8, 1);
              v308.i64[0] = *(_QWORD *)v305;
              v308.i32[2] = *(_DWORD *)(v305 + 8);
              a7 = vsubq_f32(a7, (float32x4_t)v308);
              v311 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
              if (vmla_f32(v310, v309, v309).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1), v311, v311).f32[0])
              {
                v446 = *(_QWORD *)(v305 + 40);
                v486 = *(_DWORD *)(v305 + 48);
                v312 = *(_WORD *)(v305 + 52);
                v313 = v303;
                do
                {
                  v314 = v17 + v313;
                  *(_QWORD *)(v314 + 28) = *(_QWORD *)(v17 + v313);
                  *(_DWORD *)(v314 + 36) = *(_DWORD *)(v17 + v313 + 8);
                  *(_QWORD *)(v314 + 40) = *(_QWORD *)(v17 + v313 + 12);
                  *(_DWORD *)(v314 + 48) = *(_DWORD *)(v17 + v313 + 20);
                  *(_WORD *)(v314 + 52) = *(_WORD *)(v17 + v313 + 24);
                  if (!v313)
                  {
                    v306 = v17;
                    goto LABEL_117;
                  }
                  a7.i64[0] = **a3;
                  a7.i32[2] = *((_DWORD *)*a3 + 2);
                  v315 = (int8x16_t)vsubq_f32(a7, a6);
                  v316 = (float32x2_t)vextq_s8(v315, v315, 8uLL).u64[0];
                  v317 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v315.i8, *(float32x2_t *)v315.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v315.i8, 1), *(float32x2_t *)v315.i8, 1), v316, v316).f32[0];
                  v315.i64[0] = *(_QWORD *)(v314 - 28);
                  v315.i32[2] = *(_DWORD *)(v314 - 20);
                  a7 = vsubq_f32(a7, (float32x4_t)v315);
                  v318 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
                  v313 -= 28;
                }
                while (v317 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1), v318, v318).f32[0]);
                v306 = v17 + v313 + 28;
LABEL_117:
                *(_DWORD *)(v306 + 8) = a6.i32[2];
                *(_QWORD *)v306 = a6.i64[0];
                *(_DWORD *)(v314 + 20) = v486;
                *(_QWORD *)(v314 + 12) = v446;
                *(_WORD *)(v306 + 24) = v312;
                v304 = *a3;
              }
              v300 = (uint64_t *)((char *)v307 + 28);
              v303 += 28;
              v305 = (unint64_t)v307;
            }
            while ((uint64_t *)((char *)v307 + 28) != a2);
          }
        }
        else if (!v302)
        {
          v379 = *a3;
          v380 = (_WORD *)(v17 + 52);
          do
          {
            v381 = (uint64_t)v300;
            a7.i64[0] = *v379;
            a7.i32[2] = *((_DWORD *)v379 + 2);
            a6.i64[0] = *(_QWORD *)(v14 + 28);
            a6.i32[2] = *(_DWORD *)(v14 + 36);
            v382 = (int8x16_t)vsubq_f32(a7, a6);
            v383 = (float32x2_t)vextq_s8(v382, v382, 8uLL).u64[0];
            v384 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v382.i8, *(float32x2_t *)v382.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v382.i8, 1), *(float32x2_t *)v382.i8, 1);
            v382.i64[0] = *(_QWORD *)v14;
            v382.i32[2] = *(_DWORD *)(v14 + 8);
            a7 = vsubq_f32(a7, (float32x4_t)v382);
            v385 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
            if (vmla_f32(v384, v383, v383).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1), v385, v385).f32[0])
            {
              v451 = *(_QWORD *)(v14 + 40);
              v491 = *(_DWORD *)(v14 + 48);
              v386 = *(_WORD *)(v14 + 52);
              v387 = v380;
              do
              {
                v388 = v387;
                *((_QWORD *)v387 - 3) = *(_QWORD *)(v387 - 26);
                *((_DWORD *)v387 - 4) = *((_DWORD *)v387 - 11);
                v389 = *((_QWORD *)v387 - 5);
                *((_DWORD *)v387 - 1) = *((_DWORD *)v387 - 8);
                *(_QWORD *)(v387 - 6) = v389;
                v390 = *(v387 - 14);
                v387 -= 14;
                *v388 = v390;
                a7.i64[0] = **a3;
                a7.i32[2] = *((_DWORD *)*a3 + 2);
                v391 = (int8x16_t)vsubq_f32(a7, a6);
                v392 = (float32x2_t)vextq_s8(v391, v391, 8uLL).u64[0];
                a11.i64[0] = *((_QWORD *)v388 - 10);
                a11.i32[2] = *((_DWORD *)v388 - 18);
                a7 = vsubq_f32(a7, a11);
                v393 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v391.i8, *(float32x2_t *)v391.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v391.i8, 1), *(float32x2_t *)v391.i8, 1), v392, v392).f32[0];
                v391.i64[0] = vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
              }
              while (v393 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1), *(float32x2_t *)v391.i8, *(float32x2_t *)v391.i8).f32[0]);
              *((_DWORD *)v387 - 4) = a6.i32[2];
              *((_QWORD *)v387 - 3) = a6.i64[0];
              *((_DWORD *)v387 - 1) = v491;
              *(_QWORD *)(v387 - 6) = v451;
              *v387 = v386;
              v379 = *a3;
            }
            v300 = (uint64_t *)(v381 + 28);
            v380 += 14;
            v14 = v381;
          }
          while ((uint64_t *)(v381 + 28) != a2);
        }
        return result;
    }
  }
}

BOOL sub_2233CDEEC(uint64_t a1, uint64_t a2, unint64_t **a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  uint64_t v9;
  _BOOL8 result;
  uint64_t *v11;
  int8x16_t v12;
  float32x2_t v13;
  float32x2_t v14;
  int8x16_t v15;
  float32x2_t v16;
  __int16 v17;
  int v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  int8x16_t v22;
  float32x2_t v23;
  float v24;
  float32x2_t v25;
  float v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x2_t v29;
  _BOOL4 v30;
  uint64_t *v31;
  __int16 v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  float32x2_t v37;
  float v38;
  int8x16_t v39;
  float32x2_t v40;
  float v41;
  int8x16_t v42;
  int8x16_t v43;
  float32x2_t v44;
  _BOOL4 v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float32x2_t v60;
  _QWORD *v61;
  __int16 v62;
  int v63;
  int v64;
  float32x2_t v65;
  float32x2_t v66;
  int8x16_t v67;
  int8x16_t v68;
  float32x2_t v69;
  uint64_t v70;
  int v71;
  _QWORD *v72;
  __int16 v73;
  __int16 v74;
  float32x2_t v75;
  float32x2_t v76;
  int8x16_t v77;
  int8x16_t v78;
  float32x2_t v79;
  uint64_t v80;
  int v81;
  _QWORD *v82;
  __int16 v83;
  int8x16_t v84;
  float32x2_t v85;
  float32x2_t v86;
  int8x16_t v87;
  float32x2_t v88;
  uint64_t v89;
  int v90;
  __int16 v91;
  _QWORD *v92;
  __int16 v93;
  int v94;
  int v95;
  int8x16_t v96;
  float32x2_t v97;
  float32x2_t v98;
  int8x16_t v99;
  float32x2_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  _QWORD *v105;
  __int16 v106;
  __int16 v107;
  int8x16_t v108;
  float32x2_t v109;
  float v110;
  uint64_t v111;
  int v112;
  __int16 v113;
  uint64_t v114;
  int v115;
  __int16 v116;
  uint64_t *v117;
  int8x16_t v118;
  float32x2_t v119;
  float32x2_t v120;
  int8x16_t v121;
  float32x2_t v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  __int16 v127;
  uint64_t *v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x2_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  unint64_t *v137;
  int8x16_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x2_t v141;
  __int16 v142;
  uint64_t v143;
  uint64_t v144;
  int8x16_t v145;
  float32x2_t v146;
  float v147;
  float32x2_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;

  v9 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 2);
  result = 1;
  switch(v9)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v11 = (uint64_t *)(a2 - 28);
      a4.i64[0] = **a3;
      a4.i32[2] = *((_DWORD *)*a3 + 2);
      a5.i64[0] = *(_QWORD *)(a2 - 28);
      a5.i32[2] = *(_DWORD *)(a2 - 20);
      v12 = (int8x16_t)vsubq_f32(a4, a5);
      v13 = (float32x2_t)vextq_s8(v12, v12, 8uLL).u64[0];
      v14 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1), *(float32x2_t *)v12.i8, 1);
      v12.i64[0] = *(_QWORD *)a1;
      v12.i32[2] = *(_DWORD *)(a1 + 8);
      v15 = (int8x16_t)vsubq_f32(a4, (float32x4_t)v12);
      v16 = (float32x2_t)vextq_s8(v15, v15, 8uLL).u64[0];
      if (vmla_f32(v14, v13, v13).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1), *(float32x2_t *)v15.i8, 1), v16, v16).f32[0])
      {
        v150 = *(_QWORD *)a1;
        v156 = *(_DWORD *)(a1 + 8);
        v162 = *(_QWORD *)(a1 + 12);
        v177 = *(_DWORD *)(a1 + 20);
        v17 = *(_WORD *)(a1 + 24);
        v18 = *(_DWORD *)(a2 - 20);
        *(_QWORD *)a1 = *v11;
        *(_DWORD *)(a1 + 8) = v18;
        v19 = *(_DWORD *)(a2 - 8);
        *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 - 16);
        *(_DWORD *)(a1 + 20) = v19;
        *(_WORD *)(a1 + 24) = *(_WORD *)(a2 - 4);
        *v11 = v150;
        *(_DWORD *)(a2 - 20) = v156;
        *(_QWORD *)(a2 - 16) = v162;
        *(_DWORD *)(a2 - 8) = v177;
        *(_WORD *)(a2 - 4) = v17;
      }
      return result;
    case 3:
      v20 = (uint64_t *)(a1 + 28);
      v21 = (uint64_t *)(a2 - 28);
      a4.i64[0] = **a3;
      a4.i32[2] = *((_DWORD *)*a3 + 2);
      a5.i64[0] = *(_QWORD *)(a1 + 28);
      a5.i32[2] = *(_DWORD *)(a1 + 36);
      v22 = (int8x16_t)vsubq_f32(a4, a5);
      v23 = (float32x2_t)vextq_s8(v22, v22, 8uLL).u64[0];
      v24 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1), *(float32x2_t *)v22.i8, 1), v23, v23).f32[0];
      v22.i64[0] = *(_QWORD *)a1;
      v22.i32[2] = *(_DWORD *)(a1 + 8);
      v27 = (int8x16_t)vsubq_f32(a4, (float32x4_t)v22);
      v25 = (float32x2_t)vextq_s8(v27, v27, 8uLL).u64[0];
      v26 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1), *(float32x2_t *)v27.i8, 1), v25, v25).f32[0];
      v27.i64[0] = *(_QWORD *)(a2 - 28);
      v27.i32[2] = *(_DWORD *)(a2 - 20);
      v28 = (int8x16_t)vsubq_f32(a4, (float32x4_t)v27);
      v29 = (float32x2_t)vextq_s8(v28, v28, 8uLL).u64[0];
      v30 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1), *(float32x2_t *)v28.i8, 1), v29, v29).f32[0] < v24;
      if (v24 >= v26)
      {
        if (v30)
        {
          v153 = *v20;
          v159 = *(_DWORD *)(a1 + 36);
          v92 = (_QWORD *)(a1 + 40);
          v169 = *(_QWORD *)(a1 + 40);
          v184 = *(_DWORD *)(a1 + 48);
          v93 = *(_WORD *)(a1 + 52);
          v94 = *(_DWORD *)(a2 - 20);
          *v20 = *v21;
          *(_DWORD *)(a1 + 36) = v94;
          v95 = *(_DWORD *)(a2 - 8);
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 - 16);
          *(_DWORD *)(a1 + 48) = v95;
          *(_WORD *)(a1 + 52) = *(_WORD *)(a2 - 4);
          *v21 = v153;
          *(_DWORD *)(a2 - 20) = v159;
          *(_QWORD *)(a2 - 16) = v169;
          *(_DWORD *)(a2 - 8) = v184;
          *(_WORD *)(a2 - 4) = v93;
          v28.i64[0] = **a3;
          v28.i32[2] = *((_DWORD *)*a3 + 2);
          v27.i64[0] = *(_QWORD *)(a1 + 28);
          v27.i32[2] = *(_DWORD *)(a1 + 36);
          v96 = (int8x16_t)vsubq_f32((float32x4_t)v28, (float32x4_t)v27);
          v97 = (float32x2_t)vextq_s8(v96, v96, 8uLL).u64[0];
          v98 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v96.i8, *(float32x2_t *)v96.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v96.i8, 1), *(float32x2_t *)v96.i8, 1);
          v96.i64[0] = *(_QWORD *)a1;
          v96.i32[2] = *(_DWORD *)(a1 + 8);
          v99 = (int8x16_t)vsubq_f32((float32x4_t)v28, (float32x4_t)v96);
          v100 = (float32x2_t)vextq_s8(v99, v99, 8uLL).u64[0];
          if (vmla_f32(v98, v97, v97).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v99.i8, *(float32x2_t *)v99.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v99.i8, 1), *(float32x2_t *)v99.i8, 1), v100, v100).f32[0])
          {
            v101 = *(_QWORD *)a1;
            v102 = *(_DWORD *)(a1 + 8);
            v170 = *(_QWORD *)(a1 + 12);
            v185 = *(_DWORD *)(a1 + 20);
            v91 = *(_WORD *)(a1 + 24);
            *(_QWORD *)a1 = *v20;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 36);
            *(_QWORD *)(a1 + 12) = *v92;
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 48);
            *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 52);
            *(_DWORD *)(a1 + 36) = v102;
            *v20 = v101;
            *(_DWORD *)(a1 + 48) = v185;
            *v92 = v170;
            goto LABEL_19;
          }
        }
      }
      else
      {
        v31 = (uint64_t *)(a1 + 12);
        if (v30)
        {
          v151 = *(_QWORD *)a1;
          v157 = *(_DWORD *)(a1 + 8);
          v163 = *v31;
          v178 = *(_DWORD *)(a1 + 20);
          v32 = *(_WORD *)(a1 + 24);
          v33 = *(_DWORD *)(a2 - 20);
          *(_QWORD *)a1 = *v21;
          *(_DWORD *)(a1 + 8) = v33;
          v34 = *(_DWORD *)(a2 - 8);
          *v31 = *(_QWORD *)(a2 - 16);
          *(_DWORD *)(a1 + 20) = v34;
          *(_WORD *)(a1 + 24) = *(_WORD *)(a2 - 4);
          *v21 = v151;
          *(_DWORD *)(a2 - 20) = v157;
          *(_QWORD *)(a2 - 16) = v163;
          *(_DWORD *)(a2 - 8) = v178;
          *(_WORD *)(a2 - 4) = v32;
        }
        else
        {
          v114 = *(_QWORD *)a1;
          v115 = *(_DWORD *)(a1 + 8);
          v173 = *v31;
          v188 = *(_DWORD *)(a1 + 20);
          v116 = *(_WORD *)(a1 + 24);
          *(_QWORD *)a1 = *v20;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 36);
          v117 = (uint64_t *)(a1 + 40);
          *v31 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 48);
          *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 52);
          *(_DWORD *)(a1 + 36) = v115;
          *v20 = v114;
          *(_DWORD *)(a1 + 48) = v188;
          *(_QWORD *)(a1 + 40) = v173;
          *(_WORD *)(a1 + 52) = v116;
          v28.i64[0] = **a3;
          v28.i32[2] = *((_DWORD *)*a3 + 2);
          v27.i64[0] = *v21;
          v27.i32[2] = *(_DWORD *)(a2 - 20);
          v118 = (int8x16_t)vsubq_f32((float32x4_t)v28, (float32x4_t)v27);
          v119 = (float32x2_t)vextq_s8(v118, v118, 8uLL).u64[0];
          v120 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v118.i8, *(float32x2_t *)v118.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v118.i8, 1), *(float32x2_t *)v118.i8, 1);
          v118.i64[0] = *(_QWORD *)(a1 + 28);
          v118.i32[2] = *(_DWORD *)(a1 + 36);
          v121 = (int8x16_t)vsubq_f32((float32x4_t)v28, (float32x4_t)v118);
          v122 = (float32x2_t)vextq_s8(v121, v121, 8uLL).u64[0];
          if (vmla_f32(v120, v119, v119).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v121.i8, *(float32x2_t *)v121.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v121.i8, 1), *(float32x2_t *)v121.i8, 1), v122, v122).f32[0])
          {
            v154 = *v20;
            v160 = *(_DWORD *)(a1 + 36);
            v174 = *v117;
            v189 = *(_DWORD *)(a1 + 48);
            v123 = *(_DWORD *)(a2 - 20);
            *v20 = *v21;
            *(_DWORD *)(a1 + 36) = v123;
            v124 = *(_DWORD *)(a2 - 8);
            *v117 = *(_QWORD *)(a2 - 16);
            *(_DWORD *)(a1 + 48) = v124;
            *(_WORD *)(a1 + 52) = *(_WORD *)(a2 - 4);
            *v21 = v154;
            *(_DWORD *)(a2 - 20) = v160;
            *(_QWORD *)(a2 - 16) = v174;
            *(_DWORD *)(a2 - 8) = v189;
            *(_WORD *)(a2 - 4) = v116;
          }
        }
      }
      return result;
    case 4:
      sub_2233CECB4(a1, a1 + 28, a1 + 56, a2 - 28, a3, a4, a5);
      return 1;
    case 5:
      v50 = (uint64_t *)(a1 + 28);
      v51 = (uint64_t *)(a1 + 56);
      v52 = (uint64_t *)(a1 + 84);
      sub_2233CECB4(a1, a1 + 28, a1 + 56, a1 + 84, a3, a4, a5);
      v53 = (uint64_t *)(a2 - 28);
      v54.i64[0] = **a3;
      v54.i32[2] = *((_DWORD *)*a3 + 2);
      v55.i64[0] = *(_QWORD *)(a2 - 28);
      v55.i32[2] = *(_DWORD *)(a2 - 20);
      v58 = (int8x16_t)vsubq_f32(v54, v55);
      v56 = (float32x2_t)vextq_s8(v58, v58, 8uLL).u64[0];
      v57 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v58.i8, 1), *(float32x2_t *)v58.i8, 1);
      v58.i64[0] = *(_QWORD *)(a1 + 84);
      v58.i32[2] = *(_DWORD *)(a1 + 92);
      v59 = (int8x16_t)vsubq_f32(v54, (float32x4_t)v58);
      v60 = (float32x2_t)vextq_s8(v59, v59, 8uLL).u64[0];
      if (vmla_f32(v57, v56, v56).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v59.i8, *(float32x2_t *)v59.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v59.i8, 1), *(float32x2_t *)v59.i8, 1), v60, v60).f32[0])return 1;
      v152 = *v52;
      v158 = *(_DWORD *)(a1 + 92);
      v61 = (_QWORD *)(a1 + 96);
      v165 = *(_QWORD *)(a1 + 96);
      v180 = *(_DWORD *)(a1 + 104);
      v62 = *(_WORD *)(a1 + 108);
      v63 = *(_DWORD *)(a2 - 20);
      *v52 = *v53;
      *(_DWORD *)(a1 + 92) = v63;
      v64 = *(_DWORD *)(a2 - 8);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 - 16);
      *(_DWORD *)(a1 + 104) = v64;
      *(_WORD *)(a1 + 108) = *(_WORD *)(a2 - 4);
      *v53 = v152;
      *(_DWORD *)(a2 - 20) = v158;
      *(_QWORD *)(a2 - 16) = v165;
      *(_DWORD *)(a2 - 8) = v180;
      *(_WORD *)(a2 - 4) = v62;
      v59.i64[0] = **a3;
      v59.i32[2] = *((_DWORD *)*a3 + 2);
      v58.i64[0] = *(_QWORD *)(a1 + 84);
      v58.i32[2] = *(_DWORD *)(a1 + 92);
      v67 = (int8x16_t)vsubq_f32((float32x4_t)v59, (float32x4_t)v58);
      v65 = (float32x2_t)vextq_s8(v67, v67, 8uLL).u64[0];
      v66 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.i8, 1), *(float32x2_t *)v67.i8, 1);
      v67.i64[0] = *(_QWORD *)(a1 + 56);
      v67.i32[2] = *(_DWORD *)(a1 + 64);
      v68 = (int8x16_t)vsubq_f32((float32x4_t)v59, (float32x4_t)v67);
      v69 = (float32x2_t)vextq_s8(v68, v68, 8uLL).u64[0];
      if (vmla_f32(v66, v65, v65).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v68.i8, *(float32x2_t *)v68.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v68.i8, 1), *(float32x2_t *)v68.i8, 1), v69, v69).f32[0])return 1;
      v70 = *v51;
      v71 = *(_DWORD *)(a1 + 64);
      v72 = (_QWORD *)(a1 + 68);
      v166 = *(_QWORD *)(a1 + 68);
      v181 = *(_DWORD *)(a1 + 76);
      v73 = *(_WORD *)(a1 + 80);
      *v51 = *v52;
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 92);
      *(_QWORD *)(a1 + 68) = *v61;
      *(_DWORD *)(a1 + 76) = *(_DWORD *)(a1 + 104);
      v74 = *(_WORD *)(a1 + 108);
      *(_WORD *)(a1 + 80) = v74;
      *(_DWORD *)(a1 + 92) = v71;
      *v52 = v70;
      *(_DWORD *)(a1 + 104) = v181;
      *v61 = v166;
      *(_WORD *)(a1 + 108) = v73;
      v68.i64[0] = **a3;
      v68.i32[2] = *((_DWORD *)*a3 + 2);
      v67.i64[0] = *(_QWORD *)(a1 + 56);
      v67.i32[2] = *(_DWORD *)(a1 + 64);
      v77 = (int8x16_t)vsubq_f32((float32x4_t)v68, (float32x4_t)v67);
      v75 = (float32x2_t)vextq_s8(v77, v77, 8uLL).u64[0];
      v76 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v77.i8, *(float32x2_t *)v77.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v77.i8, 1), *(float32x2_t *)v77.i8, 1);
      v77.i64[0] = *(_QWORD *)(a1 + 28);
      v77.i32[2] = *(_DWORD *)(a1 + 36);
      v78 = (int8x16_t)vsubq_f32((float32x4_t)v68, (float32x4_t)v77);
      v79 = (float32x2_t)vextq_s8(v78, v78, 8uLL).u64[0];
      if (vmla_f32(v76, v75, v75).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v78.i8, *(float32x2_t *)v78.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v78.i8, 1), *(float32x2_t *)v78.i8, 1), v79, v79).f32[0])return 1;
      v80 = *v50;
      v81 = *(_DWORD *)(a1 + 36);
      v82 = (_QWORD *)(a1 + 40);
      v167 = *(_QWORD *)(a1 + 40);
      v182 = *(_DWORD *)(a1 + 48);
      v83 = *(_WORD *)(a1 + 52);
      *v50 = *v51;
      *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 40) = *v72;
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 76);
      *(_WORD *)(a1 + 52) = v74;
      *(_DWORD *)(a1 + 64) = v81;
      *v51 = v80;
      *(_DWORD *)(a1 + 76) = v182;
      *v72 = v167;
      *(_WORD *)(a1 + 80) = v83;
      v78.i64[0] = **a3;
      v78.i32[2] = *((_DWORD *)*a3 + 2);
      v77.i64[0] = *(_QWORD *)(a1 + 28);
      v77.i32[2] = *(_DWORD *)(a1 + 36);
      v84 = (int8x16_t)vsubq_f32((float32x4_t)v78, (float32x4_t)v77);
      v85 = (float32x2_t)vextq_s8(v84, v84, 8uLL).u64[0];
      v86 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)v84.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v84.i8, 1), *(float32x2_t *)v84.i8, 1);
      v84.i64[0] = *(_QWORD *)a1;
      v84.i32[2] = *(_DWORD *)(a1 + 8);
      v87 = (int8x16_t)vsubq_f32((float32x4_t)v78, (float32x4_t)v84);
      v88 = (float32x2_t)vextq_s8(v87, v87, 8uLL).u64[0];
      if (vmla_f32(v86, v85, v85).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v87.i8, *(float32x2_t *)v87.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.i8, 1), *(float32x2_t *)v87.i8, 1), v88, v88).f32[0])return 1;
      v89 = *(_QWORD *)a1;
      v90 = *(_DWORD *)(a1 + 8);
      v168 = *(_QWORD *)(a1 + 12);
      v183 = *(_DWORD *)(a1 + 20);
      v91 = *(_WORD *)(a1 + 24);
      *(_QWORD *)a1 = *v50;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 36);
      *(_QWORD *)(a1 + 12) = *v82;
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 48);
      *(_WORD *)(a1 + 24) = v74;
      *(_DWORD *)(a1 + 36) = v90;
      *v50 = v89;
      *(_DWORD *)(a1 + 48) = v183;
      *v82 = v168;
      result = 1;
LABEL_19:
      *(_WORD *)(a1 + 52) = v91;
      return result;
    default:
      v35 = a1 + 56;
      v36 = (uint64_t *)(a1 + 28);
      a6.i64[0] = **a3;
      a6.i32[2] = *((_DWORD *)*a3 + 2);
      a4.i64[0] = *(_QWORD *)(a1 + 28);
      a4.i32[2] = *(_DWORD *)(a1 + 36);
      v39 = (int8x16_t)vsubq_f32(a6, a4);
      v37 = (float32x2_t)vextq_s8(v39, v39, 8uLL).u64[0];
      v38 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v39.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.i8, 1), *(float32x2_t *)v39.i8, 1), v37, v37).f32[0];
      v39.i64[0] = *(_QWORD *)a1;
      v39.i32[2] = *(_DWORD *)(a1 + 8);
      v42 = (int8x16_t)vsubq_f32(a6, (float32x4_t)v39);
      v40 = (float32x2_t)vextq_s8(v42, v42, 8uLL).u64[0];
      v41 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1), *(float32x2_t *)v42.i8, 1), v40, v40).f32[0];
      v42.i64[0] = *(_QWORD *)(a1 + 56);
      v42.i32[2] = *(_DWORD *)(a1 + 64);
      v43 = (int8x16_t)vsubq_f32(a6, (float32x4_t)v42);
      v44 = (float32x2_t)vextq_s8(v43, v43, 8uLL).u64[0];
      v45 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1), *(float32x2_t *)v43.i8, 1), v44, v44).f32[0] < v38;
      if (v38 >= v41)
      {
        if (v45)
        {
          v103 = *v36;
          v104 = *(_DWORD *)(a1 + 36);
          v105 = (_QWORD *)(a1 + 40);
          v171 = *(_QWORD *)(a1 + 40);
          v186 = *(_DWORD *)(a1 + 48);
          v106 = *(_WORD *)(a1 + 52);
          *v36 = *(_QWORD *)v35;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 64);
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 68);
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 76);
          v107 = *(_WORD *)(a1 + 80);
          *(_WORD *)(a1 + 52) = v107;
          *(_DWORD *)(a1 + 64) = v104;
          *(_QWORD *)v35 = v103;
          *(_DWORD *)(a1 + 76) = v186;
          *(_QWORD *)(a1 + 68) = v171;
          *(_WORD *)(a1 + 80) = v106;
          v42.i64[0] = **a3;
          v42.i32[2] = *((_DWORD *)*a3 + 2);
          v43.i64[0] = *(_QWORD *)(a1 + 28);
          v43.i32[2] = *(_DWORD *)(a1 + 36);
          v108 = (int8x16_t)vsubq_f32((float32x4_t)v42, (float32x4_t)v43);
          v109 = (float32x2_t)vextq_s8(v108, v108, 8uLL).u64[0];
          v39 = (int8x16_t)vsubq_f32((float32x4_t)v42, (float32x4_t)v39);
          v110 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v108.i8, *(float32x2_t *)v108.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v108.i8, 1), *(float32x2_t *)v108.i8, 1), v109, v109).f32[0];
          v108.i64[0] = vextq_s8(v39, v39, 8uLL).u64[0];
          if (v110 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v39.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.i8, 1), *(float32x2_t *)v39.i8, 1), *(float32x2_t *)v108.i8, *(float32x2_t *)v108.i8).f32[0])
          {
            v111 = *(_QWORD *)a1;
            v112 = *(_DWORD *)(a1 + 8);
            v172 = *(_QWORD *)(a1 + 12);
            v187 = *(_DWORD *)(a1 + 20);
            v113 = *(_WORD *)(a1 + 24);
            *(_QWORD *)a1 = *v36;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 36);
            *(_QWORD *)(a1 + 12) = *v105;
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 48);
            *(_WORD *)(a1 + 24) = v107;
            *(_DWORD *)(a1 + 36) = v112;
            *v36 = v111;
            *(_DWORD *)(a1 + 48) = v187;
            *v105 = v172;
            *(_WORD *)(a1 + 52) = v113;
          }
        }
      }
      else
      {
        v46 = (uint64_t *)(a1 + 12);
        if (v45)
        {
          v47 = *(_QWORD *)a1;
          v48 = *(_DWORD *)(a1 + 8);
          v164 = *v46;
          v179 = *(_DWORD *)(a1 + 20);
          v49 = *(_WORD *)(a1 + 24);
          *(_QWORD *)a1 = *(_QWORD *)v35;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 64);
          *v46 = *(_QWORD *)(a1 + 68);
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 76);
          *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 80);
          *(_DWORD *)(a1 + 64) = v48;
          *(_QWORD *)v35 = v47;
          *(_DWORD *)(a1 + 76) = v179;
          *(_QWORD *)(a1 + 68) = v164;
          *(_WORD *)(a1 + 80) = v49;
        }
        else
        {
          v125 = *(_QWORD *)a1;
          v126 = *(_DWORD *)(a1 + 8);
          v175 = *v46;
          v190 = *(_DWORD *)(a1 + 20);
          v127 = *(_WORD *)(a1 + 24);
          *(_QWORD *)a1 = *v36;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 36);
          v128 = (uint64_t *)(a1 + 40);
          *v46 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 48);
          *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 52);
          *(_DWORD *)(a1 + 36) = v126;
          *v36 = v125;
          *(_DWORD *)(a1 + 48) = v190;
          *(_QWORD *)(a1 + 40) = v175;
          *(_WORD *)(a1 + 52) = v127;
          v39.i64[0] = **a3;
          v39.i32[2] = *((_DWORD *)*a3 + 2);
          v42 = (int8x16_t)vsubq_f32((float32x4_t)v39, (float32x4_t)v42);
          v129 = (float32x2_t)vextq_s8(v42, v42, 8uLL).u64[0];
          v130 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1), *(float32x2_t *)v42.i8, 1);
          v42.i64[0] = *(_QWORD *)(a1 + 28);
          v42.i32[2] = *(_DWORD *)(a1 + 36);
          v39 = (int8x16_t)vsubq_f32((float32x4_t)v39, (float32x4_t)v42);
          v131 = (float32x2_t)vextq_s8(v39, v39, 8uLL).u64[0];
          if (vmla_f32(v130, v129, v129).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v39.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.i8, 1), *(float32x2_t *)v39.i8, 1), v131, v131).f32[0])
          {
            v132 = *v36;
            v133 = *(_DWORD *)(a1 + 36);
            v176 = *v128;
            v191 = *(_DWORD *)(a1 + 48);
            *v36 = *(_QWORD *)v35;
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 64);
            *v128 = *(_QWORD *)(a1 + 68);
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 76);
            *(_WORD *)(a1 + 52) = *(_WORD *)(a1 + 80);
            *(_DWORD *)(a1 + 64) = v133;
            *(_QWORD *)v35 = v132;
            *(_DWORD *)(a1 + 76) = v191;
            *(_QWORD *)(a1 + 68) = v176;
            *(_WORD *)(a1 + 80) = v127;
          }
        }
      }
      v134 = a1 + 84;
      if (a1 + 84 == a2)
        return 1;
      v135 = 0;
      v136 = 0;
      v137 = *a3;
      break;
  }
  while (1)
  {
    v42.i64[0] = *v137;
    v42.i32[2] = *((_DWORD *)v137 + 2);
    v39.i64[0] = *(_QWORD *)v134;
    v39.i32[2] = *(_DWORD *)(v134 + 8);
    v138 = (int8x16_t)vsubq_f32((float32x4_t)v42, (float32x4_t)v39);
    v139 = (float32x2_t)vextq_s8(v138, v138, 8uLL).u64[0];
    v140 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v138.i8, *(float32x2_t *)v138.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v138.i8, 1), *(float32x2_t *)v138.i8, 1);
    v138.i64[0] = *(_QWORD *)v35;
    v138.i32[2] = *(_DWORD *)(v35 + 8);
    v42 = (int8x16_t)vsubq_f32((float32x4_t)v42, (float32x4_t)v138);
    v141 = (float32x2_t)vextq_s8(v42, v42, 8uLL).u64[0];
    if (vmla_f32(v140, v139, v139).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1), *(float32x2_t *)v42.i8, 1), v141, v141).f32[0])break;
LABEL_30:
    v35 = v134;
    v135 += 28;
    v134 += 28;
    if (v134 == a2)
      return 1;
  }
  v155 = *(_QWORD *)(v134 + 12);
  v161 = *(_DWORD *)(v134 + 20);
  v142 = *(_WORD *)(v134 + 24);
  v143 = v135;
  while (1)
  {
    v144 = a1 + v143;
    *(_QWORD *)(v144 + 84) = *(_QWORD *)(a1 + v143 + 56);
    *(_DWORD *)(v144 + 92) = *(_DWORD *)(a1 + v143 + 64);
    *(_QWORD *)(v144 + 96) = *(_QWORD *)(a1 + v143 + 68);
    *(_DWORD *)(v144 + 104) = *(_DWORD *)(a1 + v143 + 76);
    *(_WORD *)(v144 + 108) = *(_WORD *)(a1 + v143 + 80);
    if (v143 == -56)
      break;
    v42.i64[0] = **a3;
    v42.i32[2] = *((_DWORD *)*a3 + 2);
    v145 = (int8x16_t)vsubq_f32((float32x4_t)v42, (float32x4_t)v39);
    v146 = (float32x2_t)vextq_s8(v145, v145, 8uLL).u64[0];
    v147 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v145.i8, *(float32x2_t *)v145.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v145.i8, 1), *(float32x2_t *)v145.i8, 1), v146, v146).f32[0];
    v145.i64[0] = *(_QWORD *)(v144 + 28);
    v145.i32[2] = *(_DWORD *)(v144 + 36);
    v42 = (int8x16_t)vsubq_f32((float32x4_t)v42, (float32x4_t)v145);
    v148 = (float32x2_t)vextq_s8(v42, v42, 8uLL).u64[0];
    v143 -= 28;
    if (v147 >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1), *(float32x2_t *)v42.i8, 1), v148, v148).f32[0])
    {
      v149 = a1 + v143 + 84;
      goto LABEL_37;
    }
  }
  v149 = a1;
LABEL_37:
  *(_DWORD *)(v149 + 8) = v39.i32[2];
  *(_QWORD *)v149 = v39.i64[0];
  *(_QWORD *)(v144 + 68) = v155;
  *(_DWORD *)(v144 + 76) = v161;
  *(_WORD *)(v149 + 24) = v142;
  if (++v136 != 8)
  {
    v137 = *a3;
    goto LABEL_30;
  }
  return v134 + 28 == a2;
}

uint64_t sub_2233CECB4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t **a5, float32x4_t a6, float32x4_t a7)
{
  float32x4_t v7;
  float32x2_t v8;
  float v9;
  float32x2_t v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x2_t v14;
  _BOOL4 v15;
  uint64_t *v16;
  __int16 v17;
  int v18;
  int v19;
  _QWORD *v20;
  __int16 v21;
  int v22;
  int v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  __int16 v27;
  int v28;
  int v29;
  int v30;
  uint64_t *v31;
  int v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int v36;
  int v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x2_t v42;
  _QWORD *v43;
  __int16 v44;
  int v45;
  int v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x2_t v51;
  _QWORD *v52;
  __int16 v53;
  int v54;
  int v55;
  float32x4_t v56;
  float32x2_t v57;
  float32x2_t v58;
  int8x16_t v59;
  float32x2_t v60;
  __int16 v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;

  a6.i64[0] = **a5;
  a6.i32[2] = *((_DWORD *)*a5 + 2);
  a7.i64[0] = *(_QWORD *)a2;
  a7.i32[2] = *(_DWORD *)(a2 + 8);
  v7 = vsubq_f32(a6, a7);
  v8 = (float32x2_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
  v9 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.f32, 1), *(float32x2_t *)v7.f32, 1), v8, v8).f32[0];
  v7.i64[0] = *(_QWORD *)result;
  v7.i32[2] = *(_DWORD *)(result + 8);
  v12 = vsubq_f32(a6, v7);
  v10 = (float32x2_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
  v11 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.f32, 1), *(float32x2_t *)v12.f32, 1), v10, v10).f32[0];
  v12.i64[0] = *(_QWORD *)a3;
  v12.i32[2] = *(_DWORD *)(a3 + 8);
  v13 = vsubq_f32(a6, v12);
  v14 = (float32x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
  v15 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.f32, 1), *(float32x2_t *)v13.f32, 1), v14, v14).f32[0] < v9;
  if (v9 >= v11)
  {
    if (v15)
    {
      v65 = *(_QWORD *)a2;
      v72 = *(_DWORD *)(a2 + 8);
      v20 = (_QWORD *)(a2 + 12);
      v79 = *(_QWORD *)(a2 + 12);
      v86 = *(_DWORD *)(a2 + 20);
      v21 = *(_WORD *)(a2 + 24);
      v22 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_DWORD *)(a2 + 8) = v22;
      v23 = *(_DWORD *)(a3 + 20);
      *(_QWORD *)(a2 + 12) = *(_QWORD *)(a3 + 12);
      *(_DWORD *)(a2 + 20) = v23;
      *(_WORD *)(a2 + 24) = *(_WORD *)(a3 + 24);
      *(_QWORD *)a3 = v65;
      *(_DWORD *)(a3 + 8) = v72;
      *(_QWORD *)(a3 + 12) = v79;
      *(_DWORD *)(a3 + 20) = v86;
      *(_WORD *)(a3 + 24) = v21;
      v13.i64[0] = **a5;
      v13.i32[2] = *((_DWORD *)*a5 + 2);
      v12.i64[0] = *(_QWORD *)a2;
      v12.i32[2] = *(_DWORD *)(a2 + 8);
      v12 = vsubq_f32(v13, v12);
      v24 = (float32x2_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
      v25 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.f32, 1), *(float32x2_t *)v12.f32, 1);
      v12.i64[0] = *(_QWORD *)result;
      v12.i32[2] = *(_DWORD *)(result + 8);
      v13 = vsubq_f32(v13, v12);
      v26 = (float32x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
      if (vmla_f32(v25, v24, v24).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.f32, 1), *(float32x2_t *)v13.f32, 1), v26, v26).f32[0])
      {
        v66 = *(_QWORD *)result;
        v73 = *(_DWORD *)(result + 8);
        v80 = *(_QWORD *)(result + 12);
        v87 = *(_DWORD *)(result + 20);
        v27 = *(_WORD *)(result + 24);
        v28 = *(_DWORD *)(a2 + 8);
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_DWORD *)(result + 8) = v28;
        v29 = *(_DWORD *)(a2 + 20);
        *(_QWORD *)(result + 12) = *v20;
        *(_DWORD *)(result + 20) = v29;
        *(_WORD *)(result + 24) = *(_WORD *)(a2 + 24);
        *(_QWORD *)a2 = v66;
        *(_DWORD *)(a2 + 8) = v73;
        *v20 = v80;
        *(_DWORD *)(a2 + 20) = v87;
        *(_WORD *)(a2 + 24) = v27;
      }
    }
  }
  else
  {
    v16 = (uint64_t *)(result + 12);
    if (v15)
    {
      v64 = *(_QWORD *)result;
      v71 = *(_DWORD *)(result + 8);
      v78 = *v16;
      v85 = *(_DWORD *)(result + 20);
      v17 = *(_WORD *)(result + 24);
      v18 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)result = *(_QWORD *)a3;
      *(_DWORD *)(result + 8) = v18;
      v19 = *(_DWORD *)(a3 + 20);
      *v16 = *(_QWORD *)(a3 + 12);
      *(_DWORD *)(result + 20) = v19;
      *(_WORD *)(result + 24) = *(_WORD *)(a3 + 24);
LABEL_9:
      *(_QWORD *)a3 = v64;
      *(_DWORD *)(a3 + 8) = v71;
      *(_QWORD *)(a3 + 12) = v78;
      *(_DWORD *)(a3 + 20) = v85;
      *(_WORD *)(a3 + 24) = v17;
      goto LABEL_10;
    }
    v67 = *(_QWORD *)result;
    v74 = *(_DWORD *)(result + 8);
    v81 = *v16;
    v88 = *(_DWORD *)(result + 20);
    v17 = *(_WORD *)(result + 24);
    v30 = *(_DWORD *)(a2 + 8);
    *(_QWORD *)result = *(_QWORD *)a2;
    *(_DWORD *)(result + 8) = v30;
    v31 = (uint64_t *)(a2 + 12);
    v32 = *(_DWORD *)(a2 + 20);
    *v16 = *(_QWORD *)(a2 + 12);
    *(_DWORD *)(result + 20) = v32;
    *(_WORD *)(result + 24) = *(_WORD *)(a2 + 24);
    *(_QWORD *)a2 = v67;
    *(_DWORD *)(a2 + 8) = v74;
    *(_QWORD *)(a2 + 12) = v81;
    *(_DWORD *)(a2 + 20) = v88;
    *(_WORD *)(a2 + 24) = v17;
    v13.i64[0] = **a5;
    v13.i32[2] = *((_DWORD *)*a5 + 2);
    v12.i64[0] = *(_QWORD *)a3;
    v12.i32[2] = *(_DWORD *)(a3 + 8);
    v12 = vsubq_f32(v13, v12);
    v33 = (float32x2_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
    v34 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.f32, 1), *(float32x2_t *)v12.f32, 1);
    v12.i64[0] = *(_QWORD *)a2;
    v12.i32[2] = *(_DWORD *)(a2 + 8);
    v13 = vsubq_f32(v13, v12);
    v35 = (float32x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
    if (vmla_f32(v34, v33, v33).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.f32, 1), *(float32x2_t *)v13.f32, 1), v35, v35).f32[0])
    {
      v64 = *(_QWORD *)a2;
      v71 = *(_DWORD *)(a2 + 8);
      v78 = *v31;
      v85 = *(_DWORD *)(a2 + 20);
      v36 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_DWORD *)(a2 + 8) = v36;
      v37 = *(_DWORD *)(a3 + 20);
      *v31 = *(_QWORD *)(a3 + 12);
      *(_DWORD *)(a2 + 20) = v37;
      *(_WORD *)(a2 + 24) = *(_WORD *)(a3 + 24);
      goto LABEL_9;
    }
  }
LABEL_10:
  v13.i64[0] = **a5;
  v13.i32[2] = *((_DWORD *)*a5 + 2);
  v12.i64[0] = *(_QWORD *)a4;
  v12.i32[2] = *(_DWORD *)(a4 + 8);
  v40 = vsubq_f32(v13, v12);
  v38 = (float32x2_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
  v39 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.f32, 1), *(float32x2_t *)v40.f32, 1);
  v40.i64[0] = *(_QWORD *)a3;
  v40.i32[2] = *(_DWORD *)(a3 + 8);
  v41 = vsubq_f32(v13, v40);
  v42 = (float32x2_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
  if (vmla_f32(v39, v38, v38).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.f32, 1), *(float32x2_t *)v41.f32, 1), v42, v42).f32[0])
  {
    v68 = *(_QWORD *)a3;
    v75 = *(_DWORD *)(a3 + 8);
    v43 = (_QWORD *)(a3 + 12);
    v82 = *(_QWORD *)(a3 + 12);
    v89 = *(_DWORD *)(a3 + 20);
    v44 = *(_WORD *)(a3 + 24);
    v45 = *(_DWORD *)(a4 + 8);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_DWORD *)(a3 + 8) = v45;
    v46 = *(_DWORD *)(a4 + 20);
    *(_QWORD *)(a3 + 12) = *(_QWORD *)(a4 + 12);
    *(_DWORD *)(a3 + 20) = v46;
    *(_WORD *)(a3 + 24) = *(_WORD *)(a4 + 24);
    *(_QWORD *)a4 = v68;
    *(_DWORD *)(a4 + 8) = v75;
    *(_QWORD *)(a4 + 12) = v82;
    *(_DWORD *)(a4 + 20) = v89;
    *(_WORD *)(a4 + 24) = v44;
    v41.i64[0] = **a5;
    v41.i32[2] = *((_DWORD *)*a5 + 2);
    v40.i64[0] = *(_QWORD *)a3;
    v40.i32[2] = *(_DWORD *)(a3 + 8);
    v49 = vsubq_f32(v41, v40);
    v47 = (float32x2_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
    v48 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.f32, 1), *(float32x2_t *)v49.f32, 1);
    v49.i64[0] = *(_QWORD *)a2;
    v49.i32[2] = *(_DWORD *)(a2 + 8);
    v50 = vsubq_f32(v41, v49);
    v51 = (float32x2_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
    if (vmla_f32(v48, v47, v47).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v50.f32, 1), *(float32x2_t *)v50.f32, 1), v51, v51).f32[0])
    {
      v69 = *(_QWORD *)a2;
      v76 = *(_DWORD *)(a2 + 8);
      v52 = (_QWORD *)(a2 + 12);
      v83 = *(_QWORD *)(a2 + 12);
      v90 = *(_DWORD *)(a2 + 20);
      v53 = *(_WORD *)(a2 + 24);
      v54 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_DWORD *)(a2 + 8) = v54;
      v55 = *(_DWORD *)(a3 + 20);
      *(_QWORD *)(a2 + 12) = *v43;
      *(_DWORD *)(a2 + 20) = v55;
      *(_WORD *)(a2 + 24) = *(_WORD *)(a3 + 24);
      *(_QWORD *)a3 = v69;
      *(_DWORD *)(a3 + 8) = v76;
      *v43 = v83;
      *(_DWORD *)(a3 + 20) = v90;
      *(_WORD *)(a3 + 24) = v53;
      v50.i64[0] = **a5;
      v50.i32[2] = *((_DWORD *)*a5 + 2);
      v49.i64[0] = *(_QWORD *)a2;
      v49.i32[2] = *(_DWORD *)(a2 + 8);
      v56 = vsubq_f32(v50, v49);
      v57 = (float32x2_t)vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u64[0];
      v58 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v56.f32, 1), *(float32x2_t *)v56.f32, 1);
      v56.i64[0] = *(_QWORD *)result;
      v56.i32[2] = *(_DWORD *)(result + 8);
      v59 = (int8x16_t)vsubq_f32(v50, v56);
      v60 = (float32x2_t)vextq_s8(v59, v59, 8uLL).u64[0];
      if (vmla_f32(v58, v57, v57).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v59.i8, *(float32x2_t *)v59.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v59.i8, 1), *(float32x2_t *)v59.i8, 1), v60, v60).f32[0])
      {
        v70 = *(_QWORD *)result;
        v77 = *(_DWORD *)(result + 8);
        v84 = *(_QWORD *)(result + 12);
        v91 = *(_DWORD *)(result + 20);
        v61 = *(_WORD *)(result + 24);
        v62 = *(_DWORD *)(a2 + 8);
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_DWORD *)(result + 8) = v62;
        v63 = *(_DWORD *)(a2 + 20);
        *(_QWORD *)(result + 12) = *v52;
        *(_DWORD *)(result + 20) = v63;
        *(_WORD *)(result + 24) = *(_WORD *)(a2 + 24);
        *(_QWORD *)a2 = v70;
        *(_DWORD *)(a2 + 8) = v77;
        *v52 = v84;
        *(_DWORD *)(a2 + 20) = v91;
        *(_WORD *)(a2 + 24) = v61;
      }
    }
  }
  return result;
}

unint64_t sub_2233CF288(unint64_t result, unsigned int a2, unsigned int a3, _DWORD *a4, int a5, uint64_t a6, unint64_t **a7, uint64_t *a8, double a9, float32x4_t a10, float32x4_t a11)
{
  float32x4_t v11;
  unsigned int *v12;
  int8x16_t v13;
  float32x4_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  float32x2_t *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int32x4_t v33;
  uint64_t v34;
  int32x4_t v35;
  float32x2_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t v39;
  int8x16_t v40;
  float v41;
  float32x2_t v42;
  float v43;
  float32x2_t v44;
  float v45;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  BOOL v50;
  __int16 v51;
  int8x16_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int8x16_t v59;
  float32x2_t v60;
  float32x2_t v61;
  int v62;
  int v65;
  int v66;
  __n128 v67;
  float32x4_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  float v73;
  unint64_t v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  float32x4_t v79;
  unint64_t v80;
  float32x4_t v81;
  int8x16_t v82;
  float32x2_t v83;
  float v84;
  float32x4_t v85;
  float32x4_t v86;
  float v87;
  float v88;
  float v89;
  BOOL v90;
  float v91;
  float v92;
  BOOL v93;
  float v94;
  BOOL v95;
  float v96;
  BOOL v97;
  __n128 v99;
  float32x4_t v100;
  unint64_t v101;
  float32x4_t v102;
  int8x16_t v103;
  float32x2_t v104;
  float v105;
  float32x4_t v106;
  float32x4_t v107;
  float v108;
  float v109;
  float v110;
  BOOL v111;
  float v112;
  float v113;
  BOOL v114;
  float v115;
  BOOL v116;
  float v117;
  BOOL v118;
  unsigned int v120;
  int v121;
  float32x4_t v122;
  unint64_t v123;
  int v124;
  unint64_t v125;
  float32x4_t v126;
  float32x4_t v127;

  if (*(_DWORD *)(result + 32) == a5)
  {
    result = sub_2233B60A4((unint64_t *)(result + 136), a2 >> 2, a3);
    if (result)
    {
      v15 = a8[2];
      v16 = (float *)a8[3];
      v17 = a8[4];
      v18 = (float32x2_t *)a8[5];
      v19 = (_BYTE *)a8[6];
      v20 = a8[7];
      v21 = 4 * result;
      v22 = *a8;
      result = a8[1];
      do
      {
        v27 = *v12;
        v28 = (unsigned int *)(*(_QWORD *)(v22 + 8) + 12 * v27);
        v29 = *(_QWORD *)(result + 8);
        v30 = v29 + 12 * *v28;
        v31 = v29 + 12 * v28[1];
        v32 = v30 + 12 * (int)(-1431655765 * ((12 * v28[2] - 12 * (unint64_t)*v28) >> 2));
        v13.i64[0] = *(_QWORD *)v32;
        v13.i32[2] = *(_DWORD *)(v32 + 8);
        v14.i64[0] = *(_QWORD *)v30;
        v14.i32[2] = *(_DWORD *)(v30 + 8);
        v33 = (int32x4_t)vsubq_f32((float32x4_t)v13, v14);
        v34 = v30 + 12 * (int)(-1431655765 * ((unint64_t)(v31 - v30) >> 2));
        v13.i64[0] = *(_QWORD *)v34;
        v13.i32[2] = *(_DWORD *)(v34 + 8);
        v35 = (int32x4_t)vsubq_f32(v14, (float32x4_t)v13);
        v37 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL);
        v38 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v35, (int8x16_t)v35, 0xCuLL), (int8x16_t)v35, 8uLL);
        v13 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v33, (int8x16_t)v33, 0xCuLL), (int8x16_t)v33, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v35, v35), (int8x16_t)v35, 0xCuLL)), v37, v38);
        v36 = (float32x2_t)vextq_s8(v13, v13, 8uLL).u64[0];
        v37.i32[0] = *(_DWORD *)(v15 + 20);
        v38.i64[0] = *(_QWORD *)(v15 + 12);
        v39 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v38.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.f32, 1), *(float32x2_t *)v13.i8, 1), *(float32x2_t *)v37.f32, v36);
        if (v39.f32[0] <= 0.0)
        {
          v38.i32[2] = *(_DWORD *)(v15 + 20);
          v37.i64[0] = *(_QWORD *)v15;
          v37.i32[2] = *(_DWORD *)(v15 + 8);
          v14 = vsubq_f32(v14, v37);
          v40 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v38, (int8x16_t)v38, 0xCuLL), (int8x16_t)v38, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), (int8x16_t)v38, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v14, (int8x16_t)v14, 0xCuLL), (int8x16_t)v14, 8uLL));
          v41 = 1.0 / v39.f32[0];
          v42 = (float32x2_t)vextq_s8(v40, v40, 8uLL).u64[0];
          v43 = -(float)(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v33.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.i8, 1), *(float32x2_t *)v40.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL), v42).f32[0]* v41);
          if (v43 >= 0.0)
          {
            v44 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v35.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1), *(float32x2_t *)v35.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL), v42);
            v45 = v43 - (float)(v44.f32[0] * v41);
            if ((float)-(float)(v44.f32[0] * v41) >= 0.0 && v45 <= 1.0)
            {
              v47 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1);
              v48 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v14.f32), v47, *(float32x2_t *)v14.f32, 1);
              v14 = (float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL);
              v49 = vmla_f32(v48, *(float32x2_t *)v14.f32, v36);
              v49.f32[0] = v41 * v49.f32[0];
              v50 = v49.f32[0] < 0.0 || v49.f32[0] > *(float *)(v15 + 24);
              if (!v50 && v49.f32[0] <= *v16)
              {
                *v16 = v49.f32[0];
                if (*v19)
                  v51 = *(unsigned __int8 *)(*(_QWORD *)(v20 + 8) + v27);
                else
                  v51 = 255;
                v52 = (int8x16_t)vmlaq_n_f32(v37, v38, v49.f32[0]);
                v49.i32[0] = v18[1].i32[0];
                v53 = v18[2];
                v39.i32[0] = v18[3].i32[0];
                v54 = v18[4];
                v44.i32[0] = v18[5].i32[0];
                *(float32x2_t *)v55.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*v18, *(float *)v52.i32), v53, *(float32x2_t *)v52.i8, 1), v54, (float32x4_t)v52, 2);
                v56 = vmla_lane_f32(vmul_f32(v49, *(float32x2_t *)v52.i8), v39, *(float32x2_t *)v52.i8, 1);
                v57 = (float32x4_t)vextq_s8(v52, v52, 8uLL);
                *(float32x2_t *)&v55.u32[2] = vmla_f32(v56, *(float32x2_t *)v57.f32, v44);
                *(float32x2_t *)v57.f32 = v18[6];
                v57.i32[2] = v18[7].i32[0];
                v58 = vaddq_f32(v55, v57);
                v59 = (int8x16_t)vmulq_n_f32((float32x4_t)v13, 1.0/ sqrtf(vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), v47, v47), v36, v36).f32[0]));
                v60 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*v18, *(float *)v59.i32), v53, *(float32x2_t *)v59.i8, 1), v54, (float32x4_t)v59, 2);
                v61 = vmla_lane_f32(vmul_f32(v49, *(float32x2_t *)v59.i8), v39, *(float32x2_t *)v59.i8, 1);
                v13 = vextq_s8(v59, v59, 8uLL);
                *(_DWORD *)(v17 + 8) = v58.i32[2];
                v62 = *(unsigned __int8 *)(v17 + 28);
                *(_QWORD *)v17 = v58.i64[0];
                *(_DWORD *)(v17 + 20) = vmla_f32(v61, *(float32x2_t *)v13.i8, v44).u32[0];
                *(float32x2_t *)(v17 + 12) = v60;
                if (!v62)
                  *(_BYTE *)(v17 + 28) = 1;
                *(_WORD *)(v17 + 24) = (v51 << 8) | 1;
              }
            }
          }
        }
        ++v12;
        v21 -= 4;
      }
      while (v21);
    }
  }
  else
  {
    v23 = 2 * *a4;
    v24 = (2 * a4[2]);
    v124 = 2 * a4[1];
    if (v23 != -2 && 2 * a4[1] != -2 && (_DWORD)v24 != -2)
    {
      v65 = 0;
      v66 = 1 << (a5 + 1);
      *(float *)&a9 = (float)v66;
      a10.i64[0] = *(_QWORD *)(result + 36);
      a10.i32[2] = *(_DWORD *)(result + 44);
      v67 = (__n128)vdupq_lane_s32(*(int32x2_t *)&a9, 0);
      v68 = vdivq_f32(a10, (float32x4_t)v67);
      v69 = *(_QWORD *)(result + 48) + 8 * *(_QWORD *)(result + 8 * (a5 + 1) + 72);
      v70 = v66 << (a5 + 1);
      v11.i64[0] = *(_QWORD *)a6;
      v11.i32[2] = *(_DWORD *)(a6 + 8);
      v71 = v23 + 2;
      v72 = v124 + 2;
      v73 = v68.f32[2];
      v74 = (v24 + 2);
      v75 = v124 | 1;
      v76 = 2 * *a4 * v70;
      v77 = (v124 << (a5 + 1)) + v76;
      v78 = ((v124 | 1) << (a5 + 1)) + v76;
      v79.i64[0] = 0x3F0000003F000000;
      v79.i64[1] = 0x3F0000003F000000;
      v125 = result;
      v123 = (2 * a4[2]);
      v122 = v68;
      v121 = v70;
      v120 = v23 + 2;
      do
      {
        v80 = v24;
        do
        {
          if ((*(_DWORD *)(v69 + 8 * (v77 + v80)) & 1) == 0)
          {
            v11.f32[2] = (float)(v73 * (float)(v65 & 1)) + *(float *)(a6 + 8);
            v67.n128_u64[0] = **a7;
            v67.n128_u32[2] = *((_DWORD *)*a7 + 2);
            v81 = vaddq_f32(v68, v11);
            a11.i64[0] = *(unint64_t *)((char *)*a7 + 12);
            a11.i32[2] = *((_DWORD *)*a7 + 5);
            v82 = (int8x16_t)vsubq_f32(a11, (float32x4_t)v67);
            v83 = (float32x2_t)vextq_s8(v82, v82, 8uLL).u64[0];
            v84 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v82.i8, *(float32x2_t *)v82.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v82.i8, 1), *(float32x2_t *)v82.i8, 1), v83, v83).f32[0]);
            v67 = (__n128)vaddq_f32((float32x4_t)v67, a11);
            a11 = vmulq_n_f32((float32x4_t)v82, 1.0 / v84);
            v85 = vmulq_f32(vsubq_f32(v81, v11), v79);
            v86 = vmlsq_f32(vmulq_f32(vaddq_f32(v11, v81), v79), (float32x4_t)v67, v79);
            v87 = fabsf(a11.f32[0]);
            v88 = fabsf(v86.f32[1]);
            v89 = fabsf(a11.f32[1]);
            v90 = fabsf(v86.f32[0]) <= (float)((float)(v85.f32[0] + (float)((float)(v84 * 0.5) * v87)) + 0.000001)
               && v88 <= (float)((float)(v85.f32[1] + (float)((float)(v84 * 0.5) * v89)) + 0.000001);
            v91 = fabsf(v86.f32[2]);
            v92 = fabsf(a11.f32[2]);
            v93 = v90 && v91 <= (float)((float)(v85.f32[2] + (float)((float)(v84 * 0.5) * v92)) + 0.000001);
            v94 = vabds_f32(v86.f32[1] * a11.f32[2], v86.f32[2] * a11.f32[1]);
            v95 = v93 && v94 <= (float)((float)((float)(v85.f32[2] * v89) + (float)(v85.f32[1] * v92)) + 0.000001);
            v96 = vabds_f32(v86.f32[2] * a11.f32[0], v86.f32[0] * a11.f32[2]);
            v97 = v95 && v96 <= (float)((float)((float)(v85.f32[2] * v87) + (float)(v85.f32[0] * v92)) + 0.000001);
            v67.n128_f32[0] = vabds_f32(v86.f32[0] * a11.f32[1], v86.f32[1] * a11.f32[0]);
            if (v97
              && v67.n128_f32[0] <= (float)((float)((float)(v85.f32[1] * v87) + (float)(v85.f32[0] * v89)) + 0.000001))
            {
              v126 = v11;
              result = sub_2233CF288(v125, v67);
              v11 = v126;
              v79.i64[0] = 0x3F0000003F000000;
              v79.i64[1] = 0x3F0000003F000000;
              v75 = v124 | 1;
              v72 = v124 + 2;
              v71 = v120;
              v70 = v121;
              v68 = v122;
              v24 = v123;
            }
          }
          ++v80;
          ++v65;
        }
        while (v80 < v74);
        v99 = (__n128)vaddq_f32(v68, v11);
        v100 = v11;
        v100.i32[1] = v99.n128_i32[1];
        if (v75 >= v72)
        {
          v67.n128_u64[1] = v11.u64[1];
          v100 = v11;
        }
        else
        {
          v101 = v24;
          do
          {
            if ((*(_DWORD *)(v69 + 8 * (v78 + v101)) & 1) == 0)
            {
              v100.f32[2] = (float)(v73 * (float)(v65 & 1)) + *(float *)(a6 + 8);
              v99.n128_u64[0] = **a7;
              v99.n128_u32[2] = *((_DWORD *)*a7 + 2);
              v102 = vaddq_f32(v68, v100);
              a11.i64[0] = *(unint64_t *)((char *)*a7 + 12);
              a11.i32[2] = *((_DWORD *)*a7 + 5);
              v103 = (int8x16_t)vsubq_f32(a11, (float32x4_t)v99);
              v104 = (float32x2_t)vextq_s8(v103, v103, 8uLL).u64[0];
              v105 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v103.i8, *(float32x2_t *)v103.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v103.i8, 1), *(float32x2_t *)v103.i8, 1), v104, v104).f32[0]);
              v99 = (__n128)vaddq_f32((float32x4_t)v99, a11);
              a11 = vmulq_n_f32((float32x4_t)v103, 1.0 / v105);
              v106 = vmulq_f32(vsubq_f32(v102, v100), v79);
              v107 = vmlsq_f32(vmulq_f32(vaddq_f32(v100, v102), v79), (float32x4_t)v99, v79);
              v108 = fabsf(a11.f32[0]);
              v109 = fabsf(v107.f32[1]);
              v110 = fabsf(a11.f32[1]);
              v111 = fabsf(v107.f32[0]) <= (float)((float)(v106.f32[0] + (float)((float)(v105 * 0.5) * v108)) + 0.000001)
                  && v109 <= (float)((float)(v106.f32[1] + (float)((float)(v105 * 0.5) * v110)) + 0.000001);
              v112 = fabsf(v107.f32[2]);
              v113 = fabsf(a11.f32[2]);
              v114 = v111 && v112 <= (float)((float)(v106.f32[2] + (float)((float)(v105 * 0.5) * v113)) + 0.000001);
              v115 = vabds_f32(v107.f32[1] * a11.f32[2], v107.f32[2] * a11.f32[1]);
              v116 = v114
                  && v115 <= (float)((float)((float)(v106.f32[2] * v110) + (float)(v106.f32[1] * v113)) + 0.000001);
              v117 = vabds_f32(v107.f32[2] * a11.f32[0], v107.f32[0] * a11.f32[2]);
              v118 = v116
                  && v117 <= (float)((float)((float)(v106.f32[2] * v108) + (float)(v106.f32[0] * v113)) + 0.000001);
              v99.n128_f32[0] = vabds_f32(v107.f32[0] * a11.f32[1], v107.f32[1] * a11.f32[0]);
              if (v118
                && v99.n128_f32[0] <= (float)((float)((float)(v106.f32[1] * v108) + (float)(v106.f32[0] * v110))
                                            + 0.000001))
              {
                v127 = v100;
                result = sub_2233CF288(v125, v99);
                v100 = v127;
                v79.i64[0] = 0x3F0000003F000000;
                v79.i64[1] = 0x3F0000003F000000;
                v75 = v124 | 1;
                v72 = v124 + 2;
                v71 = v120;
                v70 = v121;
                v68 = v122;
                v24 = v123;
              }
            }
            ++v101;
            ++v65;
          }
          while (v101 < v74);
          v67.n128_u64[1] = v100.u64[1];
        }
        v11 = vaddq_f32(v68, v100);
        v11.i32[1] = *(_DWORD *)(a6 + 4);
        v11.i32[2] = v67.n128_i32[2];
        ++v23;
        v77 += v70;
        v78 += v70;
      }
      while (v23 < v71);
    }
  }
  return result;
}

void sub_2233CFA44(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CAC40);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAC40))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CAC38);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CAC40);
  }
  *a1 = qword_2540CAC38;
}

void sub_2233CFAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CAC40);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CAC40);
  _Unwind_Resume(a1);
}

void sub_2233CFB38(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CAC50);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAC50))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CAC48);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CAC50);
  }
  *a1 = qword_2540CAC48;
}

void sub_2233CFBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CAC50);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CAC50);
  _Unwind_Resume(a1);
}

uint64_t sub_2233CFC2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X2>, float *a4@<X3>, uint64_t a5@<X8>, int32x4_t a6@<Q3>, int32x4_t a7@<Q4>, float32x2_t a8@<D6>, float32x4_t a9@<Q7>)
{
  double v12;
  uint64_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  void *v22;
  unint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t **v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t ***v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t **v45;
  unsigned __int8 *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t **v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  char *v58;
  BOOL v59;
  _QWORD *v60;
  _BOOL4 v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  _BOOL4 v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unint64_t v68;
  unint64_t v69;
  unsigned __int8 *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t *v75;
  unsigned int v76;
  uint64_t **v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  uint64_t **v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  unsigned __int8 *v84;
  BOOL v85;
  unsigned __int8 *v86;
  unsigned int v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  unint64_t v110;
  unint64_t v111;
  unsigned __int8 *v112;
  unsigned int v113;
  unsigned int v114;
  char v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  uint64_t *v118;
  unsigned int v119;
  uint64_t **v120;
  uint64_t *v121;
  BOOL v122;
  uint64_t **v123;
  int v124;
  uint64_t **v125;
  uint64_t **v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t **v129;
  unsigned int v130;
  uint64_t **v131;
  uint64_t **v132;
  uint64_t **v133;
  uint64_t **v134;
  uint64_t **v135;
  uint64_t **v136;
  uint64_t **v137;
  uint64_t **v138;
  uint64_t **v139;
  uint64_t **v140;
  uint64_t **v141;
  uint64_t **v142;
  uint64_t **v143;
  uint64_t **v144;
  _QWORD *v145;
  _QWORD *v146;
  float *v147;
  uint64_t v148;
  uint64_t **v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  uint64_t **v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t *v171;
  int v172;
  uint64_t *v173;
  void **v174;
  float32x2_t v175;
  float32x4_t v176;
  float32x4_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int8x16_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x2_t v190;
  float32x2_t v191;
  float32x2_t v192;
  int8x16_t v193;
  float v194;
  float32x4_t v195;
  float32x4_t v196;
  int8x16_t v197;
  float v198;
  float32x4_t v199;
  int8x16_t v200;
  float32x4_t v201;
  int8x16_t v202;
  float v203;
  float v204;
  int16x4_t v205;
  int8x16_t v206;
  float32x4_t v207;
  float32x4_t v208;
  int8x16_t v209;
  float32x4_t v210;
  BOOL v211;
  float32x4_t v212;
  int8x16_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  char v217;
  char v218;
  float32x2_t *v219;
  float32x2_t *v220;
  uint64_t v221;
  float32x4_t v222;
  int8x16_t v223;
  int32x4_t v224;
  unsigned __int32 v225;
  int8x16_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  uint64_t v230;
  float32x4_t v231;
  float32x4_t v232;
  uint64_t v233;
  float *v234;
  unsigned __int8 v235;
  const void *v236;
  size_t v237;
  unsigned __int8 v238;
  const void *v239;
  size_t v240;
  int v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  size_t v245;
  const char *v246;
  unsigned __int8 v247;
  int v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  size_t v252;
  const char *v253;
  unsigned __int8 v254;
  const char *v255;
  size_t v256;
  _BYTE *v257;
  uint64_t *v258;
  int v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  NSObject *v266;
  size_t v267;
  std::__shared_weak_count_vtbl *v268;
  std::__shared_weak_count *v269;
  size_t v270;
  size_t v271;
  unint64_t v272;
  _BYTE **v273;
  int v274;
  void *v275;
  unsigned __int8 v276;
  const char *v277;
  size_t v278;
  _BYTE *v279;
  int v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  NSObject *v287;
  size_t v288;
  std::__shared_weak_count_vtbl *v289;
  std::__shared_weak_count *v290;
  size_t v291;
  size_t v292;
  unint64_t v293;
  _BYTE **v294;
  int v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char v300;
  char *v301;
  char *v302;
  std::__shared_weak_count *v303;
  unint64_t *p_shared_owners;
  unint64_t v305;
  char *v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  uint64_t v316;
  char *v317;
  uint64_t v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  void *v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  uint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  char v348;
  char *v349;
  char *v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  char *v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  uint64_t v364;
  char *v365;
  uint64_t v366;
  char *v367;
  uint64_t v368;
  uint64_t v369;
  void *v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  uint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  unint64_t *v390;
  uint64_t *v391;
  uint64_t **v392;
  uint64_t *v393;
  uint64_t **v394;
  int8x16_t v395;
  float v396;
  float v397;
  float32x2_t v398;
  float *v399;
  uint64_t v400;
  float v401;
  float v402;
  float *v403;
  uint64_t v404;
  uint64_t v405;
  float *v406;
  uint64_t v407;
  float v408;
  float v409;
  float v410;
  float v411;
  uint64_t v412;
  unint64_t v413;
  char *v414;
  char *v415;
  char *v416;
  char *v417;
  unint64_t v418;
  float v419;
  float v420;
  float *v421;
  float *v422;
  float v423;
  float v424;
  BOOL v425;
  uint64_t v426;
  unint64_t v427;
  unint64_t v428;
  unint64_t v429;
  char *v430;
  uint64_t v431;
  char *v432;
  char *i;
  uint64_t v434;
  int v435;
  char *v436;
  char *v437;
  float32x2_t v439;
  float32x2_t v440;
  float32x4_t v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t v444;
  char *v445;
  char *v446;
  char *j;
  uint64_t v448;
  int v449;
  char *v450;
  uint64_t *k;
  int64_t v452;
  unint64_t v453;
  char *v454;
  char *v455;
  uint64_t *v456;
  unint64_t v457;
  unint64_t v458;
  float32x4_t v459;
  float v460;
  float v461;
  uint64_t v462;
  uint64_t v463;
  float v464;
  float v465;
  BOOL v466;
  uint64_t v467;
  unint64_t v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  char *v472;
  uint64_t v473;
  char *v474;
  uint64_t v475;
  int v476;
  uint64_t *v477;
  char *v478;
  BOOL v479;
  float32x2_t v480;
  float32x2_t v481;
  float32x4_t v482;
  unint64_t v483;
  unint64_t v484;
  unint64_t v485;
  char *v486;
  char *v487;
  uint64_t v488;
  int v489;
  char *v490;
  float v491;
  unint64_t v492;
  float *v493;
  float32x2_t *v494;
  __int128 v495;
  float32x2_t *v496;
  float32x2_t *v497;
  float32x2_t v498;
  size_t v499;
  float32x2_t *v500;
  float32x2_t v501;
  float32x2_t *v502;
  float32x2_t v503;
  float32x2_t *v504;
  float32x2_t *v505;
  float32x2_t v506;
  float v507;
  float32x2_t v508;
  float32x2_t v509;
  uint64_t v510;
  char *v511;
  float32x2_t v512;
  float32x2_t v513;
  float32x2_t v514;
  float32x2_t v515;
  void *v516;
  BOOL v517;
  float *v518;
  float *v519;
  BOOL v520;
  float v521;
  uint64_t v522;
  float *v523;
  float *v524;
  float *v525;
  float v526;
  float v527;
  unint64_t v528;
  char *v529;
  char *v530;
  uint64_t **v531;
  int64x2_t v532;
  uint64_t *v533;
  uint64_t **v534;
  uint64_t *v535;
  int8x16_t v537;
  float32x4_t v538;
  float32x4_t v539;
  float32x4_t v540;
  unint64_t v541;
  float32x2_t v542;
  float v543;
  float32x2_t v544;
  float *v545;
  unint64_t v546;
  float32x4_t v547;
  float32x4_t v548;
  float32x4_t v549;
  size_t v550;
  size_t v551;
  unint64_t v552;
  uint64_t v553;
  float32x4_t v554;
  void *v555;
  float32x4_t v556;
  int8x16_t v557;
  uint64_t v558;
  uint64_t v559;
  int8x16_t v560;
  _QWORD *v561;
  void *v562[2];
  int8x16_t v563;
  uint64_t v564;
  uint64_t v565;
  float *v566;
  uint64_t v567;
  _QWORD *__src;
  float __srca;
  const char *__srcb;
  const char *__srcc;
  float __srcd;
  unint64_t __srce;
  unint64_t __srcf;
  float32x2_t __srcg;
  void *__p[2];
  void *v578;
  unsigned __int8 v579;
  uint64_t **v580;
  uint64_t *v581;
  unint64_t v582;
  double v583;
  uint64_t v584;
  unint64_t v585;
  void *v586;
  int v587;
  _QWORD v588[2];
  float32x4_t v589;
  float32x4_t v590;
  float32x4_t v591;
  float32x4_t v592;
  uint64_t v593;
  void *v594[2];
  std::__shared_weak_count *v595;
  char *v596;
  std::__shared_weak_count *v597;
  _BYTE *v598;
  __int128 v599;
  __int128 v600;
  char *category[2];
  void *v602[3];
  char v603;
  __int128 v604;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v606;
  const char *v607;
  int v608;
  const char *v609;
  uint64_t v610;
  std::__shared_weak_count *v611;
  __int128 v612;
  __int128 v613;
  int v614;
  _BYTE v615[24];
  __int128 v616;
  char *v617;
  size_t v618;
  unint64_t v619;
  char v620;
  uint64_t v621;

  v621 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 136))
    v12 = (double)*(uint64_t *)(a2 + 128) / 1000000000.0;
  else
    v12 = 0.0;
  v13 = *(_QWORD *)(a2 + 56);
  a6.i64[0] = *(_QWORD *)(a1 + 48);
  a6.i32[2] = *(_DWORD *)(a1 + 56);
  a7.i64[0] = *(_QWORD *)(a1 + 64);
  a7.i32[2] = *(_DWORD *)(a1 + 72);
  a8.i32[0] = *(_DWORD *)(a1 + 88);
  a9.i64[0] = *(_QWORD *)(a1 + 96);
  a9.i32[2] = *(_DWORD *)(a1 + 104);
  v14.i64[0] = vzip1q_s32(a6, a7).u64[0];
  v15 = (int8x16_t)vnegq_f32(a9);
  v16 = (int8x16_t)vtrn2q_s32(a6, a7);
  v16.i32[2] = HIDWORD(*(_QWORD *)(a1 + 80));
  v17 = vzip2q_s32(a6, a7);
  *(float32x2_t *)v18.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v14.f32, *(float *)v15.i32), *(float32x2_t *)v16.i8, *(float32x2_t *)a9.f32, 1), *(float32x2_t *)v17.i8, a9, 2);
  v17.i32[2] = a8.i32[0];
  v18.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 80), *(float32x2_t *)v15.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a1 + 80), 1), *(float32x2_t *)a9.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), a8).u32[0]);
  v19.i32[3] = 0;
  v19.i32[0] = v16.i32[0];
  v21 = vextq_s8(vextq_s8(v16, v16, 0xCuLL), (int8x16_t)v17, 8uLL);
  v20.i64[0] = v21.i64[1];
  *(uint64_t *)((char *)v19.i64 + 4) = v21.i64[0];
  v20.i64[1] = vdupq_laneq_s32(v17, 2).u32[0];
  v22 = *(void **)(a1 + 16);
  v14.i64[1] = *(_QWORD *)(a1 + 80);
  v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3);
  v24 = *(float32x4_t *)a3[6].f32;
  v25 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(*(_OWORD *)a3[2].f32)), v19, a3[2], 1), v20, *(float32x4_t *)a3[2].f32, 2), v18, *(float32x4_t *)a3[2].f32, 3);
  v26 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(*(_OWORD *)a3[4].f32)), v19, a3[4], 1), v20, *(float32x4_t *)a3[4].f32, 2), v18, *(float32x4_t *)a3[4].f32, 3);
  v589 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(*(_OWORD *)a3->f32)), v19, *a3, 1), v20, *(float32x4_t *)a3->f32, 2), v18, *(float32x4_t *)a3->f32, 3);
  v590 = v25;
  v591 = v26;
  v592 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v24.f32[0]), v19, *(float32x2_t *)v24.f32, 1), v20, v24, 2), v18, v24, 3);
  v588[0] = a2;
  v588[1] = &v589;
  v583 = v12;
  v584 = v13;
  v585 = v23;
  v586 = v22;
  v587 = 728337584;
  kdebug_trace();
  if (!*(_BYTE *)(a1 + 128))
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 40) = 0;
    return kdebug_trace();
  }
  v27 = *(uint64_t ***)(a1 + 8);
  __src = (_QWORD *)(a1 + 8);
  v600 = *(_OWORD *)(a1 + 112);
  v28 = a2;
  if (!v27)
LABEL_47:
    sub_223198218("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v29 = *((unsigned __int8 *)v27 + 32);
      if (v600 == v29)
        break;
      v32 = v600;
      if (v600 < v29)
        goto LABEL_7;
LABEL_45:
      if (v29 >= v32)
        goto LABEL_48;
      v27 = (uint64_t **)v27[1];
      if (!v27)
        goto LABEL_47;
    }
    v29 = *((unsigned __int8 *)v27 + 33);
    if (BYTE1(v600) != v29)
    {
      v32 = BYTE1(v600);
      if (BYTE1(v600) >= v29)
        goto LABEL_45;
      goto LABEL_7;
    }
    v29 = *((unsigned __int8 *)v27 + 34);
    if (BYTE2(v600) != v29)
    {
      v32 = BYTE2(v600);
      if (BYTE2(v600) >= v29)
        goto LABEL_45;
      goto LABEL_7;
    }
    v29 = *((unsigned __int8 *)v27 + 35);
    if (BYTE3(v600) == v29)
      break;
    v32 = BYTE3(v600);
    if (BYTE3(v600) >= v29)
      goto LABEL_45;
LABEL_7:
    v27 = (uint64_t **)*v27;
    if (!v27)
      goto LABEL_47;
  }
  v30 = *((unsigned __int8 *)v27 + 36);
  v31 = BYTE4(v600);
  if (BYTE4(v600) != v30)
    goto LABEL_24;
  v30 = *((unsigned __int8 *)v27 + 37);
  v31 = BYTE5(v600);
  if (BYTE5(v600) != v30)
    goto LABEL_24;
  v30 = *((unsigned __int8 *)v27 + 38);
  v31 = BYTE6(v600);
  if (BYTE6(v600) != v30)
    goto LABEL_24;
  v30 = *((unsigned __int8 *)v27 + 39);
  v31 = BYTE7(v600);
  if (BYTE7(v600) != v30)
    goto LABEL_24;
  v30 = *((unsigned __int8 *)v27 + 40);
  v31 = BYTE8(v600);
  if (BYTE8(v600) != v30)
    goto LABEL_24;
  v30 = *((unsigned __int8 *)v27 + 41);
  v31 = BYTE9(v600);
  if (BYTE9(v600) != v30)
    goto LABEL_24;
  v30 = *((unsigned __int8 *)v27 + 42);
  v31 = BYTE10(v600);
  if (BYTE10(v600) != v30)
    goto LABEL_24;
  v30 = *((unsigned __int8 *)v27 + 43);
  v31 = BYTE11(v600);
  if (BYTE11(v600) != v30)
    goto LABEL_24;
  v30 = *((unsigned __int8 *)v27 + 44);
  v31 = BYTE12(v600);
  if (BYTE12(v600) != v30
    || (v30 = *((unsigned __int8 *)v27 + 45), v31 = BYTE13(v600), BYTE13(v600) != v30)
    || (v30 = *((unsigned __int8 *)v27 + 46), v31 = BYTE14(v600), BYTE14(v600) != v30)
    || (v30 = *((unsigned __int8 *)v27 + 47), v31 = HIBYTE(v600), HIBYTE(v600) != v30))
  {
LABEL_24:
    if (v31 < v30)
      goto LABEL_7;
  }
  v29 = *((unsigned __int8 *)v27 + 36);
  v32 = BYTE4(v600);
  if (v29 != BYTE4(v600))
    goto LABEL_45;
  v29 = *((unsigned __int8 *)v27 + 37);
  v32 = BYTE5(v600);
  if (v29 != BYTE5(v600))
    goto LABEL_45;
  v29 = *((unsigned __int8 *)v27 + 38);
  v32 = BYTE6(v600);
  if (v29 != BYTE6(v600))
    goto LABEL_45;
  v29 = *((unsigned __int8 *)v27 + 39);
  v32 = BYTE7(v600);
  if (v29 != BYTE7(v600))
    goto LABEL_45;
  v29 = *((unsigned __int8 *)v27 + 40);
  v32 = BYTE8(v600);
  if (v29 != BYTE8(v600))
    goto LABEL_45;
  v29 = *((unsigned __int8 *)v27 + 41);
  v32 = BYTE9(v600);
  if (v29 != BYTE9(v600))
    goto LABEL_45;
  v29 = *((unsigned __int8 *)v27 + 42);
  v32 = BYTE10(v600);
  if (v29 != BYTE10(v600))
    goto LABEL_45;
  v29 = *((unsigned __int8 *)v27 + 43);
  v32 = BYTE11(v600);
  if (v29 != BYTE11(v600))
    goto LABEL_45;
  v29 = *((unsigned __int8 *)v27 + 44);
  v32 = BYTE12(v600);
  if (v29 != BYTE12(v600))
    goto LABEL_45;
  v29 = *((unsigned __int8 *)v27 + 45);
  v32 = BYTE13(v600);
  if (v29 != BYTE13(v600))
    goto LABEL_45;
  v29 = *((unsigned __int8 *)v27 + 46);
  v32 = BYTE14(v600);
  if (v29 != BYTE14(v600))
    goto LABEL_45;
  v29 = *((unsigned __int8 *)v27 + 47);
  v32 = HIBYTE(v600);
  if (v29 != HIBYTE(v600))
    goto LABEL_45;
LABEL_48:
  if (!sub_2233D43EC((uint64_t)(v27 + 6)))
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 40) = 0;
    return kdebug_trace();
  }
  if (!*(_BYTE *)a4)
  {
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_BYTE *)(a5 + 40) = 1;
    *(_OWORD *)a5 = v600;
    return kdebug_trace();
  }
  v561 = (_QWORD *)a1;
  v555 = v22;
  v567 = a5;
  v581 = 0;
  v582 = 0;
  v580 = &v581;
  v34 = (unsigned __int8 *)v27[9];
  v33 = (unsigned __int8 *)v27[10];
  if (v34 == v33 || *(_QWORD *)(a2 + 104) == *(_QWORD *)(a2 + 96))
    goto LABEL_156;
  v35 = (uint64_t ***)(a2 + 48);
  while (2)
  {
    v37 = *(unsigned __int8 **)(v28 + 96);
    v36 = *(unsigned __int8 **)(v28 + 104);
    if (v36 == v37)
      goto LABEL_53;
    v38 = 0xCCCCCCCCCCCCCCCDLL * ((v36 - v37) >> 3);
    do
    {
      v39 = v38 >> 1;
      v40 = &v37[40 * (v38 >> 1)];
      v41 = *v40;
      v42 = *v34;
      if (v41 != v42)
        goto LABEL_73;
      v41 = v40[1];
      v42 = v34[1];
      if (v41 != v42)
        goto LABEL_73;
      v41 = v40[2];
      v42 = v34[2];
      if (v41 != v42)
        goto LABEL_73;
      v41 = v40[3];
      v42 = v34[3];
      if (v41 != v42)
        goto LABEL_73;
      v41 = v40[4];
      v42 = v34[4];
      if (v41 != v42)
        goto LABEL_73;
      v41 = v40[5];
      v42 = v34[5];
      if (v41 != v42)
        goto LABEL_73;
      v41 = v40[6];
      v42 = v34[6];
      if (v41 != v42)
        goto LABEL_73;
      v41 = v40[7];
      v42 = v34[7];
      if (v41 != v42)
        goto LABEL_73;
      v41 = v40[8];
      v42 = v34[8];
      if (v41 != v42)
        goto LABEL_73;
      v41 = v40[9];
      v42 = v34[9];
      if (v41 != v42)
        goto LABEL_73;
      v41 = v40[10];
      v42 = v34[10];
      if (v41 != v42)
        goto LABEL_73;
      v41 = v40[11];
      v42 = v34[11];
      if (v41 != v42)
        goto LABEL_73;
      v41 = v40[12];
      v42 = v34[12];
      if (v41 != v42
        || (v41 = v40[13], v42 = v34[13], v41 != v42)
        || (v41 = v40[14], v42 = v34[14], v41 != v42)
        || (v41 = v40[15], v42 = v34[15], v41 != v42))
      {
LABEL_73:
        if (v41 < v42)
        {
          v39 = v38 + ~v39;
          v37 = v40 + 40;
        }
      }
      v38 = v39;
    }
    while (v39);
    if (v36 == v37
      || (char)sub_22319835C(v37, v34) < 0
      || (char)sub_22319835C(v34, v37) < 0
      || v37 == *(unsigned __int8 **)(v28 + 104))
    {
      goto LABEL_53;
    }
    if (!v27[15]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/RoomAssociations.cpp", 493, (uint64_t)"current_room.boundary", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    if (*((_BYTE *)a4 + 1) && !sub_2233D5790((uint64_t)v588, v34, (uint64_t)v27[15]))
      goto LABEL_53;
    v44 = (unsigned __int8 *)*((_QWORD *)v37 + 2);
    v43 = (unsigned __int8 *)*((_QWORD *)v37 + 3);
    if (v44 == v43)
      goto LABEL_53;
    v45 = *v35;
    if (!*v35)
      goto LABEL_53;
LABEL_85:
    v46 = (unsigned __int8 *)(a2 + 48);
    do
    {
      v47 = *((unsigned __int8 *)v45 + 32);
      v48 = *v44;
      if (v47 != v48)
        goto LABEL_103;
      v47 = *((unsigned __int8 *)v45 + 33);
      v48 = v44[1];
      if (v47 != v48)
        goto LABEL_103;
      v47 = *((unsigned __int8 *)v45 + 34);
      v48 = v44[2];
      if (v47 != v48)
        goto LABEL_103;
      v47 = *((unsigned __int8 *)v45 + 35);
      v48 = v44[3];
      if (v47 != v48)
        goto LABEL_103;
      v47 = *((unsigned __int8 *)v45 + 36);
      v48 = v44[4];
      if (v47 != v48)
        goto LABEL_103;
      v47 = *((unsigned __int8 *)v45 + 37);
      v48 = v44[5];
      if (v47 != v48)
        goto LABEL_103;
      v47 = *((unsigned __int8 *)v45 + 38);
      v48 = v44[6];
      if (v47 != v48)
        goto LABEL_103;
      v47 = *((unsigned __int8 *)v45 + 39);
      v48 = v44[7];
      if (v47 != v48)
        goto LABEL_103;
      v47 = *((unsigned __int8 *)v45 + 40);
      v48 = v44[8];
      if (v47 != v48)
        goto LABEL_103;
      v47 = *((unsigned __int8 *)v45 + 41);
      v48 = v44[9];
      if (v47 != v48)
        goto LABEL_103;
      v47 = *((unsigned __int8 *)v45 + 42);
      v48 = v44[10];
      if (v47 != v48)
        goto LABEL_103;
      v47 = *((unsigned __int8 *)v45 + 43);
      v48 = v44[11];
      if (v47 != v48)
        goto LABEL_103;
      v47 = *((unsigned __int8 *)v45 + 44);
      v48 = v44[12];
      if (v47 != v48)
        goto LABEL_103;
      v47 = *((unsigned __int8 *)v45 + 45);
      v48 = v44[13];
      if (v47 == v48
        && (v47 = *((unsigned __int8 *)v45 + 46), v48 = v44[14], v47 == v48)
        && (v47 = *((unsigned __int8 *)v45 + 47), v48 = v44[15], v47 == v48))
      {
        v46 = (unsigned __int8 *)v45;
      }
      else
      {
LABEL_103:
        if (v47 < v48)
          ++v45;
        else
          v46 = (unsigned __int8 *)v45;
      }
      v45 = (uint64_t **)*v45;
    }
    while (v45);
    if (v46 == (unsigned __int8 *)v35 || (char)sub_22319835C(v44, v46 + 32) < 0)
      goto LABEL_151;
    v49 = v581;
    v50 = &v581;
    v51 = &v581;
    if (!v581)
      goto LABEL_148;
    v52 = *v44;
    while (2)
    {
      while (2)
      {
        v51 = (uint64_t **)v49;
        v53 = *((unsigned __int8 *)v49 + 25);
        v54 = v52 >= v53;
        if (v52 != v53)
        {
          v55 = *v44;
          goto LABEL_143;
        }
        v55 = v44[1];
        v53 = *((unsigned __int8 *)v51 + 26);
        v54 = v55 >= v53;
        if (v55 != v53
          || (v55 = v44[2], v53 = *((unsigned __int8 *)v51 + 27), v54 = v55 >= v53, v55 != v53)
          || (v55 = v44[3], v53 = *((unsigned __int8 *)v51 + 28), v54 = v55 >= v53, v55 != v53))
        {
LABEL_143:
          if (v54)
            goto LABEL_145;
          goto LABEL_111;
        }
        v56 = v44[4];
        v57 = *((unsigned __int8 *)v51 + 29);
        if (v56 != v57)
          goto LABEL_128;
        v56 = v44[5];
        v57 = *((unsigned __int8 *)v51 + 30);
        if (v56 != v57)
          goto LABEL_128;
        v56 = v44[6];
        v57 = *((unsigned __int8 *)v51 + 31);
        if (v56 != v57)
          goto LABEL_128;
        v56 = v44[7];
        v57 = *((unsigned __int8 *)v51 + 32);
        if (v56 != v57)
          goto LABEL_128;
        v56 = v44[8];
        v57 = *((unsigned __int8 *)v51 + 33);
        if (v56 != v57)
          goto LABEL_128;
        v56 = v44[9];
        v57 = *((unsigned __int8 *)v51 + 34);
        if (v56 != v57)
          goto LABEL_128;
        v56 = v44[10];
        v57 = *((unsigned __int8 *)v51 + 35);
        if (v56 != v57)
          goto LABEL_128;
        v56 = v44[11];
        v57 = *((unsigned __int8 *)v51 + 36);
        if (v56 != v57)
          goto LABEL_128;
        v56 = v44[12];
        v57 = *((unsigned __int8 *)v51 + 37);
        if (v56 != v57
          || (v56 = v44[13], v57 = *((unsigned __int8 *)v51 + 38), v56 != v57)
          || (v56 = v44[14], v57 = *((unsigned __int8 *)v51 + 39), v56 != v57)
          || (v56 = v44[15], v57 = *((unsigned __int8 *)v51 + 40), v56 != v57))
        {
LABEL_128:
          if (v56 < v57)
          {
LABEL_111:
            v49 = *v51;
            v50 = v51;
            if (!*v51)
              goto LABEL_148;
            continue;
          }
        }
        break;
      }
      v53 = *((unsigned __int8 *)v51 + 29);
      v55 = v44[4];
      if (v53 == v55)
      {
        v53 = *((unsigned __int8 *)v51 + 30);
        v55 = v44[5];
        if (v53 == v55)
        {
          v53 = *((unsigned __int8 *)v51 + 31);
          v55 = v44[6];
          if (v53 == v55)
          {
            v53 = *((unsigned __int8 *)v51 + 32);
            v55 = v44[7];
            if (v53 == v55)
            {
              v53 = *((unsigned __int8 *)v51 + 33);
              v55 = v44[8];
              if (v53 == v55)
              {
                v53 = *((unsigned __int8 *)v51 + 34);
                v55 = v44[9];
                if (v53 == v55)
                {
                  v53 = *((unsigned __int8 *)v51 + 35);
                  v55 = v44[10];
                  if (v53 == v55)
                  {
                    v53 = *((unsigned __int8 *)v51 + 36);
                    v55 = v44[11];
                    if (v53 == v55)
                    {
                      v53 = *((unsigned __int8 *)v51 + 37);
                      v55 = v44[12];
                      if (v53 == v55)
                      {
                        v53 = *((unsigned __int8 *)v51 + 38);
                        v55 = v44[13];
                        if (v53 == v55)
                        {
                          v53 = *((unsigned __int8 *)v51 + 39);
                          v55 = v44[14];
                          if (v53 == v55)
                          {
                            v53 = *((unsigned __int8 *)v51 + 40);
                            v55 = v44[15];
                            if (v53 == v55)
                              goto LABEL_151;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_145:
      if (v53 >= v55)
        goto LABEL_151;
      v49 = v51[1];
      if (v49)
        continue;
      break;
    }
    v50 = v51 + 1;
LABEL_148:
    v58 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v58 + 25) = *(_OWORD *)v44;
    v58[41] = 0;
    *(_QWORD *)v58 = 0;
    *((_QWORD *)v58 + 1) = 0;
    *((_QWORD *)v58 + 2) = v51;
    *v50 = (uint64_t *)v58;
    if (*v580)
    {
      v580 = (uint64_t **)*v580;
      v58 = (char *)*v50;
    }
    sub_2231A9A8C(v581, (uint64_t *)v58);
    ++v582;
LABEL_151:
    while (1)
    {
      v44 += 16;
      v28 = a2;
      if (v44 == v43)
        break;
      v45 = *v35;
      if (*v35)
        goto LABEL_85;
    }
LABEL_53:
    v34 += 16;
    if (v34 != v33)
      continue;
    break;
  }
LABEL_156:
  if (*((_BYTE *)a4 + 2))
    v59 = *((_BYTE *)a4 + 3) == 0;
  else
    v59 = 1;
  if (!v59)
  {
    v60 = (_QWORD *)*v561;
    if ((_QWORD *)*v561 != __src)
    {
      do
      {
        if (v60[4] != (_QWORD)v600 || v60[5] != *((_QWORD *)&v600 + 1))
        {
          v62 = sub_2233D43EC((uint64_t)(v60 + 6));
          v64 = (unsigned __int8 *)v60[9];
          v63 = (unsigned __int8 *)v60[10];
          if (v64 != v63 && *(_QWORD *)(v28 + 104) != *(_QWORD *)(v28 + 96))
          {
            v65 = v62;
            do
            {
              v67 = *(unsigned __int8 **)(v28 + 96);
              v66 = *(unsigned __int8 **)(v28 + 104);
              if (v66 != v67)
              {
                v68 = 0xCCCCCCCCCCCCCCCDLL * ((v66 - v67) >> 3);
                do
                {
                  v69 = v68 >> 1;
                  v70 = &v67[40 * (v68 >> 1)];
                  v71 = *v70;
                  v72 = *v64;
                  if (v71 != v72)
                    goto LABEL_190;
                  v71 = v70[1];
                  v72 = v64[1];
                  if (v71 != v72)
                    goto LABEL_190;
                  v71 = v70[2];
                  v72 = v64[2];
                  if (v71 != v72)
                    goto LABEL_190;
                  v71 = v70[3];
                  v72 = v64[3];
                  if (v71 != v72)
                    goto LABEL_190;
                  v71 = v70[4];
                  v72 = v64[4];
                  if (v71 != v72)
                    goto LABEL_190;
                  v71 = v70[5];
                  v72 = v64[5];
                  if (v71 != v72)
                    goto LABEL_190;
                  v71 = v70[6];
                  v72 = v64[6];
                  if (v71 != v72)
                    goto LABEL_190;
                  v71 = v70[7];
                  v72 = v64[7];
                  if (v71 != v72)
                    goto LABEL_190;
                  v71 = v70[8];
                  v72 = v64[8];
                  if (v71 != v72)
                    goto LABEL_190;
                  v71 = v70[9];
                  v72 = v64[9];
                  if (v71 != v72)
                    goto LABEL_190;
                  v71 = v70[10];
                  v72 = v64[10];
                  if (v71 != v72)
                    goto LABEL_190;
                  v71 = v70[11];
                  v72 = v64[11];
                  if (v71 != v72)
                    goto LABEL_190;
                  v71 = v70[12];
                  v72 = v64[12];
                  if (v71 != v72
                    || (v71 = v70[13], v72 = v64[13], v71 != v72)
                    || (v71 = v70[14], v72 = v64[14], v71 != v72)
                    || (v71 = v70[15], v72 = v64[15], v71 != v72))
                  {
LABEL_190:
                    if (v71 < v72)
                    {
                      v69 = v68 + ~v69;
                      v67 = v70 + 40;
                    }
                  }
                  v68 = v69;
                }
                while (v69);
                if (v66 != v67
                  && ((char)sub_22319835C(v67, v64) & 0x80000000) == 0
                  && ((char)sub_22319835C(v64, v67) & 0x80000000) == 0
                  && v67 != *(unsigned __int8 **)(v28 + 104))
                {
                  if (!v65)
                    goto LABEL_201;
                  if (!v60[15]
                    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/RoomAssociations.cpp", 534, (uint64_t)"room.boundary", 13, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                  {
                    abort();
                  }
                  if (!*((_BYTE *)a4 + 1) || sub_2233D5790((uint64_t)v588, v64, v60[15]))
                  {
LABEL_201:
                    v73 = (unsigned __int8 *)*((_QWORD *)v67 + 2);
                    v74 = (unsigned __int8 *)*((_QWORD *)v67 + 3);
                    if (v73 != v74)
                    {
                      v75 = v581;
                      if (v581)
                      {
                        do
                        {
                          v76 = *v73;
                          v77 = &v581;
                          v78 = (unsigned __int8 *)v75;
                          do
                          {
                            v79 = v78;
                            v80 = v77;
                            v81 = v78[25];
                            v82 = *v73;
                            if (v81 != v76)
                              goto LABEL_224;
                            v81 = v79[26];
                            v82 = v73[1];
                            if (v81 != v82)
                              goto LABEL_224;
                            v81 = v79[27];
                            v82 = v73[2];
                            if (v81 != v82)
                              goto LABEL_224;
                            v81 = v79[28];
                            v82 = v73[3];
                            if (v81 != v82)
                              goto LABEL_224;
                            v81 = v79[29];
                            v82 = v73[4];
                            if (v81 != v82)
                              goto LABEL_224;
                            v81 = v79[30];
                            v82 = v73[5];
                            if (v81 != v82)
                              goto LABEL_224;
                            v81 = v79[31];
                            v82 = v73[6];
                            if (v81 != v82)
                              goto LABEL_224;
                            v81 = v79[32];
                            v82 = v73[7];
                            if (v81 != v82)
                              goto LABEL_224;
                            v81 = v79[33];
                            v82 = v73[8];
                            if (v81 != v82)
                              goto LABEL_224;
                            v81 = v79[34];
                            v82 = v73[9];
                            if (v81 != v82)
                              goto LABEL_224;
                            v81 = v79[35];
                            v82 = v73[10];
                            if (v81 != v82)
                              goto LABEL_224;
                            v81 = v79[36];
                            v82 = v73[11];
                            if (v81 != v82)
                              goto LABEL_224;
                            v81 = v79[37];
                            v82 = v73[12];
                            if (v81 != v82)
                              goto LABEL_224;
                            v81 = v79[38];
                            v82 = v73[13];
                            if (v81 == v82
                              && (v81 = v79[39], v82 = v73[14], v81 == v82)
                              && (v81 = v79[40], v82 = v73[15], v81 == v82))
                            {
                              v83 = 0;
                              v84 = v79;
                              v77 = (uint64_t **)v79;
                            }
                            else
                            {
LABEL_224:
                              v85 = v81 >= v82;
                              if (v81 < v82)
                                v84 = v79 + 8;
                              else
                                v84 = v79;
                              v83 = !v85;
                              if (v85)
                                v77 = (uint64_t **)v79;
                              else
                                v77 = v80;
                            }
                            v78 = *(unsigned __int8 **)v84;
                          }
                          while (v78);
                          if (v77 != &v581)
                          {
                            v86 = v83 ? (unsigned __int8 *)v80 : v79;
                            v87 = v86[25];
                            if (v76 == v87)
                            {
                              v88 = v83 ? (unsigned __int8 *)v80 : v79;
                              v76 = v73[1];
                              v87 = v88[26];
                              if (v76 == v87)
                              {
                                v89 = v83 ? (unsigned __int8 *)v80 : v79;
                                v76 = v73[2];
                                v87 = v89[27];
                                if (v76 == v87)
                                {
                                  v90 = v83 ? (unsigned __int8 *)v80 : v79;
                                  v76 = v73[3];
                                  v87 = v90[28];
                                  if (v76 == v87)
                                  {
                                    v91 = v83 ? (unsigned __int8 *)v80 : v79;
                                    v76 = v73[4];
                                    v87 = v91[29];
                                    if (v76 == v87)
                                    {
                                      v92 = v83 ? (unsigned __int8 *)v80 : v79;
                                      v76 = v73[5];
                                      v87 = v92[30];
                                      if (v76 == v87)
                                      {
                                        v93 = v83 ? (unsigned __int8 *)v80 : v79;
                                        v76 = v73[6];
                                        v87 = v93[31];
                                        if (v76 == v87)
                                        {
                                          v94 = v83 ? (unsigned __int8 *)v80 : v79;
                                          v76 = v73[7];
                                          v87 = v94[32];
                                          if (v76 == v87)
                                          {
                                            v95 = v83 ? (unsigned __int8 *)v80 : v79;
                                            v76 = v73[8];
                                            v87 = v95[33];
                                            if (v76 == v87)
                                            {
                                              v96 = v83 ? (unsigned __int8 *)v80 : v79;
                                              v76 = v73[9];
                                              v87 = v96[34];
                                              if (v76 == v87)
                                              {
                                                v97 = v83 ? (unsigned __int8 *)v80 : v79;
                                                v76 = v73[10];
                                                v87 = v97[35];
                                                if (v76 == v87)
                                                {
                                                  v98 = v83 ? (unsigned __int8 *)v80 : v79;
                                                  v76 = v73[11];
                                                  v87 = v98[36];
                                                  if (v76 == v87)
                                                  {
                                                    v99 = v83 ? (unsigned __int8 *)v80 : v79;
                                                    v76 = v73[12];
                                                    v87 = v99[37];
                                                    if (v76 == v87)
                                                    {
                                                      v100 = v83 ? (unsigned __int8 *)v80 : v79;
                                                      v76 = v73[13];
                                                      v87 = v100[38];
                                                      if (v76 == v87)
                                                      {
                                                        v101 = v83 ? (unsigned __int8 *)v80 : v79;
                                                        v76 = v73[14];
                                                        v87 = v101[39];
                                                        if (v76 == v87)
                                                        {
                                                          if (v83)
                                                            v79 = (unsigned __int8 *)v80;
                                                          v76 = v73[15];
                                                          v87 = v79[40];
                                                          if (v76 == v87)
                                                            goto LABEL_204;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            if (v76 >= v87)
LABEL_204:
                              *((_BYTE *)v77 + 41) = 1;
                          }
                          v73 += 16;
                        }
                        while (v73 != v74);
                      }
                    }
                  }
                }
              }
              v64 += 16;
            }
            while (v64 != v63);
          }
        }
        v102 = (_QWORD *)v60[1];
        if (v102)
        {
          do
          {
            v103 = v102;
            v102 = (_QWORD *)*v102;
          }
          while (v102);
        }
        else
        {
          do
          {
            v103 = (_QWORD *)v60[2];
            v59 = *v103 == (_QWORD)v60;
            v60 = v103;
          }
          while (!v59);
        }
        v60 = v103;
      }
      while (v103 != __src);
    }
    if (*((_BYTE *)a4 + 4))
    {
      v104 = (_QWORD *)v561[3];
      if (v104 != v561 + 4)
      {
        do
        {
          v106 = (unsigned __int8 *)v104[9];
          v105 = (unsigned __int8 *)v104[10];
          if (v106 != v105)
          {
            v107 = *(unsigned __int8 **)(v28 + 104);
            do
            {
              v108 = *(unsigned __int8 **)(v28 + 96);
              v109 = v107;
              if (v107 != v108)
              {
                v110 = 0xCCCCCCCCCCCCCCCDLL * ((v107 - v108) >> 3);
                v109 = *(unsigned __int8 **)(v28 + 96);
                do
                {
                  v111 = v110 >> 1;
                  v112 = &v109[40 * (v110 >> 1)];
                  v113 = *v112;
                  v114 = *v106;
                  if (v113 != v114)
                    goto LABEL_334;
                  v113 = v112[1];
                  v114 = v106[1];
                  if (v113 != v114)
                    goto LABEL_334;
                  v113 = v112[2];
                  v114 = v106[2];
                  if (v113 != v114)
                    goto LABEL_334;
                  v113 = v112[3];
                  v114 = v106[3];
                  if (v113 != v114)
                    goto LABEL_334;
                  v113 = v112[4];
                  v114 = v106[4];
                  if (v113 != v114)
                    goto LABEL_334;
                  v113 = v112[5];
                  v114 = v106[5];
                  if (v113 != v114)
                    goto LABEL_334;
                  v113 = v112[6];
                  v114 = v106[6];
                  if (v113 != v114)
                    goto LABEL_334;
                  v113 = v112[7];
                  v114 = v106[7];
                  if (v113 != v114)
                    goto LABEL_334;
                  v113 = v112[8];
                  v114 = v106[8];
                  if (v113 != v114)
                    goto LABEL_334;
                  v113 = v112[9];
                  v114 = v106[9];
                  if (v113 != v114)
                    goto LABEL_334;
                  v113 = v112[10];
                  v114 = v106[10];
                  if (v113 != v114)
                    goto LABEL_334;
                  v113 = v112[11];
                  v114 = v106[11];
                  if (v113 != v114)
                    goto LABEL_334;
                  v113 = v112[12];
                  v114 = v106[12];
                  if (v113 != v114
                    || (v113 = v112[13], v114 = v106[13], v113 != v114)
                    || (v113 = v112[14], v114 = v106[14], v113 != v114)
                    || (v113 = v112[15], v114 = v106[15], v113 != v114))
                  {
LABEL_334:
                    if (v113 < v114)
                    {
                      v111 = v110 + ~v111;
                      v109 = v112 + 40;
                    }
                  }
                  v110 = v111;
                }
                while (v111);
              }
              if (v107 != v109)
              {
                if ((char)sub_22319835C(v109, v106) < 0)
                {
                  v107 = *(unsigned __int8 **)(v28 + 104);
                }
                else
                {
                  v115 = sub_22319835C(v106, v109);
                  v107 = *(unsigned __int8 **)(v28 + 104);
                  if ((v115 & 0x80000000) == 0 && v109 != v107)
                  {
                    v116 = (unsigned __int8 *)*((_QWORD *)v109 + 2);
                    v117 = (unsigned __int8 *)*((_QWORD *)v109 + 3);
                    if (v116 != v117)
                    {
                      v118 = v581;
                      if (v581)
                      {
                        do
                        {
                          v119 = *v116;
                          v120 = &v581;
                          v121 = v118;
                          do
                          {
                            while (1)
                            {
                              v125 = (uint64_t **)v121;
                              v126 = v120;
                              v127 = *((unsigned __int8 *)v121 + 25);
                              v128 = *v116;
                              if (v127 != v119)
                                break;
                              v127 = *((unsigned __int8 *)v125 + 26);
                              v128 = v116[1];
                              if (v127 != v128)
                                break;
                              v127 = *((unsigned __int8 *)v125 + 27);
                              v128 = v116[2];
                              if (v127 != v128)
                                break;
                              v127 = *((unsigned __int8 *)v125 + 28);
                              v128 = v116[3];
                              if (v127 != v128)
                                break;
                              v127 = *((unsigned __int8 *)v125 + 29);
                              v128 = v116[4];
                              if (v127 != v128)
                                break;
                              v127 = *((unsigned __int8 *)v125 + 30);
                              v128 = v116[5];
                              if (v127 != v128)
                                break;
                              v127 = *((unsigned __int8 *)v125 + 31);
                              v128 = v116[6];
                              if (v127 != v128)
                                break;
                              v127 = *((unsigned __int8 *)v125 + 32);
                              v128 = v116[7];
                              if (v127 != v128)
                                break;
                              v127 = *((unsigned __int8 *)v125 + 33);
                              v128 = v116[8];
                              if (v127 != v128)
                                break;
                              v127 = *((unsigned __int8 *)v125 + 34);
                              v128 = v116[9];
                              if (v127 != v128)
                                break;
                              v127 = *((unsigned __int8 *)v125 + 35);
                              v128 = v116[10];
                              if (v127 != v128)
                                break;
                              v127 = *((unsigned __int8 *)v125 + 36);
                              v128 = v116[11];
                              if (v127 != v128)
                                break;
                              v127 = *((unsigned __int8 *)v125 + 37);
                              v128 = v116[12];
                              if (v127 != v128)
                                break;
                              v127 = *((unsigned __int8 *)v125 + 38);
                              v128 = v116[13];
                              if (v127 != v128)
                                break;
                              v127 = *((unsigned __int8 *)v125 + 39);
                              v128 = v116[14];
                              if (v127 != v128)
                                break;
                              v127 = *((unsigned __int8 *)v125 + 40);
                              v128 = v116[15];
                              if (v127 != v128)
                                break;
                              v124 = 0;
                              v120 = v125;
                              v121 = *v125;
                              if (!*v125)
                                goto LABEL_373;
                            }
                            v122 = v127 >= v128;
                            if (v127 < v128)
                              v123 = v125 + 1;
                            else
                              v123 = v125;
                            v124 = !v122;
                            if (v122)
                              v120 = v125;
                            else
                              v120 = v126;
                            v121 = *v123;
                          }
                          while (v121);
LABEL_373:
                          if (v120 != &v581)
                          {
                            v129 = v124 ? v126 : v125;
                            v130 = *((unsigned __int8 *)v129 + 25);
                            if (v119 == v130)
                            {
                              v131 = v124 ? v126 : v125;
                              v119 = v116[1];
                              v130 = *((unsigned __int8 *)v131 + 26);
                              if (v119 == v130)
                              {
                                v132 = v124 ? v126 : v125;
                                v119 = v116[2];
                                v130 = *((unsigned __int8 *)v132 + 27);
                                if (v119 == v130)
                                {
                                  v133 = v124 ? v126 : v125;
                                  v119 = v116[3];
                                  v130 = *((unsigned __int8 *)v133 + 28);
                                  if (v119 == v130)
                                  {
                                    v134 = v124 ? v126 : v125;
                                    v119 = v116[4];
                                    v130 = *((unsigned __int8 *)v134 + 29);
                                    if (v119 == v130)
                                    {
                                      v135 = v124 ? v126 : v125;
                                      v119 = v116[5];
                                      v130 = *((unsigned __int8 *)v135 + 30);
                                      if (v119 == v130)
                                      {
                                        v136 = v124 ? v126 : v125;
                                        v119 = v116[6];
                                        v130 = *((unsigned __int8 *)v136 + 31);
                                        if (v119 == v130)
                                        {
                                          v137 = v124 ? v126 : v125;
                                          v119 = v116[7];
                                          v130 = *((unsigned __int8 *)v137 + 32);
                                          if (v119 == v130)
                                          {
                                            v138 = v124 ? v126 : v125;
                                            v119 = v116[8];
                                            v130 = *((unsigned __int8 *)v138 + 33);
                                            if (v119 == v130)
                                            {
                                              v139 = v124 ? v126 : v125;
                                              v119 = v116[9];
                                              v130 = *((unsigned __int8 *)v139 + 34);
                                              if (v119 == v130)
                                              {
                                                v140 = v124 ? v126 : v125;
                                                v119 = v116[10];
                                                v130 = *((unsigned __int8 *)v140 + 35);
                                                if (v119 == v130)
                                                {
                                                  v141 = v124 ? v126 : v125;
                                                  v119 = v116[11];
                                                  v130 = *((unsigned __int8 *)v141 + 36);
                                                  if (v119 == v130)
                                                  {
                                                    v142 = v124 ? v126 : v125;
                                                    v119 = v116[12];
                                                    v130 = *((unsigned __int8 *)v142 + 37);
                                                    if (v119 == v130)
                                                    {
                                                      v143 = v124 ? v126 : v125;
                                                      v119 = v116[13];
                                                      v130 = *((unsigned __int8 *)v143 + 38);
                                                      if (v119 == v130)
                                                      {
                                                        v144 = v124 ? v126 : v125;
                                                        v119 = v116[14];
                                                        v130 = *((unsigned __int8 *)v144 + 39);
                                                        if (v119 == v130)
                                                        {
                                                          if (v124)
                                                            v125 = v126;
                                                          v119 = v116[15];
                                                          v130 = *((unsigned __int8 *)v125 + 40);
                                                          if (v119 == v130)
                                                            goto LABEL_343;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            if (v119 >= v130)
LABEL_343:
                              *((_BYTE *)v120 + 41) = 1;
                          }
                          v116 += 16;
                        }
                        while (v116 != v117);
                      }
                    }
                  }
                }
              }
              v106 += 16;
            }
            while (v106 != v105);
          }
          v145 = (_QWORD *)v104[1];
          if (v145)
          {
            do
            {
              v146 = v145;
              v145 = (_QWORD *)*v145;
            }
            while (v145);
          }
          else
          {
            do
            {
              v146 = (_QWORD *)v104[2];
              v59 = *v146 == (_QWORD)v104;
              v104 = v146;
            }
            while (!v59);
          }
          v104 = v146;
        }
        while (v146 != v561 + 4);
      }
    }
  }
  v147 = a4;
  if (!*((_BYTE *)a4 + 2))
    goto LABEL_1020;
  LOBYTE(__p[0]) = 0;
  v579 = 0;
  if (!*((_BYTE *)a4 + 5))
  {
    v594[0] = v555;
    v594[1] = 0;
    v596 = 0;
    v595 = 0;
    LODWORD(v597) = 728337592;
    kdebug_trace();
    v148 = (uint64_t)v27[15];
    if (!v148)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/RoomAssociations.cpp", 409, (uint64_t)"room.boundary", 13, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v148 = (uint64_t)v27[15];
    }
    sub_223EC3B7C(v148, 0, (unint64_t *)v615);
    *(_OWORD *)v602 = *(_OWORD *)v615;
    v602[2] = *(void **)&v615[16];
    v603 = 1;
    if (v579 == 1)
    {
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = *(_OWORD *)v602;
      v578 = v602[2];
      memset(v602, 0, sizeof(v602));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v602;
      v578 = v602[2];
      memset(v602, 0, sizeof(v602));
      v579 = 1;
    }
    kdebug_trace();
  }
  v149 = v580;
  if (v580 == &v581)
    goto LABEL_1017;
  while (2)
  {
    v150 = *((unsigned __int8 *)v149 + 25);
    v151 = *((unsigned __int8 *)v149 + 26);
    v152 = *((unsigned __int8 *)v149 + 27);
    v153 = *((unsigned __int8 *)v149 + 28);
    v154 = *((unsigned __int8 *)v149 + 29);
    v155 = *((unsigned __int8 *)v149 + 30);
    v156 = *((unsigned __int8 *)v149 + 31);
    v157 = *((unsigned __int8 *)v149 + 32);
    v158 = *((unsigned __int8 *)v149 + 33);
    v159 = *((unsigned __int8 *)v149 + 34);
    v160 = *((unsigned __int8 *)v149 + 35);
    v161 = *((unsigned __int8 *)v149 + 36);
    v162 = *((unsigned __int8 *)v149 + 37);
    v163 = *((unsigned __int8 *)v149 + 38);
    v164 = *((unsigned __int8 *)v149 + 39);
    v165 = *((unsigned __int8 *)v149 + 40);
    if (*((_BYTE *)v147 + 3) && !*((_BYTE *)v149 + 41))
      goto LABEL_784;
    v166 = *(uint64_t ***)(a2 + 48);
    if (!v166)
LABEL_1036:
      sub_223198218("map::at:  key not found");
    while (2)
    {
      while (2)
      {
        v167 = *((unsigned __int8 *)v166 + 32);
        if (v150 != v167)
        {
          v170 = *((unsigned __int8 *)v149 + 25);
          if (v150 < v167)
            goto LABEL_467;
LABEL_511:
          if (v167 >= v170)
            goto LABEL_514;
          v166 = (uint64_t **)v166[1];
          if (!v166)
            goto LABEL_1036;
          continue;
        }
        break;
      }
      v167 = *((unsigned __int8 *)v166 + 33);
      if (v151 != v167)
      {
        v170 = *((unsigned __int8 *)v149 + 26);
        if (v151 < v167)
          goto LABEL_467;
        goto LABEL_511;
      }
      v167 = *((unsigned __int8 *)v166 + 34);
      if (v152 != v167)
      {
        v170 = *((unsigned __int8 *)v149 + 27);
        if (v152 < v167)
          goto LABEL_467;
        goto LABEL_511;
      }
      v167 = *((unsigned __int8 *)v166 + 35);
      if (v153 != v167)
      {
        v170 = *((unsigned __int8 *)v149 + 28);
        if (v153 < v167)
          goto LABEL_467;
        goto LABEL_511;
      }
      v167 = *((unsigned __int8 *)v166 + 36);
      if (v154 != v167)
      {
        v170 = *((unsigned __int8 *)v149 + 29);
        if (v154 < v167)
          goto LABEL_467;
        goto LABEL_511;
      }
      v167 = *((unsigned __int8 *)v166 + 37);
      if (v155 != v167)
      {
        v170 = *((unsigned __int8 *)v149 + 30);
        if (v155 < v167)
          goto LABEL_467;
        goto LABEL_511;
      }
      v167 = *((unsigned __int8 *)v166 + 38);
      if (v156 != v167)
      {
        v170 = *((unsigned __int8 *)v149 + 31);
        if (v156 < v167)
          goto LABEL_467;
        goto LABEL_511;
      }
      v167 = *((unsigned __int8 *)v166 + 39);
      if (v157 != v167)
      {
        v170 = *((unsigned __int8 *)v149 + 32);
        if (v157 < v167)
          goto LABEL_467;
        goto LABEL_511;
      }
      v167 = *((unsigned __int8 *)v166 + 40);
      if (v158 != v167)
      {
        v170 = *((unsigned __int8 *)v149 + 33);
        if (v158 < v167)
          goto LABEL_467;
        goto LABEL_511;
      }
      v167 = *((unsigned __int8 *)v166 + 41);
      if (v159 != v167)
      {
        v170 = *((unsigned __int8 *)v149 + 34);
        if (v159 < v167)
          goto LABEL_467;
        goto LABEL_511;
      }
      v168 = *((unsigned __int8 *)v166 + 42);
      v169 = *((unsigned __int8 *)v149 + 35);
      if (v160 != v168)
        goto LABEL_484;
      v168 = *((unsigned __int8 *)v166 + 43);
      v169 = *((unsigned __int8 *)v149 + 36);
      if (v161 != v168)
        goto LABEL_484;
      v168 = *((unsigned __int8 *)v166 + 44);
      v169 = *((unsigned __int8 *)v149 + 37);
      if (v162 != v168
        || (v168 = *((unsigned __int8 *)v166 + 45), v169 = *((unsigned __int8 *)v149 + 38), v163 != v168)
        || (v168 = *((unsigned __int8 *)v166 + 46), v169 = *((unsigned __int8 *)v149 + 39), v164 != v168)
        || (v168 = *((unsigned __int8 *)v166 + 47), v169 = *((unsigned __int8 *)v149 + 40), v165 != v168))
      {
LABEL_484:
        if (v169 < v168)
        {
LABEL_467:
          v166 = (uint64_t **)*v166;
          if (!v166)
            goto LABEL_1036;
          continue;
        }
      }
      break;
    }
    v167 = *((unsigned __int8 *)v166 + 42);
    v170 = *((unsigned __int8 *)v149 + 35);
    if (v167 != v160)
      goto LABEL_511;
    v167 = *((unsigned __int8 *)v166 + 43);
    v170 = *((unsigned __int8 *)v149 + 36);
    if (v167 != v161)
      goto LABEL_511;
    v167 = *((unsigned __int8 *)v166 + 44);
    v170 = *((unsigned __int8 *)v149 + 37);
    if (v167 != v162)
      goto LABEL_511;
    v167 = *((unsigned __int8 *)v166 + 45);
    v170 = *((unsigned __int8 *)v149 + 38);
    if (v167 != v163)
      goto LABEL_511;
    v167 = *((unsigned __int8 *)v166 + 46);
    v170 = *((unsigned __int8 *)v149 + 39);
    if (v167 != v164)
      goto LABEL_511;
    v167 = *((unsigned __int8 *)v166 + 47);
    v170 = *((unsigned __int8 *)v149 + 40);
    if (v167 != v165)
      goto LABEL_511;
LABEL_514:
    if (!v166[6]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/RoomAssociations.cpp", 601, (uint64_t)"gp", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_1037;
    }
    v171 = v27[15];
    if (v171)
      goto LABEL_519;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/RoomAssociations.cpp", 602, (uint64_t)"current_room.boundary", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
LABEL_1037:
      abort();
    }
    v171 = v27[15];
LABEL_519:
    v172 = v579;
    v173 = v166[6];
    __srca = v147[2];
    if (v579)
      v174 = __p;
    else
      v174 = 0;
    v612 = 0u;
    v613 = 0u;
    v614 = 728337600;
    kdebug_trace();
    if (!*((_BYTE *)v173 + 356))
    {
      v235 = atomic_load((unsigned __int8 *)&qword_2557892F0);
      if ((v235 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
      {
        __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
        __cxa_guard_release(&qword_2557892F0);
      }
      sub_2233CFA44(v615);
      if (*(char *)(*(_QWORD *)v615 + 39) < 0)
      {
        v236 = *(const void **)(*(_QWORD *)v615 + 16);
        v237 = *(_QWORD *)(*(_QWORD *)v615 + 24);
      }
      else
      {
        v236 = (const void *)(*(_QWORD *)v615 + 16);
        v237 = *(unsigned __int8 *)(*(_QWORD *)v615 + 39);
      }
      sub_223195728((uint64_t)&unk_255789280, v236, v237, "Global plane %.13s does not have oriented bounding box when computing room associations.", 0x58uLL);
      sub_2233CFB38(&v593);
      if (**(int **)(v593 + 56) > 5)
        goto LABEL_782;
      v241 = *(unsigned __int8 *)(v593 + 72);
      v242 = sub_22322F254(v593, "OSLogSurrogateAppender", 1, 0);
      v243 = v242;
      if (!v241 && !v242)
        goto LABEL_782;
      *(_QWORD *)&v604 = &v593;
      *((std::chrono::steady_clock::time_point *)&v604 + 1) = std::chrono::steady_clock::now();
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v606 = 5;
      v607 = "unknown file";
      v608 = 317;
      v609 = "unknown function";
      v610 = 0;
      v611 = 0;
      sub_2245664AC((unsigned __int8 *)v173, v602);
      v244 = *(_QWORD *)v604;
      if (*(char *)(*(_QWORD *)v604 + 39) < 0)
      {
        v246 = *(const char **)(v244 + 16);
        v245 = *(_QWORD *)(v244 + 24);
        v558 = *(_QWORD *)v604 + 16;
        v564 = *(_QWORD *)v604;
        v254 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v254 & 1) != 0)
          goto LABEL_567;
      }
      else
      {
        v245 = *(unsigned __int8 *)(*(_QWORD *)v604 + 39);
        v246 = (const char *)(*(_QWORD *)v604 + 16);
        v558 = (uint64_t)v246;
        v564 = *(_QWORD *)v604;
        v247 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v247 & 1) != 0)
          goto LABEL_567;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v594);
        sub_223199C58("com.apple.cv3d", (unint64_t)v594, &xmmword_255788F40);
        if ((_BYTE)v596 && SHIBYTE(v595) < 0)
          operator delete(v594[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_567:
      if (byte_255788F57 >= 0)
        v255 = (const char *)&xmmword_255788F40;
      else
        v255 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v256 = byte_255788F57;
      else
        v256 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v615 = os_log_create(v255, v246);
      if (v256 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      __srcb = v246;
      if (v256 >= 0x17)
      {
        v550 = v245;
        v258 = v173;
        v259 = v241;
        v260 = v243;
        v261 = (v256 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v256 | 7) != 0x17)
          v261 = v256 | 7;
        v262 = v261 + 1;
        v257 = operator new(v261 + 1);
        *(_QWORD *)&v615[16] = v256;
        *(_QWORD *)&v616 = v262 | 0x8000000000000000;
        *(_QWORD *)&v615[8] = v257;
        v243 = v260;
        v241 = v259;
        v173 = v258;
        v245 = v550;
      }
      else
      {
        BYTE7(v616) = v256;
        v257 = &v615[8];
        if (!v256)
        {
LABEL_581:
          v257[v256] = 0;
          BYTE8(v616) = 1;
          if (v245 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v245 >= 0x17)
          {
            v264 = (v245 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v245 | 7) != 0x17)
              v264 = v245 | 7;
            v265 = v264 + 1;
            v263 = (char *)operator new(v264 + 1);
            v618 = v245;
            v619 = v265 | 0x8000000000000000;
            v617 = v263;
          }
          else
          {
            HIBYTE(v619) = v245;
            v263 = (char *)&v617;
            if (!v245)
            {
LABEL_589:
              v263[v245] = 0;
              v620 = 1;
              v266 = *(NSObject **)v615;
              if (SHIBYTE(v619) < 0)
                operator delete(v617);
              if (BYTE8(v616) && SBYTE7(v616) < 0)
                operator delete(*(void **)&v615[8]);
              if (*(_QWORD *)v615)
                os_release(*(void **)v615);
              if (!v243 || !*(_QWORD *)(v243 + 24))
              {
                os_log_type_enabled(v266, OS_LOG_TYPE_ERROR);
                *(_QWORD *)v615 = 0xD04100202;
                *(_WORD *)&v615[8] = 2080;
                *(_QWORD *)&v615[10] = v602;
                v275 = (void *)_os_log_send_and_compose_impl();
                if (v275)
                  free(v275);
                goto LABEL_706;
              }
              v267 = _os_log_pack_size();
              v268 = (std::__shared_weak_count_vtbl *)operator new(v267, (std::align_val_t)8uLL);
              v269 = (std::__shared_weak_count *)operator new();
              v269->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v269->__shared_owners_ = 0;
              v269->__shared_weak_owners_ = 0;
              v269[1].__vftable = v268;
              v594[0] = v268;
              v594[1] = v268;
              v595 = v269;
              v596 = 0;
              v597 = 0;
              v270 = strlen((const char *)v602);
              if (v270 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v271 = v270;
              v272 = v243;
              if (v270 >= 0x17)
              {
                v297 = (v270 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v270 | 7) != 0x17)
                  v297 = v270 | 7;
                v298 = v297 + 1;
                v273 = (_BYTE **)operator new(v297 + 1);
                *((_QWORD *)&v599 + 1) = v298 | 0x8000000000000000;
                v598 = v273;
                *(_QWORD *)&v599 = v271;
              }
              else
              {
                HIBYTE(v599) = v270;
                v273 = &v598;
                if (!v270)
                {
                  v274 = v241;
                  goto LABEL_647;
                }
              }
              v274 = v241;
              memcpy(v273, v602, v271);
LABEL_647:
              *((_BYTE *)v273 + v271) = 0;
              v299 = (uint64_t)v598;
              category[0] = (char *)v599;
              *(char **)((char *)category + 7) = *(char **)((char *)&v599 + 7);
              v300 = HIBYTE(v599);
              v301 = (char *)operator new(0x38uLL);
              *((_QWORD *)v301 + 1) = 0;
              *((_QWORD *)v301 + 2) = 0;
              *((_QWORD *)v301 + 3) = off_24EC1FA48;
              *(_QWORD *)v301 = &off_24EC1F9F8;
              v302 = category[0];
              *((_QWORD *)v301 + 4) = v299;
              *((_QWORD *)v301 + 5) = v302;
              *(char **)(v301 + 47) = *(char **)((char *)category + 7);
              v301[55] = v300;
              memset(category, 0, 15);
              v303 = v597;
              v596 = v301 + 24;
              v597 = (std::__shared_weak_count *)v301;
              if (v303)
              {
                p_shared_owners = (unint64_t *)&v303->__shared_owners_;
                do
                  v305 = __ldaxr(p_shared_owners);
                while (__stlxr(v305 - 1, p_shared_owners));
                if (!v305)
                {
                  ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                  std::__shared_weak_count::__release_weak(v303);
                }
              }
              *(_OWORD *)v615 = *(_OWORD *)v594;
              v306 = v596;
              *(_QWORD *)&v615[16] = v595;
              if (v595)
              {
                v307 = (unint64_t *)&v595->__shared_owners_;
                do
                  v308 = __ldxr(v307);
                while (__stxr(v308 + 1, v307));
              }
              v309 = v597;
              *(_QWORD *)&v616 = v306;
              *((_QWORD *)&v616 + 1) = v597;
              if (v597)
              {
                v310 = (unint64_t *)&v597->__shared_owners_;
                do
                  v311 = __ldxr(v310);
                while (__stxr(v311 + 1, v310));
                v617 = v306;
                do
                  v312 = __ldaxr(v310);
                while (__stlxr(v312 - 1, v310));
                if (!v312)
                {
                  ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
                  std::__shared_weak_count::__release_weak(v309);
                }
              }
              else
              {
                v617 = v306;
              }
              v313 = v595;
              if (v595)
              {
                v314 = (unint64_t *)&v595->__shared_owners_;
                do
                  v315 = __ldaxr(v314);
                while (__stlxr(v315 - 1, v314));
                if (!v315)
                {
                  ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
                  std::__shared_weak_count::__release_weak(v313);
                }
              }
              v316 = *(_QWORD *)v615;
              if (v617[31] >= 0)
                v317 = v617 + 8;
              else
                v317 = (char *)*((_QWORD *)v617 + 1);
              v318 = _os_log_pack_fill();
              *(_DWORD *)v318 = 68157954;
              *(_DWORD *)(v318 + 4) = 13;
              *(_WORD *)(v318 + 8) = 2080;
              *(_QWORD *)(v318 + 10) = v317;
              v319 = (char *)operator new();
              v320 = *(unsigned __int8 *)(v564 + 39);
              v321 = v558;
              if ((v320 & 0x80u) != 0)
              {
                v321 = *(_QWORD *)(v564 + 16);
                v320 = *(_QWORD *)(v564 + 24);
              }
              *(_QWORD *)v319 = v316;
              *(_OWORD *)(v319 + 8) = *(_OWORD *)&v615[8];
              *(_QWORD *)&v615[8] = 0;
              *(_QWORD *)&v615[16] = 0;
              *(_OWORD *)(v319 + 24) = v616;
              v616 = 0uLL;
              *((_QWORD *)v319 + 5) = v321;
              *((_QWORD *)v319 + 6) = v320;
              v319[56] = 16;
              v598 = 0;
              v594[0] = v319;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v272 + 24) + 40))(*(_QWORD *)(v272 + 24), v594);
              v241 = v274;
              v322 = v594[0];
              v594[0] = 0;
              if (v322)
              {
                v323 = (std::__shared_weak_count *)*((_QWORD *)v322 + 4);
                if (v323)
                {
                  v324 = (unint64_t *)&v323->__shared_owners_;
                  do
                    v325 = __ldaxr(v324);
                  while (__stlxr(v325 - 1, v324));
                  if (!v325)
                  {
                    ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
                    std::__shared_weak_count::__release_weak(v323);
                  }
                }
                v326 = (std::__shared_weak_count *)*((_QWORD *)v322 + 2);
                if (v326)
                {
                  v327 = (unint64_t *)&v326->__shared_owners_;
                  do
                    v328 = __ldaxr(v327);
                  while (__stlxr(v328 - 1, v327));
                  if (!v328)
                  {
                    ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                    std::__shared_weak_count::__release_weak(v326);
                  }
                }
                MEMORY[0x227684CE8](v322, 0x10F0C40B62ED6C6);
                v329 = (uint64_t)v598;
                v598 = 0;
                if (v329)
                {
                  v330 = *(std::__shared_weak_count **)(v329 + 32);
                  if (v330)
                  {
                    v331 = (unint64_t *)&v330->__shared_owners_;
                    do
                      v332 = __ldaxr(v331);
                    while (__stlxr(v332 - 1, v331));
                    if (!v332)
                    {
                      ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
                      std::__shared_weak_count::__release_weak(v330);
                    }
                  }
                  v333 = *(std::__shared_weak_count **)(v329 + 16);
                  if (v333)
                  {
                    v334 = (unint64_t *)&v333->__shared_owners_;
                    do
                      v335 = __ldaxr(v334);
                    while (__stlxr(v335 - 1, v334));
                    if (!v335)
                    {
                      ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
                      std::__shared_weak_count::__release_weak(v333);
                    }
                  }
                  MEMORY[0x227684CE8](v329, 0x10F0C40B62ED6C6);
                }
              }
              v336 = (std::__shared_weak_count *)*((_QWORD *)&v616 + 1);
              if (*((_QWORD *)&v616 + 1))
              {
                v337 = (unint64_t *)(*((_QWORD *)&v616 + 1) + 8);
                do
                  v338 = __ldaxr(v337);
                while (__stlxr(v338 - 1, v337));
                if (!v338)
                {
                  ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
                  std::__shared_weak_count::__release_weak(v336);
                }
              }
              v339 = *(std::__shared_weak_count **)&v615[16];
              if (*(_QWORD *)&v615[16])
              {
                v340 = (unint64_t *)(*(_QWORD *)&v615[16] + 8);
                do
                  v341 = __ldaxr(v340);
                while (__stlxr(v341 - 1, v340));
                if (!v341)
                {
                  ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
                  std::__shared_weak_count::__release_weak(v339);
                }
              }
LABEL_706:
              if (v241)
              {
                sub_2245664AC((unsigned __int8 *)v173, v615);
                sub_22322C138((uint64_t)&v604, "Global plane %.13s does not have oriented bounding box when computing room associations.", v615);
                sub_223182C08((uint64_t)&v604);
              }
              sub_223182C08((uint64_t)&v604);
              v342 = v611;
              if (!v611)
                goto LABEL_782;
              v343 = (unint64_t *)&v611->__shared_owners_;
              do
                v344 = __ldaxr(v343);
              while (__stlxr(v344 - 1, v343));
LABEL_780:
              if (!v344)
              {
                ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
                std::__shared_weak_count::__release_weak(v342);
              }
              goto LABEL_782;
            }
          }
          memmove(v263, __srcb, v245);
          goto LABEL_589;
        }
      }
      memmove(v257, v255, v256);
      goto LABEL_581;
    }
    if (!*((_BYTE *)v173 + 384))
    {
      v238 = atomic_load((unsigned __int8 *)&qword_2557892F0);
      if ((v238 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
      {
        __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
        __cxa_guard_release(&qword_2557892F0);
      }
      sub_2233CFA44(v615);
      if (*(char *)(*(_QWORD *)v615 + 39) < 0)
      {
        v239 = *(const void **)(*(_QWORD *)v615 + 16);
        v240 = *(_QWORD *)(*(_QWORD *)v615 + 24);
      }
      else
      {
        v239 = (const void *)(*(_QWORD *)v615 + 16);
        v240 = *(unsigned __int8 *)(*(_QWORD *)v615 + 39);
      }
      sub_223195728((uint64_t)&unk_255789280, v239, v240, "Global plane %.13s does not have convex hull when computing room associations.", 0x4EuLL);
      sub_2233CFB38(&v593);
      if (**(int **)(v593 + 56) > 5)
        goto LABEL_782;
      v248 = *(unsigned __int8 *)(v593 + 72);
      v249 = sub_22322F254(v593, "OSLogSurrogateAppender", 1, 0);
      v250 = v249;
      if (!v248 && !v249)
        goto LABEL_782;
      *(_QWORD *)&v604 = &v593;
      *((std::chrono::steady_clock::time_point *)&v604 + 1) = std::chrono::steady_clock::now();
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v606 = 5;
      v607 = "unknown file";
      v608 = 323;
      v609 = "unknown function";
      v610 = 0;
      v611 = 0;
      sub_2245664AC((unsigned __int8 *)v173, v602);
      v251 = *(_QWORD *)v604;
      if (*(char *)(*(_QWORD *)v604 + 39) < 0)
      {
        v253 = *(const char **)(v251 + 16);
        v252 = *(_QWORD *)(v251 + 24);
      }
      else
      {
        v252 = *(unsigned __int8 *)(*(_QWORD *)v604 + 39);
        v253 = (const char *)(*(_QWORD *)v604 + 16);
      }
      v559 = *(_QWORD *)v604 + 16;
      v565 = *(_QWORD *)v604;
      v276 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v276 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v594);
        sub_223199C58("com.apple.cv3d", (unint64_t)v594, &xmmword_255788F40);
        if ((_BYTE)v596 && SHIBYTE(v595) < 0)
          operator delete(v594[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v277 = (const char *)&xmmword_255788F40;
      else
        v277 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v278 = byte_255788F57;
      else
        v278 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v615 = os_log_create(v277, v253);
      if (v278 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      __srcc = v253;
      if (v278 >= 0x17)
      {
        v551 = v252;
        v280 = v248;
        v281 = v250;
        v282 = (v278 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v278 | 7) != 0x17)
          v282 = v278 | 7;
        v283 = v282 + 1;
        v279 = operator new(v282 + 1);
        *(_QWORD *)&v615[16] = v278;
        *(_QWORD *)&v616 = v283 | 0x8000000000000000;
        *(_QWORD *)&v615[8] = v279;
        v250 = v281;
        v248 = v280;
        v252 = v551;
      }
      else
      {
        BYTE7(v616) = v278;
        v279 = &v615[8];
        if (!v278)
        {
LABEL_620:
          v279[v278] = 0;
          BYTE8(v616) = 1;
          if (v252 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v252 >= 0x17)
          {
            v285 = (v252 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v252 | 7) != 0x17)
              v285 = v252 | 7;
            v286 = v285 + 1;
            v284 = (char *)operator new(v285 + 1);
            v618 = v252;
            v619 = v286 | 0x8000000000000000;
            v617 = v284;
          }
          else
          {
            HIBYTE(v619) = v252;
            v284 = (char *)&v617;
            if (!v252)
            {
LABEL_628:
              v284[v252] = 0;
              v620 = 1;
              v287 = *(NSObject **)v615;
              if (SHIBYTE(v619) < 0)
                operator delete(v617);
              if (BYTE8(v616) && SBYTE7(v616) < 0)
                operator delete(*(void **)&v615[8]);
              if (*(_QWORD *)v615)
                os_release(*(void **)v615);
              if (!v250 || !*(_QWORD *)(v250 + 24))
              {
                os_log_type_enabled(v287, OS_LOG_TYPE_ERROR);
                *(_QWORD *)v615 = 0xD04100202;
                *(_WORD *)&v615[8] = 2080;
                *(_QWORD *)&v615[10] = v602;
                v296 = (void *)_os_log_send_and_compose_impl();
                if (v296)
                  free(v296);
                goto LABEL_775;
              }
              v288 = _os_log_pack_size();
              v289 = (std::__shared_weak_count_vtbl *)operator new(v288, (std::align_val_t)8uLL);
              v290 = (std::__shared_weak_count *)operator new();
              v290->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v290->__shared_owners_ = 0;
              v290->__shared_weak_owners_ = 0;
              v290[1].__vftable = v289;
              v594[0] = v289;
              v594[1] = v289;
              v595 = v290;
              v596 = 0;
              v597 = 0;
              v291 = strlen((const char *)v602);
              if (v291 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v292 = v291;
              v293 = v250;
              if (v291 >= 0x17)
              {
                v345 = (v291 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v291 | 7) != 0x17)
                  v345 = v291 | 7;
                v346 = v345 + 1;
                v294 = (_BYTE **)operator new(v345 + 1);
                *((_QWORD *)&v599 + 1) = v346 | 0x8000000000000000;
                v598 = v294;
                *(_QWORD *)&v599 = v292;
              }
              else
              {
                HIBYTE(v599) = v291;
                v294 = &v598;
                if (!v291)
                {
                  v295 = v248;
                  goto LABEL_716;
                }
              }
              v295 = v248;
              memcpy(v294, v602, v292);
LABEL_716:
              *((_BYTE *)v294 + v292) = 0;
              v347 = (uint64_t)v598;
              category[0] = (char *)v599;
              *(char **)((char *)category + 7) = *(char **)((char *)&v599 + 7);
              v348 = HIBYTE(v599);
              v349 = (char *)operator new(0x38uLL);
              *((_QWORD *)v349 + 1) = 0;
              *((_QWORD *)v349 + 2) = 0;
              *((_QWORD *)v349 + 3) = off_24EC1FA48;
              *(_QWORD *)v349 = &off_24EC1F9F8;
              v350 = category[0];
              *((_QWORD *)v349 + 4) = v347;
              *((_QWORD *)v349 + 5) = v350;
              *(char **)(v349 + 47) = *(char **)((char *)category + 7);
              v349[55] = v348;
              memset(category, 0, 15);
              v351 = v597;
              v596 = v349 + 24;
              v597 = (std::__shared_weak_count *)v349;
              if (v351)
              {
                v352 = (unint64_t *)&v351->__shared_owners_;
                do
                  v353 = __ldaxr(v352);
                while (__stlxr(v353 - 1, v352));
                if (!v353)
                {
                  ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
                  std::__shared_weak_count::__release_weak(v351);
                }
              }
              *(_OWORD *)v615 = *(_OWORD *)v594;
              v354 = v596;
              *(_QWORD *)&v615[16] = v595;
              if (v595)
              {
                v355 = (unint64_t *)&v595->__shared_owners_;
                do
                  v356 = __ldxr(v355);
                while (__stxr(v356 + 1, v355));
              }
              v357 = v597;
              *(_QWORD *)&v616 = v354;
              *((_QWORD *)&v616 + 1) = v597;
              if (v597)
              {
                v358 = (unint64_t *)&v597->__shared_owners_;
                do
                  v359 = __ldxr(v358);
                while (__stxr(v359 + 1, v358));
                v617 = v354;
                do
                  v360 = __ldaxr(v358);
                while (__stlxr(v360 - 1, v358));
                if (!v360)
                {
                  ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
                  std::__shared_weak_count::__release_weak(v357);
                }
              }
              else
              {
                v617 = v354;
              }
              v361 = v595;
              if (v595)
              {
                v362 = (unint64_t *)&v595->__shared_owners_;
                do
                  v363 = __ldaxr(v362);
                while (__stlxr(v363 - 1, v362));
                if (!v363)
                {
                  ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                  std::__shared_weak_count::__release_weak(v361);
                }
              }
              v364 = *(_QWORD *)v615;
              if (v617[31] >= 0)
                v365 = v617 + 8;
              else
                v365 = (char *)*((_QWORD *)v617 + 1);
              v366 = _os_log_pack_fill();
              *(_DWORD *)v366 = 68157954;
              *(_DWORD *)(v366 + 4) = 13;
              *(_WORD *)(v366 + 8) = 2080;
              *(_QWORD *)(v366 + 10) = v365;
              v367 = (char *)operator new();
              v368 = *(unsigned __int8 *)(v565 + 39);
              v369 = v559;
              if ((v368 & 0x80u) != 0)
              {
                v369 = *(_QWORD *)(v565 + 16);
                v368 = *(_QWORD *)(v565 + 24);
              }
              *(_QWORD *)v367 = v364;
              *(_OWORD *)(v367 + 8) = *(_OWORD *)&v615[8];
              *(_QWORD *)&v615[8] = 0;
              *(_QWORD *)&v615[16] = 0;
              *(_OWORD *)(v367 + 24) = v616;
              v616 = 0uLL;
              *((_QWORD *)v367 + 5) = v369;
              *((_QWORD *)v367 + 6) = v368;
              v367[56] = 16;
              v598 = 0;
              v594[0] = v367;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v293 + 24) + 40))(*(_QWORD *)(v293 + 24), v594);
              v248 = v295;
              v370 = v594[0];
              v594[0] = 0;
              if (v370)
              {
                v371 = (std::__shared_weak_count *)*((_QWORD *)v370 + 4);
                if (v371)
                {
                  v372 = (unint64_t *)&v371->__shared_owners_;
                  do
                    v373 = __ldaxr(v372);
                  while (__stlxr(v373 - 1, v372));
                  if (!v373)
                  {
                    ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                    std::__shared_weak_count::__release_weak(v371);
                  }
                }
                v374 = (std::__shared_weak_count *)*((_QWORD *)v370 + 2);
                if (v374)
                {
                  v375 = (unint64_t *)&v374->__shared_owners_;
                  do
                    v376 = __ldaxr(v375);
                  while (__stlxr(v376 - 1, v375));
                  if (!v376)
                  {
                    ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                    std::__shared_weak_count::__release_weak(v374);
                  }
                }
                MEMORY[0x227684CE8](v370, 0x10F0C40B62ED6C6);
                v377 = (uint64_t)v598;
                v598 = 0;
                if (v377)
                {
                  v378 = *(std::__shared_weak_count **)(v377 + 32);
                  if (v378)
                  {
                    v379 = (unint64_t *)&v378->__shared_owners_;
                    do
                      v380 = __ldaxr(v379);
                    while (__stlxr(v380 - 1, v379));
                    if (!v380)
                    {
                      ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
                      std::__shared_weak_count::__release_weak(v378);
                    }
                  }
                  v381 = *(std::__shared_weak_count **)(v377 + 16);
                  if (v381)
                  {
                    v382 = (unint64_t *)&v381->__shared_owners_;
                    do
                      v383 = __ldaxr(v382);
                    while (__stlxr(v383 - 1, v382));
                    if (!v383)
                    {
                      ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
                      std::__shared_weak_count::__release_weak(v381);
                    }
                  }
                  MEMORY[0x227684CE8](v377, 0x10F0C40B62ED6C6);
                }
              }
              v384 = (std::__shared_weak_count *)*((_QWORD *)&v616 + 1);
              if (*((_QWORD *)&v616 + 1))
              {
                v385 = (unint64_t *)(*((_QWORD *)&v616 + 1) + 8);
                do
                  v386 = __ldaxr(v385);
                while (__stlxr(v386 - 1, v385));
                if (!v386)
                {
                  ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
                  std::__shared_weak_count::__release_weak(v384);
                }
              }
              v387 = *(std::__shared_weak_count **)&v615[16];
              if (*(_QWORD *)&v615[16])
              {
                v388 = (unint64_t *)(*(_QWORD *)&v615[16] + 8);
                do
                  v389 = __ldaxr(v388);
                while (__stlxr(v389 - 1, v388));
                if (!v389)
                {
                  ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
                  std::__shared_weak_count::__release_weak(v387);
                }
              }
LABEL_775:
              if (v248)
              {
                sub_2245664AC((unsigned __int8 *)v173, v615);
                sub_22322C138((uint64_t)&v604, "Global plane %.13s does not have convex hull when computing room associations.", v615);
                sub_223182C08((uint64_t)&v604);
              }
              sub_223182C08((uint64_t)&v604);
              v342 = v611;
              if (!v611)
                goto LABEL_782;
              v390 = (unint64_t *)&v611->__shared_owners_;
              do
                v344 = __ldaxr(v390);
              while (__stlxr(v344 - 1, v390));
              goto LABEL_780;
            }
          }
          memmove(v284, __srcc, v252);
          goto LABEL_628;
        }
      }
      memmove(v279, v277, v278);
      goto LABEL_620;
    }
    if (*((float *)v171 + 18) >= *((float *)v171 + 21)
      || *((float *)v171 + 19) >= *((float *)v171 + 22)
      || *((float *)v171 + 20) >= *((float *)v171 + 23))
    {
      goto LABEL_782;
    }
    v181.i32[3] = v589.i32[3];
    v183.i32[3] = v590.i32[3];
    v176.i32[3] = v592.i32[3];
    v182 = *(int32x4_t *)(v173 + 5);
    v177 = *(float32x4_t *)(v173 + 11);
    v178 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v589, *(float *)v182.i32), v590, *(float32x2_t *)v182.i8, 1), v591, (float32x4_t)v182, 2), v592, (float32x4_t)v182, 3);
    v179 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v589, COERCE_FLOAT(*(_OWORD *)(v173 + 7))), v590, (float32x2_t)v173[7], 1), v591, *(float32x4_t *)(v173 + 7), 2), v592, *(float32x4_t *)(v173 + 7), 3);
    v180 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v589, COERCE_FLOAT(*(_OWORD *)(v173 + 9))), v590, (float32x2_t)v173[9], 1), v591, *(float32x4_t *)(v173 + 9), 2), v592, *(float32x4_t *)(v173 + 9), 3);
    v181.i64[0] = *(uint64_t *)((char *)v171 + 108);
    v181.i32[2] = *((_DWORD *)v171 + 29);
    v182.i64[0] = v171[15];
    v182.i32[2] = *((_DWORD *)v171 + 32);
    v183.i64[0] = *(uint64_t *)((char *)v171 + 132);
    v183.i32[2] = *((_DWORD *)v171 + 35);
    *(float32x2_t *)v184.f32 = vadd_f32(*(float32x2_t *)v183.i8, vmla_f32(vmul_f32(*(float32x2_t *)v181.i8, 0), 0, *(float32x2_t *)v182.i8));
    v185 = (float32x4_t)vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL);
    *(float32x2_t *)&v184.u32[2] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v183, v183, 8uLL), vmla_f32(vmul_f32(*(float32x2_t *)v185.f32, 0), 0, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v182, (int8x16_t)v182, 8uLL)));
    v186 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v589, v177.f32[0]), v590, *(float32x2_t *)v177.f32, 1), v591, v177, 2), v592, v177, 3);
    v176.i64[0] = v171[9];
    v176.i32[2] = *((_DWORD *)v171 + 20);
    v185.i64[0] = *(uint64_t *)((char *)v171 + 84);
    v185.i32[2] = *((_DWORD *)v171 + 23);
    v187 = vmulq_n_f32(v184, __srca);
    v188 = vsubq_f32(v176, v187);
    v189 = vaddq_f32(v187, v185);
    v185.i32[0] = *((_DWORD *)v173 + 81);
    v177.i32[0] = *((_DWORD *)v173 + 82);
    *(float32x2_t *)v195.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v178.i8, v185.f32[0]), *(float32x2_t *)v179.i8, v177.f32[0]), 0, *(float32x2_t *)v180.i8);
    v190 = (float32x2_t)vextq_s8(v178, v178, 8uLL).u64[0];
    v191 = (float32x2_t)vextq_s8(v179, v179, 8uLL).u64[0];
    v192 = (float32x2_t)vextq_s8(v180, v180, 8uLL).u64[0];
    *(float32x2_t *)&v195.u32[2] = vmla_f32(vmla_f32(vmul_f32(v190, *(float32x2_t *)v185.f32), *(float32x2_t *)v177.f32, v191), 0, v192);
    v193 = (int8x16_t)vaddq_f32(v195, v186);
    v194 = fminf(*(float *)&v193.i32[1], 3.4028e38);
    v195.f32[0] = fminf(*(float *)&v193.i32[2], 3.4028e38);
    v177.i32[0] = *((_DWORD *)v173 + 83);
    v175.i32[0] = *((_DWORD *)v173 + 84);
    *(float32x2_t *)v196.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v178.i8, v177.f32[0]), *(float32x2_t *)v179.i8, v175.f32[0]), 0, *(float32x2_t *)v180.i8);
    *(float32x2_t *)&v196.u32[2] = vmla_f32(vmla_f32(vmul_f32(v190, *(float32x2_t *)v177.f32), v175, v191), 0, v192);
    v197 = (int8x16_t)vaddq_f32(v196, v186);
    if (*(float *)&v197.i32[1] < v194)
      v194 = *(float *)&v197.i32[1];
    v198 = *(float *)&v197.i32[2];
    if (*(float *)&v197.i32[2] >= v195.f32[0])
      v198 = v195.f32[0];
    v195.i32[0] = *((_DWORD *)v173 + 85);
    v196.i32[0] = *((_DWORD *)v173 + 86);
    *(float32x2_t *)v199.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v178.i8, v195.f32[0]), *(float32x2_t *)v179.i8, v196.f32[0]), 0, *(float32x2_t *)v180.i8);
    *(float32x2_t *)&v199.u32[2] = vmla_f32(vmla_f32(vmul_f32(v190, *(float32x2_t *)v195.f32), *(float32x2_t *)v196.f32, v191), 0, v192);
    v200 = (int8x16_t)vaddq_f32(v199, v186);
    if (*(float *)&v200.i32[1] < v194)
      v194 = *(float *)&v200.i32[1];
    if (*(float *)&v200.i32[2] < v198)
      v198 = *(float *)&v200.i32[2];
    v196.i32[0] = *((_DWORD *)v173 + 87);
    v199.i32[0] = *((_DWORD *)v173 + 88);
    *(float32x2_t *)v201.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v178.i8, v196.f32[0]), *(float32x2_t *)v179.i8, v199.f32[0]), 0, *(float32x2_t *)v180.i8);
    *(float32x2_t *)&v201.u32[2] = vmla_f32(vmla_f32(vmul_f32(v190, *(float32x2_t *)v196.f32), *(float32x2_t *)v199.f32, v191), 0, v192);
    v202 = (int8x16_t)vaddq_f32(v201, v186);
    v203 = *(float *)&v202.i32[1];
    if (*(float *)&v202.i32[1] >= v194)
      v203 = v194;
    v204 = *(float *)&v202.i32[2];
    v193.i32[3] = v193.i32[0];
    v205 = vmovn_s32(vcgtq_f32((float32x4_t)v193, (float32x4_t)xmmword_2245F53C0));
    v205.i16[3] = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_2245F53C0, *(float32x4_t *)&v193)).i16[3];
    if (*(float *)&v202.i32[2] >= v198)
      v204 = v198;
    v206 = vbslq_s8((int8x16_t)vmovl_s16(v205), v193, (int8x16_t)xmmword_2245F53C0);
    v207 = (float32x4_t)v206;
    v207.i32[3] = v197.i32[0];
    v197.i32[3] = v197.i32[0];
    v208 = (float32x4_t)v197;
    v208.i32[3] = v206.i32[3];
    v209 = vbslq_s8((int8x16_t)vcgtq_f32(v208, v207), v197, v206);
    v210 = (float32x4_t)v209;
    v210.i32[3] = v200.i32[0];
    v211 = v189.f32[1] < v203;
    v200.i32[3] = v200.i32[0];
    v212 = (float32x4_t)v200;
    v212.i32[3] = v209.i32[3];
    v213 = vbslq_s8((int8x16_t)vcgtq_f32(v212, v210), v200, v209);
    v214 = (float32x4_t)v213;
    v214.i32[3] = v202.i32[0];
    v202.i32[3] = v202.i32[0];
    v215 = (float32x4_t)v202;
    v215.i32[3] = v213.i32[3];
    v216 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v215, v214), v202, v213);
    v188.i32[3] = v189.i32[0];
    *(int16x4_t *)v189.f32 = vmovn_s32(vcgtq_f32(v188, v216));
    v189.i16[3] = vmovn_s32(vcgtq_f32(v216, v188)).i16[3];
    v217 = vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)v189.f32, 0xFuLL))) | v211 | (v189.f32[2] < v204);
    v218 = v217 ^ 1;
    if (!v172 || (v217 & 1) != 0)
      goto LABEL_783;
    v219 = (float32x2_t *)v173[45];
    v220 = (float32x2_t *)v173[46];
    v221 = (char *)v220 - (char *)v219;
    if ((unint64_t)((char *)v220 - (char *)v219) < 0x10)
    {
LABEL_782:
      v218 = 0;
      goto LABEL_783;
    }
    v222.i64[0] = vzip1q_s32(v181, v182).u64[0];
    v222.i64[1] = v183.u32[0];
    v223 = (int8x16_t)vtrn2q_s32(v181, v182);
    v223.i32[2] = v183.i32[1];
    v224 = vzip2q_s32(v181, v182);
    v224.i32[2] = *((_DWORD *)v171 + 35);
    v227.i32[0] = v223.i32[0];
    v225 = vdupq_laneq_s32(v224, 2).u32[0];
    v226 = vextq_s8(vextq_s8(v223, v223, 0xCuLL), (int8x16_t)v224, 8uLL);
    v227.i32[1] = v226.i32[0];
    v227.i64[1] = v226.u32[1];
    v228.i64[0] = v226.i64[1];
    v228.i64[1] = v225;
    v229 = (float32x4_t)xmmword_2245F53D0;
    memset(v615, 0, sizeof(v615));
    if (v220 == v219)
    {
      v233 = 0;
      v234 = 0;
    }
    else
    {
      v538 = v228;
      v539 = v227;
      v540 = v222;
      v548 = v186;
      v556 = (float32x4_t)v179;
      *(int8x16_t *)v562 = v178;
      v537 = v180;
      if (v221 < 0)
        sub_22316E078();
      v230 = v221 >> 3;
      *(_QWORD *)v615 = operator new(12 * (v221 >> 3));
      *(_QWORD *)&v615[8] = *(_QWORD *)v615;
      *(_QWORD *)&v615[16] = *(_QWORD *)v615 + 12 * v230;
      v594[0] = v615;
      v557 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v540, v556.f32[0]), v539, *(float32x2_t *)v556.f32, 1), v538, v556, 2), (float32x4_t)xmmword_2245F53D0, v556, 3);
      v563 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v540, *(float *)v562), v539, (float32x2_t)v562[0], 1), v538, *(float32x4_t *)v562, 2), (float32x4_t)xmmword_2245F53D0, *(float32x4_t *)v562, 3);
      v544 = (float32x2_t)vextq_s8(v563, v563, 8uLL).u64[0];
      v549 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v540, v548.f32[0]), v539, *(float32x2_t *)v548.f32, 1), v538, v548, 2), (float32x4_t)xmmword_2245F53D0, v548, 3);
      v542 = (float32x2_t)vextq_s8(v557, v557, 8uLL).u64[0];
      do
      {
        *(float32x2_t *)v231.f32 = vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v563.i8, COERCE_FLOAT(*v219)), *(float32x2_t *)v557.i8, *v219, 1);
        *(float32x2_t *)&v231.u32[2] = vmla_lane_f32(vmul_f32(v544, *v219), v542, *v219, 1);
        v232 = vaddq_f32(v231, v549);
        DWORD2(v604) = v232.i32[2];
        *(_QWORD *)&v604 = v232.i64[0];
        sub_22339DC14((char ***)v594, (uint64_t *)&v604);
        ++v219;
      }
      while (v219 != v220);
      v233 = *(_QWORD *)&v615[8];
      v234 = *(float **)v615;
      v180 = v537;
      v229 = (float32x4_t)xmmword_2245F53D0;
      v227 = v539;
      v222 = v540;
      v228 = v538;
    }
    v395 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v222, *(float *)v180.i32), v227, *(float32x2_t *)v180.i8, 1), v228, (float32x4_t)v180, 2), v229, (float32x4_t)v180, 3);
    v396 = *((float *)v171 + 24);
    *(float *)v223.i32 = v396 - __srca;
    v560 = v223;
    v397 = __srca + (float)(v396 + *((float *)v171 + 25));
    __srcd = v397;
    v398 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v395.i8, 0), 0, *(float32x2_t *)v395.i8, 1);
    LODWORD(v543) = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v395, v395, 8uLL), v398).u32[0];
    v566 = v234;
    if (fabsf(v543) > 0.999)
    {
      v399 = (float *)v233;
      v400 = v233;
      if (v234 != (float *)v233)
      {
        v399 = v234;
        v400 = (uint64_t)v234;
        if (v234 + 3 != (float *)v233)
        {
          v401 = v234[5];
          v402 = v234[2];
          v399 = v401 >= v402 ? v234 : v234 + 3;
          v400 = (uint64_t)(v401 >= v402 ? v234 + 3 : v234);
          v403 = v234 + 6;
          if (v234 + 6 != (float *)v233)
          {
            v404 = (uint64_t)v234;
            while (1)
            {
              v405 = (uint64_t)v403;
              v406 = v403 + 3;
              if (v406 == (float *)v233)
                break;
              v407 = v404 + 36;
              v408 = *(float *)(v405 + 20);
              v409 = *(float *)(v405 + 8);
              v410 = v399[2];
              v411 = *(float *)(v400 + 8);
              if (v409 >= v410)
                v412 = (uint64_t)v399;
              else
                v412 = v405;
              if (v408 < v411)
                v407 = v400;
              if (v408 < v410)
                v399 = v406;
              if (v409 >= v411)
                v400 = v405;
              if (v408 >= v409)
              {
                v399 = (float *)v412;
                v400 = v407;
              }
              v403 = (float *)(v405 + 24);
              v404 = v405;
              if (v405 + 24 == v233)
                goto LABEL_929;
            }
            v491 = *(float *)(v405 + 8);
            if (v491 >= v399[2])
            {
              if (v491 >= *(float *)(v400 + 8))
                v400 = v405;
            }
            else
            {
              v399 = (float *)v405;
            }
          }
        }
      }
LABEL_929:
      if (*(float *)(v400 + 8) >= (float)(*(float *)v560.i32 + -0.001) && (float)(__srcd + 0.001) >= v399[2])
      {
        v604 = 0uLL;
        rep = 0;
        v452 = v233 - (_QWORD)v234;
        if ((float *)v233 == v234)
        {
          k = 0;
        }
        else
        {
          if (0xAAAAAAAAAAAAAAABLL * (v452 >> 2) > 0x1555555555555555)
            sub_22316E078();
          k = (uint64_t *)operator new(v452);
          *(_QWORD *)&v604 = k;
          rep = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)k + 4 * (v452 >> 2);
          v499 = 12 * ((v452 - 12) / 0xCuLL) + 12;
          memcpy(k, v566, v499);
          v452 = (int64_t)k + v499;
          *((_QWORD *)&v604 + 1) = v452;
        }
      }
      else
      {
        k = 0;
        v452 = 0;
        v604 = 0uLL;
        rep = 0;
      }
      goto LABEL_932;
    }
    memset(v615, 0, sizeof(v615));
    v413 = 0xAAAAAAAAAAAAAAABLL * ((v233 - (uint64_t)v234) >> 2);
    if (v413 < 2)
    {
      v414 = 0;
      v415 = 0;
      goto LABEL_875;
    }
    v416 = 0;
    v414 = 0;
    v417 = 0;
    v418 = 0;
    v419 = v397 + 0.001;
    v420 = v397 + -0.001;
    v552 = 0xAAAAAAAAAAAAAAABLL * ((v233 - (uint64_t)v234) >> 2);
    while (2)
    {
      v421 = &v234[3 * v418++];
      v422 = &v234[3 * (v418 % v413)];
      v423 = v421[2];
      v424 = v422[2];
      if (v423 <= v419)
      {
        if (v416 >= v417)
        {
          v427 = 0xAAAAAAAAAAAAAAABLL * ((v416 - v414) >> 2) + 1;
          if (v427 > 0x1555555555555555)
          {
            *(_QWORD *)&v615[8] = v416;
            *(_QWORD *)&v615[16] = v417;
            *(_QWORD *)v615 = v414;
            sub_22316E078();
          }
          if (0x5555555555555556 * ((v417 - v414) >> 2) > v427)
            v427 = 0x5555555555555556 * ((v417 - v414) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v417 - v414) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v428 = 0x1555555555555555;
          else
            v428 = v427;
          if (v428)
          {
            v545 = &v234[3 * (v418 % v413)];
            if (v428 > 0x1555555555555555)
            {
              *(_QWORD *)&v615[8] = v416;
              *(_QWORD *)&v615[16] = v417;
              *(_QWORD *)v615 = v414;
              sub_223174E94();
            }
            v429 = v428;
            v430 = (char *)operator new(12 * v428);
            v428 = v429;
            v422 = v545;
          }
          else
          {
            v430 = 0;
          }
          v546 = v418;
          v431 = *(_QWORD *)v421;
          v432 = &v430[4 * ((v416 - v414) >> 2)];
          *((float *)v432 + 2) = v421[2];
          *(_QWORD *)v432 = v431;
          for (i = v432; v416 != v414; *((_DWORD *)i + 2) = v435)
          {
            v434 = *(_QWORD *)(v416 - 12);
            v416 -= 12;
            v435 = *((_DWORD *)v416 + 2);
            *(_QWORD *)(i - 12) = v434;
            i -= 12;
          }
          v417 = &v430[12 * v428];
          v416 = v432 + 12;
          if (v414)
          {
            v436 = v414;
            v437 = v417;
            operator delete(v436);
            v417 = v437;
          }
          v414 = i;
          v234 = v566;
          v413 = v552;
          v418 = v546;
        }
        else
        {
          v426 = *(_QWORD *)v421;
          *((float *)v416 + 2) = v421[2];
          *(_QWORD *)v416 = v426;
          v416 += 12;
        }
        if (v423 < v420 && v424 > v419)
        {
LABEL_855:
          v228.i64[0] = *(_QWORD *)v422;
          v228.f32[2] = v422[2];
          v398.f32[0] = v421[2];
          v223.i64[0] = *(_QWORD *)v421;
          v223.i32[2] = v398.i32[0];
          v228 = vsubq_f32(v228, (float32x4_t)v223);
          v439.f32[0] = __srcd;
          v439.f32[1] = v422[2];
          v440 = vsub_f32(v439, (float32x2_t)vdup_lane_s32((int32x2_t)v398, 0));
          v398 = (float32x2_t)vdup_lane_s32((int32x2_t)v440, 1);
          v441 = vaddq_f32((float32x4_t)v223, vmulq_n_f32(v228, vdiv_f32(v440, v398).f32[0]));
          if (v416 < v417)
          {
            *((_DWORD *)v416 + 2) = v441.i32[2];
            *(_QWORD *)v416 = v441.i64[0];
            v416 += 12;
          }
          else
          {
            v442 = v418;
            v443 = 0xAAAAAAAAAAAAAAABLL * ((v416 - v414) >> 2) + 1;
            if (v443 > 0x1555555555555555)
            {
              *(_QWORD *)&v615[8] = v416;
              *(_QWORD *)&v615[16] = v417;
              *(_QWORD *)v615 = v414;
              sub_22316E078();
            }
            if (0x5555555555555556 * ((v417 - v414) >> 2) > v443)
              v443 = 0x5555555555555556 * ((v417 - v414) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v417 - v414) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v444 = 0x1555555555555555;
            else
              v444 = v443;
            if (v444)
            {
              v547 = v441;
              if (v444 > 0x1555555555555555)
              {
                *(_QWORD *)&v615[8] = v416;
                *(_QWORD *)&v615[16] = v417;
                *(_QWORD *)v615 = v414;
                sub_223174E94();
              }
              v445 = (char *)operator new(12 * v444);
              v441 = v547;
            }
            else
            {
              v445 = 0;
            }
            v446 = &v445[4 * ((v416 - v414) >> 2)];
            *(_QWORD *)v446 = v441.i64[0];
            *((_DWORD *)v446 + 2) = v441.i32[2];
            for (j = v446; v416 != v414; *((_DWORD *)j + 2) = v449)
            {
              v448 = *(_QWORD *)(v416 - 12);
              v416 -= 12;
              v449 = *((_DWORD *)v416 + 2);
              *(_QWORD *)(j - 12) = v448;
              j -= 12;
            }
            v417 = &v445[12 * v444];
            v416 = v446 + 12;
            if (v414)
            {
              v450 = &v445[12 * v444];
              operator delete(v414);
              v417 = v450;
            }
            v414 = j;
            v234 = v566;
            v413 = v552;
            v418 = v442;
          }
        }
      }
      else
      {
        v425 = v423 >= v420;
        if (v424 <= v419)
          v425 = 1;
        if (v424 < v420 || !v425)
          goto LABEL_855;
      }
      if (v418 != v413)
        continue;
      break;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v416 - v414) >> 2) >= 2)
      v415 = v416;
    else
      v415 = v414;
    *(_QWORD *)v615 = v414;
    *(_QWORD *)&v615[8] = v415;
    *(_QWORD *)&v615[16] = v417;
LABEL_875:
    k = 0;
    v452 = 0;
    v604 = 0uLL;
    rep = 0;
    v453 = 0xAAAAAAAAAAAAAAABLL * ((v415 - v414) >> 2);
    if (v453 >= 2)
    {
      v454 = 0;
      v452 = 0;
      k = 0;
      v455 = 0;
      v456 = 0;
      v457 = 0;
      v458 = 0;
      v459.i32[3] = v560.i32[3];
      v460 = *(float *)v560.i32 + 0.001;
      v461 = *(float *)v560.i32 + -0.001;
      v541 = v453;
      do
      {
        v462 = *(_QWORD *)v615 + 12 * v458++;
        v463 = *(_QWORD *)v615 + 12 * (v458 % v453);
        v464 = *(float *)(v462 + 8);
        v465 = *(float *)(v463 + 8);
        v466 = v465 <= v460;
        if (v464 >= v461)
        {
          if (v452 >= v457)
          {
            v468 = 0xAAAAAAAAAAAAAAABLL * ((v452 - (uint64_t)v456) >> 2) + 1;
            if (v468 > 0x1555555555555555)
            {
              *(_QWORD *)&v604 = k;
              *((_QWORD *)&v604 + 1) = v452;
              rep = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v454;
              sub_22316E078();
            }
            v469 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v457 - (_QWORD)v456) >> 2);
            if (2 * v469 > v468)
              v468 = 2 * v469;
            if (v469 >= 0xAAAAAAAAAAAAAAALL)
              v470 = 0x1555555555555555;
            else
              v470 = v468;
            __srce = v458;
            v553 = *(_QWORD *)v615 + 12 * (v458 % v453);
            if (v470)
            {
              if (v470 > 0x1555555555555555)
              {
                *(_QWORD *)&v604 = k;
                *((_QWORD *)&v604 + 1) = v452;
                rep = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v454;
                sub_223174E94();
              }
              v471 = v470;
              v472 = (char *)operator new(12 * v470);
              v470 = v471;
              v453 = v541;
            }
            else
            {
              v472 = 0;
            }
            v473 = *(_QWORD *)v462;
            v474 = &v472[4 * ((v452 - (uint64_t)v456) >> 2)];
            *((_DWORD *)v474 + 2) = *(_DWORD *)(v462 + 8);
            *(_QWORD *)v474 = v473;
            for (k = (uint64_t *)v474; (uint64_t *)v452 != v456; *((_DWORD *)k + 2) = v476)
            {
              v475 = *(_QWORD *)(v452 - 12);
              v452 -= 12;
              v476 = *(_DWORD *)(v452 + 8);
              *(uint64_t *)((char *)k - 12) = v475;
              k = (uint64_t *)((char *)k - 12);
            }
            v454 = &v472[12 * v470];
            v452 = (int64_t)(v474 + 12);
            if (v456)
            {
              v477 = v456;
              v478 = v454;
              operator delete(v477);
              v454 = v478;
              v466 = 1;
              v455 = v478;
            }
            else
            {
              v466 = 1;
              v455 = &v472[12 * v470];
            }
            v456 = k;
            v457 = (unint64_t)v454;
            v458 = __srce;
            v463 = v553;
          }
          else
          {
            v467 = *(_QWORD *)v462;
            *(_DWORD *)(v452 + 8) = *(_DWORD *)(v462 + 8);
            *(_QWORD *)v452 = v467;
            v452 += 12;
            v466 = 1;
          }
        }
        v479 = v465 >= v461 || v464 <= v460;
        if (!v479 || !v466)
        {
          v459.i64[0] = *(_QWORD *)v463;
          v459.i32[2] = *(_DWORD *)(v463 + 8);
          v398.i32[0] = *(_DWORD *)(v462 + 8);
          v223.i64[0] = *(_QWORD *)v462;
          v223.i32[2] = v398.i32[0];
          v459 = vsubq_f32(v459, (float32x4_t)v223);
          v480.i32[0] = v560.i32[0];
          v480.i32[1] = *(_DWORD *)(v463 + 8);
          v481 = vsub_f32(v480, (float32x2_t)vdup_lane_s32((int32x2_t)v398, 0));
          v398 = (float32x2_t)vdup_lane_s32((int32x2_t)v481, 1);
          v482 = vaddq_f32((float32x4_t)v223, vmulq_n_f32(v459, vdiv_f32(v481, v398).f32[0]));
          if (v452 < (unint64_t)v455)
          {
            *(_DWORD *)(v452 + 8) = v482.i32[2];
            *(_QWORD *)v452 = v482.i64[0];
            v452 += 12;
            v457 = (unint64_t)v455;
          }
          else
          {
            v483 = 0xAAAAAAAAAAAAAAABLL * ((v452 - (uint64_t)v456) >> 2) + 1;
            if (v483 > 0x1555555555555555)
            {
              *(_QWORD *)&v604 = k;
              *((_QWORD *)&v604 + 1) = v452;
              rep = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v454;
              sub_22316E078();
            }
            v484 = 0xAAAAAAAAAAAAAAABLL * ((v455 - (char *)v456) >> 2);
            if (2 * v484 > v483)
              v483 = 2 * v484;
            if (v484 >= 0xAAAAAAAAAAAAAAALL)
              v485 = 0x1555555555555555;
            else
              v485 = v483;
            __srcf = v458;
            if (v485)
            {
              v554 = v482;
              if (v485 > 0x1555555555555555)
              {
                *(_QWORD *)&v604 = k;
                *((_QWORD *)&v604 + 1) = v452;
                rep = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v454;
                sub_223174E94();
              }
              v486 = (char *)operator new(12 * v485);
              v482 = v554;
            }
            else
            {
              v486 = 0;
            }
            v487 = &v486[4 * ((v452 - (uint64_t)v456) >> 2)];
            *(_QWORD *)v487 = v482.i64[0];
            *((_DWORD *)v487 + 2) = v482.i32[2];
            for (k = (uint64_t *)v487; (uint64_t *)v452 != v456; *((_DWORD *)k + 2) = v489)
            {
              v488 = *(_QWORD *)(v452 - 12);
              v452 -= 12;
              v489 = *(_DWORD *)(v452 + 8);
              *(uint64_t *)((char *)k - 12) = v488;
              k = (uint64_t *)((char *)k - 12);
            }
            v454 = &v486[12 * v485];
            v452 = (int64_t)(v487 + 12);
            if (v456)
            {
              v490 = &v486[12 * v485];
              operator delete(v456);
              v454 = v490;
              v455 = v490;
              v456 = k;
              v457 = (unint64_t)v490;
            }
            else
            {
              v455 = &v486[12 * v485];
              v456 = k;
              v457 = (unint64_t)v455;
            }
            v458 = __srcf;
          }
        }
      }
      while (v458 != v453);
      *(_QWORD *)&v604 = k;
      *((_QWORD *)&v604 + 1) = v452;
      rep = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v454;
      if (0xAAAAAAAAAAAAAAABLL * ((v452 - (uint64_t)k) >> 2) < 2)
      {
        *((_QWORD *)&v604 + 1) = k;
        v452 = (int64_t)k;
      }
    }
    if (*(_QWORD *)v615)
    {
      operator delete(*(void **)v615);
      v452 = *((_QWORD *)&v604 + 1);
      k = (uint64_t *)v604;
    }
LABEL_932:
    v492 = 0xAAAAAAAAAAAAAAABLL * ((v452 - (uint64_t)k) >> 2);
    if (v492 >= 2)
    {
      memset(v615, 0, sizeof(v615));
      if ((uint64_t *)v452 == k)
      {
        v494 = 0;
        v495 = 0uLL;
        v493 = v566;
      }
      else
      {
        if (v492 >> 61)
          sub_22316E078();
        *(_QWORD *)v615 = operator new(0x5555555555555558 * ((v452 - (uint64_t)k) >> 2));
        *(_QWORD *)&v615[8] = *(_QWORD *)v615;
        *(_QWORD *)&v615[16] = *(_QWORD *)v615 + 0x5555555555555558 * ((v452 - (uint64_t)k) >> 2);
        v602[0] = v615;
        v493 = v566;
        do
        {
          v598 = (_BYTE *)*k;
          sub_2232EA538((void ***)v602, &v598);
          k = (uint64_t *)((char *)k + 12);
        }
        while (k != (uint64_t *)v452);
        v494 = *(float32x2_t **)v615;
        v495 = *(_OWORD *)&v615[8];
      }
      v602[0] = v494;
      *(_OWORD *)&v602[1] = v495;
      if (v543 <= 0.001)
      {
        if (v543 >= -0.001)
        {
          v500 = v494 + 1;
          v501 = *v494;
          v502 = (float32x2_t *)v495;
          v503 = *v494;
          if (v494 != (float32x2_t *)v495)
          {
            v503 = *v494;
            if (v500 != (float32x2_t *)v495)
            {
              v504 = v494;
              v505 = v494 + 1;
              do
              {
                v506 = vsub_f32(*v504, v501);
                v507 = vmla_lane_f32(vmul_f32(v506, v506), (float32x2_t)vdup_lane_s32((int32x2_t)v506, 1), v506, 1).f32[0];
                v508 = *v505++;
                v509 = vsub_f32(v508, v501);
                if (v507 < vmla_lane_f32(vmul_f32(v509, v509), (float32x2_t)vdup_lane_s32((int32x2_t)v509, 1), v509, 1).f32[0])
                  v504 = v500;
                v500 = v505;
              }
              while (v505 != v502);
              v503 = *v504;
            }
          }
          memset(v615, 0, sizeof(v615));
          v510 = (char *)v502 - (char *)v494;
          if ((char *)v502 - (char *)v494 < 0)
            sub_22316E078();
          v511 = (char *)operator new((unint64_t)v510 >> 1);
          v512 = vsub_f32(v503, v501);
          v513 = (float32x2_t)vdup_lane_s32((int32x2_t)v512, 1);
          __srcg = v512;
          v514 = vmla_lane_f32(vmul_f32(v512, v512), v513, v512, 1);
          *(_QWORD *)v615 = v511;
          *(_QWORD *)&v615[8] = v511;
          *(_QWORD *)&v615[16] = &v511[4 * (v510 >> 3)];
          v598 = v615;
          v493 = v566;
          do
          {
            v515 = vsub_f32(*v494, v501);
            LODWORD(category[0]) = vdiv_f32(vmla_lane_f32(vmul_f32(__srcg, v515), v513, v515, 1), v514).u32[0];
            sub_2233D7140((uint64_t *)&v598, category);
            ++v494;
          }
          while (v494 != v502);
          v516 = *(void **)v615;
          v517 = *(_QWORD *)v615 == *(_QWORD *)&v615[8] || *(_QWORD *)v615 + 4 == *(_QWORD *)&v615[8];
          v518 = *(float **)v615;
          v519 = *(float **)v615;
          if (!v517)
          {
            v521 = *(float *)(*(_QWORD *)v615 + 4);
            v518 = v521 >= **(float **)v615 ? *(float **)v615 : (float *)(*(_QWORD *)v615 + 4);
            v519 = v521 >= **(float **)v615 ? (float *)(*(_QWORD *)v615 + 4) : *(float **)v615;
            v522 = *(_QWORD *)v615 + 8;
            if (*(_QWORD *)v615 + 8 != *(_QWORD *)&v615[8])
            {
              if (v521 >= **(float **)v615)
                v521 = **(float **)v615;
              v523 = *(float **)v615;
              while (1)
              {
                v524 = (float *)v522;
                v525 = (float *)(v522 + 4);
                if (v525 == *(float **)&v615[8])
                  break;
                v527 = *v524;
                v526 = v524[1];
                if (v526 >= *v524)
                {
                  if (v527 < v521)
                  {
                    v521 = *v524;
                    v518 = v524;
                  }
                  if (v526 >= *v519)
                    v519 = v523 + 3;
                  v522 = (uint64_t)(v524 + 2);
                  v523 = v524;
                  if (v524 + 2 == *(float **)&v615[8])
                    goto LABEL_966;
                }
                else
                {
                  v521 = *v518;
                  if (v526 < *v518)
                  {
                    v521 = v524[1];
                    v518 = v525;
                  }
                  if (v527 >= *v519)
                    v519 = v524;
                  v522 = (uint64_t)(v524 + 2);
                  v523 = v524;
                  if (v524 + 2 == *(float **)&v615[8])
                    goto LABEL_966;
                }
              }
              if (*v524 >= *v518)
              {
                if (*v524 >= *v519)
                  v519 = v524;
              }
              else
              {
                v518 = v524;
              }
            }
          }
LABEL_966:
          *(float32x2_t *)v615 = vmla_n_f32(v501, __srcg, *v518);
          *(float32x2_t *)&v615[8] = vmla_n_f32(v501, __srcg, *v519);
          sub_2233320C8(v602, v615, &v615[16], 2uLL);
          if (v516)
            operator delete(v516);
        }
        else if (v494 != (float32x2_t *)v495)
        {
          v496 = (float32x2_t *)(v495 - 8);
          if ((uint64_t)v495 - 8 > (unint64_t)v494)
          {
            v497 = v494 + 1;
            do
            {
              v498 = v497[-1];
              v497[-1] = *v496;
              *v496-- = v498;
              v54 = v497++ >= v496;
            }
            while (!v54);
          }
        }
      }
      *(_OWORD *)v594 = *(_OWORD *)v602;
      v595 = (std::__shared_weak_count *)v602[2];
      memset(v602, 0, sizeof(v602));
      v520 = sub_2233FF54C((float **)v594, (uint64_t **)v174, (uint64_t)v615);
      if (v594[0])
      {
        v594[1] = v594[0];
        operator delete(v594[0]);
      }
      v218 = !v520;
      k = (uint64_t *)v604;
    }
    else
    {
      v218 = 0;
      v493 = v566;
    }
    if (k)
    {
      *((_QWORD *)&v604 + 1) = k;
      operator delete(k);
    }
    if (v493)
      operator delete(v493);
LABEL_783:
    kdebug_trace();
    v147 = a4;
    if ((v218 & 1) != 0)
    {
LABEL_784:
      v391 = v149[1];
      if (v391)
      {
        do
        {
          v392 = (uint64_t **)v391;
          v391 = (uint64_t *)*v391;
        }
        while (v391);
      }
      else
      {
        do
        {
          v392 = (uint64_t **)v149[2];
          v59 = *v392 == (uint64_t *)v149;
          v149 = v392;
        }
        while (!v59);
      }
    }
    else
    {
      v393 = v149[1];
      v394 = v149;
      if (v393)
      {
        do
        {
          v392 = (uint64_t **)v393;
          v393 = (uint64_t *)*v393;
        }
        while (v393);
      }
      else
      {
        do
        {
          v392 = (uint64_t **)v394[2];
          v59 = *v392 == (uint64_t *)v394;
          v394 = v392;
        }
        while (!v59);
      }
      if (v580 == v149)
        v580 = v392;
      --v582;
      sub_2231AFE60(v581, (uint64_t *)v149);
      operator delete(v149);
    }
    v149 = v392;
    if (v392 != &v581)
      continue;
    break;
  }
LABEL_1017:
  if (v579 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_1020:
  *(_QWORD *)(v567 + 16) = 0;
  *(_QWORD *)(v567 + 24) = 0;
  *(_QWORD *)(v567 + 32) = 0;
  *(_BYTE *)(v567 + 40) = 1;
  *(_OWORD *)v567 = v600;
  v528 = v582;
  memset(v615, 0, sizeof(v615));
  if (v582)
  {
    if (v582 >> 60)
      sub_22316E078();
    v529 = (char *)operator new(16 * v582);
    v530 = &v529[16 * v528];
    *(_QWORD *)v615 = v529;
    *(_QWORD *)&v615[8] = v529;
    *(_QWORD *)&v615[16] = v530;
    v531 = v580;
    v594[0] = v615;
    if (v580 == &v581)
    {
LABEL_1025:
      v532 = vdupq_n_s64((unint64_t)v529);
      goto LABEL_1034;
    }
  }
  else
  {
    v530 = 0;
    v529 = 0;
    v531 = v580;
    v594[0] = v615;
    if (v580 == &v581)
      goto LABEL_1025;
  }
  do
  {
    v604 = *(_OWORD *)((char *)v531 + 25);
    sub_2232E9564((char ***)v594, &v604);
    v533 = v531[1];
    if (v533)
    {
      do
      {
        v534 = (uint64_t **)v533;
        v533 = (uint64_t *)*v533;
      }
      while (v533);
    }
    else
    {
      do
      {
        v534 = (uint64_t **)v531[2];
        v59 = *v534 == (uint64_t *)v531;
        v531 = v534;
      }
      while (!v59);
    }
    v531 = v534;
  }
  while (v534 != &v581);
  v532 = *(int64x2_t *)v615;
  v530 = *(char **)&v615[16];
LABEL_1034:
  v535 = v581;
  *(int64x2_t *)(v567 + 16) = v532;
  *(_QWORD *)(v567 + 32) = v530;
  sub_2233FADDC(v535);
  return kdebug_trace();
}

void sub_2233D3F58()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_BYTE *)(v0 - 200) && *(char *)(v0 - 201) < 0)
    operator delete(*(void **)(v0 - 224));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x2A0]);
  __cxa_end_catch();
  sub_2231874DC((uint64_t)&v1);
  JUMPOUT(0x2233D43BCLL);
}

void sub_2233D4000(_Unwind_Exception *a1)
{
  void *v2;
  char v3;
  _QWORD *v4;
  uint64_t v5;

  if (LOBYTE(STACK[0x228]) && SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x2A0]);
  sub_2231874DC((uint64_t)&STACK[0x2F0]);
  if (v3)
  {
    if (v2)
      operator delete(v2);
  }
  sub_2233FADDC(v4);
  sub_2231874DC((uint64_t)&v5);
  _Unwind_Resume(a1);
}

void sub_2233D403C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  void *v43;

  v43 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v43;
    operator delete(v43);
  }
  if (a43)
    operator delete(a43);
  sub_2231874DC((uint64_t)&STACK[0x2F0]);
  JUMPOUT(0x2233D43BCLL);
}

void sub_2233D4088()
{
  if (STACK[0x210])
  {
    STACK[0x218] = STACK[0x210];
    JUMPOUT(0x2233D42E0);
  }
  JUMPOUT(0x2233D42E4);
}

void sub_2233D40A4()
{
  sub_223199DE8((uint64_t)&STACK[0x210]);
  sub_223182DAC((uint64_t)&STACK[0x2A0]);
  JUMPOUT(0x2233D4354);
}

void sub_2233D40AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  unint64_t v37;
  void *v38;
  uint64_t v39;

  STACK[0x2A0] = (unint64_t)v38;
  STACK[0x2A8] = v37;
  STACK[0x2B0] = a37;
  if (v38)
  {
    STACK[0x2A8] = (unint64_t)v38;
    operator delete(v38);
  }
  if (!*(_QWORD *)(v39 - 224))
    JUMPOUT(0x2233D42F4);
  JUMPOUT(0x2233D42F0);
}

void sub_2233D40C8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 208) = v1;
  *(_QWORD *)(v2 - 224) = v0;
  if (v0)
  {
    *(_QWORD *)(v2 - 216) = v0;
    operator delete(v0);
  }
  JUMPOUT(0x2233D42FCLL);
}

void sub_2233D40D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  uint64_t v20;

  *(_QWORD *)(v20 - 208) = a19;
  *(_QWORD *)(v20 - 224) = v19;
  if (v19)
  {
    *(_QWORD *)(v20 - 216) = v19;
    operator delete(v19);
  }
  JUMPOUT(0x2233D42FCLL);
}

void sub_2233D40EC()
{
  sub_223199DE8(&STACK[0x210]);
  JUMPOUT(0x2233D430CLL);
}

void sub_2233D40F4()
{
  sub_223199DE8(&STACK[0x210]);
  JUMPOUT(0x2233D430CLL);
}

void sub_2233D411C()
{
  uint64_t v0;
  void *v1;

  if (*(char *)(v0 - 193) < 0)
    operator delete(*(void **)(v0 - 216));
  v1 = *(void **)(v0 - 224);
  if (v1)
    os_release(v1);
  sub_223182DAC((uint64_t)&STACK[0x2A0]);
  JUMPOUT(0x2233D4354);
}

void sub_2233D4128()
{
  JUMPOUT(0x2233D4260);
}

void sub_2233D4130()
{
  sub_223199DE8(&STACK[0x210]);
  JUMPOUT(0x2233D430CLL);
}

void sub_2233D4138()
{
  uint64_t v0;

  sub_22319A054((uint64_t *)&STACK[0x210]);
  sub_22319A054((uint64_t *)&STACK[0x238]);
  sub_223199DE8(v0 - 224);
  sub_223182DAC((uint64_t)&STACK[0x2A0]);
  JUMPOUT(0x2233D4354);
}

void sub_2233D4160()
{
  void *v0;
  int v1;

  if (v1 < 0)
    operator delete(v0);
  sub_223199DE8((uint64_t)&STACK[0x210]);
  JUMPOUT(0x2233D430CLL);
}

void sub_2233D417C()
{
  uint64_t v0;

  MEMORY[0x227684CE8](v0, 0x10D0C40B950D02ALL);
  sub_223182DAC(&STACK[0x2A0]);
  JUMPOUT(0x2233D4354);
}

void sub_2233D41AC()
{
  JUMPOUT(0x2233D41B8);
}

void sub_2233D41D4()
{
  JUMPOUT(0x2233D41E0);
}

void sub_2233D41F4()
{
  uint64_t v0;
  void *v1;

  if (*(char *)(v0 - 193) < 0)
    operator delete(*(void **)(v0 - 216));
  v1 = *(void **)(v0 - 224);
  if (v1)
    os_release(v1);
  sub_223182DAC((uint64_t)&STACK[0x2A0]);
  JUMPOUT(0x2233D4354);
}

void sub_2233D4200()
{
  JUMPOUT(0x2233D42B0);
}

void sub_2233D4208()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 - 224))
    JUMPOUT(0x2233D4214);
  JUMPOUT(0x2233D421CLL);
}

void sub_2233D4234()
{
  JUMPOUT(0x2233D4260);
}

void sub_2233D423C()
{
  JUMPOUT(0x2233D424CLL);
}

void sub_2233D4284()
{
  JUMPOUT(0x2233D42B0);
}

void sub_2233D428C()
{
  JUMPOUT(0x2233D429CLL);
}

void sub_2233D42D0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 - 224))
    JUMPOUT(0x2233D42DCLL);
  JUMPOUT(0x2233D42E4);
}

void sub_2233D432C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 224);
  if (v1)
  {
    *(_QWORD *)(v0 - 216) = v1;
    operator delete(v1);
  }
  sub_2231874DC((uint64_t)&STACK[0x2F0]);
  JUMPOUT(0x2233D43BCLL);
}

void sub_2233D4374(void *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x2233D43E4);
}

void sub_2233D4390()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 224);
  if (v1)
  {
    *(_QWORD *)(v0 - 216) = v1;
    JUMPOUT(0x2233D43D0);
  }
  JUMPOUT(0x2233D43D4);
}

void sub_2233D43A8()
{
  JUMPOUT(0x2233D43D4);
}

void sub_2233D43B0()
{
  JUMPOUT(0x2233D43DCLL);
}

BOOL sub_2233D43EC(uint64_t a1)
{
  uint64_t v1;
  int v4;
  unint64_t v5;
  unint64_t v6;
  const char *v8;
  size_t v9;
  unsigned __int8 v10;
  const void *v11;
  size_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  size_t v17;
  unsigned __int8 v18;
  const char *v19;
  size_t v20;
  const char *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  size_t v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  size_t v32;
  size_t v33;
  _QWORD *p_dst;
  void *v35;
  unsigned __int8 v36;
  const char *v37;
  size_t v38;
  const char *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  size_t v47;
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count *v49;
  size_t v50;
  size_t v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  char *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  char *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  _QWORD *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *p_shared_owners;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t *v154;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v156;
  int v157;
  const char *v158;
  int v159;
  const char *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  uint64_t v163;
  __int128 v164;
  std::__shared_weak_count *v165;
  char *v166;
  std::__shared_weak_count *v167;
  _QWORD *__dst;
  __int128 v169;
  char __s[37];
  _BYTE v171[24];
  __int128 v172;
  char *v173;
  size_t v174;
  unint64_t v175;
  char v176;
  _QWORD v177[5];

  v177[2] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
    return v1 != 0;
  if (*(_BYTE *)(a1 + 16) == 2)
  {
    sub_2233CFA44(&v163);
    if (**(int **)(v163 + 56) > 3)
      return v1 != 0;
    v4 = *(unsigned __int8 *)(v163 + 72);
    v5 = sub_22322F254(v163, "OSLogSurrogateAppender", 1, 0);
    v6 = v5;
    if (!v4 && v5 == 0)
      return v1 != 0;
    v154 = &v163;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v156 = std::chrono::system_clock::now().__d_.__rep_;
    v157 = 3;
    v158 = "unknown file";
    v159 = 395;
    v161 = 0;
    v162 = 0;
    v160 = "unknown function";
    sub_2245664AC((unsigned __int8 *)a1, __s);
    v8 = (const char *)(v163 + 16);
    v148 = v163 + 16;
    v150 = v163;
    if (*(char *)(v163 + 39) < 0)
    {
      v8 = *(const char **)(v163 + 16);
      v9 = *(_QWORD *)(v163 + 24);
    }
    else
    {
      v9 = *(unsigned __int8 *)(v163 + 39);
    }
    v152 = v4;
    v18 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v171);
      sub_223199C58("com.apple.cv3d", (unint64_t)v171, &xmmword_255788F40);
      if ((_BYTE)v172 && (v171[23] & 0x80000000) != 0)
        operator delete(*(void **)v171);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v19 = (const char *)&xmmword_255788F40;
    else
      v19 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v20 = byte_255788F57;
    else
      v20 = *((_QWORD *)&xmmword_255788F40 + 1);
    v21 = v8;
    *(_QWORD *)v171 = os_log_create(v19, v8);
    v22 = &v171[8];
    if (v20 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v20 >= 0x17)
    {
      v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v23 = v20 | 7;
      v24 = v23 + 1;
      v22 = operator new(v23 + 1);
      *(_QWORD *)&v171[16] = v20;
      *(_QWORD *)&v172 = v24 | 0x8000000000000000;
      *(_QWORD *)&v171[8] = v22;
    }
    else
    {
      BYTE7(v172) = v20;
      if (!v20)
      {
LABEL_36:
        v22[v20] = 0;
        BYTE8(v172) = 1;
        v25 = (char *)&v173;
        if (v9 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v9 >= 0x17)
        {
          v26 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v9 | 7) != 0x17)
            v26 = v9 | 7;
          v27 = v26 + 1;
          v25 = (char *)operator new(v26 + 1);
          v174 = v9;
          v175 = v27 | 0x8000000000000000;
          v173 = v25;
        }
        else
        {
          HIBYTE(v175) = v9;
          if (!v9)
          {
LABEL_44:
            v25[v9] = 0;
            v176 = 1;
            v28 = *(NSObject **)v171;
            if (SHIBYTE(v175) < 0)
              operator delete(v173);
            if (BYTE8(v172) && SBYTE7(v172) < 0)
              operator delete(*(void **)&v171[8]);
            if (*(_QWORD *)v171)
              os_release(*(void **)v171);
            if (!v6 || !*(_QWORD *)(v6 + 24))
            {
              os_log_type_enabled(v28, OS_LOG_TYPE_INFO);
              *(_QWORD *)v171 = 0xD04100202;
              *(_WORD *)&v171[8] = 2080;
              *(_QWORD *)&v171[10] = __s;
              v35 = (void *)_os_log_send_and_compose_impl();
              if (v35)
                free(v35);
LABEL_180:
              if (v152)
              {
                sub_2245664AC((unsigned __int8 *)a1, v171);
                sub_22322C138((uint64_t)&v154, "Outdoor room %.13s does not have room boundary. Skip associating planes.", v171);
                sub_223182C08((uint64_t)&v154);
              }
              sub_223182C08((uint64_t)&v154);
              v115 = v162;
              if (v162)
              {
                p_shared_owners = (unint64_t *)&v162->__shared_owners_;
                do
                  v117 = __ldaxr(p_shared_owners);
                while (__stlxr(v117 - 1, p_shared_owners));
                goto LABEL_235;
              }
              return v1 != 0;
            }
            v29 = _os_log_pack_size();
            v30 = (std::__shared_weak_count_vtbl *)operator new(v29, (std::align_val_t)8uLL);
            v31 = (std::__shared_weak_count *)operator new();
            v31->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v31->__shared_owners_ = 0;
            v31->__shared_weak_owners_ = 0;
            v31[1].__vftable = v30;
            *(_QWORD *)&v164 = v30;
            *((_QWORD *)&v164 + 1) = v30;
            v166 = 0;
            v167 = 0;
            v165 = v31;
            v32 = strlen(__s);
            if (v32 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v33 = v32;
            if (v32 >= 0x17)
            {
              v54 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v32 | 7) != 0x17)
                v54 = v32 | 7;
              v55 = v54 + 1;
              p_dst = operator new(v54 + 1);
              *(_QWORD *)&v169 = v33;
              *((_QWORD *)&v169 + 1) = v55 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v169) = v32;
              p_dst = &__dst;
              if (!v32)
              {
LABEL_102:
                *((_BYTE *)p_dst + v33) = 0;
                v56 = __dst;
                v177[0] = v169;
                *(_QWORD *)((char *)v177 + 7) = *(_QWORD *)((char *)&v169 + 7);
                v57 = HIBYTE(v169);
                v58 = operator new(0x38uLL);
                v58[1] = 0;
                v58[2] = 0;
                v58[3] = off_24EC1FA48;
                *v58 = &off_24EC1F9F8;
                v59 = v177[0];
                v58[4] = v56;
                v58[5] = v59;
                *(_QWORD *)((char *)v58 + 47) = *(_QWORD *)((char *)v177 + 7);
                *((_BYTE *)v58 + 55) = v57;
                v177[0] = 0;
                *(_QWORD *)((char *)v177 + 7) = 0;
                v60 = v167;
                v166 = (char *)(v58 + 3);
                v167 = (std::__shared_weak_count *)v58;
                if (v60)
                {
                  v61 = (unint64_t *)&v60->__shared_owners_;
                  do
                    v62 = __ldaxr(v61);
                  while (__stlxr(v62 - 1, v61));
                  if (!v62)
                  {
                    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                    std::__shared_weak_count::__release_weak(v60);
                  }
                }
                *(_OWORD *)v171 = v164;
                v63 = v166;
                *(_QWORD *)&v171[16] = v165;
                if (v165)
                {
                  v64 = (unint64_t *)&v165->__shared_owners_;
                  do
                    v65 = __ldxr(v64);
                  while (__stxr(v65 + 1, v64));
                }
                v66 = v167;
                *(_QWORD *)&v172 = v63;
                *((_QWORD *)&v172 + 1) = v167;
                if (v167)
                {
                  v67 = (unint64_t *)&v167->__shared_owners_;
                  do
                    v68 = __ldxr(v67);
                  while (__stxr(v68 + 1, v67));
                  v173 = v63;
                  do
                    v69 = __ldaxr(v67);
                  while (__stlxr(v69 - 1, v67));
                  if (!v69)
                  {
                    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                    std::__shared_weak_count::__release_weak(v66);
                  }
                }
                else
                {
                  v173 = v63;
                }
                v86 = v165;
                if (v165)
                {
                  v87 = (unint64_t *)&v165->__shared_owners_;
                  do
                    v88 = __ldaxr(v87);
                  while (__stlxr(v88 - 1, v87));
                  if (!v88)
                  {
                    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                    std::__shared_weak_count::__release_weak(v86);
                  }
                }
                v89 = *(_QWORD *)v171;
                if (v173[31] >= 0)
                  v90 = v173 + 8;
                else
                  v90 = (char *)*((_QWORD *)v173 + 1);
                v91 = _os_log_pack_fill();
                *(_DWORD *)v91 = 68157954;
                *(_DWORD *)(v91 + 4) = 13;
                *(_WORD *)(v91 + 8) = 2080;
                *(_QWORD *)(v91 + 10) = v90;
                v92 = operator new();
                v93 = *(unsigned __int8 *)(v150 + 39);
                v94 = v148;
                if ((v93 & 0x80u) != 0)
                {
                  v94 = *(_QWORD *)(v150 + 16);
                  v93 = *(_QWORD *)(v150 + 24);
                }
                *(_QWORD *)v92 = v89;
                *(_OWORD *)(v92 + 8) = *(_OWORD *)&v171[8];
                *(_QWORD *)&v171[8] = 0;
                *(_QWORD *)&v171[16] = 0;
                *(_OWORD *)(v92 + 24) = v172;
                v172 = 0uLL;
                *(_QWORD *)(v92 + 40) = v94;
                *(_QWORD *)(v92 + 48) = v93;
                *(_BYTE *)(v92 + 56) = 1;
                __dst = 0;
                *(_QWORD *)&v164 = v92;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v164);
                v95 = v164;
                *(_QWORD *)&v164 = 0;
                if (v95)
                {
                  v96 = *(std::__shared_weak_count **)(v95 + 32);
                  if (v96)
                  {
                    v97 = (unint64_t *)&v96->__shared_owners_;
                    do
                      v98 = __ldaxr(v97);
                    while (__stlxr(v98 - 1, v97));
                    if (!v98)
                    {
                      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                      std::__shared_weak_count::__release_weak(v96);
                    }
                  }
                  v99 = *(std::__shared_weak_count **)(v95 + 16);
                  if (v99)
                  {
                    v100 = (unint64_t *)&v99->__shared_owners_;
                    do
                      v101 = __ldaxr(v100);
                    while (__stlxr(v101 - 1, v100));
                    if (!v101)
                    {
                      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                      std::__shared_weak_count::__release_weak(v99);
                    }
                  }
                  MEMORY[0x227684CE8](v95, 0x10F0C40B62ED6C6);
                  v102 = __dst;
                  __dst = 0;
                  if (v102)
                  {
                    v103 = (std::__shared_weak_count *)v102[4];
                    if (v103)
                    {
                      v104 = (unint64_t *)&v103->__shared_owners_;
                      do
                        v105 = __ldaxr(v104);
                      while (__stlxr(v105 - 1, v104));
                      if (!v105)
                      {
                        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                        std::__shared_weak_count::__release_weak(v103);
                      }
                    }
                    v106 = (std::__shared_weak_count *)v102[2];
                    if (v106)
                    {
                      v107 = (unint64_t *)&v106->__shared_owners_;
                      do
                        v108 = __ldaxr(v107);
                      while (__stlxr(v108 - 1, v107));
                      if (!v108)
                      {
                        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                        std::__shared_weak_count::__release_weak(v106);
                      }
                    }
                    MEMORY[0x227684CE8](v102, 0x10F0C40B62ED6C6);
                  }
                }
                v109 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
                if (*((_QWORD *)&v172 + 1))
                {
                  v110 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
                  do
                    v111 = __ldaxr(v110);
                  while (__stlxr(v111 - 1, v110));
                  if (!v111)
                  {
                    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                    std::__shared_weak_count::__release_weak(v109);
                  }
                }
                v112 = *(std::__shared_weak_count **)&v171[16];
                if (*(_QWORD *)&v171[16])
                {
                  v113 = (unint64_t *)(*(_QWORD *)&v171[16] + 8);
                  do
                    v114 = __ldaxr(v113);
                  while (__stlxr(v114 - 1, v113));
                  if (!v114)
                  {
                    ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                    std::__shared_weak_count::__release_weak(v112);
                  }
                }
                goto LABEL_180;
              }
            }
            memcpy(p_dst, __s, v33);
            goto LABEL_102;
          }
        }
        memmove(v25, v21, v9);
        goto LABEL_44;
      }
    }
    memmove(v22, v19, v20);
    goto LABEL_36;
  }
  v10 = atomic_load((unsigned __int8 *)&qword_2557892F0);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
  {
    __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
    __cxa_guard_release(&qword_2557892F0);
  }
  sub_2233CFA44(v171);
  if (*(char *)(*(_QWORD *)v171 + 39) < 0)
  {
    v11 = *(const void **)(*(_QWORD *)v171 + 16);
    v12 = *(_QWORD *)(*(_QWORD *)v171 + 24);
  }
  else
  {
    v11 = (const void *)(*(_QWORD *)v171 + 16);
    v12 = *(unsigned __int8 *)(*(_QWORD *)v171 + 39);
  }
  sub_223195728((uint64_t)&unk_255789280, v11, v12, "Indoor room  %.13s does not have room boundary. Skip associating planes.", 0x48uLL);
  sub_2233CFB38(&v163);
  if (**(int **)(v163 + 56) > 5)
    return v1 != 0;
  v13 = *(unsigned __int8 *)(v163 + 72);
  v14 = sub_22322F254(v163, "OSLogSurrogateAppender", 1, 0);
  v15 = v14;
  if (!v13 && !v14)
    return v1 != 0;
  v154 = &v163;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v156 = std::chrono::system_clock::now().__d_.__rep_;
  v157 = 5;
  v158 = "unknown file";
  v159 = 399;
  v161 = 0;
  v162 = 0;
  v160 = "unknown function";
  sub_2245664AC((unsigned __int8 *)a1, __s);
  v16 = (const char *)(v163 + 16);
  v149 = v163 + 16;
  v151 = v163;
  if (*(char *)(v163 + 39) < 0)
  {
    v16 = *(const char **)(v163 + 16);
    v17 = *(_QWORD *)(v163 + 24);
  }
  else
  {
    v17 = *(unsigned __int8 *)(v163 + 39);
  }
  v153 = v13;
  v36 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v171);
    sub_223199C58("com.apple.cv3d", (unint64_t)v171, &xmmword_255788F40);
    if ((_BYTE)v172 && (v171[23] & 0x80000000) != 0)
      operator delete(*(void **)v171);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v37 = (const char *)&xmmword_255788F40;
  else
    v37 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v38 = byte_255788F57;
  else
    v38 = *((_QWORD *)&xmmword_255788F40 + 1);
  v39 = v16;
  *(_QWORD *)v171 = os_log_create(v37, v16);
  v40 = &v171[8];
  if (v38 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v38 >= 0x17)
  {
    v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v41 = v38 | 7;
    v42 = v41 + 1;
    v40 = operator new(v41 + 1);
    *(_QWORD *)&v171[16] = v38;
    *(_QWORD *)&v172 = v42 | 0x8000000000000000;
    *(_QWORD *)&v171[8] = v40;
    goto LABEL_74;
  }
  BYTE7(v172) = v38;
  if (v38)
LABEL_74:
    memmove(v40, v37, v38);
  v40[v38] = 0;
  BYTE8(v172) = 1;
  v43 = (char *)&v173;
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v17 >= 0x17)
  {
    v44 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v44 = v17 | 7;
    v45 = v44 + 1;
    v43 = (char *)operator new(v44 + 1);
    v174 = v17;
    v175 = v45 | 0x8000000000000000;
    v173 = v43;
    goto LABEL_82;
  }
  HIBYTE(v175) = v17;
  if (v17)
LABEL_82:
    memmove(v43, v39, v17);
  v43[v17] = 0;
  v176 = 1;
  v46 = *(NSObject **)v171;
  if (SHIBYTE(v175) < 0)
    operator delete(v173);
  if (BYTE8(v172) && SBYTE7(v172) < 0)
    operator delete(*(void **)&v171[8]);
  if (*(_QWORD *)v171)
    os_release(*(void **)v171);
  if (v15 && *(_QWORD *)(v15 + 24))
  {
    v47 = _os_log_pack_size();
    v48 = (std::__shared_weak_count_vtbl *)operator new(v47, (std::align_val_t)8uLL);
    v49 = (std::__shared_weak_count *)operator new();
    v49->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v49->__shared_owners_ = 0;
    v49->__shared_weak_owners_ = 0;
    v49[1].__vftable = v48;
    *(_QWORD *)&v164 = v48;
    *((_QWORD *)&v164 + 1) = v48;
    v166 = 0;
    v167 = 0;
    v165 = v49;
    v50 = strlen(__s);
    if (v50 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v51 = v50;
    if (v50 >= 0x17)
    {
      v70 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v50 | 7) != 0x17)
        v70 = v50 | 7;
      v71 = v70 + 1;
      v52 = operator new(v70 + 1);
      *(_QWORD *)&v169 = v51;
      *((_QWORD *)&v169 + 1) = v71 | 0x8000000000000000;
      __dst = v52;
    }
    else
    {
      HIBYTE(v169) = v50;
      v52 = &__dst;
      if (!v50)
      {
LABEL_121:
        *((_BYTE *)v52 + v51) = 0;
        v72 = __dst;
        v177[0] = v169;
        *(_QWORD *)((char *)v177 + 7) = *(_QWORD *)((char *)&v169 + 7);
        v73 = HIBYTE(v169);
        v74 = operator new(0x38uLL);
        v74[1] = 0;
        v74[2] = 0;
        v74[3] = off_24EC1FA48;
        *v74 = &off_24EC1F9F8;
        v75 = v177[0];
        v74[4] = v72;
        v74[5] = v75;
        *(_QWORD *)((char *)v74 + 47) = *(_QWORD *)((char *)v177 + 7);
        *((_BYTE *)v74 + 55) = v73;
        v177[0] = 0;
        *(_QWORD *)((char *)v177 + 7) = 0;
        v76 = v167;
        v166 = (char *)(v74 + 3);
        v167 = (std::__shared_weak_count *)v74;
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        *(_OWORD *)v171 = v164;
        v79 = v166;
        *(_QWORD *)&v171[16] = v165;
        if (v165)
        {
          v80 = (unint64_t *)&v165->__shared_owners_;
          do
            v81 = __ldxr(v80);
          while (__stxr(v81 + 1, v80));
        }
        v82 = v167;
        *(_QWORD *)&v172 = v79;
        *((_QWORD *)&v172 + 1) = v167;
        if (v167)
        {
          v83 = (unint64_t *)&v167->__shared_owners_;
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
          v173 = v79;
          do
            v85 = __ldaxr(v83);
          while (__stlxr(v85 - 1, v83));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        else
        {
          v173 = v79;
        }
        v118 = v165;
        if (v165)
        {
          v119 = (unint64_t *)&v165->__shared_owners_;
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 - 1, v119));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
        v121 = *(_QWORD *)v171;
        if (v173[31] >= 0)
          v122 = v173 + 8;
        else
          v122 = (char *)*((_QWORD *)v173 + 1);
        v123 = _os_log_pack_fill();
        *(_DWORD *)v123 = 68157954;
        *(_DWORD *)(v123 + 4) = 13;
        *(_WORD *)(v123 + 8) = 2080;
        *(_QWORD *)(v123 + 10) = v122;
        v124 = operator new();
        v125 = *(unsigned __int8 *)(v151 + 39);
        v126 = v149;
        if ((v125 & 0x80u) != 0)
        {
          v126 = *(_QWORD *)(v151 + 16);
          v125 = *(_QWORD *)(v151 + 24);
        }
        *(_QWORD *)v124 = v121;
        *(_OWORD *)(v124 + 8) = *(_OWORD *)&v171[8];
        *(_QWORD *)&v171[8] = 0;
        *(_QWORD *)&v171[16] = 0;
        *(_OWORD *)(v124 + 24) = v172;
        v172 = 0uLL;
        *(_QWORD *)(v124 + 40) = v126;
        *(_QWORD *)(v124 + 48) = v125;
        *(_BYTE *)(v124 + 56) = 16;
        __dst = 0;
        *(_QWORD *)&v164 = v124;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v15 + 24) + 40))(*(_QWORD *)(v15 + 24), &v164);
        v127 = v164;
        *(_QWORD *)&v164 = 0;
        if (v127)
        {
          v128 = *(std::__shared_weak_count **)(v127 + 32);
          if (v128)
          {
            v129 = (unint64_t *)&v128->__shared_owners_;
            do
              v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
            }
          }
          v131 = *(std::__shared_weak_count **)(v127 + 16);
          if (v131)
          {
            v132 = (unint64_t *)&v131->__shared_owners_;
            do
              v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
          }
          MEMORY[0x227684CE8](v127, 0x10F0C40B62ED6C6);
          v134 = __dst;
          __dst = 0;
          if (v134)
          {
            v135 = (std::__shared_weak_count *)v134[4];
            if (v135)
            {
              v136 = (unint64_t *)&v135->__shared_owners_;
              do
                v137 = __ldaxr(v136);
              while (__stlxr(v137 - 1, v136));
              if (!v137)
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }
            }
            v138 = (std::__shared_weak_count *)v134[2];
            if (v138)
            {
              v139 = (unint64_t *)&v138->__shared_owners_;
              do
                v140 = __ldaxr(v139);
              while (__stlxr(v140 - 1, v139));
              if (!v140)
              {
                ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                std::__shared_weak_count::__release_weak(v138);
              }
            }
            MEMORY[0x227684CE8](v134, 0x10F0C40B62ED6C6);
          }
        }
        v141 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
        if (*((_QWORD *)&v172 + 1))
        {
          v142 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
          if (!v143)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
          }
        }
        v144 = *(std::__shared_weak_count **)&v171[16];
        if (*(_QWORD *)&v171[16])
        {
          v145 = (unint64_t *)(*(_QWORD *)&v171[16] + 8);
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        goto LABEL_230;
      }
    }
    memcpy(v52, __s, v51);
    goto LABEL_121;
  }
  os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
  *(_QWORD *)v171 = 0xD04100202;
  *(_WORD *)&v171[8] = 2080;
  *(_QWORD *)&v171[10] = __s;
  v53 = (void *)_os_log_send_and_compose_impl();
  if (v53)
    free(v53);
LABEL_230:
  if (v153)
  {
    sub_2245664AC((unsigned __int8 *)a1, v171);
    sub_22322C138((uint64_t)&v154, "Indoor room  %.13s does not have room boundary. Skip associating planes.", v171);
    sub_223182C08((uint64_t)&v154);
  }
  sub_223182C08((uint64_t)&v154);
  v115 = v162;
  if (v162)
  {
    v147 = (unint64_t *)&v162->__shared_owners_;
    do
      v117 = __ldaxr(v147);
    while (__stlxr(v117 - 1, v147));
LABEL_235:
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  return v1 != 0;
}

void sub_2233D55B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  if (*(_BYTE *)(v7 - 168))
  {
    if (*(char *)(v7 - 169) < 0)
      operator delete(*(void **)(v7 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233D55FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  sub_22319A054(&a25);
  sub_22319A054(&a31);
  sub_223199DE8(v31 - 192);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2233D564C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  int v26;

  if (v26 < 0)
  {
    operator delete(v25);
    sub_223199DE8((uint64_t)&a25);
    sub_223182DAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a25);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2233D56C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233D5700()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 160) && *(char *)(v0 - 161) < 0)
    operator delete(*(void **)(v0 - 184));
  v1 = *(void **)(v0 - 192);
  if (v1)
    os_release(v1);
  JUMPOUT(0x2233D56F0);
}

void sub_2233D576C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2233D577C()
{
  JUMPOUT(0x2233D5788);
}

BOOL sub_2233D5790(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v6;
  float32x4_t v7;
  float32x2_t v8;
  float32x4_t v9;
  uint64_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int8x16_t v13;
  float32x2_t v14;
  float32x2_t *v15;
  float32x2_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float v19;
  float v20;
  const float *v21;
  unsigned __int8 v23;
  const void *v24;
  size_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  const char *v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  const char *v35;
  size_t v36;
  _BYTE *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  size_t v48;
  std::__shared_weak_count_vtbl *v49;
  std::__shared_weak_count *v50;
  size_t v51;
  size_t v52;
  _QWORD *p_dst;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char v58;
  _QWORD *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  void *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  const char *__src;
  _QWORD v104[3];
  int v105;
  const char *v106;
  int v107;
  const char *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  __int128 v112;
  std::__shared_weak_count *v113;
  char *v114;
  std::__shared_weak_count *v115;
  _QWORD *__dst;
  __int128 v117;
  char __s[37];
  _BYTE v119[24];
  __int128 v120;
  void *v121[2];
  unint64_t v122;
  char v123;
  _QWORD v124[5];
  float32x2x3_t v125;

  v124[2] = *MEMORY[0x24BDAC8D0];
  v6 = sub_223340F28(*(_QWORD **)a1, (uint64_t)a2);
  if (!v6)
  {
    v23 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_2233CFA44(v119);
    if (*(char *)(*(_QWORD *)v119 + 39) < 0)
    {
      v24 = *(const void **)(*(_QWORD *)v119 + 16);
      v25 = *(_QWORD *)(*(_QWORD *)v119 + 24);
    }
    else
    {
      v24 = (const void *)(*(_QWORD *)v119 + 16);
      v25 = *(unsigned __int8 *)(*(_QWORD *)v119 + 39);
    }
    sub_223195728((uint64_t)&unk_255789280, v24, v25, "KF %.13s exists in lookup but not segmentation data.", 0x34uLL);
    sub_2233CFB38(&v111);
    if (**(int **)(v111 + 56) > 5)
      return 0;
    v26 = *(unsigned __int8 *)(v111 + 72);
    v27 = sub_22322F254(v111, "OSLogSurrogateAppender", 1, 0);
    v28 = v27;
    if (!v26 && !v27)
      return 0;
    v104[0] = &v111;
    v104[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v104[2] = std::chrono::system_clock::now().__d_.__rep_;
    v105 = 5;
    v106 = "unknown file";
    v107 = 377;
    v109 = 0;
    v110 = 0;
    v108 = "unknown function";
    sub_2245664AC(a2, __s);
    v29 = v111;
    v30 = v111 + 16;
    if (*(char *)(v111 + 39) < 0)
    {
      v32 = *(const char **)(v111 + 16);
      v31 = *(_QWORD *)(v111 + 24);
      v34 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v34 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      v31 = *(unsigned __int8 *)(v111 + 39);
      v32 = (const char *)(*(_QWORD *)v104[0] + 16);
      v33 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v33 & 1) != 0)
        goto LABEL_16;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v119);
      sub_223199C58("com.apple.cv3d", (unint64_t)v119, &xmmword_255788F40);
      if ((_BYTE)v120 && (v119[23] & 0x80000000) != 0)
        operator delete(*(void **)v119);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_16:
    if (byte_255788F57 >= 0)
      v35 = (const char *)&xmmword_255788F40;
    else
      v35 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v36 = byte_255788F57;
    else
      v36 = *((_QWORD *)&xmmword_255788F40 + 1);
    __src = v32;
    *(_QWORD *)v119 = os_log_create(v35, v32);
    v37 = &v119[8];
    if (v36 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v36 >= 0x17)
    {
      v38 = v28;
      v39 = v29;
      v40 = v30;
      v41 = v26;
      v42 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v36 | 7) != 0x17)
        v42 = v36 | 7;
      v43 = v42 + 1;
      v37 = operator new(v42 + 1);
      *(_QWORD *)&v119[16] = v36;
      *(_QWORD *)&v120 = v43 | 0x8000000000000000;
      *(_QWORD *)&v119[8] = v37;
      v26 = v41;
      v30 = v40;
      v29 = v39;
      v28 = v38;
    }
    else
    {
      BYTE7(v120) = v36;
      if (!v36)
      {
LABEL_30:
        v37[v36] = 0;
        BYTE8(v120) = 1;
        v44 = v121;
        if (v31 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v31 >= 0x17)
        {
          v45 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v31 | 7) != 0x17)
            v45 = v31 | 7;
          v46 = v45 + 1;
          v44 = (void **)operator new(v45 + 1);
          v121[1] = (void *)v31;
          v122 = v46 | 0x8000000000000000;
          v121[0] = v44;
        }
        else
        {
          HIBYTE(v122) = v31;
          if (!v31)
          {
LABEL_38:
            *((_BYTE *)v44 + v31) = 0;
            v123 = 1;
            v47 = *(NSObject **)v119;
            if (SHIBYTE(v122) < 0)
              operator delete(v121[0]);
            if (BYTE8(v120) && SBYTE7(v120) < 0)
              operator delete(*(void **)&v119[8]);
            if (*(_QWORD *)v119)
              os_release(*(void **)v119);
            if (!v28 || !*(_QWORD *)(v28 + 24))
            {
              os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
              *(_QWORD *)v119 = 0xD04100202;
              *(_WORD *)&v119[8] = 2080;
              *(_QWORD *)&v119[10] = __s;
              v54 = (void *)_os_log_send_and_compose_impl();
              if (v54)
                free(v54);
              goto LABEL_119;
            }
            v48 = _os_log_pack_size();
            v49 = (std::__shared_weak_count_vtbl *)operator new(v48, (std::align_val_t)8uLL);
            v50 = (std::__shared_weak_count *)operator new();
            v50->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v50->__shared_owners_ = 0;
            v50->__shared_weak_owners_ = 0;
            v50[1].__vftable = v49;
            *(_QWORD *)&v112 = v49;
            *((_QWORD *)&v112 + 1) = v49;
            v114 = 0;
            v115 = 0;
            v113 = v50;
            v51 = strlen(__s);
            if (v51 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v52 = v51;
            if (v51 >= 0x17)
            {
              v55 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v51 | 7) != 0x17)
                v55 = v51 | 7;
              v56 = v55 + 1;
              p_dst = operator new(v55 + 1);
              *(_QWORD *)&v117 = v52;
              *((_QWORD *)&v117 + 1) = v56 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v117) = v51;
              p_dst = &__dst;
              if (!v51)
              {
LABEL_57:
                *((_BYTE *)p_dst + v52) = 0;
                v57 = __dst;
                v124[0] = v117;
                *(_QWORD *)((char *)v124 + 7) = *(_QWORD *)((char *)&v117 + 7);
                v58 = HIBYTE(v117);
                v59 = operator new(0x38uLL);
                v59[1] = 0;
                v59[2] = 0;
                v59[3] = off_24EC1FA48;
                *v59 = &off_24EC1F9F8;
                v60 = v124[0];
                v59[4] = v57;
                v59[5] = v60;
                *(_QWORD *)((char *)v59 + 47) = *(_QWORD *)((char *)v124 + 7);
                *((_BYTE *)v59 + 55) = v58;
                v124[0] = 0;
                *(_QWORD *)((char *)v124 + 7) = 0;
                v61 = v115;
                v114 = (char *)(v59 + 3);
                v115 = (std::__shared_weak_count *)v59;
                if (v61)
                {
                  p_shared_owners = (unint64_t *)&v61->__shared_owners_;
                  do
                    v63 = __ldaxr(p_shared_owners);
                  while (__stlxr(v63 - 1, p_shared_owners));
                  if (!v63)
                  {
                    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                    std::__shared_weak_count::__release_weak(v61);
                  }
                }
                *(_OWORD *)v119 = v112;
                v64 = v114;
                *(_QWORD *)&v119[16] = v113;
                if (v113)
                {
                  v65 = (unint64_t *)&v113->__shared_owners_;
                  do
                    v66 = __ldxr(v65);
                  while (__stxr(v66 + 1, v65));
                }
                v67 = v115;
                *(_QWORD *)&v120 = v64;
                *((_QWORD *)&v120 + 1) = v115;
                if (v115)
                {
                  v68 = (unint64_t *)&v115->__shared_owners_;
                  do
                    v69 = __ldxr(v68);
                  while (__stxr(v69 + 1, v68));
                  v121[0] = v64;
                  do
                    v70 = __ldaxr(v68);
                  while (__stlxr(v70 - 1, v68));
                  if (!v70)
                  {
                    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                    std::__shared_weak_count::__release_weak(v67);
                  }
                }
                else
                {
                  v121[0] = v64;
                }
                v71 = v113;
                if (v113)
                {
                  v72 = (unint64_t *)&v113->__shared_owners_;
                  do
                    v73 = __ldaxr(v72);
                  while (__stlxr(v73 - 1, v72));
                  if (!v73)
                  {
                    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                    std::__shared_weak_count::__release_weak(v71);
                  }
                }
                v74 = *(_QWORD *)v119;
                if (*((char *)v121[0] + 31) >= 0)
                  v75 = (char *)v121[0] + 8;
                else
                  v75 = (char *)*((_QWORD *)v121[0] + 1);
                v76 = _os_log_pack_fill();
                *(_DWORD *)v76 = 68157954;
                *(_DWORD *)(v76 + 4) = 13;
                *(_WORD *)(v76 + 8) = 2080;
                *(_QWORD *)(v76 + 10) = v75;
                v77 = operator new();
                v78 = *(unsigned __int8 *)(v29 + 39);
                if ((v78 & 0x80u) == 0)
                  v79 = v30;
                else
                  v79 = *(_QWORD *)(v29 + 16);
                if ((v78 & 0x80u) != 0)
                  v78 = *(_QWORD *)(v29 + 24);
                *(_QWORD *)v77 = v74;
                *(_OWORD *)(v77 + 8) = *(_OWORD *)&v119[8];
                *(_QWORD *)&v119[8] = 0;
                *(_QWORD *)&v119[16] = 0;
                *(_OWORD *)(v77 + 24) = v120;
                v120 = 0uLL;
                *(_QWORD *)(v77 + 40) = v79;
                *(_QWORD *)(v77 + 48) = v78;
                *(_BYTE *)(v77 + 56) = 16;
                __dst = 0;
                *(_QWORD *)&v112 = v77;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v28 + 24) + 40))(*(_QWORD *)(v28 + 24), &v112);
                v80 = v112;
                *(_QWORD *)&v112 = 0;
                if (v80)
                {
                  v81 = *(std::__shared_weak_count **)(v80 + 32);
                  if (v81)
                  {
                    v82 = (unint64_t *)&v81->__shared_owners_;
                    do
                      v83 = __ldaxr(v82);
                    while (__stlxr(v83 - 1, v82));
                    if (!v83)
                    {
                      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                      std::__shared_weak_count::__release_weak(v81);
                    }
                  }
                  v84 = *(std::__shared_weak_count **)(v80 + 16);
                  if (v84)
                  {
                    v85 = (unint64_t *)&v84->__shared_owners_;
                    do
                      v86 = __ldaxr(v85);
                    while (__stlxr(v86 - 1, v85));
                    if (!v86)
                    {
                      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                      std::__shared_weak_count::__release_weak(v84);
                    }
                  }
                  MEMORY[0x227684CE8](v80, 0x10F0C40B62ED6C6);
                  v87 = __dst;
                  __dst = 0;
                  if (v87)
                  {
                    v88 = (std::__shared_weak_count *)v87[4];
                    if (v88)
                    {
                      v89 = (unint64_t *)&v88->__shared_owners_;
                      do
                        v90 = __ldaxr(v89);
                      while (__stlxr(v90 - 1, v89));
                      if (!v90)
                      {
                        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                        std::__shared_weak_count::__release_weak(v88);
                      }
                    }
                    v91 = (std::__shared_weak_count *)v87[2];
                    if (v91)
                    {
                      v92 = (unint64_t *)&v91->__shared_owners_;
                      do
                        v93 = __ldaxr(v92);
                      while (__stlxr(v93 - 1, v92));
                      if (!v93)
                      {
                        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                        std::__shared_weak_count::__release_weak(v91);
                      }
                    }
                    MEMORY[0x227684CE8](v87, 0x10F0C40B62ED6C6);
                  }
                }
                v94 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
                if (*((_QWORD *)&v120 + 1))
                {
                  v95 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
                  do
                    v96 = __ldaxr(v95);
                  while (__stlxr(v96 - 1, v95));
                  if (!v96)
                  {
                    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                    std::__shared_weak_count::__release_weak(v94);
                  }
                }
                v97 = *(std::__shared_weak_count **)&v119[16];
                if (*(_QWORD *)&v119[16])
                {
                  v98 = (unint64_t *)(*(_QWORD *)&v119[16] + 8);
                  do
                    v99 = __ldaxr(v98);
                  while (__stlxr(v99 - 1, v98));
                  if (!v99)
                  {
                    ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                    std::__shared_weak_count::__release_weak(v97);
                  }
                }
LABEL_119:
                if (v26)
                {
                  sub_2245664AC(a2, v119);
                  sub_22322C138((uint64_t)v104, "KF %.13s exists in lookup but not segmentation data.", v119);
                  sub_223182C08((uint64_t)v104);
                }
                sub_223182C08((uint64_t)v104);
                v100 = v110;
                if (v110)
                {
                  v101 = (unint64_t *)&v110->__shared_owners_;
                  do
                    v102 = __ldaxr(v101);
                  while (__stlxr(v102 - 1, v101));
                  if (!v102)
                  {
                    ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                    std::__shared_weak_count::__release_weak(v100);
                  }
                }
                return 0;
              }
            }
            memcpy(p_dst, __s, v52);
            goto LABEL_57;
          }
        }
        memmove(v44, __src, v31);
        goto LABEL_38;
      }
    }
    memmove(v37, v35, v36);
    goto LABEL_30;
  }
  v10 = v6[4];
  v11.i32[0] = *(_DWORD *)(v10 + 128);
  v12 = *(float32x2_t *)(v10 + 136);
  v8.i32[0] = *(_DWORD *)(v10 + 160);
  v9.i64[0] = *(_QWORD *)(v10 + 168);
  v9.i32[2] = *(_DWORD *)(v10 + 176);
  v13 = (int8x16_t)vnegq_f32(v9);
  v11.i32[1] = *(_DWORD *)(v10 + 144);
  v14 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)(v10 + 120), (int32x2_t)v12), *(float *)v13.i32), (float32x2_t)vzip2_s32(*(int32x2_t *)(v10 + 120), (int32x2_t)v12), *(float32x2_t *)v9.f32, 1), v11, v9, 2);
  *(float32x2_t *)v7.f32 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(v10 + 152), *(float32x2_t *)v13.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v10 + 152), 1), *(float32x2_t *)v9.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL), v8);
  v15 = *(float32x2_t **)(a1 + 8);
  v12.i32[0] = v15[1].i32[0];
  v16 = v15[2];
  v8.i32[0] = v15[3].i32[0];
  v13.i32[0] = v15[5].i32[0];
  *(float32x2_t *)v17.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*v15, v14.f32[0]), v16, v14, 1), v15[4], v7.f32[0]);
  *(float32x2_t *)&v17.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v12, v14), v8, v14, 1), *(float32x2_t *)v7.f32, *(float32x2_t *)v13.i8);
  *(float32x2_t *)v7.f32 = v15[6];
  v7.i32[2] = v15[7].i32[0];
  v18 = (int8x16_t)vaddq_f32(v17, v7);
  v16.i32[0] = *(_DWORD *)(a3 + 140);
  v19 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a3 + 132), *(float32x2_t *)v18.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1), *(float32x2_t *)(a3 + 132), 1), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), v16).f32[0];
  v20 = *(float *)(a3 + 96);
  if (v19 >= v20 && v19 <= (float)(v20 + *(float *)(a3 + 100)))
  {
    v21 = (const float *)(a3 + 108);
    v125 = vld3_f32(v21);
    *(float32x2_t *)v119 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v125.val[0], *(float *)v18.i32), v125.val[1], *(float32x2_t *)v18.i8, 1), v125.val[2], (float32x4_t)v18, 2);
    return (int)sub_223EA98C0((float *)v119, (float **)a3) >= 0;
  }
  return 0;
}

void sub_2233D6224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 168))
  {
    if (*(char *)(v5 - 169) < 0)
      operator delete(*(void **)(v5 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233D6264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  sub_22319A054(&a23);
  sub_22319A054(&a29);
  sub_223199DE8(v29 - 192);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2233D6290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_223199DE8(v5 - 192);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233D62AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  int v24;

  if (v24 < 0)
  {
    operator delete(v23);
    sub_223199DE8((uint64_t)&a23);
    sub_223182DAC((uint64_t)&a13);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a23);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2233D631C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233D6330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233D63BC@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  BOOL v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  int v34;
  unsigned __int8 v35;
  char *isa;
  size_t isa_high;
  int v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  const char *v42;
  size_t v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  const char *v46;
  size_t v47;
  __int128 *v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  size_t v55;
  NSObject *v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  unint64_t v61;
  os_log_t v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v92;
  unsigned __int8 *v93;
  uint64_t v94;
  _QWORD *v95;
  int v96;
  _QWORD v97[3];
  int v98;
  const char *v99;
  int v100;
  const char *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104[5];
  int v105;
  uint64_t v106;
  uint64_t v107;
  os_log_t v108;
  __int128 v109;
  __int128 v110;
  void *v111[2];
  unint64_t v112;
  char v113;
  uint64_t v114;

  v4 = a1;
  v114 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)a1 + 2);
  v104[1] = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 6);
  v104[2] = v6;
  v104[3] = 0;
  v104[4] = 0;
  v105 = 728337608;
  kdebug_trace();
  *(_BYTE *)a3 = 0;
  *((_BYTE *)a3 + 40) = 0;
  v7 = v4 + 112;
  if (v4[128])
  {
    *((_BYTE *)a3 + 40) = 1;
    a3[3] = 0;
    a3[4] = 0;
    a3[2] = 0;
    *(_OWORD *)a3 = *(_OWORD *)v7;
  }
  v8 = *a2;
  v9 = a2[1];
  if (*a2 == v9)
    return kdebug_trace();
  v95 = a3;
  v96 = 0;
  v92 = a3 + 2;
  v93 = v4;
  v10 = v4 + 8;
  v11 = v4 + 32;
  do
  {
    if (!*(_BYTE *)(v8 + 140))
      goto LABEL_6;
    if (!v4[128]
      || (*(_QWORD *)(v8 + 124) == *(_QWORD *)v7 ? (v12 = *(_QWORD *)(v8 + 132) == *((_QWORD *)v7 + 1)) : (v12 = 0), !v12))
    {
      v13 = *(unsigned __int8 **)v10;
      if (*(_QWORD *)v10)
        goto LABEL_14;
      goto LABEL_54;
    }
    if (!*((_BYTE *)a3 + 40))
      sub_22324A974();
    v18 = (_OWORD *)a3[3];
    v17 = a3[4];
    if ((unint64_t)v18 < v17)
    {
      *v18 = *(_OWORD *)v8;
      v19 = v18 + 1;
      goto LABEL_53;
    }
    v20 = (_OWORD *)*v92;
    v21 = ((uint64_t)v18 - *v92) >> 4;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 60)
      sub_22316E078();
    v23 = v17 - (_QWORD)v20;
    if (v23 >> 3 > v22)
      v22 = v23 >> 3;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
      v24 = 0xFFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 60)
        sub_223174E94();
      v25 = (char *)operator new(16 * v24);
      v26 = &v25[16 * v21];
      *(_OWORD *)v26 = *(_OWORD *)v8;
      v27 = (uint64_t)v26;
      if (v18 == v20)
      {
LABEL_51:
        v28 = &v25[16 * v24];
        v19 = v26 + 16;
        v4 = v93;
        a3 = v95;
        v95[2] = v27;
        v95[3] = v26 + 16;
        v95[4] = v28;
        if (!v18)
          goto LABEL_53;
LABEL_52:
        operator delete(v18);
        goto LABEL_53;
      }
    }
    else
    {
      v25 = 0;
      v26 = (char *)(16 * v21);
      *(_OWORD *)(16 * v21) = *(_OWORD *)v8;
      v27 = 16 * v21;
      if (v18 == v20)
        goto LABEL_51;
    }
    do
    {
      *(_OWORD *)(v27 - 16) = *(v18 - 1);
      v27 -= 16;
      --v18;
    }
    while (v18 != v20);
    v18 = (_OWORD *)*v92;
    v33 = &v25[16 * v24];
    v19 = v26 + 16;
    v4 = v93;
    a3 = v95;
    v95[2] = v27;
    v95[3] = v26 + 16;
    v95[4] = v33;
    if (v18)
      goto LABEL_52;
LABEL_53:
    a3[3] = v19;
    v13 = *(unsigned __int8 **)v10;
    if (*(_QWORD *)v10)
    {
LABEL_14:
      v14 = v10;
      do
      {
        v15 = v13[32];
        v16 = *(unsigned __int8 *)(v8 + 124);
        if (v15 != v16)
          goto LABEL_32;
        v15 = v13[33];
        v16 = *(unsigned __int8 *)(v8 + 125);
        if (v15 != v16)
          goto LABEL_32;
        v15 = v13[34];
        v16 = *(unsigned __int8 *)(v8 + 126);
        if (v15 != v16)
          goto LABEL_32;
        v15 = v13[35];
        v16 = *(unsigned __int8 *)(v8 + 127);
        if (v15 != v16)
          goto LABEL_32;
        v15 = v13[36];
        v16 = *(unsigned __int8 *)(v8 + 128);
        if (v15 != v16)
          goto LABEL_32;
        v15 = v13[37];
        v16 = *(unsigned __int8 *)(v8 + 129);
        if (v15 != v16)
          goto LABEL_32;
        v15 = v13[38];
        v16 = *(unsigned __int8 *)(v8 + 130);
        if (v15 != v16)
          goto LABEL_32;
        v15 = v13[39];
        v16 = *(unsigned __int8 *)(v8 + 131);
        if (v15 != v16)
          goto LABEL_32;
        v15 = v13[40];
        v16 = *(unsigned __int8 *)(v8 + 132);
        if (v15 != v16)
          goto LABEL_32;
        v15 = v13[41];
        v16 = *(unsigned __int8 *)(v8 + 133);
        if (v15 != v16)
          goto LABEL_32;
        v15 = v13[42];
        v16 = *(unsigned __int8 *)(v8 + 134);
        if (v15 != v16)
          goto LABEL_32;
        v15 = v13[43];
        v16 = *(unsigned __int8 *)(v8 + 135);
        if (v15 != v16)
          goto LABEL_32;
        v15 = v13[44];
        v16 = *(unsigned __int8 *)(v8 + 136);
        if (v15 != v16)
          goto LABEL_32;
        v15 = v13[45];
        v16 = *(unsigned __int8 *)(v8 + 137);
        if (v15 == v16
          && (v15 = v13[46], v16 = *(unsigned __int8 *)(v8 + 138), v15 == v16)
          && (v15 = v13[47], v16 = *(unsigned __int8 *)(v8 + 139), v15 == v16))
        {
          v14 = v13;
        }
        else
        {
LABEL_32:
          if (v15 < v16)
            v13 += 8;
          else
            v14 = v13;
        }
        v13 = *(unsigned __int8 **)v13;
      }
      while (v13);
      if (v14 != v10)
      {
        v4 = v93;
        a3 = v95;
        if (((char)sub_22319835C((unsigned __int8 *)(v8 + 124), v14 + 32) & 0x80000000) == 0)
          goto LABEL_6;
      }
    }
LABEL_54:
    v29 = *(unsigned __int8 **)v11;
    if (!*(_QWORD *)v11)
      goto LABEL_5;
    v30 = v11;
    do
    {
      v31 = v29[32];
      v32 = *(unsigned __int8 *)(v8 + 124);
      if (v31 != v32)
        goto LABEL_73;
      v31 = v29[33];
      v32 = *(unsigned __int8 *)(v8 + 125);
      if (v31 != v32)
        goto LABEL_73;
      v31 = v29[34];
      v32 = *(unsigned __int8 *)(v8 + 126);
      if (v31 != v32)
        goto LABEL_73;
      v31 = v29[35];
      v32 = *(unsigned __int8 *)(v8 + 127);
      if (v31 != v32)
        goto LABEL_73;
      v31 = v29[36];
      v32 = *(unsigned __int8 *)(v8 + 128);
      if (v31 != v32)
        goto LABEL_73;
      v31 = v29[37];
      v32 = *(unsigned __int8 *)(v8 + 129);
      if (v31 != v32)
        goto LABEL_73;
      v31 = v29[38];
      v32 = *(unsigned __int8 *)(v8 + 130);
      if (v31 != v32)
        goto LABEL_73;
      v31 = v29[39];
      v32 = *(unsigned __int8 *)(v8 + 131);
      if (v31 != v32)
        goto LABEL_73;
      v31 = v29[40];
      v32 = *(unsigned __int8 *)(v8 + 132);
      if (v31 != v32)
        goto LABEL_73;
      v31 = v29[41];
      v32 = *(unsigned __int8 *)(v8 + 133);
      if (v31 != v32)
        goto LABEL_73;
      v31 = v29[42];
      v32 = *(unsigned __int8 *)(v8 + 134);
      if (v31 != v32)
        goto LABEL_73;
      v31 = v29[43];
      v32 = *(unsigned __int8 *)(v8 + 135);
      if (v31 != v32)
        goto LABEL_73;
      v31 = v29[44];
      v32 = *(unsigned __int8 *)(v8 + 136);
      if (v31 != v32)
        goto LABEL_73;
      v31 = v29[45];
      v32 = *(unsigned __int8 *)(v8 + 137);
      if (v31 == v32
        && (v31 = v29[46], v32 = *(unsigned __int8 *)(v8 + 138), v31 == v32)
        && (v31 = v29[47], v32 = *(unsigned __int8 *)(v8 + 139), v31 == v32))
      {
        v30 = v29;
      }
      else
      {
LABEL_73:
        if (v31 < v32)
          v29 += 8;
        else
          v30 = v29;
      }
      v29 = *(unsigned __int8 **)v29;
    }
    while (v29);
    if (v30 == v11 || (v4 = v93, a3 = v95, (char)sub_22319835C((unsigned __int8 *)(v8 + 124), v30 + 32) < 0))
LABEL_5:
      ++v96;
LABEL_6:
    v8 += 192;
  }
  while (v8 != v9);
  v34 = v96;
  if (v96)
  {
    v35 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_2233CFA44(&v108);
    if (SHIBYTE(v108[4].isa) < 0)
    {
      isa = (char *)v108[2].isa;
      isa_high = (size_t)v108[3].isa;
    }
    else
    {
      isa = (char *)&v108[2];
      isa_high = HIBYTE(v108[4].isa);
    }
    sub_223195728((uint64_t)&unk_255789280, isa, isa_high, "%u mesh chunks are associated to rooms that are missing from the scene query state", 0x52uLL);
    sub_2233CFB38(v104);
    if (**(int **)(v104[0] + 56) <= 5)
    {
      v38 = *(unsigned __int8 *)(v104[0] + 72);
      v39 = sub_22322F254(v104[0], "OSLogSurrogateAppender", 1, 0);
      v40 = v39;
      if (v38 || v39)
      {
        v97[0] = v104;
        v97[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v97[2] = std::chrono::system_clock::now().__d_.__rep_;
        v98 = 5;
        v99 = "unknown file";
        v100 = 663;
        v102 = 0;
        v103 = 0;
        v101 = "unknown function";
        v41 = v104[0];
        v42 = (const char *)(v104[0] + 16);
        v94 = v104[0] + 16;
        if (*(char *)(v104[0] + 39) < 0)
        {
          v42 = *(const char **)(v104[0] + 16);
          v43 = *(_QWORD *)(v104[0] + 24);
          v45 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v45 & 1) == 0)
          {
LABEL_183:
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)&v108);
              sub_223199C58("com.apple.cv3d", (unint64_t)&v108, &xmmword_255788F40);
              if ((_BYTE)v110 && SHIBYTE(v109) < 0)
                operator delete(v108);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
              v34 = v96;
            }
          }
        }
        else
        {
          v43 = *(unsigned __int8 *)(v104[0] + 39);
          v44 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v44 & 1) == 0)
            goto LABEL_183;
        }
        if (byte_255788F57 >= 0)
          v46 = (const char *)&xmmword_255788F40;
        else
          v46 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v47 = byte_255788F57;
        else
          v47 = *((_QWORD *)&xmmword_255788F40 + 1);
        v108 = os_log_create(v46, v42);
        v48 = &v109;
        if (v47 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v47 >= 0x17)
        {
          v49 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v47 | 7) != 0x17)
            v49 = v47 | 7;
          v50 = v49 + 1;
          v48 = (__int128 *)operator new(v49 + 1);
          *((_QWORD *)&v109 + 1) = v47;
          *(_QWORD *)&v110 = v50 | 0x8000000000000000;
          *(_QWORD *)&v109 = v48;
          v34 = v96;
        }
        else
        {
          BYTE7(v110) = v47;
          if (!v47)
          {
LABEL_110:
            *((_BYTE *)v48 + v47) = 0;
            BYTE8(v110) = 1;
            v51 = v111;
            if (v43 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v43 >= 0x17)
            {
              v52 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v43 | 7) != 0x17)
                v52 = v43 | 7;
              v53 = v52 + 1;
              v51 = (void **)operator new(v52 + 1);
              v111[1] = (void *)v43;
              v112 = v53 | 0x8000000000000000;
              v111[0] = v51;
            }
            else
            {
              HIBYTE(v112) = v43;
              if (!v43)
              {
LABEL_118:
                *((_BYTE *)v51 + v43) = 0;
                v113 = 1;
                v54 = v108;
                if (SHIBYTE(v112) < 0)
                  operator delete(v111[0]);
                if (BYTE8(v110) && SBYTE7(v110) < 0)
                  operator delete((void *)v109);
                if (v108)
                  os_release(v108);
                if (v40 && *(_QWORD *)(v40 + 24))
                {
                  v55 = _os_log_pack_size();
                  v56 = operator new(v55, (std::align_val_t)8uLL);
                  v57 = (std::__shared_weak_count *)operator new();
                  v58 = v57;
                  v57->__shared_owners_ = 0;
                  p_shared_owners = (unint64_t *)&v57->__shared_owners_;
                  v57->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                  v57->__shared_weak_owners_ = 0;
                  v57[1].__vftable = (std::__shared_weak_count_vtbl *)v56;
                  v108 = v56;
                  *(_QWORD *)&v109 = v56;
                  *((_QWORD *)&v109 + 1) = v57;
                  do
                    v60 = __ldxr(p_shared_owners);
                  while (__stxr(v60 + 1, p_shared_owners));
                  v110 = 0uLL;
                  v111[0] = 0;
                  do
                    v61 = __ldaxr(p_shared_owners);
                  while (__stlxr(v61 - 1, p_shared_owners));
                  if (!v61)
                  {
                    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                    std::__shared_weak_count::__release_weak(v58);
                  }
                  v62 = v108;
                  v63 = (_DWORD *)_os_log_pack_fill();
                  *v63 = 67109120;
                  v63[1] = v34;
                  v64 = operator new();
                  v65 = *(unsigned __int8 *)(v41 + 39);
                  v66 = v94;
                  if ((v65 & 0x80u) != 0)
                  {
                    v66 = *(_QWORD *)(v41 + 16);
                    v65 = *(_QWORD *)(v41 + 24);
                  }
                  *(_QWORD *)v64 = v62;
                  *(_OWORD *)(v64 + 8) = v109;
                  v109 = 0uLL;
                  *(_OWORD *)(v64 + 24) = v110;
                  v110 = 0uLL;
                  *(_QWORD *)(v64 + 40) = v66;
                  *(_QWORD *)(v64 + 48) = v65;
                  *(_BYTE *)(v64 + 56) = 16;
                  v106 = 0;
                  v107 = v64;
                  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v40 + 24) + 40))(*(_QWORD *)(v40 + 24), &v107);
                  v67 = v107;
                  v107 = 0;
                  if (v67)
                  {
                    v68 = *(std::__shared_weak_count **)(v67 + 32);
                    if (v68)
                    {
                      v69 = (unint64_t *)&v68->__shared_owners_;
                      do
                        v70 = __ldaxr(v69);
                      while (__stlxr(v70 - 1, v69));
                      if (!v70)
                      {
                        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                        std::__shared_weak_count::__release_weak(v68);
                      }
                    }
                    v71 = *(std::__shared_weak_count **)(v67 + 16);
                    if (v71)
                    {
                      v72 = (unint64_t *)&v71->__shared_owners_;
                      do
                        v73 = __ldaxr(v72);
                      while (__stlxr(v73 - 1, v72));
                      if (!v73)
                      {
                        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                        std::__shared_weak_count::__release_weak(v71);
                      }
                    }
                    MEMORY[0x227684CE8](v67, 0x10F0C40B62ED6C6);
                    v74 = v106;
                    v106 = 0;
                    if (v74)
                    {
                      v75 = *(std::__shared_weak_count **)(v74 + 32);
                      if (v75)
                      {
                        v76 = (unint64_t *)&v75->__shared_owners_;
                        do
                          v77 = __ldaxr(v76);
                        while (__stlxr(v77 - 1, v76));
                        if (!v77)
                        {
                          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                          std::__shared_weak_count::__release_weak(v75);
                        }
                      }
                      v78 = *(std::__shared_weak_count **)(v74 + 16);
                      if (v78)
                      {
                        v79 = (unint64_t *)&v78->__shared_owners_;
                        do
                          v80 = __ldaxr(v79);
                        while (__stlxr(v80 - 1, v79));
                        if (!v80)
                        {
                          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                          std::__shared_weak_count::__release_weak(v78);
                        }
                      }
                      MEMORY[0x227684CE8](v74, 0x10F0C40B62ED6C6);
                    }
                  }
                  v81 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
                  if (*((_QWORD *)&v110 + 1))
                  {
                    v82 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
                    do
                      v83 = __ldaxr(v82);
                    while (__stlxr(v83 - 1, v82));
                    if (!v83)
                    {
                      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                      std::__shared_weak_count::__release_weak(v81);
                    }
                  }
                  v84 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
                  if (*((_QWORD *)&v109 + 1))
                  {
                    v85 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
                    do
                      v86 = __ldaxr(v85);
                    while (__stlxr(v86 - 1, v85));
                    if (!v86)
                    {
                      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                      std::__shared_weak_count::__release_weak(v84);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v54, OS_LOG_TYPE_ERROR);
                  LODWORD(v108) = 67109120;
                  HIDWORD(v108) = v34;
                  v87 = (void *)_os_log_send_and_compose_impl();
                  if (v87)
                    free(v87);
                }
                if (v38)
                {
                  sub_22322C138((uint64_t)v97, "%u mesh chunks are associated to rooms that are missing from the scene query state", v34);
                  sub_223182C08((uint64_t)v97);
                }
                sub_223182C08((uint64_t)v97);
                v88 = v103;
                if (v103)
                {
                  v89 = (unint64_t *)&v103->__shared_owners_;
                  do
                    v90 = __ldaxr(v89);
                  while (__stlxr(v90 - 1, v89));
                  if (!v90)
                  {
                    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                    std::__shared_weak_count::__release_weak(v88);
                  }
                }
                return kdebug_trace();
              }
            }
            memmove(v51, v42, v43);
            goto LABEL_118;
          }
        }
        memmove(v48, v46, v47);
        goto LABEL_110;
      }
    }
  }
  return kdebug_trace();
}

void sub_2233D700C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  void *v28;

  if (*(_BYTE *)(v26 - 152) && *(char *)(v26 - 153) < 0)
    operator delete(*(void **)(v26 - 176));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a16);
  if (*(_BYTE *)(a14 + 40))
  {
    v28 = *a12;
    if (*a12)
    {
      *(_QWORD *)(a14 + 24) = v28;
      operator delete(v28);
    }
  }
  sub_2231874DC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t *sub_2233D7140(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(char **)v4;
    v10 = (uint64_t)&v6[-*(_QWORD *)v4];
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + 1;
    if (v12 >> 62)
      sub_22316E078();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_223174E94();
      v15 = operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 4;
      if (v17 < 0x2C)
        goto LABEL_27;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 2) + 1;
      v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
      v7 = &v6[-v19];
      v16 = (_DWORD *)((char *)v16 - v19);
      v20 = &v15[4 * v11 - 16];
      v21 = v6 - 16;
      v22 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          v24 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v6 = *a2;
    v8 = v6 + 4;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

uint64_t sub_2233D72B0(float ***a1)
{
  float v1;
  __int32 v2;
  float **v3;
  float *v4;
  float *v5;
  float *v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  float *v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  double v19;
  float *v20;
  float *v21;
  uint64_t v22;
  float *v23;
  double v24;
  float **v25;
  float *v26;
  float *v27;
  float *v28;
  float *v29;
  BOOL v30;
  int v31;
  int v32;
  uint64_t v33;
  float *v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  double v41;
  float *v42;
  float *v43;
  uint64_t v44;
  float *v45;
  float v46;
  float *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float **v56;
  float *v57;
  float *v58;
  float *v59;
  BOOL v60;
  char v61;
  float **v62;
  float *v63;
  float *v64;
  float *v65;
  float v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  BOOL v71;
  float v72;
  unint64_t v73;
  float *v74;
  float *v75;
  char *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  BOOL v86;
  int v88;
  void **v89;
  void **v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  float **v95;
  float *v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  void **v100;
  void **v101;
  uint64_t **v102;
  void *v103;
  void **v104;
  void *v105;
  uint64_t *v106;
  unint64_t v107;
  char v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  float **i;
  void **v113;
  void **v114;
  void **v115;
  void **v116;
  void *v117;
  void **v118;
  float *v119;
  float *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  float *v125;
  float *v126;
  float *v127;
  uint64_t v128;
  float *v129;
  int v130;
  float **v131;
  char *v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  void **v136;
  uint64_t v137;
  void **v138;
  void **v139;
  void **v140;
  void *v141;
  uint64_t *v142;
  uint64_t v143;
  void **v144;
  uint64_t **v145;
  void *v146;
  uint64_t *v147;
  unint64_t v148;
  void **v149;
  void **v150;
  void **v151;
  void **v152;
  void *v153;
  void **v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t ****v163;
  float v164;
  float v165;
  float v166;
  uint64_t ***v167;
  uint64_t ****v168;
  int8x16_t v169;
  float v170;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t v174;
  int8x16_t v175;
  uint64_t v176;
  float32x4_t v177;
  int16x4_t v178;
  int8x16_t v179;
  float v180;
  float v181;
  float v182;
  float v183;
  char *v184;
  char *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  _BYTE *v190;
  uint64_t ****v191;
  unint64_t v192;
  char *v193;
  uint64_t ***v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _OWORD *v198;
  __int128 *v199;
  uint64_t v200;
  __int128 v201;
  uint64_t *v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  int v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t **v215;
  unint64_t v216;
  char *v217;
  uint64_t v218;
  _QWORD *v219;
  void **v220;
  unint64_t v221;
  uint64_t *v222;
  uint64_t **v223;
  uint64_t **v224;
  uint64_t *v225;
  unint64_t v226;
  uint64_t *v227;
  uint64_t *v228;
  unint64_t v229;
  uint64_t **v230;
  uint64_t **v231;
  uint64_t *v232;
  unint64_t v233;
  uint64_t *v234;
  uint64_t *v235;
  unint64_t v236;
  uint64_t **v237;
  uint64_t **v238;
  unint64_t v239;
  uint64_t *v240;
  uint64_t *v241;
  void **v242;
  _QWORD *v243;
  void **v244;
  void *v245;
  void **v246;
  float *v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  void **v270;
  unint64_t v271;
  unint64_t v272;
  void **v273;
  uint64_t **v274;
  unint64_t v275;
  unint64_t v276;
  char *v277;
  char *v278;
  char *v279;
  uint64_t v280;
  char *v281;
  void **v282;
  _QWORD *v283;
  uint64_t v284;
  void *v285;
  void **v286;
  void **v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  unint64_t v291;
  _QWORD *v292;
  _QWORD *v293;
  unint64_t v294;
  size_t v295;
  char *v296;
  std::__shared_weak_count *v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  void **v301;
  void **v302;
  uint64_t v303;
  char v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  void *v308;
  uint64_t v309;
  _QWORD *v310;
  _QWORD *v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  _QWORD *v316;
  _QWORD *v317;
  unint64_t v318;
  void *v319;
  void *v320;
  uint64_t *v321;
  uint64_t **v322;
  int v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  void *v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  void *v332;
  int v334;
  float *v335;
  float *v336;
  float *v337;
  BOOL v338;
  char v339;
  uint64_t v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  float32x2_t v343;
  float *v344;
  float32x2_t *v345;
  float32x2_t *v346;
  float32x2_t *v347;
  float32x2_t v348;
  float32x2_t v349;
  float32x2_t v350;
  float32x2_t v351;
  float32x2_t v352;
  int8x8_t v353;
  int8x8_t v354;
  float *v355;
  void *v356;
  float v357;
  float *v358;
  float *v359;
  float *v360;
  double v361;
  float v362;
  float v363;
  float v364;
  float v365;
  float v366;
  float v367;
  float v368;
  void *v369;
  float32x2_t v370;
  float v371;
  float v372;
  BOOL v373;
  float v374;
  int v375;
  float *v376;
  float *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  float *v382;
  float *v383;
  double v384;
  float *v385;
  float *v386;
  uint64_t v387;
  float *v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float *v393;
  float v394;
  float v395;
  float v396;
  float v397;
  float v398;
  float v399;
  float v400;
  float v401;
  float *v402;
  float *v403;
  double v404;
  float v405;
  float v406;
  float v407;
  float v408;
  float v409;
  float v410;
  float v411;
  unsigned __int8 v412;
  uint64_t v413;
  int v414;
  int v415;
  float32x2_t v416;
  float ***v417;
  float32x2_t *v418;
  float32x2_t *v419;
  float32x2_t *v420;
  float32x2_t v421;
  float32x2_t v422;
  float32x2_t v423;
  float32x2_t v424;
  float32x2_t v425;
  int8x8_t v426;
  int8x8_t v427;
  float v428;
  float32x2_t v429;
  float v430;
  float v431;
  BOOL v432;
  float v433;
  int v434;
  int v435;
  float32x2_t *v436;
  float32x2_t *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  float32x2_t *v442;
  double v443;
  float32x2_t *v444;
  float *v445;
  uint64_t v446;
  float *v447;
  unsigned __int8 v448;
  const void *v449;
  size_t v450;
  int v451;
  int v452;
  unint64_t v453;
  float **v454;
  uint64_t v455;
  const char *v456;
  size_t v457;
  float *v458;
  float *v459;
  float *v460;
  float *v461;
  unsigned __int8 v462;
  unsigned __int8 v463;
  const char *v464;
  size_t v465;
  _BYTE *v466;
  uint64_t v467;
  float *v468;
  float *v469;
  uint64_t v470;
  uint64_t v471;
  _BYTE *v472;
  NSObject *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  size_t v479;
  void *v480;
  _QWORD *v481;
  size_t v482;
  void *v483;
  void *v484;
  int v485;
  void *v486;
  unsigned __int8 **v487;
  uint64_t v488;
  uint64_t v489;
  void *v490;
  char v491;
  _QWORD *v492;
  uint64_t v493;
  std::__shared_weak_count *v494;
  unint64_t *p_shared_owners;
  unint64_t v496;
  uint64_t v497;
  unint64_t *v498;
  unint64_t v499;
  std::__shared_weak_count *v500;
  unint64_t *v501;
  unint64_t v502;
  unint64_t v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  char *v510;
  uint64_t v511;
  const char *v512;
  void *v513;
  std::__shared_weak_count *v514;
  unint64_t *v515;
  unint64_t v516;
  std::__shared_weak_count *v517;
  unint64_t *v518;
  unint64_t v519;
  void *v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  std::__shared_weak_count *v524;
  unint64_t *v525;
  unint64_t v526;
  std::__shared_weak_count *v527;
  unint64_t *v528;
  unint64_t v529;
  std::__shared_weak_count *v530;
  unint64_t *v531;
  unint64_t v532;
  std::__shared_weak_count *v533;
  unint64_t *v534;
  unint64_t v535;
  char v536;
  unint64_t v537;
  float **v538;
  unint64_t v539;
  const char *v540;
  int v541;
  float **v542;
  int v543;
  char *v544;
  unsigned int v545;
  unint64_t v546;
  float **v547;
  float **v548;
  int v549;
  int v551;
  __int32 v552;
  int v553;
  float *__src;
  uint64_t __srca;
  void *__srcb[2];
  __int32 __srcd;
  const char *__srcc;
  void *v559[4];
  __int128 v560;
  const char *v561;
  uint64_t v562;
  std::__shared_weak_count *v563;
  char v564;
  void *v565[3];
  uint64_t v566;
  std::__shared_weak_count *v567;
  std::__shared_weak_count *v568;
  char v569;
  __int128 v570;
  __int128 v571;
  uint64_t v572;
  __int128 v573;
  __int128 v574;
  uint64_t v575;
  float *v576[5];
  void *__p[6];
  void *v578[2];
  __int128 v579;
  __int128 v580;
  _BYTE object[56];
  unint64_t v582;
  uint64_t v583;
  uint64_t v584;
  __int128 v585;
  float *v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;

  v589 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = **a1;
  v5 = (*a1)[1];
  if (v4 != v5)
  {
    v6 = **a1;
    do
    {
      v7 = (*(_DWORD *)v6 & 0x7FFFFFFFu) <= 0x7F7FFFFF && ((_DWORD)v6[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF;
      v8 = !v7;
      if (!v7)
        break;
      v6 += 2;
    }
    while (v6 != v5);
    v9 = v8 ? 60 : 0;
    LODWORD(v570) = v9;
    if ((v8 & 1) != 0)
    {
LABEL_119:
      v543 = v570;
      v56 = *a1;
      v57 = **a1;
      v58 = (*a1)[1];
      if (v57 == v58)
        goto LABEL_641;
LABEL_120:
      v59 = v57;
      do
      {
        v60 = (*(_DWORD *)v59 & 0x7FFFFFFFu) <= 0x7F7FFFFF && ((_DWORD)v59[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF;
        v61 = !v60;
        if (!v60)
          break;
        v59 += 2;
      }
      while (v59 != v58);
      if ((v61 & 1) == 0)
        goto LABEL_641;
      v545 = 0;
      v541 = 60;
      v62 = (float **)v56[3];
      v63 = v56[4];
      if (v62 == (float **)v63)
        goto LABEL_870;
      goto LABEL_643;
    }
  }
  if ((unint64_t)((char *)v5 - (char *)v4) <= 0x17)
  {
LABEL_17:
    v10 = 10;
LABEL_118:
    LODWORD(v570) = v10;
    goto LABEL_119;
  }
  *(_QWORD *)object = v4;
  *(_QWORD *)&object[8] = v4;
  *(_QWORD *)&object[16] = v5;
  *(_QWORD *)&object[24] = ((char *)v5 - (char *)v4) >> 3;
  *(_QWORD *)&object[32] = 0;
  *(_QWORD *)&object[40] = v5;
  *(_QWORD *)&object[48] = v4;
  v582 = (unint64_t)v5;
  if (v4 == v5)
    v11 = 0;
  else
    v11 = (((char *)v5 - (char *)v4) >> 3) + 1;
  v583 = ((char *)v5 - (char *)v4) >> 3;
  v584 = v11;
  if (sub_2233DADA4((uint64_t)object) <= 3)
  {
LABEL_22:
    v10 = 11;
    goto LABEL_118;
  }
  LODWORD(v570) = 0;
  if ((sub_2233DAF90(v4, v5, &v570) & 1) != 0)
    goto LABEL_119;
  v13 = *v3;
  v12 = v3[1];
  v14 = (char *)v12 - (char *)*v3;
  if ((unint64_t)v14 < 0x18)
    goto LABEL_117;
  v15 = v14 >> 3;
  v16 = v12 == v13 ? 0 : v15 + 1;
  v17 = v16 - 1;
  if (v16 >= v15)
  {
    v18 = v3[1];
    if (v17 <= v15)
      v18 = &v13[2 * (v17 % v15)];
  }
  else
  {
    v18 = v12 - 2;
  }
  if (!v17)
    goto LABEL_117;
  v19 = 0.0;
  v20 = v3[1];
  do
  {
    if (v17 + 1 >= v15)
    {
      v21 = v3[1];
      if (v17 <= v15)
        v21 = &v13[2 * (v17 % v15)];
    }
    else
    {
      v21 = v20 - 2;
    }
    v22 = v17 - 1;
    if (v17 >= v15)
    {
      v23 = v3[1];
      if (v22 <= v15)
        v23 = &v13[2 * (v22 % v15)];
    }
    else
    {
      v23 = v18 - 2;
    }
    if (v17 + 1 >= v15)
    {
      v20 = v3[1];
      if (v17 <= v15)
        v20 = &v13[2 * (v17 % v15)];
    }
    else
    {
      v20 -= 2;
    }
    if (v17 >= v15)
    {
      v18 = &v13[2 * (v22 % v15)];
      if (v22 > v15)
        v18 = v3[1];
    }
    else
    {
      v18 -= 2;
    }
    v19 = v19 + (*v21 + *v23) * (v21[1] - v23[1]);
    --v17;
  }
  while (v22);
  v24 = 0.5;
  if (v19 * 0.5 <= 0.0)
  {
LABEL_117:
    v10 = 22;
    goto LABEL_118;
  }
  LODWORD(v570) = 0;
  v25 = (float **)v3[3];
  v26 = v3[4];
  if (v25 != (float **)v26)
  {
    do
    {
      v27 = *v25;
      v28 = v25[1];
      if (*v25 != v28)
      {
        v29 = *v25;
        do
        {
          v30 = (*(_DWORD *)v29 & 0x7FFFFFFFu) <= 0x7F7FFFFF && ((_DWORD)v29[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF;
          v31 = !v30;
          if (!v30)
            break;
          v29 += 2;
        }
        while (v29 != v28);
        v32 = v31 ? 60 : 0;
        LODWORD(v570) = v32;
        if ((v31 & 1) != 0)
          goto LABEL_119;
      }
      if ((unint64_t)((char *)v28 - (char *)v27) <= 0x17)
        goto LABEL_17;
      *(_QWORD *)object = v27;
      *(_QWORD *)&object[8] = v27;
      *(_QWORD *)&object[16] = v28;
      *(_QWORD *)&object[24] = ((char *)v28 - (char *)v27) >> 3;
      *(_QWORD *)&object[32] = 0;
      *(_QWORD *)&object[40] = v28;
      *(_QWORD *)&object[48] = v27;
      v582 = (unint64_t)v28;
      if (v27 == v28)
        v33 = 0;
      else
        v33 = (((char *)v28 - (char *)v27) >> 3) + 1;
      v583 = ((char *)v28 - (char *)v27) >> 3;
      v584 = v33;
      if (sub_2233DADA4((uint64_t)object) < 4)
        goto LABEL_22;
      LODWORD(v570) = 0;
      if (sub_2233DAF90(v27, v28, &v570))
        goto LABEL_119;
      v35 = *v25;
      v34 = v25[1];
      v36 = (char *)v34 - (char *)*v25;
      if ((unint64_t)v36 < 0x18)
        goto LABEL_117;
      v37 = v36 >> 3;
      v38 = v34 == v35 ? 0 : v37 + 1;
      v39 = v38 - 1;
      if (v38 >= v37)
      {
        v40 = v25[1];
        if (v39 <= v37)
          v40 = &v35[2 * (v39 % v37)];
      }
      else
      {
        v40 = v34 - 2;
      }
      if (!v39)
        goto LABEL_117;
      v41 = 0.0;
      v42 = v25[1];
      do
      {
        if (v39 + 1 >= v37)
        {
          v43 = v25[1];
          if (v39 <= v37)
            v43 = &v35[2 * (v39 % v37)];
        }
        else
        {
          v43 = v42 - 2;
        }
        v44 = v39 - 1;
        if (v39 >= v37)
        {
          v45 = v25[1];
          if (v44 <= v37)
            v45 = &v35[2 * (v44 % v37)];
        }
        else
        {
          v45 = v40 - 2;
        }
        if (v39 + 1 >= v37)
        {
          v42 = v25[1];
          if (v39 <= v37)
            v42 = &v35[2 * (v39 % v37)];
        }
        else
        {
          v42 -= 2;
        }
        if (v39 >= v37)
        {
          v40 = &v35[2 * (v44 % v37)];
          if (v44 > v37)
            v40 = v25[1];
        }
        else
        {
          v40 -= 2;
        }
        v24 = (*v43 + *v45) * (v43[1] - v45[1]);
        v41 = v41 + v24;
        --v39;
      }
      while (v44);
      if (v41 * 0.5 >= 0.0)
        goto LABEL_117;
      LODWORD(v570) = 0;
      v25 += 3;
    }
    while (v25 != (float **)v26);
    v13 = *v3;
    v12 = v3[1];
  }
  v46 = 0.0;
  v579 = 0u;
  v580 = 0u;
  *(_OWORD *)v578 = 0u;
  if (v13 == v12)
  {
    v64 = v3[3];
    v65 = v3[4];
    v66 = 0.0;
    if (v64 == v65)
    {
LABEL_136:
      v67 = v12;
      goto LABEL_152;
    }
    while (*(_QWORD *)v64 == *((_QWORD *)v64 + 1))
    {
      v64 += 6;
      if (v64 == v65)
        goto LABEL_136;
    }
    sub_2233DC1C4(v3 + 3, (int32x2_t *)object);
    v49 = *(float *)&object[12];
    v48 = *(float *)&object[8];
    LODWORD(v24) = *(_DWORD *)&object[4];
    v46 = *(float *)object;
  }
  else
  {
    v48 = *v13;
    v49 = v13[1];
    v47 = v13 + 2;
    *(float *)object = v48;
    *(float *)&object[4] = v49;
    *(float *)&object[8] = v48;
    *(float *)&object[12] = v49;
    if (v47 == v12)
    {
      v46 = v48;
      *(float *)&v24 = v49;
    }
    else
    {
      *(float *)&v24 = v49;
      v46 = v48;
      v50 = v48;
      v51 = v48;
      v52 = v49;
      v53 = v49;
      do
      {
        v54 = *v47;
        v55 = v47[1];
        v47 += 2;
        if (v54 < v50)
        {
          v46 = v54;
          v50 = v54;
        }
        if (v54 > v51)
        {
          v48 = v54;
          v51 = v54;
        }
        if (v55 < v52)
        {
          *(float *)&v24 = v55;
          v52 = v55;
        }
        if (v55 > v53)
        {
          v49 = v55;
          v53 = v55;
        }
      }
      while (v47 != v12);
      *(float *)object = v46;
      *(_DWORD *)&object[4] = LODWORD(v24);
      *(float *)&object[8] = v48;
      *(float *)&object[12] = v49;
    }
  }
  v68 = vabds_f32(v49, *(float *)&v24);
  v69 = vabds_f32(v48, v46);
  if (v68 < v69)
    v68 = v69;
  v66 = 1.0;
  if (v68 != 0.0)
  {
    v70 = 0.00000011921;
    if (v68 >= 1.0)
      v70 = v68 * 0.00000011921;
    v71 = v68 <= v70 && LODWORD(v68) >> 23 < 0xFF;
    if (v68 < 10000000.0 && !v71 && LODWORD(v68) >> 23 < 0xFF)
    {
      v72 = (float)(10000000.0 / v68) + 0.5;
      sub_2233DC31C(v72);
      v66 = (float)(uint64_t)vcvtms_s32_f32(v72);
      LODWORD(v24) = *(_DWORD *)&object[4];
      v46 = *(float *)object;
    }
  }
  v67 = *v3;
  v12 = v3[1];
LABEL_152:
  v565[0] = (void *)__PAIR64__(LODWORD(v24), LODWORD(v46));
  *(int64x2_t *)&v565[1] = vdupq_n_s64(0xFFFFFFFFFFB3B4C0);
  *(float *)&v566 = v66;
  v569 = 0;
  v585 = 0uLL;
  v586 = 0;
  if (v12 == v67)
    v73 = 0;
  else
    v73 = (((char *)v12 - (char *)v67) >> 3) + 1;
  if (v73 >= 2)
  {
    *(_QWORD *)object = v67;
    *(_QWORD *)&object[8] = v67;
    *(_QWORD *)&object[16] = v12;
    *(_QWORD *)&object[24] = ((char *)v12 - (char *)v67) >> 3;
    *(_QWORD *)&object[32] = 0;
    v559[0] = v12;
    v559[1] = v67;
    v559[2] = v12;
    v559[3] = *(void **)&object[24];
    *(_QWORD *)&v560 = v73;
    __p[0] = 0;
    __p[1] = (void *)-1;
    __p[2] = (void *)-1;
    sub_2233DC448((void **)&v585, (float **)object, (uint64_t)v559, (uint64_t)v565, (uint64_t)&v564, (__int128 *)__p, 0xAuLL);
  }
  v75 = v3[3];
  v74 = v3[4];
  if (v75 != v74)
  {
    v76 = 0;
    do
    {
      v77 = *(void **)v75;
      v78 = (void *)*((_QWORD *)v75 + 1);
      v79 = ((uint64_t)v78 - *(_QWORD *)v75) >> 3;
      if (v78 == *(void **)v75)
        v80 = 0;
      else
        v80 = v79 + 1;
      if (v80 >= 2)
      {
        *(_QWORD *)object = *(_QWORD *)v75;
        *(_QWORD *)&object[8] = v77;
        *(_QWORD *)&object[16] = v78;
        *(_QWORD *)&object[24] = v79;
        *(_QWORD *)&object[32] = 0;
        v559[0] = v78;
        v559[1] = v77;
        v559[2] = v78;
        v559[3] = (void *)v79;
        *(_QWORD *)&v560 = v80;
        *(_OWORD *)__p = xmmword_2245F53E0;
        __p[2] = v76;
        sub_2233DC448((void **)&v585, (float **)object, (uint64_t)v559, (uint64_t)v565, (uint64_t)&v564, (__int128 *)__p, 0xAuLL);
        v74 = v3[4];
      }
      ++v76;
      v75 += 6;
    }
    while (v75 != v74);
  }
  *(_QWORD *)object = v3;
  *(_QWORD *)&object[8] = &v564;
  *(_QWORD *)&object[16] = v565;
  *(_QWORD *)&object[24] = v578;
  *(_QWORD *)&object[32] = &v569;
  *(_DWORD *)&object[40] = 0;
  object[44] = 1;
  v576[0] = (float *)&v564;
  *(_QWORD *)&v573 = &v564;
  v81 = *((_QWORD *)&v585 + 1);
  v82 = v585;
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)&v585 + 1) - v585) >> 3) <= 0x10)
  {
LABEL_168:
    while (v82 != v81)
    {
      v83 = v82;
      v82 += 120;
      if (v82 != v81)
      {
        v84 = v82;
        while (1)
        {
          if (*(_QWORD *)(v83 + 48) >= *(_QWORD *)(v84 + 32) && *(_QWORD *)(v83 + 32) <= *(_QWORD *)(v84 + 48))
          {
            v85 = *(_QWORD *)(v83 + 56) >= *(_QWORD *)(v84 + 40) && *(_QWORD *)(v83 + 40) <= *(_QWORD *)(v84 + 56);
            v86 = v85 && *(_BYTE *)(v83 + 96) == 0;
            if (v86 && *(_BYTE *)(v84 + 96) == 0)
            {
              if (!sub_2233DF89C(*(int *)&object[40], *(uint64_t **)object, v83, *(int *)&object[40], *(uint64_t **)object, v84, object[44], *(uint64_t *)&object[8], *(uint64_t *)&object[16], *(_QWORD **)&object[24], *(_BYTE **)&object[32]))goto LABEL_187;
              v81 = *((_QWORD *)&v585 + 1);
            }
          }
          v84 += 120;
          if (v84 == v81)
            goto LABEL_168;
        }
      }
    }
  }
  else
  {
    memset(__p, 0, 24);
    *(int64x2_t *)v559 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    *(int64x2_t *)&v559[2] = vdupq_n_s64(0x8000000000000000);
    sub_2233DCD4C(&v585, (uint64_t *)v559, (char **)__p);
    sub_2233DCFD8(v559, __p, 0, (uint64_t)object, (uint64_t)&v573);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
LABEL_187:
  if ((_QWORD)v585)
  {
    *((_QWORD *)&v585 + 1) = v585;
    operator delete((void *)v585);
  }
  if (v569)
    v88 = 21;
  else
    v88 = 0;
  LODWORD(v570) = v88;
  v89 = (void **)v578[1];
  v90 = (void **)v579;
  v544 = (char *)v578[1] + 8 * ((unint64_t)v580 / 0x15);
  if ((void *)v579 == v578[1])
  {
    if (v569)
    {
      v108 = 0;
      v90 = (void **)v578[1];
      goto LABEL_625;
    }
    v546 = 0;
    v539 = 0;
    v95 = (float **)v3[3];
    v96 = v3[4];
    v559[1] = 0;
    v559[2] = 0;
    v559[0] = &v559[1];
    v536 = 1;
  }
  else
  {
    if (v569)
      goto LABEL_416;
    v91 = ((unint64_t)(*((_QWORD *)&v580 + 1) + v580) * (unsigned __int128)0x8618618618618619) >> 64;
    v92 = (v91 + ((unint64_t)(*((_QWORD *)&v580 + 1) + v580 - v91) >> 1)) >> 4;
    v93 = *((_QWORD *)v578[1] + (unint64_t)v580 / 0x15) + 192 * ((unint64_t)v580 % 0x15);
    v94 = *((_QWORD *)v578[1] + v92) + 192 * (*((_QWORD *)&v580 + 1) + v580 - 21 * v92);
    v95 = (float **)v3[3];
    v96 = v3[4];
    v559[1] = 0;
    v559[2] = 0;
    v559[0] = &v559[1];
    v539 = v93;
    if (v93 != v94)
    {
      v97 = v93;
      v98 = (char *)v578[1] + 8 * ((unint64_t)v580 / 0x15);
      while (1)
      {
        v99 = *(_QWORD *)(v97 + 56);
        if (v99 == -1)
          break;
        if (*(_QWORD *)(v97 + 136) == -1)
        {
          v100 = (void **)v559[1];
          v101 = &v559[1];
LABEL_201:
          v102 = (uint64_t **)v101;
          if (v100)
          {
            do
            {
              v101 = v100;
              v103 = v100[4];
              if (v99 < (uint64_t)v103)
              {
                v100 = (void **)*v101;
                goto LABEL_201;
              }
              if ((uint64_t)v103 >= v99)
                goto LABEL_217;
              v100 = (void **)v101[1];
            }
            while (v100);
            v102 = (uint64_t **)(v101 + 1);
          }
LABEL_214:
          v106 = (uint64_t *)operator new(0x28uLL);
          v106[4] = v99;
          *v106 = 0;
          v106[1] = 0;
          v106[2] = (uint64_t)v101;
          *v102 = v106;
          if (*(_QWORD *)v559[0])
          {
            v559[0] = *(void **)v559[0];
            v106 = *v102;
          }
          sub_2231A9A8C((uint64_t *)v559[1], v106);
          ++v559[2];
        }
LABEL_217:
        v97 += 192;
        if (v97 - *v98 == 4032)
        {
          v107 = v98[1];
          ++v98;
          v97 = v107;
        }
        if (v97 == v94)
        {
          v546 = v94;
          v536 = 0;
          goto LABEL_224;
        }
      }
      v104 = (void **)v559[1];
      v99 = *(_QWORD *)(v97 + 136);
      v101 = &v559[1];
LABEL_209:
      v102 = (uint64_t **)v101;
      if (v104)
      {
        do
        {
          v101 = v104;
          v105 = v104[4];
          if (v99 < (uint64_t)v105)
          {
            v104 = (void **)*v101;
            goto LABEL_209;
          }
          if ((uint64_t)v105 >= v99)
            goto LABEL_217;
          v104 = (void **)v101[1];
        }
        while (v104);
        v102 = (uint64_t **)(v101 + 1);
      }
      goto LABEL_214;
    }
    v536 = 1;
    v546 = v93;
  }
LABEL_224:
  v538 = v95;
  v542 = (float **)v96;
  v109 = v544;
  v110 = v539;
  if (v95 != (float **)v96)
  {
    v111 = 0;
    for (i = v95; i != v542; i += 3)
    {
      v113 = (void **)v559[1];
      if (!v559[1])
        goto LABEL_238;
      v114 = &v559[1];
      do
      {
        v115 = v113;
        v116 = v114;
        v117 = v113[4];
        v118 = v113 + 1;
        if ((uint64_t)v117 >= v111)
        {
          v118 = v115;
          v114 = v115;
        }
        v113 = (void **)*v118;
      }
      while (v113);
      if (v114 == &v559[1])
        goto LABEL_238;
      if ((uint64_t)v117 < v111)
        v115 = v116;
      if (v111 < (uint64_t)v115[4])
      {
LABEL_238:
        v119 = *v3;
        v120 = v3[1];
        v121 = (char *)v120 - (char *)*v3;
        if ((unint64_t)v121 < 0x18)
          goto LABEL_267;
        __src = *i;
        v122 = v121 >> 3;
        v123 = v120 == v119 ? 0 : v122 + 1;
        *(_DWORD *)object = 0;
        object[4] = 0;
        v124 = v123 - 1;
        v547 = i;
        if (v123 >= v122)
        {
          v125 = v120;
          if (v124 <= v122)
            v125 = &v119[2 * (v124 % v122)];
        }
        else
        {
          v125 = v120 - 2;
        }
        v126 = v120;
        if (v123 == 1)
        {
LABEL_267:
          v130 = 0;
          LODWORD(v570) = 30;
          goto LABEL_413;
        }
        do
        {
          if (v124 + 1 >= v122)
          {
            v127 = v120;
            if (v124 <= v122)
              v127 = &v119[2 * (v124 % v122)];
          }
          else
          {
            v127 = v126 - 2;
          }
          v128 = v124 - 1;
          if (v124 >= v122)
          {
            v129 = v120;
            if (v128 <= v122)
              v129 = &v119[2 * (v128 % v122)];
          }
          else
          {
            v129 = v125 - 2;
          }
          if (!sub_2233E62E4(__src, v127, v129, (uint64_t)object))
            break;
          if (v124 + 1 >= v122)
          {
            v126 = v120;
            if (v124 <= v122)
              v126 = &v119[2 * (v124 % v122)];
          }
          else
          {
            v126 -= 2;
          }
          if (v124 < v122)
          {
            v125 -= 2;
          }
          else
          {
            v125 = v120;
            if (v128 <= v122)
              v125 = &v119[2 * (v128 % v122)];
          }
          --v124;
        }
        while (v128);
        if (object[4])
        {
          v109 = v544;
          v110 = v539;
          i = v547;
        }
        else
        {
          v109 = v544;
          v110 = v539;
          i = v547;
          if (!*(_DWORD *)object)
            goto LABEL_267;
        }
      }
      ++v111;
    }
  }
  v131 = v538;
  if ((v536 & 1) == 0)
  {
    do
    {
      v136 = (void **)v559[1];
      v137 = *(_QWORD *)(v110 + 56);
      v138 = &v559[1];
      v139 = &v559[1];
      if (v559[1])
      {
        v140 = (void **)v559[1];
        while (1)
        {
          while (1)
          {
            v138 = v140;
            v141 = v140[4];
            if (v137 >= (uint64_t)v141)
              break;
            v140 = (void **)*v138;
            v139 = v138;
            if (!*v138)
              goto LABEL_279;
          }
          if ((uint64_t)v141 >= v137)
            break;
          v140 = (void **)v138[1];
          if (!v140)
          {
            v139 = v138 + 1;
            goto LABEL_279;
          }
        }
      }
      else
      {
LABEL_279:
        v142 = (uint64_t *)operator new(0x28uLL);
        v142[4] = v137;
        *v142 = 0;
        v142[1] = 0;
        v142[2] = (uint64_t)v138;
        *v139 = v142;
        if (*(_QWORD *)v559[0])
        {
          v559[0] = *(void **)v559[0];
          v142 = (uint64_t *)*v139;
        }
        sub_2231A9A8C((uint64_t *)v559[1], v142);
        v136 = (void **)v559[1];
        ++v559[2];
      }
      v143 = *(_QWORD *)(v110 + 136);
      v144 = &v559[1];
LABEL_284:
      v145 = (uint64_t **)v144;
      if (v136)
      {
        do
        {
          v144 = v136;
          v146 = v136[4];
          if (v143 < (uint64_t)v146)
          {
            v136 = (void **)*v144;
            goto LABEL_284;
          }
          if ((uint64_t)v146 >= v143)
            goto LABEL_292;
          v136 = (void **)v144[1];
        }
        while (v136);
        v145 = (uint64_t **)(v144 + 1);
      }
      v147 = (uint64_t *)operator new(0x28uLL);
      v147[4] = v143;
      *v147 = 0;
      v147[1] = 0;
      v147[2] = (uint64_t)v144;
      *v145 = v147;
      if (*(_QWORD *)v559[0])
      {
        v559[0] = *(void **)v559[0];
        v147 = *v145;
      }
      sub_2231A9A8C((uint64_t *)v559[1], v147);
      ++v559[2];
LABEL_292:
      v110 += 192;
      if (v110 - *v109 == 4032)
      {
        v148 = v109[1];
        ++v109;
        v110 = v148;
      }
    }
    while (v110 != v546);
  }
  if (v538 == v542)
  {
    v133 = 0;
    v134 = 0;
  }
  else
  {
    v132 = 0;
    v133 = 0;
    v134 = 0;
    v135 = 0;
    do
    {
      v149 = (void **)v559[1];
      if (!v559[1])
        goto LABEL_305;
      v150 = &v559[1];
      do
      {
        v151 = v149;
        v152 = v150;
        v153 = v149[4];
        v154 = v149 + 1;
        if ((uint64_t)v153 >= v135)
        {
          v154 = v151;
          v150 = v151;
        }
        v149 = (void **)*v154;
      }
      while (v149);
      if (v150 == &v559[1])
        goto LABEL_305;
      if ((uint64_t)v153 < v135)
        v151 = v152;
      if (v135 < (uint64_t)v151[4])
      {
LABEL_305:
        if (v133 < (uint64_t *)v132)
        {
          *v133 = (uint64_t)v131;
          *((_BYTE *)v133 + 24) = 0;
          v133 += 4;
        }
        else
        {
          v155 = ((char *)v133 - (char *)v134) >> 5;
          v156 = v155 + 1;
          if ((unint64_t)(v155 + 1) >> 59)
            sub_2233DCD38();
          if ((v132 - (char *)v134) >> 4 > v156)
            v156 = (v132 - (char *)v134) >> 4;
          if ((unint64_t)(v132 - (char *)v134) >= 0x7FFFFFFFFFFFFFE0)
            v157 = 0x7FFFFFFFFFFFFFFLL;
          else
            v157 = v156;
          if (v157 >> 59)
            sub_223174E94();
          v158 = (char *)operator new(32 * v157);
          v159 = &v158[32 * v155];
          *(_QWORD *)v159 = v131;
          v159[24] = 0;
          if (v133 == v134)
          {
            v162 = &v158[32 * v155];
          }
          else
          {
            v160 = 0;
            do
            {
              v161 = &v159[v160 * 8];
              *((_QWORD *)v161 - 4) = v133[v160 - 4];
              *((_QWORD *)v161 - 3) = v133[v160 - 3];
              *((_QWORD *)v161 - 2) = v133[v160 - 2];
              *(v161 - 8) = v133[v160 - 1];
              v160 -= 4;
            }
            while (&v133[v160] != v134);
            v162 = &v159[v160 * 8];
          }
          v132 = &v158[32 * v157];
          v133 = (uint64_t *)(v159 + 32);
          if (v134)
            operator delete(v134);
          v134 = (uint64_t *)v162;
        }
      }
      v131 += 3;
      ++v135;
    }
    while (v131 != v542);
  }
  LOBYTE(__p[0]) = 0;
  __p[1] = &v564;
  if ((unint64_t)((char *)v133 - (char *)v134) > 0x200)
  {
    memset(object, 0, 24);
    *(_OWORD *)v565 = xmmword_2245F53F0;
    if (v134 == v133)
      goto LABEL_406;
    v163 = 0;
    v1 = 3.4028e38;
    v164 = -3.4028e38;
    v165 = -3.4028e38;
    v166 = 3.4028e38;
    v167 = (uint64_t ***)v134;
    while (1)
    {
      if (*((_BYTE *)v167 + 24))
      {
        v169.i32[0] = *((_DWORD *)v167 + 2);
        v170 = *((float *)v167 + 3);
      }
      else
      {
        v171 = **v167;
        v172 = (*v167)[1];
        v169 = (int8x16_t)xmmword_2245F53F0;
        if (v171 != v172)
        {
          v174 = *v171;
          v173 = v171 + 1;
          v175.i64[0] = v174;
          v175.i64[1] = v174;
          if (v173 == v172)
          {
            v169 = v175;
          }
          else
          {
            v169 = v175;
            do
            {
              v176 = *v173++;
              v177.i64[0] = v176;
              v177.i64[1] = v176;
              v178.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v175, v177)).u32[0];
              v178.i32[1] = vmovn_s32(vcgtq_f32(v177, *(float32x4_t *)&v175)).i32[1];
              v179 = (int8x16_t)vmovl_s16(v178);
              v169 = vbslq_s8(v179, (int8x16_t)v177, v169);
              v175 = vbslq_s8(v179, (int8x16_t)v177, v175);
            }
            while (v173 != v172);
          }
        }
        *(int8x16_t *)(v167 + 1) = v169;
        *((_BYTE *)v167 + 24) = 1;
        v170 = *(float *)&v169.i32[1];
      }
      if (*(float *)v169.i32 >= v166)
        v180 = v166;
      else
        v180 = *(float *)v169.i32;
      if (*(float *)v169.i32 <= v165)
        *(float *)v169.i32 = v165;
      if (v170 >= v1)
        v181 = v1;
      else
        v181 = v170;
      if (v170 > v164)
      {
        *((float *)&v565[1] + 1) = v170;
        v164 = v170;
      }
      v183 = *((float *)v167 + 4);
      v182 = *((float *)v167 + 5);
      if (v183 >= v180)
        v166 = v180;
      else
        v166 = *((float *)v167 + 4);
      if (v183 <= *(float *)v169.i32)
        v165 = *(float *)v169.i32;
      else
        v165 = *((float *)v167 + 4);
      if (v182 >= v181)
        v1 = v181;
      else
        v1 = *((float *)v167 + 5);
      if (v182 > v164)
      {
        HIDWORD(v565[1]) = *((_DWORD *)v167 + 5);
        v164 = v182;
      }
      if ((unint64_t)v163 >= *(_QWORD *)&object[16])
        break;
      *v163 = v167;
      v168 = v163 + 1;
LABEL_326:
      *(_QWORD *)&object[8] = v168;
      v167 += 4;
      v163 = v168;
      if (v167 == (uint64_t ***)v133)
      {
        *(float *)&v565[1] = v165;
        v565[0] = (void *)__PAIR64__(LODWORD(v1), LODWORD(v166));
LABEL_406:
        sub_2233E65B4((float *)v565, (uint64_t **)object, 0, (uint64_t)__p);
        if (*(_QWORD *)object)
          operator delete(*(void **)object);
        if (LOBYTE(__p[0]))
        {
LABEL_409:
          v130 = 0;
          v209 = 31;
          goto LABEL_411;
        }
LABEL_410:
        v209 = 0;
        v130 = 1;
        goto LABEL_411;
      }
    }
    v184 = *(char **)object;
    v185 = (char *)v163 - *(_QWORD *)object;
    v186 = ((uint64_t)v163 - *(_QWORD *)object) >> 3;
    v187 = v186 + 1;
    if ((unint64_t)(v186 + 1) >> 61)
      sub_2233DCD38();
    v188 = *(_QWORD *)&object[16] - *(_QWORD *)object;
    if ((uint64_t)(*(_QWORD *)&object[16] - *(_QWORD *)object) >> 2 > v187)
      v187 = v188 >> 2;
    if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFF8)
      v189 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v189 = v187;
    if (v189)
    {
      if (v189 >> 61)
        sub_223174E94();
      v190 = operator new(8 * v189);
    }
    else
    {
      v190 = 0;
    }
    v191 = (uint64_t ****)&v190[8 * v186];
    *v191 = v167;
    v168 = v191 + 1;
    if (v163 == (uint64_t ****)v184)
    {
LABEL_373:
      *(_QWORD *)object = v191;
      *(_QWORD *)&object[16] = &v190[8 * v189];
      if (v163)
        operator delete(v163);
      goto LABEL_326;
    }
    v192 = (char *)v163 - v184 - 8;
    if (v192 >= 0x168)
    {
      v195 = ((char *)(v163 - 1) - v184) & 0xFFFFFFFFFFFFFFF8;
      if (&v185[(_QWORD)v190 - 8 - v195] > &v185[(_QWORD)v190 - 8])
      {
        v193 = (char *)v163;
      }
      else if ((uint64_t ****)((char *)v163 - v195 - 8) > v163 - 1)
      {
        v193 = (char *)v163;
      }
      else if ((unint64_t)((char *)v163 - v190 - (_QWORD)v185) >= 0x20)
      {
        v196 = (v192 >> 3) + 1;
        v197 = 8 * (v196 & 0x3FFFFFFFFFFFFFFCLL);
        v193 = (char *)&v163[v197 / 0xFFFFFFFFFFFFFFF8];
        v191 = (uint64_t ****)((char *)v191 - v197);
        v198 = &v190[8 * v186 - 16];
        v199 = (__int128 *)(v163 - 2);
        v200 = v196 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v201 = *v199;
          *(v198 - 1) = *(v199 - 1);
          *v198 = v201;
          v198 -= 2;
          v199 -= 2;
          v200 -= 4;
        }
        while (v200);
        if (v196 == (v196 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_372;
      }
      else
      {
        v193 = (char *)v163;
      }
    }
    else
    {
      v193 = (char *)v163;
    }
    do
    {
      v194 = (uint64_t ***)*((_QWORD *)v193 - 1);
      v193 -= 8;
      *--v191 = v194;
    }
    while (v193 != v184);
LABEL_372:
    v163 = *(uint64_t *****)object;
    goto LABEL_373;
  }
  if (v134 == v133)
    goto LABEL_410;
  v202 = v134;
  while (1)
  {
    v203 = v202;
    v202 += 4;
    if (v202 != v133)
      break;
LABEL_387:
    if (v202 == v133)
      goto LABEL_410;
  }
  v204 = v202;
  while (1)
  {
    v205 = *v203;
    v206 = *v204;
    strcpy(object, "FFFFFFFFF");
    sub_2233E9788(v205, v206, object, (uint64_t)&v564);
    if (!object[9])
    {
      if (object[0] == 84 || object[0] - 48 < 0xA)
        goto LABEL_409;
      if (object[1] == 84 || object[1] - 48 <= 9)
        goto LABEL_409;
      v130 = 0;
      v209 = 31;
      if (object[3] == 84 || object[3] - 48 < 0xA)
        break;
    }
    v204 += 4;
    if (v204 == v133)
      goto LABEL_387;
  }
LABEL_411:
  LODWORD(v570) = v209;
  if (v134)
    operator delete(v134);
LABEL_413:
  sub_223198030((uint64_t)v559, (_QWORD *)v559[1]);
  v89 = (void **)v578[1];
  v90 = (void **)v579;
  if (!v130)
  {
LABEL_416:
    v108 = 0;
    goto LABEL_625;
  }
  v210 = (unint64_t)v580 / 0x15;
  if ((void *)v579 == v578[1])
  {
    v211 = 0;
    v212 = 0;
  }
  else
  {
    v211 = *((_QWORD *)v578[1] + v210) + 192 * ((unint64_t)v580 % 0x15);
    v212 = *((_QWORD *)v578[1] + (*((_QWORD *)&v580 + 1) + (_QWORD)v580) / 0x15uLL)
         + 192 * ((*((_QWORD *)&v580 + 1) + (_QWORD)v580) % 0x15uLL);
  }
  v213 = (char *)v3[4] - (char *)v3[3];
  v214 = 0xAAAAAAAAAAAAAAABLL * (v213 >> 3);
  v215 = (uint64_t **)&object[24];
  memset(&object[24], 0, 32);
  *(_QWORD *)&object[16] = &object[24];
  v582 = 0;
  v216 = v214 + 1;
  *(_QWORD *)object = v214 + 1;
  *(_QWORD *)&object[8] = 0;
  if (v214 != -1)
  {
    if (v216 > 0xAAAAAAAAAAAAAAALL)
      sub_2233DCD38();
    v217 = (char *)operator new(v213 + 24);
    *(_QWORD *)&object[40] = v217;
    v582 = (unint64_t)&v217[24 * v216];
    v218 = 24 * v214 + 24;
    v219 = v217 + 8;
    do
    {
      *v219 = 0;
      v219[1] = 0;
      *(v219 - 1) = v219;
      v219 += 3;
      v218 -= 24;
    }
    while (v218);
    *(_QWORD *)&object[48] = &v217[24 * v216];
  }
  if (v211 == v212)
  {
    v289 = 0;
    goto LABEL_553;
  }
  v220 = &v89[v210];
  v1 = 1.0;
  do
  {
    v221 = *(_QWORD *)(v211 + 56) + 1;
    v222 = *(uint64_t **)&object[24];
    v223 = v215;
    v224 = v215;
    if (!*(_QWORD *)&object[24])
      goto LABEL_434;
    v225 = *(uint64_t **)&object[24];
    do
    {
      while (1)
      {
        v224 = (uint64_t **)v225;
        if (!v225[5])
        {
          v226 = v225[4];
          if (v226 <= v221)
            break;
        }
        v225 = *v224;
        v223 = v224;
        if (!*v224)
          goto LABEL_434;
      }
      if (v226 >= v221)
      {
        __srca = (uint64_t)v224;
        v229 = *(_QWORD *)(v211 + 136) + 1;
        goto LABEL_437;
      }
      v225 = v224[1];
    }
    while (v225);
    v223 = v224 + 1;
LABEL_434:
    v227 = (uint64_t *)operator new(0x30uLL);
    v227[4] = v221;
    v227[5] = 0;
    *v227 = 0;
    v227[1] = 0;
    v227[2] = (uint64_t)v224;
    *v223 = v227;
    v228 = v227;
    if (**(_QWORD **)&object[16])
    {
      *(_QWORD *)&object[16] = **(_QWORD **)&object[16];
      v228 = *v223;
    }
    __srca = (uint64_t)v227;
    sub_2231A9A8C(*(uint64_t **)&object[24], v228);
    v222 = *(uint64_t **)&object[24];
    ++*(_QWORD *)&object[32];
    v229 = *(_QWORD *)(v211 + 136) + 1;
    v230 = v215;
    v231 = v215;
    if (*(_QWORD *)&object[24])
    {
LABEL_437:
      v232 = v222;
      while (1)
      {
        while (1)
        {
          v231 = (uint64_t **)v232;
          if (!v232[5])
          {
            v233 = v232[4];
            if (v233 <= v229)
              break;
          }
          v232 = *v231;
          v230 = v231;
          if (!*v231)
            goto LABEL_445;
        }
        if (v233 >= v229)
          break;
        v232 = v231[1];
        if (!v232)
        {
          v230 = v231 + 1;
          goto LABEL_445;
        }
      }
      v234 = (uint64_t *)v231;
      v236 = *(_QWORD *)&object[8] + *(_QWORD *)object;
      v237 = v215;
      v238 = v215;
      if (!v222)
        goto LABEL_456;
    }
    else
    {
LABEL_445:
      v234 = (uint64_t *)operator new(0x30uLL);
      v234[4] = v229;
      v234[5] = 0;
      *v234 = 0;
      v234[1] = 0;
      v234[2] = (uint64_t)v231;
      *v230 = v234;
      v235 = v234;
      if (**(_QWORD **)&object[16])
      {
        *(_QWORD *)&object[16] = **(_QWORD **)&object[16];
        v235 = *v230;
      }
      sub_2231A9A8C(*(uint64_t **)&object[24], v235);
      v222 = *(uint64_t **)&object[24];
      ++*(_QWORD *)&object[32];
      v236 = *(_QWORD *)&object[8] + *(_QWORD *)object;
      v237 = v215;
      v238 = v215;
      if (!*(_QWORD *)&object[24])
      {
LABEL_456:
        v240 = (uint64_t *)operator new(0x30uLL);
        v240[4] = v236;
        v240[5] = v211;
        *v240 = 0;
        v240[1] = 0;
        v240[2] = (uint64_t)v238;
        *v237 = v240;
        v241 = v240;
        if (**(_QWORD **)&object[16])
        {
          *(_QWORD *)&object[16] = **(_QWORD **)&object[16];
          v241 = *v237;
        }
        sub_2231A9A8C(*(uint64_t **)&object[24], v241);
        v242 = *(void ***)&object[48];
        ++*(_QWORD *)&object[32];
        v559[1] = 0;
        v559[2] = 0;
        v559[0] = &v559[1];
        if (*(_QWORD *)&object[48] >= v582)
        {
          v270 = *(void ***)&object[40];
          v271 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&object[48] - *(_QWORD *)&object[40]) >> 3);
          v272 = v271 + 1;
          if (v271 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_2233DCD38();
          v273 = v220;
          v274 = v215;
          v275 = v212;
          if (0x5555555555555556 * ((uint64_t)(v582 - *(_QWORD *)&object[40]) >> 3) > v272)
            v272 = 0x5555555555555556 * ((uint64_t)(v582 - *(_QWORD *)&object[40]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v582 - *(_QWORD *)&object[40]) >> 3) >= 0x555555555555555)
            v276 = 0xAAAAAAAAAAAAAAALL;
          else
            v276 = v272;
          if (v276)
          {
            if (v276 > 0xAAAAAAAAAAAAAAALL)
              sub_223174E94();
            v277 = (char *)operator new(24 * v276);
          }
          else
          {
            v277 = 0;
          }
          v278 = &v277[24 * v271];
          v279 = &v277[24 * v276];
          *((_QWORD *)v278 + 2) = 0;
          *((_QWORD *)v278 + 1) = 0;
          *(_QWORD *)v278 = v278 + 8;
          v246 = (void **)(v278 + 24);
          if (v242 == v270)
          {
            *(_QWORD *)&object[40] = v278;
            *(_QWORD *)&object[48] = v278 + 24;
            v582 = (unint64_t)&v277[24 * v276];
            v212 = v275;
            v215 = v274;
            v220 = v273;
          }
          else
          {
            v280 = 0;
            v212 = v275;
            v215 = v274;
            v220 = v273;
            do
            {
              while (1)
              {
                v281 = &v278[v280 * 8];
                *((_QWORD *)v281 - 3) = v242[v280 - 3];
                v282 = &v242[v280 - 2];
                v283 = *v282;
                *(_QWORD *)&v278[v280 * 8 - 16] = *v282;
                v284 = (uint64_t)&v278[v280 * 8 - 16];
                v285 = v242[v280 - 1];
                *((_QWORD *)v281 - 1) = v285;
                if (v285)
                  break;
                *((_QWORD *)v281 - 3) = v284;
                v280 -= 3;
                if (&v242[v280] == v270)
                  goto LABEL_540;
              }
              v283[2] = v284;
              v242[v280 - 3] = v282;
              *v282 = 0;
              v242[v280 - 1] = 0;
              v280 -= 3;
            }
            while (&v242[v280] != v270);
LABEL_540:
            v242 = *(void ***)&object[40];
            v286 = *(void ***)&object[48];
            *(_QWORD *)&object[40] = &v278[v280 * 8];
            *(_QWORD *)&object[48] = v278 + 24;
            v582 = (unint64_t)v279;
            if (v286 != v242)
            {
              do
              {
                v287 = v286 - 3;
                sub_2233FADDC(*(v286 - 2));
                v286 = v287;
              }
              while (v287 != v242);
            }
          }
          if (v242)
            operator delete(v242);
        }
        else
        {
          **(_QWORD **)&object[48] = &v559[1];
          v243 = v559[1];
          v242[1] = v559[1];
          v244 = v242 + 1;
          v245 = v559[2];
          v242[2] = v559[2];
          if (v245)
          {
            v243[2] = v244;
            v559[0] = &v559[1];
            v559[1] = 0;
            v559[2] = 0;
          }
          else
          {
            *v242 = v244;
          }
          v246 = v242 + 3;
        }
        *(_QWORD *)&object[48] = v246;
        sub_2233FADDC((_QWORD *)v559[1]);
        ++*(_QWORD *)&object[8];
        goto LABEL_547;
      }
    }
    if (v211)
    {
      while (1)
      {
        v238 = (uint64_t **)v222;
        v248 = (float *)v222[5];
        if (!v248)
          goto LABEL_467;
        v249 = *(float *)v211;
        v250 = *v248;
        if (*(float *)v211 == *v248)
          break;
        if ((LODWORD(v249) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v250) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v259 = vabds_f32(v249, v250);
          v260 = fabsf(v249);
          v261 = fabsf(v250);
          if (v260 < v261)
            v260 = v261;
          v262 = v260 >= 1.0 ? v260 * 0.00000011921 : 0.00000011921;
          if (v259 <= v262)
            break;
        }
        if (v249 >= v250)
        {
LABEL_462:
          if ((LODWORD(v250) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v249) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          {
            v263 = vabds_f32(v250, v249);
            v264 = fabsf(v250);
            v265 = fabsf(v249);
            if (v264 < v265)
              v264 = v265;
            v266 = v264 >= 1.0 ? v264 * 0.00000011921 : 0.00000011921;
            if (v263 <= v266)
            {
              v252 = v248[1];
              v251 = *(float *)(v211 + 4);
              if (v252 == v251)
                goto LABEL_532;
LABEL_473:
              if ((LODWORD(v252) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v251) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
              {
                v256 = fabsf(v252);
                v257 = fabsf(v251);
                if (v256 < v257)
                  v256 = v257;
                if (v256 >= 1.0)
                  v258 = v256 * 0.00000011921;
                else
                  v258 = 0.00000011921;
                if (v252 >= v251 || vabds_f32(v252, v251) <= v258)
                  goto LABEL_532;
              }
              else if (v252 >= v251)
              {
                goto LABEL_532;
              }
              goto LABEL_467;
            }
          }
          if (v250 >= v249)
            goto LABEL_532;
LABEL_467:
          v222 = v238[1];
          if (!v222)
          {
LABEL_455:
            v237 = v238 + 1;
            goto LABEL_456;
          }
        }
        else
        {
LABEL_521:
          v222 = *v238;
          v237 = v238;
          if (!*v238)
            goto LABEL_456;
        }
      }
      v251 = *(float *)(v211 + 4);
      v252 = v248[1];
      if (v251 != v252)
      {
        if ((LODWORD(v251) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v252) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v267 = fabsf(v251);
          v268 = fabsf(v252);
          if (v267 < v268)
            v267 = v268;
          if (v267 >= 1.0)
            v269 = v267 * 0.00000011921;
          else
            v269 = 0.00000011921;
          if (v251 < v252 && vabds_f32(v251, v252) > v269)
            goto LABEL_521;
        }
        else if (v251 < v252)
        {
          goto LABEL_521;
        }
      }
      if (v249 == v250)
      {
        if (v252 == v251)
          goto LABEL_532;
        goto LABEL_473;
      }
      goto LABEL_462;
    }
    while (1)
    {
      while (1)
      {
        v238 = (uint64_t **)v222;
        if (!v222[5])
        {
          v239 = v222[4];
          if (v239 <= v236)
            break;
        }
        v222 = *v238;
        v237 = v238;
        if (!*v238)
          goto LABEL_456;
      }
      if (v239 >= v236)
        break;
      v222 = v238[1];
      if (!v222)
        goto LABEL_455;
    }
LABEL_532:
    v240 = (uint64_t *)v238;
LABEL_547:
    sub_2233FABEC((uint64_t *)object, __srca, (uint64_t)v240);
    sub_2233FABEC((uint64_t *)object, (uint64_t)v234, (uint64_t)v240);
    v211 += 192;
    if (v211 - (_QWORD)*v220 == 4032)
    {
      v288 = (unint64_t)v220[1];
      ++v220;
      v211 = v288;
    }
  }
  while (v211 != v212);
  v216 = *(_QWORD *)object;
  v289 = *(_QWORD *)&object[8];
LABEL_553:
  memset(v565, 0, sizeof(v565));
  v290 = v216 + v289;
  if (v216 + v289)
  {
    if ((v290 & 0x8000000000000000) != 0)
      sub_2233DCD38();
    v291 = (v290 - 1) >> 6;
    v292 = operator new(8 * (v291 + 1));
    v293 = v292;
    v565[1] = (void *)v290;
    v565[2] = (void *)(v291 + 1);
    v565[0] = v292;
    if (v290 >= 0x41)
      v294 = (v290 - 1) >> 6;
    else
      v294 = 0;
    v292[v294] = 0;
    if (v290 >= 0x40)
      bzero(v292, 8 * (v290 >> 6));
    if ((v290 & 0x3F) != 0)
      v293[v290 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v290 & 0x3F));
    v566 = 0;
    v567 = 0;
    v568 = 0;
    if (v290 >> 61)
      sub_2233DCD38();
    v295 = 8 * v290;
    v296 = (char *)operator new(8 * v290);
    v297 = (std::__shared_weak_count *)&v296[8 * v290];
    v566 = (uint64_t)v296;
    v568 = v297;
    memset(v296, 255, v295);
    v567 = v297;
  }
  else
  {
    v296 = 0;
    v566 = 0;
    v567 = 0;
    v568 = 0;
  }
  v298 = *(uint64_t **)&object[16];
  if (*(uint64_t ***)&object[16] == v215)
  {
    v323 = 0;
    goto LABEL_612;
  }
  while (2)
  {
    if (((*(_QWORD *)((char *)v565[0] + (((unint64_t)v298[4] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v298[4]) & 1) != 0)
      goto LABEL_602;
    v560 = 0u;
    memset(v559, 0, sizeof(v559));
    sub_2233FAE50(v559);
    v299 = *((_QWORD *)&v560 + 1);
    v300 = v560;
    v301 = (void **)v559[1];
    v302 = (void **)v559[2];
    *(_QWORD *)(*(_QWORD *)((char *)v559[1] + (((*((_QWORD *)&v560 + 1) + (_QWORD)v560) >> 6) & 0x3FFFFFFFFFFFFF8))
              + 8 * ((*((_QWORD *)&v560 + 1) + v560) & 0x1FF)) = v298;
    v303 = v299 + 1;
    if (v299 == -1)
    {
LABEL_570:
      v304 = 0;
      goto LABEL_594;
    }
    while (1)
    {
      v305 = (((char *)v302 - (char *)v301) << 6) - 1;
      if (v302 == v301)
        v305 = 0;
      v306 = v300 + v303--;
      v307 = (*(_QWORD **)((char *)v301 + (((unint64_t)(v303 + v300) >> 6) & 0x3FFFFFFFFFFFFF8)))[(v303 + v300) & 0x1FF];
      *((_QWORD *)&v560 + 1) = v303;
      if ((unint64_t)(v305 - v306 + 1) >= 0x400)
      {
        v308 = *--v302;
        operator delete(v308);
        v559[2] = v302;
      }
      *(_QWORD *)((char *)v565[0] + ((*(_QWORD *)(v307 + 32) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_QWORD *)(v307 + 32);
      v309 = *(_QWORD *)(v307 + 32);
      v310 = (_QWORD *)(*(_QWORD *)&object[40] + 24 * v309);
      v311 = (_QWORD *)*v310;
      if ((_QWORD *)*v310 != v310 + 1)
        break;
LABEL_571:
      if (!v303)
        goto LABEL_570;
    }
    while (1)
    {
      v312 = v311[4];
      v313 = *(_QWORD *)(v312 + 32);
      if (v313 != *(_QWORD *)(v566 + 8 * v309))
        break;
LABEL_587:
      v316 = (_QWORD *)v311[1];
      if (v316)
      {
        do
        {
          v317 = v316;
          v316 = (_QWORD *)*v316;
        }
        while (v316);
      }
      else
      {
        do
        {
          v317 = (_QWORD *)v311[2];
          v86 = *v317 == (_QWORD)v311;
          v311 = v317;
        }
        while (!v86);
      }
      v309 = *(_QWORD *)(v307 + 32);
      v311 = v317;
      if (v317 == (_QWORD *)(*(_QWORD *)&object[40] + 24 * v309 + 8))
        goto LABEL_571;
    }
    if (((*(_QWORD *)((char *)v565[0] + ((v313 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v313) & 1) == 0)
    {
      *(_QWORD *)(v566 + 8 * v313) = v309;
      if (v302 == v301)
        v314 = 0;
      else
        v314 = (((char *)v302 - (char *)v301) << 6) - 1;
      v315 = v300 + v303;
      if (v314 == v300 + v303)
      {
        sub_2233FAE50(v559);
        v301 = (void **)v559[1];
        v302 = (void **)v559[2];
        v303 = *((_QWORD *)&v560 + 1);
        v300 = v560;
        v315 = v560 + *((_QWORD *)&v560 + 1);
        v312 = v311[4];
      }
      (*(_QWORD **)((char *)v301 + ((v315 >> 6) & 0x3FFFFFFFFFFFFF8)))[v315 & 0x1FF] = v312;
      *((_QWORD *)&v560 + 1) = ++v303;
      goto LABEL_587;
    }
    v304 = 1;
LABEL_594:
    v318 = (char *)v302 - (char *)v301;
    if ((unint64_t)((char *)v302 - (char *)v301) >= 0x11)
    {
      do
      {
        v319 = *v301++;
        operator delete(v319);
        v559[1] = v301;
        v318 -= 8;
      }
      while (v318 > 0x10);
    }
    while (v301 != v302)
    {
      v320 = *v301++;
      operator delete(v320);
    }
    if (v559[0])
      operator delete(v559[0]);
    if ((v304 & 1) != 0)
    {
      v323 = 1;
    }
    else
    {
LABEL_602:
      v321 = (uint64_t *)v298[1];
      if (v321)
      {
        do
        {
          v322 = (uint64_t **)v321;
          v321 = (uint64_t *)*v321;
        }
        while (v321);
      }
      else
      {
        do
        {
          v322 = (uint64_t **)v298[2];
          v86 = *v322 == v298;
          v298 = (uint64_t *)v322;
        }
        while (!v86);
      }
      v298 = (uint64_t *)v322;
      if (v322 != v215)
        continue;
      v323 = 0;
    }
    break;
  }
  v296 = (char *)v566;
LABEL_612:
  if (v296)
    operator delete(v296);
  if (v565[0])
    operator delete(v565[0]);
  if (v323)
    v324 = 32;
  else
    v324 = 0;
  LODWORD(v570) = v324;
  v325 = *(_QWORD *)&object[40];
  if (*(_QWORD *)&object[40])
  {
    v326 = *(_QWORD *)&object[48];
    v327 = *(void **)&object[40];
    if (*(_QWORD *)&object[48] != *(_QWORD *)&object[40])
    {
      do
      {
        v328 = v326 - 24;
        sub_2233FADDC(*(_QWORD **)(v326 - 16));
        v326 = v328;
      }
      while (v328 != v325);
      v327 = *(void **)&object[40];
    }
    *(_QWORD *)&object[48] = v325;
    operator delete(v327);
  }
  v108 = v323 ^ 1;
  sub_2233FADDC(*(_QWORD **)&object[24]);
  v89 = (void **)v578[1];
  v90 = (void **)v579;
LABEL_625:
  *((_QWORD *)&v580 + 1) = 0;
  v329 = (char *)v90 - (char *)v89;
  if ((unint64_t)((char *)v90 - (char *)v89) >= 0x11)
  {
    do
    {
      operator delete(*v89);
      v90 = (void **)v579;
      v89 = (void **)((char *)v578[1] + 8);
      v578[1] = v89;
      v329 = v579 - (_QWORD)v89;
    }
    while ((_QWORD)v579 - (_QWORD)v89 > 0x10uLL);
  }
  v330 = v329 >> 3;
  if (v330 == 1)
  {
    v331 = 10;
LABEL_631:
    *(_QWORD *)&v580 = v331;
  }
  else if (v330 == 2)
  {
    v331 = 21;
    goto LABEL_631;
  }
  if (v89 != v90)
  {
    do
    {
      v332 = *v89++;
      operator delete(v332);
    }
    while (v89 != v90);
    if ((void *)v579 != v578[1])
      *(_QWORD *)&v579 = v579 + (((unint64_t)v578[1] - v579 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v578[0])
    operator delete(v578[0]);
  if ((v108 & 1) != 0)
    return 1;
  v543 = v570;
  v56 = *a1;
  v57 = **a1;
  v58 = (*a1)[1];
  if (v57 != v58)
    goto LABEL_120;
LABEL_641:
  if ((unint64_t)((char *)v58 - (char *)v57) < 0x18)
  {
    v545 = 0;
    v541 = 10;
    v62 = (float **)v56[3];
    v63 = v56[4];
    if (v62 != (float **)v63)
      goto LABEL_643;
LABEL_870:
    v553 = 0;
    v448 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v448 & 1) == 0)
      goto LABEL_988;
    goto LABEL_871;
  }
  *(_QWORD *)object = v57;
  *(_QWORD *)&object[8] = v57;
  *(_QWORD *)&object[16] = v58;
  *(_QWORD *)&object[24] = ((char *)v58 - (char *)v57) >> 3;
  *(_QWORD *)&object[32] = 0;
  *(_QWORD *)&object[40] = v58;
  *(_QWORD *)&object[48] = v57;
  v582 = (unint64_t)v58;
  if (v57 == v58)
    v413 = 0;
  else
    v413 = (((char *)v58 - (char *)v57) >> 3) + 1;
  v583 = ((char *)v58 - (char *)v57) >> 3;
  v584 = v413;
  if (sub_2233DADA4((uint64_t)object) < 4)
  {
    v414 = 0;
    v415 = 11;
    goto LABEL_814;
  }
  LODWORD(v578[0]) = 0;
  if (!sub_2233DAF90(v57, v58, v578))
  {
    memset(v565, 0, sizeof(v565));
    v418 = (float32x2_t *)*v56;
    v419 = (float32x2_t *)v56[1];
    v417 = a1;
    if (*v56 == (float *)v419)
    {
      v428 = 0.0;
    }
    else
    {
      v421 = *v418;
      v420 = v418 + 1;
      v422 = v421;
      v423 = v421;
      if (v420 == v419)
      {
        v416 = v422;
      }
      else
      {
        v424 = v422;
        v416 = v422;
        do
        {
          v425 = *v420++;
          v426 = (int8x8_t)vcgt_f32(v424, v425);
          v427 = (int8x8_t)vcgt_f32(v425, v422);
          v416 = (float32x2_t)vbsl_s8(v426, (int8x8_t)v425, (int8x8_t)v416);
          v424 = (float32x2_t)vbsl_s8(v426, (int8x8_t)v425, (int8x8_t)v424);
          v423 = (float32x2_t)vbsl_s8(v427, (int8x8_t)v425, (int8x8_t)v423);
          v422 = (float32x2_t)vbsl_s8(v427, (int8x8_t)v425, (int8x8_t)v422);
        }
        while (v420 != v419);
      }
      v429 = vabd_f32(v423, v416);
      v430 = v429.f32[1];
      if (v429.f32[1] < v429.f32[0])
        v430 = v429.f32[0];
      v1 = v416.f32[1];
      v428 = 1.0;
      if (v430 != 0.0)
      {
        v431 = 0.00000011921;
        if (v430 >= 1.0)
          v431 = v430 * 0.00000011921;
        v432 = v430 <= v431 && LODWORD(v430) >> 23 < 0xFF;
        if (v430 < 10000000.0 && !v432 && LODWORD(v430) >> 23 < 0xFF)
        {
          __srcd = v416.i32[0];
          v433 = (float)(10000000.0 / v430) + 0.5;
          sub_2233DC31C(v433);
          v428 = (float)(uint64_t)vcvtms_s32_f32(v433);
          v416.i32[0] = __srcd;
        }
      }
    }
    v559[0] = (void *)__PAIR64__(LODWORD(v1), v416.u32[0]);
    *(int64x2_t *)&v559[1] = vdupq_n_s64(0xFFFFFFFFFFB3B4C0);
    *(float *)&v559[3] = v428;
    LOBYTE(__p[0]) = 0;
    sub_2233FB5DC((uint64_t)v56, (uint64_t)&v585, (uint64_t)v559, v565, (BOOL *)__p);
    v434 = LOBYTE(__p[0]);
    if (v565[0])
    {
      v565[1] = v565[0];
      operator delete(v565[0]);
    }
    if (v434)
    {
      v414 = 0;
      v435 = 21;
    }
    else
    {
      v436 = (float32x2_t *)*v56;
      v437 = (float32x2_t *)v56[1];
      v438 = (char *)v437 - (char *)*v56;
      if ((unint64_t)v438 >= 0x18)
      {
        v439 = v438 >> 3;
        v440 = v437 == v436 ? 0 : v439 + 1;
        v441 = v440 - 1;
        if (v440 >= v439)
        {
          v442 = (float32x2_t *)v56[1];
          if (v441 <= v439)
            v442 = &v436[v441 % v439];
        }
        else
        {
          v442 = v437 - 1;
        }
        if (v441)
        {
          v443 = 0.0;
          v444 = (float32x2_t *)v56[1];
          do
          {
            if (v441 + 1 >= v439)
            {
              v445 = v56[1];
              if (v441 <= v439)
                v445 = (float *)&v436[v441 % v439];
            }
            else
            {
              v445 = (float *)&v444[-1];
            }
            v446 = v441 - 1;
            if (v441 >= v439)
            {
              v447 = v56[1];
              if (v446 <= v439)
                v447 = (float *)&v436[v446 % v439];
            }
            else
            {
              v447 = (float *)&v442[-1];
            }
            if (v441 + 1 >= v439)
            {
              v444 = (float32x2_t *)v56[1];
              if (v441 <= v439)
                v444 = &v436[v441 % v439];
            }
            else
            {
              --v444;
            }
            if (v441 >= v439)
            {
              v442 = &v436[v446 % v439];
              if (v446 > v439)
                v442 = (float32x2_t *)v56[1];
            }
            else
            {
              --v442;
            }
            v443 = v443 + (*v445 + *v447) * (v445[1] - v447[1]);
            --v441;
          }
          while (v446);
          if (v443 * 0.5 > 0.0)
          {
            v541 = 0;
            v414 = 1;
            goto LABEL_869;
          }
        }
      }
      v414 = 0;
      v435 = 22;
    }
    v541 = v435;
    goto LABEL_869;
  }
  v414 = 0;
  v415 = (int)v578[0];
LABEL_814:
  v541 = v415;
  v417 = a1;
LABEL_869:
  v545 = v414;
  v62 = (float **)(*v417)[3];
  v63 = (*v417)[4];
  if (v62 == (float **)v63)
    goto LABEL_870;
LABEL_643:
  v334 = 0;
  *(int64x2_t *)__srcb = vdupq_n_s64(0xFFFFFFFFFFB3B4C0);
  v548 = (float **)v63;
LABEL_645:
  while (2)
  {
    while (2)
    {
      while (2)
      {
        v335 = *v62;
        v336 = v62[1];
        if (*v62 != v336)
        {
          v337 = *v62;
          do
          {
            v338 = (*(_DWORD *)v337 & 0x7FFFFFFFu) <= 0x7F7FFFFF && ((_DWORD)v337[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF;
            v339 = !v338;
            if (!v338)
              break;
            v337 += 2;
          }
          while (v337 != v336);
          if ((v339 & 1) != 0)
            goto LABEL_644;
        }
        v340 = (char *)v336 - (char *)v335;
        if ((unint64_t)((char *)v336 - (char *)v335) < 0x18)
          goto LABEL_644;
        v341 = v340 >> 3;
        *(_QWORD *)object = *v62;
        *(_QWORD *)&object[8] = v335;
        *(_QWORD *)&object[16] = v336;
        *(_QWORD *)&object[24] = v340 >> 3;
        *(_QWORD *)&object[32] = 0;
        *(_QWORD *)&object[40] = v336;
        *(_QWORD *)&object[48] = v335;
        v582 = (unint64_t)v336;
        v342 = v335 == v336 ? 0 : (std::__shared_weak_count *)(v341 + 1);
        v583 = v340 >> 3;
        v584 = (uint64_t)v342;
        if (sub_2233DADA4((uint64_t)object) < 4)
        {
LABEL_644:
          ++v334;
          v62 += 3;
          if (v62 == (float **)v63)
            goto LABEL_805;
          continue;
        }
        break;
      }
      if (!v342)
      {
        *(_QWORD *)&v573 = v336;
        *((_QWORD *)&v573 + 1) = v335;
        *(_QWORD *)&v574 = v336;
        *((_QWORD *)&v574 + 1) = v340 >> 3;
        v575 = 0;
        goto LABEL_666;
      }
      v344 = v335 + 2;
      if (v340 <= 8)
        v344 = v336;
      v559[0] = v344;
      v559[1] = v335;
      v559[2] = v336;
      v559[3] = (void *)(v340 >> 3);
      *(_QWORD *)&v560 = 1;
      v565[0] = v336;
      v565[1] = v335;
      v565[2] = v336;
      v566 = v340 >> 3;
      v567 = v342;
      sub_2233DB5CC((uint64_t)&v573, (uint64_t)v559, (uint64_t)v565, v335);
      if ((std::__shared_weak_count *)v575 == v342)
      {
LABEL_666:
        memset(v565, 0, sizeof(v565));
        v345 = (float32x2_t *)*v62;
        v346 = (float32x2_t *)v62[1];
        if (*v62 != (float *)v346)
          goto LABEL_667;
LABEL_678:
        v357 = 0.0;
LABEL_717:
        v559[0] = (void *)__PAIR64__(v2, v343.u32[0]);
        *(_OWORD *)&v559[1] = *(_OWORD *)__srcb;
        *(float *)&v559[3] = v357;
        LOBYTE(v578[0]) = 0;
        sub_2233FB5DC((uint64_t)v62, (uint64_t)&v569, (uint64_t)v559, v565, (BOOL *)v578);
        v375 = LOBYTE(v578[0]);
        if (v565[0])
        {
          v565[1] = v565[0];
          operator delete(v565[0]);
        }
        if (v375)
          goto LABEL_644;
        v377 = *v62;
        v376 = v62[1];
        v378 = (char *)v376 - (char *)*v62;
        if ((unint64_t)v378 < 0x18)
          goto LABEL_644;
        v379 = v378 >> 3;
        v380 = v376 == v377 ? 0 : v379 + 1;
        v381 = v380 - 1;
        if (v380 >= v379)
        {
          v382 = v62[1];
          if (v381 <= v379)
            v382 = &v377[2 * (v381 % v379)];
        }
        else
        {
          v382 = v376 - 2;
        }
        if (!v381)
          goto LABEL_644;
        v384 = 0.0;
        v385 = v62[1];
        do
        {
          if (v381 + 1 >= v379)
          {
            v386 = v62[1];
            if (v381 <= v379)
              v386 = &v377[2 * (v381 % v379)];
          }
          else
          {
            v386 = v385 - 2;
          }
          v387 = v381 - 1;
          if (v381 >= v379)
          {
            v388 = v62[1];
            if (v387 <= v379)
              v388 = &v377[2 * (v387 % v379)];
          }
          else
          {
            v388 = v382 - 2;
          }
          if (v381 + 1 >= v379)
          {
            v385 = v62[1];
            if (v381 <= v379)
              v385 = &v377[2 * (v381 % v379)];
          }
          else
          {
            v385 -= 2;
          }
          if (v381 >= v379)
          {
            v382 = &v377[2 * (v387 % v379)];
            if (v387 > v379)
              v382 = v62[1];
          }
          else
          {
            v382 -= 2;
          }
          v384 = v384 + (*v386 + *v388) * (v386[1] - v388[1]);
          --v381;
        }
        while (v387);
        if (v384 * 0.5 <= 0.0)
          goto LABEL_644;
        v62 += 3;
        if (v62 == (float **)v63)
          goto LABEL_805;
        continue;
      }
      break;
    }
    v355 = (float *)v573;
    if (v575 + 1 >= *((uint64_t *)&v574 + 1))
    {
      v356 = (void *)v574;
      if (v575 < *((uint64_t *)&v574 + 1))
        v356 = (void *)(*((_QWORD *)&v573 + 1) + 8 * ((v575 + 1) % *((_QWORD *)&v574 + 1)));
    }
    else
    {
      v356 = (void *)(v573 + 8);
    }
    v559[0] = v356;
    v559[1] = *((void **)&v573 + 1);
    *(_OWORD *)&v559[2] = v574;
    *(_QWORD *)&v560 = v575 + 1;
    v565[0] = v336;
    v565[1] = v335;
    v565[2] = v336;
    v566 = v340 >> 3;
    v567 = v342;
    sub_2233DB5CC((uint64_t)&v570, (uint64_t)v559, (uint64_t)v565, (float *)v573);
    if ((std::__shared_weak_count *)v572 == v342)
    {
LABEL_677:
      v63 = (float *)v548;
      memset(v565, 0, sizeof(v565));
      v345 = (float32x2_t *)*v62;
      v346 = (float32x2_t *)v62[1];
      if (*v62 == (float *)v346)
        goto LABEL_678;
LABEL_667:
      v348 = *v345;
      v347 = v345 + 1;
      v349 = v348;
      v350 = v348;
      if (v347 == v346)
      {
        v343 = v349;
      }
      else
      {
        v351 = v349;
        v343 = v349;
        do
        {
          v352 = *v347++;
          v353 = (int8x8_t)vcgt_f32(v351, v352);
          v354 = (int8x8_t)vcgt_f32(v352, v349);
          v343 = (float32x2_t)vbsl_s8(v353, (int8x8_t)v352, (int8x8_t)v343);
          v351 = (float32x2_t)vbsl_s8(v353, (int8x8_t)v352, (int8x8_t)v351);
          v350 = (float32x2_t)vbsl_s8(v354, (int8x8_t)v352, (int8x8_t)v350);
          v349 = (float32x2_t)vbsl_s8(v354, (int8x8_t)v352, (int8x8_t)v349);
        }
        while (v347 != v346);
      }
      v370 = vabd_f32(v350, v343);
      v371 = v370.f32[1];
      if (v370.f32[1] < v370.f32[0])
        v371 = v370.f32[0];
      v2 = v343.i32[1];
      v357 = 1.0;
      if (v371 != 0.0)
      {
        v372 = v371 * 0.00000011921;
        if (v371 < 1.0)
          v372 = 0.00000011921;
        v373 = v371 <= v372 && LODWORD(v371) >> 23 < 0xFF;
        if (v371 < 10000000.0 && !v373 && LODWORD(v371) >> 23 < 0xFF)
        {
          v552 = v343.i32[0];
          v374 = (float)(10000000.0 / v371) + 0.5;
          sub_2233DC31C(v374);
          v357 = (float)(uint64_t)vcvtms_s32_f32(v374);
          v343.i32[0] = v552;
        }
      }
      goto LABEL_717;
    }
    v551 = v334;
    v358 = v335;
    do
    {
      v359 = v355;
      v360 = (float *)v570;
      v559[0] = (void *)0x3FF0000000000000;
      v361 = sub_2233DB7C4((float *)v570, v359, v358, (double *)v559);
      if (v361 == 0.0
        || (*(_QWORD *)&v361 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && fabs(v361) <= *(double *)v559 * 2.22044605e-16)
      {
        v362 = v359[1];
        v363 = v360[1] - v362;
        v364 = *v359 - *v360;
        if (v364 == 0.0)
          goto LABEL_688;
        if (COERCE_INT(fabs(*v359 - *v360)) <= 2139095039)
        {
          v367 = fabsf(v364);
          v368 = v367 * 0.00000011921;
          if (v367 < 1.0)
            v368 = 0.00000011921;
          if (v367 <= v368)
          {
LABEL_688:
            if (v363 == 0.0)
              goto LABEL_726;
            if (COERCE_INT(fabs(v360[1] - v362)) <= 2139095039)
            {
              v365 = fabsf(-v363);
              v366 = v365 * 0.00000011921;
              if (v365 < 1.0)
                v366 = 0.00000011921;
              if (v365 <= v366)
                goto LABEL_726;
            }
          }
        }
        if ((float)((float)((float)(v362 * v363) - (float)(*v359 * v364))
                   + (float)((float)(v364 * *v358) - (float)(v363 * v358[1]))) <= 0.0)
        {
LABEL_726:
          v63 = (float *)v548;
          v334 = v551 + 1;
          v62 += 3;
          if (v62 != v548)
            goto LABEL_645;
          goto LABEL_805;
        }
      }
      v573 = v570;
      v574 = v571;
      v575 = v572;
      v355 = (float *)v570;
      if ((std::__shared_weak_count *)v572 == v342)
      {
        v578[0] = v336;
        v578[1] = v335;
        *(_QWORD *)&v579 = v336;
        *((_QWORD *)&v579 + 1) = v340 >> 3;
        *(_QWORD *)&v580 = v342;
      }
      else
      {
        if (v572 + 1 >= *((uint64_t *)&v574 + 1))
        {
          v369 = (void *)v574;
          if (v572 < *((uint64_t *)&v574 + 1))
            v369 = (void *)(*((_QWORD *)&v573 + 1) + 8 * ((v572 + 1) % *((_QWORD *)&v574 + 1)));
        }
        else
        {
          v369 = (void *)(v570 + 8);
        }
        v559[0] = v369;
        v559[1] = *((void **)&v573 + 1);
        *(_OWORD *)&v559[2] = v574;
        *(_QWORD *)&v560 = v572 + 1;
        v565[0] = v336;
        v565[1] = v335;
        v565[2] = v336;
        v566 = v340 >> 3;
        v567 = v342;
        sub_2233DB5CC((uint64_t)v578, (uint64_t)v559, (uint64_t)v565, (float *)v570);
      }
      v570 = *(_OWORD *)v578;
      v571 = v579;
      v572 = v580;
      v358 = v359;
    }
    while ((std::__shared_weak_count *)v580 != v342);
    if ((uint64_t)v342 >= v341)
    {
      v383 = v336;
      v334 = v551;
      if ((uint64_t)&v342[-1].__shared_weak_owners_ + 7 <= v341)
        v383 = &v335[2 * (((uint64_t)&v342[-1].__shared_weak_owners_ + 7) % v341)];
    }
    else
    {
      v383 = v336 - 2;
      v334 = v551;
    }
    v389 = *v335;
    v390 = *v383;
    if (*v335 != *v383)
    {
      if ((LODWORD(v389) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v390) & 0x7FFFFFFFu) > 0x7F7FFFFF)
        goto LABEL_677;
      v394 = vabds_f32(v389, v390);
      v395 = fabsf(v389);
      v396 = fabsf(v390);
      if (v395 < v396)
        v395 = v396;
      v397 = v395 >= 1.0 ? v395 * 0.00000011921 : 0.00000011921;
      if (v394 > v397)
        goto LABEL_677;
    }
    v391 = v335[1];
    v392 = v383[1];
    if (v391 != v392)
    {
      if ((LODWORD(v391) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v392) & 0x7FFFFFFFu) > 0x7F7FFFFF)
        goto LABEL_677;
      v398 = vabds_f32(v391, v392);
      v399 = fabsf(v391);
      v400 = fabsf(v392);
      if (v399 < v400)
        v399 = v400;
      v401 = v399 >= 1.0 ? v399 * 0.00000011921 : 0.00000011921;
      if (v398 > v401)
        goto LABEL_677;
    }
    __p[0] = v336;
    __p[1] = v335;
    __p[2] = v336;
    __p[3] = (void *)(v340 >> 3);
    __p[4] = v342;
    *(_QWORD *)&v585 = v335;
    *((_QWORD *)&v585 + 1) = v335;
    v586 = v336;
    v587 = v340 >> 3;
    v588 = 0;
    sub_2233DBF00((uint64_t)v578, (float **)__p, (uint64_t)&v585);
    if (v340 < 9)
    {
      v393 = v336;
      if (v340 >= 1)
        v393 = &v335[2 * (1 - v341)];
    }
    else
    {
      v393 = v335 + 2;
    }
    v559[0] = v393;
    v559[1] = v335;
    v559[2] = v336;
    v559[3] = (void *)(v340 >> 3);
    *(_QWORD *)&v560 = 1;
    v565[0] = v336;
    v565[1] = v335;
    v565[2] = v336;
    v566 = v340 >> 3;
    v567 = v342;
    sub_2233DB5CC((uint64_t)v576, (uint64_t)v559, (uint64_t)v565, v335);
    v402 = v576[0];
    if ((uint64_t)v580 >= *((uint64_t *)&v579 + 1))
    {
      if ((uint64_t)v580 - 1 <= *((uint64_t *)&v579 + 1))
        v403 = (float *)((char *)v578[1] + 8 * (((uint64_t)v580 - 1) % *((_QWORD *)&v579 + 1)));
      else
        v403 = (float *)v579;
    }
    else
    {
      v403 = (float *)((char *)v578[0] - 8);
    }
    v559[0] = (void *)0x3FF0000000000000;
    v404 = sub_2233DB7C4(v576[0], v335, v403, (double *)v559);
    if (v404 != 0.0
      && ((*(_QWORD *)&v404 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
       || fabs(v404) > *(double *)v559 * 2.22044605e-16))
    {
      v334 = v551;
      v63 = (float *)v548;
      goto LABEL_803;
    }
    v405 = v335[1];
    v406 = v402[1] - v405;
    v407 = *v335 - *v402;
    v334 = v551;
    v63 = (float *)v548;
    if (v407 != 0.0)
    {
      if (COERCE_INT(fabs(*v335 - *v402)) > 2139095039)
        goto LABEL_800;
      v410 = fabsf(v407);
      v411 = v410 * 0.00000011921;
      if (v410 < 1.0)
        v411 = 0.00000011921;
      if (v410 > v411)
        goto LABEL_800;
    }
    if (v406 != 0.0)
    {
      if (COERCE_INT(fabs(v402[1] - v405)) > 2139095039)
        goto LABEL_800;
      v408 = fabsf(-v406);
      v409 = v408 * 0.00000011921;
      if (v408 < 1.0)
        v409 = 0.00000011921;
      if (v408 > v409)
      {
LABEL_800:
        if ((float)((float)((float)(v405 * v406) - (float)(*v335 * v407))
                   + (float)((float)(v407 * *v403) - (float)(v406 * v403[1]))) > 0.0)
        {
LABEL_803:
          memset(v565, 0, sizeof(v565));
          v345 = (float32x2_t *)*v62;
          v346 = (float32x2_t *)v62[1];
          if (*v62 != (float *)v346)
            goto LABEL_667;
          goto LABEL_678;
        }
      }
    }
    v334 = v551 + 1;
    v62 += 3;
    if (v62 != v548)
      continue;
    break;
  }
LABEL_805:
  v553 = v334;
  v412 = atomic_load((unsigned __int8 *)&qword_2557892F0);
  if ((v412 & 1) == 0)
  {
LABEL_988:
    if (__cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
  }
LABEL_871:
  sub_2233CFA44(object);
  if (*(char *)(*(_QWORD *)object + 39) < 0)
  {
    v449 = *(const void **)(*(_QWORD *)object + 16);
    v450 = *(_QWORD *)(*(_QWORD *)object + 24);
  }
  else
  {
    v449 = (const void *)(*(_QWORD *)object + 16);
    v450 = *(unsigned __int8 *)(*(_QWORD *)object + 39);
  }
  sub_223195728((uint64_t)&unk_255789280, v449, v450, "Boundary polygon of room %s is invalid: %u. Vertices outer boundary: %zu (failure: %u). Inner holes: %zu (num invalid: %d).", 0x7BuLL);
  sub_2233CFB38(v576);
  if (**((int **)v576[0] + 7) > 5)
    return v545;
  v451 = *((unsigned __int8 *)v576[0] + 72);
  v452 = *((_BYTE *)v576[0] + 72) != 0;
  v453 = sub_22322F254((uint64_t)v576[0], "OSLogSurrogateAppender", 1, 0);
  if (((v453 == 0) & ~v452) != 0)
    return v545;
  v559[0] = v576;
  v559[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  v559[2] = (void *)std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v559[3]) = 5;
  *(_QWORD *)&v560 = "unknown file";
  DWORD2(v560) = 435;
  v562 = 0;
  v563 = 0;
  v561 = "unknown function";
  sub_2245664AC((unsigned __int8 *)a1[1], v578);
  v454 = *a1;
  v455 = *(_QWORD *)v559[0];
  v456 = (const char *)(*(_QWORD *)v559[0] + 16);
  v549 = v451;
  v540 = v456;
  if (*(char *)(*(_QWORD *)v559[0] + 39) < 0)
  {
    v456 = *(const char **)(v455 + 16);
    v457 = *(_QWORD *)(v455 + 24);
    v458 = v454[3];
    v459 = v454[4];
    v461 = *v454;
    v460 = v454[1];
    v463 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v463 & 1) == 0)
    {
LABEL_990:
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
    }
  }
  else
  {
    v457 = *(unsigned __int8 *)(*(_QWORD *)v559[0] + 39);
    v458 = v454[3];
    v459 = v454[4];
    v461 = *v454;
    v460 = v454[1];
    v462 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v462 & 1) == 0)
      goto LABEL_990;
  }
  if (byte_255788F57 >= 0)
    v464 = (const char *)&xmmword_255788F40;
  else
    v464 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v465 = byte_255788F57;
  else
    v465 = *((_QWORD *)&xmmword_255788F40 + 1);
  __srcc = v456;
  *(_QWORD *)object = os_log_create(v464, v456);
  v466 = &object[8];
  if (v465 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v465 >= 0x17)
  {
    v537 = v453;
    v467 = v455;
    v468 = v458;
    v469 = v459;
    v470 = (v465 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v465 | 7) != 0x17)
      v470 = v465 | 7;
    v471 = v470 + 1;
    v466 = operator new(v470 + 1);
    *(_QWORD *)&object[24] = v471 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v466;
    *(_QWORD *)&object[16] = v465;
    v459 = v469;
    v458 = v468;
    v455 = v467;
    v453 = v537;
    goto LABEL_893;
  }
  object[31] = v465;
  if (v465)
LABEL_893:
    memmove(v466, v464, v465);
  v466[v465] = 0;
  object[32] = 1;
  v472 = &object[40];
  if (v457 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v457 >= 0x17)
  {
    v474 = (v457 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v457 | 7) != 0x17)
      v474 = v457 | 7;
    v475 = v474 + 1;
    v472 = operator new(v474 + 1);
    v582 = v475 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v472;
    *(_QWORD *)&object[48] = v457;
  }
  else
  {
    HIBYTE(v582) = v457;
    if (!v457)
    {
      object[40] = 0;
      LOBYTE(v583) = 1;
      v473 = *(NSObject **)object;
      if ((SHIBYTE(v582) & 0x80000000) == 0)
        goto LABEL_898;
LABEL_904:
      operator delete(*(void **)&object[40]);
      if (object[32])
        goto LABEL_905;
      goto LABEL_907;
    }
  }
  memmove(v472, __srcc, v457);
  v472[v457] = 0;
  LOBYTE(v583) = 1;
  v473 = *(NSObject **)object;
  if (SHIBYTE(v582) < 0)
    goto LABEL_904;
LABEL_898:
  if (object[32])
  {
LABEL_905:
    if ((object[31] & 0x80000000) != 0)
      operator delete(*(void **)&object[8]);
  }
LABEL_907:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  v476 = ((char *)v459 - (char *)v458) >> 3;
  v477 = ((char *)v460 - (char *)v461) >> 3;
  v478 = 0xAAAAAAAAAAAAAAABLL * v476;
  if (v453 && *(_QWORD *)(v453 + 24))
  {
    v479 = _os_log_pack_size();
    v480 = operator new(v479, (std::align_val_t)8uLL);
    v481 = (_QWORD *)operator new();
    *v481 = &off_24EC1F7F0;
    v481[1] = 0;
    v481[2] = 0;
    v481[3] = v480;
    v565[0] = v480;
    v565[1] = v480;
    v566 = 0;
    v567 = 0;
    v565[2] = v481;
    v482 = strlen((const char *)v578);
    if (v482 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v483 = (void *)v482;
    if (v482 >= 0x17)
    {
      v488 = (v482 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v482 | 7) != 0x17)
        v488 = v482 | 7;
      v489 = v488 + 1;
      v484 = operator new(v488 + 1);
      __p[1] = v483;
      __p[2] = (void *)(v489 | 0x8000000000000000);
      __p[0] = v484;
    }
    else
    {
      HIBYTE(__p[2]) = v482;
      v484 = __p;
      if (!v482)
        goto LABEL_921;
    }
    memcpy(v484, v578, (size_t)v483);
LABEL_921:
    *((_BYTE *)v483 + (_QWORD)v484) = 0;
    v490 = __p[0];
    *(void **)&v585 = __p[1];
    *(void **)((char *)&v585 + 7) = *(void **)((char *)&__p[1] + 7);
    v491 = HIBYTE(__p[2]);
    v492 = operator new(0x40uLL);
    v492[1] = 0;
    v492[2] = 0;
    v492[3] = off_24EC36380;
    *v492 = &off_24EC36330;
    v493 = v585;
    v492[4] = v490;
    v492[5] = v493;
    *(_QWORD *)((char *)v492 + 47) = *(_QWORD *)((char *)&v585 + 7);
    *((_BYTE *)v492 + 55) = v491;
    *(_QWORD *)&v585 = 0;
    *(_QWORD *)((char *)&v585 + 7) = 0;
    v494 = v567;
    v566 = (uint64_t)(v492 + 3);
    v567 = (std::__shared_weak_count *)v492;
    if (v494)
    {
      p_shared_owners = (unint64_t *)&v494->__shared_owners_;
      do
        v496 = __ldaxr(p_shared_owners);
      while (__stlxr(v496 - 1, p_shared_owners));
      if (!v496)
      {
        ((void (*)(std::__shared_weak_count *))v494->__on_zero_shared)(v494);
        std::__shared_weak_count::__release_weak(v494);
      }
    }
    *(_OWORD *)object = *(_OWORD *)v565;
    v497 = v566;
    *(void **)&object[16] = v565[2];
    if (v565[2])
    {
      v498 = (unint64_t *)((char *)v565[2] + 8);
      do
        v499 = __ldxr(v498);
      while (__stxr(v499 + 1, v498));
    }
    v500 = v567;
    *(_QWORD *)&object[24] = v497;
    *(_QWORD *)&object[32] = v567;
    if (v567)
    {
      v501 = (unint64_t *)&v567->__shared_owners_;
      do
        v502 = __ldxr(v501);
      while (__stxr(v502 + 1, v501));
      *(_QWORD *)&object[40] = v497;
      do
        v503 = __ldaxr(v501);
      while (__stlxr(v503 - 1, v501));
      if (!v503)
      {
        ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
        std::__shared_weak_count::__release_weak(v500);
      }
    }
    else
    {
      *(_QWORD *)&object[40] = v497;
    }
    v504 = (std::__shared_weak_count *)v565[2];
    if (v565[2])
    {
      v505 = (unint64_t *)((char *)v565[2] + 8);
      do
        v506 = __ldaxr(v505);
      while (__stlxr(v506 - 1, v505));
      if (!v506)
      {
        ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
        std::__shared_weak_count::__release_weak(v504);
      }
    }
    v507 = *(_QWORD *)object;
    if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
      v508 = *(_QWORD *)&object[40] + 8;
    else
      v508 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
    v509 = _os_log_pack_fill();
    *(_DWORD *)v509 = 136316418;
    *(_QWORD *)(v509 + 4) = v508;
    *(_WORD *)(v509 + 12) = 1024;
    *(_DWORD *)(v509 + 14) = v543;
    *(_WORD *)(v509 + 18) = 2048;
    *(_QWORD *)(v509 + 20) = v477;
    *(_WORD *)(v509 + 28) = 1024;
    *(_DWORD *)(v509 + 30) = v541;
    *(_WORD *)(v509 + 34) = 2048;
    *(_QWORD *)(v509 + 36) = v478;
    *(_WORD *)(v509 + 44) = 1024;
    v485 = v553;
    *(_DWORD *)(v509 + 46) = v553;
    v510 = (char *)operator new();
    v511 = *(unsigned __int8 *)(v455 + 39);
    v512 = v540;
    if ((v511 & 0x80u) != 0)
    {
      v512 = *(const char **)(v455 + 16);
      v511 = *(_QWORD *)(v455 + 24);
    }
    *(_QWORD *)v510 = v507;
    *(_OWORD *)(v510 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v510 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *((_QWORD *)v510 + 5) = v512;
    *((_QWORD *)v510 + 6) = v511;
    v510[56] = 16;
    __p[0] = 0;
    v565[0] = v510;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v453 + 24) + 40))(*(_QWORD *)(v453 + 24), v565);
    v487 = (unsigned __int8 **)a1;
    v513 = v565[0];
    v565[0] = 0;
    if (v513)
    {
      v514 = (std::__shared_weak_count *)*((_QWORD *)v513 + 4);
      if (v514)
      {
        v515 = (unint64_t *)&v514->__shared_owners_;
        do
          v516 = __ldaxr(v515);
        while (__stlxr(v516 - 1, v515));
        if (!v516)
        {
          ((void (*)(std::__shared_weak_count *))v514->__on_zero_shared)(v514);
          std::__shared_weak_count::__release_weak(v514);
        }
      }
      v517 = (std::__shared_weak_count *)*((_QWORD *)v513 + 2);
      if (v517)
      {
        v518 = (unint64_t *)&v517->__shared_owners_;
        do
          v519 = __ldaxr(v518);
        while (__stlxr(v519 - 1, v518));
        if (!v519)
        {
          ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
          std::__shared_weak_count::__release_weak(v517);
        }
      }
      MEMORY[0x227684CE8](v513, 0x10F0C40B62ED6C6);
      v520 = __p[0];
      __p[0] = 0;
      if (v520)
      {
        v521 = (std::__shared_weak_count *)*((_QWORD *)v520 + 4);
        if (v521)
        {
          v522 = (unint64_t *)&v521->__shared_owners_;
          do
            v523 = __ldaxr(v522);
          while (__stlxr(v523 - 1, v522));
          if (!v523)
          {
            ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
            std::__shared_weak_count::__release_weak(v521);
          }
        }
        v524 = (std::__shared_weak_count *)*((_QWORD *)v520 + 2);
        if (v524)
        {
          v525 = (unint64_t *)&v524->__shared_owners_;
          do
            v526 = __ldaxr(v525);
          while (__stlxr(v526 - 1, v525));
          if (!v526)
          {
            ((void (*)(std::__shared_weak_count *))v524->__on_zero_shared)(v524);
            std::__shared_weak_count::__release_weak(v524);
          }
        }
        MEMORY[0x227684CE8](v520, 0x10F0C40B62ED6C6);
      }
    }
    v527 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v528 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v529 = __ldaxr(v528);
      while (__stlxr(v529 - 1, v528));
      if (!v529)
      {
        ((void (*)(std::__shared_weak_count *))v527->__on_zero_shared)(v527);
        std::__shared_weak_count::__release_weak(v527);
      }
    }
    v530 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v531 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v532 = __ldaxr(v531);
      while (__stlxr(v532 - 1, v531));
      if (!v532)
      {
        ((void (*)(std::__shared_weak_count *))v530->__on_zero_shared)(v530);
        std::__shared_weak_count::__release_weak(v530);
      }
    }
  }
  else
  {
    os_log_type_enabled(v473, OS_LOG_TYPE_ERROR);
    *(_DWORD *)object = 136316418;
    *(_QWORD *)&object[4] = v578;
    *(_WORD *)&object[12] = 1024;
    *(_DWORD *)&object[14] = v543;
    *(_WORD *)&object[18] = 2048;
    *(_QWORD *)&object[20] = ((char *)v460 - (char *)v461) >> 3;
    *(_WORD *)&object[28] = 1024;
    *(_DWORD *)&object[30] = v541;
    *(_WORD *)&object[34] = 2048;
    *(_QWORD *)&object[36] = v478;
    *(_WORD *)&object[44] = 1024;
    v485 = v553;
    *(_DWORD *)&object[46] = v553;
    v486 = (void *)_os_log_send_and_compose_impl();
    v487 = (unsigned __int8 **)a1;
    if (v486)
      free(v486);
  }
  if (v549)
  {
    sub_2245664AC(v487[1], object);
    sub_22322C138((uint64_t)v559, "Boundary polygon of room %s is invalid: %u. Vertices outer boundary: %zu (failure: %u). Inner holes: %zu (num invalid: %d).", object, v543, (uint64_t)(*((_QWORD *)*v487 + 1) - *(_QWORD *)*v487) >> 3, v541, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)*v487 + 4) - *((_QWORD *)*v487 + 3)) >> 3), v485);
    sub_223182C08((uint64_t)v559);
  }
  sub_223182C08((uint64_t)v559);
  v533 = v563;
  if (v563)
  {
    v534 = (unint64_t *)&v563->__shared_owners_;
    do
      v535 = __ldaxr(v534);
    while (__stlxr(v535 - 1, v534));
    if (!v535)
    {
      ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
      std::__shared_weak_count::__release_weak(v533);
    }
  }
  return v545;
}

void sub_2233DA940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (LOBYTE(STACK[0x218]))
  {
    if (SLOBYTE(STACK[0x217]) < 0)
      operator delete((void *)STACK[0x200]);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_2233DA980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  unint64_t v71;

  v68 = STACK[0x228];
  if (STACK[0x228])
  {
    v69 = STACK[0x230];
    v70 = (void *)STACK[0x228];
    if (STACK[0x230] != v68)
    {
      do
      {
        v71 = v69 - 24;
        sub_2233FADDC(*(_QWORD **)(v69 - 16));
        v69 = v71;
      }
      while (v71 != v68);
      v70 = (void *)STACK[0x228];
    }
    STACK[0x230] = v68;
    operator delete(v70);
  }
  sub_2233FADDC((_QWORD *)STACK[0x218]);
  sub_2233FB518((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_2233DA9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  char a67;

  if (__p)
    operator delete(__p);
  if (a37)
  {
    operator delete(a37);
    sub_2233FAD70((uint64_t)&STACK[0x200]);
    sub_2233FB518((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_2233FAD70((uint64_t)&STACK[0x200]);
  sub_2233FB518((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_2233DAB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  sub_22319A054(&a37);
  sub_22319A054(&a61);
  sub_223199DE8((uint64_t)&STACK[0x200]);
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_2233DAB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_223199DE8((uint64_t)&STACK[0x200]);
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_2233DABA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  int v37;
  void *v38;

  if (v37 < 0)
  {
    operator delete(v38);
    sub_223199DE8((uint64_t)&a37);
    sub_223182DAC((uint64_t)&a27);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a37);
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_2233DAC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_2233DAC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_2233DAC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_2233DAC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (LOBYTE(STACK[0x220]) && SLOBYTE(STACK[0x21F]) < 0)
    operator delete((void *)STACK[0x208]);
  if (STACK[0x200])
    os_release((void *)STACK[0x200]);
  sub_223182DAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_2233DACC8(void *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x2233DACF8);
}

void sub_2233DACD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233DAD00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  char *v6;
  size_t v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (v5 < 0)
      sub_22316E078();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = &v6[8 * (v5 >> 3)];
    v7 = v5 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v6, v4, v7);
    *(_QWORD *)(a1 + 8) = &v6[v7];
  }
  *(_BYTE *)(a1 + 24) = 1;
  return a1;
}

void sub_2233DAD88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2233DADA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  unint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float *v9;
  float v10;
  float v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 72);
  result = v3 - v2;
  if ((unint64_t)(v3 - v2) >= 2)
  {
    v5 = 0;
    v7 = *(float **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    v9 = *(float **)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 24);
    do
    {
      result = v5 + 1;
      if (v2 == v3)
        break;
      v10 = *v7;
      if ((*(_DWORD *)v7 & 0x7FFFFFFFu) >= 0x7F800000)
      {
        v12 = v7;
        while (*v12 == v10)
        {
          v25 = v12[1];
          v26 = v7[1];
          if (v25 != v26)
          {
            if ((LODWORD(v25) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v26) & 0x7FFFFFFFu) > 0x7F7FFFFF)
              break;
            v28 = vabds_f32(v25, v26);
            v29 = fabsf(v25);
            v30 = fabsf(v26);
            if (v29 < v30)
              v29 = v30;
            v31 = v29 >= 1.0 ? v29 * 0.00000011921 : 0.00000011921;
            if (v28 > v31)
              break;
          }
          v32 = v2 + 1;
          if (v2 + 1 < v8)
          {
            v12 += 2;
          }
          else
          {
            v12 = v9;
            if (v2 < v8)
              v12 = (float *)(v6 + 8 * (v32 % v8));
          }
          ++v2;
          if (v3 == v32)
            return result;
        }
      }
      else
      {
        v11 = fabsf(v10);
        v12 = v7;
        while (1)
        {
          v13 = *v12;
          if (*v12 != v10)
          {
            if ((LODWORD(v13) & 0x7FFFFFFFu) > 0x7F7FFFFF)
              break;
            v14 = vabds_f32(v13, v10);
            v15 = fabsf(v13);
            if (v15 < v11)
              v15 = v11;
            v16 = v15 >= 1.0 ? v15 * 0.00000011921 : 0.00000011921;
            if (v14 > v16)
              break;
          }
          v17 = v12[1];
          v18 = v7[1];
          if (v17 != v18)
          {
            if ((LODWORD(v17) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v18) & 0x7FFFFFFFu) > 0x7F7FFFFF)
              break;
            v20 = vabds_f32(v17, v18);
            v21 = fabsf(v17);
            v22 = fabsf(v18);
            if (v21 < v22)
              v21 = v22;
            v23 = v21 >= 1.0 ? v21 * 0.00000011921 : 0.00000011921;
            if (v20 > v23)
              break;
          }
          v24 = v2 + 1;
          if (v2 + 1 < v8)
          {
            v12 += 2;
          }
          else
          {
            v12 = v9;
            if (v2 < v8)
              v12 = (float *)(v6 + 8 * (v24 % v8));
          }
          ++v2;
          if (v3 == v24)
            return result;
        }
      }
      v7 = v12;
      if (v2 == v3)
        break;
    }
    while (v5++ < 4);
  }
  return result;
}

uint64_t sub_2233DAF90(float *a1, float *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  float *v8;
  float *v9;
  float *v10;
  uint64_t v11;
  uint64_t result;
  float *v13;
  float *v14;
  float *v15;
  double v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float *v40;
  float *v41;
  double v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  float *v57;
  _QWORD v58[5];
  float *v59[5];
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  float *v63;
  float *v64;
  unsigned __int128 v65;
  float *v66;
  double v67;
  float *v68;
  __int128 v69;
  uint64_t v70;

  v6 = (char *)a2 - (char *)a1;
  v7 = ((char *)a2 - (char *)a1) >> 3;
  if (a2 == a1)
    v8 = 0;
  else
    v8 = (float *)(v7 + 1);
  if (!v8)
  {
    *(_QWORD *)&v54 = a2;
    *((_QWORD *)&v54 + 1) = a1;
    *(_QWORD *)&v55 = a2;
    *((_QWORD *)&v55 + 1) = ((char *)a2 - (char *)a1) >> 3;
    v56 = 0;
LABEL_16:
    result = 0;
    *a3 = 0;
    return result;
  }
  if (v6 < 9)
  {
    v9 = a2;
    if (v6 >= 1)
      v9 = &a1[2 * (1 % v7)];
  }
  else
  {
    v9 = a1 + 2;
  }
  v67 = *(double *)&v9;
  v68 = a1;
  *(_QWORD *)&v69 = a2;
  *((_QWORD *)&v69 + 1) = ((char *)a2 - (char *)a1) >> 3;
  v70 = 1;
  v63 = a2;
  v64 = a1;
  v65 = __PAIR128__(*((unint64_t *)&v69 + 1), (unint64_t)a2);
  v66 = v8;
  sub_2233DB5CC((uint64_t)&v54, (uint64_t)&v67, (uint64_t)&v63, a1);
  if ((float *)v56 == v8)
    goto LABEL_16;
  v10 = (float *)v54;
  if (v56 + 1 >= *((uint64_t *)&v55 + 1))
  {
    v11 = *(uint64_t *)&v55;
    if (v56 < *((uint64_t *)&v55 + 1))
      v11 = *((_QWORD *)&v54 + 1) + 8 * ((v56 + 1) % *((_QWORD *)&v55 + 1));
  }
  else
  {
    v11 = v54 + 8;
  }
  v67 = *(double *)&v11;
  v68 = (float *)*((_QWORD *)&v54 + 1);
  v69 = v55;
  v70 = v56 + 1;
  v63 = a2;
  v64 = a1;
  *(_QWORD *)&v65 = a2;
  *((_QWORD *)&v65 + 1) = v7;
  v66 = v8;
  sub_2233DB5CC((uint64_t)&v51, (uint64_t)&v67, (uint64_t)&v63, (float *)v54);
  if ((float *)v53 == v8)
    goto LABEL_16;
  v50 = v6;
  v13 = a1;
  do
  {
    v14 = v10;
    v15 = (float *)v51;
    v67 = 1.0;
    v16 = sub_2233DB7C4((float *)v51, v14, v13, &v67);
    if (v16 == 0.0
      || (*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v16) <= v67 * 2.22044605e-16)
    {
      v17 = v14[1];
      v18 = v15[1] - v17;
      v19 = *v14 - *v15;
      if (v19 == 0.0)
        goto LABEL_26;
      if (COERCE_UNSIGNED_INT(fabs(*v14 - *v15)) <= 0x7F7FFFFF)
      {
        v22 = fabsf(v19);
        v23 = v22 * 0.00000011921;
        if (v22 < 1.0)
          v23 = 0.00000011921;
        if (v22 <= v23)
        {
LABEL_26:
          if (v18 == 0.0)
            goto LABEL_42;
          if (COERCE_UNSIGNED_INT(fabs(v15[1] - v17)) <= 0x7F7FFFFF)
          {
            v20 = fabsf(-v18);
            v21 = v20 * 0.00000011921;
            if (v20 < 1.0)
              v21 = 0.00000011921;
            if (v20 <= v21)
              goto LABEL_42;
          }
        }
      }
      if ((float)((float)((float)(v17 * v18) - (float)(*v14 * v19))
                 + (float)((float)(v19 * *v13) - (float)(v18 * v13[1]))) <= 0.0)
      {
LABEL_42:
        *a3 = 12;
        return 1;
      }
    }
    v54 = v51;
    v55 = v52;
    v56 = v53;
    v10 = (float *)v51;
    if ((float *)v53 == v8)
    {
      *(_QWORD *)&v60 = a2;
      *((_QWORD *)&v60 + 1) = a1;
      *(_QWORD *)&v61 = a2;
      *((_QWORD *)&v61 + 1) = v7;
      v62 = (uint64_t)v8;
    }
    else
    {
      if (v53 + 1 >= *((uint64_t *)&v55 + 1))
      {
        v24 = *(uint64_t *)&v55;
        if (v53 < *((uint64_t *)&v55 + 1))
          v24 = *((_QWORD *)&v54 + 1) + 8 * ((v53 + 1) % *((_QWORD *)&v55 + 1));
      }
      else
      {
        v24 = v51 + 8;
      }
      v67 = *(double *)&v24;
      v68 = (float *)*((_QWORD *)&v54 + 1);
      v69 = v55;
      v70 = v53 + 1;
      v63 = a2;
      v64 = a1;
      *(_QWORD *)&v65 = a2;
      *((_QWORD *)&v65 + 1) = v7;
      v66 = v8;
      sub_2233DB5CC((uint64_t)&v60, (uint64_t)&v67, (uint64_t)&v63, (float *)v51);
    }
    v51 = v60;
    v52 = v61;
    v53 = v62;
    v13 = v14;
  }
  while ((float *)v62 != v8);
  if ((uint64_t)v8 >= v7)
  {
    v25 = a2;
    v26 = v50;
    if ((uint64_t)v8 - 1 <= v7)
      v25 = &a1[2 * (((uint64_t)v8 - 1) % v7)];
  }
  else
  {
    v25 = a2 - 2;
    v26 = v50;
  }
  v27 = *a1;
  v28 = *v25;
  if (*a1 != *v25)
  {
    if ((LODWORD(v27) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v28) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      goto LABEL_16;
    v32 = vabds_f32(v27, v28);
    v33 = fabsf(v27);
    v34 = fabsf(v28);
    if (v33 < v34)
      v33 = v34;
    v35 = v33 >= 1.0 ? v33 * 0.00000011921 : 0.00000011921;
    if (v32 > v35)
      goto LABEL_16;
  }
  v29 = a1[1];
  v30 = v25[1];
  if (v29 != v30)
  {
    if ((LODWORD(v29) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v30) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      goto LABEL_16;
    v36 = vabds_f32(v29, v30);
    v37 = fabsf(v29);
    v38 = fabsf(v30);
    if (v37 < v38)
      v37 = v38;
    v39 = v37 >= 1.0 ? v37 * 0.00000011921 : 0.00000011921;
    if (v36 > v39)
      goto LABEL_16;
  }
  v59[0] = a2;
  v59[1] = a1;
  v59[2] = a2;
  v59[3] = (float *)v7;
  v59[4] = v8;
  v58[0] = a1;
  v58[1] = a1;
  v58[2] = a2;
  v58[3] = v7;
  v58[4] = 0;
  sub_2233DBF00((uint64_t)&v60, v59, (uint64_t)v58);
  if (v26 < 9)
  {
    v31 = a2;
    if (v26 >= 1)
      v31 = &a1[2 * (1 - v7)];
  }
  else
  {
    v31 = a1 + 2;
  }
  v67 = *(double *)&v31;
  v68 = a1;
  *(_QWORD *)&v69 = a2;
  *((_QWORD *)&v69 + 1) = v7;
  v70 = 1;
  v63 = a2;
  v64 = a1;
  *(_QWORD *)&v65 = a2;
  *((_QWORD *)&v65 + 1) = v7;
  v66 = v8;
  sub_2233DB5CC((uint64_t)&v57, (uint64_t)&v67, (uint64_t)&v63, a1);
  v40 = v57;
  if (v62 >= *((uint64_t *)&v61 + 1))
    v41 = v62 - 1 <= *((uint64_t *)&v61 + 1)
        ? (float *)(*((_QWORD *)&v60 + 1) + 8 * ((v62 - 1) % *((_QWORD *)&v61 + 1)))
        : (float *)v61;
  else
    v41 = (float *)(v60 - 8);
  v67 = 1.0;
  v42 = sub_2233DB7C4(v57, a1, v41, &v67);
  if (v42 != 0.0
    && ((*(_QWORD *)&v42 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || fabs(v42) > v67 * 2.22044605e-16))
  {
    goto LABEL_16;
  }
  v43 = a1[1];
  v44 = v40[1] - v43;
  v45 = *a1 - *v40;
  if (v45 != 0.0)
  {
    if (COERCE_UNSIGNED_INT(fabs(*a1 - *v40)) > 0x7F7FFFFF)
      goto LABEL_91;
    v48 = fabsf(v45);
    v49 = 0.00000011921;
    if (v48 >= 1.0)
      v49 = v48 * 0.00000011921;
    if (v48 > v49)
      goto LABEL_91;
  }
  if (v44 != 0.0)
  {
    if (COERCE_UNSIGNED_INT(fabs(v40[1] - v43)) > 0x7F7FFFFF)
      goto LABEL_91;
    v46 = fabsf(-v44);
    v47 = 0.00000011921;
    if (v46 >= 1.0)
      v47 = v46 * 0.00000011921;
    if (v46 > v47)
    {
LABEL_91:
      if ((float)((float)((float)(v43 * v44) - (float)(*a1 * v45))
                 + (float)((float)(v45 * *v41) - (float)(v44 * v41[1]))) > 0.0)
        goto LABEL_16;
    }
  }
  result = 1;
  *a3 = 12;
  return result;
}

__n128 sub_2233DB5CC(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;
  float v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *(_QWORD *)(a2 + 32);
  if (v4 != *(_QWORD *)(a3 + 32))
  {
    v7 = *a4;
    v8 = *(float **)a2;
    if ((*(_DWORD *)a4 & 0x7FFFFFFFu) >= 0x7F800000)
    {
      do
      {
        if (*v8 != v7)
          break;
        v23 = v8[1];
        v24 = a4[1];
        if (v23 != v24)
        {
          if ((LODWORD(v23) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v24) & 0x7FFFFFFFu) > 0x7F7FFFFF)
            break;
          v26 = vabds_f32(v23, v24);
          v27 = fabsf(v23);
          v28 = fabsf(v24);
          if (v27 < v28)
            v27 = v28;
          v29 = v27 >= 1.0 ? v27 * 0.00000011921 : 0.00000011921;
          if (v26 > v29)
            break;
        }
        v30 = v4 + 1;
        *(_QWORD *)(a2 + 32) = v4 + 1;
        v31 = *(_QWORD *)(a2 + 24);
        if (v4 + 1 < v31)
          v8 += 2;
        else
          v8 = v4 >= v31 ? *(float **)(a2 + 16) : (float *)(*(_QWORD *)(a2 + 8) + 8 * (v30 % v31));
        *(_QWORD *)a2 = v8;
        ++v4;
      }
      while (v30 != *(_QWORD *)(a3 + 32));
    }
    else
    {
      v9 = fabsf(v7);
      do
      {
        v10 = *v8;
        if (*v8 != v7)
        {
          if ((LODWORD(v10) & 0x7FFFFFFFu) > 0x7F7FFFFF)
            break;
          v11 = vabds_f32(v10, v7);
          v12 = fabsf(v10);
          if (v12 < v9)
            v12 = v9;
          v13 = v12 >= 1.0 ? v12 * 0.00000011921 : 0.00000011921;
          if (v11 > v13)
            break;
        }
        v14 = v8[1];
        v15 = a4[1];
        if (v14 != v15)
        {
          if ((LODWORD(v14) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v15) & 0x7FFFFFFFu) > 0x7F7FFFFF)
            break;
          v17 = vabds_f32(v14, v15);
          v18 = fabsf(v14);
          v19 = fabsf(v15);
          if (v18 < v19)
            v18 = v19;
          v20 = v18 >= 1.0 ? v18 * 0.00000011921 : 0.00000011921;
          if (v17 > v20)
            break;
        }
        v21 = v4 + 1;
        *(_QWORD *)(a2 + 32) = v4 + 1;
        v22 = *(_QWORD *)(a2 + 24);
        if (v4 + 1 < v22)
          v8 += 2;
        else
          v8 = v4 >= v22 ? *(float **)(a2 + 16) : (float *)(*(_QWORD *)(a2 + 8) + 8 * (v21 % v22));
        *(_QWORD *)a2 = v8;
        ++v4;
      }
      while (v21 != *(_QWORD *)(a3 + 32));
    }
  }
  result = *(__n128 *)a2;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

double sub_2233DB7C4(float *a1, float *a2, float *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double result;
  double v19[2];
  double v20[2];
  double v21[2];
  double v22;
  double v23[2];
  double v24[2];
  double v25[2];
  double v26[2];
  double v27[2];
  double v28[2];

  v4 = a1[1];
  v21[0] = *a1;
  v21[1] = v4;
  v5 = *a2;
  v6 = a2[1];
  v20[0] = v5;
  v20[1] = v6;
  v7 = a3[1];
  v19[0] = *a3;
  v19[1] = v7;
  v8 = v21[0] - v19[0];
  v28[0] = v21[0] - v19[0];
  v9 = v6 - v7;
  v27[0] = v6 - v7;
  v10 = v4 - v7;
  v26[0] = v4 - v7;
  v11 = v5 - v19[0];
  v25[0] = v5 - v19[0];
  v12 = vabdd_f64(v21[0], v19[0]);
  v13 = vabdd_f64(v6, v7);
  v14 = vabdd_f64(v4, v7);
  v15 = vabdd_f64(v5, v19[0]);
  if (v12 < v13)
    v12 = v13;
  if (v12 < v14)
    v12 = v14;
  if (v12 < v15)
    v12 = v15;
  if (v12 < 1.0)
    v12 = 1.0;
  *a4 = v12;
  v16 = v8 * v9;
  v24[0] = v8 * v9;
  v17 = v11 * v10;
  result = v8 * v9 - v11 * v10;
  v22 = fabs(v8 * v9) + fabs(v11 * v10);
  v23[0] = v11 * v10;
  if (vabdd_f64(v8 * v9, v11 * v10) < v22 * 3.33066907e-16 && (v16 <= 0.0 || v17 > 0.0) && (v16 >= 0.0 || v17 < 0.0))
    return sub_2233DB8FC(v21, v20, v19, v28, v27, v26, v25, v24, v23, &v22);
  return result;
}

double sub_2233DB8FC(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double result;
  double v18;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  int v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  int v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65[4];
  double v66[8];
  double v67[8];
  double v68;
  double v69;
  double v70;
  double v71;

  a8[1] = -(*a8 - *a4 * *a5);
  v10 = *a9;
  v11 = -(*a9 - *a6 * *a7);
  a9[1] = v11;
  v12 = a8[1];
  v13 = v12 - v11;
  v14 = v12 - (v12 - v11) - v11 + v12 - (v12 - v11 + v12 - (v12 - v11));
  v15 = *a8 + v13;
  v16 = v13 - (v15 - *a8) + *a8 - (v15 - (v15 - *a8));
  v68 = v14;
  v69 = v16 - (v16 - v10) - v10 + v16 - (v16 - v10 + v16 - (v16 - v10));
  v70 = v16 - v10 - (v15 + v16 - v10 - v15) + v15 - (v15 + v16 - v10 - (v15 + v16 - v10 - v15));
  v71 = v15 + v16 - v10;
  result = v71 + v14 + 0.0 + v69 + v70;
  v18 = fabs(result);
  if (v18 < *a10 * 2.22044605e-16)
  {
    a4[1] = *a1 - *a4 - *a3 + *a1 - (*a4 + *a1 - *a4);
    a5[1] = a2[1] - *a5 - a3[1] + a2[1] - (*a5 + a2[1] - *a5);
    a6[1] = a1[1] - *a6 - a3[1] + a1[1] - (*a6 + a1[1] - *a6);
    v23 = *a7;
    v24 = *a2 - *a7 - *a3 + *a2 - (*a7 + *a2 - *a7);
    a7[1] = v24;
    v25 = a4[1];
    v26 = a6[1];
    v27 = a5[1];
    if (v25 != 0.0 || v26 != 0.0 || v27 != 0.0 || v24 != 0.0)
    {
      v28 = v18 * 3.33066907e-16 + *a10 * 1.10933565e-31;
      v29 = v27 * *a4;
      v30 = v25 * *a5;
      v31 = v29 + v30;
      v32 = v23 * v26;
      result = result + v31 - (v23 * v26 + v24 * *a6);
      if (fabs(result) < v28)
      {
        v33 = -(v30 - v25 * *a5);
        v34 = -(v32 - v26 * v23);
        v35 = v33 - v34;
        v36 = v33 - (v33 - v34) - v34 + v33 - (v33 - v34 + v33 - (v33 - v34));
        v37 = v30 + v35;
        v38 = v35 - (v30 + v35 - v30) + v30 - (v30 + v35 - (v30 + v35 - v30));
        v61 = v36;
        v62 = v38 - (v38 - v32) - v32 + v38 - (v38 - v32 + v38 - (v38 - v32));
        v63 = v38 - v32 - (v37 + v38 - v32 - v37) + v37 - (v37 + v38 - v32 - (v37 + v38 - v32 - v37));
        v64 = v37 + v38 - v32;
        v39 = sub_2233DBD04(&v68, &v61, v67, 4, 4);
        v40 = a5[1];
        v41 = a4[1];
        v42 = *a4 * v40;
        v43 = -(v42 - v42);
        v44 = a7[1];
        v45 = a6[1];
        v46 = *a6 * v44;
        v47 = -(v46 - v46);
        v48 = v43 - v47;
        v49 = v43 - (v43 - v47) - v47 + v43 - (v43 - v47 + v43 - (v43 - v47));
        v50 = v42 + v48;
        v51 = v48 - (v42 + v48 - v42) + v42 - (v42 + v48 - (v42 + v48 - v42));
        v61 = v49;
        v62 = v51 - (v51 - v46) - v46 + v51 - (v51 - v46 + v51 - (v51 - v46));
        v63 = v51 - v46 - (v50 + v51 - v46 - v50) + v50 - (v50 + v51 - v46 - (v50 + v51 - v46 - v50));
        v64 = v50 + v51 - v46;
        v52 = v40 * v41;
        v53 = -(v40 * v41 - v41 * v40);
        v54 = v44 * v45;
        v55 = -(v44 * v45 - v45 * v44);
        v56 = v53 - v55;
        v57 = v53 - (v53 - v55) - v55 + v53 - (v53 - v55 + v53 - (v53 - v55));
        v58 = v52 + v56;
        v59 = v56 - (v52 + v56 - v52) + v52 - (v52 + v56 - (v52 + v56 - v52));
        v65[0] = v57;
        v65[1] = v59 - (v59 - v54) - v54 + v59 - (v59 - v54 + v59 - (v59 - v54));
        v65[2] = v59 - v54 - (v58 + v59 - v54 - v58) + v58 - (v58 + v59 - v54 - (v58 + v59 - v54 - v58));
        v65[3] = v58 + v59 - v54;
        v60 = sub_2233DBD04(&v61, v65, v66, 4, 4);
        return *(&v61 + (int)sub_2233DBD04(v67, v66, &v61, v39, v60) - 1);
      }
    }
  }
  return result;
}

uint64_t sub_2233DBD04(double *a1, double *a2, double *a3, int a4, int a5)
{
  double v6;
  double v7;
  double v8;
  int v9;
  int v10;
  uint64_t result;
  double v13;
  double v14;
  double v15;
  double v16;
  int v17;
  double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v26;
  double v27;
  BOOL v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double *v39;
  uint64_t v40;
  double v41;
  double v42;
  double *v43;
  uint64_t v44;
  double v45;
  double v46;

  v6 = *a2;
  v7 = fabs(*a2);
  v8 = fabs(*a1);
  v9 = v7 <= v8;
  v10 = v7 > v8;
  if (v7 > v8)
    v6 = *a1;
  if (v10 >= a4 || v9 >= a5)
  {
    result = 0;
    goto LABEL_40;
  }
  v13 = a2[v7 <= v8];
  v14 = a1[v7 > v8];
  v15 = fabs(v13);
  v16 = fabs(v14);
  if (v7 > v8)
    v17 = 1;
  else
    v17 = 2;
  v18 = v6 + v13;
  v19 = v6 + v13 - v13;
  if (v7 <= v8)
    v20 = 1;
  else
    v20 = 2;
  v21 = v6 + v14;
  v22 = v6 + v14 - v14;
  if (v15 > v16)
  {
    v10 = v20;
  }
  else
  {
    v22 = v19;
    v21 = v18;
    v9 = v17;
  }
  v23 = v6 - v22;
  if (v23 == 0.0)
  {
    result = 0;
    v6 = v21;
    if (v9 >= a5 || v10 >= a4)
      goto LABEL_40;
  }
  else
  {
    *a3 = v23;
    result = 1;
    v6 = v21;
    if (v9 >= a5 || v10 >= a4)
      goto LABEL_40;
  }
  do
  {
    v26 = a2[v9];
    v27 = a1[v10];
    v28 = fabs(v26) <= fabs(v27);
    v29 = v6 + v26;
    v30 = v6 + v26 - v6;
    v31 = v6 + v26 - v30;
    v32 = v26 - v30;
    v33 = v6 + v27;
    v34 = v6 + v27 - v6;
    v35 = v6 + v27 - v34;
    v36 = v27 - v34;
    if (!v28)
    {
      v31 = v35;
      v32 = v36;
    }
    v37 = v6 - v31;
    if (v28)
      v6 = v29;
    else
      v6 = v33;
    if (v28)
      ++v9;
    else
      ++v10;
    v38 = v32 + v37;
    if (v38 != 0.0)
    {
      a3[(int)result] = v38;
      result = (result + 1);
    }
  }
  while (v10 < a4 && v9 < a5);
LABEL_40:
  if (v10 < a4)
  {
    v39 = &a1[v10];
    v40 = a4 - (uint64_t)v10;
    do
    {
      v41 = v6;
      v6 = v6 + *v39;
      v42 = *v39 - (v6 - v41) + v41 - (v6 - (v6 - v41));
      if (v42 != 0.0)
      {
        a3[(int)result] = v42;
        result = (result + 1);
      }
      ++v39;
      --v40;
    }
    while (v40);
  }
  if (v9 < a5)
  {
    v43 = &a2[v9];
    v44 = a5 - (uint64_t)v9;
    do
    {
      v45 = v6;
      v6 = v6 + *v43;
      v46 = *v43 - (v6 - v45) + v45 - (v6 - (v6 - v45));
      if (v46 != 0.0)
      {
        a3[(int)result] = v46;
        result = (result + 1);
      }
      ++v43;
      --v44;
    }
    while (v44);
  }
  if (v6 != 0.0 || (_DWORD)result == 0)
  {
    a3[(int)result] = v6;
    return (result + 1);
  }
  return result;
}

uint64_t sub_2233DBF00(uint64_t result, float **a2, uint64_t a3)
{
  float *v3;
  __int128 v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  float *v9;
  uint64_t v10;
  float v11;
  float *v12;
  uint64_t v13;
  float *v14;
  float v15;
  float v16;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v32;
  float v33;
  float v34;
  float v35;

  v3 = a2[4];
  if (v3 == *(float **)(a3 + 32))
  {
    v4 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)result = *(_OWORD *)a3;
    *(_OWORD *)(result + 16) = v4;
    *(_QWORD *)(result + 32) = *(_QWORD *)(a3 + 32);
    return result;
  }
  v5 = a2[1];
  v6 = (uint64_t)a2[3];
  v7 = (uint64_t)v3 - 1;
  if ((uint64_t)v3 >= v6)
  {
    if (v7 <= v6)
    {
      v8 = &v5[2 * (v7 % v6)];
      a2[4] = (float *)v7;
      *a2 = v8;
      v9 = a2[2];
      v10 = *(_QWORD *)(a3 + 32);
      if (v7 == v10)
        goto LABEL_5;
    }
    else
    {
      v8 = a2[2];
      a2[4] = (float *)v7;
      *a2 = v8;
      v9 = a2[2];
      v10 = *(_QWORD *)(a3 + 32);
      if (v7 == v10)
        goto LABEL_5;
    }
  }
  else
  {
    v8 = *a2 - 2;
    a2[4] = (float *)v7;
    *a2 = v8;
    v9 = a2[2];
    v10 = *(_QWORD *)(a3 + 32);
    if (v7 == v10)
    {
LABEL_5:
      *(_QWORD *)result = v8;
      *(_QWORD *)(result + 8) = v5;
      *(_QWORD *)(result + 16) = v9;
      *(_QWORD *)(result + 24) = v6;
      *(_QWORD *)(result + 32) = v7;
      return result;
    }
  }
  v11 = *v8;
  if ((*(_DWORD *)v8 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v22 = fabsf(v11);
    v12 = v8;
    while (1)
    {
      v23 = v7 - 1;
      if (v7 >= v6)
      {
        v24 = v9;
        if (v23 <= v6)
          v24 = &v5[2 * (v23 % v6)];
      }
      else
      {
        v24 = v12 - 2;
      }
      v25 = *v24;
      if (*v24 != v11)
      {
        if ((LODWORD(v25) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          break;
        v26 = vabds_f32(v25, v11);
        v27 = fabsf(v25);
        if (v27 < v22)
          v27 = v22;
        v28 = v27 >= 1.0 ? v27 * 0.00000011921 : 0.00000011921;
        if (v26 > v28)
          break;
      }
      v29 = v24[1];
      v30 = v8[1];
      if (v29 != v30)
      {
        if ((LODWORD(v29) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v30) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          break;
        v32 = vabds_f32(v29, v30);
        v33 = fabsf(v29);
        v34 = fabsf(v30);
        if (v33 < v34)
          v33 = v34;
        v35 = v33 >= 1.0 ? v33 * 0.00000011921 : 0.00000011921;
        if (v32 > v35)
          break;
      }
      if (v7 < v6)
      {
        v12 -= 2;
      }
      else
      {
        v12 = v9;
        if (v23 <= v6)
          v12 = &v5[2 * (v23 % v6)];
      }
      --v7;
      if (v10 == v23)
      {
LABEL_65:
        *(_QWORD *)result = v12;
        *(_QWORD *)(result + 8) = v5;
        *(_QWORD *)(result + 16) = v9;
        *(_QWORD *)(result + 24) = v6;
        *(_QWORD *)(result + 32) = v10;
        return result;
      }
    }
  }
  else
  {
    v12 = v8;
    while (1)
    {
      v13 = v7 - 1;
      if (v7 >= v6)
      {
        v14 = v9;
        if (v13 <= v6)
          v14 = &v5[2 * (v13 % v6)];
      }
      else
      {
        v14 = v12 - 2;
      }
      if (*v14 != v11)
        break;
      v15 = v14[1];
      v16 = v8[1];
      if (v15 != v16)
      {
        if ((LODWORD(v15) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v16) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          break;
        v18 = vabds_f32(v15, v16);
        v19 = fabsf(v15);
        v20 = fabsf(v16);
        if (v19 < v20)
          v19 = v20;
        v21 = v19 >= 1.0 ? v19 * 0.00000011921 : 0.00000011921;
        if (v18 > v21)
          break;
      }
      if (v7 < v6)
      {
        v12 -= 2;
      }
      else
      {
        v12 = v9;
        if (v13 <= v6)
          v12 = &v5[2 * (v13 % v6)];
      }
      --v7;
      if (v10 == v13)
        goto LABEL_65;
    }
  }
  *(_QWORD *)result = v12;
  *(_QWORD *)(result + 8) = v5;
  *(_QWORD *)(result + 16) = v9;
  *(_QWORD *)(result + 24) = v6;
  *(_QWORD *)(result + 32) = v7;
  return result;
}

float32_t sub_2233DC1C4(_QWORD *a1, int32x2_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  float32x2_t *v4;
  float32x2_t *v5;
  uint64_t v6;
  float32_t result;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  int8x8_t v15;
  int8x8_t v16;
  float32x2_t v17;
  int8x8_t v18;
  float v19;
  float32x2_t v20;
  float32x2_t v21;
  unsigned int v22;
  float32x2_t *v23;
  float32x2_t *v24;
  float32x2_t *v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  int8x8_t v31;
  int8x8_t v32;

  v2 = a1[1];
  if (*a1 == v2)
  {
LABEL_5:
    a2[1].i32[0] = -8388609;
    *a2 = vdup_n_s32(0x7F7FFFFFu);
    result = -3.4028e38;
    a2[1].i32[1] = -8388609;
  }
  else
  {
    v3 = *a1 + 24;
    while (1)
    {
      v4 = *(float32x2_t **)(v3 - 24);
      v5 = *(float32x2_t **)(v3 - 16);
      v6 = v3 - 24;
      if (v4 != v5)
        break;
      v3 += 24;
      if (v6 + 24 == v2)
        goto LABEL_5;
    }
    v9 = *v4;
    v8 = v4 + 1;
    v10 = v9;
    v11 = v9;
    if (v8 == v5)
    {
      v13 = v10;
    }
    else
    {
      v12 = v10;
      v13 = v10;
      do
      {
        v14 = *v8++;
        v15 = (int8x8_t)vcgt_f32(v10, v14);
        v11 = (float32x2_t)vbsl_s8(v15, (int8x8_t)v14, (int8x8_t)v11);
        v10 = (float32x2_t)vbsl_s8(v15, (int8x8_t)v14, (int8x8_t)v10);
        v16 = (int8x8_t)vcgt_f32(v14, v12);
        v13 = (float32x2_t)vbsl_s8(v16, (int8x8_t)v14, (int8x8_t)v13);
        v12 = (float32x2_t)vbsl_s8(v16, (int8x8_t)v14, (int8x8_t)v12);
      }
      while (v8 != v5);
    }
    while (v3 != v2)
    {
      v23 = *(float32x2_t **)v3;
      v24 = *(float32x2_t **)(v3 + 8);
      if (*(float32x2_t **)v3 != v24)
      {
        v26 = *v23;
        v25 = v23 + 1;
        v27 = v26;
        v28 = v26;
        if (v25 == v24)
        {
          v17 = v27;
        }
        else
        {
          v29 = v27;
          v17 = v27;
          do
          {
            v30 = *v25++;
            v31 = (int8x8_t)vcgt_f32(v29, v30);
            v32 = (int8x8_t)vcgt_f32(v30, v27);
            v17 = (float32x2_t)vbsl_s8(v31, (int8x8_t)v30, (int8x8_t)v17);
            v29 = (float32x2_t)vbsl_s8(v31, (int8x8_t)v30, (int8x8_t)v29);
            v28 = (float32x2_t)vbsl_s8(v32, (int8x8_t)v30, (int8x8_t)v28);
            v27 = (float32x2_t)vbsl_s8(v32, (int8x8_t)v30, (int8x8_t)v27);
          }
          while (v25 != v24);
        }
        v18 = (int8x8_t)vcgt_f32(v11, v17);
        if ((vcgt_f32(v17, v13).u8[0] & 1) != 0)
          v19 = v17.f32[0];
        else
          v19 = v13.f32[0];
        v13.f32[0] = v19;
        v20 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v17.u32[1], v28.u32[0]), v13), (int8x8_t)__PAIR64__(v17.u32[1], v28.u32[0]), (int8x8_t)v13);
        v21 = (float32x2_t)vbsl_s8(v18, (int8x8_t)v17, (int8x8_t)v11);
        v11 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v21, v28), (int8x8_t)v28, (int8x8_t)v21);
        if ((vcgt_f32(v28, v20).i32[1] & 1) != 0)
          v22 = -1;
        else
          v22 = 0;
        v13 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v22), (int8x8_t)__PAIR64__(v28.u32[1], v20.u32[0]), (int8x8_t)v20);
      }
      v3 += 24;
    }
    *a2 = (int32x2_t)v11;
    result = v13.f32[1];
    a2[1] = (int32x2_t)v13;
  }
  return result;
}

void sub_2233DC31C(float a1)
{
  int v1;
  std::bad_cast *exception;
  std::bad_cast *v3;
  std::bad_cast *v4;
  std::bad_cast *v5;

  v1 = 2 * (a1 >= 9.2234e18);
  if (a1 <= -9.2234e18)
    v1 = 1;
  if (v1 == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_2233DC3C4(exception);
    __cxa_throw(v3, (struct type_info *)&unk_24EC363D8, (void (*)(void *))std::exception::~exception);
  }
  if (v1 == 1)
  {
    v4 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4->__vftable = 0;
    v5 = sub_2233DC3A0(v4);
    __cxa_throw(v5, (struct type_info *)&unk_24EC363C0, (void (*)(void *))std::exception::~exception);
  }
}

std::bad_cast *sub_2233DC3A0(std::bad_cast *a1)
{
  std::bad_cast *result;

  result = std::bad_cast::bad_cast(a1);
  result->__vftable = (std::bad_cast_vtbl *)&off_24EC36400;
  return result;
}

std::bad_cast *sub_2233DC3C4(std::bad_cast *a1)
{
  std::bad_cast *result;

  result = std::bad_cast::bad_cast(a1);
  result->__vftable = (std::bad_cast_vtbl *)&off_24EC36428;
  return result;
}

void sub_2233DC3E8(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x227684CE8);
}

const char *sub_2233DC40C()
{
  return "bad numeric conversion: negative overflow";
}

void sub_2233DC418(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x227684CE8);
}

const char *sub_2233DC43C()
{
  return "bad numeric conversion: positive overflow";
}

void sub_2233DC448(void **a1, float **a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, unint64_t a7)
{
  float *v7;
  uint64_t v9;
  void **v10;
  unint64_t v11;
  float *v12;
  float *v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  char *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _BYTE *v93;
  unint64_t v94;
  void **v95;
  float *v96;
  unint64_t v97;
  unsigned int v98;
  int v99;
  __int128 *v100;
  float *v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char v116;
  char v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  int v121;
  float *v122;
  __int128 v123;
  uint64_t v124;

  v7 = a2[4];
  v104 = *(_QWORD *)(a3 + 32) - (_QWORD)v7;
  if (!v104)
    return;
  v9 = a4;
  v10 = a1;
  *((_QWORD *)&v123 + 1) = -1;
  v124 = -1;
  *(_QWORD *)&v123 = -1;
  v11 = 0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v12 = *a2;
  v96 = a2[1];
  v13 = a2[2];
  v14 = (uint64_t)a2[3];
  v15 = (float)((float)((*a2)[1] - *(float *)(a4 + 4)) * *(float *)(a4 + 24)) + (float)*(uint64_t *)(a4 + 16);
  if (v15 >= 0.0)
    v16 = 0.5;
  else
    v16 = -0.5;
  v17 = v15 + v16;
  sub_2233DC31C(v15 + v16);
  v18 = ceilf(v17);
  v19 = floorf(v17);
  if (v17 >= 0.0)
    v20 = v19;
  else
    v20 = v18;
  v21 = (float)((float)(*v12 - *(float *)v9) * *(float *)(v9 + 24)) + (float)*(uint64_t *)(v9 + 8);
  if (v21 >= 0.0)
    v22 = 0.5;
  else
    v22 = -0.5;
  v23 = v21 + v22;
  sub_2233DC31C(v21 + v22);
  v24 = ceilf(v23);
  v25 = floorf(v23);
  if (v23 >= 0.0)
    v24 = v25;
  v120 = (uint64_t)v7 + 1;
  v106 = v14;
  if ((uint64_t)v7 + 1 >= v14)
  {
    v122 = v13;
    v26 = (uint64_t)v7 + 1;
    if ((uint64_t)v7 < v14)
      v122 = &v96[2 * (v120 % v14)];
  }
  else
  {
    v122 = v12 + 2;
    v26 = (uint64_t)v7 + 1;
  }
  if (v26 == *(_QWORD *)(a3 + 32))
  {
    v27 = v10[1];
    goto LABEL_122;
  }
  v101 = v13;
  v94 = v11;
  v28 = 0;
  v29 = 0;
  v118 = 0;
  v119 = 0;
  v30 = 0;
  v31 = 0;
  v32 = (uint64_t)v20;
  v33 = (uint64_t)v24;
  v115 = 0x8000000000000000;
  v108 = -1;
  v116 = 1;
  v117 = 0;
  v34 = -1;
  v109 = -1;
  v110 = 0;
  v113 = 0x7FFFFFFFFFFFFFFFLL;
  v114 = 0x8000000000000000;
  v112 = 0x7FFFFFFFFFFFFFFFLL;
  v95 = v10;
  v100 = a6;
  v105 = v9;
  do
  {
    v111 = v34;
    v121 = v31;
    v36 = (float)((float)(v122[1] - *(float *)(v9 + 4)) * *(float *)(v9 + 24)) + (float)*(uint64_t *)(v9 + 16);
    if (v36 >= 0.0)
      v37 = 0.5;
    else
      v37 = -0.5;
    v38 = v36 + v37;
    sub_2233DC31C(v36 + v37);
    v39 = ceilf(v38);
    v40 = floorf(v38);
    if (v38 >= 0.0)
      v39 = v40;
    v41 = (uint64_t)v39;
    v42 = (float)((float)(*v122 - *(float *)v9) * *(float *)(v9 + 24)) + (float)*(uint64_t *)(v9 + 8);
    if (v42 >= 0.0)
      v43 = 0.5;
    else
      v43 = -0.5;
    v44 = v42 + v43;
    sub_2233DC31C(v42 + v43);
    v45 = ceilf(v44);
    v46 = floorf(v44);
    if (v44 >= 0.0)
      v45 = v46;
    v47 = (uint64_t)v45;
    if (v33 <= (uint64_t)v45)
      v48 = 0;
    else
      v48 = -1;
    if (v33 < (uint64_t)v45)
      v49 = 1;
    else
      v49 = v48;
    if (v32 <= v41)
      v50 = 0;
    else
      v50 = -1;
    if (v32 < v41)
      v51 = 1;
    else
      v51 = v50;
    if (v49)
    {
      v52 = 0;
      v31 = v121;
      if (!v30)
        goto LABEL_85;
LABEL_55:
      if (v49 == v119 && (_DWORD)v51 == (_DWORD)v118 && v30 <= a7)
      {
        v33 = v112;
        v32 = v113;
        v65 = v114;
        v64 = v115;
        goto LABEL_88;
      }
      v103 = v29;
      v56 = (char *)v10[1];
      if (v117)
      {
        v57 = (unint64_t)v10[2];
        if ((unint64_t)v56 < v57)
        {
LABEL_65:
          *(_QWORD *)v56 = v119 | (unint64_t)(v118 << 32);
          *(_OWORD *)(v56 + 8) = v123;
          *((_QWORD *)v56 + 3) = v124;
          *((_QWORD *)v56 + 4) = v112;
          *((_QWORD *)v56 + 5) = v113;
          *((_QWORD *)v56 + 6) = v114;
          *((_QWORD *)v56 + 7) = v115;
          *((_QWORD *)v56 + 8) = v108;
          *((_QWORD *)v56 + 9) = v111;
          *((_QWORD *)v56 + 10) = v30;
          *((_QWORD *)v56 + 11) = v110;
          v56[96] = v117;
          *((_QWORD *)v56 + 13) = v109;
          v56[112] = v31;
          v58 = v56 + 120;
          v56[113] = 0;
          v29 = v103;
LABEL_84:
          v31 = 0;
          v10[1] = v58;
          a6 = v100;
          goto LABEL_85;
        }
      }
      else
      {
        v94 = 0xEEEEEEEEEEEEEEEFLL * ((v56 - (_BYTE *)*v10) >> 3);
        v57 = (unint64_t)v10[2];
        if ((unint64_t)v56 < v57)
          goto LABEL_65;
      }
      v59 = (char *)*v10;
      v60 = 0xEEEEEEEEEEEEEEEFLL * ((v56 - (_BYTE *)*v10) >> 3);
      v61 = v60 + 1;
      if (v60 + 1 > 0x222222222222222)
        sub_2233DCD38();
      v62 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v57 - (_QWORD)v59) >> 3);
      if (2 * v62 > v61)
        v61 = 2 * v62;
      if (v62 >= 0x111111111111111)
        v61 = 0x222222222222222;
      v98 = v51;
      v99 = v52;
      v97 = v61;
      if (v61)
      {
        if (v61 > 0x222222222222222)
          goto LABEL_127;
        v63 = (char *)operator new(120 * v61);
        LOBYTE(v31) = v121;
      }
      else
      {
        v63 = 0;
      }
      v66 = &v63[120 * v60];
      *(_QWORD *)v66 = v119 | (unint64_t)(v118 << 32);
      *(_OWORD *)(v66 + 8) = v123;
      *((_QWORD *)v66 + 3) = v124;
      *((_QWORD *)v66 + 4) = v112;
      *((_QWORD *)v66 + 5) = v113;
      *((_QWORD *)v66 + 6) = v114;
      *((_QWORD *)v66 + 7) = v115;
      *((_QWORD *)v66 + 8) = v108;
      *((_QWORD *)v66 + 9) = v111;
      *((_QWORD *)v66 + 10) = v30;
      *((_QWORD *)v66 + 11) = v110;
      v66[96] = v117;
      *((_QWORD *)v66 + 13) = v109;
      v66[112] = v31;
      v66[113] = 0;
      v67 = v66;
      if (v56 == v59)
      {
        v10 = v95;
      }
      else
      {
        v10 = v95;
        do
        {
          v68 = *(_OWORD *)(v56 - 120);
          v69 = *(_OWORD *)(v56 - 104);
          v70 = *(_OWORD *)(v56 - 88);
          *(_OWORD *)(v67 - 72) = *(_OWORD *)(v56 - 72);
          *(_OWORD *)(v67 - 88) = v70;
          *(_OWORD *)(v67 - 104) = v69;
          *(_OWORD *)(v67 - 120) = v68;
          v71 = *(_OWORD *)(v56 - 56);
          v72 = *(_OWORD *)(v56 - 40);
          v73 = *(_OWORD *)(v56 - 24);
          *((_WORD *)v67 - 4) = *((_WORD *)v56 - 4);
          *(_OWORD *)(v67 - 24) = v73;
          *(_OWORD *)(v67 - 40) = v72;
          *(_OWORD *)(v67 - 56) = v71;
          v67 -= 120;
          v56 -= 120;
        }
        while (v56 != v59);
        v56 = (char *)*v95;
      }
      v58 = v66 + 120;
      *v10 = v67;
      v10[1] = v66 + 120;
      v10[2] = &v63[120 * v97];
      if (v56)
        operator delete(v56);
      v29 = v103;
      v51 = v98;
      v52 = v99;
      goto LABEL_84;
    }
    if (v33 != v47 || v32 != v41)
    {
      v49 = 0;
      v52 = 0;
      v31 = v121;
      if (!v30)
        goto LABEL_85;
      goto LABEL_55;
    }
    v52 = 1;
    v51 = 4294967197;
    v49 = -99;
    v31 = v121;
    if (v30)
      goto LABEL_55;
LABEL_85:
    v30 = 0;
    v123 = *a6;
    if (!(v52 & 1 | ((v116 & 1) == 0)))
      v31 = 1;
    v116 &= v52;
    v117 = v52;
    v65 = v33;
    v64 = v32;
    v124 = *((_QWORD *)a6 + 2);
    v109 = v28;
    v110 = v104;
    v108 = v29;
    v119 = v49;
    v118 = v51;
LABEL_88:
    if (v33 >= v47)
      v74 = v47;
    else
      v74 = v33;
    if (v65 <= v47)
      v65 = v47;
    if (v32 >= v41)
      v75 = v41;
    else
      v75 = v32;
    if (v64 <= v41)
      v64 = v41;
    v114 = v65;
    v115 = v64;
    v76 = v120 + 1;
    v9 = v105;
    v112 = v74;
    v113 = v75;
    if (v120 + 1 < v106)
    {
      v35 = v122 + 2;
LABEL_21:
      v122 = v35;
      goto LABEL_22;
    }
    v122 = v101;
    if (v120 < v106)
    {
      v35 = &v96[2 * (v76 % v106)];
      goto LABEL_21;
    }
LABEL_22:
    ++v29;
    ++v30;
    v28 += v52 ^ 1u;
    v34 = v29;
    ++v120;
    v32 = v41;
    v33 = v47;
  }
  while (v76 != *(_QWORD *)(a3 + 32));
  v27 = v10[1];
  v11 = v94;
  if (v30)
  {
    if (v117)
    {
      v77 = (unint64_t)v10[2];
      if ((unint64_t)v27 < v77)
        goto LABEL_104;
LABEL_106:
      v79 = *v10;
      v80 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v27 - (_BYTE *)*v10) >> 3);
      v81 = v80 + 1;
      if (v80 + 1 > 0x222222222222222)
        sub_2233DCD38();
      v82 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v77 - (_QWORD)v79) >> 3);
      if (2 * v82 > v81)
        v81 = 2 * v82;
      if (v82 >= 0x111111111111111)
        v83 = 0x222222222222222;
      else
        v83 = v81;
      if (v83)
      {
        if (v83 > 0x222222222222222)
LABEL_127:
          sub_223174E94();
        v84 = v31;
        v85 = (char *)operator new(120 * v83);
        LOBYTE(v31) = v84;
      }
      else
      {
        v85 = 0;
      }
      v86 = &v85[120 * v80];
      *(_QWORD *)v86 = v119 | (unint64_t)(v118 << 32);
      *(_OWORD *)(v86 + 8) = v123;
      *((_QWORD *)v86 + 3) = v124;
      *((_QWORD *)v86 + 4) = v112;
      *((_QWORD *)v86 + 5) = v113;
      *((_QWORD *)v86 + 6) = v114;
      *((_QWORD *)v86 + 7) = v115;
      *((_QWORD *)v86 + 8) = v108;
      *((_QWORD *)v86 + 9) = v29;
      *((_QWORD *)v86 + 10) = v30;
      *((_QWORD *)v86 + 11) = v110;
      v86[96] = v117;
      *((_QWORD *)v86 + 13) = v109;
      v86[112] = v31;
      v78 = v86 + 120;
      v86[113] = 0;
      if (v27 != v79)
      {
        do
        {
          v87 = *(_OWORD *)(v27 - 15);
          v88 = *(_OWORD *)(v27 - 13);
          v89 = *(_OWORD *)(v27 - 11);
          *(_OWORD *)(v86 - 72) = *(_OWORD *)(v27 - 9);
          *(_OWORD *)(v86 - 88) = v89;
          *(_OWORD *)(v86 - 104) = v88;
          *(_OWORD *)(v86 - 120) = v87;
          v90 = *(_OWORD *)(v27 - 7);
          v91 = *(_OWORD *)(v27 - 5);
          v92 = *(_OWORD *)(v27 - 3);
          *((_WORD *)v86 - 4) = *((_WORD *)v27 - 4);
          *(_OWORD *)(v86 - 24) = v92;
          *(_OWORD *)(v86 - 40) = v91;
          *(_OWORD *)(v86 - 56) = v90;
          v86 -= 120;
          v27 -= 15;
        }
        while (v27 != v79);
        v27 = *v10;
      }
      *v10 = v86;
      v10[1] = v78;
      v10[2] = &v85[120 * v83];
      if (v27)
        operator delete(v27);
    }
    else
    {
      v11 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v27 - (_BYTE *)*v10) >> 3);
      v77 = (unint64_t)v10[2];
      if ((unint64_t)v27 >= v77)
        goto LABEL_106;
LABEL_104:
      *v27 = v119 | (unint64_t)(v118 << 32);
      *(_OWORD *)(v27 + 1) = v123;
      v27[3] = v124;
      v27[4] = v74;
      v27[5] = v75;
      v27[6] = v114;
      v27[7] = v115;
      v27[8] = v108;
      v27[9] = v29;
      v27[10] = v30;
      v27[11] = v110;
      *((_BYTE *)v27 + 96) = v117;
      v27[13] = v109;
      *((_BYTE *)v27 + 112) = v31;
      v78 = v27 + 15;
      *((_BYTE *)v27 + 113) = 0;
    }
    v10[1] = v78;
    v27 = v78;
  }
LABEL_122:
  v93 = *v10;
  if (v11 < 0xEEEEEEEEEEEEEEEFLL * (((char *)v27 - (_BYTE *)*v10) >> 3) && !v93[120 * v11 + 96])
    v93[120 * v11 + 113] = 1;
}

void sub_2233DCD38()
{
  sub_22316DBD4("vector");
}

void sub_2233DCD4C(_QWORD *a1, uint64_t *a2, char **a3)
{
  _QWORD *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  for (i = (_QWORD *)*a1; i != (_QWORD *)a1[1]; i += 15)
  {
    v8 = i[4];
    v9 = *a2;
    if (v8 < *a2)
    {
      *a2 = v8;
      v9 = v8;
      v10 = a2[2];
      if (v8 <= v10)
      {
LABEL_7:
        v11 = i[5];
        v12 = a2[1];
        if (v11 >= v12)
          goto LABEL_8;
        goto LABEL_17;
      }
    }
    else
    {
      v10 = a2[2];
      if (v8 <= v10)
        goto LABEL_7;
    }
    a2[2] = v8;
    v10 = v8;
    v11 = i[5];
    v12 = a2[1];
    if (v11 >= v12)
    {
LABEL_8:
      v13 = a2[3];
      if (v11 <= v13)
        goto LABEL_9;
      goto LABEL_18;
    }
LABEL_17:
    a2[1] = v11;
    v12 = v11;
    v13 = a2[3];
    if (v11 <= v13)
    {
LABEL_9:
      v14 = i[6];
      if (v14 >= v9)
        goto LABEL_10;
      goto LABEL_19;
    }
LABEL_18:
    a2[3] = v11;
    v13 = v11;
    v14 = i[6];
    if (v14 >= v9)
    {
LABEL_10:
      if (v14 <= v10)
        goto LABEL_11;
      goto LABEL_20;
    }
LABEL_19:
    *a2 = v14;
    if (v14 <= v10)
    {
LABEL_11:
      v15 = i[7];
      if (v15 >= v12)
        goto LABEL_12;
      goto LABEL_21;
    }
LABEL_20:
    a2[2] = v14;
    v15 = i[7];
    if (v15 >= v12)
    {
LABEL_12:
      if (v15 <= v13)
        goto LABEL_13;
      goto LABEL_22;
    }
LABEL_21:
    a2[1] = v15;
    if (v15 <= v13)
    {
LABEL_13:
      v17 = a3[1];
      v16 = (unint64_t)a3[2];
      if ((unint64_t)v17 >= v16)
        goto LABEL_23;
      goto LABEL_3;
    }
LABEL_22:
    a2[3] = v15;
    v17 = a3[1];
    v16 = (unint64_t)a3[2];
    if ((unint64_t)v17 >= v16)
    {
LABEL_23:
      v18 = *a3;
      v19 = v17 - *a3;
      v20 = v19 >> 3;
      v21 = (v19 >> 3) + 1;
      if (v21 >> 61)
        sub_2233DCD38();
      v22 = v16 - (_QWORD)v18;
      if (v22 >> 2 > v21)
        v21 = v22 >> 2;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 61)
          sub_223174E94();
        v24 = operator new(8 * v23);
        v25 = &v24[8 * v20];
        *(_QWORD *)v25 = i;
        v7 = (uint64_t)(v25 + 8);
        v26 = (char *)(v17 - v18);
        if (v17 == v18)
          goto LABEL_41;
LABEL_34:
        v27 = (unint64_t)(v26 - 8);
        if (v27 < 0x58)
          goto LABEL_48;
        if ((unint64_t)(v17 - v24 - v19) < 0x20)
          goto LABEL_48;
        v28 = (v27 >> 3) + 1;
        v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
        v30 = &v17[-v29];
        v25 -= v29;
        v31 = &v24[8 * v20 - 16];
        v32 = v17 - 16;
        v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v34 = *(_OWORD *)v32;
          *(v31 - 1) = *((_OWORD *)v32 - 1);
          *v31 = v34;
          v31 -= 2;
          v32 -= 32;
          v33 -= 4;
        }
        while (v33);
        v17 = v30;
        if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_48:
          do
          {
            v35 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *((_QWORD *)v25 - 1) = v35;
            v25 -= 8;
          }
          while (v17 != v18);
        }
        v17 = *a3;
      }
      else
      {
        v24 = 0;
        v25 = (char *)(8 * v20);
        *(_QWORD *)(8 * v20) = i;
        v7 = 8 * v20 + 8;
        v26 = (char *)(v17 - v18);
        if (v17 != v18)
          goto LABEL_34;
      }
LABEL_41:
      *a3 = v25;
      a3[1] = (char *)v7;
      a3[2] = &v24[8 * v23];
      if (v17)
        operator delete(v17);
      goto LABEL_4;
    }
LABEL_3:
    *(_QWORD *)v17 = i;
    v7 = (uint64_t)(v17 + 8);
LABEL_4:
    a3[1] = (char *)v7;
  }
}

uint64_t sub_2233DCFD8(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t **v20;
  int8x16_t v21;
  int8x16_t v22;
  int64x2_t *v23;
  int64x2_t v24;
  int64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int64x2_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int64x2_t v32;
  int8x16_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *i;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  BOOL v41;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *j;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  __int128 v61[2];
  void *__p;
  uint64_t *v63;
  uint64_t v64;
  void *v65;
  uint64_t *v66;
  uint64_t v67;
  void *v68;
  uint64_t *v69;
  uint64_t v70;
  __int128 v71[2];
  __int128 v72;
  uint64_t v73;
  uint64_t v74;

  v8 = *a1;
  v9 = a1[2];
  if ((uint64_t)*a1 >= 0)
    v10 = *a1;
  else
    v10 = v8 + 1;
  v11 = v10 >> 1;
  if (v9 >= 0)
    v12 = a1[2];
  else
    v12 = v9 + 1;
  v13 = v12 >> 1;
  v14 = *((_OWORD *)a1 + 1);
  v15 = v9 - 2 * v13 + v8 - 2 * v11;
  v72 = *(_OWORD *)a1;
  v74 = *((_QWORD *)&v14 + 1);
  *((_QWORD *)&v71[0] + 1) = *((_QWORD *)&v72 + 1);
  v71[1] = v14;
  v73 = v13 + v11 + ((v15 + ((v15 & 0x80) >> 7)) << 24 >> 25);
  *(_QWORD *)&v71[0] = v73;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  __p = 0;
  v63 = 0;
  v64 = 0;
  sub_2233DD4BC(&v72, v71, a2, &v68, (char **)&v65, (char **)&__p);
  v17 = (uint64_t *)__p;
  v16 = v63;
  if (__p != v63)
  {
    v18 = vdupq_n_s64(0x8000000000000000);
    v19 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v20 = (int64x2_t **)__p;
    v21 = (int8x16_t)v19;
    v22 = (int8x16_t)v18;
    do
    {
      v23 = *v20++;
      v24 = v23[2];
      v25 = v23[3];
      v26 = (int8x16_t)vcgtq_s64(v19, v24);
      v27 = vbslq_s8(v26, (int8x16_t)v24, v21);
      v28 = (int64x2_t)vbslq_s8(v26, (int8x16_t)v24, (int8x16_t)v19);
      v29 = (int8x16_t)vcgtq_s64(v28, v25);
      v21 = vbslq_s8(v29, (int8x16_t)v25, v27);
      v19 = (int64x2_t)vbslq_s8(v29, (int8x16_t)v25, (int8x16_t)v28);
      v30 = (int8x16_t)vcgtq_s64(v24, v18);
      v31 = vbslq_s8(v30, (int8x16_t)v24, v22);
      v32 = (int64x2_t)vbslq_s8(v30, (int8x16_t)v24, (int8x16_t)v18);
      v33 = (int8x16_t)vcgtq_s64(v25, v32);
      v22 = vbslq_s8(v33, (int8x16_t)v25, v31);
      v18 = (int64x2_t)vbslq_s8(v33, (int8x16_t)v25, (int8x16_t)v32);
    }
    while (v20 != (int64x2_t **)v63);
    v61[0] = (__int128)v21;
    v61[1] = (__int128)v22;
    if (a3 > 0x63 || (unint64_t)((char *)v63 - (_BYTE *)__p) < 0x79)
    {
      do
      {
        v36 = v17 + 1;
        if (v17 + 1 != v16)
        {
          for (i = v17 + 1; i != v16; ++i)
          {
            v38 = *v17;
            v39 = *i;
            if (*(_QWORD *)(*v17 + 48) >= *(_QWORD *)(*i + 32) && *(_QWORD *)(v38 + 32) <= *(_QWORD *)(v39 + 48))
            {
              v40 = *(_QWORD *)(v38 + 56) >= *(_QWORD *)(v39 + 40) && *(_QWORD *)(v38 + 40) <= *(_QWORD *)(v39 + 56);
              v41 = v40 && *(_BYTE *)(v38 + 96) == 0;
              if (v41 && *(_BYTE *)(v39 + 96) == 0)
              {
                if (!sub_2233DF89C(*(_DWORD *)(a4 + 40), *(uint64_t **)a4, v38, *(_DWORD *)(a4 + 40), *(uint64_t **)a4, v39, *(unsigned __int8 *)(a4 + 44), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD **)(a4 + 24), *(_BYTE **)(a4 + 32)))goto LABEL_81;
                v16 = v63;
              }
            }
          }
        }
        ++v17;
      }
      while (v36 != v16);
    }
    else if (!sub_2233DDBB4(v61, &__p, a3 + 1, a4, a5))
    {
LABEL_81:
      v52 = 0;
      goto LABEL_82;
    }
    if (!sub_2233DDA44(v61, (uint64_t **)&__p, (uint64_t **)&v68, a3, a4, a5)
      || (sub_2233DDA44(v61, (uint64_t **)&__p, (uint64_t **)&v65, a3, a4, a5) & 1) == 0)
    {
      goto LABEL_81;
    }
  }
  v35 = (uint64_t *)v68;
  v34 = v69;
  if (a3 > 0x63 || (unint64_t)((char *)v69 - (_BYTE *)v68) < 0x79)
  {
LABEL_56:
    while (v35 != v34)
    {
      v43 = v35++;
      if (v35 != v34)
      {
        v44 = v35;
        while (1)
        {
          v45 = *v43;
          v46 = *v44;
          if (*(_QWORD *)(*v43 + 48) >= *(_QWORD *)(*v44 + 32) && *(_QWORD *)(v45 + 32) <= *(_QWORD *)(v46 + 48))
          {
            v47 = *(_QWORD *)(v45 + 56) >= *(_QWORD *)(v46 + 40) && *(_QWORD *)(v45 + 40) <= *(_QWORD *)(v46 + 56);
            v48 = v47 && *(_BYTE *)(v45 + 96) == 0;
            if (v48 && *(_BYTE *)(v46 + 96) == 0)
            {
              if (!sub_2233DF89C(*(_DWORD *)(a4 + 40), *(uint64_t **)a4, v45, *(_DWORD *)(a4 + 40), *(uint64_t **)a4, v46, *(unsigned __int8 *)(a4 + 44), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD **)(a4 + 24), *(_BYTE **)(a4 + 32)))goto LABEL_81;
              v34 = v69;
            }
          }
          if (++v44 == v34)
            goto LABEL_56;
        }
      }
    }
  }
  else if (!sub_2233DDBB4(&v72, &v68, a3 + 1, a4, a5))
  {
    goto LABEL_81;
  }
  v51 = (uint64_t *)v65;
  v50 = v66;
  if (a3 > 0x63 || (unint64_t)((char *)v66 - (_BYTE *)v65) < 0x79)
  {
    if (v65 == v66)
    {
      v52 = 1;
    }
    else
    {
      do
      {
        v53 = v51++;
        if (v51 != v50)
        {
          for (j = v51; j != v50; ++j)
          {
            v55 = *v53;
            v56 = *j;
            if (*(_QWORD *)(*v53 + 48) >= *(_QWORD *)(*j + 32) && *(_QWORD *)(v55 + 32) <= *(_QWORD *)(v56 + 48))
            {
              v57 = *(_QWORD *)(v55 + 56) >= *(_QWORD *)(v56 + 40) && *(_QWORD *)(v55 + 40) <= *(_QWORD *)(v56 + 56);
              v58 = v57 && *(_BYTE *)(v55 + 96) == 0;
              if (v58 && *(_BYTE *)(v56 + 96) == 0)
              {
                if (!sub_2233DF89C(*(_DWORD *)(a4 + 40), *(uint64_t **)a4, v55, *(_DWORD *)(a4 + 40), *(uint64_t **)a4, v56, *(unsigned __int8 *)(a4 + 44), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD **)(a4 + 24), *(_BYTE **)(a4 + 32)))goto LABEL_81;
                v50 = v66;
              }
            }
          }
        }
        v52 = 1;
      }
      while (v51 != v50);
    }
  }
  else
  {
    v52 = sub_2233DDBB4(v71, &v65, a3 + 1, a4, a5);
  }
LABEL_82:
  if (__p)
  {
    v63 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v65)
  {
    v66 = (uint64_t *)v65;
    operator delete(v65);
  }
  if (v68)
  {
    v69 = (uint64_t *)v68;
    operator delete(v68);
  }
  return v52;
}

void sub_2233DD458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v26;
  void *v27;

  if (__p)
  {
    operator delete(__p);
    v26 = a21;
    if (!a21)
    {
LABEL_3:
      v27 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v26 = a21;
    if (!a21)
      goto LABEL_3;
  }
  operator delete(v26);
  v27 = a24;
  if (!a24)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2233DD4BC(_QWORD *result, _QWORD *a2, _QWORD *a3, _QWORD *a4, char **a5, char **a6)
{
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v11;
  uint64_t v12;
  _BOOL4 v13;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char **v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  BOOL v31;
  unint64_t v32;
  char *v33;
  char **v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  char *v72;
  char *v73;
  unint64_t v74;
  char **v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  _OWORD *v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  _QWORD *v86;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;

  v6 = *a3;
  if (*a3 != a3[1])
  {
    v8 = a4;
    v9 = a3;
    v86 = result;
    do
    {
      v11 = *(_QWORD **)v6;
      v12 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if (result[2] >= v12 && *result <= v11[6])
      {
        v13 = result[3] >= v11[5] && result[1] <= v11[7];
        if (a2[2] < v12)
        {
LABEL_17:
          if (!v13)
            goto LABEL_4;
          goto LABEL_18;
        }
      }
      else
      {
        v13 = 0;
        if (a2[2] < v12)
          goto LABEL_17;
      }
      if (*a2 > v11[6])
        goto LABEL_17;
      v31 = a2[3] < v11[5] || a2[1] > v11[7];
      if (v13 && !v31)
      {
        v33 = a6[1];
        v32 = (unint64_t)a6[2];
        if ((unint64_t)v33 >= v32)
        {
          v47 = *a6;
          v48 = v33 - *a6;
          v49 = v48 >> 3;
          v50 = (v48 >> 3) + 1;
          if (v50 >> 61)
            sub_2233DCD38();
          v51 = v32 - (_QWORD)v47;
          if (v51 >> 2 > v50)
            v50 = v51 >> 2;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          v89 = v50;
          if (v50)
          {
            if (v50 >> 61)
              goto LABEL_99;
            v52 = operator new(8 * v50);
            v53 = &v52[8 * v49];
            *(_QWORD *)v53 = v11;
            v54 = (uint64_t)(v53 + 8);
            v55 = (char *)(v33 - v47);
            if (v33 != v47)
            {
LABEL_62:
              v56 = (unint64_t)(v55 - 8);
              if (v56 < 0x58)
              {
                v8 = a4;
                goto LABEL_71;
              }
              v57 = v33 - v52 - v48;
              v8 = a4;
              if (v57 < 0x20)
                goto LABEL_104;
              v58 = (v56 >> 3) + 1;
              v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
              v60 = &v33[-v59];
              v53 -= v59;
              v61 = &v52[8 * v49 - 16];
              v62 = v33 - 16;
              v63 = v58 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v64 = *(_OWORD *)v62;
                *(v61 - 1) = *((_OWORD *)v62 - 1);
                *v61 = v64;
                v61 -= 2;
                v62 -= 32;
                v63 -= 4;
              }
              while (v63);
              v33 = v60;
              if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_104:
                do
                {
LABEL_71:
                  v65 = *((_QWORD *)v33 - 1);
                  v33 -= 8;
                  *((_QWORD *)v53 - 1) = v65;
                  v53 -= 8;
                }
                while (v33 != v47);
              }
              v33 = *a6;
              *a6 = v53;
              a6[1] = (char *)v54;
              a6[2] = &v52[8 * v89];
              if (v33)
LABEL_73:
                operator delete(v33);
LABEL_74:
              result = v86;
              a6[1] = (char *)v54;
              goto LABEL_4;
            }
          }
          else
          {
            v52 = 0;
            v53 = (char *)(8 * v49);
            *(_QWORD *)(8 * v49) = v11;
            v54 = 8 * v49 + 8;
            v55 = (char *)(v33 - v47);
            if (v33 != v47)
              goto LABEL_62;
          }
          v8 = a4;
          *a6 = v53;
          a6[1] = (char *)v54;
          a6[2] = &v52[8 * v89];
          if (v33)
            goto LABEL_73;
          goto LABEL_74;
        }
        *(_QWORD *)v33 = v11;
        a6[1] = v33 + 8;
        goto LABEL_4;
      }
      if (!v13)
      {
        if (!v31)
        {
          v34 = a5;
          v36 = a5[1];
          v35 = (unint64_t)a5[2];
          if ((unint64_t)v36 < v35)
          {
            *(_QWORD *)v36 = v11;
            v37 = (uint64_t)(v36 + 8);
LABEL_96:
            v34[1] = (char *)v37;
            goto LABEL_4;
          }
          v66 = *a5;
          v67 = v36 - *a5;
          v68 = v67 >> 3;
          v69 = (v67 >> 3) + 1;
          if (v69 >> 61)
            sub_2233DCD38();
          v70 = v35 - (_QWORD)v66;
          if (v70 >> 2 > v69)
            v69 = v70 >> 2;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
            v69 = 0x1FFFFFFFFFFFFFFFLL;
          v90 = v69;
          if (v69)
          {
            if (v69 >> 61)
LABEL_99:
              sub_223174E94();
            v71 = operator new(8 * v69);
            v72 = &v71[8 * v68];
            *(_QWORD *)v72 = v11;
            v37 = (uint64_t)(v72 + 8);
            v73 = (char *)(v36 - v66);
            if (v36 != v66)
            {
LABEL_83:
              v74 = (unint64_t)(v73 - 8);
              if (v74 < 0x58)
              {
                v8 = a4;
                goto LABEL_92;
              }
              v76 = v36 - v71 - v67;
              v8 = a4;
              if (v76 < 0x20)
                goto LABEL_105;
              v77 = (v74 >> 3) + 1;
              v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
              v79 = &v36[-v78];
              v72 -= v78;
              v80 = &v71[8 * v68 - 16];
              v81 = v36 - 16;
              v82 = v77 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v83 = *(_OWORD *)v81;
                *(v80 - 1) = *((_OWORD *)v81 - 1);
                *v80 = v83;
                v80 -= 2;
                v81 -= 32;
                v82 -= 4;
              }
              while (v82);
              v36 = v79;
              if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_105:
                do
                {
LABEL_92:
                  v84 = *((_QWORD *)v36 - 1);
                  v36 -= 8;
                  *((_QWORD *)v72 - 1) = v84;
                  v72 -= 8;
                }
                while (v36 != v66);
              }
              v75 = a5;
              v36 = *a5;
              *a5 = v72;
              a5[1] = (char *)v37;
              a5[2] = &v71[8 * v90];
              if (v36)
              {
LABEL_94:
                operator delete(v36);
                v34 = a5;
                goto LABEL_95;
              }
LABEL_87:
              v34 = v75;
LABEL_95:
              result = v86;
              goto LABEL_96;
            }
          }
          else
          {
            v71 = 0;
            v72 = (char *)(8 * v68);
            *(_QWORD *)(8 * v68) = v11;
            v37 = 8 * v68 + 8;
            v73 = (char *)(v36 - v66);
            if (v36 != v66)
              goto LABEL_83;
          }
          v75 = a5;
          v8 = a4;
          *a5 = v72;
          a5[1] = (char *)v37;
          a5[2] = &v71[8 * v90];
          if (v36)
            goto LABEL_94;
          goto LABEL_87;
        }
        goto LABEL_4;
      }
LABEL_18:
      v16 = (char *)v8[1];
      v15 = v8[2];
      if ((unint64_t)v16 >= v15)
      {
        v17 = a2;
        v18 = v9;
        v19 = a6;
        v20 = (char *)*v8;
        v21 = (uint64_t)&v16[-*v8];
        v22 = v21 >> 3;
        v23 = (v21 >> 3) + 1;
        if (v23 >> 61)
          sub_2233DCD38();
        v24 = v15 - (_QWORD)v20;
        if (v24 >> 2 > v23)
          v23 = v24 >> 2;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        v88 = v23;
        if (v23)
        {
          if (v23 >> 61)
            goto LABEL_99;
          v25 = operator new(8 * v23);
          v26 = &v25[8 * v22];
          *v26 = v11;
          v27 = (uint64_t)(v26 + 1);
          v28 = (char *)(v16 - v20);
          if (v16 != v20)
          {
LABEL_27:
            v29 = (unint64_t)(v28 - 8);
            if (v29 < 0x58)
            {
              a6 = v19;
              v9 = v18;
              a2 = v17;
              goto LABEL_50;
            }
            v38 = v16 - v25 - v21;
            a6 = v19;
            v9 = v18;
            a2 = v17;
            if (v38 < 0x20)
              goto LABEL_106;
            v39 = (v29 >> 3) + 1;
            v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
            v41 = &v16[-v40];
            v26 = (_QWORD *)((char *)v26 - v40);
            v42 = &v25[8 * v22 - 16];
            v43 = v16 - 16;
            v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v45 = *(_OWORD *)v43;
              *(v42 - 1) = *((_OWORD *)v43 - 1);
              *v42 = v45;
              v42 -= 2;
              v43 -= 32;
              v44 -= 4;
            }
            while (v44);
            v16 = v41;
            if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_106:
              do
              {
LABEL_50:
                v46 = *((_QWORD *)v16 - 1);
                v16 -= 8;
                *--v26 = v46;
              }
              while (v16 != v20);
            }
            v8 = a4;
            v16 = (char *)*a4;
            *a4 = v26;
            a4[1] = v27;
            a4[2] = &v25[8 * v88];
            if (v16)
LABEL_52:
              operator delete(v16);
LABEL_53:
            result = v86;
            v8[1] = v27;
            goto LABEL_4;
          }
        }
        else
        {
          v25 = 0;
          v26 = (_QWORD *)(8 * v22);
          *(_QWORD *)(8 * v22) = v11;
          v27 = 8 * v22 + 8;
          v28 = (char *)(v16 - v20);
          if (v16 != v20)
            goto LABEL_27;
        }
        a6 = v19;
        v9 = v18;
        v8 = a4;
        a2 = v17;
        *a4 = v26;
        a4[1] = v27;
        a4[2] = &v25[8 * v88];
        if (v16)
          goto LABEL_52;
        goto LABEL_53;
      }
      *(_QWORD *)v16 = v11;
      v8[1] = v16 + 8;
LABEL_4:
      v6 += 8;
    }
    while (v6 != v9[1]);
  }
  return result;
}

uint64_t sub_2233DDA44(__int128 *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;

  v10 = *a2;
  v9 = a2[1];
  if ((unint64_t)((char *)v9 - (char *)*a2) >= 0x80
    && a4 <= 0x63
    && (unint64_t)((char *)a3[1] - (char *)*a3) >= 0x79)
  {
    return sub_2233DED50(a1, a2, a3, a4 + 1, a5, a6, a6);
  }
  if (v10 != v9)
  {
    v12 = a3[1];
    if (*a3 != v12)
    {
      do
      {
        v13 = *a3;
        if (*a3 != v12)
        {
          do
          {
            v14 = *v10;
            v15 = *v13;
            if (*(_QWORD *)(*v10 + 48) >= *(_QWORD *)(*v13 + 32) && *(_QWORD *)(v14 + 32) <= *(_QWORD *)(v15 + 48))
            {
              v16 = *(_QWORD *)(v14 + 56) >= *(_QWORD *)(v15 + 40) && *(_QWORD *)(v14 + 40) <= *(_QWORD *)(v15 + 56);
              v17 = v16 && *(_BYTE *)(v14 + 96) == 0;
              if (v17 && *(_BYTE *)(v15 + 96) == 0)
              {
                result = sub_2233DF89C(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v14, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v15, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32));
                if (!(_DWORD)result)
                  return result;
                v12 = a3[1];
              }
            }
            ++v13;
          }
          while (v13 != v12);
          v9 = a2[1];
        }
        ++v10;
      }
      while (v10 != v9);
    }
  }
  return 1;
}

uint64_t sub_2233DDBB4(__int128 *a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __n128 v15;
  __n128 v16;
  uint64_t *v17;
  uint64_t *v18;
  __n128 v19;
  __n128 v20;
  int64x2_t **v21;
  int8x16_t v22;
  int8x16_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  int64x2_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int64x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int64x2_t v33;
  int8x16_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *i;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *j;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  BOOL v59;
  _OWORD v62[2];
  void *__p;
  uint64_t *v64;
  uint64_t v65;
  void *v66;
  uint64_t *v67;
  uint64_t v68;
  void *v69;
  uint64_t *v70;
  uint64_t v71;
  _QWORD v72[2];
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;

  v9 = *((_QWORD *)a1 + 2);
  v8 = *((_QWORD *)a1 + 3);
  v10 = *((_QWORD *)a1 + 1);
  if (v10 >= 0)
    v11 = *((_QWORD *)a1 + 1);
  else
    v11 = v10 + 1;
  v12 = v11 >> 1;
  if (v8 >= 0)
    v13 = *((_QWORD *)a1 + 3);
  else
    v13 = v8 + 1;
  v14 = *a1;
  v73 = a1[1];
  v74 = v14;
  v72[0] = v14;
  v75 = v9;
  v76 = (v13 >> 1)
      + v12
      + ((int)(((_DWORD)v8
              - 2 * (v13 >> 1)
              + (_DWORD)v10
              - 2 * (_DWORD)v12
              + (((v8 - 2 * (v13 >> 1) + (_DWORD)v10 - 2 * (_DWORD)v12) & 0x80) >> 7)) << 24) >> 25);
  v72[1] = v76;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  __p = 0;
  v64 = 0;
  v65 = 0;
  sub_2233DD4BC(&v74, v72, a2, &v69, (char **)&v66, (char **)&__p);
  v18 = (uint64_t *)__p;
  v17 = v64;
  if (__p != v64)
  {
    v19 = (__n128)vdupq_n_s64(0x8000000000000000);
    v20 = (__n128)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v21 = (int64x2_t **)__p;
    v22 = (int8x16_t)v20;
    v23 = (int8x16_t)v19;
    do
    {
      v24 = *v21++;
      v25 = v24[2];
      v26 = v24[3];
      v27 = (int8x16_t)vcgtq_s64((int64x2_t)v20, v25);
      v28 = vbslq_s8(v27, (int8x16_t)v25, v22);
      v29 = (int64x2_t)vbslq_s8(v27, (int8x16_t)v25, (int8x16_t)v20);
      v30 = (int8x16_t)vcgtq_s64(v29, v26);
      v22 = vbslq_s8(v30, (int8x16_t)v26, v28);
      v20 = (__n128)vbslq_s8(v30, (int8x16_t)v26, (int8x16_t)v29);
      v31 = (int8x16_t)vcgtq_s64(v25, (int64x2_t)v19);
      v32 = vbslq_s8(v31, (int8x16_t)v25, v23);
      v33 = (int64x2_t)vbslq_s8(v31, (int8x16_t)v25, (int8x16_t)v19);
      v34 = (int8x16_t)vcgtq_s64(v26, v33);
      v23 = vbslq_s8(v34, (int8x16_t)v26, v32);
      v19 = (__n128)vbslq_s8(v34, (int8x16_t)v26, (int8x16_t)v33);
    }
    while (v21 != (int64x2_t **)v64);
    v62[0] = v22;
    v62[1] = v23;
    if (a3 > 0x63 || (unint64_t)((char *)v64 - (_BYTE *)__p) < 0x79)
    {
      do
      {
        v37 = v18 + 1;
        if (v18 + 1 != v17)
        {
          for (i = v18 + 1; i != v17; ++i)
          {
            v39 = *v18;
            v40 = *i;
            if (*(_QWORD *)(*v18 + 48) >= *(_QWORD *)(*i + 32) && *(_QWORD *)(v39 + 32) <= *(_QWORD *)(v40 + 48))
            {
              v41 = *(_QWORD *)(v39 + 56) >= *(_QWORD *)(v40 + 40) && *(_QWORD *)(v39 + 40) <= *(_QWORD *)(v40 + 56);
              v42 = v41 && *(_BYTE *)(v39 + 96) == 0;
              if (v42 && *(_BYTE *)(v40 + 96) == 0)
              {
                if (!sub_2233DF89C(*(_DWORD *)(a4 + 40), *(uint64_t **)a4, v39, *(_DWORD *)(a4 + 40), *(uint64_t **)a4, v40, *(unsigned __int8 *)(a4 + 44), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD **)(a4 + 24), *(_BYTE **)(a4 + 32)))goto LABEL_81;
                v17 = v64;
              }
            }
          }
        }
        ++v18;
      }
      while (v37 != v17);
    }
    else if (!sub_2233DCFD8(v62, &__p, a3 + 1, a4, a5, v19, v20))
    {
LABEL_81:
      v53 = 0;
      goto LABEL_82;
    }
    if (!sub_2233DE098((uint64_t *)v62, (uint64_t **)&__p, (uint64_t **)&v69, a3, a4, a5)
      || (sub_2233DE098((uint64_t *)v62, (uint64_t **)&__p, (uint64_t **)&v66, a3, a4, a5) & 1) == 0)
    {
      goto LABEL_81;
    }
  }
  v36 = (uint64_t *)v69;
  v35 = v70;
  if (a3 > 0x63 || (unint64_t)((char *)v70 - (_BYTE *)v69) < 0x79)
  {
LABEL_56:
    while (v36 != v35)
    {
      v44 = v36++;
      if (v36 != v35)
      {
        v45 = v36;
        while (1)
        {
          v46 = *v44;
          v47 = *v45;
          if (*(_QWORD *)(*v44 + 48) >= *(_QWORD *)(*v45 + 32) && *(_QWORD *)(v46 + 32) <= *(_QWORD *)(v47 + 48))
          {
            v48 = *(_QWORD *)(v46 + 56) >= *(_QWORD *)(v47 + 40) && *(_QWORD *)(v46 + 40) <= *(_QWORD *)(v47 + 56);
            v49 = v48 && *(_BYTE *)(v46 + 96) == 0;
            if (v49 && *(_BYTE *)(v47 + 96) == 0)
            {
              if (!sub_2233DF89C(*(_DWORD *)(a4 + 40), *(uint64_t **)a4, v46, *(_DWORD *)(a4 + 40), *(uint64_t **)a4, v47, *(unsigned __int8 *)(a4 + 44), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD **)(a4 + 24), *(_BYTE **)(a4 + 32)))goto LABEL_81;
              v35 = v70;
            }
          }
          if (++v45 == v35)
            goto LABEL_56;
        }
      }
    }
  }
  else if (!sub_2233DCFD8(&v74, &v69, a3 + 1, a4, a5, v15, v16))
  {
    goto LABEL_81;
  }
  v52 = (uint64_t *)v66;
  v51 = v67;
  if (a3 > 0x63 || (unint64_t)((char *)v67 - (_BYTE *)v66) < 0x79)
  {
    if (v66 == v67)
    {
      v53 = 1;
    }
    else
    {
      do
      {
        v54 = v52++;
        if (v52 != v51)
        {
          for (j = v52; j != v51; ++j)
          {
            v56 = *v54;
            v57 = *j;
            if (*(_QWORD *)(*v54 + 48) >= *(_QWORD *)(*j + 32) && *(_QWORD *)(v56 + 32) <= *(_QWORD *)(v57 + 48))
            {
              v58 = *(_QWORD *)(v56 + 56) >= *(_QWORD *)(v57 + 40) && *(_QWORD *)(v56 + 40) <= *(_QWORD *)(v57 + 56);
              v59 = v58 && *(_BYTE *)(v56 + 96) == 0;
              if (v59 && *(_BYTE *)(v57 + 96) == 0)
              {
                if (!sub_2233DF89C(*(_DWORD *)(a4 + 40), *(uint64_t **)a4, v56, *(_DWORD *)(a4 + 40), *(uint64_t **)a4, v57, *(unsigned __int8 *)(a4 + 44), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD **)(a4 + 24), *(_BYTE **)(a4 + 32)))goto LABEL_81;
                v51 = v67;
              }
            }
          }
        }
        v53 = 1;
      }
      while (v52 != v51);
    }
  }
  else
  {
    v53 = sub_2233DCFD8(v72, &v66, a3 + 1, a4, a5, v15, v16);
  }
LABEL_82:
  if (__p)
  {
    v64 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v66)
  {
    v67 = (uint64_t *)v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = (uint64_t *)v69;
    operator delete(v69);
  }
  return v53;
}

void sub_2233DE034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v26;
  void *v27;

  if (__p)
  {
    operator delete(__p);
    v26 = a21;
    if (!a21)
    {
LABEL_3:
      v27 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v26 = a21;
    if (!a21)
      goto LABEL_3;
  }
  operator delete(v26);
  v27 = a24;
  if (!a24)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233DE098(uint64_t *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;

  v10 = *a2;
  v9 = a2[1];
  if ((unint64_t)((char *)v9 - (char *)*a2) >= 0x80
    && a4 <= 0x63
    && (unint64_t)((char *)a3[1] - (char *)*a3) >= 0x79)
  {
    return sub_2233DE208(a1, a2, a3, a4 + 1, a5, a6, a6);
  }
  if (v10 != v9)
  {
    v12 = a3[1];
    if (*a3 != v12)
    {
      do
      {
        v13 = *a3;
        if (*a3 != v12)
        {
          do
          {
            v14 = *v10;
            v15 = *v13;
            if (*(_QWORD *)(*v10 + 48) >= *(_QWORD *)(*v13 + 32) && *(_QWORD *)(v14 + 32) <= *(_QWORD *)(v15 + 48))
            {
              v16 = *(_QWORD *)(v14 + 56) >= *(_QWORD *)(v15 + 40) && *(_QWORD *)(v14 + 40) <= *(_QWORD *)(v15 + 56);
              v17 = v16 && *(_BYTE *)(v14 + 96) == 0;
              if (v17 && *(_BYTE *)(v15 + 96) == 0)
              {
                result = sub_2233DF89C(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v14, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v15, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32));
                if (!(_DWORD)result)
                  return result;
                v12 = a3[1];
              }
            }
            ++v13;
          }
          while (v13 != v12);
          v9 = a2[1];
        }
        ++v10;
      }
      while (v10 != v9);
    }
  }
  return 1;
}

uint64_t sub_2233DE208(uint64_t *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __n128 v21;
  __n128 v22;
  uint64_t *v23;
  uint64_t *v24;
  void *v25;
  int64x2_t **v26;
  __n128 v27;
  __n128 v28;
  int8x16_t v29;
  int8x16_t v30;
  int64x2_t *v31;
  int64x2_t v32;
  int64x2_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int64x2_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int64x2_t v40;
  int8x16_t v41;
  int64x2_t *v42;
  int64x2_t v43;
  int64x2_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int64x2_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int64x2_t v51;
  int8x16_t v52;
  void *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  BOOL v60;
  void *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  BOOL v67;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  BOOL v73;
  __n128 v75;
  __n128 v76;
  int8x16_t v77;
  int8x16_t v78;
  int64x2_t *v79;
  int64x2_t v80;
  int64x2_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int64x2_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int64x2_t v88;
  int8x16_t v89;
  __n128 v90;
  __n128 v91;
  void *v92;
  int64x2_t **v93;
  uint64_t *v94;
  uint64_t *v95;
  __n128 v96;
  __n128 v97;
  int8x16_t v98;
  int8x16_t v99;
  int64x2_t *v100;
  int64x2_t v101;
  int64x2_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int64x2_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int64x2_t v109;
  int8x16_t v110;
  __n128 v111;
  __n128 v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  BOOL v120;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  BOOL v129;
  void *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  BOOL v137;
  BOOL v138;
  void *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  BOOL v146;
  BOOL v147;
  int8x16_t v150;
  int8x16_t v151;
  void *__p;
  _QWORD *v153;
  uint64_t v154;
  void *v155;
  _BYTE *v156;
  uint64_t v157;
  void *v158;
  void *v159;
  uint64_t v160;
  void *v161;
  uint64_t *v162;
  uint64_t v163;
  void *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t v169;
  _QWORD v170[2];
  __int128 v171;
  __int128 v172;
  __int128 v173;

  v12 = *a1;
  v13 = a1[2];
  if (*a1 >= 0)
    v14 = *a1;
  else
    v14 = v12 + 1;
  v15 = v14 >> 1;
  v17 = *(_OWORD *)a1;
  v16 = *((_OWORD *)a1 + 1);
  v172 = *(_OWORD *)a1;
  v173 = v16;
  if (v13 >= 0)
    v18 = v13;
  else
    v18 = v13 + 1;
  v19 = v18 >> 1;
  v170[1] = *((_QWORD *)&v17 + 1);
  v171 = v16;
  v20 = v13 - 2 * v19 + v12 - 2 * v15;
  *(_QWORD *)&v173 = v19 + v15 + ((v20 + ((v20 & 0x80) >> 7)) << 24 >> 25);
  v169 = 0;
  v170[0] = v173;
  v167 = 0;
  v168 = 0;
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  v155 = 0;
  v156 = 0;
  v157 = 0;
  __p = 0;
  v153 = 0;
  v154 = 0;
  sub_2233DD4BC(&v172, v170, a2, &v167, (char **)&v164, (char **)&v161);
  sub_2233DD4BC(&v172, v170, a3, &v158, (char **)&v155, (char **)&__p);
  v24 = (uint64_t *)v161;
  v23 = v162;
  if (v161 == v162)
    goto LABEL_98;
  v26 = (int64x2_t **)__p;
  v25 = v153;
  if ((unint64_t)((char *)v162 - (_BYTE *)v161) < 0x80
    || a4 > 0x63
    || (unint64_t)((char *)v153 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v153)
    {
      do
      {
        v56 = (uint64_t *)__p;
        if (__p != v25)
        {
          do
          {
            v57 = *v24;
            v58 = *v56;
            if (*(_QWORD *)(*v24 + 48) >= *(_QWORD *)(*v56 + 32) && *(_QWORD *)(v57 + 32) <= *(_QWORD *)(v58 + 48))
            {
              v59 = *(_QWORD *)(v57 + 56) >= *(_QWORD *)(v58 + 40) && *(_QWORD *)(v57 + 40) <= *(_QWORD *)(v58 + 56);
              v60 = v59 && *(_BYTE *)(v57 + 96) == 0;
              if (v60 && *(_BYTE *)(v58 + 96) == 0)
              {
                if (!sub_2233DF89C(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v57, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v58, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_217;
                v25 = v153;
              }
            }
            ++v56;
          }
          while (v56 != v25);
          v23 = v162;
        }
        ++v24;
      }
      while (v24 != v23);
    }
  }
  else
  {
    v27 = (__n128)vdupq_n_s64(0x8000000000000000);
    v28 = (__n128)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v29 = (int8x16_t)v28;
    v30 = (int8x16_t)v27;
    do
    {
      v31 = (int64x2_t *)*v24++;
      v32 = v31[2];
      v33 = v31[3];
      v34 = (int8x16_t)vcgtq_s64((int64x2_t)v28, v32);
      v35 = vbslq_s8(v34, (int8x16_t)v32, v29);
      v36 = (int64x2_t)vbslq_s8(v34, (int8x16_t)v32, (int8x16_t)v28);
      v37 = (int8x16_t)vcgtq_s64(v36, v33);
      v29 = vbslq_s8(v37, (int8x16_t)v33, v35);
      v28 = (__n128)vbslq_s8(v37, (int8x16_t)v33, (int8x16_t)v36);
      v38 = (int8x16_t)vcgtq_s64(v32, (int64x2_t)v27);
      v39 = vbslq_s8(v38, (int8x16_t)v32, v30);
      v40 = (int64x2_t)vbslq_s8(v38, (int8x16_t)v32, (int8x16_t)v27);
      v41 = (int8x16_t)vcgtq_s64(v33, v40);
      v30 = vbslq_s8(v41, (int8x16_t)v33, v39);
      v27 = (__n128)vbslq_s8(v41, (int8x16_t)v33, (int8x16_t)v40);
    }
    while (v24 != v162);
    v150 = v29;
    v151 = v30;
    if (__p != v153)
    {
      do
      {
        v42 = *v26++;
        v43 = v42[2];
        v44 = v42[3];
        v45 = (int8x16_t)vcgtq_s64((int64x2_t)v28, v43);
        v46 = vbslq_s8(v45, (int8x16_t)v43, v29);
        v47 = (int64x2_t)vbslq_s8(v45, (int8x16_t)v43, (int8x16_t)v28);
        v48 = (int8x16_t)vcgtq_s64(v47, v44);
        v29 = vbslq_s8(v48, (int8x16_t)v44, v46);
        v28 = (__n128)vbslq_s8(v48, (int8x16_t)v44, (int8x16_t)v47);
        v49 = (int8x16_t)vcgtq_s64(v43, (int64x2_t)v27);
        v50 = vbslq_s8(v49, (int8x16_t)v43, v30);
        v51 = (int64x2_t)vbslq_s8(v49, (int8x16_t)v43, (int8x16_t)v27);
        v52 = (int8x16_t)vcgtq_s64(v44, v51);
        v30 = vbslq_s8(v52, (int8x16_t)v44, v50);
        v27 = (__n128)vbslq_s8(v52, (int8x16_t)v44, (int8x16_t)v51);
      }
      while (v26 != v153);
      v150 = v29;
      v151 = v30;
    }
    if ((sub_2233DED50(&v150, &v161, &__p, a4 + 1, a5, a6, a7, v28, v27) & 1) == 0)
    {
LABEL_217:
      v141 = 0;
      v142 = __p;
      if (!__p)
        goto LABEL_219;
      goto LABEL_218;
    }
  }
  v53 = v159;
  if ((unint64_t)((_BYTE *)v159 - (_BYTE *)v158) > 0x7F)
  {
    v55 = (uint64_t *)v161;
    v54 = v162;
    if ((unint64_t)(v156 - (_BYTE *)v155) >= 0x80
      && a4 <= 0x63
      && (unint64_t)((char *)v162 - (_BYTE *)v161) >= 0x79)
    {
      v75 = (__n128)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      v76 = (__n128)vdupq_n_s64(0x8000000000000000);
      v150 = (int8x16_t)v75;
      v151 = (int8x16_t)v76;
      if (v161 != v162)
      {
        v77 = (int8x16_t)v75;
        v78 = (int8x16_t)v76;
        do
        {
          v79 = (int64x2_t *)*v55++;
          v80 = v79[2];
          v81 = v79[3];
          v82 = (int8x16_t)vcgtq_s64((int64x2_t)v75, v80);
          v83 = vbslq_s8(v82, (int8x16_t)v80, v77);
          v84 = (int64x2_t)vbslq_s8(v82, (int8x16_t)v80, (int8x16_t)v75);
          v85 = (int8x16_t)vcgtq_s64(v84, v81);
          v77 = vbslq_s8(v85, (int8x16_t)v81, v83);
          v75 = (__n128)vbslq_s8(v85, (int8x16_t)v81, (int8x16_t)v84);
          v86 = (int8x16_t)vcgtq_s64(v80, (int64x2_t)v76);
          v87 = vbslq_s8(v86, (int8x16_t)v80, v78);
          v88 = (int64x2_t)vbslq_s8(v86, (int8x16_t)v80, (int8x16_t)v76);
          v89 = (int8x16_t)vcgtq_s64(v81, v88);
          v78 = vbslq_s8(v89, (int8x16_t)v81, v87);
          v76 = (__n128)vbslq_s8(v89, (int8x16_t)v81, (int8x16_t)v88);
        }
        while (v55 != v162);
        v150 = v77;
        v151 = v78;
      }
      if (!sub_2233DED50(&v150, &v161, &v158, a4 + 1, a5, a6, a7, v75, v76)
        || (sub_2233DED50(&v150, &v161, &v155, a4 + 1, a5, a6, a7, v90, v91) & 1) == 0)
      {
        goto LABEL_217;
      }
      goto LABEL_98;
    }
  }
  else
  {
    v55 = (uint64_t *)v161;
    v54 = v162;
  }
  if (v158 == v159 || v55 == v54)
  {
    if (v55 == v54)
      goto LABEL_98;
    goto LABEL_45;
  }
  do
  {
    v63 = (uint64_t *)v158;
    if (v158 != v53)
    {
      do
      {
        v64 = *v55;
        v65 = *v63;
        if (*(_QWORD *)(*v55 + 48) >= *(_QWORD *)(*v63 + 32) && *(_QWORD *)(v64 + 32) <= *(_QWORD *)(v65 + 48))
        {
          v66 = *(_QWORD *)(v64 + 56) >= *(_QWORD *)(v65 + 40) && *(_QWORD *)(v64 + 40) <= *(_QWORD *)(v65 + 56);
          v67 = v66 && *(_BYTE *)(v64 + 96) == 0;
          if (v67 && *(_BYTE *)(v65 + 96) == 0)
          {
            if (!sub_2233DF89C(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v64, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v65, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_217;
            v53 = v159;
          }
        }
        ++v63;
      }
      while (v63 != v53);
      v54 = v162;
    }
    ++v55;
  }
  while (v55 != v54);
  v55 = (uint64_t *)v161;
  if (v161 != v54)
  {
LABEL_45:
    v62 = v156;
    if (v155 != v156)
    {
      do
      {
        v69 = (uint64_t *)v155;
        if (v155 != v62)
        {
          do
          {
            v70 = *v55;
            v71 = *v69;
            if (*(_QWORD *)(*v55 + 48) >= *(_QWORD *)(*v69 + 32) && *(_QWORD *)(v70 + 32) <= *(_QWORD *)(v71 + 48))
            {
              v72 = *(_QWORD *)(v70 + 56) >= *(_QWORD *)(v71 + 40) && *(_QWORD *)(v70 + 40) <= *(_QWORD *)(v71 + 56);
              v73 = v72 && *(_BYTE *)(v70 + 96) == 0;
              if (v73 && *(_BYTE *)(v71 + 96) == 0)
              {
                if (!sub_2233DF89C(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v70, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v71, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_217;
                v62 = v156;
              }
            }
            ++v69;
          }
          while (v69 != v62);
          v54 = v162;
        }
        ++v55;
      }
      while (v55 != v54);
    }
  }
LABEL_98:
  v93 = (int64x2_t **)__p;
  v92 = v153;
  if (__p == v153)
    goto LABEL_141;
  v95 = v167;
  v94 = v168;
  if ((unint64_t)((char *)v168 - (char *)v167) < 0x80
    || (unint64_t)((char *)v165 - (_BYTE *)v164) < 0x80
    || a4 > 0x63
    || (unint64_t)((char *)v153 - (_BYTE *)__p) < 0x79)
  {
    if (v167 == v168)
    {
      v114 = (uint64_t *)v164;
      v113 = v165;
      if (v164 == v165 || __p == v153)
        goto LABEL_141;
    }
    else
    {
      do
      {
        v116 = (uint64_t *)__p;
        if (__p != v92)
        {
          do
          {
            v117 = *v95;
            v118 = *v116;
            if (*(_QWORD *)(*v95 + 48) >= *(_QWORD *)(*v116 + 32) && *(_QWORD *)(v117 + 32) <= *(_QWORD *)(v118 + 48))
            {
              v119 = *(_QWORD *)(v117 + 56) >= *(_QWORD *)(v118 + 40)
                  && *(_QWORD *)(v117 + 40) <= *(_QWORD *)(v118 + 56);
              v120 = v119 && *(_BYTE *)(v117 + 96) == 0;
              if (v120 && *(_BYTE *)(v118 + 96) == 0)
              {
                if (!sub_2233DF89C(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v117, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v118, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_217;
                v92 = v153;
              }
            }
            ++v116;
          }
          while (v116 != v92);
          v94 = v168;
        }
        ++v95;
      }
      while (v95 != v94);
      v114 = (uint64_t *)v164;
      v113 = v165;
      if (v164 == v165 || __p == v92)
        goto LABEL_141;
    }
    do
    {
      v125 = (uint64_t *)__p;
      if (__p != v92)
      {
        do
        {
          v126 = *v114;
          v127 = *v125;
          if (*(_QWORD *)(*v114 + 48) >= *(_QWORD *)(*v125 + 32) && *(_QWORD *)(v126 + 32) <= *(_QWORD *)(v127 + 48))
          {
            v128 = *(_QWORD *)(v126 + 56) >= *(_QWORD *)(v127 + 40) && *(_QWORD *)(v126 + 40) <= *(_QWORD *)(v127 + 56);
            v129 = v128 && *(_BYTE *)(v126 + 96) == 0;
            if (v129 && *(_BYTE *)(v127 + 96) == 0)
            {
              if (!sub_2233DF89C(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v126, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v127, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_217;
              v92 = v153;
            }
          }
          ++v125;
        }
        while (v125 != v92);
        v113 = v165;
      }
      ++v114;
    }
    while (v114 != v113);
    goto LABEL_141;
  }
  v96 = (__n128)vdupq_n_s64(0x8000000000000000);
  v97 = (__n128)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v98 = (int8x16_t)v97;
  v99 = (int8x16_t)v96;
  do
  {
    v100 = *v93++;
    v101 = v100[2];
    v102 = v100[3];
    v103 = (int8x16_t)vcgtq_s64((int64x2_t)v97, v101);
    v104 = vbslq_s8(v103, (int8x16_t)v101, v98);
    v105 = (int64x2_t)vbslq_s8(v103, (int8x16_t)v101, (int8x16_t)v97);
    v106 = (int8x16_t)vcgtq_s64(v105, v102);
    v98 = vbslq_s8(v106, (int8x16_t)v102, v104);
    v97 = (__n128)vbslq_s8(v106, (int8x16_t)v102, (int8x16_t)v105);
    v107 = (int8x16_t)vcgtq_s64(v101, (int64x2_t)v96);
    v108 = vbslq_s8(v107, (int8x16_t)v101, v99);
    v109 = (int64x2_t)vbslq_s8(v107, (int8x16_t)v101, (int8x16_t)v96);
    v110 = (int8x16_t)vcgtq_s64(v102, v109);
    v99 = vbslq_s8(v110, (int8x16_t)v102, v108);
    v96 = (__n128)vbslq_s8(v110, (int8x16_t)v102, (int8x16_t)v109);
  }
  while (v93 != v153);
  v150 = v98;
  v151 = v99;
  if (!sub_2233DED50(&v150, &v167, &__p, a4 + 1, a5, a6, a7, v96, v97)
    || (sub_2233DED50(&v150, &v164, &__p, a4 + 1, a5, a6, a7, v111, v112) & 1) == 0)
  {
    goto LABEL_217;
  }
LABEL_141:
  v124 = v167;
  v123 = v168;
  if ((unint64_t)((char *)v168 - (char *)v167) < 0x80
    || a4 > 0x63
    || (unint64_t)((_BYTE *)v159 - (_BYTE *)v158) < 0x79)
  {
    if (v167 != v168)
    {
      v131 = v159;
      if (v158 != v159)
      {
        do
        {
          v134 = (uint64_t *)v158;
          if (v158 != v131)
          {
            do
            {
              v135 = *v124;
              v136 = *v134;
              if (*(_QWORD *)(*v124 + 48) >= *(_QWORD *)(*v134 + 32)
                && *(_QWORD *)(v135 + 32) <= *(_QWORD *)(v136 + 48))
              {
                v137 = *(_QWORD *)(v135 + 56) >= *(_QWORD *)(v136 + 40)
                    && *(_QWORD *)(v135 + 40) <= *(_QWORD *)(v136 + 56);
                v138 = v137 && *(_BYTE *)(v135 + 96) == 0;
                if (v138 && *(_BYTE *)(v136 + 96) == 0)
                {
                  if (!sub_2233DF89C(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v135, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v136, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_217;
                  v131 = v159;
                }
              }
              ++v134;
            }
            while (v134 != v131);
            v123 = v168;
          }
          ++v124;
        }
        while (v124 != v123);
      }
    }
  }
  else if ((sub_2233DED50(&v172, &v167, &v158, a4 + 1, a5, a6, a7, v21, v22) & 1) == 0)
  {
    goto LABEL_217;
  }
  v133 = (uint64_t *)v164;
  v132 = v165;
  if ((unint64_t)((char *)v165 - (_BYTE *)v164) < 0x80
    || a4 > 0x63
    || (unint64_t)(v156 - (_BYTE *)v155) < 0x79)
  {
    if (v164 != v165)
    {
      v140 = v156;
      if (v155 != v156)
      {
        do
        {
          v143 = (uint64_t *)v155;
          if (v155 != v140)
          {
            do
            {
              v144 = *v133;
              v145 = *v143;
              if (*(_QWORD *)(*v133 + 48) >= *(_QWORD *)(*v143 + 32)
                && *(_QWORD *)(v144 + 32) <= *(_QWORD *)(v145 + 48))
              {
                v146 = *(_QWORD *)(v144 + 56) >= *(_QWORD *)(v145 + 40)
                    && *(_QWORD *)(v144 + 40) <= *(_QWORD *)(v145 + 56);
                v147 = v146 && *(_BYTE *)(v144 + 96) == 0;
                if (v147 && *(_BYTE *)(v145 + 96) == 0)
                {
                  if (!sub_2233DF89C(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v144, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v145, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_217;
                  v140 = v156;
                }
              }
              ++v143;
            }
            while (v143 != v140);
            v132 = v165;
          }
          ++v133;
        }
        while (v133 != v132);
      }
    }
  }
  else if ((sub_2233DED50(v170, &v164, &v155, a4 + 1, a5, a6, a7, v21, v22) & 1) == 0)
  {
    goto LABEL_217;
  }
  v141 = 1;
  v142 = __p;
  if (__p)
  {
LABEL_218:
    v153 = v142;
    operator delete(v142);
  }
LABEL_219:
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (v161)
  {
    v162 = (uint64_t *)v161;
    operator delete(v161);
  }
  if (v164)
  {
    v165 = (uint64_t *)v164;
    operator delete(v164);
  }
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  return v141;
}

void sub_2233DEC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  if (__p)
  {
    operator delete(__p);
    v32 = a20;
    if (!a20)
    {
LABEL_3:
      v33 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v32 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v32);
  v33 = a23;
  if (!a23)
  {
LABEL_4:
    v34 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v33);
  v34 = a26;
  if (!a26)
  {
LABEL_5:
    v35 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v34);
  v35 = a29;
  if (!a29)
  {
LABEL_6:
    v36 = *(void **)(v30 - 152);
    if (!v36)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v35);
  v36 = *(void **)(v30 - 152);
  if (!v36)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  *(_QWORD *)(v30 - 144) = v36;
  operator delete(v36);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233DED50(__int128 *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  void *v23;
  int64x2_t **v24;
  int64x2_t v25;
  int64x2_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int64x2_t *v29;
  int64x2_t v30;
  int64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int64x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int64x2_t v38;
  int8x16_t v39;
  int64x2_t *v40;
  int64x2_t v41;
  int64x2_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int64x2_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int64x2_t v49;
  int8x16_t v50;
  void *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  void *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  BOOL v65;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  BOOL v71;
  int64x2_t v73;
  int64x2_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int64x2_t *v77;
  int64x2_t v78;
  int64x2_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int64x2_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int64x2_t v86;
  int8x16_t v87;
  void *v88;
  int64x2_t **v89;
  uint64_t *v90;
  uint64_t *v91;
  int64x2_t v92;
  int64x2_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int64x2_t *v96;
  int64x2_t v97;
  int64x2_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int64x2_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int64x2_t v105;
  int8x16_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  BOOL v114;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  BOOL v123;
  void *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  BOOL v132;
  void *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  BOOL v141;
  int8x16_t v144;
  int8x16_t v145;
  void *__p;
  _QWORD *v147;
  uint64_t v148;
  void *v149;
  _BYTE *v150;
  uint64_t v151;
  void *v152;
  void *v153;
  uint64_t v154;
  void *v155;
  uint64_t *v156;
  uint64_t v157;
  void *v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164[2];
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;

  v13 = *((_QWORD *)a1 + 2);
  v12 = *((_QWORD *)a1 + 3);
  v14 = *((_QWORD *)a1 + 1);
  if (v14 >= 0)
    v15 = *((_QWORD *)a1 + 1);
  else
    v15 = v14 + 1;
  v16 = v15 >> 1;
  v17 = *a1;
  v165 = a1[1];
  v166 = v17;
  if (v12 >= 0)
    v18 = v12;
  else
    v18 = v12 + 1;
  v19 = v18 >> 1;
  v164[0] = v17;
  v20 = v12 - 2 * v19 + v14 - 2 * v16;
  v167 = v13;
  v168 = v19 + v16 + ((v20 + ((v20 & 0x80) >> 7)) << 24 >> 25);
  v164[1] = v168;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  v155 = 0;
  v156 = 0;
  v157 = 0;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  __p = 0;
  v147 = 0;
  v148 = 0;
  sub_2233DD4BC(&v166, v164, a2, &v161, (char **)&v158, (char **)&v155);
  sub_2233DD4BC(&v166, v164, a3, &v152, (char **)&v149, (char **)&__p);
  v22 = (uint64_t *)v155;
  v21 = v156;
  if (v155 == v156)
    goto LABEL_98;
  v24 = (int64x2_t **)__p;
  v23 = v147;
  if ((unint64_t)((char *)v156 - (_BYTE *)v155) < 0x80
    || a4 > 0x63
    || (unint64_t)((char *)v147 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v147)
    {
      do
      {
        v54 = (uint64_t *)__p;
        if (__p != v23)
        {
          do
          {
            v55 = *v22;
            v56 = *v54;
            if (*(_QWORD *)(*v22 + 48) >= *(_QWORD *)(*v54 + 32) && *(_QWORD *)(v55 + 32) <= *(_QWORD *)(v56 + 48))
            {
              v57 = *(_QWORD *)(v55 + 56) >= *(_QWORD *)(v56 + 40) && *(_QWORD *)(v55 + 40) <= *(_QWORD *)(v56 + 56);
              v58 = v57 && *(_BYTE *)(v55 + 96) == 0;
              if (v58 && *(_BYTE *)(v56 + 96) == 0)
              {
                if (!sub_2233DF89C(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v55, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v56, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_217;
                v23 = v147;
              }
            }
            ++v54;
          }
          while (v54 != v23);
          v21 = v156;
        }
        ++v22;
      }
      while (v22 != v21);
    }
  }
  else
  {
    v25 = vdupq_n_s64(0x8000000000000000);
    v26 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v27 = (int8x16_t)v26;
    v28 = (int8x16_t)v25;
    do
    {
      v29 = (int64x2_t *)*v22++;
      v30 = v29[2];
      v31 = v29[3];
      v32 = (int8x16_t)vcgtq_s64(v26, v30);
      v33 = vbslq_s8(v32, (int8x16_t)v30, v27);
      v34 = (int64x2_t)vbslq_s8(v32, (int8x16_t)v30, (int8x16_t)v26);
      v35 = (int8x16_t)vcgtq_s64(v34, v31);
      v27 = vbslq_s8(v35, (int8x16_t)v31, v33);
      v26 = (int64x2_t)vbslq_s8(v35, (int8x16_t)v31, (int8x16_t)v34);
      v36 = (int8x16_t)vcgtq_s64(v30, v25);
      v37 = vbslq_s8(v36, (int8x16_t)v30, v28);
      v38 = (int64x2_t)vbslq_s8(v36, (int8x16_t)v30, (int8x16_t)v25);
      v39 = (int8x16_t)vcgtq_s64(v31, v38);
      v28 = vbslq_s8(v39, (int8x16_t)v31, v37);
      v25 = (int64x2_t)vbslq_s8(v39, (int8x16_t)v31, (int8x16_t)v38);
    }
    while (v22 != v156);
    v144 = v27;
    v145 = v28;
    if (__p != v147)
    {
      do
      {
        v40 = *v24++;
        v41 = v40[2];
        v42 = v40[3];
        v43 = (int8x16_t)vcgtq_s64(v26, v41);
        v44 = vbslq_s8(v43, (int8x16_t)v41, v27);
        v45 = (int64x2_t)vbslq_s8(v43, (int8x16_t)v41, (int8x16_t)v26);
        v46 = (int8x16_t)vcgtq_s64(v45, v42);
        v27 = vbslq_s8(v46, (int8x16_t)v42, v44);
        v26 = (int64x2_t)vbslq_s8(v46, (int8x16_t)v42, (int8x16_t)v45);
        v47 = (int8x16_t)vcgtq_s64(v41, v25);
        v48 = vbslq_s8(v47, (int8x16_t)v41, v28);
        v49 = (int64x2_t)vbslq_s8(v47, (int8x16_t)v41, (int8x16_t)v25);
        v50 = (int8x16_t)vcgtq_s64(v42, v49);
        v28 = vbslq_s8(v50, (int8x16_t)v42, v48);
        v25 = (int64x2_t)vbslq_s8(v50, (int8x16_t)v42, (int8x16_t)v49);
      }
      while (v24 != v147);
      v144 = v27;
      v145 = v28;
    }
    if ((sub_2233DE208(v144.i64, &v155, &__p, a4 + 1, a5, a6, a7) & 1) == 0)
    {
LABEL_217:
      v135 = 0;
      v136 = __p;
      if (!__p)
        goto LABEL_219;
      goto LABEL_218;
    }
  }
  v51 = v153;
  if ((unint64_t)((_BYTE *)v153 - (_BYTE *)v152) > 0x7F)
  {
    v53 = (uint64_t *)v155;
    v52 = v156;
    if ((unint64_t)(v150 - (_BYTE *)v149) >= 0x80
      && a4 <= 0x63
      && (unint64_t)((char *)v156 - (_BYTE *)v155) >= 0x79)
    {
      v73 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      v74 = vdupq_n_s64(0x8000000000000000);
      v144 = (int8x16_t)v73;
      v145 = (int8x16_t)v74;
      if (v155 != v156)
      {
        v75 = (int8x16_t)v73;
        v76 = (int8x16_t)v74;
        do
        {
          v77 = (int64x2_t *)*v53++;
          v78 = v77[2];
          v79 = v77[3];
          v80 = (int8x16_t)vcgtq_s64(v73, v78);
          v81 = vbslq_s8(v80, (int8x16_t)v78, v75);
          v82 = (int64x2_t)vbslq_s8(v80, (int8x16_t)v78, (int8x16_t)v73);
          v83 = (int8x16_t)vcgtq_s64(v82, v79);
          v75 = vbslq_s8(v83, (int8x16_t)v79, v81);
          v73 = (int64x2_t)vbslq_s8(v83, (int8x16_t)v79, (int8x16_t)v82);
          v84 = (int8x16_t)vcgtq_s64(v78, v74);
          v85 = vbslq_s8(v84, (int8x16_t)v78, v76);
          v86 = (int64x2_t)vbslq_s8(v84, (int8x16_t)v78, (int8x16_t)v74);
          v87 = (int8x16_t)vcgtq_s64(v79, v86);
          v76 = vbslq_s8(v87, (int8x16_t)v79, v85);
          v74 = (int64x2_t)vbslq_s8(v87, (int8x16_t)v79, (int8x16_t)v86);
        }
        while (v53 != v156);
        v144 = v75;
        v145 = v76;
      }
      if (!sub_2233DE208(v144.i64, &v155, &v152, a4 + 1, a5, a6, a7)
        || (sub_2233DE208(v144.i64, &v155, &v149, a4 + 1, a5, a6, a7) & 1) == 0)
      {
        goto LABEL_217;
      }
      goto LABEL_98;
    }
  }
  else
  {
    v53 = (uint64_t *)v155;
    v52 = v156;
  }
  if (v152 == v153 || v53 == v52)
  {
    if (v53 == v52)
      goto LABEL_98;
    goto LABEL_45;
  }
  do
  {
    v61 = (uint64_t *)v152;
    if (v152 != v51)
    {
      do
      {
        v62 = *v53;
        v63 = *v61;
        if (*(_QWORD *)(*v53 + 48) >= *(_QWORD *)(*v61 + 32) && *(_QWORD *)(v62 + 32) <= *(_QWORD *)(v63 + 48))
        {
          v64 = *(_QWORD *)(v62 + 56) >= *(_QWORD *)(v63 + 40) && *(_QWORD *)(v62 + 40) <= *(_QWORD *)(v63 + 56);
          v65 = v64 && *(_BYTE *)(v62 + 96) == 0;
          if (v65 && *(_BYTE *)(v63 + 96) == 0)
          {
            if (!sub_2233DF89C(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v62, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v63, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_217;
            v51 = v153;
          }
        }
        ++v61;
      }
      while (v61 != v51);
      v52 = v156;
    }
    ++v53;
  }
  while (v53 != v52);
  v53 = (uint64_t *)v155;
  if (v155 != v52)
  {
LABEL_45:
    v60 = v150;
    if (v149 != v150)
    {
      do
      {
        v67 = (uint64_t *)v149;
        if (v149 != v60)
        {
          do
          {
            v68 = *v53;
            v69 = *v67;
            if (*(_QWORD *)(*v53 + 48) >= *(_QWORD *)(*v67 + 32) && *(_QWORD *)(v68 + 32) <= *(_QWORD *)(v69 + 48))
            {
              v70 = *(_QWORD *)(v68 + 56) >= *(_QWORD *)(v69 + 40) && *(_QWORD *)(v68 + 40) <= *(_QWORD *)(v69 + 56);
              v71 = v70 && *(_BYTE *)(v68 + 96) == 0;
              if (v71 && *(_BYTE *)(v69 + 96) == 0)
              {
                if (!sub_2233DF89C(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v68, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v69, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_217;
                v60 = v150;
              }
            }
            ++v67;
          }
          while (v67 != v60);
          v52 = v156;
        }
        ++v53;
      }
      while (v53 != v52);
    }
  }
LABEL_98:
  v89 = (int64x2_t **)__p;
  v88 = v147;
  if (__p == v147)
    goto LABEL_141;
  v91 = v161;
  v90 = v162;
  if ((unint64_t)((char *)v162 - (char *)v161) < 0x80
    || (unint64_t)((char *)v159 - (_BYTE *)v158) < 0x80
    || a4 > 0x63
    || (unint64_t)((char *)v147 - (_BYTE *)__p) < 0x79)
  {
    if (v161 == v162)
    {
      v108 = (uint64_t *)v158;
      v107 = v159;
      if (v158 == v159 || __p == v147)
        goto LABEL_141;
    }
    else
    {
      do
      {
        v110 = (uint64_t *)__p;
        if (__p != v88)
        {
          do
          {
            v111 = *v91;
            v112 = *v110;
            if (*(_QWORD *)(*v91 + 48) >= *(_QWORD *)(*v110 + 32) && *(_QWORD *)(v111 + 32) <= *(_QWORD *)(v112 + 48))
            {
              v113 = *(_QWORD *)(v111 + 56) >= *(_QWORD *)(v112 + 40)
                  && *(_QWORD *)(v111 + 40) <= *(_QWORD *)(v112 + 56);
              v114 = v113 && *(_BYTE *)(v111 + 96) == 0;
              if (v114 && *(_BYTE *)(v112 + 96) == 0)
              {
                if (!sub_2233DF89C(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v111, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v112, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_217;
                v88 = v147;
              }
            }
            ++v110;
          }
          while (v110 != v88);
          v90 = v162;
        }
        ++v91;
      }
      while (v91 != v90);
      v108 = (uint64_t *)v158;
      v107 = v159;
      if (v158 == v159 || __p == v88)
        goto LABEL_141;
    }
    do
    {
      v119 = (uint64_t *)__p;
      if (__p != v88)
      {
        do
        {
          v120 = *v108;
          v121 = *v119;
          if (*(_QWORD *)(*v108 + 48) >= *(_QWORD *)(*v119 + 32) && *(_QWORD *)(v120 + 32) <= *(_QWORD *)(v121 + 48))
          {
            v122 = *(_QWORD *)(v120 + 56) >= *(_QWORD *)(v121 + 40) && *(_QWORD *)(v120 + 40) <= *(_QWORD *)(v121 + 56);
            v123 = v122 && *(_BYTE *)(v120 + 96) == 0;
            if (v123 && *(_BYTE *)(v121 + 96) == 0)
            {
              if (!sub_2233DF89C(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v120, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v121, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_217;
              v88 = v147;
            }
          }
          ++v119;
        }
        while (v119 != v88);
        v107 = v159;
      }
      ++v108;
    }
    while (v108 != v107);
    goto LABEL_141;
  }
  v92 = vdupq_n_s64(0x8000000000000000);
  v93 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v94 = (int8x16_t)v93;
  v95 = (int8x16_t)v92;
  do
  {
    v96 = *v89++;
    v97 = v96[2];
    v98 = v96[3];
    v99 = (int8x16_t)vcgtq_s64(v93, v97);
    v100 = vbslq_s8(v99, (int8x16_t)v97, v94);
    v101 = (int64x2_t)vbslq_s8(v99, (int8x16_t)v97, (int8x16_t)v93);
    v102 = (int8x16_t)vcgtq_s64(v101, v98);
    v94 = vbslq_s8(v102, (int8x16_t)v98, v100);
    v93 = (int64x2_t)vbslq_s8(v102, (int8x16_t)v98, (int8x16_t)v101);
    v103 = (int8x16_t)vcgtq_s64(v97, v92);
    v104 = vbslq_s8(v103, (int8x16_t)v97, v95);
    v105 = (int64x2_t)vbslq_s8(v103, (int8x16_t)v97, (int8x16_t)v92);
    v106 = (int8x16_t)vcgtq_s64(v98, v105);
    v95 = vbslq_s8(v106, (int8x16_t)v98, v104);
    v92 = (int64x2_t)vbslq_s8(v106, (int8x16_t)v98, (int8x16_t)v105);
  }
  while (v89 != v147);
  v144 = v94;
  v145 = v95;
  if (!sub_2233DE208(v144.i64, &v161, &__p, a4 + 1, a5, a6, a7)
    || (sub_2233DE208(v144.i64, &v158, &__p, a4 + 1, a5, a6, a7) & 1) == 0)
  {
    goto LABEL_217;
  }
LABEL_141:
  v118 = v161;
  v117 = v162;
  if ((unint64_t)((char *)v162 - (char *)v161) < 0x80
    || a4 > 0x63
    || (unint64_t)((_BYTE *)v153 - (_BYTE *)v152) < 0x79)
  {
    if (v161 != v162)
    {
      v125 = v153;
      if (v152 != v153)
      {
        do
        {
          v128 = (uint64_t *)v152;
          if (v152 != v125)
          {
            do
            {
              v129 = *v118;
              v130 = *v128;
              if (*(_QWORD *)(*v118 + 48) >= *(_QWORD *)(*v128 + 32)
                && *(_QWORD *)(v129 + 32) <= *(_QWORD *)(v130 + 48))
              {
                v131 = *(_QWORD *)(v129 + 56) >= *(_QWORD *)(v130 + 40)
                    && *(_QWORD *)(v129 + 40) <= *(_QWORD *)(v130 + 56);
                v132 = v131 && *(_BYTE *)(v129 + 96) == 0;
                if (v132 && *(_BYTE *)(v130 + 96) == 0)
                {
                  if (!sub_2233DF89C(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v129, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v130, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_217;
                  v125 = v153;
                }
              }
              ++v128;
            }
            while (v128 != v125);
            v117 = v162;
          }
          ++v118;
        }
        while (v118 != v117);
      }
    }
  }
  else if ((sub_2233DE208((uint64_t *)&v166, &v161, &v152, a4 + 1, a5, a6, a7) & 1) == 0)
  {
    goto LABEL_217;
  }
  v127 = (uint64_t *)v158;
  v126 = v159;
  if ((unint64_t)((char *)v159 - (_BYTE *)v158) < 0x80
    || a4 > 0x63
    || (unint64_t)(v150 - (_BYTE *)v149) < 0x79)
  {
    if (v158 != v159)
    {
      v134 = v150;
      if (v149 != v150)
      {
        do
        {
          v137 = (uint64_t *)v149;
          if (v149 != v134)
          {
            do
            {
              v138 = *v127;
              v139 = *v137;
              if (*(_QWORD *)(*v127 + 48) >= *(_QWORD *)(*v137 + 32)
                && *(_QWORD *)(v138 + 32) <= *(_QWORD *)(v139 + 48))
              {
                v140 = *(_QWORD *)(v138 + 56) >= *(_QWORD *)(v139 + 40)
                    && *(_QWORD *)(v138 + 40) <= *(_QWORD *)(v139 + 56);
                v141 = v140 && *(_BYTE *)(v138 + 96) == 0;
                if (v141 && *(_BYTE *)(v139 + 96) == 0)
                {
                  if (!sub_2233DF89C(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v138, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v139, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_217;
                  v134 = v150;
                }
              }
              ++v137;
            }
            while (v137 != v134);
            v126 = v159;
          }
          ++v127;
        }
        while (v127 != v126);
      }
    }
  }
  else if ((sub_2233DE208(v164, &v158, &v149, a4 + 1, a5, a6, a7) & 1) == 0)
  {
    goto LABEL_217;
  }
  v135 = 1;
  v136 = __p;
  if (__p)
  {
LABEL_218:
    v147 = v136;
    operator delete(v136);
  }
LABEL_219:
  if (v149)
  {
    v150 = v149;
    operator delete(v149);
  }
  if (v152)
  {
    v153 = v152;
    operator delete(v152);
  }
  if (v155)
  {
    v156 = (uint64_t *)v155;
    operator delete(v155);
  }
  if (v158)
  {
    v159 = (uint64_t *)v158;
    operator delete(v158);
  }
  if (v161)
  {
    v162 = v161;
    operator delete(v161);
  }
  return v135;
}

void sub_2233DF7D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  if (__p)
  {
    operator delete(__p);
    v32 = a20;
    if (!a20)
    {
LABEL_3:
      v33 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v32 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v32);
  v33 = a23;
  if (!a23)
  {
LABEL_4:
    v34 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v33);
  v34 = a26;
  if (!a26)
  {
LABEL_5:
    v35 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v34);
  v35 = a29;
  if (!a29)
  {
LABEL_6:
    v36 = *(void **)(v30 - 152);
    if (!v36)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v35);
  v36 = *(void **)(v30 - 152);
  if (!v36)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  *(_QWORD *)(v30 - 144) = v36;
  operator delete(v36);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233DF89C(int a1, uint64_t *a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, _QWORD *a10, _BYTE *a11)
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float *v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  BOOL v86;
  BOOL v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v120;
  __int128 v121;
  int v122;
  int v123;
  __int128 *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v142;
  int v143;
  char v144;
  uint64_t v145;
  __int16 v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  unsigned __int128 v178;
  uint64_t v179;
  char v180;
  char v181;
  uint64_t v182;
  __int128 v183;
  int v184;
  _OWORD v185[2];
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  char v210;
  char v211;
  uint64_t v212;
  __int128 v213;
  int v214;
  _OWORD v215[2];
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  unsigned __int128 v226;
  __int128 v227;
  __int128 v228;
  _QWORD v229[3];
  uint64_t v230;
  uint64_t v231;
  __int128 v232;
  unsigned __int128 v233;
  uint64_t v234;
  _QWORD v235[5];
  __int128 v236;
  __int128 v237;
  uint64_t v238;

  if (*(_BYTE *)(a3 + 96) && (unint64_t)(*(_QWORD *)(a3 + 80) + 1) < *(_QWORD *)(a3 + 88)
    || *(_BYTE *)(a6 + 96) && (unint64_t)(*(_QWORD *)(a6 + 80) + 1) < *(_QWORD *)(a6 + 88))
  {
    return 1;
  }
  v14 = a9;
  v15 = *(_QWORD *)(a3 + 24);
  if (v15 >= 0)
    v16 = (uint64_t *)(a2[3] + 24 * v15);
  else
    v16 = a2;
  v17 = *v16;
  v18 = v16[1];
  v19 = v18 - *v16;
  v20 = v19 >> 3;
  if (v18 == *v16)
    v21 = 0;
  else
    v21 = v20 + 1;
  v235[0] = v17;
  v235[1] = v17;
  v235[2] = v18;
  v235[3] = v19 >> 3;
  v235[4] = 0;
  *(_QWORD *)&v236 = v18;
  *((_QWORD *)&v236 + 1) = v17;
  *(_QWORD *)&v237 = v18;
  *((_QWORD *)&v237 + 1) = v19 >> 3;
  v238 = v21;
  v139 = v21;
  v22 = *(_QWORD *)(a6 + 24);
  if (v22 >= 0)
    v23 = (uint64_t *)(a5[3] + 24 * v22);
  else
    v23 = a5;
  v25 = *v23;
  v24 = v23[1];
  v26 = v24 - v25;
  if (v24 == v25)
    v27 = 0;
  else
    v27 = ((uint64_t)(v24 - v25) >> 3) + 1;
  v229[0] = v25;
  v229[1] = v25;
  v229[2] = v24;
  v230 = (uint64_t)(v24 - v25) >> 3;
  v231 = 0;
  *(_QWORD *)&v232 = v24;
  v137 = v24;
  v138 = v25;
  *((_QWORD *)&v232 + 1) = v25;
  v233 = __PAIR128__(v230, v24);
  v136 = v230;
  v140 = v27;
  v234 = v27;
  v228 = v237;
  v227 = v236;
  v225 = v232;
  v226 = __PAIR128__(v230, v24);
  v28 = *(_DWORD *)a3;
  v122 = *(_DWORD *)a6;
  v224 = *(_QWORD *)(a3 + 64);
  v223 = *(_QWORD *)(a3 + 104);
  v222 = 0;
  v221 = 0u;
  v220 = 0u;
  v219 = 0;
  v218 = 0u;
  v217 = 0u;
  v216 = 0;
  memset(v215, 0, sizeof(v215));
  v108 = (uint64_t *)(a6 + 32);
  sub_2233E07A8(a3, v235, (uint64_t *)&v220, (uint64_t)&v217, (uint64_t *)v215, &v224, &v223, v28, (uint64_t *)(a6 + 32), a9);
  v29 = v218;
  v30 = v219;
  v31 = v219 + 1;
  if (v219 + 1 >= *((uint64_t *)&v218 + 1))
  {
    v32 = v218;
    if (v219 < *((uint64_t *)&v218 + 1))
      v32 = *((_QWORD *)&v217 + 1) + 8 * (v31 % *((_QWORD *)&v218 + 1));
  }
  else
  {
    v32 = v217 + 8;
  }
  if (v31 == v139)
  {
    if (v19 < 9)
    {
      v32 = v18;
      if (v19 >= 1)
        v32 = v17 + 8 * (1 - v20);
    }
    else
    {
      v32 = v17 + 8;
    }
    v33 = v219 != 0;
    if (!v219)
      v32 = v17;
    v34 = v19 >> 3;
    v133 = v18;
    v128 = v17;
  }
  else
  {
    v33 = v219 + 1;
    v34 = *((_QWORD *)&v218 + 1);
    v133 = v218;
    v128 = *((_QWORD *)&v217 + 1);
  }
  v195 = v217;
  v196 = v218;
  v197 = v219++;
  if (v31 >= *((uint64_t *)&v218 + 1))
  {
    if (v30 < *((uint64_t *)&v218 + 1))
      v29 = *((_QWORD *)&v217 + 1) + 8 * (v31 % *((_QWORD *)&v218 + 1));
  }
  else
  {
    v29 = v217 + 8;
  }
  *(_QWORD *)&v217 = v29;
  v220 = v195;
  v221 = v196;
  v222 = v197;
  v35 = v33 + 1;
  if (v33 + 1 >= v34)
  {
    v36 = v133;
    if (v33 >= v34)
    {
      if (v35 == v139)
        goto LABEL_43;
    }
    else
    {
      v36 = v128 + 8 * (v35 % v34);
      if (v35 == v139)
        goto LABEL_43;
    }
LABEL_37:
    result = 1;
    if (v31 == v216)
      return result;
    goto LABEL_51;
  }
  v36 = v32 + 8;
  if (v35 != v139)
    goto LABEL_37;
LABEL_43:
  if (v19 < 9)
  {
    v37 = v18;
    if (v19 >= 1)
      v37 = v17 + 8 * (1 - v20);
  }
  else
  {
    v37 = v17 + 8;
  }
  v35 = v33 != 0;
  if (v33)
    v36 = v37;
  else
    v36 = v17;
  v34 = v19 >> 3;
  v133 = v18;
  v128 = v17;
  result = 1;
  if (v31 != v216)
  {
LABEL_51:
    v125 = v34;
    v126 = v36;
    v117 = (uint64_t *)(a3 + 32);
    v38 = -v28;
    v124 = (__int128 *)(a9 + 8);
    v39 = v138 + 8 * (1 - v136);
    v113 = -v122;
    v123 = a4;
    v109 = a4;
    if (v26 <= 0)
      v39 = v137;
    if (v26 > 8)
      v39 = v138 + 8;
    v116 = v39;
    v40 = v17 + 8 * (1 - v20);
    if (v19 <= 0)
      v40 = v18;
    if (v19 > 8)
      v40 = v17 + 8;
    v98 = v40;
    v135 = v224;
    v120 = v223;
    v41 = (float *)v220;
    *((_QWORD *)&v121 + 1) = v217;
    v111 = v219;
    v112 = v222;
    v101 = v18;
    v102 = v17;
    v100 = v19 >> 3;
    v42 = v35;
    v103 = v38;
    while (1)
    {
      v43 = (float)((float)(v41[1] - *(float *)(v14 + 4)) * *(float *)(v14 + 24)) + (float)*(uint64_t *)(v14 + 16);
      if (v43 >= 0.0)
        v44 = 0.5;
      else
        v44 = -0.5;
      sub_2233DC31C(v43 + v44);
      *(_QWORD *)&v121 = v41;
      v45 = (float)((float)(*v41 - *(float *)v14) * *(float *)(v14 + 24)) + (float)*(uint64_t *)(v14 + 8);
      if (v45 >= 0.0)
        v46 = 0.5;
      else
        v46 = -0.5;
      v47 = v45 + v46;
      sub_2233DC31C(v45 + v46);
      v48 = ceilf(v47);
      v49 = floorf(v47);
      if (v47 >= 0.0)
        v48 = v49;
      v50 = (uint64_t)v48;
      if (v38 == 1)
      {
        if (*v108 > v50)
          return 1;
      }
      else if (v38 == -1 && *(_QWORD *)(a6 + 48) < v50)
      {
        return 1;
      }
      v207 = v227;
      v208 = v228;
      *(_QWORD *)&v195 = a3;
      *((_QWORD *)&v195 + 1) = v135;
      v196 = v121;
      v197 = v126;
      v198 = v128;
      v199 = v133;
      v200 = v125;
      v201 = v42;
      v202 = v17;
      v203 = v17;
      v204 = v18;
      v205 = v20;
      v206 = 0;
      v209 = v139;
      v210 = 1;
      v211 = 0;
      v212 = *(_QWORD *)v14;
      v213 = *v124;
      v214 = *(_DWORD *)(a9 + 24);
      v194 = *(_QWORD *)(a6 + 64);
      v193 = *(_QWORD *)(a6 + 104);
      v192 = 0;
      v190 = 0u;
      v191 = 0u;
      v189 = 0;
      v187 = 0u;
      v188 = 0u;
      v186 = 0;
      memset(v185, 0, sizeof(v185));
      sub_2233E07A8(a6, v229, (uint64_t *)&v190, (uint64_t)&v187, (uint64_t *)v185, &v194, &v193, v122, v117, v14);
      v51 = *((_QWORD *)&v188 + 1);
      v52 = v189;
      v53 = v189 + 1;
      if (v189 + 1 >= *((uint64_t *)&v188 + 1))
      {
        v54 = v188;
        v55 = v123;
        v56 = a1;
        if (v189 < *((uint64_t *)&v188 + 1))
          v54 = *((_QWORD *)&v187 + 1) + 8 * (v53 % *((_QWORD *)&v188 + 1));
      }
      else
      {
        v54 = v187 + 8;
        v55 = v123;
        v56 = a1;
      }
      if (v53 == v140)
      {
        v57 = v189 != 0;
        v54 = v116;
        if (!v189)
          v54 = v138;
        v58 = v136;
        v134 = v137;
        v129 = v138;
      }
      else
      {
        v57 = v189 + 1;
        v58 = *((_QWORD *)&v188 + 1);
        v134 = v188;
        v129 = *((_QWORD *)&v187 + 1);
      }
      v165 = v187;
      v166 = v188;
      v167 = v189++;
      v107 = v188;
      if (v53 >= *((uint64_t *)&v188 + 1))
      {
        v59 = v188;
        if (v52 < *((uint64_t *)&v188 + 1))
          v59 = *((_QWORD *)&v187 + 1) + 8 * (v53 % *((_QWORD *)&v188 + 1));
      }
      else
      {
        v59 = v187 + 8;
      }
      v105 = *((_QWORD *)&v187 + 1);
      *(_QWORD *)&v187 = v59;
      v190 = v165;
      v191 = v166;
      v192 = v167;
      v60 = v57 + 1;
      v110 = v42;
      if (v57 + 1 >= v58)
      {
        v61 = v134;
        if (v57 >= v58)
        {
          if (v60 == v140)
          {
LABEL_95:
            v60 = v57 != 0;
            if (v57)
              v61 = v116;
            else
              v61 = v138;
            v58 = v136;
            v134 = v137;
            v129 = v138;
            v114 = v186;
            if (v53 == v186)
              goto LABEL_99;
LABEL_101:
            v118 = v193;
            v127 = v194;
            v115 = v192;
            v104 = *((_QWORD *)&v191 + 1);
            v99 = (float *)v191;
            v97 = *((_QWORD *)&v190 + 1);
            v62 = (float *)v190;
            while (2)
            {
              v130 = v58;
              v131 = v59;
              v63 = (float)((float)(v62[1] - *(float *)(a9 + 4)) * *(float *)(a9 + 24)) + (float)*(uint64_t *)(a9 + 16);
              if (v63 >= 0.0)
                v64 = 0.5;
              else
                v64 = -0.5;
              sub_2233DC31C(v63 + v64);
              v65 = (float)((float)(*v62 - *(float *)a9) * *(float *)(a9 + 24)) + (float)*(uint64_t *)(a9 + 8);
              if (v65 >= 0.0)
                v66 = 0.5;
              else
                v66 = -0.5;
              v67 = v65 + v66;
              sub_2233DC31C(v65 + v66);
              v68 = ceilf(v67);
              v69 = floorf(v67);
              if (v67 >= 0.0)
                v68 = v69;
              v70 = (uint64_t)v68;
              if (v113 == 1)
              {
                v58 = v130;
                v71 = v131;
                if (*v117 > v70)
                  goto LABEL_99;
              }
              else
              {
                v58 = v130;
                v71 = v131;
                if (v113 == -1 && *(_QWORD *)(a3 + 48) < v70)
                  goto LABEL_99;
              }
              v72 = *(_QWORD *)(a3 + 16);
              if (v56 != v55)
              {
                v73 = *(_QWORD *)(a3 + 24);
                v75 = *(_QWORD *)(a6 + 16);
                v74 = *(_QWORD *)(a6 + 24);
                goto LABEL_126;
              }
              v73 = *(_QWORD *)(a3 + 24);
              v75 = *(_QWORD *)(a6 + 16);
              v74 = *(_QWORD *)(a6 + 24);
              if (v72 != v75)
                goto LABEL_126;
              if (v73 != v74 || !a7)
              {
                v75 = *(_QWORD *)(a3 + 16);
                goto LABEL_126;
              }
              if (v118 != v120 + 1)
              {
                if (v135)
                {
                  v74 = *(_QWORD *)(a3 + 24);
                  v75 = *(_QWORD *)(a3 + 16);
                  goto LABEL_126;
                }
                v74 = *(_QWORD *)(a3 + 24);
                v75 = *(_QWORD *)(a3 + 16);
                if (*(_QWORD *)(a3 + 88) - 2 > v127)
                {
LABEL_126:
                  v177 = v225;
                  v178 = v226;
                  *(_QWORD *)&v165 = a6;
                  *((_QWORD *)&v165 + 1) = v127;
                  *(_QWORD *)&v166 = v62;
                  *((_QWORD *)&v166 + 1) = v71;
                  v167 = v61;
                  v168 = v129;
                  v169 = v134;
                  v170 = v58;
                  v171 = v60;
                  v172 = v138;
                  v173 = v138;
                  v174 = v137;
                  v175 = v136;
                  v176 = 0;
                  v179 = v140;
                  v180 = 0;
                  v181 = 0;
                  v182 = *(_QWORD *)a9;
                  v183 = *v124;
                  v184 = *(_DWORD *)(a9 + 24);
                  v143 = 0;
                  v144 = 0;
                  v145 = -1;
                  v146 = 0;
                  v147 = 0;
                  v153 = 1;
                  v154 = 0;
                  v155 = 0;
                  v156 = 0;
                  v162 = 1;
                  v163 = 0;
                  v164 = 0;
                  v148 = a1;
                  v149 = v72;
                  v150 = v73;
                  v151 = v135;
                  v152 = xmmword_2245F5400;
                  v157 = v109;
                  v158 = v75;
                  v159 = v74;
                  v160 = v127;
                  v161 = xmmword_2245F5400;
                  v76 = a10[5];
                  sub_2233E0AA0((uint64_t)&v195, (uint64_t)&v165, &v142, a8, a9, a10);
                  v77 = a10[4];
                  v78 = a10[1];
                  v79 = a10[2];
                  v80 = (_QWORD *)(v78 + 8 * (v77 / 0x15));
                  if (v79 == v78)
                  {
                    v81 = 0;
                    v58 = v130;
                    v71 = v131;
                    if (!v76)
                      goto LABEL_128;
                  }
                  else
                  {
                    v81 = *v80 + 192 * (v77 % 0x15);
                    v58 = v130;
                    v71 = v131;
                    if (!v76)
                    {
LABEL_128:
                      v55 = v123;
                      v56 = a1;
                      if (v79 != v78)
                        goto LABEL_129;
                      goto LABEL_133;
                    }
                  }
                  v83 = v76 - 0x5555555555555555 * ((uint64_t)(v81 - *v80) >> 6);
                  if (v83 < 1)
                  {
                    v91 = 20 - v83;
                    v80 -= v91 / 0x15;
                    v81 = *v80 + 192 * (21 * (v91 / 0x15) - v91) + 3840;
                    v55 = v123;
                    v56 = a1;
                    if (v79 != v78)
                    {
LABEL_129:
                      v82 = *(_QWORD *)(v78 + 8 * ((a10[5] + v77) / 0x15)) + 192 * ((a10[5] + v77) % 0x15);
                      goto LABEL_134;
                    }
                  }
                  else
                  {
                    v80 += v83 / 0x15uLL;
                    v81 = *v80 + 192 * (v83 % 0x15uLL);
                    v55 = v123;
                    v56 = a1;
                    if (v79 != v78)
                      goto LABEL_129;
                  }
LABEL_133:
                  v82 = 0;
LABEL_134:
                  while (v81 != v82)
                  {
                    if (*(_QWORD *)(v81 + 56) == *(_QWORD *)(v81 + 136)
                      || ((v84 = *(_DWORD *)(v81 + 8), v85 = *(_DWORD *)(v81 + 32), v84 == 4)
                        ? (v86 = v85 == 1)
                        : (v86 = 0),
                          !v86 && (v84 == 3 ? (v87 = v85 == 1) : (v87 = 0), !v87))
                      || *(_DWORD *)(v81 + 112) != 1)
                    {
                      result = 0;
                      *a11 = 1;
                      return result;
                    }
                    v81 += 192;
                    if (v81 - *v80 == 4032)
                    {
                      v88 = v80[1];
                      ++v80;
                      v81 = v88;
                    }
                  }
                  *a11 = 0;
                }
              }
              v192 = v115 + 1;
              if (v115 + 1 >= v104)
              {
                v62 = v99;
                if (v115 < v104)
                  v62 = (float *)(v97 + 8 * ((v115 + 1) % v104));
              }
              else
              {
                v62 += 2;
              }
              *(_QWORD *)&v190 = v62;
              v89 = v53 + 1;
              v189 = v53 + 1;
              if (v53 + 1 >= v51)
              {
                v59 = v107;
                if (v53 < v51)
                  v59 = v105 + 8 * (v89 % v51);
              }
              else
              {
                v59 = v71 + 8;
              }
              *(_QWORD *)&v187 = v59;
              v90 = v60 + 1;
              if (v60 + 1 >= v58)
              {
                v61 = v134;
                if (v60 < v58)
                  v61 = v129 + 8 * (v90 % v58);
              }
              else
              {
                v61 += 8;
              }
              if (v90 == v140)
              {
                v90 = v60 != 0;
                if (v60)
                  v61 = v116;
                else
                  v61 = v138;
                v58 = v136;
                v134 = v137;
                v129 = v138;
              }
              ++v127;
              ++v118;
              ++v53;
              ++v115;
              v60 = v90;
              if (v89 == v114)
                goto LABEL_99;
              continue;
            }
          }
        }
        else
        {
          v61 = v129 + 8 * (v60 % v58);
          if (v60 == v140)
            goto LABEL_95;
        }
      }
      else
      {
        v61 = v54 + 8;
        if (v60 == v140)
          goto LABEL_95;
      }
      v114 = v186;
      if (v53 != v186)
        goto LABEL_101;
LABEL_99:
      v222 = v112 + 1;
      if (v112 + 1 >= *((uint64_t *)&v221 + 1))
      {
        if (v112 >= *((uint64_t *)&v221 + 1))
          v41 = (float *)v221;
        else
          v41 = (float *)(*((_QWORD *)&v220 + 1) + 8 * ((v112 + 1) % *((_QWORD *)&v221 + 1)));
      }
      else
      {
        v41 = (float *)(v121 + 8);
      }
      v18 = v101;
      v17 = v102;
      v20 = v100;
      v92 = v125;
      v14 = a9;
      *(_QWORD *)&v220 = v41;
      v93 = v111 + 1;
      v219 = v111 + 1;
      if (v111 + 1 >= *((uint64_t *)&v218 + 1))
      {
        if (v111 >= *((uint64_t *)&v218 + 1))
        {
          *((_QWORD *)&v121 + 1) = v218;
          *(_QWORD *)&v217 = v218;
          v94 = v110 + 1;
          if (v110 + 1 < v125)
          {
LABEL_174:
            v95 = v126 + 8;
LABEL_181:
            v126 = v95;
            goto LABEL_182;
          }
        }
        else
        {
          v92 = v125;
          *((_QWORD *)&v121 + 1) = *((_QWORD *)&v217 + 1) + 8 * (v93 % *((_QWORD *)&v218 + 1));
          *(_QWORD *)&v217 = *((_QWORD *)&v121 + 1);
          v94 = v110 + 1;
          if (v110 + 1 < v125)
            goto LABEL_174;
        }
      }
      else
      {
        *((_QWORD *)&v121 + 1) += 8;
        *(_QWORD *)&v217 = *((_QWORD *)&v121 + 1);
        v94 = v110 + 1;
        if (v110 + 1 < v125)
          goto LABEL_174;
      }
      v126 = v133;
      if (v110 < v92)
      {
        v95 = v128 + 8 * (v94 % v125);
        goto LABEL_181;
      }
LABEL_182:
      if (v94 == v139)
      {
        v94 = v110 != 0;
        v96 = v98;
        if (!v110)
          v96 = v102;
        v125 = v100;
        v126 = v96;
        v133 = v101;
        v128 = v102;
      }
      ++v135;
      ++v120;
      ++v111;
      ++v112;
      v42 = v94;
      v38 = v103;
      if (v93 == v216)
        return 1;
    }
  }
  return result;
}

__n128 sub_2233E07A8(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, _QWORD *a6, _QWORD *a7, int a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 result;
  __int128 v37;
  uint64_t v38;
  float *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v16 = a2[1];
  v17 = a2[2];
  v18 = a2[3];
  v19 = a2[4];
  v20 = *(_QWORD *)(a1 + 64);
  v21 = v20 + v19;
  if (v19 < v18 && v21 < v18)
  {
    v23 = *a2 + 8 * v20;
  }
  else
  {
    v23 = a2[2];
    if (v21 <= v18)
      v23 = v16 + 8 * (v21 % v18);
  }
  *a3 = v23;
  a3[1] = v16;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v21;
  v24 = a2[1];
  v25 = a2[2];
  v26 = a2[3];
  v27 = a2[4];
  v28 = *(_QWORD *)(a1 + 72);
  v29 = v28 + v27;
  if (v27 >= v26 || v29 >= v26)
  {
    v30 = a2[2];
    if (v29 <= v26)
      v30 = v24 + 8 * (v29 % v26);
  }
  else
  {
    v30 = *a2 + 8 * v28;
  }
  v31 = v29 + 1;
  if (v29 >= v26 || v31 >= v26)
  {
    v32 = a2[2];
    if (v29 < v26)
      v32 = v24 + 8 * (v31 % v26);
  }
  else
  {
    v32 = v30 + 8;
  }
  *a5 = v32;
  a5[1] = v24;
  a5[2] = v25;
  a5[3] = v26;
  a5[4] = v31;
  v50 = *(_OWORD *)a3;
  v52 = *((_OWORD *)a3 + 1);
  v33 = a3[3];
  v34 = a3[4];
  a3[4] = v34 + 1;
  if (v34 + 1 >= v33)
  {
    if (v34 >= v33)
      v35 = a3[2];
    else
      v35 = a3[1] + 8 * ((v34 + 1) % v33);
  }
  else
  {
    v35 = *a3 + 8;
  }
  *a3 = v35;
  *(_OWORD *)a4 = v50;
  *(_OWORD *)(a4 + 16) = v52;
  for (*(_QWORD *)(a4 + 32) = v34; a3[4] != a5[4]; ++*a7)
  {
    v39 = (float *)*a3;
    v40 = (float)((float)(*(float *)(*a3 + 4) - *(float *)(a10 + 4)) * *(float *)(a10 + 24))
        + (float)*(uint64_t *)(a10 + 16);
    if (v40 >= 0.0)
      v41 = 0.5;
    else
      v41 = -0.5;
    sub_2233DC31C(v40 + v41);
    v42 = (float)((float)(*v39 - *(float *)a10) * *(float *)(a10 + 24)) + (float)*(uint64_t *)(a10 + 8);
    if (v42 >= 0.0)
      v43 = 0.5;
    else
      v43 = -0.5;
    v44 = v42 + v43;
    sub_2233DC31C(v42 + v43);
    v45 = ceilf(v44);
    v46 = floorf(v44);
    if (v44 >= 0.0)
      v45 = v46;
    v47 = (uint64_t)v45;
    if (a8 == 1)
    {
      if (*a9 <= v47)
        break;
    }
    else if (a8 != -1 || a9[2] >= v47)
    {
      break;
    }
    v51 = *(_OWORD *)a3;
    v53 = *((_OWORD *)a3 + 1);
    v48 = a3[3];
    v49 = a3[4];
    a3[4] = v49 + 1;
    if (v49 + 1 < v48)
    {
      v38 = *a3 + 8;
    }
    else if (v49 >= v48)
    {
      v38 = a3[2];
    }
    else
    {
      v38 = a3[1] + 8 * ((v49 + 1) % v48);
    }
    *a3 = v38;
    *(_OWORD *)a4 = v51;
    *(_OWORD *)(a4 + 16) = v53;
    *(_QWORD *)(a4 + 32) = v49;
    ++*a6;
  }
  result = *(__n128 *)a4;
  v37 = *(_OWORD *)(a4 + 16);
  a3[4] = *(_QWORD *)(a4 + 32);
  *(__n128 *)a3 = result;
  *((_OWORD *)a3 + 1) = v37;
  return result;
}

_QWORD *sub_2233E0AA0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v51;
  _BYTE v52[32];
  __int128 v53;
  __int128 v54;
  _BYTE v55[32];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[32];
  uint64_t v60;
  _QWORD v61[2];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[6];
  char v67;
  _QWORD v68[6];
  char v69;
  _QWORD v70[3];
  _QWORD v71[3];
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  _DWORD v78[7];
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  float *v85[2];
  float *v86[2];

  v84 = a6;
  v61[0] = a1;
  v61[1] = a2;
  v11 = sub_2233E29A4((uint64_t)&v62, a1, a2, a5);
  v66[0] = a1;
  v66[1] = a5;
  v66[2] = v11;
  v66[3] = &v63;
  v67 = 0;
  v68[0] = a2;
  v68[1] = a5;
  v68[2] = &v64;
  v68[3] = &v65;
  v69 = 0;
  v70[1] = v66;
  v70[2] = v68;
  v71[1] = v68;
  v71[2] = v66;
  v12 = *(float **)(a1 + 24);
  v13 = *(float **)(a2 + 16);
  v14 = *(float **)(a2 + 24);
  v86[0] = *(float **)(a1 + 16);
  v86[1] = v12;
  v85[0] = v13;
  v85[1] = v14;
  *(_OWORD *)&v52[8] = xmmword_2245F5410;
  *(_QWORD *)&v52[24] = 0;
  *(_QWORD *)&v53 = 0;
  *((_QWORD *)&v53 + 1) = 1;
  *(_QWORD *)&v54 = 0;
  *(float *)&v51 = *v12 - *v86[0];
  *(float *)v52 = *v14 - *v13;
  *((float *)&v51 + 1) = v12[1] - v86[0][1];
  *(float *)&v52[4] = v14[1] - v13[1];
  sub_2233E2FB8((uint64_t)&v51, v86, v85, (uint64_t)v66, (uint64_t)v68, (uint64_t)&v72);
  v82 = a4;
  v83 = a5;
  if (LOBYTE(v78[0]) != 100)
  {
    v51 = *a3;
    v58 = *(_OWORD *)(a3 + 17);
    *(_OWORD *)v59 = *(_OWORD *)(a3 + 19);
    *(_OWORD *)&v59[16] = *(_OWORD *)(a3 + 21);
    v60 = a3[23];
    v15 = *(_OWORD *)(a3 + 11);
    *(_OWORD *)v55 = *(_OWORD *)(a3 + 9);
    *(_OWORD *)&v55[16] = v15;
    v16 = *(_OWORD *)(a3 + 15);
    v56 = *(_OWORD *)(a3 + 13);
    v57 = v16;
    v17 = *(_OWORD *)(a3 + 3);
    *(_OWORD *)v52 = *(_OWORD *)(a3 + 1);
    *(_OWORD *)&v52[16] = v17;
    v18 = *(_OWORD *)(a3 + 7);
    v53 = *(_OWORD *)(a3 + 5);
    v54 = v18;
    switch(LOBYTE(v78[0]))
    {
      case 'c':
        if (!BYTE1(v78[0]))
        {
          if (v80)
          {
            sub_2233E2060(a1, a2, (uint64_t)&v51, (uint64_t)&v72, (uint64_t)v78, (uint64_t)v70);
          }
          else
          {
            sub_2233E2744(a1, a2, (uint64_t)&v51, (uint64_t)&v72, (uint64_t)v78, (uint64_t)v70);
            *(_DWORD *)v52 = 5;
          }
          goto LABEL_20;
        }
        sub_2233E2328(a1, a2, (uint64_t)&v51, (uint64_t)&v84, (uint64_t)v61, (uint64_t)v70);
        return v84;
      case 'i':
        v19 = v73;
        *(_QWORD *)&v55[24] = v75;
        *(_OWORD *)&v55[8] = v74;
        *(_QWORD *)&v59[24] = v77;
        *(_OWORD *)&v59[8] = v76;
        v20 = v84;
        v21 = v84[2];
        v22 = v84[1];
        v23 = 21 * ((v21 - v22) >> 3) - 1;
        *(_DWORD *)v52 = 2;
        v51 = v73;
        if (v21 == v22)
          v23 = 0;
        v24 = v79 == 1;
        *(_DWORD *)&v52[80 * (v79 != 1) + 24] = 1;
        *(_DWORD *)&v52[80 * v24 + 24] = 2;
        v25 = v20[5] + v20[4];
        if (v23 == v25)
        {
          sub_2233E5D44((uint64_t)v20);
          v22 = v20[1];
          v25 = v20[5] + v20[4];
          v19 = v51;
        }
        v26 = *(_QWORD *)(v22 + 8 * (v25 / 0x15)) + 192 * (v25 % 0x15);
        *(_QWORD *)v26 = v19;
        v27 = *(_OWORD *)v52;
        v28 = *(_OWORD *)&v52[16];
        v29 = v53;
        *(_OWORD *)(v26 + 56) = v54;
        *(_OWORD *)(v26 + 40) = v29;
        *(_OWORD *)(v26 + 24) = v28;
        *(_OWORD *)(v26 + 8) = v27;
        v30 = *(_OWORD *)v55;
        v31 = *(_OWORD *)&v55[16];
        v32 = v56;
        *(_OWORD *)(v26 + 120) = v57;
        *(_OWORD *)(v26 + 104) = v32;
        *(_OWORD *)(v26 + 88) = v31;
        *(_OWORD *)(v26 + 72) = v30;
        v33 = v58;
        v34 = *(_OWORD *)v59;
        v35 = *(_OWORD *)&v59[16];
        *(_QWORD *)(v26 + 184) = v60;
        *(_OWORD *)(v26 + 168) = v35;
        *(_OWORD *)(v26 + 152) = v34;
        *(_OWORD *)(v26 + 136) = v33;
        goto LABEL_25;
      case 'm':
        if (v81 == 1)
          sub_2233E0FAC(a1, a2, (uint64_t)&v51, (uint64_t)&v72, v78, (uint64_t)v70);
        else
          sub_2233E14B8(a2, a1, (uint64_t)&v51, (uint64_t)&v72, v78, (uint64_t)v71);
        goto LABEL_20;
      case 't':
        sub_2233E19C4(a1, a2, (uint64_t)&v51, (uint64_t)&v72, v78, (uint64_t)v70);
        goto LABEL_20;
      default:
        if (LOBYTE(v78[0]) != 101 || BYTE1(v78[0]))
          return v84;
        sub_2233E2744(a1, a2, (uint64_t)&v51, (uint64_t)&v72, (uint64_t)v78, (uint64_t)v70);
LABEL_20:
        v20 = v84;
        v36 = v84[2];
        v37 = v84[1];
        v38 = 21 * ((v36 - v37) >> 3) - 1;
        if (v36 == v37)
          v38 = 0;
        v39 = v84[5] + v84[4];
        if (v38 == v39)
        {
          sub_2233E5D44((uint64_t)v84);
          v37 = v20[1];
          v39 = v20[5] + v20[4];
        }
        v40 = *(_QWORD *)(v37 + 8 * (v39 / 0x15)) + 192 * (v39 % 0x15);
        *(_QWORD *)v40 = v51;
        v41 = *(_OWORD *)v52;
        v42 = *(_OWORD *)&v52[16];
        v43 = v53;
        *(_OWORD *)(v40 + 56) = v54;
        *(_OWORD *)(v40 + 40) = v43;
        *(_OWORD *)(v40 + 24) = v42;
        *(_OWORD *)(v40 + 8) = v41;
        v44 = *(_OWORD *)v55;
        v45 = *(_OWORD *)&v55[16];
        v46 = v56;
        *(_OWORD *)(v40 + 120) = v57;
        *(_OWORD *)(v40 + 104) = v46;
        *(_OWORD *)(v40 + 88) = v45;
        *(_OWORD *)(v40 + 72) = v44;
        v47 = v58;
        v48 = *(_OWORD *)v59;
        v49 = *(_OWORD *)&v59[16];
        *(_QWORD *)(v40 + 184) = v60;
        *(_OWORD *)(v40 + 168) = v49;
        *(_OWORD *)(v40 + 152) = v48;
        *(_OWORD *)(v40 + 136) = v47;
LABEL_25:
        ++v20[5];
        break;
    }
  }
  return v84;
}

void sub_2233E0FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  double v25;
  int v26;
  double v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  double v32;
  int v33;
  double v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  double v41;
  int v42;
  int v43;
  double v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  double v49;
  int v50;
  double v51;
  uint64_t v52;
  double v53;

  *(_DWORD *)(a3 + 8) = 4;
  *(_QWORD *)a3 = *(_QWORD *)(a4 + 8);
  v8 = a5[9];
  if (v8 == -1)
  {
    *(_OWORD *)(a3 + 80) = xmmword_2245F5410;
    *(_QWORD *)(a3 + 96) = 0;
    v9 = a5[10];
    if (v9 != 1)
      goto LABEL_6;
    goto LABEL_9;
  }
  if (v8 != 1)
  {
    v10 = *(_OWORD *)(a4 + 24);
    *(_QWORD *)(a3 + 96) = *(_QWORD *)(a4 + 40);
    *(_OWORD *)(a3 + 80) = v10;
    v9 = a5[10];
    if (v9 != 1)
      goto LABEL_6;
LABEL_9:
    *(int64x2_t *)(a3 + 160) = vdupq_n_s64(1uLL);
    *(_QWORD *)(a3 + 176) = 0x412E848000000000;
    goto LABEL_11;
  }
  *(int64x2_t *)(a3 + 80) = vdupq_n_s64(1uLL);
  *(_QWORD *)(a3 + 96) = 0x412E848000000000;
  v9 = a5[10];
  if (v9 == 1)
    goto LABEL_9;
LABEL_6:
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 160) = xmmword_2245F5410;
    *(_QWORD *)(a3 + 176) = 0;
  }
  else
  {
    v11 = *(_OWORD *)(a4 + 48);
    *(_QWORD *)(a3 + 176) = *(_QWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 160) = v11;
  }
LABEL_11:
  v12 = a5[7];
  v13 = *(_QWORD *)(a6 + 8);
  v14 = *(uint64_t **)(v13 + 16);
  v15 = *(uint64_t **)(v13 + 24);
  v16 = (uint64_t *)sub_2233E3E84(*(_QWORD *)(a6 + 16));
  v53 = 1.0;
  v17 = sub_2233E3FAC(v14, v15, v16, &v53);
  if (v17 == 0.0)
    goto LABEL_12;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v19 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v19 > v53 * 2.22044605e-16)
    {
      if (v12 + v18)
        goto LABEL_25;
      goto LABEL_20;
    }
LABEL_12:
    v18 = 0;
    if (v12)
      goto LABEL_25;
LABEL_20:
    v20 = a3 + 32;
    *(_DWORD *)(v20 + 80 * (v18 != -1)) = 1;
    *(_DWORD *)(v20 + 80 * (v18 == -1)) = 2;
    return;
  }
  if (v17 > 0.0)
    v18 = 1;
  else
    v18 = -1;
  if (!(v12 + v18))
    goto LABEL_20;
LABEL_25:
  v21 = *(_QWORD *)(a6 + 16);
  v22 = *(uint64_t **)(v21 + 16);
  v23 = *(uint64_t **)(v21 + 24);
  v24 = (uint64_t *)sub_2233E3E84(v21);
  v53 = 1.0;
  v25 = sub_2233E3FAC(v22, v23, v24, &v53);
  if (v25 == 0.0)
  {
LABEL_26:
    v26 = 0;
    goto LABEL_36;
  }
  if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
  }
  else
  {
    v27 = fabs(v25);
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
    if (v27 <= v53 * 2.22044605e-16)
      goto LABEL_26;
  }
LABEL_36:
  v28 = *(_QWORD *)(a6 + 16);
  v29 = *(uint64_t **)(v28 + 24);
  v30 = (uint64_t *)sub_2233E3E84(v28);
  v31 = *(uint64_t **)(*(_QWORD *)(a6 + 8) + 24);
  v53 = 1.0;
  v32 = sub_2233E3FAC(v29, v30, v31, &v53);
  if (v32 == 0.0)
  {
LABEL_37:
    v33 = 0;
    goto LABEL_47;
  }
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
  }
  else
  {
    v34 = fabs(v32);
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
    if (v34 <= v53 * 2.22044605e-16)
      goto LABEL_37;
  }
LABEL_47:
  if ((v18 & v12) == 0xFFFFFFFF && v26 == 1)
  {
    *(_DWORD *)(a3 + 32) = 2;
    *(_DWORD *)(a3 + 112) = 2;
    *(_BYTE *)(a3 + 12) = 1;
    return;
  }
  if (v12 == 1 && v18 == 1 && v26 == -1)
  {
    *(_DWORD *)(a3 + 32) = 1;
    if (v33 == -1)
      v35 = 1;
    else
      v35 = 3;
    *(_DWORD *)(a3 + 112) = v35;
    *(_BYTE *)(a3 + 12) = 1;
    return;
  }
  if (v12 == v18 && v12 == v26)
  {
    v36 = (v26 == 1) ^ (v33 == 0);
    if (v33 * v12 != -1)
    {
LABEL_93:
      v52 = a3 + 32;
      *(_DWORD *)(v52 + 80 * v36) = 1;
      *(_DWORD *)(v52 + 80 * (v36 ^ 1)) = 2;
      *(_BYTE *)(a3 + 12) = 1;
      return;
    }
    v37 = *(_QWORD *)(a6 + 8);
    v38 = *(uint64_t **)(v37 + 16);
    v39 = *(uint64_t **)(v37 + 24);
    v40 = *(uint64_t **)(*(_QWORD *)(a6 + 16) + 24);
    v53 = 1.0;
    v41 = sub_2233E3FAC(v38, v39, v40, &v53);
    if (v41 == 0.0)
      goto LABEL_61;
    if ((*(_QWORD *)&v41 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v41 > 0.0)
        v42 = 1;
      else
        v42 = -1;
    }
    else
    {
      v44 = fabs(v41);
      if (v41 > 0.0)
        v42 = 1;
      else
        v42 = -1;
      if (v44 <= v53 * 2.22044605e-16)
LABEL_61:
        v42 = 0;
    }
    v45 = *(_QWORD *)(a6 + 8);
    v46 = *(uint64_t **)(v45 + 24);
    v47 = (uint64_t *)sub_2233E3E84(v45);
    v48 = *(uint64_t **)(*(_QWORD *)(a6 + 16) + 24);
    v53 = 1.0;
    v49 = sub_2233E3FAC(v46, v47, v48, &v53);
    if (v49 == 0.0)
    {
LABEL_80:
      v50 = 0;
      goto LABEL_90;
    }
    if ((*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v49 > 0.0)
        v50 = 1;
      else
        v50 = -1;
    }
    else
    {
      v51 = fabs(v49);
      if (v49 > 0.0)
        v50 = 1;
      else
        v50 = -1;
      if (v51 <= v53 * 2.22044605e-16)
        goto LABEL_80;
    }
LABEL_90:
    if (v50 * v42 == 1 && sub_2233E5CAC(a6) * v33 == -1)
      v36 = (v26 == 1) == (v33 == 0);
    goto LABEL_93;
  }
  if (v18)
  {
    *(_DWORD *)(a3 + 8) = 8;
  }
  else if (v12 == v26)
  {
    *(_DWORD *)(a3 + 32) = 4;
    *(_DWORD *)(a3 + 112) = 4;
  }
  else
  {
    if (v26 == 1)
      v43 = 2;
    else
      v43 = 1;
    *(_DWORD *)(a3 + 32) = v43;
    *(_DWORD *)(a3 + 112) = 3;
  }
}

void sub_2233E14B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  double v25;
  int v26;
  double v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  double v32;
  int v33;
  double v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  double v41;
  int v42;
  int v43;
  double v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  double v49;
  int v50;
  double v51;
  uint64_t v52;
  double v53;

  *(_DWORD *)(a3 + 8) = 4;
  *(_QWORD *)a3 = *(_QWORD *)(a4 + 8);
  v8 = a5[9];
  if (v8 == -1)
  {
    *(_OWORD *)(a3 + 80) = xmmword_2245F5410;
    *(_QWORD *)(a3 + 96) = 0;
    v9 = a5[10];
    if (v9 != 1)
      goto LABEL_6;
    goto LABEL_9;
  }
  if (v8 != 1)
  {
    v10 = *(_OWORD *)(a4 + 24);
    *(_QWORD *)(a3 + 96) = *(_QWORD *)(a4 + 40);
    *(_OWORD *)(a3 + 80) = v10;
    v9 = a5[10];
    if (v9 != 1)
      goto LABEL_6;
LABEL_9:
    *(int64x2_t *)(a3 + 160) = vdupq_n_s64(1uLL);
    *(_QWORD *)(a3 + 176) = 0x412E848000000000;
    goto LABEL_11;
  }
  *(int64x2_t *)(a3 + 80) = vdupq_n_s64(1uLL);
  *(_QWORD *)(a3 + 96) = 0x412E848000000000;
  v9 = a5[10];
  if (v9 == 1)
    goto LABEL_9;
LABEL_6:
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 160) = xmmword_2245F5410;
    *(_QWORD *)(a3 + 176) = 0;
  }
  else
  {
    v11 = *(_OWORD *)(a4 + 48);
    *(_QWORD *)(a3 + 176) = *(_QWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 160) = v11;
  }
LABEL_11:
  v12 = a5[5];
  v13 = *(_QWORD *)(a6 + 8);
  v14 = *(uint64_t **)(v13 + 16);
  v15 = *(uint64_t **)(v13 + 24);
  v16 = (uint64_t *)sub_2233E3E84(*(_QWORD *)(a6 + 16));
  v53 = 1.0;
  v17 = sub_2233E3FAC(v14, v15, v16, &v53);
  if (v17 == 0.0)
    goto LABEL_12;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v19 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v19 > v53 * 2.22044605e-16)
    {
      if (v12 + v18)
        goto LABEL_25;
      goto LABEL_20;
    }
LABEL_12:
    v18 = 0;
    if (v12)
      goto LABEL_25;
LABEL_20:
    v20 = a3 + 32;
    *(_DWORD *)(v20 + 80 * (v18 == -1)) = 1;
    *(_DWORD *)(v20 + 80 * (v18 != -1)) = 2;
    return;
  }
  if (v17 > 0.0)
    v18 = 1;
  else
    v18 = -1;
  if (!(v12 + v18))
    goto LABEL_20;
LABEL_25:
  v21 = *(_QWORD *)(a6 + 16);
  v22 = *(uint64_t **)(v21 + 16);
  v23 = *(uint64_t **)(v21 + 24);
  v24 = (uint64_t *)sub_2233E3E84(v21);
  v53 = 1.0;
  v25 = sub_2233E3FAC(v22, v23, v24, &v53);
  if (v25 == 0.0)
  {
LABEL_26:
    v26 = 0;
    goto LABEL_36;
  }
  if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
  }
  else
  {
    v27 = fabs(v25);
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
    if (v27 <= v53 * 2.22044605e-16)
      goto LABEL_26;
  }
LABEL_36:
  v28 = *(_QWORD *)(a6 + 16);
  v29 = *(uint64_t **)(v28 + 24);
  v30 = (uint64_t *)sub_2233E3E84(v28);
  v31 = *(uint64_t **)(*(_QWORD *)(a6 + 8) + 24);
  v53 = 1.0;
  v32 = sub_2233E3FAC(v29, v30, v31, &v53);
  if (v32 == 0.0)
  {
LABEL_37:
    v33 = 0;
    goto LABEL_47;
  }
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
  }
  else
  {
    v34 = fabs(v32);
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
    if (v34 <= v53 * 2.22044605e-16)
      goto LABEL_37;
  }
LABEL_47:
  if ((v18 & v12) == 0xFFFFFFFF && v26 == 1)
  {
    *(_DWORD *)(a3 + 32) = 2;
    *(_DWORD *)(a3 + 112) = 2;
    *(_BYTE *)(a3 + 12) = 1;
    return;
  }
  if (v12 == 1 && v18 == 1 && v26 == -1)
  {
    if (v33 == -1)
      v35 = 1;
    else
      v35 = 3;
    *(_DWORD *)(a3 + 32) = v35;
    *(_DWORD *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 12) = 1;
    return;
  }
  if (v12 == v18 && v12 == v26)
  {
    v36 = (v26 == 1) ^ (v33 != 0);
    if (v33 * v12 != -1)
    {
LABEL_93:
      v52 = a3 + 32;
      *(_DWORD *)(v52 + 80 * v36) = 1;
      *(_DWORD *)(v52 + 80 * (v36 ^ 1)) = 2;
      *(_BYTE *)(a3 + 12) = 1;
      return;
    }
    v37 = *(_QWORD *)(a6 + 8);
    v38 = *(uint64_t **)(v37 + 16);
    v39 = *(uint64_t **)(v37 + 24);
    v40 = *(uint64_t **)(*(_QWORD *)(a6 + 16) + 24);
    v53 = 1.0;
    v41 = sub_2233E3FAC(v38, v39, v40, &v53);
    if (v41 == 0.0)
      goto LABEL_61;
    if ((*(_QWORD *)&v41 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v41 > 0.0)
        v42 = 1;
      else
        v42 = -1;
    }
    else
    {
      v44 = fabs(v41);
      if (v41 > 0.0)
        v42 = 1;
      else
        v42 = -1;
      if (v44 <= v53 * 2.22044605e-16)
LABEL_61:
        v42 = 0;
    }
    v45 = *(_QWORD *)(a6 + 8);
    v46 = *(uint64_t **)(v45 + 24);
    v47 = (uint64_t *)sub_2233E3E84(v45);
    v48 = *(uint64_t **)(*(_QWORD *)(a6 + 16) + 24);
    v53 = 1.0;
    v49 = sub_2233E3FAC(v46, v47, v48, &v53);
    if (v49 == 0.0)
    {
LABEL_80:
      v50 = 0;
      goto LABEL_90;
    }
    if ((*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v49 > 0.0)
        v50 = 1;
      else
        v50 = -1;
    }
    else
    {
      v51 = fabs(v49);
      if (v49 > 0.0)
        v50 = 1;
      else
        v50 = -1;
      if (v51 <= v53 * 2.22044605e-16)
        goto LABEL_80;
    }
LABEL_90:
    if (v50 * v42 == 1 && sub_2233E5CAC(a6) * v33 == -1)
      v36 = (v26 == 1) == (v33 != 0);
    goto LABEL_93;
  }
  if (v18)
  {
    *(_DWORD *)(a3 + 8) = 8;
  }
  else if (v12 == v26)
  {
    *(_DWORD *)(a3 + 32) = 4;
    *(_DWORD *)(a3 + 112) = 4;
  }
  else
  {
    if (v26 == 1)
      v43 = 2;
    else
      v43 = 1;
    *(_DWORD *)(a3 + 112) = v43;
    *(_DWORD *)(a3 + 32) = 3;
  }
}

void sub_2233E19C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  double v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  double v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  double v31;
  int v32;
  double v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  double v38;
  int v39;
  double v40;
  double v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  double v47;
  int v48;
  double v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  double v54;
  int v55;
  double v56;
  BOOL v57;
  int v58;
  char v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v65;
  int v66;
  BOOL v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  double v73;
  BOOL v74;
  double v75;
  int v76;
  int v77;
  int v78;
  int v79;
  double v80;

  *(_DWORD *)(a3 + 8) = 3;
  *(_QWORD *)a3 = *(_QWORD *)(a4 + 8);
  v9 = a5[9];
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 80) = xmmword_2245F5410;
    *(_QWORD *)(a3 + 96) = 0;
    v10 = a5[10];
    if (v10 == 1)
      goto LABEL_4;
  }
  else if (v9 == 1)
  {
    *(int64x2_t *)(a3 + 80) = vdupq_n_s64(1uLL);
    *(_QWORD *)(a3 + 96) = 0x412E848000000000;
    v10 = a5[10];
    if (v10 == 1)
    {
LABEL_4:
      *(int64x2_t *)(a3 + 160) = vdupq_n_s64(1uLL);
      *(_QWORD *)(a3 + 176) = 0x412E848000000000;
      goto LABEL_11;
    }
  }
  else
  {
    v11 = *(_OWORD *)(a4 + 24);
    *(_QWORD *)(a3 + 96) = *(_QWORD *)(a4 + 40);
    *(_OWORD *)(a3 + 80) = v11;
    v10 = a5[10];
    if (v10 == 1)
      goto LABEL_4;
  }
  if (v10 == -1)
  {
    *(_OWORD *)(a3 + 160) = xmmword_2245F5410;
    *(_QWORD *)(a3 + 176) = 0;
  }
  else
  {
    v12 = *(_OWORD *)(a4 + 48);
    *(_QWORD *)(a3 + 176) = *(_QWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 160) = v12;
  }
LABEL_11:
  v13 = *(_QWORD *)(a6 + 16);
  v14 = *(uint64_t **)(v13 + 16);
  v15 = *(uint64_t **)(v13 + 24);
  v16 = (uint64_t *)sub_2233E3E84(*(_QWORD *)(a6 + 8));
  v80 = 1.0;
  v17 = sub_2233E3FAC(v14, v15, v16, &v80);
  if (v17 == 0.0)
  {
LABEL_12:
    v18 = 0;
    goto LABEL_22;
  }
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
  }
  else
  {
    v19 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v19 <= v80 * 2.22044605e-16)
      goto LABEL_12;
  }
LABEL_22:
  v20 = a5[7];
  v21 = *(_QWORD *)(a6 + 8);
  v22 = *(uint64_t **)(v21 + 16);
  v23 = *(uint64_t **)(v21 + 24);
  v24 = (uint64_t *)sub_2233E3E84(*(_QWORD *)(a6 + 16));
  v80 = 1.0;
  v25 = sub_2233E3FAC(v22, v23, v24, &v80);
  if (v25 == 0.0)
  {
LABEL_23:
    v26 = 0;
    goto LABEL_33;
  }
  if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
    if (v26 * v20 != -1)
      goto LABEL_33;
LABEL_24:
    v27 = *(_QWORD *)(a6 + 8);
    v28 = *(uint64_t **)(v27 + 16);
    v29 = *(uint64_t **)(v27 + 24);
    v30 = (uint64_t *)sub_2233E3E84(v27);
    v80 = 1.0;
    v31 = sub_2233E3FAC(v28, v29, v30, &v80);
    if (v31 != 0.0)
    {
      if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v31 > 0.0)
          v32 = 1;
        else
          v32 = -1;
        if (v32 != v20)
          goto LABEL_139;
LABEL_52:
        if (!v18)
        {
          *(_DWORD *)(a3 + 32) = 3;
          v74 = v26 == 1;
          goto LABEL_170;
        }
        if (v18 == v26)
        {
          if (v26 == 1)
            v42 = 1;
          else
            v42 = 2;
          *(_DWORD *)(a3 + 32) = v42;
          goto LABEL_165;
        }
LABEL_139:
        if (v32 == v26)
        {
          v69 = *(_QWORD *)(a6 + 16);
          v70 = *(uint64_t **)(v69 + 24);
          v71 = (uint64_t *)sub_2233E3E84(v69);
          v72 = (uint64_t *)sub_2233E3E84(*(_QWORD *)(a6 + 8));
          v80 = 1.0;
          v73 = sub_2233E3FAC(v70, v71, v72, &v80);
          if (v73 == 0.0)
            goto LABEL_141;
          if ((*(_QWORD *)&v73 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (v73 > 0.0)
              v76 = 1;
            else
              v76 = -1;
          }
          else
          {
            v75 = fabs(v73);
            if (v73 > 0.0)
              v76 = 1;
            else
              v76 = -1;
            if (v75 <= v80 * 2.22044605e-16)
              goto LABEL_141;
          }
          if (v76 == v26)
          {
            if (v26 == 1)
              v78 = 1;
            else
              v78 = 2;
            *(_DWORD *)(a3 + 32) = v78;
            if (v26 == 1)
              v42 = 2;
            else
              v42 = 1;
            goto LABEL_165;
          }
        }
        v74 = v26 == 1;
        if (v26 == 1)
          v79 = 2;
        else
          v79 = 1;
        *(_DWORD *)(a3 + 32) = v79;
LABEL_170:
        if (v74)
          v62 = 1;
        else
          v62 = 2;
        goto LABEL_173;
      }
      v41 = fabs(v31);
      if (v31 > 0.0)
        v32 = 1;
      else
        v32 = -1;
      if (v41 > v80 * 2.22044605e-16)
      {
        if (v32 != v20)
          goto LABEL_139;
        goto LABEL_52;
      }
    }
    v32 = 0;
    if (v20)
      goto LABEL_139;
    goto LABEL_52;
  }
  v33 = fabs(v25);
  if (v25 > 0.0)
    v26 = 1;
  else
    v26 = -1;
  if (v33 <= v80 * 2.22044605e-16)
    goto LABEL_23;
  if (v26 * v20 == -1)
    goto LABEL_24;
LABEL_33:
  v34 = *(_QWORD *)(a6 + 16);
  v35 = *(uint64_t **)(v34 + 24);
  v36 = (uint64_t *)sub_2233E3E84(v34);
  v37 = (uint64_t *)sub_2233E3E84(*(_QWORD *)(a6 + 8));
  v80 = 1.0;
  v38 = sub_2233E3FAC(v35, v36, v37, &v80);
  if (v38 == 0.0)
  {
LABEL_34:
    v39 = 0;
    goto LABEL_61;
  }
  if ((*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v38 > 0.0)
      v39 = 1;
    else
      v39 = -1;
  }
  else
  {
    v40 = fabs(v38);
    if (v38 > 0.0)
      v39 = 1;
    else
      v39 = -1;
    if (v40 <= v80 * 2.22044605e-16)
      goto LABEL_34;
  }
LABEL_61:
  v43 = *(_QWORD *)(a6 + 8);
  v44 = *(uint64_t **)(v43 + 16);
  v45 = *(uint64_t **)(v43 + 24);
  v46 = (uint64_t *)sub_2233E3E84(v43);
  v80 = 1.0;
  v47 = sub_2233E3FAC(v44, v45, v46, &v80);
  if (v47 != 0.0)
  {
    if ((*(_QWORD *)&v47 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v47 > 0.0)
        v48 = 1;
      else
        v48 = -1;
      goto LABEL_72;
    }
    v49 = fabs(v47);
    if (v47 > 0.0)
      v48 = 1;
    else
      v48 = -1;
    if (v49 > v80 * 2.22044605e-16)
      goto LABEL_72;
  }
  v48 = 0;
LABEL_72:
  v50 = *(_QWORD *)(a6 + 16);
  v51 = *(uint64_t **)(v50 + 16);
  v52 = *(uint64_t **)(v50 + 24);
  v53 = (uint64_t *)sub_2233E3E84(v50);
  v80 = 1.0;
  v54 = sub_2233E3FAC(v51, v52, v53, &v80);
  if (v54 == 0.0)
    goto LABEL_73;
  if ((*(_QWORD *)&v54 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v54 > 0.0)
      v55 = 1;
    else
      v55 = -1;
    goto LABEL_83;
  }
  v56 = fabs(v54);
  v55 = v54 > 0.0 ? 1 : -1;
  if (v56 <= v80 * 2.22044605e-16)
LABEL_73:
    v55 = 0;
LABEL_83:
  if (v26)
    v57 = 1;
  else
    v57 = v55 * v20 == 1;
  v58 = !v57;
  if (v48 == v20 || v48 == v26 || !(v26 | v20) && v48 != -1)
  {
    if (v39)
      v59 = 1;
    else
      v59 = v58;
    if ((v59 & 1) != 0)
    {
      if (!v18)
      {
        *(_DWORD *)(a3 + 32) = 3;
        if (v55 == 1)
          v66 = 2;
        else
          v66 = 1;
        if (v58)
          v62 = 3;
        else
          v62 = v66;
        goto LABEL_173;
      }
      if (v18 == v39 && v55 * v18 != -1)
      {
        if (v55 == 1)
          v60 = 1;
        else
          v60 = 2;
        *(_DWORD *)(a3 + 32) = v60;
        if (v55 == 1)
          v61 = 2;
        else
          v61 = 1;
        if (v58)
          v62 = 3;
        else
          v62 = v61;
        goto LABEL_173;
      }
      if (!(v39 + v55))
      {
        v67 = v55 == 1;
        if (v55 == 1)
          v68 = 2;
        else
          v68 = 1;
        *(_DWORD *)(a3 + 32) = v68;
        if (v67)
          v42 = 1;
        else
          v42 = 2;
LABEL_165:
        *(_DWORD *)(a3 + 112) = v42;
        *(_BYTE *)(a3 + 12) = 1;
        return;
      }
      if (v18 != -v55)
        return;
      if (v55 == 1)
        v77 = 2;
      else
        v77 = 1;
      *(_DWORD *)(a3 + 32) = v77;
      *(_DWORD *)(a3 + 112) = v77;
      if (v58)
      {
        v62 = 3;
        goto LABEL_173;
      }
LABEL_121:
      *(_BYTE *)(a3 + 12) = 1;
      return;
    }
LABEL_141:
    v62 = 4;
    *(_DWORD *)(a3 + 32) = 4;
LABEL_173:
    *(_DWORD *)(a3 + 112) = v62;
    return;
  }
  if (v55 == 1)
    v63 = 2;
  else
    v63 = 1;
  *(_DWORD *)(a3 + 32) = v63;
  if (v26 == 1 || v20 == 1)
    v65 = 1;
  else
    v65 = 2;
  if (v58)
    v65 = 3;
  *(_DWORD *)(a3 + 112) = v65;
  if ((v58 & 1) == 0)
    goto LABEL_121;
}

void sub_2233E2060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  double v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  double v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  double v39;
  double v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  double v46;

  v12 = sub_2233E5070((double *)(a4 + 48), (double *)(a4 + 104));
  v13 = a4 + 56 * v12;
  *(_DWORD *)(a3 + 8) = 5;
  *(_QWORD *)a3 = *(_QWORD *)(a4 + 8 * v12 + 8);
  v14 = *(_OWORD *)(v13 + 24);
  *(_QWORD *)(a3 + 96) = *(_QWORD *)(v13 + 40);
  *(_OWORD *)(a3 + 80) = v14;
  v15 = *(_QWORD *)(v13 + 64);
  *(_OWORD *)(a3 + 160) = *(_OWORD *)(v13 + 48);
  *(_QWORD *)(a3 + 176) = v15;
  v16 = *(_DWORD *)(a5 + 36);
  v17 = *(_QWORD *)(a6 + 8);
  v18 = *(uint64_t **)(v17 + 16);
  v19 = *(uint64_t **)(v17 + 24);
  v20 = (uint64_t *)sub_2233E3E84(v17);
  v46 = 1.0;
  v21 = sub_2233E3FAC(v18, v19, v20, &v46);
  if (v21 != 0.0)
  {
    if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v21 > 0.0)
        v22 = 1;
      else
        v22 = -1;
      goto LABEL_3;
    }
    v39 = fabs(v21);
    if (v21 > 0.0)
      v22 = 1;
    else
      v22 = -1;
    if (v39 > v46 * 2.22044605e-16)
      goto LABEL_3;
  }
  v22 = 0;
LABEL_3:
  v23 = *(_QWORD *)(a6 + 16);
  v24 = *(uint64_t **)(v23 + 16);
  v25 = *(uint64_t **)(v23 + 24);
  v26 = (uint64_t *)sub_2233E3E84(v23);
  v46 = 1.0;
  v27 = sub_2233E3FAC(v24, v25, v26, &v46);
  if (v27 == 0.0)
    goto LABEL_4;
  if ((*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v27 > 0.0)
      v28 = 1;
    else
      v28 = -1;
    goto LABEL_5;
  }
  v40 = fabs(v27);
  v28 = v27 > 0.0 ? 1 : -1;
  if (v40 <= v46 * 2.22044605e-16)
LABEL_4:
    v28 = 0;
LABEL_5:
  if (v16 == 1)
    v29 = v22;
  else
    v29 = v28;
  v30 = v29 * v16;
  if (v30 == 1)
    v31 = 1;
  else
    v31 = 2;
  if (v30 == 1)
    v32 = 2;
  else
    v32 = 1;
  if (v30)
  {
    v33 = v32;
  }
  else
  {
    v31 = 4;
    v33 = 4;
  }
  *(_DWORD *)(a3 + 32) = v31;
  *(_DWORD *)(a3 + 112) = v33;
  if (v22)
  {
    v34 = *(float **)(a1 + 24);
    v35 = *(float *)a3;
    v36 = *(float *)(a3 + 4);
    v37 = *v34;
    v38 = v34[1];
  }
  else
  {
    if (*(_BYTE *)(a1 + 168))
    {
      v37 = *(float *)(a1 + 160);
      v38 = *(float *)(a1 + 164);
    }
    else
    {
      sub_2233E2C74(a1, *(float **)(a1 + 24), a1 + 32);
      v41 = **(_QWORD **)(a1 + 32);
      *(_QWORD *)(a1 + 160) = v41;
      *(_BYTE *)(a1 + 168) = 1;
      v38 = *((float *)&v41 + 1);
      v37 = *(float *)&v41;
    }
    v35 = *(float *)a3;
    v36 = *(float *)(a3 + 4);
  }
  *(float *)(a3 + 104) = (float)((float)(v35 - v37) * (float)(v35 - v37))
                       + (float)((float)(v36 - v38) * (float)(v36 - v38));
  if (v28)
  {
    v42 = (float)((float)(v35 - **(float **)(a2 + 24)) * (float)(v35 - **(float **)(a2 + 24)))
        + (float)((float)(v36 - *(float *)(*(_QWORD *)(a2 + 24) + 4))
                * (float)(v36 - *(float *)(*(_QWORD *)(a2 + 24) + 4)));
  }
  else
  {
    if (*(_BYTE *)(a2 + 168))
    {
      v43 = *(float *)(a2 + 160);
      v44 = *(float *)(a2 + 164);
    }
    else
    {
      sub_2233E2C74(a2, *(float **)(a2 + 24), a2 + 32);
      v45 = **(_QWORD **)(a2 + 32);
      *(_QWORD *)(a2 + 160) = v45;
      *(_BYTE *)(a2 + 168) = 1;
      v43 = *(float *)&v45;
      v35 = *(float *)a3;
      v36 = *(float *)(a3 + 4);
      v44 = *((float *)&v45 + 1);
    }
    v42 = (float)((float)(v36 - v44) * (float)(v36 - v44)) + (float)((float)(v35 - v43) * (float)(v35 - v43));
  }
  *(float *)(a3 + 184) = v42;
}

__n128 sub_2233E2328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  __n128 result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __n128 v38;
  __int128 v39;
  _BYTE v40[36];
  __int128 v41;
  __int128 v42;
  _BYTE v43[36];
  double v44;
  __int128 v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v45 = *(_OWORD *)(a3 + 12);
  v46 = *(_DWORD *)(a3 + 28);
  *(_OWORD *)v43 = *(_OWORD *)(a3 + 68);
  v41 = *(_OWORD *)(a3 + 36);
  v42 = *(_OWORD *)(a3 + 52);
  v9 = *(_QWORD *)(a3 + 104);
  result = *(__n128 *)(a3 + 116);
  *(_OWORD *)v40 = *(_OWORD *)(a3 + 148);
  v38 = result;
  v39 = *(_OWORD *)(a3 + 132);
  v11 = *(_QWORD *)(a3 + 184);
  v12 = *(_DWORD *)(a5 + 480);
  if (*(_DWORD *)(a5 + 476) == 1)
  {
    v13 = *(_QWORD *)(a6 + 8);
    v14 = *(uint64_t **)(v13 + 16);
    v15 = *(uint64_t **)(v13 + 24);
    v16 = (uint64_t *)sub_2233E3E84(v13);
    v44 = 1.0;
    result.n128_f64[0] = sub_2233E3FAC(v14, v15, v16, &v44);
    if (result.n128_f64[0] != 0.0
      && ((result.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000
       || fabs(result.n128_f64[0]) > v44 * 2.22044605e-16))
    {
      if (result.n128_f64[0] <= 0.0)
        v17 = 1;
      else
        v17 = 2;
      v18 = *(_QWORD **)a4;
      v19 = *(_QWORD *)(*(_QWORD *)a4 + 16);
      v20 = *(_QWORD *)(*(_QWORD *)a4 + 8);
      v21 = *(_QWORD *)(a5 + 320);
      *(_OWORD *)&v43[12] = *(_OWORD *)(a5 + 384);
      *(_QWORD *)&v43[28] = *(_QWORD *)(a5 + 400);
      *(_OWORD *)&v40[12] = *(_OWORD *)(a5 + 408);
      *(_QWORD *)&v40[28] = *(_QWORD *)(a5 + 424);
      if (v19 == v20)
        v22 = 0;
      else
        v22 = 21 * ((v19 - v20) >> 3) - 1;
      v23 = v18[5] + v18[4];
      if (v22 == v23)
      {
        sub_2233E5D44((uint64_t)v18);
        v20 = v18[1];
        v23 = v18[5] + v18[4];
      }
      v24 = *(_QWORD *)(v20 + 8 * (v23 / 0x15)) + 192 * (v23 % 0x15);
      *(_OWORD *)(v24 + 12) = v45;
      *(_OWORD *)(v24 + 52) = v42;
      *(_OWORD *)(v24 + 68) = *(_OWORD *)v43;
      *(_OWORD *)(v24 + 84) = *(_OWORD *)&v43[16];
      *(_OWORD *)(v24 + 36) = v41;
      *(__n128 *)(v24 + 116) = v38;
      result = *(__n128 *)&v40[16];
      *(_OWORD *)(v24 + 164) = *(_OWORD *)&v40[16];
      *(_OWORD *)(v24 + 148) = *(_OWORD *)v40;
      *(_QWORD *)v24 = v21;
      *(_DWORD *)(v24 + 8) = 5;
      *(_DWORD *)(v24 + 28) = v46;
      *(_DWORD *)(v24 + 32) = v17;
      *(_DWORD *)(v24 + 100) = *(_DWORD *)&v43[32];
      *(_QWORD *)(v24 + 104) = v9;
      *(_DWORD *)(v24 + 112) = 3;
      *(_DWORD *)(v24 + 180) = *(_DWORD *)&v40[32];
      *(_OWORD *)(v24 + 132) = v39;
      *(_QWORD *)(v24 + 184) = v11;
      ++v18[5];
    }
  }
  if (v12 == 1)
  {
    v25 = *(_QWORD *)(a6 + 16);
    v26 = *(uint64_t **)(v25 + 16);
    v27 = *(uint64_t **)(v25 + 24);
    v28 = (uint64_t *)sub_2233E3E84(v25);
    v44 = 1.0;
    result.n128_f64[0] = sub_2233E3FAC(v26, v27, v28, &v44);
    if (result.n128_f64[0] != 0.0
      && ((result.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000
       || fabs(result.n128_f64[0]) > v44 * 2.22044605e-16))
    {
      v29 = a5 + 304;
      if (result.n128_f64[0] <= 0.0)
        v30 = 1;
      else
        v30 = 2;
      v31 = *(_QWORD **)a4;
      v32 = v31[2];
      v33 = v31[1];
      v34 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)&v43[28] = *(_QWORD *)(v29 + 40);
      *(_OWORD *)&v43[12] = *(_OWORD *)(v29 + 24);
      *(_QWORD *)&v40[28] = *(_QWORD *)(v29 + 64);
      *(_OWORD *)&v40[12] = *(_OWORD *)(v29 + 48);
      if (v32 == v33)
        v35 = 0;
      else
        v35 = 21 * ((v32 - v33) >> 3) - 1;
      v36 = v31[5] + v31[4];
      if (v35 == v36)
      {
        sub_2233E5D44((uint64_t)v31);
        v33 = v31[1];
        v36 = v31[5] + v31[4];
      }
      v37 = *(_QWORD *)(v33 + 8 * (v36 / 0x15)) + 192 * (v36 % 0x15);
      *(_OWORD *)(v37 + 12) = v45;
      *(_OWORD *)(v37 + 52) = v42;
      *(_OWORD *)(v37 + 68) = *(_OWORD *)v43;
      *(_OWORD *)(v37 + 84) = *(_OWORD *)&v43[16];
      *(_OWORD *)(v37 + 36) = v41;
      *(__n128 *)(v37 + 116) = v38;
      result = *(__n128 *)&v40[16];
      *(_OWORD *)(v37 + 164) = *(_OWORD *)&v40[16];
      *(_OWORD *)(v37 + 148) = *(_OWORD *)v40;
      *(_QWORD *)v37 = v34;
      *(_DWORD *)(v37 + 8) = 5;
      *(_DWORD *)(v37 + 28) = v46;
      *(_DWORD *)(v37 + 32) = 3;
      *(_DWORD *)(v37 + 100) = *(_DWORD *)&v43[32];
      *(_QWORD *)(v37 + 104) = v9;
      *(_DWORD *)(v37 + 112) = v30;
      *(_DWORD *)(v37 + 180) = *(_DWORD *)&v40[32];
      *(_OWORD *)(v37 + 132) = v39;
      *(_QWORD *)(v37 + 184) = v11;
      ++v31[5];
    }
  }
  return result;
}

void sub_2233E2744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  double v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  double v24;
  int v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  double v32;
  int v33;
  double v34;
  int v35;
  BOOL v36;
  int v37;
  double v38;

  v9 = sub_2233E5070((double *)(a4 + 48), (double *)(a4 + 104));
  v10 = a4 + 56 * v9;
  *(_DWORD *)(a3 + 8) = 6;
  *(_QWORD *)a3 = *(_QWORD *)(a4 + 8 * v9 + 8);
  v11 = *(_OWORD *)(v10 + 24);
  *(_QWORD *)(a3 + 96) = *(_QWORD *)(v10 + 40);
  *(_OWORD *)(a3 + 80) = v11;
  v12 = *(_QWORD *)(v10 + 64);
  *(_OWORD *)(a3 + 160) = *(_OWORD *)(v10 + 48);
  *(_QWORD *)(a3 + 176) = v12;
  v13 = *(_QWORD *)(a6 + 16);
  v14 = *(uint64_t **)(v13 + 24);
  v15 = (uint64_t *)sub_2233E3E84(v13);
  v16 = (uint64_t *)sub_2233E3E84(*(_QWORD *)(a6 + 8));
  v38 = 1.0;
  v17 = sub_2233E3FAC(v14, v15, v16, &v38);
  if (v17 == 0.0)
  {
LABEL_2:
    v18 = 0;
    goto LABEL_12;
  }
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
  }
  else
  {
    v19 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v19 <= v38 * 2.22044605e-16)
      goto LABEL_2;
  }
LABEL_12:
  v20 = *(_QWORD *)(a6 + 8);
  v21 = *(uint64_t **)(v20 + 16);
  v22 = *(uint64_t **)(v20 + 24);
  v23 = (uint64_t *)sub_2233E3E84(v20);
  v38 = 1.0;
  v24 = sub_2233E3FAC(v21, v22, v23, &v38);
  if (v24 == 0.0)
  {
LABEL_13:
    v25 = 0;
    goto LABEL_23;
  }
  if ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v24 > 0.0)
      v25 = 1;
    else
      v25 = -1;
  }
  else
  {
    v26 = fabs(v24);
    if (v24 > 0.0)
      v25 = 1;
    else
      v25 = -1;
    if (v26 <= v38 * 2.22044605e-16)
      goto LABEL_13;
  }
LABEL_23:
  v28 = *(_QWORD *)(a6 + 8);
  v27 = *(_QWORD *)(a6 + 16);
  v29 = *(uint64_t **)(v28 + 16);
  v30 = *(uint64_t **)(v28 + 24);
  v31 = (uint64_t *)sub_2233E3E84(v27);
  v38 = 1.0;
  v32 = sub_2233E3FAC(v29, v30, v31, &v38);
  if (v32 == 0.0)
  {
LABEL_24:
    v33 = 0;
    goto LABEL_34;
  }
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v34 = fabs(v32);
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
    if (v34 > v38 * 2.22044605e-16)
      goto LABEL_34;
    goto LABEL_24;
  }
  if (v32 > 0.0)
    v33 = 1;
  else
    v33 = -1;
LABEL_34:
  if (v18 || v25 != v33)
  {
    if (v33 * v25 == -1)
      v36 = v25 == -1;
    else
      v36 = v18 == -1;
    if (v36)
      v37 = 2;
    else
      v37 = 1;
    *(_DWORD *)(a3 + 32) = v37;
    if (v36)
      v35 = 1;
    else
      v35 = 2;
  }
  else
  {
    v35 = 4;
    *(_DWORD *)(a3 + 32) = 4;
  }
  *(_DWORD *)(a3 + 112) = v35;
}

uint64_t sub_2233E29A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;

  *(_QWORD *)(a1 + 64) = a4;
  *(_QWORD *)(a1 + 72) = a2;
  *(_QWORD *)(a1 + 80) = a3;
  *(_WORD *)(a1 + 120) = 0;
  v8 = *(float **)(a2 + 16);
  v9 = (float)((float)(v8[1] - *(float *)(a4 + 4)) * *(float *)(a4 + 24)) + (float)*(uint64_t *)(a4 + 16);
  if (v9 >= 0.0)
    v10 = 0.5;
  else
    v10 = -0.5;
  v11 = v9 + v10;
  sub_2233DC31C(v9 + v10);
  v12 = ceilf(v11);
  v13 = floorf(v11);
  if (v11 >= 0.0)
    v12 = v13;
  *(_QWORD *)(a1 + 8) = (uint64_t)v12;
  v14 = (float)((float)(*v8 - *(float *)a4) * *(float *)(a4 + 24)) + (float)*(uint64_t *)(a4 + 8);
  if (v14 >= 0.0)
    v15 = 0.5;
  else
    v15 = -0.5;
  v16 = v14 + v15;
  sub_2233DC31C(v14 + v15);
  v17 = ceilf(v16);
  v18 = floorf(v16);
  if (v16 >= 0.0)
    v17 = v18;
  *(_QWORD *)a1 = (uint64_t)v17;
  v19 = *(float **)(a2 + 24);
  v20 = (float)((float)(v19[1] - *(float *)(a4 + 4)) * *(float *)(a4 + 24)) + (float)*(uint64_t *)(a4 + 16);
  if (v20 >= 0.0)
    v21 = 0.5;
  else
    v21 = -0.5;
  v22 = v20 + v21;
  sub_2233DC31C(v20 + v21);
  v23 = ceilf(v22);
  v24 = floorf(v22);
  if (v22 >= 0.0)
    v23 = v24;
  *(_QWORD *)(a1 + 24) = (uint64_t)v23;
  v25 = (float)((float)(*v19 - *(float *)a4) * *(float *)(a4 + 24)) + (float)*(uint64_t *)(a4 + 8);
  if (v25 >= 0.0)
    v26 = 0.5;
  else
    v26 = -0.5;
  v27 = v25 + v26;
  sub_2233DC31C(v25 + v26);
  v28 = ceilf(v27);
  v29 = floorf(v27);
  if (v27 >= 0.0)
    v28 = v29;
  *(_QWORD *)(a1 + 16) = (uint64_t)v28;
  v30 = *(float **)(a3 + 16);
  v31 = (float)((float)(v30[1] - *(float *)(a4 + 4)) * *(float *)(a4 + 24)) + (float)*(uint64_t *)(a4 + 16);
  if (v31 >= 0.0)
    v32 = 0.5;
  else
    v32 = -0.5;
  v33 = v31 + v32;
  sub_2233DC31C(v31 + v32);
  v34 = ceilf(v33);
  v35 = floorf(v33);
  if (v33 >= 0.0)
    v34 = v35;
  *(_QWORD *)(a1 + 40) = (uint64_t)v34;
  v36 = (float)((float)(*v30 - *(float *)a4) * *(float *)(a4 + 24)) + (float)*(uint64_t *)(a4 + 8);
  if (v36 >= 0.0)
    v37 = 0.5;
  else
    v37 = -0.5;
  v38 = v36 + v37;
  sub_2233DC31C(v36 + v37);
  v39 = ceilf(v38);
  v40 = floorf(v38);
  if (v38 >= 0.0)
    v39 = v40;
  *(_QWORD *)(a1 + 32) = (uint64_t)v39;
  v41 = *(float **)(a3 + 24);
  v42 = (float)((float)(v41[1] - *(float *)(a4 + 4)) * *(float *)(a4 + 24)) + (float)*(uint64_t *)(a4 + 16);
  if (v42 >= 0.0)
    v43 = 0.5;
  else
    v43 = -0.5;
  v44 = v42 + v43;
  sub_2233DC31C(v42 + v43);
  v45 = ceilf(v44);
  v46 = floorf(v44);
  if (v44 >= 0.0)
    v45 = v46;
  *(_QWORD *)(a1 + 56) = (uint64_t)v45;
  v47 = (float)((float)(*v41 - *(float *)a4) * *(float *)(a4 + 24)) + (float)*(uint64_t *)(a4 + 8);
  if (v47 >= 0.0)
    v48 = 0.5;
  else
    v48 = -0.5;
  v49 = v47 + v48;
  sub_2233DC31C(v47 + v48);
  v50 = ceilf(v49);
  v51 = floorf(v49);
  if (v49 >= 0.0)
    v50 = v51;
  *(_QWORD *)(a1 + 48) = (uint64_t)v50;
  return a1;
}

void sub_2233E2C74(uint64_t a1, float *a2, uint64_t a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  _OWORD *v31;
  uint64_t v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;

  v6 = (float)((float)(a2[1] - *(float *)(a1 + 180)) * *(float *)(a1 + 200)) + (float)*(uint64_t *)(a1 + 192);
  if (v6 >= 0.0)
    v7 = 0.5;
  else
    v7 = -0.5;
  v8 = v6 + v7;
  sub_2233DC31C(v6 + v7);
  v9 = ceilf(v8);
  v10 = floorf(v8);
  if (v8 >= 0.0)
    v9 = v10;
  v11 = (uint64_t)v9;
  v12 = (float)((float)(*a2 - *(float *)(a1 + 176)) * *(float *)(a1 + 200)) + (float)*(uint64_t *)(a1 + 184);
  if (v12 >= 0.0)
    v13 = 0.5;
  else
    v13 = -0.5;
  v14 = v12 + v13;
  sub_2233DC31C(v12 + v13);
  v15 = ceilf(v14);
  v16 = floorf(v14);
  if (v14 >= 0.0)
    v15 = v16;
  v17 = (uint64_t)v15;
  v18 = *(float **)a3;
  v19 = (float)((float)(*(float *)(*(_QWORD *)a3 + 4) - *(float *)(a1 + 180)) * *(float *)(a1 + 200))
      + (float)*(uint64_t *)(a1 + 192);
  if (v19 >= 0.0)
    v20 = 0.5;
  else
    v20 = -0.5;
  v21 = v19 + v20;
  sub_2233DC31C(v19 + v20);
  v22 = ceilf(v21);
  v23 = floorf(v21);
  if (v21 >= 0.0)
    v24 = v23;
  else
    v24 = v22;
  v25 = (float)((float)(*v18 - *(float *)(a1 + 176)) * *(float *)(a1 + 200)) + (float)*(uint64_t *)(a1 + 184);
  if (v25 >= 0.0)
    v26 = 0.5;
  else
    v26 = -0.5;
  v27 = v25 + v26;
  sub_2233DC31C(v25 + v26);
  v28 = ceilf(v27);
  v29 = floorf(v27);
  if (v27 >= 0.0)
    v28 = v29;
  if (v17 == (uint64_t)v28 && v11 == (uint64_t)v24)
  {
    v31 = (_OWORD *)(a3 + 40);
    v32 = -1;
    do
    {
      if ((unint64_t)++v32 >= *(_QWORD *)(*(_QWORD *)a1 + 88))
        return;
      v47 = *(_QWORD *)(a3 + 24);
      v46 = *(_QWORD *)(a3 + 32);
      v48 = v46 + 1;
      *(_QWORD *)(a3 + 32) = v46 + 1;
      if (v46 + 1 >= v47)
      {
        if (v46 >= v47)
        {
          *(_QWORD *)a3 = *(_QWORD *)(a3 + 16);
          if (v48 != *(_QWORD *)(a3 + 112))
            goto LABEL_28;
        }
        else
        {
          *(_QWORD *)a3 = *(_QWORD *)(a3 + 8) + 8 * (v48 % v47);
          if (v48 != *(_QWORD *)(a3 + 112))
            goto LABEL_28;
        }
      }
      else
      {
        *(_QWORD *)a3 += 8;
        if (v48 != *(_QWORD *)(a3 + 112))
          goto LABEL_28;
      }
      v49 = *(_OWORD *)(a3 + 56);
      *(_OWORD *)a3 = *v31;
      *(_OWORD *)(a3 + 16) = v49;
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(a3 + 72);
      if (*(_BYTE *)(a3 + 120))
      {
        v51 = *(_QWORD *)(a3 + 24);
        v50 = *(_QWORD *)(a3 + 32);
        *(_QWORD *)(a3 + 32) = v50 + 1;
        if (v50 + 1 >= v51)
        {
          if (v50 >= v51)
          {
            *(_QWORD *)a3 = *(_QWORD *)(a3 + 16);
            if (v50 == v46)
            {
LABEL_60:
              v52 = *(_OWORD *)(a3 + 56);
              *(_OWORD *)a3 = *v31;
              *(_OWORD *)(a3 + 16) = v52;
              *(_QWORD *)(a3 + 32) = *(_QWORD *)(a3 + 72);
            }
          }
          else
          {
            *(_QWORD *)a3 = *(_QWORD *)(a3 + 8) + 8 * ((v50 + 1) % v51);
            if (v50 == v46)
              goto LABEL_60;
          }
        }
        else
        {
          *(_QWORD *)a3 += 8;
          if (v50 == v46)
            goto LABEL_60;
        }
      }
LABEL_28:
      v33 = *(float **)a3;
      v34 = (float)((float)(*(float *)(*(_QWORD *)a3 + 4) - *(float *)(a1 + 180)) * *(float *)(a1 + 200))
          + (float)*(uint64_t *)(a1 + 192);
      if (v34 >= 0.0)
        v35 = 0.5;
      else
        v35 = -0.5;
      v36 = v34 + v35;
      sub_2233DC31C(v34 + v35);
      v37 = ceilf(v36);
      v38 = floorf(v36);
      if (v36 >= 0.0)
        v39 = v38;
      else
        v39 = v37;
      v40 = (float)((float)(*v33 - *(float *)(a1 + 176)) * *(float *)(a1 + 200)) + (float)*(uint64_t *)(a1 + 184);
      if (v40 >= 0.0)
        v41 = 0.5;
      else
        v41 = -0.5;
      v42 = v40 + v41;
      sub_2233DC31C(v40 + v41);
      v43 = ceilf(v42);
      v44 = floorf(v42);
      if (v42 >= 0.0)
        v43 = v44;
    }
    while (v17 == (uint64_t)v43 && v11 == (uint64_t)v39);
  }
}

double sub_2233E2FB8@<D0>(uint64_t a1@<X0>, float **a2@<X1>, float **a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  double v32;
  _QWORD *v33;
  _QWORD *v34;
  __int128 v36;
  float *v37;
  double result;
  __int128 v39;
  double v40;
  int v41;
  int v42;
  double v43;
  int v44;
  double v45;
  double v46;
  double v47;
  int v48;
  double v49;
  int v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __int16 v69;
  __int16 v70;
  int v71;
  int v73;
  unint64_t v74;
  unint64_t v75;
  _OWORD v76[3];
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v9 = *(uint64_t **)(a4 + 16);
  v8 = *(uint64_t **)(a4 + 24);
  v11 = *(uint64_t **)(a5 + 16);
  v10 = *(uint64_t **)(a5 + 24);
  v13 = *v9;
  v12 = v9[1];
  v15 = *v8;
  v14 = v8[1];
  v17 = *v9 == *v8 && v12 == v14;
  v19 = *v11;
  v18 = v11[1];
  v21 = *v10;
  v20 = v10[1];
  v23 = *v11 == *v10 && v18 == v20;
  if (v17 && v23)
  {
    v33 = (_QWORD *)(a6 + 40);
    v34 = (_QWORD *)(a6 + 96);
    if (v13 == v19 && v12 == v18)
    {
      *v33 = 0;
      *(_QWORD *)(a6 + 48) = 0;
      *v34 = 0;
      *(_QWORD *)(a6 + 104) = 0;
      v37 = *a2;
      memset((char *)v76 + 2, 0, 40);
      *(_QWORD *)a6 = 1;
      *(_QWORD *)(a6 + 8) = *(_QWORD *)v37;
      *(_OWORD *)(a6 + 24) = xmmword_2245F5410;
      *(_OWORD *)(a6 + 80) = xmmword_2245F5410;
      *(_OWORD *)(a6 + 164) = *(_OWORD *)((char *)&v76[1] + 10);
      result = *(double *)&v76[1];
      v39 = v76[0];
      *(_OWORD *)(a6 + 154) = v76[1];
      *(_QWORD *)(a6 + 56) = 1;
      *(_QWORD *)(a6 + 64) = 0;
      *(_BYTE *)(a6 + 72) = 0;
      *(_QWORD *)(a6 + 112) = 1;
      *(_QWORD *)(a6 + 120) = 0;
      *(_BYTE *)(a6 + 128) = 0;
      *(_WORD *)(a6 + 136) = 48;
      *(_OWORD *)(a6 + 138) = v39;
      return result;
    }
    memset((char *)v76 + 2, 0, 32);
    *(_OWORD *)(a6 + 24) = xmmword_2245F5410;
    *(_OWORD *)(a6 + 80) = xmmword_2245F5410;
    v36 = v76[1];
    *(_OWORD *)(a6 + 138) = v76[0];
    *v33 = 0;
    *(_QWORD *)(a6 + 48) = 0;
    *v34 = 0;
    *(_QWORD *)(a6 + 104) = 0;
    goto LABEL_101;
  }
  if (v13 >= v15)
    v25 = *v8;
  else
    v25 = *v9;
  if (v13 <= v15)
    v13 = *v8;
  if (v19 >= v21)
    v26 = *v10;
  else
    v26 = *v11;
  if (v19 <= v21)
    v19 = *v10;
  if (v13 < v26 || v19 < v25)
    goto LABEL_100;
  if (v12 >= v14)
    v28 = v8[1];
  else
    v28 = v9[1];
  if (v12 > v14)
    v14 = v9[1];
  if (v18 >= v20)
    v29 = v10[1];
  else
    v29 = v11[1];
  if (v18 > v20)
    v20 = v11[1];
  if (v14 < v29 || v20 < v28)
  {
LABEL_100:
    memset((char *)v76 + 2, 0, 32);
    *(_OWORD *)(a6 + 24) = xmmword_2245F5410;
    *(_OWORD *)(a6 + 80) = xmmword_2245F5410;
    v36 = v76[1];
    *(_OWORD *)(a6 + 138) = v76[0];
    *(_QWORD *)(a6 + 40) = 0;
    *(_QWORD *)(a6 + 48) = 0;
    *(_QWORD *)(a6 + 96) = 0;
    *(_QWORD *)(a6 + 104) = 0;
LABEL_101:
    *(_QWORD *)((char *)&v76[2] + 2) = 0;
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 56) = 1;
    *(_QWORD *)(a6 + 64) = 0;
    *(_BYTE *)(a6 + 72) = 0;
    *(_QWORD *)(a6 + 112) = 1;
    *(_QWORD *)(a6 + 120) = 0;
    *(_BYTE *)(a6 + 128) = 0;
    *(_WORD *)(a6 + 136) = 100;
    *(_OWORD *)(a6 + 154) = v36;
    result = *(double *)((char *)&v76[1] + 10);
    *(_OWORD *)(a6 + 164) = *(_OWORD *)((char *)&v76[1] + 10);
    return result;
  }
  v75 = 0;
  *(_QWORD *)&v76[0] = 0x3FF0000000000000;
  v32 = sub_2233E3FAC(v11, v10, v9, (double *)v76);
  if (v32 == 0.0)
    goto LABEL_47;
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v32 > 0.0)
      v42 = 1;
    else
      v42 = -1;
    v73 = v42;
  }
  else
  {
    v40 = fabs(v32);
    if (v32 > 0.0)
      v41 = 1;
    else
      v41 = -1;
    v73 = v41;
    if (v40 <= *(double *)v76 * 2.22044605e-16)
LABEL_47:
      v73 = 0;
  }
  *(_QWORD *)&v76[0] = 0x3FF0000000000000;
  v43 = sub_2233E3FAC(v11, v10, v8, (double *)v76);
  if (v43 == 0.0)
  {
LABEL_65:
    v44 = 0;
    goto LABEL_75;
  }
  if ((*(_QWORD *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v43 > 0.0)
      v44 = 1;
    else
      v44 = -1;
  }
  else
  {
    v45 = fabs(v43);
    if (v43 > 0.0)
      v44 = 1;
    else
      v44 = -1;
    if (v45 <= *(double *)v76 * 2.22044605e-16)
      goto LABEL_65;
  }
LABEL_75:
  v74 = __PAIR64__(v44, v73);
  if (v44 * v73 == 1)
    goto LABEL_100;
  *(_QWORD *)&v76[0] = 0x3FF0000000000000;
  v46 = sub_2233E3FAC(v9, v8, v11, (double *)v76);
  if (v46 == 0.0)
  {
LABEL_77:
    v71 = 0;
    goto LABEL_88;
  }
  if ((*(_QWORD *)&v46 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v46 > 0.0)
      v48 = 1;
    else
      v48 = -1;
  }
  else
  {
    v47 = fabs(v46);
    if (v46 > 0.0)
      v48 = 1;
    else
      v48 = -1;
    if (v47 <= *(double *)v76 * 2.22044605e-16)
      goto LABEL_77;
  }
  v71 = v48;
LABEL_88:
  *(_QWORD *)&v76[0] = 0x3FF0000000000000;
  v49 = sub_2233E3FAC(v9, v8, v10, (double *)v76);
  if (v49 == 0.0)
  {
LABEL_89:
    v50 = 0;
    goto LABEL_99;
  }
  if ((*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v49 > 0.0)
      v50 = 1;
    else
      v50 = -1;
  }
  else
  {
    v51 = fabs(v49);
    if (v49 > 0.0)
      v50 = 1;
    else
      v50 = -1;
    if (v51 <= *(double *)v76 * 2.22044605e-16)
      goto LABEL_89;
  }
LABEL_99:
  v75 = __PAIR64__(v50, v71);
  if (v50 * v71 == 1)
    goto LABEL_100;
  v53 = *v9;
  v52 = v9[1];
  v54 = *v8 - *v9;
  v55 = v10[1];
  v57 = *v11;
  v56 = v11[1];
  v58 = *v10 - *v11;
  v59 = v8[1] - v52;
  v60 = v55 - v56;
  if (v44 | v73 | v71 | v50)
  {
    v61 = v60 * v54 - v59 * v58;
    if (v61)
    {
      v62 = v59 * v58 - v60 * v54;
      if (v62)
      {
        v63 = (v52 - v56) * v58 + v60 * (v57 - v53);
        v64 = v59 * (v53 - v57) + (v56 - v52) * v54;
        *(_QWORD *)(a1 + 16) = v63;
        *(_QWORD *)(a1 + 24) = v61;
        if (v61 < 0)
        {
          v63 = -v63;
          v61 = -v61;
          *(_QWORD *)(a1 + 16) = v63;
          *(_QWORD *)(a1 + 24) = v61;
        }
        *(double *)(a1 + 32) = (double)v63 * 1000000.0 / (double)v61;
        *(_QWORD *)(a1 + 40) = v64;
        *(_QWORD *)(a1 + 48) = v62;
        if (v62 < 0)
        {
          v64 = -v64;
          v62 = -v62;
          *(_QWORD *)(a1 + 40) = v64;
          *(_QWORD *)(a1 + 48) = v62;
        }
        *(double *)(a1 + 56) = (double)v64 * 1000000.0 / (double)v62;
        goto LABEL_138;
      }
    }
    v74 = 0;
    v75 = 0;
  }
  if (v54 >= 0)
    v65 = v54;
  else
    v65 = -v54;
  if (v59 >= 0)
    v66 = v59;
  else
    v66 = -v59;
  if (v58 >= 0)
    v67 = v58;
  else
    v67 = -v58;
  if (v60 >= 0)
    v68 = v55 - v56;
  else
    v68 = v56 - v55;
  if (v17)
  {
    v69 = v67 >= v68;
LABEL_136:
    v70 = v69 | 0x100;
    goto LABEL_137;
  }
  if (v23)
  {
    v69 = v65 >= v66;
    goto LABEL_136;
  }
  if (v67 < (uint64_t)v65)
    v65 = v67;
  if ((uint64_t)v68 < (uint64_t)v66)
    v66 = v68;
  if (v65 != v66)
  {
    v69 = v65 > v66;
    goto LABEL_136;
  }
  if (v65)
    v70 = 257;
  else
    v70 = 1;
LABEL_137:
  if ((v70 & 0x100) == 0)
  {
LABEL_138:
    *(_QWORD *)&result = sub_2233E3C6C((int *)&v74, a1, a2, a3, a6).n128_u64[0];
    return result;
  }
  if ((v70 & 1) != 0)
    *(_QWORD *)&result = sub_2233E35AC((uint64_t **)a2, (uint64_t **)a3, v9, v8, v11, v10, v17, v23, a6).n128_u64[0];
  else
    *(_QWORD *)&result = sub_2233E390C((uint64_t **)a2, (uint64_t **)a3, (uint64_t)v9, (uint64_t)v8, (uint64_t)v11, (uint64_t)v10, v17, v23, a6).n128_u64[0];
  return result;
}

__n128 sub_2233E35AC@<Q0>(uint64_t **a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  __n128 result;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[42];
  __int128 v36;

  if (!a7)
  {
    if (!a8)
    {
      result.n128_f64[0] = sub_2233E40E4(a1, a2, *a3, *a4, *a5, *a6, a9);
      return result;
    }
    v12 = *a5 - *a3;
    v13 = *a4 - *a3;
    if (v13 < 0)
    {
      v12 = *a3 - *a5;
      v13 = *a3 - *a4;
    }
    else if (!v13)
    {
      v14 = 0.0;
      if (v12 < 0)
        goto LABEL_23;
LABEL_19:
      if (v12 <= v13)
      {
        v36 = 0uLL;
        v19 = **a2;
        v20 = atomic_load((unsigned __int8 *)&qword_25578BB30);
        if ((v20 & 1) == 0)
        {
          v32 = v13;
          v34 = a9;
          v26 = v12;
          v28 = v14;
          v30 = **a2;
          v24 = __cxa_guard_acquire(&qword_25578BB30);
          v14 = v28;
          v19 = v30;
          v13 = v32;
          a9 = v34;
          v12 = v26;
          if (v24)
          {
            xmmword_25578BB18 = xmmword_2245F5410;
            qword_25578BB28 = 0;
            __cxa_guard_release(&qword_25578BB30);
            v14 = v28;
            v19 = v30;
            v13 = v32;
            a9 = v34;
            v12 = v26;
          }
        }
        v21 = qword_25578BB28;
        memset(&v35[2], 0, 40);
        *(_QWORD *)a9 = 1;
        *(_QWORD *)(a9 + 8) = v19;
        *(_QWORD *)(a9 + 24) = v12;
        *(_QWORD *)(a9 + 32) = v13;
        *(double *)(a9 + 40) = v14;
        *(_OWORD *)(a9 + 48) = xmmword_25578BB18;
        *(_QWORD *)(a9 + 64) = v21;
        *(_BYTE *)(a9 + 72) = 1;
        *(_OWORD *)(a9 + 80) = xmmword_2245F5410;
        *(_OWORD *)(a9 + 96) = v36;
        *(_QWORD *)(a9 + 112) = 1;
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    v14 = (double)v12 * 1000000.0 / (double)v13;
    if (v12 < 0)
      goto LABEL_23;
    goto LABEL_19;
  }
  v9 = *a3 - *a5;
  v10 = *a6 - *a5;
  if (v10 < 0)
  {
    v9 = *a5 - *a3;
    v10 = *a5 - *a6;
LABEL_13:
    v11 = (double)v9 * 1000000.0 / (double)v10;
    if ((v9 & 0x8000000000000000) == 0)
      goto LABEL_14;
LABEL_23:
    memset(&v35[2], 0, 32);
    *(_OWORD *)(a9 + 24) = xmmword_2245F5410;
    *(_OWORD *)(a9 + 80) = xmmword_2245F5410;
    v22 = *(_OWORD *)&v35[16];
    *(_OWORD *)(a9 + 138) = *(_OWORD *)v35;
    *(_QWORD *)(a9 + 40) = 0;
    *(_QWORD *)(a9 + 48) = 0;
    *(_QWORD *)(a9 + 96) = 0;
    *(_QWORD *)(a9 + 104) = 0;
    *(_QWORD *)&v35[34] = 0;
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 56) = 1;
    *(_QWORD *)(a9 + 64) = 0;
    *(_BYTE *)(a9 + 72) = 0;
    *(_QWORD *)(a9 + 112) = 1;
    *(_QWORD *)(a9 + 120) = 0;
    *(_BYTE *)(a9 + 128) = 0;
    *(_WORD *)(a9 + 136) = 100;
    goto LABEL_24;
  }
  if (v10)
    goto LABEL_13;
  v11 = 0.0;
  if (v9 < 0)
    goto LABEL_23;
LABEL_14:
  if (v9 > v10)
    goto LABEL_23;
  v36 = 0uLL;
  v16 = **a1;
  v17 = atomic_load((unsigned __int8 *)&qword_25578BB30);
  if ((v17 & 1) == 0)
  {
    v33 = a9;
    v25 = v9;
    v29 = v10;
    v27 = v11;
    v31 = **a1;
    v23 = __cxa_guard_acquire(&qword_25578BB30);
    v16 = v31;
    v11 = v27;
    v10 = v29;
    v9 = v25;
    a9 = v33;
    if (v23)
    {
      xmmword_25578BB18 = xmmword_2245F5410;
      qword_25578BB28 = 0;
      __cxa_guard_release(&qword_25578BB30);
      v16 = v31;
      v11 = v27;
      v10 = v29;
      v9 = v25;
      a9 = v33;
    }
  }
  v18 = qword_25578BB28;
  memset(&v35[2], 0, 40);
  *(_QWORD *)a9 = 1;
  *(_QWORD *)(a9 + 8) = v16;
  *(_OWORD *)(a9 + 24) = xmmword_25578BB18;
  *(_QWORD *)(a9 + 40) = v18;
  *(_QWORD *)(a9 + 48) = v9;
  *(_QWORD *)(a9 + 56) = v10;
  *(double *)(a9 + 64) = v11;
  *(_BYTE *)(a9 + 72) = 1;
  *(_OWORD *)(a9 + 80) = xmmword_2245F5410;
  *(_OWORD *)(a9 + 96) = v36;
  *(_QWORD *)(a9 + 112) = 1;
LABEL_22:
  *(_QWORD *)(a9 + 120) = 0;
  *(_BYTE *)(a9 + 128) = 0;
  *(_WORD *)(a9 + 136) = 48;
  v22 = *(_OWORD *)&v35[16];
  *(_OWORD *)(a9 + 138) = *(_OWORD *)v35;
LABEL_24:
  *(_OWORD *)(a9 + 154) = v22;
  result = *(__n128 *)&v35[26];
  *(_OWORD *)(a9 + 164) = *(_OWORD *)&v35[26];
  return result;
}

__n128 sub_2233E390C@<Q0>(uint64_t **a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  __n128 result;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[42];
  __int128 v38;

  if (!a7)
  {
    if (!a8)
    {
      result.n128_f64[0] = sub_2233E40E4(a1, a2, *(_QWORD *)(a3 + 8), *(_QWORD *)(a4 + 8), *(_QWORD *)(a5 + 8), *(_QWORD *)(a6 + 8), a9);
      return result;
    }
    v13 = *(_QWORD *)(a3 + 8);
    v14 = *(_QWORD *)(a5 + 8) - v13;
    v15 = *(_QWORD *)(a4 + 8) - v13;
    if (v15 < 0)
    {
      v14 = -v14;
      v15 = -v15;
    }
    else if (!v15)
    {
      v16 = 0.0;
      if (v14 < 0)
        goto LABEL_23;
LABEL_19:
      if (v14 <= v15)
      {
        v38 = 0uLL;
        v21 = **a2;
        v22 = atomic_load((unsigned __int8 *)&qword_25578BB30);
        if ((v22 & 1) == 0)
        {
          v34 = v15;
          v36 = a9;
          v28 = v14;
          v30 = v16;
          v32 = **a2;
          v26 = __cxa_guard_acquire(&qword_25578BB30);
          v16 = v30;
          v21 = v32;
          v15 = v34;
          a9 = v36;
          v14 = v28;
          if (v26)
          {
            xmmword_25578BB18 = xmmword_2245F5410;
            qword_25578BB28 = 0;
            __cxa_guard_release(&qword_25578BB30);
            v16 = v30;
            v21 = v32;
            v15 = v34;
            a9 = v36;
            v14 = v28;
          }
        }
        v23 = qword_25578BB28;
        memset(&v37[2], 0, 40);
        *(_QWORD *)a9 = 1;
        *(_QWORD *)(a9 + 8) = v21;
        *(_QWORD *)(a9 + 24) = v14;
        *(_QWORD *)(a9 + 32) = v15;
        *(double *)(a9 + 40) = v16;
        *(_OWORD *)(a9 + 48) = xmmword_25578BB18;
        *(_QWORD *)(a9 + 64) = v23;
        *(_BYTE *)(a9 + 72) = 1;
        *(_OWORD *)(a9 + 80) = xmmword_2245F5410;
        *(_OWORD *)(a9 + 96) = v38;
        *(_QWORD *)(a9 + 112) = 1;
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    v16 = (double)v14 * 1000000.0 / (double)v15;
    if (v14 < 0)
      goto LABEL_23;
    goto LABEL_19;
  }
  v9 = *(_QWORD *)(a5 + 8);
  v10 = *(_QWORD *)(a3 + 8) - v9;
  v11 = *(_QWORD *)(a6 + 8) - v9;
  if (v11 < 0)
  {
    v10 = -v10;
    v11 = -v11;
LABEL_13:
    v12 = (double)v10 * 1000000.0 / (double)v11;
    if ((v10 & 0x8000000000000000) == 0)
      goto LABEL_14;
LABEL_23:
    memset(&v37[2], 0, 32);
    *(_OWORD *)(a9 + 24) = xmmword_2245F5410;
    *(_OWORD *)(a9 + 80) = xmmword_2245F5410;
    v24 = *(_OWORD *)&v37[16];
    *(_OWORD *)(a9 + 138) = *(_OWORD *)v37;
    *(_QWORD *)(a9 + 40) = 0;
    *(_QWORD *)(a9 + 48) = 0;
    *(_QWORD *)(a9 + 96) = 0;
    *(_QWORD *)(a9 + 104) = 0;
    *(_QWORD *)&v37[34] = 0;
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 56) = 1;
    *(_QWORD *)(a9 + 64) = 0;
    *(_BYTE *)(a9 + 72) = 0;
    *(_QWORD *)(a9 + 112) = 1;
    *(_QWORD *)(a9 + 120) = 0;
    *(_BYTE *)(a9 + 128) = 0;
    *(_WORD *)(a9 + 136) = 100;
    goto LABEL_24;
  }
  if (v11)
    goto LABEL_13;
  v12 = 0.0;
  if (v10 < 0)
    goto LABEL_23;
LABEL_14:
  if (v10 > v11)
    goto LABEL_23;
  v38 = 0uLL;
  v18 = **a1;
  v19 = atomic_load((unsigned __int8 *)&qword_25578BB30);
  if ((v19 & 1) == 0)
  {
    v35 = a9;
    v27 = v10;
    v31 = v11;
    v29 = v12;
    v33 = **a1;
    v25 = __cxa_guard_acquire(&qword_25578BB30);
    v18 = v33;
    v12 = v29;
    v11 = v31;
    v10 = v27;
    a9 = v35;
    if (v25)
    {
      xmmword_25578BB18 = xmmword_2245F5410;
      qword_25578BB28 = 0;
      __cxa_guard_release(&qword_25578BB30);
      v18 = v33;
      v12 = v29;
      v11 = v31;
      v10 = v27;
      a9 = v35;
    }
  }
  v20 = qword_25578BB28;
  memset(&v37[2], 0, 40);
  *(_QWORD *)a9 = 1;
  *(_QWORD *)(a9 + 8) = v18;
  *(_OWORD *)(a9 + 24) = xmmword_25578BB18;
  *(_QWORD *)(a9 + 40) = v20;
  *(_QWORD *)(a9 + 48) = v10;
  *(_QWORD *)(a9 + 56) = v11;
  *(double *)(a9 + 64) = v12;
  *(_BYTE *)(a9 + 72) = 1;
  *(_OWORD *)(a9 + 80) = xmmword_2245F5410;
  *(_OWORD *)(a9 + 96) = v38;
  *(_QWORD *)(a9 + 112) = 1;
LABEL_22:
  *(_QWORD *)(a9 + 120) = 0;
  *(_BYTE *)(a9 + 128) = 0;
  *(_WORD *)(a9 + 136) = 48;
  v24 = *(_OWORD *)&v37[16];
  *(_OWORD *)(a9 + 138) = *(_OWORD *)v37;
LABEL_24:
  *(_OWORD *)(a9 + 154) = v24;
  result = *(__n128 *)&v37[26];
  *(_OWORD *)(a9 + 164) = *(_OWORD *)&v37[26];
  return result;
}

__n128 sub_2233E3C6C@<Q0>(int *a1@<X0>, uint64_t a2@<X1>, float **a3@<X2>, float **a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  BOOL v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  _BYTE v22[32];
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;

  v21 = xmmword_2245F5410;
  *(_QWORD *)v22 = 0;
  *(_QWORD *)&v22[8] = 0;
  *(_QWORD *)&v22[16] = 1;
  *(_QWORD *)&v22[24] = 0;
  v23 = 0;
  v24 = xmmword_2245F5410;
  v25 = 0uLL;
  v26 = 1uLL;
  v27 = 0;
  *(_QWORD *)&v19 = 1;
  sub_2233E5B8C(a2, (float *)&v19 + 2, a3, a4);
  v23 = 1;
  v21 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)v22 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)&v22[8] = *(_OWORD *)(a2 + 40);
  *(_QWORD *)&v22[24] = *(_QWORD *)(a2 + 56);
  v8 = *a1;
  v9 = a1[2];
  v10 = a1[3];
  if (!(*a1 | v9))
  {
    v9 = -1;
    if (v10 == 1)
      v12 = -1;
    else
      v12 = 1;
    if (v10 == 1)
      v13 = 1;
    else
      v13 = -1;
    v14 = 102;
    goto LABEL_23;
  }
  v11 = a1[1];
  if (!(v11 | v10))
  {
    if (v9 == 1)
      v12 = -1;
    else
      v12 = 1;
    if (v9 == 1)
      v13 = 1;
    else
      v13 = -1;
    v9 = 1;
    v14 = 116;
    v8 = 1;
    goto LABEL_41;
  }
  if (!(v11 | v9))
  {
    if (v10 == 1)
      v12 = 1;
    else
      v12 = -1;
    v8 = -1;
    v9 = 1;
    goto LABEL_39;
  }
  if (!(v8 | v10))
  {
    if (v9 == 1)
      v12 = 1;
    else
      v12 = -1;
    v8 = 1;
    v9 = -1;
LABEL_39:
    v14 = 97;
    goto LABEL_40;
  }
  if (v9)
  {
    if (v8)
    {
      if (v10)
      {
        if (v11)
        {
          v9 = -1;
          if (v10 == 1)
            v12 = -1;
          else
            v12 = 1;
          if (v10 == 1)
            v13 = 1;
          else
            v13 = -1;
          v14 = 105;
LABEL_23:
          v8 = -1;
          goto LABEL_41;
        }
        v8 = 0;
        if (v10 == 1)
          v12 = 1;
        else
          v12 = -1;
        v9 = 1;
      }
      else
      {
        v9 = 0;
        if (v11 == 1)
          v12 = 1;
        else
          v12 = -1;
        v8 = 1;
      }
      v14 = 109;
LABEL_40:
      v13 = v12;
      goto LABEL_41;
    }
    v18 = v10 == 1;
    v9 = -1;
    if (v10 == 1)
      v12 = -1;
    else
      v12 = 1;
  }
  else
  {
    v18 = v10 == 1;
    v8 = -1;
    if (v10 == 1)
      v12 = -1;
    else
      v12 = 1;
  }
  if (v18)
    v13 = a1[3];
  else
    v13 = -1;
  v14 = 115;
LABEL_41:
  *(_OWORD *)a5 = v19;
  *(_QWORD *)(a5 + 16) = v20;
  v15 = *(_OWORD *)v22;
  *(_OWORD *)(a5 + 24) = v21;
  *(_OWORD *)(a5 + 40) = v15;
  *(_OWORD *)(a5 + 56) = *(_OWORD *)&v22[16];
  *(_BYTE *)(a5 + 72) = v23;
  *(_BYTE *)(a5 + 128) = v27;
  v16 = v26;
  *(_OWORD *)(a5 + 96) = v25;
  *(_OWORD *)(a5 + 112) = v16;
  *(_OWORD *)(a5 + 80) = v24;
  *(_BYTE *)(a5 + 136) = v14;
  *(_BYTE *)(a5 + 137) = 0;
  *(_DWORD *)(a5 + 140) = v9;
  *(_DWORD *)(a5 + 144) = v8;
  *(_DWORD *)(a5 + 148) = v12;
  *(_DWORD *)(a5 + 152) = v13;
  result = *(__n128 *)a1;
  *(_OWORD *)(a5 + 156) = *(_OWORD *)a1;
  *(_DWORD *)(a5 + 172) = v9;
  *(_DWORD *)(a5 + 176) = v8;
  return result;
}

uint64_t sub_2233E3E84(uint64_t a1)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;

  if (!*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD *)a1;
    if (*(_BYTE *)(*(_QWORD *)a1 + 168))
    {
      v3 = *(float *)(v2 + 164);
    }
    else
    {
      sub_2233E2C74(*(_QWORD *)a1, *(float **)(v2 + 24), v2 + 32);
      v4 = **(_QWORD **)(v2 + 32);
      *(_QWORD *)(v2 + 160) = v4;
      *(_BYTE *)(v2 + 168) = 1;
      v3 = *((float *)&v4 + 1);
    }
    v5 = *(_QWORD *)(a1 + 8);
    v6 = (float)((float)(v3 - *(float *)(v5 + 4)) * *(float *)(v5 + 24)) + (float)*(uint64_t *)(v5 + 16);
    if (v6 >= 0.0)
      v7 = 0.5;
    else
      v7 = -0.5;
    v8 = v6 + v7;
    sub_2233DC31C(v6 + v7);
    v9 = ceilf(v8);
    v10 = floorf(v8);
    if (v8 >= 0.0)
      v9 = v10;
    *(_QWORD *)(a1 + 40) = (uint64_t)v9;
    v11 = (float)((float)(*(float *)(v2 + 160) - *(float *)v5) * *(float *)(v5 + 24)) + (float)*(uint64_t *)(v5 + 8);
    if (v11 >= 0.0)
      v12 = 0.5;
    else
      v12 = -0.5;
    v13 = v11 + v12;
    sub_2233DC31C(v11 + v12);
    v14 = ceilf(v13);
    v15 = floorf(v13);
    if (v13 >= 0.0)
      v14 = v15;
    *(_QWORD *)(a1 + 32) = (uint64_t)v14;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1 + 32;
}

double sub_2233E3FAC(uint64_t *a1, uint64_t *a2, uint64_t *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double result;
  double v19[2];
  double v20[2];
  double v21[2];
  double v22;
  double v23[2];
  double v24[2];
  double v25[2];
  double v26[2];
  double v27[2];
  double v28[2];

  v4 = (double)a1[1];
  v21[0] = (double)*a1;
  v21[1] = v4;
  v5 = (double)*a2;
  v6 = (double)a2[1];
  v20[0] = v5;
  v20[1] = v6;
  v7 = (double)a3[1];
  v19[0] = (double)*a3;
  v19[1] = v7;
  v8 = v21[0] - v19[0];
  v28[0] = v21[0] - v19[0];
  v9 = v6 - v7;
  v27[0] = v6 - v7;
  v10 = v4 - v7;
  v26[0] = v4 - v7;
  v11 = v5 - v19[0];
  v25[0] = v5 - v19[0];
  v12 = vabdd_f64(v21[0], v19[0]);
  v13 = vabdd_f64(v6, v7);
  v14 = vabdd_f64(v4, v7);
  v15 = vabdd_f64(v5, v19[0]);
  if (v12 < v13)
    v12 = v13;
  if (v12 < v14)
    v12 = v14;
  if (v12 < v15)
    v12 = v15;
  if (v12 < 1.0)
    v12 = 1.0;
  *a4 = v12;
  v16 = v8 * v9;
  v24[0] = v8 * v9;
  v17 = v11 * v10;
  result = v8 * v9 - v11 * v10;
  v22 = fabs(v8 * v9) + fabs(v11 * v10);
  v23[0] = v11 * v10;
  if (vabdd_f64(v8 * v9, v11 * v10) < v22 * 3.33066907e-16 && (v16 <= 0.0 || v17 > 0.0) && (v16 >= 0.0 || v17 < 0.0))
    return sub_2233DB8FC(v21, v20, v19, v28, v27, v26, v25, v24, v23, &v22);
  return result;
}

double sub_2233E40E4@<D0>(_QWORD **a1@<X0>, _QWORD **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  char *v21;
  int v22;
  char *v23;
  double *v24;
  BOOL v25;
  int v26;
  BOOL v27;
  int v28;
  double result;
  __int128 v30;
  __int128 v31;
  double v32;
  __int128 v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  int64x2_t v38;
  double v39;
  _BYTE v40[42];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v7 = a4 - a3;
  v8 = a4 - a3;
  v9 = a6 - a5;
  v10 = a6 - a5;
  v11 = a3 - a5;
  v38.i64[0] = a3 - a5;
  v38.i64[1] = a6 - a5;
  if (a6 - a5 < 0)
  {
    v11 = a5 - a3;
    v12 = a5 - a6;
    v38.i64[0] = a5 - a3;
    v38.i64[1] = a5 - a6;
LABEL_6:
    v39 = (double)v11 * 1000000.0 / (double)v12;
    v15 = a4 - a5;
    v35 = a4 - a5;
    v36 = a6 - a5;
    if (v10 < 0)
    {
      v15 = a5 - a4;
      v10 = a5 - a6;
      v35 = a5 - a4;
      v36 = a5 - a6;
    }
    v37 = (double)v15 * 1000000.0 / (double)v10;
    v13 = a5 - a3;
    *(_QWORD *)&v33 = a5 - a3;
    *((_QWORD *)&v33 + 1) = a4 - a3;
    if (v8 < 0)
      goto LABEL_4;
    goto LABEL_9;
  }
  v12 = a6 - a5;
  if (v10)
    goto LABEL_6;
  v39 = 0.0;
  v35 = a4 - a5;
  v36 = 0;
  v37 = 0.0;
  v13 = a5 - a3;
  *(_QWORD *)&v33 = a5 - a3;
  *((_QWORD *)&v33 + 1) = a4 - a3;
  if (v8 < 0)
  {
LABEL_4:
    v13 = -v13;
    v14 = a3 - a4;
    *(_QWORD *)&v33 = v13;
    *((_QWORD *)&v33 + 1) = a3 - a4;
    goto LABEL_10;
  }
LABEL_9:
  v14 = a4 - a3;
  if (!v8)
  {
    v16 = &v34;
    v34 = 0.0;
    v31 = (unint64_t)(a6 - a3);
    v32 = 0.0;
    if (a3 == a5)
      goto LABEL_13;
LABEL_19:
    if (a6 == a3)
    {
      v18 = 3;
      if (a4 != a5)
        goto LABEL_62;
      goto LABEL_21;
    }
    if (a6 <= a5)
    {
      if (a3 <= a5)
      {
        if (a6 <= a3)
          v18 = 2;
        else
          v18 = 4;
        if (a4 != a5)
          goto LABEL_62;
LABEL_21:
        v20 = 3;
        v19 = 1;
        v21 = (char *)&v33 + 8;
        if (a6 != a3)
          goto LABEL_22;
        goto LABEL_15;
      }
    }
    else if (a3 >= a5)
    {
      if (a6 >= a3)
        v18 = 2;
      else
        v18 = 4;
      if (a4 != a5)
        goto LABEL_62;
      goto LABEL_21;
    }
    v18 = 0;
    if (a4 != a5)
      goto LABEL_62;
    goto LABEL_21;
  }
LABEL_10:
  v16 = &v34;
  v34 = (double)v13 * 1000000.0 / (double)v14;
  v17 = a6 - a3;
  *(_QWORD *)&v31 = a6 - a3;
  *((_QWORD *)&v31 + 1) = a4 - a3;
  if (v8 < 0)
  {
    v17 = a3 - a6;
    v8 = a3 - a4;
    *(_QWORD *)&v31 = a3 - a6;
    *((_QWORD *)&v31 + 1) = a3 - a4;
  }
  v32 = (double)v17 * 1000000.0 / (double)v8;
  if (a3 != a5)
    goto LABEL_19;
LABEL_13:
  v18 = 1;
  v19 = 1;
  v20 = 1;
  if (a4 == a3)
  {
    v21 = (char *)&v33 + 8;
    if (a6 == a3)
      goto LABEL_15;
LABEL_22:
    if (a6 == a4)
    {
      v22 = 3;
      if (v18 != 3)
        goto LABEL_16;
    }
    else
    {
      if (a4 <= a3)
      {
        if (a6 <= a3)
        {
          if (a6 >= a4)
            v22 = 2;
          else
            v22 = 4;
          if (v18 != 3)
            goto LABEL_16;
          goto LABEL_24;
        }
      }
      else if (a6 >= a3)
      {
        if (a6 <= a4)
          v22 = 2;
        else
          v22 = 4;
        if (v18 != 3)
          goto LABEL_16;
        goto LABEL_24;
      }
      v22 = 0;
      if (v18 != 3)
        goto LABEL_16;
    }
LABEL_24:
    v38 = vdupq_n_s64(1uLL);
    v39 = 1000000.0;
    *(_QWORD *)&v31 = 0;
    v23 = (char *)&v31 + 8;
    v24 = &v32;
    goto LABEL_25;
  }
LABEL_62:
  if (a4 != a6)
  {
    if (a6 <= a5)
    {
      if (a4 <= a5)
      {
        if (a4 >= a6)
          v19 = 2;
        else
          v19 = 4;
        if (a3 != a5)
          goto LABEL_78;
LABEL_64:
        v20 = 1;
        v21 = (char *)&v33 + 8;
        if (a6 != a3)
          goto LABEL_22;
        goto LABEL_15;
      }
    }
    else if (a4 >= a5)
    {
      if (a4 <= a6)
        v19 = 2;
      else
        v19 = 4;
      if (a3 != a5)
        goto LABEL_78;
      goto LABEL_64;
    }
    v19 = 0;
    if (a3 != a5)
      goto LABEL_78;
    goto LABEL_64;
  }
  v19 = 3;
  if (a3 == a5)
    goto LABEL_64;
LABEL_78:
  if (a4 > a3)
  {
    if (a5 >= a3)
    {
      if (a4 >= a5)
        v20 = 2;
      else
        v20 = 4;
      v21 = (char *)&v33 + 8;
      if (a6 != a3)
        goto LABEL_22;
      goto LABEL_15;
    }
LABEL_86:
    v20 = 0;
    v21 = (char *)&v33 + 8;
    if (a6 != a3)
      goto LABEL_22;
    goto LABEL_15;
  }
  if (a5 > a3)
    goto LABEL_86;
  if (a4 <= a5)
    v20 = 2;
  else
    v20 = 4;
  v21 = (char *)&v33 + 8;
  if (a6 != a3)
    goto LABEL_22;
LABEL_15:
  v22 = 1;
  if (v18 == 3)
    goto LABEL_24;
LABEL_16:
  if (v18 != 1)
    goto LABEL_26;
  v38 = (int64x2_t)xmmword_2245F5410;
  v39 = 0.0;
  *(_QWORD *)&v33 = 0;
  v23 = (char *)&v33 + 8;
  v24 = &v34;
LABEL_25:
  *(_QWORD *)v23 = 1;
  *v24 = 0.0;
LABEL_26:
  if (v19 == 3)
  {
    v35 = 1;
    v36 = 1;
    v37 = 1000000.0;
    *(_QWORD *)&v31 = 1;
    v21 = (char *)&v31 + 8;
    v16 = &v32;
    goto LABEL_30;
  }
  if (v19 == 1)
  {
    v35 = 0;
    v36 = 1;
    v37 = 0.0;
    *(_QWORD *)&v33 = 1;
LABEL_30:
    *(_QWORD *)v21 = 1;
    *v16 = 1000000.0;
    goto LABEL_31;
  }
  if (!(v19 | v18) || v18 >= 4 && v19 >= 4)
  {
    memset(&v40[2], 0, 40);
    *(_OWORD *)(a7 + 24) = xmmword_2245F5410;
    *(_OWORD *)(a7 + 80) = xmmword_2245F5410;
    v30 = *(_OWORD *)&v40[16];
    *(_OWORD *)(a7 + 138) = *(_OWORD *)v40;
    *(_QWORD *)(a7 + 40) = 0;
    *(_QWORD *)(a7 + 48) = 0;
    *(_QWORD *)(a7 + 96) = 0;
    *(_QWORD *)(a7 + 104) = 0;
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 56) = 1;
    *(_QWORD *)(a7 + 64) = 0;
    *(_BYTE *)(a7 + 72) = 0;
    *(_QWORD *)(a7 + 112) = 1;
    *(_QWORD *)(a7 + 120) = 0;
    *(_BYTE *)(a7 + 128) = 0;
    *(_WORD *)(a7 + 136) = 100;
    *(_OWORD *)(a7 + 154) = v30;
    result = *(double *)&v40[26];
    *(_OWORD *)(a7 + 164) = *(_OWORD *)&v40[26];
    return result;
  }
LABEL_31:
  v25 = v7 <= 0;
  if (v7)
    v26 = -1;
  else
    v26 = 0;
  if (!v25)
    v26 = 1;
  v27 = v9 <= 0;
  if (v9)
    v28 = -1;
  else
    v28 = 0;
  if (!v27)
    v28 = 1;
  sub_2233E4654(a1, a2, v26 != v28, v18, v19, v20, v22, (uint64_t)&v38, a7, (uint64_t)&v35, &v33, &v31);
  return result;
}

void sub_2233E4654(_QWORD **a1@<X0>, _QWORD **a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int128 *a11, __int128 *a12)
{
  int v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int v20;
  _BOOL4 v21;
  unsigned int v22;
  int v23;
  int v25;
  unsigned int v26;
  _BOOL4 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  int v30;
  unsigned int v31;
  int v32;
  _BOOL4 v34;
  _BOOL4 v35;
  char v36;
  __int128 v37;
  __int128 v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  _BYTE v50[34];
  uint64_t v51;

  if ((a5 & 0xFFFFFFFD) == 1)
    v16 = 0;
  else
    v16 = -1;
  v17 = (a4 - 4) < 0xFFFFFFFD;
  v18 = (a4 & 0xFFFFFFFD) != 1;
  v19 = (a4 & 0xFFFFFFFD) != 1 || (a4 - 4) < 0xFFFFFFFD;
  if ((a4 - 4) <= 0xFFFFFFFC)
    v18 = 0;
  if (a5 == 2)
    v20 = 1;
  else
    v20 = v16;
  if (a5 == 2)
    v21 = v18;
  else
    v21 = (a4 - 4) < 0xFFFFFFFD;
  v22 = a5 - 1;
  v51 = *MEMORY[0x24BDAC8D0];
  if ((a5 & 0xFFFFFFFD) == 1)
    v23 = !v19;
  else
    v23 = v21;
  if ((a5 & 0xFFFFFFFD) != 1 || v22 >= 3)
    v25 = !v19;
  else
    v25 = v23 + 1;
  sub_2233E487C(a1, a2, a4, a5, a6, a7, a8, (uint64_t)&v40, a10, a11, a12);
  memset(&v50[2], 0, 32);
  v26 = a7 & 0xFFFFFFFD;
  v27 = (a6 - 4) < 0xFFFFFFFD;
  v28 = (a6 & 0xFFFFFFFD) != 1;
  v29 = (a6 & 0xFFFFFFFD) != 1 || (a6 - 4) < 0xFFFFFFFD;
  if ((a6 - 4) <= 0xFFFFFFFC)
    v28 = 0;
  v30 = !v29;
  if (a7 != 2)
    v28 = (a6 - 4) < 0xFFFFFFFD;
  v31 = a7 - 1;
  if (v26 == 1)
    v32 = v30;
  else
    v32 = v28;
  if (v26 == 1 && v31 < 3)
    v30 = v32 + 1;
  v34 = v23 == 0;
  if (v22 < 3)
    v34 = v17;
  v35 = v32 == 0;
  if (v31 >= 3)
    v27 = v35;
  if (v25 == 1 && v30 == 1 && v34 && v27)
  {
    if (a3)
    {
      if (v20)
        v36 = 102;
      else
        v36 = 116;
    }
    else
    {
      v36 = 97;
    }
  }
  else
  {
    v36 = 99;
    if (v25 == 2 && v30 == 2)
      v36 = 101;
  }
  *(_OWORD *)a9 = v40;
  *(_OWORD *)(a9 + 24) = v42;
  *(_OWORD *)(a9 + 40) = v43;
  *(_OWORD *)(a9 + 56) = v44;
  v37 = v48;
  *(_OWORD *)(a9 + 96) = v47;
  *(_OWORD *)(a9 + 112) = v37;
  *(_OWORD *)(a9 + 80) = v46;
  v38 = *(_OWORD *)v50;
  *(_OWORD *)(a9 + 154) = *(_OWORD *)&v50[16];
  if (v26 == 1)
    v39 = 0;
  else
    v39 = -1;
  if (a7 == 2)
    v39 = 1;
  *(_QWORD *)(a9 + 16) = v41;
  *(_BYTE *)(a9 + 72) = v45;
  *(_BYTE *)(a9 + 128) = v49;
  *(_BYTE *)(a9 + 136) = v36;
  *(_BYTE *)(a9 + 137) = a3;
  *(_WORD *)(a9 + 170) = *(_WORD *)&v50[32];
  *(_OWORD *)(a9 + 138) = v38;
  *(_DWORD *)(a9 + 172) = v20;
  *(_DWORD *)(a9 + 176) = v39;
}

void sub_2233E487C(_QWORD **a1@<X0>, _QWORD **a2@<X1>, int a3@<W3>, int a4@<W4>, int a5@<W5>, int a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, __int128 *a10, __int128 *a11)
{
  unsigned int v12;
  __int128 v13;
  __int128 *v14;
  __int128 *v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  __int128 *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  char *v32;
  __int128 *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  unint64_t v51;
  unint64_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  unint64_t v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  int v87;
  int v88;
  int v89;
  _QWORD **v90;
  _QWORD **v91;
  _QWORD **v92;
  unsigned int v93;
  _QWORD **v94;
  _QWORD **v95;
  _QWORD **v96;
  _QWORD **v97;
  _QWORD **v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  double v102;
  __int128 v103;
  double v104;
  uint64_t v105;

  v12 = 0;
  v105 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a8 = 0;
  v13 = xmmword_2245F5410;
  *(_OWORD *)(a8 + 24) = xmmword_2245F5410;
  v14 = (__int128 *)(a8 + 24);
  *(_QWORD *)(a8 + 40) = 0;
  *(_QWORD *)(a8 + 48) = 0;
  *(_QWORD *)(a8 + 56) = 1;
  *(_QWORD *)(a8 + 64) = 0;
  *(_BYTE *)(a8 + 72) = 0;
  *(_OWORD *)(a8 + 80) = xmmword_2245F5410;
  v15 = (__int128 *)(a8 + 80);
  *(_QWORD *)(a8 + 96) = 0;
  *(_QWORD *)(a8 + 104) = 0;
  *(_QWORD *)(a8 + 112) = 1;
  *(_QWORD *)(a8 + 120) = 0;
  *(_BYTE *)(a8 + 128) = 0;
  v101 = xmmword_2245F5410;
  v102 = 0.0;
  *(_QWORD *)&v103 = 0;
  *((_QWORD *)&v103 + 1) = 1;
  v104 = 0.0;
  if ((a3 - 1) <= 2)
  {
    *(_QWORD *)(a8 + 8) = **a1;
    v16 = atomic_load((unsigned __int8 *)&qword_25578BB30);
    if ((v16 & 1) == 0)
    {
      v90 = a1;
      v94 = a2;
      v68 = a6;
      v87 = a4;
      v83 = a5;
      v84 = a7;
      v69 = __cxa_guard_acquire(&qword_25578BB30);
      v13 = xmmword_2245F5410;
      a7 = v84;
      a5 = v83;
      a4 = v87;
      a6 = v68;
      v70 = v69;
      a1 = v90;
      a2 = v94;
      if (v70)
      {
        xmmword_25578BB18 = xmmword_2245F5410;
        qword_25578BB28 = 0;
        __cxa_guard_release(&qword_25578BB30);
        v13 = xmmword_2245F5410;
        a7 = v84;
        a5 = v83;
        a4 = v87;
        a1 = v90;
        a2 = v94;
        a6 = v68;
      }
    }
    *v14 = xmmword_25578BB18;
    *((_QWORD *)v14 + 2) = qword_25578BB28;
    *(_BYTE *)(a8 + 72) = 1;
    *(_OWORD *)(a8 + 48) = *(_OWORD *)a7;
    *(_QWORD *)(a8 + 64) = *(_QWORD *)(a7 + 16);
    v17 = atomic_load((unsigned __int8 *)&qword_25578BB30);
    if ((v17 & 1) == 0)
    {
      v91 = a1;
      v95 = a2;
      v71 = a6;
      v88 = a4;
      v72 = a5;
      v85 = v13;
      v73 = __cxa_guard_acquire(&qword_25578BB30);
      v13 = v85;
      a5 = v72;
      a4 = v88;
      a6 = v71;
      v74 = v73;
      a1 = v91;
      a2 = v95;
      if (v74)
      {
        xmmword_25578BB18 = v85;
        qword_25578BB28 = 0;
        __cxa_guard_release(&qword_25578BB30);
        v13 = v85;
        a5 = v72;
        a4 = v88;
        a1 = v91;
        a2 = v95;
        a6 = v71;
      }
    }
    v101 = xmmword_25578BB18;
    v102 = *(double *)&qword_25578BB28;
    v12 = 1;
    if (a5 != 2)
    {
LABEL_3:
      if ((a4 - 1) > 2)
        goto LABEL_14;
      goto LABEL_10;
    }
  }
  else if (a5 != 2)
  {
    goto LABEL_3;
  }
  v18 = a10;
  v19 = v12;
  *(_QWORD *)(a8 + 8 * v12 + 8) = **a2;
  v20 = a8 + 56 * v12 + 24;
  v21 = atomic_load((unsigned __int8 *)&qword_25578BB30);
  if ((v21 & 1) == 0)
  {
    v92 = a1;
    v96 = a2;
    v75 = a6;
    v89 = a4;
    v86 = v13;
    v76 = __cxa_guard_acquire(&qword_25578BB30);
    v20 = a8 + 56 * v12 + 24;
    v18 = a10;
    v19 = v12;
    a4 = v89;
    a6 = v75;
    v77 = v76;
    a1 = v92;
    a2 = v96;
    if (v77)
    {
      xmmword_25578BB18 = v86;
      qword_25578BB28 = 0;
      __cxa_guard_release(&qword_25578BB30);
      v20 = a8 + 56 * v12 + 24;
      v18 = a10;
      v19 = v12;
      a4 = v89;
      a1 = v92;
      a2 = v96;
      a6 = v75;
    }
  }
  v22 = a8 + 56 * v19;
  *(_BYTE *)(v22 + 72) = 1;
  v23 = *v18;
  *(_OWORD *)v20 = *v18;
  v24 = *((_QWORD *)v18 + 2);
  *(_QWORD *)(v20 + 16) = v24;
  *(_OWORD *)(v22 + 48) = xmmword_25578BB18;
  *(_QWORD *)(v22 + 64) = qword_25578BB28;
  v25 = (char *)&v101 + 24 * v19;
  *(_OWORD *)v25 = v23;
  *((_QWORD *)v25 + 2) = v24;
  ++v12;
  if ((a4 - 1) <= 2)
  {
LABEL_10:
    if (v12 <= 1)
    {
      v26 = a9;
      v27 = v12;
      *(_QWORD *)(a8 + 8 * v12 + 8) = *a1[1];
      v28 = a8 + 56 * v12 + 24;
      v29 = atomic_load((unsigned __int8 *)&qword_25578BB50);
      if ((v29 & 1) == 0)
      {
        v97 = a2;
        v78 = a6;
        v79 = __cxa_guard_acquire(&qword_25578BB50);
        v28 = a8 + 56 * v12 + 24;
        v27 = v12;
        v26 = a9;
        a6 = v78;
        a2 = v97;
        if (v79)
        {
          xmmword_25578BB38 = (__int128)vdupq_n_s64(1uLL);
          qword_25578BB48 = 0x412E848000000000;
          __cxa_guard_release(&qword_25578BB50);
          v28 = a8 + 56 * v12 + 24;
          v27 = v12;
          v26 = a9;
          a6 = v78;
          a2 = v97;
        }
      }
      v30 = a8 + 56 * v27;
      *(_BYTE *)(v30 + 72) = 1;
      *(_OWORD *)v28 = xmmword_25578BB38;
      *(_QWORD *)(v28 + 16) = qword_25578BB48;
      *(_OWORD *)(v30 + 48) = *(_OWORD *)v26;
      *(_QWORD *)(v30 + 64) = *(_QWORD *)(v26 + 16);
      v31 = atomic_load((unsigned __int8 *)&qword_25578BB50);
      if ((v31 & 1) == 0)
      {
        v93 = v27;
        v98 = a2;
        v80 = a6;
        v81 = __cxa_guard_acquire(&qword_25578BB50);
        v27 = v93;
        a2 = v98;
        a6 = v80;
        if (v81)
        {
          xmmword_25578BB38 = (__int128)vdupq_n_s64(1uLL);
          qword_25578BB48 = 0x412E848000000000;
          __cxa_guard_release(&qword_25578BB50);
          v27 = v93;
          a2 = v98;
          a6 = v80;
        }
      }
      v32 = (char *)&v101 + 24 * v27;
      *(_OWORD *)v32 = xmmword_25578BB38;
      *((_QWORD *)v32 + 2) = qword_25578BB48;
      ++v12;
    }
  }
LABEL_14:
  if (a6 == 2 && v12 <= 1)
  {
    v33 = a11;
    v34 = v12;
    *(_QWORD *)(a8 + 8 * v12 + 8) = *a2[1];
    v35 = a8 + 56 * v12 + 24;
    v36 = atomic_load((unsigned __int8 *)&qword_25578BB50);
    if ((v36 & 1) == 0)
    {
      v82 = __cxa_guard_acquire(&qword_25578BB50);
      v34 = v12;
      v35 = a8 + 56 * v12 + 24;
      v33 = a11;
      if (v82)
      {
        xmmword_25578BB38 = (__int128)vdupq_n_s64(1uLL);
        qword_25578BB48 = 0x412E848000000000;
        __cxa_guard_release(&qword_25578BB50);
        v34 = v12;
        v35 = a8 + 56 * v12 + 24;
        v33 = a11;
      }
    }
    v37 = a8 + 56 * v34;
    *(_BYTE *)(v37 + 72) = 1;
    v38 = *v33;
    *(_OWORD *)v35 = *v33;
    v39 = *((_QWORD *)v33 + 2);
    *(_QWORD *)(v35 + 16) = v39;
    *(_OWORD *)(v37 + 48) = xmmword_25578BB38;
    *(_QWORD *)(v37 + 64) = qword_25578BB48;
    v40 = (char *)&v101 + 24 * v34;
    *(_OWORD *)v40 = v38;
    *((_QWORD *)v40 + 2) = v39;
    ++v12;
  }
  if (v12 != 2)
    goto LABEL_45;
  if (vabdd_f64(v104, v102) >= 50.0)
  {
    if (v104 >= v102)
      goto LABEL_45;
    goto LABEL_44;
  }
  v100 = v103;
  sub_2233E5290((int64_t)&v100);
  v99 = v101;
  sub_2233E5290((int64_t)&v99);
  v41 = *((_QWORD *)&v100 + 1);
  v42 = (uint64_t)v100 / *((_QWORD *)&v100 + 1);
  v43 = (uint64_t)v100 % *((_QWORD *)&v100 + 1);
  v44 = *((_QWORD *)&v99 + 1);
  v45 = (uint64_t)v99 / *((_QWORD *)&v99 + 1);
  v46 = (uint64_t)v99 % *((_QWORD *)&v99 + 1);
  if ((uint64_t)v100 % *((_QWORD *)&v100 + 1) < 0)
  {
    v47 = ((unint64_t)(*((_QWORD *)&v100 + 1) + v43) >> 63)
        + (((*((_QWORD *)&v100 + 1) + v43) & ~((*((_QWORD *)&v100 + 1) + v43) >> 63))
         - (((unint64_t)(*((_QWORD *)&v100 + 1) + v43) >> 63)
          + *((_QWORD *)&v100 + 1)
          + v43))
        / *((_QWORD *)&v100 + 1)
        + 1;
    if (v47 < 4)
      goto LABEL_63;
    v43 += (v47 & 0xFFFFFFFFFFFFFFFCLL) * *((_QWORD *)&v100 + 1);
    v48 = 0uLL;
    v49 = (int64x2_t)(unint64_t)((uint64_t)v100 / *((_QWORD *)&v100 + 1));
    v50.i64[0] = -1;
    v50.i64[1] = -1;
    v51 = v47 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v49 = vaddq_s64(v49, v50);
      v48 = vaddq_s64(v48, v50);
      v51 -= 4;
    }
    while (v51);
    v42 = vaddvq_s64(vaddq_s64(v48, v49));
    if (v47 != (v47 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_63:
      do
      {
        v43 += *((_QWORD *)&v100 + 1);
        --v42;
      }
      while (v43 < 0);
    }
  }
  if (v46 < 0)
  {
    v52 = ((unint64_t)(*((_QWORD *)&v99 + 1) + v46) >> 63)
        + (((*((_QWORD *)&v99 + 1) + v46) & ~((*((_QWORD *)&v99 + 1) + v46) >> 63))
         - (((unint64_t)(*((_QWORD *)&v99 + 1) + v46) >> 63)
          + *((_QWORD *)&v99 + 1)
          + v46))
        / *((_QWORD *)&v99 + 1)
        + 1;
    if (v52 < 4)
      goto LABEL_64;
    v46 += (v52 & 0xFFFFFFFFFFFFFFFCLL) * *((_QWORD *)&v99 + 1);
    v53 = 0uLL;
    v54 = (int64x2_t)(unint64_t)((uint64_t)v99 / *((_QWORD *)&v99 + 1));
    v55.i64[0] = -1;
    v55.i64[1] = -1;
    v56 = v52 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v54 = vaddq_s64(v54, v55);
      v53 = vaddq_s64(v53, v55);
      v56 -= 4;
    }
    while (v56);
    v45 = vaddvq_s64(vaddq_s64(v53, v54));
    if (v52 != (v52 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_64:
      do
      {
        v46 += *((_QWORD *)&v99 + 1);
        --v45;
      }
      while (v46 < 0);
    }
  }
  v57 = v42 < v45;
  if (v42 != v45)
  {
LABEL_42:
    if (!v57)
      goto LABEL_45;
LABEL_44:
    v63 = *((_QWORD *)v14 + 6);
    v65 = v14[1];
    v64 = v14[2];
    v66 = *v14;
    v67 = *(_OWORD *)(a8 + 96);
    *v14 = *v15;
    v14[1] = v67;
    v14[2] = *(_OWORD *)(a8 + 112);
    *((_BYTE *)v14 + 48) = *(_BYTE *)(a8 + 128);
    *v15 = v66;
    *(_OWORD *)(a8 + 96) = v65;
    *(_OWORD *)(a8 + 112) = v64;
    *(_BYTE *)(a8 + 128) = v63;
    *(int8x16_t *)(a8 + 8) = vextq_s8(*(int8x16_t *)(a8 + 8), *(int8x16_t *)(a8 + 8), 8uLL);
    goto LABEL_45;
  }
  v58 = 0;
  do
  {
    v59 = v43;
    v60 = v46;
    v58 ^= 1u;
    if (!v43 || !v46)
    {
      if (v43 != v46 && (v58 != 0) != (v43 != 0))
        goto LABEL_44;
      goto LABEL_45;
    }
    v61 = v41 / v43;
    v43 = v41 % v43;
    v62 = v44 / v46;
    v46 = v44 % v46;
    v44 = v60;
    v41 = v59;
  }
  while (v61 == v62);
  v57 = v61 < v62;
  if (!v58)
    goto LABEL_42;
  if (v61 > v62)
    goto LABEL_44;
LABEL_45:
  *(_QWORD *)a8 = v12;
}

BOOL sub_2233E5070(double *a1, double *a2)
{
  double v2;
  double v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  unint64_t v15;
  unint64_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 result;
  __int128 v27;
  __int128 v28;

  v2 = a1[2];
  v3 = a2[2];
  if (vabdd_f64(v2, v3) >= 50.0)
    return v2 < v3;
  v28 = *(_OWORD *)a1;
  sub_2233E5290((int64_t)&v28);
  v27 = *(_OWORD *)a2;
  sub_2233E5290((int64_t)&v27);
  v5 = *((_QWORD *)&v28 + 1);
  v6 = (uint64_t)v28 / *((_QWORD *)&v28 + 1);
  v7 = (uint64_t)v28 % *((_QWORD *)&v28 + 1);
  v8 = *((_QWORD *)&v27 + 1);
  v9 = (uint64_t)v27 / *((_QWORD *)&v27 + 1);
  v10 = (uint64_t)v27 % *((_QWORD *)&v27 + 1);
  if ((uint64_t)v28 % *((_QWORD *)&v28 + 1) < 0)
  {
    v11 = ((unint64_t)(*((_QWORD *)&v28 + 1) + v7) >> 63)
        + (((*((_QWORD *)&v28 + 1) + v7) & ~((*((_QWORD *)&v28 + 1) + v7) >> 63))
         - (((unint64_t)(*((_QWORD *)&v28 + 1) + v7) >> 63)
          + *((_QWORD *)&v28 + 1)
          + v7))
        / *((_QWORD *)&v28 + 1)
        + 1;
    if (v11 < 4)
      goto LABEL_29;
    v7 += (v11 & 0xFFFFFFFFFFFFFFFCLL) * *((_QWORD *)&v28 + 1);
    v12 = 0uLL;
    v13 = (int64x2_t)(unint64_t)((uint64_t)v28 / *((_QWORD *)&v28 + 1));
    v14.i64[0] = -1;
    v14.i64[1] = -1;
    v15 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v13 = vaddq_s64(v13, v14);
      v12 = vaddq_s64(v12, v14);
      v15 -= 4;
    }
    while (v15);
    v6 = vaddvq_s64(vaddq_s64(v12, v13));
    if (v11 != (v11 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        v7 += *((_QWORD *)&v28 + 1);
        --v6;
      }
      while (v7 < 0);
    }
  }
  if (v10 < 0)
  {
    v16 = ((unint64_t)(*((_QWORD *)&v27 + 1) + v10) >> 63)
        + (((*((_QWORD *)&v27 + 1) + v10) & ~((*((_QWORD *)&v27 + 1) + v10) >> 63))
         - (((unint64_t)(*((_QWORD *)&v27 + 1) + v10) >> 63)
          + *((_QWORD *)&v27 + 1)
          + v10))
        / *((_QWORD *)&v27 + 1)
        + 1;
    if (v16 < 4)
      goto LABEL_30;
    v10 += (v16 & 0xFFFFFFFFFFFFFFFCLL) * *((_QWORD *)&v27 + 1);
    v17 = 0uLL;
    v18 = (int64x2_t)(unint64_t)((uint64_t)v27 / *((_QWORD *)&v27 + 1));
    v19.i64[0] = -1;
    v19.i64[1] = -1;
    v20 = v16 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v18 = vaddq_s64(v18, v19);
      v17 = vaddq_s64(v17, v19);
      v20 -= 4;
    }
    while (v20);
    v9 = vaddvq_s64(vaddq_s64(v17, v18));
    if (v16 != (v16 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        v10 += *((_QWORD *)&v27 + 1);
        --v9;
      }
      while (v10 < 0);
    }
  }
  if (v6 != v9)
    return v6 < v9;
  v21 = 0;
  while (1)
  {
    v22 = v7;
    v23 = v10;
    v21 ^= 1u;
    if (!v7 || !v10)
      break;
    v24 = v5 / v7;
    v7 = v5 % v7;
    v25 = v8 / v10;
    v10 = v8 % v10;
    v8 = v23;
    v5 = v22;
    if (v24 != v25)
    {
      result = v24 > v25;
      if (!v21)
        return v24 < v25;
      return result;
    }
  }
  if (v7 == v10)
    return 0;
  else
    return (v21 != 0) ^ (v7 != 0);
}

int64_t sub_2233E5290(int64_t result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  std::logic_error v7;

  v1 = (_QWORD *)(result + 8);
  if (!*(_QWORD *)(result + 8))
  {
    std::logic_error::logic_error(&v7, "bad rational: zero denominator");
    v7.__vftable = (std::logic_error_vtbl *)off_24EC36578;
    v5.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/C"
                         "ontents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/loca"
                         "l/include/boost/rational.hpp";
    v5.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
    v6 = 892;
    sub_2233E53EC(&v7, &v5);
  }
  v2 = (uint64_t *)result;
  if (*(_QWORD *)result)
  {
    result = sub_2233E544C((int64_t *)result, (uint64_t *)(result + 8));
    v3 = *v2 / result;
    v4 = v2[1] / result;
    *v2 = v3;
    v2[1] = v4;
    if (v4 == 0x8000000000000000)
    {
      std::logic_error::logic_error(&v7, "bad rational: non-zero singular denominator");
      v7.__vftable = (std::logic_error_vtbl *)off_24EC36578;
      v5.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app"
                           "/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/"
                           "local/include/boost/rational.hpp";
      v5.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
      v6 = 906;
      sub_2233E53EC(&v7, &v5);
    }
    if (v4 < 0)
    {
      *v2 = -v3;
      *v1 = -v4;
    }
  }
  else
  {
    *v1 = 1;
  }
  return result;
}

void sub_2233E53EC(const std::logic_error *a1, int8x16_t *a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_2233E5568((uint64_t)exception, a1, a2);
  __cxa_throw(exception, (struct type_info *)&unk_24EC36478, (void (*)(void *))sub_2233E55D0);
}

void sub_2233E5434(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_2233E544C(int64_t *a1, uint64_t *a2)
{
  int64_t v2;
  unint64_t result;
  uint64_t v4;
  int64_t v5;
  unsigned int v6;
  int64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;

  v2 = *a1;
  if (*a1 == 0x8000000000000000)
  {
    v12 = (uint64_t)0x8000000000000000 % *a2;
    return sub_2233E544C(&v12);
  }
  else
  {
    v4 = *a2;
    if (*a2 == 0x8000000000000000)
    {
      v12 = (uint64_t)0x8000000000000000 % v2;
      return ((uint64_t (*)(void))sub_2233E544C)();
    }
    else
    {
      if (v2 < 0)
        v2 = -v2;
      if (v4 >= 0)
        v5 = *a2;
      else
        v5 = -v4;
      if (v2 >= v5)
        result = v5;
      else
        result = v2;
      if (v2 <= v5)
        v2 = v5;
      if (v2)
      {
        if (result)
        {
          v6 = __clz(__rbit64(v2));
          v7 = (unint64_t)v2 >> v6;
          v8 = __clz(__rbit64(result));
          v9 = result >> v8;
          if (v6 < v8)
            LOBYTE(v8) = v6;
          if (v9 < 2)
          {
LABEL_28:
            if (v9 == 1)
              v7 = 1;
          }
          else
          {
            while (1)
            {
              v10 = v7 % v9;
              v7 = v9 - v7 % v9;
              if (!v10)
                break;
              v11 = v10 >> __clz(__rbit64(v10));
              v7 >>= __clz(__rbit64(v7));
              if (v11 >= v7)
                v9 = v7;
              else
                v9 = v11;
              if (v11 > v7)
                v7 = v11;
              if ((uint64_t)v9 <= 1)
                goto LABEL_28;
            }
          }
          return v7 << v8;
        }
        else
        {
          return v2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2233E5568(uint64_t a1, const std::logic_error *a2, int8x16_t *a3)
{
  *(_QWORD *)a1 = &unk_24EC36548;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_24EC364D0;
  *(_QWORD *)(a1 + 8) = &unk_24EC36500;
  *(_QWORD *)(a1 + 24) = &unk_24EC36528;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 40) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

uint64_t sub_2233E55D0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24EC365A0;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  MEMORY[0x227684388](a1 + 8);
  return a1;
}

uint64_t sub_2233E5628(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24EC36548;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = off_24EC36578;
  *(_QWORD *)(v2 + 24) = &unk_24EC365A0;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_24EC364D0;
  *(_QWORD *)(v2 + 8) = &unk_24EC36500;
  *(_QWORD *)(v2 + 24) = &unk_24EC36528;
  sub_2233E5A54(v2 + 24, a1 + 24);
  return v2;
}

void sub_2233E5740(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_2233E599C((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24EC36478, (void (*)(void *))sub_2233E55D0);
}

void sub_2233E577C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2233E5790(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24EC365A0;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  MEMORY[0x227684388](a1 + 8);
  JUMPOUT(0x227684CE8);
}

void sub_2233E57F8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = &unk_24EC365A0;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
      *(_QWORD *)(a1 + 24) = 0;
  }
  JUMPOUT(0x227684388);
}

void sub_2233E5848(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = &unk_24EC365A0;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 24) = 0;
  MEMORY[0x227684388](a1);
  JUMPOUT(0x227684CE8);
}

void sub_2233E58B4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24EC365A0;
  v2 = a1[1];
  if (v2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
      a1[1] = 0;
  }
  JUMPOUT(0x227684388);
}

void sub_2233E5904(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24EC365A0;
  v2 = a1[1];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    a1[1] = 0;
  MEMORY[0x227684388](a1 - 2);
  JUMPOUT(0x227684CE8);
}

void sub_2233E5978()
{
  MEMORY[0x227684388]();
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2233E599C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24EC36548;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = off_24EC36578;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_24EC365A0;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_24EC364D0;
  *(_QWORD *)(a1 + 8) = &unk_24EC36500;
  *(_QWORD *)(a1 + 24) = &unk_24EC36528;
  return a1;
}

uint64_t sub_2233E5A54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    v5 = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    result = *(_QWORD *)(a1 + 8);
    if (!result)
      goto LABEL_9;
    goto LABEL_8;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
  v5 = v7;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
LABEL_8:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
LABEL_9:
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_2233E5B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

float sub_2233E5B8C(uint64_t a1, float *a2, float **a3, float **a4)
{
  float v4;
  float v5;
  float v6;
  double v7;
  float v8;
  float v9;
  float v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  float v22;
  float v23;
  float *v24;
  float result;
  float v26;
  float v27;
  float *v28;

  v5 = *(float *)a1;
  v4 = *(float *)(a1 + 4);
  v6 = (float)(v5 * v5) + (float)(v4 * v4);
  v7 = v6;
  v9 = *(float *)(a1 + 8);
  v8 = *(float *)(a1 + 12);
  v10 = (float)(v9 * v9) + (float)(v8 * v8);
  v11 = v10;
  if (v6 >= v10)
    v12 = v6;
  else
    v12 = v10;
  if (v12 <= 0.0)
    goto LABEL_12;
  v13 = vabdd_f64(0.5, *(double *)(a1 + 56) / 1000000.0);
  v14 = v13 + v13;
  v15 = vabdd_f64(0.5, *(double *)(a1 + 32) / 1000000.0);
  v16 = v15 + v15;
  v17 = 1.0 - v7 / v12;
  v18 = 1.0 - v11 / v12;
  v19 = v16 <= 1.0 ? v16 * 5.0 : 5.0;
  v20 = v17 + v19;
  v21 = v14 <= 1.0 ? v14 * 5.0 : 5.0;
  if (v20 <= v18 + v21)
  {
    v26 = (float)*(uint64_t *)(a1 + 40);
    v27 = (float)*(uint64_t *)(a1 + 48);
    v28 = *a4;
    *a2 = (float)((float)(v9 * v26) / v27) + **a4;
    result = (float)((float)(v8 * v26) / v27) + v28[1];
    a2[1] = result;
  }
  else
  {
LABEL_12:
    v22 = (float)*(uint64_t *)(a1 + 16);
    v23 = (float)*(uint64_t *)(a1 + 24);
    v24 = *a3;
    *a2 = (float)((float)(v5 * v22) / v23) + **a3;
    result = (float)((float)(v4 * v22) / v23) + v24[1];
    a2[1] = result;
  }
  return result;
}

uint64_t sub_2233E5CAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  double v6;
  uint64_t result;
  double v8;
  double v9;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(uint64_t **)(v1 + 16);
  v4 = *(uint64_t **)(v1 + 24);
  v5 = *(uint64_t **)(v2 + 24);
  v9 = 1.0;
  v6 = sub_2233E3FAC(v3, v4, v5, &v9);
  if (v6 == 0.0)
    return 0;
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v6 > 0.0)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v8 = fabs(v6);
    if (v6 > 0.0)
      result = 1;
    else
      result = 0xFFFFFFFFLL;
    if (v8 <= v9 * 2.22044605e-16)
      return 0;
  }
  return result;
}

void sub_2233E5D44(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x15;
  v4 = v2 - 21;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_223174E94();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0xFC0uLL);
      sub_22323CCA0((char **)a1, &v89);
      return;
    }
    v89 = operator new(0xFC0uLL);
    sub_22323CE2C((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFC0uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_223174E94();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_223174E94();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_2233E6284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2233E62A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2233E62B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2233E62CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2233E62E4(float *a1, float *a2, float *a3, uint64_t a4)
{
  float v5;
  float v6;
  float v7;
  _BOOL4 v8;
  _BOOL4 v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  BOOL v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v20;
  float v21;
  float v22;
  float v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  int v35;
  double v38;
  _BOOL8 result;
  double v40;
  double v41;

  v5 = *a1;
  v6 = *a2;
  v7 = *a3;
  if (*a2 != *a1)
  {
    if ((LODWORD(v6) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v5) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    {
      v8 = 0;
      if (v7 != v5)
        goto LABEL_24;
    }
    else
    {
      v15 = vabds_f32(v6, v5);
      v16 = fabsf(v6);
      v17 = fabsf(v5);
      if (v16 < v17)
        v16 = v17;
      if (v16 >= 1.0)
        v18 = v16 * 0.00000011921;
      else
        v18 = 0.00000011921;
      v8 = v15 <= v18;
      if (v7 != v5)
        goto LABEL_24;
    }
LABEL_3:
    v9 = 1;
    if (v8)
    {
LABEL_4:
      v10 = a1[1];
      v11 = a2[1];
      v12 = a3[1];
      v13 = v11 > v10 || v12 < v10;
      if (!v13 || (v11 >= v10 ? (v14 = v12 > v10) : (v14 = 1), !v14))
        *(_BYTE *)(a4 + 4) = 1;
      return *(_BYTE *)(a4 + 4) == 0;
    }
    goto LABEL_36;
  }
  v8 = 1;
  if (v7 == v5)
    goto LABEL_3;
LABEL_24:
  if ((LODWORD(v7) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v5) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v20 = vabds_f32(v7, v5);
    v21 = fabsf(v7);
    v22 = fabsf(v5);
    if (v21 < v22)
      v21 = v22;
    if (v21 >= 1.0)
      v23 = v21 * 0.00000011921;
    else
      v23 = 0.00000011921;
    v9 = v20 <= v23;
    if (v8 && v9)
      goto LABEL_4;
LABEL_36:
    if (v8)
      goto LABEL_37;
    if (v9)
    {
      v24 = 1;
      v25 = v6 <= v5;
      v26 = -1;
      goto LABEL_40;
    }
    goto LABEL_58;
  }
  if (v8)
  {
LABEL_37:
    v24 = -1;
    v25 = v7 <= v5;
    v26 = 1;
LABEL_40:
    if (v25)
      v27 = v24;
    else
      v27 = v26;
    if (v8)
      v28 = a2;
    else
      v28 = a3;
    v29 = a1[1];
    v30 = v28[1];
    if (v29 != v30)
    {
      if ((LODWORD(v29) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v30) & 0x7FFFFFFFu) > 0x7F7FFFFF)
        goto LABEL_55;
      v31 = vabds_f32(v29, v30);
      v32 = fabsf(v29);
      v33 = fabsf(v30);
      if (v32 < v33)
        v32 = v33;
      v34 = v32 >= 1.0 ? v32 * 0.00000011921 : 0.00000011921;
      if (v31 > v34)
      {
LABEL_55:
        if (v29 >= v30)
          v35 = v27;
        else
          v35 = -v27;
        goto LABEL_80;
      }
    }
    goto LABEL_70;
  }
LABEL_58:
  if (v6 < v5 && v7 > v5)
  {
    v27 = 2;
    goto LABEL_69;
  }
  if (v6 > v5 && v7 < v5)
  {
    v27 = -2;
LABEL_69:
    v41 = 1.0;
    v38 = sub_2233DB7C4(a2, a3, a1, &v41);
    if (v38 != 0.0)
    {
      if ((*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v38 > 0.0)
          v35 = 1;
        else
          v35 = -1;
      }
      else
      {
        v40 = fabs(v38);
        if (v38 > 0.0)
          v35 = 1;
        else
          v35 = -1;
        if (v40 <= v41 * 2.22044605e-16)
          goto LABEL_70;
      }
LABEL_80:
      if (v27 * v35 >= 1)
        *(_DWORD *)a4 += v27;
      return *(_BYTE *)(a4 + 4) == 0;
    }
LABEL_70:
    result = 0;
    *(_BYTE *)(a4 + 4) = 1;
    *(_DWORD *)a4 = 0;
    return result;
  }
  return *(_BYTE *)(a4 + 4) == 0;
}

uint64_t sub_2233E65B4(float *a1, uint64_t **a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  float v7;
  uint64_t *v8;
  uint64_t *v9;
  int8x16_t v10;
  int32x2_t v11;
  uint64_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  float32x2_t *v24;
  float32x2_t *v25;
  float32x2_t *v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  int8x8_t v31;
  int8x8_t v32;
  __int128 v33;
  uint64_t **v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t **v38;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t **v46;
  uint64_t **v47;
  uint64_t **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t **v54;
  uint64_t **v55;
  uint64_t **v56;
  uint64_t **v57;
  uint64_t **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  void *__p;
  uint64_t **v69;
  uint64_t v70;
  void *v71;
  uint64_t **v72;
  uint64_t v73;
  float v74[2];
  uint64_t v75;
  uint64_t v76;
  float v77;
  int v78;
  int8x16_t v79;
  char v80[16];
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)a1 + 1);
  v7 = (float)(*a1 + a1[2]) * 0.5;
  v76 = *(_QWORD *)a1;
  v78 = HIDWORD(v6);
  v74[1] = *((float *)&v76 + 1);
  v75 = v6;
  v77 = v7;
  v74[0] = v7;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  __p = 0;
  v69 = 0;
  v70 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  sub_2233E6B98((float *)&v76, v74, a2, &v71, (char **)&__p, (char **)&v65);
  v8 = v65;
  v9 = v66;
  if (v65 != v66)
  {
    v10 = (int8x16_t)xmmword_2245F53F0;
    v11 = vdup_n_s32(0x7F7FFFFFu);
    v12 = v65;
    v13 = (int8x16_t)xmmword_2245F53F0;
    do
    {
      v23 = *v12;
      if (*(_BYTE *)(*v12 + 24))
      {
        v15.i64[0] = *(_QWORD *)(v23 + 8);
        v14.i64[0] = *(_QWORD *)(v23 + 16);
      }
      else
      {
        v24 = **(float32x2_t ***)v23;
        v25 = *(float32x2_t **)(*(_QWORD *)v23 + 8);
        if (v24 == v25)
        {
          v14.i64[0] = 0x80000000800000;
          *(int32x2_t *)v15.f32 = v11;
        }
        else
        {
          v27 = *v24;
          v26 = v24 + 1;
          v28 = v27;
          *(float32x2_t *)v14.i8 = v27;
          if (v26 == v25)
          {
            *(float32x2_t *)v15.f32 = v28;
          }
          else
          {
            v29 = v28;
            *(float32x2_t *)v15.f32 = v28;
            do
            {
              v30 = *v26++;
              v31 = (int8x8_t)vcgt_f32(v29, v30);
              v32 = (int8x8_t)vcgt_f32(v30, v28);
              *(int8x8_t *)v15.f32 = vbsl_s8(v31, (int8x8_t)v30, *(int8x8_t *)v15.f32);
              v29 = (float32x2_t)vbsl_s8(v31, (int8x8_t)v30, (int8x8_t)v29);
              *(int8x8_t *)v14.i8 = vbsl_s8(v32, (int8x8_t)v30, *(int8x8_t *)v14.i8);
              v28 = (float32x2_t)vbsl_s8(v32, (int8x8_t)v30, (int8x8_t)v28);
            }
            while (v26 != v25);
          }
        }
        *(_QWORD *)&v33 = v15.i64[0];
        *((_QWORD *)&v33 + 1) = v14.i64[0];
        *(_OWORD *)(v23 + 8) = v33;
        *(_BYTE *)(v23 + 24) = 1;
      }
      v16.i64[0] = v15.i64[0];
      v16.i64[1] = v15.i64[0];
      v14.i64[1] = v14.i64[0];
      v17.i64[0] = v10.i64[0];
      v17.i64[1] = v15.i64[0];
      v15.i64[1] = vextq_s8(v10, v10, 8uLL).u64[0];
      v18 = (int8x16_t)vcgtq_f32(v17, v15);
      v19 = vbslq_s8(v18, v16, v10);
      v20.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v19, (float32x4_t)v14)).u32[0];
      v20.i32[1] = vmovn_s32(vcgtq_f32(*(float32x4_t *)&v14, *(float32x4_t *)&v19)).i32[1];
      v21 = vbslq_s8(v18, v16, v13);
      v22 = (int8x16_t)vmovl_s16(v20);
      v13 = vbslq_s8(v22, v14, v21);
      v10 = vbslq_s8(v22, v14, v19);
      ++v12;
    }
    while (v12 != v9);
    v79 = v13;
    if (a3 > 0x63 || (unint64_t)((char *)v9 - (char *)v8) < 0x79)
    {
      v36 = v8 + 2;
      v37 = (uint64_t **)v8;
      while (1)
      {
        v38 = v37 + 1;
        if (v37 + 1 != (uint64_t **)v9 && *(_BYTE *)a4 == 0)
        {
          v40 = v36;
LABEL_32:
          v41 = **v37;
          v42 = *(_QWORD *)*(v40 - 1);
          v43 = *(_QWORD *)(a4 + 8);
          strcpy(v80, "FFFFFFFFF");
          sub_2233E9788(v41, v42, (unsigned __int8 *)v80, v43);
          if (!v80[9])
          {
            v44 = v80[0] != 84 && v80[0] - 48 >= 0xA;
            if (!v44
              || v80[1] == 84
              || v80[1] - 48 <= 9
              || v80[3] == 84
              || v80[3] - 48 < 0xA)
            {
              *(_BYTE *)a4 = 1;
              goto LABEL_45;
            }
          }
          while (v40 != v9)
          {
            ++v40;
            if (!*(_BYTE *)a4)
              goto LABEL_32;
          }
        }
        ++v36;
        ++v37;
        if (v38 == (uint64_t **)v9)
          goto LABEL_17;
      }
    }
    if (!sub_2233E7464((float *)v79.i32, &v65, a3 + 1, a4))
      goto LABEL_45;
LABEL_17:
    if (!sub_2233E727C((float *)v79.i32, &v65, (uint64_t)&v71, a3, a4)
      || (sub_2233E727C((float *)v79.i32, &v65, (uint64_t)&__p, a3, a4) & 1) == 0)
    {
LABEL_45:
      v45 = 0;
      if (v8)
        goto LABEL_97;
      goto LABEL_98;
    }
  }
  v35 = (uint64_t **)v71;
  v34 = v72;
  if (a3 > 0x63 || (unint64_t)((char *)v72 - (_BYTE *)v71) < 0x79)
  {
    if (v71 != v72)
    {
      v46 = (uint64_t **)((char *)v71 + 16);
      do
      {
        v47 = v35 + 1;
        if (v35 + 1 != v34 && *(_BYTE *)a4 == 0)
        {
          v49 = v46;
LABEL_57:
          v50 = **v35;
          v51 = **(v49 - 1);
          v52 = *(_QWORD *)(a4 + 8);
          strcpy(v79.i8, "FFFFFFFFF");
          sub_2233E9788(v50, v51, (unsigned __int8 *)&v79, v52);
          if (!v79.i8[9])
          {
            v53 = v79.u8[0] != 84 && v79.u8[0] - 48 >= 0xA;
            if (!v53
              || v79.u8[1] == 84
              || v79.u8[1] - 48 <= 9
              || v79.u8[3] == 84
              || v79.u8[3] - 48 < 0xA)
            {
LABEL_95:
              v45 = 0;
              *(_BYTE *)a4 = 1;
LABEL_96:
              if (v8)
                goto LABEL_97;
              goto LABEL_98;
            }
          }
          while (v49 != v34)
          {
            ++v49;
            if (!*(_BYTE *)a4)
              goto LABEL_57;
          }
        }
        ++v46;
        ++v35;
      }
      while (v47 != v34);
    }
  }
  else if (!sub_2233E7464((float *)&v76, (uint64_t **)&v71, a3 + 1, a4))
  {
    goto LABEL_45;
  }
  v55 = (uint64_t **)__p;
  v54 = v69;
  if (a3 > 0x63 || (unint64_t)((char *)v69 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v69)
    {
      v56 = (uint64_t **)((char *)__p + 16);
      while (1)
      {
        v57 = v55 + 1;
        if (v55 + 1 != v54 && *(_BYTE *)a4 == 0)
        {
          v59 = v56;
LABEL_83:
          v60 = **v55;
          v61 = **(v59 - 1);
          v62 = *(_QWORD *)(a4 + 8);
          strcpy(v79.i8, "FFFFFFFFF");
          sub_2233E9788(v60, v61, (unsigned __int8 *)&v79, v62);
          if (!v79.i8[9])
          {
            v63 = v79.u8[0] != 84 && v79.u8[0] - 48 >= 0xA;
            if (!v63
              || v79.u8[1] == 84
              || v79.u8[1] - 48 <= 9
              || v79.u8[3] == 84
              || v79.u8[3] - 48 < 0xA)
            {
              goto LABEL_95;
            }
          }
          while (v59 != v54)
          {
            ++v59;
            if (!*(_BYTE *)a4)
              goto LABEL_83;
          }
        }
        ++v56;
        v45 = 1;
        ++v55;
        if (v57 == v54)
          goto LABEL_96;
      }
    }
    v45 = 1;
    if (v8)
LABEL_97:
      operator delete(v8);
  }
  else
  {
    v45 = sub_2233E7464(v74, (uint64_t **)&__p, a3 + 1, a4);
    if (v8)
      goto LABEL_97;
  }
LABEL_98:
  if (__p)
    operator delete(__p);
  if (v71)
    operator delete(v71);
  return v45;
}

void sub_2233E6B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v18;
  void *v19;

  if (v16)
  {
    operator delete(v16);
    v18 = __p;
    if (!__p)
    {
LABEL_3:
      v19 = a16;
      if (!a16)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v18 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v18);
  v19 = a16;
  if (!a16)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

void sub_2233E6B98(float *a1, float *a2, uint64_t **a3, _QWORD *a4, char **a5, char **a6)
{
  uint64_t *v6;
  uint64_t **v8;
  float *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  int8x16_t v15;
  uint64_t *v16;
  uint64_t v17;
  int8x16_t v18;
  uint64_t v19;
  float32x4_t v20;
  int16x4_t v21;
  int8x16_t v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  int8x16_t v27;
  uint64_t *v28;
  uint64_t v29;
  int8x16_t v30;
  uint64_t v31;
  float32x4_t v32;
  int16x4_t v33;
  int8x16_t v34;
  char **v35;
  unint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  float *v51;
  uint64_t **v52;
  uint64_t **v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  uint64_t *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _OWORD *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  char *v82;
  char *v83;
  unint64_t v84;
  char **v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  _OWORD *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  _OWORD *v99;
  char *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;

  v6 = *a3;
  if (*a3 != a3[1])
  {
    v8 = a3;
    v10 = a1;
    v11 = xmmword_2245F53F0;
    do
    {
      v12 = *v6;
      if (*(_BYTE *)(*v6 + 24))
      {
        if (*(float *)(v12 + 16) < *v10)
          goto LABEL_24;
        goto LABEL_13;
      }
      v13 = **(uint64_t ***)v12;
      v14 = *(uint64_t **)(*(_QWORD *)v12 + 8);
      v15 = (int8x16_t)v11;
      if (v13 != v14)
      {
        v17 = *v13;
        v16 = v13 + 1;
        v18.i64[0] = v17;
        v18.i64[1] = v17;
        if (v16 == v14)
        {
          *(int8x16_t *)(v12 + 8) = v18;
          *(_BYTE *)(v12 + 24) = 1;
          if (*(float *)&v18.i32[2] < *v10)
            goto LABEL_24;
          goto LABEL_13;
        }
        v15 = v18;
        do
        {
          v19 = *v16++;
          v20.i64[0] = v19;
          v20.i64[1] = v19;
          v21.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v18, v20)).u32[0];
          v21.i32[1] = vmovn_s32(vcgtq_f32(v20, *(float32x4_t *)&v18)).i32[1];
          v22 = (int8x16_t)vmovl_s16(v21);
          v15 = vbslq_s8(v22, (int8x16_t)v20, v15);
          v18 = vbslq_s8(v22, (int8x16_t)v20, v18);
        }
        while (v16 != v14);
      }
      *(int8x16_t *)(v12 + 8) = v15;
      *(_BYTE *)(v12 + 24) = 1;
      if (*(float *)&v15.i32[2] < *v10)
        goto LABEL_24;
LABEL_13:
      if (*(float *)(v12 + 8) <= v10[2] && *(float *)(v12 + 20) >= v10[1] && *(float *)(v12 + 12) <= v10[3])
      {
        v23 = 1;
        v24 = *v6;
        if (*(_BYTE *)(*v6 + 24))
          goto LABEL_25;
        goto LABEL_17;
      }
LABEL_24:
      v23 = 0;
      v24 = *v6;
      if (*(_BYTE *)(*v6 + 24))
      {
LABEL_25:
        if (*(float *)(v24 + 16) < *a2)
          goto LABEL_42;
        goto LABEL_26;
      }
LABEL_17:
      v25 = **(uint64_t ***)v24;
      v26 = *(uint64_t **)(*(_QWORD *)v24 + 8);
      v27 = (int8x16_t)v11;
      if (v25 != v26)
      {
        v29 = *v25;
        v28 = v25 + 1;
        v30.i64[0] = v29;
        v30.i64[1] = v29;
        if (v28 == v26)
        {
          *(int8x16_t *)(v24 + 8) = v30;
          *(_BYTE *)(v24 + 24) = 1;
          if (*(float *)&v30.i32[2] < *a2)
            goto LABEL_42;
          goto LABEL_26;
        }
        v27 = v30;
        do
        {
          v31 = *v28++;
          v32.i64[0] = v31;
          v32.i64[1] = v31;
          v33.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v30, v32)).u32[0];
          v33.i32[1] = vmovn_s32(vcgtq_f32(v32, *(float32x4_t *)&v30)).i32[1];
          v34 = (int8x16_t)vmovl_s16(v33);
          v27 = vbslq_s8(v34, (int8x16_t)v32, v27);
          v30 = vbslq_s8(v34, (int8x16_t)v32, v30);
        }
        while (v28 != v26);
      }
      *(int8x16_t *)(v24 + 8) = v27;
      *(_BYTE *)(v24 + 24) = 1;
      if (*(float *)&v27.i32[2] < *a2)
        goto LABEL_42;
LABEL_26:
      if (*(float *)(v24 + 8) <= a2[2] && *(float *)(v24 + 20) >= a2[1] && *(float *)(v24 + 12) <= a2[3])
      {
        if (v23)
        {
          v35 = a6;
          v37 = a6[1];
          v36 = (unint64_t)a6[2];
          if ((unint64_t)v37 >= v36)
          {
            v38 = a4;
            v39 = *a6;
            v40 = v37 - *a6;
            v41 = v40 >> 3;
            v42 = (v40 >> 3) + 1;
            if (v42 >> 61)
              goto LABEL_101;
            v43 = v36 - (_QWORD)v39;
            if (v43 >> 2 > v42)
              v42 = v43 >> 2;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
              v42 = 0x1FFFFFFFFFFFFFFFLL;
            v104 = v42;
            if (v42)
            {
              if (v42 >> 61)
                goto LABEL_102;
              v44 = operator new(8 * v42);
              v11 = xmmword_2245F53F0;
              v45 = &v44[8 * v41];
              *(_QWORD *)v45 = *v6;
              v46 = (uint64_t)(v45 + 8);
              v47 = (char *)(v37 - v39);
              if (v37 != v39)
              {
LABEL_39:
                v48 = (unint64_t)(v47 - 8);
                if (v48 < 0x58)
                {
                  a4 = v38;
                  goto LABEL_88;
                }
                v86 = v37 - &v44[v40];
                a4 = v38;
                if (v86 < 0x20)
                  goto LABEL_105;
                v87 = (v48 >> 3) + 1;
                v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
                v89 = &v37[-v88];
                v45 -= v88;
                v90 = &v44[8 * v41 - 16];
                v91 = v37 - 16;
                v92 = v87 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v93 = *(_OWORD *)v91;
                  *(v90 - 1) = *((_OWORD *)v91 - 1);
                  *v90 = v93;
                  v90 -= 2;
                  v91 -= 32;
                  v92 -= 4;
                }
                while (v92);
                v37 = v89;
                if (v87 != (v87 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_105:
                  do
                  {
LABEL_88:
                    v94 = *((_QWORD *)v37 - 1);
                    v37 -= 8;
                    *((_QWORD *)v45 - 1) = v94;
                    v45 -= 8;
                  }
                  while (v37 != v39);
                }
                v85 = a6;
                v37 = *a6;
                *a6 = v45;
                a6[1] = (char *)v46;
                a6[2] = &v44[8 * v104];
                if (v37)
                {
LABEL_90:
                  operator delete(v37);
                  v11 = xmmword_2245F53F0;
                  v35 = a6;
                  goto LABEL_99;
                }
LABEL_98:
                v35 = v85;
                goto LABEL_99;
              }
            }
            else
            {
              v44 = 0;
              v45 = (char *)(8 * v41);
              *(_QWORD *)(8 * v41) = *v6;
              v46 = 8 * v41 + 8;
              v47 = (char *)(v37 - v39);
              if (v37 != v39)
                goto LABEL_39;
            }
            v85 = a6;
            a4 = v38;
            *a6 = v45;
            a6[1] = (char *)v46;
            a6[2] = &v44[8 * v104];
            if (v37)
              goto LABEL_90;
            goto LABEL_98;
          }
LABEL_67:
          *(_QWORD *)v37 = *v6;
          v46 = (uint64_t)(v37 + 8);
LABEL_99:
          v35[1] = (char *)v46;
          goto LABEL_4;
        }
        v35 = a5;
        v37 = a5[1];
        v74 = (unint64_t)a5[2];
        if ((unint64_t)v37 < v74)
          goto LABEL_67;
        v75 = a4;
        v76 = *a5;
        v77 = v37 - *a5;
        v78 = v77 >> 3;
        v79 = (v77 >> 3) + 1;
        if (v79 >> 61)
LABEL_101:
          sub_2233DCD38();
        v80 = v74 - (_QWORD)v76;
        if (v80 >> 2 > v79)
          v79 = v80 >> 2;
        if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
          v79 = 0x1FFFFFFFFFFFFFFFLL;
        v105 = v79;
        if (v79)
        {
          if (v79 >> 61)
LABEL_102:
            sub_223174E94();
          v81 = operator new(8 * v79);
          v11 = xmmword_2245F53F0;
          v82 = &v81[8 * v78];
          *(_QWORD *)v82 = *v6;
          v46 = (uint64_t)(v82 + 8);
          v83 = (char *)(v37 - v76);
          if (v37 != v76)
          {
LABEL_76:
            v84 = (unint64_t)(v83 - 8);
            if (v84 < 0x58)
            {
              a4 = v75;
              goto LABEL_95;
            }
            v95 = v37 - &v81[v77];
            a4 = v75;
            if (v95 < 0x20)
              goto LABEL_106;
            v96 = (v84 >> 3) + 1;
            v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
            v98 = &v37[-v97];
            v82 -= v97;
            v99 = &v81[8 * v78 - 16];
            v100 = v37 - 16;
            v101 = v96 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v102 = *(_OWORD *)v100;
              *(v99 - 1) = *((_OWORD *)v100 - 1);
              *v99 = v102;
              v99 -= 2;
              v100 -= 32;
              v101 -= 4;
            }
            while (v101);
            v37 = v98;
            if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_106:
              do
              {
LABEL_95:
                v103 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v82 - 1) = v103;
                v82 -= 8;
              }
              while (v37 != v76);
            }
            v85 = a5;
            v37 = *a5;
            *a5 = v82;
            a5[1] = (char *)v46;
            a5[2] = &v81[8 * v105];
            if (!v37)
              goto LABEL_98;
LABEL_97:
            operator delete(v37);
            v11 = xmmword_2245F53F0;
            v35 = a5;
            goto LABEL_99;
          }
        }
        else
        {
          v81 = 0;
          v82 = (char *)(8 * v78);
          *(_QWORD *)(8 * v78) = *v6;
          v46 = 8 * v78 + 8;
          v83 = (char *)(v37 - v76);
          if (v37 != v76)
            goto LABEL_76;
        }
        v85 = a5;
        a4 = v75;
        *a5 = v82;
        a5[1] = (char *)v46;
        a5[2] = &v81[8 * v105];
        if (!v37)
          goto LABEL_98;
        goto LABEL_97;
      }
LABEL_42:
      if (v23)
      {
        v50 = (char *)a4[1];
        v49 = a4[2];
        if ((unint64_t)v50 >= v49)
        {
          v51 = a2;
          v52 = v8;
          v53 = (uint64_t **)a4;
          v54 = (char *)*a4;
          v55 = (uint64_t)&v50[-*a4];
          v56 = v55 >> 3;
          v57 = (v55 >> 3) + 1;
          if (v57 >> 61)
            goto LABEL_101;
          v58 = v49 - (_QWORD)v54;
          if (v58 >> 2 > v57)
            v57 = v58 >> 2;
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
            v59 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v59 = v57;
          if (v59)
          {
            if (v59 >> 61)
              goto LABEL_102;
            v60 = operator new(8 * v59);
            v11 = xmmword_2245F53F0;
            v61 = (uint64_t *)&v60[8 * v56];
            *v61 = *v6;
            v62 = (uint64_t)(v61 + 1);
            v63 = (char *)(v50 - v54);
            if (v50 != v54)
            {
LABEL_53:
              v64 = (unint64_t)(v63 - 8);
              if (v64 < 0x58)
              {
                a4 = v53;
                goto LABEL_62;
              }
              v65 = v50 - v60 - v55;
              a4 = v53;
              if (v65 < 0x20)
                goto LABEL_107;
              v66 = (v64 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v68 = &v50[-v67];
              v61 = (uint64_t *)((char *)v61 - v67);
              v69 = &v60[8 * v56 - 16];
              v70 = v50 - 16;
              v71 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v72 = *(_OWORD *)v70;
                *(v69 - 1) = *((_OWORD *)v70 - 1);
                *v69 = v72;
                v69 -= 2;
                v70 -= 32;
                v71 -= 4;
              }
              while (v71);
              v50 = v68;
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_107:
                do
                {
LABEL_62:
                  v73 = *((_QWORD *)v50 - 1);
                  v50 -= 8;
                  *--v61 = v73;
                }
                while (v50 != v54);
              }
              v50 = (char *)*a4;
              *a4 = v61;
              a4[1] = v62;
              a4[2] = &v60[8 * v59];
              v8 = v52;
              if (v50)
              {
LABEL_64:
                operator delete(v50);
                v11 = xmmword_2245F53F0;
              }
LABEL_65:
              a2 = v51;
              v10 = a1;
              a4[1] = v62;
              goto LABEL_4;
            }
          }
          else
          {
            v60 = 0;
            v61 = (uint64_t *)(8 * v56);
            *(_QWORD *)(8 * v56) = *v6;
            v62 = 8 * v56 + 8;
            v63 = (char *)(v50 - v54);
            if (v50 != v54)
              goto LABEL_53;
          }
          a4 = v53;
          *v53 = v61;
          v53[1] = (uint64_t *)v62;
          v53[2] = (uint64_t *)&v60[8 * v59];
          v8 = v52;
          if (v50)
            goto LABEL_64;
          goto LABEL_65;
        }
        *(_QWORD *)v50 = *v6;
        a4[1] = v50 + 8;
      }
LABEL_4:
      ++v6;
    }
    while (v6 != v8[1]);
  }
}

uint64_t sub_2233E727C(float *a1, uint64_t **a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t result;
  char v17[16];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  v8 = a2[1];
  if ((unint64_t)((char *)v8 - (char *)*a2) >= 0x80
    && a4 <= 0x63
    && *(_QWORD *)(a3 + 8) - *(_QWORD *)a3 >= 0x79uLL)
  {
    return sub_2233E89DC(a1, a2, (uint64_t **)a3, a4 + 1, a5);
  }
  if (v9 == v8)
    return 1;
  v10 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 == v10)
    return 1;
  while (*(_QWORD *)a3 == v10 || *(_BYTE *)a5 != 0)
  {
LABEL_6:
    if (++v9 == v8)
      return 1;
  }
  v10 = *(_QWORD *)a3 + 8;
LABEL_13:
  v12 = *(_QWORD *)*v9;
  v13 = **(_QWORD **)(v10 - 8);
  v14 = *(_QWORD *)(a5 + 8);
  strcpy(v17, "FFFFFFFFF");
  sub_2233E9788(v12, v13, (unsigned __int8 *)v17, v14);
  if (v17[9]
    || (v17[0] != 84 ? (v15 = v17[0] - 48 >= 0xA) : (v15 = 0),
        v15
     && v17[1] != 84
     && v17[1] - 48 > 9
     && v17[3] != 84
     && v17[3] - 48 > 9))
  {
    while (v10 != *(_QWORD *)(a3 + 8))
    {
      v10 += 8;
      if (!*(_BYTE *)a5)
        goto LABEL_13;
    }
    v8 = a2[1];
    goto LABEL_6;
  }
  result = 0;
  *(_BYTE *)a5 = 1;
  return result;
}

uint64_t sub_2233E7464(float *a1, uint64_t **a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  float v7;
  __n128 v8;
  uint64_t *v9;
  uint64_t *v10;
  int8x16_t v11;
  uint64_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  float32x2_t *v24;
  float32x2_t *v25;
  float32x2_t *v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  int8x8_t v31;
  int8x8_t v32;
  __int128 v33;
  uint64_t **v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t **v38;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t **v46;
  uint64_t **v47;
  uint64_t **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t **v54;
  uint64_t **v55;
  uint64_t **v56;
  uint64_t **v57;
  uint64_t **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  void *__p;
  uint64_t **v69;
  uint64_t v70;
  void *v71;
  uint64_t **v72;
  uint64_t v73;
  float v74[2];
  uint64_t v75;
  uint64_t v76;
  int v77;
  float v78;
  int8x16_t v79;
  char v80[16];
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)a1 + 1);
  v7 = (float)(a1[1] + a1[3]) * 0.5;
  v76 = *(_QWORD *)a1;
  v77 = v6;
  LODWORD(v74[0]) = v76;
  v75 = v6;
  v78 = v7;
  v74[1] = v7;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  __p = 0;
  v69 = 0;
  v70 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  sub_2233E6B98((float *)&v76, v74, a2, &v71, (char **)&__p, (char **)&v65);
  v9 = v65;
  v10 = v66;
  if (v65 != v66)
  {
    v11 = (int8x16_t)xmmword_2245F53F0;
    v8.n128_u64[0] = (unint64_t)vdup_n_s32(0x7F7FFFFFu);
    v12 = v65;
    v13 = (int8x16_t)xmmword_2245F53F0;
    do
    {
      v23 = *v12;
      if (*(_BYTE *)(*v12 + 24))
      {
        v15.i64[0] = *(_QWORD *)(v23 + 8);
        v14.i64[0] = *(_QWORD *)(v23 + 16);
      }
      else
      {
        v24 = **(float32x2_t ***)v23;
        v25 = *(float32x2_t **)(*(_QWORD *)v23 + 8);
        if (v24 == v25)
        {
          v14.i64[0] = 0x80000000800000;
          v15.i64[0] = v8.n128_u64[0];
        }
        else
        {
          v27 = *v24;
          v26 = v24 + 1;
          v28 = v27;
          *(float32x2_t *)v14.i8 = v27;
          if (v26 == v25)
          {
            *(float32x2_t *)v15.f32 = v28;
          }
          else
          {
            v29 = v28;
            *(float32x2_t *)v15.f32 = v28;
            do
            {
              v30 = *v26++;
              v31 = (int8x8_t)vcgt_f32(v29, v30);
              v32 = (int8x8_t)vcgt_f32(v30, v28);
              *(int8x8_t *)v15.f32 = vbsl_s8(v31, (int8x8_t)v30, *(int8x8_t *)v15.f32);
              v29 = (float32x2_t)vbsl_s8(v31, (int8x8_t)v30, (int8x8_t)v29);
              *(int8x8_t *)v14.i8 = vbsl_s8(v32, (int8x8_t)v30, *(int8x8_t *)v14.i8);
              v28 = (float32x2_t)vbsl_s8(v32, (int8x8_t)v30, (int8x8_t)v28);
            }
            while (v26 != v25);
          }
        }
        *(_QWORD *)&v33 = v15.i64[0];
        *((_QWORD *)&v33 + 1) = v14.i64[0];
        *(_OWORD *)(v23 + 8) = v33;
        *(_BYTE *)(v23 + 24) = 1;
      }
      v16.i64[0] = v15.i64[0];
      v16.i64[1] = v15.i64[0];
      v14.i64[1] = v14.i64[0];
      v17.i64[0] = v11.i64[0];
      v17.i64[1] = v15.i64[0];
      v15.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
      v18 = (int8x16_t)vcgtq_f32(v17, v15);
      v19 = vbslq_s8(v18, v16, v11);
      v20.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v19, (float32x4_t)v14)).u32[0];
      v20.i32[1] = vmovn_s32(vcgtq_f32(*(float32x4_t *)&v14, *(float32x4_t *)&v19)).i32[1];
      v21 = vbslq_s8(v18, v16, v13);
      v22 = (int8x16_t)vmovl_s16(v20);
      v13 = vbslq_s8(v22, v14, v21);
      v11 = vbslq_s8(v22, v14, v19);
      ++v12;
    }
    while (v12 != v10);
    v79 = v13;
    if (a3 > 0x63 || (unint64_t)((char *)v10 - (char *)v9) < 0x79)
    {
      v36 = v9 + 2;
      v37 = (uint64_t **)v9;
      while (1)
      {
        v38 = v37 + 1;
        if (v37 + 1 != (uint64_t **)v10 && *(_BYTE *)a4 == 0)
        {
          v40 = v36;
LABEL_32:
          v41 = **v37;
          v42 = *(_QWORD *)*(v40 - 1);
          v43 = *(_QWORD *)(a4 + 8);
          strcpy(v80, "FFFFFFFFF");
          sub_2233E9788(v41, v42, (unsigned __int8 *)v80, v43);
          if (!v80[9])
          {
            v44 = v80[0] != 84 && v80[0] - 48 >= 0xA;
            if (!v44
              || v80[1] == 84
              || v80[1] - 48 <= 9
              || v80[3] == 84
              || v80[3] - 48 < 0xA)
            {
              *(_BYTE *)a4 = 1;
              goto LABEL_45;
            }
          }
          while (v40 != v10)
          {
            ++v40;
            if (!*(_BYTE *)a4)
              goto LABEL_32;
          }
        }
        ++v36;
        ++v37;
        if (v38 == (uint64_t **)v10)
          goto LABEL_17;
      }
    }
    if (!sub_2233E65B4(&v79, &v65, a3 + 1, a4, v8))
      goto LABEL_45;
LABEL_17:
    if (!sub_2233E7A48((float *)v79.i32, &v65, (uint64_t)&v71, a3, a4)
      || (sub_2233E7A48((float *)v79.i32, &v65, (uint64_t)&__p, a3, a4) & 1) == 0)
    {
LABEL_45:
      v45 = 0;
      if (v9)
        goto LABEL_97;
      goto LABEL_98;
    }
  }
  v35 = (uint64_t **)v71;
  v34 = v72;
  if (a3 > 0x63 || (unint64_t)((char *)v72 - (_BYTE *)v71) < 0x79)
  {
    if (v71 != v72)
    {
      v46 = (uint64_t **)((char *)v71 + 16);
      do
      {
        v47 = v35 + 1;
        if (v35 + 1 != v34 && *(_BYTE *)a4 == 0)
        {
          v49 = v46;
LABEL_57:
          v50 = **v35;
          v51 = **(v49 - 1);
          v52 = *(_QWORD *)(a4 + 8);
          strcpy(v79.i8, "FFFFFFFFF");
          sub_2233E9788(v50, v51, (unsigned __int8 *)&v79, v52);
          if (!v79.i8[9])
          {
            v53 = v79.u8[0] != 84 && v79.u8[0] - 48 >= 0xA;
            if (!v53
              || v79.u8[1] == 84
              || v79.u8[1] - 48 <= 9
              || v79.u8[3] == 84
              || v79.u8[3] - 48 < 0xA)
            {
LABEL_95:
              v45 = 0;
              *(_BYTE *)a4 = 1;
LABEL_96:
              if (v9)
                goto LABEL_97;
              goto LABEL_98;
            }
          }
          while (v49 != v34)
          {
            ++v49;
            if (!*(_BYTE *)a4)
              goto LABEL_57;
          }
        }
        ++v46;
        ++v35;
      }
      while (v47 != v34);
    }
  }
  else if (!sub_2233E65B4(&v76, &v71, a3 + 1, a4, v8))
  {
    goto LABEL_45;
  }
  v55 = (uint64_t **)__p;
  v54 = v69;
  if (a3 > 0x63 || (unint64_t)((char *)v69 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v69)
    {
      v56 = (uint64_t **)((char *)__p + 16);
      while (1)
      {
        v57 = v55 + 1;
        if (v55 + 1 != v54 && *(_BYTE *)a4 == 0)
        {
          v59 = v56;
LABEL_83:
          v60 = **v55;
          v61 = **(v59 - 1);
          v62 = *(_QWORD *)(a4 + 8);
          strcpy(v79.i8, "FFFFFFFFF");
          sub_2233E9788(v60, v61, (unsigned __int8 *)&v79, v62);
          if (!v79.i8[9])
          {
            v63 = v79.u8[0] != 84 && v79.u8[0] - 48 >= 0xA;
            if (!v63
              || v79.u8[1] == 84
              || v79.u8[1] - 48 <= 9
              || v79.u8[3] == 84
              || v79.u8[3] - 48 < 0xA)
            {
              goto LABEL_95;
            }
          }
          while (v59 != v54)
          {
            ++v59;
            if (!*(_BYTE *)a4)
              goto LABEL_83;
          }
        }
        ++v56;
        v45 = 1;
        ++v55;
        if (v57 == v54)
          goto LABEL_96;
      }
    }
    v45 = 1;
    if (v9)
LABEL_97:
      operator delete(v9);
  }
  else
  {
    v45 = sub_2233E65B4(v74, &__p, a3 + 1, a4, v8);
    if (v9)
      goto LABEL_97;
  }
LABEL_98:
  if (__p)
    operator delete(__p);
  if (v71)
    operator delete(v71);
  return v45;
}

void sub_2233E79E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v18;
  void *v19;

  if (v16)
  {
    operator delete(v16);
    v18 = __p;
    if (!__p)
    {
LABEL_3:
      v19 = a16;
      if (!a16)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v18 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v18);
  v19 = a16;
  if (!a16)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233E7A48(float *a1, uint64_t **a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t result;
  char v17[16];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  v8 = a2[1];
  if ((unint64_t)((char *)v8 - (char *)*a2) >= 0x80
    && a4 <= 0x63
    && *(_QWORD *)(a3 + 8) - *(_QWORD *)a3 >= 0x79uLL)
  {
    return sub_2233E7C30(a1, a2, (uint64_t **)a3, a4 + 1, a5);
  }
  if (v9 == v8)
    return 1;
  v10 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 == v10)
    return 1;
  while (*(_QWORD *)a3 == v10 || *(_BYTE *)a5 != 0)
  {
LABEL_6:
    if (++v9 == v8)
      return 1;
  }
  v10 = *(_QWORD *)a3 + 8;
LABEL_13:
  v12 = *(_QWORD *)*v9;
  v13 = **(_QWORD **)(v10 - 8);
  v14 = *(_QWORD *)(a5 + 8);
  strcpy(v17, "FFFFFFFFF");
  sub_2233E9788(v12, v13, (unsigned __int8 *)v17, v14);
  if (v17[9]
    || (v17[0] != 84 ? (v15 = v17[0] - 48 >= 0xA) : (v15 = 0),
        v15
     && v17[1] != 84
     && v17[1] - 48 > 9
     && v17[3] != 84
     && v17[3] - 48 > 9))
  {
    while (v10 != *(_QWORD *)(a3 + 8))
    {
      v10 += 8;
      if (!*(_BYTE *)a5)
        goto LABEL_13;
    }
    v8 = a2[1];
    goto LABEL_6;
  }
  result = 0;
  *(_BYTE *)a5 = 1;
  return result;
}

uint64_t sub_2233E7C30(float *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  float v9;
  uint64_t **v10;
  uint64_t **v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t **i;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t **v22;
  uint64_t **v23;
  unint64_t v24;
  int8x16_t v25;
  int32x2_t v26;
  char *v27;
  int8x16_t v28;
  int8x16_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int16x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  uint64_t v38;
  float32x2_t *v39;
  float32x2_t *v40;
  float32x2_t *v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  int8x8_t v46;
  int8x8_t v47;
  __int128 v48;
  int8x16_t v49;
  int32x2_t v50;
  uint64_t **v51;
  int8x16_t v52;
  int8x16_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int16x4_t v59;
  int8x16_t v60;
  int8x16_t v61;
  uint64_t *v62;
  float32x2_t *v63;
  float32x2_t *v64;
  float32x2_t *v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  int8x8_t v70;
  int8x8_t v71;
  __int128 v72;
  char *v73;
  uint64_t **k;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  int32x2_t v80;
  char *v81;
  int8x16_t v82;
  float32x4_t v83;
  int8x16_t v84;
  float32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int16x4_t v88;
  int8x16_t v89;
  int8x16_t v90;
  uint64_t v91;
  float32x2_t *v92;
  float32x2_t *v93;
  float32x2_t *v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  int8x8_t v99;
  int8x8_t v100;
  __int128 v101;
  uint64_t **v102;
  uint64_t **v103;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  uint64_t **v112;
  uint64_t **v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  char *v121;
  int8x16_t v122;
  int32x2_t v123;
  int8x16_t v124;
  int8x16_t v125;
  float32x4_t v126;
  int8x16_t v127;
  float32x4_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int16x4_t v131;
  int8x16_t v132;
  int8x16_t v133;
  uint64_t *v134;
  float32x2_t *v135;
  float32x2_t *v136;
  float32x2_t *v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x2_t v141;
  int8x8_t v142;
  int8x8_t v143;
  __int128 v144;
  char *v145;
  uint64_t **j;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  BOOL v158;
  uint64_t v159;
  void *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  BOOL v165;
  char *v167;
  unint64_t v168;
  char *v169;
  void *__p;
  char *v171;
  uint64_t v172;
  void *v173;
  char *v174;
  uint64_t v175;
  void *v176;
  char *v177;
  uint64_t v178;
  void *v179;
  uint64_t **v180;
  uint64_t v181;
  void *v182;
  uint64_t **v183;
  uint64_t v184;
  void *v185;
  uint64_t **v186;
  uint64_t v187;
  float v188[2];
  uint64_t v189;
  uint64_t v190;
  float v191;
  int v192;
  int8x16_t v193;
  uint64_t v194;

  v194 = *MEMORY[0x24BDAC8D0];
  v8 = *((_QWORD *)a1 + 1);
  v9 = (float)(*a1 + a1[2]) * 0.5;
  v190 = *(_QWORD *)a1;
  v192 = HIDWORD(v8);
  v188[1] = *((float *)&v190 + 1);
  v189 = v8;
  v191 = v9;
  v188[0] = v9;
  v185 = 0;
  v186 = 0;
  v187 = 0;
  v182 = 0;
  v183 = 0;
  v184 = 0;
  v179 = 0;
  v180 = 0;
  v181 = 0;
  v176 = 0;
  v177 = 0;
  v178 = 0;
  v173 = 0;
  v174 = 0;
  v175 = 0;
  __p = 0;
  v171 = 0;
  v172 = 0;
  sub_2233E6B98((float *)&v190, v188, a2, &v185, (char **)&v182, (char **)&v179);
  sub_2233E6B98((float *)&v190, v188, a3, &v176, (char **)&v173, (char **)&__p);
  v10 = (uint64_t **)v179;
  v11 = v180;
  v12 = (char *)__p;
  v168 = a4;
  v169 = (char *)__p;
  if (v179 == v180)
  {
    v14 = v171;
    goto LABEL_22;
  }
  v13 = (char *)v180 - (_BYTE *)v179;
  v14 = v171;
  if ((unint64_t)((char *)v180 - (_BYTE *)v179) < 0x80
    || a4 > 0x63
    || (unint64_t)(v171 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v171)
    {
      v15 = (char *)__p + 8;
      for (i = (uint64_t **)v179; i != v11; ++i)
      {
        if (!*(_BYTE *)a5)
        {
          v17 = v15;
LABEL_9:
          v18 = **i;
          v19 = **((_QWORD **)v17 - 1);
          v20 = *(_QWORD *)(a5 + 8);
          strcpy(v193.i8, "FFFFFFFFF");
          sub_2233E9788(v18, v19, (unsigned __int8 *)&v193, v20);
          if (!v193.i8[9])
          {
            v21 = v193.u8[0] != 84 && v193.u8[0] - 48 >= 0xA;
            if (!v21
              || v193.u8[1] == 84
              || v193.u8[1] - 48 <= 9
              || v193.u8[3] == 84
              || v193.u8[3] - 48 < 0xA)
            {
LABEL_210:
              v159 = 0;
              *(_BYTE *)a5 = 1;
              v160 = __p;
              if (__p)
                goto LABEL_211;
              goto LABEL_212;
            }
          }
          while (v17 != v14)
          {
            v17 += 8;
            if (!*(_BYTE *)a5)
              goto LABEL_9;
          }
        }
      }
    }
LABEL_135:
    v121 = v177;
    if ((unint64_t)(v177 - (_BYTE *)v176) < 0x80
      || (unint64_t)(v174 - (_BYTE *)v173) < 0x80
      || v168 > 0x63
      || v13 < 0x79)
    {
      if (v176 != v177)
      {
        v145 = (char *)v176 + 8;
        for (j = v10; j != v11; ++j)
        {
          if (!*(_BYTE *)a5)
          {
            v147 = v145;
LABEL_157:
            v148 = **j;
            v149 = **((_QWORD **)v147 - 1);
            v150 = *(_QWORD *)(a5 + 8);
            strcpy(v193.i8, "FFFFFFFFF");
            sub_2233E9788(v148, v149, (unsigned __int8 *)&v193, v150);
            if (!v193.i8[9])
            {
              v151 = v193.u8[0] != 84 && v193.u8[0] - 48 >= 0xA;
              if (!v151
                || v193.u8[1] == 84
                || v193.u8[1] - 48 <= 9
                || v193.u8[3] == 84
                || v193.u8[3] - 48 < 0xA)
              {
                goto LABEL_210;
              }
            }
            while (v147 != v121)
            {
              v147 += 8;
              if (!*(_BYTE *)a5)
                goto LABEL_157;
            }
          }
        }
      }
      v152 = v174;
      if (v173 != v174)
      {
        v153 = (char *)v173 + 8;
        do
        {
          if (!*(_BYTE *)a5)
          {
            v154 = v153;
LABEL_175:
            v155 = **v10;
            v156 = **((_QWORD **)v154 - 1);
            v157 = *(_QWORD *)(a5 + 8);
            strcpy(v193.i8, "FFFFFFFFF");
            sub_2233E9788(v155, v156, (unsigned __int8 *)&v193, v157);
            if (!v193.i8[9])
            {
              v158 = v193.u8[0] != 84 && v193.u8[0] - 48 >= 0xA;
              if (!v158
                || v193.u8[1] == 84
                || v193.u8[1] - 48 <= 9
                || v193.u8[3] == 84
                || v193.u8[3] - 48 < 0xA)
              {
                goto LABEL_210;
              }
            }
            while (v154 != v152)
            {
              v154 += 8;
              if (!*(_BYTE *)a5)
                goto LABEL_175;
            }
          }
          ++v10;
        }
        while (v10 != v11);
      }
      v12 = v169;
    }
    else
    {
      v122 = (int8x16_t)xmmword_2245F53F0;
      v123 = vdup_n_s32(0x7F7FFFFFu);
      v124 = (int8x16_t)xmmword_2245F53F0;
      v12 = v169;
      do
      {
        v134 = *v10;
        if (*((_BYTE *)*v10 + 24))
        {
          v126.i64[0] = v134[1];
          v125.i64[0] = v134[2];
        }
        else
        {
          v135 = *(float32x2_t **)*v134;
          v136 = *(float32x2_t **)(*v134 + 8);
          if (v135 == v136)
          {
            v125.i64[0] = 0x80000000800000;
            *(int32x2_t *)v126.f32 = v123;
          }
          else
          {
            v138 = *v135;
            v137 = v135 + 1;
            v139 = v138;
            *(float32x2_t *)v125.i8 = v138;
            if (v137 == v136)
            {
              *(float32x2_t *)v126.f32 = v139;
            }
            else
            {
              v140 = v139;
              *(float32x2_t *)v126.f32 = v139;
              do
              {
                v141 = *v137++;
                v142 = (int8x8_t)vcgt_f32(v140, v141);
                v143 = (int8x8_t)vcgt_f32(v141, v139);
                *(int8x8_t *)v126.f32 = vbsl_s8(v142, (int8x8_t)v141, *(int8x8_t *)v126.f32);
                v140 = (float32x2_t)vbsl_s8(v142, (int8x8_t)v141, (int8x8_t)v140);
                *(int8x8_t *)v125.i8 = vbsl_s8(v143, (int8x8_t)v141, *(int8x8_t *)v125.i8);
                v139 = (float32x2_t)vbsl_s8(v143, (int8x8_t)v141, (int8x8_t)v139);
              }
              while (v137 != v136);
            }
          }
          *(_QWORD *)&v144 = v126.i64[0];
          *((_QWORD *)&v144 + 1) = v125.i64[0];
          *(_OWORD *)(v134 + 1) = v144;
          *((_BYTE *)v134 + 24) = 1;
        }
        v127.i64[0] = v126.i64[0];
        v127.i64[1] = v126.i64[0];
        v125.i64[1] = v125.i64[0];
        v128.i64[0] = v122.i64[0];
        v128.i64[1] = v126.i64[0];
        v126.i64[1] = vextq_s8(v122, v122, 8uLL).u64[0];
        v129 = (int8x16_t)vcgtq_f32(v128, v126);
        v130 = vbslq_s8(v129, v127, v122);
        v131.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v130, (float32x4_t)v125)).u32[0];
        v131.i32[1] = vmovn_s32(vcgtq_f32(*(float32x4_t *)&v125, *(float32x4_t *)&v130)).i32[1];
        v132 = vbslq_s8(v129, v127, v124);
        v133 = (int8x16_t)vmovl_s16(v131);
        v124 = vbslq_s8(v133, v125, v132);
        v122 = vbslq_s8(v133, v125, v130);
        ++v10;
      }
      while (v10 != v11);
      v193 = v124;
      if (!sub_2233E89DC(&v193, &v179, &v176, v168 + 1, a5)
        || (sub_2233E89DC(&v193, &v179, &v173, v168 + 1, a5) & 1) == 0)
      {
        goto LABEL_228;
      }
    }
LABEL_22:
    v22 = (uint64_t **)v185;
    v23 = v186;
    v24 = (char *)v186 - (_BYTE *)v185;
    if (v12 != v14)
    {
      if (v24 < 0x80
        || (unint64_t)((char *)v183 - (_BYTE *)v182) < 0x80
        || v168 > 0x63
        || (unint64_t)(v14 - v12) < 0x79)
      {
        if (v185 != v186)
        {
          v73 = v12 + 8;
          for (k = (uint64_t **)v185; k != v23; ++k)
          {
            if (v12 != v14 && !*(_BYTE *)a5)
            {
              v75 = v73;
LABEL_60:
              v76 = **k;
              v77 = **((_QWORD **)v75 - 1);
              v78 = *(_QWORD *)(a5 + 8);
              strcpy(v193.i8, "FFFFFFFFF");
              sub_2233E9788(v76, v77, (unsigned __int8 *)&v193, v78);
              if (!v193.i8[9])
              {
                v79 = v193.u8[0] != 84 && v193.u8[0] - 48 >= 0xA;
                if (!v79
                  || v193.u8[1] == 84
                  || v193.u8[1] - 48 <= 9
                  || v193.u8[3] == 84
                  || v193.u8[3] - 48 < 0xA)
                {
                  goto LABEL_210;
                }
              }
              while (v75 != v14)
              {
                v75 += 8;
                if (!*(_BYTE *)a5)
                  goto LABEL_60;
              }
              v12 = v169;
            }
          }
        }
        v102 = (uint64_t **)v182;
        v103 = v183;
        if (v182 != v183 && v12 != v14)
        {
          v167 = v12 + 8;
          do
          {
            if (v12 != v14 && !*(_BYTE *)a5)
            {
              v161 = v167;
LABEL_198:
              v162 = **v102;
              v163 = **((_QWORD **)v161 - 1);
              v164 = *(_QWORD *)(a5 + 8);
              strcpy(v193.i8, "FFFFFFFFF");
              sub_2233E9788(v162, v163, (unsigned __int8 *)&v193, v164);
              if (!v193.i8[9])
              {
                v165 = v193.u8[0] != 84 && v193.u8[0] - 48 >= 0xA;
                if (!v165
                  || v193.u8[1] == 84
                  || v193.u8[1] - 48 <= 9
                  || v193.u8[3] == 84
                  || v193.u8[3] - 48 < 0xA)
                {
                  goto LABEL_210;
                }
              }
              while (v161 != v14)
              {
                v161 += 8;
                if (!*(_BYTE *)a5)
                  goto LABEL_198;
              }
              v12 = v169;
            }
            ++v102;
          }
          while (v102 != v103);
        }
      }
      else
      {
        v25 = (int8x16_t)xmmword_2245F53F0;
        v26 = vdup_n_s32(0x7F7FFFFFu);
        v27 = v12;
        v28 = (int8x16_t)xmmword_2245F53F0;
        do
        {
          v38 = *(_QWORD *)v27;
          if (*(_BYTE *)(*(_QWORD *)v27 + 24))
          {
            v30.i64[0] = *(_QWORD *)(v38 + 8);
            v29.i64[0] = *(_QWORD *)(v38 + 16);
          }
          else
          {
            v39 = **(float32x2_t ***)v38;
            v40 = *(float32x2_t **)(*(_QWORD *)v38 + 8);
            if (v39 == v40)
            {
              v29.i64[0] = 0x80000000800000;
              *(int32x2_t *)v30.f32 = v26;
            }
            else
            {
              v42 = *v39;
              v41 = v39 + 1;
              v43 = v42;
              *(float32x2_t *)v29.i8 = v42;
              if (v41 == v40)
              {
                *(float32x2_t *)v30.f32 = v43;
              }
              else
              {
                v44 = v43;
                *(float32x2_t *)v30.f32 = v43;
                do
                {
                  v45 = *v41++;
                  v46 = (int8x8_t)vcgt_f32(v44, v45);
                  v47 = (int8x8_t)vcgt_f32(v45, v43);
                  *(int8x8_t *)v30.f32 = vbsl_s8(v46, (int8x8_t)v45, *(int8x8_t *)v30.f32);
                  v44 = (float32x2_t)vbsl_s8(v46, (int8x8_t)v45, (int8x8_t)v44);
                  *(int8x8_t *)v29.i8 = vbsl_s8(v47, (int8x8_t)v45, *(int8x8_t *)v29.i8);
                  v43 = (float32x2_t)vbsl_s8(v47, (int8x8_t)v45, (int8x8_t)v43);
                }
                while (v41 != v40);
              }
            }
            *(_QWORD *)&v48 = v30.i64[0];
            *((_QWORD *)&v48 + 1) = v29.i64[0];
            *(_OWORD *)(v38 + 8) = v48;
            *(_BYTE *)(v38 + 24) = 1;
          }
          v31.i64[0] = v30.i64[0];
          v31.i64[1] = v30.i64[0];
          v29.i64[1] = v29.i64[0];
          v32.i64[0] = v25.i64[0];
          v32.i64[1] = v30.i64[0];
          v30.i64[1] = vextq_s8(v25, v25, 8uLL).u64[0];
          v33 = (int8x16_t)vcgtq_f32(v32, v30);
          v34 = vbslq_s8(v33, v31, v25);
          v35.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v34, (float32x4_t)v29)).u32[0];
          v35.i32[1] = vmovn_s32(vcgtq_f32(*(float32x4_t *)&v29, *(float32x4_t *)&v34)).i32[1];
          v36 = vbslq_s8(v33, v31, v28);
          v37 = (int8x16_t)vmovl_s16(v35);
          v28 = vbslq_s8(v37, v29, v36);
          v25 = vbslq_s8(v37, v29, v34);
          v27 += 8;
        }
        while (v27 != v14);
        v193 = v28;
        if (!sub_2233E89DC(&v193, &v185, &__p, v168 + 1, a5)
          || (sub_2233E89DC(&v193, &v182, &__p, v168 + 1, a5) & 1) == 0)
        {
          goto LABEL_228;
        }
      }
    }
    if (v24 < 0x80 || v168 > 0x63 || (unint64_t)(v177 - (_BYTE *)v176) < 0x79)
    {
      if (v22 != v23)
      {
        v105 = v177;
        if (v176 != v177)
        {
          v106 = (char *)v176 + 8;
          do
          {
            if (!*(_BYTE *)a5)
            {
              v107 = v106;
LABEL_98:
              v108 = **v22;
              v109 = **((_QWORD **)v107 - 1);
              v110 = *(_QWORD *)(a5 + 8);
              strcpy(v193.i8, "FFFFFFFFF");
              sub_2233E9788(v108, v109, (unsigned __int8 *)&v193, v110);
              if (!v193.i8[9])
              {
                v111 = v193.u8[0] != 84 && v193.u8[0] - 48 >= 0xA;
                if (!v111
                  || v193.u8[1] == 84
                  || v193.u8[1] - 48 <= 9
                  || v193.u8[3] == 84
                  || v193.u8[3] - 48 < 0xA)
                {
                  goto LABEL_210;
                }
              }
              while (v107 != v105)
              {
                v107 += 8;
                if (!*(_BYTE *)a5)
                  goto LABEL_98;
              }
            }
            ++v22;
          }
          while (v22 != v23);
        }
      }
    }
    else if ((sub_2233E89DC(&v190, &v185, &v176, v168 + 1, a5) & 1) == 0)
    {
      goto LABEL_228;
    }
    v113 = (uint64_t **)v182;
    v112 = v183;
    if ((unint64_t)((char *)v183 - (_BYTE *)v182) < 0x80
      || v168 > 0x63
      || (unint64_t)(v174 - (_BYTE *)v173) < 0x79)
    {
      if (v182 != v183)
      {
        v114 = v174;
        if (v173 != v174)
        {
          v115 = (char *)v173 + 8;
          do
          {
            if (!*(_BYTE *)a5)
            {
              v116 = v115;
LABEL_121:
              v117 = **v113;
              v118 = **((_QWORD **)v116 - 1);
              v119 = *(_QWORD *)(a5 + 8);
              strcpy(v193.i8, "FFFFFFFFF");
              sub_2233E9788(v117, v118, (unsigned __int8 *)&v193, v119);
              if (!v193.i8[9])
              {
                v120 = v193.u8[0] != 84 && v193.u8[0] - 48 >= 0xA;
                if (!v120
                  || v193.u8[1] == 84
                  || v193.u8[1] - 48 <= 9
                  || v193.u8[3] == 84
                  || v193.u8[3] - 48 < 0xA)
                {
                  goto LABEL_210;
                }
              }
              while (v116 != v114)
              {
                v116 += 8;
                if (!*(_BYTE *)a5)
                  goto LABEL_121;
              }
            }
            ++v113;
          }
          while (v113 != v112);
        }
      }
    }
    else if ((sub_2233E89DC(v188, &v182, &v173, v168 + 1, a5) & 1) == 0)
    {
      goto LABEL_228;
    }
    v159 = 1;
    v160 = __p;
    if (__p)
      goto LABEL_211;
    goto LABEL_212;
  }
  v49 = (int8x16_t)xmmword_2245F53F0;
  v50 = vdup_n_s32(0x7F7FFFFFu);
  v51 = (uint64_t **)v179;
  v52 = (int8x16_t)xmmword_2245F53F0;
  do
  {
    v62 = *v51;
    if (*((_BYTE *)*v51 + 24))
    {
      v54.i64[0] = v62[1];
      v53.i64[0] = v62[2];
    }
    else
    {
      v63 = *(float32x2_t **)*v62;
      v64 = *(float32x2_t **)(*v62 + 8);
      if (v63 == v64)
      {
        v53.i64[0] = 0x80000000800000;
        *(int32x2_t *)v54.f32 = v50;
      }
      else
      {
        v66 = *v63;
        v65 = v63 + 1;
        v67 = v66;
        *(float32x2_t *)v53.i8 = v66;
        if (v65 == v64)
        {
          *(float32x2_t *)v54.f32 = v67;
        }
        else
        {
          *(float32x2_t *)v54.f32 = v67;
          v68 = v67;
          do
          {
            v69 = *v65++;
            v70 = (int8x8_t)vcgt_f32(v68, v69);
            v71 = (int8x8_t)vcgt_f32(v69, v67);
            *(int8x8_t *)v54.f32 = vbsl_s8(v70, (int8x8_t)v69, *(int8x8_t *)v54.f32);
            v68 = (float32x2_t)vbsl_s8(v70, (int8x8_t)v69, (int8x8_t)v68);
            *(int8x8_t *)v53.i8 = vbsl_s8(v71, (int8x8_t)v69, *(int8x8_t *)v53.i8);
            v67 = (float32x2_t)vbsl_s8(v71, (int8x8_t)v69, (int8x8_t)v67);
          }
          while (v65 != v64);
        }
      }
      *(_QWORD *)&v72 = v54.i64[0];
      *((_QWORD *)&v72 + 1) = v53.i64[0];
      *(_OWORD *)(v62 + 1) = v72;
      *((_BYTE *)v62 + 24) = 1;
    }
    v55.i64[0] = v54.i64[0];
    v55.i64[1] = v54.i64[0];
    v53.i64[1] = v53.i64[0];
    v56.i64[0] = v49.i64[0];
    v56.i64[1] = v54.i64[0];
    v54.i64[1] = vextq_s8(v49, v49, 8uLL).u64[0];
    v57 = (int8x16_t)vcgtq_f32(v56, v54);
    v58 = vbslq_s8(v57, v55, v49);
    v59.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v58, (float32x4_t)v53)).u32[0];
    v59.i32[1] = vmovn_s32(vcgtq_f32(*(float32x4_t *)&v53, *(float32x4_t *)&v58)).i32[1];
    v60 = vbslq_s8(v57, v55, v52);
    v61 = (int8x16_t)vmovl_s16(v59);
    v52 = vbslq_s8(v61, v53, v60);
    v49 = vbslq_s8(v61, v53, v58);
    ++v51;
  }
  while (v51 != v11);
  v193 = v52;
  if (v12 != v14)
  {
    v80 = vdup_n_s32(0x7F7FFFFFu);
    v81 = v12;
    do
    {
      v91 = *(_QWORD *)v81;
      if (*(_BYTE *)(*(_QWORD *)v81 + 24))
      {
        v83.i64[0] = *(_QWORD *)(v91 + 8);
        v82.i64[0] = *(_QWORD *)(v91 + 16);
      }
      else
      {
        v92 = **(float32x2_t ***)v91;
        v93 = *(float32x2_t **)(*(_QWORD *)v91 + 8);
        if (v92 == v93)
        {
          v82.i64[0] = 0x80000000800000;
          *(int32x2_t *)v83.f32 = v80;
        }
        else
        {
          v95 = *v92;
          v94 = v92 + 1;
          v96 = v95;
          *(float32x2_t *)v82.i8 = v95;
          if (v94 == v93)
          {
            *(float32x2_t *)v83.f32 = v96;
          }
          else
          {
            v97 = v96;
            *(float32x2_t *)v83.f32 = v96;
            do
            {
              v98 = *v94++;
              v99 = (int8x8_t)vcgt_f32(v97, v98);
              v100 = (int8x8_t)vcgt_f32(v98, v96);
              *(int8x8_t *)v83.f32 = vbsl_s8(v99, (int8x8_t)v98, *(int8x8_t *)v83.f32);
              v97 = (float32x2_t)vbsl_s8(v99, (int8x8_t)v98, (int8x8_t)v97);
              *(int8x8_t *)v82.i8 = vbsl_s8(v100, (int8x8_t)v98, *(int8x8_t *)v82.i8);
              v96 = (float32x2_t)vbsl_s8(v100, (int8x8_t)v98, (int8x8_t)v96);
            }
            while (v94 != v93);
          }
        }
        *(_QWORD *)&v101 = v83.i64[0];
        *((_QWORD *)&v101 + 1) = v82.i64[0];
        *(_OWORD *)(v91 + 8) = v101;
        *(_BYTE *)(v91 + 24) = 1;
      }
      v84.i64[0] = v83.i64[0];
      v84.i64[1] = v83.i64[0];
      v82.i64[1] = v82.i64[0];
      v85.i64[0] = v49.i64[0];
      v85.i64[1] = v83.i64[0];
      v83.i64[1] = vextq_s8(v49, v49, 8uLL).u64[0];
      v86 = (int8x16_t)vcgtq_f32(v85, v83);
      v87 = vbslq_s8(v86, v84, v49);
      v88.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v87, (float32x4_t)v82)).u32[0];
      v88.i32[1] = vmovn_s32(vcgtq_f32(*(float32x4_t *)&v82, *(float32x4_t *)&v87)).i32[1];
      v89 = vbslq_s8(v86, v84, v52);
      v90 = (int8x16_t)vmovl_s16(v88);
      v52 = vbslq_s8(v90, v82, v89);
      v49 = vbslq_s8(v90, v82, v87);
      v81 += 8;
    }
    while (v81 != v14);
    v193 = v52;
  }
  if ((sub_2233E89DC(&v193, &v179, &__p, a4 + 1, a5) & 1) != 0)
    goto LABEL_135;
LABEL_228:
  v159 = 0;
  v160 = __p;
  if (__p)
LABEL_211:
    operator delete(v160);
LABEL_212:
  if (v173)
    operator delete(v173);
  if (v176)
    operator delete(v176);
  if (v179)
    operator delete(v179);
  if (v182)
    operator delete(v182);
  if (v185)
    operator delete(v185);
  return v159;
}

void sub_2233E8920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  if (__p)
  {
    operator delete(__p);
    v29 = a16;
    if (!a16)
    {
LABEL_3:
      v30 = a19;
      if (!a19)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v29 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v29);
  v30 = a19;
  if (!a19)
  {
LABEL_4:
    v31 = a22;
    if (!a22)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v30);
  v31 = a22;
  if (!a22)
  {
LABEL_5:
    v32 = a25;
    if (!a25)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v31);
  v32 = a25;
  if (!a25)
  {
LABEL_6:
    v33 = a28;
    if (!a28)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v32);
  v33 = a28;
  if (!a28)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233E89DC(float *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  float v9;
  uint64_t **v10;
  uint64_t **v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t **i;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t **v22;
  uint64_t **v23;
  unint64_t v24;
  int8x16_t v25;
  int32x2_t v26;
  char *v27;
  int8x16_t v28;
  int8x16_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int16x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  uint64_t v38;
  float32x2_t *v39;
  float32x2_t *v40;
  float32x2_t *v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  int8x8_t v46;
  int8x8_t v47;
  __int128 v48;
  int8x16_t v49;
  int32x2_t v50;
  uint64_t **v51;
  int8x16_t v52;
  int8x16_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int16x4_t v59;
  int8x16_t v60;
  int8x16_t v61;
  uint64_t *v62;
  float32x2_t *v63;
  float32x2_t *v64;
  float32x2_t *v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  int8x8_t v70;
  int8x8_t v71;
  __int128 v72;
  char *v73;
  uint64_t **k;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  int32x2_t v80;
  char *v81;
  int8x16_t v82;
  float32x4_t v83;
  int8x16_t v84;
  float32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int16x4_t v88;
  int8x16_t v89;
  int8x16_t v90;
  uint64_t v91;
  float32x2_t *v92;
  float32x2_t *v93;
  float32x2_t *v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  int8x8_t v99;
  int8x8_t v100;
  __int128 v101;
  uint64_t **v102;
  uint64_t **v103;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  uint64_t **v112;
  uint64_t **v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  char *v121;
  int8x16_t v122;
  int32x2_t v123;
  int8x16_t v124;
  int8x16_t v125;
  float32x4_t v126;
  int8x16_t v127;
  float32x4_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int16x4_t v131;
  int8x16_t v132;
  int8x16_t v133;
  uint64_t *v134;
  float32x2_t *v135;
  float32x2_t *v136;
  float32x2_t *v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x2_t v141;
  int8x8_t v142;
  int8x8_t v143;
  __int128 v144;
  char *v145;
  uint64_t **j;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  BOOL v158;
  uint64_t v159;
  void *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  BOOL v165;
  char *v167;
  unint64_t v168;
  char *v169;
  void *__p;
  char *v171;
  uint64_t v172;
  void *v173;
  char *v174;
  uint64_t v175;
  void *v176;
  char *v177;
  uint64_t v178;
  void *v179;
  uint64_t **v180;
  uint64_t v181;
  void *v182;
  uint64_t **v183;
  uint64_t v184;
  void *v185;
  uint64_t **v186;
  uint64_t v187;
  float v188[2];
  uint64_t v189;
  uint64_t v190;
  int v191;
  float v192;
  int8x16_t v193;
  uint64_t v194;

  v194 = *MEMORY[0x24BDAC8D0];
  v8 = *((_QWORD *)a1 + 1);
  v9 = (float)(a1[1] + a1[3]) * 0.5;
  v190 = *(_QWORD *)a1;
  v191 = v8;
  LODWORD(v188[0]) = v190;
  v189 = v8;
  v192 = v9;
  v188[1] = v9;
  v185 = 0;
  v186 = 0;
  v187 = 0;
  v182 = 0;
  v183 = 0;
  v184 = 0;
  v179 = 0;
  v180 = 0;
  v181 = 0;
  v176 = 0;
  v177 = 0;
  v178 = 0;
  v173 = 0;
  v174 = 0;
  v175 = 0;
  __p = 0;
  v171 = 0;
  v172 = 0;
  sub_2233E6B98((float *)&v190, v188, a2, &v185, (char **)&v182, (char **)&v179);
  sub_2233E6B98((float *)&v190, v188, a3, &v176, (char **)&v173, (char **)&__p);
  v10 = (uint64_t **)v179;
  v11 = v180;
  v12 = (char *)__p;
  v168 = a4;
  v169 = (char *)__p;
  if (v179 == v180)
  {
    v14 = v171;
    goto LABEL_22;
  }
  v13 = (char *)v180 - (_BYTE *)v179;
  v14 = v171;
  if ((unint64_t)((char *)v180 - (_BYTE *)v179) < 0x80
    || a4 > 0x63
    || (unint64_t)(v171 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v171)
    {
      v15 = (char *)__p + 8;
      for (i = (uint64_t **)v179; i != v11; ++i)
      {
        if (!*(_BYTE *)a5)
        {
          v17 = v15;
LABEL_9:
          v18 = **i;
          v19 = **((_QWORD **)v17 - 1);
          v20 = *(_QWORD *)(a5 + 8);
          strcpy(v193.i8, "FFFFFFFFF");
          sub_2233E9788(v18, v19, (unsigned __int8 *)&v193, v20);
          if (!v193.i8[9])
          {
            v21 = v193.u8[0] != 84 && v193.u8[0] - 48 >= 0xA;
            if (!v21
              || v193.u8[1] == 84
              || v193.u8[1] - 48 <= 9
              || v193.u8[3] == 84
              || v193.u8[3] - 48 < 0xA)
            {
LABEL_210:
              v159 = 0;
              *(_BYTE *)a5 = 1;
              v160 = __p;
              if (__p)
                goto LABEL_211;
              goto LABEL_212;
            }
          }
          while (v17 != v14)
          {
            v17 += 8;
            if (!*(_BYTE *)a5)
              goto LABEL_9;
          }
        }
      }
    }
LABEL_135:
    v121 = v177;
    if ((unint64_t)(v177 - (_BYTE *)v176) < 0x80
      || (unint64_t)(v174 - (_BYTE *)v173) < 0x80
      || v168 > 0x63
      || v13 < 0x79)
    {
      if (v176 != v177)
      {
        v145 = (char *)v176 + 8;
        for (j = v10; j != v11; ++j)
        {
          if (!*(_BYTE *)a5)
          {
            v147 = v145;
LABEL_157:
            v148 = **j;
            v149 = **((_QWORD **)v147 - 1);
            v150 = *(_QWORD *)(a5 + 8);
            strcpy(v193.i8, "FFFFFFFFF");
            sub_2233E9788(v148, v149, (unsigned __int8 *)&v193, v150);
            if (!v193.i8[9])
            {
              v151 = v193.u8[0] != 84 && v193.u8[0] - 48 >= 0xA;
              if (!v151
                || v193.u8[1] == 84
                || v193.u8[1] - 48 <= 9
                || v193.u8[3] == 84
                || v193.u8[3] - 48 < 0xA)
              {
                goto LABEL_210;
              }
            }
            while (v147 != v121)
            {
              v147 += 8;
              if (!*(_BYTE *)a5)
                goto LABEL_157;
            }
          }
        }
      }
      v152 = v174;
      if (v173 != v174)
      {
        v153 = (char *)v173 + 8;
        do
        {
          if (!*(_BYTE *)a5)
          {
            v154 = v153;
LABEL_175:
            v155 = **v10;
            v156 = **((_QWORD **)v154 - 1);
            v157 = *(_QWORD *)(a5 + 8);
            strcpy(v193.i8, "FFFFFFFFF");
            sub_2233E9788(v155, v156, (unsigned __int8 *)&v193, v157);
            if (!v193.i8[9])
            {
              v158 = v193.u8[0] != 84 && v193.u8[0] - 48 >= 0xA;
              if (!v158
                || v193.u8[1] == 84
                || v193.u8[1] - 48 <= 9
                || v193.u8[3] == 84
                || v193.u8[3] - 48 < 0xA)
              {
                goto LABEL_210;
              }
            }
            while (v154 != v152)
            {
              v154 += 8;
              if (!*(_BYTE *)a5)
                goto LABEL_175;
            }
          }
          ++v10;
        }
        while (v10 != v11);
      }
      v12 = v169;
    }
    else
    {
      v122 = (int8x16_t)xmmword_2245F53F0;
      v123 = vdup_n_s32(0x7F7FFFFFu);
      v124 = (int8x16_t)xmmword_2245F53F0;
      v12 = v169;
      do
      {
        v134 = *v10;
        if (*((_BYTE *)*v10 + 24))
        {
          v126.i64[0] = v134[1];
          v125.i64[0] = v134[2];
        }
        else
        {
          v135 = *(float32x2_t **)*v134;
          v136 = *(float32x2_t **)(*v134 + 8);
          if (v135 == v136)
          {
            v125.i64[0] = 0x80000000800000;
            *(int32x2_t *)v126.f32 = v123;
          }
          else
          {
            v138 = *v135;
            v137 = v135 + 1;
            v139 = v138;
            *(float32x2_t *)v125.i8 = v138;
            if (v137 == v136)
            {
              *(float32x2_t *)v126.f32 = v139;
            }
            else
            {
              v140 = v139;
              *(float32x2_t *)v126.f32 = v139;
              do
              {
                v141 = *v137++;
                v142 = (int8x8_t)vcgt_f32(v140, v141);
                v143 = (int8x8_t)vcgt_f32(v141, v139);
                *(int8x8_t *)v126.f32 = vbsl_s8(v142, (int8x8_t)v141, *(int8x8_t *)v126.f32);
                v140 = (float32x2_t)vbsl_s8(v142, (int8x8_t)v141, (int8x8_t)v140);
                *(int8x8_t *)v125.i8 = vbsl_s8(v143, (int8x8_t)v141, *(int8x8_t *)v125.i8);
                v139 = (float32x2_t)vbsl_s8(v143, (int8x8_t)v141, (int8x8_t)v139);
              }
              while (v137 != v136);
            }
          }
          *(_QWORD *)&v144 = v126.i64[0];
          *((_QWORD *)&v144 + 1) = v125.i64[0];
          *(_OWORD *)(v134 + 1) = v144;
          *((_BYTE *)v134 + 24) = 1;
        }
        v127.i64[0] = v126.i64[0];
        v127.i64[1] = v126.i64[0];
        v125.i64[1] = v125.i64[0];
        v128.i64[0] = v122.i64[0];
        v128.i64[1] = v126.i64[0];
        v126.i64[1] = vextq_s8(v122, v122, 8uLL).u64[0];
        v129 = (int8x16_t)vcgtq_f32(v128, v126);
        v130 = vbslq_s8(v129, v127, v122);
        v131.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v130, (float32x4_t)v125)).u32[0];
        v131.i32[1] = vmovn_s32(vcgtq_f32(*(float32x4_t *)&v125, *(float32x4_t *)&v130)).i32[1];
        v132 = vbslq_s8(v129, v127, v124);
        v133 = (int8x16_t)vmovl_s16(v131);
        v124 = vbslq_s8(v133, v125, v132);
        v122 = vbslq_s8(v133, v125, v130);
        ++v10;
      }
      while (v10 != v11);
      v193 = v124;
      if (!sub_2233E7C30((float *)v193.i32, (uint64_t **)&v179, (uint64_t **)&v176, v168 + 1, a5)
        || (sub_2233E7C30((float *)v193.i32, (uint64_t **)&v179, (uint64_t **)&v173, v168 + 1, a5) & 1) == 0)
      {
        goto LABEL_228;
      }
    }
LABEL_22:
    v22 = (uint64_t **)v185;
    v23 = v186;
    v24 = (char *)v186 - (_BYTE *)v185;
    if (v12 != v14)
    {
      if (v24 < 0x80
        || (unint64_t)((char *)v183 - (_BYTE *)v182) < 0x80
        || v168 > 0x63
        || (unint64_t)(v14 - v12) < 0x79)
      {
        if (v185 != v186)
        {
          v73 = v12 + 8;
          for (k = (uint64_t **)v185; k != v23; ++k)
          {
            if (v12 != v14 && !*(_BYTE *)a5)
            {
              v75 = v73;
LABEL_60:
              v76 = **k;
              v77 = **((_QWORD **)v75 - 1);
              v78 = *(_QWORD *)(a5 + 8);
              strcpy(v193.i8, "FFFFFFFFF");
              sub_2233E9788(v76, v77, (unsigned __int8 *)&v193, v78);
              if (!v193.i8[9])
              {
                v79 = v193.u8[0] != 84 && v193.u8[0] - 48 >= 0xA;
                if (!v79
                  || v193.u8[1] == 84
                  || v193.u8[1] - 48 <= 9
                  || v193.u8[3] == 84
                  || v193.u8[3] - 48 < 0xA)
                {
                  goto LABEL_210;
                }
              }
              while (v75 != v14)
              {
                v75 += 8;
                if (!*(_BYTE *)a5)
                  goto LABEL_60;
              }
              v12 = v169;
            }
          }
        }
        v102 = (uint64_t **)v182;
        v103 = v183;
        if (v182 != v183 && v12 != v14)
        {
          v167 = v12 + 8;
          do
          {
            if (v12 != v14 && !*(_BYTE *)a5)
            {
              v161 = v167;
LABEL_198:
              v162 = **v102;
              v163 = **((_QWORD **)v161 - 1);
              v164 = *(_QWORD *)(a5 + 8);
              strcpy(v193.i8, "FFFFFFFFF");
              sub_2233E9788(v162, v163, (unsigned __int8 *)&v193, v164);
              if (!v193.i8[9])
              {
                v165 = v193.u8[0] != 84 && v193.u8[0] - 48 >= 0xA;
                if (!v165
                  || v193.u8[1] == 84
                  || v193.u8[1] - 48 <= 9
                  || v193.u8[3] == 84
                  || v193.u8[3] - 48 < 0xA)
                {
                  goto LABEL_210;
                }
              }
              while (v161 != v14)
              {
                v161 += 8;
                if (!*(_BYTE *)a5)
                  goto LABEL_198;
              }
              v12 = v169;
            }
            ++v102;
          }
          while (v102 != v103);
        }
      }
      else
      {
        v25 = (int8x16_t)xmmword_2245F53F0;
        v26 = vdup_n_s32(0x7F7FFFFFu);
        v27 = v12;
        v28 = (int8x16_t)xmmword_2245F53F0;
        do
        {
          v38 = *(_QWORD *)v27;
          if (*(_BYTE *)(*(_QWORD *)v27 + 24))
          {
            v30.i64[0] = *(_QWORD *)(v38 + 8);
            v29.i64[0] = *(_QWORD *)(v38 + 16);
          }
          else
          {
            v39 = **(float32x2_t ***)v38;
            v40 = *(float32x2_t **)(*(_QWORD *)v38 + 8);
            if (v39 == v40)
            {
              v29.i64[0] = 0x80000000800000;
              *(int32x2_t *)v30.f32 = v26;
            }
            else
            {
              v42 = *v39;
              v41 = v39 + 1;
              v43 = v42;
              *(float32x2_t *)v29.i8 = v42;
              if (v41 == v40)
              {
                *(float32x2_t *)v30.f32 = v43;
              }
              else
              {
                v44 = v43;
                *(float32x2_t *)v30.f32 = v43;
                do
                {
                  v45 = *v41++;
                  v46 = (int8x8_t)vcgt_f32(v44, v45);
                  v47 = (int8x8_t)vcgt_f32(v45, v43);
                  *(int8x8_t *)v30.f32 = vbsl_s8(v46, (int8x8_t)v45, *(int8x8_t *)v30.f32);
                  v44 = (float32x2_t)vbsl_s8(v46, (int8x8_t)v45, (int8x8_t)v44);
                  *(int8x8_t *)v29.i8 = vbsl_s8(v47, (int8x8_t)v45, *(int8x8_t *)v29.i8);
                  v43 = (float32x2_t)vbsl_s8(v47, (int8x8_t)v45, (int8x8_t)v43);
                }
                while (v41 != v40);
              }
            }
            *(_QWORD *)&v48 = v30.i64[0];
            *((_QWORD *)&v48 + 1) = v29.i64[0];
            *(_OWORD *)(v38 + 8) = v48;
            *(_BYTE *)(v38 + 24) = 1;
          }
          v31.i64[0] = v30.i64[0];
          v31.i64[1] = v30.i64[0];
          v29.i64[1] = v29.i64[0];
          v32.i64[0] = v25.i64[0];
          v32.i64[1] = v30.i64[0];
          v30.i64[1] = vextq_s8(v25, v25, 8uLL).u64[0];
          v33 = (int8x16_t)vcgtq_f32(v32, v30);
          v34 = vbslq_s8(v33, v31, v25);
          v35.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v34, (float32x4_t)v29)).u32[0];
          v35.i32[1] = vmovn_s32(vcgtq_f32(*(float32x4_t *)&v29, *(float32x4_t *)&v34)).i32[1];
          v36 = vbslq_s8(v33, v31, v28);
          v37 = (int8x16_t)vmovl_s16(v35);
          v28 = vbslq_s8(v37, v29, v36);
          v25 = vbslq_s8(v37, v29, v34);
          v27 += 8;
        }
        while (v27 != v14);
        v193 = v28;
        if (!sub_2233E7C30((float *)v193.i32, (uint64_t **)&v185, (uint64_t **)&__p, v168 + 1, a5)
          || (sub_2233E7C30((float *)v193.i32, (uint64_t **)&v182, (uint64_t **)&__p, v168 + 1, a5) & 1) == 0)
        {
          goto LABEL_228;
        }
      }
    }
    if (v24 < 0x80 || v168 > 0x63 || (unint64_t)(v177 - (_BYTE *)v176) < 0x79)
    {
      if (v22 != v23)
      {
        v105 = v177;
        if (v176 != v177)
        {
          v106 = (char *)v176 + 8;
          do
          {
            if (!*(_BYTE *)a5)
            {
              v107 = v106;
LABEL_98:
              v108 = **v22;
              v109 = **((_QWORD **)v107 - 1);
              v110 = *(_QWORD *)(a5 + 8);
              strcpy(v193.i8, "FFFFFFFFF");
              sub_2233E9788(v108, v109, (unsigned __int8 *)&v193, v110);
              if (!v193.i8[9])
              {
                v111 = v193.u8[0] != 84 && v193.u8[0] - 48 >= 0xA;
                if (!v111
                  || v193.u8[1] == 84
                  || v193.u8[1] - 48 <= 9
                  || v193.u8[3] == 84
                  || v193.u8[3] - 48 < 0xA)
                {
                  goto LABEL_210;
                }
              }
              while (v107 != v105)
              {
                v107 += 8;
                if (!*(_BYTE *)a5)
                  goto LABEL_98;
              }
            }
            ++v22;
          }
          while (v22 != v23);
        }
      }
    }
    else if ((sub_2233E7C30((float *)&v190, (uint64_t **)&v185, (uint64_t **)&v176, v168 + 1, a5) & 1) == 0)
    {
      goto LABEL_228;
    }
    v113 = (uint64_t **)v182;
    v112 = v183;
    if ((unint64_t)((char *)v183 - (_BYTE *)v182) < 0x80
      || v168 > 0x63
      || (unint64_t)(v174 - (_BYTE *)v173) < 0x79)
    {
      if (v182 != v183)
      {
        v114 = v174;
        if (v173 != v174)
        {
          v115 = (char *)v173 + 8;
          do
          {
            if (!*(_BYTE *)a5)
            {
              v116 = v115;
LABEL_121:
              v117 = **v113;
              v118 = **((_QWORD **)v116 - 1);
              v119 = *(_QWORD *)(a5 + 8);
              strcpy(v193.i8, "FFFFFFFFF");
              sub_2233E9788(v117, v118, (unsigned __int8 *)&v193, v119);
              if (!v193.i8[9])
              {
                v120 = v193.u8[0] != 84 && v193.u8[0] - 48 >= 0xA;
                if (!v120
                  || v193.u8[1] == 84
                  || v193.u8[1] - 48 <= 9
                  || v193.u8[3] == 84
                  || v193.u8[3] - 48 < 0xA)
                {
                  goto LABEL_210;
                }
              }
              while (v116 != v114)
              {
                v116 += 8;
                if (!*(_BYTE *)a5)
                  goto LABEL_121;
              }
            }
            ++v113;
          }
          while (v113 != v112);
        }
      }
    }
    else if ((sub_2233E7C30(v188, (uint64_t **)&v182, (uint64_t **)&v173, v168 + 1, a5) & 1) == 0)
    {
      goto LABEL_228;
    }
    v159 = 1;
    v160 = __p;
    if (__p)
      goto LABEL_211;
    goto LABEL_212;
  }
  v49 = (int8x16_t)xmmword_2245F53F0;
  v50 = vdup_n_s32(0x7F7FFFFFu);
  v51 = (uint64_t **)v179;
  v52 = (int8x16_t)xmmword_2245F53F0;
  do
  {
    v62 = *v51;
    if (*((_BYTE *)*v51 + 24))
    {
      v54.i64[0] = v62[1];
      v53.i64[0] = v62[2];
    }
    else
    {
      v63 = *(float32x2_t **)*v62;
      v64 = *(float32x2_t **)(*v62 + 8);
      if (v63 == v64)
      {
        v53.i64[0] = 0x80000000800000;
        *(int32x2_t *)v54.f32 = v50;
      }
      else
      {
        v66 = *v63;
        v65 = v63 + 1;
        v67 = v66;
        *(float32x2_t *)v53.i8 = v66;
        if (v65 == v64)
        {
          *(float32x2_t *)v54.f32 = v67;
        }
        else
        {
          *(float32x2_t *)v54.f32 = v67;
          v68 = v67;
          do
          {
            v69 = *v65++;
            v70 = (int8x8_t)vcgt_f32(v68, v69);
            v71 = (int8x8_t)vcgt_f32(v69, v67);
            *(int8x8_t *)v54.f32 = vbsl_s8(v70, (int8x8_t)v69, *(int8x8_t *)v54.f32);
            v68 = (float32x2_t)vbsl_s8(v70, (int8x8_t)v69, (int8x8_t)v68);
            *(int8x8_t *)v53.i8 = vbsl_s8(v71, (int8x8_t)v69, *(int8x8_t *)v53.i8);
            v67 = (float32x2_t)vbsl_s8(v71, (int8x8_t)v69, (int8x8_t)v67);
          }
          while (v65 != v64);
        }
      }
      *(_QWORD *)&v72 = v54.i64[0];
      *((_QWORD *)&v72 + 1) = v53.i64[0];
      *(_OWORD *)(v62 + 1) = v72;
      *((_BYTE *)v62 + 24) = 1;
    }
    v55.i64[0] = v54.i64[0];
    v55.i64[1] = v54.i64[0];
    v53.i64[1] = v53.i64[0];
    v56.i64[0] = v49.i64[0];
    v56.i64[1] = v54.i64[0];
    v54.i64[1] = vextq_s8(v49, v49, 8uLL).u64[0];
    v57 = (int8x16_t)vcgtq_f32(v56, v54);
    v58 = vbslq_s8(v57, v55, v49);
    v59.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v58, (float32x4_t)v53)).u32[0];
    v59.i32[1] = vmovn_s32(vcgtq_f32(*(float32x4_t *)&v53, *(float32x4_t *)&v58)).i32[1];
    v60 = vbslq_s8(v57, v55, v52);
    v61 = (int8x16_t)vmovl_s16(v59);
    v52 = vbslq_s8(v61, v53, v60);
    v49 = vbslq_s8(v61, v53, v58);
    ++v51;
  }
  while (v51 != v11);
  v193 = v52;
  if (v12 != v14)
  {
    v80 = vdup_n_s32(0x7F7FFFFFu);
    v81 = v12;
    do
    {
      v91 = *(_QWORD *)v81;
      if (*(_BYTE *)(*(_QWORD *)v81 + 24))
      {
        v83.i64[0] = *(_QWORD *)(v91 + 8);
        v82.i64[0] = *(_QWORD *)(v91 + 16);
      }
      else
      {
        v92 = **(float32x2_t ***)v91;
        v93 = *(float32x2_t **)(*(_QWORD *)v91 + 8);
        if (v92 == v93)
        {
          v82.i64[0] = 0x80000000800000;
          *(int32x2_t *)v83.f32 = v80;
        }
        else
        {
          v95 = *v92;
          v94 = v92 + 1;
          v96 = v95;
          *(float32x2_t *)v82.i8 = v95;
          if (v94 == v93)
          {
            *(float32x2_t *)v83.f32 = v96;
          }
          else
          {
            v97 = v96;
            *(float32x2_t *)v83.f32 = v96;
            do
            {
              v98 = *v94++;
              v99 = (int8x8_t)vcgt_f32(v97, v98);
              v100 = (int8x8_t)vcgt_f32(v98, v96);
              *(int8x8_t *)v83.f32 = vbsl_s8(v99, (int8x8_t)v98, *(int8x8_t *)v83.f32);
              v97 = (float32x2_t)vbsl_s8(v99, (int8x8_t)v98, (int8x8_t)v97);
              *(int8x8_t *)v82.i8 = vbsl_s8(v100, (int8x8_t)v98, *(int8x8_t *)v82.i8);
              v96 = (float32x2_t)vbsl_s8(v100, (int8x8_t)v98, (int8x8_t)v96);
            }
            while (v94 != v93);
          }
        }
        *(_QWORD *)&v101 = v83.i64[0];
        *((_QWORD *)&v101 + 1) = v82.i64[0];
        *(_OWORD *)(v91 + 8) = v101;
        *(_BYTE *)(v91 + 24) = 1;
      }
      v84.i64[0] = v83.i64[0];
      v84.i64[1] = v83.i64[0];
      v82.i64[1] = v82.i64[0];
      v85.i64[0] = v49.i64[0];
      v85.i64[1] = v83.i64[0];
      v83.i64[1] = vextq_s8(v49, v49, 8uLL).u64[0];
      v86 = (int8x16_t)vcgtq_f32(v85, v83);
      v87 = vbslq_s8(v86, v84, v49);
      v88.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)v87, (float32x4_t)v82)).u32[0];
      v88.i32[1] = vmovn_s32(vcgtq_f32(*(float32x4_t *)&v82, *(float32x4_t *)&v87)).i32[1];
      v89 = vbslq_s8(v86, v84, v52);
      v90 = (int8x16_t)vmovl_s16(v88);
      v52 = vbslq_s8(v90, v82, v89);
      v49 = vbslq_s8(v90, v82, v87);
      v81 += 8;
    }
    while (v81 != v14);
    v193 = v52;
  }
  if ((sub_2233E7C30((float *)v193.i32, (uint64_t **)&v179, (uint64_t **)&__p, a4 + 1, a5) & 1) != 0)
    goto LABEL_135;
LABEL_228:
  v159 = 0;
  v160 = __p;
  if (__p)
LABEL_211:
    operator delete(v160);
LABEL_212:
  if (v173)
    operator delete(v173);
  if (v176)
    operator delete(v176);
  if (v179)
    operator delete(v179);
  if (v182)
    operator delete(v182);
  if (v185)
    operator delete(v185);
  return v159;
}

void sub_2233E96CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  if (__p)
  {
    operator delete(__p);
    v29 = a16;
    if (!a16)
    {
LABEL_3:
      v30 = a19;
      if (!a19)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v29 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v29);
  v30 = a19;
  if (!a19)
  {
LABEL_4:
    v31 = a22;
    if (!a22)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v30);
  v31 = a22;
  if (!a22)
  {
LABEL_5:
    v32 = a25;
    if (!a25)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v31);
  v32 = a25;
  if (!a25)
  {
LABEL_6:
    v33 = a28;
    if (!a28)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v32);
  v33 = a28;
  if (!a28)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

void sub_2233E9788(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _BYTE *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  float *v32;
  uint64_t v33;
  float *v34;
  uint64_t *v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  float *v43;
  uint64_t v44;
  float *v45;
  _QWORD *v46;
  uint64_t *v47;
  int v48;
  int v49;
  _BOOL4 v50;
  int v51;
  int v52;
  char *v53;
  uint64_t *v54;
  char v55;
  int v56;
  int v57;
  int v58;
  uint64_t *v59;
  int v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  int v89;
  int v90;
  _BOOL4 v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  float *v95;
  float *v96;
  unsigned __int8 *v97[3];
  void *v98;
  uint64_t *v99;
  uint64_t v100;
  _BYTE v101[32];
  _QWORD v102[2];
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  unint64_t v106;
  _BYTE *v107;
  void **v108;
  unsigned __int8 **v109;
  void *__p;
  _BYTE *v111;
  uint64_t v112;
  _QWORD *v113;
  _BYTE *v114;
  uint64_t v115;
  int64x2_t v116;
  int64x2_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;

  if (a3[9])
    return;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v97[0] = a3;
  v97[1] = (unsigned __int8 *)a1;
  v97[2] = (unsigned __int8 *)a2;
  sub_2233EB9D0((float32x2_t **)a1, (float32x2_t **)a2, (uint64_t)v101);
  v113 = 0;
  v114 = 0;
  v115 = 0;
  __p = 0;
  v111 = 0;
  v112 = 0;
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (v9 - *(_QWORD *)a1) >> 3;
  if (v9 == *(_QWORD *)a1)
    v11 = 0;
  else
    v11 = v10 + 1;
  if (v11 >= 2)
  {
    v103 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v104 = v8;
    *((_QWORD *)&v104 + 1) = v9;
    v105 = v10;
    v106 = v11;
    v116.i64[0] = v8;
    v116.i64[1] = v8;
    v117.i64[0] = v9;
    v117.i64[1] = v10;
    v118 = 0;
    *(_QWORD *)&v122 = 0;
    *((_QWORD *)&v122 + 1) = -1;
    v123 = -1;
    sub_2233EBC50((void **)&v113, &v103, (uint64_t)&v116, (uint64_t)v101, a4, &v122, 0xAuLL);
  }
  v111 = 0;
  v12 = *(_QWORD *)a2;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = (v13 - *(_QWORD *)a2) >> 3;
  if (v13 == *(_QWORD *)a2)
    v15 = 0;
  else
    v15 = v14 + 1;
  if (v15 >= 2)
  {
    v103 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v104 = v12;
    *((_QWORD *)&v104 + 1) = v13;
    v105 = v14;
    v106 = v15;
    v116.i64[0] = v12;
    v116.i64[1] = v12;
    v117.i64[0] = v13;
    v117.i64[1] = v14;
    v118 = 0;
    *(_QWORD *)&v122 = 1;
    *((_QWORD *)&v122 + 1) = -1;
    v123 = -1;
    sub_2233EBC50(&__p, &v103, (uint64_t)&v116, (uint64_t)v101, a4, &v122, 0xAuLL);
  }
  LODWORD(v103) = 0;
  *(_QWORD *)&v104 = a1;
  DWORD2(v104) = 1;
  v105 = a2;
  v106 = a4;
  v107 = v101;
  v108 = &v98;
  v109 = v97;
  v102[0] = a4;
  v102[1] = a4;
  v17 = v113;
  v16 = v114;
  if (0xEEEEEEEEEEEEEEEFLL * ((v114 - (_BYTE *)v113) >> 3) >= 0x11
    && 0xEEEEEEEEEEEEEEEFLL * ((v111 - (_BYTE *)__p) >> 3) >= 0x11)
  {
    v122 = 0uLL;
    v123 = 0;
    v119 = 0;
    v120 = 0;
    v121 = 0;
    v116 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v117 = vdupq_n_s64(0x8000000000000000);
    sub_2233DCD4C(&v113, v116.i64, (char **)&v122);
    sub_2233DCD4C(&__p, v116.i64, &v119);
    sub_2233EC5A4(&v116, &v122, &v119, 0, (uint64_t)&v103, (uint64_t)v102, (uint64_t)v102);
    if (v119)
    {
      v120 = v119;
      operator delete(v119);
    }
    if ((_QWORD)v122)
    {
      *((_QWORD *)&v122 + 1) = v122;
      operator delete((void *)v122);
    }
    goto LABEL_35;
  }
  if (v113 == (_QWORD *)v114)
  {
LABEL_35:
    v18 = __p;
    goto LABEL_36;
  }
  v18 = __p;
  v19 = v111;
  if (__p != v111)
  {
    do
    {
      v20 = __p;
      if (__p != v19)
      {
        do
        {
          if (v17[6] >= v20[4] && v17[4] <= v20[6] && v17[7] >= v20[5] && v17[5] <= v20[7])
          {
            if (!sub_2233EDB90(0, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t)v17, 1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), (uint64_t)v20, a4, (uint64_t)v101, (uint64_t)&v98, v97))goto LABEL_35;
            v19 = v111;
          }
          v20 += 15;
        }
        while (v20 != v19);
        v16 = v114;
      }
      v17 += 15;
    }
    while (v17 != v16);
    goto LABEL_35;
  }
LABEL_36:
  if (v18)
  {
    v111 = v18;
    operator delete(v18);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v22 = (uint64_t *)v98;
  if (a3[9])
    goto LABEL_216;
  v23 = v99;
  if (v98 != v99)
    goto LABEL_42;
  v24 = *(uint64_t **)a1;
  if (*a3 == 70 || a3[3] == 70)
  {
    if (v24 != *(uint64_t **)(a1 + 8))
    {
      v116.i64[0] = *v24;
      v25 = *(_QWORD *)a2;
      v26 = *(float **)(a2 + 8);
      v27 = (uint64_t)v26 - *(_QWORD *)a2;
      if ((unint64_t)v27 >= 0x18)
      {
        v28 = v27 >> 3;
        if (v26 == (float *)v25)
          v29 = 0;
        else
          v29 = v28 + 1;
        LODWORD(v103) = 0;
        BYTE4(v103) = 0;
        v30 = v29 - 1;
        if (v29 >= v28)
        {
          v31 = v26;
          if (v30 <= v28)
            v31 = (float *)(v25 + 8 * (v30 % v28));
        }
        else
        {
          v31 = v26 - 2;
        }
        if (v29 != 1)
        {
          v93 = v25;
          v95 = v26;
          do
          {
            if (v30 + 1 >= v28)
            {
              v32 = v95;
              if (v30 <= v28)
                v32 = (float *)(v93 + 8 * (v30 % v28));
            }
            else
            {
              v32 = v26 - 2;
            }
            v33 = v30 - 1;
            if (v30 >= v28)
            {
              v34 = v95;
              if (v33 <= v28)
                v34 = (float *)(v93 + 8 * (v33 % v28));
            }
            else
            {
              v34 = v31 - 2;
            }
            if (!sub_2233E62E4((float *)v116.i32, v32, v34, (uint64_t)&v103))
              break;
            if (v30 + 1 >= v28)
            {
              v26 = v95;
              if (v30 <= v28)
                v26 = (float *)(v93 + 8 * (v30 % v28));
            }
            else
            {
              v26 -= 2;
            }
            if (v30 < v28)
            {
              v31 -= 2;
            }
            else
            {
              v31 = v95;
              if (v33 <= v28)
                v31 = (float *)(v93 + 8 * (v33 % v28));
            }
            --v30;
          }
          while (v33);
          if (!BYTE4(v103) && (_DWORD)v103)
          {
            if (*a3 - 58 <= 0xFFFFFFF7)
              *a3 = 50;
            if (a3[3] - 58 <= 0xFFFFFFF6)
              a3[3] = 49;
          }
        }
      }
    }
    v22 = (uint64_t *)v98;
    if (a3[9])
      goto LABEL_216;
  }
  v23 = v99;
  if (v22 == v99)
  {
    v35 = *(uint64_t **)a2;
    if (*a3 == 70 || a3[1] == 70)
    {
      if (v35 != *(uint64_t **)(a2 + 8))
      {
        v116.i64[0] = *v35;
        v36 = *(_QWORD *)a1;
        v37 = *(float **)(a1 + 8);
        v38 = (uint64_t)v37 - *(_QWORD *)a1;
        if ((unint64_t)v38 >= 0x18)
        {
          v39 = v38 >> 3;
          if (v37 == (float *)v36)
            v40 = 0;
          else
            v40 = v39 + 1;
          LODWORD(v103) = 0;
          BYTE4(v103) = 0;
          v41 = v40 - 1;
          if (v40 >= v39)
          {
            v42 = v37;
            if (v41 <= v39)
              v42 = (float *)(v36 + 8 * (v41 % v39));
          }
          else
          {
            v42 = v37 - 2;
          }
          if (v40 != 1)
          {
            v94 = v36;
            v96 = v37;
            do
            {
              if (v41 + 1 >= v39)
              {
                v43 = v96;
                if (v41 <= v39)
                  v43 = (float *)(v94 + 8 * (v41 % v39));
              }
              else
              {
                v43 = v37 - 2;
              }
              v44 = v41 - 1;
              if (v41 >= v39)
              {
                v45 = v96;
                if (v44 <= v39)
                  v45 = (float *)(v94 + 8 * (v44 % v39));
              }
              else
              {
                v45 = v42 - 2;
              }
              if (!sub_2233E62E4((float *)v116.i32, v43, v45, (uint64_t)&v103))
                break;
              if (v41 + 1 >= v39)
              {
                v37 = v96;
                if (v41 <= v39)
                  v37 = (float *)(v94 + 8 * (v41 % v39));
              }
              else
              {
                v37 -= 2;
              }
              if (v41 < v39)
              {
                v42 -= 2;
              }
              else
              {
                v42 = v96;
                if (v44 <= v39)
                  v42 = (float *)(v94 + 8 * (v44 % v39));
              }
              --v41;
            }
            while (v44);
            if (!BYTE4(v103) && (_DWORD)v103)
            {
              if (*a3 - 58 <= 0xFFFFFFF7)
                *a3 = 50;
              if (a3[1] - 58 <= 0xFFFFFFF6)
                a3[1] = 49;
            }
          }
        }
      }
      if (a3[9])
        goto LABEL_215;
    }
    v22 = (uint64_t *)v98;
    v23 = v99;
    if (v98 == v99)
      goto LABEL_215;
  }
  else
  {
LABEL_42:
    if (v22 == v23)
      goto LABEL_215;
  }
  if (*a3 != 70 && a3[3] != 70)
  {
LABEL_114:
    if (a3[1] != 70)
      goto LABEL_215;
    goto LABEL_115;
  }
  sub_2233F0FEC((uint64_t)v22, v23, (uint64_t)&v103, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 6)), 1);
  v22 = (uint64_t *)v98;
  v23 = v99;
  v52 = a3[9];
  if (v98 == v99)
  {
    if (!a3[9])
      goto LABEL_207;
    goto LABEL_215;
  }
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = *a3;
  v58 = a3[3];
  v59 = (uint64_t *)v98;
  do
  {
    v60 = *((_DWORD *)v59 + 8);
    if ((v60 - 5) < 0xFFFFFFFC)
      goto LABEL_199;
    if (v53 && v59[6] == *((_QWORD *)v53 + 1))
    {
      v61 = v59[7] != *((_QWORD *)v53 + 2);
      v53 = (char *)(v59 + 5);
      if (!v54)
        goto LABEL_192;
    }
    else
    {
      v61 = 1;
      v53 = (char *)(v59 + 5);
      if (!v54)
        goto LABEL_192;
    }
    if (v56)
    {
      if (v61)
        goto LABEL_159;
      if (v54[6] != v59[6])
        goto LABEL_159;
      if (v54[7] != v59[7])
        goto LABEL_159;
      v62 = v54[8];
      v63 = v59[8];
      if (v62 != v63 && (v59[10] || v62 + 1 != v63))
        goto LABEL_159;
      v64 = *(float *)v54;
      v65 = *(float *)v59;
      if (*(float *)v54 != *(float *)v59)
      {
        if ((LODWORD(v64) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v65) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          goto LABEL_159;
        v68 = vabds_f32(v64, v65);
        v69 = fabsf(v64);
        v70 = fabsf(v65);
        if (v69 < v70)
          v69 = v70;
        v71 = v69 >= 1.0 ? v69 * 0.00000011921 : 0.00000011921;
        if (v68 > v71)
        {
LABEL_159:
          v56 = 0;
          goto LABEL_160;
        }
      }
      v66 = *((float *)v54 + 1);
      v67 = *((float *)v59 + 1);
      if (v66 == v67)
      {
        if (v60 != 1)
          goto LABEL_159;
      }
      else
      {
        if ((LODWORD(v66) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v67) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          goto LABEL_159;
        v72 = fabsf(v66);
        v73 = fabsf(v67);
        if (v72 < v73)
          v72 = v73;
        v74 = v72 >= 1.0 ? v72 * 0.00000011921 : 0.00000011921;
        if (v60 != 1 || vabds_f32(v66, v67) > v74)
          goto LABEL_159;
      }
    }
LABEL_160:
    if (!v55)
      goto LABEL_191;
    if (!v61 && v54[6] == v59[6] && v54[7] == v59[7])
    {
      v75 = v54[8];
      v76 = v59[8];
      if (v75 == v76 || !v59[10] && v75 + 1 == v76)
      {
        v77 = *(float *)v54;
        v78 = *(float *)v59;
        if (*(float *)v54 == *(float *)v59)
          goto LABEL_168;
        if ((LODWORD(v77) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v78) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v81 = vabds_f32(v77, v78);
          v82 = fabsf(v77);
          v83 = fabsf(v78);
          if (v82 < v83)
            v82 = v83;
          v84 = v82 >= 1.0 ? v82 * 0.00000011921 : 0.00000011921;
          if (v81 <= v84)
          {
LABEL_168:
            v79 = *((float *)v54 + 1);
            v80 = *((float *)v59 + 1);
            if (v79 == v80)
              goto LABEL_169;
            if ((LODWORD(v79) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v80) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            {
              v85 = vabds_f32(v79, v80);
              v86 = fabsf(v79);
              v87 = fabsf(v80);
              if (v86 < v87)
                v86 = v87;
              v88 = v86 >= 1.0 ? v86 * 0.00000011921 : 0.00000011921;
              if (v85 <= v88)
              {
LABEL_169:
                if (v60 == 2)
                  goto LABEL_194;
LABEL_191:
                v55 = 0;
LABEL_192:
                if (v60 == 1)
                  goto LABEL_197;
                goto LABEL_193;
              }
            }
          }
        }
      }
    }
    if ((v57 - 58) <= 0xFFFFFFF7)
    {
      v57 = 50;
      *a3 = 50;
    }
    if ((v58 - 58) > 0xFFFFFFF6)
      goto LABEL_191;
    v55 = 0;
    v58 = 49;
    a3[3] = 49;
    if (v60 == 1)
    {
LABEL_197:
      v56 = 1;
      goto LABEL_198;
    }
LABEL_193:
    if (v60 == 2)
    {
LABEL_194:
      if (*((_DWORD *)v59 + 28) != 2)
        v55 = 1;
    }
LABEL_198:
    v54 = v59;
LABEL_199:
    if (v52)
      goto LABEL_215;
    v59 += 24;
  }
  while (v59 != v23);
  if (v55)
  {
    if ((v57 - 58) <= 0xFFFFFFF7)
      *a3 = 50;
    if ((v58 - 58) <= 0xFFFFFFF6)
      a3[3] = 49;
  }
LABEL_207:
  v89 = *a3;
  v90 = a3[3];
  if (v89 != 70 && v90 != 70)
    goto LABEL_114;
  v103 = a1;
  *(_QWORD *)&v104 = a2;
  BYTE8(v104) = 0;
  v105 = (uint64_t)a3;
  v106 = a4;
  v91 = v89 != 70;
  if (v90 == 70)
    v92 = 2;
  else
    v92 = 6;
  LODWORD(v107) = v92 | v91;
  sub_2233EA3B4((uint64_t)&v103, v22, v23);
  if (a3[9] || *a3 != 70 && a3[1] != 70)
    goto LABEL_215;
  v22 = (uint64_t *)v98;
  v23 = v99;
LABEL_115:
  sub_2233EACE8((uint64_t)v22, v23);
  v103 = 0;
  *(_QWORD *)&v104 = 0;
  *(_QWORD *)((char *)&v104 + 6) = 0;
  v46 = v98;
  v47 = v99;
  sub_2233EAD34(a3, &v103, (uint64_t)v98, (uint64_t)v99);
  if (!a3[9])
  {
    v48 = *a3;
    v49 = a3[1];
    if (v48 == 70 || v49 == 70)
    {
      v103 = a2;
      *(_QWORD *)&v104 = a1;
      BYTE8(v104) = 0;
      v105 = (uint64_t)a3;
      v106 = a4;
      v50 = v48 != 70;
      if (v49 == 70)
        v51 = 2;
      else
        v51 = 6;
      LODWORD(v107) = v51 | v50;
      sub_2233EB09C((uint64_t)&v103, v46, v47);
    }
  }
LABEL_215:
  v22 = (uint64_t *)v98;
LABEL_216:
  if (v22)
  {
    v99 = v22;
    operator delete(v22);
  }
}

void sub_2233EA2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233EA3B4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  _QWORD *v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  float *v31;
  float **v32;
  float *v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  float *v40;
  float *v41;
  uint64_t v42;
  float *v43;
  unsigned __int8 *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  float *v49;
  float **v50;
  float *v51;
  float *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float *v57;
  float *v58;
  float *v59;
  uint64_t v60;
  float *v61;
  unsigned __int8 *v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  _QWORD *v69;
  int v70;
  unsigned __int8 *v71;
  int v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  int v82;
  char v83;

  if (a2 == a3)
    return result;
  v3 = a2;
  v4 = result;
  v5 = a2[7];
  if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = v5 + 1;
    do
    {
      result = sub_2233F5BD4(v4);
      --v6;
    }
    while (v6);
  }
  v7 = v3 + 24;
  if (v3 + 24 == a3)
  {
    v8 = v3;
    v66 = *(_DWORD *)(v4 + 40);
    if ((~v66 & 6) != 0)
      goto LABEL_167;
    goto LABEL_193;
  }
  v8 = v3;
  v79 = v4;
  do
  {
    v80 = v7;
    v81 = v8;
    if (v8[6] != v8[30])
    {
      v20 = *(_DWORD *)(v4 + 40);
      if ((~v20 & 6) == 0)
      {
LABEL_60:
        v28 = v8[7];
        if (v28 <= -2)
        {
          if (v20 == 7)
            goto LABEL_162;
          v29 = v20;
          while (1)
          {
            if (v29 == 7)
              goto LABEL_65;
            v31 = **(float ***)v4;
            if (v31 == *(float **)(*(_QWORD *)v4 + 8))
              goto LABEL_65;
            v32 = *(float ***)(v4 + 8);
            v33 = *v32;
            v34 = v32[1];
            v35 = (char *)v34 - (char *)*v32;
            if ((unint64_t)v35 < 0x18)
              goto LABEL_98;
            v36 = v35 >> 3;
            v37 = v34 == v33 ? 0 : v36 + 1;
            v82 = 0;
            v83 = 0;
            v38 = v37 - 1;
            if (v37 >= v36)
            {
              v39 = v34;
              if (v38 <= v36)
                v39 = &v33[2 * (v38 % v36)];
            }
            else
            {
              v39 = v34 - 2;
            }
            if (v37 == 1)
              break;
            v40 = v34;
            do
            {
              if (v38 + 1 >= v36)
              {
                v41 = v34;
                if (v38 <= v36)
                  v41 = &v33[2 * (v38 % v36)];
              }
              else
              {
                v41 = v40 - 2;
              }
              v42 = v38 - 1;
              if (v38 >= v36)
              {
                v43 = v34;
                if (v42 <= v36)
                  v43 = &v33[2 * (v42 % v36)];
              }
              else
              {
                v43 = v39 - 2;
              }
              result = sub_2233E62E4(v31, v41, v43, (uint64_t)&v82);
              if (!(_DWORD)result)
                break;
              if (v38 + 1 >= v36)
              {
                v40 = v34;
                if (v38 <= v36)
                  v40 = &v33[2 * (v38 % v36)];
              }
              else
              {
                v40 -= 2;
              }
              if (v38 < v36)
              {
                v39 -= 2;
              }
              else
              {
                v39 = v34;
                if (v42 <= v36)
                  v39 = &v33[2 * (v42 % v36)];
              }
              --v38;
            }
            while (v42);
            if (v83)
              break;
            v4 = v79;
            if (!v82)
              goto LABEL_98;
            v44 = *(unsigned __int8 **)(v79 + 24);
            if (*v44 - 58 <= 0xFFFFFFF7)
            {
              *v44 = 50;
              v44 = *(unsigned __int8 **)(v79 + 24);
            }
            v45 = *(_DWORD *)(v79 + 40) | 1;
            *(_DWORD *)(v79 + 40) = v45;
            if (v44[3] - 58 <= 0xFFFFFFF6)
            {
              v44[3] = 49;
              v45 = *(_DWORD *)(v79 + 40);
            }
            v20 = v45 | 4;
            *(_DWORD *)(v79 + 40) = v45 | 4;
            if ((v45 | 4) == 7)
            {
LABEL_99:
              v30 = 1;
              goto LABEL_64;
            }
LABEL_63:
            v30 = *(_BYTE *)(*(_QWORD *)(v4 + 24) + 9) != 0;
LABEL_64:
            *(_BYTE *)(v4 + 16) = v30;
            v29 = v20;
LABEL_65:
            if (++v28 == -1)
              goto LABEL_107;
          }
          v4 = v79;
LABEL_98:
          v20 = *(_DWORD *)(v4 + 40) | 2;
          *(_DWORD *)(v4 + 40) = v20;
          if (v20 == 7)
            goto LABEL_99;
          goto LABEL_63;
        }
LABEL_107:
        v46 = v81[31];
        if (v46 < 0 || v20 == 7)
          goto LABEL_162;
        v47 = -1;
        v77 = v81[31];
        while (1)
        {
          if (v20 == 7)
            goto LABEL_112;
          v49 = **(float ***)v4;
          if (v49 == *(float **)(*(_QWORD *)v4 + 8))
            goto LABEL_112;
          v50 = *(float ***)(v4 + 8);
          v52 = *v50;
          v51 = v50[1];
          v53 = (char *)v51 - (char *)*v50;
          if ((unint64_t)v53 < 0x18)
            goto LABEL_145;
          v54 = v53 >> 3;
          v55 = v51 == v52 ? 0 : v54 + 1;
          v82 = 0;
          v83 = 0;
          v56 = v55 - 1;
          if (v55 >= v54)
          {
            v57 = v51;
            if (v56 <= v54)
              v57 = &v52[2 * (v56 % v54)];
          }
          else
          {
            v57 = v51 - 2;
          }
          if (v55 == 1)
            break;
          v58 = v51;
          do
          {
            if (v56 + 1 >= v54)
            {
              v59 = v51;
              if (v56 <= v54)
                v59 = &v52[2 * (v56 % v54)];
            }
            else
            {
              v59 = v58 - 2;
            }
            v60 = v56 - 1;
            if (v56 >= v54)
            {
              v61 = v51;
              if (v60 <= v54)
                v61 = &v52[2 * (v60 % v54)];
            }
            else
            {
              v61 = v57 - 2;
            }
            result = sub_2233E62E4(v49, v59, v61, (uint64_t)&v82);
            if (!(_DWORD)result)
              break;
            if (v56 + 1 >= v54)
            {
              v58 = v51;
              if (v56 <= v54)
                v58 = &v52[2 * (v56 % v54)];
            }
            else
            {
              v58 -= 2;
            }
            if (v56 < v54)
            {
              v57 -= 2;
            }
            else
            {
              v57 = v51;
              if (v60 <= v54)
                v57 = &v52[2 * (v60 % v54)];
            }
            --v56;
          }
          while (v60);
          v46 = v77;
          if (v83)
            break;
          v4 = v79;
          if (!v82)
            goto LABEL_145;
          v62 = *(unsigned __int8 **)(v79 + 24);
          if (*v62 - 58 <= 0xFFFFFFF7)
          {
            *v62 = 50;
            v62 = *(unsigned __int8 **)(v79 + 24);
          }
          v63 = *(_DWORD *)(v79 + 40) | 1;
          *(_DWORD *)(v79 + 40) = v63;
          if (v62[3] - 58 <= 0xFFFFFFF6)
          {
            v62[3] = 49;
            v63 = *(_DWORD *)(v79 + 40);
          }
          v20 = v63 | 4;
          *(_DWORD *)(v79 + 40) = v63 | 4;
          if ((v63 | 4) == 7)
          {
LABEL_146:
            v48 = 1;
            goto LABEL_111;
          }
LABEL_110:
          v48 = *(_BYTE *)(*(_QWORD *)(v4 + 24) + 9) != 0;
LABEL_111:
          *(_BYTE *)(v4 + 16) = v48;
LABEL_112:
          if (++v47 == v46)
            goto LABEL_162;
        }
        v4 = v79;
LABEL_145:
        v20 = *(_DWORD *)(v4 + 40) | 2;
        *(_DWORD *)(v4 + 40) = v20;
        if (v20 == 7)
          goto LABEL_146;
        goto LABEL_110;
      }
      LOBYTE(v21) = 0;
      LOBYTE(v22) = 0;
      v23 = v8;
      do
      {
        v24 = *((_DWORD *)v23 + 8);
        if (v24 != 1)
        {
          if (v24 != 2 || *((_DWORD *)v23 + 28) != 2)
            goto LABEL_60;
          if (v23 == v8)
            goto LABEL_50;
          v23 += 24;
          while (1)
          {
            v22 = *((_DWORD *)v23 + 8);
            if (v22 != 2)
              break;
            if (*((_DWORD *)v23 + 28) != 2)
              goto LABEL_60;
            v16 = v23 == v8;
            v23 += 24;
            if (v16)
              goto LABEL_50;
          }
          if (v22 != 1)
            goto LABEL_60;
        }
        v21 = *((_DWORD *)v23 + 28);
        if (v21 != 1)
          goto LABEL_60;
        v16 = v23 == v8;
        v23 += 24;
      }
      while (!v16);
      if ((v22 & 1) == 0)
        goto LABEL_57;
      LOBYTE(v21) = 1;
LABEL_50:
      v25 = *(unsigned __int8 **)(v4 + 24);
      if (*v25 - 58 <= 0xFFFFFFF7)
      {
        *v25 = 50;
        v25 = *(unsigned __int8 **)(v4 + 24);
        v26 = *(_DWORD *)(v4 + 40) | 1;
        *(_DWORD *)(v4 + 40) = v26;
        if (v25[3] - 58 > 0xFFFFFFF6)
        {
LABEL_52:
          v20 = v26 | 4;
          if ((v21 & 1) == 0)
            goto LABEL_53;
          goto LABEL_57;
        }
      }
      else
      {
        v26 = v20 | 1;
        *(_DWORD *)(v4 + 40) = v26;
        if (v25[3] - 58 > 0xFFFFFFF6)
          goto LABEL_52;
      }
      v25[3] = 49;
      v20 = *(_DWORD *)(v4 + 40) | 4;
      if ((v21 & 1) == 0)
      {
LABEL_53:
        *(_DWORD *)(v4 + 40) = v20;
        if (v20 == 7)
          goto LABEL_54;
LABEL_58:
        v27 = *(_BYTE *)(*(_QWORD *)(v4 + 24) + 9) != 0;
LABEL_59:
        *(_BYTE *)(v4 + 16) = v27;
        goto LABEL_60;
      }
LABEL_57:
      v20 |= 2u;
      *(_DWORD *)(v4 + 40) = v20;
      if (v20 == 7)
      {
LABEL_54:
        v27 = 1;
        goto LABEL_59;
      }
      goto LABEL_58;
    }
    v9 = v8[7];
    v10 = v8[31];
    if (v9 == v10)
      goto LABEL_162;
    v11 = *(_DWORD *)(v4 + 40);
    if ((~v11 & 6) == 0)
      goto LABEL_159;
    LOBYTE(v12) = 0;
    LOBYTE(v13) = 0;
    v14 = v81;
    do
    {
      v15 = *((_DWORD *)v14 + 8);
      if (v15 != 1)
      {
        if (v15 != 2 || *((_DWORD *)v14 + 28) != 2)
          goto LABEL_159;
        if (v14 == v81)
          goto LABEL_27;
        v14 += 24;
        while (1)
        {
          v13 = *((_DWORD *)v14 + 8);
          if (v13 != 2)
            break;
          if (*((_DWORD *)v14 + 28) != 2)
            goto LABEL_159;
          v16 = v14 == v81;
          v14 += 24;
          if (v16)
            goto LABEL_27;
        }
        if (v13 != 1)
          goto LABEL_159;
      }
      v12 = *((_DWORD *)v14 + 28);
      if (v12 != 1)
        goto LABEL_159;
      v16 = v14 == v81;
      v14 += 24;
    }
    while (!v16);
    if ((v13 & 1) == 0)
    {
LABEL_156:
      v64 = v11 | 2;
      *(_DWORD *)(v4 + 40) = v64;
      if (v64 == 7)
      {
LABEL_31:
        v19 = 1;
        goto LABEL_158;
      }
      goto LABEL_157;
    }
    LOBYTE(v12) = 1;
LABEL_27:
    v17 = *(unsigned __int8 **)(v4 + 24);
    if (*v17 - 58 <= 0xFFFFFFF7)
    {
      *v17 = 50;
      v17 = *(unsigned __int8 **)(v4 + 24);
      v18 = *(_DWORD *)(v4 + 40) | 1;
      *(_DWORD *)(v4 + 40) = v18;
      if (v17[3] - 58 > 0xFFFFFFF6)
      {
LABEL_29:
        v11 = v18 | 4;
        if ((v12 & 1) != 0)
          goto LABEL_156;
        goto LABEL_30;
      }
    }
    else
    {
      v18 = v11 | 1;
      *(_DWORD *)(v4 + 40) = v18;
      if (v17[3] - 58 > 0xFFFFFFF6)
        goto LABEL_29;
    }
    v17[3] = 49;
    v11 = *(_DWORD *)(v4 + 40) | 4;
    if ((v12 & 1) != 0)
      goto LABEL_156;
LABEL_30:
    *(_DWORD *)(v4 + 40) = v11;
    if (v11 == 7)
      goto LABEL_31;
LABEL_157:
    v19 = *(_BYTE *)(*(_QWORD *)(v4 + 24) + 9) != 0;
LABEL_158:
    *(_BYTE *)(v4 + 16) = v19;
    v9 = v81[7];
    v10 = v81[31];
LABEL_159:
    if (v9 + 1 < v10)
    {
      v65 = ~v9 + v10;
      do
      {
        result = sub_2233F5BD4(v4);
        --v65;
      }
      while (v65);
    }
LABEL_162:
    v3 = v80;
    if (*(_BYTE *)(v4 + 16))
      return result;
    v8 = v81 + 24;
    v7 = v80 + 24;
  }
  while (v80 + 24 != a3);
  v66 = *(_DWORD *)(v4 + 40);
  if ((~v66 & 6) == 0)
    goto LABEL_193;
LABEL_167:
  if (v8 != a3)
  {
    LOBYTE(v67) = 0;
    LOBYTE(v68) = 0;
    v69 = v8;
    do
    {
      v70 = *((_DWORD *)v69 + 8);
      if (v70 != 1)
      {
        if (v70 != 2 || *((_DWORD *)v69 + 28) != 2)
          goto LABEL_193;
        if (v69 == v3)
          goto LABEL_185;
        v69 += 24;
        while (1)
        {
          v68 = *((_DWORD *)v69 + 8);
          if (v68 != 2)
            break;
          if (*((_DWORD *)v69 + 28) != 2)
            goto LABEL_193;
          v16 = v69 == v3;
          v69 += 24;
          if (v16)
            goto LABEL_185;
        }
        if (v68 != 1)
          goto LABEL_193;
      }
      v67 = *((_DWORD *)v69 + 28);
      if (v67 != 1)
        goto LABEL_193;
      v16 = v69 == v3;
      v69 += 24;
    }
    while (!v16);
    if ((v68 & 1) == 0)
      goto LABEL_188;
    LOBYTE(v67) = 1;
LABEL_185:
    v71 = *(unsigned __int8 **)(v4 + 24);
    if (*v71 - 58 <= 0xFFFFFFF7)
    {
      *v71 = 50;
      v71 = *(unsigned __int8 **)(v4 + 24);
      v72 = *(_DWORD *)(v4 + 40) | 1;
      *(_DWORD *)(v4 + 40) = v72;
      if (v71[3] - 58 > 0xFFFFFFF6)
        goto LABEL_187;
    }
    else
    {
      v72 = v66 | 1;
      *(_DWORD *)(v4 + 40) = v72;
      if (v71[3] - 58 > 0xFFFFFFF6)
      {
LABEL_187:
        v66 = v72 | 4;
        *(_DWORD *)(v4 + 40) = v66;
        if ((v67 & 1) == 0)
          goto LABEL_189;
        goto LABEL_188;
      }
    }
    v71[3] = 49;
    v66 = *(_DWORD *)(v4 + 40) | 4;
    *(_DWORD *)(v4 + 40) = v66;
    if ((v67 & 1) != 0)
    {
LABEL_188:
      v66 |= 2u;
      *(_DWORD *)(v4 + 40) = v66;
    }
  }
LABEL_189:
  v73 = v66 == 7 || *(_BYTE *)(*(_QWORD *)(v4 + 24) + 9) != 0;
  *(_BYTE *)(v4 + 16) = v73;
LABEL_193:
  v74 = v8[7];
  if (v74 <= -2)
  {
    v75 = v74 + 1;
    do
      result = sub_2233F5BD4(v4);
    while (!__CFADD__(v75++, 1));
  }
  return result;
}

uint64_t sub_2233EACE8(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  char v5;

  v2 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 6));
  if (a2 == (uint64_t *)a1)
    v3 = 0;
  else
    v3 = v2;
  return sub_2233F5DEC(a1, a2, (uint64_t)&v5, v3, 1);
}

unsigned __int8 *sub_2233EAD34(unsigned __int8 *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;

  if (a3 == a4)
    return result;
  v4 = result[9];
  do
  {
    v5 = *(_DWORD *)(a3 + 112);
    if ((v5 - 5) < 0xFFFFFFFC)
      goto LABEL_78;
    v6 = *a2;
    if (*a2 && *(_QWORD *)(a3 + 128) == *(_QWORD *)(v6 + 8))
    {
      v7 = *(_QWORD *)(a3 + 136) != *(_QWORD *)(v6 + 16);
      *a2 = a3 + 120;
      v8 = a2[1];
      if (!v8)
        goto LABEL_72;
    }
    else
    {
      v7 = 1;
      *a2 = a3 + 120;
      v8 = a2[1];
      if (!v8)
        goto LABEL_72;
    }
    if (*((_BYTE *)a2 + 21))
    {
      if (v7)
        goto LABEL_38;
      if (*(_QWORD *)(v8 + 128) != *(_QWORD *)(a3 + 128))
        goto LABEL_38;
      if (*(_QWORD *)(v8 + 136) != *(_QWORD *)(a3 + 136))
        goto LABEL_38;
      v9 = *(_QWORD *)(v8 + 144);
      v10 = *(_QWORD *)(a3 + 144);
      if (v9 != v10 && (*(_QWORD *)(a3 + 160) || v9 + 1 != v10))
        goto LABEL_38;
      v11 = *(float *)v8;
      v12 = *(float *)a3;
      if (*(float *)v8 != *(float *)a3)
      {
        if ((LODWORD(v11) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v12) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          goto LABEL_38;
        v15 = vabds_f32(v11, v12);
        v16 = fabsf(v11);
        v17 = fabsf(v12);
        if (v16 < v17)
          v16 = v17;
        v18 = v16 >= 1.0 ? v16 * 0.00000011921 : 0.00000011921;
        if (v15 > v18)
        {
LABEL_38:
          *((_BYTE *)a2 + 21) = 0;
          goto LABEL_39;
        }
      }
      v13 = *(float *)(v8 + 4);
      v14 = *(float *)(a3 + 4);
      if (v13 == v14)
      {
        if (v5 != 1)
          goto LABEL_38;
      }
      else
      {
        if ((LODWORD(v13) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v14) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          goto LABEL_38;
        v19 = fabsf(v13);
        v20 = fabsf(v14);
        if (v19 < v20)
          v19 = v20;
        v21 = v19 >= 1.0 ? v19 * 0.00000011921 : 0.00000011921;
        if (v5 != 1 || vabds_f32(v13, v14) > v21)
          goto LABEL_38;
      }
    }
LABEL_39:
    if (*((_BYTE *)a2 + 20))
    {
      if (v7)
        goto LABEL_67;
      if (*(_QWORD *)(v8 + 128) != *(_QWORD *)(a3 + 128))
        goto LABEL_67;
      if (*(_QWORD *)(v8 + 136) != *(_QWORD *)(a3 + 136))
        goto LABEL_67;
      v22 = *(_QWORD *)(v8 + 144);
      v23 = *(_QWORD *)(a3 + 144);
      if (v22 != v23 && (*(_QWORD *)(a3 + 160) || v22 + 1 != v23))
        goto LABEL_67;
      v24 = *(float *)v8;
      v25 = *(float *)a3;
      if (*(float *)v8 != *(float *)a3)
      {
        if ((LODWORD(v24) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v25) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          goto LABEL_67;
        v28 = vabds_f32(v24, v25);
        v29 = fabsf(v24);
        v30 = fabsf(v25);
        if (v29 < v30)
          v29 = v30;
        v31 = v29 >= 1.0 ? v29 * 0.00000011921 : 0.00000011921;
        if (v28 > v31)
          goto LABEL_67;
      }
      v26 = *(float *)(v8 + 4);
      v27 = *(float *)(a3 + 4);
      if (v26 == v27)
        goto LABEL_48;
      if ((LODWORD(v26) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v27) & 0x7FFFFFFFu) > 0x7F7FFFFF)
        goto LABEL_67;
      v32 = vabds_f32(v26, v27);
      v33 = fabsf(v26);
      v34 = fabsf(v27);
      if (v33 < v34)
        v33 = v34;
      v35 = v33 >= 1.0 ? v33 * 0.00000011921 : 0.00000011921;
      if (v32 <= v35)
      {
LABEL_48:
        if (v5 == 2)
          goto LABEL_75;
      }
      else
      {
LABEL_67:
        if (*result - 58 <= 0xFFFFFFF7)
          *result = 50;
        if (result[1] - 58 <= 0xFFFFFFF6)
          result[1] = 49;
      }
      *((_BYTE *)a2 + 20) = 0;
    }
LABEL_72:
    if (v5 == 2)
    {
LABEL_75:
      if (*(_DWORD *)(a3 + 32) != 2)
        *((_BYTE *)a2 + 20) = 1;
      goto LABEL_77;
    }
    if (v5 == 1)
      *((_BYTE *)a2 + 21) = 1;
LABEL_77:
    a2[1] = a3;
    *((_DWORD *)a2 + 4) = v5;
LABEL_78:
    if (v4)
      return result;
    a3 += 192;
  }
  while (a3 != a4);
  if (*((_BYTE *)a2 + 21))
    *((_BYTE *)a2 + 21) = 0;
  if (*((_BYTE *)a2 + 20))
  {
    if (*result - 58 <= 0xFFFFFFF7)
      *result = 50;
    if (result[1] - 58 <= 0xFFFFFFF6)
      result[1] = 49;
    *((_BYTE *)a2 + 20) = 0;
  }
  return result;
}

uint64_t sub_2233EB09C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  _QWORD *v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  float *v31;
  float **v32;
  float *v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  float *v40;
  float *v41;
  uint64_t v42;
  float *v43;
  unsigned __int8 *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  float *v49;
  float **v50;
  float *v51;
  float *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float *v57;
  float *v58;
  float *v59;
  uint64_t v60;
  float *v61;
  unsigned __int8 *v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  _QWORD *v69;
  int v70;
  unsigned __int8 *v71;
  int v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  int v82;
  char v83;

  if (a2 == a3)
    return result;
  v3 = a2;
  v4 = result;
  v5 = a2[17];
  if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = v5 + 1;
    do
    {
      result = sub_2233FA9D4(v4);
      --v6;
    }
    while (v6);
  }
  v7 = v3 + 24;
  if (v3 + 24 == a3)
  {
    v8 = v3;
    v66 = *(_DWORD *)(v4 + 40);
    if ((~v66 & 6) != 0)
      goto LABEL_167;
    goto LABEL_193;
  }
  v8 = v3;
  v79 = v4;
  do
  {
    v80 = v7;
    v81 = v8;
    if (v8[16] != v8[40])
    {
      v20 = *(_DWORD *)(v4 + 40);
      if ((~v20 & 6) == 0)
      {
LABEL_60:
        v28 = v8[17];
        if (v28 <= -2)
        {
          if (v20 == 7)
            goto LABEL_162;
          v29 = v20;
          while (1)
          {
            if (v29 == 7)
              goto LABEL_65;
            v31 = **(float ***)v4;
            if (v31 == *(float **)(*(_QWORD *)v4 + 8))
              goto LABEL_65;
            v32 = *(float ***)(v4 + 8);
            v33 = *v32;
            v34 = v32[1];
            v35 = (char *)v34 - (char *)*v32;
            if ((unint64_t)v35 < 0x18)
              goto LABEL_98;
            v36 = v35 >> 3;
            v37 = v34 == v33 ? 0 : v36 + 1;
            v82 = 0;
            v83 = 0;
            v38 = v37 - 1;
            if (v37 >= v36)
            {
              v39 = v34;
              if (v38 <= v36)
                v39 = &v33[2 * (v38 % v36)];
            }
            else
            {
              v39 = v34 - 2;
            }
            if (v37 == 1)
              break;
            v40 = v34;
            do
            {
              if (v38 + 1 >= v36)
              {
                v41 = v34;
                if (v38 <= v36)
                  v41 = &v33[2 * (v38 % v36)];
              }
              else
              {
                v41 = v40 - 2;
              }
              v42 = v38 - 1;
              if (v38 >= v36)
              {
                v43 = v34;
                if (v42 <= v36)
                  v43 = &v33[2 * (v42 % v36)];
              }
              else
              {
                v43 = v39 - 2;
              }
              result = sub_2233E62E4(v31, v41, v43, (uint64_t)&v82);
              if (!(_DWORD)result)
                break;
              if (v38 + 1 >= v36)
              {
                v40 = v34;
                if (v38 <= v36)
                  v40 = &v33[2 * (v38 % v36)];
              }
              else
              {
                v40 -= 2;
              }
              if (v38 < v36)
              {
                v39 -= 2;
              }
              else
              {
                v39 = v34;
                if (v42 <= v36)
                  v39 = &v33[2 * (v42 % v36)];
              }
              --v38;
            }
            while (v42);
            if (v83)
              break;
            v4 = v79;
            if (!v82)
              goto LABEL_98;
            v44 = *(unsigned __int8 **)(v79 + 24);
            if (*v44 - 58 <= 0xFFFFFFF7)
            {
              *v44 = 50;
              v44 = *(unsigned __int8 **)(v79 + 24);
            }
            v45 = *(_DWORD *)(v79 + 40) | 1;
            *(_DWORD *)(v79 + 40) = v45;
            if (v44[1] - 58 <= 0xFFFFFFF6)
            {
              v44[1] = 49;
              v45 = *(_DWORD *)(v79 + 40);
            }
            v20 = v45 | 4;
            *(_DWORD *)(v79 + 40) = v45 | 4;
            if ((v45 | 4) == 7)
            {
LABEL_99:
              v30 = 1;
              goto LABEL_64;
            }
LABEL_63:
            v30 = *(_BYTE *)(*(_QWORD *)(v4 + 24) + 9) != 0;
LABEL_64:
            *(_BYTE *)(v4 + 16) = v30;
            v29 = v20;
LABEL_65:
            if (++v28 == -1)
              goto LABEL_107;
          }
          v4 = v79;
LABEL_98:
          v20 = *(_DWORD *)(v4 + 40) | 2;
          *(_DWORD *)(v4 + 40) = v20;
          if (v20 == 7)
            goto LABEL_99;
          goto LABEL_63;
        }
LABEL_107:
        v46 = v81[41];
        if (v46 < 0 || v20 == 7)
          goto LABEL_162;
        v47 = -1;
        v77 = v81[41];
        while (1)
        {
          if (v20 == 7)
            goto LABEL_112;
          v49 = **(float ***)v4;
          if (v49 == *(float **)(*(_QWORD *)v4 + 8))
            goto LABEL_112;
          v50 = *(float ***)(v4 + 8);
          v52 = *v50;
          v51 = v50[1];
          v53 = (char *)v51 - (char *)*v50;
          if ((unint64_t)v53 < 0x18)
            goto LABEL_145;
          v54 = v53 >> 3;
          v55 = v51 == v52 ? 0 : v54 + 1;
          v82 = 0;
          v83 = 0;
          v56 = v55 - 1;
          if (v55 >= v54)
          {
            v57 = v51;
            if (v56 <= v54)
              v57 = &v52[2 * (v56 % v54)];
          }
          else
          {
            v57 = v51 - 2;
          }
          if (v55 == 1)
            break;
          v58 = v51;
          do
          {
            if (v56 + 1 >= v54)
            {
              v59 = v51;
              if (v56 <= v54)
                v59 = &v52[2 * (v56 % v54)];
            }
            else
            {
              v59 = v58 - 2;
            }
            v60 = v56 - 1;
            if (v56 >= v54)
            {
              v61 = v51;
              if (v60 <= v54)
                v61 = &v52[2 * (v60 % v54)];
            }
            else
            {
              v61 = v57 - 2;
            }
            result = sub_2233E62E4(v49, v59, v61, (uint64_t)&v82);
            if (!(_DWORD)result)
              break;
            if (v56 + 1 >= v54)
            {
              v58 = v51;
              if (v56 <= v54)
                v58 = &v52[2 * (v56 % v54)];
            }
            else
            {
              v58 -= 2;
            }
            if (v56 < v54)
            {
              v57 -= 2;
            }
            else
            {
              v57 = v51;
              if (v60 <= v54)
                v57 = &v52[2 * (v60 % v54)];
            }
            --v56;
          }
          while (v60);
          v46 = v77;
          if (v83)
            break;
          v4 = v79;
          if (!v82)
            goto LABEL_145;
          v62 = *(unsigned __int8 **)(v79 + 24);
          if (*v62 - 58 <= 0xFFFFFFF7)
          {
            *v62 = 50;
            v62 = *(unsigned __int8 **)(v79 + 24);
          }
          v63 = *(_DWORD *)(v79 + 40) | 1;
          *(_DWORD *)(v79 + 40) = v63;
          if (v62[1] - 58 <= 0xFFFFFFF6)
          {
            v62[1] = 49;
            v63 = *(_DWORD *)(v79 + 40);
          }
          v20 = v63 | 4;
          *(_DWORD *)(v79 + 40) = v63 | 4;
          if ((v63 | 4) == 7)
          {
LABEL_146:
            v48 = 1;
            goto LABEL_111;
          }
LABEL_110:
          v48 = *(_BYTE *)(*(_QWORD *)(v4 + 24) + 9) != 0;
LABEL_111:
          *(_BYTE *)(v4 + 16) = v48;
LABEL_112:
          if (++v47 == v46)
            goto LABEL_162;
        }
        v4 = v79;
LABEL_145:
        v20 = *(_DWORD *)(v4 + 40) | 2;
        *(_DWORD *)(v4 + 40) = v20;
        if (v20 == 7)
          goto LABEL_146;
        goto LABEL_110;
      }
      LOBYTE(v21) = 0;
      LOBYTE(v22) = 0;
      v23 = v8;
      do
      {
        v24 = *((_DWORD *)v23 + 8);
        if (v24 != 1)
        {
          if (v24 != 2 || *((_DWORD *)v23 + 28) != 2)
            goto LABEL_60;
          if (v23 == v8)
            goto LABEL_50;
          v23 += 24;
          while (1)
          {
            v22 = *((_DWORD *)v23 + 8);
            if (v22 != 2)
              break;
            if (*((_DWORD *)v23 + 28) != 2)
              goto LABEL_60;
            v16 = v23 == v8;
            v23 += 24;
            if (v16)
              goto LABEL_50;
          }
          if (v22 != 1)
            goto LABEL_60;
        }
        v21 = *((_DWORD *)v23 + 28);
        if (v21 != 1)
          goto LABEL_60;
        v16 = v23 == v8;
        v23 += 24;
      }
      while (!v16);
      if ((v22 & 1) == 0)
        goto LABEL_57;
      LOBYTE(v21) = 1;
LABEL_50:
      v25 = *(unsigned __int8 **)(v4 + 24);
      if (*v25 - 58 <= 0xFFFFFFF7)
      {
        *v25 = 50;
        v25 = *(unsigned __int8 **)(v4 + 24);
        v26 = *(_DWORD *)(v4 + 40) | 1;
        *(_DWORD *)(v4 + 40) = v26;
        if (v25[1] - 58 > 0xFFFFFFF6)
        {
LABEL_52:
          v20 = v26 | 4;
          if ((v21 & 1) == 0)
            goto LABEL_53;
          goto LABEL_57;
        }
      }
      else
      {
        v26 = v20 | 1;
        *(_DWORD *)(v4 + 40) = v26;
        if (v25[1] - 58 > 0xFFFFFFF6)
          goto LABEL_52;
      }
      v25[1] = 49;
      v20 = *(_DWORD *)(v4 + 40) | 4;
      if ((v21 & 1) == 0)
      {
LABEL_53:
        *(_DWORD *)(v4 + 40) = v20;
        if (v20 == 7)
          goto LABEL_54;
LABEL_58:
        v27 = *(_BYTE *)(*(_QWORD *)(v4 + 24) + 9) != 0;
LABEL_59:
        *(_BYTE *)(v4 + 16) = v27;
        goto LABEL_60;
      }
LABEL_57:
      v20 |= 2u;
      *(_DWORD *)(v4 + 40) = v20;
      if (v20 == 7)
      {
LABEL_54:
        v27 = 1;
        goto LABEL_59;
      }
      goto LABEL_58;
    }
    v9 = v8[17];
    v10 = v8[41];
    if (v9 == v10)
      goto LABEL_162;
    v11 = *(_DWORD *)(v4 + 40);
    if ((~v11 & 6) == 0)
      goto LABEL_159;
    LOBYTE(v12) = 0;
    LOBYTE(v13) = 0;
    v14 = v81;
    do
    {
      v15 = *((_DWORD *)v14 + 8);
      if (v15 != 1)
      {
        if (v15 != 2 || *((_DWORD *)v14 + 28) != 2)
          goto LABEL_159;
        if (v14 == v81)
          goto LABEL_27;
        v14 += 24;
        while (1)
        {
          v13 = *((_DWORD *)v14 + 8);
          if (v13 != 2)
            break;
          if (*((_DWORD *)v14 + 28) != 2)
            goto LABEL_159;
          v16 = v14 == v81;
          v14 += 24;
          if (v16)
            goto LABEL_27;
        }
        if (v13 != 1)
          goto LABEL_159;
      }
      v12 = *((_DWORD *)v14 + 28);
      if (v12 != 1)
        goto LABEL_159;
      v16 = v14 == v81;
      v14 += 24;
    }
    while (!v16);
    if ((v13 & 1) == 0)
    {
LABEL_156:
      v64 = v11 | 2;
      *(_DWORD *)(v4 + 40) = v64;
      if (v64 == 7)
      {
LABEL_31:
        v19 = 1;
        goto LABEL_158;
      }
      goto LABEL_157;
    }
    LOBYTE(v12) = 1;
LABEL_27:
    v17 = *(unsigned __int8 **)(v4 + 24);
    if (*v17 - 58 <= 0xFFFFFFF7)
    {
      *v17 = 50;
      v17 = *(unsigned __int8 **)(v4 + 24);
      v18 = *(_DWORD *)(v4 + 40) | 1;
      *(_DWORD *)(v4 + 40) = v18;
      if (v17[1] - 58 > 0xFFFFFFF6)
      {
LABEL_29:
        v11 = v18 | 4;
        if ((v12 & 1) != 0)
          goto LABEL_156;
        goto LABEL_30;
      }
    }
    else
    {
      v18 = v11 | 1;
      *(_DWORD *)(v4 + 40) = v18;
      if (v17[1] - 58 > 0xFFFFFFF6)
        goto LABEL_29;
    }
    v17[1] = 49;
    v11 = *(_DWORD *)(v4 + 40) | 4;
    if ((v12 & 1) != 0)
      goto LABEL_156;
LABEL_30:
    *(_DWORD *)(v4 + 40) = v11;
    if (v11 == 7)
      goto LABEL_31;
LABEL_157:
    v19 = *(_BYTE *)(*(_QWORD *)(v4 + 24) + 9) != 0;
LABEL_158:
    *(_BYTE *)(v4 + 16) = v19;
    v9 = v81[17];
    v10 = v81[41];
LABEL_159:
    if (v9 + 1 < v10)
    {
      v65 = ~v9 + v10;
      do
      {
        result = sub_2233FA9D4(v4);
        --v65;
      }
      while (v65);
    }
LABEL_162:
    v3 = v80;
    if (*(_BYTE *)(v4 + 16))
      return result;
    v8 = v81 + 24;
    v7 = v80 + 24;
  }
  while (v80 + 24 != a3);
  v66 = *(_DWORD *)(v4 + 40);
  if ((~v66 & 6) == 0)
    goto LABEL_193;
LABEL_167:
  if (v8 != a3)
  {
    LOBYTE(v67) = 0;
    LOBYTE(v68) = 0;
    v69 = v8;
    do
    {
      v70 = *((_DWORD *)v69 + 8);
      if (v70 != 1)
      {
        if (v70 != 2 || *((_DWORD *)v69 + 28) != 2)
          goto LABEL_193;
        if (v69 == v3)
          goto LABEL_185;
        v69 += 24;
        while (1)
        {
          v68 = *((_DWORD *)v69 + 8);
          if (v68 != 2)
            break;
          if (*((_DWORD *)v69 + 28) != 2)
            goto LABEL_193;
          v16 = v69 == v3;
          v69 += 24;
          if (v16)
            goto LABEL_185;
        }
        if (v68 != 1)
          goto LABEL_193;
      }
      v67 = *((_DWORD *)v69 + 28);
      if (v67 != 1)
        goto LABEL_193;
      v16 = v69 == v3;
      v69 += 24;
    }
    while (!v16);
    if ((v68 & 1) == 0)
      goto LABEL_188;
    LOBYTE(v67) = 1;
LABEL_185:
    v71 = *(unsigned __int8 **)(v4 + 24);
    if (*v71 - 58 <= 0xFFFFFFF7)
    {
      *v71 = 50;
      v71 = *(unsigned __int8 **)(v4 + 24);
      v72 = *(_DWORD *)(v4 + 40) | 1;
      *(_DWORD *)(v4 + 40) = v72;
      if (v71[1] - 58 > 0xFFFFFFF6)
        goto LABEL_187;
    }
    else
    {
      v72 = v66 | 1;
      *(_DWORD *)(v4 + 40) = v72;
      if (v71[1] - 58 > 0xFFFFFFF6)
      {
LABEL_187:
        v66 = v72 | 4;
        *(_DWORD *)(v4 + 40) = v66;
        if ((v67 & 1) == 0)
          goto LABEL_189;
        goto LABEL_188;
      }
    }
    v71[1] = 49;
    v66 = *(_DWORD *)(v4 + 40) | 4;
    *(_DWORD *)(v4 + 40) = v66;
    if ((v67 & 1) != 0)
    {
LABEL_188:
      v66 |= 2u;
      *(_DWORD *)(v4 + 40) = v66;
    }
  }
LABEL_189:
  v73 = v66 == 7 || *(_BYTE *)(*(_QWORD *)(v4 + 24) + 9) != 0;
  *(_BYTE *)(v4 + 16) = v73;
LABEL_193:
  v74 = v8[17];
  if (v74 <= -2)
  {
    v75 = v74 + 1;
    do
      result = sub_2233FA9D4(v4);
    while (!__CFADD__(v75++, 1));
  }
  return result;
}

void sub_2233EB9D0(float32x2_t **a1@<X0>, float32x2_t **a2@<X1>, uint64_t a3@<X8>)
{
  float32x2_t v3;
  float32x2_t *v5;
  float32x2_t *v6;
  float32x2_t *v7;
  float32x2_t *v8;
  float32x2_t *v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  int8x8_t v17;
  int8x8_t v18;
  float32x2_t *v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int8x8_t v26;
  int8x8_t v27;
  float v28;
  float32x2_t *v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  int8x8_t v35;
  int8x8_t v36;
  float32x2_t v37;
  float32x2_t v38;
  int8x8_t v39;
  int8x8_t v40;
  float32x2_t v41;
  int8x8_t v42;
  float v43;
  float32x2_t v44;
  float32x2_t v45;
  unsigned int v46;
  float32x2_t v47;
  float v48;
  float v49;
  BOOL v50;
  float v51;

  v5 = *a1;
  v6 = a1[1];
  v7 = *a2;
  v8 = a2[1];
  if (*a1 == v6 && v7 == v8)
  {
    v28 = 0.0;
    goto LABEL_48;
  }
  if (v5 == v6)
  {
    if (v7 == v8)
    {
      v3 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
      v33 = (float32x2_t)0x80000000800000;
    }
    else
    {
      v30 = *v7;
      v29 = v7 + 1;
      v31 = v30;
      v3 = v30;
      if (v29 == v8)
      {
        v33 = v31;
      }
      else
      {
        v32 = v31;
        v33 = v31;
        do
        {
          v34 = *v29++;
          v35 = (int8x8_t)vcgt_f32(v31, v34);
          v3 = (float32x2_t)vbsl_s8(v35, (int8x8_t)v34, (int8x8_t)v3);
          v31 = (float32x2_t)vbsl_s8(v35, (int8x8_t)v34, (int8x8_t)v31);
          v36 = (int8x8_t)vcgt_f32(v34, v32);
          v33 = (float32x2_t)vbsl_s8(v36, (int8x8_t)v34, (int8x8_t)v33);
          v32 = (float32x2_t)vbsl_s8(v36, (int8x8_t)v34, (int8x8_t)v32);
        }
        while (v29 != v8);
      }
    }
  }
  else
  {
    v11 = *v5;
    v10 = v5 + 1;
    v12 = v11;
    if (v7 != v8)
    {
      v13 = v12;
      if (v10 == v6)
      {
        v15 = v12;
        v41 = *v7;
        v19 = v7 + 1;
        v21 = v41;
        v22 = v41;
        if (v19 != v8)
        {
LABEL_11:
          v23 = v21;
          v24 = v21;
          do
          {
            v25 = *v19++;
            v26 = (int8x8_t)vcgt_f32(v23, v25);
            v27 = (int8x8_t)vcgt_f32(v25, v21);
            v24 = (float32x2_t)vbsl_s8(v26, (int8x8_t)v25, (int8x8_t)v24);
            v23 = (float32x2_t)vbsl_s8(v26, (int8x8_t)v25, (int8x8_t)v23);
            v22 = (float32x2_t)vbsl_s8(v27, (int8x8_t)v25, (int8x8_t)v22);
            v21 = (float32x2_t)vbsl_s8(v27, (int8x8_t)v25, (int8x8_t)v21);
          }
          while (v19 != v8);
LABEL_26:
          v42 = (int8x8_t)vcgt_f32(v13, v24);
          if ((vcgt_f32(v24, v15).u8[0] & 1) != 0)
            v43 = v24.f32[0];
          else
            v43 = v15.f32[0];
          v15.f32[0] = v43;
          v44 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v24.u32[1], v22.u32[0]), v15), (int8x8_t)__PAIR64__(v24.u32[1], v22.u32[0]), (int8x8_t)v15);
          v45 = (float32x2_t)vbsl_s8(v42, (int8x8_t)v24, (int8x8_t)v13);
          v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v45, v22), (int8x8_t)v22, (int8x8_t)v45);
          if ((vcgt_f32(v22, v44).i32[1] & 1) != 0)
            v46 = -1;
          else
            v46 = 0;
          v33 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v46), (int8x8_t)__PAIR64__(v22.u32[1], v44.u32[0]), (int8x8_t)v44);
          goto LABEL_36;
        }
      }
      else
      {
        v14 = v12;
        v15 = v12;
        do
        {
          v16 = *v10++;
          v17 = (int8x8_t)vcgt_f32(v12, v16);
          v13 = (float32x2_t)vbsl_s8(v17, (int8x8_t)v16, (int8x8_t)v13);
          v12 = (float32x2_t)vbsl_s8(v17, (int8x8_t)v16, (int8x8_t)v12);
          v18 = (int8x8_t)vcgt_f32(v16, v14);
          v15 = (float32x2_t)vbsl_s8(v18, (int8x8_t)v16, (int8x8_t)v15);
          v14 = (float32x2_t)vbsl_s8(v18, (int8x8_t)v16, (int8x8_t)v14);
        }
        while (v10 != v6);
        v20 = *v7;
        v19 = v7 + 1;
        v21 = v20;
        v22 = v20;
        if (v19 != v8)
          goto LABEL_11;
      }
      v24 = v21;
      goto LABEL_26;
    }
    v3 = v12;
    if (v10 == v6)
    {
      v33 = v12;
    }
    else
    {
      v37 = v12;
      v33 = v12;
      do
      {
        v38 = *v10++;
        v39 = (int8x8_t)vcgt_f32(v12, v38);
        v3 = (float32x2_t)vbsl_s8(v39, (int8x8_t)v38, (int8x8_t)v3);
        v12 = (float32x2_t)vbsl_s8(v39, (int8x8_t)v38, (int8x8_t)v12);
        v40 = (int8x8_t)vcgt_f32(v38, v37);
        v33 = (float32x2_t)vbsl_s8(v40, (int8x8_t)v38, (int8x8_t)v33);
        v37 = (float32x2_t)vbsl_s8(v40, (int8x8_t)v38, (int8x8_t)v37);
      }
      while (v10 != v6);
    }
  }
LABEL_36:
  v47 = vabd_f32(v33, v3);
  v48 = v47.f32[1];
  if (v47.f32[1] < v47.f32[0])
    v48 = v47.f32[0];
  v28 = 1.0;
  if (v48 != 0.0)
  {
    v49 = 0.00000011921;
    if (v48 >= 1.0)
      v49 = v48 * 0.00000011921;
    v50 = v48 <= v49 && LODWORD(v48) >> 23 < 0xFF;
    if (v48 < 10000000.0 && !v50 && LODWORD(v48) >> 23 < 0xFF)
    {
      v51 = (float)(10000000.0 / v48) + 0.5;
      sub_2233DC31C(v51);
      v28 = (float)(uint64_t)vcvtms_s32_f32(v51);
    }
  }
LABEL_48:
  *(float32x2_t *)a3 = v3;
  *(int64x2_t *)(a3 + 8) = vdupq_n_s64(0xFFFFFFFFFFB3B4C0);
  *(float *)(a3 + 24) = v28;
}

void sub_2233EBC50(void **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, unint64_t a7)
{
  uint64_t v7;
  void **v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  char *v64;
  unint64_t v65;
  char *v66;
  _BYTE *v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _BYTE *v101;
  unint64_t v102;
  void **v103;
  unint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v110;
  uint64_t v112;
  float *v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char v123;
  char v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  float *v129;
  uint64_t v130;
  int v131;
  __int128 v132;
  uint64_t v133;

  v7 = a2[4];
  v110 = v7 - *(_QWORD *)(a3 + 32);
  if (!v110)
    return;
  v8 = a1;
  *((_QWORD *)&v132 + 1) = -1;
  v133 = -1;
  *(_QWORD *)&v132 = -1;
  v9 = *a2;
  v107 = a2[1];
  v10 = (float *)a2[2];
  v11 = a2[3];
  v12 = v7 - 1;
  if (v7 >= v11)
  {
    v13 = (float *)a2[2];
    if (v12 <= v11)
      v13 = (float *)(v107 + 8 * (v12 % v11));
  }
  else
  {
    v13 = (float *)(v9 - 8);
  }
  v14 = 0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v15 = (float)((float)(v13[1] - *(float *)(a4 + 4)) * *(float *)(a4 + 24)) + (float)*(uint64_t *)(a4 + 16);
  if (v15 >= 0.0)
    v16 = 0.5;
  else
    v16 = -0.5;
  v17 = v15 + v16;
  sub_2233DC31C(v15 + v16);
  v18 = ceilf(v17);
  v19 = floorf(v17);
  if (v17 >= 0.0)
    v20 = v19;
  else
    v20 = v18;
  v21 = *v13;
  v22 = a4;
  v23 = (float)((float)(v21 - *(float *)a4) * *(float *)(a4 + 24)) + (float)*(uint64_t *)(a4 + 8);
  if (v23 >= 0.0)
    v24 = 0.5;
  else
    v24 = -0.5;
  v25 = v23 + v24;
  sub_2233DC31C(v23 + v24);
  v26 = ceilf(v25);
  v27 = floorf(v25);
  if (v25 >= 0.0)
    v26 = v27;
  if (v7 >= v11)
  {
    v28 = v10;
    v29 = v11;
    if (v12 <= v11)
      v28 = (float *)(v107 + 8 * (v12 % v11));
  }
  else
  {
    v28 = (float *)(v9 - 8);
    v29 = v11;
  }
  if (v12 == *(_QWORD *)(a3 + 32))
  {
    v30 = v8[1];
    goto LABEL_128;
  }
  v113 = v10;
  v102 = v14;
  v31 = 0;
  v32 = 0;
  v125 = 0;
  v126 = 0;
  v33 = 0;
  v117 = 0;
  v124 = 0;
  v131 = 0;
  v34 = (uint64_t)v20;
  v35 = (uint64_t)v26;
  v36 = 0x7FFFFFFFFFFFFFFFLL;
  v122 = 0x8000000000000000;
  v115 = -1;
  v123 = 1;
  v37 = -1;
  v116 = -1;
  v121 = 0x8000000000000000;
  v38 = 0x7FFFFFFFFFFFFFFFLL;
  v103 = v8;
  v112 = v29;
  do
  {
    v128 = v31;
    v129 = v28;
    v39 = v8;
    v40 = v12 - 1;
    v119 = v38;
    v120 = v36;
    v118 = v37;
    v41 = v32;
    if (v12 >= v29)
    {
      v42 = v113;
      if (v40 <= v29)
        v42 = (float *)(v107 + 8 * (v40 % v29));
    }
    else
    {
      v42 = v28 - 2;
    }
    v127 = v12 - 1;
    v43 = (float)((float)(v42[1] - *(float *)(v22 + 4)) * *(float *)(v22 + 24)) + (float)*(uint64_t *)(v22 + 16);
    if (v43 >= 0.0)
      v44 = 0.5;
    else
      v44 = -0.5;
    v45 = v43 + v44;
    sub_2233DC31C(v43 + v44);
    v46 = ceilf(v45);
    v47 = floorf(v45);
    if (v45 >= 0.0)
      v46 = v47;
    v48 = (uint64_t)v46;
    v49 = (float)((float)(*v42 - *(float *)v22) * *(float *)(v22 + 24)) + (float)*(uint64_t *)(v22 + 8);
    if (v49 >= 0.0)
      v50 = 0.5;
    else
      v50 = -0.5;
    v51 = v49 + v50;
    sub_2233DC31C(v49 + v50);
    v52 = ceilf(v51);
    v53 = floorf(v51);
    if (v51 >= 0.0)
      v52 = v53;
    v54 = (uint64_t)v52;
    if (v35 <= (uint64_t)v52)
      v55 = 0;
    else
      v55 = -1;
    if (v35 < (uint64_t)v52)
      v56 = 1;
    else
      v56 = v55;
    if (v34 <= v48)
      v57 = 0;
    else
      v57 = -1;
    if (v34 < v48)
      v58 = 1;
    else
      v58 = v57;
    v130 = v12;
    if (v56)
    {
      v59 = 0;
      v60 = v41;
      v8 = v39;
      if (v33)
        goto LABEL_60;
      goto LABEL_72;
    }
    if (v35 == v54 && v34 == v48)
    {
      v59 = 1;
      v58 = 4294967197;
      v56 = -99;
      v60 = v41;
      v8 = v39;
      if (!v33)
        goto LABEL_72;
LABEL_60:
      if (v56 == v126 && (_DWORD)v58 == (_DWORD)v125 && v33 <= a7)
      {
        v35 = v119;
        v34 = v120;
        v71 = v131;
        v72 = v128;
        v74 = v121;
        v73 = v122;
        goto LABEL_94;
      }
      v64 = (char *)v8[1];
      if (v124)
      {
        v65 = (unint64_t)v8[2];
        if ((unint64_t)v64 < v65)
        {
LABEL_70:
          *(_QWORD *)v64 = v126 | (unint64_t)(v125 << 32);
          *(_OWORD *)(v64 + 8) = v132;
          *((_QWORD *)v64 + 3) = v133;
          *((_QWORD *)v64 + 4) = v119;
          *((_QWORD *)v64 + 5) = v120;
          *((_QWORD *)v64 + 6) = v121;
          *((_QWORD *)v64 + 7) = v122;
          *((_QWORD *)v64 + 8) = v115;
          *((_QWORD *)v64 + 9) = v118;
          *((_QWORD *)v64 + 10) = v33;
          *((_QWORD *)v64 + 11) = v117;
          v64[96] = v124;
          *((_QWORD *)v64 + 13) = v116;
          v64[112] = v131;
          v66 = v64 + 120;
          v64[113] = 0;
LABEL_90:
          v71 = 0;
          v8[1] = v66;
          v22 = a4;
          goto LABEL_91;
        }
      }
      else
      {
        v102 = 0xEEEEEEEEEEEEEEEFLL * ((v64 - (_BYTE *)*v8) >> 3);
        v65 = (unint64_t)v8[2];
        if ((unint64_t)v64 < v65)
          goto LABEL_70;
      }
      v67 = *v8;
      v68 = 0xEEEEEEEEEEEEEEEFLL * ((v64 - v67) >> 3) + 1;
      if (v68 > 0x222222222222222)
        sub_2233DCD38();
      v69 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v65 - (_QWORD)v67) >> 3);
      if (2 * v69 > v68)
        v68 = 2 * v69;
      if (v69 >= 0x111111111111111)
        v68 = 0x222222222222222;
      v106 = v60;
      v105 = v58;
      v104 = v68;
      if (v68)
      {
        if (v68 > 0x222222222222222)
          goto LABEL_133;
        v70 = (char *)operator new(120 * v68);
      }
      else
      {
        v70 = 0;
      }
      v75 = &v70[8 * ((v64 - v67) >> 3)];
      *(_QWORD *)v75 = v126 | (unint64_t)(v125 << 32);
      *(_OWORD *)(v75 + 8) = v132;
      *((_QWORD *)v75 + 3) = v133;
      *((_QWORD *)v75 + 4) = v119;
      *((_QWORD *)v75 + 5) = v120;
      *((_QWORD *)v75 + 6) = v121;
      *((_QWORD *)v75 + 7) = v122;
      *((_QWORD *)v75 + 8) = v115;
      *((_QWORD *)v75 + 9) = v118;
      *((_QWORD *)v75 + 10) = v33;
      *((_QWORD *)v75 + 11) = v117;
      v75[96] = v124;
      *((_QWORD *)v75 + 13) = v116;
      v75[112] = v131;
      v75[113] = 0;
      v76 = v75;
      if (v64 == v67)
      {
        v8 = v103;
      }
      else
      {
        do
        {
          v77 = *(_OWORD *)(v64 - 120);
          v78 = *(_OWORD *)(v64 - 104);
          v79 = *(_OWORD *)(v64 - 88);
          *(_OWORD *)(v76 - 72) = *(_OWORD *)(v64 - 72);
          *(_OWORD *)(v76 - 88) = v79;
          *(_OWORD *)(v76 - 104) = v78;
          *(_OWORD *)(v76 - 120) = v77;
          v80 = *(_OWORD *)(v64 - 56);
          v81 = *(_OWORD *)(v64 - 40);
          v82 = *(_OWORD *)(v64 - 24);
          *((_WORD *)v76 - 4) = *((_WORD *)v64 - 4);
          *(_OWORD *)(v76 - 24) = v82;
          *(_OWORD *)(v76 - 40) = v81;
          *(_OWORD *)(v76 - 56) = v80;
          v76 -= 120;
          v64 -= 120;
        }
        while (v64 != v67);
        v8 = v103;
        v64 = (char *)*v103;
      }
      v66 = v75 + 120;
      *v8 = v76;
      v8[1] = v75 + 120;
      v8[2] = &v70[120 * v104];
      if (v64)
        operator delete(v64);
      v60 = v106;
      v58 = v105;
      goto LABEL_90;
    }
    v56 = 0;
    v59 = 0;
    v60 = v41;
    v8 = v39;
    if (v33)
      goto LABEL_60;
LABEL_72:
    v71 = v131;
LABEL_91:
    v72 = v128;
    v33 = 0;
    v132 = *a6;
    if (!(v59 & 1 | ((v123 & 1) == 0)))
      v71 = 1;
    v123 &= v59;
    v124 = v59;
    v74 = v35;
    v73 = v34;
    v133 = *((_QWORD *)a6 + 2);
    v116 = v128;
    v117 = v110;
    v115 = v60;
    v126 = v56;
    v125 = v58;
LABEL_94:
    if (v35 >= v54)
      v38 = v54;
    else
      v38 = v35;
    if (v74 <= v54)
      v74 = v54;
    if (v34 >= v48)
      v36 = v48;
    else
      v36 = v34;
    if (v73 <= v48)
      v73 = v48;
    v29 = v112;
    if (v130 < v112)
    {
      v28 = v129 - 2;
    }
    else
    {
      v28 = v113;
      if (v127 <= v112)
        v28 = (float *)(v107 + 8 * (v127 % v112));
    }
    v121 = v74;
    v122 = v73;
    v131 = v71;
    v32 = v60 + 1;
    ++v33;
    v31 = v72 + (v59 ^ 1u);
    v37 = v32;
    v12 = v127;
    v34 = v48;
    v35 = v54;
  }
  while (v127 != *(_QWORD *)(a3 + 32));
  v30 = v8[1];
  v14 = v102;
  if (v33)
  {
    v83 = v38;
    v84 = v36;
    if (v124)
    {
      v85 = (unint64_t)v8[2];
      if ((unint64_t)v30 < v85)
        goto LABEL_110;
LABEL_112:
      v87 = *v8;
      v88 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v30 - (_BYTE *)*v8) >> 3);
      v89 = v88 + 1;
      if (v88 + 1 > 0x222222222222222)
        sub_2233DCD38();
      v90 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v85 - (_QWORD)v87) >> 3);
      if (2 * v90 > v89)
        v89 = 2 * v90;
      if (v90 >= 0x111111111111111)
        v91 = 0x222222222222222;
      else
        v91 = v89;
      if (v91)
      {
        if (v91 > 0x222222222222222)
LABEL_133:
          sub_223174E94();
        v92 = v32;
        v93 = (char *)operator new(120 * v91);
      }
      else
      {
        v92 = v32;
        v93 = 0;
      }
      v94 = &v93[120 * v88];
      *(_QWORD *)v94 = v126 | (unint64_t)(v125 << 32);
      *(_OWORD *)(v94 + 8) = v132;
      *((_QWORD *)v94 + 3) = v133;
      *((_QWORD *)v94 + 4) = v83;
      *((_QWORD *)v94 + 5) = v84;
      *((_QWORD *)v94 + 6) = v121;
      *((_QWORD *)v94 + 7) = v122;
      *((_QWORD *)v94 + 8) = v115;
      *((_QWORD *)v94 + 9) = v92;
      *((_QWORD *)v94 + 10) = v33;
      *((_QWORD *)v94 + 11) = v117;
      v94[96] = v124;
      *((_QWORD *)v94 + 13) = v116;
      v94[112] = v131;
      v86 = v94 + 120;
      v94[113] = 0;
      if (v30 != v87)
      {
        do
        {
          v95 = *(_OWORD *)(v30 - 15);
          v96 = *(_OWORD *)(v30 - 13);
          v97 = *(_OWORD *)(v30 - 11);
          *(_OWORD *)(v94 - 72) = *(_OWORD *)(v30 - 9);
          *(_OWORD *)(v94 - 88) = v97;
          *(_OWORD *)(v94 - 104) = v96;
          *(_OWORD *)(v94 - 120) = v95;
          v98 = *(_OWORD *)(v30 - 7);
          v99 = *(_OWORD *)(v30 - 5);
          v100 = *(_OWORD *)(v30 - 3);
          *((_WORD *)v94 - 4) = *((_WORD *)v30 - 4);
          *(_OWORD *)(v94 - 24) = v100;
          *(_OWORD *)(v94 - 40) = v99;
          *(_OWORD *)(v94 - 56) = v98;
          v94 -= 120;
          v30 -= 15;
        }
        while (v30 != v87);
        v30 = *v8;
      }
      *v8 = v94;
      v8[1] = v86;
      v8[2] = &v93[120 * v91];
      if (v30)
        operator delete(v30);
    }
    else
    {
      v14 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v30 - (_BYTE *)*v8) >> 3);
      v85 = (unint64_t)v8[2];
      if ((unint64_t)v30 >= v85)
        goto LABEL_112;
LABEL_110:
      *v30 = v126 | (unint64_t)(v125 << 32);
      *(_OWORD *)(v30 + 1) = v132;
      v30[3] = v133;
      v30[4] = v38;
      v30[5] = v36;
      v30[6] = v74;
      v30[7] = v122;
      v30[8] = v115;
      v30[9] = v32;
      v30[10] = v33;
      v30[11] = v117;
      *((_BYTE *)v30 + 96) = v124;
      v30[13] = v116;
      *((_BYTE *)v30 + 112) = v71;
      v86 = v30 + 15;
      *((_BYTE *)v30 + 113) = 0;
    }
    v8[1] = v86;
    v30 = v86;
  }
LABEL_128:
  v101 = *v8;
  if (v14 < 0xEEEEEEEEEEEEEEEFLL * (((char *)v30 - (_BYTE *)*v8) >> 3) && !v101[120 * v14 + 96])
    v101[120 * v14 + 113] = 1;
}

uint64_t sub_2233EC5A4(_QWORD *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  char *v22;
  char *v23;
  int64x2_t **v24;
  int64x2_t v25;
  int64x2_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int64x2_t *v29;
  int64x2_t v30;
  int64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int64x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int64x2_t v38;
  int8x16_t v39;
  int64x2_t *v40;
  int64x2_t v41;
  int64x2_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int64x2_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int64x2_t v49;
  int8x16_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  _QWORD *v55;
  _QWORD *v56;
  char *v58;
  char *v59;
  _QWORD *v60;
  _QWORD *v61;
  char *v63;
  _QWORD *v64;
  _QWORD *v65;
  int64x2_t v67;
  int64x2_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int64x2_t *v71;
  int64x2_t v72;
  int64x2_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int64x2_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int64x2_t v80;
  int8x16_t v81;
  char *v82;
  int64x2_t **v83;
  char *v84;
  char *v85;
  int64x2_t v86;
  int64x2_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int64x2_t *v90;
  int64x2_t v91;
  int64x2_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int64x2_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int64x2_t v99;
  int8x16_t v100;
  char *v101;
  char *v102;
  char *v104;
  _QWORD *v105;
  _QWORD *v106;
  char *v109;
  char *v110;
  char *v111;
  _QWORD *v112;
  _QWORD *v113;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  _QWORD *v119;
  _QWORD *v120;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  _QWORD *v126;
  _QWORD *v127;
  int8x16_t v130;
  int8x16_t v131;
  void *__p;
  char *v133;
  uint64_t v134;
  void *v135;
  char *v136;
  uint64_t v137;
  void *v138;
  char *v139;
  uint64_t v140;
  void *v141;
  char *v142;
  uint64_t v143;
  void *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  __int128 v150[2];
  __int128 v151;
  __int128 v152;

  v12 = *a1;
  v13 = a1[2];
  if ((uint64_t)*a1 >= 0)
    v14 = *a1;
  else
    v14 = v12 + 1;
  v15 = v14 >> 1;
  v17 = *(_OWORD *)a1;
  v16 = *((_OWORD *)a1 + 1);
  v151 = *(_OWORD *)a1;
  v152 = v16;
  if (v13 >= 0)
    v18 = v13;
  else
    v18 = v13 + 1;
  v19 = v18 >> 1;
  *((_QWORD *)&v150[0] + 1) = *((_QWORD *)&v17 + 1);
  v150[1] = v16;
  v20 = v13 - 2 * v19 + v12 - 2 * v15;
  *(_QWORD *)&v152 = v19 + v15 + ((v20 + ((v20 & 0x80) >> 7)) << 24 >> 25);
  v149 = 0;
  *(_QWORD *)&v150[0] = v152;
  v147 = 0;
  v148 = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  __p = 0;
  v133 = 0;
  v134 = 0;
  sub_2233DD4BC(&v151, v150, a2, &v147, (char **)&v144, (char **)&v141);
  sub_2233DD4BC(&v151, v150, a3, &v138, (char **)&v135, (char **)&__p);
  v22 = (char *)v141;
  v21 = v142;
  if (v141 == v142)
    goto LABEL_80;
  v24 = (int64x2_t **)__p;
  v23 = v133;
  if ((unint64_t)(v142 - (_BYTE *)v141) < 0x80 || a4 > 0x63 || (unint64_t)(v133 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v133)
    {
      do
      {
        v54 = (char *)__p;
        if (__p != v23)
        {
          do
          {
            v55 = *(_QWORD **)v22;
            v56 = *(_QWORD **)v54;
            if (*(_QWORD *)(*(_QWORD *)v22 + 48) >= *(_QWORD *)(*(_QWORD *)v54 + 32)
              && v55[4] <= v56[6]
              && v55[7] >= v56[5]
              && v55[5] <= v56[7])
            {
              if (!sub_2233EDB90(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v55, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v56, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
              v23 = v133;
            }
            v54 += 8;
          }
          while (v54 != v23);
          v21 = v142;
        }
        v22 += 8;
      }
      while (v22 != v21);
    }
  }
  else
  {
    v25 = vdupq_n_s64(0x8000000000000000);
    v26 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v27 = (int8x16_t)v26;
    v28 = (int8x16_t)v25;
    do
    {
      v29 = *(int64x2_t **)v22;
      v22 += 8;
      v30 = v29[2];
      v31 = v29[3];
      v32 = (int8x16_t)vcgtq_s64(v26, v30);
      v33 = vbslq_s8(v32, (int8x16_t)v30, v27);
      v34 = (int64x2_t)vbslq_s8(v32, (int8x16_t)v30, (int8x16_t)v26);
      v35 = (int8x16_t)vcgtq_s64(v34, v31);
      v27 = vbslq_s8(v35, (int8x16_t)v31, v33);
      v26 = (int64x2_t)vbslq_s8(v35, (int8x16_t)v31, (int8x16_t)v34);
      v36 = (int8x16_t)vcgtq_s64(v30, v25);
      v37 = vbslq_s8(v36, (int8x16_t)v30, v28);
      v38 = (int64x2_t)vbslq_s8(v36, (int8x16_t)v30, (int8x16_t)v25);
      v39 = (int8x16_t)vcgtq_s64(v31, v38);
      v28 = vbslq_s8(v39, (int8x16_t)v31, v37);
      v25 = (int64x2_t)vbslq_s8(v39, (int8x16_t)v31, (int8x16_t)v38);
    }
    while (v22 != v142);
    v130 = v27;
    v131 = v28;
    if (__p != v133)
    {
      do
      {
        v40 = *v24++;
        v41 = v40[2];
        v42 = v40[3];
        v43 = (int8x16_t)vcgtq_s64(v26, v41);
        v44 = vbslq_s8(v43, (int8x16_t)v41, v27);
        v45 = (int64x2_t)vbslq_s8(v43, (int8x16_t)v41, (int8x16_t)v26);
        v46 = (int8x16_t)vcgtq_s64(v45, v42);
        v27 = vbslq_s8(v46, (int8x16_t)v42, v44);
        v26 = (int64x2_t)vbslq_s8(v46, (int8x16_t)v42, (int8x16_t)v45);
        v47 = (int8x16_t)vcgtq_s64(v41, v25);
        v48 = vbslq_s8(v47, (int8x16_t)v41, v28);
        v49 = (int64x2_t)vbslq_s8(v47, (int8x16_t)v41, (int8x16_t)v25);
        v50 = (int8x16_t)vcgtq_s64(v42, v49);
        v28 = vbslq_s8(v50, (int8x16_t)v42, v48);
        v25 = (int64x2_t)vbslq_s8(v50, (int8x16_t)v42, (int8x16_t)v49);
      }
      while (v24 != (int64x2_t **)v133);
      v130 = v27;
      v131 = v28;
    }
    if ((sub_2233ED098((__int128 *)v130.i8, &v141, &__p, a4 + 1, a5, a6, a7) & 1) == 0)
    {
LABEL_175:
      v123 = 0;
      v124 = (char *)__p;
      if (!__p)
        goto LABEL_177;
      goto LABEL_176;
    }
  }
  v51 = v139;
  if ((unint64_t)(v139 - (_BYTE *)v138) > 0x7F)
  {
    v53 = (char *)v141;
    v52 = v142;
    if ((unint64_t)(v136 - (_BYTE *)v135) >= 0x80
      && a4 <= 0x63
      && (unint64_t)(v142 - (_BYTE *)v141) >= 0x79)
    {
      v67 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      v68 = vdupq_n_s64(0x8000000000000000);
      v130 = (int8x16_t)v67;
      v131 = (int8x16_t)v68;
      if (v141 != v142)
      {
        v69 = (int8x16_t)v67;
        v70 = (int8x16_t)v68;
        do
        {
          v71 = *(int64x2_t **)v53;
          v53 += 8;
          v72 = v71[2];
          v73 = v71[3];
          v74 = (int8x16_t)vcgtq_s64(v67, v72);
          v75 = vbslq_s8(v74, (int8x16_t)v72, v69);
          v76 = (int64x2_t)vbslq_s8(v74, (int8x16_t)v72, (int8x16_t)v67);
          v77 = (int8x16_t)vcgtq_s64(v76, v73);
          v69 = vbslq_s8(v77, (int8x16_t)v73, v75);
          v67 = (int64x2_t)vbslq_s8(v77, (int8x16_t)v73, (int8x16_t)v76);
          v78 = (int8x16_t)vcgtq_s64(v72, v68);
          v79 = vbslq_s8(v78, (int8x16_t)v72, v70);
          v80 = (int64x2_t)vbslq_s8(v78, (int8x16_t)v72, (int8x16_t)v68);
          v81 = (int8x16_t)vcgtq_s64(v73, v80);
          v70 = vbslq_s8(v81, (int8x16_t)v73, v79);
          v68 = (int64x2_t)vbslq_s8(v81, (int8x16_t)v73, (int8x16_t)v80);
        }
        while (v53 != v142);
        v130 = v69;
        v131 = v70;
      }
      if (!sub_2233ED098((__int128 *)v130.i8, &v141, &v138, a4 + 1, a5, a6, a7)
        || (sub_2233ED098((__int128 *)v130.i8, &v141, &v135, a4 + 1, a5, a6, a7) & 1) == 0)
      {
        goto LABEL_175;
      }
      goto LABEL_80;
    }
  }
  else
  {
    v53 = (char *)v141;
    v52 = v142;
  }
  if (v138 == v139 || v53 == v52)
  {
    if (v53 == v52)
      goto LABEL_80;
    goto LABEL_39;
  }
  do
  {
    v59 = (char *)v138;
    if (v138 != v51)
    {
      do
      {
        v60 = *(_QWORD **)v53;
        v61 = *(_QWORD **)v59;
        if (*(_QWORD *)(*(_QWORD *)v53 + 48) >= *(_QWORD *)(*(_QWORD *)v59 + 32)
          && v60[4] <= v61[6]
          && v60[7] >= v61[5]
          && v60[5] <= v61[7])
        {
          if (!sub_2233EDB90(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v60, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v61, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
          v51 = v139;
        }
        v59 += 8;
      }
      while (v59 != v51);
      v52 = v142;
    }
    v53 += 8;
  }
  while (v53 != v52);
  v53 = (char *)v141;
  if (v141 != v52)
  {
LABEL_39:
    v58 = v136;
    if (v135 != v136)
    {
      do
      {
        v63 = (char *)v135;
        if (v135 != v58)
        {
          do
          {
            v64 = *(_QWORD **)v53;
            v65 = *(_QWORD **)v63;
            if (*(_QWORD *)(*(_QWORD *)v53 + 48) >= *(_QWORD *)(*(_QWORD *)v63 + 32)
              && v64[4] <= v65[6]
              && v64[7] >= v65[5]
              && v64[5] <= v65[7])
            {
              if (!sub_2233EDB90(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v64, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v65, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
              v58 = v136;
            }
            v63 += 8;
          }
          while (v63 != v58);
          v52 = v142;
        }
        v53 += 8;
      }
      while (v53 != v52);
    }
  }
LABEL_80:
  v83 = (int64x2_t **)__p;
  v82 = v133;
  if (__p == v133)
    goto LABEL_117;
  v85 = v147;
  v84 = v148;
  if ((unint64_t)(v148 - v147) < 0x80
    || (unint64_t)(v145 - (_BYTE *)v144) < 0x80
    || a4 > 0x63
    || (unint64_t)(v133 - (_BYTE *)__p) < 0x79)
  {
    if (v147 == v148)
    {
      v102 = (char *)v144;
      v101 = v145;
      if (v144 == v145 || __p == v133)
        goto LABEL_117;
    }
    else
    {
      do
      {
        v104 = (char *)__p;
        if (__p != v82)
        {
          do
          {
            v105 = *(_QWORD **)v85;
            v106 = *(_QWORD **)v104;
            if (*(_QWORD *)(*(_QWORD *)v85 + 48) >= *(_QWORD *)(*(_QWORD *)v104 + 32)
              && v105[4] <= v106[6]
              && v105[7] >= v106[5]
              && v105[5] <= v106[7])
            {
              if (!sub_2233EDB90(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v105, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v106, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
              v82 = v133;
            }
            v104 += 8;
          }
          while (v104 != v82);
          v84 = v148;
        }
        v85 += 8;
      }
      while (v85 != v84);
      v102 = (char *)v144;
      v101 = v145;
      if (v144 == v145 || __p == v82)
        goto LABEL_117;
    }
    do
    {
      v111 = (char *)__p;
      if (__p != v82)
      {
        do
        {
          v112 = *(_QWORD **)v102;
          v113 = *(_QWORD **)v111;
          if (*(_QWORD *)(*(_QWORD *)v102 + 48) >= *(_QWORD *)(*(_QWORD *)v111 + 32)
            && v112[4] <= v113[6]
            && v112[7] >= v113[5]
            && v112[5] <= v113[7])
          {
            if (!sub_2233EDB90(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v112, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v113, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
            v82 = v133;
          }
          v111 += 8;
        }
        while (v111 != v82);
        v101 = v145;
      }
      v102 += 8;
    }
    while (v102 != v101);
    goto LABEL_117;
  }
  v86 = vdupq_n_s64(0x8000000000000000);
  v87 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v88 = (int8x16_t)v87;
  v89 = (int8x16_t)v86;
  do
  {
    v90 = *v83++;
    v91 = v90[2];
    v92 = v90[3];
    v93 = (int8x16_t)vcgtq_s64(v87, v91);
    v94 = vbslq_s8(v93, (int8x16_t)v91, v88);
    v95 = (int64x2_t)vbslq_s8(v93, (int8x16_t)v91, (int8x16_t)v87);
    v96 = (int8x16_t)vcgtq_s64(v95, v92);
    v88 = vbslq_s8(v96, (int8x16_t)v92, v94);
    v87 = (int64x2_t)vbslq_s8(v96, (int8x16_t)v92, (int8x16_t)v95);
    v97 = (int8x16_t)vcgtq_s64(v91, v86);
    v98 = vbslq_s8(v97, (int8x16_t)v91, v89);
    v99 = (int64x2_t)vbslq_s8(v97, (int8x16_t)v91, (int8x16_t)v86);
    v100 = (int8x16_t)vcgtq_s64(v92, v99);
    v89 = vbslq_s8(v100, (int8x16_t)v92, v98);
    v86 = (int64x2_t)vbslq_s8(v100, (int8x16_t)v92, (int8x16_t)v99);
  }
  while (v83 != (int64x2_t **)v133);
  v130 = v88;
  v131 = v89;
  if (!sub_2233ED098((__int128 *)v130.i8, &v147, &__p, a4 + 1, a5, a6, a7)
    || (sub_2233ED098((__int128 *)v130.i8, &v144, &__p, a4 + 1, a5, a6, a7) & 1) == 0)
  {
    goto LABEL_175;
  }
LABEL_117:
  v110 = v147;
  v109 = v148;
  if ((unint64_t)(v148 - v147) < 0x80 || a4 > 0x63 || (unint64_t)(v139 - (_BYTE *)v138) < 0x79)
  {
    if (v147 != v148)
    {
      v115 = v139;
      if (v138 != v139)
      {
        do
        {
          v118 = (char *)v138;
          if (v138 != v115)
          {
            do
            {
              v119 = *(_QWORD **)v110;
              v120 = *(_QWORD **)v118;
              if (*(_QWORD *)(*(_QWORD *)v110 + 48) >= *(_QWORD *)(*(_QWORD *)v118 + 32)
                && v119[4] <= v120[6]
                && v119[7] >= v120[5]
                && v119[5] <= v120[7])
              {
                if (!sub_2233EDB90(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v119, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v120, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
                v115 = v139;
              }
              v118 += 8;
            }
            while (v118 != v115);
            v109 = v148;
          }
          v110 += 8;
        }
        while (v110 != v109);
      }
    }
  }
  else if ((sub_2233ED098(&v151, &v147, &v138, a4 + 1, a5, a6, a7) & 1) == 0)
  {
    goto LABEL_175;
  }
  v117 = (char *)v144;
  v116 = v145;
  if ((unint64_t)(v145 - (_BYTE *)v144) < 0x80 || a4 > 0x63 || (unint64_t)(v136 - (_BYTE *)v135) < 0x79)
  {
    if (v144 != v145)
    {
      v122 = v136;
      if (v135 != v136)
      {
        do
        {
          v125 = (char *)v135;
          if (v135 != v122)
          {
            do
            {
              v126 = *(_QWORD **)v117;
              v127 = *(_QWORD **)v125;
              if (*(_QWORD *)(*(_QWORD *)v117 + 48) >= *(_QWORD *)(*(_QWORD *)v125 + 32)
                && v126[4] <= v127[6]
                && v126[7] >= v127[5]
                && v126[5] <= v127[7])
              {
                if (!sub_2233EDB90(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v126, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v127, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
                v122 = v136;
              }
              v125 += 8;
            }
            while (v125 != v122);
            v116 = v145;
          }
          v117 += 8;
        }
        while (v117 != v116);
      }
    }
  }
  else if ((sub_2233ED098(v150, &v144, &v135, a4 + 1, a5, a6, a7) & 1) == 0)
  {
    goto LABEL_175;
  }
  v123 = 1;
  v124 = (char *)__p;
  if (__p)
  {
LABEL_176:
    v133 = v124;
    operator delete(v124);
  }
LABEL_177:
  if (v135)
  {
    v136 = (char *)v135;
    operator delete(v135);
  }
  if (v138)
  {
    v139 = (char *)v138;
    operator delete(v138);
  }
  if (v141)
  {
    v142 = (char *)v141;
    operator delete(v141);
  }
  if (v144)
  {
    v145 = (char *)v144;
    operator delete(v144);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  return v123;
}

void sub_2233ECFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  if (__p)
  {
    operator delete(__p);
    v32 = a20;
    if (!a20)
    {
LABEL_3:
      v33 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v32 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v32);
  v33 = a23;
  if (!a23)
  {
LABEL_4:
    v34 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v33);
  v34 = a26;
  if (!a26)
  {
LABEL_5:
    v35 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v34);
  v35 = a29;
  if (!a29)
  {
LABEL_6:
    v36 = *(void **)(v30 - 152);
    if (!v36)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v35);
  v36 = *(void **)(v30 - 152);
  if (!v36)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  *(_QWORD *)(v30 - 144) = v36;
  operator delete(v36);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233ED098(__int128 *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __n128 v21;
  __n128 v22;
  char *v23;
  char *v24;
  char *v25;
  int64x2_t **v26;
  __n128 v27;
  __n128 v28;
  int8x16_t v29;
  int8x16_t v30;
  int64x2_t *v31;
  int64x2_t v32;
  int64x2_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int64x2_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int64x2_t v40;
  int8x16_t v41;
  int64x2_t *v42;
  int64x2_t v43;
  int64x2_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int64x2_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int64x2_t v51;
  int8x16_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  _QWORD *v57;
  _QWORD *v58;
  char *v60;
  char *v61;
  _QWORD *v62;
  _QWORD *v63;
  char *v65;
  _QWORD *v66;
  _QWORD *v67;
  __n128 v69;
  __n128 v70;
  int8x16_t v71;
  int8x16_t v72;
  int64x2_t *v73;
  int64x2_t v74;
  int64x2_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int64x2_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int64x2_t v82;
  int8x16_t v83;
  __n128 v84;
  __n128 v85;
  char *v86;
  int64x2_t **v87;
  char *v88;
  char *v89;
  __n128 v90;
  __n128 v91;
  int8x16_t v92;
  int8x16_t v93;
  int64x2_t *v94;
  int64x2_t v95;
  int64x2_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int64x2_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int64x2_t v103;
  int8x16_t v104;
  __n128 v105;
  __n128 v106;
  char *v107;
  char *v108;
  char *v110;
  _QWORD *v111;
  _QWORD *v112;
  char *v115;
  char *v116;
  char *v117;
  _QWORD *v118;
  _QWORD *v119;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  _QWORD *v125;
  _QWORD *v126;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  _QWORD *v132;
  _QWORD *v133;
  int8x16_t v136;
  int8x16_t v137;
  void *__p;
  char *v139;
  uint64_t v140;
  void *v141;
  char *v142;
  uint64_t v143;
  void *v144;
  char *v145;
  uint64_t v146;
  void *v147;
  char *v148;
  uint64_t v149;
  void *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  _QWORD v156[2];
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;

  v13 = *((_QWORD *)a1 + 2);
  v12 = *((_QWORD *)a1 + 3);
  v14 = *((_QWORD *)a1 + 1);
  if (v14 >= 0)
    v15 = *((_QWORD *)a1 + 1);
  else
    v15 = v14 + 1;
  v16 = v15 >> 1;
  v17 = *a1;
  v157 = a1[1];
  v158 = v17;
  if (v12 >= 0)
    v18 = v12;
  else
    v18 = v12 + 1;
  v19 = v18 >> 1;
  v156[0] = v17;
  v20 = v12 - 2 * v19 + v14 - 2 * v16;
  v159 = v13;
  v160 = v19 + v16 + ((v20 + ((v20 & 0x80) >> 7)) << 24 >> 25);
  v156[1] = v160;
  v153 = 0;
  v154 = 0;
  v155 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v147 = 0;
  v148 = 0;
  v149 = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  __p = 0;
  v139 = 0;
  v140 = 0;
  sub_2233DD4BC(&v158, v156, a2, &v153, (char **)&v150, (char **)&v147);
  sub_2233DD4BC(&v158, v156, a3, &v144, (char **)&v141, (char **)&__p);
  v24 = (char *)v147;
  v23 = v148;
  if (v147 == v148)
    goto LABEL_80;
  v26 = (int64x2_t **)__p;
  v25 = v139;
  if ((unint64_t)(v148 - (_BYTE *)v147) < 0x80 || a4 > 0x63 || (unint64_t)(v139 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v139)
    {
      do
      {
        v56 = (char *)__p;
        if (__p != v25)
        {
          do
          {
            v57 = *(_QWORD **)v24;
            v58 = *(_QWORD **)v56;
            if (*(_QWORD *)(*(_QWORD *)v24 + 48) >= *(_QWORD *)(*(_QWORD *)v56 + 32)
              && v57[4] <= v58[6]
              && v57[7] >= v58[5]
              && v57[5] <= v58[7])
            {
              if (!sub_2233EDB90(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v57, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v58, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
              v25 = v139;
            }
            v56 += 8;
          }
          while (v56 != v25);
          v23 = v148;
        }
        v24 += 8;
      }
      while (v24 != v23);
    }
  }
  else
  {
    v27 = (__n128)vdupq_n_s64(0x8000000000000000);
    v28 = (__n128)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v29 = (int8x16_t)v28;
    v30 = (int8x16_t)v27;
    do
    {
      v31 = *(int64x2_t **)v24;
      v24 += 8;
      v32 = v31[2];
      v33 = v31[3];
      v34 = (int8x16_t)vcgtq_s64((int64x2_t)v28, v32);
      v35 = vbslq_s8(v34, (int8x16_t)v32, v29);
      v36 = (int64x2_t)vbslq_s8(v34, (int8x16_t)v32, (int8x16_t)v28);
      v37 = (int8x16_t)vcgtq_s64(v36, v33);
      v29 = vbslq_s8(v37, (int8x16_t)v33, v35);
      v28 = (__n128)vbslq_s8(v37, (int8x16_t)v33, (int8x16_t)v36);
      v38 = (int8x16_t)vcgtq_s64(v32, (int64x2_t)v27);
      v39 = vbslq_s8(v38, (int8x16_t)v32, v30);
      v40 = (int64x2_t)vbslq_s8(v38, (int8x16_t)v32, (int8x16_t)v27);
      v41 = (int8x16_t)vcgtq_s64(v33, v40);
      v30 = vbslq_s8(v41, (int8x16_t)v33, v39);
      v27 = (__n128)vbslq_s8(v41, (int8x16_t)v33, (int8x16_t)v40);
    }
    while (v24 != v148);
    v136 = v29;
    v137 = v30;
    if (__p != v139)
    {
      do
      {
        v42 = *v26++;
        v43 = v42[2];
        v44 = v42[3];
        v45 = (int8x16_t)vcgtq_s64((int64x2_t)v28, v43);
        v46 = vbslq_s8(v45, (int8x16_t)v43, v29);
        v47 = (int64x2_t)vbslq_s8(v45, (int8x16_t)v43, (int8x16_t)v28);
        v48 = (int8x16_t)vcgtq_s64(v47, v44);
        v29 = vbslq_s8(v48, (int8x16_t)v44, v46);
        v28 = (__n128)vbslq_s8(v48, (int8x16_t)v44, (int8x16_t)v47);
        v49 = (int8x16_t)vcgtq_s64(v43, (int64x2_t)v27);
        v50 = vbslq_s8(v49, (int8x16_t)v43, v30);
        v51 = (int64x2_t)vbslq_s8(v49, (int8x16_t)v43, (int8x16_t)v27);
        v52 = (int8x16_t)vcgtq_s64(v44, v51);
        v30 = vbslq_s8(v52, (int8x16_t)v44, v50);
        v27 = (__n128)vbslq_s8(v52, (int8x16_t)v44, (int8x16_t)v51);
      }
      while (v26 != (int64x2_t **)v139);
      v136 = v29;
      v137 = v30;
    }
    if ((sub_2233EC5A4(&v136, &v147, &__p, a4 + 1, a5, a6, a7, v28, v27) & 1) == 0)
    {
LABEL_175:
      v129 = 0;
      v130 = (char *)__p;
      if (!__p)
        goto LABEL_177;
      goto LABEL_176;
    }
  }
  v53 = v145;
  if ((unint64_t)(v145 - (_BYTE *)v144) > 0x7F)
  {
    v55 = (char *)v147;
    v54 = v148;
    if ((unint64_t)(v142 - (_BYTE *)v141) >= 0x80
      && a4 <= 0x63
      && (unint64_t)(v148 - (_BYTE *)v147) >= 0x79)
    {
      v69 = (__n128)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      v70 = (__n128)vdupq_n_s64(0x8000000000000000);
      v136 = (int8x16_t)v69;
      v137 = (int8x16_t)v70;
      if (v147 != v148)
      {
        v71 = (int8x16_t)v69;
        v72 = (int8x16_t)v70;
        do
        {
          v73 = *(int64x2_t **)v55;
          v55 += 8;
          v74 = v73[2];
          v75 = v73[3];
          v76 = (int8x16_t)vcgtq_s64((int64x2_t)v69, v74);
          v77 = vbslq_s8(v76, (int8x16_t)v74, v71);
          v78 = (int64x2_t)vbslq_s8(v76, (int8x16_t)v74, (int8x16_t)v69);
          v79 = (int8x16_t)vcgtq_s64(v78, v75);
          v71 = vbslq_s8(v79, (int8x16_t)v75, v77);
          v69 = (__n128)vbslq_s8(v79, (int8x16_t)v75, (int8x16_t)v78);
          v80 = (int8x16_t)vcgtq_s64(v74, (int64x2_t)v70);
          v81 = vbslq_s8(v80, (int8x16_t)v74, v72);
          v82 = (int64x2_t)vbslq_s8(v80, (int8x16_t)v74, (int8x16_t)v70);
          v83 = (int8x16_t)vcgtq_s64(v75, v82);
          v72 = vbslq_s8(v83, (int8x16_t)v75, v81);
          v70 = (__n128)vbslq_s8(v83, (int8x16_t)v75, (int8x16_t)v82);
        }
        while (v55 != v148);
        v136 = v71;
        v137 = v72;
      }
      if (!sub_2233EC5A4(&v136, &v147, &v144, a4 + 1, a5, a6, a7, v69, v70)
        || (sub_2233EC5A4(&v136, &v147, &v141, a4 + 1, a5, a6, a7, v84, v85) & 1) == 0)
      {
        goto LABEL_175;
      }
      goto LABEL_80;
    }
  }
  else
  {
    v55 = (char *)v147;
    v54 = v148;
  }
  if (v144 == v145 || v55 == v54)
  {
    if (v55 == v54)
      goto LABEL_80;
    goto LABEL_39;
  }
  do
  {
    v61 = (char *)v144;
    if (v144 != v53)
    {
      do
      {
        v62 = *(_QWORD **)v55;
        v63 = *(_QWORD **)v61;
        if (*(_QWORD *)(*(_QWORD *)v55 + 48) >= *(_QWORD *)(*(_QWORD *)v61 + 32)
          && v62[4] <= v63[6]
          && v62[7] >= v63[5]
          && v62[5] <= v63[7])
        {
          if (!sub_2233EDB90(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v62, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v63, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
          v53 = v145;
        }
        v61 += 8;
      }
      while (v61 != v53);
      v54 = v148;
    }
    v55 += 8;
  }
  while (v55 != v54);
  v55 = (char *)v147;
  if (v147 != v54)
  {
LABEL_39:
    v60 = v142;
    if (v141 != v142)
    {
      do
      {
        v65 = (char *)v141;
        if (v141 != v60)
        {
          do
          {
            v66 = *(_QWORD **)v55;
            v67 = *(_QWORD **)v65;
            if (*(_QWORD *)(*(_QWORD *)v55 + 48) >= *(_QWORD *)(*(_QWORD *)v65 + 32)
              && v66[4] <= v67[6]
              && v66[7] >= v67[5]
              && v66[5] <= v67[7])
            {
              if (!sub_2233EDB90(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v66, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v67, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
              v60 = v142;
            }
            v65 += 8;
          }
          while (v65 != v60);
          v54 = v148;
        }
        v55 += 8;
      }
      while (v55 != v54);
    }
  }
LABEL_80:
  v87 = (int64x2_t **)__p;
  v86 = v139;
  if (__p == v139)
    goto LABEL_117;
  v89 = v153;
  v88 = v154;
  if ((unint64_t)(v154 - v153) < 0x80
    || (unint64_t)(v151 - (_BYTE *)v150) < 0x80
    || a4 > 0x63
    || (unint64_t)(v139 - (_BYTE *)__p) < 0x79)
  {
    if (v153 == v154)
    {
      v108 = (char *)v150;
      v107 = v151;
      if (v150 == v151 || __p == v139)
        goto LABEL_117;
    }
    else
    {
      do
      {
        v110 = (char *)__p;
        if (__p != v86)
        {
          do
          {
            v111 = *(_QWORD **)v89;
            v112 = *(_QWORD **)v110;
            if (*(_QWORD *)(*(_QWORD *)v89 + 48) >= *(_QWORD *)(*(_QWORD *)v110 + 32)
              && v111[4] <= v112[6]
              && v111[7] >= v112[5]
              && v111[5] <= v112[7])
            {
              if (!sub_2233EDB90(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v111, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v112, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
              v86 = v139;
            }
            v110 += 8;
          }
          while (v110 != v86);
          v88 = v154;
        }
        v89 += 8;
      }
      while (v89 != v88);
      v108 = (char *)v150;
      v107 = v151;
      if (v150 == v151 || __p == v86)
        goto LABEL_117;
    }
    do
    {
      v117 = (char *)__p;
      if (__p != v86)
      {
        do
        {
          v118 = *(_QWORD **)v108;
          v119 = *(_QWORD **)v117;
          if (*(_QWORD *)(*(_QWORD *)v108 + 48) >= *(_QWORD *)(*(_QWORD *)v117 + 32)
            && v118[4] <= v119[6]
            && v118[7] >= v119[5]
            && v118[5] <= v119[7])
          {
            if (!sub_2233EDB90(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v118, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v119, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
            v86 = v139;
          }
          v117 += 8;
        }
        while (v117 != v86);
        v107 = v151;
      }
      v108 += 8;
    }
    while (v108 != v107);
    goto LABEL_117;
  }
  v90 = (__n128)vdupq_n_s64(0x8000000000000000);
  v91 = (__n128)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v92 = (int8x16_t)v91;
  v93 = (int8x16_t)v90;
  do
  {
    v94 = *v87++;
    v95 = v94[2];
    v96 = v94[3];
    v97 = (int8x16_t)vcgtq_s64((int64x2_t)v91, v95);
    v98 = vbslq_s8(v97, (int8x16_t)v95, v92);
    v99 = (int64x2_t)vbslq_s8(v97, (int8x16_t)v95, (int8x16_t)v91);
    v100 = (int8x16_t)vcgtq_s64(v99, v96);
    v92 = vbslq_s8(v100, (int8x16_t)v96, v98);
    v91 = (__n128)vbslq_s8(v100, (int8x16_t)v96, (int8x16_t)v99);
    v101 = (int8x16_t)vcgtq_s64(v95, (int64x2_t)v90);
    v102 = vbslq_s8(v101, (int8x16_t)v95, v93);
    v103 = (int64x2_t)vbslq_s8(v101, (int8x16_t)v95, (int8x16_t)v90);
    v104 = (int8x16_t)vcgtq_s64(v96, v103);
    v93 = vbslq_s8(v104, (int8x16_t)v96, v102);
    v90 = (__n128)vbslq_s8(v104, (int8x16_t)v96, (int8x16_t)v103);
  }
  while (v87 != (int64x2_t **)v139);
  v136 = v92;
  v137 = v93;
  if (!sub_2233EC5A4(&v136, &v153, &__p, a4 + 1, a5, a6, a7, v90, v91)
    || (sub_2233EC5A4(&v136, &v150, &__p, a4 + 1, a5, a6, a7, v105, v106) & 1) == 0)
  {
    goto LABEL_175;
  }
LABEL_117:
  v116 = v153;
  v115 = v154;
  if ((unint64_t)(v154 - v153) < 0x80 || a4 > 0x63 || (unint64_t)(v145 - (_BYTE *)v144) < 0x79)
  {
    if (v153 != v154)
    {
      v121 = v145;
      if (v144 != v145)
      {
        do
        {
          v124 = (char *)v144;
          if (v144 != v121)
          {
            do
            {
              v125 = *(_QWORD **)v116;
              v126 = *(_QWORD **)v124;
              if (*(_QWORD *)(*(_QWORD *)v116 + 48) >= *(_QWORD *)(*(_QWORD *)v124 + 32)
                && v125[4] <= v126[6]
                && v125[7] >= v126[5]
                && v125[5] <= v126[7])
              {
                if (!sub_2233EDB90(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v125, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v126, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
                v121 = v145;
              }
              v124 += 8;
            }
            while (v124 != v121);
            v115 = v154;
          }
          v116 += 8;
        }
        while (v116 != v115);
      }
    }
  }
  else if ((sub_2233EC5A4(&v158, &v153, &v144, a4 + 1, a5, a6, a7, v21, v22) & 1) == 0)
  {
    goto LABEL_175;
  }
  v123 = (char *)v150;
  v122 = v151;
  if ((unint64_t)(v151 - (_BYTE *)v150) < 0x80 || a4 > 0x63 || (unint64_t)(v142 - (_BYTE *)v141) < 0x79)
  {
    if (v150 != v151)
    {
      v128 = v142;
      if (v141 != v142)
      {
        do
        {
          v131 = (char *)v141;
          if (v141 != v128)
          {
            do
            {
              v132 = *(_QWORD **)v123;
              v133 = *(_QWORD **)v131;
              if (*(_QWORD *)(*(_QWORD *)v123 + 48) >= *(_QWORD *)(*(_QWORD *)v131 + 32)
                && v132[4] <= v133[6]
                && v132[7] >= v133[5]
                && v132[5] <= v133[7])
              {
                if (!sub_2233EDB90(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v132, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v133, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
                v128 = v142;
              }
              v131 += 8;
            }
            while (v131 != v128);
            v122 = v151;
          }
          v123 += 8;
        }
        while (v123 != v122);
      }
    }
  }
  else if ((sub_2233EC5A4(v156, &v150, &v141, a4 + 1, a5, a6, a7, v21, v22) & 1) == 0)
  {
    goto LABEL_175;
  }
  v129 = 1;
  v130 = (char *)__p;
  if (__p)
  {
LABEL_176:
    v139 = v130;
    operator delete(v130);
  }
LABEL_177:
  if (v141)
  {
    v142 = (char *)v141;
    operator delete(v141);
  }
  if (v144)
  {
    v145 = (char *)v144;
    operator delete(v144);
  }
  if (v147)
  {
    v148 = (char *)v147;
    operator delete(v147);
  }
  if (v150)
  {
    v151 = (char *)v150;
    operator delete(v150);
  }
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  return v129;
}

void sub_2233EDACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  if (__p)
  {
    operator delete(__p);
    v32 = a20;
    if (!a20)
    {
LABEL_3:
      v33 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v32 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v32);
  v33 = a23;
  if (!a23)
  {
LABEL_4:
    v34 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v33);
  v34 = a26;
  if (!a26)
  {
LABEL_5:
    v35 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v34);
  v35 = a29;
  if (!a29)
  {
LABEL_6:
    v36 = *(void **)(v30 - 152);
    if (!v36)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v35);
  v36 = *(void **)(v30 - 152);
  if (!v36)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  *(_QWORD *)(v30 - 144) = v36;
  operator delete(v36);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233EDB90(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 **a12)
{
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float *v72;
  uint64_t v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t i;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  _QWORD *v120;
  __int128 *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v126;
  char v127[8];
  int v128;
  char v129;
  uint64_t v130;
  __int16 v131;
  int v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  unsigned __int128 v161;
  uint64_t v162;
  char v163;
  char v164;
  uint64_t v165;
  __int128 v166;
  int v167;
  _OWORD v168[2];
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  unsigned __int128 v191;
  uint64_t v192;
  char v193;
  char v194;
  uint64_t v195;
  __int128 v196;
  int v197;
  _OWORD v198[2];
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  unsigned __int128 v209;
  __int128 v210;
  unsigned __int128 v211;
  _QWORD v212[3];
  uint64_t v213;
  uint64_t v214;
  __int128 v215;
  unsigned __int128 v216;
  uint64_t v217;
  _QWORD v218[3];
  uint64_t v219;
  uint64_t v220;
  __int128 v221;
  unsigned __int128 v222;
  uint64_t v223;

  v12 = (_QWORD *)a8;
  v14 = a4;
  v15 = a3;
  v16 = a2;
  if (*(_BYTE *)(a4 + 96) && (unint64_t)(*(_QWORD *)(a4 + 80) + 1) < *(_QWORD *)(a4 + 88)
    || *(_BYTE *)(a8 + 96) && (unint64_t)(*(_QWORD *)(a8 + 80) + 1) < *(_QWORD *)(a8 + 88))
  {
    return 1;
  }
  v19 = (a3 - a2) >> 3;
  if (a3 == a2)
    v20 = 0;
  else
    v20 = v19 + 1;
  v218[0] = a3;
  v218[1] = a2;
  v218[2] = a3;
  v219 = (a3 - a2) >> 3;
  v112 = v20;
  v220 = v20;
  *(_QWORD *)&v221 = a2;
  *((_QWORD *)&v221 + 1) = a2;
  v222 = __PAIR128__(v219, a3);
  v223 = 0;
  if (a7 == a6)
    v21 = 0;
  else
    v21 = ((a7 - a6) >> 3) + 1;
  v212[0] = a7;
  v212[1] = a6;
  v212[2] = a7;
  v213 = (a7 - a6) >> 3;
  v123 = v21;
  v214 = v21;
  *(_QWORD *)&v215 = a6;
  *((_QWORD *)&v215 + 1) = a6;
  v216 = __PAIR128__(v213, a7);
  v126 = v213;
  v217 = 0;
  v210 = v221;
  v211 = v222;
  v208 = v215;
  v209 = __PAIR128__(v213, a7);
  v22 = *(_DWORD *)a4;
  v107 = *(_DWORD *)a8;
  v207 = *(_QWORD *)(a4 + 64);
  v206 = *(_QWORD *)(a4 + 104);
  v205 = 0;
  v204 = 0u;
  v203 = 0u;
  v202 = 0;
  v201 = 0u;
  v200 = 0u;
  v199 = 0;
  memset(v198, 0, sizeof(v198));
  v102 = (uint64_t *)(a8 + 32);
  sub_2233EE968(a4, v218, (uint64_t *)&v203, (uint64_t)&v200, (uint64_t *)v198, &v207, &v206, v22, (uint64_t *)(a8 + 32), a10);
  v23 = v201;
  v24 = v202;
  v25 = v202 - 1;
  if (v202 >= *((uint64_t *)&v201 + 1))
  {
    v26 = v201;
    if (v25 <= *((uint64_t *)&v201 + 1))
      v26 = *((_QWORD *)&v200 + 1) + 8 * (v25 % *((_QWORD *)&v201 + 1));
  }
  else
  {
    v26 = v200 - 8;
  }
  if (v202 == 1)
  {
    v27 = v112 - 1;
    if (v112 >= v19)
    {
      v26 = v15;
      if (v27 <= v19)
        v26 = v16 + 8 * (v27 % v19);
    }
    else
    {
      v26 = v15 - 8;
    }
    if (v112 == v202)
    {
      v27 = v112;
      v26 = v15;
    }
    v28 = (v15 - v16) >> 3;
    v111 = v15;
    v108 = v16;
  }
  else
  {
    v27 = v202 - 1;
    v28 = *((_QWORD *)&v201 + 1);
    v111 = v201;
    v108 = *((_QWORD *)&v200 + 1);
  }
  v178 = v200;
  v179 = v201;
  v180 = v202--;
  if (v24 >= *((uint64_t *)&v201 + 1))
  {
    if (v25 <= *((uint64_t *)&v201 + 1))
      v23 = *((_QWORD *)&v200 + 1) + 8 * (v25 % *((_QWORD *)&v201 + 1));
  }
  else
  {
    v23 = v200 - 8;
  }
  *(_QWORD *)&v200 = v23;
  v203 = v178;
  v204 = v179;
  v205 = v180;
  v29 = v27 - 1;
  if (v27 >= v28)
  {
    v30 = v111;
    if (v29 <= v28)
    {
      v30 = v108 + 8 * (v29 % v28);
      if (v27 != 1)
        goto LABEL_35;
    }
    else if (v27 != 1)
    {
      goto LABEL_35;
    }
LABEL_31:
    v31 = v112 - 1;
    if (v112 >= v19)
    {
      v32 = v15;
      if (v31 <= v19)
        v32 = v16 + 8 * (v31 % v19);
    }
    else
    {
      v32 = v15 - 8;
    }
    v29 = v112;
    if (v112 == v27)
    {
      v30 = v15;
    }
    else
    {
      v29 = v112 - 1;
      v30 = v32;
    }
    v28 = (v15 - v16) >> 3;
    v111 = v15;
    v108 = v16;
    result = 1;
    if (v25 != v199)
      goto LABEL_45;
    return result;
  }
  v30 = v26 - 8;
  if (v27 == 1)
    goto LABEL_31;
LABEL_35:
  result = 1;
  if (v25 != v199)
  {
LABEL_45:
    v113 = v29;
    v110 = v28;
    v116 = (uint64_t *)(v14 + 32);
    v105 = -v22;
    v121 = (__int128 *)(a10 + 8);
    v119 = -v107;
    v33 = v123 < v126;
    if (v123 >= v126)
      v34 = 0;
    else
      v34 = -1;
    v117 = v123 - 1;
    v118 = a1;
    if (v123 - 1 > v126)
      v33 = 1;
    v115 = v33;
    v35 = v112 < v19;
    v36 = *((_QWORD *)&v204 + 1);
    v37 = v205;
    if (v112 >= v19)
      v38 = 0;
    else
      v38 = -1;
    v106 = (v15 - v16) >> 3;
    if (v112 - 1 > v19)
      v35 = 1;
    v101 = v35;
    v114 = a7 + 8 * v34;
    v100 = v15 + 8 * v38;
    v122 = v14;
    v103 = v16;
    v104 = v15;
    v120 = v12;
    while (1)
    {
      v109 = v30;
      if (v37 >= v36)
      {
        v41 = v37 - 1;
        if (v41 <= v36)
          v40 = (float *)(*((_QWORD *)&v203 + 1) + 8 * (v41 % v36));
        else
          v40 = (float *)v204;
      }
      else
      {
        v40 = (float *)(v203 - 8);
      }
      v42 = (float)((float)(v40[1] - *(float *)(a10 + 4)) * *(float *)(a10 + 24)) + (float)*(uint64_t *)(a10 + 16);
      if (v42 >= 0.0)
        v43 = 0.5;
      else
        v43 = -0.5;
      sub_2233DC31C(v42 + v43);
      v44 = (float)((float)(*v40 - *(float *)a10) * *(float *)(a10 + 24)) + (float)*(uint64_t *)(a10 + 8);
      if (v44 >= 0.0)
        v45 = 0.5;
      else
        v45 = -0.5;
      v46 = v44 + v45;
      sub_2233DC31C(v44 + v45);
      v47 = ceilf(v46);
      v48 = floorf(v46);
      if (v46 >= 0.0)
        v47 = v48;
      v49 = (uint64_t)v47;
      if (v105 == 1)
      {
        if (*v102 > v49)
          return 1;
      }
      else if (v105 == -1 && v12[6] < v49)
      {
        return 1;
      }
      if (v205 >= *((uint64_t *)&v204 + 1))
      {
        v51 = v109;
        if (v205 - 1 <= *((uint64_t *)&v204 + 1))
        {
          v50 = *((_QWORD *)&v203 + 1) + 8 * ((v205 - 1) % *((_QWORD *)&v204 + 1));
          v52 = *((_QWORD *)&v201 + 1);
          v53 = v202;
          if (v202 < *((uint64_t *)&v201 + 1))
          {
LABEL_81:
            v54 = v200 - 8;
            goto LABEL_89;
          }
        }
        else
        {
          v50 = v204;
          v52 = *((_QWORD *)&v201 + 1);
          v53 = v202;
          if (v202 < *((uint64_t *)&v201 + 1))
            goto LABEL_81;
        }
      }
      else
      {
        v50 = v203 - 8;
        v51 = v109;
        v52 = *((_QWORD *)&v201 + 1);
        v53 = v202;
        if (v202 < *((uint64_t *)&v201 + 1))
          goto LABEL_81;
      }
      v55 = v53 - 1;
      if (v55 <= v52)
        v54 = *((_QWORD *)&v200 + 1) + 8 * (v55 % v52);
      else
        v54 = v201;
LABEL_89:
      *(_QWORD *)&v178 = v14;
      *((_QWORD *)&v178 + 1) = v207;
      *(_QWORD *)&v179 = v50;
      *((_QWORD *)&v179 + 1) = v54;
      v180 = v51;
      v181 = v108;
      v182 = v111;
      v183 = v110;
      v184 = v113;
      v185 = v15;
      v186 = v16;
      v187 = v15;
      v188 = v106;
      v189 = v112;
      v190 = v210;
      v191 = v211;
      v192 = 0;
      v193 = 1;
      v194 = 0;
      v195 = *(_QWORD *)a10;
      v196 = *v121;
      v197 = *(_DWORD *)(a10 + 24);
      v177 = v12[8];
      v176 = v12[13];
      v175 = 0;
      v173 = 0u;
      v174 = 0u;
      v172 = 0;
      v170 = 0u;
      v171 = 0u;
      v169 = 0;
      memset(v168, 0, sizeof(v168));
      sub_2233EE968((uint64_t)v12, v212, (uint64_t *)&v173, (uint64_t)&v170, (uint64_t *)v168, &v177, &v176, v107, v116, a10);
      v56 = v171;
      v57 = v172;
      v58 = v172 - 1;
      if (v172 >= *((uint64_t *)&v171 + 1))
      {
        v59 = v171;
        if (v58 <= *((uint64_t *)&v171 + 1))
          v59 = *((_QWORD *)&v170 + 1) + 8 * (v58 % *((_QWORD *)&v171 + 1));
      }
      else
      {
        v59 = v170 - 8;
      }
      if (v172 == 1)
      {
        v59 = v114;
        if (!v115)
          v59 = a6 + 8 * (v117 % v126);
        v61 = v123;
        v62 = a7;
        if (v123 == v172)
          v59 = a7;
        else
          v61 = v123 - 1;
        v63 = a6;
        v60 = v126;
      }
      else
      {
        v60 = *((_QWORD *)&v171 + 1);
        v61 = v172 - 1;
        v62 = v171;
        v63 = *((_QWORD *)&v170 + 1);
      }
      v148 = v170;
      v149 = v171;
      v150 = v172--;
      if (v57 >= *((uint64_t *)&v171 + 1))
      {
        if (v58 <= *((uint64_t *)&v171 + 1))
          v56 = *((_QWORD *)&v170 + 1) + 8 * (v58 % *((_QWORD *)&v171 + 1));
      }
      else
      {
        v56 = v170 - 8;
      }
      *(_QWORD *)&v170 = v56;
      v173 = v148;
      v174 = v149;
      v175 = v150;
      v64 = v61 - 1;
      if (v61 >= v60)
      {
        v65 = v62;
        if (v64 <= v60)
        {
          v65 = v63 + 8 * (v64 % v60);
          if (v61 != 1)
          {
LABEL_119:
            if (v58 != v169)
              goto LABEL_122;
            goto LABEL_120;
          }
        }
        else if (v61 != 1)
        {
          goto LABEL_119;
        }
      }
      else
      {
        v65 = v59 - 8;
        if (v61 != 1)
          goto LABEL_119;
      }
      v66 = v114;
      if (!v115)
        v66 = a6 + 8 * (v117 % v126);
      v62 = a7;
      if (v123 == v61)
        v64 = v123;
      else
        v64 = v123 - 1;
      if (v123 == v61)
        v65 = a7;
      else
        v65 = v66;
      v63 = a6;
      v60 = v126;
      if (v58 != v169)
      {
LABEL_122:
        v69 = *((_QWORD *)&v174 + 1);
        v70 = v175;
        do
        {
          if (v70 >= v69)
          {
            v73 = v70 - 1;
            if (v73 <= v69)
              v72 = (float *)(*((_QWORD *)&v173 + 1) + 8 * (v73 % v69));
            else
              v72 = (float *)v174;
          }
          else
          {
            v72 = (float *)(v173 - 8);
          }
          v74 = (float)((float)(v72[1] - *(float *)(a10 + 4)) * *(float *)(a10 + 24)) + (float)*(uint64_t *)(a10 + 16);
          if (v74 >= 0.0)
            v75 = 0.5;
          else
            v75 = -0.5;
          sub_2233DC31C(v74 + v75);
          v76 = (float)((float)(*v72 - *(float *)a10) * *(float *)(a10 + 24)) + (float)*(uint64_t *)(a10 + 8);
          if (v76 >= 0.0)
            v77 = 0.5;
          else
            v77 = -0.5;
          v78 = v76 + v77;
          sub_2233DC31C(v76 + v77);
          v79 = ceilf(v78);
          v80 = floorf(v78);
          if (v78 >= 0.0)
            v79 = v80;
          v81 = (uint64_t)v79;
          if (v119 == 1)
          {
            if (*v116 > v81)
              break;
          }
          else if (v119 == -1 && *(_QWORD *)(v122 + 48) < v81)
          {
            break;
          }
          if (v175 >= *((uint64_t *)&v174 + 1))
          {
            if (v175 - 1 <= *((uint64_t *)&v174 + 1))
            {
              v82 = *((_QWORD *)&v173 + 1) + 8 * ((v175 - 1) % *((_QWORD *)&v174 + 1));
              v83 = *((_QWORD *)&v171 + 1);
              v84 = v172;
              if (v172 >= *((uint64_t *)&v171 + 1))
              {
LABEL_153:
                v86 = v84 - 1;
                if (v86 <= v83)
                  v85 = *((_QWORD *)&v170 + 1) + 8 * (v86 % v83);
                else
                  v85 = v171;
                goto LABEL_156;
              }
            }
            else
            {
              v82 = v174;
              v83 = *((_QWORD *)&v171 + 1);
              v84 = v172;
              if (v172 >= *((uint64_t *)&v171 + 1))
                goto LABEL_153;
            }
          }
          else
          {
            v82 = v173 - 8;
            v83 = *((_QWORD *)&v171 + 1);
            v84 = v172;
            if (v172 >= *((uint64_t *)&v171 + 1))
              goto LABEL_153;
          }
          v85 = v170 - 8;
LABEL_156:
          *(_QWORD *)&v148 = v120;
          *((_QWORD *)&v148 + 1) = v177;
          *(_QWORD *)&v149 = v82;
          *((_QWORD *)&v149 + 1) = v85;
          v150 = v65;
          v151 = v63;
          v152 = v62;
          v153 = v60;
          v154 = v64;
          v155 = a7;
          v156 = a6;
          v157 = a7;
          v158 = v126;
          v159 = v123;
          v160 = v208;
          v161 = v209;
          v162 = 0;
          v163 = 0;
          v164 = 0;
          v165 = *(_QWORD *)a10;
          v166 = *v121;
          v167 = *(_DWORD *)(a10 + 24);
          v128 = 0;
          v129 = 0;
          v130 = -1;
          v131 = 0;
          v132 = 0;
          v137 = 1;
          v138 = 0;
          v139 = 0;
          v140 = 0;
          v145 = 1;
          v146 = 0;
          v147 = 0;
          v133 = v118;
          v134 = *(_OWORD *)(v122 + 16);
          v135 = v207;
          v136 = xmmword_2245F5400;
          v141 = a5;
          v142 = *((_OWORD *)v120 + 1);
          v143 = v177;
          v87 = *(_QWORD *)(a11 + 8) - *(_QWORD *)a11;
          v144 = xmmword_2245F5400;
          sub_2233EEC98((uint64_t)&v178, (uint64_t)&v148, (uint64_t)v127, a9, a10, (char **)a11);
          v88 = *(_QWORD *)(a11 + 8);
          for (i = *(_QWORD *)a11 + v87; i != v88; i += 192)
          {
            if (*(_DWORD *)(i + 32) == 4 && **a12 - 58 <= 0xFFFFFFF7)
              **a12 = 50;
            if (*(_DWORD *)(i + 112) == 4 && **a12 - 58 <= 0xFFFFFFF7)
              **a12 = 50;
          }
          if ((*a12)[9])
            return 0;
          v90 = v175;
          v69 = *((_QWORD *)&v174 + 1);
          v70 = --v175;
          if (v90 >= *((uint64_t *)&v174 + 1))
          {
            if (v70 <= *((uint64_t *)&v174 + 1))
              v91 = *((_QWORD *)&v173 + 1) + 8 * (v70 % *((_QWORD *)&v174 + 1));
            else
              v91 = v174;
          }
          else
          {
            v91 = v173 - 8;
          }
          *(_QWORD *)&v173 = v91;
          v92 = v172;
          v93 = --v172;
          if (v92 >= *((uint64_t *)&v171 + 1))
          {
            if (v93 <= *((uint64_t *)&v171 + 1))
              v94 = *((_QWORD *)&v170 + 1) + 8 * (v93 % *((_QWORD *)&v171 + 1));
            else
              v94 = v171;
          }
          else
          {
            v94 = v170 - 8;
          }
          *(_QWORD *)&v170 = v94;
          ++v177;
          v71 = v64 - 1;
          if (v64 >= v60)
          {
            v65 = v62;
            if (v71 <= v60)
              v65 = v63 + 8 * (v71 % v60);
          }
          else
          {
            v65 -= 8;
          }
          if (v64 == 1)
          {
            v95 = v114;
            if (!v115)
              v95 = a6 + 8 * (v117 % v126);
            v71 = v123;
            v62 = a7;
            if (v123 == 1)
            {
              v65 = a7;
            }
            else
            {
              v71 = v123 - 1;
              v65 = v95;
            }
            v63 = a6;
            v60 = v126;
          }
          ++v176;
          v64 = v71;
        }
        while (v93 != v169);
      }
LABEL_120:
      v67 = v205;
      v36 = *((_QWORD *)&v204 + 1);
      v37 = --v205;
      if (v67 >= *((uint64_t *)&v204 + 1))
      {
        v12 = v120;
        v14 = v122;
        v16 = v103;
        v15 = v104;
        if (v37 <= *((uint64_t *)&v204 + 1))
          v68 = *((_QWORD *)&v203 + 1) + 8 * (v37 % *((_QWORD *)&v204 + 1));
        else
          v68 = v204;
      }
      else
      {
        v68 = v203 - 8;
        v12 = v120;
        v14 = v122;
        v16 = v103;
        v15 = v104;
      }
      *(_QWORD *)&v203 = v68;
      v96 = v202;
      v97 = --v202;
      if (v96 >= *((uint64_t *)&v201 + 1))
      {
        if (v97 <= *((uint64_t *)&v201 + 1))
          v98 = *((_QWORD *)&v200 + 1) + 8 * (v97 % *((_QWORD *)&v201 + 1));
        else
          v98 = v201;
      }
      else
      {
        v98 = v200 - 8;
      }
      *(_QWORD *)&v200 = v98;
      ++v207;
      v39 = v113 - 1;
      if (v113 >= v110)
      {
        v30 = v111;
        if (v39 <= v110)
          v30 = v108 + 8 * (v39 % v110);
      }
      else
      {
        v30 = v109 - 8;
      }
      if (v113 == 1)
      {
        v99 = v100;
        if (!v101)
          v99 = v16 + 8 * ((v112 - 1) % v106);
        v39 = v112;
        if (v112 == 1)
        {
          v30 = v15;
        }
        else
        {
          v39 = v112 - 1;
          v30 = v99;
        }
        v110 = v106;
        v111 = v15;
        v108 = v16;
      }
      ++v206;
      v113 = v39;
      if (v97 == v199)
        return 1;
    }
  }
  return result;
}

