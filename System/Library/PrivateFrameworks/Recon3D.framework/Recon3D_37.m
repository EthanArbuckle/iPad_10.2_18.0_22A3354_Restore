BOOL sub_223FC8304(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  double v22;
  double v23;
  _BOOL8 v24;
  unint64_t v25;
  int8x8_t v26;
  int8x8_t v27;
  int8x8_t v28;
  int8x8_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64x2_t v34;
  int64x2_t v35;
  const double *v36;
  uint64_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  const double *v44;
  int8x16_t v45;
  uint64_t v46;
  int8x16_t v47;
  uint64_t v48;
  int8x16_t v49;
  uint64_t v50;
  int8x16_t v51;
  uint64_t v52;
  int8x8_t v53;
  int8x8_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  int v61;
  BOOL v62;
  uint64_t *v63;
  char *v64;
  int v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v72;
  _QWORD *v74;
  double v76;
  double *v77;
  char *v78;
  float64x2x2_t v79;
  float64x2x2_t v80;

  v3 = (uint64_t *)a2[2];
  if (v3 != a2 && (uint64_t *)a2[3] != v3)
  {
    v4 = 0;
    v5 = a1;
    while (1)
    {
      v8 = *v5;
      v9 = v5[1];
      v10 = a2;
      while (1)
      {
        v11 = v10[1];
        if (v11 != v9)
          break;
        v10 = (uint64_t *)v10[2];
        if (v10 == a2)
        {
          v11 = a2[1];
          v10 = a2;
          break;
        }
      }
      if (v9 == v11)
        goto LABEL_4;
      v12 = 0;
      v13 = v10;
      v14 = v9 > v11;
LABEL_18:
      v13 = (uint64_t *)v13[2];
      if ((v14 & 1) != 0)
      {
        while (v13 != v10)
        {
          v15 = v13[1];
          if (v15 >= v9)
          {
            if (v13 == v10)
              break;
            if (v15 != v9)
              goto LABEL_39;
            if (*v13 == v8)
              goto LABEL_5;
            v16 = (_QWORD *)v13[3];
            if (v16[1] == v9 && *v13 > v8 == *v16 <= v8)
              goto LABEL_5;
            v13 = (uint64_t *)v13[2];
            if (v13 == v10)
              break;
          }
          else
          {
            v13 = (uint64_t *)v13[2];
          }
        }
      }
      else
      {
        while (v13 != v10)
        {
          v15 = v13[1];
          if (v15 <= v9)
          {
            if (v13 == v10)
              break;
            if (v15 != v9)
            {
LABEL_39:
              v18 = *v13;
              v19 = (uint64_t *)v13[3];
              v20 = *v19;
              if (v8 < *v13 && v20 > v8)
                goto LABEL_50;
              if (v8 > v18 && v20 < v8)
              {
                v12 = 1 - v12;
                v14 ^= 1u;
                goto LABEL_18;
              }
              v22 = (double)(v18 - v20) * (double)(v9 - v15) - (double)(v15 - v19[1]) * (double)(v8 - v18);
              if (((v14 ^ (v22 >= 0.0)) & 1) != 0)
                v12 = 1 - v12;
              if (v22 != 0.0)
              {
LABEL_50:
                v14 ^= 1u;
                goto LABEL_18;
              }
              goto LABEL_5;
            }
            if (*v13 == v8)
              goto LABEL_5;
            v17 = (_QWORD *)v13[3];
            if (v17[1] == v9 && *v13 > v8 == *v17 <= v8)
              goto LABEL_5;
            v13 = (uint64_t *)v13[2];
            if (v13 == v10)
              break;
          }
          else
          {
            v13 = (uint64_t *)v13[2];
          }
        }
      }
      if (v9 > v11 != (v14 & 1))
      {
        v23 = (double)(*v10 - *(_QWORD *)v10[3]) * (double)(v9 - v11)
            - (double)(v11 - *(_QWORD *)(v10[3] + 8)) * (double)(v8 - *v10);
        if (((v14 ^ (v23 >= 0.0)) & 1) != 0)
          v12 = 1 - v12;
        if (v23 == 0.0)
          goto LABEL_5;
      }
      if (!v12)
LABEL_4:
        ++v4;
      else
        --v4;
LABEL_5:
      v5 = (uint64_t *)v5[2];
      if (v4 >= 0)
        v6 = v4;
      else
        v6 = -v4;
      if (v5 == a1 || v6 >= 2)
      {
        if (v6 >= 2)
          return v4 >> 31;
        goto LABEL_61;
      }
    }
  }
  if ((uint64_t *)a1[2] != a1)
  {
    v4 = 2;
    return v4 >> 31;
  }
LABEL_61:
  sub_223FCD0D0((uint64_t *)&v77, a1);
  if (v77 == (double *)v78)
  {
    v31 = 0;
    v32 = 0;
    if (!v77)
      goto LABEL_84;
    goto LABEL_83;
  }
  v25 = v78 - (char *)v77 - 16;
  v26 = (int8x8_t)0x8000000000000000;
  v27 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
  if (v25 >= 0x30)
  {
    v33 = (v25 >> 4) + 1;
    v30 = (char *)&v77[2 * (v33 & 0x1FFFFFFFFFFFFFFCLL)];
    v34 = vdupq_n_s64(0x8000000000000000);
    v35 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v36 = v77 + 4;
    v37 = v33 & 0x1FFFFFFFFFFFFFFCLL;
    v38 = v35;
    v39 = v35;
    v40 = v35;
    v41 = v34;
    v42 = v34;
    v43 = v34;
    do
    {
      v44 = v36 - 4;
      v79 = vld2q_f64(v44);
      v80 = vld2q_f64(v36);
      v35 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v35, (int64x2_t)v79.val[0]), (int8x16_t)v79.val[0], (int8x16_t)v35);
      v38 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v38, (int64x2_t)v80.val[0]), (int8x16_t)v80.val[0], (int8x16_t)v38);
      v42 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v79.val[0], v42), (int8x16_t)v79.val[0], (int8x16_t)v42);
      v43 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v80.val[0], v43), (int8x16_t)v80.val[0], (int8x16_t)v43);
      v39 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v39, (int64x2_t)v79.val[1]), (int8x16_t)v79.val[1], (int8x16_t)v39);
      v40 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v40, (int64x2_t)v80.val[1]), (int8x16_t)v80.val[1], (int8x16_t)v40);
      v34 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v79.val[1], v34), (int8x16_t)v79.val[1], (int8x16_t)v34);
      v41 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v80.val[1], v41), (int8x16_t)v80.val[1], (int8x16_t)v41);
      v36 += 8;
      v37 -= 4;
    }
    while (v37);
    v45 = vbslq_s8((int8x16_t)vcgtq_s64(v42, v43), (int8x16_t)v42, (int8x16_t)v43);
    v46 = vextq_s8(v45, v45, 8uLL).u64[0];
    v29 = vbsl_s8((int8x8_t)vcgtd_s64(v45.i64[0], v46), *(int8x8_t *)v45.i8, (int8x8_t)v46);
    v47 = vbslq_s8((int8x16_t)vcgtq_s64(v34, v41), (int8x16_t)v34, (int8x16_t)v41);
    v48 = vextq_s8(v47, v47, 8uLL).u64[0];
    v26 = vbsl_s8((int8x8_t)vcgtd_s64(v47.i64[0], v48), *(int8x8_t *)v47.i8, (int8x8_t)v48);
    v49 = vbslq_s8((int8x16_t)vcgtq_s64(v40, v39), (int8x16_t)v39, (int8x16_t)v40);
    v50 = vextq_s8(v49, v49, 8uLL).u64[0];
    v28 = vbsl_s8((int8x8_t)vcgtd_s64(v50, v49.i64[0]), *(int8x8_t *)v49.i8, (int8x8_t)v50);
    v51 = vbslq_s8((int8x16_t)vcgtq_s64(v38, v35), (int8x16_t)v35, (int8x16_t)v38);
    v52 = vextq_s8(v51, v51, 8uLL).u64[0];
    v27 = vbsl_s8((int8x8_t)vcgtd_s64(v52, v51.i64[0]), *(int8x8_t *)v51.i8, (int8x8_t)v52);
    if (v33 == (v33 & 0x1FFFFFFFFFFFFFFCLL))
      goto LABEL_78;
  }
  else
  {
    v28 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
    v29 = (int8x8_t)0x8000000000000000;
    v30 = (char *)v77;
  }
  do
  {
    v53 = *(int8x8_t *)v30;
    v54 = *(int8x8_t *)(v30 + 8);
    v30 += 16;
    if (*(_QWORD *)&v53 < *(_QWORD *)&v27)
      v27 = v53;
    if (*(_QWORD *)&v53 > *(_QWORD *)&v29)
      v29 = v53;
    if (*(_QWORD *)&v54 < *(_QWORD *)&v28)
      v28 = v54;
    if (*(_QWORD *)&v54 > *(_QWORD *)&v26)
      v26 = v54;
  }
  while (v30 != v78);
LABEL_78:
  v55 = *(_QWORD *)&v27 + *(_QWORD *)&v29;
  if ((uint64_t)(*(_QWORD *)&v27 + *(_QWORD *)&v29) < 0 != __OFADD__(*(_QWORD *)&v27, *(_QWORD *)&v29))
    ++v55;
  v31 = v55 >> 1;
  v56 = *(_QWORD *)&v28 + *(_QWORD *)&v26;
  if ((uint64_t)(*(_QWORD *)&v28 + *(_QWORD *)&v26) < 0 != __OFADD__(*(_QWORD *)&v28, *(_QWORD *)&v26))
    ++v56;
  v32 = v56 >> 1;
  if (v77)
  {
LABEL_83:
    v78 = (char *)v77;
    operator delete(v77);
  }
LABEL_84:
  sub_223FCD0D0((uint64_t *)&v77, a2);
  v24 = 0;
  v57 = v78;
  if (v78 == (char *)v77 || (unint64_t)(v78 - (char *)v77) < 0x30)
    goto LABEL_143;
  v58 = 0;
  while (1)
  {
    v59 = (char *)&v77[v58];
    v60 = *(_QWORD *)&v77[v58 + 1];
    if (v60 != v32)
      break;
    v58 += 2;
    if (&v77[v58] == (double *)v78)
      goto LABEL_142;
  }
  if (v59 == v78)
  {
LABEL_142:
    v24 = 0;
    goto LABEL_143;
  }
  v61 = 0;
  v62 = v60 < v32;
  v63 = (uint64_t *)&v77[v58];
  v64 = v78;
  v65 = v60 < v32;
  v24 = 1;
  while (1)
  {
    v66 = (char *)(v63 + 2);
    if ((v65 & 1) == 0)
      break;
    while (1)
    {
      do
      {
LABEL_95:
        if (v66 == v64)
        {
          if (!(v58 * 8))
            goto LABEL_148;
          v63 = (uint64_t *)v77;
          v64 = (char *)&v77[v58];
          if (v59 == v66)
            goto LABEL_148;
        }
        else
        {
          v63 = (uint64_t *)v66;
        }
        if (v63 != (uint64_t *)v64)
        {
          while (v63[1] < v32)
          {
            v63 += 2;
            if (v63 == (uint64_t *)v64)
            {
              v66 = v64;
              goto LABEL_95;
            }
          }
        }
        v66 = v64;
      }
      while (v63 == (uint64_t *)v64);
      v67 = v63 == (uint64_t *)v77 ? v78 : (char *)v63;
      v68 = v63[1];
      if (v68 != v32)
        break;
      if (*v63 == v31 || *((_QWORD *)v67 - 1) == v32 && *v63 > v31 == *((_QWORD *)v67 - 2) <= v31)
        goto LABEL_146;
      v66 = (char *)(v63 + 2);
      if (v59 == (char *)(v63 + 2))
        goto LABEL_147;
    }
LABEL_130:
    v69 = *v63;
    v70 = *((_QWORD *)v67 - 2);
    if (v31 < *v63 && v70 > v31)
      goto LABEL_141;
    if (v31 <= v69 || v70 >= v31)
    {
      v72 = (double)(v69 - v70) * (double)(v32 - v68) - (double)(v68 - *((_QWORD *)v67 - 1)) * (double)(v31 - v69);
      if (((v65 ^ (v72 >= 0.0)) & 1) != 0)
        v61 = 1 - v61;
      if (v72 == 0.0)
        goto LABEL_143;
LABEL_141:
      v65 ^= 1u;
    }
    else
    {
      v61 = 1 - v61;
      v65 ^= 1u;
    }
  }
  while (1)
  {
LABEL_113:
    if (v66 == v64)
    {
      if (!(v58 * 8))
        goto LABEL_148;
      v63 = (uint64_t *)v77;
      v64 = (char *)&v77[v58];
      if (v59 == v66)
        goto LABEL_148;
    }
    else
    {
      v63 = (uint64_t *)v66;
    }
    if (v63 != (uint64_t *)v64)
    {
      while (v63[1] > v32)
      {
        v63 += 2;
        if (v63 == (uint64_t *)v64)
        {
          v66 = v64;
          goto LABEL_113;
        }
      }
    }
    v66 = v64;
    if (v63 != (uint64_t *)v64)
    {
      if (v63 == (uint64_t *)v77)
        v67 = v78;
      else
        v67 = (char *)v63;
      v68 = v63[1];
      if (v68 != v32)
        goto LABEL_130;
      if (*v63 == v31 || *((_QWORD *)v67 - 1) == v32 && *v63 > v31 == *((_QWORD *)v67 - 2) <= v31)
      {
LABEL_146:
        v24 = 1;
        goto LABEL_143;
      }
      v66 = (char *)(v63 + 2);
      if (v59 == (char *)(v63 + 2))
        break;
    }
  }
LABEL_147:
  v66 = (char *)&v77[v58];
LABEL_148:
  if (v62 == (v65 & 1))
    goto LABEL_160;
  if (v66 == v78)
    v74 = v77;
  else
    v74 = v66;
  if (v66 != (char *)v77 && v66 != v78)
    v57 = v66;
  v76 = (double)(uint64_t)(*v74 - *((_QWORD *)v57 - 2)) * (double)(v32 - v74[1])
      - (double)(uint64_t)(v74[1] - *((_QWORD *)v57 - 1)) * (double)(v31 - *v74);
  v24 = 1;
  if (((v65 ^ (v76 >= 0.0)) & 1) != 0)
    v61 = 1 - v61;
  if (v76 != 0.0)
LABEL_160:
    v24 = v61 != 0;
LABEL_143:
  if (v77)
  {
    v78 = (char *)v77;
    operator delete(v77);
    return v24;
  }
  return v24;
}

_QWORD *sub_223FC8A6C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;

  result = (_QWORD *)a1[10];
  if (result)
  {
    while (result[15] != a1[15])
    {
      v3 = result[1];
      if (result[3] == v3 || *a1 == *result && a1[1] == v3)
      {
        result = (_QWORD *)result[10];
        if (result)
          continue;
      }
      goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    result = (_QWORD *)a1[9];
    if (result)
    {
      while (result[15] != a1[15])
      {
        v4 = result[1];
        if (result[3] != v4 && (*a1 != *result || a1[1] != v4))
          return 0;
        result = (_QWORD *)result[9];
        if (!result)
          return result;
      }
    }
  }
  return result;
}

BOOL sub_223FC8B18(uint64_t a1, int a2, int a3, char a4)
{
  __n128 *i;
  __n128 *j;
  uint64_t v9;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_BYTE *)(a1 + 33) = a4;
  sub_223FC59F4(a1);
  if (!a2)
    return 1;
  v9 = 0;
  if (!sub_223FC8C68(a1, &v9))
    return 1;
  if (!*(_BYTE *)(a1 + 225))
    return 0;
  while (1)
  {
    sub_223FC5D50(a1, v9);
    for (i = *(__n128 **)(a1 + 48); i; i = *(__n128 **)(a1 + 48))
    {
      *(_QWORD *)(a1 + 48) = i[6].n128_u64[0];
      sub_223FC8ED4(a1, i);
    }
    if (*(_QWORD *)(a1 + 176) != *(_QWORD *)(a1 + 168))
    {
      sub_223FCA02C((_QWORD *)a1);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 168);
    }
    *(_QWORD *)(a1 + 24) = v9;
    if (!sub_223FC8C68(a1, &v9))
      break;
    if (sub_223FCB0A4((_QWORD *)a1, v9))
    {
      sub_223FCB354((_QWORD *)a1);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 144);
    }
    sub_223FCA640(a1, v9);
    for (j = *(__n128 **)(a1 + 48); j; j = *(__n128 **)(a1 + 48))
    {
      *(_QWORD *)(a1 + 48) = j[6].n128_u64[0];
      sub_223FC8ED4(a1, j);
    }
    if (!*(_BYTE *)(a1 + 225))
      return 0;
  }
  if (!*(_BYTE *)(a1 + 225))
    return 0;
  sub_223FCAB84(a1);
  return *(_BYTE *)(a1 + 225) != 0;
}

BOOL sub_223FC8C68(uint64_t a1, uint64_t *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v2 = *(char **)(a1 + 112);
  v3 = *(char **)(a1 + 120);
  if (v2 != v3)
  {
    *a2 = *(_QWORD *)v2;
    v4 = v3 - v2;
    if (v3 - v2 >= 9)
    {
      v5 = 0;
      v6 = v4 >> 3;
      v7 = *(_QWORD *)v2;
      v8 = (unint64_t)((v4 >> 3) - 2) >> 1;
      v9 = v2;
      do
      {
        while (1)
        {
          v12 = &v9[8 * v5 + 8];
          v13 = (2 * v5) | 1;
          v5 = 2 * v5 + 2;
          if (v5 < v6)
            break;
          v5 = v13;
          *(_QWORD *)v9 = *(_QWORD *)v12;
          v9 = v12;
          if (v13 > v8)
            goto LABEL_12;
        }
        v10 = *(_QWORD *)v12;
        v11 = *((_QWORD *)v12 + 1);
        if (*(_QWORD *)v12 <= v11)
          v10 = *((_QWORD *)v12 + 1);
        if (*(_QWORD *)v12 >= v11)
          v5 = v13;
        else
          v12 += 8;
        *(_QWORD *)v9 = v10;
        v9 = v12;
      }
      while (v5 <= v8);
LABEL_12:
      v14 = v3 - 8;
      if (v12 == v3 - 8)
      {
        *(_QWORD *)v12 = v7;
        v20 = v3 - 8;
        if (v2 != v3 - 8)
        {
LABEL_19:
          v21 = v3;
          do
          {
            v22 = v21;
            v21 = v20;
            v23 = *a2;
            if (*a2 != *(_QWORD *)v2)
              goto LABEL_41;
            v24 = v20 - v2;
            if (v21 - v2 >= 9)
            {
              v25 = 0;
              v26 = v24 >> 3;
              v27 = (unint64_t)((v24 >> 3) - 2) >> 1;
              v28 = v2;
              do
              {
                while (1)
                {
                  v31 = &v28[8 * v25 + 8];
                  v32 = (2 * v25) | 1;
                  v25 = 2 * v25 + 2;
                  if (v25 < v26)
                    break;
                  v25 = v32;
                  *(_QWORD *)v28 = *(_QWORD *)v31;
                  v28 = v31;
                  if (v32 > v27)
                    goto LABEL_33;
                }
                v29 = *(_QWORD *)v31;
                v30 = *((_QWORD *)v31 + 1);
                if (*(_QWORD *)v31 <= v30)
                  v29 = *((_QWORD *)v31 + 1);
                if (*(_QWORD *)v31 >= v30)
                  v25 = v32;
                else
                  v31 += 8;
                *(_QWORD *)v28 = v29;
                v28 = v31;
              }
              while (v25 <= v27);
LABEL_33:
              v33 = v22 - 16;
              if (v31 == v33)
              {
                *(_QWORD *)v31 = v23;
              }
              else
              {
                *(_QWORD *)v31 = *(_QWORD *)v33;
                *(_QWORD *)v33 = v23;
                v34 = v31 - v2 + 8;
                if (v34 >= 9)
                {
                  v35 = (((unint64_t)v34 >> 3) - 2) >> 1;
                  v36 = &v2[8 * v35];
                  v37 = *(_QWORD *)v36;
                  v38 = *(_QWORD *)v31;
                  if (*(_QWORD *)v36 < *(_QWORD *)v31)
                  {
                    do
                    {
                      *(_QWORD *)v31 = v37;
                      v31 = v36;
                      if (!v35)
                        break;
                      v35 = (v35 - 1) >> 1;
                      v36 = &v2[8 * v35];
                      v37 = *(_QWORD *)v36;
                    }
                    while (*(_QWORD *)v36 < v38);
                    *(_QWORD *)v31 = v38;
                  }
                }
              }
            }
            v20 = v21 - 8;
          }
          while (v2 != v21 - 8);
        }
LABEL_40:
        v21 = v2;
LABEL_41:
        *(_QWORD *)(a1 + 120) = v21;
        return v2 != v3;
      }
      *(_QWORD *)v12 = *(_QWORD *)v14;
      *(_QWORD *)v14 = v7;
      v15 = v12 - v2 + 8;
      if (v15 >= 9)
      {
        v16 = (((unint64_t)v15 >> 3) - 2) >> 1;
        v17 = &v2[8 * v16];
        v18 = *(_QWORD *)v17;
        v19 = *(_QWORD *)v12;
        if (*(_QWORD *)v17 < *(_QWORD *)v12)
        {
          do
          {
            *(_QWORD *)v12 = v18;
            v12 = v17;
            if (!v16)
              break;
            v16 = (v16 - 1) >> 1;
            v17 = &v2[8 * v16];
            v18 = *(_QWORD *)v17;
          }
          while (*(_QWORD *)v17 < v19);
          *(_QWORD *)v12 = v19;
        }
      }
    }
    v20 = v3 - 8;
    if (v2 != v3 - 8)
      goto LABEL_19;
    goto LABEL_40;
  }
  return v2 != v3;
}

void sub_223FC8ED4(uint64_t a1, __n128 *a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int64_t v9;
  __n128 *v10;
  int64_t v11;
  __n128 *v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  unint64_t v32;
  int64_t v33;
  __n128 **v34;
  __n128 *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __n128 *v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  int64_t v47;
  __n128 *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  __n128 *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  unint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  _BYTE *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  __int128 v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __n128 **v93;
  uint64_t v94;
  int64_t v95;
  __n128 *v96;
  unsigned __int32 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  __n128 *v102;
  _QWORD *v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __n128 *v108;
  int64_t v109;
  unint64_t v110;
  uint64_t v111;
  double v112;
  unsigned __int32 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  __n128 *v123;
  __n128 *v124;
  _QWORD *n128_u64;
  __n128 *v126;
  _QWORD *v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  __n128 *v132;
  _QWORD *v133;
  _QWORD *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  __n128 *v145;
  __n128 *v146;
  _QWORD *v147;
  _BYTE *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  __int128 v154;
  int v155;
  __n128 **v156;
  int64_t v157;
  int64_t v158;
  __n128 **v159;
  __n128 *v160;
  __n128 **v161;
  __n128 *v162;
  __n128 v163;
  unint64_t v164;

  v4 = (_QWORD *)a2[7].n128_u64[0];
  v5 = a2[3].n128_i32[0];
  v6 = v4[1];
  v155 = *(unsigned __int8 *)(a2[7].n128_u64[1] + 12);
  if (*(_BYTE *)(a2[7].n128_u64[1] + 12))
  {
    if (v5 <= 0)
    {
      do
      {
        v7 = v4;
        v4 = (_QWORD *)v4[3];
      }
      while (v4[1] == v6 && (v7[4] & 6) == 0);
    }
    else
    {
      do
      {
        v7 = v4;
        v4 = (_QWORD *)v4[2];
      }
      while (v4[1] == v6 && (v7[4] & 6) == 0);
    }
  }
  else if (v5 <= 0)
  {
    do
    {
      v7 = v4;
      v4 = (_QWORD *)v4[3];
    }
    while (v4[1] == v6);
  }
  else
  {
    do
    {
      v7 = v4;
      v4 = (_QWORD *)v4[2];
    }
    while (v4[1] == v6);
  }
  if ((v7[4] & 4) != 0)
    v8 = v7;
  else
    v8 = 0;
  v10 = a2 + 1;
  v9 = a2[1].n128_i64[0];
  v11 = a2[2].n128_i64[0];
  if (a2->n128_u64[0] == v9)
  {
    v12 = a2;
    do
    {
      v12 = (__n128 *)v12[5].n128_u64[0];
      v13 = v12 != 0;
    }
    while (v12 && (_QWORD *)v12[7].n128_u64[0] != v8);
    v157 = a2[2].n128_i64[0];
    v158 = v157;
    v14 = a2[4].n128_u64[0];
    v162 = a2 + 1;
    if (!v14)
      goto LABEL_59;
  }
  else
  {
    v13 = v11 < v9;
    if (v11 >= v9)
      v15 = a2[1].n128_u64[0];
    else
      v15 = a2[2].n128_u64[0];
    if (v11 > v9)
      v9 = a2[2].n128_i64[0];
    v157 = v9;
    v158 = v15;
    v14 = a2[4].n128_u64[0];
    v162 = a2 + 1;
    if (!v14)
      goto LABEL_59;
  }
  v16 = a2->n128_u64[1];
  v17 = *(_QWORD **)(v14 + 32);
  v18 = (_QWORD *)v17[2];
  if (*(__n128 **)(v14 + 16) == a2)
  {
    if (v11 == *v17 && v16 == v17[1])
    {
      v19 = *(_QWORD **)(v14 + 32);
      v10 = v162;
      if (*(_BYTE *)(v17[4] + 120))
        goto LABEL_59;
      goto LABEL_41;
    }
LABEL_37:
    v160 = *(__n128 **)(v14 + 16);
    v20 = (_QWORD *)operator new();
    v19 = v20;
    *v20 = v11;
    v20[1] = v16;
    v20[4] = v14;
    v20[5] = 0;
    v18[3] = v20;
    v20[2] = v18;
    v20[3] = v17;
    v17[2] = v20;
    if (v160 == a2)
    {
      *(_QWORD *)(v14 + 32) = v20;
      v10 = v162;
      if (!*(_BYTE *)(v20[4] + 120))
        goto LABEL_41;
      goto LABEL_59;
    }
    v10 = v162;
    if (*(_BYTE *)(v20[4] + 120))
      goto LABEL_59;
LABEL_41:
    v22 = *(_QWORD **)(a1 + 176);
    v21 = *(_QWORD *)(a1 + 184);
    if ((unint64_t)v22 >= v21)
    {
      v24 = *(_QWORD **)(a1 + 168);
      v25 = 0xAAAAAAAAAAAAAAABLL * (v22 - v24) + 1;
      if (v25 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_319;
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (_QWORD)v24) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_320;
        v28 = (char *)operator new(24 * v27);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[8 * (v22 - v24)];
      v30 = &v28[24 * v27];
      *(_QWORD *)v29 = v19;
      *((_QWORD *)v29 + 1) = 0;
      v29[16] = 1;
      v23 = v29 + 24;
      if (v22 == v24)
      {
        v10 = v162;
        *(_QWORD *)(a1 + 168) = v29;
        *(_QWORD *)(a1 + 176) = v23;
        *(_QWORD *)(a1 + 184) = v30;
        if (!v22)
          goto LABEL_58;
      }
      else
      {
        v10 = v162;
        do
        {
          v31 = *(_OWORD *)(v22 - 3);
          *(v29 - 8) = *((_BYTE *)v22 - 8);
          *(_OWORD *)(v29 - 24) = v31;
          v29 -= 24;
          v22 -= 3;
        }
        while (v22 != v24);
        v22 = *(_QWORD **)(a1 + 168);
        *(_QWORD *)(a1 + 168) = v29;
        *(_QWORD *)(a1 + 176) = v23;
        *(_QWORD *)(a1 + 184) = v30;
        if (!v22)
          goto LABEL_58;
      }
      operator delete(v22);
    }
    else
    {
      *v22 = v19;
      v22[1] = 0;
      *((_BYTE *)v22 + 16) = 1;
      v23 = v22 + 3;
    }
LABEL_58:
    *(_QWORD *)(a1 + 176) = v23;
    goto LABEL_59;
  }
  if (v11 != *v18 || v16 != v18[1])
    goto LABEL_37;
  v19 = (_QWORD *)v17[2];
  v10 = v162;
  if (!*(_BYTE *)(v18[4] + 120))
    goto LABEL_41;
LABEL_59:
  v159 = (__n128 **)&a2[5];
  v161 = (__n128 **)&a2[4].n128_u64[1];
  v156 = (__n128 **)(a1 + 40);
  while (1)
  {
LABEL_66:
    v34 = (__n128 **)&a2[5];
    if (!v13)
      v34 = (__n128 **)&a2[4].n128_u64[1];
    v35 = *v34;
    if (*v34)
    {
      while ((_QWORD *)v35[7].n128_u64[0] != v8)
      {
        v46 = a2[7].n128_u64[0];
        if (v8 == (_QWORD *)v46 && (v8[4] & 3) == 0)
        {
          v47 = v35[2].n128_i64[0];
LABEL_104:
          v48 = v35 + 2;
          v55 = a2->n128_i64[1];
          v163.n128_u64[0] = v47;
          v163.n128_u64[1] = v55;
          if (!v13)
            goto LABEL_127;
          goto LABEL_105;
        }
        v48 = v35 + 2;
        v47 = v35[2].n128_i64[0];
        if (v13)
        {
          if (v47 > v157)
            goto LABEL_69;
        }
        else if (v47 < v158)
        {
          goto LABEL_69;
        }
        if (v47 != v10->n128_u64[0])
          goto LABEL_104;
        v49 = v35[1].n128_u64[1];
        v50 = v35->n128_u64[1];
        if (v49 == v50)
          goto LABEL_104;
        v51 = 24;
        if (a2[3].n128_i32[0] > 0)
          v51 = 16;
        v163 = *(__n128 *)*(_QWORD *)(v46 + v51);
        v52 = v35[7].n128_u64[1];
        if (!v13)
        {
          if (!*(_BYTE *)(v52 + 12) || *(_DWORD *)(v52 + 8) == *(_DWORD *)(a2[7].n128_u64[1] + 8) || v35[4].n128_u64[0])
          {
            v61 = v35[1].n128_i64[0];
            if (v49 != v163.n128_u64[1] && v61 != v35->n128_u64[0])
            {
              v61 = v35->n128_u64[0];
              v62 = v163.n128_u64[1] - v50;
              if (v62)
                v61 = v35->n128_u64[0] + (uint64_t)nearbyint(v35[2].n128_f64[1] * (double)v62);
            }
            if (v61 <= v163.n128_i64[0])
              goto LABEL_69;
          }
          else
          {
            v87 = v35[1].n128_i64[0];
            if (v49 != v163.n128_u64[1] && v87 != v35->n128_u64[0])
            {
              v87 = v35->n128_u64[0];
              v88 = v163.n128_u64[1] - v50;
              if (v88)
                v87 = v35->n128_u64[0] + (uint64_t)nearbyint(v35[2].n128_f64[1] * (double)v88);
            }
            if (v87 < v163.n128_i64[0])
              goto LABEL_69;
          }
          v55 = a2->n128_i64[1];
          v163.n128_u64[0] = v47;
          v163.n128_u64[1] = v55;
LABEL_127:
          sub_223FC6A28(a1, (uint64_t)v35, (uint64_t)a2, &v163);
          v63 = (__n128 *)a2[5].n128_u64[0];
          if (v63)
            v63[4].n128_u64[1] = (unint64_t)v35;
          v64 = v35[4].n128_u64[1];
          if (v64)
            *(_QWORD *)(v64 + 80) = a2;
          a2[4].n128_u64[1] = v64;
          a2[5].n128_u64[0] = (unint64_t)v35;
          v35[4].n128_u64[1] = (unint64_t)a2;
          v35[5].n128_u64[0] = (unint64_t)v63;
          if (a2[4].n128_u64[1])
          {
            if (*(_BYTE *)(v35[7].n128_u64[1] + 12))
              goto LABEL_138;
          }
          else
          {
            *v156 = a2;
            if (*(_BYTE *)(v35[7].n128_u64[1] + 12))
              goto LABEL_138;
          }
          if (!v63
            || (v65 = (unint64_t *)v35[4].n128_u64[0]) == 0
            || *(_BYTE *)(v63[7].n128_u64[1] + 12)
            || (v81 = (unint64_t *)v63[4].n128_u64[0]) == 0
            || ((v82 = v35[1].n128_u64[1], v55 < (uint64_t)(v82 + 2)) || v55 < (int64_t)(v63[1].n128_u64[1] + 2))
            && ((int64_t)v35->n128_u64[1] > v55 || (int64_t)v63->n128_u64[1] > v55)
            || v48->n128_u64[0] != v63[2].n128_u64[0]
            || (double)(v47 - v35[1].n128_u64[0]) * (double)(v63[1].n128_u64[1] - v55)
             - (double)(uint64_t)(v55 - v82) * (double)(v63[1].n128_u64[0] - v47) != 0.0)
          {
LABEL_138:
            v10 = v162;
            a2[2].n128_u64[0] = v48->n128_u64[0];
            v35 = *v161;
            v60 = a2[4].n128_u64[0];
            if (!v60)
              goto LABEL_81;
            goto LABEL_139;
          }
          v83 = *v65;
          v84 = *v81;
          if (v83 == v84)
          {
            sub_223FC75B8(a1, (uint64_t)v35, (uint64_t)v63, &v163);
          }
          else
          {
            if (v83 >= v84)
            {
              v91 = (uint64_t)v63;
              v92 = (uint64_t)v35;
            }
            else
            {
              v91 = (uint64_t)v35;
              v92 = (uint64_t)v63;
            }
            sub_223FC79EC(v91, v92);
          }
          v58 = (uint64_t)v35;
          v35 = v63;
          v93 = (__n128 **)&a2[4].n128_u64[1];
          v10 = v162;
          goto LABEL_198;
        }
        if (!*(_BYTE *)(v52 + 12) || *(_DWORD *)(v52 + 8) == *(_DWORD *)(a2[7].n128_u64[1] + 8) || v35[4].n128_u64[0])
        {
          v53 = v35[1].n128_i64[0];
          if (v49 != v163.n128_u64[1] && v53 != v35->n128_u64[0])
          {
            v53 = v35->n128_u64[0];
            v54 = v163.n128_u64[1] - v50;
            if (v54)
              v53 = v35->n128_u64[0] + (uint64_t)nearbyint(v35[2].n128_f64[1] * (double)v54);
          }
          if (v53 >= v163.n128_i64[0])
            goto LABEL_69;
        }
        else
        {
          v85 = v35[1].n128_i64[0];
          if (v49 != v163.n128_u64[1] && v85 != v35->n128_u64[0])
          {
            v85 = v35->n128_u64[0];
            v86 = v163.n128_u64[1] - v50;
            if (v86)
              v85 = v35->n128_u64[0] + (uint64_t)nearbyint(v35[2].n128_f64[1] * (double)v86);
          }
          if (v85 > v163.n128_i64[0])
            goto LABEL_69;
        }
        v55 = a2->n128_i64[1];
        v163.n128_u64[0] = v47;
        v163.n128_u64[1] = v55;
LABEL_105:
        sub_223FC6A28(a1, (uint64_t)a2, (uint64_t)v35, &v163);
        v56 = v35[5].n128_u64[0];
        if (v56)
          *(_QWORD *)(v56 + 72) = a2;
        v57 = *v161;
        if (*v161)
          v57[5].n128_u64[0] = (unint64_t)v35;
        v35[4].n128_u64[1] = (unint64_t)v57;
        v35[5].n128_u64[0] = (unint64_t)a2;
        a2[4].n128_u64[1] = (unint64_t)v35;
        a2[5].n128_u64[0] = v56;
        v58 = v35[4].n128_i64[1];
        if (v58)
        {
          if (*(_BYTE *)(v35[7].n128_u64[1] + 12))
            goto LABEL_116;
        }
        else
        {
          *v156 = v35;
          if (*(_BYTE *)(v35[7].n128_u64[1] + 12))
            goto LABEL_116;
        }
        if (!v58
          || (v59 = (unint64_t *)v35[4].n128_u64[0]) == 0
          || *(_BYTE *)(*(_QWORD *)(v58 + 120) + 12)
          || (v77 = *(unint64_t **)(v58 + 64)) == 0
          || ((v78 = v35[1].n128_u64[1], v55 < (uint64_t)(v78 + 2)) || v55 < *(_QWORD *)(v58 + 24) + 2)
          && ((int64_t)v35->n128_u64[1] > v55 || *(_QWORD *)(v58 + 8) > v55)
          || v48->n128_u64[0] != *(_QWORD *)(v58 + 32)
          || (double)(v47 - v35[1].n128_u64[0]) * (double)(*(_QWORD *)(v58 + 24) - v55)
           - (double)(uint64_t)(v55 - v78) * (double)(*(_QWORD *)(v58 + 16) - v47) != 0.0)
        {
LABEL_116:
          a2[2].n128_u64[0] = v48->n128_u64[0];
          v35 = *v159;
          v60 = a2[4].n128_u64[0];
          if (!v60)
            goto LABEL_81;
          goto LABEL_139;
        }
        v79 = *v59;
        v80 = *v77;
        if (v79 == v80)
        {
          sub_223FC75B8(a1, v58, (uint64_t)v35, &v163);
        }
        else
        {
          if (v79 >= v80)
          {
            v89 = v58;
            v90 = (uint64_t)v35;
          }
          else
          {
            v89 = (uint64_t)v35;
            v90 = v58;
          }
          sub_223FC79EC(v89, v90);
        }
        v93 = (__n128 **)&a2[5];
LABEL_198:
        *(_DWORD *)(v58 + 132) = 2;
        v35[8].n128_u32[1] = 1;
        a2[2].n128_u64[0] = v48->n128_u64[0];
        v35 = *v93;
        v60 = a2[4].n128_u64[0];
        if (!v60)
          goto LABEL_81;
LABEL_139:
        v66 = *(_QWORD *)(v60 + 32);
        if (*(__n128 **)(v60 + 16) != a2)
          v66 = *(_QWORD *)(v66 + 16);
        if (!*(_BYTE *)(*(_QWORD *)(v66 + 32) + 120))
        {
          v68 = *(char **)(a1 + 176);
          v67 = *(_QWORD *)(a1 + 184);
          if ((unint64_t)v68 < v67)
          {
            *(_QWORD *)v68 = v66;
            *((_QWORD *)v68 + 1) = 0;
            v45 = v68 + 24;
            v68[16] = 1;
          }
          else
          {
            v69 = *(_BYTE **)(a1 + 168);
            v70 = 0xAAAAAAAAAAAAAAABLL * ((v68 - v69) >> 3) + 1;
            if (v70 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_319;
            v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - (_QWORD)v69) >> 3);
            if (2 * v71 > v70)
              v70 = 2 * v71;
            if (v71 >= 0x555555555555555)
              v72 = 0xAAAAAAAAAAAAAAALL;
            else
              v72 = v70;
            if (v72)
            {
              if (v72 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_320;
              v73 = (char *)operator new(24 * v72);
            }
            else
            {
              v73 = 0;
            }
            v74 = &v73[8 * ((v68 - v69) >> 3)];
            *(_QWORD *)v74 = v66;
            *((_QWORD *)v74 + 1) = 0;
            v74[16] = 1;
            v75 = v74;
            if (v68 != v69)
            {
              do
              {
                v76 = *(_OWORD *)(v68 - 24);
                *(v75 - 8) = *(v68 - 8);
                *(_OWORD *)(v75 - 24) = v76;
                v75 -= 24;
                v68 -= 24;
              }
              while (v68 != v69);
              v68 = *(char **)(a1 + 168);
            }
            v45 = v74 + 24;
            *(_QWORD *)(a1 + 168) = v75;
            *(_QWORD *)(a1 + 176) = v74 + 24;
            *(_QWORD *)(a1 + 184) = &v73[24 * v72];
            v10 = v162;
            if (v68)
              operator delete(v68);
          }
          *(_QWORD *)(a1 + 176) = v45;
        }
LABEL_81:
        if (!v35)
          goto LABEL_69;
      }
      if (a2[4].n128_u64[0])
      {
        v97 = v35[8].n128_u32[1];
        if (v97)
        {
          v35[8].n128_u32[1] = 0;
          if (v97 == 2)
          {
            v98 = v35[5].n128_i64[0];
            *(_DWORD *)(v98 + 132) = 0;
            v99 = a1;
            v100 = (uint64_t)v35;
          }
          else
          {
            v100 = v35[4].n128_i64[1];
            *(_DWORD *)(v100 + 132) = 0;
            v99 = a1;
            v98 = (uint64_t)v35;
          }
          sub_223FC6750(v99, v100, v98, v35 + 1, 1);
        }
        if (a2[4].n128_u64[0])
        {
          while ((_QWORD *)a2[7].n128_u64[0] != v8)
          {
            v101 = a2[4].n128_u64[0];
            v102 = *(__n128 **)(v101 + 16);
            v103 = *(_QWORD **)(v101 + 32);
            v104 = (_QWORD *)v103[2];
            v105 = a2[1].n128_u64[0];
            if (v102 == a2)
            {
              if (v105 == *v103 && a2[1].n128_u64[1] == v103[1])
                goto LABEL_229;
            }
            else if (v105 == *v104 && a2[1].n128_u64[1] == v104[1])
            {
              goto LABEL_229;
            }
            v106 = operator new();
            *(__n128 *)v106 = *v162;
            *(_QWORD *)(v106 + 32) = v101;
            *(_QWORD *)(v106 + 40) = 0;
            v104[3] = v106;
            *(_QWORD *)(v106 + 16) = v104;
            *(_QWORD *)(v106 + 24) = v103;
            v103[2] = v106;
            if (v102 == a2)
              *(_QWORD *)(v101 + 32) = v106;
LABEL_229:
            v10 = v162;
            *a2 = *v162;
            v107 = 24;
            if (a2[3].n128_i32[0] > 0)
              v107 = 16;
            v108 = *(__n128 **)(a2[7].n128_u64[0] + v107);
            a2[7].n128_u64[0] = (unint64_t)v108;
            if (v162 != v108)
              *v162 = *v108;
            v109 = a2->n128_u64[0];
            v110 = a2->n128_u64[1];
            a2[2].n128_u64[0] = a2->n128_u64[0];
            v111 = a2[1].n128_u64[1] - v110;
            if (!v111)
            {
              v112 = 1.79769313e308;
              if ((int64_t)v162->n128_u64[0] > v109)
                v112 = -1.79769313e308;
              a2[2].n128_f64[1] = v112;
              v113 = a2[8].n128_u32[1];
              if (!v113)
                goto LABEL_243;
LABEL_239:
              a2[8].n128_u32[1] = 0;
              if (v113 == 2)
              {
                v114 = a2[5].n128_i64[0];
                *(_DWORD *)(v114 + 132) = 0;
                v115 = a1;
                v116 = (uint64_t)a2;
              }
              else
              {
                v116 = a2[4].n128_i64[1];
                *(_DWORD *)(v116 + 132) = 0;
                v115 = a1;
                v114 = (uint64_t)a2;
              }
              sub_223FC6750(v115, v116, v114, a2, 1);
              goto LABEL_243;
            }
            a2[2].n128_f64[1] = (double)(v162->n128_u64[0] - v109) / (double)v111;
            v113 = a2[8].n128_u32[1];
            if (v113)
              goto LABEL_239;
LABEL_243:
            if (a2[1].n128_u64[1] == a2->n128_u64[1])
            {
              if (!*(_BYTE *)(a2[7].n128_u64[1] + 12))
                sub_223FCEB28((uint64_t *)a2, *(unsigned __int8 *)(a1 + 216));
            }
            else
            {
              v164 = a2[1].n128_u64[1];
              sub_223FCCF18(a1 + 112, &v164);
              sub_223FC688C(a1, a2, a2, 0);
              sub_223FC71D0(a1, (uint64_t)a2, a2, 1);
            }
          }
          if (v13)
          {
            v117 = (uint64_t)a2;
            v118 = (uint64_t)v35;
          }
          else
          {
            v117 = (uint64_t)v35;
            v118 = (uint64_t)a2;
          }
          sub_223FC75B8(a1, v117, v118, v10);
        }
      }
      v119 = v35[4].n128_u64[1];
      v120 = v35[5].n128_u64[0];
      if (*(_OWORD *)((char *)&v35[4] + 8) == 0)
      {
        v122 = (_QWORD *)(a1 + 40);
        if (*v156 != v35)
        {
          v123 = *v161;
          v124 = *v159;
          if (!((unint64_t)*v161 | (unint64_t)*v159))
          {
LABEL_263:
            if ((__n128 *)*v122 != a2)
              return;
            *v122 = 0;
            goto LABEL_265;
          }
LABEL_257:
          n128_u64 = v123[5].n128_u64;
          if (!v123)
            n128_u64 = v122;
          *n128_u64 = v124;
          if (v124)
            v124[4].n128_u64[1] = (unint64_t)v123;
LABEL_265:
          MEMORY[0x227684CE8](a2, 0x1020C40C533E67ELL);
          return;
        }
        *v156 = 0;
      }
      else
      {
        v121 = (_QWORD *)(v119 + 80);
        v122 = (_QWORD *)(a1 + 40);
        if (!v119)
          v121 = v156;
        *v121 = v120;
        if (v120)
          *(_QWORD *)(v120 + 72) = v119;
      }
      MEMORY[0x227684CE8](v35, 0x1020C40C533E67ELL);
      v123 = *v161;
      v124 = *v159;
      if (!((unint64_t)*v161 | (unint64_t)*v159))
        goto LABEL_263;
      goto LABEL_257;
    }
LABEL_69:
    v36 = a2[7].n128_u64[0];
    if (v155)
    {
      if ((*(_BYTE *)(v36 + 32) & 3) != 0)
        break;
    }
    v37 = 24;
    if (a2[3].n128_i32[0] > 0)
      v37 = 16;
    v38 = *(_QWORD *)(*(_QWORD *)(v36 + v37) + 8);
    v39 = a2[1].n128_u64[1];
    v40 = a2[4].n128_u64[0];
    if (v38 != v39)
    {
      if (!v40)
        goto LABEL_318;
      v126 = *(__n128 **)(v40 + 16);
      v127 = *(_QWORD **)(v40 + 32);
      v128 = (_QWORD *)v127[2];
      v129 = a2[1].n128_u64[0];
      if (v126 == a2)
      {
        if (v129 == *v127 && v39 == v127[1])
        {
          v130 = *(_QWORD *)(v40 + 32);
          goto LABEL_283;
        }
      }
      else if (v129 == *v128 && v39 == v128[1])
      {
        v130 = v127[2];
        goto LABEL_283;
      }
      v138 = operator new();
      v130 = v138;
      *(__n128 *)v138 = *v162;
      *(_QWORD *)(v138 + 32) = v40;
      *(_QWORD *)(v138 + 40) = 0;
      v128[3] = v138;
      *(_QWORD *)(v138 + 16) = v128;
      *(_QWORD *)(v138 + 24) = v127;
      v127[2] = v138;
      if (v126 == a2)
        *(_QWORD *)(v40 + 32) = v138;
LABEL_283:
      if (!*(_BYTE *)(*(_QWORD *)(v130 + 32) + 120))
      {
        v140 = *(char **)(a1 + 176);
        v139 = *(_QWORD *)(a1 + 184);
        if ((unint64_t)v140 < v139)
        {
          *(_QWORD *)v140 = v130;
          *((_QWORD *)v140 + 1) = 0;
          v140[16] = 1;
          v141 = v140 + 24;
LABEL_317:
          *(_QWORD *)(a1 + 176) = v141;
          goto LABEL_318;
        }
        v148 = *(_BYTE **)(a1 + 168);
        v149 = 0xAAAAAAAAAAAAAAABLL * ((v140 - v148) >> 3) + 1;
        if (v149 <= 0xAAAAAAAAAAAAAAALL)
        {
          v150 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v139 - (_QWORD)v148) >> 3);
          if (2 * v150 > v149)
            v149 = 2 * v150;
          if (v150 >= 0x555555555555555)
            v151 = 0xAAAAAAAAAAAAAAALL;
          else
            v151 = v149;
          if (!v151)
          {
            v152 = 0;
            goto LABEL_312;
          }
          if (v151 <= 0xAAAAAAAAAAAAAAALL)
          {
            v152 = (char *)operator new(24 * v151);
LABEL_312:
            v153 = &v152[8 * ((v140 - v148) >> 3)];
            *(_QWORD *)v153 = v130;
            *((_QWORD *)v153 + 1) = 0;
            v153[16] = 1;
            v141 = v153 + 24;
            if (v140 != v148)
            {
              do
              {
                v154 = *(_OWORD *)(v140 - 24);
                *(v153 - 8) = *(v140 - 8);
                *(_OWORD *)(v153 - 24) = v154;
                v153 -= 24;
                v140 -= 24;
              }
              while (v140 != v148);
              v140 = *(char **)(a1 + 168);
            }
            *(_QWORD *)(a1 + 168) = v153;
            *(_QWORD *)(a1 + 176) = v141;
            *(_QWORD *)(a1 + 184) = &v152[24 * v151];
            if (v140)
              operator delete(v140);
            goto LABEL_317;
          }
LABEL_320:
          sub_223174E94();
        }
LABEL_319:
        sub_223FCCF04();
      }
LABEL_318:
      sub_223FCB89C(a1, (uint64_t)a2);
      return;
    }
    if (v40)
    {
      v41 = *(__n128 **)(v40 + 16);
      v42 = *(_QWORD **)(v40 + 32);
      v43 = (_QWORD *)v42[2];
      v44 = a2[1].n128_u64[0];
      if (v41 == a2)
      {
        if (v44 != *v42 || v38 != v42[1])
        {
LABEL_202:
          v94 = operator new();
          *(__n128 *)v94 = *v162;
          *(_QWORD *)(v94 + 32) = v40;
          *(_QWORD *)(v94 + 40) = 0;
          v43[3] = v94;
          *(_QWORD *)(v94 + 16) = v43;
          *(_QWORD *)(v94 + 24) = v42;
          v42[2] = v94;
          if (v41 == a2)
            *(_QWORD *)(v40 + 32) = v94;
        }
      }
      else if (v44 != *v43 || v38 != v43[1])
      {
        goto LABEL_202;
      }
    }
    sub_223FCB89C(a1, (uint64_t)a2);
    v33 = a2[1].n128_i64[0];
    v95 = a2[2].n128_i64[0];
    if (a2->n128_u64[0] == v33)
    {
      v96 = a2;
      v10 = v162;
      v158 = a2[2].n128_i64[0];
      while (1)
      {
        v96 = (__n128 *)v96[5].n128_u64[0];
        v13 = v96 != 0;
        if (!v96)
          break;
        if ((_QWORD *)v96[7].n128_u64[0] == v8)
        {
          v157 = a2[2].n128_i64[0];
          goto LABEL_66;
        }
      }
      v157 = a2[2].n128_i64[0];
    }
    else
    {
      v13 = v95 < v33;
      if (v95 <= v33)
        v32 = a2[1].n128_u64[0];
      else
        v32 = a2[2].n128_u64[0];
      if (v95 < v33)
        v33 = a2[2].n128_i64[0];
      v157 = v32;
      v158 = v33;
      v10 = v162;
    }
  }
  v131 = a2[4].n128_u64[0];
  if (v131)
  {
    v132 = *(__n128 **)(v131 + 16);
    v133 = *(_QWORD **)(v131 + 32);
    v134 = (_QWORD *)v133[2];
    v135 = a2[1].n128_u64[0];
    if (v132 == a2)
    {
      if (v135 != *v133)
        goto LABEL_289;
      v136 = a2[1].n128_u64[1];
      v137 = v133[1];
    }
    else
    {
      if (v135 != *v134)
        goto LABEL_289;
      v136 = a2[1].n128_u64[1];
      v137 = v134[1];
    }
    if (v136 == v137)
    {
LABEL_291:
      v143 = a2[4].n128_u64[0];
      v144 = 24;
      if (*(__n128 **)(v143 + 16) == a2)
        v144 = 16;
      *(_QWORD *)(v143 + v144) = 0;
      a2[4].n128_u64[0] = 0;
      goto LABEL_294;
    }
LABEL_289:
    v142 = operator new();
    *(__n128 *)v142 = *v10;
    *(_QWORD *)(v142 + 32) = v131;
    *(_QWORD *)(v142 + 40) = 0;
    v134[3] = v142;
    *(_QWORD *)(v142 + 16) = v134;
    *(_QWORD *)(v142 + 24) = v133;
    v133[2] = v142;
    if (v132 == a2)
      *(_QWORD *)(v131 + 32) = v142;
    goto LABEL_291;
  }
LABEL_294:
  v145 = *v161;
  v146 = *v159;
  if ((unint64_t)*v161 | (unint64_t)*v159)
  {
    v147 = v145[5].n128_u64;
    if (!v145)
      v147 = v156;
    *v147 = v146;
    if (v146)
      v146[4].n128_u64[1] = (unint64_t)v145;
LABEL_321:
    JUMPOUT(0x227684CE8);
  }
  if (*v156 == a2)
  {
    *v156 = 0;
    goto LABEL_321;
  }
}

void sub_223FCA02C(_QWORD *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  const std::nothrow_t *v18;
  unint64_t v19;
  void *v20;
  BOOL v21;
  void *v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t **i;
  uint64_t **v26;
  uint64_t **v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t **v64;

  v2 = (char *)a1[21];
  v1 = (char *)a1[22];
  if (v2 != v1)
  {
    v4 = 0;
    v5 = a1[21];
    do
    {
      while (1)
      {
        v6 = *(_QWORD **)v5;
        v7 = *(_QWORD *)v5 + 32;
        do
        {
          v8 = *(_QWORD *)v7;
          v9 = *(_QWORD **)(*(_QWORD *)v7 + 32);
          v7 = *(_QWORD *)v7 + 8;
        }
        while (!v9);
        v10 = *(_QWORD *)(v8 + 16);
        v11 = v6[1];
        v12 = *(_QWORD **)v5;
        if (v10)
        {
          v13 = *(_QWORD **)v5;
          do
          {
            if (v13 == (_QWORD *)v9[2])
            {
              v14 = (_QWORD *)v9[2];
              break;
            }
            v14 = v13;
            v13 = (_QWORD *)v13[3];
          }
          while (v13[1] == v11);
          while (v6 != v9)
          {
            v15 = v6;
            v6 = (_QWORD *)v6[2];
            if (v6[1] != v11)
            {
              v9 = v15;
              break;
            }
          }
        }
        else
        {
          do
          {
            v14 = v12;
            v12 = (_QWORD *)v12[3];
          }
          while (v12 != v6 && v12[1] == v11);
          do
          {
            v9 = v6;
            v6 = (_QWORD *)v6[2];
          }
          while (v6 != v14 && v6[1] == v11);
        }
        if (*v14 != *v9)
        {
          v16 = *v14 < *v9;
          if (*v14 >= *v9)
            v17 = v9;
          else
            v17 = v14;
          if (*v14 >= *v9)
            v9 = v14;
          *(_QWORD *)v5 = v17;
          *(_QWORD *)(v5 + 8) = v9;
          *(_BYTE *)(v5 + 16) = v16;
          if (!v17[5])
            break;
        }
        *(_QWORD *)(v5 + 8) = 0;
        v5 += 24;
        if ((char *)v5 == v1)
          goto LABEL_28;
      }
      v17[5] = v5;
      ++v4;
      v5 += 24;
    }
    while ((char *)v5 != v1);
LABEL_28:
    if (v4 >= 2)
    {
      if (v1 - v2 < 3073)
      {
LABEL_34:
        sub_223FCFD50(v2, v1, 0xAAAAAAAAAAAAAAABLL * ((v1 - v2) >> 3), 0, 0);
      }
      else
      {
        v18 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
        v19 = 0xAAAAAAAAAAAAAAABLL * ((v1 - v2) >> 3);
        while (1)
        {
          v20 = operator new(24 * v19, v18);
          if (v20)
            break;
          v21 = v19 > 1;
          v19 >>= 1;
          if (!v21)
            goto LABEL_34;
        }
        v22 = v20;
        sub_223FCFD50(v2, v1, 0xAAAAAAAAAAAAAAABLL * ((v1 - v2) >> 3), (uint64_t)v20, v19);
        operator delete(v22);
      }
      v23 = (uint64_t **)a1[21];
      v24 = &v23[3 * v4];
      for (i = v24 - 3; ; i = v24 - 3)
      {
        if (v23 == i)
          return;
        v26 = v23;
        v23 += 3;
        if (v23 != v24)
          break;
LABEL_37:
        ;
      }
      v27 = v23;
      v64 = v23;
      while (1)
      {
        v29 = *v27;
        v30 = **v27;
        if (v30 >= *v26[1])
          goto LABEL_43;
        if (*((unsigned __int8 *)v27 + 16) == *((unsigned __int8 *)v26 + 16))
          goto LABEL_43;
        v31 = *v26;
        if (*v27[1] <= **v26)
          goto LABEL_43;
        v32 = v31[1];
        if (*((_BYTE *)v26 + 16))
        {
          v33 = (uint64_t *)v31[2];
          if (v33[1] == v32 && *v33 <= v30)
          {
            do
            {
              v31 = v33;
              *v26 = v33;
              v33 = (uint64_t *)v33[2];
              v29 = *v27;
            }
            while (v33[1] == v32 && *v33 <= *v29);
          }
          v34 = (uint64_t *)v29[3];
          if (v34[1] == v32)
          {
            while (1)
            {
              v31 = *v26;
              if (*v34 > **v26)
                break;
              *v27 = v34;
              v34 = (uint64_t *)v34[3];
              if (v34[1] != v32)
              {
                v31 = *v26;
                break;
              }
            }
          }
          v35 = operator new();
          v36 = v31[4];
          *(_OWORD *)v35 = *(_OWORD *)v31;
          *(_QWORD *)(v35 + 32) = v36;
          *(_QWORD *)(v35 + 40) = 0;
          v37 = v31[2];
          *(_QWORD *)(v37 + 24) = v35;
          v31[2] = v35;
          *(_QWORD *)(v35 + 16) = v37;
          *(_QWORD *)(v35 + 24) = v31;
          v38 = *v27;
          v39 = operator new();
          v40 = v38[4];
          *(_OWORD *)v39 = *(_OWORD *)v38;
          *(_QWORD *)(v39 + 32) = v40;
          *(_QWORD *)(v39 + 40) = 0;
          v41 = v38[3];
          *(_QWORD *)(v41 + 16) = v39;
          v38[3] = v39;
          *(_QWORD *)(v39 + 16) = v38;
          *(_QWORD *)(v39 + 24) = v41;
          v43 = (uint64_t *)a1[25];
          v42 = a1[26];
          if ((unint64_t)v43 >= v42)
          {
            v44 = (uint64_t *)a1[24];
            v45 = ((char *)v43 - (char *)v44) >> 4;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 60)
              goto LABEL_95;
            v47 = v42 - (_QWORD)v44;
            if (v47 >> 3 > v46)
              v46 = v47 >> 3;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
              v48 = 0xFFFFFFFFFFFFFFFLL;
            else
              v48 = v46;
            if (v48)
            {
              if (v48 >> 60)
                goto LABEL_96;
              v49 = (char *)operator new(16 * v48);
              v50 = (uint64_t *)&v49[16 * v45];
              *v50 = v35;
              v50[1] = v39;
              v51 = (uint64_t)v50;
              if (v43 == v44)
                goto LABEL_92;
            }
            else
            {
              v49 = 0;
              v50 = (uint64_t *)(16 * v45);
              *v50 = v35;
              v50[1] = v39;
              v51 = 16 * v45;
              if (v43 == v44)
                goto LABEL_92;
            }
            do
            {
              *(_OWORD *)(v51 - 16) = *((_OWORD *)v43 - 1);
              v51 -= 16;
              v43 -= 2;
            }
            while (v43 != v44);
            goto LABEL_91;
          }
        }
        else
        {
          v52 = (uint64_t *)v31[3];
          if (v52[1] == v32)
          {
            while (1)
            {
              v29 = *v27;
              if (*v52 > **v27)
                break;
              v31 = v52;
              *v26 = v52;
              v52 = (uint64_t *)v52[3];
              if (v52[1] != v32)
              {
                v29 = *v27;
                break;
              }
            }
          }
          v53 = (uint64_t *)v29[2];
          if (v53[1] == v32 && *v53 <= *v31)
          {
            do
            {
              v29 = v53;
              *v27 = v53;
              v53 = (uint64_t *)v53[2];
            }
            while (v53[1] == v32 && *v53 <= **v26);
          }
          v35 = operator new();
          v54 = v29[4];
          *(_OWORD *)v35 = *(_OWORD *)v29;
          *(_QWORD *)(v35 + 32) = v54;
          *(_QWORD *)(v35 + 40) = 0;
          v55 = v29[2];
          *(_QWORD *)(v55 + 24) = v35;
          v29[2] = v35;
          *(_QWORD *)(v35 + 16) = v55;
          *(_QWORD *)(v35 + 24) = v29;
          v56 = *v26;
          v39 = operator new();
          v57 = v56[4];
          *(_OWORD *)v39 = *(_OWORD *)v56;
          *(_QWORD *)(v39 + 32) = v57;
          *(_QWORD *)(v39 + 40) = 0;
          v58 = v56[3];
          *(_QWORD *)(v58 + 16) = v39;
          v56[3] = v39;
          *(_QWORD *)(v39 + 16) = v56;
          *(_QWORD *)(v39 + 24) = v58;
          v43 = (uint64_t *)a1[25];
          v59 = a1[26];
          if ((unint64_t)v43 >= v59)
          {
            v60 = (uint64_t *)a1[24];
            v61 = ((char *)v43 - (char *)v60) >> 4;
            v62 = v61 + 1;
            if ((unint64_t)(v61 + 1) >> 60)
LABEL_95:
              sub_223FCCF04();
            v63 = v59 - (_QWORD)v60;
            if (v63 >> 3 > v62)
              v62 = v63 >> 3;
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
              v48 = 0xFFFFFFFFFFFFFFFLL;
            else
              v48 = v62;
            if (v48)
            {
              if (v48 >> 60)
LABEL_96:
                sub_223174E94();
              v49 = (char *)operator new(16 * v48);
              v50 = (uint64_t *)&v49[16 * v61];
              *v50 = v35;
              v50[1] = v39;
              v51 = (uint64_t)v50;
              if (v43 == v60)
                goto LABEL_92;
              do
              {
LABEL_90:
                *(_OWORD *)(v51 - 16) = *((_OWORD *)v43 - 1);
                v51 -= 16;
                v43 -= 2;
              }
              while (v43 != v60);
LABEL_91:
              v43 = (uint64_t *)a1[24];
            }
            else
            {
              v49 = 0;
              v50 = (uint64_t *)(16 * v61);
              *v50 = v35;
              v50[1] = v39;
              v51 = 16 * v61;
              if (v43 != v60)
                goto LABEL_90;
            }
LABEL_92:
            v28 = v50 + 2;
            a1[24] = v51;
            a1[25] = v50 + 2;
            a1[26] = &v49[16 * v48];
            if (v43)
              operator delete(v43);
            v23 = v64;
            goto LABEL_42;
          }
        }
        *v43 = v35;
        v43[1] = v39;
        v28 = v43 + 2;
LABEL_42:
        a1[25] = v28;
LABEL_43:
        v27 += 3;
        if (v27 == v24)
          goto LABEL_37;
      }
    }
  }
}

void sub_223FCA640(uint64_t a1, uint64_t a2)
{
  __n128 *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 *v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  __n128 *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  __n128 *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  __n128 *v21;
  unsigned __int32 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned __int32 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  __n128 *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  __n128 *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t *v53;

  v3 = (uint64_t *)(a1 + 40);
  v2 = *(__n128 **)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
  {
    while (1)
    {
      v7 = v2[1].n128_i64[0];
      v8 = v2 + 1;
      if (v2[1].n128_u64[1] != a2)
      {
        if (v7 != v2->n128_u64[0])
        {
          v7 = v2->n128_u64[0];
          v15 = a2 - v2->n128_u64[1];
          if (v15)
            v7 = v2->n128_u64[0] + (uint64_t)nearbyint(v2[2].n128_f64[1] * (double)v15);
        }
        v2[2].n128_u64[0] = v7;
        goto LABEL_4;
      }
      v2[2].n128_u64[0] = v7;
      v9 = v2[7].n128_u64[0];
      v10 = *(_DWORD *)(v9 + 32);
      if ((v10 & 4) == 0)
      {
        v11 = v2[4].n128_u64[0];
        if (!v11)
          goto LABEL_32;
        v12 = *(__n128 **)(v11 + 16);
        v13 = *(_QWORD **)(v11 + 32);
        v14 = (_QWORD *)v13[2];
        if (v12 == v2)
        {
          if (v7 != *v13 || v13[1] != a2)
            goto LABEL_30;
        }
        else
        {
          if (v7 == *v14 && v14[1] == a2)
            goto LABEL_32;
LABEL_30:
          v26 = operator new();
          *(__n128 *)v26 = *v8;
          *(_QWORD *)(v26 + 32) = v11;
          *(_QWORD *)(v26 + 40) = 0;
          v14[3] = v26;
          *(_QWORD *)(v26 + 16) = v14;
          *(_QWORD *)(v26 + 24) = v13;
          v13[2] = v26;
          if (v12 == v2)
            *(_QWORD *)(v11 + 32) = v26;
        }
LABEL_32:
        sub_223FCB89C(a1, (uint64_t)v2);
        if (v2[1].n128_u64[1] == v2->n128_u64[1])
        {
          v2[6].n128_u64[0] = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v2;
        }
LABEL_4:
        v6 = v2[5].n128_i64[0];
        goto LABEL_5;
      }
      v6 = v2[5].n128_i64[0];
      if ((v10 & 3) == 0)
      {
        v20 = v2[4].n128_i64[1];
        v21 = v2;
        do
        {
          v21 = (__n128 *)v21[5].n128_u64[0];
          if (!v21)
            goto LABEL_5;
        }
        while (v21[7].n128_u64[0] != v9);
        v22 = v2[8].n128_u32[1];
        if (v22)
        {
          v2[8].n128_u32[1] = 0;
          if (v22 == 2)
          {
            *(_DWORD *)(v6 + 132) = 0;
            v23 = a1;
            v24 = (uint64_t)v2;
            v25 = v6;
          }
          else
          {
            *(_DWORD *)(v20 + 132) = 0;
            v23 = a1;
            v24 = v20;
            v25 = (uint64_t)v2;
          }
          sub_223FC6750(v23, v24, v25, v2 + 1, 1);
        }
        v33 = v21[8].n128_u32[1];
        if (v33)
        {
          v21[8].n128_u32[1] = 0;
          if (v33 == 2)
          {
            v34 = v21[5].n128_i64[0];
            *(_DWORD *)(v34 + 132) = 0;
            v35 = a1;
            v36 = (uint64_t)v21;
          }
          else
          {
            v36 = v21[4].n128_i64[1];
            *(_DWORD *)(v36 + 132) = 0;
            v35 = a1;
            v34 = (uint64_t)v21;
          }
          sub_223FC6750(v35, v36, v34, v21 + 1, 1);
        }
        if ((__n128 *)v6 != v21)
        {
          do
          {
            sub_223FC6A28(a1, (uint64_t)v2, v6, v2 + 1);
            v41 = *(__n128 **)(v6 + 80);
            if (v41)
              v41[4].n128_u64[1] = (unint64_t)v2;
            v42 = v2[4].n128_u64[1];
            if (v42)
              *(_QWORD *)(v42 + 80) = v6;
            *(_QWORD *)(v6 + 72) = v42;
            *(_QWORD *)(v6 + 80) = v2;
            v2[4].n128_u64[1] = v6;
            v2[5].n128_u64[0] = (unint64_t)v41;
            if (!*(_QWORD *)(v6 + 72))
              *v3 = v6;
            v6 = (uint64_t)v41;
          }
          while (v41 != v21);
        }
        v37 = v2[4].n128_u64[0];
        if (*(_BYTE *)(v2[7].n128_u64[1] + 12))
        {
          if (v37)
            sub_223FC75B8(a1, (uint64_t)v2, (uint64_t)v21, v2 + 1);
          v38 = v21[4].n128_u64[1];
          v39 = v21[5].n128_u64[0];
          if (*(_OWORD *)((char *)&v21[4] + 8) == 0)
          {
            if ((__n128 *)*v3 == v21)
            {
              *v3 = 0;
              goto LABEL_96;
            }
            v46 = v2[4].n128_u64[1];
            v47 = v2[5].n128_u64[0];
            if (*(_OWORD *)((char *)&v2[4] + 8) != 0)
              goto LABEL_84;
LABEL_97:
            if ((__n128 *)*v3 == v2)
            {
              *v3 = 0;
              v49 = v2;
              goto LABEL_104;
            }
          }
          else
          {
            v40 = (_QWORD *)(v38 + 80);
            if (!v38)
              v40 = v3;
            *v40 = v39;
            if (v39)
              *(_QWORD *)(v39 + 72) = v38;
LABEL_96:
            MEMORY[0x227684CE8](v21, 0x1020C40C533E67ELL);
            v46 = v2[4].n128_u64[1];
            v47 = v2[5].n128_u64[0];
            if (*(_OWORD *)((char *)&v2[4] + 8) == 0)
              goto LABEL_97;
LABEL_84:
            v48 = (_QWORD *)(v46 + 80);
            if (!v46)
              v48 = v3;
            *v48 = v47;
            if (v47)
              *(_QWORD *)(v47 + 72) = v46;
            v49 = v2;
LABEL_104:
            MEMORY[0x227684CE8](v49, 0x1020C40C533E67ELL);
          }
LABEL_105:
          v53 = (uint64_t *)(v20 + 80);
          if (!v20)
            v53 = v3;
          v6 = *v53;
          goto LABEL_5;
        }
        if (v37)
          sub_223FC75B8(a1, (uint64_t)v2, (uint64_t)v21, v2 + 1);
        v43 = v2[4].n128_u64[1];
        v44 = v2[5].n128_u64[0];
        if (*(_OWORD *)((char *)&v2[4] + 8) == 0)
        {
          if ((__n128 *)*v3 == v2)
          {
            *v3 = 0;
            goto LABEL_100;
          }
          v50 = v21[4].n128_u64[1];
          v51 = v21[5].n128_u64[0];
          if (*(_OWORD *)((char *)&v21[4] + 8) != 0)
            goto LABEL_91;
LABEL_101:
          if ((__n128 *)*v3 != v21)
            goto LABEL_105;
          *v3 = 0;
        }
        else
        {
          v45 = (_QWORD *)(v43 + 80);
          if (!v43)
            v45 = v3;
          *v45 = v44;
          if (v44)
            *(_QWORD *)(v44 + 72) = v43;
LABEL_100:
          MEMORY[0x227684CE8](v2, 0x1020C40C533E67ELL);
          v50 = v21[4].n128_u64[1];
          v51 = v21[5].n128_u64[0];
          if (*(_OWORD *)((char *)&v21[4] + 8) == 0)
            goto LABEL_101;
LABEL_91:
          v52 = (_QWORD *)(v50 + 80);
          if (!v50)
            v52 = v3;
          *v52 = v51;
          if (v51)
            *(_QWORD *)(v51 + 72) = v50;
        }
        v49 = v21;
        goto LABEL_104;
      }
      v16 = v2[4].n128_u64[0];
      if (!v16)
        break;
      v17 = *(__n128 **)(v16 + 16);
      v18 = *(_QWORD **)(v16 + 32);
      v19 = (_QWORD *)v18[2];
      if (v17 == v2)
      {
        if (v7 == *v18 && v18[1] == a2)
          break;
      }
      else if (v7 == *v19 && v19[1] == a2)
      {
        break;
      }
      v27 = operator new();
      *(__n128 *)v27 = *v8;
      *(_QWORD *)(v27 + 32) = v16;
      *(_QWORD *)(v27 + 40) = 0;
      v19[3] = v27;
      *(_QWORD *)(v27 + 16) = v19;
      *(_QWORD *)(v27 + 24) = v18;
      v18[2] = v27;
      if (v17 != v2)
        break;
      *(_QWORD *)(v16 + 32) = v27;
      if (v2[1].n128_u64[1] == v2->n128_u64[1])
        goto LABEL_5;
LABEL_38:
      v28 = v2[4].n128_u64[0];
      if (v28)
      {
        v29 = 24;
        if (*(__n128 **)(v28 + 16) == v2)
          v29 = 16;
        *(_QWORD *)(v28 + v29) = 0;
        v2[4].n128_u64[0] = 0;
      }
      v30 = v2[4].n128_u64[1];
      v31 = v2[5].n128_u64[0];
      if (*(_OWORD *)((char *)&v2[4] + 8) != 0)
      {
        v32 = (_QWORD *)(v30 + 80);
        if (!v30)
          v32 = v3;
        *v32 = v31;
        if (v31)
          *(_QWORD *)(v31 + 72) = v30;
        goto LABEL_49;
      }
      if ((__n128 *)*v3 == v2)
      {
        *v3 = 0;
LABEL_49:
        MEMORY[0x227684CE8](v2, 0x1020C40C533E67ELL);
      }
LABEL_5:
      v2 = (__n128 *)v6;
      if (!v6)
        return;
    }
    if (v2[1].n128_u64[1] == v2->n128_u64[1])
      goto LABEL_5;
    goto LABEL_38;
  }
}

void sub_223FCAB84(uint64_t a1)
{
  uint64_t **v1;
  uint64_t **v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t i;
  uint64_t *v6;
  uint64_t j;
  uint64_t v8;
  uint64_t v9;
  uint64_t k;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char **v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char **v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  uint64_t *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t **v68;
  uint64_t **v69;

  v2 = *(uint64_t ***)(a1 + 192);
  v1 = *(uint64_t ***)(a1 + 200);
  if (v2 != v1)
  {
    v3 = a1;
    v69 = *(uint64_t ***)(a1 + 200);
    while (1)
    {
      v4 = *v2;
      for (i = (*v2)[4]; i; i = *(_QWORD *)(i + 8))
      {
        if (*(_QWORD *)(i + 32))
          break;
      }
      v6 = v2[1];
      for (j = v6[4]; j; j = *(_QWORD *)(j + 8))
      {
        if (*(_QWORD *)(j + 32))
          break;
      }
      v8 = v4[2];
      v9 = v6[3];
      v4[2] = (uint64_t)v6;
      v6[3] = (uint64_t)v4;
      *(_QWORD *)(v8 + 24) = v9;
      *(_QWORD *)(v9 + 16) = v8;
      if (i == j)
        break;
      *(_QWORD *)(j + 32) = 0;
      if (!*(_BYTE *)(v3 + 33))
        goto LABEL_3;
      for (k = *(_QWORD *)(i + 8); k; *(_QWORD *)(i + 8) = k)
      {
        if (*(_QWORD *)(k + 32))
          break;
        k = *(_QWORD *)(k + 8);
      }
      v11 = i;
      do
      {
        v11 = *(_QWORD *)(v11 + 8);
        if (v11)
          v12 = v11 == j;
        else
          v12 = 1;
      }
      while (!v12);
      if (v11)
        *(_QWORD *)(i + 8) = *(_QWORD *)(j + 8);
      *(_QWORD *)(j + 8) = i;
      v13 = *(_QWORD *)(j + 48);
      if (v13)
      {
        if (!*(_QWORD *)(i + 48))
        {
          v26 = (_QWORD *)operator new();
          v26[1] = 0;
          v26[2] = 0;
          *v26 = 0;
          *(_QWORD *)(i + 48) = v26;
          v13 = *(_QWORD *)(j + 48);
          v14 = *(_QWORD **)v13;
          if (*(_QWORD *)v13 == *(_QWORD *)(v13 + 8))
            goto LABEL_71;
LABEL_46:
          v68 = v2;
          while (2)
          {
            v28 = *(char ***)(i + 48);
            v30 = v28[1];
            v29 = (unint64_t)v28[2];
            if ((unint64_t)v30 >= v29)
            {
              v31 = *v28;
              v32 = v30 - *v28;
              v33 = v32 >> 3;
              v34 = (v32 >> 3) + 1;
              if (v34 >> 61)
                goto LABEL_96;
              v35 = v29 - (_QWORD)v31;
              if (v35 >> 2 > v34)
                v34 = v35 >> 2;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
                v36 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                if (v36 >> 61)
                  goto LABEL_97;
                v37 = operator new(8 * v36);
                v38 = &v37[8 * v33];
                *(_QWORD *)v38 = *v14;
                v27 = (uint64_t)(v38 + 8);
                v39 = (char *)(v30 - v31);
                if (v30 == v31)
                {
LABEL_68:
                  *v28 = v38;
                  v28[1] = (char *)v27;
                  v28[2] = &v37[8 * v36];
                  if (v30)
                    operator delete(v30);
LABEL_48:
                  v28[1] = (char *)v27;
                  ++v14;
                  v13 = *(_QWORD *)(j + 48);
                  if (v14 == *(_QWORD **)(v13 + 8))
                  {
                    v14 = *(_QWORD **)v13;
                    v3 = a1;
                    v2 = v68;
                    goto LABEL_71;
                  }
                  continue;
                }
              }
              else
              {
                v37 = 0;
                v38 = (char *)(8 * v33);
                *(_QWORD *)(8 * v33) = *v14;
                v27 = 8 * v33 + 8;
                v39 = (char *)(v30 - v31);
                if (v30 == v31)
                  goto LABEL_68;
              }
              v40 = (unint64_t)(v39 - 8);
              if (v40 < 0x58)
                goto LABEL_100;
              if ((unint64_t)(v30 - v37 - v32) < 0x20)
                goto LABEL_100;
              v41 = (v40 >> 3) + 1;
              v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
              v43 = &v30[-v42];
              v38 -= v42;
              v44 = &v37[8 * v33 - 16];
              v45 = v30 - 16;
              v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v47 = *(_OWORD *)v45;
                *(v44 - 1) = *((_OWORD *)v45 - 1);
                *v44 = v47;
                v44 -= 2;
                v45 -= 32;
                v46 -= 4;
              }
              while (v46);
              v30 = v43;
              if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_100:
                do
                {
                  v48 = *((_QWORD *)v30 - 1);
                  v30 -= 8;
                  *((_QWORD *)v38 - 1) = v48;
                  v38 -= 8;
                }
                while (v30 != v31);
              }
              v30 = *v28;
              goto LABEL_68;
            }
            break;
          }
          *(_QWORD *)v30 = *v14;
          v27 = (uint64_t)(v30 + 8);
          goto LABEL_48;
        }
        v14 = *(_QWORD **)v13;
        if (*(_QWORD *)v13 != *(_QWORD *)(v13 + 8))
          goto LABEL_46;
LABEL_71:
        *(_QWORD *)(v13 + 8) = v14;
        v1 = v69;
      }
LABEL_4:
      v2 += 2;
      if (v2 == v1)
        return;
    }
    v15 = sub_223FC73F0((_QWORD *)v3);
    j = v15;
    *(_QWORD *)(v15 + 32) = v8;
    v16 = v8;
    do
    {
      *(_QWORD *)(v16 + 32) = v15;
      v16 = *(_QWORD *)(v16 + 16);
    }
    while (v16 != v8);
    v17 = *(uint64_t **)(i + 32);
    if (v17[4] == j)
    {
      v17 = *v2;
      *(_QWORD *)(i + 32) = *v2;
      v17[4] = i;
      if (*(_BYTE *)(v3 + 33))
      {
LABEL_34:
        if (sub_223FC8304(v17, *(uint64_t **)(j + 32)))
        {
          v18 = *(_QWORD *)(i + 32);
          *(_QWORD *)(i + 32) = *(_QWORD *)(j + 32);
          *(_QWORD *)(j + 32) = v18;
          v19 = *(_QWORD *)(i + 32);
          v20 = v19;
          do
          {
            *(_QWORD *)(v20 + 32) = i;
            v20 = *(_QWORD *)(v20 + 16);
          }
          while (v20 != v19);
          v21 = v18;
          do
          {
            *(_QWORD *)(v21 + 32) = j;
            v21 = *(_QWORD *)(v21 + 16);
          }
          while (v21 != v18);
          *(_QWORD *)(j + 8) = i;
          v22 = *(char ***)(i + 48);
          if (!v22)
          {
LABEL_73:
            v22 = (char **)operator new();
            v22[1] = 0;
            v22[2] = 0;
            *v22 = 0;
            *(_QWORD *)(i + 48) = v22;
            v24 = v22[1];
            v23 = (unint64_t)v22[2];
            if ((unint64_t)v24 >= v23)
            {
LABEL_74:
              v49 = *v22;
              v50 = v24 - *v22;
              v51 = v50 >> 3;
              v52 = (v50 >> 3) + 1;
              if (v52 >> 61)
LABEL_96:
                sub_223FCCF04();
              v53 = v23 - (_QWORD)v49;
              if (v53 >> 2 > v52)
                v52 = v53 >> 2;
              if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
                v54 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v54 = v52;
              if (v54)
              {
                if (v54 >> 61)
LABEL_97:
                  sub_223174E94();
                v55 = operator new(8 * v54);
                v56 = (uint64_t *)&v55[8 * v51];
                *v56 = j;
                v25 = (uint64_t)(v56 + 1);
                v57 = (char *)(v24 - v49);
                if (v24 == v49)
                {
LABEL_92:
                  *v22 = (char *)v56;
                  v22[1] = (char *)v25;
                  v22[2] = &v55[8 * v54];
                  if (v24)
                    operator delete(v24);
                  goto LABEL_94;
                }
              }
              else
              {
                v55 = 0;
                v56 = (uint64_t *)(8 * v51);
                *(_QWORD *)(8 * v51) = j;
                v25 = 8 * v51 + 8;
                v57 = (char *)(v24 - v49);
                if (v24 == v49)
                  goto LABEL_92;
              }
              v58 = (unint64_t)(v57 - 8);
              if (v58 < 0x58)
                goto LABEL_101;
              if ((unint64_t)(v24 - v55 - v50) < 0x20)
                goto LABEL_101;
              v59 = (v58 >> 3) + 1;
              v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
              v61 = &v24[-v60];
              v56 = (uint64_t *)((char *)v56 - v60);
              v62 = &v55[8 * v51 - 16];
              v63 = v24 - 16;
              v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v65 = *(_OWORD *)v63;
                *(v62 - 1) = *((_OWORD *)v63 - 1);
                *v62 = v65;
                v62 -= 2;
                v63 -= 32;
                v64 -= 4;
              }
              while (v64);
              v24 = v61;
              if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_101:
                do
                {
                  v66 = *((_QWORD *)v24 - 1);
                  v24 -= 8;
                  *--v56 = v66;
                }
                while (v24 != v49);
              }
              v24 = *v22;
              goto LABEL_92;
            }
LABEL_44:
            *(_QWORD *)v24 = j;
            v25 = (uint64_t)(v24 + 8);
LABEL_94:
            v22[1] = (char *)v25;
            v1 = v69;
            goto LABEL_4;
          }
        }
        else if (sub_223FC8304(*(uint64_t **)(j + 32), *(uint64_t **)(i + 32)))
        {
          *(_QWORD *)(j + 8) = i;
          v22 = *(char ***)(i + 48);
          if (!v22)
            goto LABEL_73;
        }
        else
        {
          *(_QWORD *)(j + 8) = *(_QWORD *)(i + 8);
          v22 = *(char ***)(i + 48);
          if (!v22)
            goto LABEL_73;
        }
        v24 = v22[1];
        v23 = (unint64_t)v22[2];
        if ((unint64_t)v24 >= v23)
          goto LABEL_74;
        goto LABEL_44;
      }
    }
    else if (*(_BYTE *)(v3 + 33))
    {
      goto LABEL_34;
    }
LABEL_3:
    *(_QWORD *)(j + 8) = i;
    goto LABEL_4;
  }
}

BOOL sub_223FCB0A4(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v2 = (uint64_t *)a1[5];
  if (!v2 || !v2[10])
    return 0;
  a1[6] = v2;
  v5 = v2;
  do
  {
    v8 = v5[9];
    v7 = (uint64_t *)v5[10];
    v5[11] = v8;
    v5[12] = (uint64_t)v7;
    v5[13] = (uint64_t)v7;
    if (*((_DWORD *)v5 + 33) == 1)
    {
      v6 = *(_QWORD *)(v8 + 32);
    }
    else
    {
      v6 = v5[2];
      if (v5[3] != a2 && v6 != *v5)
      {
        v6 = *v5;
        v9 = a2 - v5[1];
        if (v9)
          v6 = *v5 + (uint64_t)nearbyint(*((double *)v5 + 5) * (double)v9);
      }
    }
    v5[4] = v6;
    v5 = v7;
  }
  while (v7);
  do
  {
    if (!v2[13])
      break;
    v10 = 0;
    do
    {
      v11 = (uint64_t *)v2[13];
      if (!v11)
        break;
      v12 = v2;
      v2 = (uint64_t *)v11[13];
      v12[13] = (uint64_t)v2;
      if (v12 != v11 && v11 != v2)
      {
        v14 = v11;
        if (v10)
        {
          v15 = v12;
          do
          {
            while (v14[4] < v15[4])
            {
              v18 = (uint64_t)v14;
              do
              {
                v18 = *(_QWORD *)(v18 + 88);
                sub_223FCB4F4(a1, v18, (uint64_t)v14, a2);
              }
              while ((uint64_t *)v18 != v15);
              v19 = (uint64_t *)v14[12];
              if (v19)
                v19[11] = v14[11];
              *(_QWORD *)(v14[11] + 96) = v19;
              v20 = v15[11];
              v14[11] = v20;
              if (v20)
                *(_QWORD *)(v20 + 96) = v14;
              v14[12] = (uint64_t)v15;
              v15[11] = (uint64_t)v14;
              if (v15 == v12)
              {
                v14[13] = (uint64_t)v2;
                v10[13] = (uint64_t)v14;
                v15 = v12;
                v11 = v19;
                v17 = v12 == v19 || v19 == v2;
                v12 = v14;
                v14 = v19;
                if (v17)
                  goto LABEL_14;
              }
              else
              {
                v11 = v19;
                v21 = v15 == v19 || v19 == v2;
                v14 = v19;
                if (v21)
                  goto LABEL_14;
              }
            }
            v15 = (uint64_t *)v15[12];
          }
          while (v15 != v11 && v14 != v2);
        }
        else
        {
          v22 = v12;
          do
          {
            v25 = (uint64_t)v14;
            if (v14[4] >= v22[4])
            {
              v22 = (uint64_t *)v22[12];
              v23 = v14;
            }
            else
            {
              do
              {
                v25 = *(_QWORD *)(v25 + 88);
                sub_223FCB4F4(a1, v25, (uint64_t)v14, a2);
              }
              while ((uint64_t *)v25 != v22);
              v23 = (uint64_t *)v14[12];
              if (v23)
                v23[11] = v14[11];
              *(_QWORD *)(v14[11] + 96) = v23;
              v26 = v22[11];
              v14[11] = v26;
              if (v26)
                *(_QWORD *)(v26 + 96) = v14;
              v14[12] = (uint64_t)v22;
              v22[11] = (uint64_t)v14;
              if (v22 == v12)
              {
                v14[13] = (uint64_t)v2;
                a1[6] = v14;
                v22 = v12;
                v11 = v23;
                v12 = v14;
              }
              else
              {
                v11 = v23;
              }
            }
            v24 = v22 == v11 || v23 == v2;
            v14 = v23;
          }
          while (!v24);
        }
      }
LABEL_14:
      v10 = v12;
    }
    while (v2);
    v2 = (uint64_t *)a1[6];
  }
  while (v2);
  return a1[19] != a1[18];
}

void sub_223FCB354(_QWORD *a1)
{
  __n128 *v2;
  __n128 *v3;
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __int8 *v7;
  uint64_t v8;
  __n128 *v9;
  unint64_t v10;
  uint64_t v11;
  __int8 *v12;
  __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  __n128 v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(__n128 *, __n128 *);
  __n128 v23;

  v2 = (__n128 *)a1[18];
  v3 = (__n128 *)a1[19];
  v4 = 126 - 2 * __clz(((char *)v3 - (char *)v2) >> 5);
  v22 = (uint64_t (*)(__n128 *, __n128 *))sub_223FC4EF0;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = v4;
  sub_223FCD350(v2, v3, &v22, v5, 1);
  v6 = (__n128 *)a1[18];
  if (v6 != (__n128 *)a1[19])
  {
    v7 = &v6[3].n128_i8[8];
    do
    {
      v8 = v6[1].n128_i64[0];
      v10 = v6[1].n128_u64[1];
      v9 = v6 + 1;
      v11 = *(_QWORD *)(v8 + 80);
      if (v11 != v10)
      {
        if (*(_QWORD *)(v8 + 72) == v10)
        {
          sub_223FC6A28((uint64_t)a1, v8, v6[1].n128_i64[1], v6);
          v19 = (_QWORD *)v6[1].n128_u64[0];
          v18 = (_QWORD *)v6[1].n128_u64[1];
          v20 = v18[10];
          if (!v20)
            goto LABEL_15;
LABEL_14:
          *(_QWORD *)(v20 + 72) = v19;
          goto LABEL_15;
        }
        v12 = v7;
        do
        {
          v13 = v12;
          v14 = *((_QWORD *)v12 - 1);
          if (*(_QWORD *)(v14 + 80) == *(_QWORD *)v13)
            break;
          v15 = *(_QWORD *)(v14 + 72);
          v12 = v13 + 32;
        }
        while (v15 != *(_QWORD *)v13);
        v16 = *v6;
        v23 = *v9;
        v17 = v23;
        *v6 = *(__n128 *)(v13 - 24);
        *v9 = *(__n128 *)(v13 - 8);
        *(__n128 *)(v13 - 24) = v16;
        *(__n128 *)(v13 - 8) = v17;
        v8 = v6[1].n128_i64[0];
        v11 = v6[1].n128_i64[1];
      }
      sub_223FC6A28((uint64_t)a1, v8, v11, v6);
      v19 = (_QWORD *)v6[1].n128_u64[0];
      v18 = (_QWORD *)v6[1].n128_u64[1];
      v20 = v18[10];
      if (v20)
        goto LABEL_14;
LABEL_15:
      v21 = v19[9];
      if (v21)
        *(_QWORD *)(v21 + 80) = v18;
      v18[9] = v21;
      v18[10] = v19;
      v19[9] = v18;
      v19[10] = v20;
      if (!v18[9])
        a1[5] = v18;
      v19[4] = v6->n128_u64[0];
      v18[4] = v6->n128_u64[0];
      sub_223FC688C((uint64_t)a1, v18, v6, 1);
      sub_223FC71D0((uint64_t)a1, v6[1].n128_i64[0], v6, 1);
      v6 += 2;
      v7 += 32;
    }
    while (v6 != (__n128 *)a1[19]);
  }
}

void sub_223FCB4F4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  double v43;
  double v44;
  double v45;
  double v46;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  v11 = (double)(v7 - *(_QWORD *)a2);
  v12 = (double)(v8 - v9);
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(a3 + 24);
  v16 = *(_QWORD *)a3;
  v15 = *(_QWORD *)(a3 + 8);
  v17 = (double)(v13 - *(_QWORD *)a3);
  v18 = (double)(v14 - v15);
  v19 = v12 * v17 - v18 * v11;
  if (v19 == 0.0)
  {
    v22 = *(_QWORD *)(a2 + 32);
    v21 = a4;
  }
  else
  {
    v20 = ((double)(v10 - v16) * v18 - (double)(v9 - v15) * v17) / v19;
    v21 = *(_QWORD *)(a2 + 8);
    v22 = *(_QWORD *)a2;
    if (v20 > 0.0)
    {
      v21 = *(_QWORD *)(a2 + 24);
      v22 = *(_QWORD *)(a2 + 16);
      if (v20 < 1.0)
      {
        v22 = (uint64_t)((double)v10 + v20 * v11);
        v21 = (uint64_t)((double)v9 + v20 * v12);
      }
    }
  }
  if (v21 >= a4 && v21 <= a1[3])
  {
    v8 = v21;
    v7 = v22;
    goto LABEL_9;
  }
  v26 = *(double *)(a2 + 40);
  v27 = fabs(v26);
  v28 = *(double *)(a3 + 40);
  v29 = fabs(v28);
  if (v27 > 100.0 && v29 > 100.0)
  {
    if (v27 > v29)
      goto LABEL_39;
LABEL_45:
    if (v13 != v16 || (v8 = *(_QWORD *)(a3 + 24), v7 = *(_QWORD *)(a3 + 16), v14 != v15))
    {
      v45 = (v18 * (double)(v21 - v15) + (double)(v22 - v16) * v17) / (v17 * v17 + v18 * v18);
      v46 = 0.0;
      if (v45 >= 0.0)
      {
        v46 = (v18 * (double)(v21 - v15) + (double)(v22 - v16) * v17) / (v17 * v17 + v18 * v18);
        if (v45 > 1.0)
          v46 = 1.0;
      }
      v7 = v16 + (uint64_t)nearbyint(v46 * v17);
      v8 = v15 + (uint64_t)nearbyint(v46 * v18);
    }
    goto LABEL_9;
  }
  if (v27 > 100.0)
  {
LABEL_39:
    if (v7 != v10 || v8 != v9)
    {
      v43 = (v12 * (double)(v21 - v9) + (double)(v22 - v10) * v11) / (v11 * v11 + v12 * v12);
      v44 = 0.0;
      if (v43 >= 0.0)
      {
        v44 = (v12 * (double)(v21 - v9) + (double)(v22 - v10) * v11) / (v11 * v11 + v12 * v12);
        if (v43 > 1.0)
          v44 = 1.0;
      }
      v7 = v10 + (uint64_t)nearbyint(v44 * v11);
      v8 = v9 + (uint64_t)nearbyint(v44 * v12);
    }
    goto LABEL_9;
  }
  if (v29 > 100.0)
    goto LABEL_45;
  if (v21 >= a4)
    v31 = a1[3];
  else
    v31 = a4;
  if (v27 >= v29)
  {
    if (v14 == v31 || v13 == v16)
    {
      v8 = v31;
      v7 = *(_QWORD *)(a3 + 16);
      goto LABEL_9;
    }
    if (v31 == v15)
    {
      v8 = *(_QWORD *)(a3 + 8);
      v7 = *(_QWORD *)a3;
      goto LABEL_9;
    }
    v7 = v16 + (uint64_t)nearbyint(v28 * (double)(v31 - v15));
  }
  else if (v8 != v31 && v7 != v10)
  {
    v8 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)a2;
    v32 = v31 - v9;
    if (!v32)
      goto LABEL_9;
    v7 = v10 + (uint64_t)nearbyint(v26 * (double)v32);
  }
  v8 = v31;
LABEL_9:
  v24 = (uint64_t *)a1[19];
  v23 = a1[20];
  if ((unint64_t)v24 >= v23)
  {
    v33 = (char *)a1[18];
    v34 = ((char *)v24 - v33) >> 5;
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 59)
      sub_223FCCF04();
    v36 = v23 - (_QWORD)v33;
    if (v36 >> 4 > v35)
      v35 = v36 >> 4;
    v37 = (unint64_t)v36 >= 0x7FFFFFFFFFFFFFE0;
    v38 = 0x7FFFFFFFFFFFFFFLL;
    if (!v37)
      v38 = v35;
    if (v38 >> 59)
      sub_223174E94();
    v39 = 32 * v38;
    v40 = (char *)operator new(32 * v38);
    v41 = (uint64_t *)&v40[32 * v34];
    *v41 = v7;
    v41[1] = v8;
    v42 = &v40[v39];
    v41[2] = a2;
    v41[3] = a3;
    v25 = v41 + 4;
    if (v24 != (uint64_t *)v33)
    {
      do
      {
        *((_OWORD *)v41 - 2) = *((_OWORD *)v24 - 2);
        *((_OWORD *)v41 - 1) = *((_OWORD *)v24 - 1);
        v41 -= 4;
        v24 -= 4;
      }
      while (v24 != (uint64_t *)v33);
      v24 = (uint64_t *)v33;
    }
    a1[18] = v41;
    a1[19] = v25;
    a1[20] = v42;
    if (v24)
      operator delete(v24);
  }
  else
  {
    *v24 = v7;
    v24[1] = v8;
    v25 = v24 + 4;
    v24[2] = a2;
    v24[3] = a3;
  }
  a1[19] = v25;
}

void sub_223FCB89C(uint64_t a1, uint64_t a2)
{
  __n128 *v2;
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v2 = (__n128 *)a2;
  v4 = (_OWORD *)(a2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)(a2 + 16);
  v5 = 24;
  if (*(int *)(a2 + 48) > 0)
    v5 = 16;
  v6 = *(_OWORD **)(*(_QWORD *)(a2 + 112) + v5);
  *(_QWORD *)(a2 + 112) = v6;
  if (v4 != v6)
    *v4 = *v6;
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)a2;
  v9 = *(_QWORD *)(a2 + 24) - v8;
  if (v9)
  {
    *(double *)(a2 + 40) = (double)(*(_QWORD *)v4 - v7) / (double)v9;
    v11 = *(_DWORD *)(a2 + 132);
    if (!v11)
      goto LABEL_9;
LABEL_13:
    *(_DWORD *)(a2 + 132) = 0;
    if (v11 == 2)
    {
      v13 = *(_QWORD *)(a2 + 80);
      *(_DWORD *)(v13 + 132) = 0;
    }
    else
    {
      a2 = *(_QWORD *)(a2 + 72);
      *(_DWORD *)(a2 + 132) = 0;
      v13 = (uint64_t)v2;
    }
    sub_223FC6750(a1, a2, v13, v2, 1);
    v12 = v2[1].n128_u64[1];
    if (v12 == v2->n128_u64[1])
      goto LABEL_10;
LABEL_17:
    v14 = v12;
    sub_223FCCF18(a1 + 112, &v14);
    sub_223FC688C(a1, v2, v2, 0);
    sub_223FC71D0(a1, (uint64_t)v2, v2, 1);
    return;
  }
  v10 = 1.79769313e308;
  if (*(_QWORD *)v4 > v7)
    v10 = -1.79769313e308;
  *(double *)(a2 + 40) = v10;
  v11 = *(_DWORD *)(a2 + 132);
  if (v11)
    goto LABEL_13;
LABEL_9:
  v12 = *(_QWORD *)(a2 + 24);
  if (v12 != *(_QWORD *)(a2 + 8))
    goto LABEL_17;
LABEL_10:
  if (!*(_BYTE *)(v2[7].n128_u64[1] + 12))
    sub_223FCEB28((uint64_t *)v2, *(unsigned __int8 *)(a1 + 216));
}

uint64_t sub_223FCBA24(uint64_t result, int a2, char a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;

  if (result)
  {
    v4 = *(_QWORD *)(result + 16);
    if (v4 == result || (a3 & 1) == 0 && v4 == *(_QWORD *)(result + 24))
      return 0;
    v7 = *(_QWORD **)a4;
    v8 = *(_QWORD **)(a4 + 8);
    if (v8 != *(_QWORD **)a4)
    {
      *(_QWORD *)(a4 + 8) = v7;
      v8 = v7;
    }
    if (a2)
      v9 = (uint64_t *)result;
    else
      v9 = (uint64_t *)v4;
    if (a2)
      v10 = (uint64_t **)(result + 24);
    else
      v10 = (uint64_t **)(v4 + 16);
    v12 = *v9;
    v11 = v9[1];
    v13 = *v10;
    v14 = *(_QWORD *)(a4 + 16);
    if ((unint64_t)v8 < v14)
    {
      *v8 = v12;
      v8[1] = v11;
      v15 = v8 + 2;
      goto LABEL_30;
    }
    v16 = ((char *)v8 - (char *)v7) >> 4;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 60)
LABEL_82:
      sub_22316E078();
    v18 = v14 - (_QWORD)v7;
    if (v18 >> 3 > v17)
      v17 = v18 >> 3;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
      v19 = 0xFFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 60)
LABEL_83:
        sub_223174E94();
      v20 = (char *)operator new(16 * v19);
      v21 = &v20[16 * v16];
      v22 = &v20[16 * v19];
      *(_QWORD *)v21 = v12;
      *((_QWORD *)v21 + 1) = v11;
      v15 = v21 + 16;
      if (v8 == v7)
        goto LABEL_28;
    }
    else
    {
      v21 = (char *)(16 * v16);
      v22 = 0;
      *(_QWORD *)v21 = v12;
      *((_QWORD *)v21 + 1) = v11;
      v15 = (_QWORD *)(16 * v16 + 16);
      if (v8 == v7)
        goto LABEL_28;
    }
    do
    {
      *((_OWORD *)v21 - 1) = *((_OWORD *)v8 - 1);
      v21 -= 16;
      v8 -= 2;
    }
    while (v8 != v7);
    v7 = *(_QWORD **)a4;
LABEL_28:
    *(_QWORD *)a4 = v21;
    *(_QWORD *)(a4 + 8) = v15;
    *(_QWORD *)(a4 + 16) = v22;
    if (v7)
      operator delete(v7);
LABEL_30:
    *(_QWORD *)(a4 + 8) = v15;
    while (v13 != v9)
    {
      v25 = *v13;
      if (*v13 == v12)
      {
        v26 = v13[1];
        if (v26 == v11)
          goto LABEL_34;
        v27 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v15 >= v27)
        {
LABEL_43:
          v28 = *(_QWORD **)a4;
          v29 = ((uint64_t)v15 - *(_QWORD *)a4) >> 4;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 60)
            goto LABEL_82;
          v31 = v27 - (_QWORD)v28;
          if (v31 >> 3 > v30)
            v30 = v31 >> 3;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
            v32 = 0xFFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            if (v32 >> 60)
              goto LABEL_83;
            v33 = (char *)operator new(16 * v32);
            v34 = &v33[16 * v29];
            *(_QWORD *)v34 = v25;
            *((_QWORD *)v34 + 1) = v26;
            v35 = (uint64_t)v34;
            if (v15 == v28)
              goto LABEL_56;
            do
            {
LABEL_54:
              *(_OWORD *)(v35 - 16) = *((_OWORD *)v15 - 1);
              v35 -= 16;
              v15 -= 2;
            }
            while (v15 != v28);
            v15 = *(_QWORD **)a4;
          }
          else
          {
            v33 = 0;
            v34 = (char *)(16 * v29);
            *(_QWORD *)v34 = v25;
            *((_QWORD *)v34 + 1) = v26;
            v35 = 16 * v29;
            if (v15 != v28)
              goto LABEL_54;
          }
LABEL_56:
          v23 = v34 + 16;
          *(_QWORD *)a4 = v35;
          *(_QWORD *)(a4 + 8) = v34 + 16;
          *(_QWORD *)(a4 + 16) = &v33[16 * v32];
          if (v15)
            operator delete(v15);
          goto LABEL_33;
        }
      }
      else
      {
        v26 = v13[1];
        v27 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v15 >= v27)
          goto LABEL_43;
      }
      *v15 = v25;
      v15[1] = v26;
      v23 = v15 + 2;
LABEL_33:
      *(_QWORD *)(a4 + 8) = v23;
      v15 = v23;
      v11 = v26;
      v12 = v25;
LABEL_34:
      if (a2)
        v24 = 3;
      else
        v24 = 2;
      v13 = (uint64_t *)v13[v24];
    }
    if ((_QWORD *)((char *)v15 - *(_QWORD *)a4) != (_QWORD *)48)
      return 1;
    v36 = (_QWORD *)v9[2];
    v37 = (uint64_t *)v36[2];
    if (v37 != (uint64_t *)v9[3])
      return 1;
    v38 = *v37;
    v39 = *v37 - *v36;
    if (v39 < 0)
      v39 = *v36 - *v37;
    if ((unint64_t)v39 > 1)
      goto LABEL_79;
    v40 = v37[1] - v36[1];
    if (v40 < 0)
      v40 = v36[1] - v37[1];
    if ((unint64_t)v40 >= 2)
    {
LABEL_79:
      v41 = *v9;
      v42 = *v9 - *v36;
      if (v42 < 0)
        v42 = *v36 - *v9;
      if ((unint64_t)v42 > 1)
        goto LABEL_86;
      v43 = v9[1] - v36[1];
      if (v43 < 0)
        v43 = -v43;
      if ((unint64_t)v43 >= 2)
      {
LABEL_86:
        v44 = v41 - v38;
        if (v41 - v38 < 0)
          v44 = v38 - v41;
        if (v44 > 1)
          return 1;
        v45 = v9[1] - v37[1];
        if (v45 < 0)
          v45 = -v45;
        if ((unint64_t)v45 >= 2)
          return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_223FCBD7C(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  int8x8_t v8;
  int8x8_t v9;
  int8x8_t v10;
  int8x8_t v11;
  uint64_t v12;
  int8x8_t *v13;
  uint64_t v14;
  unint64_t v15;
  int8x8_t *v16;
  uint64_t v17;
  const double *v18;
  uint64_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  const double *v28;
  int8x16_t v29;
  uint64_t v30;
  int8x16_t v31;
  uint64_t v32;
  int8x16_t v33;
  uint64_t v34;
  int8x16_t v35;
  uint64_t v36;
  int8x8_t v37;
  int8x8_t v38;
  uint64_t v39;
  BOOL v40;
  int64x2_t v42;
  int64x2_t v43;
  float64x2x2_t v44;
  float64x2x2_t v45;

  v3 = *a3;
  v4 = a3[1];
  if (*a3 == v4)
    return 0;
  v42 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v43 = vdupq_n_s64(0x8000000000000000);
  while (1)
  {
    v7 = *v3;
    if (*v3)
    {
      while (!*(_QWORD *)(v7 + 32))
      {
        v7 = *(_QWORD *)(v7 + 8);
        if (!v7)
          goto LABEL_3;
      }
      if (v7 != a2 && *(_QWORD *)(v7 + 56) != a2)
      {
        *(_QWORD *)(v7 + 56) = a2;
        if (!*(_QWORD *)(v7 + 48))
          goto LABEL_13;
        if ((sub_223FCBD7C(a1, a2) & 1) != 0)
          return 1;
        if (*(_QWORD *)(v7 + 32))
        {
LABEL_13:
          v8 = *(int8x8_t *)(v7 + 88);
          v9 = *(int8x8_t *)(v7 + 72);
          if (*(_QWORD *)&v8 > *(_QWORD *)&v9)
          {
            v10 = *(int8x8_t *)(v7 + 80);
            v11 = *(int8x8_t *)(v7 + 64);
            if (*(_QWORD *)&v10 > *(_QWORD *)&v11)
              goto LABEL_34;
          }
          sub_223FC7AE0(a1, v7);
          v12 = *(_QWORD *)(v7 + 32);
          if (v12)
          {
            if (sub_223FCBA24(v12, *(unsigned __int8 *)(a1 + 217), 0, v7 + 96))
              break;
          }
        }
      }
    }
LABEL_3:
    if (++v3 == v4)
      return 0;
  }
  v14 = *(_QWORD *)(v7 + 96);
  v13 = *(int8x8_t **)(v7 + 104);
  if ((int8x8_t *)v14 == v13)
  {
    v9 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
    v10 = (int8x8_t)0x8000000000000000;
    v8 = (int8x8_t)0x8000000000000000;
    v11 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v15 = (unint64_t)&v13[-2] - v14;
    if (v15 < 0x30)
    {
      v8 = (int8x8_t)0x8000000000000000;
      v11 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
      v9 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
      v10 = (int8x8_t)0x8000000000000000;
      v16 = *(int8x8_t **)(v7 + 96);
      goto LABEL_24;
    }
    v17 = (v15 >> 4) + 1;
    v16 = (int8x8_t *)(v14 + 16 * (v17 & 0x1FFFFFFFFFFFFFFCLL));
    v18 = (const double *)(v14 + 32);
    v19 = v17 & 0x1FFFFFFFFFFFFFFCLL;
    v20 = v42;
    v21 = v43;
    v22 = v42;
    v23 = v42;
    v24 = v42;
    v25 = v43;
    v26 = v43;
    v27 = v43;
    do
    {
      v28 = v18 - 4;
      v44 = vld2q_f64(v28);
      v45 = vld2q_f64(v18);
      v22 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v22, (int64x2_t)v44.val[0]), (int8x16_t)v44.val[0], (int8x16_t)v22);
      v23 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v23, (int64x2_t)v45.val[0]), (int8x16_t)v45.val[0], (int8x16_t)v23);
      v27 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v44.val[0], v27), (int8x16_t)v44.val[0], (int8x16_t)v27);
      v21 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v45.val[0], v21), (int8x16_t)v45.val[0], (int8x16_t)v21);
      v24 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v24, (int64x2_t)v44.val[1]), (int8x16_t)v44.val[1], (int8x16_t)v24);
      v20 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v20, (int64x2_t)v45.val[1]), (int8x16_t)v45.val[1], (int8x16_t)v20);
      v25 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v44.val[1], v25), (int8x16_t)v44.val[1], (int8x16_t)v25);
      v26 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v45.val[1], v26), (int8x16_t)v45.val[1], (int8x16_t)v26);
      v18 += 8;
      v19 -= 4;
    }
    while (v19);
    v29 = vbslq_s8((int8x16_t)vcgtq_s64(v27, v21), (int8x16_t)v27, (int8x16_t)v21);
    v30 = vextq_s8(v29, v29, 8uLL).u64[0];
    v10 = vbsl_s8((int8x8_t)vcgtd_s64(v29.i64[0], v30), *(int8x8_t *)v29.i8, (int8x8_t)v30);
    v31 = vbslq_s8((int8x16_t)vcgtq_s64(v25, v26), (int8x16_t)v25, (int8x16_t)v26);
    v32 = vextq_s8(v31, v31, 8uLL).u64[0];
    v8 = vbsl_s8((int8x8_t)vcgtd_s64(v31.i64[0], v32), *(int8x8_t *)v31.i8, (int8x8_t)v32);
    v33 = vbslq_s8((int8x16_t)vcgtq_s64(v20, v24), (int8x16_t)v24, (int8x16_t)v20);
    v34 = vextq_s8(v33, v33, 8uLL).u64[0];
    v9 = vbsl_s8((int8x8_t)vcgtd_s64(v34, v33.i64[0]), *(int8x8_t *)v33.i8, (int8x8_t)v34);
    v35 = vbslq_s8((int8x16_t)vcgtq_s64(v23, v22), (int8x16_t)v22, (int8x16_t)v23);
    v36 = vextq_s8(v35, v35, 8uLL).u64[0];
    v11 = vbsl_s8((int8x8_t)vcgtd_s64(v36, v35.i64[0]), *(int8x8_t *)v35.i8, (int8x8_t)v36);
    if (v17 != (v17 & 0x1FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_24:
        v37 = *v16;
        v38 = v16[1];
        v16 += 2;
        if (*(_QWORD *)&v37 < *(_QWORD *)&v11)
          v11 = v37;
        if (*(_QWORD *)&v37 > *(_QWORD *)&v10)
          v10 = v37;
        if (*(_QWORD *)&v38 < *(_QWORD *)&v9)
          v9 = v38;
        if (*(_QWORD *)&v38 > *(_QWORD *)&v8)
          v8 = v38;
      }
      while (v16 != v13);
    }
  }
  *(int8x8_t *)(v7 + 64) = v11;
  *(int8x8_t *)(v7 + 72) = v9;
  *(int8x8_t *)(v7 + 80) = v10;
  *(int8x8_t *)(v7 + 88) = v8;
LABEL_34:
  v39 = v7;
  do
  {
    v39 = *(_QWORD *)(v39 + 8);
    if (v39)
      v40 = v39 == a2;
    else
      v40 = 1;
  }
  while (!v40);
  if (v39
    || *(_QWORD *)(a2 + 64) < *(_QWORD *)&v11
    || *(_QWORD *)(a2 + 80) > *(_QWORD *)&v10
    || *(_QWORD *)(a2 + 72) < *(_QWORD *)&v9
    || *(_QWORD *)(a2 + 88) > *(_QWORD *)&v8
    || !sub_223FC8304(*(uint64_t **)(a2 + 32), *(uint64_t **)(v7 + 32)))
  {
    goto LABEL_3;
  }
  *(_QWORD *)(a2 + 8) = v7;
  return 1;
}

uint64_t sub_223FCC06C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  int8x8_t *v10;
  uint64_t v11;
  unint64_t v12;
  int8x8_t v13;
  int8x8_t v14;
  int8x8_t v15;
  int8x8_t v16;
  int8x8_t *v17;
  uint64_t v18;
  const double *v19;
  uint64_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  const double *v29;
  int8x16_t v30;
  uint64_t v31;
  int8x16_t v32;
  uint64_t v33;
  int8x16_t v34;
  uint64_t v35;
  int8x16_t v36;
  uint64_t v37;
  int8x8_t v38;
  int8x8_t v39;
  uint64_t v40;
  uint64_t v41;
  int64x2_t v42;
  int64x2_t v43;
  float64x2x2_t v44;
  float64x2x2_t v45;

  if (*(_QWORD *)(a2 + 40)
    || *(_QWORD *)(a2 + 88) <= *(_QWORD *)(a2 + 72)
    || *(_QWORD *)(a2 + 80) <= *(_QWORD *)(a2 + 64))
  {
    return result;
  }
  v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
  {
LABEL_41:
    v41 = a3;
    goto LABEL_42;
  }
  v6 = result;
  v42 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v43 = vdupq_n_s64(0x8000000000000000);
  while (1)
  {
    v7 = *(uint64_t ***)(v5 + 48);
    if (v7)
    {
      if ((sub_223FCBD7C(v6, a2, v7) & 1) != 0)
        goto LABEL_38;
      v5 = *(_QWORD *)(a2 + 8);
    }
    if (*(_QWORD *)(v5 + 32))
      break;
LABEL_7:
    v5 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
    *(_QWORD *)(a2 + 8) = v5;
    if (!v5)
      goto LABEL_41;
  }
  if (*(_QWORD *)(v5 + 88) > *(_QWORD *)(v5 + 72))
  {
    v8 = *(_QWORD *)(v5 + 64);
    if (*(_QWORD *)(v5 + 80) > v8)
      goto LABEL_33;
  }
  sub_223FC7AE0(v6, v5);
  v9 = *(_QWORD *)(v5 + 32);
  if (!v9 || !sub_223FCBA24(v9, *(unsigned __int8 *)(v6 + 217), 0, v5 + 96))
    goto LABEL_7;
  v11 = *(_QWORD *)(v5 + 96);
  v10 = *(int8x8_t **)(v5 + 104);
  if ((int8x8_t *)v11 == v10)
  {
    v15 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
    v16 = (int8x8_t)0x8000000000000000;
    v13 = (int8x8_t)0x8000000000000000;
    v14 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v12 = (unint64_t)&v10[-2] - v11;
    if (v12 < 0x30)
    {
      v13 = (int8x8_t)0x8000000000000000;
      v14 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
      v15 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
      v16 = (int8x8_t)0x8000000000000000;
      v17 = *(int8x8_t **)(v5 + 96);
      goto LABEL_23;
    }
    v18 = (v12 >> 4) + 1;
    v17 = (int8x8_t *)(v11 + 16 * (v18 & 0x1FFFFFFFFFFFFFFCLL));
    v19 = (const double *)(v11 + 32);
    v20 = v18 & 0x1FFFFFFFFFFFFFFCLL;
    v21 = v42;
    v22 = v43;
    v23 = v42;
    v24 = v42;
    v25 = v42;
    v26 = v43;
    v27 = v43;
    v28 = v43;
    do
    {
      v29 = v19 - 4;
      v44 = vld2q_f64(v29);
      v45 = vld2q_f64(v19);
      v23 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v23, (int64x2_t)v44.val[0]), (int8x16_t)v44.val[0], (int8x16_t)v23);
      v24 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v24, (int64x2_t)v45.val[0]), (int8x16_t)v45.val[0], (int8x16_t)v24);
      v28 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v44.val[0], v28), (int8x16_t)v44.val[0], (int8x16_t)v28);
      v22 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v45.val[0], v22), (int8x16_t)v45.val[0], (int8x16_t)v22);
      v25 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v25, (int64x2_t)v44.val[1]), (int8x16_t)v44.val[1], (int8x16_t)v25);
      v21 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v21, (int64x2_t)v45.val[1]), (int8x16_t)v45.val[1], (int8x16_t)v21);
      v26 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v44.val[1], v26), (int8x16_t)v44.val[1], (int8x16_t)v26);
      v27 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v45.val[1], v27), (int8x16_t)v45.val[1], (int8x16_t)v27);
      v19 += 8;
      v20 -= 4;
    }
    while (v20);
    v30 = vbslq_s8((int8x16_t)vcgtq_s64(v28, v22), (int8x16_t)v28, (int8x16_t)v22);
    v31 = vextq_s8(v30, v30, 8uLL).u64[0];
    v16 = vbsl_s8((int8x8_t)vcgtd_s64(v30.i64[0], v31), *(int8x8_t *)v30.i8, (int8x8_t)v31);
    v32 = vbslq_s8((int8x16_t)vcgtq_s64(v26, v27), (int8x16_t)v26, (int8x16_t)v27);
    v33 = vextq_s8(v32, v32, 8uLL).u64[0];
    v13 = vbsl_s8((int8x8_t)vcgtd_s64(v32.i64[0], v33), *(int8x8_t *)v32.i8, (int8x8_t)v33);
    v34 = vbslq_s8((int8x16_t)vcgtq_s64(v21, v25), (int8x16_t)v25, (int8x16_t)v21);
    v35 = vextq_s8(v34, v34, 8uLL).u64[0];
    v15 = vbsl_s8((int8x8_t)vcgtd_s64(v35, v34.i64[0]), *(int8x8_t *)v34.i8, (int8x8_t)v35);
    v36 = vbslq_s8((int8x16_t)vcgtq_s64(v24, v23), (int8x16_t)v23, (int8x16_t)v24);
    v37 = vextq_s8(v36, v36, 8uLL).u64[0];
    v14 = vbsl_s8((int8x8_t)vcgtd_s64(v37, v36.i64[0]), *(int8x8_t *)v36.i8, (int8x8_t)v37);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_23:
        v38 = *v17;
        v39 = v17[1];
        v17 += 2;
        if (*(_QWORD *)&v38 < *(_QWORD *)&v14)
          v14 = v38;
        if (*(_QWORD *)&v38 > *(_QWORD *)&v16)
          v16 = v38;
        if (*(_QWORD *)&v39 < *(_QWORD *)&v15)
          v15 = v39;
        if (*(_QWORD *)&v39 > *(_QWORD *)&v13)
          v13 = v39;
      }
      while (v17 != v10);
    }
  }
  *(int8x8_t *)(v5 + 64) = v14;
  *(int8x8_t *)(v5 + 72) = v15;
  *(int8x8_t *)(v5 + 80) = v16;
  *(int8x8_t *)(v5 + 88) = v13;
  v5 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(v5 + 64);
LABEL_33:
  if (*(_QWORD *)(a2 + 64) < v8
    || *(_QWORD *)(a2 + 80) > *(_QWORD *)(v5 + 80)
    || *(_QWORD *)(a2 + 72) < *(_QWORD *)(v5 + 72)
    || *(_QWORD *)(a2 + 88) > *(_QWORD *)(v5 + 88)
    || !sub_223FC8304(*(uint64_t **)(a2 + 32), *(uint64_t **)(v5 + 32)))
  {
    goto LABEL_7;
  }
LABEL_38:
  v40 = *(_QWORD *)(a2 + 8);
  if (!v40)
    goto LABEL_41;
  v41 = *(_QWORD *)(v40 + 40);
  if (!v41)
  {
    sub_223FCC06C(v6);
    v41 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40);
  }
LABEL_42:
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, a2 + 96);
  *(_QWORD *)(a2 + 40) = result;
  return result;
}

void sub_223FCC37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  char *v8;
  void *v9;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t i;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  char *v24;
  void *__p[2];
  uint64_t v26;

  v7 = *(char **)a2;
  v6 = *(char **)(a2 + 8);
  if (v6 != *(char **)a2)
  {
    v8 = *(char **)(a2 + 8);
    do
    {
      v10 = (void *)*((_QWORD *)v8 - 3);
      v8 -= 24;
      v9 = v10;
      if (v10)
      {
        *((_QWORD *)v6 - 2) = v9;
        operator delete(v9);
      }
      v6 = v8;
    }
    while (v8 != v7);
    *(_QWORD *)(a2 + 8) = v7;
  }
  sub_2232EA6AC(a2, (uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 3);
  if (a3)
  {
    v12 = *(char **)a3;
    v11 = *(char **)(a3 + 8);
    if (v11 != *(char **)a3)
    {
      v13 = *(char **)(a3 + 8);
      do
      {
        v15 = (void *)*((_QWORD *)v13 - 3);
        v13 -= 24;
        v14 = v15;
        if (v15)
        {
          *((_QWORD *)v11 - 2) = v14;
          operator delete(v14);
        }
        v11 = v13;
      }
      while (v13 != v12);
      *(_QWORD *)(a3 + 8) = v12;
    }
    sub_2232EA6AC(a3, (uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 3);
  }
  v17 = *(_QWORD *)(a1 + 232);
  v16 = *(_QWORD *)(a1 + 240);
  if (v16 != v17)
  {
    for (i = 0; i < (v16 - v17) >> 3; ++i)
    {
      v19 = *(_QWORD *)(v17 + 8 * i);
      v20 = *(_QWORD *)(v19 + 32);
      if (!v20)
        continue;
      __p[0] = 0;
      __p[1] = 0;
      v26 = 0;
      if (a3 && *(_BYTE *)(v19 + 120))
      {
        if (sub_223FCBA24(v20, *(unsigned __int8 *)(a1 + 217), 1, (uint64_t)__p))
        {
          v21 = *(_QWORD **)(a3 + 8);
          if ((unint64_t)v21 >= *(_QWORD *)(a3 + 16))
          {
            *(_QWORD *)(a3 + 8) = sub_2232EA89C((char **)a3, (uint64_t)__p);
            v22 = __p[0];
            if (!__p[0])
              goto LABEL_17;
          }
          else
          {
            *v21 = 0;
            v21[1] = 0;
            v21[2] = 0;
            *(_OWORD *)v21 = *(_OWORD *)__p;
            v21[2] = v26;
            __p[0] = 0;
            __p[1] = 0;
            v26 = 0;
            *(_QWORD *)(a3 + 8) = v21 + 3;
            v22 = __p[0];
            if (!__p[0])
              goto LABEL_17;
          }
LABEL_32:
          __p[1] = v22;
          operator delete(v22);
          goto LABEL_17;
        }
      }
      else
      {
        sub_223FC7AE0(a1, v19);
        if (sub_223FCBA24(*(_QWORD *)(v19 + 32), *(unsigned __int8 *)(a1 + 217), 0, (uint64_t)__p))
        {
          v23 = *(_QWORD **)(a2 + 8);
          if ((unint64_t)v23 >= *(_QWORD *)(a2 + 16))
          {
            v24 = sub_2232EA89C((char **)a2, (uint64_t)__p);
          }
          else
          {
            *v23 = 0;
            v23[1] = 0;
            v23[2] = 0;
            *(_OWORD *)v23 = *(_OWORD *)__p;
            v23[2] = v26;
            __p[0] = 0;
            __p[1] = 0;
            v26 = 0;
            v24 = (char *)(v23 + 3);
          }
          *(_QWORD *)(a2 + 8) = v24;
        }
      }
      v22 = __p[0];
      if (__p[0])
        goto LABEL_32;
LABEL_17:
      v17 = *(_QWORD *)(a1 + 232);
      v16 = *(_QWORD *)(a1 + 240);
    }
  }
}

void sub_223FCC588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223FCC5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  char *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  int8x8_t v13;
  int8x8_t v14;
  int8x8_t v15;
  int8x8_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  char *v22;
  size_t v23;
  char *v24;
  uint64_t v25;
  int8x8_t *v26;
  uint64_t v27;
  unint64_t v28;
  int8x8_t *v29;
  uint64_t v30;
  const double *v31;
  uint64_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  const double *v41;
  int8x16_t v42;
  uint64_t v43;
  int8x16_t v44;
  uint64_t v45;
  int8x16_t v46;
  uint64_t v47;
  int8x16_t v48;
  uint64_t v49;
  int8x8_t v50;
  int8x8_t v51;
  int64x2_t v52;
  int64x2_t v53;
  void *__p;
  _BYTE *v55;
  uint64_t v56;
  float64x2x2_t v57;
  float64x2x2_t v58;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v7 = *(char **)a3;
  v6 = *(char **)(a3 + 8);
  if (v6 != *(char **)a3)
  {
    v8 = *(char **)(a3 + 8);
    do
    {
      v10 = (void *)*((_QWORD *)v8 - 3);
      v8 -= 24;
      v9 = v10;
      if (v10)
      {
        *((_QWORD *)v6 - 2) = v9;
        operator delete(v9);
      }
      v6 = v8;
    }
    while (v8 != v7);
    *(_QWORD *)(a3 + 8) = v7;
  }
  if (*(_BYTE *)(a1 + 224))
    sub_2232EA6AC(a3, (uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 3);
  v11 = *(_QWORD *)(a1 + 232);
  if (*(_QWORD *)(a1 + 240) != v11)
  {
    v12 = 0;
    v52 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v53 = vdupq_n_s64(0x8000000000000000);
    do
    {
      v17 = *(_QWORD *)(v11 + 8 * v12);
      if (!v17)
        goto LABEL_14;
      v18 = *(_QWORD *)(v17 + 32);
      if (!v18)
        goto LABEL_14;
      if (*(_BYTE *)(v17 + 120))
      {
        __p = 0;
        v55 = 0;
        v56 = 0;
        if (sub_223FCBA24(v18, *(unsigned __int8 *)(a1 + 217), 1, (uint64_t)&__p))
        {
          v19 = *(_QWORD **)(a3 + 8);
          if ((unint64_t)v19 >= *(_QWORD *)(a3 + 16))
          {
            v24 = sub_2237923C4((char **)a3, (uint64_t)&__p);
          }
          else
          {
            *v19 = 0;
            v19[1] = 0;
            v19[2] = 0;
            v20 = __p;
            v21 = v55 - (_BYTE *)__p;
            if (v55 != __p)
            {
              if (v21 < 0)
                sub_22316E078();
              v22 = (char *)operator new(v55 - (_BYTE *)__p);
              *v19 = v22;
              v19[1] = v22;
              v19[2] = &v22[16 * (v21 >> 4)];
              v23 = v21 & 0xFFFFFFFFFFFFFFF0;
              memcpy(v22, v20, v23);
              v19[1] = &v22[v23];
            }
            v24 = (char *)(v19 + 3);
            *(_QWORD *)(a3 + 8) = v19 + 3;
          }
          *(_QWORD *)(a3 + 8) = v24;
        }
        if (__p)
        {
          v55 = __p;
          operator delete(__p);
        }
        goto LABEL_14;
      }
      if (*(_QWORD *)(v17 + 88) > *(_QWORD *)(v17 + 72) && *(_QWORD *)(v17 + 80) > *(_QWORD *)(v17 + 64))
        goto LABEL_13;
      sub_223FC7AE0(a1, v17);
      v25 = *(_QWORD *)(v17 + 32);
      if (!v25 || !sub_223FCBA24(v25, *(unsigned __int8 *)(a1 + 217), 0, v17 + 96))
        goto LABEL_14;
      v27 = *(_QWORD *)(v17 + 96);
      v26 = *(int8x8_t **)(v17 + 104);
      if ((int8x8_t *)v27 == v26)
      {
        v13 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
        v14 = (int8x8_t)0x8000000000000000;
        v15 = (int8x8_t)0x8000000000000000;
        v16 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v28 = (unint64_t)&v26[-2] - v27;
        if (v28 < 0x30)
        {
          v15 = (int8x8_t)0x8000000000000000;
          v16 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
          v13 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
          v14 = (int8x8_t)0x8000000000000000;
          v29 = *(int8x8_t **)(v17 + 96);
          do
          {
LABEL_38:
            v50 = *v29;
            v51 = v29[1];
            v29 += 2;
            if (*(_QWORD *)&v50 < *(_QWORD *)&v16)
              v16 = v50;
            if (*(_QWORD *)&v50 > *(_QWORD *)&v14)
              v14 = v50;
            if (*(_QWORD *)&v51 < *(_QWORD *)&v13)
              v13 = v51;
            if (*(_QWORD *)&v51 > *(_QWORD *)&v15)
              v15 = v51;
          }
          while (v29 != v26);
          goto LABEL_12;
        }
        v30 = (v28 >> 4) + 1;
        v29 = (int8x8_t *)(v27 + 16 * (v30 & 0x1FFFFFFFFFFFFFFCLL));
        v31 = (const double *)(v27 + 32);
        v32 = v30 & 0x1FFFFFFFFFFFFFFCLL;
        v33 = v52;
        v34 = v53;
        v35 = v52;
        v36 = v52;
        v37 = v52;
        v38 = v53;
        v39 = v53;
        v40 = v53;
        do
        {
          v41 = v31 - 4;
          v57 = vld2q_f64(v41);
          v58 = vld2q_f64(v31);
          v35 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v35, (int64x2_t)v57.val[0]), (int8x16_t)v57.val[0], (int8x16_t)v35);
          v36 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v36, (int64x2_t)v58.val[0]), (int8x16_t)v58.val[0], (int8x16_t)v36);
          v40 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v57.val[0], v40), (int8x16_t)v57.val[0], (int8x16_t)v40);
          v34 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v58.val[0], v34), (int8x16_t)v58.val[0], (int8x16_t)v34);
          v37 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v37, (int64x2_t)v57.val[1]), (int8x16_t)v57.val[1], (int8x16_t)v37);
          v33 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v33, (int64x2_t)v58.val[1]), (int8x16_t)v58.val[1], (int8x16_t)v33);
          v38 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v57.val[1], v38), (int8x16_t)v57.val[1], (int8x16_t)v38);
          v39 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v58.val[1], v39), (int8x16_t)v58.val[1], (int8x16_t)v39);
          v31 += 8;
          v32 -= 4;
        }
        while (v32);
        v42 = vbslq_s8((int8x16_t)vcgtq_s64(v40, v34), (int8x16_t)v40, (int8x16_t)v34);
        v43 = vextq_s8(v42, v42, 8uLL).u64[0];
        v14 = vbsl_s8((int8x8_t)vcgtd_s64(v42.i64[0], v43), *(int8x8_t *)v42.i8, (int8x8_t)v43);
        v44 = vbslq_s8((int8x16_t)vcgtq_s64(v38, v39), (int8x16_t)v38, (int8x16_t)v39);
        v45 = vextq_s8(v44, v44, 8uLL).u64[0];
        v15 = vbsl_s8((int8x8_t)vcgtd_s64(v44.i64[0], v45), *(int8x8_t *)v44.i8, (int8x8_t)v45);
        v46 = vbslq_s8((int8x16_t)vcgtq_s64(v33, v37), (int8x16_t)v37, (int8x16_t)v33);
        v47 = vextq_s8(v46, v46, 8uLL).u64[0];
        v13 = vbsl_s8((int8x8_t)vcgtd_s64(v47, v46.i64[0]), *(int8x8_t *)v46.i8, (int8x8_t)v47);
        v48 = vbslq_s8((int8x16_t)vcgtq_s64(v36, v35), (int8x16_t)v35, (int8x16_t)v36);
        v49 = vextq_s8(v48, v48, 8uLL).u64[0];
        v16 = vbsl_s8((int8x8_t)vcgtd_s64(v49, v48.i64[0]), *(int8x8_t *)v48.i8, (int8x8_t)v49);
        if (v30 != (v30 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_38;
      }
LABEL_12:
      *(int8x8_t *)(v17 + 64) = v16;
      *(int8x8_t *)(v17 + 72) = v13;
      *(int8x8_t *)(v17 + 80) = v14;
      *(int8x8_t *)(v17 + 88) = v15;
LABEL_13:
      sub_223FCC06C(a1, v17, a2);
LABEL_14:
      ++v12;
      v11 = *(_QWORD *)(a1 + 232);
    }
    while (v12 < (*(_QWORD *)(a1 + 240) - v11) >> 3);
  }
}

void sub_223FCC918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  void *v18;

  v18 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v18;
    operator delete(v18);
  }
  *(_QWORD *)(v15 + 8) = v16;
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223FCC954(uint64_t result, int a2, char a3, uint64_t a4, double a5)
{
  uint64_t v5;
  double *v9;
  double *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  double v16;
  double v17;
  unint64_t v18;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  double *v25;
  char *v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  unint64_t v33;
  double *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  double *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;

  if (result)
  {
    v5 = *(_QWORD *)(result + 16);
    if (v5 == result || (a3 & 1) == 0 && v5 == *(_QWORD *)(result + 24))
      return 0;
    v9 = *(double **)a4;
    v10 = *(double **)(a4 + 8);
    if (v10 != *(double **)a4)
    {
      *(_QWORD *)(a4 + 8) = v9;
      v10 = v9;
    }
    if (a2)
      v11 = (uint64_t *)result;
    else
      v11 = (uint64_t *)v5;
    if (a2)
      v12 = (uint64_t **)(result + 24);
    else
      v12 = (uint64_t **)(v5 + 16);
    v14 = *v11;
    v13 = v11[1];
    v15 = *v12;
    v16 = (double)*v11 * a5;
    v17 = (double)v13 * a5;
    v18 = *(_QWORD *)(a4 + 16);
    if ((unint64_t)v10 < v18)
    {
      *v10 = v16;
      v10[1] = v17;
      v19 = v10 + 2;
      goto LABEL_30;
    }
    v20 = ((char *)v10 - (char *)v9) >> 4;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 60)
LABEL_82:
      sub_22316E078();
    v22 = v18 - (_QWORD)v9;
    if (v22 >> 3 > v21)
      v21 = v22 >> 3;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
      v23 = 0xFFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 60)
LABEL_83:
        sub_223174E94();
      v24 = (char *)operator new(16 * v23);
      v25 = (double *)&v24[16 * v20];
      v26 = &v24[16 * v23];
      *v25 = v16;
      v25[1] = v17;
      v19 = v25 + 2;
      if (v10 == v9)
        goto LABEL_28;
    }
    else
    {
      v25 = (double *)(16 * v20);
      v26 = 0;
      *v25 = v16;
      v25[1] = v17;
      v19 = (double *)(16 * v20 + 16);
      if (v10 == v9)
        goto LABEL_28;
    }
    do
    {
      *((_OWORD *)v25 - 1) = *((_OWORD *)v10 - 1);
      v25 -= 2;
      v10 -= 2;
    }
    while (v10 != v9);
    v9 = *(double **)a4;
LABEL_28:
    *(_QWORD *)a4 = v25;
    *(_QWORD *)(a4 + 8) = v19;
    *(_QWORD *)(a4 + 16) = v26;
    if (v9)
      operator delete(v9);
LABEL_30:
    *(_QWORD *)(a4 + 8) = v19;
    if (v15 != v11)
    {
      while (1)
      {
        v29 = *v15;
        if (*v15 == v14)
        {
          v30 = v15[1];
          if (v30 == v13)
            goto LABEL_34;
        }
        else
        {
          v30 = v15[1];
        }
        v31 = (double)v29 * a5;
        v32 = (double)v30 * a5;
        v33 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v19 >= v33)
          break;
        *v19 = v31;
        v19[1] = v32;
        v27 = v19 + 2;
LABEL_33:
        *(_QWORD *)(a4 + 8) = v27;
        v19 = v27;
        v14 = v29;
        v13 = v30;
LABEL_34:
        if (a2)
          v28 = 3;
        else
          v28 = 2;
        v15 = (uint64_t *)v15[v28];
        if (v15 == v11)
          goto LABEL_59;
      }
      v34 = *(double **)a4;
      v35 = ((uint64_t)v19 - *(_QWORD *)a4) >> 4;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 60)
        goto LABEL_82;
      v37 = v33 - (_QWORD)v34;
      if (v37 >> 3 > v36)
        v36 = v37 >> 3;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
        v38 = 0xFFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
      {
        if (v38 >> 60)
          goto LABEL_83;
        v39 = (char *)operator new(16 * v38);
        v40 = (double *)&v39[16 * v35];
        *v40 = v31;
        v40[1] = v32;
        v41 = (uint64_t)v40;
        if (v19 == v34)
          goto LABEL_56;
      }
      else
      {
        v39 = 0;
        v40 = (double *)(16 * v35);
        *v40 = v31;
        v40[1] = v32;
        v41 = 16 * v35;
        if (v19 == v34)
          goto LABEL_56;
      }
      do
      {
        *(_OWORD *)(v41 - 16) = *((_OWORD *)v19 - 1);
        v41 -= 16;
        v19 -= 2;
      }
      while (v19 != v34);
      v19 = *(double **)a4;
LABEL_56:
      v27 = v40 + 2;
      *(_QWORD *)a4 = v41;
      *(_QWORD *)(a4 + 8) = v40 + 2;
      *(_QWORD *)(a4 + 16) = &v39[16 * v38];
      if (v19)
        operator delete(v19);
      goto LABEL_33;
    }
LABEL_59:
    if ((double *)((char *)v19 - *(_QWORD *)a4) != (double *)48)
      return 1;
    v42 = (_QWORD *)v11[2];
    v43 = (uint64_t *)v42[2];
    if (v43 != (uint64_t *)v11[3])
      return 1;
    v44 = *v43;
    v45 = *v43 - *v42;
    if (v45 < 0)
      v45 = *v42 - *v43;
    if ((unint64_t)v45 > 1)
      goto LABEL_79;
    v46 = v43[1] - v42[1];
    if (v46 < 0)
      v46 = v42[1] - v43[1];
    if ((unint64_t)v46 >= 2)
    {
LABEL_79:
      v47 = *v11;
      v48 = *v11 - *v42;
      if (v48 < 0)
        v48 = *v42 - *v11;
      if ((unint64_t)v48 > 1)
        goto LABEL_86;
      v49 = v11[1] - v42[1];
      if (v49 < 0)
        v49 = -v49;
      if ((unint64_t)v49 >= 2)
      {
LABEL_86:
        v50 = v47 - v44;
        if (v47 - v44 < 0)
          v50 = v44 - v47;
        if (v50 > 1)
          return 1;
        v51 = v11[1] - v43[1];
        if (v51 < 0)
          v51 = -v51;
        if ((unint64_t)v51 >= 2)
          return 1;
      }
    }
    return 0;
  }
  return result;
}

void sub_223FCCCD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  char *v8;
  void *v9;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t i;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  char *v24;
  void *__p[2];
  uint64_t v26;

  v7 = *(char **)a2;
  v6 = *(char **)(a2 + 8);
  if (v6 != *(char **)a2)
  {
    v8 = *(char **)(a2 + 8);
    do
    {
      v10 = (void *)*((_QWORD *)v8 - 3);
      v8 -= 24;
      v9 = v10;
      if (v10)
      {
        *((_QWORD *)v6 - 2) = v9;
        operator delete(v9);
      }
      v6 = v8;
    }
    while (v8 != v7);
    *(_QWORD *)(a2 + 8) = v7;
  }
  sub_2232EA6AC(a2, (uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 3);
  if (a3)
  {
    v12 = *(char **)a3;
    v11 = *(char **)(a3 + 8);
    if (v11 != *(char **)a3)
    {
      v13 = *(char **)(a3 + 8);
      do
      {
        v15 = (void *)*((_QWORD *)v13 - 3);
        v13 -= 24;
        v14 = v15;
        if (v15)
        {
          *((_QWORD *)v11 - 2) = v14;
          operator delete(v14);
        }
        v11 = v13;
      }
      while (v13 != v12);
      *(_QWORD *)(a3 + 8) = v12;
    }
    sub_2232EA6AC(a3, (uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 3);
  }
  v17 = *(_QWORD *)(a1 + 232);
  v16 = *(_QWORD *)(a1 + 240);
  if (v16 != v17)
  {
    for (i = 0; i < (v16 - v17) >> 3; ++i)
    {
      v19 = *(_QWORD *)(v17 + 8 * i);
      v20 = *(_QWORD *)(v19 + 32);
      if (!v20)
        continue;
      __p[0] = 0;
      __p[1] = 0;
      v26 = 0;
      if (a3 && *(_BYTE *)(v19 + 120))
      {
        if (sub_223FCC954(v20, *(unsigned __int8 *)(a1 + 217), 1, (uint64_t)__p, *(double *)(a1 + 264)))
        {
          v21 = *(_QWORD **)(a3 + 8);
          if ((unint64_t)v21 >= *(_QWORD *)(a3 + 16))
          {
            *(_QWORD *)(a3 + 8) = sub_2232EA89C((char **)a3, (uint64_t)__p);
            v22 = __p[0];
            if (!__p[0])
              goto LABEL_17;
          }
          else
          {
            *v21 = 0;
            v21[1] = 0;
            v21[2] = 0;
            *(_OWORD *)v21 = *(_OWORD *)__p;
            v21[2] = v26;
            __p[0] = 0;
            __p[1] = 0;
            v26 = 0;
            *(_QWORD *)(a3 + 8) = v21 + 3;
            v22 = __p[0];
            if (!__p[0])
              goto LABEL_17;
          }
LABEL_32:
          __p[1] = v22;
          operator delete(v22);
          goto LABEL_17;
        }
      }
      else
      {
        sub_223FC7AE0(a1, v19);
        if (sub_223FCC954(*(_QWORD *)(v19 + 32), *(unsigned __int8 *)(a1 + 217), 0, (uint64_t)__p, *(double *)(a1 + 264)))
        {
          v23 = *(_QWORD **)(a2 + 8);
          if ((unint64_t)v23 >= *(_QWORD *)(a2 + 16))
          {
            v24 = sub_2232EA89C((char **)a2, (uint64_t)__p);
          }
          else
          {
            *v23 = 0;
            v23[1] = 0;
            v23[2] = 0;
            *(_OWORD *)v23 = *(_OWORD *)__p;
            v23[2] = v26;
            __p[0] = 0;
            __p[1] = 0;
            v26 = 0;
            v24 = (char *)(v23 + 3);
          }
          *(_QWORD *)(a2 + 8) = v24;
        }
      }
      v22 = __p[0];
      if (__p[0])
        goto LABEL_32;
LABEL_17:
      v17 = *(_QWORD *)(a1 + 232);
      v16 = *(_QWORD *)(a1 + 240);
    }
  }
}

void sub_223FCCEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223FCCF04()
{
  sub_22316DBD4("vector");
}

void sub_223FCCF18(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(char **)a1;
    v9 = (uint64_t)&v5[-*(_QWORD *)a1];
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      sub_223FCCF04();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        sub_223174E94();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *v15 = *a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_32;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_32;
      v17 = (v16 >> 3) + 1;
      v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v18];
      v15 = (_QWORD *)((char *)v15 - v18);
      v19 = &v14[8 * v10 - 16];
      v20 = v5 - 16;
      v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          v23 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v14[8 * v13];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_QWORD *)v5 = *a2;
    v7 = v5 + 8;
  }
  *(_QWORD *)(a1 + 8) = v7;
  v24 = *(char **)a1;
  v25 = (uint64_t)v7 - *(_QWORD *)a1;
  if (v25 >= 9)
  {
    v26 = (((unint64_t)v25 >> 3) - 2) >> 1;
    v27 = &v24[8 * v26];
    v30 = *(v7 - 1);
    v29 = (char *)(v7 - 1);
    v28 = v30;
    v31 = *(_QWORD *)v27;
    if (*(_QWORD *)v27 < v30)
    {
      do
      {
        *(_QWORD *)v29 = v31;
        v29 = v27;
        if (!v26)
          break;
        v26 = (v26 - 1) >> 1;
        v27 = &v24[8 * v26];
        v31 = *(_QWORD *)v27;
      }
      while (*(_QWORD *)v27 < v28);
      *(_QWORD *)v29 = v28;
    }
  }
}

void sub_223FCD0D0(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  _QWORD *i;
  _OWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (_QWORD *)a2[2];
  v5 = a2;
  if (v4 != a2)
  {
    v6 = *a2;
    v5 = a2;
    do
    {
      v7 = v4;
      v8 = *v4;
      if (v6 != *v4 || v6 != *(_QWORD *)v5[3])
      {
        v9 = v5[1];
        if (v9 != v7[1] || v9 != *(_QWORD *)(v5[3] + 8))
          break;
      }
      v4 = (_QWORD *)v7[2];
      v6 = v8;
      v5 = v7;
    }
    while (v4 != a2);
  }
  v10 = operator new(0x10uLL);
  v11 = v10 + 1;
  *v10 = *(_OWORD *)v5;
  a1[1] = (uint64_t)(v10 + 1);
  a1[2] = (uint64_t)(v10 + 1);
  *a1 = (uint64_t)v10;
  for (i = (_QWORD *)v5[2]; i != a2; i = (_QWORD *)i[2])
  {
    while (1)
    {
      v14 = (_QWORD *)i[2];
      if (*i != *v14 || *i != *v5)
      {
        v15 = i[1];
        if (v15 != v14[1] || v15 != v5[1])
          break;
      }
      i = (_QWORD *)i[2];
      if (v14 == a2)
        return;
    }
    v16 = a1[2];
    if ((unint64_t)v11 < v16)
    {
      *v11 = *(_OWORD *)i;
      v13 = v11 + 1;
    }
    else
    {
      v17 = (_OWORD *)*a1;
      v18 = ((uint64_t)v11 - *a1) >> 4;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 60)
        sub_22316E078();
      v20 = v16 - (_QWORD)v17;
      if (v20 >> 3 > v19)
        v19 = v20 >> 3;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
        v21 = 0xFFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 60)
          sub_223174E94();
        v22 = (char *)operator new(16 * v21);
        v23 = &v22[16 * v18];
        *(_OWORD *)v23 = *(_OWORD *)i;
        v24 = (uint64_t)v23;
        if (v11 != v17)
        {
          do
          {
LABEL_30:
            *(_OWORD *)(v24 - 16) = *(v11 - 1);
            v24 -= 16;
            --v11;
          }
          while (v11 != v17);
          v11 = (_OWORD *)*a1;
          v13 = v23 + 16;
          *a1 = v24;
          a1[1] = (uint64_t)(v23 + 16);
          a1[2] = (uint64_t)&v22[16 * v21];
          if (!v11)
            goto LABEL_13;
LABEL_34:
          operator delete(v11);
          goto LABEL_13;
        }
      }
      else
      {
        v22 = 0;
        v23 = (char *)(16 * v18);
        *(_OWORD *)(16 * v18) = *(_OWORD *)i;
        v24 = 16 * v18;
        if (v11 != v17)
          goto LABEL_30;
      }
      v13 = v23 + 16;
      *a1 = v24;
      a1[1] = (uint64_t)(v23 + 16);
      a1[2] = (uint64_t)&v22[16 * v21];
      if (v11)
        goto LABEL_34;
    }
LABEL_13:
    a1[1] = (uint64_t)v13;
    v11 = v13;
    v5 = i;
  }
}

void sub_223FCD328(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_223FCD350(__n128 *a1, __n128 *a2, uint64_t (**a3)(__n128 *, __n128 *), uint64_t a4, char a5)
{
  __n128 *v8;
  unint64_t n128_u64;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 *v13;
  uint64_t (*v14)(__n128 *, __n128 *);
  char v15;
  int v16;
  __n128 *v17;
  char v18;
  int v19;
  __n128 *v20;
  __n128 *v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 *v25;
  __n128 *v26;
  __n128 *v27;
  unint64_t v28;
  __n128 *v29;
  char v30;
  int v31;
  __n128 *v32;
  __n128 v33;
  __n128 *v34;
  __n128 *v35;
  __n128 *v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 *v40;
  __n128 *v41;
  unint64_t v42;
  __n128 *v43;
  char v44;
  int v45;
  __n128 *v46;
  __n128 v47;
  __n128 *v48;
  __n128 *v49;
  __n128 *v50;
  __n128 v51;
  __n128 v52;
  __n128 *v53;
  char v54;
  int v55;
  __n128 *v56;
  __n128 *v57;
  __n128 *v58;
  __n128 *v59;
  __n128 *v60;
  __n128 *v61;
  __n128 *v62;
  __n128 v63;
  __n128 *v64;
  __n128 v65;
  uint64_t v66;
  __n128 v67;
  __n128 *v68;
  __n128 *v69;
  __n128 *v70;
  __n128 v71;
  __n128 *v72;
  BOOL v73;
  __n128 v74;
  __n128 *v75;
  int v76;
  __n128 *v77;
  __n128 v78;
  __n128 *v79;
  __n128 v80;
  __n128 *v81;
  char v82;
  int v83;
  __n128 *v84;
  __n128 v85;
  __n128 v86;
  __n128 *v87;
  __n128 *v88;
  __n128 v89;
  __n128 v90;
  __n128 v91;
  __n128 v92;
  __int128 v93;
  __n128 v94;
  __int128 v95;
  __n128 *v96;
  uint64_t v97;
  __n128 *v98;
  _OWORD *v99;
  __n128 *v100;
  uint64_t v101;
  _OWORD *v102;
  __int128 v103;
  int64_t v104;
  BOOL v105;
  uint64_t v106;
  __n128 *v107;
  __n128 *v108;
  __n128 *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __n128 *v113;
  uint64_t v114;
  __n128 *v115;
  __n128 *v116;
  __n128 *v117;
  uint64_t v118;
  uint64_t v119;
  __n128 *v120;
  uint64_t v121;
  unint64_t v122;
  __n128 *v123;
  __n128 *v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __int128 v128;
  __n128 v129;
  __n128 *v130;
  __n128 *v131;
  __n128 *v132;
  __n128 *v133;
  __n128 v134;
  char v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 *v139;
  __n128 *v140;
  __n128 *v141;
  unint64_t v142;
  __n128 *v143;
  __n128 *v144;
  __n128 *v145;
  __n128 *v146;
  int64_t v149;
  __n128 v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;

BOOL sub_223FCE500(uint64_t a1, __n128 *a2, uint64_t (**a3)(__n128 *, __n128 *))
{
  uint64_t v6;
  _BOOL8 result;
  __n128 *v8;
  __n128 v9;
  __n128 v10;
  __n128 *v11;
  __n128 *v12;
  char v13;
  int v14;
  __n128 *v15;
  __n128 v16;
  __n128 v17;
  __n128 *v18;
  __n128 *v19;
  __n128 *v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __int128 v25;
  __n128 v26;
  __int128 v27;
  __n128 *v28;
  __n128 *v29;
  char v30;
  int v31;
  __int128 *v32;
  __n128 v33;
  __int128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int128 v38;
  __int128 v39;
  __n128 v40;
  __int128 v41;
  __n128 v42;
  __int128 v43;
  __int128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __int128 v48;
  __n128 *v49;
  uint64_t v50;
  int v51;
  __n128 *v52;
  __n128 v53;
  uint64_t v54;
  __n128 *v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;

  v6 = ((uint64_t)a2 - a1) >> 5;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 2;
      if ((*a3)(a2 - 2, (__n128 *)a1))
      {
        v9 = *(__n128 *)a1;
        v10 = *(__n128 *)(a1 + 16);
        *(__n128 *)a1 = *v8;
        *(__n128 *)(a1 + 16) = a2[-1];
        *v8 = v9;
        a2[-1] = v10;
      }
      return 1;
    case 3:
      v11 = (__n128 *)(a1 + 32);
      v12 = a2 - 2;
      v13 = (*a3)((__n128 *)(a1 + 32), (__n128 *)a1);
      v14 = (*a3)(a2 - 2, (__n128 *)(a1 + 32));
      if ((v13 & 1) != 0)
      {
        v15 = (__n128 *)(a1 + 16);
        if (v14)
        {
          v16 = *(__n128 *)a1;
          v17 = *v15;
          *(__n128 *)a1 = *v12;
        }
        else
        {
          v45 = *(__n128 *)a1;
          v46 = *v15;
          *(__n128 *)a1 = *v11;
          *v15 = *(__n128 *)(a1 + 48);
          *v11 = v45;
          *(__n128 *)(a1 + 48) = v46;
          if (!(*a3)(a2 - 2, (__n128 *)(a1 + 32)))
            return 1;
          v15 = (__n128 *)(a1 + 48);
          v16 = *v11;
          v17 = *(__n128 *)(a1 + 48);
          *v11 = *v12;
        }
        *v15 = a2[-1];
        *v12 = v16;
        a2[-1] = v17;
      }
      else if (v14)
      {
        v35 = *v11;
        v36 = *(__n128 *)(a1 + 48);
        *v11 = *v12;
        *(__n128 *)(a1 + 48) = a2[-1];
        *v12 = v35;
        a2[-1] = v36;
LABEL_17:
        if ((*a3)(v11, (__n128 *)a1))
        {
          v37 = *(__n128 *)a1;
          v38 = *(_OWORD *)(a1 + 16);
          v39 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v11;
          *(_OWORD *)(a1 + 16) = v39;
          *v11 = v37;
          *(_OWORD *)(a1 + 48) = v38;
        }
      }
      return 1;
    case 4:
      sub_223FCE960((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), a2 - 2, a3);
      return 1;
    case 5:
      v11 = (__n128 *)(a1 + 32);
      v18 = (__n128 *)(a1 + 64);
      v19 = (__n128 *)(a1 + 96);
      v20 = a2 - 2;
      v21 = sub_223FCE960((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a1 + 96), a3);
      if (!((unsigned int (*)(__n128 *, uint64_t, __n128))*a3)(&a2[-2], a1 + 96, v21))
        return 1;
      v22 = *v19;
      v23 = *(__n128 *)(a1 + 112);
      *v19 = *v20;
      *(__n128 *)(a1 + 112) = a2[-1];
      *v20 = v22;
      a2[-1] = v23;
      if (!(*a3)((__n128 *)(a1 + 96), (__n128 *)(a1 + 64)))
        return 1;
      v24 = *v18;
      v25 = *(_OWORD *)(a1 + 80);
      *v18 = *v19;
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 112);
      *v19 = v24;
      *(_OWORD *)(a1 + 112) = v25;
      if (!(*a3)((__n128 *)(a1 + 64), (__n128 *)(a1 + 32)))
        return 1;
      v26 = *v11;
      v27 = *(_OWORD *)(a1 + 48);
      *v11 = *v18;
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a1 + 80);
      *v18 = v26;
      *(_OWORD *)(a1 + 80) = v27;
      goto LABEL_17;
    default:
      v28 = (__n128 *)(a1 + 64);
      v29 = (__n128 *)(a1 + 32);
      v30 = (*a3)((__n128 *)(a1 + 32), (__n128 *)a1);
      v31 = (*a3)((__n128 *)(a1 + 64), (__n128 *)(a1 + 32));
      if ((v30 & 1) != 0)
      {
        v32 = (__int128 *)(a1 + 16);
        if (v31)
        {
          v33 = *(__n128 *)a1;
          v34 = *v32;
          *(__n128 *)a1 = *v28;
        }
        else
        {
          v47 = *(__n128 *)a1;
          v48 = *v32;
          *(__n128 *)a1 = *v29;
          *v32 = *(_OWORD *)(a1 + 48);
          *v29 = v47;
          *(_OWORD *)(a1 + 48) = v48;
          if (!(*a3)((__n128 *)(a1 + 64), (__n128 *)(a1 + 32)))
            goto LABEL_28;
          v32 = (__int128 *)(a1 + 48);
          v33 = *v29;
          v34 = *(_OWORD *)(a1 + 48);
          *v29 = *v28;
        }
        *v32 = *(_OWORD *)(a1 + 80);
        *v28 = v33;
        *(_OWORD *)(a1 + 80) = v34;
      }
      else if (v31)
      {
        v40 = *v29;
        v41 = *(_OWORD *)(a1 + 48);
        *v29 = *v28;
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a1 + 80);
        *v28 = v40;
        *(_OWORD *)(a1 + 80) = v41;
        if ((*a3)((__n128 *)(a1 + 32), (__n128 *)a1))
        {
          v42 = *(__n128 *)a1;
          v43 = *(_OWORD *)(a1 + 16);
          v44 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v29;
          *(_OWORD *)(a1 + 16) = v44;
          *v29 = v42;
          *(_OWORD *)(a1 + 48) = v43;
        }
      }
LABEL_28:
      v49 = (__n128 *)(a1 + 96);
      if ((__n128 *)(a1 + 96) == a2)
        return 1;
      v50 = 0;
      v51 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v49, v28))
    {
      v53 = v49[1];
      v57 = *v49;
      v58 = v53;
      v54 = v50;
      do
      {
        v55 = (__n128 *)(a1 + v54);
        v56 = *(__n128 *)(a1 + v54 + 80);
        v55[6] = *(__n128 *)(a1 + v54 + 64);
        v55[7] = v56;
        if (v54 == -64)
        {
          v52 = (__n128 *)a1;
          goto LABEL_31;
        }
        v54 -= 32;
      }
      while (((*a3)(&v57, v55 + 2) & 1) != 0);
      v52 = (__n128 *)(a1 + v54 + 96);
LABEL_31:
      *v52 = v57;
      v55[5] = v58;
      if (++v51 == 8)
        return &v49[2] == a2;
    }
    v28 = v49;
    v50 += 32;
    v49 += 2;
    if (v49 == a2)
      return 1;
  }
}

__n128 sub_223FCE960(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, uint64_t (**a5)(__n128 *, __n128 *))
{
  char v10;
  int v11;
  __n128 *v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 result;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;

  v10 = (*a5)(a2, a1);
  v11 = (*a5)(a3, a2);
  if ((v10 & 1) != 0)
  {
    v12 = a1 + 1;
    if (v11)
    {
      v13 = *a1;
      v14 = *v12;
      *a1 = *a3;
LABEL_9:
      *v12 = a3[1];
      *a3 = v13;
      a3[1] = v14;
      goto LABEL_10;
    }
    v19 = *a1;
    v20 = *v12;
    *a1 = *a2;
    *v12 = a2[1];
    *a2 = v19;
    a2[1] = v20;
    if ((*a5)(a3, a2))
    {
      v12 = a2 + 1;
      v13 = *a2;
      v14 = a2[1];
      *a2 = *a3;
      goto LABEL_9;
    }
  }
  else if (v11)
  {
    v15 = *a2;
    v16 = a2[1];
    *a2 = *a3;
    a2[1] = a3[1];
    *a3 = v15;
    a3[1] = v16;
    if ((*a5)(a2, a1))
    {
      v17 = *a1;
      v18 = a1[1];
      *a1 = *a2;
      a1[1] = a2[1];
      *a2 = v17;
      a2[1] = v18;
    }
  }
LABEL_10:
  if ((*a5)(a4, a3))
  {
    v22 = *a3;
    v23 = a3[1];
    *a3 = *a4;
    a3[1] = a4[1];
    *a4 = v22;
    a4[1] = v23;
    if ((*a5)(a3, a2))
    {
      v24 = *a2;
      v25 = a2[1];
      *a2 = *a3;
      a2[1] = a3[1];
      *a3 = v24;
      a3[1] = v25;
      if ((*a5)(a2, a1))
      {
        result = *a1;
        v26 = a1[1];
        *a1 = *a2;
        a1[1] = a2[1];
        *a2 = result;
        a2[1] = v26;
      }
    }
  }
  return result;
}

uint64_t *sub_223FCEB28(uint64_t *result, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t v15;
  double v16;
  uint64_t v17;

  v2 = *((_DWORD *)result + 12);
  v3 = result[14];
  v4 = 24;
  if (v2 > 0)
    v4 = 16;
  v5 = *(uint64_t **)(v3 + v4);
  v6 = v5[1];
  if (v6 == result[3])
  {
    v7 = *v5;
    v8 = *result;
    if (a2)
    {
      if (v7 >= result[2] == v8 < result[2])
        return result;
      if (v2 <= 0)
      {
        v13 = *(uint64_t **)(v3 + 24);
        do
        {
          v10 = v7;
          result[14] = (uint64_t)v13;
          result[2] = v7;
          result[3] = v6;
          if ((v13[4] & 4) != 0)
            break;
          v13 = (uint64_t *)v13[3];
          if (v13[1] != v6)
            break;
          v7 = *v13;
        }
        while (v8 < v10 != *v13 >= v10);
      }
      else
      {
        v9 = *(uint64_t **)(v3 + 16);
        do
        {
          v10 = v7;
          result[14] = (uint64_t)v9;
          result[2] = v7;
          result[3] = v6;
          if ((v9[4] & 4) != 0)
            break;
          v9 = (uint64_t *)v9[2];
          if (v9[1] != v6)
            break;
          v7 = *v9;
        }
        while (v8 < v10 != *v9 >= v10);
      }
    }
    else if (v2 <= 0)
    {
      v12 = *(uint64_t **)(v3 + 24);
      do
      {
        v10 = v7;
        result[14] = (uint64_t)v12;
        result[2] = v7;
        result[3] = v6;
        if ((v12[4] & 4) != 0)
          break;
        v12 = (uint64_t *)v12[3];
        v7 = *v12;
      }
      while (v12[1] == v6);
    }
    else
    {
      v11 = *(uint64_t **)(v3 + 16);
      do
      {
        v10 = v7;
        result[14] = (uint64_t)v11;
        result[2] = v7;
        result[3] = v6;
        if ((v11[4] & 4) != 0)
          break;
        v11 = (uint64_t *)v11[2];
        v7 = *v11;
      }
      while (v11[1] == v6);
    }
    v14 = __OFSUB__(v10, v8);
    v15 = v10 - v8;
    v16 = 1.79769313e308;
    if (!((v15 < 0) ^ v14 | (v15 == 0)))
      v16 = -1.79769313e308;
    v17 = v6 - result[1];
    if (v17)
      v16 = (double)v15 / (double)v17;
    *((double *)result + 5) = v16;
  }
  return result;
}

char *sub_223FCECA8(char *result, char *a2, uint64_t a3, unint64_t a4, char **a5, uint64_t a6)
{
  char **v7;
  _QWORD **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char **v34;
  char **v35;
  char **v36;
  char **v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t i;
  unint64_t v50;

  if (a4 < 2)
    return result;
  v7 = (char **)result;
  if (a4 != 2)
  {
    if ((uint64_t)a4 > 0)
    {
      v17 = a4 >> 1;
      v18 = &result[8 * (a4 >> 1)];
      if ((uint64_t)a4 > a6)
      {
        sub_223FCECA8(result, &result[8 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
        v19 = a4 - v17;
        sub_223FCECA8(v18, a2, a3, v19, a5, a6);
        return (char *)sub_223FCF5BC((uint64_t)v7, v18, a2, v17, v19, (unint64_t)a5, a6);
      }
      sub_223FCF0E4(result, &result[8 * (a4 >> 1)], a3, a4 >> 1, a5);
      v33 = a4 - v17;
      v34 = &a5[v17];
      result = sub_223FCF0E4((char *)&v7[a4 >> 1], a2, a3, v33, v34);
      v50 = a4;
      v35 = &a5[a4];
      v36 = v34;
      v37 = a5;
      while (1)
      {
        while (1)
        {
          if (v36 == v35)
          {
            if (v37 != v34)
            {
              v44 = 0;
              do
              {
                v45 = v37[v44];
                v37[v44] = 0;
                result = v7[v44];
                v7[v44] = v45;
                if (result)
                  result = (char *)MEMORY[0x227684CE8](result, 0x1020C4034E03FFCLL);
                ++v44;
              }
              while (&v37[v44] != v34);
            }
LABEL_54:
            if (a5)
            {
              v48 = v50;
              for (i = 0; i < v48; ++i)
              {
                result = a5[i];
                a5[i] = 0;
                if (result)
                {
                  result = (char *)MEMORY[0x227684CE8](result, 0x1020C4034E03FFCLL);
                  v48 = v50;
                }
              }
            }
            return result;
          }
          v38 = *v37;
          v39 = *(_QWORD **)*v37;
          v40 = v39[1];
          v41 = *v36;
          v42 = *(_QWORD **)*v36;
          v43 = v42[1];
          if (v40 == v43)
            break;
          if (v40 >= v43)
            goto LABEL_37;
LABEL_42:
          *v36 = 0;
          result = *v7;
          *v7 = v41;
          if (result)
            result = (char *)MEMORY[0x227684CE8](result, 0x1020C4034E03FFCLL);
          ++v36;
          ++v7;
          if (v37 == v34)
          {
LABEL_49:
            if (v36 != v35)
            {
              v46 = 0;
              do
              {
                v47 = v36[v46];
                v36[v46] = 0;
                result = v7[v46];
                v7[v46] = v47;
                if (result)
                  result = (char *)MEMORY[0x227684CE8](result, 0x1020C4034E03FFCLL);
                ++v46;
              }
              while (&v36[v46] != v35);
            }
            goto LABEL_54;
          }
        }
        if (*v39 > *v42)
          goto LABEL_42;
LABEL_37:
        *v37 = 0;
        result = *v7;
        *v7 = v38;
        if (result)
          result = (char *)MEMORY[0x227684CE8](result, 0x1020C4034E03FFCLL);
        ++v37;
        ++v7;
        if (v37 == v34)
          goto LABEL_49;
      }
    }
    if (result == a2)
      return result;
    v20 = result + 8;
    if (result + 8 == a2)
      return result;
    v21 = 0;
    v22 = result;
LABEL_16:
    v23 = *(_QWORD *)v22;
    v22 = v20;
    v24 = *(_QWORD *)(*(_QWORD *)v23 + 8);
    v25 = *(char **)v20;
    v26 = **(_QWORD ***)v20;
    v27 = v26[1];
    if (v24 == v27)
    {
      if (**(_QWORD **)v23 <= *v26)
        goto LABEL_15;
    }
    else if (v24 >= v27)
    {
      goto LABEL_15;
    }
    v28 = 0;
    *(_QWORD *)v20 = 0;
    for (j = v21; ; j -= 8)
    {
      v30 = (uint64_t *)((char *)v7 + j);
      *v30 = 0;
      v30[1] = v23;
      if (v28)
        MEMORY[0x227684CE8](v28, 0x1020C4034E03FFCLL);
      if (!j)
      {
        result = *v7;
        *v7 = v25;
        if (result)
          goto LABEL_31;
        goto LABEL_15;
      }
      v23 = *(uint64_t *)((char *)v7 + j - 8);
      v31 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      v32 = *(_QWORD *)(*(_QWORD *)v25 + 8);
      if (v31 == v32)
      {
        if (**(_QWORD **)v23 <= **(_QWORD **)v25)
        {
LABEL_28:
          result = *(char **)((char *)v7 + j);
          *(char **)((char *)v7 + j) = v25;
          if (!result)
            goto LABEL_15;
LABEL_31:
          result = (char *)MEMORY[0x227684CE8](result, 0x1020C4034E03FFCLL);
LABEL_15:
          v20 = v22 + 8;
          v21 += 8;
          if (v22 + 8 == a2)
            return result;
          goto LABEL_16;
        }
      }
      else if (v31 >= v32)
      {
        goto LABEL_28;
      }
      v28 = *v30;
    }
  }
  v8 = *(_QWORD ***)result;
  v9 = **(_QWORD ***)result;
  v10 = v9[1];
  v11 = *((_QWORD *)a2 - 1);
  v12 = *(_QWORD *)(*(_QWORD *)v11 + 8);
  if (v10 == v12)
  {
    if (*v9 <= **(_QWORD **)v11)
      return result;
  }
  else if (v10 >= v12)
  {
    return result;
  }
  *(_QWORD *)result = v11;
  *((_QWORD *)a2 - 1) = v8;
  return result;
}

void sub_223FCF0D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223FCF53C((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_223FCF0E4(char *result, char *a2, uint64_t a3, unint64_t a4, char **a5)
{
  char **v5;
  char *v7;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  char **v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD **v24;
  _QWORD *v25;
  uint64_t v26;
  char **v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  _QWORD **v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD **v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  if (!a4)
    return result;
  v5 = a5;
  v7 = result;
  if (a4 == 1)
  {
    v10 = result;
LABEL_36:
    v38 = *(char **)v10;
    *(_QWORD *)v10 = 0;
    *v5 = v38;
    return result;
  }
  if (a4 == 2)
  {
    v10 = a2 - 8;
    v9 = (char *)*((_QWORD *)a2 - 1);
    v11 = **(_QWORD ***)result;
    v12 = v11[1];
    v13 = *(_QWORD *)(*(_QWORD *)v9 + 8);
    if (v12 == v13)
    {
      if (*v11 <= **(_QWORD **)v9)
      {
LABEL_6:
        v14 = result;
        v9 = *(char **)result;
LABEL_35:
        *(_QWORD *)v14 = 0;
        *a5 = v9;
        v5 = a5 + 1;
        goto LABEL_36;
      }
    }
    else if (v12 >= v13)
    {
      goto LABEL_6;
    }
    v14 = a2 - 8;
    v10 = result;
    goto LABEL_35;
  }
  if ((uint64_t)a4 <= 8)
  {
    if (result != a2)
    {
      v15 = *(char **)result;
      *(_QWORD *)result = 0;
      v16 = result + 8;
      *a5 = v15;
      if (result + 8 != a2)
      {
        v17 = 0;
        v18 = (uint64_t *)a5;
        do
        {
          v19 = (char **)v18;
          v21 = (char *)*v18++;
          v20 = v21;
          v22 = *(_QWORD **)v21;
          v23 = *(_QWORD *)(*(_QWORD *)v21 + 8);
          v24 = *(_QWORD ***)v16;
          v25 = **(_QWORD ***)v16;
          v26 = v25[1];
          if (v23 == v26)
          {
            if (*v22 <= *v25)
              goto LABEL_12;
          }
          else if (v23 >= v26)
          {
LABEL_12:
            *(_QWORD *)v16 = 0;
            *v18 = (uint64_t)v24;
            goto LABEL_13;
          }
          *v19 = 0;
          v19[1] = v20;
          v27 = v5;
          if (v19 != v5)
          {
            v28 = v17;
            while (1)
            {
              v29 = (uint64_t *)((char *)v5 + v28);
              v30 = *(uint64_t *)((char *)v5 + v28 - 8);
              v31 = *(_QWORD *)(*(_QWORD *)v30 + 8);
              v32 = **(_QWORD ***)v16;
              v33 = v32[1];
              if (v31 == v33)
              {
                if (**(_QWORD **)v30 <= *v32)
                {
                  v27 = v19;
                  break;
                }
              }
              else if (v31 >= v33)
              {
                v37 = *(char **)v16;
                *(_QWORD *)v16 = 0;
                result = *(char **)((char *)v5 + v28);
                *(char **)((char *)v5 + v28) = v37;
                if (result)
                  goto LABEL_30;
                goto LABEL_13;
              }
              v34 = *v29;
              *(v29 - 1) = 0;
              *v29 = v30;
              if (v34)
                MEMORY[0x227684CE8](v34, 0x1020C4034E03FFCLL);
              --v19;
              v28 -= 8;
              if (!v28)
              {
                v35 = *(char **)v16;
                *(_QWORD *)v16 = 0;
                result = *v5;
                *v5 = v35;
                if (result)
                  goto LABEL_30;
                goto LABEL_13;
              }
            }
          }
          v36 = *(char **)v16;
          *(_QWORD *)v16 = 0;
          result = *v27;
          *v27 = v36;
          if (result)
LABEL_30:
            result = (char *)MEMORY[0x227684CE8](result, 0x1020C4034E03FFCLL);
LABEL_13:
          v16 += 8;
          v17 += 8;
        }
        while (v16 != a2);
      }
    }
    return result;
  }
  v40 = a4 >> 1;
  v41 = 8 * (a4 >> 1);
  v42 = &result[v41];
  sub_223FCECA8(result, &result[v41], a3, a4 >> 1, a5, a4 >> 1);
  result = (char *)sub_223FCECA8(&v7[v41], a2, a3, a4 - v40, &v5[(unint64_t)v41 / 8], a4 - v40);
  v43 = (char *)(v5 + 1);
  v44 = v7;
  v45 = &v7[v41];
  do
  {
    while (1)
    {
      if (v45 == a2)
      {
        if (v44 == v42)
          return result;
        v55 = v43 - 8;
        v56 = &v7[8 * v40] - v44 - 8;
        if (v56 >= 0x78)
        {
          if (v44 >= &v43[v56 & 0xFFFFFFFFFFFFFFF8] || v55 >= &v44[(v56 & 0xFFFFFFFFFFFFFFF8) + 8])
          {
            v67 = 0;
            v68 = (v56 >> 3) + 1;
            v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
            v55 = &v43[v69 - 8];
            v57 = &v44[v69];
            v70 = v68 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v71 = &v43[v67];
              v72 = &v44[v67];
              v73 = *(_OWORD *)&v44[v67];
              v74 = *(_OWORD *)&v44[v67 + 16];
              *(_OWORD *)v72 = 0uLL;
              *((_OWORD *)v72 + 1) = 0uLL;
              *(_OWORD *)(v71 - 8) = v73;
              *(_OWORD *)(v71 + 8) = v74;
              v67 += 32;
              v70 -= 4;
            }
            while (v70);
            if (v68 == (v68 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v57 = v44;
          }
        }
        else
        {
          v57 = v44;
        }
        do
        {
          v75 = *(_QWORD *)v57;
          *(_QWORD *)v57 = 0;
          v57 += 8;
          *(_QWORD *)v55 = v75;
          v55 += 8;
        }
        while (v57 != v42);
        return result;
      }
      v46 = *(_QWORD ***)v44;
      v47 = **(_QWORD ***)v44;
      v48 = v47[1];
      v49 = *(_QWORD ***)v45;
      v50 = **(_QWORD ***)v45;
      v51 = v50[1];
      if (v48 == v51)
        break;
      if (v48 >= v51)
        goto LABEL_45;
LABEL_39:
      *(_QWORD *)v45 = 0;
      v45 += 8;
      *((_QWORD *)v43 - 1) = v49;
      v43 += 8;
      if (v44 == v42)
        goto LABEL_46;
    }
    if (*v47 > *v50)
      goto LABEL_39;
LABEL_45:
    *(_QWORD *)v44 = 0;
    v44 += 8;
    *((_QWORD *)v43 - 1) = v46;
    v43 += 8;
  }
  while (v44 != v42);
LABEL_46:
  if (v45 == a2)
    return result;
  v52 = v43 - 8;
  v53 = a2 - v45 - 8;
  if (v53 < 0x68)
  {
    v54 = v45;
    goto LABEL_61;
  }
  if (v45 < &v43[v53 & 0xFFFFFFFFFFFFFFF8] && v52 < &v45[(v53 & 0xFFFFFFFFFFFFFFF8) + 8])
  {
    v54 = v45;
    do
    {
LABEL_61:
      v66 = *(_QWORD *)v54;
      *(_QWORD *)v54 = 0;
      v54 += 8;
      *(_QWORD *)v52 = v66;
      v52 += 8;
    }
    while (v54 != a2);
    return result;
  }
  v58 = 0;
  v59 = (v53 >> 3) + 1;
  v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
  v52 = &v43[v60 - 8];
  v54 = &v45[v60];
  v61 = v59 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v62 = &v43[v58];
    v63 = &v45[v58];
    v64 = *(_OWORD *)&v45[v58];
    v65 = *(_OWORD *)&v45[v58 + 16];
    *(_OWORD *)v63 = 0uLL;
    *((_OWORD *)v63 + 1) = 0uLL;
    *(_OWORD *)(v62 - 8) = v64;
    *(_OWORD *)(v62 + 8) = v65;
    v58 += 32;
    v61 -= 4;
  }
  while (v61);
  if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_61;
  return result;
}

uint64_t *sub_223FCF53C(uint64_t *a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (unint64_t *)a1[1];
    v4 = *v3;
    if (*v3)
    {
      v5 = 0;
      do
      {
        v6 = *(_QWORD *)(v2 + 8 * v5);
        *(_QWORD *)(v2 + 8 * v5) = 0;
        if (v6)
        {
          MEMORY[0x227684CE8](v6, 0x1020C4034E03FFCLL);
          v4 = *v3;
        }
        ++v5;
      }
      while (v5 < v4);
    }
  }
  return a1;
}

uint64_t sub_223FCF5BC(uint64_t result, char *a2, char *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  char *v11;
  unint64_t v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  _QWORD **v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _BOOL4 v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD **v76;
  _QWORD **v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD **v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 *v91;
  _OWORD *v92;
  int64x2_t v93;
  uint64_t v94;
  int64x2_t v95;
  int64x2_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  _OWORD *v103;
  int64x2_t v104;
  uint64_t v105;
  int64x2_t v106;
  int64x2_t v107;
  __int128 v108;
  __int128 v109;
  unint64_t v110;

  if (!a5)
    return result;
  v11 = (char *)result;
  while (a4 > a7 && a5 > a7)
  {
    if (!a4)
      return result;
    v12 = 0;
    v13 = *(_QWORD ***)a2;
    v14 = **(_QWORD ***)a2;
    v15 = v14[1];
    v16 = -a4;
    while (1)
    {
      v18 = *(_QWORD **)&v11[v12];
      v19 = *(_QWORD *)(*v18 + 8);
      if (v19 == v15)
      {
        if (*(_QWORD *)*v18 > *v14)
          break;
        goto LABEL_8;
      }
      if (v19 < v15)
        break;
LABEL_8:
      v12 += 8;
      if (__CFADD__(v16++, 1))
        return result;
    }
    v20 = -v16;
    if (-v16 >= a5)
    {
      if (v16 == -1)
      {
        *(_QWORD *)&v11[v12] = v13;
        *(_QWORD *)a2 = v18;
        return result;
      }
      if (v16 > 0)
        v20 = 1 - v16;
      v32 = v20 >> 1;
      v24 = &v11[8 * (v20 >> 1) + v12];
      if (a2 == a3)
      {
        v22 = 0;
LABEL_29:
        v33 = a6;
        v34 = (8 * v22) >> 3;
        v23 = v24;
        v35 = &a2[8 * v22];
        if (v24 != a2)
          goto LABEL_33;
        goto LABEL_30;
      }
      v22 = 0;
      v43 = (a3 - a2) >> 3;
      v44 = **(_QWORD ***)v24;
      v45 = v44[1];
      while (2)
      {
        v46 = v43 >> 1;
        v47 = (v43 >> 1) + v22;
        v48 = **(_QWORD ***)&a2[8 * v47];
        v49 = v48[1];
        if (v45 == v49)
        {
          if (*v44 <= *v48)
            goto LABEL_43;
        }
        else if (v45 >= v49)
        {
LABEL_43:
          v43 = v46;
          if (!v46)
            goto LABEL_29;
          continue;
        }
        break;
      }
      v22 = v47 + 1;
      v46 = v43 + ~v46;
      goto LABEL_43;
    }
    if (a5 >= 0)
      v21 = a5;
    else
      v21 = a5 + 1;
    v22 = v21 >> 1;
    v23 = a2;
    v24 = &v11[v12];
    if (a2 - v11 != v12)
    {
      v25 = (uint64_t)(a2 - v11 - v12) >> 3;
      v26 = **(_QWORD ***)&a2[8 * v22];
      v27 = v26[1];
      v24 = &v11[v12];
      while (1)
      {
        v28 = v25 >> 1;
        v29 = &v24[8 * (v25 >> 1)];
        v30 = **(_QWORD ***)v29;
        v31 = v30[1];
        if (v31 == v27)
        {
          if (*v30 > *v26)
            goto LABEL_18;
        }
        else if (v31 < v27)
        {
          goto LABEL_18;
        }
        v24 = v29 + 8;
        v28 = v25 + ~v28;
LABEL_18:
        v25 = v28;
        if (!v28)
        {
          v23 = v24;
          break;
        }
      }
    }
    v33 = a6;
    v32 = (uint64_t)(v23 - v11 - v12) >> 3;
    v34 = v22;
    v35 = &a2[8 * v22];
    if (v24 != a2)
    {
LABEL_33:
      v36 = v23;
      if (v22)
      {
        v37 = *(_QWORD ***)v24;
        *(_QWORD *)v24 = v13;
        *(_QWORD *)a2 = v37;
        v36 = v24 + 8;
        if (v22 != 1)
        {
          v38 = a2 + 8;
          v39 = 8 * v22 - 8;
          do
          {
            if (v36 == a2)
              a2 = v38;
            v40 = *(_QWORD *)v36;
            *(_QWORD *)v36 = *(_QWORD *)v38;
            v36 += 8;
            *(_QWORD *)v38 = v40;
            v38 += 8;
            v39 -= 8;
          }
          while (v39);
        }
        if (v36 != a2)
        {
          v41 = v36;
          v42 = a2;
          while (1)
          {
            v50 = *(_QWORD **)v41;
            *(_QWORD *)v41 = *(_QWORD *)v42;
            v41 += 8;
            *(_QWORD *)v42 = v50;
            v42 += 8;
            v51 = v41 == a2;
            if (v42 == v35)
            {
              if (v41 == a2)
                goto LABEL_57;
              v42 = a2 + 8;
              v52 = v41;
              while (1)
              {
                v53 = *(_QWORD **)v41;
                *(_QWORD *)v52 = *(_QWORD *)a2;
                v52 += 8;
                *(_QWORD *)a2 = v53;
                v51 = v52 == a2;
                if (v42 != v35)
                  break;
                v41 = v52;
                if (v52 == a2)
                  goto LABEL_57;
              }
              v41 += 8;
            }
            if (v51)
              a2 = v42;
          }
        }
      }
      goto LABEL_57;
    }
LABEL_30:
    v36 = v35;
LABEL_57:
    a4 = -(v32 + v16);
    v54 = a5 - v34;
    if (v32 + v34 >= a5 - (v32 + v34) - v16)
    {
      v59 = v35;
      v11 += v12;
      a6 = v33;
      result = sub_223FCF5BC(v36, v59);
      a4 = v32;
      a3 = v36;
      a5 = v34;
      a2 = v23;
      if (!v34)
        return result;
    }
    else
    {
      v55 = &v11[v12];
      v56 = a3;
      v57 = v33;
      result = sub_223FCF5BC(v55, v23);
      a3 = v56;
      v11 = v36;
      v58 = v35;
      a6 = v57;
      a5 = v54;
      a2 = v58;
      if (!v54)
        return result;
    }
  }
  if (a4 > a5)
  {
    if (a3 == a2)
      return result;
    v60 = a3 - a2 - 8;
    if (v60 < 0x48
      || a6 + (v60 & 0xFFFFFFFFFFFFFFF8) + 8 > (unint64_t)a2
      && (unint64_t)&a2[(v60 & 0xFFFFFFFFFFFFFFF8) + 8] > a6)
    {
      v61 = 0;
      v62 = (_QWORD *)a6;
      v63 = a2;
      goto LABEL_68;
    }
    v89 = (v60 >> 3) + 1;
    v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = (_QWORD *)(a6 + v90);
    v63 = &a2[v90];
    v91 = (__int128 *)(a2 + 16);
    v92 = (_OWORD *)(a6 + 16);
    v93 = vdupq_n_s64(1uLL);
    v94 = v89 & 0x3FFFFFFFFFFFFFFCLL;
    v95 = 0uLL;
    v96 = 0uLL;
    do
    {
      v97 = *(v91 - 1);
      v98 = *v91;
      *(v91 - 1) = 0uLL;
      *v91 = 0uLL;
      *(v92 - 1) = v97;
      *v92 = v98;
      v95 = vaddq_s64(v95, v93);
      v96 = vaddq_s64(v96, v93);
      v91 += 2;
      v92 += 2;
      v94 -= 4;
    }
    while (v94);
    v61 = vaddvq_s64(vaddq_s64(v96, v95));
    if (v89 != (v89 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_68:
        v64 = *(_QWORD *)v63;
        *(_QWORD *)v63 = 0;
        v63 += 8;
        *v62++ = v64;
        ++v61;
      }
      while (v63 != a3);
    }
    if (v62 == (_QWORD *)a6)
      goto LABEL_117;
    v65 = (uint64_t *)(a3 - 8);
    while (2)
    {
      if (a2 == v11)
      {
        v85 = 0;
        do
        {
          v86 = v62[v85 - 1];
          v62[v85 - 1] = 0;
          result = v65[v85];
          v65[v85] = v86;
          if (result)
            result = MEMORY[0x227684CE8](result, 0x1020C4034E03FFCLL);
          --v85;
        }
        while (&v62[v85] != (_QWORD *)a6);
        goto LABEL_117;
      }
      v67 = a2 - 8;
      v66 = *((_QWORD *)a2 - 1);
      v68 = *(v62 - 1);
      v69 = *(_QWORD *)(*(_QWORD *)v66 + 8);
      v70 = *(_QWORD *)(*(_QWORD *)v68 + 8);
      if (v69 == v70)
      {
        if (**(_QWORD **)v66 <= **(_QWORD **)v68)
        {
LABEL_79:
          *(v62 - 1) = 0;
          result = *v65;
          *v65 = v68;
          v67 = a2;
          --v62;
          if (!result)
          {
LABEL_73:
            --v65;
            a2 = v67;
            if (v62 == (_QWORD *)a6)
              goto LABEL_117;
            continue;
          }
LABEL_72:
          result = MEMORY[0x227684CE8](result, 0x1020C4034E03FFCLL);
          goto LABEL_73;
        }
      }
      else if (v69 >= v70)
      {
        goto LABEL_79;
      }
      break;
    }
    *(_QWORD *)v67 = 0;
    result = *v65;
    *v65 = v66;
    if (!result)
      goto LABEL_73;
    goto LABEL_72;
  }
  if (v11 == a2)
    return result;
  v71 = a2 - v11 - 8;
  if (v71 < 0x48
    || (unint64_t)v11 < a6 + (v71 & 0xFFFFFFFFFFFFFFF8) + 8
    && (unint64_t)&v11[(v71 & 0xFFFFFFFFFFFFFFF8) + 8] > a6)
  {
    v61 = 0;
    v72 = (_QWORD *)a6;
    v73 = v11;
    goto LABEL_86;
  }
  v99 = (v71 >> 3) + 1;
  v100 = v99 & 0x3FFFFFFFFFFFFFFCLL;
  v101 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
  v72 = (_QWORD *)(a6 + v101);
  v73 = &v11[v101];
  v102 = (__int128 *)(v11 + 16);
  v103 = (_OWORD *)(a6 + 16);
  v104 = vdupq_n_s64(1uLL);
  v105 = v99 & 0x3FFFFFFFFFFFFFFCLL;
  v106 = 0uLL;
  v107 = 0uLL;
  do
  {
    v108 = *(v102 - 1);
    v109 = *v102;
    *(v102 - 1) = 0uLL;
    *v102 = 0uLL;
    *(v103 - 1) = v108;
    *v103 = v109;
    v106 = vaddq_s64(v106, v104);
    v107 = vaddq_s64(v107, v104);
    v102 += 2;
    v103 += 2;
    v105 -= 4;
  }
  while (v105);
  v61 = vaddvq_s64(vaddq_s64(v107, v106));
  if (v99 == v100)
  {
    v75 = a6 + 8 * v100 - 8;
    if (v72 == (_QWORD *)a6)
      goto LABEL_117;
  }
  else
  {
    do
    {
LABEL_86:
      v74 = *(_QWORD *)v73;
      *(_QWORD *)v73 = 0;
      v73 += 8;
      *v72++ = v74;
      ++v61;
    }
    while (v73 != a2);
    v75 = (uint64_t)(v72 - 1);
    if (v72 == (_QWORD *)a6)
      goto LABEL_117;
  }
  v76 = (_QWORD **)a6;
  while (a2 != a3)
  {
    v77 = (_QWORD **)*v76;
    v78 = (_QWORD *)**v76;
    v79 = v78[1];
    v80 = *(_QWORD ***)a2;
    v81 = **(_QWORD ***)a2;
    v82 = v81[1];
    if (v79 == v82)
    {
      if (*v78 <= *v81)
        goto LABEL_93;
    }
    else if (v79 >= v82)
    {
LABEL_93:
      *v76 = 0;
      result = *(_QWORD *)v11;
      *(_QWORD *)v11 = v77;
      if (result)
      {
        v83 = a3;
        result = MEMORY[0x227684CE8](result, 0x1020C4034E03FFCLL);
        a3 = v83;
      }
      ++v76;
      v11 += 8;
      if (v76 == v72)
        goto LABEL_117;
      continue;
    }
    *(_QWORD *)a2 = 0;
    result = *(_QWORD *)v11;
    *(_QWORD *)v11 = v80;
    if (result)
    {
      v84 = a3;
      result = MEMORY[0x227684CE8](result, 0x1020C4034E03FFCLL);
      a3 = v84;
    }
    a2 += 8;
    v11 += 8;
    if (v76 == v72)
      goto LABEL_117;
  }
  v87 = 0;
  do
  {
    v88 = v76[v87];
    v76[v87] = 0;
    result = *(_QWORD *)&v11[v87 * 8];
    *(_QWORD *)&v11[v87 * 8] = v88;
    if (result)
      result = MEMORY[0x227684CE8](result, 0x1020C4034E03FFCLL);
    ++v87;
  }
  while (&v76[v87 - 1] != (_QWORD **)v75);
LABEL_117:
  if (a6)
  {
    v110 = 0;
    do
    {
      result = *(_QWORD *)(a6 + 8 * v110);
      *(_QWORD *)(a6 + 8 * v110) = 0;
      if (result)
        result = MEMORY[0x227684CE8](result, 0x1020C4034E03FFCLL, a3);
      ++v110;
    }
    while (v110 < v61);
  }
  return result;
}

char *sub_223FCFD50(char *result, char *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v6;
  char *v7;
  uint64_t v8;
  BOOL v9;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  BOOL v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  __int128 v44;

  if (a3 < 2)
    return result;
  v6 = result;
  if (a3 != 2)
  {
    if ((uint64_t)a3 <= 128)
    {
      if (result == a2)
        return result;
      v11 = result + 24;
      if (result + 24 == a2)
        return result;
      v12 = 0;
      v13 = result;
      while (1)
      {
        v15 = v13;
        v13 = v11;
        v16 = *((_QWORD *)v15 + 4);
        if (v16)
          v17 = *((_QWORD *)v15 + 1) == 0;
        else
          v17 = 1;
        if (v17)
        {
          if (v16)
          {
            v18 = *(_QWORD **)v13;
LABEL_25:
            v19 = v15[40];
            v20 = *(_OWORD *)v15;
            v13[16] = v15[16];
            *(_OWORD *)v13 = v20;
            if (v15 == result)
            {
LABEL_14:
              v14 = result;
            }
            else
            {
              v21 = v12;
              while (1)
              {
                v22 = &result[v21];
                v23 = &result[v21 - 24];
                if (*(_QWORD *)&result[v21 - 16])
                {
                  if (**(_QWORD **)v23 <= *v18)
                    break;
                }
                *(_OWORD *)v22 = *(_OWORD *)v23;
                v22[16] = result[v21 - 8];
                v21 -= 24;
                if (!v21)
                  goto LABEL_14;
              }
              v14 = &result[v21];
            }
            *(_QWORD *)v14 = v18;
            *((_QWORD *)v14 + 1) = v16;
            v14[16] = v19;
          }
        }
        else
        {
          v18 = *(_QWORD **)v13;
          if (**(_QWORD **)v15 > **(_QWORD **)v13)
            goto LABEL_25;
        }
        v11 = v13 + 24;
        v12 += 24;
        if (v13 + 24 == a2)
          return result;
      }
    }
    v28 = a4;
    v29 = a3 >> 1;
    v30 = (uint64_t)&result[24 * (a3 >> 1)];
    v31 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
      sub_223FCFD50(result, v30, v31, a4, a5);
      sub_223FCFD50(&v6[24 * (a3 >> 1)], a2, a3 - (a3 >> 1), v28, a5);
      return sub_223FD03D0(v6, &v6[24 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), (_OWORD *)v28, a5);
    }
    sub_223FD0084((uint64_t)result, v30, v31, a4);
    v32 = v28 + 24 * v29;
    result = (char *)sub_223FD0084((uint64_t)&v6[24 * (a3 >> 1)], (uint64_t)a2, a3 - (a3 >> 1), v32);
    v33 = v28 + 24 * a3;
    v34 = v32;
    while (1)
    {
      if (v34 == v33)
      {
        if (v28 != v32)
        {
          v42 = 0;
          do
          {
            v43 = &v6[v42];
            v44 = *(_OWORD *)(v28 + v42);
            v43[16] = *(_BYTE *)(v28 + v42 + 16);
            *(_OWORD *)v43 = v44;
            v42 += 24;
          }
          while (v28 + v42 != v32);
        }
        return result;
      }
      v36 = *(_QWORD *)(v34 + 8);
      if (v36)
        v37 = *(_QWORD *)(v28 + 8) == 0;
      else
        v37 = 1;
      if (v37)
      {
        if (!v36)
          goto LABEL_37;
LABEL_47:
        v38 = *(_OWORD *)v34;
        v6[16] = *(_BYTE *)(v34 + 16);
        *(_OWORD *)v6 = v38;
        v6 += 24;
        v34 += 24;
        if (v28 == v32)
        {
LABEL_48:
          if (v34 != v33)
          {
            v39 = 0;
            do
            {
              v40 = &v6[v39];
              v41 = *(_OWORD *)(v34 + v39);
              v40[16] = *(_BYTE *)(v34 + v39 + 16);
              *(_OWORD *)v40 = v41;
              v39 += 24;
            }
            while (v34 + v39 != v33);
          }
          return result;
        }
      }
      else
      {
        if (**(_QWORD **)v28 > **(_QWORD **)v34)
          goto LABEL_47;
LABEL_37:
        v35 = *(_OWORD *)v28;
        v6[16] = *(_BYTE *)(v28 + 16);
        *(_OWORD *)v6 = v35;
        v6 += 24;
        v28 += 24;
        if (v28 == v32)
          goto LABEL_48;
      }
    }
  }
  v7 = a2 - 24;
  v8 = *((_QWORD *)a2 - 2);
  if (v8)
    v9 = *((_QWORD *)result + 1) == 0;
  else
    v9 = 1;
  if (v9)
  {
    if (!v8)
      return result;
  }
  else if (**(_QWORD **)result <= **(_QWORD **)v7)
  {
    return result;
  }
  v24 = *(_OWORD *)result;
  v25 = *((_QWORD *)result + 2);
  v26 = *(a2 - 8);
  *(_OWORD *)result = *(_OWORD *)v7;
  result[16] = v26;
  *(a2 - 8) = v25;
  *(_OWORD *)v7 = v24;
  return result;
}

uint64_t sub_223FD0084(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  __int128 v8;
  __int128 *v9;
  uint64_t v10;
  BOOL v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD **v27;
  uint64_t v28;
  BOOL v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  BOOL v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;

  if (!a3)
    return result;
  v4 = a4;
  v7 = result;
  if (a3 == 2)
  {
    v9 = (__int128 *)(a2 - 24);
    v10 = *(_QWORD *)(a2 - 16);
    if (v10)
      v11 = *(_QWORD *)(result + 8) == 0;
    else
      v11 = 1;
    if (v11)
    {
      if (!v10)
      {
LABEL_41:
        v31 = *(_OWORD *)result;
        *(_QWORD *)(a4 + 16) = *(_QWORD *)(result + 16);
        *(_OWORD *)a4 = v31;
        v13 = *v9;
        v14 = *(_QWORD *)(a2 - 8);
        goto LABEL_42;
      }
    }
    else if (**(_QWORD **)result <= **(_QWORD **)v9)
    {
      goto LABEL_41;
    }
    v12 = *v9;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a2 - 8);
    *(_OWORD *)a4 = v12;
    v13 = *(_OWORD *)result;
    v14 = *(_QWORD *)(result + 16);
LABEL_42:
    *(_QWORD *)(a4 + 40) = v14;
    *(_OWORD *)(a4 + 24) = v13;
    return result;
  }
  if (a3 == 1)
  {
    v8 = *(_OWORD *)result;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a4 = v8;
    return result;
  }
  if ((uint64_t)a3 <= 8)
  {
    if (result == a2)
      return result;
    v15 = *(_OWORD *)result;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a4 = v15;
    v16 = result + 24;
    if (result + 24 == a2)
      return result;
    v17 = 0;
    v18 = (_OWORD *)a4;
LABEL_20:
    v21 = v16;
    v22 = (_OWORD *)((char *)v18 + 24);
    v23 = *(_QWORD *)(v7 + 32);
    if (v23)
      v24 = *((_QWORD *)v18 + 1) == 0;
    else
      v24 = 1;
    if (v24)
    {
      if (!v23)
        goto LABEL_38;
    }
    else if (**(_QWORD **)v18 <= **(_QWORD **)v21)
    {
LABEL_38:
      v30 = *(_OWORD *)v21;
      *((_QWORD *)v18 + 5) = *(_QWORD *)(v21 + 16);
      *v22 = v30;
      goto LABEL_19;
    }
    *v22 = *v18;
    *((_QWORD *)v18 + 5) = *((_QWORD *)v18 + 2);
    v19 = (_OWORD *)a4;
    if (v18 == (_OWORD *)a4)
      goto LABEL_18;
    v25 = v17;
    while (1)
    {
      v26 = a4 + v25;
      v27 = (_QWORD **)(a4 + v25 - 24);
      v28 = *(_QWORD *)(v7 + 32);
      if (v28)
        v29 = *(_QWORD *)(a4 + v25 - 16) == 0;
      else
        v29 = 1;
      if (v29)
      {
        if (!v28)
        {
          v19 = v18;
          goto LABEL_18;
        }
      }
      else if (**v27 <= **(_QWORD **)v21)
      {
        v19 = (_OWORD *)(a4 + v25);
LABEL_18:
        v20 = *(_OWORD *)v21;
        *((_BYTE *)v19 + 16) = *(_BYTE *)(v21 + 16);
        *v19 = v20;
LABEL_19:
        v16 = v21 + 24;
        v17 += 24;
        v18 = v22;
        v7 = v21;
        if (v21 + 24 == a2)
          return result;
        goto LABEL_20;
      }
      v18 = (_OWORD *)((char *)v18 - 24);
      *(_OWORD *)v26 = *(_OWORD *)v27;
      *(_BYTE *)(v26 + 16) = *(_BYTE *)(a4 + v25 - 8);
      v25 -= 24;
      if (!v25)
      {
        v19 = (_OWORD *)a4;
        goto LABEL_18;
      }
    }
  }
  v32 = a3 >> 1;
  v33 = 24 * (a3 >> 1);
  v34 = result + v33;
  sub_223FCFD50(result, result + v33, a3 >> 1, a4, a3 >> 1);
  result = sub_223FCFD50(v7 + v33, a2, a3 - v32, v4 + v33, a3 - v32);
  v35 = v7 + v33;
  while (v35 != a2)
  {
    v37 = *(_QWORD *)(v35 + 8);
    if (v37)
      v38 = *(_QWORD *)(v7 + 8) == 0;
    else
      v38 = 1;
    if (v38)
    {
      if (v37)
        goto LABEL_45;
LABEL_52:
      v39 = *(_OWORD *)v7;
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v4 = v39;
      v4 += 24;
      v7 += 24;
      if (v7 == v34)
      {
LABEL_53:
        if (v35 != a2)
        {
          v40 = 0;
          do
          {
            v41 = v4 + v40;
            v42 = *(_OWORD *)(v35 + v40);
            *(_QWORD *)(v41 + 16) = *(_QWORD *)(v35 + v40 + 16);
            *(_OWORD *)v41 = v42;
            v40 += 24;
          }
          while (v35 + v40 != a2);
        }
        return result;
      }
    }
    else
    {
      if (**(_QWORD **)v7 <= **(_QWORD **)v35)
        goto LABEL_52;
LABEL_45:
      v36 = *(_OWORD *)v35;
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v35 + 16);
      *(_OWORD *)v4 = v36;
      v4 += 24;
      v35 += 24;
      if (v7 == v34)
        goto LABEL_53;
    }
  }
  if (v7 != v34)
  {
    v43 = 0;
    do
    {
      v44 = v4 + v43;
      v45 = *(_OWORD *)(v7 + v43);
      *(_QWORD *)(v44 + 16) = *(_QWORD *)(v7 + v43 + 16);
      *(_OWORD *)v44 = v45;
      v43 += 24;
    }
    while (v7 + v43 != v34);
  }
  return result;
}

char *sub_223FD03D0(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, _OWORD *a6, uint64_t a7)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  unint64_t v49;
  BOOL v50;
  char v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  __int128 v64;
  _OWORD *v65;
  char *v66;
  char *v67;
  __int128 v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  char *v72;
  __int128 v73;
  __int128 *v74;
  __int128 *v75;
  __int128 v76;
  uint64_t v77;
  BOOL v78;
  __int128 v79;
  char *v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;

  if (!a5)
    return result;
  v8 = result;
  v91 = a7;
  v92 = a6;
  while (a4 > a7 && a5 > a7)
  {
    if (!a4 || !*((_QWORD *)a2 + 1))
      return result;
    v9 = 0;
    v10 = -a4;
    while (1)
    {
      v11 = &v8[v9];
      if (!*(_QWORD *)&v8[v9 + 8] || **(_QWORD **)&v8[v9] > **(_QWORD **)a2)
        break;
      v9 += 24;
      if (__CFADD__(v10++, 1))
        return result;
    }
    v13 = -v10;
    if (-v10 >= a5)
    {
      if (v10 == -1)
      {
        v80 = &v8[v9];
        v100 = *(_QWORD *)&v8[v9 + 16];
        v96 = *(_OWORD *)&v8[v9];
        v81 = *(_OWORD *)a2;
        v80[16] = a2[16];
        *(_OWORD *)v80 = v81;
        *(_OWORD *)a2 = v96;
        a2[16] = v100;
        return result;
      }
      if (v10 > 0)
        v13 = 1 - v10;
      v21 = v13 >> 1;
      v16 = a2;
      if (a2 != a3)
      {
        v22 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
        if (*(_QWORD *)&v8[24 * v21 + 8 + v9])
        {
          v16 = a2;
          do
          {
            v23 = v22 >> 1;
            v24 = &v16[24 * (v22 >> 1)];
            if (*((_QWORD *)v24 + 1) && **(_QWORD **)&v8[24 * v21 + v9] > **(_QWORD **)v24)
            {
              v16 = v24 + 24;
              v23 = v22 + ~v23;
            }
            v22 = v23;
          }
          while (v23);
        }
        else
        {
          v16 = a2;
          do
          {
            v26 = v22 >> 1;
            v27 = &v16[24 * (v22 >> 1)];
            v28 = (_QWORD *)*((_QWORD *)v27 + 1);
            v29 = v27 + 24;
            v22 += ~(v22 >> 1);
            if (v28)
              v16 = v29;
            else
              v22 = v26;
          }
          while (v22);
        }
      }
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v16 - a2) >> 3);
      v17 = &v8[24 * v21 + v9];
      v25 = v16;
      if (v17 == a2)
        goto LABEL_66;
    }
    else
    {
      if (a5 >= 0)
        v14 = a5;
      else
        v14 = a5 + 1;
      v15 = v14 >> 1;
      v16 = &a2[24 * (v14 >> 1)];
      v17 = &v8[v9];
      if (a2 - v8 != v9)
      {
        v18 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v8 - v9) >> 3);
        if (*(_QWORD *)&a2[24 * v15 + 8])
        {
          v17 = &v8[v9];
          do
          {
            v19 = v18 >> 1;
            v20 = &v17[24 * (v18 >> 1)];
            if (*((_QWORD *)v20 + 1) && **(_QWORD **)v20 <= **(_QWORD **)v16)
            {
              v17 = v20 + 24;
              v19 = v18 + ~v19;
            }
            v18 = v19;
          }
          while (v19);
        }
        else
        {
          v17 = &v8[v9];
          do
          {
            v17 += 24 * (v18 >> 1) + 24;
            v18 += ~(v18 >> 1);
          }
          while (v18);
        }
      }
      v21 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v8 - v9) >> 3);
      v25 = v16;
      if (v17 == a2)
        goto LABEL_66;
    }
    v25 = v17;
    if (a2 != v16)
    {
      v30 = v17 + 24;
      if (v17 + 24 == a2)
      {
        v93 = *(_OWORD *)v17;
        v97 = *((_QWORD *)v17 + 2);
        v36 = (char *)(v16 - a2);
        v87 = a5;
        v89 = a3;
        v37 = v21;
        v85 = v15;
        memmove(v17, a2, v16 - a2 - 7);
        v15 = v85;
        a5 = v87;
        v21 = v37;
        a3 = v89;
        v25 = &v36[(_QWORD)v17];
        *(_OWORD *)v25 = v93;
        v25[16] = v97;
      }
      else
      {
        v31 = a2 + 24;
        if (a2 + 24 == v16)
        {
          v25 = v17 + 24;
          v94 = *(_OWORD *)(v16 - 24);
          v98 = *((_QWORD *)v16 - 1);
          if (v16 - 24 != v17)
          {
            v88 = a5;
            v90 = a3;
            v38 = v21;
            v86 = v15;
            memmove(v17 + 24, v17, v16 - 24 - v17 - 7);
            v25 = v17 + 24;
            v15 = v86;
            a5 = v88;
            v21 = v38;
            a3 = v90;
          }
          *(_OWORD *)v17 = v94;
          v17[16] = v98;
        }
        else
        {
          v32 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v17) >> 3);
          if (v32 == 0xAAAAAAAAAAAAAAABLL * ((v16 - a2) >> 3))
          {
            do
            {
              v33 = *(_OWORD *)(v30 - 24);
              v34 = *((_QWORD *)v30 - 1);
              v35 = *(v31 - 8);
              *(_OWORD *)(v30 - 24) = *(_OWORD *)(v31 - 24);
              *(v30 - 8) = v35;
              *(v31 - 8) = v34;
              *(_OWORD *)(v31 - 24) = v33;
              if (v30 == a2)
                break;
              v30 += 24;
              v70 = v31 == v16;
              v31 += 24;
            }
            while (!v70);
            v25 = a2;
          }
          else
          {
            v39 = 0xAAAAAAAAAAAAAAABLL * ((v16 - a2) >> 3);
            v40 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v17) >> 3);
            do
            {
              v41 = v40;
              v40 = v39;
              v39 = v41 % v39;
            }
            while (v39);
            if (v40)
            {
              v42 = &v17[24 * v40];
              do
              {
                v43 = *(_OWORD *)(v42 - 24);
                v44 = *((_QWORD *)v42 - 1);
                v42 -= 24;
                v95 = v43;
                v99 = v44;
                v45 = &v42[8 * ((a2 - v17) >> 3)];
                v46 = v42;
                do
                {
                  v47 = v45;
                  v48 = *(_OWORD *)v45;
                  v46[16] = v45[16];
                  *(_OWORD *)v46 = v48;
                  v49 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v45) >> 3);
                  v45 += 8 * ((a2 - v17) >> 3);
                  v50 = __OFSUB__(v32, v49);
                  v52 = v32 - v49;
                  v51 = (v52 < 0) ^ v50;
                  v53 = &v17[24 * v52];
                  if (!v51)
                    v45 = v53;
                  v46 = v47;
                }
                while (v45 != v42);
                v47[16] = v99;
                *(_OWORD *)v47 = v95;
              }
              while (v42 != v17);
            }
            v25 = &v17[8 * ((v16 - a2) >> 3)];
          }
        }
      }
    }
LABEL_66:
    a4 = -(v21 + v10);
    v54 = a5 - v15;
    if (v21 + v15 >= a5 - (v21 + v15) - v10)
    {
      v58 = v21;
      v59 = -(v21 + v10);
      v60 = v15;
      v61 = v25;
      result = (char *)sub_223FD03D0(v25, v16, a3, v59, a5 - v15, v92, v91);
      a7 = v91;
      a6 = v92;
      a4 = v58;
      a3 = v61;
      a5 = v60;
      v8 = v11;
      a2 = v17;
      if (!v60)
        return result;
    }
    else
    {
      v55 = &v8[v9];
      v56 = a3;
      v57 = v25;
      result = (char *)sub_223FD03D0(v55, v17, v25, v21, v15, v92, v91);
      a7 = v91;
      a6 = v92;
      a3 = v56;
      a5 = v54;
      v8 = v57;
      a2 = v16;
      if (!v54)
        return result;
    }
  }
  if (a4 <= a5)
  {
    if (v8 == a2)
      return result;
    v71 = 0;
    do
    {
      v72 = (char *)a6 + v71;
      v73 = *(_OWORD *)&v8[v71];
      *((_QWORD *)v72 + 2) = *(_QWORD *)&v8[v71 + 16];
      *(_OWORD *)v72 = v73;
      v71 += 24;
    }
    while (&v8[v71] != a2);
    if (!v71)
      return result;
    v74 = (_OWORD *)((char *)a6 + v71);
    v75 = a6;
    while (1)
    {
      if (a2 == a3)
        return (char *)memmove(v8, v75, (char *)a6 - (char *)v75 + v71 - 7);
      v77 = *((_QWORD *)a2 + 1);
      if (v77)
        v78 = *((_QWORD *)v75 + 1) == 0;
      else
        v78 = 1;
      if (v78)
      {
        if (v77)
          goto LABEL_95;
LABEL_102:
        v79 = *v75;
        v8[16] = *((_BYTE *)v75 + 16);
        *(_OWORD *)v8 = v79;
        v8 += 24;
        v75 = (__int128 *)((char *)v75 + 24);
        if (v74 == v75)
          return result;
      }
      else
      {
        if (**(_QWORD **)v75 <= **(_QWORD **)a2)
          goto LABEL_102;
LABEL_95:
        v76 = *(_OWORD *)a2;
        v8[16] = a2[16];
        *(_OWORD *)v8 = v76;
        v8 += 24;
        a2 += 24;
        if (v74 == v75)
          return result;
      }
    }
  }
  if (a3 != a2)
  {
    v62 = 0;
    do
    {
      v63 = (char *)a6 + v62;
      v64 = *(_OWORD *)&a2[v62];
      *((_QWORD *)v63 + 2) = *(_QWORD *)&a2[v62 + 16];
      *(_OWORD *)v63 = v64;
      v62 += 24;
    }
    while (&a2[v62] != a3);
    if (v62)
    {
      v65 = (_OWORD *)((char *)a6 + v62);
      v66 = a3 - 24;
      do
      {
        if (a2 == v8)
        {
          v82 = 0;
          do
          {
            v83 = &v66[v82];
            v84 = *(_OWORD *)((char *)v65 + v82 - 24);
            v83[16] = *((_BYTE *)v65 + v82 - 8);
            *(_OWORD *)v83 = v84;
            v82 -= 24;
          }
          while ((_OWORD *)((char *)v65 + v82) != a6);
          return result;
        }
        v67 = a2 - 24;
        v69 = *((_QWORD *)v65 - 2);
        if (v69)
          v70 = *((_QWORD *)a2 - 2) == 0;
        else
          v70 = 1;
        if (v70)
        {
          result = a2 - 24;
          if (v69)
            goto LABEL_78;
        }
        else
        {
          result = a2 - 24;
          if (**(_QWORD **)v67 > **((_QWORD **)v65 - 3))
            goto LABEL_78;
        }
        v67 = (char *)v65 - 24;
        result = a2;
        v65 = (_OWORD *)((char *)v65 - 24);
LABEL_78:
        v68 = *(_OWORD *)v67;
        v66[16] = v67[16];
        *(_OWORD *)v66 = v68;
        v66 -= 24;
        a2 = result;
      }
      while (v65 != a6);
    }
  }
  return result;
}

void sub_223FD0AAC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  unsigned int *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unsigned int *i;
  uint64_t v14;
  size_t prime;
  int8x8_t v16;
  BOOL v17;
  unint64_t v18;
  uint8x8_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  char *v23;
  void *v24;
  char *j;
  unsigned int *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  _QWORD *v41;
  int8x8_t v42;
  unint64_t v43;
  uint8x8_t v44;
  unint64_t v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  uint8x8_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int **v57;
  unsigned int *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int *v62;
  unsigned int *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int *v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  char *v71;
  void *v72;
  _QWORD *v73;
  _QWORD *v74;
  void *v75;
  void *v76;
  unsigned int *v77;
  unsigned int v78;
  void *v79;
  char *v80;
  char *v81;
  void *__p[3];

  if (!a1[3])
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
    return;
  }
  v5 = (unsigned int *)(a1 + 2);
  v4 = (_QWORD *)a1[2];
  v6 = (_QWORD *)*v4;
  if (*v4)
  {
    do
    {
      if (v4[6] < v6[6])
        v4 = v6;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
  }
  v7 = *((_DWORD *)v4 + 12);
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v8 = (v7 + 1);
  if ((_DWORD)v8)
  {
    v9 = 40 * v8;
    v10 = (char *)operator new(40 * v8);
    v11 = v10;
    v79 = v10;
    v81 = &v10[v9];
    v12 = v10;
    do
    {
      *(_OWORD *)v12 = 0uLL;
      *((_OWORD *)v12 + 1) = 0uLL;
      *((_DWORD *)v12 + 8) = 1065353216;
      v12 += 40;
    }
    while (v12 != &v10[v9]);
    v80 = &v10[v9];
  }
  else
  {
    v11 = 0;
  }
  for (i = v5; ; sub_223A1AA44((uint64_t)&v11[40 * *((_QWORD *)i + 6)], i + 4, i + 4))
  {
    i = *(unsigned int **)i;
    if (!i)
      break;
  }
  v14 = a1[3];
  prime = v14;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (v14 != 1)
  {
    if ((v14 & (v14 - 1)) != 0)
    {
      prime = std::__next_prime(v14);
      v16 = *(int8x8_t *)(a2 + 8);
      v17 = prime >= *(_QWORD *)&v16;
      if (prime > *(_QWORD *)&v16)
        goto LABEL_31;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      if ((_DWORD)v14)
        goto LABEL_31;
    }
    if (v17)
      goto LABEL_32;
    v18 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
    if (*(_QWORD *)&v16 < 3uLL || (v19 = (uint8x8_t)vcnt_s8(v16), v19.i16[0] = vaddlv_u8(v19), v19.u32[0] > 1uLL))
    {
      v18 = std::__next_prime(v18);
    }
    else
    {
      v20 = 1 << -(char)__clz(v18 - 1);
      if (v18 >= 2)
        v18 = v20;
    }
    if (prime <= v18)
      prime = v18;
    if (prime >= *(_QWORD *)&v16)
      goto LABEL_32;
    goto LABEL_31;
  }
  prime = 2;
LABEL_31:
  sub_2231B0668(a2, prime);
LABEL_32:
  if ((_DWORD)v14)
  {
    v77 = v5;
    v21 = 0;
    v22 = 0;
    do
    {
      v23 = (char *)v79;
      if (v79 != v80)
      {
        while (!*((_QWORD *)v23 + 3))
        {
          v23 += 40;
          if (v23 == v80)
          {
            v23 = v80;
            break;
          }
        }
      }
      if (v21 <= -858993459 * ((unint64_t)(v23 - (_BYTE *)v79) >> 3))
        v21 = -858993459 * ((unint64_t)(v23 - (_BYTE *)v79) >> 3);
      v78 = *(_DWORD *)(*((_QWORD *)v23 + 2) + 16);
      __p[0] = &v78;
      *((_DWORD *)sub_223AD44E8(a2, &v78, (uint64_t)&unk_2245BA939, (_DWORD **)__p) + 5) = v21;
      sub_2231AFBB8(v23, *((_QWORD **)v23 + 2), (uint64_t)__p);
      v24 = __p[0];
      __p[0] = 0;
      if (v24)
        operator delete(v24);
      for (j = sub_223FD2C04((uint64_t)a1, v78, &v78) + 40;
            ;
            sub_223A1AA44((uint64_t)v40 + 40 * (v28 - 1), (unsigned int *)j + 4, (_DWORD *)j + 4))
      {
        j = *(char **)j;
        if (!j)
          break;
        v26 = (unsigned int *)(j + 16);
        v27 = sub_223FD2C04((uint64_t)a1, *((_DWORD *)j + 4), (_DWORD *)j + 4);
        v28 = *((_QWORD *)v27 + 6);
        v29 = *((_QWORD *)v27 + 4);
        if (v29)
        {
          v30 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
          v30.i16[0] = vaddlv_u8(v30);
          if (v30.u32[0] > 1uLL)
          {
            v31 = v78;
            if (v29 <= v78)
              v31 = v78 % v29;
          }
          else
          {
            v31 = ((_DWORD)v29 - 1) & v78;
          }
          v33 = *((_QWORD *)v27 + 3);
          v32 = v27 + 24;
          v34 = *(uint64_t ***)(v33 + 8 * v31);
          if (v34)
          {
            v35 = *v34;
            if (*v34)
            {
              if (v30.u32[0] < 2uLL)
              {
                v36 = v29 - 1;
                while (1)
                {
                  v38 = v35[1];
                  if (v38 == v78)
                  {
                    if (*((_DWORD *)v35 + 4) == v78)
                      goto LABEL_68;
                  }
                  else if ((v38 & v36) != v31)
                  {
                    goto LABEL_70;
                  }
                  v35 = (uint64_t *)*v35;
                  if (!v35)
                    goto LABEL_70;
                }
              }
              do
              {
                v37 = v35[1];
                if (v37 == v78)
                {
                  if (*((_DWORD *)v35 + 4) == v78)
                  {
LABEL_68:
                    sub_2231AFBB8(v32, v35, (uint64_t)__p);
                    v39 = __p[0];
                    __p[0] = 0;
                    if (v39)
                      operator delete(v39);
                    break;
                  }
                }
                else
                {
                  if (v37 >= v29)
                    v37 %= v29;
                  if (v37 != v31)
                    break;
                }
                v35 = (uint64_t *)*v35;
              }
              while (v35);
            }
          }
        }
LABEL_70:
        v40 = v79;
        v41 = (char *)v79 + 40 * v28;
        v42 = (int8x8_t)v41[1];
        if (v42)
        {
          v43 = *v26;
          v44 = (uint8x8_t)vcnt_s8(v42);
          v44.i16[0] = vaddlv_u8(v44);
          if (v44.u32[0] > 1uLL)
          {
            v45 = *v26;
            if (*(_QWORD *)&v42 <= v43)
              v45 = v43 % *(_QWORD *)&v42;
          }
          else
          {
            v45 = (v42.i32[0] - 1) & v43;
          }
          v46 = *(uint64_t ***)(*v41 + 8 * v45);
          if (v46)
          {
            v47 = *v46;
            if (*v46)
            {
              if (v44.u32[0] < 2uLL)
              {
                v48 = *(_QWORD *)&v42 - 1;
                while (1)
                {
                  v50 = v47[1];
                  if (v50 == v43)
                  {
                    if (*((_DWORD *)v47 + 4) == (_DWORD)v43)
                      goto LABEL_91;
                  }
                  else if ((v50 & v48) != v45)
                  {
                    goto LABEL_45;
                  }
                  v47 = (uint64_t *)*v47;
                  if (!v47)
                    goto LABEL_45;
                }
              }
              do
              {
                v49 = v47[1];
                if (v49 == v43)
                {
                  if (*((_DWORD *)v47 + 4) == (_DWORD)v43)
                  {
LABEL_91:
                    sub_2231AFBB8(v41, v47, (uint64_t)__p);
                    v51 = __p[0];
                    __p[0] = 0;
                    if (v51)
                      operator delete(v51);
                    break;
                  }
                }
                else
                {
                  if (v49 >= *(_QWORD *)&v42)
                    v49 %= *(_QWORD *)&v42;
                  if (v49 != v45)
                    break;
                }
                v47 = (uint64_t *)*v47;
              }
              while (v47);
            }
          }
        }
LABEL_45:
        ;
      }
      v52 = a1[1];
      if (v52)
      {
        v53 = v78;
        v54 = (uint8x8_t)vcnt_s8((int8x8_t)v52);
        v54.i16[0] = vaddlv_u8(v54);
        if (v54.u32[0] > 1uLL)
        {
          v55 = v78;
          if (v52 <= v78)
            v55 = v78 % v52;
        }
        else
        {
          v55 = ((_DWORD)v52 - 1) & v78;
        }
        v56 = *a1;
        v57 = *(unsigned int ***)(*a1 + 8 * v55);
        if (v57)
        {
          v58 = *v57;
          if (*v57)
          {
            v59 = v52 - 1;
            if (v54.u32[0] < 2uLL)
            {
              while (1)
              {
                v60 = *((_QWORD *)v58 + 1);
                if (v60 == v78)
                {
                  if (v58[4] == v78)
                    goto LABEL_114;
                }
                else if ((v60 & v59) != v55)
                {
                  goto LABEL_35;
                }
                v58 = *(unsigned int **)v58;
                if (!v58)
                  goto LABEL_35;
              }
            }
            do
            {
              v61 = *((_QWORD *)v58 + 1);
              if (v61 == v78)
              {
                if (v58[4] == v78)
                {
LABEL_114:
                  if (v54.u32[0] > 1uLL)
                  {
                    if (v52 <= v78)
                      v53 = v78 % v52;
                  }
                  else
                  {
                    v53 = v59 & v78;
                  }
                  v62 = *(unsigned int **)(v56 + 8 * v53);
                  do
                  {
                    v63 = v62;
                    v62 = *(unsigned int **)v62;
                  }
                  while (v62 != v58);
                  if (v63 == v77)
                    goto LABEL_131;
                  v64 = *((_QWORD *)v63 + 1);
                  if (v54.u32[0] > 1uLL)
                  {
                    if (v64 >= v52)
                      v64 %= v52;
                  }
                  else
                  {
                    v64 &= v59;
                  }
                  if (v64 != v53)
                  {
LABEL_131:
                    if (!*(_QWORD *)v58)
                      goto LABEL_132;
                    v65 = *(_QWORD *)(*(_QWORD *)v58 + 8);
                    if (v54.u32[0] > 1uLL)
                    {
                      if (v65 >= v52)
                        v65 %= v52;
                    }
                    else
                    {
                      v65 &= v59;
                    }
                    if (v65 != v53)
LABEL_132:
                      *(_QWORD *)(v56 + 8 * v53) = 0;
                  }
                  v66 = *(unsigned int **)v58;
                  if (*(_QWORD *)v58)
                  {
                    v67 = *((_QWORD *)v66 + 1);
                    if (v54.u32[0] > 1uLL)
                    {
                      if (v67 >= v52)
                        v67 %= v52;
                    }
                    else
                    {
                      v67 &= v59;
                    }
                    if (v67 != v53)
                    {
                      *(_QWORD *)(*a1 + 8 * v67) = v63;
                      v66 = *(unsigned int **)v58;
                    }
                  }
                  *(_QWORD *)v63 = v66;
                  *(_QWORD *)v58 = 0;
                  --a1[3];
                  v68 = (_QWORD *)*((_QWORD *)v58 + 5);
                  if (v68)
                  {
                    do
                    {
                      v69 = (_QWORD *)*v68;
                      operator delete(v68);
                      v68 = v69;
                    }
                    while (v69);
                  }
                  v70 = (void *)*((_QWORD *)v58 + 3);
                  *((_QWORD *)v58 + 3) = 0;
                  if (v70)
                    operator delete(v70);
                  operator delete(v58);
                  break;
                }
              }
              else
              {
                if (v61 >= v52)
                  v61 %= v52;
                if (v61 != v55)
                  break;
              }
              v58 = *(unsigned int **)v58;
            }
            while (v58);
          }
        }
      }
LABEL_35:
      ++v22;
    }
    while (v22 != (_DWORD)v14);
    v11 = (char *)v79;
  }
  if (v11)
  {
    v71 = v80;
    v72 = v11;
    if (v80 != v11)
    {
      do
      {
        v73 = (_QWORD *)*((_QWORD *)v71 - 3);
        if (v73)
        {
          do
          {
            v74 = (_QWORD *)*v73;
            operator delete(v73);
            v73 = v74;
          }
          while (v74);
        }
        v76 = (void *)*((_QWORD *)v71 - 5);
        v71 -= 40;
        v75 = v76;
        *(_QWORD *)v71 = 0;
        if (v76)
          operator delete(v75);
      }
      while (v71 != v11);
      v72 = v79;
    }
    v80 = v11;
    operator delete(v72);
  }
}

void sub_223FD11DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_22322E828(v4);
  sub_223AF104C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223FD11F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_22322E828(v4);
  sub_223AF104C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223FD1234(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  uint64_t v15;
  int8x8_t v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  char *v26;
  uint64_t v27;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  uint64_t *v45;
  int64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int *v61;
  int8x8_t v62;
  unint64_t v63;
  uint8x8_t v64;
  unint64_t v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void **v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t i;
  _DWORD *v86;
  _DWORD *v87;
  _DWORD *v88;
  uint64_t v89;
  _DWORD *v90;
  _DWORD *v91;
  void *v92;
  int *v93;
  unsigned int *v94;
  unsigned int v96;
  void *v97[2];
  void *v98[2];
  int v99;
  void *__p;
  uint64_t v101;
  char *v102;
  int *v103;
  int *v104;
  unsigned int *v105;

  v5 = a3;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v6 = (_QWORD *)a2[2];
  v104 = 0;
  v105 = 0;
  v103 = 0;
  if (v6)
  {
    v7 = 0;
    v8 = -1;
    v9 = v6;
    do
    {
      v9 = (_QWORD *)*v9;
      ++v8;
      v7 += 2;
    }
    while (v9);
    if (v8 >= 0x1FFFFFFFFFFFFFFFLL)
      sub_22316E078();
    v10 = (unsigned int *)operator new(v7 * 4);
    v11 = v10;
    v12 = 0;
    v103 = (int *)v10;
    v105 = &v10[v7];
    do
    {
      *(_QWORD *)&v10[v12] = v6[2];
      v6 = (_QWORD *)*v6;
      v12 += 2;
    }
    while (v6);
    v13 = (int *)&v10[v12];
    v104 = (int *)&v10[v12];
  }
  else
  {
    v13 = 0;
    v11 = 0;
  }
  v14 = 126 - 2 * __clz(((char *)v13 - (char *)v11) >> 3);
  if (v13 == (int *)v11)
    v15 = 0;
  else
    v15 = v14;
  sub_223FD1BA8((unint64_t)v11, v13, v15, 1);
  if (v13 == (int *)v11)
    goto LABEL_161;
  v93 = v13;
  while (2)
  {
    if (*(_QWORD *)(v5 + 24) > (unint64_t)v11[1])
      goto LABEL_14;
    __p = 0;
    v101 = 0;
    v102 = 0;
    v16 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v16)
      goto LABEL_166;
    v17 = *v11;
    v18 = (uint8x8_t)vcnt_s8(v16);
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.u32[0] > 1uLL)
    {
      v19 = *v11;
      if (*(_QWORD *)&v16 <= v17)
        v19 = v17 % *(_QWORD *)&v16;
    }
    else
    {
      v19 = (v16.i32[0] - 1) & v17;
    }
    v20 = *(uint64_t ***)(*a1 + 8 * v19);
    if (!v20 || (v21 = *v20) == 0)
LABEL_166:
      sub_223198218("unordered_map::at: key not found");
    if (v18.u32[0] < 2uLL)
    {
      v22 = *(_QWORD *)&v16 - 1;
      while (1)
      {
        v24 = v21[1];
        if (v24 == v17)
        {
          if (*((_DWORD *)v21 + 4) == (_DWORD)v17)
            goto LABEL_36;
        }
        else if ((v24 & v22) != v19)
        {
          goto LABEL_166;
        }
        v21 = (uint64_t *)*v21;
        if (!v21)
          goto LABEL_166;
      }
    }
    while (1)
    {
      v23 = v21[1];
      if (v23 == v17)
        break;
      if (v23 >= *(_QWORD *)&v16)
        v23 %= *(_QWORD *)&v16;
      if (v23 != v19)
        goto LABEL_166;
LABEL_26:
      v21 = (uint64_t *)*v21;
      if (!v21)
        goto LABEL_166;
    }
    if (*((_DWORD *)v21 + 4) != (_DWORD)v17)
      goto LABEL_26;
LABEL_36:
    v25 = (uint64_t **)v21[5];
    if (v25)
    {
      v94 = v11;
      v26 = 0;
      while (1)
      {
        v28 = (int8x8_t)a2[1];
        if (!*(_QWORD *)&v28)
          goto LABEL_164;
        v29 = *((unsigned int *)v25 + 4);
        v30 = (uint8x8_t)vcnt_s8(v28);
        v30.i16[0] = vaddlv_u8(v30);
        if (v30.u32[0] > 1uLL)
        {
          v31 = *((unsigned int *)v25 + 4);
          if (*(_QWORD *)&v28 <= v29)
            v31 = v29 % *(_QWORD *)&v28;
        }
        else
        {
          v31 = (v28.i32[0] - 1) & v29;
        }
        v32 = *(uint64_t ***)(*a2 + 8 * v31);
        if (!v32 || (v33 = *v32) == 0)
LABEL_164:
          sub_223198218("unordered_map::at: key not found");
        if (v30.u32[0] < 2uLL)
        {
          v34 = *(_QWORD *)&v28 - 1;
          while (1)
          {
            v36 = v33[1];
            if (v36 == v29)
            {
              if (*((_DWORD *)v33 + 4) == (_DWORD)v29)
                goto LABEL_61;
            }
            else if ((v36 & v34) != v31)
            {
              goto LABEL_164;
            }
            v33 = (uint64_t *)*v33;
            if (!v33)
              goto LABEL_164;
          }
        }
        while (1)
        {
          v35 = v33[1];
          if (v35 == v29)
            break;
          if (v35 >= *(_QWORD *)&v28)
            v35 %= *(_QWORD *)&v28;
          if (v35 != v31)
            goto LABEL_164;
LABEL_51:
          v33 = (uint64_t *)*v33;
          if (!v33)
            goto LABEL_164;
        }
        if (*((_DWORD *)v33 + 4) != (_DWORD)v29)
          goto LABEL_51;
LABEL_61:
        v37 = *((unsigned int *)v33 + 5);
        if (*(_QWORD *)(v5 + 24) <= v37)
        {
          if (v26 < v102)
          {
            *(_QWORD *)v26 = v29 | (v37 << 32);
            v27 = (uint64_t)(v26 + 8);
            goto LABEL_39;
          }
          v38 = (char *)__p;
          v39 = v26 - (_BYTE *)__p;
          v40 = (v26 - (_BYTE *)__p) >> 3;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61)
            sub_22316E078();
          v42 = v102 - (_BYTE *)__p;
          if ((v102 - (_BYTE *)__p) >> 2 > v41)
            v41 = v42 >> 2;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            if (v43 >> 61)
              sub_223174E94();
            v44 = operator new(8 * v43);
            v45 = (uint64_t *)&v44[8 * v40];
            *v45 = v29 | (v37 << 32);
            v27 = (uint64_t)(v45 + 1);
            v46 = v26 - v38;
            if (v26 != v38)
            {
LABEL_72:
              v47 = v46 - 8;
              if (v47 < 0x168
                || (v50 = (v26 - 8 - v38) & 0xFFFFFFFFFFFFFFF8, &v44[v39 - 8 - v50] > &v44[v39 - 8])
                || &v26[-v50 - 8] > v26 - 8
                || (unint64_t)(v26 - v44 - v39) < 0x20)
              {
                v48 = v26;
                v5 = a3;
              }
              else
              {
                v51 = (v47 >> 3) + 1;
                v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
                v48 = &v26[-v52];
                v45 = (uint64_t *)((char *)v45 - v52);
                v53 = &v44[8 * v40 - 16];
                v54 = v26 - 16;
                v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
                v5 = a3;
                do
                {
                  v56 = *(_OWORD *)v54;
                  *(v53 - 1) = *((_OWORD *)v54 - 1);
                  *v53 = v56;
                  v53 -= 2;
                  v54 -= 32;
                  v55 -= 4;
                }
                while (v55);
                if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_75:
                  v26 = (char *)__p;
                  __p = v45;
                  v101 = v27;
                  v102 = &v44[8 * v43];
                  if (!v26)
                  {
LABEL_39:
                    v101 = v27;
                    v26 = (char *)v27;
                    goto LABEL_40;
                  }
LABEL_79:
                  operator delete(v26);
                  goto LABEL_39;
                }
              }
              do
              {
                v49 = *((_QWORD *)v48 - 1);
                v48 -= 8;
                *--v45 = v49;
              }
              while (v48 != v38);
              goto LABEL_75;
            }
          }
          else
          {
            v44 = 0;
            v45 = (uint64_t *)(8 * v40);
            *(_QWORD *)(8 * v40) = v29 | (v37 << 32);
            v27 = 8 * v40 + 8;
            v46 = v26 - v38;
            if (v26 != v38)
              goto LABEL_72;
          }
          v5 = a3;
          __p = v45;
          v101 = v27;
          v102 = &v44[8 * v43];
          if (!v26)
            goto LABEL_39;
          goto LABEL_79;
        }
LABEL_40:
        v25 = (uint64_t **)*v25;
        if (!v25)
        {
          v57 = (char *)__p;
          v11 = v94;
          goto LABEL_89;
        }
      }
    }
    v26 = 0;
    v57 = 0;
LABEL_89:
    v58 = 126 - 2 * __clz((v26 - v57) >> 3);
    if (v26 == v57)
      v59 = 0;
    else
      v59 = v58;
    sub_223FD1BA8((unint64_t)v57, (int *)v26, v59, 1);
    v96 = *v11;
    *(_OWORD *)v97 = 0u;
    *(_OWORD *)v98 = 0u;
    v99 = 1065353216;
    sub_223A1AA44((uint64_t)v97, &v96, &v96);
    v60 = (unsigned int *)__p;
    v61 = (unsigned int *)v101;
LABEL_95:
    if (v60 != v61)
    {
      v62 = (int8x8_t)a1[1];
      if (!*(_QWORD *)&v62)
        goto LABEL_165;
      v63 = *v60;
      v64 = (uint8x8_t)vcnt_s8(v62);
      v64.i16[0] = vaddlv_u8(v64);
      if (v64.u32[0] > 1uLL)
      {
        v65 = *v60;
        if (*(_QWORD *)&v62 <= v63)
          v65 = v63 % *(_QWORD *)&v62;
      }
      else
      {
        v65 = (v62.i32[0] - 1) & v63;
      }
      v66 = *(uint64_t ***)(*a1 + 8 * v65);
      if (!v66 || (v67 = *v66) == 0)
LABEL_165:
        sub_223198218("unordered_map::at: key not found");
      if (v64.u32[0] < 2uLL)
      {
        v68 = *(_QWORD *)&v62 - 1;
        while (1)
        {
          v70 = v67[1];
          if (v70 == v63)
          {
            if (*((_DWORD *)v67 + 4) == (_DWORD)v63)
              goto LABEL_116;
          }
          else if ((v70 & v68) != v65)
          {
            goto LABEL_165;
          }
          v67 = (uint64_t *)*v67;
          if (!v67)
            goto LABEL_165;
        }
      }
      while (1)
      {
        v69 = v67[1];
        if (v69 == v63)
        {
          if (*((_DWORD *)v67 + 4) == (_DWORD)v63)
          {
LABEL_116:
            v71 = (void **)v98[0];
            if (v98[0])
            {
              v72 = v67[4];
              if (v72)
              {
                v73 = v72 - 1;
                v74 = v67[3];
                if ((v72 & (v72 - 1)) != 0)
                {
LABEL_128:
                  v79 = *((unsigned int *)v71 + 4);
                  v80 = v79;
                  if (v72 <= v79)
                    v80 = v79 % v72;
                  v81 = *(uint64_t **)(v74 + 8 * v80);
                  if (v81)
                  {
                    while (1)
                    {
                      v81 = (uint64_t *)*v81;
                      if (!v81)
                        break;
                      v82 = v81[1];
                      if (v82 == v79)
                      {
                        if (*((_DWORD *)v81 + 4) == (_DWORD)v79)
                        {
                          v71 = (void **)*v71;
                          if (v71)
                            goto LABEL_128;
                          goto LABEL_93;
                        }
                      }
                      else
                      {
                        if (v82 >= v72)
                          v82 %= v72;
                        if (v82 != v80)
                          break;
                      }
                    }
                  }
                }
                else
                {
                  v75 = v72 + 0xFFFFFFFF;
LABEL_120:
                  v76 = *((unsigned int *)v71 + 4);
                  v77 = *(uint64_t **)(v74 + 8 * (v75 & v76));
                  if (v77)
                  {
                    while (1)
                    {
                      v77 = (uint64_t *)*v77;
                      if (!v77)
                        break;
                      v78 = v77[1];
                      if (v78 == v76)
                      {
                        if (*((_DWORD *)v77 + 4) == (_DWORD)v76)
                        {
                          v71 = (void **)*v71;
                          if (v71)
                            goto LABEL_120;
                          goto LABEL_93;
                        }
                      }
                      else if ((v78 & v73) != (v75 & v76))
                      {
                        break;
                      }
                    }
                  }
                }
              }
            }
            else
            {
LABEL_93:
              sub_223A1AA44((uint64_t)v97, v60, v60);
            }
            v60 += 2;
            goto LABEL_95;
          }
        }
        else
        {
          if (v69 >= *(_QWORD *)&v62)
            v69 %= *(_QWORD *)&v62;
          if (v69 != v65)
            goto LABEL_165;
        }
        v67 = (uint64_t *)*v67;
        if (!v67)
          goto LABEL_165;
      }
    }
    v83 = v98[0];
    if (v97 != (void **)v5 && v98[1] > (void *)*(_QWORD *)(v5 + 24))
    {
      *(_DWORD *)(v5 + 32) = v99;
      v84 = *(_QWORD *)(v5 + 8);
      if (!v84)
        goto LABEL_149;
      for (i = 0; i != v84; ++i)
        *(_QWORD *)(*(_QWORD *)v5 + 8 * i) = 0;
      v86 = *(_DWORD **)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 24) = 0;
      if (v86)
      {
        while (v83)
        {
          v86[4] = v83[4];
          v87 = *(_DWORD **)v86;
          sub_223FD2F10(v5, (uint64_t)v86);
          v83 = *(_DWORD **)v83;
          v86 = v87;
          if (!v87)
            goto LABEL_149;
        }
        do
        {
          v90 = *(_DWORD **)v86;
          operator delete(v86);
          v86 = v90;
        }
        while (v90);
      }
      else
      {
LABEL_149:
        while (v83)
        {
          v88 = operator new(0x18uLL);
          *(_QWORD *)v88 = 0;
          v89 = v83[4];
          v88[4] = v89;
          *((_QWORD *)v88 + 1) = v89;
          sub_223FD2F10(v5, (uint64_t)v88);
          v83 = *(_DWORD **)v83;
        }
      }
      v83 = v98[0];
    }
    if (v83)
    {
      do
      {
        v91 = *(_DWORD **)v83;
        operator delete(v83);
        v83 = v91;
      }
      while (v91);
    }
    v92 = v97[0];
    v97[0] = 0;
    if (v92)
      operator delete(v92);
    v13 = v93;
    if (__p)
      operator delete(__p);
LABEL_14:
    v11 += 2;
    if (v11 != (unsigned int *)v13)
      continue;
    break;
  }
  v13 = v103;
LABEL_161:
  if (v13)
  {
    v104 = v13;
    operator delete(v13);
  }
}

void sub_223FD1A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void **v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;

  if (__p)
  {
    v24 = (void **)a11;
    operator delete(__p);
    v25 = *(_QWORD **)(a11 + 16);
    if (!v25)
      goto LABEL_6;
  }
  else
  {
    v24 = (void **)a11;
    v25 = *(_QWORD **)(a11 + 16);
    if (!v25)
    {
LABEL_6:
      v27 = *v24;
      *v24 = 0;
      if (v27)
        operator delete(v27);
      _Unwind_Resume(exception_object);
    }
  }
  do
  {
    v26 = (_QWORD *)*v25;
    operator delete(v25);
    v25 = v26;
  }
  while (v26);
  goto LABEL_6;
}

void sub_223FD1AA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, _QWORD *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{
  _QWORD *v22;
  _QWORD *v23;
  void *v24;

  v22 = __p;
  if (__p)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      operator delete(v22);
      v22 = v23;
    }
    while (v23);
  }
  if (a13)
    operator delete(a13);
  if (a19)
  {
    operator delete(a19);
    v24 = a22;
    if (!a22)
    {
LABEL_7:
      if (*(_QWORD *)(a11 + 16))
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  else
  {
    v24 = a22;
    if (!a22)
      goto LABEL_7;
  }
  operator delete(v24);
  if (*(_QWORD *)(a11 + 16))
LABEL_8:
    JUMPOUT(0x223FD1B60);
LABEL_11:
  JUMPOUT(0x223FD1B70);
}

void sub_223FD1AD4(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_223FD1AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  __cxa_end_catch();
  sub_22322E828((uint64_t)&a13);
  if (!a19)
  {
    if (!a22)
    {
      if (*(_QWORD *)(a11 + 16))
        JUMPOUT(0x223FD1B60);
      JUMPOUT(0x223FD1B70);
    }
    JUMPOUT(0x223FD1B98);
  }
  JUMPOUT(0x223FD1B88);
}

unint64_t sub_223FD1BA8(unint64_t result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  int *v9;
  unsigned int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  unsigned int v16;
  int *v17;
  unsigned int v18;
  int *v19;
  unsigned int v20;
  int v21;
  int *v22;
  unsigned int v23;
  int *v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  int *v39;
  int *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int *v47;
  int v48;
  int v49;
  int *v50;
  int *v51;
  unint64_t v52;
  unsigned int v53;
  int *v54;
  int *v55;
  int *v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int *v62;
  int v63;
  unint64_t v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int *v73;
  int *v74;
  int *v75;
  unsigned int v76;
  int *v77;
  unsigned int v78;
  int *v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  unsigned int v88;
  int *v89;
  unsigned int v90;
  int *v91;
  int *v92;
  unsigned int v93;
  int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  int *v100;
  unsigned int v101;
  int *v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  int v114;
  int v115;
  int *v116;
  BOOL v118;
  uint64_t v119;
  int *v120;
  int *v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  char *v127;
  int v128;
  int64_t v129;
  int64_t v130;
  BOOL v131;
  uint64_t v132;
  int *v133;
  int *v134;
  int v135;
  unsigned int v136;
  int *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int *v143;
  int *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  int *v149;
  int v150;
  unsigned int v151;
  int *v152;
  int v153;
  int v154;
  int v155;
  int *v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  int *v161;
  int *v162;
  unsigned int v163;
  int v164;
  int v165;

  v7 = (int *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = a2 - 3;
  v10 = (unsigned int *)(a2 - 5);
  v11 = v7;
  while (2)
  {
    v7 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = ((char *)a2 - (char *)v11) >> 3;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(a2 - 1) > v11[1])
        {
          v98 = *v11;
          *v11 = *(a2 - 2);
          *(a2 - 2) = v98;
          v99 = v11[1];
          v11[1] = *(a2 - 1);
          *(a2 - 1) = v99;
        }
        return result;
      case 3:
        v100 = v11 + 1;
        v101 = v11[1];
        v102 = v11 + 3;
        v103 = v11[3];
        v104 = *(a2 - 1);
        if (v103 > v101)
        {
          v105 = *v11;
          if (v104 <= v103)
          {
            *v11 = v11[2];
            v11[1] = v103;
            v11[2] = v105;
            v11[3] = v101;
            if (*(a2 - 1) <= v101)
              return result;
            v11[2] = *(a2 - 2);
            *(a2 - 2) = v105;
            v100 = v11 + 3;
          }
          else
          {
            *v11 = *(a2 - 2);
            *(a2 - 2) = v105;
          }
          v102 = a2 - 1;
          goto LABEL_178;
        }
        if (v104 > v103)
        {
          v153 = v11[2];
          v11[2] = *(a2 - 2);
          *(a2 - 2) = v153;
          v154 = v11[3];
          v11[3] = *(a2 - 1);
          *(a2 - 1) = v154;
          if (v11[3] > v11[1])
          {
            v155 = *v11;
            *v11 = v11[2];
            v11[2] = v155;
LABEL_178:
            v165 = *v100;
            *v100 = *v102;
            *v102 = v165;
            return result;
          }
        }
        return result;
      case 4:
        return (unint64_t)sub_223FD2A8C(v11, v11 + 2, v11 + 4, a2 - 2);
      case 5:
        result = (unint64_t)sub_223FD2A8C(v11, v11 + 2, v11 + 4, v11 + 6);
        if (*(a2 - 1) > v11[7])
        {
          v106 = v11[6];
          v11[6] = *(a2 - 2);
          *(a2 - 2) = v106;
          v107 = v11[7];
          v11[7] = *(a2 - 1);
          *(a2 - 1) = v107;
          v108 = v11[7];
          v109 = v11[5];
          if (v108 > v109)
          {
            v110 = v11[6];
            v111 = v11[3];
            v112 = v11[4];
            v11[4] = v110;
            v11[5] = v108;
            v11[6] = v112;
            v11[7] = v109;
            if (v108 > v111)
            {
              v113 = v11[1];
              v114 = v11[2];
              v11[2] = v110;
              v11[3] = v108;
              v11[4] = v114;
              v11[5] = v111;
              if (v108 > v113)
              {
                v115 = *v11;
                *v11 = v110;
                v11[1] = v108;
                v11[2] = v115;
                v11[3] = v113;
              }
            }
          }
        }
        return result;
      default:
        if (v12 > 191)
        {
          if (!a3)
          {
            if (v11 != a2)
            {
              v129 = (unint64_t)(v13 - 2) >> 1;
              v130 = v129;
              do
              {
                if (v129 >= v130)
                {
                  v132 = (2 * v130) | 1;
                  v133 = &v11[2 * v132];
                  if (2 * v130 + 2 < v13)
                  {
                    v131 = v133[1] > v133[3];
                    v133 += 2 * v131;
                    if (v131)
                      v132 = 2 * v130 + 2;
                  }
                  v134 = &v11[2 * v130];
                  if (v133[1] <= v134[1])
                  {
                    v135 = *v134;
                    v136 = v134[1];
                    do
                    {
                      v137 = v134;
                      v134 = v133;
                      *v137 = *v133;
                      v137[1] = v133[1];
                      if (v129 < v132)
                        break;
                      v138 = (2 * v132) | 1;
                      v133 = &v11[2 * v138];
                      v139 = 2 * v132 + 2;
                      if (v139 < v13)
                      {
                        v131 = v133[1] > v133[3];
                        v133 += 2 * v131;
                        if (v131)
                          v138 = v139;
                      }
                      result = v133[1];
                      v132 = v138;
                    }
                    while (result <= v136);
                    *v134 = v135;
                    v134[1] = v136;
                  }
                }
                v131 = v130-- <= 0;
              }
              while (!v131);
              v140 = (unint64_t)v12 >> 3;
              do
              {
                v141 = 0;
                v142 = *(_QWORD *)v11;
                v143 = v11;
                do
                {
                  v144 = &v143[2 * v141 + 2];
                  v145 = (2 * v141) | 1;
                  v146 = 2 * v141 + 2;
                  if (v146 < v140)
                  {
                    v131 = v144[1] > v144[3];
                    v144 += 2 * v131;
                    if (v131)
                      v145 = v146;
                  }
                  *v143 = *v144;
                  v143[1] = v144[1];
                  v143 = v144;
                  v141 = v145;
                }
                while (v145 <= (uint64_t)((unint64_t)(v140 - 2) >> 1));
                if (v144 == a2 - 2)
                {
                  *(_QWORD *)v144 = v142;
                }
                else
                {
                  *v144 = *(a2 - 2);
                  v144[1] = *(a2 - 1);
                  *((_QWORD *)a2 - 1) = v142;
                  v147 = (char *)v144 - (char *)v11 + 8;
                  if (v147 >= 9)
                  {
                    v148 = (((unint64_t)v147 >> 3) - 2) >> 1;
                    v149 = &v11[2 * v148];
                    if (v149[1] > v144[1])
                    {
                      v150 = *v144;
                      v151 = v144[1];
                      do
                      {
                        v152 = v144;
                        v144 = v149;
                        *v152 = *v149;
                        v152[1] = v149[1];
                        if (!v148)
                          break;
                        v148 = (v148 - 1) >> 1;
                        v149 = &v11[2 * v148];
                      }
                      while (v149[1] > v151);
                      *v144 = v150;
                      v144[1] = v151;
                    }
                  }
                }
                a2 -= 2;
                v131 = v140-- <= 2;
              }
              while (!v131);
            }
            return result;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = &v11[2 * ((unint64_t)v13 >> 1)];
          v16 = *v8;
          if ((unint64_t)v12 < 0x401)
          {
            v22 = v11 + 1;
            v23 = v11[1];
            v24 = v15 + 1;
            v25 = v15[1];
            if (v23 <= v25)
            {
              if (v16 <= v23
                || (v31 = *v11,
                    *v11 = *(a2 - 2),
                    *(a2 - 2) = v31,
                    v32 = v11[1],
                    v11[1] = *(a2 - 1),
                    *(a2 - 1) = v32,
                    v11[1] <= *v24))
              {
LABEL_33:
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_61;
                goto LABEL_60;
              }
              v33 = *v15;
              *v15 = *v11;
              *v11 = v33;
            }
            else
            {
              v26 = *v15;
              if (v16 <= v23)
              {
                *v15 = *v11;
                v15[1] = v23;
                *v11 = v26;
                v11[1] = v25;
                if (*v8 <= v25)
                  goto LABEL_33;
                *v11 = *(a2 - 2);
                *(a2 - 2) = v26;
                v24 = v11 + 1;
              }
              else
              {
                *v15 = *(a2 - 2);
                *(a2 - 2) = v26;
              }
              v22 = a2 - 1;
            }
            v48 = *v24;
            *v24 = *v22;
            *v22 = v48;
            goto LABEL_33;
          }
          v17 = v15 + 1;
          v18 = v15[1];
          v19 = v11 + 1;
          v20 = v11[1];
          if (v18 > v20)
          {
            v21 = *v11;
            if (v16 <= v18)
            {
              *v11 = *v15;
              v11[1] = v18;
              *v15 = v21;
              v15[1] = v20;
              if (*v8 <= v20)
                goto LABEL_23;
              *v15 = *(a2 - 2);
              *(a2 - 2) = v21;
              v19 = v15 + 1;
            }
            else
            {
              *v11 = *(a2 - 2);
              *(a2 - 2) = v21;
            }
            v30 = a2 - 1;
            goto LABEL_22;
          }
          if (v16 > v18)
          {
            v27 = *v15;
            *v15 = *(a2 - 2);
            *(a2 - 2) = v27;
            v28 = v15[1];
            v15[1] = *(a2 - 1);
            *(a2 - 1) = v28;
            if (v15[1] > *v19)
            {
              v29 = *v11;
              *v11 = *v15;
              *v15 = v29;
              v30 = v15 + 1;
LABEL_22:
              v34 = *v19;
              *v19 = *v30;
              *v30 = v34;
            }
          }
LABEL_23:
          v35 = &v11[2 * v14];
          v38 = *(v35 - 1);
          v36 = (unsigned int *)(v35 - 1);
          v37 = v38;
          v39 = (int *)(v36 - 1);
          v40 = v11 + 3;
          v41 = v11[3];
          v42 = *v9;
          if (v38 > v41)
          {
            v43 = v11[2];
            if (v42 <= v37)
            {
              v11[2] = *v39;
              v11[3] = v37;
              *v39 = v43;
              *v36 = v41;
              if (*v9 <= v41)
                goto LABEL_39;
              *v39 = *(a2 - 4);
              *(a2 - 4) = v43;
              v40 = (int *)v36;
            }
            else
            {
              v11[2] = *(a2 - 4);
              *(a2 - 4) = v43;
            }
            v47 = a2 - 3;
            goto LABEL_38;
          }
          if (v42 > v37)
          {
            v44 = *v39;
            *v39 = *(a2 - 4);
            *(a2 - 4) = v44;
            v45 = *v36;
            *v36 = *(a2 - 3);
            *(a2 - 3) = v45;
            if (*v36 > *v40)
            {
              v46 = v11[2];
              v11[2] = *v39;
              *v39 = v46;
              v47 = (int *)v36;
LABEL_38:
              v49 = *v40;
              *v40 = *v47;
              *v47 = v49;
            }
          }
LABEL_39:
          v50 = &v11[2 * v14];
          v53 = v50[3];
          v51 = v50 + 3;
          v52 = v53;
          v54 = v51 - 1;
          v56 = v11 + 5;
          v55 = (int *)v11[5];
          v57 = *v10;
          if (v53 > v55)
          {
            v58 = v11[4];
            if (v57 <= v52)
            {
              v11[4] = *v54;
              v11[5] = v52;
              *v54 = v58;
              *v51 = (int)v55;
              v52 = (unint64_t)v55;
              if (*v10 <= v55)
                goto LABEL_49;
              *v54 = *(a2 - 6);
              *(a2 - 6) = v58;
              v56 = v51;
            }
            else
            {
              v11[4] = *(a2 - 6);
              *(a2 - 6) = v58;
            }
            v62 = a2 - 5;
            goto LABEL_48;
          }
          if (v57 > v52)
          {
            v59 = *v54;
            *v54 = *(a2 - 6);
            *(a2 - 6) = v59;
            v60 = *v51;
            *v51 = *(a2 - 5);
            *(a2 - 5) = v60;
            v52 = *v51;
            if (v52 > *v56)
            {
              v61 = v11[4];
              v11[4] = *v54;
              *v54 = v61;
              v62 = v51;
LABEL_48:
              v63 = *v56;
              *v56 = *v62;
              *v62 = v63;
              v52 = *v51;
            }
          }
LABEL_49:
          result = *v17;
          v64 = *v36;
          if (result <= v64)
          {
            v65 = *v15;
            if (v52 <= result)
              goto LABEL_59;
            v66 = *v54;
            *v15 = *v54;
            v15[1] = v52;
            *v54 = v65;
            v54[1] = result;
            if (v52 > v64)
            {
              v67 = *v39;
              *v39 = v66;
              *v15 = v67;
LABEL_58:
              *v36 = v52;
              *v17 = v64;
              v65 = *v15;
              result = v11[2 * v14 + 1];
              goto LABEL_59;
            }
            result = v52;
            v65 = v66;
          }
          else
          {
            v65 = *v39;
            if (v52 > result)
            {
              *v39 = *v54;
              *v54 = v65;
LABEL_57:
              v17 = v51;
              goto LABEL_58;
            }
            *v39 = *v15;
            *v36 = result;
            *v15 = v65;
            v15[1] = v64;
            if (v52 > v64)
            {
              *v15 = *v54;
              *v54 = v65;
              v36 = (unsigned int *)(v15 + 1);
              goto LABEL_57;
            }
            result = v64;
          }
LABEL_59:
          v68 = *(_QWORD *)v11;
          *v11 = v65;
          v11[1] = result;
          *(_QWORD *)v15 = v68;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_61;
LABEL_60:
          if (*(v11 - 1) <= v11[1])
          {
            v85 = *(_QWORD *)v11;
            v86 = HIDWORD(*(_QWORD *)v11);
            if (*v8 >= v86)
            {
              v89 = v11 + 2;
              do
              {
                v11 = v89;
                if (v89 >= a2)
                  break;
                v90 = v89[1];
                v89 += 2;
              }
              while (v90 >= v86);
            }
            else
            {
              v87 = v11;
              do
              {
                v11 = v87 + 2;
                v88 = v87[3];
                v87 += 2;
              }
              while (v88 >= v86);
            }
            v91 = a2;
            if (v11 < a2)
            {
              v92 = a2;
              do
              {
                v91 = v92 - 2;
                v93 = *(v92 - 1);
                v92 -= 2;
              }
              while (v93 < v86);
            }
            while (v11 < v91)
            {
              v94 = *v11;
              *v11 = *v91;
              *v91 = v94;
              v95 = v11[1];
              v11[1] = v91[1];
              v91[1] = v95;
              do
              {
                v96 = v11[3];
                v11 += 2;
              }
              while (v96 >= v86);
              do
              {
                v97 = *(v91 - 1);
                v91 -= 2;
              }
              while (v97 < v86);
            }
            if (v11 - 2 != v7)
            {
              *v7 = *(v11 - 2);
              v7[1] = *(v11 - 1);
            }
            a4 = 0;
            *(v11 - 2) = v85;
            *(v11 - 1) = v86;
            continue;
          }
LABEL_61:
          v69 = 0;
          v70 = *(_QWORD *)v11;
          v71 = HIDWORD(*(_QWORD *)v11);
          do
          {
            v72 = v11[v69 + 3];
            v69 += 2;
          }
          while (v72 > v71);
          v73 = &v11[v69];
          v74 = a2;
          if (v69 == 2)
          {
            v77 = a2;
            while (v73 < v77)
            {
              v75 = v77 - 2;
              v78 = *(v77 - 1);
              v77 -= 2;
              if (v78 > v71)
                goto LABEL_69;
            }
            v75 = v77;
            v11 = v73;
          }
          else
          {
            do
            {
              v75 = v74 - 2;
              v76 = *(v74 - 1);
              v74 -= 2;
            }
            while (v76 <= v71);
LABEL_69:
            v11 = v73;
            if (v73 < v75)
            {
              v79 = v75;
              do
              {
                v80 = *v11;
                *v11 = *v79;
                *v79 = v80;
                v81 = v11[1];
                v11[1] = v79[1];
                v79[1] = v81;
                do
                {
                  v82 = v11[3];
                  v11 += 2;
                }
                while (v82 > v71);
                do
                {
                  v83 = *(v79 - 1);
                  v79 -= 2;
                }
                while (v83 <= v71);
              }
              while (v11 < v79);
            }
          }
          if (v11 - 2 != v7)
          {
            *v7 = *(v11 - 2);
            v7[1] = *(v11 - 1);
          }
          *(v11 - 2) = v70;
          *(v11 - 1) = v71;
          if (v73 < v75)
            goto LABEL_80;
          v84 = sub_223FD2718(v7, v11 - 2);
          result = sub_223FD2718(v11, a2);
          if (!(_DWORD)result)
          {
            if (v84)
              continue;
LABEL_80:
            result = sub_223FD1BA8(v7, v11 - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v11 - 2;
          if (v84)
            return result;
          goto LABEL_2;
        }
        v116 = v11 + 2;
        v118 = v11 == a2 || v116 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v118)
          {
            v119 = 0;
            v120 = v11;
            do
            {
              v122 = v120[3];
              v123 = v120[1];
              v120 = v116;
              if (v122 > v123)
              {
                v124 = *v116;
                v125 = v120[1];
                v126 = v119;
                do
                {
                  v127 = (char *)v11 + v126;
                  v128 = *(int *)((char *)v11 + v126 + 4);
                  *((_DWORD *)v127 + 2) = *(int *)((char *)v11 + v126);
                  *((_DWORD *)v127 + 3) = v128;
                  if (!v126)
                  {
                    v121 = v11;
                    goto LABEL_126;
                  }
                  v126 -= 8;
                }
                while (*((_DWORD *)v127 - 1) < v125);
                v121 = (int *)((char *)v11 + v126 + 8);
LABEL_126:
                *v121 = v124;
                v121[1] = v125;
              }
              v116 = v120 + 2;
              v119 += 8;
            }
            while (v120 + 2 != a2);
          }
        }
        else if (!v118)
        {
          v156 = v11 + 3;
          do
          {
            v157 = v7[3];
            v158 = v7[1];
            v7 = v116;
            if (v157 > v158)
            {
              v159 = *(_QWORD *)v116;
              v160 = HIDWORD(*(_QWORD *)v7);
              v161 = v156;
              do
              {
                v162 = v161;
                v163 = *(v161 - 4);
                *(v161 - 1) = *(v161 - 3);
                v164 = *(v161 - 2);
                v161 -= 2;
                *v162 = v164;
              }
              while (v163 < v160);
              *(v161 - 1) = v159;
              *v161 = v160;
            }
            v116 = v7 + 2;
            v156 += 2;
          }
          while (v7 + 2 != a2);
        }
        return result;
    }
  }
}

BOOL sub_223FD2718(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  int *v8;
  unsigned int v9;
  int *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int *v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int *v37;
  uint64_t v38;
  int v39;
  int *v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  _DWORD *v44;
  int v45;
  char *v46;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) > a1[1])
      {
        v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        v7 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v8 = a1 + 1;
      v9 = a1[1];
      v10 = a1 + 3;
      v11 = a1[3];
      v12 = *(a2 - 1);
      if (v11 > v9)
      {
        v13 = *a1;
        if (v12 <= v11)
        {
          *a1 = a1[2];
          a1[1] = v11;
          a1[2] = v13;
          a1[3] = v9;
          if (*(a2 - 1) <= v9)
            return result;
          a1[2] = *(a2 - 2);
          *(a2 - 2) = v13;
          v8 = a1 + 3;
        }
        else
        {
          *a1 = *(a2 - 2);
          *(a2 - 2) = v13;
        }
        v10 = a2 - 1;
        goto LABEL_27;
      }
      if (v12 > v11)
      {
        v30 = a1[2];
        a1[2] = *(a2 - 2);
        *(a2 - 2) = v30;
        v31 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v31;
        if (a1[3] > a1[1])
        {
          v32 = *a1;
          *a1 = a1[2];
          a1[2] = v32;
LABEL_27:
          v36 = *v8;
          *v8 = *v10;
          *v10 = v36;
          return result;
        }
      }
      return result;
    case 4:
      sub_223FD2A8C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_223FD2A8C(a1, a1 + 2, a1 + 4, a1 + 6);
      if (*(a2 - 1) <= a1[7])
        return 1;
      v20 = a1[6];
      a1[6] = *(a2 - 2);
      *(a2 - 2) = v20;
      v21 = a1[7];
      a1[7] = *(a2 - 1);
      *(a2 - 1) = v21;
      v22 = a1[7];
      v23 = a1[5];
      if (v22 <= v23)
        return 1;
      v24 = a1[6];
      v25 = a1[3];
      v26 = a1[4];
      a1[4] = v24;
      a1[5] = v22;
      a1[6] = v26;
      a1[7] = v23;
      if (v22 <= v25)
        return 1;
      v27 = a1[1];
      v28 = a1[2];
      a1[2] = v24;
      a1[3] = v22;
      a1[4] = v28;
      a1[5] = v25;
      if (v22 <= v27)
        return 1;
      v29 = *a1;
      *a1 = v24;
      a1[1] = v22;
      a1[2] = v29;
      a1[3] = v27;
      return 1;
    default:
      v14 = a1[1];
      v15 = (unsigned int *)(a1 + 3);
      v16 = a1[3];
      v17 = a1[5];
      if (v16 > v14)
      {
        v18 = *a1;
        if (v17 <= v16)
        {
          *a1 = a1[2];
          a1[1] = v16;
          a1[2] = v18;
          a1[3] = v14;
          if (v17 <= v14)
            goto LABEL_32;
          a1[2] = a1[4];
          a1[4] = v18;
          v19 = (unsigned int *)(a1 + 3);
        }
        else
        {
          *a1 = a1[4];
          a1[4] = v18;
          v19 = (unsigned int *)(a1 + 1);
        }
        v15 = (unsigned int *)(a1 + 5);
        goto LABEL_31;
      }
      if (v17 > v16)
      {
        v33 = a1[2];
        v34 = a1[4];
        a1[2] = v34;
        a1[3] = v17;
        a1[4] = v33;
        a1[5] = v16;
        if (v17 > v14)
        {
          v35 = *a1;
          *a1 = v34;
          a1[2] = v35;
          v19 = (unsigned int *)(a1 + 1);
LABEL_31:
          *v19 = v17;
          *v15 = v14;
        }
      }
LABEL_32:
      v37 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v38 = 0;
      v39 = 0;
      v40 = a1 + 4;
      while (v37[1] <= v40[1])
      {
LABEL_41:
        v40 = v37;
        v38 += 8;
        v37 += 2;
        if (v37 == a2)
          return 1;
      }
      v41 = *v37;
      v42 = v37[1];
      v43 = v38;
      do
      {
        v44 = (int *)((char *)a1 + v43);
        v45 = *(int *)((char *)a1 + v43 + 20);
        v44[6] = *(int *)((char *)a1 + v43 + 16);
        v44[7] = v45;
        if (v43 == -16)
        {
          *a1 = v41;
          a1[1] = v42;
          if (++v39 != 8)
            goto LABEL_41;
          return v37 + 2 == a2;
        }
        v43 -= 8;
      }
      while (v44[3] < v42);
      v46 = (char *)a1 + v43;
      *((_DWORD *)v46 + 6) = v41;
      *((_DWORD *)v46 + 7) = v42;
      if (++v39 != 8)
        goto LABEL_41;
      return v37 + 2 == a2;
  }
}

int *sub_223FD2A8C(int *result, int *a2, _DWORD *a3, _DWORD *a4)
{
  unsigned int v4;
  _DWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  int *v9;
  int v10;
  int v11;
  int *v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  v4 = a2[1];
  v5 = result + 1;
  v6 = a3 + 1;
  v7 = a3[1];
  if (v4 <= result[1])
  {
    if (v7 > v4)
    {
      v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      v7 = a2[1];
      a2[1] = a3[1];
      a3[1] = v7;
      if (a2[1] > *v5)
      {
        v11 = *result;
        *result = *a2;
        *a2 = v11;
        v9 = result + 1;
        v12 = a2 + 1;
LABEL_10:
        v15 = *v9;
        *v9 = *v12;
        *v12 = v15;
        v7 = *v6;
      }
    }
  }
  else
  {
    v8 = *result;
    if (v7 > v4)
    {
      *result = *a3;
      *a3 = v8;
      v9 = result + 1;
LABEL_9:
      v12 = a3 + 1;
      goto LABEL_10;
    }
    *result = *a2;
    *a2 = v8;
    v13 = result[1];
    result[1] = a2[1];
    a2[1] = v13;
    v7 = *v6;
    if (*v6 > v13)
    {
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      v9 = a2 + 1;
      goto LABEL_9;
    }
  }
  if (a4[1] > v7)
  {
    v16 = *a3;
    *a3 = *a4;
    *a4 = v16;
    v17 = a3[1];
    a3[1] = a4[1];
    a4[1] = v17;
    if (a3[1] > a2[1])
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v19 = a2[1];
      a2[1] = a3[1];
      a3[1] = v19;
      if (a2[1] > *v5)
      {
        v20 = *result;
        *result = *a2;
        *a2 = v20;
        v21 = result[1];
        result[1] = a2[1];
        a2[1] = v21;
      }
    }
  }
  return result;
}

char *sub_223FD2C04(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_2231B0668(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v24)
  {
    *(_QWORD *)v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v6) = v13;
  if (*(_QWORD *)v10)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_223FD2EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223ED12A0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FD2F10(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  size_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint64_t *i;
  uint8x8_t v31;
  unint64_t v32;
  uint64_t *v33;
  unsigned __int8 v34;
  int v35;
  int v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  size_t v45;
  void *v46;
  uint8x8_t v47;
  uint8x8_t v48;
  uint64_t v49;
  uint64_t *v50;
  char v51;
  int v52;
  char v53;
  uint64_t v54;
  unint64_t v55;

  v4 = *(unsigned int *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (v5 && (float)(v7 * (float)v5) >= v6)
    goto LABEL_76;
  v8 = 1;
  if (v5 >= 3)
    v8 = (v5 & (v5 - 1)) != 0;
  v9 = v8 | (2 * v5);
  v10 = vcvtps_u32_f32(v6 / v7);
  if (v9 <= v10)
    prime = (int8x8_t)v10;
  else
    prime = (int8x8_t)v9;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v5)
  {
    if (*(_QWORD *)&prime >= v5)
      goto LABEL_76;
    v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v45 = std::__next_prime(v25);
      if (*(_QWORD *)&prime <= v45)
        prime = (int8x8_t)v45;
      if (*(_QWORD *)&prime >= v5)
      {
LABEL_38:
        v5 = *(_QWORD *)(a1 + 8);
        v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v28.i16[0] = vaddlv_u8(v28);
        v29 = v28.u32[0];
        if (v28.u32[0] >= 2uLL)
          goto LABEL_44;
        goto LABEL_77;
      }
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v5)
        goto LABEL_38;
    }
    if (!*(_QWORD *)&prime)
    {
      v46 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v46)
        operator delete(v46);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      v47 = (uint8x8_t)vcnt_s8(0);
      v47.i16[0] = vaddlv_u8(v47);
      v29 = v47.u32[0];
      if (v47.u32[0] >= 2uLL)
        goto LABEL_44;
      goto LABEL_77;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    sub_223174E94();
  v12 = operator new(8 * *(_QWORD *)&prime);
  v13 = *(void **)a1;
  *(_QWORD *)a1 = v12;
  if (v13)
    operator delete(v13);
  v14 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
  while (*(_QWORD *)&prime != v14);
  v16 = a1 + 16;
  v15 = *(uint64_t ***)(a1 + 16);
  if (v15)
  {
    v17 = (unint64_t)v15[1];
    v18 = *(_QWORD *)&prime - 1;
    if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) == 0)
    {
      v19 = v17 & v18;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v16;
      v20 = *v15;
      if (!*v15)
        goto LABEL_43;
      do
      {
        v21 = v20[1] & v18;
        if (v21 == v19)
        {
          v15 = (uint64_t **)v20;
        }
        else
        {
          v22 = v20;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
          {
            do
            {
              v23 = v22;
              v22 = (uint64_t *)*v22;
            }
            while (v22 && *((_DWORD *)v20 + 4) == *((_DWORD *)v22 + 4));
            *v15 = v22;
            v24 = 8 * v21;
            *v23 = **(_QWORD **)(*(_QWORD *)a1 + v24);
            **(_QWORD **)(*(_QWORD *)a1 + v24) = v20;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v15;
            v15 = (uint64_t **)v20;
            v19 = v21;
          }
        }
        v20 = *v15;
      }
      while (*v15);
      v5 = (unint64_t)prime;
LABEL_76:
      v48 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
      v48.i16[0] = vaddlv_u8(v48);
      v29 = v48.u32[0];
      if (v48.u32[0] >= 2uLL)
        goto LABEL_44;
      goto LABEL_77;
    }
    if (v17 >= *(_QWORD *)&prime)
      v17 %= *(_QWORD *)&prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = v16;
    for (i = *v15; *v15; i = *v15)
    {
      v40 = i[1];
      if (v40 >= *(_QWORD *)&prime)
        v40 %= *(_QWORD *)&prime;
      if (v40 == v17)
      {
        v15 = (uint64_t **)i;
      }
      else
      {
        v41 = i;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v40))
        {
          do
          {
            v42 = v41;
            v41 = (uint64_t *)*v41;
          }
          while (v41 && *((_DWORD *)i + 4) == *((_DWORD *)v41 + 4));
          *v15 = v41;
          v43 = 8 * v40;
          *v42 = **(_QWORD **)(*(_QWORD *)a1 + v43);
          **(_QWORD **)(*(_QWORD *)a1 + v43) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v15;
          v15 = (uint64_t **)i;
          v17 = v40;
        }
      }
    }
  }
LABEL_43:
  v5 = (unint64_t)prime;
  v31 = (uint8x8_t)vcnt_s8(prime);
  v31.i16[0] = vaddlv_u8(v31);
  v29 = v31.u32[0];
  if (v31.u32[0] >= 2uLL)
  {
LABEL_44:
    v32 = v4;
    if (v5 <= v4)
      v32 = v4 % v5;
    v33 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v32);
    if (!v33)
    {
      v37 = 0;
      v44 = *(_QWORD *)(a2 + 8);
      goto LABEL_85;
    }
    v34 = 0;
    v35 = *(_DWORD *)(a2 + 16);
    while (1)
    {
      v37 = v33;
      v33 = (uint64_t *)*v33;
      if (!v33)
        goto LABEL_84;
      v38 = v33[1];
      v39 = v38;
      if (v38 >= v5)
        v39 = v38 % v5;
      if (v39 != v32)
        goto LABEL_84;
      if (v38 == v4)
      {
        v36 = v34 & (*((_DWORD *)v33 + 4) != v35);
        v34 |= *((_DWORD *)v33 + 4) == v35;
        if (v36 == 1)
          goto LABEL_84;
      }
      else if ((v34 & 1) == 1)
      {
        goto LABEL_84;
      }
    }
  }
LABEL_77:
  v49 = (v5 - 1) & v4;
  v50 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v49);
  if (!v50)
  {
    v37 = 0;
    v44 = *(_QWORD *)(a2 + 8);
LABEL_96:
    v44 &= v5 - 1;
    if (v37)
      goto LABEL_88;
LABEL_97:
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = a1 + 16;
    if (!*(_QWORD *)a2)
      goto LABEL_103;
    v55 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v29 > 1)
    {
      if (v55 >= v5)
        v55 %= v5;
    }
    else
    {
      v55 &= v5 - 1;
    }
LABEL_102:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v55) = a2;
    goto LABEL_103;
  }
  v51 = 0;
  v52 = *(_DWORD *)(a2 + 16);
  while (1)
  {
    v37 = v50;
    v50 = (uint64_t *)*v50;
    if (!v50)
      break;
    v54 = v50[1];
    if ((v54 & (v5 - 1)) != v49)
      break;
    if (v54 == v4)
    {
      v53 = v51 & (*((_DWORD *)v50 + 4) != v52);
      v51 |= *((_DWORD *)v50 + 4) == v52;
      if ((v53 & 1) != 0)
        break;
    }
    else if ((v51 & 1) != 0)
    {
      break;
    }
  }
LABEL_84:
  v44 = *(_QWORD *)(a2 + 8);
  if (v29 <= 1)
    goto LABEL_96;
LABEL_85:
  if (v44 >= v5)
    v44 %= v5;
  if (!v37)
    goto LABEL_97;
LABEL_88:
  *(_QWORD *)a2 = *v37;
  *v37 = a2;
  if (*(_QWORD *)a2)
  {
    v55 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v29 > 1)
    {
      if (v55 >= v5)
        v55 %= v5;
    }
    else
    {
      v55 &= v5 - 1;
    }
    if (v55 != v44)
      goto LABEL_102;
  }
LABEL_103:
  ++*(_QWORD *)(a1 + 24);
}

uint64_t sub_223FD3470(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char **v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(char **)(a2 + 56);
  v5 = *(char **)(a2 + 64);
  v46 = 0uLL;
  *(_QWORD *)&v47 = 0;
  v6 = v5 - v4;
  if (v5 == v4)
  {
    v8 = 0;
    v7 = 0uLL;
  }
  else
  {
    if (v6 < 0)
      sub_22316E078();
    *(_QWORD *)&v46 = operator new(v5 - v4);
    *((_QWORD *)&v46 + 1) = v46;
    *(_QWORD *)&v47 = v46 + 16 * (v6 >> 4);
    v50 = (char **)&v46;
    do
    {
      v51 = *(_OWORD *)v4;
      sub_2232E9564(&v50, &v51);
      v4 += 16;
    }
    while (v4 != v5);
    v7 = v46;
    v8 = v47;
  }
  *(_OWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  v9 = *(char **)(a2 + 80);
  v10 = *(char **)(a2 + 88);
  v51 = 0uLL;
  v52 = 0;
  v11 = v10 - v9;
  if (v10 == v9)
  {
    v16 = 0;
    v15 = 0uLL;
  }
  else
  {
    if (v11 < 0)
      sub_22316E078();
    *(_QWORD *)&v51 = operator new(v10 - v9);
    *((_QWORD *)&v51 + 1) = v51;
    v52 = v51 + (v11 >> 6 << 6);
    v50 = (char **)&v51;
    do
    {
      v12 = *(_OWORD *)v9;
      v13 = *((_OWORD *)v9 + 1);
      v14 = *((_OWORD *)v9 + 3);
      v48 = *((_OWORD *)v9 + 2);
      v49 = v14;
      v46 = v12;
      v47 = v13;
      sub_223C790E8(&v50, &v46);
      v9 += 64;
    }
    while (v9 != v10);
    v15 = v51;
    v16 = v52;
  }
  *(_OWORD *)(a1 + 32) = v15;
  *(_QWORD *)(a1 + 48) = v16;
  v17 = *(char **)(a2 + 104);
  v18 = *(char **)(a2 + 112);
  v46 = 0uLL;
  *(_QWORD *)&v47 = 0;
  v19 = v18 - v17;
  if (v18 == v17)
  {
    v21 = 0;
    v20 = 0uLL;
  }
  else
  {
    if (v19 < 0)
      sub_22316E078();
    *(_QWORD *)&v46 = operator new(v18 - v17);
    *((_QWORD *)&v46 + 1) = v46;
    *(_QWORD *)&v47 = v46 + 16 * (v19 >> 4);
    v50 = (char **)&v46;
    do
    {
      v51 = *(_OWORD *)v17;
      sub_2232E9564(&v50, &v51);
      v17 += 16;
    }
    while (v17 != v18);
    v20 = v46;
    v21 = v47;
  }
  *(_OWORD *)(a1 + 56) = v20;
  *(_QWORD *)(a1 + 72) = v21;
  v22 = *(char **)(a2 + 152);
  v23 = *(char **)(a2 + 160);
  v46 = 0uLL;
  *(_QWORD *)&v47 = 0;
  v24 = v23 - v22;
  if (v23 == v22)
  {
    v26 = 0;
    v25 = 0uLL;
  }
  else
  {
    if (v24 < 0)
      sub_22316E078();
    *(_QWORD *)&v46 = operator new(v23 - v22);
    *((_QWORD *)&v46 + 1) = v46;
    *(_QWORD *)&v47 = v46 + 16 * (v24 >> 4);
    v50 = (char **)&v46;
    do
    {
      v51 = *(_OWORD *)v22;
      sub_2232E9564(&v50, &v51);
      v22 += 16;
    }
    while (v22 != v23);
    v25 = v46;
    v26 = v47;
  }
  *(_OWORD *)(a1 + 80) = v25;
  *(_QWORD *)(a1 + 96) = v26;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 176);
  v27 = *(char **)(a2 + 8);
  v28 = *(char **)(a2 + 16);
  v46 = 0uLL;
  *(_QWORD *)&v47 = 0;
  v29 = v28 - v27;
  if (v28 == v27)
  {
    v31 = 0;
    v30 = 0uLL;
  }
  else
  {
    if (v29 < 0)
      sub_22316E078();
    *(_QWORD *)&v46 = operator new(v28 - v27);
    *((_QWORD *)&v46 + 1) = v46;
    *(_QWORD *)&v47 = v46 + 16 * (v29 >> 4);
    v50 = (char **)&v46;
    do
    {
      v51 = *(_OWORD *)v27;
      sub_2232E9564(&v50, &v51);
      v27 += 16;
    }
    while (v27 != v28);
    v30 = v46;
    v31 = v47;
  }
  *(_OWORD *)(a1 + 112) = v30;
  *(_QWORD *)(a1 + 128) = v31;
  v32 = *(char **)(a2 + 32);
  v33 = *(char **)(a2 + 40);
  v51 = 0uLL;
  v52 = 0;
  v34 = v33 - v32;
  if (v33 == v32)
  {
    v39 = 0;
    v38 = 0uLL;
  }
  else
  {
    if (v34 < 0)
      sub_22316E078();
    *(_QWORD *)&v51 = operator new(v33 - v32);
    *((_QWORD *)&v51 + 1) = v51;
    v52 = v51 + (v34 >> 6 << 6);
    v50 = (char **)&v51;
    do
    {
      v35 = *(_OWORD *)v32;
      v36 = *((_OWORD *)v32 + 1);
      v37 = *((_OWORD *)v32 + 3);
      v48 = *((_OWORD *)v32 + 2);
      v49 = v37;
      v46 = v35;
      v47 = v36;
      sub_223C790E8(&v50, &v46);
      v32 += 64;
    }
    while (v32 != v33);
    v38 = v51;
    v39 = v52;
  }
  *(_OWORD *)(a1 + 136) = v38;
  *(_QWORD *)(a1 + 152) = v39;
  v40 = *(char **)(a2 + 128);
  v41 = *(char **)(a2 + 136);
  v46 = 0uLL;
  *(_QWORD *)&v47 = 0;
  v42 = v41 - v40;
  if (v41 == v40)
  {
    v44 = 0;
    v43 = 0uLL;
  }
  else
  {
    if (v42 < 0)
      sub_22316E078();
    *(_QWORD *)&v46 = operator new(v41 - v40);
    *((_QWORD *)&v46 + 1) = v46;
    *(_QWORD *)&v47 = v46 + 16 * (v42 >> 4);
    v50 = (char **)&v46;
    do
    {
      v51 = *(_OWORD *)v40;
      sub_2232E9564(&v50, &v51);
      v40 += 16;
    }
    while (v40 != v41);
    v43 = v46;
    v44 = v47;
  }
  *(_OWORD *)(a1 + 160) = v43;
  *(_QWORD *)(a1 + 176) = v44;
  return a1;
}

void sub_223FD3878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  _QWORD *v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  if (__p)
    operator delete(__p);
  v22 = (void *)v20[17];
  if (v22)
  {
    v20[18] = v22;
    operator delete(v22);
  }
  v23 = (void *)v20[14];
  if (v23)
  {
    v20[15] = v23;
    operator delete(v23);
  }
  v24 = (void *)v20[10];
  if (v24)
  {
    v20[11] = v24;
    operator delete(v24);
  }
  v25 = (void *)v20[7];
  if (v25)
  {
    v20[8] = v25;
    operator delete(v25);
  }
  v26 = (void *)v20[4];
  if (v26)
  {
    v20[5] = v26;
    operator delete(v26);
  }
  v27 = (void *)v20[1];
  if (v27)
  {
    v20[2] = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void sub_223FD399C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19)
    JUMPOUT(0x223FD39A8);
  JUMPOUT(0x223FD3984);
}

char ***sub_223FD39C4@<X0>(char ***result@<X0>, uint64_t a2@<X8>)
{
  char ***v2;
  __int128 v4;
  char **v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char **v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v2 = result;
  v53 = *MEMORY[0x24BDAC8D0];
  v4 = 0uLL;
  *(_OWORD *)(a2 + 161) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)a2 = *result;
  v5 = result[14];
  v6 = result[15];
  v46 = 0uLL;
  *(_QWORD *)&v47 = 0;
  v7 = (char *)v6 - (char *)v5;
  if (v6 == v5)
  {
    v8 = 0;
  }
  else
  {
    if (v7 < 0)
      sub_22316E078();
    *(_QWORD *)&v46 = operator new((char *)v6 - (char *)v5);
    *((_QWORD *)&v46 + 1) = v46;
    *(_QWORD *)&v47 = v46 + 16 * (v7 >> 4);
    v50 = (char **)&v46;
    do
    {
      v51 = *(_OWORD *)v5;
      result = sub_2232E9564(&v50, &v51);
      v5 += 2;
    }
    while (v5 != v6);
    v4 = v46;
    v8 = v47;
  }
  v9 = (char *)v2[17];
  v10 = (char *)v2[18];
  *(_OWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 24) = v8;
  v51 = 0uLL;
  v52 = 0;
  v11 = v10 - v9;
  if (v10 == v9)
  {
    v16 = 0;
    v15 = 0uLL;
  }
  else
  {
    if (v11 < 0)
      sub_223257BE4();
    *(_QWORD *)&v51 = operator new(v10 - v9);
    *((_QWORD *)&v51 + 1) = v51;
    v52 = v51 + (v11 >> 6 << 6);
    v50 = (char **)&v51;
    do
    {
      v13 = *(_OWORD *)v9;
      v12 = *((_OWORD *)v9 + 1);
      v14 = *((_OWORD *)v9 + 3);
      v48 = *((_OWORD *)v9 + 2);
      v49 = v14;
      v46 = v13;
      v47 = v12;
      result = sub_223C7920C(&v50, &v46);
      v9 += 64;
    }
    while (v9 != v10);
    v15 = v51;
    v16 = v52;
  }
  v17 = (char *)v2[1];
  v18 = (char *)v2[2];
  *(_OWORD *)(a2 + 32) = v15;
  *(_QWORD *)(a2 + 48) = v16;
  v46 = 0uLL;
  *(_QWORD *)&v47 = 0;
  v19 = v18 - v17;
  if (v18 == v17)
  {
    v21 = 0;
    v20 = 0uLL;
  }
  else
  {
    if (v19 < 0)
      sub_22316E078();
    *(_QWORD *)&v46 = operator new(v18 - v17);
    *((_QWORD *)&v46 + 1) = v46;
    *(_QWORD *)&v47 = v46 + 16 * (v19 >> 4);
    v50 = (char **)&v46;
    do
    {
      v51 = *(_OWORD *)v17;
      result = sub_2232E9564(&v50, &v51);
      v17 += 16;
    }
    while (v17 != v18);
    v20 = v46;
    v21 = v47;
  }
  v22 = (char *)v2[4];
  v23 = (char *)v2[5];
  *(_OWORD *)(a2 + 56) = v20;
  *(_QWORD *)(a2 + 72) = v21;
  v51 = 0uLL;
  v52 = 0;
  v24 = v23 - v22;
  if (v23 == v22)
  {
    v29 = 0;
    v28 = 0uLL;
  }
  else
  {
    if (v24 < 0)
      sub_223257BE4();
    *(_QWORD *)&v51 = operator new(v23 - v22);
    *((_QWORD *)&v51 + 1) = v51;
    v52 = v51 + (v24 >> 6 << 6);
    v50 = (char **)&v51;
    do
    {
      v26 = *(_OWORD *)v22;
      v25 = *((_OWORD *)v22 + 1);
      v27 = *((_OWORD *)v22 + 3);
      v48 = *((_OWORD *)v22 + 2);
      v49 = v27;
      v46 = v26;
      v47 = v25;
      result = sub_223C7920C(&v50, &v46);
      v22 += 64;
    }
    while (v22 != v23);
    v28 = v51;
    v29 = v52;
  }
  v30 = (char *)v2[7];
  v31 = (char *)v2[8];
  *(_OWORD *)(a2 + 80) = v28;
  *(_QWORD *)(a2 + 96) = v29;
  v46 = 0uLL;
  *(_QWORD *)&v47 = 0;
  v32 = v31 - v30;
  if (v31 == v30)
  {
    v34 = 0;
    v33 = 0uLL;
  }
  else
  {
    if (v32 < 0)
      sub_22316E078();
    *(_QWORD *)&v46 = operator new(v31 - v30);
    *((_QWORD *)&v46 + 1) = v46;
    *(_QWORD *)&v47 = v46 + 16 * (v32 >> 4);
    v50 = (char **)&v46;
    do
    {
      v51 = *(_OWORD *)v30;
      result = sub_2232E9564(&v50, &v51);
      v30 += 16;
    }
    while (v30 != v31);
    v33 = v46;
    v34 = v47;
  }
  v35 = (char *)v2[20];
  v36 = (char *)v2[21];
  *(_OWORD *)(a2 + 104) = v33;
  *(_QWORD *)(a2 + 120) = v34;
  v46 = 0uLL;
  *(_QWORD *)&v47 = 0;
  v37 = v36 - v35;
  if (v36 == v35)
  {
    v39 = 0;
    v38 = 0uLL;
  }
  else
  {
    if (v37 < 0)
      sub_22316E078();
    *(_QWORD *)&v46 = operator new(v36 - v35);
    *((_QWORD *)&v46 + 1) = v46;
    *(_QWORD *)&v47 = v46 + 16 * (v37 >> 4);
    v50 = (char **)&v46;
    do
    {
      v51 = *(_OWORD *)v35;
      result = sub_2232E9564(&v50, &v51);
      v35 += 16;
    }
    while (v35 != v36);
    v38 = v46;
    v39 = v47;
  }
  v40 = (char *)v2[10];
  v41 = (char *)v2[11];
  *(_OWORD *)(a2 + 128) = v38;
  *(_QWORD *)(a2 + 144) = v39;
  v46 = 0uLL;
  *(_QWORD *)&v47 = 0;
  v42 = v41 - v40;
  if (v41 == v40)
  {
    v44 = 0;
    v43 = 0uLL;
  }
  else
  {
    if (v42 < 0)
      sub_22316E078();
    *(_QWORD *)&v46 = operator new(v41 - v40);
    *((_QWORD *)&v46 + 1) = v46;
    *(_QWORD *)&v47 = v46 + 16 * (v42 >> 4);
    v50 = (char **)&v46;
    do
    {
      v51 = *(_OWORD *)v40;
      result = sub_2232E9564(&v50, &v51);
      v40 += 16;
    }
    while (v40 != v41);
    v43 = v46;
    v44 = v47;
  }
  v45 = *((_BYTE *)v2 + 104);
  *(_OWORD *)(a2 + 152) = v43;
  *(_QWORD *)(a2 + 168) = v44;
  *(_BYTE *)(a2 + 176) = v45;
  return result;
}

void sub_223FD3DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;

  if (__p)
    operator delete(__p);
  sub_22388993C(v20);
  _Unwind_Resume(a1);
}

void sub_223FD3E5C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = operator new(0x38uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24EC64D48;
  v5 = v4 + 3;
  v6 = a2[3];
  if (!v6)
    goto LABEL_4;
  if ((_QWORD *)v6 != a2)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
LABEL_4:
    v4[6] = v6;
    goto LABEL_6;
  }
  v4[6] = v5;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v5);
LABEL_6:
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v5;
  a1[1] = v4;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_223FD3F28(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_223FD3F40(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = operator new(0x38uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24EC64D98;
  v5 = v4 + 3;
  v6 = a2[3];
  if (!v6)
    goto LABEL_4;
  if ((_QWORD *)v6 != a2)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
LABEL_4:
    v4[6] = v6;
    goto LABEL_6;
  }
  v4[6] = v5;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v5);
LABEL_6:
  v7 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_223FD400C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_223FD4024(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = operator new(0x38uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24EC64DE8;
  v5 = v4 + 3;
  v6 = a2[3];
  if (!v6)
    goto LABEL_4;
  if ((_QWORD *)v6 != a2)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
LABEL_4:
    v4[6] = v6;
    goto LABEL_6;
  }
  v4[6] = v5;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v5);
LABEL_6:
  v7 = *(std::__shared_weak_count **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_223FD40F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_223FD4108(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC64D48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223FD4118(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC64D48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FD4148(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 24;
  result = *(_QWORD *)(a1 + 48);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_223FD4188(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC64D98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223FD4198(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC64D98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FD41C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 24;
  result = *(_QWORD *)(a1 + 48);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_223FD4208(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC64DE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223FD4218(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC64DE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FD4248(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 24;
  result = *(_QWORD *)(a1 + 48);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_223FD4288(uint64_t a1, void *a2, size_t a3, char *a4)
{
  std::mutex *v8;

  v8 = (std::mutex *)(a1 + 152);
  std::mutex::lock((std::mutex *)(a1 + 152));
  sub_223FD42F8(a1 + 104, a2, a3, a4);
  std::mutex::unlock(v8);
}

void sub_223FD42E4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_223FD42F8(uint64_t a1, void *__s1, size_t a3, char *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  uint64_t *result;
  _QWORD v21[2];

  v21[0] = __s1;
  v21[1] = a3;
  v6 = (uint64_t *)(a1 + 8);
  v7 = *(uint64_t **)(a1 + 8);
  if (!v7)
    return sub_223FD9E34((uint64_t **)a1, (uint64_t)v21, a4);
  v10 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v11 = *((char *)v7 + 55);
      v12 = v11 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v13 = v11 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v14 = v13 >= a3 ? a3 : v13;
      v15 = memcmp(__s1, v12, v14);
      if (v15)
        break;
      if (a3 <= v13)
        goto LABEL_17;
LABEL_3:
      v7 = (uint64_t *)v7[1];
      if (!v7)
        goto LABEL_18;
    }
    if ((v15 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v10 = v7;
    v7 = (uint64_t *)*v7;
  }
  while (v7);
LABEL_18:
  if (v10 == v6)
    return sub_223FD9E34((uint64_t **)a1, (uint64_t)v21, a4);
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= a3)
    v19 = a3;
  else
    v19 = v18;
  result = (uint64_t *)memcmp(__s1, v17, v19);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      goto LABEL_30;
    return sub_223FD9E34((uint64_t **)a1, (uint64_t)v21, a4);
  }
  else
  {
    if (a3 < v18)
      return sub_223FD9E34((uint64_t **)a1, (uint64_t)v21, a4);
LABEL_30:
    *((_BYTE *)v10 + 56) = *a4;
  }
  return result;
}

uint64_t *sub_223FD4418(uint64_t a1, void *__s1, size_t a3, unsigned __int8 *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  uint64_t *result;
  _QWORD v21[2];

  v21[0] = __s1;
  v21[1] = a3;
  v6 = (uint64_t *)(a1 + 8);
  v7 = *(uint64_t **)(a1 + 8);
  if (!v7)
    return sub_223FDA09C((uint64_t **)a1, (uint64_t)v21, a4);
  v10 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v11 = *((char *)v7 + 55);
      v12 = v11 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v13 = v11 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v14 = v13 >= a3 ? a3 : v13;
      v15 = memcmp(__s1, v12, v14);
      if (v15)
        break;
      if (a3 <= v13)
        goto LABEL_17;
LABEL_3:
      v7 = (uint64_t *)v7[1];
      if (!v7)
        goto LABEL_18;
    }
    if ((v15 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v10 = v7;
    v7 = (uint64_t *)*v7;
  }
  while (v7);
LABEL_18:
  if (v10 == v6)
    return sub_223FDA09C((uint64_t **)a1, (uint64_t)v21, a4);
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= a3)
    v19 = a3;
  else
    v19 = v18;
  result = (uint64_t *)memcmp(__s1, v17, v19);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      goto LABEL_30;
    return sub_223FDA09C((uint64_t **)a1, (uint64_t)v21, a4);
  }
  else
  {
    if (a3 < v18)
      return sub_223FDA09C((uint64_t **)a1, (uint64_t)v21, a4);
LABEL_30:
    v10[7] = *a4;
  }
  return result;
}

void sub_223FD4538(uint64_t a1, void *a2, size_t a3, unsigned int *a4)
{
  std::mutex *v8;

  v8 = (std::mutex *)(a1 + 152);
  std::mutex::lock((std::mutex *)(a1 + 152));
  sub_223FD45A8(a1 + 32, a2, a3, a4);
  std::mutex::unlock(v8);
}

void sub_223FD4594(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_223FD45A8(uint64_t a1, void *__s1, size_t a3, unsigned int *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  uint64_t *result;
  _QWORD v21[2];

  v21[0] = __s1;
  v21[1] = a3;
  v6 = (uint64_t *)(a1 + 8);
  v7 = *(uint64_t **)(a1 + 8);
  if (!v7)
    return sub_223FDA2B8((uint64_t **)a1, (uint64_t)v21, a4);
  v10 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v11 = *((char *)v7 + 55);
      v12 = v11 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v13 = v11 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v14 = v13 >= a3 ? a3 : v13;
      v15 = memcmp(__s1, v12, v14);
      if (v15)
        break;
      if (a3 <= v13)
        goto LABEL_17;
LABEL_3:
      v7 = (uint64_t *)v7[1];
      if (!v7)
        goto LABEL_18;
    }
    if ((v15 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v10 = v7;
    v7 = (uint64_t *)*v7;
  }
  while (v7);
LABEL_18:
  if (v10 == v6)
    return sub_223FDA2B8((uint64_t **)a1, (uint64_t)v21, a4);
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= a3)
    v19 = a3;
  else
    v19 = v18;
  result = (uint64_t *)memcmp(__s1, v17, v19);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      goto LABEL_30;
    return sub_223FDA2B8((uint64_t **)a1, (uint64_t)v21, a4);
  }
  else
  {
    if (a3 < v18)
      return sub_223FDA2B8((uint64_t **)a1, (uint64_t)v21, a4);
LABEL_30:
    v10[7] = *a4;
  }
  return result;
}

uint64_t *sub_223FD46C8(uint64_t a1, void *__s1, size_t a3, int *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  uint64_t *result;
  _QWORD v21[2];

  v21[0] = __s1;
  v21[1] = a3;
  v6 = (uint64_t *)(a1 + 8);
  v7 = *(uint64_t **)(a1 + 8);
  if (!v7)
    return sub_223FDA4D4((uint64_t **)a1, (uint64_t)v21, a4);
  v10 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v11 = *((char *)v7 + 55);
      v12 = v11 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v13 = v11 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v14 = v13 >= a3 ? a3 : v13;
      v15 = memcmp(__s1, v12, v14);
      if (v15)
        break;
      if (a3 <= v13)
        goto LABEL_17;
LABEL_3:
      v7 = (uint64_t *)v7[1];
      if (!v7)
        goto LABEL_18;
    }
    if ((v15 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v10 = v7;
    v7 = (uint64_t *)*v7;
  }
  while (v7);
LABEL_18:
  if (v10 == v6)
    return sub_223FDA4D4((uint64_t **)a1, (uint64_t)v21, a4);
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= a3)
    v19 = a3;
  else
    v19 = v18;
  result = (uint64_t *)memcmp(__s1, v17, v19);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      goto LABEL_30;
    return sub_223FDA4D4((uint64_t **)a1, (uint64_t)v21, a4);
  }
  else
  {
    if (a3 < v18)
      return sub_223FDA4D4((uint64_t **)a1, (uint64_t)v21, a4);
LABEL_30:
    v10[7] = *a4;
  }
  return result;
}

uint64_t *sub_223FD47E8(uint64_t a1, void *__s1, size_t a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  uint64_t *result;
  _QWORD v21[2];

  v21[0] = __s1;
  v21[1] = a3;
  v6 = (uint64_t *)(a1 + 8);
  v7 = *(uint64_t **)(a1 + 8);
  if (!v7)
    return sub_223FDA6F0((uint64_t **)a1, (uint64_t)v21, a4);
  v10 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v11 = *((char *)v7 + 55);
      v12 = v11 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v13 = v11 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v14 = v13 >= a3 ? a3 : v13;
      v15 = memcmp(__s1, v12, v14);
      if (v15)
        break;
      if (a3 <= v13)
        goto LABEL_17;
LABEL_3:
      v7 = (uint64_t *)v7[1];
      if (!v7)
        goto LABEL_18;
    }
    if ((v15 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v10 = v7;
    v7 = (uint64_t *)*v7;
  }
  while (v7);
LABEL_18:
  if (v10 == v6)
    return sub_223FDA6F0((uint64_t **)a1, (uint64_t)v21, a4);
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= a3)
    v19 = a3;
  else
    v19 = v18;
  result = (uint64_t *)memcmp(__s1, v17, v19);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      goto LABEL_30;
    return sub_223FDA6F0((uint64_t **)a1, (uint64_t)v21, a4);
  }
  else
  {
    if (a3 < v18)
      return sub_223FDA6F0((uint64_t **)a1, (uint64_t)v21, a4);
LABEL_30:
    v10[7] = *a4;
  }
  return result;
}

uint64_t *sub_223FD4908(uint64_t a1, void *__s1, size_t a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  uint64_t *result;
  _QWORD v21[2];

  v21[0] = __s1;
  v21[1] = a3;
  v6 = (uint64_t *)(a1 + 8);
  v7 = *(uint64_t **)(a1 + 8);
  if (!v7)
    return sub_223FDA90C((uint64_t **)a1, (uint64_t)v21, a4);
  v10 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v11 = *((char *)v7 + 55);
      v12 = v11 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v13 = v11 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v14 = v13 >= a3 ? a3 : v13;
      v15 = memcmp(__s1, v12, v14);
      if (v15)
        break;
      if (a3 <= v13)
        goto LABEL_17;
LABEL_3:
      v7 = (uint64_t *)v7[1];
      if (!v7)
        goto LABEL_18;
    }
    if ((v15 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v10 = v7;
    v7 = (uint64_t *)*v7;
  }
  while (v7);
LABEL_18:
  if (v10 == v6)
    return sub_223FDA90C((uint64_t **)a1, (uint64_t)v21, a4);
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= a3)
    v19 = a3;
  else
    v19 = v18;
  result = (uint64_t *)memcmp(__s1, v17, v19);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      goto LABEL_30;
    return sub_223FDA90C((uint64_t **)a1, (uint64_t)v21, a4);
  }
  else
  {
    if (a3 < v18)
      return sub_223FDA90C((uint64_t **)a1, (uint64_t)v21, a4);
LABEL_30:
    v10[7] = *a4;
  }
  return result;
}

void sub_223FD4A28(uint64_t a1, void *a2, size_t a3, uint64_t *a4)
{
  std::mutex *v8;

  v8 = (std::mutex *)(a1 + 152);
  std::mutex::lock((std::mutex *)(a1 + 152));
  sub_223FD4A98(a1 + 32, a2, a3, a4);
  std::mutex::unlock(v8);
}

void sub_223FD4A84(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_223FD4A98(uint64_t a1, void *__s1, size_t a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  uint64_t *result;
  _QWORD v21[2];

  v21[0] = __s1;
  v21[1] = a3;
  v6 = (uint64_t *)(a1 + 8);
  v7 = *(uint64_t **)(a1 + 8);
  if (!v7)
    return sub_223FDAB28((uint64_t **)a1, (uint64_t)v21, a4);
  v10 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v11 = *((char *)v7 + 55);
      v12 = v11 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v13 = v11 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v14 = v13 >= a3 ? a3 : v13;
      v15 = memcmp(__s1, v12, v14);
      if (v15)
        break;
      if (a3 <= v13)
        goto LABEL_17;
LABEL_3:
      v7 = (uint64_t *)v7[1];
      if (!v7)
        goto LABEL_18;
    }
    if ((v15 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v10 = v7;
    v7 = (uint64_t *)*v7;
  }
  while (v7);
LABEL_18:
  if (v10 == v6)
    return sub_223FDAB28((uint64_t **)a1, (uint64_t)v21, a4);
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= a3)
    v19 = a3;
  else
    v19 = v18;
  result = (uint64_t *)memcmp(__s1, v17, v19);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      goto LABEL_30;
    return sub_223FDAB28((uint64_t **)a1, (uint64_t)v21, a4);
  }
  else
  {
    if (a3 < v18)
      return sub_223FDAB28((uint64_t **)a1, (uint64_t)v21, a4);
LABEL_30:
    v10[7] = *a4;
  }
  return result;
}

void sub_223FD4BB8(uint64_t a1, void *a2, size_t a3, float *a4)
{
  std::mutex *v8;

  v8 = (std::mutex *)(a1 + 152);
  std::mutex::lock((std::mutex *)(a1 + 152));
  sub_223FD4C28(a1 + 80, a2, a3, a4);
  std::mutex::unlock(v8);
}

void sub_223FD4C14(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_223FD4C28(uint64_t a1, void *__s1, size_t a3, float *a4)
{
  uint64_t *v6;
  double *v7;
  double *v10;
  int v11;
  uint64_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  uint64_t *result;
  _QWORD v21[2];

  v21[0] = __s1;
  v21[1] = a3;
  v6 = (uint64_t *)(a1 + 8);
  v7 = *(double **)(a1 + 8);
  if (!v7)
    return sub_223FDAD44((uint64_t **)a1, (uint64_t)v21, a4);
  v10 = (double *)(a1 + 8);
  do
  {
    while (1)
    {
      v11 = *((char *)v7 + 55);
      v12 = v11 >= 0 ? (uint64_t *)(v7 + 4) : (uint64_t *)*((_QWORD *)v7 + 4);
      v13 = v11 >= 0 ? *((unsigned __int8 *)v7 + 55) : *((_QWORD *)v7 + 5);
      v14 = v13 >= a3 ? a3 : v13;
      v15 = memcmp(__s1, v12, v14);
      if (v15)
        break;
      if (a3 <= v13)
        goto LABEL_17;
LABEL_3:
      v7 = (double *)*((_QWORD *)v7 + 1);
      if (!v7)
        goto LABEL_18;
    }
    if ((v15 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v10 = v7;
    v7 = *(double **)v7;
  }
  while (v7);
LABEL_18:
  if (v10 == (double *)v6)
    return sub_223FDAD44((uint64_t **)a1, (uint64_t)v21, a4);
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)*((_QWORD *)v10 + 4);
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = *((_QWORD *)v10 + 5);
  if (v18 >= a3)
    v19 = a3;
  else
    v19 = v18;
  result = (uint64_t *)memcmp(__s1, v17, v19);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      goto LABEL_30;
    return sub_223FDAD44((uint64_t **)a1, (uint64_t)v21, a4);
  }
  else
  {
    if (a3 < v18)
      return sub_223FDAD44((uint64_t **)a1, (uint64_t)v21, a4);
LABEL_30:
    v10[7] = *a4;
  }
  return result;
}

void sub_223FD4D4C(uint64_t a1, void *a2, size_t a3, uint64_t *a4)
{
  std::mutex *v8;

  v8 = (std::mutex *)(a1 + 152);
  std::mutex::lock((std::mutex *)(a1 + 152));
  sub_223FD4DBC(a1 + 80, a2, a3, a4);
  std::mutex::unlock(v8);
}

void sub_223FD4DA8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_223FD4DBC(uint64_t a1, void *__s1, size_t a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  uint64_t *result;
  _QWORD v21[2];

  v21[0] = __s1;
  v21[1] = a3;
  v6 = (uint64_t *)(a1 + 8);
  v7 = *(uint64_t **)(a1 + 8);
  if (!v7)
    return sub_223FDAF64((uint64_t **)a1, (uint64_t)v21, a4);
  v10 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v11 = *((char *)v7 + 55);
      v12 = v11 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v13 = v11 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v14 = v13 >= a3 ? a3 : v13;
      v15 = memcmp(__s1, v12, v14);
      if (v15)
        break;
      if (a3 <= v13)
        goto LABEL_17;
LABEL_3:
      v7 = (uint64_t *)v7[1];
      if (!v7)
        goto LABEL_18;
    }
    if ((v15 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v10 = v7;
    v7 = (uint64_t *)*v7;
  }
  while (v7);
LABEL_18:
  if (v10 == v6)
    return sub_223FDAF64((uint64_t **)a1, (uint64_t)v21, a4);
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= a3)
    v19 = a3;
  else
    v19 = v18;
  result = (uint64_t *)memcmp(__s1, v17, v19);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      goto LABEL_30;
    return sub_223FDAF64((uint64_t **)a1, (uint64_t)v21, a4);
  }
  else
  {
    if (a3 < v18)
      return sub_223FDAF64((uint64_t **)a1, (uint64_t)v21, a4);
LABEL_30:
    v10[7] = *a4;
  }
  return result;
}

void sub_223FD4EDC(uint64_t **a1, void *__s1, size_t a3, void **a4)
{
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  int v11;
  uint64_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  uint64_t *v17;
  size_t v18;
  size_t v19;
  int v20;
  void **v21;
  char v22;
  __int128 v23;
  char *v24;
  void **v25;
  char *v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  int v33;
  void **v34;
  size_t v35;
  _QWORD *v36;
  const void *v37;
  const void *v38;
  int v39;
  const void *v40;
  size_t v41;
  size_t v42;
  int v43;
  int v44;
  uint64_t *v45;
  void *v46;
  size_t v47;

  v9 = a1 + 1;
  v8 = a1[1];
  if (!v8)
    goto LABEL_35;
  v10 = a1 + 1;
  do
  {
    while (1)
    {
      v11 = *((char *)v8 + 55);
      v12 = v11 >= 0 ? v8 + 4 : (uint64_t *)v8[4];
      v13 = v11 >= 0 ? *((unsigned __int8 *)v8 + 55) : v8[5];
      v14 = v13 >= a3 ? a3 : v13;
      v15 = memcmp(__s1, v12, v14);
      if (v15)
        break;
      if (a3 <= v13)
        goto LABEL_17;
LABEL_3:
      v8 = (uint64_t *)v8[1];
      if (!v8)
        goto LABEL_18;
    }
    if ((v15 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v10 = (uint64_t **)v8;
    v8 = (uint64_t *)*v8;
  }
  while (v8);
LABEL_18:
  if (v10 != v9)
  {
    v16 = *((char *)v10 + 55);
    if (v16 >= 0)
      v17 = (uint64_t *)(v10 + 4);
    else
      v17 = v10[4];
    if (v16 >= 0)
      v18 = *((unsigned __int8 *)v10 + 55);
    else
      v18 = (size_t)v10[5];
    if (v18 >= a3)
      v19 = a3;
    else
      v19 = v18;
    v20 = memcmp(__s1, v17, v19);
    if (v20)
    {
      if ((v20 & 0x80000000) == 0)
        goto LABEL_30;
    }
    else if (a3 >= v18)
    {
LABEL_30:
      v21 = (void **)(v10 + 7);
      if (v10 + 7 != (uint64_t **)a4)
      {
        v22 = *((_BYTE *)a4 + 23);
        if (*((char *)v10 + 79) < 0)
        {
          if (v22 >= 0)
            v46 = a4;
          else
            v46 = *a4;
          if (v22 >= 0)
            v47 = *((unsigned __int8 *)a4 + 23);
          else
            v47 = (size_t)a4[1];
          sub_22319C4B8(v21, v46, v47);
        }
        else if ((*((_BYTE *)a4 + 23) & 0x80) != 0)
        {
          sub_22319C3F4(v21, *a4, (size_t)a4[1]);
        }
        else
        {
          v23 = *(_OWORD *)a4;
          v10[9] = (uint64_t *)a4[2];
          *(_OWORD *)v21 = v23;
        }
      }
      return;
    }
  }
LABEL_35:
  v24 = (char *)operator new(0x50uLL);
  v25 = (void **)(v24 + 32);
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v26 = v24;
  if (a3 >= 0x17)
  {
    v29 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v29 = a3 | 7;
    v30 = v29 + 1;
    v27 = operator new(v29 + 1);
    *((_QWORD *)v26 + 5) = a3;
    *((_QWORD *)v26 + 6) = v30 | 0x8000000000000000;
    *((_QWORD *)v26 + 4) = v27;
  }
  else
  {
    v24[55] = a3;
    v27 = v24 + 32;
    if (!a3)
    {
      *(_BYTE *)v25 = 0;
      v28 = v24 + 56;
      if ((*((char *)a4 + 23) & 0x80000000) == 0)
        goto LABEL_39;
LABEL_44:
      sub_223197FA4(v28, *a4, (unint64_t)a4[1]);
      goto LABEL_45;
    }
  }
  memcpy(v27, __s1, a3);
  *((_BYTE *)v27 + a3) = 0;
  v28 = v26 + 56;
  if (*((char *)a4 + 23) < 0)
    goto LABEL_44;
LABEL_39:
  *(_OWORD *)v28 = *(_OWORD *)a4;
  *((_QWORD *)v28 + 2) = a4[2];
LABEL_45:
  v31 = *v9;
  v32 = v9;
  if (!*v9)
  {
LABEL_72:
    *(_QWORD *)v26 = 0;
    *((_QWORD *)v26 + 1) = 0;
    *((_QWORD *)v26 + 2) = v32;
    *v9 = (uint64_t *)v26;
    v45 = (uint64_t *)**a1;
    if (v45)
    {
      *a1 = v45;
      v26 = (char *)*v9;
    }
    sub_2231A9A8C(a1[1], (uint64_t *)v26);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return;
  }
  v33 = v26[55];
  if (v33 >= 0)
    v34 = v25;
  else
    v34 = (void **)*((_QWORD *)v26 + 4);
  if (v33 >= 0)
    v35 = v26[55];
  else
    v35 = *((_QWORD *)v26 + 5);
  while (2)
  {
    while (2)
    {
      v32 = (uint64_t **)v31;
      v38 = (const void *)v31[4];
      v36 = v31 + 4;
      v37 = v38;
      v39 = *((char *)v36 + 23);
      if (v39 >= 0)
        v40 = v36;
      else
        v40 = v37;
      if (v39 >= 0)
        v41 = *((unsigned __int8 *)v36 + 23);
      else
        v41 = v36[1];
      if (v41 >= v35)
        v42 = v35;
      else
        v42 = v41;
      v43 = memcmp(v34, v40, v42);
      if (v43)
      {
        if (v43 < 0)
          goto LABEL_52;
      }
      else if (v35 < v41)
      {
LABEL_52:
        v31 = *v32;
        v9 = v32;
        if (!*v32)
          goto LABEL_72;
        continue;
      }
      break;
    }
    v44 = memcmp(v40, v34, v42);
    if (v44)
    {
      if ((v44 & 0x80000000) == 0)
        break;
      goto LABEL_70;
    }
    if (v41 < v35)
    {
LABEL_70:
      v31 = v32[1];
      if (!v31)
      {
        v9 = v32 + 1;
        goto LABEL_72;
      }
      continue;
    }
    break;
  }
  if (v26[79] < 0)
  {
    operator delete(*((void **)v26 + 7));
    LOBYTE(v33) = v26[55];
  }
  if ((v33 & 0x80) != 0)
    operator delete(*v25);
  operator delete(v26);
}

void sub_223FD5240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 55) < 0)
  {
    operator delete(*v3);
    sub_223240E68((uint64_t *)va);
    _Unwind_Resume(a1);
  }
  sub_223240E68((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223FD5278(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unsigned __int8 v8;
  void **v9;
  size_t v10;
  __n128 v11;
  const void *v12;
  std::__shared_weak_count *v13;
  CFDictionaryRef v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  void **v25;
  std::string *p_p;
  uint64_t v27;
  size_t v28;
  const char *v29;
  unsigned __int8 v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned __int8 v39;
  const char *v40;
  size_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  std::__shared_weak_count_vtbl *v50;
  std::__shared_weak_count *v51;
  size_t v52;
  size_t v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  size_t v58;
  size_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  char *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  void **v105;
  std::string *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v138;
  const char *v139;
  char *__s;
  __int128 v141;
  CFDictionaryRef theDict[2];
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  void *key[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v147;
  const char *v148;
  int v149;
  const char *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  uint64_t v153;
  std::string __p;
  char v155;
  void *v156[2];
  uint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  _QWORD v160[4];
  std::__shared_weak_count *v161;
  std::__shared_weak_count *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count *v167;
  _BYTE v168[24];
  __int128 v169;
  char *v170;
  __int128 v171;
  std::__shared_weak_count *v172;
  char *v173;
  std::__shared_weak_count *v174;
  _QWORD *v175;
  __int128 v176;
  _QWORD *v177;
  __int128 v178;
  _QWORD v179[7];
  unint64_t v180;
  char v181;
  uint64_t v182;

  v182 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 31) < 0)
  {
    v136 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v136 = a1 + 8;
    v3 = *(unsigned __int8 *)(a1 + 31);
  }
  v135 = v3;
  std::mutex::lock((std::mutex *)(a1 + 152));
  LOBYTE(v163) = 0;
  v179[1] = 0;
  v179[2] = 0;
  v179[0] = &v179[1];
  sub_2245312C0(v179, key);
  v141 = *(_OWORD *)key;
  sub_22323DF84((uint64_t)v179, (char *)v179[1]);
  v179[0] = &v163;
  v179[1] = &v141;
  sub_223FD6908((_QWORD *)a1, (uint64_t)v179);
  std::mutex::unlock((std::mutex *)(a1 + 152));
  v179[1] = 0;
  v179[2] = 0;
  v179[0] = &v179[1];
  sub_2245312C0(v179, key);
  *(_OWORD *)theDict = *(_OWORD *)key;
  sub_22323DF84((uint64_t)v179, (char *)v179[1]);
  sub_22452B67C((uint64_t)&v163, (uint64_t)&v141);
  sub_22452C220((uint64_t)&v141, (uint64_t)v160);
  while (!v163 || v160[0] == 0)
  {
    if ((v163 != 0) != (v160[0] == 0))
      goto LABEL_221;
LABEL_14:
    v5 = sub_224529CD4((uint64_t)&v163);
    v6 = v5;
    if (*(char *)(v5 + 23) < 0)
    {
      sub_223197FA4(v156, *(void **)v5, *(_QWORD *)(v5 + 8));
    }
    else
    {
      v7 = *(_OWORD *)v5;
      v157 = *(_QWORD *)(v5 + 16);
      *(_OWORD *)v156 = v7;
    }
    sub_2231B9338(&v158, v6 + 24);
    v8 = atomic_load((unsigned __int8 *)&qword_2557950D0);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2557950D0))
    {
      v113 = operator new(0x20uLL);
      v113[1] = 0;
      v113[2] = 0;
      *v113 = &off_24EC65188;
      qword_2557950C0 = (uint64_t)(v113 + 3);
      *(_QWORD *)algn_2557950C8 = v113;
      __cxa_atexit((void (*)(void *))sub_223FE2D9C, &qword_2557950C0, &dword_22314D000);
      __cxa_guard_release(&qword_2557950D0);
    }
    if (v157 >= 0)
      v9 = v156;
    else
      v9 = (void **)v156[0];
    if (v157 >= 0)
      v10 = HIBYTE(v157);
    else
      v10 = (size_t)v156[1];
    v11.n128_f64[0] = sub_223FE2E04(v9, v10, 1, &__p);
    if (!v155)
      goto LABEL_200;
    sub_224527E14((uint64_t)&__p, (CFStringRef *)key);
    v12 = key[0];
    v14 = theDict[0];
    v13 = (std::__shared_weak_count *)theDict[1];
    if (!theDict[1])
      goto LABEL_30;
    v15 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (!v14)
        goto LABEL_33;
    }
    else
    {
LABEL_30:
      if (!v14)
        goto LABEL_33;
    }
    if (CFDictionaryContainsKey(theDict[0], v12))
    {
      LOBYTE(v14) = 0;
      goto LABEL_33;
    }
    sub_2231B9338(v179, (uint64_t)&v158);
    v32 = v179[0];
    v31 = (std::__shared_weak_count *)v179[1];
    if (v179[1])
    {
      v33 = (unint64_t *)(v179[1] + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      do
        v35 = __ldaxr(v33);
      while (__stlxr(v35 - 1, v33));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
        LOBYTE(v14) = v32 != 0;
        if (!v32)
          goto LABEL_60;
LABEL_59:
        CFDictionaryAddValue(theDict[0], v12, (const void *)v179[0]);
        goto LABEL_60;
      }
    }
    LOBYTE(v14) = v32 != 0;
    if (v32)
      goto LABEL_59;
LABEL_60:
    v36 = (std::__shared_weak_count *)v179[1];
    if (v179[1])
    {
      v37 = (unint64_t *)(v179[1] + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
LABEL_33:
    v18 = (std::__shared_weak_count *)key[1];
    if (!key[1])
      goto LABEL_37;
    v19 = (unint64_t *)((char *)key[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if ((v14 & 1) != 0)
        goto LABEL_197;
    }
    else
    {
LABEL_37:
      if ((v14 & 1) != 0)
        goto LABEL_197;
    }
    sub_223FD67A4(&v153);
    if (**(int **)(v153 + 56) <= 5)
    {
      v21 = *(unsigned __int8 *)(v153 + 72);
      v22 = sub_22322F254(v153, "OSLogSurrogateAppender", 1, 0);
      v23 = v22;
      if (v21 || v22 != 0)
      {
        key[0] = &v153;
        key[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
        rep = std::chrono::system_clock::now().__d_.__rep_;
        v147 = 5;
        v148 = "unknown file";
        v149 = 68;
        v150 = "unknown function";
        v151 = 0;
        v152 = 0;
        if (v157 >= 0)
          v25 = v156;
        else
          v25 = (void **)v156[0];
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v139 = (const char *)p_p;
        __s = (char *)v25;
        v27 = *(_QWORD *)key[0];
        if (*(char *)(*(_QWORD *)key[0] + 39) < 0)
        {
          v29 = *(const char **)(v27 + 16);
          v28 = *(_QWORD *)(v27 + 24);
          v138 = *(_QWORD *)key[0] + 16;
          v39 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v39 & 1) == 0)
          {
LABEL_216:
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)v168);
              sub_223199C58("com.apple.cv3d", (unint64_t)v168, byte_255788F40);
              if ((_BYTE)v169 && (v168[23] & 0x80000000) != 0)
                operator delete(*(void **)v168);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
          }
        }
        else
        {
          v28 = *(unsigned __int8 *)(*(_QWORD *)key[0] + 39);
          v29 = (const char *)(*(_QWORD *)key[0] + 16);
          v138 = (uint64_t)v29;
          v30 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v30 & 1) == 0)
            goto LABEL_216;
        }
        if (byte_255788F40[23] >= 0)
          v40 = byte_255788F40;
        else
          v40 = *(const char **)byte_255788F40;
        if (byte_255788F40[23] >= 0)
          v41 = byte_255788F40[23];
        else
          v41 = *(_QWORD *)&byte_255788F40[8];
        v179[0] = os_log_create(v40, v29);
        if (v41 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v41 >= 0x17)
        {
          v43 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v41 | 7) != 0x17)
            v43 = v41 | 7;
          v44 = v43 + 1;
          v42 = operator new(v43 + 1);
          v179[2] = v41;
          v179[3] = v44 | 0x8000000000000000;
          v179[1] = v42;
        }
        else
        {
          HIBYTE(v179[3]) = v41;
          v42 = &v179[1];
          if (!v41)
          {
LABEL_84:
            *((_BYTE *)v42 + v41) = 0;
            LOBYTE(v179[4]) = 1;
            if (v28 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v28 >= 0x17)
            {
              v47 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v28 | 7) != 0x17)
                v47 = v28 | 7;
              v48 = v47 + 1;
              v45 = operator new(v47 + 1);
              v179[6] = v28;
              v180 = v48 | 0x8000000000000000;
              v179[5] = v45;
            }
            else
            {
              HIBYTE(v180) = v28;
              v45 = &v179[5];
              if (!v28)
              {
                LOBYTE(v179[5]) = 0;
                v181 = 1;
                v46 = v179[0];
                if ((SHIBYTE(v180) & 0x80000000) == 0)
                  goto LABEL_88;
LABEL_94:
                operator delete((void *)v179[5]);
                if (LOBYTE(v179[4]))
                  goto LABEL_95;
                goto LABEL_97;
              }
            }
            memmove(v45, v29, v28);
            *((_BYTE *)v45 + v28) = 0;
            v181 = 1;
            v46 = v179[0];
            if (SHIBYTE(v180) < 0)
              goto LABEL_94;
LABEL_88:
            if (LOBYTE(v179[4]))
            {
LABEL_95:
              if (SHIBYTE(v179[3]) < 0)
                operator delete((void *)v179[1]);
            }
LABEL_97:
            if (v179[0])
              os_release((void *)v179[0]);
            if (v23 && *(_QWORD *)(v23 + 24))
            {
              v49 = _os_log_pack_size();
              v50 = (std::__shared_weak_count_vtbl *)operator new(v49, (std::align_val_t)8uLL);
              v51 = (std::__shared_weak_count *)operator new();
              v51->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v51->__shared_owners_ = 0;
              v51->__shared_weak_owners_ = 0;
              v51[1].__vftable = v50;
              *(_QWORD *)&v171 = v50;
              *((_QWORD *)&v171 + 1) = v50;
              v172 = v51;
              v173 = 0;
              v174 = 0;
              v52 = strlen(__s);
              if (v52 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v53 = v52;
              if (v52 >= 0x17)
              {
                v56 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v52 | 7) != 0x17)
                  v56 = v52 | 7;
                v57 = v56 + 1;
                v54 = operator new(v56 + 1);
                *(_QWORD *)&v178 = v53;
                *((_QWORD *)&v178 + 1) = v57 | 0x8000000000000000;
                v177 = v54;
              }
              else
              {
                HIBYTE(v178) = v52;
                v54 = &v177;
                if (!v52)
                {
LABEL_112:
                  *((_BYTE *)v54 + v53) = 0;
                  v58 = strlen(v139);
                  if (v58 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v59 = v58;
                  if (v58 >= 0x17)
                  {
                    v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v58 | 7) != 0x17)
                      v61 = v58 | 7;
                    v62 = v61 + 1;
                    v60 = operator new(v61 + 1);
                    *(_QWORD *)&v176 = v59;
                    *((_QWORD *)&v176 + 1) = v62 | 0x8000000000000000;
                    v175 = v60;
                  }
                  else
                  {
                    HIBYTE(v176) = v58;
                    v60 = &v175;
                    if (!v58)
                      goto LABEL_120;
                  }
                  memcpy(v60, v139, v59);
LABEL_120:
                  *((_BYTE *)v60 + v59) = 0;
                  v179[2] = v178;
                  *(_QWORD *)((char *)&v179[2] + 7) = *(_QWORD *)((char *)&v178 + 7);
                  v179[5] = v176;
                  *(_QWORD *)((char *)&v179[5] + 7) = *(_QWORD *)((char *)&v176 + 7);
                  v179[0] = off_24EC20780;
                  v179[1] = v177;
                  HIBYTE(v179[3]) = HIBYTE(v178);
                  v179[4] = v175;
                  HIBYTE(v179[6]) = HIBYTE(v176);
                  v63 = (char *)operator new(0x50uLL);
                  *((_QWORD *)v63 + 1) = 0;
                  *((_QWORD *)v63 + 2) = 0;
                  *((_QWORD *)v63 + 3) = off_24EC20780;
                  *(_QWORD *)v63 = &off_24EC20730;
                  *((_OWORD *)v63 + 2) = *(_OWORD *)&v179[1];
                  *((_QWORD *)v63 + 6) = v179[3];
                  memset(&v179[1], 0, 24);
                  *(_OWORD *)(v63 + 56) = *(_OWORD *)&v179[4];
                  *((_QWORD *)v63 + 9) = v179[6];
                  memset(&v179[4], 0, 24);
                  v64 = v174;
                  v173 = v63 + 24;
                  v174 = (std::__shared_weak_count *)v63;
                  if (!v64)
                    goto LABEL_124;
                  p_shared_owners = (unint64_t *)&v64->__shared_owners_;
                  do
                    v66 = __ldaxr(p_shared_owners);
                  while (__stlxr(v66 - 1, p_shared_owners));
                  if (v66)
                  {
LABEL_124:
                    if ((SHIBYTE(v179[6]) & 0x80000000) == 0)
                      goto LABEL_125;
LABEL_129:
                    operator delete((void *)v179[4]);
                    if (SHIBYTE(v179[3]) < 0)
                      goto LABEL_130;
LABEL_126:
                    *(_OWORD *)v168 = v171;
                    v67 = v173;
                    v68 = v172;
                    *(_QWORD *)&v168[16] = v172;
                    if (!v172)
                      goto LABEL_133;
LABEL_131:
                    v69 = (unint64_t *)&v68->__shared_owners_;
                    do
                      v70 = __ldxr(v69);
                    while (__stxr(v70 + 1, v69));
                    goto LABEL_133;
                  }
                  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                  std::__shared_weak_count::__release_weak(v64);
                  if (SHIBYTE(v179[6]) < 0)
                    goto LABEL_129;
LABEL_125:
                  if ((SHIBYTE(v179[3]) & 0x80000000) == 0)
                    goto LABEL_126;
LABEL_130:
                  operator delete((void *)v179[1]);
                  *(_OWORD *)v168 = v171;
                  v67 = v173;
                  v68 = v172;
                  *(_QWORD *)&v168[16] = v172;
                  if (v172)
                    goto LABEL_131;
LABEL_133:
                  v71 = v174;
                  *(_QWORD *)&v169 = v67;
                  *((_QWORD *)&v169 + 1) = v174;
                  if (v174)
                  {
                    v72 = (unint64_t *)&v174->__shared_owners_;
                    do
                      v73 = __ldxr(v72);
                    while (__stxr(v73 + 1, v72));
                    v170 = v67;
                    do
                      v74 = __ldaxr(v72);
                    while (__stlxr(v74 - 1, v72));
                    if (!v74)
                    {
                      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                      std::__shared_weak_count::__release_weak(v71);
                    }
                  }
                  else
                  {
                    v170 = v67;
                  }
                  v75 = v172;
                  if (v172)
                  {
                    v76 = (unint64_t *)&v172->__shared_owners_;
                    do
                      v77 = __ldaxr(v76);
                    while (__stlxr(v77 - 1, v76));
                    if (!v77)
                    {
                      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                      std::__shared_weak_count::__release_weak(v75);
                    }
                  }
                  v78 = *(_QWORD *)v168;
                  if (v170[31] >= 0)
                    v79 = v170 + 8;
                  else
                    v79 = (char *)*((_QWORD *)v170 + 1);
                  if (v170[55] >= 0)
                    v80 = v170 + 32;
                  else
                    v80 = (char *)*((_QWORD *)v170 + 4);
                  v81 = _os_log_pack_fill();
                  *(_DWORD *)v81 = 136315394;
                  *(_QWORD *)(v81 + 4) = v79;
                  *(_WORD *)(v81 + 12) = 2080;
                  *(_QWORD *)(v81 + 14) = v80;
                  v82 = operator new();
                  v83 = *(unsigned __int8 *)(v27 + 39);
                  v84 = v138;
                  if ((v83 & 0x80u) != 0)
                  {
                    v84 = *(_QWORD *)(v27 + 16);
                    v83 = *(_QWORD *)(v27 + 24);
                  }
                  *(_QWORD *)v82 = v78;
                  *(_OWORD *)(v82 + 8) = *(_OWORD *)&v168[8];
                  *(_QWORD *)&v168[8] = 0;
                  *(_QWORD *)&v168[16] = 0;
                  *(_OWORD *)(v82 + 24) = v169;
                  v169 = 0uLL;
                  *(_QWORD *)(v82 + 40) = v84;
                  *(_QWORD *)(v82 + 48) = v83;
                  *(_BYTE *)(v82 + 56) = 16;
                  *(_QWORD *)&v171 = 0;
                  v179[0] = v82;
                  (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v23 + 24) + 40))(*(_QWORD *)(v23 + 24), v179);
                  v85 = v179[0];
                  v179[0] = 0;
                  if (v85)
                  {
                    v86 = *(std::__shared_weak_count **)(v85 + 32);
                    if (v86)
                    {
                      v87 = (unint64_t *)&v86->__shared_owners_;
                      do
                        v88 = __ldaxr(v87);
                      while (__stlxr(v88 - 1, v87));
                      if (!v88)
                      {
                        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                        std::__shared_weak_count::__release_weak(v86);
                      }
                    }
                    v89 = *(std::__shared_weak_count **)(v85 + 16);
                    if (v89)
                    {
                      v90 = (unint64_t *)&v89->__shared_owners_;
                      do
                        v91 = __ldaxr(v90);
                      while (__stlxr(v91 - 1, v90));
                      if (!v91)
                      {
                        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                        std::__shared_weak_count::__release_weak(v89);
                      }
                    }
                    MEMORY[0x227684CE8](v85, 0x10F0C40B62ED6C6);
                    v92 = v171;
                    *(_QWORD *)&v171 = 0;
                    if (v92)
                    {
                      v93 = *(std::__shared_weak_count **)(v92 + 32);
                      if (v93)
                      {
                        v94 = (unint64_t *)&v93->__shared_owners_;
                        do
                          v95 = __ldaxr(v94);
                        while (__stlxr(v95 - 1, v94));
                        if (!v95)
                        {
                          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                          std::__shared_weak_count::__release_weak(v93);
                        }
                      }
                      v96 = *(std::__shared_weak_count **)(v92 + 16);
                      if (v96)
                      {
                        v97 = (unint64_t *)&v96->__shared_owners_;
                        do
                          v98 = __ldaxr(v97);
                        while (__stlxr(v98 - 1, v97));
                        if (!v98)
                        {
                          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                          std::__shared_weak_count::__release_weak(v96);
                        }
                      }
                      MEMORY[0x227684CE8](v92, 0x10F0C40B62ED6C6);
                    }
                  }
                  v99 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
                  if (*((_QWORD *)&v169 + 1))
                  {
                    v100 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
                    do
                      v101 = __ldaxr(v100);
                    while (__stlxr(v101 - 1, v100));
                    if (!v101)
                    {
                      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                      std::__shared_weak_count::__release_weak(v99);
                      v102 = *(std::__shared_weak_count **)&v168[16];
                      if (*(_QWORD *)&v168[16])
                        goto LABEL_182;
                      goto LABEL_185;
                    }
                  }
                  v102 = *(std::__shared_weak_count **)&v168[16];
                  if (!*(_QWORD *)&v168[16])
                    goto LABEL_185;
LABEL_182:
                  v103 = (unint64_t *)&v102->__shared_owners_;
                  do
                    v104 = __ldaxr(v103);
                  while (__stlxr(v104 - 1, v103));
                  if (v104)
                  {
LABEL_185:
                    if (v21)
                      goto LABEL_186;
LABEL_192:
                    sub_223182C08((uint64_t)key);
                    v107 = v152;
                    if (v152)
                    {
                      v108 = (unint64_t *)&v152->__shared_owners_;
                      do
                        v109 = __ldaxr(v108);
                      while (__stlxr(v109 - 1, v108));
                      if (!v109)
                      {
                        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                        std::__shared_weak_count::__release_weak(v107);
                      }
                    }
                    goto LABEL_197;
                  }
                  ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                  std::__shared_weak_count::__release_weak(v102);
                  if (!v21)
                    goto LABEL_192;
LABEL_186:
                  if (v157 >= 0)
                    v105 = v156;
                  else
                    v105 = (void **)v156[0];
                  v106 = &__p;
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v106 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  sub_22322C138((uint64_t)key, "CapturableDictionary::OnStateCapture - Key collision; colliding value was dropped. %s(%s)",
                    (const char *)v105,
                    (const char *)v106);
                  sub_223182C08((uint64_t)key);
                  goto LABEL_192;
                }
              }
              memcpy(v54, __s, v53);
              goto LABEL_112;
            }
            os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
            LODWORD(v179[0]) = 136315394;
            *(_QWORD *)((char *)v179 + 4) = __s;
            WORD2(v179[1]) = 2080;
            *(_QWORD *)((char *)&v179[1] + 6) = v139;
            v55 = (void *)_os_log_send_and_compose_impl();
            if (!v55)
              goto LABEL_185;
            free(v55);
            if (!v21)
              goto LABEL_192;
            goto LABEL_186;
          }
        }
        memmove(v42, v40, v41);
        goto LABEL_84;
      }
    }
LABEL_197:
    if (v155 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_200:
    v110 = v159;
    if (!v159)
      goto LABEL_204;
    v111 = (unint64_t *)&v159->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v110->__on_zero_shared)(v110, v11);
      std::__shared_weak_count::__release_weak(v110);
      if ((SHIBYTE(v157) & 0x80000000) == 0)
        goto LABEL_205;
LABEL_208:
      operator delete(v156[0]);
      if (++v164 >= v165)
LABEL_5:
        v163 = 0;
    }
    else
    {
LABEL_204:
      if (SHIBYTE(v157) < 0)
        goto LABEL_208;
LABEL_205:
      if (++v164 >= v165)
        goto LABEL_5;
    }
  }
  if (v164 != v160[1])
    goto LABEL_14;
LABEL_221:
  v114 = v162;
  if (v162)
  {
    v115 = (unint64_t *)&v162->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v161;
  if (v161)
  {
    v118 = (unint64_t *)&v161->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v167;
  if (v167)
  {
    v121 = (unint64_t *)&v167->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v166;
  if (v166)
  {
    v124 = (unint64_t *)&v166->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  sub_2232EEEDC(&v143, (uint64_t)theDict);
  sub_223229F0C(v136, v135, &v143, a2);
  v126 = v144;
  if (v144)
  {
    v127 = (unint64_t *)&v144->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v130 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v133 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
}

void sub_223FD6334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  void *__p;

  if (LOBYTE(STACK[0x208]) && SLOBYTE(STACK[0x207]) < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a37);
  if (a53)
  {
    if (a52 < 0)
      operator delete(a47);
  }
  sub_223236D30((uint64_t)&a54);
  sub_2235F8FC8((uint64_t)&a60);
  sub_2235F8FC8((uint64_t)&a67);
  sub_223167354((uint64_t)&a33);
  sub_223167354((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t *sub_223FD6598()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2557950B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2557950B8))
    return &qword_2557950A8;
  sub_223FD6640("com.apple.Recon3D.global", &qword_2557950A8);
  __cxa_atexit((void (*)(void *))sub_22319828C, &qword_2557950A8, &dword_22314D000);
  __cxa_guard_release(&qword_2557950B8);
  return &qword_2557950A8;
}

void sub_223FD6628(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557950B8);
  _Unwind_Resume(a1);
}

uint64_t sub_223FD6640@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = operator new(0xF0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24EC64E78;
  result = sub_223FD9D08((uint64_t)(v4 + 3), a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_223FD6698(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_223FD66B0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64E38;
  std::mutex::~mutex((std::mutex *)(a1 + 152));
  sub_223FD6898(*(_QWORD *)(a1 + 136));
  sub_22375C06C(*(char **)(a1 + 112));
  sub_22375C06C(*(char **)(a1 + 88));
  sub_22375C06C(*(char **)(a1 + 64));
  sub_22375C06C(*(char **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return nullsub_30(a1);
}

void sub_223FD6728(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64E38;
  std::mutex::~mutex((std::mutex *)(a1 + 152));
  sub_223FD6898(*(_QWORD *)(a1 + 136));
  sub_22375C06C(*(char **)(a1 + 112));
  sub_22375C06C(*(char **)(a1 + 88));
  sub_22375C06C(*(char **)(a1 + 64));
  sub_22375C06C(*(char **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223FD67A4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CEA70);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEA70))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.state_capture");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CEA68);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CEA70);
  }
  *a1 = qword_2540CEA68;
}

void sub_223FD6840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CEA70);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CEA70);
  _Unwind_Resume(a1);
}

void sub_223FD6898(uint64_t a1)
{
  if (a1)
  {
    sub_223FD6898(*(_QWORD *)a1);
    sub_223FD6898(*(_QWORD *)(a1 + 8));
    if (*(char *)(a1 + 79) < 0)
    {
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_4:
      operator delete((void *)a1);
      return;
    }
    operator delete(*(void **)(a1 + 32));
    operator delete((void *)a1);
  }
}

void sub_223FD6908(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 v14;
  const void *on_zero_shared;
  size_t get_deleter;
  std::__shared_weak_count *v17;
  std::__shared_weak_count_vtbl *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  const char *v29;
  size_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  const char *v33;
  size_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count *on_zero_shared_weak;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  BOOL v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  std::__shared_weak_count *v69;
  CFDictionaryRef v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unsigned __int8 v77;
  const void *p_on_zero_shared;
  size_t on_zero_shared_weak_high;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  const char *v92;
  size_t v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  const char *v96;
  size_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t v100;
  void **v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  size_t v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  void *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  void *v130;
  std::__shared_weak_count *v131;
  CFDictionaryRef v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unsigned __int8 v139;
  const void *v140;
  size_t v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  int v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  const char *v154;
  size_t v155;
  unsigned __int8 v156;
  unsigned __int8 v157;
  const char *v158;
  size_t v159;
  std::__shared_weak_count *v160;
  uint64_t v161;
  uint64_t v162;
  void **v163;
  NSObject *v164;
  uint64_t v165;
  uint64_t v166;
  size_t v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  const char *v176;
  std::__shared_weak_count_vtbl *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  void *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  void *v192;
  std::__shared_weak_count *v193;
  CFDictionaryRef v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  unsigned __int8 v201;
  const void *v202;
  size_t v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count_vtbl *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  int v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  const char *v216;
  size_t v217;
  unsigned __int8 v218;
  unsigned __int8 v219;
  const char *v220;
  size_t v221;
  std::__shared_weak_count *v222;
  uint64_t v223;
  uint64_t v224;
  void **v225;
  NSObject *v226;
  uint64_t v227;
  uint64_t v228;
  size_t v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  const char *v238;
  std::__shared_weak_count_vtbl *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  void *v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  _QWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  BOOL v254;
  BOOL v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  unsigned __int8 v259;
  const void *v260;
  size_t v261;
  int v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  const char *v266;
  size_t v267;
  unsigned __int8 v268;
  const char *v269;
  size_t v270;
  std::__shared_weak_count *v271;
  uint64_t v272;
  uint64_t v273;
  void **v274;
  NSObject *v275;
  uint64_t v276;
  uint64_t v277;
  size_t v278;
  std::__shared_weak_count_vtbl *v279;
  std::__shared_weak_count *v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  const char *v287;
  std::__shared_weak_count_vtbl *v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  void *v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  _QWORD *v299;
  _QWORD *v300;
  _QWORD *v301;
  const char *v302;
  const char *v303;
  const char *v304;
  const char *v305;
  _QWORD *v306;
  _QWORD *v307;
  _QWORD *v308;
  _QWORD *v309;
  _QWORD *v311;
  const char *v312;
  _QWORD *valuePtr;
  _QWORD *v314;
  _QWORD *v315;
  _QWORD *v316;
  _QWORD *v317;
  int v318;
  void *key;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v321;
  int v322;
  const char *v323;
  int v324;
  const char *v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  uint64_t v328;
  void *v329[2];
  uint64_t v330;
  __int128 __p;
  uint64_t v332;
  std::__shared_weak_count_vtbl *v333;
  std::__shared_weak_count *v334;
  size_t v335;
  unint64_t v336;
  char v337;
  void **v338;
  size_t v339;
  unint64_t v340;
  char v341;
  __int128 v342;
  uint64_t v343;
  uint64_t v344[3];

  v311 = a1;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)a1[4];
  v4 = a1 + 5;
  if (v3 != a1 + 5)
  {
    v314 = a1 + 5;
    while (1)
    {
      if (*((char *)v3 + 55) < 0)
      {
        sub_223197FA4(&v342, (void *)v3[4], v3[5]);
      }
      else
      {
        v342 = *((_OWORD *)v3 + 2);
        v343 = v3[6];
      }
      v344[0] = v3[7];
      sub_224527E14((uint64_t)&v342, (CFStringRef *)&key);
      v5 = key;
      v7 = *(CFDictionaryRef *)v2;
      v6 = *(std::__shared_weak_count **)(v2 + 8);
      if (!v6)
        goto LABEL_12;
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (!v7)
          goto LABEL_15;
      }
      else
      {
LABEL_12:
        if (!v7)
          goto LABEL_15;
      }
      if (CFDictionaryContainsKey(*(CFDictionaryRef *)v2, v5))
      {
        LOBYTE(v7) = 0;
        goto LABEL_15;
      }
      sub_22452767C(v344, (CFNumberRef *)&v333);
      v18 = v333;
      v17 = v334;
      if (v334)
      {
        v19 = (unint64_t *)&v334->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
        do
          v21 = __ldaxr(v19);
        while (__stlxr(v21 - 1, v19));
        if (!v21)
          break;
      }
      LOBYTE(v7) = v18 != 0;
      if (v18)
        goto LABEL_31;
LABEL_32:
      v22 = v334;
      v4 = v314;
      if (v334)
      {
        v23 = (unint64_t *)&v334->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
LABEL_15:
      v11 = (std::__shared_weak_count *)rep;
      if (!rep)
        goto LABEL_19;
      v12 = (unint64_t *)(rep + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if ((v7 & 1) != 0)
          goto LABEL_107;
      }
      else
      {
LABEL_19:
        if ((v7 & 1) != 0)
          goto LABEL_107;
      }
      v14 = atomic_load((unsigned __int8 *)&qword_2557892F0);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
      {
        __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
        __cxa_guard_release(&qword_2557892F0);
      }
      sub_223FD67A4(&v333);
      if (SHIBYTE(v333->__on_zero_shared_weak) < 0)
      {
        on_zero_shared = v333->__on_zero_shared;
        get_deleter = (size_t)v333->__get_deleter;
      }
      else
      {
        on_zero_shared = &v333->__on_zero_shared;
        get_deleter = HIBYTE(v333->__on_zero_shared_weak);
      }
      sub_223195728((uint64_t)&stru_255789280, on_zero_shared, get_deleter, "CapturableDictionary::ToPropertyList - Key collision; colliding value was dropped.",
        0x52uLL);
      sub_223FD9BC4(&v328);
      if (**(int **)(v328 + 56) > 5
        || (v25 = *(unsigned __int8 *)(v328 + 72),
            v26 = sub_22322F254(v328, "OSLogSurrogateAppender", 1, 0),
            v27 = v26,
            !v25)
        && !v26)
      {
LABEL_107:
        if ((SHIBYTE(v343) & 0x80000000) == 0)
          goto LABEL_108;
        goto LABEL_111;
      }
      key = &v328;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v321 = std::chrono::system_clock::now().__d_.__rep_;
      v322 = 5;
      v323 = "unknown file";
      v324 = 42;
      v325 = "unknown function";
      v326 = 0;
      v327 = 0;
      v28 = *(_QWORD *)key;
      v29 = (const char *)(*(_QWORD *)key + 16);
      v302 = v29;
      v306 = *(_QWORD **)key;
      if (*(char *)(*(_QWORD *)key + 39) < 0)
      {
        v29 = *(const char **)(v28 + 16);
        v30 = *(_QWORD *)(v28 + 24);
        v32 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v32 & 1) != 0)
          goto LABEL_49;
      }
      else
      {
        v30 = *(unsigned __int8 *)(*(_QWORD *)key + 39);
        v31 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v31 & 1) != 0)
          goto LABEL_49;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v329);
        if ((_BYTE)__p)
        {
          *(_OWORD *)byte_255788F40 = *(_OWORD *)v329;
          *(_QWORD *)&byte_255788F40[16] = v330;
        }
        else
        {
          byte_255788F40[23] = 14;
          strcpy(byte_255788F40, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_49:
      if (byte_255788F40[23] >= 0)
        v33 = byte_255788F40;
      else
        v33 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v34 = byte_255788F40[23];
      else
        v34 = *(_QWORD *)&byte_255788F40[8];
      v333 = (std::__shared_weak_count_vtbl *)os_log_create(v33, v29);
      if (v34 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v34 >= 0x17)
      {
        v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v34 | 7) != 0x17)
          v36 = v34 | 7;
        v37 = v36 + 1;
        v35 = (std::__shared_weak_count *)operator new(v36 + 1);
        v335 = v34;
        v336 = v37 | 0x8000000000000000;
        v334 = v35;
LABEL_62:
        memmove(v35, v33, v34);
        goto LABEL_63;
      }
      HIBYTE(v336) = v34;
      v35 = (std::__shared_weak_count *)&v334;
      if (v34)
        goto LABEL_62;
LABEL_63:
      *((_BYTE *)&v35->__vftable + v34) = 0;
      v337 = 1;
      if (v30 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v4 = v314;
      if (v30 >= 0x17)
      {
        v40 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17)
          v40 = v30 | 7;
        v41 = v40 + 1;
        v38 = (void **)operator new(v40 + 1);
        v339 = v30;
        v340 = v41 | 0x8000000000000000;
        v338 = v38;
      }
      else
      {
        HIBYTE(v340) = v30;
        v38 = (void **)&v338;
        if (!v30)
        {
          LOBYTE(v338) = 0;
          v341 = 1;
          v39 = v333;
          if ((SHIBYTE(v340) & 0x80000000) == 0)
            goto LABEL_67;
          goto LABEL_73;
        }
      }
      memmove(v38, v29, v30);
      *((_BYTE *)v38 + v30) = 0;
      v341 = 1;
      v39 = v333;
      if ((SHIBYTE(v340) & 0x80000000) == 0)
      {
LABEL_67:
        if (!v337)
          goto LABEL_76;
        goto LABEL_74;
      }
LABEL_73:
      operator delete(v338);
      if (!v337)
        goto LABEL_76;
LABEL_74:
      if (SHIBYTE(v336) < 0)
        operator delete(v334);
LABEL_76:
      if (v333)
        os_release(v333);
      if (v27 && *(_QWORD *)(v27 + 24))
      {
        v42 = _os_log_pack_size();
        v43 = (std::__shared_weak_count_vtbl *)operator new(v42, (std::align_val_t)8uLL);
        v44 = (std::__shared_weak_count *)operator new();
        v45 = v44;
        v44->__shared_owners_ = 0;
        v46 = (unint64_t *)&v44->__shared_owners_;
        v44->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
        v44->__shared_weak_owners_ = 0;
        v44[1].__vftable = v43;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
        do
          v48 = __ldaxr(v46);
        while (__stlxr(v48 - 1, v46));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v45);
        }
        *(_WORD *)_os_log_pack_fill() = 0;
        v49 = operator new();
        v50 = *((unsigned __int8 *)v306 + 39);
        v51 = v302;
        if ((v50 & 0x80u) != 0)
        {
          v51 = (const char *)v306[2];
          v50 = v306[3];
        }
        *(_QWORD *)v49 = v43;
        *(_QWORD *)(v49 + 8) = v43;
        *(_QWORD *)(v49 + 16) = v45;
        *(_QWORD *)(v49 + 24) = 0;
        *(_QWORD *)(v49 + 32) = 0;
        *(_QWORD *)(v49 + 40) = v51;
        *(_QWORD *)(v49 + 48) = v50;
        *(_BYTE *)(v49 + 56) = 16;
        v333 = (std::__shared_weak_count_vtbl *)v49;
        (*(void (**)(_QWORD, std::__shared_weak_count_vtbl **))(**(_QWORD **)(v27 + 24) + 40))(*(_QWORD *)(v27 + 24), &v333);
        v4 = v314;
        v52 = v333;
        v333 = 0;
        if (v52)
        {
          on_zero_shared_weak = (std::__shared_weak_count *)v52->__on_zero_shared_weak;
          if (on_zero_shared_weak)
          {
            v54 = (unint64_t *)&on_zero_shared_weak->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))on_zero_shared_weak->__on_zero_shared)(on_zero_shared_weak);
              std::__shared_weak_count::__release_weak(on_zero_shared_weak);
            }
          }
          v56 = (std::__shared_weak_count *)v52->__on_zero_shared;
          if (v56)
          {
            v57 = (unint64_t *)&v56->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          MEMORY[0x227684CE8](v52, 0x10F0C40B62ED6C6);
        }
      }
      else
      {
        os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
        LOWORD(v333) = 0;
        v59 = (void *)_os_log_send_and_compose_impl();
        if (v59)
          free(v59);
      }
      if (v25)
      {
        sub_22322C138((uint64_t)&key, "CapturableDictionary::ToPropertyList - Key collision; colliding value was dropped.");
        sub_223182C08((uint64_t)&key);
      }
      sub_223182C08((uint64_t)&key);
      v60 = v327;
      if (!v327)
        goto LABEL_107;
      v61 = (unint64_t *)&v327->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (v62)
        goto LABEL_107;
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
      if ((SHIBYTE(v343) & 0x80000000) == 0)
      {
LABEL_108:
        v63 = (_QWORD *)v3[1];
        if (v63)
          goto LABEL_112;
        goto LABEL_114;
      }
LABEL_111:
      operator delete((void *)v342);
      v63 = (_QWORD *)v3[1];
      if (v63)
      {
        do
        {
LABEL_112:
          v64 = v63;
          v63 = (_QWORD *)*v63;
        }
        while (v63);
        goto LABEL_3;
      }
      do
      {
LABEL_114:
        v64 = (_QWORD *)v3[2];
        v65 = *v64 == (_QWORD)v3;
        v3 = v64;
      }
      while (!v65);
LABEL_3:
      v3 = v64;
      if (v64 == v4)
      {
        a1 = v311;
        v2 = *(_QWORD *)(a2 + 8);
        goto LABEL_125;
      }
    }
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    LOBYTE(v7) = v18 != 0;
    if (!v18)
      goto LABEL_32;
LABEL_31:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)v2, v5, v333);
    goto LABEL_32;
  }
LABEL_125:
  v66 = (_QWORD *)a1[7];
  v67 = a1 + 8;
  if (v66 == a1 + 8)
    goto LABEL_249;
  v315 = a1 + 8;
  do
  {
    if (*((char *)v66 + 55) < 0)
    {
      sub_223197FA4(&v342, (void *)v66[4], v66[5]);
    }
    else
    {
      v342 = *((_OWORD *)v66 + 2);
      v343 = v66[6];
    }
    v344[0] = v66[7];
    sub_224527E14((uint64_t)&v342, (CFStringRef *)&key);
    v68 = key;
    v70 = *(CFDictionaryRef *)v2;
    v69 = *(std::__shared_weak_count **)(v2 + 8);
    if (!v69)
      goto LABEL_136;
    v71 = (unint64_t *)&v69->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
    do
      v73 = __ldaxr(v71);
    while (__stlxr(v73 - 1, v71));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
      if (!v70)
        goto LABEL_139;
    }
    else
    {
LABEL_136:
      if (!v70)
        goto LABEL_139;
    }
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)v2, v68))
    {
      LOBYTE(v70) = 0;
      goto LABEL_139;
    }
    sub_224527264(v344, (CFNumberRef *)&v333);
    v81 = v333;
    v80 = v334;
    if (v334)
    {
      v82 = (unint64_t *)&v334->__shared_owners_;
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
      do
        v84 = __ldaxr(v82);
      while (__stlxr(v84 - 1, v82));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
        LOBYTE(v70) = v81 != 0;
        if (!v81)
          goto LABEL_156;
LABEL_155:
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)v2, v68, v333);
        goto LABEL_156;
      }
    }
    LOBYTE(v70) = v81 != 0;
    if (v81)
      goto LABEL_155;
LABEL_156:
    v85 = v334;
    v67 = v315;
    if (v334)
    {
      v86 = (unint64_t *)&v334->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
LABEL_139:
    v74 = (std::__shared_weak_count *)rep;
    if (!rep)
      goto LABEL_143;
    v75 = (unint64_t *)(rep + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
      if ((v70 & 1) != 0)
        goto LABEL_231;
    }
    else
    {
LABEL_143:
      if ((v70 & 1) != 0)
        goto LABEL_231;
    }
    v77 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223FD67A4(&v333);
    if (SHIBYTE(v333->__on_zero_shared_weak) < 0)
    {
      p_on_zero_shared = v333->__on_zero_shared;
      on_zero_shared_weak_high = (size_t)v333->__get_deleter;
    }
    else
    {
      p_on_zero_shared = &v333->__on_zero_shared;
      on_zero_shared_weak_high = HIBYTE(v333->__on_zero_shared_weak);
    }
    sub_223195728((uint64_t)&stru_255789280, p_on_zero_shared, on_zero_shared_weak_high, "CapturableDictionary::ToPropertyList - Key collision; colliding value was dropped.",
      0x52uLL);
    sub_223FD9BC4(&v328);
    if (**(int **)(v328 + 56) > 5
      || (v88 = *(unsigned __int8 *)(v328 + 72),
          v89 = sub_22322F254(v328, "OSLogSurrogateAppender", 1, 0),
          v90 = v89,
          !v88)
      && !v89)
    {
LABEL_231:
      if ((SHIBYTE(v343) & 0x80000000) == 0)
        goto LABEL_232;
      goto LABEL_235;
    }
    key = &v328;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v321 = std::chrono::system_clock::now().__d_.__rep_;
    v322 = 5;
    v323 = "unknown file";
    v324 = 42;
    v325 = "unknown function";
    v326 = 0;
    v327 = 0;
    v91 = *(_QWORD *)key;
    v92 = (const char *)(*(_QWORD *)key + 16);
    v303 = v92;
    if (*(char *)(*(_QWORD *)key + 39) < 0)
    {
      v92 = *(const char **)(v91 + 16);
      v93 = *(_QWORD *)(v91 + 24);
      v307 = *(_QWORD **)key;
      v95 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v95 & 1) != 0)
        goto LABEL_173;
    }
    else
    {
      v93 = *(unsigned __int8 *)(*(_QWORD *)key + 39);
      v307 = *(_QWORD **)key;
      v94 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v94 & 1) != 0)
        goto LABEL_173;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v329);
      if ((_BYTE)__p)
      {
        *(_OWORD *)byte_255788F40 = *(_OWORD *)v329;
        *(_QWORD *)&byte_255788F40[16] = v330;
      }
      else
      {
        byte_255788F40[23] = 14;
        strcpy(byte_255788F40, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_173:
    if (byte_255788F40[23] >= 0)
      v96 = byte_255788F40;
    else
      v96 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v97 = byte_255788F40[23];
    else
      v97 = *(_QWORD *)&byte_255788F40[8];
    v333 = (std::__shared_weak_count_vtbl *)os_log_create(v96, v92);
    if (v97 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v97 >= 0x17)
    {
      v99 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v97 | 7) != 0x17)
        v99 = v97 | 7;
      v100 = v99 + 1;
      v98 = (std::__shared_weak_count *)operator new(v99 + 1);
      v335 = v97;
      v336 = v100 | 0x8000000000000000;
      v334 = v98;
LABEL_186:
      memmove(v98, v96, v97);
      goto LABEL_187;
    }
    HIBYTE(v336) = v97;
    v98 = (std::__shared_weak_count *)&v334;
    if (v97)
      goto LABEL_186;
LABEL_187:
    *((_BYTE *)&v98->__vftable + v97) = 0;
    v337 = 1;
    if (v93 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v67 = v315;
    if (v93 >= 0x17)
    {
      v103 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v93 | 7) != 0x17)
        v103 = v93 | 7;
      v104 = v103 + 1;
      v101 = (void **)operator new(v103 + 1);
      v339 = v93;
      v340 = v104 | 0x8000000000000000;
      v338 = v101;
    }
    else
    {
      HIBYTE(v340) = v93;
      v101 = (void **)&v338;
      if (!v93)
      {
        LOBYTE(v338) = 0;
        v341 = 1;
        v102 = v333;
        if ((SHIBYTE(v340) & 0x80000000) == 0)
          goto LABEL_191;
        goto LABEL_197;
      }
    }
    memmove(v101, v92, v93);
    *((_BYTE *)v101 + v93) = 0;
    v341 = 1;
    v102 = v333;
    if ((SHIBYTE(v340) & 0x80000000) == 0)
    {
LABEL_191:
      if (!v337)
        goto LABEL_200;
      goto LABEL_198;
    }
LABEL_197:
    operator delete(v338);
    if (!v337)
      goto LABEL_200;
LABEL_198:
    if (SHIBYTE(v336) < 0)
      operator delete(v334);
LABEL_200:
    if (v333)
      os_release(v333);
    if (v90 && *(_QWORD *)(v90 + 24))
    {
      v105 = _os_log_pack_size();
      v106 = (std::__shared_weak_count_vtbl *)operator new(v105, (std::align_val_t)8uLL);
      v107 = (std::__shared_weak_count *)operator new();
      v108 = v107;
      v107->__shared_owners_ = 0;
      v109 = (unint64_t *)&v107->__shared_owners_;
      v107->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
      v107->__shared_weak_owners_ = 0;
      v107[1].__vftable = v106;
      do
        v110 = __ldxr(v109);
      while (__stxr(v110 + 1, v109));
      do
        v111 = __ldaxr(v109);
      while (__stlxr(v111 - 1, v109));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v108);
      }
      *(_WORD *)_os_log_pack_fill() = 0;
      v112 = operator new();
      v113 = *((unsigned __int8 *)v307 + 39);
      v114 = v303;
      if ((v113 & 0x80u) != 0)
      {
        v114 = (const char *)v307[2];
        v113 = v307[3];
      }
      *(_QWORD *)v112 = v106;
      *(_QWORD *)(v112 + 8) = v106;
      *(_QWORD *)(v112 + 16) = v108;
      *(_QWORD *)(v112 + 24) = 0;
      *(_QWORD *)(v112 + 32) = 0;
      *(_QWORD *)(v112 + 40) = v114;
      *(_QWORD *)(v112 + 48) = v113;
      *(_BYTE *)(v112 + 56) = 16;
      v333 = (std::__shared_weak_count_vtbl *)v112;
      (*(void (**)(_QWORD, std::__shared_weak_count_vtbl **))(**(_QWORD **)(v90 + 24) + 40))(*(_QWORD *)(v90 + 24), &v333);
      v67 = v315;
      v115 = v333;
      v333 = 0;
      if (v115)
      {
        v116 = (std::__shared_weak_count *)v115->__on_zero_shared_weak;
        if (v116)
        {
          v117 = (unint64_t *)&v116->__shared_owners_;
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
        v119 = (std::__shared_weak_count *)v115->__on_zero_shared;
        if (v119)
        {
          v120 = (unint64_t *)&v119->__shared_owners_;
          do
            v121 = __ldaxr(v120);
          while (__stlxr(v121 - 1, v120));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
        }
        MEMORY[0x227684CE8](v115, 0x10F0C40B62ED6C6);
      }
    }
    else
    {
      os_log_type_enabled(v102, OS_LOG_TYPE_ERROR);
      LOWORD(v333) = 0;
      v122 = (void *)_os_log_send_and_compose_impl();
      if (v122)
        free(v122);
    }
    if (v88)
    {
      sub_22322C138((uint64_t)&key, "CapturableDictionary::ToPropertyList - Key collision; colliding value was dropped.");
      sub_223182C08((uint64_t)&key);
    }
    sub_223182C08((uint64_t)&key);
    v123 = v327;
    if (!v327)
      goto LABEL_231;
    v124 = (unint64_t *)&v327->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (v125)
      goto LABEL_231;
    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
    std::__shared_weak_count::__release_weak(v123);
    if ((SHIBYTE(v343) & 0x80000000) == 0)
    {
LABEL_232:
      v126 = (_QWORD *)v66[1];
      if (!v126)
        goto LABEL_238;
      goto LABEL_236;
    }
LABEL_235:
    operator delete((void *)v342);
    v126 = (_QWORD *)v66[1];
    if (!v126)
    {
      do
      {
LABEL_238:
        v127 = (_QWORD *)v66[2];
        v65 = *v127 == (_QWORD)v66;
        v66 = v127;
      }
      while (!v65);
      goto LABEL_127;
    }
    do
    {
LABEL_236:
      v127 = v126;
      v126 = (_QWORD *)*v126;
    }
    while (v126);
LABEL_127:
    v66 = v127;
  }
  while (v127 != v67);
  a1 = v311;
  v2 = *(_QWORD *)(a2 + 8);
LABEL_249:
  v128 = (_QWORD *)a1[10];
  v129 = a1 + 11;
  if (v128 == a1 + 11)
    goto LABEL_373;
  v316 = a1 + 11;
  while (2)
  {
    if (*((char *)v128 + 55) < 0)
    {
      sub_223197FA4(&v342, (void *)v128[4], v128[5]);
    }
    else
    {
      v342 = *((_OWORD *)v128 + 2);
      v343 = v128[6];
    }
    v344[0] = v128[7];
    sub_224527E14((uint64_t)&v342, (CFStringRef *)&key);
    v130 = key;
    v132 = *(CFDictionaryRef *)v2;
    v131 = *(std::__shared_weak_count **)(v2 + 8);
    if (v131)
    {
      v133 = (unint64_t *)&v131->__shared_owners_;
      do
        v134 = __ldxr(v133);
      while (__stxr(v134 + 1, v133));
      do
        v135 = __ldaxr(v133);
      while (__stlxr(v135 - 1, v133));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
        if (!v132)
          goto LABEL_263;
LABEL_261:
        if (CFDictionaryContainsKey(*(CFDictionaryRef *)v2, v130))
        {
          LOBYTE(v132) = 0;
          goto LABEL_263;
        }
        sub_224527870(v344, (CFNumberRef *)&v333);
        v143 = v333;
        v142 = v334;
        if (!v334)
          goto LABEL_278;
        v144 = (unint64_t *)&v334->__shared_owners_;
        do
          v145 = __ldxr(v144);
        while (__stxr(v145 + 1, v144));
        do
          v146 = __ldaxr(v144);
        while (__stlxr(v146 - 1, v144));
        if (!v146)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
          LOBYTE(v132) = v143 != 0;
          if (!v143)
            goto LABEL_280;
        }
        else
        {
LABEL_278:
          LOBYTE(v132) = v143 != 0;
          if (!v143)
          {
LABEL_280:
            v147 = v334;
            v129 = v316;
            if (v334)
            {
              v148 = (unint64_t *)&v334->__shared_owners_;
              do
                v149 = __ldaxr(v148);
              while (__stlxr(v149 - 1, v148));
              if (!v149)
              {
                ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                std::__shared_weak_count::__release_weak(v147);
              }
            }
            goto LABEL_263;
          }
        }
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)v2, v130, v333);
        goto LABEL_280;
      }
    }
    if (v132)
      goto LABEL_261;
LABEL_263:
    v136 = (std::__shared_weak_count *)rep;
    if (rep)
    {
      v137 = (unint64_t *)(rep + 8);
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
        if ((v132 & 1) == 0)
          goto LABEL_268;
        goto LABEL_355;
      }
    }
    if ((v132 & 1) != 0)
      goto LABEL_355;
LABEL_268:
    v139 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v139 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223FD67A4(&v333);
    if (SHIBYTE(v333->__on_zero_shared_weak) < 0)
    {
      v140 = v333->__on_zero_shared;
      v141 = (size_t)v333->__get_deleter;
    }
    else
    {
      v140 = &v333->__on_zero_shared;
      v141 = HIBYTE(v333->__on_zero_shared_weak);
    }
    sub_223195728((uint64_t)&stru_255789280, v140, v141, "CapturableDictionary::ToPropertyList - Key collision; colliding value was dropped.",
      0x52uLL);
    sub_223FD9BC4(&v328);
    if (**(int **)(v328 + 56) > 5
      || (v150 = *(unsigned __int8 *)(v328 + 72),
          v151 = sub_22322F254(v328, "OSLogSurrogateAppender", 1, 0),
          v152 = v151,
          !v150)
      && !v151)
    {
LABEL_355:
      if (SHIBYTE(v343) < 0)
        goto LABEL_359;
      goto LABEL_356;
    }
    key = &v328;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v321 = std::chrono::system_clock::now().__d_.__rep_;
    v322 = 5;
    v323 = "unknown file";
    v324 = 42;
    v325 = "unknown function";
    v326 = 0;
    v327 = 0;
    v153 = *(_QWORD *)key;
    v154 = (const char *)(*(_QWORD *)key + 16);
    v304 = v154;
    if (*(char *)(*(_QWORD *)key + 39) < 0)
    {
      v154 = *(const char **)(v153 + 16);
      v155 = *(_QWORD *)(v153 + 24);
      v308 = *(_QWORD **)key;
      v157 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v157 & 1) == 0)
      {
LABEL_367:
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v329);
          if ((_BYTE)__p)
          {
            *(_OWORD *)byte_255788F40 = *(_OWORD *)v329;
            *(_QWORD *)&byte_255788F40[16] = v330;
          }
          else
          {
            byte_255788F40[23] = 14;
            strcpy(byte_255788F40, "com.apple.cv3d");
          }
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
      }
    }
    else
    {
      v155 = *(unsigned __int8 *)(*(_QWORD *)key + 39);
      v308 = *(_QWORD **)key;
      v156 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v156 & 1) == 0)
        goto LABEL_367;
    }
    if (byte_255788F40[23] >= 0)
      v158 = byte_255788F40;
    else
      v158 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v159 = byte_255788F40[23];
    else
      v159 = *(_QWORD *)&byte_255788F40[8];
    v333 = (std::__shared_weak_count_vtbl *)os_log_create(v158, v154);
    if (v159 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v159 >= 0x17)
    {
      v161 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v159 | 7) != 0x17)
        v161 = v159 | 7;
      v162 = v161 + 1;
      v160 = (std::__shared_weak_count *)operator new(v161 + 1);
      v335 = v159;
      v336 = v162 | 0x8000000000000000;
      v334 = v160;
      goto LABEL_310;
    }
    HIBYTE(v336) = v159;
    v160 = (std::__shared_weak_count *)&v334;
    if (v159)
LABEL_310:
      memmove(v160, v158, v159);
    *((_BYTE *)&v160->__vftable + v159) = 0;
    v337 = 1;
    if (v155 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v129 = v316;
    if (v155 >= 0x17)
    {
      v165 = (v155 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v155 | 7) != 0x17)
        v165 = v155 | 7;
      v166 = v165 + 1;
      v163 = (void **)operator new(v165 + 1);
      v339 = v155;
      v340 = v166 | 0x8000000000000000;
      v338 = v163;
    }
    else
    {
      HIBYTE(v340) = v155;
      v163 = (void **)&v338;
      if (!v155)
      {
        LOBYTE(v338) = 0;
        v341 = 1;
        v164 = v333;
        if ((SHIBYTE(v340) & 0x80000000) == 0)
          goto LABEL_315;
LABEL_321:
        operator delete(v338);
        if (v337)
          goto LABEL_322;
        goto LABEL_324;
      }
    }
    memmove(v163, v154, v155);
    *((_BYTE *)v163 + v155) = 0;
    v341 = 1;
    v164 = v333;
    if (SHIBYTE(v340) < 0)
      goto LABEL_321;
LABEL_315:
    if (v337)
    {
LABEL_322:
      if (SHIBYTE(v336) < 0)
        operator delete(v334);
    }
LABEL_324:
    if (v333)
      os_release(v333);
    if (v152 && *(_QWORD *)(v152 + 24))
    {
      v167 = _os_log_pack_size();
      v168 = (std::__shared_weak_count_vtbl *)operator new(v167, (std::align_val_t)8uLL);
      v169 = (std::__shared_weak_count *)operator new();
      v170 = v169;
      v169->__shared_owners_ = 0;
      v171 = (unint64_t *)&v169->__shared_owners_;
      v169->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
      v169->__shared_weak_owners_ = 0;
      v169[1].__vftable = v168;
      do
        v172 = __ldxr(v171);
      while (__stxr(v172 + 1, v171));
      do
        v173 = __ldaxr(v171);
      while (__stlxr(v173 - 1, v171));
      if (!v173)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v170);
      }
      *(_WORD *)_os_log_pack_fill() = 0;
      v174 = operator new();
      v175 = *((unsigned __int8 *)v308 + 39);
      v176 = v304;
      if ((v175 & 0x80u) != 0)
      {
        v176 = (const char *)v308[2];
        v175 = v308[3];
      }
      *(_QWORD *)v174 = v168;
      *(_QWORD *)(v174 + 8) = v168;
      *(_QWORD *)(v174 + 16) = v170;
      *(_QWORD *)(v174 + 24) = 0;
      *(_QWORD *)(v174 + 32) = 0;
      *(_QWORD *)(v174 + 40) = v176;
      *(_QWORD *)(v174 + 48) = v175;
      *(_BYTE *)(v174 + 56) = 16;
      v333 = (std::__shared_weak_count_vtbl *)v174;
      (*(void (**)(_QWORD, std::__shared_weak_count_vtbl **))(**(_QWORD **)(v152 + 24) + 40))(*(_QWORD *)(v152 + 24), &v333);
      v129 = v316;
      v177 = v333;
      v333 = 0;
      if (v177)
      {
        v178 = (std::__shared_weak_count *)v177->__on_zero_shared_weak;
        if (v178)
        {
          v179 = (unint64_t *)&v178->__shared_owners_;
          do
            v180 = __ldaxr(v179);
          while (__stlxr(v180 - 1, v179));
          if (!v180)
          {
            ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
            std::__shared_weak_count::__release_weak(v178);
          }
        }
        v181 = (std::__shared_weak_count *)v177->__on_zero_shared;
        if (v181)
        {
          v182 = (unint64_t *)&v181->__shared_owners_;
          do
            v183 = __ldaxr(v182);
          while (__stlxr(v183 - 1, v182));
          if (!v183)
          {
            ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
            std::__shared_weak_count::__release_weak(v181);
          }
        }
        MEMORY[0x227684CE8](v177, 0x10F0C40B62ED6C6);
      }
    }
    else
    {
      os_log_type_enabled(v164, OS_LOG_TYPE_ERROR);
      LOWORD(v333) = 0;
      v184 = (void *)_os_log_send_and_compose_impl();
      if (v184)
        free(v184);
    }
    if (v150)
    {
      sub_22322C138((uint64_t)&key, "CapturableDictionary::ToPropertyList - Key collision; colliding value was dropped.");
      sub_223182C08((uint64_t)&key);
    }
    sub_223182C08((uint64_t)&key);
    v185 = v327;
    if (!v327)
      goto LABEL_355;
    v186 = (unint64_t *)&v327->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (v187)
      goto LABEL_355;
    ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
    std::__shared_weak_count::__release_weak(v185);
    if (SHIBYTE(v343) < 0)
    {
LABEL_359:
      operator delete((void *)v342);
      v188 = (_QWORD *)v128[1];
      if (v188)
        goto LABEL_360;
      do
      {
LABEL_362:
        v189 = (_QWORD *)v128[2];
        v65 = *v189 == (_QWORD)v128;
        v128 = v189;
      }
      while (!v65);
      goto LABEL_251;
    }
LABEL_356:
    v188 = (_QWORD *)v128[1];
    if (!v188)
      goto LABEL_362;
    do
    {
LABEL_360:
      v189 = v188;
      v188 = (_QWORD *)*v188;
    }
    while (v188);
LABEL_251:
    v128 = v189;
    if (v189 != v129)
      continue;
    break;
  }
  a1 = v311;
  v2 = *(_QWORD *)(a2 + 8);
LABEL_373:
  v190 = (_QWORD *)a1[13];
  v191 = a1 + 14;
  if (v190 == a1 + 14)
    goto LABEL_497;
  v317 = a1 + 14;
  while (2)
  {
    if (*((char *)v190 + 55) < 0)
    {
      sub_223197FA4(&v342, (void *)v190[4], v190[5]);
    }
    else
    {
      v342 = *((_OWORD *)v190 + 2);
      v343 = v190[6];
    }
    LOBYTE(v344[0]) = *((_BYTE *)v190 + 56);
    sub_224527E14((uint64_t)&v342, (CFStringRef *)&key);
    v192 = key;
    v194 = *(CFDictionaryRef *)v2;
    v193 = *(std::__shared_weak_count **)(v2 + 8);
    if (v193)
    {
      v195 = (unint64_t *)&v193->__shared_owners_;
      do
        v196 = __ldxr(v195);
      while (__stxr(v196 + 1, v195));
      do
        v197 = __ldaxr(v195);
      while (__stlxr(v197 - 1, v195));
      if (!v197)
      {
        ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
        std::__shared_weak_count::__release_weak(v193);
        if (!v194)
          goto LABEL_387;
LABEL_385:
        if (CFDictionaryContainsKey(*(CFDictionaryRef *)v2, v192))
        {
          LOBYTE(v194) = 0;
          goto LABEL_387;
        }
        sub_224527ABC(v344, &v333);
        v205 = v333;
        v204 = v334;
        if (!v334)
          goto LABEL_402;
        v206 = (unint64_t *)&v334->__shared_owners_;
        do
          v207 = __ldxr(v206);
        while (__stxr(v207 + 1, v206));
        do
          v208 = __ldaxr(v206);
        while (__stlxr(v208 - 1, v206));
        if (!v208)
        {
          ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
          std::__shared_weak_count::__release_weak(v204);
          LOBYTE(v194) = v205 != 0;
          if (!v205)
            goto LABEL_404;
        }
        else
        {
LABEL_402:
          LOBYTE(v194) = v205 != 0;
          if (!v205)
          {
LABEL_404:
            v209 = v334;
            v191 = v317;
            if (v334)
            {
              v210 = (unint64_t *)&v334->__shared_owners_;
              do
                v211 = __ldaxr(v210);
              while (__stlxr(v211 - 1, v210));
              if (!v211)
              {
                ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                std::__shared_weak_count::__release_weak(v209);
              }
            }
            goto LABEL_387;
          }
        }
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)v2, v192, v333);
        goto LABEL_404;
      }
    }
    if (v194)
      goto LABEL_385;
LABEL_387:
    v198 = (std::__shared_weak_count *)rep;
    if (rep)
    {
      v199 = (unint64_t *)(rep + 8);
      do
        v200 = __ldaxr(v199);
      while (__stlxr(v200 - 1, v199));
      if (!v200)
      {
        ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
        std::__shared_weak_count::__release_weak(v198);
        if ((v194 & 1) == 0)
          goto LABEL_392;
        goto LABEL_479;
      }
    }
    if ((v194 & 1) != 0)
      goto LABEL_479;
LABEL_392:
    v201 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v201 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223FD67A4(&v333);
    if (SHIBYTE(v333->__on_zero_shared_weak) < 0)
    {
      v202 = v333->__on_zero_shared;
      v203 = (size_t)v333->__get_deleter;
    }
    else
    {
      v202 = &v333->__on_zero_shared;
      v203 = HIBYTE(v333->__on_zero_shared_weak);
    }
    sub_223195728((uint64_t)&stru_255789280, v202, v203, "CapturableDictionary::ToPropertyList - Key collision; colliding value was dropped.",
      0x52uLL);
    sub_223FD9BC4(&v328);
    if (**(int **)(v328 + 56) > 5
      || (v212 = *(unsigned __int8 *)(v328 + 72),
          v213 = sub_22322F254(v328, "OSLogSurrogateAppender", 1, 0),
          v214 = v213,
          !v212)
      && !v213)
    {
LABEL_479:
      if (SHIBYTE(v343) < 0)
        goto LABEL_483;
      goto LABEL_480;
    }
    key = &v328;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v321 = std::chrono::system_clock::now().__d_.__rep_;
    v322 = 5;
    v323 = "unknown file";
    v324 = 42;
    v325 = "unknown function";
    v326 = 0;
    v327 = 0;
    v215 = *(_QWORD *)key;
    v216 = (const char *)(*(_QWORD *)key + 16);
    v305 = v216;
    if (*(char *)(*(_QWORD *)key + 39) < 0)
    {
      v216 = *(const char **)(v215 + 16);
      v217 = *(_QWORD *)(v215 + 24);
      v309 = *(_QWORD **)key;
      v219 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v219 & 1) == 0)
      {
LABEL_491:
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v329);
          if ((_BYTE)__p)
          {
            *(_OWORD *)byte_255788F40 = *(_OWORD *)v329;
            *(_QWORD *)&byte_255788F40[16] = v330;
          }
          else
          {
            byte_255788F40[23] = 14;
            strcpy(byte_255788F40, "com.apple.cv3d");
          }
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
      }
    }
    else
    {
      v217 = *(unsigned __int8 *)(*(_QWORD *)key + 39);
      v309 = *(_QWORD **)key;
      v218 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v218 & 1) == 0)
        goto LABEL_491;
    }
    if (byte_255788F40[23] >= 0)
      v220 = byte_255788F40;
    else
      v220 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v221 = byte_255788F40[23];
    else
      v221 = *(_QWORD *)&byte_255788F40[8];
    v333 = (std::__shared_weak_count_vtbl *)os_log_create(v220, v216);
    if (v221 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v221 >= 0x17)
    {
      v223 = (v221 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v221 | 7) != 0x17)
        v223 = v221 | 7;
      v224 = v223 + 1;
      v222 = (std::__shared_weak_count *)operator new(v223 + 1);
      v335 = v221;
      v336 = v224 | 0x8000000000000000;
      v334 = v222;
      goto LABEL_434;
    }
    HIBYTE(v336) = v221;
    v222 = (std::__shared_weak_count *)&v334;
    if (v221)
LABEL_434:
      memmove(v222, v220, v221);
    *((_BYTE *)&v222->__vftable + v221) = 0;
    v337 = 1;
    if (v217 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v191 = v317;
    if (v217 >= 0x17)
    {
      v227 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v217 | 7) != 0x17)
        v227 = v217 | 7;
      v228 = v227 + 1;
      v225 = (void **)operator new(v227 + 1);
      v339 = v217;
      v340 = v228 | 0x8000000000000000;
      v338 = v225;
    }
    else
    {
      HIBYTE(v340) = v217;
      v225 = (void **)&v338;
      if (!v217)
      {
        LOBYTE(v338) = 0;
        v341 = 1;
        v226 = v333;
        if ((SHIBYTE(v340) & 0x80000000) == 0)
          goto LABEL_439;
LABEL_445:
        operator delete(v338);
        if (v337)
          goto LABEL_446;
        goto LABEL_448;
      }
    }
    memmove(v225, v216, v217);
    *((_BYTE *)v225 + v217) = 0;
    v341 = 1;
    v226 = v333;
    if (SHIBYTE(v340) < 0)
      goto LABEL_445;
LABEL_439:
    if (v337)
    {
LABEL_446:
      if (SHIBYTE(v336) < 0)
        operator delete(v334);
    }
LABEL_448:
    if (v333)
      os_release(v333);
    if (v214 && *(_QWORD *)(v214 + 24))
    {
      v229 = _os_log_pack_size();
      v230 = (std::__shared_weak_count_vtbl *)operator new(v229, (std::align_val_t)8uLL);
      v231 = (std::__shared_weak_count *)operator new();
      v232 = v231;
      v231->__shared_owners_ = 0;
      v233 = (unint64_t *)&v231->__shared_owners_;
      v231->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
      v231->__shared_weak_owners_ = 0;
      v231[1].__vftable = v230;
      do
        v234 = __ldxr(v233);
      while (__stxr(v234 + 1, v233));
      do
        v235 = __ldaxr(v233);
      while (__stlxr(v235 - 1, v233));
      if (!v235)
      {
        ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
        std::__shared_weak_count::__release_weak(v232);
      }
      *(_WORD *)_os_log_pack_fill() = 0;
      v236 = operator new();
      v237 = *((unsigned __int8 *)v309 + 39);
      v238 = v305;
      if ((v237 & 0x80u) != 0)
      {
        v238 = (const char *)v309[2];
        v237 = v309[3];
      }
      *(_QWORD *)v236 = v230;
      *(_QWORD *)(v236 + 8) = v230;
      *(_QWORD *)(v236 + 16) = v232;
      *(_QWORD *)(v236 + 24) = 0;
      *(_QWORD *)(v236 + 32) = 0;
      *(_QWORD *)(v236 + 40) = v238;
      *(_QWORD *)(v236 + 48) = v237;
      *(_BYTE *)(v236 + 56) = 16;
      v333 = (std::__shared_weak_count_vtbl *)v236;
      (*(void (**)(_QWORD, std::__shared_weak_count_vtbl **))(**(_QWORD **)(v214 + 24) + 40))(*(_QWORD *)(v214 + 24), &v333);
      v191 = v317;
      v239 = v333;
      v333 = 0;
      if (v239)
      {
        v240 = (std::__shared_weak_count *)v239->__on_zero_shared_weak;
        if (v240)
        {
          v241 = (unint64_t *)&v240->__shared_owners_;
          do
            v242 = __ldaxr(v241);
          while (__stlxr(v242 - 1, v241));
          if (!v242)
          {
            ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
            std::__shared_weak_count::__release_weak(v240);
          }
        }
        v243 = (std::__shared_weak_count *)v239->__on_zero_shared;
        if (v243)
        {
          v244 = (unint64_t *)&v243->__shared_owners_;
          do
            v245 = __ldaxr(v244);
          while (__stlxr(v245 - 1, v244));
          if (!v245)
          {
            ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
            std::__shared_weak_count::__release_weak(v243);
          }
        }
        MEMORY[0x227684CE8](v239, 0x10F0C40B62ED6C6);
      }
    }
    else
    {
      os_log_type_enabled(v226, OS_LOG_TYPE_ERROR);
      LOWORD(v333) = 0;
      v246 = (void *)_os_log_send_and_compose_impl();
      if (v246)
        free(v246);
    }
    if (v212)
    {
      sub_22322C138((uint64_t)&key, "CapturableDictionary::ToPropertyList - Key collision; colliding value was dropped.");
      sub_223182C08((uint64_t)&key);
    }
    sub_223182C08((uint64_t)&key);
    v247 = v327;
    if (!v327)
      goto LABEL_479;
    v248 = (unint64_t *)&v327->__shared_owners_;
    do
      v249 = __ldaxr(v248);
    while (__stlxr(v249 - 1, v248));
    if (v249)
      goto LABEL_479;
    ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
    std::__shared_weak_count::__release_weak(v247);
    if (SHIBYTE(v343) < 0)
    {
LABEL_483:
      operator delete((void *)v342);
      v250 = (_QWORD *)v190[1];
      if (v250)
        goto LABEL_484;
      do
      {
LABEL_486:
        v251 = (_QWORD *)v190[2];
        v65 = *v251 == (_QWORD)v190;
        v190 = v251;
      }
      while (!v65);
      goto LABEL_375;
    }
LABEL_480:
    v250 = (_QWORD *)v190[1];
    if (!v250)
      goto LABEL_486;
    do
    {
LABEL_484:
      v251 = v250;
      v250 = (_QWORD *)*v250;
    }
    while (v250);
LABEL_375:
    v190 = v251;
    if (v251 != v191)
      continue;
    break;
  }
  a1 = v311;
  v2 = *(_QWORD *)(a2 + 8);
LABEL_497:
  v252 = (_QWORD *)a1[16];
  v253 = a1 + 17;
  if (v252 != a1 + 17)
  {
    v301 = a1 + 17;
    do
    {
      if (*((char *)v252 + 55) < 0)
      {
        sub_223197FA4(v329, (void *)v252[4], v252[5]);
        if (*((char *)v252 + 79) < 0)
        {
LABEL_504:
          sub_223197FA4(&__p, (void *)v252[7], v252[8]);
          goto LABEL_505;
        }
      }
      else
      {
        *(_OWORD *)v329 = *((_OWORD *)v252 + 2);
        v330 = v252[6];
        if (*((char *)v252 + 79) < 0)
          goto LABEL_504;
      }
      __p = *(_OWORD *)(v252 + 7);
      v332 = v252[9];
LABEL_505:
      sub_224527E14((uint64_t)v329, (CFStringRef *)&v333);
      v254 = sub_22379AAF4(v2, v333, (uint64_t)&__p);
      v255 = v254;
      v256 = v334;
      if (!v334)
        goto LABEL_509;
      v257 = (unint64_t *)&v334->__shared_owners_;
      do
        v258 = __ldaxr(v257);
      while (__stlxr(v258 - 1, v257));
      if (!v258)
      {
        ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
        std::__shared_weak_count::__release_weak(v256);
        if (v255)
          goto LABEL_582;
      }
      else
      {
LABEL_509:
        if (v254)
          goto LABEL_582;
      }
      v259 = atomic_load((unsigned __int8 *)&qword_2557892F0);
      if ((v259 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
      {
        __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
        __cxa_guard_release(&qword_2557892F0);
      }
      sub_223FD67A4(&v333);
      if (SHIBYTE(v333->__on_zero_shared_weak) < 0)
      {
        v260 = v333->__on_zero_shared;
        v261 = (size_t)v333->__get_deleter;
      }
      else
      {
        v260 = &v333->__on_zero_shared;
        v261 = HIBYTE(v333->__on_zero_shared_weak);
      }
      sub_223195728((uint64_t)&stru_255789280, v260, v261, "CapturableDictionary::ToPropertyList - Key collision; colliding value was dropped.",
        0x52uLL);
      sub_223FD9BC4(&v328);
      if (**(int **)(v328 + 56) <= 5)
      {
        v262 = *(unsigned __int8 *)(v328 + 72);
        v263 = sub_22322F254(v328, "OSLogSurrogateAppender", 1, 0);
        v264 = v263;
        if (v262 || v263)
        {
          key = &v328;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v321 = std::chrono::system_clock::now().__d_.__rep_;
          v322 = 5;
          v323 = "unknown file";
          v324 = 42;
          v325 = "unknown function";
          v326 = 0;
          v327 = 0;
          v265 = *(_QWORD *)key;
          v266 = (const char *)(*(_QWORD *)key + 16);
          v312 = v266;
          valuePtr = *(_QWORD **)key;
          if (*(char *)(*(_QWORD *)key + 39) < 0)
          {
            v266 = *(const char **)(v265 + 16);
            v267 = *(_QWORD *)(v265 + 24);
          }
          else
          {
            v267 = *(unsigned __int8 *)(*(_QWORD *)key + 39);
          }
          v318 = v262;
          v268 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v268 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)&v342);
            if (LOBYTE(v344[0]))
            {
              *(_OWORD *)byte_255788F40 = v342;
              *(_QWORD *)&byte_255788F40[16] = v343;
            }
            else
            {
              byte_255788F40[23] = 14;
              strcpy(byte_255788F40, "com.apple.cv3d");
            }
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
            v253 = v301;
          }
          if (byte_255788F40[23] >= 0)
            v269 = byte_255788F40;
          else
            v269 = *(const char **)byte_255788F40;
          if (byte_255788F40[23] >= 0)
            v270 = byte_255788F40[23];
          else
            v270 = *(_QWORD *)&byte_255788F40[8];
          v333 = (std::__shared_weak_count_vtbl *)os_log_create(v269, v266);
          if (v270 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v270 >= 0x17)
          {
            v272 = (v270 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v270 | 7) != 0x17)
              v272 = v270 | 7;
            v273 = v272 + 1;
            v271 = (std::__shared_weak_count *)operator new(v272 + 1);
            v335 = v270;
            v336 = v273 | 0x8000000000000000;
            v334 = v271;
            v253 = v301;
          }
          else
          {
            HIBYTE(v336) = v270;
            v271 = (std::__shared_weak_count *)&v334;
            if (!v270)
            {
LABEL_537:
              *((_BYTE *)&v271->__vftable + v270) = 0;
              v337 = 1;
              if (v267 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v267 >= 0x17)
              {
                v276 = (v267 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v267 | 7) != 0x17)
                  v276 = v267 | 7;
                v277 = v276 + 1;
                v274 = (void **)operator new(v276 + 1);
                v339 = v267;
                v340 = v277 | 0x8000000000000000;
                v338 = v274;
              }
              else
              {
                HIBYTE(v340) = v267;
                v274 = (void **)&v338;
                if (!v267)
                {
                  LOBYTE(v338) = 0;
                  v341 = 1;
                  v275 = v333;
                  if ((SHIBYTE(v340) & 0x80000000) == 0)
                    goto LABEL_541;
LABEL_547:
                  operator delete(v338);
                  if (v337)
                    goto LABEL_548;
                  goto LABEL_550;
                }
              }
              memmove(v274, v266, v267);
              *((_BYTE *)v274 + v267) = 0;
              v341 = 1;
              v275 = v333;
              if (SHIBYTE(v340) < 0)
                goto LABEL_547;
LABEL_541:
              if (v337)
              {
LABEL_548:
                if (SHIBYTE(v336) < 0)
                  operator delete(v334);
              }
LABEL_550:
              if (v333)
                os_release(v333);
              if (v264 && *(_QWORD *)(v264 + 24))
              {
                v278 = _os_log_pack_size();
                v279 = (std::__shared_weak_count_vtbl *)operator new(v278, (std::align_val_t)8uLL);
                v280 = (std::__shared_weak_count *)operator new();
                v281 = v280;
                v280->__shared_owners_ = 0;
                v282 = (unint64_t *)&v280->__shared_owners_;
                v280->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v280->__shared_weak_owners_ = 0;
                v280[1].__vftable = v279;
                do
                  v283 = __ldxr(v282);
                while (__stxr(v283 + 1, v282));
                do
                  v284 = __ldaxr(v282);
                while (__stlxr(v284 - 1, v282));
                if (!v284)
                {
                  ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                  std::__shared_weak_count::__release_weak(v281);
                }
                *(_WORD *)_os_log_pack_fill() = 0;
                v285 = operator new();
                v286 = *((unsigned __int8 *)valuePtr + 39);
                v287 = v312;
                if ((v286 & 0x80u) != 0)
                {
                  v287 = (const char *)valuePtr[2];
                  v286 = valuePtr[3];
                }
                *(_QWORD *)v285 = v279;
                *(_QWORD *)(v285 + 8) = v279;
                *(_QWORD *)(v285 + 16) = v281;
                *(_QWORD *)(v285 + 24) = 0;
                *(_QWORD *)(v285 + 32) = 0;
                *(_QWORD *)(v285 + 40) = v287;
                *(_QWORD *)(v285 + 48) = v286;
                *(_BYTE *)(v285 + 56) = 16;
                v333 = (std::__shared_weak_count_vtbl *)v285;
                (*(void (**)(_QWORD, std::__shared_weak_count_vtbl **))(**(_QWORD **)(v264 + 24) + 40))(*(_QWORD *)(v264 + 24), &v333);
                v288 = v333;
                v333 = 0;
                if (v288)
                {
                  v289 = (std::__shared_weak_count *)v288->__on_zero_shared_weak;
                  if (v289)
                  {
                    v290 = (unint64_t *)&v289->__shared_owners_;
                    do
                      v291 = __ldaxr(v290);
                    while (__stlxr(v291 - 1, v290));
                    if (!v291)
                    {
                      ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                      std::__shared_weak_count::__release_weak(v289);
                    }
                  }
                  v292 = (std::__shared_weak_count *)v288->__on_zero_shared;
                  if (v292)
                  {
                    v293 = (unint64_t *)&v292->__shared_owners_;
                    do
                      v294 = __ldaxr(v293);
                    while (__stlxr(v294 - 1, v293));
                    if (!v294)
                    {
                      ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                      std::__shared_weak_count::__release_weak(v292);
                    }
                  }
                  MEMORY[0x227684CE8](v288, 0x10F0C40B62ED6C6);
                }
              }
              else
              {
                os_log_type_enabled(v275, OS_LOG_TYPE_ERROR);
                LOWORD(v333) = 0;
                v295 = (void *)_os_log_send_and_compose_impl();
                if (v295)
                  free(v295);
              }
              if (v318)
              {
                sub_22322C138((uint64_t)&key, "CapturableDictionary::ToPropertyList - Key collision; colliding value was dropped.");
                sub_223182C08((uint64_t)&key);
              }
              sub_223182C08((uint64_t)&key);
              v296 = v327;
              if (v327)
              {
                v297 = (unint64_t *)&v327->__shared_owners_;
                do
                  v298 = __ldaxr(v297);
                while (__stlxr(v298 - 1, v297));
                if (!v298)
                {
                  ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                  std::__shared_weak_count::__release_weak(v296);
                }
              }
              goto LABEL_582;
            }
          }
          memmove(v271, v269, v270);
          goto LABEL_537;
        }
      }
LABEL_582:
      if (SHIBYTE(v332) < 0)
      {
        operator delete((void *)__p);
        if ((SHIBYTE(v330) & 0x80000000) == 0)
        {
LABEL_584:
          v299 = (_QWORD *)v252[1];
          if (v299)
            goto LABEL_588;
          goto LABEL_590;
        }
      }
      else if ((SHIBYTE(v330) & 0x80000000) == 0)
      {
        goto LABEL_584;
      }
      operator delete(v329[0]);
      v299 = (_QWORD *)v252[1];
      if (v299)
      {
        do
        {
LABEL_588:
          v300 = v299;
          v299 = (_QWORD *)*v299;
        }
        while (v299);
        goto LABEL_499;
      }
      do
      {
LABEL_590:
        v300 = (_QWORD *)v252[2];
        v65 = *v300 == (_QWORD)v252;
        v252 = v300;
      }
      while (!v65);
LABEL_499:
      v252 = v300;
    }
    while (v300 != v253);
  }
}

void sub_223FD9210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;

  __cxa_guard_abort(&qword_255788F58);
  sub_223182C08((uint64_t)&a21);
  v43 = a29;
  if (a29)
  {
    p_shared_owners = (unint64_t *)&a29->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (a42 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  _Unwind_Resume(a1);
}

void sub_223FD9BC4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CEA80);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEA80))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CEA78);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CEA80);
  }
  *a1 = qword_2540CEA78;
}

void sub_223FD9C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CEA80);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CEA80);
  _Unwind_Resume(a1);
}

void sub_223FD9CB8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC64E78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223FD9CC8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC64E78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FD9CF8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

uint64_t sub_223FD9D08(uint64_t a1, char *__s)
{
  size_t v4;
  void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  *(_QWORD *)a1 = off_24EC64E38;
  v5 = (void *)(a1 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v5 = operator new(v7 + 1);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v8 | 0x8000000000000000;
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    *(_BYTE *)(a1 + 31) = v4;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v5, __s, v6);
LABEL_9:
  *((_BYTE *)v5 + v6) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 850045863;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  return a1;
}

void sub_223FD9E20(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_223FD9E34(uint64_t **a1, uint64_t a2, char *a3)
{
  uint64_t **v6;
  uint64_t *v7;
  void *v8;
  size_t v9;
  char *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t **v16;
  void *v17;
  int v18;
  const void *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  unint64_t v26;
  size_t v27;
  int v28;
  int v29;
  uint64_t *v30;
  uint64_t *v32;

  v6 = a1 + 1;
  v7 = (uint64_t *)operator new(0x40uLL);
  v32 = v7;
  v8 = v7 + 4;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = (char *)v7;
  v11 = *(const void **)a2;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v8 = operator new(v12 + 1);
    *((_QWORD *)v10 + 5) = v9;
    *((_QWORD *)v10 + 6) = v13 | 0x8000000000000000;
    *((_QWORD *)v10 + 4) = v8;
  }
  else
  {
    *((_BYTE *)v7 + 55) = v9;
    if (!v9)
      goto LABEL_9;
  }
  memmove(v8, v11, v9);
LABEL_9:
  *((_BYTE *)v8 + v9) = 0;
  v10[56] = *a3;
  v14 = v32;
  v15 = *v6;
  v16 = v6;
  if (!*v6)
  {
LABEL_36:
    *v32 = 0;
    v32[1] = 0;
    v32[2] = (uint64_t)v16;
    *v6 = v32;
    v30 = (uint64_t *)**a1;
    if (v30)
    {
      *a1 = v30;
      v14 = *v6;
    }
    sub_2231A9A8C(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v32;
  }
  v17 = (void *)v32[4];
  v18 = *((char *)v32 + 55);
  if (v18 >= 0)
    v19 = v32 + 4;
  else
    v19 = (const void *)v32[4];
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v32 + 55);
  else
    v20 = v32[5];
  while (1)
  {
    while (1)
    {
      v16 = (uint64_t **)v15;
      v23 = (_QWORD *)v15[4];
      v21 = v15 + 4;
      v22 = v23;
      v24 = *((char *)v21 + 23);
      v25 = v24 >= 0 ? v21 : v22;
      v26 = v24 >= 0 ? *((unsigned __int8 *)v21 + 23) : v21[1];
      v27 = v26 >= v20 ? v20 : v26;
      v28 = memcmp(v19, v25, v27);
      if (v28)
        break;
      if (v20 >= v26)
        goto LABEL_30;
LABEL_16:
      v15 = *v16;
      v6 = v16;
      if (!*v16)
        goto LABEL_36;
    }
    if (v28 < 0)
      goto LABEL_16;
LABEL_30:
    v29 = memcmp(v25, v19, v27);
    if (!v29)
      break;
    if ((v29 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_34:
    v15 = v16[1];
    if (!v15)
    {
      v6 = v16 + 1;
      goto LABEL_36;
    }
  }
  if (v26 < v20)
    goto LABEL_34;
LABEL_39:
  if (v32)
  {
    if (v18 < 0)
      operator delete(v17);
    operator delete(v32);
  }
  return (uint64_t *)v16;
}

void sub_223FDA03C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223FDA050((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_223FDA050(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 55) < 0)
      operator delete(*(void **)(v2 + 32));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *sub_223FDA09C(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t **v6;
  uint64_t *v7;
  void *v8;
  size_t v9;
  uint64_t *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t **v16;
  void *v17;
  int v18;
  const void *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  unint64_t v26;
  size_t v27;
  int v28;
  int v29;
  uint64_t *v30;
  uint64_t *v32;

  v6 = a1 + 1;
  v7 = (uint64_t *)operator new(0x40uLL);
  v32 = v7;
  v8 = v7 + 4;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v7;
  v11 = *(const void **)a2;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v8 = operator new(v12 + 1);
    v10[5] = v9;
    v10[6] = v13 | 0x8000000000000000;
    v10[4] = (uint64_t)v8;
  }
  else
  {
    *((_BYTE *)v7 + 55) = v9;
    if (!v9)
      goto LABEL_9;
  }
  memmove(v8, v11, v9);
LABEL_9:
  *((_BYTE *)v8 + v9) = 0;
  v10[7] = *a3;
  v14 = v32;
  v15 = *v6;
  v16 = v6;
  if (!*v6)
  {
LABEL_36:
    *v32 = 0;
    v32[1] = 0;
    v32[2] = (uint64_t)v16;
    *v6 = v32;
    v30 = (uint64_t *)**a1;
    if (v30)
    {
      *a1 = v30;
      v14 = *v6;
    }
    sub_2231A9A8C(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v32;
  }
  v17 = (void *)v32[4];
  v18 = *((char *)v32 + 55);
  if (v18 >= 0)
    v19 = v32 + 4;
  else
    v19 = (const void *)v32[4];
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v32 + 55);
  else
    v20 = v32[5];
  while (1)
  {
    while (1)
    {
      v16 = (uint64_t **)v15;
      v23 = (_QWORD *)v15[4];
      v21 = v15 + 4;
      v22 = v23;
      v24 = *((char *)v21 + 23);
      v25 = v24 >= 0 ? v21 : v22;
      v26 = v24 >= 0 ? *((unsigned __int8 *)v21 + 23) : v21[1];
      v27 = v26 >= v20 ? v20 : v26;
      v28 = memcmp(v19, v25, v27);
      if (v28)
        break;
      if (v20 >= v26)
        goto LABEL_30;
LABEL_16:
      v15 = *v16;
      v6 = v16;
      if (!*v16)
        goto LABEL_36;
    }
    if (v28 < 0)
      goto LABEL_16;
LABEL_30:
    v29 = memcmp(v25, v19, v27);
    if (!v29)
      break;
    if ((v29 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_34:
    v15 = v16[1];
    if (!v15)
    {
      v6 = v16 + 1;
      goto LABEL_36;
    }
  }
  if (v26 < v20)
    goto LABEL_34;
LABEL_39:
  if (v32)
  {
    if (v18 < 0)
      operator delete(v17);
    operator delete(v32);
  }
  return (uint64_t *)v16;
}

void sub_223FDA2A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223FDA050((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_223FDA2B8(uint64_t **a1, uint64_t a2, unsigned int *a3)
{
  uint64_t **v6;
  uint64_t *v7;
  void *v8;
  size_t v9;
  uint64_t *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t **v16;
  void *v17;
  int v18;
  const void *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  unint64_t v26;
  size_t v27;
  int v28;
  int v29;
  uint64_t *v30;
  uint64_t *v32;

  v6 = a1 + 1;
  v7 = (uint64_t *)operator new(0x40uLL);
  v32 = v7;
  v8 = v7 + 4;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v7;
  v11 = *(const void **)a2;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v8 = operator new(v12 + 1);
    v10[5] = v9;
    v10[6] = v13 | 0x8000000000000000;
    v10[4] = (uint64_t)v8;
  }
  else
  {
    *((_BYTE *)v7 + 55) = v9;
    if (!v9)
      goto LABEL_9;
  }
  memmove(v8, v11, v9);
LABEL_9:
  *((_BYTE *)v8 + v9) = 0;
  v10[7] = *a3;
  v14 = v32;
  v15 = *v6;
  v16 = v6;
  if (!*v6)
  {
LABEL_36:
    *v32 = 0;
    v32[1] = 0;
    v32[2] = (uint64_t)v16;
    *v6 = v32;
    v30 = (uint64_t *)**a1;
    if (v30)
    {
      *a1 = v30;
      v14 = *v6;
    }
    sub_2231A9A8C(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v32;
  }
  v17 = (void *)v32[4];
  v18 = *((char *)v32 + 55);
  if (v18 >= 0)
    v19 = v32 + 4;
  else
    v19 = (const void *)v32[4];
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v32 + 55);
  else
    v20 = v32[5];
  while (1)
  {
    while (1)
    {
      v16 = (uint64_t **)v15;
      v23 = (_QWORD *)v15[4];
      v21 = v15 + 4;
      v22 = v23;
      v24 = *((char *)v21 + 23);
      v25 = v24 >= 0 ? v21 : v22;
      v26 = v24 >= 0 ? *((unsigned __int8 *)v21 + 23) : v21[1];
      v27 = v26 >= v20 ? v20 : v26;
      v28 = memcmp(v19, v25, v27);
      if (v28)
        break;
      if (v20 >= v26)
        goto LABEL_30;
LABEL_16:
      v15 = *v16;
      v6 = v16;
      if (!*v16)
        goto LABEL_36;
    }
    if (v28 < 0)
      goto LABEL_16;
LABEL_30:
    v29 = memcmp(v25, v19, v27);
    if (!v29)
      break;
    if ((v29 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_34:
    v15 = v16[1];
    if (!v15)
    {
      v6 = v16 + 1;
      goto LABEL_36;
    }
  }
  if (v26 < v20)
    goto LABEL_34;
LABEL_39:
  if (v32)
  {
    if (v18 < 0)
      operator delete(v17);
    operator delete(v32);
  }
  return (uint64_t *)v16;
}

void sub_223FDA4C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223FDA050((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_223FDA4D4(uint64_t **a1, uint64_t a2, int *a3)
{
  uint64_t **v6;
  uint64_t *v7;
  void *v8;
  size_t v9;
  uint64_t *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t **v16;
  void *v17;
  int v18;
  const void *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  unint64_t v26;
  size_t v27;
  int v28;
  int v29;
  uint64_t *v30;
  uint64_t *v32;

  v6 = a1 + 1;
  v7 = (uint64_t *)operator new(0x40uLL);
  v32 = v7;
  v8 = v7 + 4;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v7;
  v11 = *(const void **)a2;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v8 = operator new(v12 + 1);
    v10[5] = v9;
    v10[6] = v13 | 0x8000000000000000;
    v10[4] = (uint64_t)v8;
  }
  else
  {
    *((_BYTE *)v7 + 55) = v9;
    if (!v9)
      goto LABEL_9;
  }
  memmove(v8, v11, v9);
LABEL_9:
  *((_BYTE *)v8 + v9) = 0;
  v10[7] = *a3;
  v14 = v32;
  v15 = *v6;
  v16 = v6;
  if (!*v6)
  {
LABEL_36:
    *v32 = 0;
    v32[1] = 0;
    v32[2] = (uint64_t)v16;
    *v6 = v32;
    v30 = (uint64_t *)**a1;
    if (v30)
    {
      *a1 = v30;
      v14 = *v6;
    }
    sub_2231A9A8C(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v32;
  }
  v17 = (void *)v32[4];
  v18 = *((char *)v32 + 55);
  if (v18 >= 0)
    v19 = v32 + 4;
  else
    v19 = (const void *)v32[4];
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v32 + 55);
  else
    v20 = v32[5];
  while (1)
  {
    while (1)
    {
      v16 = (uint64_t **)v15;
      v23 = (_QWORD *)v15[4];
      v21 = v15 + 4;
      v22 = v23;
      v24 = *((char *)v21 + 23);
      v25 = v24 >= 0 ? v21 : v22;
      v26 = v24 >= 0 ? *((unsigned __int8 *)v21 + 23) : v21[1];
      v27 = v26 >= v20 ? v20 : v26;
      v28 = memcmp(v19, v25, v27);
      if (v28)
        break;
      if (v20 >= v26)
        goto LABEL_30;
LABEL_16:
      v15 = *v16;
      v6 = v16;
      if (!*v16)
        goto LABEL_36;
    }
    if (v28 < 0)
      goto LABEL_16;
LABEL_30:
    v29 = memcmp(v25, v19, v27);
    if (!v29)
      break;
    if ((v29 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_34:
    v15 = v16[1];
    if (!v15)
    {
      v6 = v16 + 1;
      goto LABEL_36;
    }
  }
  if (v26 < v20)
    goto LABEL_34;
LABEL_39:
  if (v32)
  {
    if (v18 < 0)
      operator delete(v17);
    operator delete(v32);
  }
  return (uint64_t *)v16;
}

void sub_223FDA6DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223FDA050((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_223FDA6F0(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t **v6;
  uint64_t *v7;
  void *v8;
  size_t v9;
  uint64_t *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t **v16;
  void *v17;
  int v18;
  const void *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  unint64_t v26;
  size_t v27;
  int v28;
  int v29;
  uint64_t *v30;
  uint64_t *v32;

  v6 = a1 + 1;
  v7 = (uint64_t *)operator new(0x40uLL);
  v32 = v7;
  v8 = v7 + 4;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v7;
  v11 = *(const void **)a2;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v8 = operator new(v12 + 1);
    v10[5] = v9;
    v10[6] = v13 | 0x8000000000000000;
    v10[4] = (uint64_t)v8;
  }
  else
  {
    *((_BYTE *)v7 + 55) = v9;
    if (!v9)
      goto LABEL_9;
  }
  memmove(v8, v11, v9);
LABEL_9:
  *((_BYTE *)v8 + v9) = 0;
  v10[7] = *a3;
  v14 = v32;
  v15 = *v6;
  v16 = v6;
  if (!*v6)
  {
LABEL_36:
    *v32 = 0;
    v32[1] = 0;
    v32[2] = (uint64_t)v16;
    *v6 = v32;
    v30 = (uint64_t *)**a1;
    if (v30)
    {
      *a1 = v30;
      v14 = *v6;
    }
    sub_2231A9A8C(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v32;
  }
  v17 = (void *)v32[4];
  v18 = *((char *)v32 + 55);
  if (v18 >= 0)
    v19 = v32 + 4;
  else
    v19 = (const void *)v32[4];
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v32 + 55);
  else
    v20 = v32[5];
  while (1)
  {
    while (1)
    {
      v16 = (uint64_t **)v15;
      v23 = (_QWORD *)v15[4];
      v21 = v15 + 4;
      v22 = v23;
      v24 = *((char *)v21 + 23);
      v25 = v24 >= 0 ? v21 : v22;
      v26 = v24 >= 0 ? *((unsigned __int8 *)v21 + 23) : v21[1];
      v27 = v26 >= v20 ? v20 : v26;
      v28 = memcmp(v19, v25, v27);
      if (v28)
        break;
      if (v20 >= v26)
        goto LABEL_30;
LABEL_16:
      v15 = *v16;
      v6 = v16;
      if (!*v16)
        goto LABEL_36;
    }
    if (v28 < 0)
      goto LABEL_16;
LABEL_30:
    v29 = memcmp(v25, v19, v27);
    if (!v29)
      break;
    if ((v29 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_34:
    v15 = v16[1];
    if (!v15)
    {
      v6 = v16 + 1;
      goto LABEL_36;
    }
  }
  if (v26 < v20)
    goto LABEL_34;
LABEL_39:
  if (v32)
  {
    if (v18 < 0)
      operator delete(v17);
    operator delete(v32);
  }
  return (uint64_t *)v16;
}

void sub_223FDA8F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223FDA050((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_223FDA90C(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t **v6;
  uint64_t *v7;
  void *v8;
  size_t v9;
  uint64_t *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t **v16;
  void *v17;
  int v18;
  const void *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  unint64_t v26;
  size_t v27;
  int v28;
  int v29;
  uint64_t *v30;
  uint64_t *v32;

  v6 = a1 + 1;
  v7 = (uint64_t *)operator new(0x40uLL);
  v32 = v7;
  v8 = v7 + 4;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v7;
  v11 = *(const void **)a2;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v8 = operator new(v12 + 1);
    v10[5] = v9;
    v10[6] = v13 | 0x8000000000000000;
    v10[4] = (uint64_t)v8;
  }
  else
  {
    *((_BYTE *)v7 + 55) = v9;
    if (!v9)
      goto LABEL_9;
  }
  memmove(v8, v11, v9);
LABEL_9:
  *((_BYTE *)v8 + v9) = 0;
  v10[7] = *a3;
  v14 = v32;
  v15 = *v6;
  v16 = v6;
  if (!*v6)
  {
LABEL_36:
    *v32 = 0;
    v32[1] = 0;
    v32[2] = (uint64_t)v16;
    *v6 = v32;
    v30 = (uint64_t *)**a1;
    if (v30)
    {
      *a1 = v30;
      v14 = *v6;
    }
    sub_2231A9A8C(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v32;
  }
  v17 = (void *)v32[4];
  v18 = *((char *)v32 + 55);
  if (v18 >= 0)
    v19 = v32 + 4;
  else
    v19 = (const void *)v32[4];
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v32 + 55);
  else
    v20 = v32[5];
  while (1)
  {
    while (1)
    {
      v16 = (uint64_t **)v15;
      v23 = (_QWORD *)v15[4];
      v21 = v15 + 4;
      v22 = v23;
      v24 = *((char *)v21 + 23);
      v25 = v24 >= 0 ? v21 : v22;
      v26 = v24 >= 0 ? *((unsigned __int8 *)v21 + 23) : v21[1];
      v27 = v26 >= v20 ? v20 : v26;
      v28 = memcmp(v19, v25, v27);
      if (v28)
        break;
      if (v20 >= v26)
        goto LABEL_30;
LABEL_16:
      v15 = *v16;
      v6 = v16;
      if (!*v16)
        goto LABEL_36;
    }
    if (v28 < 0)
      goto LABEL_16;
LABEL_30:
    v29 = memcmp(v25, v19, v27);
    if (!v29)
      break;
    if ((v29 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_34:
    v15 = v16[1];
    if (!v15)
    {
      v6 = v16 + 1;
      goto LABEL_36;
    }
  }
  if (v26 < v20)
    goto LABEL_34;
LABEL_39:
  if (v32)
  {
    if (v18 < 0)
      operator delete(v17);
    operator delete(v32);
  }
  return (uint64_t *)v16;
}

void sub_223FDAB14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223FDA050((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_223FDAB28(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t **v6;
  uint64_t *v7;
  void *v8;
  size_t v9;
  uint64_t *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t **v16;
  void *v17;
  int v18;
  const void *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  unint64_t v26;
  size_t v27;
  int v28;
  int v29;
  uint64_t *v30;
  uint64_t *v32;

  v6 = a1 + 1;
  v7 = (uint64_t *)operator new(0x40uLL);
  v32 = v7;
  v8 = v7 + 4;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v7;
  v11 = *(const void **)a2;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v8 = operator new(v12 + 1);
    v10[5] = v9;
    v10[6] = v13 | 0x8000000000000000;
    v10[4] = (uint64_t)v8;
  }
  else
  {
    *((_BYTE *)v7 + 55) = v9;
    if (!v9)
      goto LABEL_9;
  }
  memmove(v8, v11, v9);
LABEL_9:
  *((_BYTE *)v8 + v9) = 0;
  v10[7] = *a3;
  v14 = v32;
  v15 = *v6;
  v16 = v6;
  if (!*v6)
  {
LABEL_36:
    *v32 = 0;
    v32[1] = 0;
    v32[2] = (uint64_t)v16;
    *v6 = v32;
    v30 = (uint64_t *)**a1;
    if (v30)
    {
      *a1 = v30;
      v14 = *v6;
    }
    sub_2231A9A8C(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v32;
  }
  v17 = (void *)v32[4];
  v18 = *((char *)v32 + 55);
  if (v18 >= 0)
    v19 = v32 + 4;
  else
    v19 = (const void *)v32[4];
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v32 + 55);
  else
    v20 = v32[5];
  while (1)
  {
    while (1)
    {
      v16 = (uint64_t **)v15;
      v23 = (_QWORD *)v15[4];
      v21 = v15 + 4;
      v22 = v23;
      v24 = *((char *)v21 + 23);
      v25 = v24 >= 0 ? v21 : v22;
      v26 = v24 >= 0 ? *((unsigned __int8 *)v21 + 23) : v21[1];
      v27 = v26 >= v20 ? v20 : v26;
      v28 = memcmp(v19, v25, v27);
      if (v28)
        break;
      if (v20 >= v26)
        goto LABEL_30;
LABEL_16:
      v15 = *v16;
      v6 = v16;
      if (!*v16)
        goto LABEL_36;
    }
    if (v28 < 0)
      goto LABEL_16;
LABEL_30:
    v29 = memcmp(v25, v19, v27);
    if (!v29)
      break;
    if ((v29 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_34:
    v15 = v16[1];
    if (!v15)
    {
      v6 = v16 + 1;
      goto LABEL_36;
    }
  }
  if (v26 < v20)
    goto LABEL_34;
LABEL_39:
  if (v32)
  {
    if (v18 < 0)
      operator delete(v17);
    operator delete(v32);
  }
  return (uint64_t *)v16;
}

void sub_223FDAD30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223FDA050((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_223FDAD44(uint64_t **a1, uint64_t a2, float *a3)
{
  uint64_t **v6;
  uint64_t *v7;
  void *v8;
  size_t v9;
  char *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t **v16;
  void *v17;
  int v18;
  const void *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  unint64_t v26;
  size_t v27;
  int v28;
  int v29;
  uint64_t *v30;
  uint64_t *v32;

  v6 = a1 + 1;
  v7 = (uint64_t *)operator new(0x40uLL);
  v32 = v7;
  v8 = v7 + 4;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = (char *)v7;
  v11 = *(const void **)a2;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v8 = operator new(v12 + 1);
    *((_QWORD *)v10 + 5) = v9;
    *((_QWORD *)v10 + 6) = v13 | 0x8000000000000000;
    *((_QWORD *)v10 + 4) = v8;
  }
  else
  {
    *((_BYTE *)v7 + 55) = v9;
    if (!v9)
      goto LABEL_9;
  }
  memmove(v8, v11, v9);
LABEL_9:
  *((_BYTE *)v8 + v9) = 0;
  *((double *)v10 + 7) = *a3;
  v14 = v32;
  v15 = *v6;
  v16 = v6;
  if (!*v6)
  {
LABEL_36:
    *v32 = 0;
    v32[1] = 0;
    v32[2] = (uint64_t)v16;
    *v6 = v32;
    v30 = (uint64_t *)**a1;
    if (v30)
    {
      *a1 = v30;
      v14 = *v6;
    }
    sub_2231A9A8C(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v32;
  }
  v17 = (void *)v32[4];
  v18 = *((char *)v32 + 55);
  if (v18 >= 0)
    v19 = v32 + 4;
  else
    v19 = (const void *)v32[4];
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v32 + 55);
  else
    v20 = v32[5];
  while (1)
  {
    while (1)
    {
      v16 = (uint64_t **)v15;
      v23 = (_QWORD *)v15[4];
      v21 = v15 + 4;
      v22 = v23;
      v24 = *((char *)v21 + 23);
      v25 = v24 >= 0 ? v21 : v22;
      v26 = v24 >= 0 ? *((unsigned __int8 *)v21 + 23) : v21[1];
      v27 = v26 >= v20 ? v20 : v26;
      v28 = memcmp(v19, v25, v27);
      if (v28)
        break;
      if (v20 >= v26)
        goto LABEL_30;
LABEL_16:
      v15 = *v16;
      v6 = v16;
      if (!*v16)
        goto LABEL_36;
    }
    if (v28 < 0)
      goto LABEL_16;
LABEL_30:
    v29 = memcmp(v25, v19, v27);
    if (!v29)
      break;
    if ((v29 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_34:
    v15 = v16[1];
    if (!v15)
    {
      v6 = v16 + 1;
      goto LABEL_36;
    }
  }
  if (v26 < v20)
    goto LABEL_34;
LABEL_39:
  if (v32)
  {
    if (v18 < 0)
      operator delete(v17);
    operator delete(v32);
  }
  return (uint64_t *)v16;
}

void sub_223FDAF50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223FDA050((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_223FDAF64(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t **v6;
  uint64_t *v7;
  void *v8;
  size_t v9;
  uint64_t *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t **v16;
  void *v17;
  int v18;
  const void *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  unint64_t v26;
  size_t v27;
  int v28;
  int v29;
  uint64_t *v30;
  uint64_t *v32;

  v6 = a1 + 1;
  v7 = (uint64_t *)operator new(0x40uLL);
  v32 = v7;
  v8 = v7 + 4;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v7;
  v11 = *(const void **)a2;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v8 = operator new(v12 + 1);
    v10[5] = v9;
    v10[6] = v13 | 0x8000000000000000;
    v10[4] = (uint64_t)v8;
  }
  else
  {
    *((_BYTE *)v7 + 55) = v9;
    if (!v9)
      goto LABEL_9;
  }
  memmove(v8, v11, v9);
LABEL_9:
  *((_BYTE *)v8 + v9) = 0;
  v10[7] = *a3;
  v14 = v32;
  v15 = *v6;
  v16 = v6;
  if (!*v6)
  {
LABEL_36:
    *v32 = 0;
    v32[1] = 0;
    v32[2] = (uint64_t)v16;
    *v6 = v32;
    v30 = (uint64_t *)**a1;
    if (v30)
    {
      *a1 = v30;
      v14 = *v6;
    }
    sub_2231A9A8C(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v32;
  }
  v17 = (void *)v32[4];
  v18 = *((char *)v32 + 55);
  if (v18 >= 0)
    v19 = v32 + 4;
  else
    v19 = (const void *)v32[4];
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v32 + 55);
  else
    v20 = v32[5];
  while (1)
  {
    while (1)
    {
      v16 = (uint64_t **)v15;
      v23 = (_QWORD *)v15[4];
      v21 = v15 + 4;
      v22 = v23;
      v24 = *((char *)v21 + 23);
      v25 = v24 >= 0 ? v21 : v22;
      v26 = v24 >= 0 ? *((unsigned __int8 *)v21 + 23) : v21[1];
      v27 = v26 >= v20 ? v20 : v26;
      v28 = memcmp(v19, v25, v27);
      if (v28)
        break;
      if (v20 >= v26)
        goto LABEL_30;
LABEL_16:
      v15 = *v16;
      v6 = v16;
      if (!*v16)
        goto LABEL_36;
    }
    if (v28 < 0)
      goto LABEL_16;
LABEL_30:
    v29 = memcmp(v25, v19, v27);
    if (!v29)
      break;
    if ((v29 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_34:
    v15 = v16[1];
    if (!v15)
    {
      v6 = v16 + 1;
      goto LABEL_36;
    }
  }
  if (v26 < v20)
    goto LABEL_34;
LABEL_39:
  if (v32)
  {
    if (v18 < 0)
      operator delete(v17);
    operator delete(v32);
  }
  return (uint64_t *)v16;
}

void sub_223FDB16C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223FDA050((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223FDB180(_QWORD *a1)
{
  *a1 = &off_24EC37778;
  sub_223FDB564((uint64_t)(a1 + 1));
  return a1;
}

void sub_223FDB1B0(_QWORD *a1)
{
  *a1 = &off_24EC37778;
  sub_223FDB564((uint64_t)(a1 + 1));
  JUMPOUT(0x227684CE8);
}

void sub_223FDB1F0(uint64_t a1@<X0>, unsigned int a2@<W1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  std::__shared_weak_count_vtbl *empty;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  xpc_object_t value;
  std::__shared_weak_count *v16;

  empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
  sub_224564184(a3, empty, 0);
  v7 = (uint64_t *)(a1 + 24 * a2);
  v8 = *v7;
  v9 = v7[1];
  if (*v7 != v9)
  {
    do
    {
      v10 = *(const char **)(*(_QWORD *)v8 + 8);
      (*(void (**)(xpc_object_t *__return_ptr))(**(_QWORD **)v8 + 16))(&value);
      v11 = *a3;
      if (!*a3)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v11 = *a3;
      }
      xpc_dictionary_set_value(v11, v10, value);
      v12 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v8 += 8;
    }
    while (v8 != v9);
  }
}

void sub_223FDB320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_223167354((uint64_t)&a9);
  sub_223167354(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_223FDB35C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_223FDB38C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FDB3CC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_223FDB3FC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  JUMPOUT(0x227684CE8);
}

std::__shared_weak_count_vtbl **sub_223FDB440@<X0>(uint64_t a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::mutex *v4;
  double v5;
  std::__shared_weak_count_vtbl *v6;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 96))
  {
    v5 = *(double *)(a1 + 88) / *(double *)(a1 + 104);
    std::mutex::unlock(v4);
    v6 = (std::__shared_weak_count_vtbl *)xpc_double_create(v5);
  }
  else
  {
    std::mutex::unlock(v4);
    v6 = (std::__shared_weak_count_vtbl *)xpc_null_create();
  }
  return sub_22340E890(a2, v6, 0);
}

void sub_223FDB4BC(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 112))
  {
    if (*(_BYTE *)(a1 + 96))
      *(_BYTE *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
  }
  std::mutex::unlock(v2);
}

void sub_223FDB500(uint64_t a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::mutex *v4;
  std::__shared_weak_count_vtbl *v5;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = (std::__shared_weak_count_vtbl *)xpc_BOOL_create(*(_BYTE *)(a1 + 88));
  sub_22340E890(a2, v5, 0);
  std::mutex::unlock(v4);
}

void sub_223FDB550(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223FDB564(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)(a1 + 9008) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 9032));
  *(_QWORD *)(a1 + 8896) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 8920));
  *(_QWORD *)(a1 + 8784) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 8808));
  *(_QWORD *)(a1 + 8664) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 8688));
  *(_QWORD *)(a1 + 8544) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 8568));
  *(_QWORD *)(a1 + 8424) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 8448));
  *(_QWORD *)(a1 + 8304) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 8328));
  *(_QWORD *)(a1 + 8184) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 8208));
  *(_QWORD *)(a1 + 8056) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 8080));
  *(_QWORD *)(a1 + 7952) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 7976));
  *(_QWORD *)(a1 + 7824) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 7848));
  *(_QWORD *)(a1 + 7720) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 7744));
  *(_QWORD *)(a1 + 7616) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 7640));
  *(_QWORD *)(a1 + 7496) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 7520));
  *(_QWORD *)(a1 + 7392) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 7416));
  *(_QWORD *)(a1 + 7264) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 7288));
  *(_QWORD *)(a1 + 7136) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 7160));
  *(_QWORD *)(a1 + 7024) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 7048));
  *(_QWORD *)(a1 + 6904) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 6928));
  *(_QWORD *)(a1 + 6800) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 6824));
  *(_QWORD *)(a1 + 6696) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 6720));
  *(_QWORD *)(a1 + 6576) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 6600));
  *(_QWORD *)(a1 + 6472) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 6496));
  *(_QWORD *)(a1 + 6352) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 6376));
  *(_QWORD *)(a1 + 6232) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 6256));
  *(_QWORD *)(a1 + 6112) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 6136));
  *(_QWORD *)(a1 + 5984) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 6008));
  *(_QWORD *)(a1 + 5880) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 5904));
  *(_QWORD *)(a1 + 5776) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 5800));
  *(_QWORD *)(a1 + 5664) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 5688));
  *(_QWORD *)(a1 + 5552) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 5576));
  *(_QWORD *)(a1 + 5448) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 5472));
  *(_QWORD *)(a1 + 5344) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 5368));
  *(_QWORD *)(a1 + 5240) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 5264));
  *(_QWORD *)(a1 + 5136) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 5160));
  *(_QWORD *)(a1 + 5032) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 5056));
  *(_QWORD *)(a1 + 4928) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 4952));
  *(_QWORD *)(a1 + 4824) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 4848));
  *(_QWORD *)(a1 + 4720) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 4744));
  *(_QWORD *)(a1 + 4616) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 4640));
  *(_QWORD *)(a1 + 4512) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 4536));
  *(_QWORD *)(a1 + 4400) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 4424));
  *(_QWORD *)(a1 + 4272) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 4296));
  *(_QWORD *)(a1 + 4144) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 4168));
  *(_QWORD *)(a1 + 4016) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 4040));
  *(_QWORD *)(a1 + 3912) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 3936));
  *(_QWORD *)(a1 + 3808) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 3832));
  *(_QWORD *)(a1 + 3704) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 3728));
  *(_QWORD *)(a1 + 3576) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 3600));
  *(_QWORD *)(a1 + 3472) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 3496));
  *(_QWORD *)(a1 + 3344) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 3368));
  *(_QWORD *)(a1 + 3224) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 3248));
  *(_QWORD *)(a1 + 3104) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 3128));
  *(_QWORD *)(a1 + 2984) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 3008));
  *(_QWORD *)(a1 + 2864) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 2888));
  *(_QWORD *)(a1 + 2760) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 2784));
  *(_QWORD *)(a1 + 2648) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 2672));
  *(_QWORD *)(a1 + 2536) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 2560));
  *(_QWORD *)(a1 + 2432) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 2456));
  *(_QWORD *)(a1 + 2320) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 2344));
  *(_QWORD *)(a1 + 2208) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 2232));
  *(_QWORD *)(a1 + 2104) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 2128));
  *(_QWORD *)(a1 + 1984) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 2008));
  *(_QWORD *)(a1 + 1872) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 1896));
  *(_QWORD *)(a1 + 1760) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 1784));
  *(_QWORD *)(a1 + 1648) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 1672));
  *(_QWORD *)(a1 + 1536) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 1560));
  *(_QWORD *)(a1 + 1408) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 1432));
  *(_QWORD *)(a1 + 1288) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 1312));
  *(_QWORD *)(a1 + 1192) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 1216));
  *(_QWORD *)(a1 + 1080) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 1104));
  *(_QWORD *)(a1 + 968) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 992));
  *(_QWORD *)(a1 + 856) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 880));
  *(_QWORD *)(a1 + 736) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 760));
  *(_QWORD *)(a1 + 616) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 640));
  *(_QWORD *)(a1 + 520) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 544));
  *(_QWORD *)(a1 + 400) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 424));
  *(_QWORD *)(a1 + 280) = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 304));
  std::mutex::~mutex((std::mutex *)(a1 + 144));
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_223FDBA28(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    a1[3] = 0;
  }
  v4 = (_QWORD *)operator new();
  sub_224562A04((uint64_t)v4, "Recon-CoreAnalyticsQueue", 0x100uLL, 2);
  *v4 = &off_24EC7A3E8;
  v4[1] = &unk_24EC7A430;
  a1[4] = &off_24EC7A3A0;
  a1[5] = v4 + 1;
  return a1;
}

void sub_223FDBADC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = v2;
  MEMORY[0x227684CE8](v3, 0x10B3C4045502B94);
  v5 = (_QWORD *)v1[3];
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_223FDBB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15[2];
  uint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  void *__p[2];
  uint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 24))
    return;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_223197FA4(v15, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v15 = *(_OWORD *)a2;
    v16 = *(_QWORD *)(a2 + 16);
  }
  sub_223FDBE68(&v17, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  v19 = a1;
  if (SHIBYTE(v16) < 0)
  {
    sub_223197FA4(__p, v15[0], (unint64_t)v15[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v15;
    v21 = v16;
  }
  sub_223FDBE68(&v22, v17, v18);
  v24 = v19;
  v26 = 0;
  v5 = (char *)operator new(0x38uLL);
  v6 = v5;
  *(_QWORD *)v5 = off_24EC64F98;
  if (SHIBYTE(v21) < 0)
  {
    sub_223197FA4(v5 + 8, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)(v5 + 8) = *(_OWORD *)__p;
    *((_QWORD *)v5 + 3) = v21;
  }
  sub_223FDBE68((_QWORD *)v6 + 4, v22, v23);
  *((_QWORD *)v6 + 6) = v24;
  v26 = v6;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32, v25);
  v7 = v26;
  if (v26 == v25)
  {
    v8 = 4;
    v7 = v25;
    goto LABEL_15;
  }
  if (v26)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  v9 = v23;
  if (!v23)
    goto LABEL_20;
  p_shared_owners = &v23->__shared_owners_;
  do
    v11 = __ldaxr((unint64_t *)p_shared_owners);
  while (__stlxr(v11 - 1, (unint64_t *)p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
LABEL_21:
      v12 = v18;
      if (!v18)
        goto LABEL_28;
      goto LABEL_25;
    }
  }
  else
  {
LABEL_20:
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      goto LABEL_21;
  }
  operator delete(__p[0]);
  v12 = v18;
  if (!v18)
    goto LABEL_28;
LABEL_25:
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_28:
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
    goto LABEL_29;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(v16) < 0)
LABEL_29:
    operator delete(v15[0]);
}

void sub_223FDBD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  void *v22;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  operator delete(v22);
  v24 = a22;
  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (a20 < 0)
    operator delete(__p);
  sub_223236D30((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223FDBE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223FDBE68(_QWORD *a1, void *a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v16;
  std::__shared_weak_count *v17;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_22340E998(&v16, a2);
  v6 = v17;
  *a1 = v16;
  a1[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = v17;
    if (v17)
    {
      v10 = (unint64_t *)&v17->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  if (!a3)
    return a1;
  v12 = (unint64_t *)&a3->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
  std::__shared_weak_count::__release_weak(a3);
  return a1;
}

void sub_223FDBF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223FDBF6C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_24EC64F98;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_223FDBFF8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_24EC64F98;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_10:
      JUMPOUT(0x227684CE8);
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      goto LABEL_10;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_10;
}

char *sub_223FDC088(uint64_t a1)
{
  char *v2;
  char *v3;

  v2 = (char *)operator new(0x38uLL);
  v3 = v2;
  *(_QWORD *)v2 = off_24EC64F98;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_223197FA4(v2 + 8, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
    *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  }
  sub_223FDBE68((_QWORD *)v3 + 4, *(void **)(a1 + 32), *(std::__shared_weak_count **)(a1 + 40));
  *((_QWORD *)v3 + 6) = *(_QWORD *)(a1 + 48);
  return v3;
}

void sub_223FDC10C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223FDC120(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[31] < 0)
    operator delete(*v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223FDC144(uint64_t a1, _QWORD *a2)
{
  _BYTE *v4;
  __int128 v5;
  _QWORD *result;

  *a2 = off_24EC64F98;
  v4 = a2 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_223197FA4(v4, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 8);
    a2[3] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)v4 = v5;
  }
  result = sub_223FDBE68(a2 + 4, *(void **)(a1 + 32), *(std::__shared_weak_count **)(a1 + 40));
  a2[6] = *(_QWORD *)(a1 + 48);
  return result;
}

void sub_223FDC1BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_223FDC1D8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(*(void **)(a1 + 8));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 31) < 0)
    goto LABEL_8;
}

void sub_223FDC24C(char *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 5);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((__p[31] & 0x80000000) == 0)
        goto LABEL_6;
LABEL_9:
      operator delete(*((void **)__p + 1));
      operator delete(__p);
      return;
    }
  }
  if (__p[31] < 0)
    goto LABEL_9;
LABEL_6:
  operator delete(__p);
}

void sub_223FDC2CC(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__dst[2];
  unint64_t v11;

  v2 = *(_QWORD *)(a1 + 48);
  if (*(char *)(a1 + 31) >= 0)
    v3 = (const char *)(a1 + 8);
  else
    v3 = *(const char **)(a1 + 8);
  v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v11 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_11;
  }
  HIBYTE(v11) = v4;
  v6 = __dst;
  if (v4)
LABEL_11:
    memmove(v6, v3, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  v9 = *(_QWORD *)(v2 + 24);
  if (!v9)
    sub_223198474();
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v9 + 48))(v9, __dst, a1 + 32);
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

uint64_t sub_223FDC3E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon14core_analytics23CoreAnalyticsDispatcher17DispatchSendEventERKNSt3__112basic_stringIc"
                     "NS3_11char_traitsIcEENS3_9allocatorIcEEEERKNS_3kit3xpc13DictionaryRefEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon14core_analytics23CoreAnalyticsDispatcher17DispatchSendEventERKNSt3__112bas"
                                "ic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKNS_3kit3xpc13DictionaryRefEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon14core_analytics23CoreAnalyticsDispatcher17DispatchSendEventERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKNS_3kit3xpc13DictionaryRefEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon14core_analytics23CoreAnalyticsDispatcher17DispatchSendEventERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKNS_3kit3xpc13DictionaryRefEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223FDC454()
{
  return &unk_24EC64FF8;
}

void sub_223FDC464()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FDC478(uint64_t a1, std::string *a2, uint64_t a3, _QWORD *a4)
{
  std::string *v7;
  std::string::size_type v8;
  std::string::size_type size;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::string __p;
  std::string v15;
  std::string __dst;

  *(_QWORD *)a1 = off_24EC65018;
  v7 = (std::string *)(a1 + 8);
  if (a2[1].__r_.__value_.__s.__data_[0])
  {
    memset(&v15, 0, sizeof(v15));
    v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    size = a2->__r_.__value_.__l.__size_;
    if ((v8 & 0x80u) != 0)
    {
      a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
      v8 = size;
    }
    sub_2231816F0(&v15, a2, (std::string *)((char *)a2 + v8));
    memset(&__p, 0, sizeof(__p));
    sub_2231816F0(&__p, (std::string *)"failure_snapshots", (std::string *)"");
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&__dst, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    else
      __dst = v15;
    sub_22319C30C((uint64_t)&__dst, (std::__fs::filesystem::path *)&__p);
    *v7 = __dst;
    memset(&__dst, 0, sizeof(__dst));
    *(_BYTE *)(a1 + 32) = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_11:
        *(_QWORD *)(a1 + 40) = a3;
        *(_QWORD *)(a1 + 48) = *a4;
        v10 = a4[1];
        *(_QWORD *)(a1 + 56) = v10;
        if (!v10)
          goto LABEL_14;
        goto LABEL_12;
      }
    }
    else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v15.__r_.__value_.__l.__data_);
    *(_QWORD *)(a1 + 40) = a3;
    *(_QWORD *)(a1 + 48) = *a4;
    v10 = a4[1];
    *(_QWORD *)(a1 + 56) = v10;
    if (!v10)
      goto LABEL_14;
  }
  else
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = a3;
    *(_QWORD *)(a1 + 48) = *a4;
    v10 = a4[1];
    *(_QWORD *)(a1 + 56) = v10;
    if (!v10)
      goto LABEL_14;
  }
LABEL_12:
  v11 = (unint64_t *)(v10 + 8);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_14:
  *(_DWORD *)(a1 + 64) = 65792;
  return a1;
}

void sub_223FDC604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (a20 < 0)
    {
LABEL_6:
      operator delete(a15);
      _Unwind_Resume(exception_object);
    }
  }
  else if (a20 < 0)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(exception_object);
}

void sub_223FDC67C(uint64_t a1)
{
  unsigned __int8 v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  const char *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  std::string::size_type *p_size;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *p_p;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  std::string::size_type v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::string::size_type v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  const char *v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  const char *v72;
  size_t v73;
  std::string::size_type *v74;
  unint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  size_t v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  std::string::size_type v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::string::size_type v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  void *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  size_t v128;
  const char *v129;
  unsigned __int8 v130;
  const char *v131;
  size_t v132;
  std::string::size_type *v133;
  unint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  void **v141;
  uint64_t v142;
  uint64_t v143;
  NSObject *v144;
  size_t v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  std::string::size_type v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  std::string::size_type v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  void *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  unint64_t v191;
  signed __int128 v192;
  std::__fs::filesystem::path::__string_view v193;
  std::string *p_dst;
  void *v195;
  int v196;
  std::basic_string_view<_CharT, _Traits>::size_type v197;
  std::basic_string_view<_CharT, _Traits>::size_type v198;
  uint64_t i;
  void **size;
  std::string::size_type v201;
  int64_t v202;
  int v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  size_t v207;
  const char *v208;
  unsigned __int8 v209;
  const char *v210;
  size_t v211;
  std::string::size_type *v212;
  unint64_t v213;
  const char *v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  void **v219;
  uint64_t v220;
  uint64_t v221;
  NSObject *v222;
  uint64_t v223;
  size_t v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  unint64_t v230;
  std::string::size_type v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  std::string::size_type v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  void *v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__fs::filesystem::filesystem_error *exception;
  _OWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269[10];
  void *v270[2];
  uint64_t v271;
  std::string object;
  __int128 v273;
  void *__p;
  const char *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  int64x2_t v278;
  std::__fs::filesystem::path v279;
  std::string __dst;
  __int128 v281;
  void **v282;
  const char *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  uint64_t v286;
  std::error_code v287;

  v286 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CEA90);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEA90))
  {
    sub_22455F53C(&__dst);
    sub_223174DE4(&object, "cv3dapi.recon3d");
    sub_2232300E0((uint64_t **)&__dst, (uint64_t)&object, &qword_2540CEA88);
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      operator delete(object.__r_.__value_.__l.__data_);
    __cxa_guard_release(&qword_2540CEA90);
  }
  v278.i64[0] = qword_2540CEA88;
  if (**(int **)(qword_2540CEA88 + 56) > 3
    || ((v3 = *(unsigned __int8 *)(qword_2540CEA88 + 72),
         v4 = sub_22322F254(qword_2540CEA88, "OSLogSurrogateAppender", 1, 0),
         v5 = v4,
         !v3)
      ? (v6 = v4 == 0)
      : (v6 = 0),
        v6))
  {
LABEL_94:
    if (*(_BYTE *)(a1 + 64))
      return;
    goto LABEL_97;
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
  __dst.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  __dst.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v281) = 3;
  *((_QWORD *)&v281 + 1) = "unknown file";
  LODWORD(v282) = 61;
  v284 = 0;
  v285 = 0;
  v283 = "unknown function";
  v7 = *(_QWORD *)__dst.__r_.__value_.__l.__data_;
  v8 = *(_QWORD *)__dst.__r_.__value_.__l.__data_ + 16;
  if (*(char *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v10 = *(const char **)(v7 + 16);
    v9 = *(_QWORD *)(v7 + 24);
    v262 = a1;
    v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v12 & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    v9 = *(unsigned __int8 *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 39);
    v10 = (const char *)(v7 + 16);
    v262 = a1;
    v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v11 & 1) != 0)
      goto LABEL_11;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&object);
    sub_223199C58("com.apple.cv3d", (unint64_t)&object, byte_255788F40);
    if ((_BYTE)v273 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      operator delete(object.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_11:
  if (byte_255788F40[23] >= 0)
    v13 = byte_255788F40;
  else
    v13 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v14 = byte_255788F40[23];
  else
    v14 = *(_QWORD *)&byte_255788F40[8];
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v13, v10);
  p_size = &object.__r_.__value_.__l.__size_;
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v14 >= 0x17)
  {
    v16 = v5;
    v17 = v10;
    v18 = v7;
    v19 = v7 + 16;
    v20 = v3;
    v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v21 = v14 | 7;
    v22 = v21 + 1;
    p_size = (std::string::size_type *)operator new(v21 + 1);
    object.__r_.__value_.__r.__words[2] = v14;
    *(_QWORD *)&v273 = v22 | 0x8000000000000000;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
    v3 = v20;
    v8 = v19;
    v7 = v18;
    v10 = v17;
    v5 = v16;
    goto LABEL_24;
  }
  BYTE7(v273) = v14;
  if (v14)
LABEL_24:
    memmove(p_size, v13, v14);
  *((_BYTE *)p_size + v14) = 0;
  BYTE8(v273) = 1;
  p_p = &__p;
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v9 >= 0x17)
  {
    v25 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v25 = v9 | 7;
    v26 = v25 + 1;
    p_p = operator new(v25 + 1);
    v275 = (const char *)v9;
    v276 = v26 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v276) = v9;
    if (!v9)
    {
      LOBYTE(__p) = 0;
      LOBYTE(v277) = 1;
      v24 = object.__r_.__value_.__r.__words[0];
      if ((SHIBYTE(v276) & 0x80000000) == 0)
        goto LABEL_29;
      goto LABEL_35;
    }
  }
  memmove(p_p, v10, v9);
  *((_BYTE *)p_p + v9) = 0;
  LOBYTE(v277) = 1;
  v24 = object.__r_.__value_.__r.__words[0];
  if ((SHIBYTE(v276) & 0x80000000) == 0)
  {
LABEL_29:
    a1 = v262;
    if (!BYTE8(v273))
      goto LABEL_38;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(__p);
  a1 = v262;
  if (!BYTE8(v273))
    goto LABEL_38;
LABEL_36:
  if (SBYTE7(v273) < 0)
    operator delete((void *)object.__r_.__value_.__l.__size_);
LABEL_38:
  if (object.__r_.__value_.__r.__words[0])
    os_release(object.__r_.__value_.__l.__data_);
  if (v5 && *(_QWORD *)(v5 + 24))
  {
    v27 = _os_log_pack_size();
    v28 = (std::__shared_weak_count_vtbl *)operator new(v27, (std::align_val_t)8uLL);
    v29 = (std::__shared_weak_count *)operator new();
    v30 = v29;
    v29->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v29->__shared_weak_owners_ = 0;
    v29[1].__vftable = v28;
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
    object.__r_.__value_.__r.__words[2] = (std::string::size_type)v29;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    v273 = 0uLL;
    __p = 0;
    a1 = v262;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v30);
    }
    v34 = object.__r_.__value_.__r.__words[0];
    *(_WORD *)_os_log_pack_fill() = 0;
    v35 = operator new();
    v36 = *(unsigned __int8 *)(v7 + 39);
    if ((v36 & 0x80u) == 0)
      v37 = v8;
    else
      v37 = *(_QWORD *)(v7 + 16);
    if ((v36 & 0x80u) != 0)
      v36 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)v35 = v34;
    *(_OWORD *)(v35 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
    *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)(v35 + 24) = v273;
    v273 = 0uLL;
    *(_QWORD *)(v35 + 40) = v37;
    *(_QWORD *)(v35 + 48) = v36;
    *(_BYTE *)(v35 + 56) = 1;
    v279.__pn_.__r_.__value_.__r.__words[0] = 0;
    v269[0] = v35;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), v269);
    v38 = v269[0];
    v269[0] = 0;
    if (v38)
    {
      v39 = *(std::__shared_weak_count **)(v38 + 32);
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(std::__shared_weak_count **)(v38 + 16);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      MEMORY[0x227684CE8](v38, 0x10F0C40B62ED6C6);
      v45 = v279.__pn_.__r_.__value_.__r.__words[0];
      v279.__pn_.__r_.__value_.__r.__words[0] = 0;
      if (v45)
      {
        v46 = *(std::__shared_weak_count **)(v45 + 32);
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v49 = *(std::__shared_weak_count **)(v45 + 16);
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        MEMORY[0x227684CE8](v45, 0x10F0C40B62ED6C6);
      }
    }
    v52 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
    if (*((_QWORD *)&v273 + 1))
    {
      v53 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
    if (object.__r_.__value_.__r.__words[2])
    {
      v56 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }
  else
  {
    os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
    LOWORD(object.__r_.__value_.__l.__data_) = 0;
    v58 = (void *)_os_log_send_and_compose_impl();
    if (v58)
      free(v58);
  }
  if (v3)
  {
    sub_22322C138((uint64_t)&__dst, "FailureSnapshot: CacheThrottlingSuggestions");
    sub_223182C08((uint64_t)&__dst);
  }
  sub_223182C08((uint64_t)&__dst);
  v59 = v285;
  if (!v285)
    goto LABEL_94;
  v60 = (unint64_t *)&v285->__shared_owners_;
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 - 1, v60));
  if (v61)
    goto LABEL_94;
  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
  std::__shared_weak_count::__release_weak(v59);
  if (*(_BYTE *)(a1 + 64))
    return;
LABEL_97:
  sub_223FDEEB4(&v278);
  if (**(int **)(v278.i64[0] + 56) > 3)
    goto LABEL_190;
  v62 = *(unsigned __int8 *)(v278.i64[0] + 72);
  v63 = sub_22322F254(v278.i64[0], "OSLogSurrogateAppender", 1, 0);
  v64 = v63;
  if (!v62 && v63 == 0)
    goto LABEL_190;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
  __dst.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  __dst.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v281) = 3;
  *((_QWORD *)&v281 + 1) = "unknown file";
  LODWORD(v282) = 65;
  v284 = 0;
  v285 = 0;
  v283 = "unknown function";
  v66 = *(_QWORD *)__dst.__r_.__value_.__l.__data_;
  v67 = *(_QWORD *)__dst.__r_.__value_.__l.__data_ + 16;
  if (*(char *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v69 = *(const char **)(v66 + 16);
    v68 = *(_QWORD *)(v66 + 24);
    v263 = a1;
    v71 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v71 & 1) != 0)
      goto LABEL_106;
  }
  else
  {
    v68 = *(unsigned __int8 *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 39);
    v69 = (const char *)(v66 + 16);
    v263 = a1;
    v70 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v70 & 1) != 0)
      goto LABEL_106;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&object);
    sub_223199C58("com.apple.cv3d", (unint64_t)&object, byte_255788F40);
    if ((_BYTE)v273 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      operator delete(object.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_106:
  if (byte_255788F40[23] >= 0)
    v72 = byte_255788F40;
  else
    v72 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v73 = byte_255788F40[23];
  else
    v73 = *(_QWORD *)&byte_255788F40[8];
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v72, v69);
  v74 = &object.__r_.__value_.__l.__size_;
  if (v73 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v73 >= 0x17)
  {
    v75 = v64;
    v76 = v69;
    v77 = v66;
    v78 = v66 + 16;
    v79 = v62;
    v80 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v73 | 7) != 0x17)
      v80 = v73 | 7;
    v81 = v80 + 1;
    v74 = (std::string::size_type *)operator new(v80 + 1);
    object.__r_.__value_.__r.__words[2] = v73;
    *(_QWORD *)&v273 = v81 | 0x8000000000000000;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)v74;
    v62 = v79;
    v67 = v78;
    v66 = v77;
    v69 = v76;
    v64 = v75;
    goto LABEL_119;
  }
  BYTE7(v273) = v73;
  if (v73)
LABEL_119:
    memmove(v74, v72, v73);
  *((_BYTE *)v74 + v73) = 0;
  BYTE8(v273) = 1;
  v82 = &__p;
  if (v68 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v68 >= 0x17)
  {
    v83 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v68 | 7) != 0x17)
      v83 = v68 | 7;
    v84 = v83 + 1;
    v82 = operator new(v83 + 1);
    v275 = (const char *)v68;
    v276 = v84 | 0x8000000000000000;
    __p = v82;
  }
  else
  {
    HIBYTE(v276) = v68;
    if (!v68)
      goto LABEL_128;
  }
  memmove(v82, v69, v68);
LABEL_128:
  *((_BYTE *)v82 + v68) = 0;
  LOBYTE(v277) = 1;
  v85 = object.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v276) < 0)
    operator delete(__p);
  a1 = v263;
  if (BYTE8(v273) && SBYTE7(v273) < 0)
    operator delete((void *)object.__r_.__value_.__l.__size_);
  if (object.__r_.__value_.__r.__words[0])
    os_release(object.__r_.__value_.__l.__data_);
  if (v64 && *(_QWORD *)(v64 + 24))
  {
    v86 = _os_log_pack_size();
    v87 = (std::__shared_weak_count_vtbl *)operator new(v86, (std::align_val_t)8uLL);
    v88 = (std::__shared_weak_count *)operator new();
    v89 = v88;
    v88->__shared_owners_ = 0;
    v90 = (unint64_t *)&v88->__shared_owners_;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v87;
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)v87;
    object.__r_.__value_.__r.__words[2] = (std::string::size_type)v88;
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
    v273 = 0uLL;
    __p = 0;
    a1 = v263;
    do
      v92 = __ldaxr(v90);
    while (__stlxr(v92 - 1, v90));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v89);
    }
    v93 = object.__r_.__value_.__r.__words[0];
    *(_WORD *)_os_log_pack_fill() = 0;
    v94 = operator new();
    v95 = *(unsigned __int8 *)(v66 + 39);
    if ((v95 & 0x80u) == 0)
      v96 = v67;
    else
      v96 = *(_QWORD *)(v66 + 16);
    if ((v95 & 0x80u) != 0)
      v95 = *(_QWORD *)(v66 + 24);
    *(_QWORD *)v94 = v93;
    *(_OWORD *)(v94 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
    *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)(v94 + 24) = v273;
    v273 = 0uLL;
    *(_QWORD *)(v94 + 40) = v96;
    *(_QWORD *)(v94 + 48) = v95;
    *(_BYTE *)(v94 + 56) = 1;
    v279.__pn_.__r_.__value_.__r.__words[0] = 0;
    v269[0] = v94;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v64 + 24) + 40))(*(_QWORD *)(v64 + 24), v269);
    v97 = v269[0];
    v269[0] = 0;
    if (v97)
    {
      v98 = *(std::__shared_weak_count **)(v97 + 32);
      if (v98)
      {
        v99 = (unint64_t *)&v98->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      v101 = *(std::__shared_weak_count **)(v97 + 16);
      if (v101)
      {
        v102 = (unint64_t *)&v101->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      MEMORY[0x227684CE8](v97, 0x10F0C40B62ED6C6);
      v104 = v279.__pn_.__r_.__value_.__r.__words[0];
      v279.__pn_.__r_.__value_.__r.__words[0] = 0;
      if (v104)
      {
        v105 = *(std::__shared_weak_count **)(v104 + 32);
        if (v105)
        {
          v106 = (unint64_t *)&v105->__shared_owners_;
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        v108 = *(std::__shared_weak_count **)(v104 + 16);
        if (v108)
        {
          v109 = (unint64_t *)&v108->__shared_owners_;
          do
            v110 = __ldaxr(v109);
          while (__stlxr(v110 - 1, v109));
          if (!v110)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        MEMORY[0x227684CE8](v104, 0x10F0C40B62ED6C6);
      }
    }
    v111 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
    if (*((_QWORD *)&v273 + 1))
    {
      v112 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
    v114 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
    if (object.__r_.__value_.__r.__words[2])
    {
      v115 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
  }
  else
  {
    os_log_type_enabled(v85, OS_LOG_TYPE_INFO);
    LOWORD(object.__r_.__value_.__l.__data_) = 0;
    v117 = (void *)_os_log_send_and_compose_impl();
    if (v117)
      free(v117);
  }
  if (v62)
  {
    sub_22322C138((uint64_t)&__dst, "FailureSnapshot: CacheThrottlingSuggestions - not cached");
    sub_223182C08((uint64_t)&__dst);
  }
  sub_223182C08((uint64_t)&__dst);
  v118 = v285;
  if (v285)
  {
    v119 = (unint64_t *)&v285->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
LABEL_190:
  *(_WORD *)(a1 + 65) = 257;
  if (!*(_BYTE *)(a1 + 32))
  {
    *(_BYTE *)(a1 + 64) = 1;
    return;
  }
  v121 = *(_QWORD *)(a1 + 40);
  v264 = a1;
  v261 = (_OWORD *)(a1 + 8);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v121 + 176))(v121, a1 + 8) & 1) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v121 + 112))(v121, a1 + 8) & 1) == 0)
  {
    exception = (std::__fs::filesystem::filesystem_error *)__cxa_allocate_exception(0x30uLL);
    sub_223174DE4(&object, "FailureSnapshot: Failed to create root dir");
    v287.__cat_ = std::generic_category();
    *(_QWORD *)&v287.__val_ = 2;
    sub_2236E6644(exception, &object, (uint64_t)v261, v287);
    __cxa_throw(exception, MEMORY[0x24BEDB708], MEMORY[0x24BEDB268]);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  if (!*(_BYTE *)(a1 + 32))
    sub_22324A974();
  memset(&__dst, 0, sizeof(__dst));
  sub_2231816F0(&__dst, (std::string *)".snapshot_throttle", (std::string *)"");
  v122 = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_223197FA4(v270, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)v270 = *v261;
    v271 = *(_QWORD *)(a1 + 24);
  }
  sub_22319C30C((uint64_t)v270, (std::__fs::filesystem::path *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (!(*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 176))(v121, v270))
  {
    v123 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_205;
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v121 + 208))(v121, v270);
  v123 = __divti3();
  if (v123 > 24)
  {
LABEL_205:
    *(_BYTE *)(a1 + 65) = 0;
    goto LABEL_206;
  }
  if (*(_BYTE *)(a1 + 65))
    goto LABEL_294;
LABEL_206:
  sub_223FDEEB4(v269);
  if (**(int **)(v269[0] + 56) > 3)
    goto LABEL_294;
  v124 = *(unsigned __int8 *)(v269[0] + 72);
  v125 = sub_22322F254(v269[0], "OSLogSurrogateAppender", 1, 0);
  v126 = v125;
  if (!v124 && !v125)
    goto LABEL_294;
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v269;
  object.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  object.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v273) = 3;
  *((_QWORD *)&v273 + 1) = "unknown file";
  LODWORD(__p) = 107;
  v276 = 0;
  v277 = 0;
  v275 = "unknown function";
  v127 = *(_QWORD *)object.__r_.__value_.__l.__data_;
  if (*(char *)(*(_QWORD *)object.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v129 = *(const char **)(v127 + 16);
    v128 = *(_QWORD *)(v127 + 24);
  }
  else
  {
    v128 = *(unsigned __int8 *)(*(_QWORD *)object.__r_.__value_.__l.__data_ + 39);
    v129 = (const char *)(*(_QWORD *)object.__r_.__value_.__l.__data_ + 16);
  }
  v266 = *(_QWORD *)object.__r_.__value_.__l.__data_ + 16;
  v130 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v130 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&__dst);
    sub_223199C58("com.apple.cv3d", (unint64_t)&__dst, byte_255788F40);
    if ((_BYTE)v281 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F40[23] >= 0)
    v131 = byte_255788F40;
  else
    v131 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v132 = byte_255788F40[23];
  else
    v132 = *(_QWORD *)&byte_255788F40[8];
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v131, v129);
  v133 = &__dst.__r_.__value_.__l.__size_;
  if (v132 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v132 >= 0x17)
  {
    v134 = v126;
    v135 = v129;
    v136 = v127;
    v137 = v123;
    v138 = v124;
    v139 = (v132 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v132 | 7) != 0x17)
      v139 = v132 | 7;
    v140 = v139 + 1;
    v133 = (std::string::size_type *)operator new(v139 + 1);
    __dst.__r_.__value_.__r.__words[2] = v132;
    *(_QWORD *)&v281 = v140 | 0x8000000000000000;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v133;
    v124 = v138;
    v123 = v137;
    v127 = v136;
    v129 = v135;
    v126 = v134;
    goto LABEL_226;
  }
  BYTE7(v281) = v132;
  if (v132)
LABEL_226:
    memmove(v133, v131, v132);
  *((_BYTE *)v133 + v132) = 0;
  BYTE8(v281) = 1;
  v141 = (void **)&v282;
  if (v128 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v128 >= 0x17)
  {
    v142 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v128 | 7) != 0x17)
      v142 = v128 | 7;
    v143 = v142 + 1;
    v141 = (void **)operator new(v142 + 1);
    v283 = (const char *)v128;
    v284 = v143 | 0x8000000000000000;
    v282 = v141;
  }
  else
  {
    HIBYTE(v284) = v128;
    if (!v128)
      goto LABEL_235;
  }
  memmove(v141, v129, v128);
LABEL_235:
  *((_BYTE *)v141 + v128) = 0;
  LOBYTE(v285) = 1;
  v144 = __dst.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v284) < 0)
    operator delete(v282);
  if (BYTE8(v281) && SBYTE7(v281) < 0)
    operator delete((void *)__dst.__r_.__value_.__l.__size_);
  if (__dst.__r_.__value_.__r.__words[0])
    os_release(__dst.__r_.__value_.__l.__data_);
  if (v126 && *(_QWORD *)(v126 + 24))
  {
    v145 = _os_log_pack_size();
    v146 = (std::__shared_weak_count_vtbl *)operator new(v145, (std::align_val_t)8uLL);
    v147 = (std::__shared_weak_count *)operator new();
    v148 = v147;
    v147->__shared_owners_ = 0;
    v149 = (unint64_t *)&v147->__shared_owners_;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v146;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v146;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v146;
    __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v147;
    do
      v150 = __ldxr(v149);
    while (__stxr(v150 + 1, v149));
    v281 = 0uLL;
    v282 = 0;
    do
      v151 = __ldaxr(v149);
    while (__stlxr(v151 - 1, v149));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v148);
    }
    v152 = __dst.__r_.__value_.__r.__words[0];
    v153 = _os_log_pack_fill();
    *(_DWORD *)v153 = 134217984;
    *(_QWORD *)(v153 + 4) = v123;
    v154 = operator new();
    v155 = *(unsigned __int8 *)(v127 + 39);
    v156 = v266;
    if ((v155 & 0x80u) != 0)
    {
      v156 = *(_QWORD *)(v127 + 16);
      v155 = *(_QWORD *)(v127 + 24);
    }
    *(_QWORD *)v154 = v152;
    *(_OWORD *)(v154 + 8) = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)(v154 + 24) = v281;
    v281 = 0uLL;
    *(_QWORD *)(v154 + 40) = v156;
    *(_QWORD *)(v154 + 48) = v155;
    *(_BYTE *)(v154 + 56) = 1;
    v278.i64[0] = 0;
    v279.__pn_.__r_.__value_.__r.__words[0] = v154;
    (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v126 + 24) + 40))(*(_QWORD *)(v126 + 24), &v279);
    v157 = v279.__pn_.__r_.__value_.__r.__words[0];
    v279.__pn_.__r_.__value_.__r.__words[0] = 0;
    v122 = (uint64_t)v261;
    if (v157)
    {
      v158 = *(std::__shared_weak_count **)(v157 + 32);
      if (v158)
      {
        v159 = (unint64_t *)&v158->__shared_owners_;
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
          std::__shared_weak_count::__release_weak(v158);
        }
      }
      v161 = *(std::__shared_weak_count **)(v157 + 16);
      if (v161)
      {
        v162 = (unint64_t *)&v161->__shared_owners_;
        do
          v163 = __ldaxr(v162);
        while (__stlxr(v163 - 1, v162));
        if (!v163)
        {
          ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
          std::__shared_weak_count::__release_weak(v161);
        }
      }
      MEMORY[0x227684CE8](v157, 0x10F0C40B62ED6C6);
      v164 = v278.i64[0];
      v278.i64[0] = 0;
      if (v164)
      {
        v165 = *(std::__shared_weak_count **)(v164 + 32);
        if (v165)
        {
          v166 = (unint64_t *)&v165->__shared_owners_;
          do
            v167 = __ldaxr(v166);
          while (__stlxr(v167 - 1, v166));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
            std::__shared_weak_count::__release_weak(v165);
          }
        }
        v168 = *(std::__shared_weak_count **)(v164 + 16);
        if (v168)
        {
          v169 = (unint64_t *)&v168->__shared_owners_;
          do
            v170 = __ldaxr(v169);
          while (__stlxr(v170 - 1, v169));
          if (!v170)
          {
            ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
            std::__shared_weak_count::__release_weak(v168);
          }
        }
        MEMORY[0x227684CE8](v164, 0x10F0C40B62ED6C6);
      }
    }
    v171 = (std::__shared_weak_count *)*((_QWORD *)&v281 + 1);
    a1 = v264;
    if (*((_QWORD *)&v281 + 1))
    {
      v172 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
      do
        v173 = __ldaxr(v172);
      while (__stlxr(v173 - 1, v172));
      if (!v173)
      {
        ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
        std::__shared_weak_count::__release_weak(v171);
      }
    }
    v174 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
    if (__dst.__r_.__value_.__r.__words[2])
    {
      v175 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
      do
        v176 = __ldaxr(v175);
      while (__stlxr(v176 - 1, v175));
      if (!v176)
      {
        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
        std::__shared_weak_count::__release_weak(v174);
      }
    }
  }
  else
  {
    os_log_type_enabled(v144, OS_LOG_TYPE_INFO);
    LODWORD(__dst.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = v123;
    v177 = (void *)_os_log_send_and_compose_impl();
    v122 = (uint64_t)v261;
    a1 = v264;
    if (v177)
      free(v177);
  }
  if (v124)
  {
    sub_22322C138((uint64_t)&object, "FailureSnapshot: TF won't throttle; last shapshot %zu hours ago", v123);
    sub_223182C08((uint64_t)&object);
  }
  sub_223182C08((uint64_t)&object);
  v178 = v277;
  if (v277)
  {
    v179 = (unint64_t *)&v277->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
LABEL_294:
  if (!*(_BYTE *)(a1 + 32))
    goto LABEL_347;
  v181 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  v265 = v182;
  v267 = v181;
  sub_2242B1564(v122, 2u, "*", 1uLL, *(_QWORD *)(a1 + 40), &v278);
  v183 = v278.i64[1];
  v184 = v278.i64[0];
  if (v278.i64[0] != v278.i64[1])
  {
    v185 = v278.i64[0];
    while (!sub_223FE0A64((const std::__fs::filesystem::path *)v185))
    {
      v185 += 24;
      if (v185 == v183)
        goto LABEL_315;
    }
    if (v185 != v183)
    {
      v186 = v185 + 24;
      if (v185 + 24 != v183)
      {
        do
        {
          if (!sub_223FE0A64((const std::__fs::filesystem::path *)v186))
          {
            if (*(char *)(v185 + 23) < 0)
              operator delete(*(void **)v185);
            v187 = *(_OWORD *)v186;
            *(_QWORD *)(v185 + 16) = *(_QWORD *)(v186 + 16);
            *(_OWORD *)v185 = v187;
            v185 += 24;
            *(_BYTE *)(v186 + 23) = 0;
            *(_BYTE *)v186 = 0;
          }
          v186 += 24;
        }
        while (v186 != v183);
        v183 = v278.i64[1];
        v184 = v278.i64[0];
      }
    }
    if (v185 == v183)
    {
LABEL_315:
      v185 = v183;
      if (v184 == v183)
        goto LABEL_337;
    }
    else
    {
      while (v183 != v185)
      {
        if (*(char *)(v183 - 1) < 0)
          operator delete(*(void **)(v183 - 24));
        v183 -= 24;
      }
      v278.i64[1] = v185;
      v184 = v278.i64[0];
      if (v278.i64[0] == v185)
      {
LABEL_337:
        v184 = v185;
LABEL_338:
        a1 = v264;
        goto LABEL_339;
      }
    }
    v188 = *(_QWORD *)(v264 + 40);
    while (1)
    {
      if (*(char *)(v184 + 23) < 0)
      {
        sub_223197FA4(&v279, *(void **)v184, *(_QWORD *)(v184 + 8));
      }
      else
      {
        v189 = *(_OWORD *)v184;
        v279.__pn_.__r_.__value_.__r.__words[2] = *(_QWORD *)(v184 + 16);
        *(_OWORD *)&v279.__pn_.__r_.__value_.__l.__data_ = v189;
      }
      v190 = (*(uint64_t (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)v188 + 208))(v188, &v279);
      v192 = __PAIR128__(v265, v267) - __PAIR128__(v191, v190);
      v193 = std::__fs::filesystem::path::__filename(&v279);
      if (v193.__size_ > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v193.__size_ >= 0x17)
      {
        v197 = (v193.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v193.__size_ | 7) != 0x17)
          v197 = v193.__size_ | 7;
        v198 = v197 + 1;
        p_dst = (std::string *)operator new(v197 + 1);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        __dst.__r_.__value_.__r.__words[2] = v198 | 0x8000000000000000;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v193.__size_;
        p_dst = &__dst;
        if (!v193.__size_)
        {
          __dst.__r_.__value_.__s.__data_[0] = 0;
          v195 = (void *)__dst.__r_.__value_.__r.__words[0];
          v196 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if (v192 < 0x44C1FF2520001)
            goto LABEL_332;
LABEL_331:
          (*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)v188 + 240))(v188, &v279);
          goto LABEL_332;
        }
      }
      memmove(p_dst, v193.__data_, v193.__size_);
      p_dst->__r_.__value_.__s.__data_[v193.__size_] = 0;
      v195 = (void *)__dst.__r_.__value_.__r.__words[0];
      v196 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if (v192 >= 0x44C1FF2520001)
        goto LABEL_331;
LABEL_332:
      if (v196 < 0)
      {
        operator delete(v195);
        if ((SHIBYTE(v279.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_318;
LABEL_334:
        operator delete(v279.__pn_.__r_.__value_.__l.__data_);
        v184 += 24;
        if (v184 == v185)
        {
LABEL_335:
          v184 = v278.i64[0];
          goto LABEL_338;
        }
      }
      else
      {
        if (SHIBYTE(v279.__pn_.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_334;
LABEL_318:
        v184 += 24;
        if (v184 == v185)
          goto LABEL_335;
      }
    }
  }
LABEL_339:
  if (v184)
  {
    for (i = v278.i64[1]; i != v184; i -= 24)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
    v278.i64[1] = v184;
    operator delete((void *)v184);
  }
  v122 = (uint64_t)v261;
LABEL_347:
  sub_2242B0AE8(v122, 2u, "*", 1uLL, *(_QWORD *)(a1 + 40), (uint64_t *)&object);
  size = (void **)object.__r_.__value_.__l.__size_;
  v201 = object.__r_.__value_.__r.__words[0];
  v202 = object.__r_.__value_.__l.__size_ - object.__r_.__value_.__r.__words[0];
  if (object.__r_.__value_.__r.__words[0])
  {
    if (object.__r_.__value_.__l.__size_ != object.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*((char *)size - 9) < 0)
          operator delete(*(size - 4));
        size -= 4;
      }
      while (size != (void **)v201);
      size = (void **)object.__r_.__value_.__r.__words[0];
    }
    object.__r_.__value_.__l.__size_ = v201;
    operator delete(size);
  }
  if ((unint64_t)v202 > 0x13F)
    goto LABEL_444;
  *(_BYTE *)(a1 + 66) = 0;
  sub_223FDEEB4(v269);
  if (**(int **)(v269[0] + 56) > 3)
    goto LABEL_444;
  v203 = *(unsigned __int8 *)(v269[0] + 72);
  v204 = sub_22322F254(v269[0], "OSLogSurrogateAppender", 1, 0);
  v205 = v204;
  if (!v203 && !v204)
    goto LABEL_444;
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v269;
  object.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  object.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v273) = 3;
  *((_QWORD *)&v273 + 1) = "unknown file";
  LODWORD(__p) = 123;
  v276 = 0;
  v277 = 0;
  v275 = "unknown function";
  v206 = *(_QWORD *)object.__r_.__value_.__l.__data_;
  if (*(char *)(*(_QWORD *)object.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v208 = *(const char **)(v206 + 16);
    v207 = *(_QWORD *)(v206 + 24);
  }
  else
  {
    v207 = *(unsigned __int8 *)(*(_QWORD *)object.__r_.__value_.__l.__data_ + 39);
    v208 = (const char *)(*(_QWORD *)object.__r_.__value_.__l.__data_ + 16);
  }
  v268 = *(_QWORD *)object.__r_.__value_.__l.__data_ + 16;
  v209 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v209 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&__dst);
    sub_223199C58("com.apple.cv3d", (unint64_t)&__dst, byte_255788F40);
    if ((_BYTE)v281 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F40[23] >= 0)
    v210 = byte_255788F40;
  else
    v210 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v211 = byte_255788F40[23];
  else
    v211 = *(_QWORD *)&byte_255788F40[8];
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v210, v208);
  v212 = &__dst.__r_.__value_.__l.__size_;
  if (v211 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v211 >= 0x17)
  {
    v213 = v205;
    v214 = v208;
    v215 = v206;
    v216 = v203;
    v217 = (v211 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v211 | 7) != 0x17)
      v217 = v211 | 7;
    v218 = v217 + 1;
    v212 = (std::string::size_type *)operator new(v217 + 1);
    __dst.__r_.__value_.__r.__words[2] = v211;
    *(_QWORD *)&v281 = v218 | 0x8000000000000000;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v212;
    v203 = v216;
    v206 = v215;
    v208 = v214;
    v205 = v213;
    goto LABEL_376;
  }
  BYTE7(v281) = v211;
  if (v211)
LABEL_376:
    memmove(v212, v210, v211);
  *((_BYTE *)v212 + v211) = 0;
  BYTE8(v281) = 1;
  v219 = (void **)&v282;
  if (v207 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v207 >= 0x17)
  {
    v220 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v207 | 7) != 0x17)
      v220 = v207 | 7;
    v221 = v220 + 1;
    v219 = (void **)operator new(v220 + 1);
    v283 = (const char *)v207;
    v284 = v221 | 0x8000000000000000;
    v282 = v219;
  }
  else
  {
    HIBYTE(v284) = v207;
    if (!v207)
      goto LABEL_385;
  }
  memmove(v219, v208, v207);
LABEL_385:
  *((_BYTE *)v219 + v207) = 0;
  LOBYTE(v285) = 1;
  v222 = __dst.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v284) < 0)
    operator delete(v282);
  a1 = v264;
  if (BYTE8(v281) && SBYTE7(v281) < 0)
    operator delete((void *)__dst.__r_.__value_.__l.__size_);
  if (__dst.__r_.__value_.__r.__words[0])
    os_release(__dst.__r_.__value_.__l.__data_);
  v223 = v202 >> 5;
  if (v205 && *(_QWORD *)(v205 + 24))
  {
    v224 = _os_log_pack_size();
    v225 = (std::__shared_weak_count_vtbl *)operator new(v224, (std::align_val_t)8uLL);
    v226 = (std::__shared_weak_count *)operator new();
    v227 = v226;
    v226->__shared_owners_ = 0;
    v228 = (unint64_t *)&v226->__shared_owners_;
    v226->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v226->__shared_weak_owners_ = 0;
    v226[1].__vftable = v225;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v225;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v225;
    __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v226;
    do
      v229 = __ldxr(v228);
    while (__stxr(v229 + 1, v228));
    v281 = 0uLL;
    v282 = 0;
    do
      v230 = __ldaxr(v228);
    while (__stlxr(v230 - 1, v228));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v227);
    }
    v231 = __dst.__r_.__value_.__r.__words[0];
    v232 = _os_log_pack_fill();
    *(_DWORD *)v232 = 134217984;
    *(_QWORD *)(v232 + 4) = v223;
    v233 = operator new();
    v234 = *(unsigned __int8 *)(v206 + 39);
    v235 = v268;
    if ((v234 & 0x80u) != 0)
    {
      v235 = *(_QWORD *)(v206 + 16);
      v234 = *(_QWORD *)(v206 + 24);
    }
    *(_QWORD *)v233 = v231;
    *(_OWORD *)(v233 + 8) = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)(v233 + 24) = v281;
    v281 = 0uLL;
    *(_QWORD *)(v233 + 40) = v235;
    *(_QWORD *)(v233 + 48) = v234;
    *(_BYTE *)(v233 + 56) = 1;
    v278.i64[0] = 0;
    v279.__pn_.__r_.__value_.__r.__words[0] = v233;
    (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v205 + 24) + 40))(*(_QWORD *)(v205 + 24), &v279);
    v236 = v279.__pn_.__r_.__value_.__r.__words[0];
    v279.__pn_.__r_.__value_.__r.__words[0] = 0;
    a1 = v264;
    if (v236)
    {
      v237 = *(std::__shared_weak_count **)(v236 + 32);
      if (v237)
      {
        v238 = (unint64_t *)&v237->__shared_owners_;
        do
          v239 = __ldaxr(v238);
        while (__stlxr(v239 - 1, v238));
        if (!v239)
        {
          ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
          std::__shared_weak_count::__release_weak(v237);
        }
      }
      v240 = *(std::__shared_weak_count **)(v236 + 16);
      if (v240)
      {
        v241 = (unint64_t *)&v240->__shared_owners_;
        do
          v242 = __ldaxr(v241);
        while (__stlxr(v242 - 1, v241));
        if (!v242)
        {
          ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
          std::__shared_weak_count::__release_weak(v240);
        }
      }
      MEMORY[0x227684CE8](v236, 0x10F0C40B62ED6C6);
      v243 = v278.i64[0];
      v278.i64[0] = 0;
      if (v243)
      {
        v244 = *(std::__shared_weak_count **)(v243 + 32);
        if (v244)
        {
          v245 = (unint64_t *)&v244->__shared_owners_;
          do
            v246 = __ldaxr(v245);
          while (__stlxr(v246 - 1, v245));
          if (!v246)
          {
            ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
            std::__shared_weak_count::__release_weak(v244);
          }
        }
        v247 = *(std::__shared_weak_count **)(v243 + 16);
        if (v247)
        {
          v248 = (unint64_t *)&v247->__shared_owners_;
          do
            v249 = __ldaxr(v248);
          while (__stlxr(v249 - 1, v248));
          if (!v249)
          {
            ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
            std::__shared_weak_count::__release_weak(v247);
          }
        }
        MEMORY[0x227684CE8](v243, 0x10F0C40B62ED6C6);
      }
    }
    v250 = (std::__shared_weak_count *)*((_QWORD *)&v281 + 1);
    if (*((_QWORD *)&v281 + 1))
    {
      v251 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
      do
        v252 = __ldaxr(v251);
      while (__stlxr(v252 - 1, v251));
      if (!v252)
      {
        ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
        std::__shared_weak_count::__release_weak(v250);
      }
    }
    v253 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
    if (__dst.__r_.__value_.__r.__words[2])
    {
      v254 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
      do
        v255 = __ldaxr(v254);
      while (__stlxr(v255 - 1, v254));
      if (!v255)
      {
        ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
        std::__shared_weak_count::__release_weak(v253);
      }
    }
  }
  else
  {
    os_log_type_enabled(v222, OS_LOG_TYPE_INFO);
    LODWORD(__dst.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = v202 >> 5;
    v256 = (void *)_os_log_send_and_compose_impl();
    if (v256)
      free(v256);
  }
  if (v203)
  {
    sub_22322C138((uint64_t)&object, "FailureSnapshot: SD won't throttle; num dir entries %zu ", v223);
    sub_223182C08((uint64_t)&object);
  }
  sub_223182C08((uint64_t)&object);
  v257 = v277;
  if (v277)
  {
    v258 = (unint64_t *)&v277->__shared_owners_;
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
LABEL_444:
  *(_BYTE *)(a1 + 64) = 1;
  if (SHIBYTE(v271) < 0)
    operator delete(v270[0]);
}

#error "223FDED84: call analysis failed (funcsize=145)"

void sub_223FDEEB4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CEA90);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEA90))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CEA88);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CEA90);
  }
  *a1 = qword_2540CEA88;
}

void sub_223FDEF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CEA90);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CEA90);
  _Unwind_Resume(a1);
}

BOOL sub_223FDEFA8(_BYTE *a1)
{
  if (a1[65])
    return 0;
  if (a1[66])
    return 0;
  return a1[67] == 0;
}

void sub_223FDEFD8(uint64_t a1, char *a2)
{
  uint64_t v3;
  std::__fs::filesystem::path *v4;
  std::string::size_type v5;
  std::__fs::filesystem::path *v6;
  size_t size;
  unsigned __int8 v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unsigned __int8 v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  void **v67;
  uint64_t v68;
  size_t v69;
  const char *v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  const char *v73;
  size_t v74;
  std::string::size_type *p_size;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  size_t v87;
  void *v88;
  _QWORD *v89;
  size_t v90;
  size_t v91;
  _QWORD *p_dst;
  int v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  char v98;
  _QWORD *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  char *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::string::size_type v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  std::string::size_type v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  _QWORD *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__fs::filesystem::path *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__fs::filesystem::filesystem_error *exception;
  const char *v145;
  uint64_t v146;
  int __src;
  const char *__srca;
  char *__s;
  char *__sa;
  void *v151[2];
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154[3];
  int v155;
  const char *v156;
  int v157;
  const char *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  std::__fs::filesystem::path v161;
  void *object;
  __int128 v163;
  __int128 v164;
  void *__p[2];
  unint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  std::__fs::filesystem::path v170;
  char *v171;
  std::__shared_weak_count *v172;
  _QWORD *__dst;
  __int128 v174;
  std::__fs::filesystem::path v175;
  __int128 v176;
  char *v177;
  const char *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  _QWORD v181[5];
  std::error_code v182;

  v3 = a1;
  v181[2] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 32))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Utils/src/FailureSnapshot.cpp", 157, (uint64_t)"root_path_.has_value()", 22, (uint64_t)"Unexpected snapshot without root path set", 41, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    if (!*(_BYTE *)(v3 + 32))
      sub_22324A974();
  }
  memset(&v175, 0, sizeof(v175));
  sub_2231816F0(&v175.__pn_, (std::string *)".snapshot_throttle", (std::string *)"");
  if (*(char *)(v3 + 31) < 0)
    sub_223197FA4(&v161, *(void **)(v3 + 8), *(_QWORD *)(v3 + 16));
  else
    v161 = *(std::__fs::filesystem::path *)(v3 + 8);
  if (std::__fs::filesystem::path::__root_directory(&v175).__size_)
  {
    if (SHIBYTE(v161.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      if ((v175.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = &v175;
      else
        v6 = (std::__fs::filesystem::path *)v175.__pn_.__r_.__value_.__r.__words[0];
      if ((v175.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v175.__pn_.__r_.__value_.__r.__words[2]);
      else
        size = v175.__pn_.__r_.__value_.__l.__size_;
      sub_22319C4B8((void **)&v161.__pn_.__r_.__value_.__l.__data_, v6, size);
    }
    else if ((*((_BYTE *)&v175.__pn_.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      sub_22319C3F4(&v161, v175.__pn_.__r_.__value_.__l.__data_, v175.__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      v161 = v175;
    }
  }
  else
  {
    if (std::__fs::filesystem::path::__filename(&v161).__size_)
      std::string::push_back(&v161.__pn_, 47);
    if ((v175.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v4 = &v175;
    else
      v4 = (std::__fs::filesystem::path *)v175.__pn_.__r_.__value_.__r.__words[0];
    if ((v175.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = HIBYTE(v175.__pn_.__r_.__value_.__r.__words[2]);
    else
      v5 = v175.__pn_.__r_.__value_.__l.__size_;
    std::string::append(&v161.__pn_, (const std::string::value_type *)v4, v5);
  }
  if (SHIBYTE(v175.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v175.__pn_.__r_.__value_.__l.__data_);
  (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v3 + 40) + 232))(*(_QWORD *)(v3 + 40), &v161);
  if (((*(uint64_t (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v3 + 40) + 112))(*(_QWORD *)(v3 + 40), &v161) & 1) == 0)
  {
    exception = (std::__fs::filesystem::filesystem_error *)__cxa_allocate_exception(0x30uLL);
    sub_223174DE4(&v175, "FailureSnapshot: Failed to create root dir");
    v182.__cat_ = std::generic_category();
    *(_QWORD *)&v182.__val_ = 2;
    sub_2236E6644(exception, &v175.__pn_, (uint64_t)&v161, v182);
    __cxa_throw(exception, MEMORY[0x24BEDB708], MEMORY[0x24BEDB268]);
  }
  v8 = atomic_load((unsigned __int8 *)&qword_2540CEA90);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEA90))
  {
    sub_22455F53C(&object);
    sub_223174DE4(&v175, "cv3dapi.recon3d");
    sub_2232300E0((uint64_t **)&object, (uint64_t)&v175, &qword_2540CEA88);
    if (SHIBYTE(v175.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v175.__pn_.__r_.__value_.__l.__data_);
    __cxa_guard_release(&qword_2540CEA90);
  }
  v154[0] = (uint64_t *)qword_2540CEA88;
  if (**(int **)(qword_2540CEA88 + 56) <= 3)
  {
    v9 = *(unsigned __int8 *)(qword_2540CEA88 + 72);
    v10 = sub_22322F254(qword_2540CEA88, "OSLogSurrogateAppender", 1, 0);
    v11 = v10;
    if (v9 || v10)
    {
      __s = a2;
      v175.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v154;
      v175.__pn_.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v175.__pn_.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v176) = 3;
      *((_QWORD *)&v176 + 1) = "unknown file";
      LODWORD(v177) = 170;
      v179 = 0;
      v180 = 0;
      v178 = "unknown function";
      v12 = *(_QWORD *)v175.__pn_.__r_.__value_.__l.__data_;
      v13 = (const char *)(*(_QWORD *)v175.__pn_.__r_.__value_.__l.__data_ + 16);
      v145 = v13;
      if (*(char *)(*(_QWORD *)v175.__pn_.__r_.__value_.__l.__data_ + 39) < 0)
      {
        v13 = *(const char **)(v12 + 16);
        v14 = *(_QWORD *)(v12 + 24);
        __src = v9;
        v16 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v16 & 1) != 0)
          goto LABEL_39;
      }
      else
      {
        v14 = *(unsigned __int8 *)(*(_QWORD *)v175.__pn_.__r_.__value_.__l.__data_ + 39);
        __src = v9;
        v15 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v15 & 1) != 0)
          goto LABEL_39;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&object);
        sub_223199C58("com.apple.cv3d", (unint64_t)&object, byte_255788F40);
        if ((_BYTE)v164 && SHIBYTE(v163) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_39:
      if (byte_255788F40[23] >= 0)
        v17 = byte_255788F40;
      else
        v17 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v18 = byte_255788F40[23];
      else
        v18 = *(_QWORD *)&byte_255788F40[8];
      object = os_log_create(v17, v13);
      v19 = &v163;
      if (v18 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v18 >= 0x17)
      {
        v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17)
          v20 = v18 | 7;
        v21 = v20 + 1;
        v19 = (__int128 *)operator new(v20 + 1);
        *((_QWORD *)&v163 + 1) = v18;
        *(_QWORD *)&v164 = v21 | 0x8000000000000000;
        *(_QWORD *)&v163 = v19;
      }
      else
      {
        BYTE7(v164) = v18;
        if (!v18)
        {
LABEL_53:
          *((_BYTE *)v19 + v18) = 0;
          BYTE8(v164) = 1;
          v22 = __p;
          if (v14 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v14 >= 0x17)
          {
            v24 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17)
              v24 = v14 | 7;
            v25 = v24 + 1;
            v22 = operator new(v24 + 1);
            __p[1] = (void *)v14;
            v166 = v25 | 0x8000000000000000;
            __p[0] = v22;
          }
          else
          {
            HIBYTE(v166) = v14;
            if (!v14)
            {
              LOBYTE(__p[0]) = 0;
              v167 = 1;
              v23 = object;
              if ((SHIBYTE(v166) & 0x80000000) == 0)
                goto LABEL_57;
              goto LABEL_63;
            }
          }
          memmove(v22, v13, v14);
          *((_BYTE *)v22 + v14) = 0;
          v167 = 1;
          v23 = object;
          if ((SHIBYTE(v166) & 0x80000000) == 0)
          {
LABEL_57:
            if (!BYTE8(v164))
              goto LABEL_66;
            goto LABEL_64;
          }
LABEL_63:
          operator delete(__p[0]);
          if (!BYTE8(v164))
          {
LABEL_66:
            if (object)
              os_release(object);
            if (v11 && *(_QWORD *)(v11 + 24))
            {
              v26 = _os_log_pack_size();
              v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
              v28 = (std::__shared_weak_count *)operator new();
              v29 = v28;
              v28->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v28->__shared_owners_;
              v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v28->__shared_weak_owners_ = 0;
              v28[1].__vftable = v27;
              object = v27;
              *(_QWORD *)&v163 = v27;
              *((_QWORD *)&v163 + 1) = v28;
              do
                v31 = __ldxr(p_shared_owners);
              while (__stxr(v31 + 1, p_shared_owners));
              v164 = 0uLL;
              __p[0] = 0;
              do
                v32 = __ldaxr(p_shared_owners);
              while (__stlxr(v32 - 1, p_shared_owners));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v29);
              }
              v33 = object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v34 = operator new();
              v35 = *(unsigned __int8 *)(v12 + 39);
              v36 = v145;
              if ((v35 & 0x80u) != 0)
              {
                v36 = *(const char **)(v12 + 16);
                v35 = *(_QWORD *)(v12 + 24);
              }
              *(_QWORD *)v34 = v33;
              *(_OWORD *)(v34 + 8) = v163;
              v163 = 0uLL;
              *(_OWORD *)(v34 + 24) = v164;
              v164 = 0uLL;
              *(_QWORD *)(v34 + 40) = v36;
              *(_QWORD *)(v34 + 48) = v35;
              *(_BYTE *)(v34 + 56) = 1;
              v168 = 0;
              v169 = v34;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), &v169);
              v37 = v169;
              v169 = 0;
              a2 = __s;
              v38 = __src;
              if (v37)
              {
                v39 = *(std::__shared_weak_count **)(v37 + 32);
                if (v39)
                {
                  v40 = (unint64_t *)&v39->__shared_owners_;
                  do
                    v41 = __ldaxr(v40);
                  while (__stlxr(v41 - 1, v40));
                  if (!v41)
                  {
                    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                    std::__shared_weak_count::__release_weak(v39);
                  }
                }
                v42 = *(std::__shared_weak_count **)(v37 + 16);
                if (v42)
                {
                  v43 = (unint64_t *)&v42->__shared_owners_;
                  do
                    v44 = __ldaxr(v43);
                  while (__stlxr(v44 - 1, v43));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                    std::__shared_weak_count::__release_weak(v42);
                  }
                }
                MEMORY[0x227684CE8](v37, 0x10F0C40B62ED6C6);
                v45 = v168;
                v168 = 0;
                if (v45)
                {
                  v46 = *(std::__shared_weak_count **)(v45 + 32);
                  if (v46)
                  {
                    v47 = (unint64_t *)&v46->__shared_owners_;
                    do
                      v48 = __ldaxr(v47);
                    while (__stlxr(v48 - 1, v47));
                    if (!v48)
                    {
                      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                      std::__shared_weak_count::__release_weak(v46);
                    }
                  }
                  v49 = *(std::__shared_weak_count **)(v45 + 16);
                  if (v49)
                  {
                    v50 = (unint64_t *)&v49->__shared_owners_;
                    do
                      v51 = __ldaxr(v50);
                    while (__stlxr(v51 - 1, v50));
                    if (!v51)
                    {
                      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                      std::__shared_weak_count::__release_weak(v49);
                    }
                  }
                  MEMORY[0x227684CE8](v45, 0x10F0C40B62ED6C6);
                }
              }
              v52 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
              if (*((_QWORD *)&v164 + 1))
              {
                v53 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                }
              }
              v55 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
              if (*((_QWORD *)&v163 + 1))
              {
                v56 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
            }
            else
            {
              os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
              LOWORD(object) = 0;
              v58 = (void *)_os_log_send_and_compose_impl();
              a2 = __s;
              v38 = __src;
              if (v58)
                free(v58);
            }
            if (v38)
            {
              sub_22322C138((uint64_t)&v175, "FailureSnapshot: Changed throttling file update time");
              sub_223182C08((uint64_t)&v175);
            }
            sub_223182C08((uint64_t)&v175);
            v59 = v180;
            if (v180)
            {
              v60 = (unint64_t *)&v180->__shared_owners_;
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
            goto LABEL_120;
          }
LABEL_64:
          if (SBYTE7(v164) < 0)
            operator delete((void *)v163);
          goto LABEL_66;
        }
      }
      memmove(v19, v17, v18);
      goto LABEL_53;
    }
  }
LABEL_120:
  v62 = atomic_load((unsigned __int8 *)&qword_2540CEA90);
  if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEA90))
  {
    sub_22455F53C(v154);
    sub_223174DE4(&v175, "cv3dapi.recon3d");
    sub_2232300E0(v154, (uint64_t)&v175, &qword_2540CEA88);
    if (SHIBYTE(v175.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v175.__pn_.__r_.__value_.__l.__data_);
    __cxa_guard_release(&qword_2540CEA90);
  }
  v153 = qword_2540CEA88;
  if (**(int **)(qword_2540CEA88 + 56) <= 3)
  {
    v63 = *(unsigned __int8 *)(qword_2540CEA88 + 72);
    v64 = sub_22322F254(qword_2540CEA88, "OSLogSurrogateAppender", 1, 0);
    v65 = v64;
    if (v63 || v64 != 0)
    {
      v154[0] = &v153;
      v154[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
      v154[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
      v155 = 3;
      v156 = "unknown file";
      v157 = 174;
      v159 = 0;
      v160 = 0;
      v158 = "unknown function";
      if (a2[24])
      {
        if (a2[23] < 0)
        {
          sub_223197FA4(v151, *(void **)a2, *((_QWORD *)a2 + 1));
        }
        else
        {
          *(_OWORD *)v151 = *(_OWORD *)a2;
          v152 = *((_QWORD *)a2 + 2);
        }
      }
      else
      {
        HIBYTE(v152) = 0;
        LOBYTE(v151[0]) = 0;
      }
      v67 = v151;
      if (v152 < 0)
        v67 = (void **)v151[0];
      __sa = (char *)v67;
      v68 = *v154[0];
      if (*(char *)(*v154[0] + 39) < 0)
      {
        v70 = *(const char **)(v68 + 16);
        v69 = *(_QWORD *)(v68 + 24);
        v146 = *v154[0] + 16;
        v72 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v72 & 1) != 0)
          goto LABEL_137;
      }
      else
      {
        v69 = *(unsigned __int8 *)(*v154[0] + 39);
        v70 = (const char *)(*v154[0] + 16);
        v146 = (uint64_t)v70;
        v71 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v71 & 1) != 0)
          goto LABEL_137;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v175);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v175, byte_255788F40);
        if ((_BYTE)v176 && SHIBYTE(v175.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v175.__pn_.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_137:
      if (byte_255788F40[23] >= 0)
        v73 = byte_255788F40;
      else
        v73 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v74 = byte_255788F40[23];
      else
        v74 = *(_QWORD *)&byte_255788F40[8];
      __srca = v70;
      v175.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v73, v70);
      p_size = &v175.__pn_.__r_.__value_.__l.__size_;
      if (v74 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v74 >= 0x17)
      {
        v76 = v3;
        v77 = v65;
        v78 = v68;
        v79 = v63;
        v80 = a2;
        v81 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v74 | 7) != 0x17)
          v81 = v74 | 7;
        v82 = v81 + 1;
        p_size = (std::string::size_type *)operator new(v81 + 1);
        v175.__pn_.__r_.__value_.__r.__words[2] = v74;
        *(_QWORD *)&v176 = v82 | 0x8000000000000000;
        v175.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
        a2 = v80;
        v63 = v79;
        v68 = v78;
        v65 = v77;
        v3 = v76;
      }
      else
      {
        BYTE7(v176) = v74;
        if (!v74)
        {
LABEL_151:
          *((_BYTE *)p_size + v74) = 0;
          BYTE8(v176) = 1;
          v83 = (char *)&v177;
          if (v69 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v69 >= 0x17)
          {
            v85 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v69 | 7) != 0x17)
              v85 = v69 | 7;
            v86 = v85 + 1;
            v83 = (char *)operator new(v85 + 1);
            v178 = (const char *)v69;
            v179 = v86 | 0x8000000000000000;
            v177 = v83;
          }
          else
          {
            HIBYTE(v179) = v69;
            if (!v69)
            {
              LOBYTE(v177) = 0;
              LOBYTE(v180) = 1;
              v84 = v175.__pn_.__r_.__value_.__r.__words[0];
              if ((SHIBYTE(v179) & 0x80000000) == 0)
                goto LABEL_155;
              goto LABEL_161;
            }
          }
          memmove(v83, __srca, v69);
          v83[v69] = 0;
          LOBYTE(v180) = 1;
          v84 = v175.__pn_.__r_.__value_.__r.__words[0];
          if ((SHIBYTE(v179) & 0x80000000) == 0)
          {
LABEL_155:
            if (!BYTE8(v176))
              goto LABEL_164;
            goto LABEL_162;
          }
LABEL_161:
          operator delete(v177);
          if (!BYTE8(v176))
            goto LABEL_164;
LABEL_162:
          if (SBYTE7(v176) < 0)
            operator delete((void *)v175.__pn_.__r_.__value_.__l.__size_);
LABEL_164:
          if (v175.__pn_.__r_.__value_.__r.__words[0])
            os_release(v175.__pn_.__r_.__value_.__l.__data_);
          if (!v65 || !*(_QWORD *)(v65 + 24))
          {
            os_log_type_enabled(v84, OS_LOG_TYPE_INFO);
            LODWORD(v175.__pn_.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v175.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)__sa;
            v94 = (void *)_os_log_send_and_compose_impl();
            if (v94)
              free(v94);
LABEL_237:
            if (SHIBYTE(v152) < 0)
            {
              operator delete(v151[0]);
              if (!v63)
              {
LABEL_251:
                sub_223182C08((uint64_t)v154);
                v141 = v160;
                if (v160)
                {
                  v142 = (unint64_t *)&v160->__shared_owners_;
                  do
                    v143 = __ldaxr(v142);
                  while (__stlxr(v143 - 1, v142));
                  if (!v143)
                  {
                    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                    std::__shared_weak_count::__release_weak(v141);
                  }
                }
                goto LABEL_256;
              }
            }
            else if (!v63)
            {
              goto LABEL_251;
            }
            if (a2[24])
            {
              if (a2[23] < 0)
                sub_223197FA4(&v175, *(void **)a2, *((_QWORD *)a2 + 1));
              else
                v175 = *(std::__fs::filesystem::path *)a2;
            }
            else
            {
              *((_BYTE *)&v175.__pn_.__r_.__value_.__s + 23) = 0;
              v175.__pn_.__r_.__value_.__s.__data_[0] = 0;
            }
            v140 = &v175;
            if ((v175.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v140 = (std::__fs::filesystem::path *)v175.__pn_.__r_.__value_.__r.__words[0];
            sub_22322C138((uint64_t)v154, "FailureSnapshot: Attempted uuid %s", (const char *)v140);
            if (SHIBYTE(v175.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v175.__pn_.__r_.__value_.__l.__data_);
            sub_223182C08((uint64_t)v154);
            goto LABEL_251;
          }
          v87 = _os_log_pack_size();
          v88 = operator new(v87, (std::align_val_t)8uLL);
          v89 = (_QWORD *)operator new();
          *v89 = &off_24EC1F7F0;
          v89[1] = 0;
          v89[2] = 0;
          v89[3] = v88;
          v170.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v88;
          v170.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v88;
          v171 = 0;
          v172 = 0;
          v170.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)v89;
          v90 = strlen(__sa);
          if (v90 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v91 = v90;
          if (v90 >= 0x17)
          {
            v95 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v90 | 7) != 0x17)
              v95 = v90 | 7;
            v96 = v95 + 1;
            p_dst = operator new(v95 + 1);
            *(_QWORD *)&v174 = v91;
            *((_QWORD *)&v174 + 1) = v96 | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v174) = v90;
            p_dst = &__dst;
            if (!v90)
            {
              v93 = v63;
              goto LABEL_178;
            }
          }
          v93 = v63;
          memcpy(p_dst, __sa, v91);
LABEL_178:
          *((_BYTE *)p_dst + v91) = 0;
          v97 = __dst;
          v181[0] = v174;
          *(_QWORD *)((char *)v181 + 7) = *(_QWORD *)((char *)&v174 + 7);
          v98 = HIBYTE(v174);
          v99 = operator new(0x38uLL);
          v99[1] = 0;
          v99[2] = 0;
          v99[3] = off_24EC1FA48;
          *v99 = &off_24EC1F9F8;
          v100 = v181[0];
          v99[4] = v97;
          v99[5] = v100;
          *(_QWORD *)((char *)v99 + 47) = *(_QWORD *)((char *)v181 + 7);
          *((_BYTE *)v99 + 55) = v98;
          v181[0] = 0;
          *(_QWORD *)((char *)v181 + 7) = 0;
          v101 = v172;
          v171 = (char *)(v99 + 3);
          v172 = (std::__shared_weak_count *)v99;
          if (v101)
          {
            v102 = (unint64_t *)&v101->__shared_owners_;
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
          }
          v175 = v170;
          v104 = v171;
          if (v170.__pn_.__r_.__value_.__r.__words[2])
          {
            v105 = (unint64_t *)(v170.__pn_.__r_.__value_.__r.__words[2] + 8);
            do
              v106 = __ldxr(v105);
            while (__stxr(v106 + 1, v105));
          }
          v107 = v172;
          *(_QWORD *)&v176 = v104;
          *((_QWORD *)&v176 + 1) = v172;
          if (v172)
          {
            v108 = (unint64_t *)&v172->__shared_owners_;
            do
              v109 = __ldxr(v108);
            while (__stxr(v109 + 1, v108));
            v177 = v104;
            do
              v110 = __ldaxr(v108);
            while (__stlxr(v110 - 1, v108));
            if (!v110)
            {
              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
              std::__shared_weak_count::__release_weak(v107);
            }
          }
          else
          {
            v177 = v104;
          }
          v111 = (std::__shared_weak_count *)v170.__pn_.__r_.__value_.__r.__words[2];
          if (v170.__pn_.__r_.__value_.__r.__words[2])
          {
            v112 = (unint64_t *)(v170.__pn_.__r_.__value_.__r.__words[2] + 8);
            do
              v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
          }
          v114 = v175.__pn_.__r_.__value_.__r.__words[0];
          if (v177[31] >= 0)
            v115 = v177 + 8;
          else
            v115 = (char *)*((_QWORD *)v177 + 1);
          v116 = _os_log_pack_fill();
          *(_DWORD *)v116 = 136315138;
          *(_QWORD *)(v116 + 4) = v115;
          v117 = operator new();
          v118 = *(unsigned __int8 *)(v68 + 39);
          v119 = v146;
          if ((v118 & 0x80u) != 0)
          {
            v119 = *(_QWORD *)(v68 + 16);
            v118 = *(_QWORD *)(v68 + 24);
          }
          *(_QWORD *)v117 = v114;
          *(_OWORD *)(v117 + 8) = *(_OWORD *)&v175.__pn_.__r_.__value_.__r.__words[1];
          *(_OWORD *)&v175.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
          *(_OWORD *)(v117 + 24) = v176;
          v176 = 0uLL;
          *(_QWORD *)(v117 + 40) = v119;
          *(_QWORD *)(v117 + 48) = v118;
          *(_BYTE *)(v117 + 56) = 1;
          __dst = 0;
          v170.__pn_.__r_.__value_.__r.__words[0] = v117;
          (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v65 + 24) + 40))(*(_QWORD *)(v65 + 24), &v170);
          v120 = v170.__pn_.__r_.__value_.__r.__words[0];
          v170.__pn_.__r_.__value_.__r.__words[0] = 0;
          if (v120)
          {
            v121 = *(std::__shared_weak_count **)(v120 + 32);
            if (v121)
            {
              v122 = (unint64_t *)&v121->__shared_owners_;
              do
                v123 = __ldaxr(v122);
              while (__stlxr(v123 - 1, v122));
              if (!v123)
              {
                ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                std::__shared_weak_count::__release_weak(v121);
              }
            }
            v124 = *(std::__shared_weak_count **)(v120 + 16);
            if (v124)
            {
              v125 = (unint64_t *)&v124->__shared_owners_;
              do
                v126 = __ldaxr(v125);
              while (__stlxr(v126 - 1, v125));
              if (!v126)
              {
                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                std::__shared_weak_count::__release_weak(v124);
              }
            }
            MEMORY[0x227684CE8](v120, 0x10F0C40B62ED6C6);
            v127 = __dst;
            __dst = 0;
            if (v127)
            {
              v128 = (std::__shared_weak_count *)v127[4];
              if (v128)
              {
                v129 = (unint64_t *)&v128->__shared_owners_;
                do
                  v130 = __ldaxr(v129);
                while (__stlxr(v130 - 1, v129));
                if (!v130)
                {
                  ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                  std::__shared_weak_count::__release_weak(v128);
                }
              }
              v131 = (std::__shared_weak_count *)v127[2];
              if (v131)
              {
                v132 = (unint64_t *)&v131->__shared_owners_;
                do
                  v133 = __ldaxr(v132);
                while (__stlxr(v133 - 1, v132));
                if (!v133)
                {
                  ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                  std::__shared_weak_count::__release_weak(v131);
                }
              }
              MEMORY[0x227684CE8](v127, 0x10F0C40B62ED6C6);
            }
          }
          v134 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
          v63 = v93;
          if (*((_QWORD *)&v176 + 1))
          {
            v135 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
          v137 = (std::__shared_weak_count *)v175.__pn_.__r_.__value_.__r.__words[2];
          if (v175.__pn_.__r_.__value_.__r.__words[2])
          {
            v138 = (unint64_t *)(v175.__pn_.__r_.__value_.__r.__words[2] + 8);
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          goto LABEL_237;
        }
      }
      memmove(p_size, v73, v74);
      goto LABEL_151;
    }
  }
LABEL_256:
  *(_BYTE *)(v3 + 67) = 1;
  if (SHIBYTE(v161.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v161.__pn_.__r_.__value_.__l.__data_);
}

#error "223FE07C8: call analysis failed (funcsize=144)"

uint64_t sub_223FE0934(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_24EC65018;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 32))
      return a1;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 32))
      return a1;
  }
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_223FE09CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_24EC65018;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 32))
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 32))
      goto LABEL_9;
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
LABEL_9:
  JUMPOUT(0x227684CE8);
}

BOOL sub_223FE0A64(const std::__fs::filesystem::path *a1)
{
  std::__fs::filesystem::path::__string_view v1;
  std::string *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v3;
  std::basic_string_view<_CharT, _Traits>::size_type v4;
  std::__fs::filesystem::path::__string_view v5;
  int v6;
  std::__fs::filesystem::path __p;
  std::string __dst;

  v1 = std::__fs::filesystem::path::__filename(a1);
  if (v1.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v1.__size_ >= 0x17)
  {
    v3 = (v1.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1.__size_ | 7) != 0x17)
      v3 = v1.__size_ | 7;
    v4 = v3 + 1;
    p_dst = (std::string *)operator new(v3 + 1);
    __dst.__r_.__value_.__l.__size_ = v1.__size_;
    __dst.__r_.__value_.__r.__words[2] = v4 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v1.__size_;
  p_dst = &__dst;
  if (v1.__size_)
LABEL_8:
    memmove(p_dst, v1.__data_, v1.__size_);
  p_dst->__r_.__value_.__s.__data_[v1.__size_] = 0;
  __p.__pn_ = __dst;
  memset(&__dst, 0, sizeof(__dst));
  sub_2231816F0(&__dst, (std::string *)".snapshot_throttle", (std::string *)"");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v5.__data_ = (const std::string_view::value_type *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5.__size_ = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v5.__size_ = __dst.__r_.__value_.__l.__size_;
  v6 = std::__fs::filesystem::path::__compare(&__p, v5);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v6 == 0;
LABEL_19:
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    return v6 == 0;
  }
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_19;
  return v6 == 0;
}

void sub_223FE0B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_223FE0BCC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_223FE1140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223FE1164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FE1178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223FE11D0(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_223FE1744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223FE1768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FE177C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223FE17D4(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  std::string *p_dst;
  void **v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  std::__fs::filesystem::filesystem_error *v11;
  uint64_t v12;
  std::bad_alloc *exception;
  std::bad_alloc *v14;
  void *__p[2];
  uint64_t v16;
  std::string __dst;
  unsigned int v18;
  copyfile_state_t state;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;
  std::error_code v23;

  v22 = *MEMORY[0x24BDAC8D0];
  ((void (*)(_QWORD **, uint64_t))(*a3)[39])(a3, a1);
  if (((unsigned int (*)(_QWORD **, uint64_t))(*a3)[22])(a3, a2))
    ((void (*)(_QWORD **, uint64_t))(*a3)[30])(a3, a2);
  if (*a3 == off_24EC719E0)
  {
    sub_2242B5DA4(a3, a1, a2, 8);
    return;
  }
  state = copyfile_state_alloc();
  if (!state)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v14, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v20[0] = &off_24EC650C8;
  v20[1] = &state;
  v20[2] = 0;
  v21 = v20;
  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __dst = *(std::string *)a1;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_223197FA4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v16 = *(_QWORD *)(a2 + 16);
  }
  if (v16 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  v8 = copyfile((const char *)p_dst, (const char *)v7, state, 0x1008000u);
  if (SHIBYTE(v16) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_20:
      v18 = v8;
      if (!v8)
        goto LABEL_21;
LABEL_27:
      v11 = (std::__fs::filesystem::filesystem_error *)__cxa_allocate_exception(0x30uLL);
      sub_223C05A68("copyfile() call failed with code", (int *)&v18);
      v12 = v18;
      v23.__cat_ = std::system_category();
      *(_QWORD *)&v23.__val_ = v12;
      sub_2236E5998(v11, &__dst, a1, a2, v23);
      __cxa_throw(v11, MEMORY[0x24BEDB708], MEMORY[0x24BEDB268]);
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  v18 = v8;
  if (v8)
    goto LABEL_27;
LABEL_21:
  if (!v21)
    sub_223198474();
  (*(void (**)(_QWORD *))(*v21 + 48))(v21);
  v9 = v21;
  if (v21 == v20)
  {
    v10 = 4;
    v9 = v20;
  }
  else
  {
    if (!v21)
      return;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
}

void sub_223FE1A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a21 < 0)
    operator delete(__p);
  sub_22318A1C8(&a24);
  _Unwind_Resume(a1);
}

void sub_223FE1B08(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

void sub_223FE1B24()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_223FE1B38(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC650C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_223FE1B70(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC650C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_223FE1B90(uint64_t a1)
{
  return copyfile_state_free(**(copyfile_state_t **)(a1 + 8));
}

uint64_t sub_223FE1B9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon10filesystem9CloneFileERKNS3_4__fs10filesys"
                     "tem4pathESB_RNS_3kit2fs11IFilesystemEE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon10filesystem9CloneFileERKNS3_4__"
                                "fs10filesystem4pathESB_RNS_3kit2fs11IFilesystemEE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon10filesystem9CloneFileERKNS3_4__fs10filesystem4pathESB_RNS_3kit2fs11IFilesystemEE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon10filesystem9CloneFileERKNS3_4__fs10filesystem4pathESB_RNS_3kit2fs11IFilesystemEE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223FE1C08()
{
  return &unk_24EC65128;
}

void sub_223FE1C14(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int Count;
  CFIndex v24;
  const void *ValueAtIndex;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *key[2];
  char v36;
  void *v37;
  __int128 v38;
  void *__p[4];

  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 20) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 28) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 36) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 44) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 52) = 0;
  *(_BYTE *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 60) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 68) = 0;
  *(_DWORD *)(a3 + 72) = 0;
  v6 = (_WORD *)(a3 + 72);
  *(_WORD *)(a3 + 76) = 0;
  HIBYTE(__p[2]) = 11;
  strcpy((char *)__p, "orientation");
  v7 = sub_223CC1200(a1, (uint64_t)__p);
  *(_DWORD *)a3 = v7;
  *(_BYTE *)(a3 + 4) = BYTE4(v7);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "ceilingTotalRatio");
  v8 = sub_223CC1568(a1, (uint64_t)__p);
  *(_DWORD *)(a3 + 8) = v8;
  *(_BYTE *)(a3 + 12) = BYTE4(v8);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "wallTotalRatio");
  v9 = sub_223CC1568(a1, (uint64_t)__p);
  *(_DWORD *)(a3 + 16) = v9;
  *(_BYTE *)(a3 + 20) = BYTE4(v9);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "floorTotalRatio");
  v10 = sub_223CC1568(a1, (uint64_t)__p);
  *(_DWORD *)(a3 + 24) = v10;
  *(_BYTE *)(a3 + 28) = BYTE4(v10);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "wallReplaceRatio");
  v11 = sub_223CC1568(a1, (uint64_t)__p);
  *(_DWORD *)(a3 + 32) = v11;
  *(_BYTE *)(a3 + 36) = BYTE4(v11);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "floorReplaceRatio");
  v12 = sub_223CC1568(a1, (uint64_t)__p);
  *(_DWORD *)(a3 + 40) = v12;
  *(_BYTE *)(a3 + 44) = BYTE4(v12);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_2245C6440;
  strcpy((char *)__p[0], "recon_didSinkTaskSkipUpdates");
  *v6 = sub_22379EDA0(a1, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_2245C77E0;
  strcpy((char *)__p[0], "recon_didSinkTaskSkipManyUpdates");
  *(_WORD *)(a3 + 74) = sub_22379EDA0(a1, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_2245C6450;
  strcpy((char *)__p[0], "recon_didSinkTaskSkipLargeUpdates");
  *(_WORD *)(a3 + 76) = sub_22379EDA0(a1, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 9;
  strcpy((char *)__p, "topKCount");
  v13 = sub_223CC13B4(a1, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if ((v13 & 0xFF00000000) == 0)
      return;
  }
  else if ((v13 & 0xFF00000000) == 0)
  {
    return;
  }
  if ((_DWORD)v13)
  {
    v37 = operator new(0x20uLL);
    v38 = xmmword_2245B9420;
    strcpy((char *)v37, "semanticMaterialPairTopK");
    sub_224527BAC((uint64_t)&v37, (CFStringRef *)key);
    sub_22361F9DC(key[0], a1, (uint64_t)__p);
    v14 = (std::__shared_weak_count *)key[1];
    if (!key[1])
      goto LABEL_28;
    v15 = (unint64_t *)((char *)key[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if ((SHIBYTE(v38) & 0x80000000) == 0)
      {
LABEL_29:
        if (!LOBYTE(__p[2]))
          return;
        goto LABEL_33;
      }
    }
    else
    {
LABEL_28:
      if ((SHIBYTE(v38) & 0x80000000) == 0)
        goto LABEL_29;
    }
    operator delete(v37);
    if (!LOBYTE(__p[2]))
      return;
LABEL_33:
    v18 = __p[0];
    v17 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_38;
    v19 = (unint64_t *)((char *)__p[1] + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v22 = LOBYTE(__p[2]);
      if (v18)
        goto LABEL_39;
    }
    else
    {
LABEL_38:
      v22 = LOBYTE(__p[2]);
      if (v18)
      {
LABEL_39:
        if (!v22)
          sub_22324A974();
        Count = CFArrayGetCount((CFArrayRef)__p[0]);
        v22 = LOBYTE(__p[2]);
        if (*((_BYTE *)a2 + 4))
        {
          v24 = *a2;
          if (v24 < Count)
          {
            if (!LOBYTE(__p[2]))
              sub_22324A974();
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)__p[0], v24);
            sub_22379F288(ValueAtIndex, (uint64_t)&v37);
            if (BYTE8(v38))
            {
              v36 = 13;
              strcpy((char *)key, "semanticIndex");
              v26 = sub_223CC13B4((uint64_t)&v37, (uint64_t)key);
              *(_DWORD *)(a3 + 48) = v26;
              *(_BYTE *)(a3 + 52) = BYTE4(v26);
              if (v36 < 0)
                operator delete(key[0]);
              v36 = 13;
              strcpy((char *)key, "materialIndex");
              v27 = sub_223CC13B4((uint64_t)&v37, (uint64_t)key);
              *(_DWORD *)(a3 + 56) = v27;
              *(_BYTE *)(a3 + 60) = BYTE4(v27);
              if (v36 < 0)
                operator delete(key[0]);
              v36 = 5;
              strcpy((char *)key, "count");
              v28 = sub_223CC13B4((uint64_t)&v37, (uint64_t)key);
              if (v36 < 0)
                operator delete(key[0]);
              if ((v28 & 0xFF00000000) != 0)
              {
                *(float *)(a3 + 64) = (float)v28 / (float)v13;
                *(_BYTE *)(a3 + 68) = 1;
              }
              if (BYTE8(v38))
              {
                v29 = (std::__shared_weak_count *)v38;
                if ((_QWORD)v38)
                {
                  v30 = (unint64_t *)(v38 + 8);
                  do
                    v31 = __ldaxr(v30);
                  while (__stlxr(v31 - 1, v30));
                  if (!v31)
                  {
                    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                    std::__shared_weak_count::__release_weak(v29);
                  }
                }
              }
            }
            v22 = LOBYTE(__p[2]);
          }
        }
      }
    }
    if (v22)
    {
      v32 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v33 = (unint64_t *)((char *)__p[1] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
    }
  }
}

void sub_223FE2290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  sub_223224234((uint64_t)&a15);
  sub_223224234((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_223FE22D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_223167354((uint64_t)&a9);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223FE233C(const char *a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  size_t v10;
  void *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  void *__dst[2];
  unint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;

  if (espresso_network_bind_buffer()
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Utils/src/NetworkUtils.cpp", 53, (uint64_t)"ret == ESPRESSO_STATUS_SUCCESS", 30, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_35;
  }
  v10 = strlen(a1);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = (void **)operator new(v13 + 1);
    __dst[1] = v11;
    v22 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_10;
  }
  HIBYTE(v22) = v10;
  v12 = __dst;
  if (v10)
LABEL_10:
    memcpy(v12, a1, (size_t)v11);
  *((_BYTE *)v11 + (_QWORD)v12) = 0;
  sub_223FE25EC(&v23);
  v15 = v23;
  if (v24 - v23 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
  {
    v16 = 0;
    if (!v23)
      goto LABEL_16;
    goto LABEL_15;
  }
  v16 = memcmp(v23, *(const void **)a2, v24 - v23) == 0;
  if (v15)
  {
LABEL_15:
    v24 = v15;
    operator delete(v15);
  }
LABEL_16:
  if (SHIBYTE(v22) < 0)
  {
    operator delete(__dst[0]);
    if (v16)
      goto LABEL_21;
  }
  else if (v16)
  {
    goto LABEL_21;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Utils/src/NetworkUtils.cpp", 54, (uint64_t)"GetTensorShape(net, tensor_name) == tensor_shape", 48, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_35;
  }
LABEL_21:
  v17 = v25;
  if (a3[1])
    v18 = *a3 == 0;
  else
    v18 = 1;
  if (v18)
    v19 = 0;
  else
    v19 = *(_QWORD *)a3;
  if (v19 <= 0x100000000)
    v20 = 0x100000000;
  else
    v20 = v19;
  if (HIDWORD(v19) * (_DWORD)v20 == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C)|| (*a6 = v17, a6[1] = v19, a6[2] = ((_DWORD)v19 != 0) | (unint64_t)(v20 << 32), *(_QWORD *)a3 != v19)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Utils/src/NetworkUtils.cpp", 58, (uint64_t)"output_buffer.Shape() == buffer_shape", 37, (uint64_t)"buffer and tensor shape mismatch", 32, (void (*)(void **))sub_22457406C))
  {
LABEL_35:
    abort();
  }
}

void sub_223FE25D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_223FE25EC(_QWORD *a1)
{
  __n128 result;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if (espresso_network_query_blob_shape()
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Utils/src/NetworkUtils.cpp", 35, (uint64_t)"ret == ESPRESSO_STATUS_SUCCESS", 30, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  return result;
}

void sub_223FE2790(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_223FE27B8(const char *a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  size_t v10;
  void *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  void *__dst[2];
  unint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;

  if (espresso_network_bind_buffer()
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Utils/src/NetworkUtils.cpp", 53, (uint64_t)"ret == ESPRESSO_STATUS_SUCCESS", 30, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_45;
  }
  v10 = strlen(a1);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = (void **)operator new(v13 + 1);
    __dst[1] = v11;
    v25 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_10;
  }
  HIBYTE(v25) = v10;
  v12 = __dst;
  if (v10)
LABEL_10:
    memcpy(v12, a1, (size_t)v11);
  *((_BYTE *)v11 + (_QWORD)v12) = 0;
  sub_223FE25EC(&v26);
  v15 = v26;
  if (v27 - v26 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
  {
    v16 = 0;
    if (!v26)
      goto LABEL_16;
    goto LABEL_15;
  }
  v16 = memcmp(v26, *(const void **)a2, v27 - v26) == 0;
  if (v15)
  {
LABEL_15:
    v27 = v15;
    operator delete(v15);
  }
LABEL_16:
  if (SHIBYTE(v25) < 0)
  {
    operator delete(__dst[0]);
    if (v16)
      goto LABEL_21;
  }
  else if (v16)
  {
    goto LABEL_21;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Utils/src/NetworkUtils.cpp", 54, (uint64_t)"GetTensorShape(net, tensor_name) == tensor_shape", 48, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_45;
  }
LABEL_21:
  v17 = v28;
  if (*a3)
    v18 = a3[1] == 0;
  else
    v18 = 1;
  v19 = v18 || a3[2] == 0;
  if (v19)
    v20 = 0;
  else
    v20 = *(_QWORD *)a3;
  if (v19)
    v21 = 0;
  else
    v21 = a3[2];
  if (v19)
    v22 = 0;
  else
    v22 = HIDWORD(v20) * v20;
  if (HIDWORD(v20))
    v23 = v20 << 32;
  else
    v23 = 0;
  if (v22 * v21 == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C)|| ((*(_QWORD *)a6 = v17, *(_QWORD *)(a6 + 8) = v20, *(_DWORD *)(a6 + 16) = v21, *(_QWORD *)(a6 + 20) = v23 | ((_DWORD)v20 != 0), *(_DWORD *)(a6 + 28) = v22, *a3 != (_DWORD)v20)|| __PAIR64__(v21, HIDWORD(v20)) != *(_QWORD *)(a3 + 1))&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Utils/src/NetworkUtils.cpp", 58, (uint64_t)"output_buffer.Shape() == buffer_shape", 37,
         (uint64_t)"buffer and tensor shape mismatch",
         32,
         (void (*)(void **))sub_22457406C))
  {
LABEL_45:
    abort();
  }
}

void sub_223FE2A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223FE2A90(const char *a1, uint64_t a2, int32x4_t *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  size_t v10;
  void *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *__dst[2];
  unint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;

  if (espresso_network_bind_buffer()
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Utils/src/NetworkUtils.cpp", 53, (uint64_t)"ret == ESPRESSO_STATUS_SUCCESS", 30, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_41;
  }
  v10 = strlen(a1);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = (void **)operator new(v13 + 1);
    __dst[1] = v11;
    v28 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_10;
  }
  HIBYTE(v28) = v10;
  v12 = __dst;
  if (v10)
LABEL_10:
    memcpy(v12, a1, (size_t)v11);
  *((_BYTE *)v11 + (_QWORD)v12) = 0;
  sub_223FE25EC(&v29);
  v26 = a6;
  v15 = v29;
  if (v30 - v29 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
  {
    v16 = 0;
    if (!v29)
      goto LABEL_16;
    goto LABEL_15;
  }
  v16 = memcmp(v29, *(const void **)a2, v30 - v29) == 0;
  if (v15)
  {
LABEL_15:
    v30 = v15;
    operator delete(v15);
  }
LABEL_16:
  if (SHIBYTE(v28) < 0)
  {
    operator delete(__dst[0]);
    if (v16)
      goto LABEL_21;
  }
  else if (v16)
  {
    goto LABEL_21;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Utils/src/NetworkUtils.cpp", 54, (uint64_t)"GetTensorShape(net, tensor_name) == tensor_shape", 48, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_41;
  }
LABEL_21:
  v17 = v31;
  v18 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqzq_s32(*a3), (int8x16_t)xmmword_2246496A0));
  if ((v18 & 0xF) != 0)
    v19 = 0;
  else
    v19 = a3->i64[0];
  if ((v18 & 0xF) != 0)
    v20 = 0;
  else
    v20 = a3->i64[1];
  v21 = HIDWORD(v19) * v19;
  if ((_DWORD)v20)
    v22 = v21;
  else
    v22 = 0;
  v23 = v21 * v20;
  if (HIDWORD(v20))
    v24 = v23;
  else
    v24 = 0;
  if (HIDWORD(v19))
    v25 = v19 << 32;
  else
    v25 = 0;
  if ((_DWORD)v24 * HIDWORD(v20) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C)|| (*v26 = v17, v26[1] = v19, v26[2] = v20, v26[3] = v25 | ((_DWORD)v19 != 0), v26[4] = v22 | (v24 << 32), *a3 != __PAIR128__(v20, v19))&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Utils/src/NetworkUtils.cpp", 58, (uint64_t)"output_buffer.Shape() == buffer_shape", 37, (uint64_t)"buffer and tensor shape mismatch",
         32,
         (void (*)(void **))sub_22457406C))
  {
LABEL_41:
    abort();
  }
}

void sub_223FE2D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223FE2D9C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

double sub_223FE2E04@<D0>(void *a1@<X1>, size_t a2@<X2>, int a3@<W3>, std::string *a4@<X8>)
{
  uint64_t v4;
  char **v6;
  double result;
  char v8;
  void **p_dst;
  size_t v10;
  void **v11;
  int v12;
  size_t v13;
  void **v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  size_t size;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  std::locale::__imp *v25;
  std::string *v26;
  const std::string::value_type *locale;
  std::string::size_type v28;
  unint64_t v31;
  size_t __sz;
  void **__dst;
  size_t v35;
  int64_t v36;
  std::string __p[2];
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  std::locale v46;
  std::string::size_type v47;
  int64_t v48;
  std::__shared_weak_count *v49;
  std::string v50[2];
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;

  v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a2 | 7) != 0x17)
    v4 = a2 | 7;
  if (a2 > 0x7FFFFFFFFFFFFFF7)
  {
    sub_223FE44A0((uint64_t)&v46, "floor", 1);
    sub_22316DBC0();
  }
  __sz = v4 + 1;
  v31 = (v4 + 1) | 0x8000000000000000;
  v6 = &off_24EC65138;
  do
  {
    sub_223FE44A0((uint64_t)&v46, *v6, 1);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    memset(__p, 0, 41);
    if (a2 >= 0x17)
    {
      p_dst = (void **)operator new(__sz);
      v35 = a2;
      v36 = v31;
      __dst = p_dst;
LABEL_13:
      memmove(p_dst, a1, a2);
      goto LABEL_14;
    }
    HIBYTE(v36) = a2;
    p_dst = (void **)&__dst;
    if (a2)
      goto LABEL_13;
LABEL_14:
    *((_BYTE *)p_dst + a2) = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    memset(v50, 0, 41);
    v10 = HIBYTE(v36);
    if (v36 >= 0)
      v11 = (void **)&__dst;
    else
      v11 = __dst;
    if (v36 < 0)
      v10 = v35;
    v12 = sub_223FEE994((uint64_t)&v46, (uint64_t)v11, (uint64_t)v11 + v10, (uint64_t)v50, 0);
    v13 = HIBYTE(v36);
    if (v36 >= 0)
      v14 = (void **)&__dst;
    else
      v14 = __dst;
    if (v36 < 0)
      v13 = v35;
    sub_223FF0CA0((uint64_t)__p, (uint64_t)v14, (uint64_t)v14 + v13, (uint64_t *)v50, 0);
    if (v50[0].__r_.__value_.__r.__words[0])
    {
      v50[0].__r_.__value_.__l.__size_ = v50[0].__r_.__value_.__r.__words[0];
      operator delete(v50[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36) < 0)
    {
      operator delete(__dst);
      v15 = (void *)__p[0].__r_.__value_.__r.__words[0];
      if (!__p[0].__r_.__value_.__r.__words[0])
        goto LABEL_29;
LABEL_28:
      operator delete(v15);
      goto LABEL_29;
    }
    v15 = (void *)__p[0].__r_.__value_.__r.__words[0];
    if (__p[0].__r_.__value_.__r.__words[0])
      goto LABEL_28;
LABEL_29:
    v16 = v49;
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    std::locale::~locale(&v46);
    v6 += 2;
    if (v6 == (char **)&unk_24EC65178)
      v8 = 1;
    else
      v8 = v12;
  }
  while ((v8 & 1) == 0);
  if (v12)
  {
    a4->__r_.__value_.__s.__data_[0] = 0;
    a4[1].__r_.__value_.__s.__data_[0] = 0;
    return result;
  }
  sub_223FE32D0((std::string::value_type *)a1, v50);
  if (a3)
  {
    v46.__locale_ = (std::locale::__imp *)sub_22323D798((uint64_t)&__dst, (uint64_t *)a1, a2);
    sub_22454D994(8, (uint64_t)&v46, (uint64_t)"0x", 2, __p);
    v19 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    else
      size = __p[0].__r_.__value_.__l.__size_;
    v21 = size + 1;
    if (size + 1 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v21 >= 0x17)
    {
      v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17)
        v23 = v21 | 7;
      v24 = v23 + 1;
      v25 = (std::locale::__imp *)operator new(v23 + 1);
      v47 = size + 1;
      v48 = v24 | 0x8000000000000000;
      v46.__locale_ = v25;
      *(_BYTE *)v25 = 95;
      v22 = (char *)v25 + 1;
    }
    else
    {
      v47 = 0;
      v48 = 0;
      HIBYTE(v48) = size + 1;
      v22 = (char *)&v46.__locale_ + 1;
      v46.__locale_ = (std::locale::__imp *)95;
      if (!size)
        goto LABEL_53;
    }
    if (v19 >= 0)
      v26 = __p;
    else
      v26 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    memmove(v22, v26, size);
LABEL_53:
    v22[size] = 0;
    if (v48 >= 0)
      locale = (const std::string::value_type *)&v46;
    else
      locale = (const std::string::value_type *)v46.__locale_;
    if (v48 >= 0)
      v28 = HIBYTE(v48);
    else
      v28 = v47;
    std::string::append(v50, locale, v28);
    if (SHIBYTE(v48) < 0)
    {
      operator delete(v46.__locale_);
      if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_61;
    }
    else if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_61:
  result = *(double *)&v50[0].__r_.__value_.__l.__data_;
  *a4 = v50[0];
  a4[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void sub_223FE31E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a39 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v39 - 185) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  if ((*(char *)(v39 - 185) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)(v39 - 208));
  _Unwind_Resume(exception_object);
}

void sub_223FE3258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::locale a31)
{
  sub_223FE43F0(&a31);
  _Unwind_Resume(a1);
}

void sub_223FE3270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::locale a34)
{
  uint64_t v34;
  void *v36;
  void *v37;

  v36 = *(void **)(v34 - 208);
  if (v36)
  {
    *(_QWORD *)(v34 - 200) = v36;
    operator delete(v36);
    if ((a19 & 0x80000000) == 0)
    {
LABEL_3:
      v37 = a20;
      if (!a20)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a19 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  v37 = a20;
  if (!a20)
  {
LABEL_4:
    sub_223FE43F0(&a34);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v37);
  sub_223FE43F0(&a34);
  _Unwind_Resume(a1);
}

void sub_223FE32D0(std::string::value_type *a1@<X0>, _QWORD *a2@<X8>)
{
  size_t v3;
  void *v4;
  char *v5;
  char *v6;
  size_t size;
  std::string *v8;
  _BYTE *v9;
  char v10;
  std::string *v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  std::string *v15;
  const char *v16;
  size_t v17;
  std::string *v18;
  _BYTE *v19;
  int v20;
  char *v21;
  int v22;
  char *v23;
  char *v24;
  char *v25;
  char v26;
  unsigned __int8 v27;
  std::string *v28;
  size_t v29;
  size_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  std::string::size_type v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char v39;
  unsigned __int8 v40;
  std::string *v41;
  size_t v42;
  size_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  std::string::size_type v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  char *v53;
  BOOL v54;
  void **v55;
  char *v56;
  char **v57;
  char *v58;
  unsigned __int8 v59;
  std::string *v60;
  char *v61;
  char v62;
  unsigned __int8 v63;
  std::string *v64;
  size_t v65;
  size_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  std::string::size_type v70;
  char *v71;
  size_t v72;
  unint64_t v73;
  uint64_t v74;
  std::string *v75;
  char *v76;
  char *v77;
  char *v78;
  char v79;
  unsigned __int8 v80;
  std::string *v81;
  size_t v82;
  size_t v83;
  unint64_t v84;
  uint64_t v85;
  void *v86;
  std::string::size_type v87;
  char *v88;
  std::string::value_type *v89;
  std::string::value_type *v90;
  int v91;
  int v92;
  void **v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  std::string *v98;
  std::string::size_type v99;
  _QWORD *v100;
  _QWORD *v101;
  void **v102;
  char *v103;
  char *v104;
  char *v105;
  char v106;
  unsigned __int8 v107;
  std::string *v108;
  size_t v109;
  size_t v110;
  unint64_t v111;
  uint64_t v112;
  void *v113;
  std::string::size_type v114;
  char *v115;
  std::string::value_type *v116;
  std::string::value_type *v117;
  int v118;
  int v119;
  _QWORD *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  int v125;
  std::string::size_type v126;
  std::string *v127;
  std::string::size_type v128;
  unint64_t v129;
  size_t v131;
  size_t v132;
  void *v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  unint64_t *p_shared_owners;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  void **v144;
  std::string v145;
  std::locale v146;
  std::__shared_weak_count *v147;
  std::string v148;
  std::locale v149;
  std::__shared_weak_count *v150;
  std::string *v151;
  std::string::value_type *v152;
  std::locale *v153;
  int v154;
  void *__p[2];
  _OWORD v156[2];
  char *v157;
  char *v158;
  char v159;
  char *v160;
  char *v161;
  char v162;
  char v163;
  uint64_t v164;
  __int128 v165;
  _BYTE v166[25];
  uint64_t v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  char v173;
  uint64_t v174;

  sub_223FE44A0((uint64_t)&v149, "([A-Z0-9#]{2})[A-Z0-9#]*", 1);
  memset(&v148, 0, sizeof(v148));
  v3 = strlen(a1);
  v151 = (std::string *)a1;
  v152 = &a1[v3];
  v153 = &v149;
  v154 = 0;
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v164 = 0;
  *(_OWORD *)__p = 0u;
  memset(v156, 0, 25);
  sub_223FEE994((uint64_t)&v149, (uint64_t)a1, (uint64_t)&a1[v3], (uint64_t)__p, 0);
  v4 = __p[1];
  if (__p[1] != __p[0])
  {
    v144 = (void **)v156 + 1;
    while (1)
    {
      v5 = v157;
      v6 = v158;
      while (v5 != v6)
      {
        v10 = *v5;
        if ((SHIBYTE(v148.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (HIBYTE(v148.__r_.__value_.__r.__words[2]) != 22)
          {
            size = HIBYTE(v148.__r_.__value_.__r.__words[2]);
            *((_BYTE *)&v148.__r_.__value_.__s + 23) = (*((_BYTE *)&v148.__r_.__value_.__s + 23) + 1) & 0x7F;
            v8 = &v148;
            goto LABEL_7;
          }
          v11 = &v148;
          size = 22;
LABEL_15:
          if (size + 1 > 2 * size)
            v13 = size + 1;
          else
            v13 = 2 * size;
          v14 = (v13 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v13 | 7) != 0x17)
            v14 = v13 | 7;
          if (v13 >= 0x17)
            v12 = v14 + 1;
          else
            v12 = 23;
LABEL_23:
          v15 = (std::string *)operator new(v12);
          v8 = v15;
          if (!size || (memmove(v15, v11, size), size != 22))
            operator delete(v11);
          v148.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
          v148.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
          goto LABEL_28;
        }
        size = (v148.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v148.__r_.__value_.__l.__size_ == size)
        {
          if ((v148.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
            sub_22316DBC0();
          v11 = (std::string *)v148.__r_.__value_.__r.__words[0];
          v12 = 0x7FFFFFFFFFFFFFF7;
          if (size < 0x3FFFFFFFFFFFFFF3)
            goto LABEL_15;
          goto LABEL_23;
        }
        size = v148.__r_.__value_.__l.__size_;
        v8 = (std::string *)v148.__r_.__value_.__r.__words[0];
LABEL_28:
        v148.__r_.__value_.__l.__size_ = size + 1;
LABEL_7:
        v9 = (char *)v8 + size;
        *v9 = v10;
        v9[1] = 0;
        ++v5;
      }
      v16 = "$1";
      do
      {
        while (1)
        {
          v20 = *(unsigned __int8 *)v16;
          if (v20 != 36)
            goto LABEL_99;
          v21 = (char *)(v16 + 1);
          if (v16 + 1 == "")
            goto LABEL_98;
          v22 = *v21;
          v20 = *v21;
          if (v22 > 38)
            break;
          if (v22 != 36)
          {
            if (v22 == 38)
            {
              v23 = *(char **)__p[0];
              v24 = (char *)*((_QWORD *)__p[0] + 1);
              if (*(char **)__p[0] == v24)
                goto LABEL_165;
              while (1)
              {
                while (1)
                {
                  v26 = *v23;
                  v27 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
                  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
                    break;
                  if (HIBYTE(v148.__r_.__value_.__r.__words[2]) == 22)
                  {
                    v28 = &v148;
                    v29 = 22;
                    goto LABEL_46;
                  }
                  *((_BYTE *)&v148.__r_.__value_.__s + 23) = (*((_BYTE *)&v148.__r_.__value_.__s + 23) + 1) & 0x7F;
                  v25 = (char *)&v148 + v27;
                  *v25 = v26;
                  v25[1] = 0;
                  if (++v23 == v24)
                    goto LABEL_165;
                }
                v29 = (v148.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (v148.__r_.__value_.__l.__size_ == v29)
                  break;
                v29 = v148.__r_.__value_.__l.__size_;
                v34 = v148.__r_.__value_.__r.__words[0];
LABEL_59:
                v148.__r_.__value_.__l.__size_ = v29 + 1;
                v35 = (char *)(v34 + v29);
                *v35 = v26;
                v35[1] = 0;
                if (++v23 == v24)
                  goto LABEL_165;
              }
              if ((v148.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                goto LABEL_290;
              v28 = (std::string *)v148.__r_.__value_.__r.__words[0];
              v30 = 0x7FFFFFFFFFFFFFF7;
              if (v29 < 0x3FFFFFFFFFFFFFF3)
              {
LABEL_46:
                if (v29 + 1 > 2 * v29)
                  v31 = v29 + 1;
                else
                  v31 = 2 * v29;
                v32 = (v31 & 0x7FFFFFFFFFFFFFF8) + 8;
                if ((v31 | 7) != 0x17)
                  v32 = v31 | 7;
                if (v31 >= 0x17)
                  v30 = v32 + 1;
                else
                  v30 = 23;
              }
              v33 = operator new(v30);
              v34 = (std::string::size_type)v33;
              if (!v29 || (memmove(v33, v28, v29), v29 != 22))
                operator delete(v28);
              v148.__r_.__value_.__r.__words[0] = v34;
              v148.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
              goto LABEL_59;
            }
            goto LABEL_87;
          }
          ++v16;
          v59 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_125:
            v17 = (v148.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if (v148.__r_.__value_.__l.__size_ == v17)
            {
              if ((v148.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
LABEL_290:
                sub_22316DBC0();
              v60 = (std::string *)v148.__r_.__value_.__r.__words[0];
              v72 = 0x7FFFFFFFFFFFFFF7;
              if (v17 < 0x3FFFFFFFFFFFFFF3)
              {
LABEL_128:
                if (v17 + 1 > 2 * v17)
                  v73 = v17 + 1;
                else
                  v73 = 2 * v17;
                v74 = (v73 & 0x7FFFFFFFFFFFFFF8) + 8;
                if ((v73 | 7) != 0x17)
                  v74 = v73 | 7;
                if (v73 >= 0x17)
                  v72 = v74 + 1;
                else
                  v72 = 23;
              }
              v75 = (std::string *)operator new(v72);
              v18 = v75;
              if (!v17 || (memmove(v75, v60, v17), v17 != 22))
                operator delete(v60);
              v148.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
              v148.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
            }
            else
            {
              v17 = v148.__r_.__value_.__l.__size_;
              v18 = (std::string *)v148.__r_.__value_.__r.__words[0];
            }
            v148.__r_.__value_.__l.__size_ = v17 + 1;
            goto LABEL_31;
          }
LABEL_100:
          if (v59 == 22)
          {
            v60 = &v148;
            v17 = 22;
            goto LABEL_128;
          }
          v17 = v59;
          *((_BYTE *)&v148.__r_.__value_.__s + 23) = (v59 + 1) & 0x7F;
          v18 = &v148;
LABEL_31:
          v19 = (char *)v18 + v17;
          *v19 = v20;
          v19[1] = 0;
          if (++v16 == "")
            goto LABEL_166;
        }
        if (v22 == 39)
        {
          v76 = v160;
          v77 = v161;
          if (v160 == v161)
            goto LABEL_165;
          while (2)
          {
            while (2)
            {
              v79 = *v76;
              v80 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
              if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
              {
                v82 = (v148.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (v148.__r_.__value_.__l.__size_ == v82)
                {
                  if ((v148.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                    goto LABEL_290;
                  v81 = (std::string *)v148.__r_.__value_.__r.__words[0];
                  v83 = 0x7FFFFFFFFFFFFFF7;
                  if (v82 < 0x3FFFFFFFFFFFFFF3)
                    goto LABEL_151;
                  goto LABEL_159;
                }
                v82 = v148.__r_.__value_.__l.__size_;
                v87 = v148.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (HIBYTE(v148.__r_.__value_.__r.__words[2]) != 22)
                {
                  *((_BYTE *)&v148.__r_.__value_.__s + 23) = (*((_BYTE *)&v148.__r_.__value_.__s + 23) + 1) & 0x7F;
                  v78 = (char *)&v148 + v80;
                  *v78 = v79;
                  v78[1] = 0;
                  if (++v76 == v77)
                    goto LABEL_165;
                  continue;
                }
                v81 = &v148;
                v82 = 22;
LABEL_151:
                if (v82 + 1 > 2 * v82)
                  v84 = v82 + 1;
                else
                  v84 = 2 * v82;
                v85 = (v84 & 0x7FFFFFFFFFFFFFF8) + 8;
                if ((v84 | 7) != 0x17)
                  v85 = v84 | 7;
                if (v84 >= 0x17)
                  v83 = v85 + 1;
                else
                  v83 = 23;
LABEL_159:
                v86 = operator new(v83);
                v87 = (std::string::size_type)v86;
                if (!v82 || (memmove(v86, v81, v82), v82 != 22))
                  operator delete(v81);
                v148.__r_.__value_.__r.__words[0] = v87;
                v148.__r_.__value_.__r.__words[2] = v83 | 0x8000000000000000;
              }
              break;
            }
            v148.__r_.__value_.__l.__size_ = v82 + 1;
            v88 = (char *)(v87 + v82);
            *v88 = v79;
            v88[1] = 0;
            if (++v76 == v77)
              goto LABEL_165;
            continue;
          }
        }
        if (v22 == 96)
        {
          v36 = v157;
          v37 = v158;
          if (v157 == v158)
            goto LABEL_165;
          while (2)
          {
            while (2)
            {
              v39 = *v36;
              v40 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
              if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
              {
                v42 = (v148.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (v148.__r_.__value_.__l.__size_ == v42)
                {
                  if ((v148.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                    goto LABEL_290;
                  v41 = (std::string *)v148.__r_.__value_.__r.__words[0];
                  v43 = 0x7FFFFFFFFFFFFFF7;
                  if (v42 < 0x3FFFFFFFFFFFFFF3)
                    goto LABEL_72;
                  goto LABEL_80;
                }
                v42 = v148.__r_.__value_.__l.__size_;
                v47 = v148.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (HIBYTE(v148.__r_.__value_.__r.__words[2]) != 22)
                {
                  *((_BYTE *)&v148.__r_.__value_.__s + 23) = (*((_BYTE *)&v148.__r_.__value_.__s + 23) + 1) & 0x7F;
                  v38 = (char *)&v148 + v40;
                  *v38 = v39;
                  v38[1] = 0;
                  if (++v36 == v37)
                    goto LABEL_165;
                  continue;
                }
                v41 = &v148;
                v42 = 22;
LABEL_72:
                if (v42 + 1 > 2 * v42)
                  v44 = v42 + 1;
                else
                  v44 = 2 * v42;
                v45 = (v44 & 0x7FFFFFFFFFFFFFF8) + 8;
                if ((v44 | 7) != 0x17)
                  v45 = v44 | 7;
                if (v44 >= 0x17)
                  v43 = v45 + 1;
                else
                  v43 = 23;
LABEL_80:
                v46 = operator new(v43);
                v47 = (std::string::size_type)v46;
                if (!v42 || (memmove(v46, v41, v42), v42 != 22))
                  operator delete(v41);
                v148.__r_.__value_.__r.__words[0] = v47;
                v148.__r_.__value_.__r.__words[2] = v43 | 0x8000000000000000;
              }
              break;
            }
            v148.__r_.__value_.__l.__size_ = v42 + 1;
            v48 = (char *)(v47 + v42);
            *v48 = v39;
            v48[1] = 0;
            if (++v36 == v37)
              goto LABEL_165;
            continue;
          }
        }
LABEL_87:
        if ((v20 - 48) > 9)
        {
LABEL_98:
          LOBYTE(v20) = 36;
LABEL_99:
          v59 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_125;
          goto LABEL_100;
        }
        v49 = *v21 - 48;
        if (v16 != "$1")
        {
          v50 = *((unsigned __int8 *)v16 + 2);
          v51 = v50 - 48;
          v52 = v50 + 10 * (int)v49 - 48;
          if (v51 > 9)
          {
            v21 = (char *)(v16 + 1);
          }
          else
          {
            v49 = v52;
            v21 = (char *)(v16 + 2);
          }
        }
        v53 = (char *)__p[0] + 24 * (int)v49;
        v54 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3) > v49;
        v55 = v144;
        if (v54)
          v55 = (void **)v53;
        v56 = (char *)*v55;
        v57 = (char **)(v53 + 8);
        if (!v54)
          v57 = (char **)&v156[1];
        v58 = *v57;
        if (v56 != *v57)
        {
          while (1)
          {
            while (1)
            {
              v62 = *v56;
              v63 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
              if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
                break;
              if (HIBYTE(v148.__r_.__value_.__r.__words[2]) == 22)
              {
                v64 = &v148;
                v65 = 22;
                goto LABEL_109;
              }
              *((_BYTE *)&v148.__r_.__value_.__s + 23) = (*((_BYTE *)&v148.__r_.__value_.__s + 23) + 1) & 0x7F;
              v61 = (char *)&v148 + v63;
              *v61 = v62;
              v61[1] = 0;
              if (++v56 == v58)
                goto LABEL_165;
            }
            v65 = (v148.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if (v148.__r_.__value_.__l.__size_ == v65)
              break;
            v65 = v148.__r_.__value_.__l.__size_;
            v70 = v148.__r_.__value_.__r.__words[0];
LABEL_122:
            v148.__r_.__value_.__l.__size_ = v65 + 1;
            v71 = (char *)(v70 + v65);
            *v71 = v62;
            v71[1] = 0;
            if (++v56 == v58)
              goto LABEL_165;
          }
          if ((v148.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
            goto LABEL_290;
          v64 = (std::string *)v148.__r_.__value_.__r.__words[0];
          v66 = 0x7FFFFFFFFFFFFFF7;
          if (v65 < 0x3FFFFFFFFFFFFFF3)
          {
LABEL_109:
            if (v65 + 1 > 2 * v65)
              v67 = v65 + 1;
            else
              v67 = 2 * v65;
            v68 = (v67 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v67 | 7) != 0x17)
              v68 = v67 | 7;
            if (v67 >= 0x17)
              v66 = v68 + 1;
            else
              v66 = 23;
          }
          v69 = operator new(v66);
          v70 = (std::string::size_type)v69;
          if (!v65 || (memmove(v69, v64, v65), v65 != 22))
            operator delete(v64);
          v148.__r_.__value_.__r.__words[0] = v70;
          v148.__r_.__value_.__r.__words[2] = v66 | 0x8000000000000000;
          goto LABEL_122;
        }
LABEL_165:
        v16 = v21 + 1;
      }
      while (v21 + 1 != "");
LABEL_166:
      v89 = v160;
      v90 = v161;
      v91 = v154;
      v92 = v154 | 0x800;
      v154 |= 0x800u;
      v4 = __p[0];
      v93 = v144;
      if (__p[1] != __p[0])
        v93 = (void **)__p[0];
      v94 = (uint64_t *)((char *)__p[0] + 8);
      if (__p[1] == __p[0])
        v94 = (uint64_t *)&v156[1];
      v95 = *v94;
      v96 = (uint64_t)v152;
      if (*v93 != (void *)*v94)
      {
LABEL_171:
        v154 = v92 | 0x80;
        v97 = sub_223FEE994((uint64_t)v153, v95, v96, (uint64_t)__p, v92 | 0x80u);
        v4 = __p[0];
        if ((v97 & 1) != 0)
          goto LABEL_4;
LABEL_176:
        if (v4)
        {
          __p[1] = v4;
          operator delete(v4);
        }
        v4 = 0;
        v163 = 0;
        *(_OWORD *)__p = 0u;
        memset(v156, 0, 25);
        v157 = 0;
        v158 = 0;
        v159 = 0;
        v160 = 0;
        v161 = 0;
        v162 = 0;
        v164 = 0;
        goto LABEL_4;
      }
      if ((std::string::value_type *)v95 == v152)
        goto LABEL_176;
      if (!sub_223FEE994((uint64_t)v153, *v94, (uint64_t)v152, (uint64_t)__p, v91 | 0x860u))
      {
        ++v95;
        v92 = v154;
        v96 = (uint64_t)v152;
        goto LABEL_171;
      }
      v4 = __p[0];
LABEL_4:
      if (__p[1] == v4)
      {
        if (v89 == v90)
          goto LABEL_185;
        do
          std::string::push_back(&v148, *v89++);
        while (v89 != v90);
        goto LABEL_184;
      }
    }
  }
  if (!v3)
    goto LABEL_185;
  do
  {
    std::string::push_back(&v148, *a1++);
    --v3;
  }
  while (v3);
LABEL_184:
  v4 = __p[0];
LABEL_185:
  if (v4)
  {
    __p[1] = v4;
    operator delete(v4);
  }
  sub_223FE44A0((uint64_t)&v146, "[)(]", 1);
  memset(&v145, 0, sizeof(v145));
  if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v98 = &v148;
  else
    v98 = (std::string *)v148.__r_.__value_.__r.__words[0];
  if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v99 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
  else
    v99 = v148.__r_.__value_.__l.__size_;
  v151 = v98;
  v152 = (char *)v98 + v99;
  v153 = &v146;
  v154 = 0;
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v164 = 0;
  *(_OWORD *)__p = 0u;
  memset(v156, 0, 25);
  v167 = 0;
  v168 = 0;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v165 = 0u;
  memset(v166, 0, sizeof(v166));
  sub_223FEE994((uint64_t)&v146, (uint64_t)v98, (uint64_t)v98 + v99, (uint64_t)&v165, 0);
  v144 = __p;
  sub_223FF0CA0((uint64_t)__p, (uint64_t)v98, (uint64_t)v98 + v99, (uint64_t *)&v165, 0);
  if ((_QWORD)v165)
  {
    *((_QWORD *)&v165 + 1) = v165;
    operator delete((void *)v165);
  }
  v100 = __p[0];
  v101 = __p[1];
  if (__p[1] == __p[0])
  {
    for (; v99; --v99)
    {
      std::string::push_back(&v145, v98->__r_.__value_.__s.__data_[0]);
      v98 = (std::string *)((char *)v98 + 1);
    }
    v100 = v101;
    goto LABEL_247;
  }
  do
  {
    v103 = v157;
    v104 = v158;
    if (v157 != v158)
    {
      while (1)
      {
        while (1)
        {
          v106 = *v103;
          v107 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
            break;
          if (HIBYTE(v145.__r_.__value_.__r.__words[2]) == 22)
          {
            v108 = &v145;
            v109 = 22;
            goto LABEL_209;
          }
          *((_BYTE *)&v145.__r_.__value_.__s + 23) = (*((_BYTE *)&v145.__r_.__value_.__s + 23) + 1) & 0x7F;
          v105 = (char *)&v145 + v107;
          *v105 = v106;
          v105[1] = 0;
          if (++v103 == v104)
            goto LABEL_223;
        }
        v109 = (v145.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v145.__r_.__value_.__l.__size_ == v109)
          break;
        v109 = v145.__r_.__value_.__l.__size_;
        v114 = v145.__r_.__value_.__r.__words[0];
LABEL_222:
        v145.__r_.__value_.__l.__size_ = v109 + 1;
        v115 = (char *)(v114 + v109);
        *v115 = v106;
        v115[1] = 0;
        if (++v103 == v104)
        {
LABEL_223:
          v100 = __p[0];
          v101 = __p[1];
          goto LABEL_224;
        }
      }
      if ((v145.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
        sub_22316DBC0();
      v108 = (std::string *)v145.__r_.__value_.__r.__words[0];
      v110 = 0x7FFFFFFFFFFFFFF7;
      if (v109 < 0x3FFFFFFFFFFFFFF3)
      {
LABEL_209:
        if (v109 + 1 > 2 * v109)
          v111 = v109 + 1;
        else
          v111 = 2 * v109;
        v112 = (v111 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v111 | 7) != 0x17)
          v112 = v111 | 7;
        if (v111 >= 0x17)
          v110 = v112 + 1;
        else
          v110 = 23;
      }
      v113 = operator new(v110);
      v114 = (std::string::size_type)v113;
      if (!v109 || (memmove(v113, v108, v109), v109 != 22))
        operator delete(v108);
      v145.__r_.__value_.__r.__words[0] = v114;
      v145.__r_.__value_.__r.__words[2] = v110 | 0x8000000000000000;
      goto LABEL_222;
    }
LABEL_224:
    v116 = v160;
    v117 = v161;
    v118 = v154;
    v119 = v154 | 0x800;
    v154 |= 0x800u;
    v120 = (_QWORD *)v156 + 1;
    if (v101 != v100)
      v120 = v100;
    v121 = v100 + 1;
    if (v101 == v100)
      v121 = (uint64_t *)&v156[1];
    v122 = *v121;
    v123 = (uint64_t)v152;
    if (*v120 == *v121)
    {
      if (v152 == (std::string::value_type *)v122)
      {
        if (!v100)
          goto LABEL_198;
        __p[1] = v100;
LABEL_197:
        operator delete(v100);
LABEL_198:
        v100 = 0;
        v163 = 0;
        v102 = v144;
        *(_OWORD *)v144 = 0u;
        *((_OWORD *)v102 + 1) = 0u;
        *(_OWORD *)((char *)v102 + 25) = 0u;
        v157 = 0;
        v158 = 0;
        v159 = 0;
        v160 = 0;
        v161 = 0;
        v162 = 0;
        v164 = 0;
        goto LABEL_199;
      }
      v167 = 0;
      v168 = 0;
      v169 = 0;
      v170 = 0;
      v171 = 0;
      v172 = 0;
      v173 = 0;
      v174 = 0;
      v165 = 0u;
      memset(v166, 0, sizeof(v166));
      v125 = sub_223FEE994((uint64_t)v153, v122, (uint64_t)v152, (uint64_t)&v165, v118 | 0x860u);
      sub_223FF0CA0((uint64_t)v144, v122, v123, (uint64_t *)&v165, 1);
      if ((_QWORD)v165)
      {
        *((_QWORD *)&v165 + 1) = v165;
        operator delete((void *)v165);
      }
      if (v125)
      {
        v100 = __p[0];
        goto LABEL_199;
      }
      ++v122;
      v119 = v154;
      v123 = (uint64_t)v152;
    }
    v154 = v119 | 0x80;
    v167 = 0;
    v168 = 0;
    v169 = 0;
    v170 = 0;
    v171 = 0;
    v172 = 0;
    v173 = 0;
    v174 = 0;
    v165 = 0u;
    memset(v166, 0, sizeof(v166));
    v124 = sub_223FEE994((uint64_t)v153, v122, v123, (uint64_t)&v165, v119 | 0x80u);
    sub_223FF0CA0((uint64_t)v144, v122, v123, (uint64_t *)&v165, (v119 & 0x800) != 0);
    if ((_QWORD)v165)
    {
      *((_QWORD *)&v165 + 1) = v165;
      operator delete((void *)v165);
    }
    v100 = __p[0];
    if ((v124 & 1) == 0)
    {
      if (!__p[0])
        goto LABEL_198;
      goto LABEL_197;
    }
LABEL_199:
    v101 = __p[1];
  }
  while (__p[1] != v100);
  while (v116 != v117)
    std::string::push_back(&v145, *v116++);
LABEL_247:
  if (v100)
  {
    __p[1] = v100;
    operator delete(v100);
  }
  v126 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
  if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v127 = &v145;
  else
    v127 = (std::string *)v145.__r_.__value_.__r.__words[0];
  if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v126 = v145.__r_.__value_.__l.__size_;
  v128 = v126 - 1;
  while (v128 != -1)
  {
    v129 = v127->__r_.__value_.__s.__data_[v128--];
    if (v129 > 0x3F || ((1 << v129) & 0x100003E00) == 0)
    {
      v131 = v128 + 2;
      goto LABEL_263;
    }
  }
  v131 = 0;
LABEL_263:
  if (v126 >= v131)
    v132 = v131;
  else
    v132 = v126;
  if (v132 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v132 >= 0x17)
  {
    v135 = (v132 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v132 | 7) != 0x17)
      v135 = v132 | 7;
    v136 = v135 + 1;
    v137 = operator new(v135 + 1);
    a2[1] = v132;
    a2[2] = v136 | 0x8000000000000000;
    *a2 = v137;
    v133 = v137;
  }
  else
  {
    v133 = a2;
    *((_BYTE *)a2 + 23) = v132;
    if (!v132)
    {
      *(_BYTE *)a2 = 0;
      if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_270;
      goto LABEL_276;
    }
  }
  memmove(v133, v127, v132);
  *((_BYTE *)v133 + v132) = 0;
  if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_270:
    v134 = v147;
    if (!v147)
      goto LABEL_280;
    goto LABEL_277;
  }
LABEL_276:
  operator delete(v145.__r_.__value_.__l.__data_);
  v134 = v147;
  if (!v147)
    goto LABEL_280;
LABEL_277:
  p_shared_owners = (unint64_t *)&v134->__shared_owners_;
  do
    v139 = __ldaxr(p_shared_owners);
  while (__stlxr(v139 - 1, p_shared_owners));
  if (!v139)
  {
    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
    std::__shared_weak_count::__release_weak(v134);
    std::locale::~locale(&v146);
    if ((SHIBYTE(v148.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_282;
    goto LABEL_281;
  }
LABEL_280:
  std::locale::~locale(&v146);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
LABEL_281:
    operator delete(v148.__r_.__value_.__l.__data_);
LABEL_282:
  v140 = v150;
  if (v150)
  {
    v141 = (unint64_t *)&v150->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  std::locale::~locale(&v149);
}

void sub_223FE42F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,std::locale a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  if (a34 < 0)
  {
    operator delete(__p);
    sub_223FE43F0(&a35);
    _Unwind_Resume(a1);
  }
  sub_223FE43F0(&a35);
  _Unwind_Resume(a1);
}

void sub_223FE43F0(std::locale *this)
{
  std::locale::__imp *locale;
  unint64_t *v3;
  unint64_t v4;

  locale = this[6].__locale_;
  if (!locale)
    goto LABEL_5;
  v3 = (unint64_t *)((char *)locale + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (!v4)
  {
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)locale);
    std::locale::~locale(this);
  }
  else
  {
LABEL_5:
    std::locale::~locale(this);
  }
}

void sub_223FE4458(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC65188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223FE4468(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC65188;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FE44A0(uint64_t a1, char *a2, int a3)
{
  const std::locale *v6;
  size_t v7;

  v6 = (const std::locale *)MEMORY[0x227684AFC]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x24BEDB350]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x24BEDB4B0]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  v7 = strlen(a2);
  if (sub_223FE456C(a1, a2, &a2[v7]) != &a2[v7])
    sub_223FE4A34();
  return a1;
}

void sub_223FE453C(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  sub_223167354(v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_223FE4558(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *sub_223FE456C(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_24EC651D8;
  v7 = (_QWORD *)operator new();
  *v7 = &unk_24EC65280;
  v7[1] = v6;
  v8 = (_QWORD *)operator new();
  *v8 = &unk_24EC65230;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v12 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 56) = v12;
      v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if (v13 <= 0x3F)
        goto LABEL_6;
LABEL_11:
      if (v13 != 64)
      {
        if (v13 == 128)
          return sub_223FE5060(a1, a2, a3);
        if (v13 == 256)
          return sub_223FE5270(a1, a2, a3);
LABEL_38:
        sub_223FE5480();
      }
      return sub_223FE4EC4(a1, a2, a3);
    }
  }
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v13 > 0x3F)
    goto LABEL_11;
LABEL_6:
  if (v13)
  {
    if (v13 == 16)
      return sub_223FE4D2C(a1, (unsigned __int8 *)a2, a3);
    if (v13 != 32)
      goto LABEL_38;
    return sub_223FE4EC4(a1, a2, a3);
  }
  v15 = a2;
  while (1)
  {
    v16 = v15;
    v15 = sub_223FE56FC(a1, v15, a3);
    if (v15 == v16)
      break;
LABEL_17:
    if (v15 == v16)
      goto LABEL_23;
  }
  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_DWORD *)(a1 + 28);
  v19 = sub_223FE5A70(a1, v16, a3);
  if (v19 != (unsigned __int8 *)v16)
  {
    v15 = sub_223FE5CEC(a1, (char *)v19, a3, v17, v18 + 1, *(_DWORD *)(a1 + 28) + 1);
    goto LABEL_17;
  }
LABEL_23:
  if (v16 == a2)
  {
    v20 = (_QWORD *)operator new();
    v21 = *(_QWORD *)(a1 + 56);
    v22 = *(_QWORD *)(v21 + 8);
    *v20 = &unk_24EC65280;
    v20[1] = v22;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v16 == a3)
    return a3;
  while (2)
  {
    if (*v16 != 124)
      return v16;
    v29 = *(_QWORD *)(a1 + 56);
    v30 = v16 + 1;
    v31 = v16 + 1;
    while (2)
    {
      v16 = v31;
      v31 = sub_223FE56FC(a1, v31, a3);
      if (v31 != v16)
      {
LABEL_32:
        if (v31 == v16)
          goto LABEL_27;
        continue;
      }
      break;
    }
    v32 = *(_QWORD *)(a1 + 56);
    v33 = *(_DWORD *)(a1 + 28);
    v34 = sub_223FE5A70(a1, v16, a3);
    if (v34 != (unsigned __int8 *)v16)
    {
      v31 = sub_223FE5CEC(a1, (char *)v34, a3, v32, v33 + 1, *(_DWORD *)(a1 + 28) + 1);
      goto LABEL_32;
    }
LABEL_27:
    if (v16 == v30)
    {
      v35 = (_QWORD *)operator new();
      v36 = *(_QWORD *)(a1 + 56);
      v37 = *(_QWORD *)(v36 + 8);
      *v35 = &unk_24EC65280;
      v35[1] = v37;
      *(_QWORD *)(v36 + 8) = v35;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    v23 = (_QWORD *)operator new();
    v24 = *(_QWORD *)(v29 + 8);
    v23[1] = *(_QWORD *)(v12 + 8);
    v23[2] = v24;
    *v23 = &unk_24EC657F0;
    *(_QWORD *)(v12 + 8) = v23;
    *(_QWORD *)(v29 + 8) = 0;
    v25 = (_QWORD *)operator new();
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *v25 = &unk_24EC65280;
    v25[1] = v26;
    *(_QWORD *)(v29 + 8) = v25;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v27 = (_QWORD *)operator new();
    v28 = *(_QWORD *)(v29 + 8);
    *v27 = &unk_24EC65838;
    v27[1] = v28;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v27;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v29 + 8);
    if (v16 != a3)
      continue;
    return a3;
  }
}

void sub_223FE49EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_223FE4A18(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_223FE4A34()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x227684424](exception, 17);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_223FE4A6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_223FE4A80(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = a2;
  while (1)
  {
    v8 = v7;
    v7 = sub_223FE56FC(a1, v7, a3);
    if (v7 == v8)
      break;
LABEL_2:
    if (v7 == v8)
      goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(a1 + 28);
  v11 = (char *)sub_223FE5A70(a1, v8, a3);
  if (v11 != v8)
  {
    v7 = sub_223FE5CEC(a1, v11, a3, v9, v10 + 1, *(_DWORD *)(a1 + 28) + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == a2)
  {
    v12 = (_QWORD *)operator new();
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
    *v12 = &unk_24EC65280;
    v12[1] = v14;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v8 == a3)
    return a3;
  while (2)
  {
    if (*v8 != 124)
      return v8;
    v21 = *(_QWORD *)(a1 + 56);
    v22 = v8 + 1;
    v23 = v8 + 1;
    while (2)
    {
      v8 = v23;
      v23 = sub_223FE56FC(a1, v23, a3);
      if (v23 != v8)
      {
LABEL_14:
        if (v23 == v8)
          goto LABEL_17;
        continue;
      }
      break;
    }
    v24 = *(_QWORD *)(a1 + 56);
    v25 = *(_DWORD *)(a1 + 28);
    v26 = (char *)sub_223FE5A70(a1, v8, a3);
    if (v26 != v8)
    {
      v23 = sub_223FE5CEC(a1, v26, a3, v24, v25 + 1, *(_DWORD *)(a1 + 28) + 1);
      goto LABEL_14;
    }
LABEL_17:
    if (v8 == v22)
    {
      v27 = (_QWORD *)operator new();
      v28 = *(_QWORD *)(a1 + 56);
      v29 = *(_QWORD *)(v28 + 8);
      *v27 = &unk_24EC65280;
      v27[1] = v29;
      *(_QWORD *)(v28 + 8) = v27;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    v15 = (_QWORD *)operator new();
    v16 = *(_QWORD *)(v21 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_24EC657F0;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v21 + 8) = 0;
    v17 = (_QWORD *)operator new();
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *v17 = &unk_24EC65280;
    v17[1] = v18;
    *(_QWORD *)(v21 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = (_QWORD *)operator new();
    v20 = *(_QWORD *)(v21 + 8);
    *v19 = &unk_24EC65838;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v21 + 8);
    if (v8 != a3)
      continue;
    return a3;
  }
}

char *sub_223FE4D2C(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unsigned __int8 *v3;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a2;
  if (a2 == (unsigned __int8 *)a3)
    return (char *)a2;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &unk_24EC65328;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)a3)
  {
    while (v3 != (unsigned __int8 *)a3)
    {
      v10 = v3;
      v11 = *(_QWORD *)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = (unsigned __int8 *)sub_223FEDB2C(a1, (uint64_t)v10, a3);
      if (v13 != v10)
      {
        v3 = sub_223FEDD70(a1, v13, (unsigned __int8 *)a3, v11, v12 + 1, *(_DWORD *)(a1 + 28) + 1);
        if (v3 != v10)
          continue;
      }
      if (v10 + 1 != (unsigned __int8 *)a3 || *v10 != 36)
        sub_223FEDAE0();
      v14 = operator new();
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)v14 = &unk_24EC65370;
      *(_QWORD *)(v14 + 8) = v17;
      *(_BYTE *)(v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

char *sub_223FE4EC4(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = sub_223FEE588(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_13;
  do
  {
    v8 = v7;
    v7 = sub_223FEE588(a1, v7, v3);
  }
  while (v7 != v8);
  if (v8 == a2)
LABEL_13:
    sub_223FEDAE0();
  if (v8 != v3)
  {
    while (*v8 == 124)
    {
      v9 = *(_QWORD *)(a1 + 56);
      v10 = v8 + 1;
      v11 = sub_223FEE588(a1, v8 + 1, v3);
      if (v11 == v8 + 1)
        goto LABEL_13;
      do
      {
        v8 = v11;
        v11 = sub_223FEE588(a1, v11, v3);
      }
      while (v11 != v8);
      if (v8 == v10)
        goto LABEL_13;
      v12 = (_QWORD *)operator new();
      v13 = *(_QWORD *)(v9 + 8);
      v12[1] = *(_QWORD *)(v6 + 8);
      v12[2] = v13;
      *v12 = &unk_24EC657F0;
      *(_QWORD *)(v6 + 8) = v12;
      *(_QWORD *)(v9 + 8) = 0;
      v14 = (_QWORD *)operator new();
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      *v14 = &unk_24EC65280;
      v14[1] = v15;
      *(_QWORD *)(v9 + 8) = v14;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
      v16 = (_QWORD *)operator new();
      v17 = *(_QWORD *)(v9 + 8);
      *v16 = &unk_24EC65838;
      v16[1] = v17;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
      if (v8 == v3)
        return v3;
    }
    return v8;
  }
  return v3;
}

char *sub_223FE5060(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = (_QWORD *)operator new();
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(_QWORD *)(v11 + 8);
    *v10 = &unk_24EC65280;
    v10[1] = v12;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  else
  {
    sub_223FE4D2C(a1, (unsigned __int8 *)__s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  v13 = *(_QWORD *)(a1 + 56);
  do
  {
    v23 = (char *)memchr(v9, 10, a3 - v9);
    if (v23)
      v24 = v23;
    else
      v24 = a3;
    if (v24 == v9)
    {
      v14 = (_QWORD *)operator new();
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(v15 + 8);
      *v14 = &unk_24EC65280;
      v14[1] = v16;
      *(_QWORD *)(v15 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      sub_223FE4D2C(a1, (unsigned __int8 *)v9, v24);
    }
    v17 = (_QWORD *)operator new();
    v18 = *(_QWORD *)(v13 + 8);
    v17[1] = *(_QWORD *)(v6 + 8);
    v17[2] = v18;
    *v17 = &unk_24EC657F0;
    *(_QWORD *)(v6 + 8) = v17;
    *(_QWORD *)(v13 + 8) = 0;
    v19 = (_QWORD *)operator new();
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *v19 = &unk_24EC65280;
    v19[1] = v20;
    *(_QWORD *)(v13 + 8) = v19;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v21 = (_QWORD *)operator new();
    v22 = *(_QWORD *)(v13 + 8);
    *v21 = &unk_24EC65838;
    v21[1] = v22;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v21;
    v13 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)(a1 + 56) = v13;
    if (v24 == a3)
      v9 = v24;
    else
      v9 = v24 + 1;
  }
  while (v9 != a3);
  return a3;
}

char *sub_223FE5270(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = (_QWORD *)operator new();
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(_QWORD *)(v11 + 8);
    *v10 = &unk_24EC65280;
    v10[1] = v12;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  else
  {
    sub_223FE4EC4(a1, __s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  v13 = *(_QWORD *)(a1 + 56);
  do
  {
    v23 = (char *)memchr(v9, 10, a3 - v9);
    if (v23)
      v24 = v23;
    else
      v24 = a3;
    if (v24 == v9)
    {
      v14 = (_QWORD *)operator new();
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(v15 + 8);
      *v14 = &unk_24EC65280;
      v14[1] = v16;
      *(_QWORD *)(v15 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      sub_223FE4EC4(a1, v9, v24);
    }
    v17 = (_QWORD *)operator new();
    v18 = *(_QWORD *)(v13 + 8);
    v17[1] = *(_QWORD *)(v6 + 8);
    v17[2] = v18;
    *v17 = &unk_24EC657F0;
    *(_QWORD *)(v6 + 8) = v17;
    *(_QWORD *)(v13 + 8) = 0;
    v19 = (_QWORD *)operator new();
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *v19 = &unk_24EC65280;
    v19[1] = v20;
    *(_QWORD *)(v13 + 8) = v19;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v21 = (_QWORD *)operator new();
    v22 = *(_QWORD *)(v13 + 8);
    *v21 = &unk_24EC65838;
    v21[1] = v22;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v21;
    v13 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)(a1 + 56) = v13;
    if (v24 == a3)
      v9 = v24;
    else
      v9 = v24 + 1;
  }
  while (v9 != a3);
  return a3;
}

void sub_223FE5480()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x227684424](exception, 14);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_223FE54B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223FE54D0()
{
  JUMPOUT(0x227684CE8);
}

void sub_223FE54E4(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void sub_223FE54FC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FE5520(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223FE5538(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000224693777)
    return a1 + 24;
  if (((v3 & 0x8000000224693777 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000224693777))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000224693777 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

_QWORD *sub_223FE55B8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24EC652F8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223FE55FC(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24EC652F8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FE5650(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_223FE5664(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24EC652F8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223FE56A8(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24EC652F8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x227684CE8);
}

char *sub_223FE56FC(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  BOOL v8;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v20;
  char *v21;
  int v22;
  uint64_t v23;
  int v24;
  std::locale v25[3];
  int v26;
  int v27;

  if (a2 == a3)
    return a2;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v15 = a2[1];
        if (v15 == 66)
        {
          v16 = operator new();
          v23 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_24EC653B8;
          *(_QWORD *)(v16 + 8) = v23;
          std::locale::locale((std::locale *)(v16 + 16), (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          *(_BYTE *)(v16 + 40) = 1;
        }
        else
        {
          if (v15 != 98)
            return a2;
          v16 = operator new();
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_24EC653B8;
          *(_QWORD *)(v16 + 8) = v17;
          std::locale::locale((std::locale *)(v16 + 16), (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          *(_BYTE *)(v16 + 40) = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return a2 + 2;
      }
      return a2;
    }
    if (v6 != 94)
      return a2;
    v10 = operator new();
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    v14 = (char *)&unk_24EC65318;
LABEL_14:
    *(_QWORD *)v10 = v14 + 16;
    *(_QWORD *)(v10 + 8) = v13;
    *(_BYTE *)(v10 + 16) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    v10 = operator new();
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    v14 = (char *)&unk_24EC65360;
    goto LABEL_14;
  }
  v8 = v6 == 40;
  v7 = a2 + 1;
  v8 = !v8 || v7 == a3;
  if (v8)
    return a2;
  v8 = *v7 == 63;
  v18 = a2 + 2;
  if (!v8 || v18 == a3)
    return a2;
  v20 = *v18;
  if (v20 == 33)
  {
    sub_223FE66B0((uint64_t)v25);
    v26 = *(_DWORD *)(a1 + 24);
    v21 = (char *)sub_223FE456C(v25, a2 + 3, a3);
    v24 = v27;
    sub_223FE671C(a1, (uint64_t)v25, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += v24;
    if (v21 == a3 || *v21 != 41)
      sub_223FE67E4();
    goto LABEL_32;
  }
  if (v20 != 61)
    return a2;
  sub_223FE66B0((uint64_t)v25);
  v26 = *(_DWORD *)(a1 + 24);
  v21 = (char *)sub_223FE456C(v25, a2 + 3, a3);
  v22 = v27;
  sub_223FE671C(a1, (uint64_t)v25, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v22;
  if (v21 == a3 || *v21 != 41)
    sub_223FE67E4();
LABEL_32:
  sub_223FE43F0(v25);
  return v21 + 1;
}

void sub_223FE5A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_223FE43F0(&a9);
  _Unwind_Resume(a1);
}

void sub_223FE5A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_223FE43F0(&a9);
  _Unwind_Resume(a1);
}

void sub_223FE5A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_223FE43F0(&a9);
  _Unwind_Resume(a1);
}

void sub_223FE5A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_223FE43F0(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_223FE5A70(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  _DWORD *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case '(':
        if (a2 + 1 == a3)
          goto LABEL_26;
        if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
        {
          v6 = (_DWORD *)(a1 + 36);
          ++*(_DWORD *)(a1 + 36);
          v7 = sub_223FE4A80(a1, a2 + 3, a3);
          if (v7 == a3)
            goto LABEL_26;
          v3 = v7;
          if (*v7 != 41)
            goto LABEL_26;
        }
        else
        {
          if ((*(_BYTE *)(a1 + 24) & 2) != 0)
          {
            v13 = *(_DWORD *)(a1 + 28);
          }
          else
          {
            v12 = operator new();
            v13 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v13;
            v14 = *(_QWORD *)(a1 + 56);
            v15 = *(_QWORD *)(v14 + 8);
            *(_QWORD *)v12 = &unk_24EC65688;
            *(_QWORD *)(v12 + 8) = v15;
            *(_DWORD *)(v12 + 16) = v13;
            *(_QWORD *)(v14 + 8) = v12;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          v6 = (_DWORD *)(a1 + 36);
          ++*(_DWORD *)(a1 + 36);
          v16 = sub_223FE4A80(a1, v3 + 1, a3);
          if (v16 == a3 || (v3 = v16, *v16 != 41))
LABEL_26:
            sub_223FE67E4();
          if ((*(_BYTE *)(a1 + 24) & 2) == 0)
          {
            v17 = operator new();
            v18 = *(_QWORD *)(a1 + 56);
            v19 = *(_QWORD *)(v18 + 8);
            *(_QWORD *)v17 = &unk_24EC656D0;
            *(_QWORD *)(v17 + 8) = v19;
            *(_DWORD *)(v17 + 16) = v13;
            *(_QWORD *)(v18 + 8) = v17;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
        }
        --*v6;
LABEL_23:
        ++v3;
        break;
      case ')':
      case ',':
      case '-':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        return sub_223FE800C(a1, a2, a3);
      case '*':
      case '+':
      case '?':
        goto LABEL_25;
      case '.':
        v8 = (_QWORD *)operator new();
        v9 = *(_QWORD *)(a1 + 56);
        v10 = *(_QWORD *)(v9 + 8);
        *v8 = &unk_24EC65448;
        v8[1] = v10;
        *(_QWORD *)(v9 + 8) = v8;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        goto LABEL_23;
      case '[':
        return (unsigned __int8 *)sub_223FE7E50(a1, a2, a3);
      case '\\':
        return sub_223FE7CD8(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      default:
        if (*a2 == 123)
LABEL_25:
          sub_223FE7FC0();
        return sub_223FE800C(a1, a2, a3);
    }
  }
  return (unsigned __int8 *)v3;
}

char *sub_223FE5CEC(uint64_t a1, char *a2, char *a3, uint64_t a4, int a5, int a6)
{
  int v11;
  int v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  int v22;
  int v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  char *v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  char *v64;
  int v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;

  if (a2 == a3)
    return a2;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = *a2;
  if (v12 <= 62)
  {
    if (v12 == 42)
    {
      v13 = a2 + 1;
      if (v11)
        v29 = 1;
      else
        v29 = v13 == a3;
      if (v29 || *v13 != 63)
      {
        v46 = (_QWORD *)operator new();
        v47 = *(_QWORD *)(a1 + 56);
        v48 = *(_QWORD *)(v47 + 8);
        *v46 = &unk_24EC65280;
        v46[1] = v48;
        *(_QWORD *)(v47 + 8) = 0;
        v17 = operator new();
        v49 = *(_DWORD *)(a1 + 32);
        v50 = *(_QWORD *)(a4 + 8);
        *(_QWORD *)(v17 + 16) = v46;
        *(_QWORD *)v17 = &unk_24EC65718;
        *(_QWORD *)(v17 + 8) = v50;
        *(_OWORD *)(v17 + 24) = xmmword_2245F53E0;
        *(_DWORD *)(v17 + 40) = v49;
        *(_DWORD *)(v17 + 44) = a5;
        *(_DWORD *)(v17 + 48) = a6;
        *(_BYTE *)(v17 + 52) = 1;
        *(_QWORD *)(a4 + 8) = 0;
        v20 = (_QWORD *)operator new();
        goto LABEL_71;
      }
      v30 = (_QWORD *)operator new();
      v31 = *(_QWORD *)(a1 + 56);
      v32 = *(_QWORD *)(v31 + 8);
      *v30 = &unk_24EC65280;
      v30[1] = v32;
      *(_QWORD *)(v31 + 8) = 0;
      v17 = operator new();
      v33 = *(_DWORD *)(a1 + 32);
      *(_QWORD *)(v17 + 16) = v30;
      v34 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)v17 = &unk_24EC65718;
      *(_QWORD *)(v17 + 8) = v34;
      *(_OWORD *)(v17 + 24) = xmmword_2245F53E0;
      *(_DWORD *)(v17 + 40) = v33;
      *(_DWORD *)(v17 + 44) = a5;
      *(_DWORD *)(v17 + 48) = a6;
      *(_BYTE *)(v17 + 52) = 0;
      *(_QWORD *)(a4 + 8) = 0;
      v20 = (_QWORD *)operator new();
      goto LABEL_41;
    }
    if (v12 == 43)
    {
      v13 = a2 + 1;
      if (v11 || v13 == a3 || *v13 != 63)
      {
        v41 = (_QWORD *)operator new();
        v42 = *(_QWORD *)(a1 + 56);
        v43 = *(_QWORD *)(v42 + 8);
        *v41 = &unk_24EC65280;
        v41[1] = v43;
        *(_QWORD *)(v42 + 8) = 0;
        v17 = operator new();
        v44 = *(_DWORD *)(a1 + 32);
        v45 = *(_QWORD *)(a4 + 8);
        *(_QWORD *)(v17 + 16) = v41;
        *(_QWORD *)v17 = &unk_24EC65718;
        *(_QWORD *)(v17 + 8) = v45;
        *(_OWORD *)(v17 + 24) = xmmword_22464C790;
        *(_DWORD *)(v17 + 40) = v44;
        *(_DWORD *)(v17 + 44) = a5;
        *(_DWORD *)(v17 + 48) = a6;
        *(_BYTE *)(v17 + 52) = 1;
        *(_QWORD *)(a4 + 8) = 0;
        v20 = (_QWORD *)operator new();
        goto LABEL_71;
      }
      v14 = (_QWORD *)operator new();
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(v15 + 8);
      *v14 = &unk_24EC65280;
      v14[1] = v16;
      *(_QWORD *)(v15 + 8) = 0;
      v17 = operator new();
      v18 = *(_DWORD *)(a1 + 32);
      *(_QWORD *)(v17 + 16) = v14;
      v19 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)v17 = &unk_24EC65718;
      *(_QWORD *)(v17 + 8) = v19;
      *(_OWORD *)(v17 + 24) = xmmword_22464C790;
      *(_DWORD *)(v17 + 40) = v18;
      *(_DWORD *)(v17 + 44) = a5;
      *(_DWORD *)(v17 + 48) = a6;
      *(_BYTE *)(v17 + 52) = 0;
      *(_QWORD *)(a4 + 8) = 0;
      v20 = (_QWORD *)operator new();
LABEL_41:
      v13 = a2 + 2;
LABEL_71:
      *v20 = &unk_24EC657A8;
      v20[1] = v17;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v20;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v17 + 16);
      *(_QWORD *)(a4 + 8) = v17;
      ++*(_DWORD *)(a1 + 32);
      return v13;
    }
    return a2;
  }
  if (v12 == 63)
  {
    v13 = a2 + 1;
    if (v11)
      v35 = 1;
    else
      v35 = v13 == a3;
    if (v35 || *v13 != 63)
    {
      v51 = (_QWORD *)operator new();
      v52 = *(_QWORD *)(a1 + 56);
      v53 = *(_QWORD *)(v52 + 8);
      *v51 = &unk_24EC65280;
      v51[1] = v53;
      *(_QWORD *)(v52 + 8) = 0;
      v17 = operator new();
      v54 = *(_DWORD *)(a1 + 32);
      v55 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(v17 + 16) = v51;
      *(_QWORD *)v17 = &unk_24EC65718;
      *(_QWORD *)(v17 + 8) = v55;
      *(_OWORD *)(v17 + 24) = xmmword_2245F5410;
      *(_DWORD *)(v17 + 40) = v54;
      *(_DWORD *)(v17 + 44) = a5;
      *(_DWORD *)(v17 + 48) = a6;
      *(_BYTE *)(v17 + 52) = 1;
      *(_QWORD *)(a4 + 8) = 0;
      v20 = (_QWORD *)operator new();
      goto LABEL_71;
    }
    v36 = (_QWORD *)operator new();
    v37 = *(_QWORD *)(a1 + 56);
    v38 = *(_QWORD *)(v37 + 8);
    *v36 = &unk_24EC65280;
    v36[1] = v38;
    *(_QWORD *)(v37 + 8) = 0;
    v17 = operator new();
    v39 = *(_DWORD *)(a1 + 32);
    *(_QWORD *)(v17 + 16) = v36;
    v40 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)v17 = &unk_24EC65718;
    *(_QWORD *)(v17 + 8) = v40;
    *(_OWORD *)(v17 + 24) = xmmword_2245F5410;
    *(_DWORD *)(v17 + 40) = v39;
    *(_DWORD *)(v17 + 44) = a5;
    *(_DWORD *)(v17 + 48) = a6;
    *(_BYTE *)(v17 + 52) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    v20 = (_QWORD *)operator new();
    goto LABEL_41;
  }
  if (v12 != 123)
    return a2;
  v21 = a2 + 1;
  if (a2 + 1 == a3)
    goto LABEL_73;
  v22 = *v21;
  if ((v22 & 0xF8) != 0x30 && (v22 & 0xFE) != 0x38)
    goto LABEL_73;
  v23 = v22 - 48;
  v24 = a2 + 2;
  if (a2 + 2 == a3)
  {
LABEL_19:
    v24 = a3;
  }
  else
  {
    while (1)
    {
      v25 = *v24;
      if ((v25 & 0xF8) != 0x30 && (v25 & 0xFE) != 0x38)
        break;
      if (v23 >= 214748364)
        goto LABEL_73;
      v23 = v25 + 10 * v23 - 48;
      if (++v24 == a3)
        goto LABEL_19;
    }
  }
  if (v24 == v21)
    goto LABEL_73;
  if (v24 == a3)
    goto LABEL_74;
  v26 = *v24;
  if (v26 != 44)
  {
    if (v26 == 125)
    {
      v13 = v24 + 1;
      if (v11 || v13 == a3 || *v13 != 63)
      {
        v58 = (_QWORD *)operator new();
        v59 = *(_QWORD *)(a1 + 56);
        v60 = *(_QWORD *)(v59 + 8);
        *v58 = &unk_24EC65280;
        v58[1] = v60;
        *(_QWORD *)(v59 + 8) = 0;
        v17 = operator new();
        v61 = *(_DWORD *)(a1 + 32);
        v62 = *(_QWORD *)(a4 + 8);
        *(_QWORD *)v17 = &unk_24EC65718;
        *(_QWORD *)(v17 + 8) = v62;
        *(_QWORD *)(v17 + 16) = v58;
        *(_QWORD *)(v17 + 24) = v23;
        *(_QWORD *)(v17 + 32) = v23;
        *(_DWORD *)(v17 + 40) = v61;
        *(_DWORD *)(v17 + 44) = a5;
        *(_DWORD *)(v17 + 48) = a6;
        *(_BYTE *)(v17 + 52) = 1;
        *(_QWORD *)(a4 + 8) = 0;
        v20 = (_QWORD *)operator new();
        goto LABEL_71;
      }
      v27 = v23;
      v13 = v24 + 2;
      v28 = v23;
      goto LABEL_68;
    }
    goto LABEL_73;
  }
  v56 = v24 + 1;
  if (v24 + 1 == a3)
    goto LABEL_73;
  v57 = *v56;
  if (v57 != 125)
  {
    if ((v57 & 0xF8) == 0x30 || (v57 & 0xFE) == 0x38)
    {
      v63 = v57 - 48;
      v64 = v24 + 2;
      if (v64 == a3)
      {
LABEL_59:
        v64 = a3;
      }
      else
      {
        while (1)
        {
          v65 = *v64;
          if ((v65 & 0xF8) != 0x30 && (v65 & 0xFE) != 0x38)
            break;
          if (v63 >= 214748364)
            goto LABEL_73;
          v63 = v65 + 10 * v63 - 48;
          if (++v64 == a3)
            goto LABEL_59;
        }
      }
      if (v64 != v56 && v64 != a3 && *v64 == 125)
      {
        if (v63 >= v23)
        {
          v13 = v64 + 1;
          if (v11 || v13 == a3 || *v13 != 63)
          {
            v71 = (_QWORD *)operator new();
            v72 = *(_QWORD *)(a1 + 56);
            v73 = *(_QWORD *)(v72 + 8);
            *v71 = &unk_24EC65280;
            v71[1] = v73;
            *(_QWORD *)(v72 + 8) = 0;
            v17 = operator new();
            v74 = *(_DWORD *)(a1 + 32);
            v75 = *(_QWORD *)(a4 + 8);
            *(_QWORD *)v17 = &unk_24EC65718;
            *(_QWORD *)(v17 + 8) = v75;
            *(_QWORD *)(v17 + 16) = v71;
            *(_QWORD *)(v17 + 24) = v23;
            *(_QWORD *)(v17 + 32) = v63;
            *(_DWORD *)(v17 + 40) = v74;
            *(_DWORD *)(v17 + 44) = a5;
            *(_DWORD *)(v17 + 48) = a6;
            *(_BYTE *)(v17 + 52) = 1;
            *(_QWORD *)(a4 + 8) = 0;
            v20 = (_QWORD *)operator new();
            goto LABEL_71;
          }
          v27 = v23;
          v28 = v63;
          v13 = v64 + 2;
LABEL_68:
          sub_223FED318(a1, v27, v28, a4, a5, a6, 0);
          return v13;
        }
LABEL_73:
        sub_223FED474();
      }
    }
LABEL_74:
    sub_223FED4C0();
  }
  v13 = v24 + 2;
  if (v11 || v13 == a3 || *v13 != 63)
  {
    v66 = (_QWORD *)operator new();
    v67 = *(_QWORD *)(a1 + 56);
    v68 = *(_QWORD *)(v67 + 8);
    *v66 = &unk_24EC65280;
    v66[1] = v68;
    *(_QWORD *)(v67 + 8) = 0;
    v17 = operator new();
    v69 = *(_DWORD *)(a1 + 32);
    v70 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)v17 = &unk_24EC65718;
    *(_QWORD *)(v17 + 8) = v70;
    *(_QWORD *)(v17 + 16) = v66;
    *(_QWORD *)(v17 + 24) = v23;
    *(_QWORD *)(v17 + 32) = -1;
    *(_DWORD *)(v17 + 40) = v69;
    *(_DWORD *)(v17 + 44) = a5;
    *(_DWORD *)(v17 + 48) = a6;
    *(_BYTE *)(v17 + 52) = 1;
    *(_QWORD *)(a4 + 8) = 0;
    v20 = (_QWORD *)operator new();
    goto LABEL_71;
  }
  v13 = v24 + 3;
  sub_223FED1C8(a1, v23, a4, a5, a6);
  return v13;
}

void sub_223FE6618(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223FE66B0(uint64_t a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x227684AFC]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x24BEDB350]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x24BEDB4B0]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_223FE6708(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::locale *sub_223FE671C(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  std::locale *result;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v8 = operator new();
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  *(_QWORD *)v8 = &unk_24EC65400;
  *(_QWORD *)(v8 + 8) = v9;
  result = std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a2);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v8 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v8 + 64) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

void sub_223FE67E4()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x227684424](exception, 6);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_223FE681C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223FE6830(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24EC652F8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223FE6874(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24EC652F8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FE68C8(uint64_t result, uint64_t a2)
{
  int v2;

  if (!*(_BYTE *)(a2 + 92))
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
    return result;
  }
  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8) && (*(_BYTE *)(a2 + 88) & 1) == 0)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

_QWORD *sub_223FE6928(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24EC652F8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223FE696C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24EC652F8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FE69C0(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *sub_223FE6A10(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24EC653B8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24EC652F8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_223FE6A68(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24EC653B8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24EC652F8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FE6AD0(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_19;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          v6 = *v2;
          if (v6 == 95)
            goto LABEL_17;
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    v7 = *(v4 - 1);
    v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      v9 = 1;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    else
    {
      v9 = 0;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(_BYTE *)(result + 40) == (v9 != 0))
        goto LABEL_20;
      goto LABEL_27;
    }
LABEL_24:
    if (*(_BYTE *)(result + 40) != (v9 != 1))
      goto LABEL_27;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(a2 + 88) & 8) == 0)
  {
    v6 = *(v3 - 1);
    if (v6 == 95)
      goto LABEL_17;
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(_BYTE *)(result + 40) != 1)
        goto LABEL_27;
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(_QWORD *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(_BYTE *)(result + 40))
    goto LABEL_20;
LABEL_27:
  v10 = *(_QWORD *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

std::locale *sub_223FE6C24(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&unk_24EC65400;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&unk_24EC652F8;
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

void sub_223FE6CC4(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&unk_24EC65400;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&unk_24EC652F8;
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  JUMPOUT(0x227684CE8);
}

void sub_223FE6D74(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  char *v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  void *__p;
  char *v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  char v27;
  char v28;
  uint64_t v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0uLL;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  __p = 0;
  v19 = 0;
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v20 = 0;
  *(_QWORD *)&v21 = v5;
  *((_QWORD *)&v21 + 1) = v5;
  v22 = 0;
  sub_223FE7370((uint64_t)&__p, v4, &v21);
  v23 = v6;
  v24 = v6;
  v25 = 0;
  v26 = v21;
  v27 = v22;
  v29 = v6;
  v28 = 1;
  v7 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v8 = v7 == *(_QWORD *)(a2 + 8);
  else
    v8 = 0;
  v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == sub_223FE6EFC(a1 + 16, v7, *(_QWORD *)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    v10 = (char *)__p;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  v10 = (char *)__p;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (_BYTE *)__p) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!v10)
      return;
    goto LABEL_14;
  }
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = 1;
  do
  {
    v16 = &v10[24 * v15];
    v17 = v14 + 24 * (v13 + v12);
    *(_OWORD *)v17 = *(_OWORD *)v16;
    *(_BYTE *)(v17 + 16) = v16[16];
    v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  v19 = v10;
  operator delete(v10);
}

void sub_223FE6EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223FE6EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void *v32;
  void *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  _BYTE v44[56];
  void *__p[2];
  _QWORD v46[3];
  __int128 v47;
  char v48;
  char *v49;
  char *v50;
  unint64_t v51;

  v49 = 0;
  v50 = 0;
  v51 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_QWORD *)&v47 = a3;
    *((_QWORD *)&v47 + 1) = a3;
    v48 = 0;
    *(_DWORD *)v44 = 0;
    memset(&v44[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v46, 0, 21);
    v50 = sub_223FE7620((void **)&v49, (uint64_t)v44);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v44[32])
    {
      *(_QWORD *)&v44[40] = *(_QWORD *)&v44[32];
      operator delete(*(void **)&v44[32]);
    }
    v13 = v50;
    *((_DWORD *)v50 - 24) = 0;
    *((_QWORD *)v13 - 11) = a2;
    *((_QWORD *)v13 - 10) = a2;
    *((_QWORD *)v13 - 9) = a3;
    v14 = *((_QWORD *)v13 - 8);
    v15 = *(unsigned int *)(a1 + 28);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v13 - 7) - v14) >> 3);
    if (v15 <= v16)
    {
      if (v15 < v16)
        *((_QWORD *)v13 - 7) = v14 + 24 * v15;
    }
    else
    {
      sub_223FE77F0((void **)v13 - 8, v15 - v16, &v47);
      v13 = v50;
    }
    v17 = *((_QWORD *)v13 - 5);
    v18 = *(unsigned int *)(a1 + 32);
    v19 = (*((_QWORD *)v13 - 4) - v17) >> 4;
    if (v18 <= v19)
    {
      if (v18 < v19)
        *((_QWORD *)v13 - 4) = v17 + 16 * v18;
    }
    else
    {
      sub_223FE7990((char **)v13 - 5, v18 - v19);
      v13 = v50;
    }
    *((_QWORD *)v13 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *(v13 - 4) = a6;
    v20 = 1;
    while (2)
    {
      if ((v20 & 0xFFF) == 0 && (int)(v20 >> 12) >= (int)a3 - (int)a2)
        sub_223FE7508();
      v22 = *((_QWORD *)v13 - 2);
      if (v22)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v13 - 96);
      switch(*((_DWORD *)v13 - 24))
      {
        case 0xFFFFFC18:
          v23 = *((_QWORD *)v13 - 10);
          if ((a5 & 0x20) != 0 && v23 == a2 || (a5 & 0x1000) != 0 && v23 != a3)
            goto LABEL_26;
          v35 = *a4;
          *(_QWORD *)v35 = a2;
          *(_QWORD *)(v35 + 8) = v23;
          *(_BYTE *)(v35 + 16) = 1;
          v36 = *((_QWORD *)v13 - 8);
          v37 = *((_QWORD *)v13 - 7) - v36;
          if (v37)
          {
            v38 = 0xAAAAAAAAAAAAAAABLL * (v37 >> 3);
            v39 = (_BYTE *)(v36 + 16);
            v40 = 1;
            do
            {
              v41 = v35 + 24 * v40;
              *(_OWORD *)v41 = *((_OWORD *)v39 - 1);
              v42 = *v39;
              v39 += 24;
              *(_BYTE *)(v41 + 16) = v42;
            }
            while (v38 > v40++);
          }
          v6 = 1;
          v21 = v49;
          if (!v49)
            return v6;
          goto LABEL_37;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_16;
        case 0xFFFFFC1F:
LABEL_26:
          v24 = v50;
          v25 = (void *)*((_QWORD *)v50 - 5);
          if (v25)
          {
            *((_QWORD *)v50 - 4) = v25;
            operator delete(v25);
          }
          v26 = (void *)*((_QWORD *)v24 - 8);
          if (v26)
          {
            *((_QWORD *)v24 - 7) = v26;
            operator delete(v26);
          }
          v50 = v24 - 96;
          goto LABEL_16;
        case 0xFFFFFC20:
          sub_223FE7AB8((uint64_t)v44, (__int128 *)v13 - 6);
          (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v13 - 2) + 24))(*((_QWORD *)v13 - 2), 1, v13 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v46[1] + 24))(v46[1], 0, v44);
          v27 = v50;
          if ((unint64_t)v50 >= v51)
          {
            v50 = sub_223FE7620((void **)&v49, (uint64_t)v44);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v28 = *(_OWORD *)&v44[16];
            *(_OWORD *)v50 = *(_OWORD *)v44;
            *((_OWORD *)v27 + 1) = v28;
            *((_QWORD *)v27 + 4) = 0;
            *((_QWORD *)v27 + 5) = 0;
            *((_QWORD *)v27 + 6) = 0;
            *((_QWORD *)v27 + 7) = 0;
            *((_OWORD *)v27 + 2) = *(_OWORD *)&v44[32];
            *((_QWORD *)v27 + 6) = *(_QWORD *)&v44[48];
            memset(&v44[32], 0, 24);
            *((_QWORD *)v27 + 8) = 0;
            *((_QWORD *)v27 + 9) = 0;
            *(_OWORD *)(v27 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v27 + 9) = v46[0];
            __p[0] = 0;
            __p[1] = 0;
            v46[0] = 0;
            v29 = v46[1];
            *(_QWORD *)(v27 + 85) = *(_QWORD *)((char *)&v46[1] + 5);
            *((_QWORD *)v27 + 10) = v29;
            v50 = v27 + 96;
          }
          if (*(_QWORD *)&v44[32])
          {
            *(_QWORD *)&v44[40] = *(_QWORD *)&v44[32];
            operator delete(*(void **)&v44[32]);
          }
LABEL_16:
          v21 = v49;
          v13 = v50;
          ++v20;
          if (v49 != v50)
            continue;
          v6 = 0;
          if (v49)
          {
LABEL_37:
            v30 = v50;
            v31 = v21;
            if (v50 != v21)
            {
              do
              {
                v32 = (void *)*((_QWORD *)v30 - 5);
                if (v32)
                {
                  *((_QWORD *)v30 - 4) = v32;
                  operator delete(v32);
                }
                v33 = (void *)*((_QWORD *)v30 - 8);
                if (v33)
                {
                  *((_QWORD *)v30 - 7) = v33;
                  operator delete(v33);
                }
                v30 -= 96;
              }
              while (v30 != v21);
              v31 = v49;
            }
            v50 = v21;
            operator delete(v31);
          }
          break;
        default:
          sub_223FE7554();
      }
      break;
    }
  }
  return v6;
}

void sub_223FE72EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223FE75A0((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_223FE7300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_223F4FAE4((uint64_t *)va);
  sub_223FE75A0((void **)(v4 - 112));
  _Unwind_Resume(a1);
}

void sub_223FE7348(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223FE75A0((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_223FE735C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223FE75A0((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

_QWORD *sub_223FE7370(uint64_t a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v6 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) < a2)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      sub_22316E078();
    v11 = 3 * v10;
    result = operator new(24 * v10);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v11];
    v12 = 24 * a2;
    v13 = &result[3 * a2];
    do
    {
      *(_OWORD *)result = *a3;
      result[2] = *((_QWORD *)a3 + 2);
      result += 3;
      v12 -= 24;
    }
    while (v12);
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(a1 + 8);
  v15 = (v14 - (uint64_t)result) / 24;
  if (v15 >= a2)
    v16 = a2;
  else
    v16 = (v14 - (uint64_t)result) / 24;
  if (v16)
  {
    v17 = result;
    do
    {
      *(_OWORD *)v17 = *a3;
      *((_BYTE *)v17 + 16) = *((_BYTE *)a3 + 16);
      v17 += 3;
      --v16;
    }
    while (v16);
  }
  if (a2 <= v15)
  {
    v13 = &result[3 * a2];
LABEL_25:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v18 = v14 + 24 * (a2 - v15);
  v19 = 24 * a2 - 24 * v15;
  do
  {
    v20 = *a3;
    *(_QWORD *)(v14 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v14 = v20;
    v14 += 24;
    v19 -= 24;
  }
  while (v19);
  *(_QWORD *)(a1 + 8) = v18;
  return result;
}

void sub_223FE7508()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x227684424](exception, 12);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_223FE7540(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223FE7554()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x227684424](exception, 16);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_223FE758C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **sub_223FE75A0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          *((_QWORD *)v3 - 4) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 8);
        if (v6)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_223FE7620(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v22 = (void *)*((_QWORD *)v21 - 5);
      if (v22)
      {
        *((_QWORD *)v21 - 4) = v22;
        operator delete(v22);
      }
      v23 = (void *)*((_QWORD *)v21 - 8);
      if (v23)
      {
        *((_QWORD *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_223FE77F0(void **a1, unint64_t a2, __int128 *a3)
{
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;

  v7 = (char *)a1[1];
  v6 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[24 * a2];
      v14 = 24 * a2;
      do
      {
        v15 = *a3;
        *((_QWORD *)v7 + 2) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v7 = v15;
        v7 += 24;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = &v12[24 * v8];
    v17 = 24 * a2;
    v18 = &v16[24 * a2];
    v19 = v16;
    do
    {
      v20 = *a3;
      *((_QWORD *)v19 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v19 = v20;
      v19 += 24;
      v17 -= 24;
    }
    while (v17);
    v21 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v7 - 24);
        *((_QWORD *)v16 - 1) = *((_QWORD *)v7 - 1);
        *(_OWORD *)(v16 - 24) = v22;
        v16 -= 24;
        v7 -= 24;
      }
      while (v7 != v21);
      v7 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = &v12[24 * v11];
    if (v7)
      operator delete(v7);
  }
}

void sub_223FE7990(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      sub_22316E078();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_223174E94();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_223FE7AB8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  BOOL v25;
  BOOL v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  double *v31;
  const double *v32;
  uint64_t v33;
  const double *v34;
  double *v35;
  float64x2x2_t v36;
  float64x2x2_t v37;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(_QWORD *)(a1 + 40) = &v9[v10];
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (char *)*((_QWORD *)a2 + 7);
  v11 = (char *)*((_QWORD *)a2 + 8);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      sub_22316E078();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    v15 = v13 - 16;
    if ((unint64_t)(v13 - 16) < 0xF0)
      goto LABEL_31;
    v21 = v15 & 0xFFFFFFFFFFFFFFF0 | 8;
    v22 = &v14[v21];
    v23 = &v12[v21];
    v24 = (v15 & 0xFFFFFFFFFFFFFFF0) + 16;
    v25 = v14 + 8 >= &v12[v24] || v12 + 8 >= &v14[v24];
    v26 = !v25;
    if (v12 < v22 && v14 < v23)
      goto LABEL_31;
    if (v26)
      goto LABEL_31;
    v28 = (v15 >> 4) + 1;
    v29 = 16 * (v28 & 0x1FFFFFFFFFFFFFFCLL);
    v30 = &v12[v29];
    v18 = &v14[v29];
    v31 = (double *)(v14 + 32);
    v32 = (const double *)(v12 + 32);
    v33 = v28 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      v34 = v32 - 4;
      v36 = vld2q_f64(v34);
      v37 = vld2q_f64(v32);
      v35 = v31 - 4;
      vst2q_f64(v35, v36);
      vst2q_f64(v31, v37);
      v31 += 8;
      v32 += 8;
      v33 -= 4;
    }
    while (v33);
    v12 = v30;
    v14 = v18;
    if (v28 != (v28 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v16 = *(_QWORD *)v12;
        v17 = *((_QWORD *)v12 + 1);
        v12 += 16;
        *(_QWORD *)v14 = v16;
        *((_QWORD *)v14 + 1) = v17;
        v14 += 16;
      }
      while (v12 != v11);
      v18 = v14;
    }
    *(_QWORD *)(a1 + 64) = v18;
  }
  v19 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 85) = *(_QWORD *)((char *)a2 + 85);
  *(_QWORD *)(a1 + 80) = v19;
  return a1;
}

void sub_223FE7CA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_223FE7CD8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    sub_223FE8114();
  v7 = *v5;
  v8 = (v7 - 48);
  if (v7 == 48)
  {
    sub_223FE888C(a1, v8);
    return a2 + 2;
  }
  if ((v7 - 49) > 8)
    goto LABEL_18;
  v10 = a2 + 2;
  if (a2 + 2 == a3)
  {
    v10 = a3;
  }
  else
  {
    while (1)
    {
      v11 = *v10;
      if ((v11 - 48) > 9)
        break;
      if (v8 >= 0x19999999)
        goto LABEL_23;
      ++v10;
      LODWORD(v8) = v11 + 10 * v8 - 48;
      if (v10 == a3)
      {
        v10 = a3;
        break;
      }
    }
    if (!(_DWORD)v8)
LABEL_23:
      sub_223FE8A10();
  }
  if (v8 > *(_DWORD *)(a1 + 28))
    goto LABEL_23;
  sub_223FE8A5C(a1, v8);
  if (v10 == v5)
  {
LABEL_18:
    v10 = sub_223FE8160(a1, a2 + 1, a3);
    if (v10 == v5)
    {
      v12 = sub_223FE83C8(a1, a2 + 1, a3, 0);
      if (v12 == v5)
        return a2;
      else
        return v12;
    }
  }
  return v10;
}

char *sub_223FE7E50(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  uint64_t v8;
  char *v9;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    v8 = operator new();
    sub_223FE9768(v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if (v7 == a3)
      goto LABEL_20;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      sub_223FE92F0(v8, 93);
      ++v7;
    }
    if (v7 == a3)
      goto LABEL_20;
    do
    {
      v9 = v7;
      v7 = sub_223FEAA28(a1, v7, a3, v8);
    }
    while (v7 != v9);
    if (v9 == a3)
      goto LABEL_20;
    if (*v9 == 45)
    {
      sub_223FE92F0(v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93)
LABEL_20:
      sub_223FEA9DC();
    return v9 + 1;
  }
  return a2;
}

void sub_223FE7F9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void sub_223FE7FC0()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x227684424](exception, 11);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_223FE7FF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_223FE800C(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *result;

  if (a2 == a3)
    return a2;
  switch(*a2)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return a2;
    default:
      sub_223FE888C(a1, (char)*a2);
      result = a2 + 1;
      break;
  }
  return result;
}

_QWORD *sub_223FE807C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24EC652F8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223FE80C0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24EC652F8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x227684CE8);
}

void sub_223FE8114()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x227684424](exception, 3);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_223FE814C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_223FE8160(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        v5 = operator new();
        sub_223FE9768(v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        v5 = operator new();
        sub_223FE9768(v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        v6 = operator new();
        sub_223FE9768(v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        v5 = operator new();
        sub_223FE9768(v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = *(_DWORD *)(v5 + 160) | 0x400;
        goto LABEL_12;
      case 's':
        v5 = operator new();
        sub_223FE9768(v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = *(_DWORD *)(v5 + 160) | 0x4000;
LABEL_12:
        *(_DWORD *)(v5 + 160) = v7;
        goto LABEL_13;
      case 'w':
        v6 = operator new();
        sub_223FE9768(v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v6;
        *(_QWORD *)(a1 + 56) = v6;
        *(_DWORD *)(v6 + 160) |= 0x500u;
        sub_223FE92F0(v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_223FE8390(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_223FE83C8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *result;
  uint64_t v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  char v12;
  unsigned __int8 v13;
  char v14;
  char v15;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  v6 = (char)v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        sub_223FE888C(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3 || ((v4[1] & 0xDF) - 65) > 0x19u)
        goto LABEL_81;
      v8 = v4[1] & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v8;
        *((_BYTE *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        sub_223FE888C(a1, v8);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        sub_223FE888C(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        sub_223FE888C(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        sub_223FE888C(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        sub_223FE888C(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        v9 = v4[1];
        if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            v10 = *v4;
            if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
              goto LABEL_38;
          }
        }
      }
      goto LABEL_81;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        v6 = 11;
LABEL_65:
        sub_223FE888C(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_38:
      if (v4 + 1 == a3)
        goto LABEL_81;
      v11 = v4[1];
      v12 = -48;
      if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38)
        goto LABEL_43;
      v11 |= 0x20u;
      if ((v11 - 97) >= 6u)
        goto LABEL_81;
      v12 = -87;
LABEL_43:
      if (v4 + 2 == a3)
        goto LABEL_81;
      v13 = v4[2];
      v14 = -48;
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38)
      {
        v13 |= 0x20u;
        if ((v13 - 97) >= 6u)
LABEL_81:
          sub_223FE8114();
        v14 = -87;
      }
      v15 = v13 + 16 * (v11 + v12) + v14;
      if (!a4)
      {
        sub_223FE888C(a1, v15);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v15;
      *((_BYTE *)a4 + 1) = 0;
      result = v4 + 3;
      break;
    default:
      if ((_DWORD)v6 == 95
        || (v6 & 0x80000000) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 4 * v5) & 0x500) != 0)
      {
        goto LABEL_81;
      }
      if (!a4)
        goto LABEL_65;
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_WORD *)a4 = v5;
      return v4 + 1;
  }
  return result;
}

uint64_t sub_223FE888C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = operator new();
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *(_QWORD *)v8 = &unk_24EC65490;
    *(_QWORD *)(v8 + 8) = v9;
    std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2);
    *(_BYTE *)(v8 + 40) = result;
LABEL_6:
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = operator new();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *(_QWORD *)v8 = &unk_24EC654D8;
    *(_QWORD *)(v8 + 8) = v10;
    result = (uint64_t)std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    *(_BYTE *)(v8 + 40) = a2;
    goto LABEL_6;
  }
  result = operator new();
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)result = &unk_24EC65520;
  *(_QWORD *)(result + 8) = v7;
  *(_BYTE *)(result + 16) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

void sub_223FE89C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::locale *v2;
  uint64_t v4;

  std::locale::~locale(v2);
  *v1 = &unk_24EC652F8;
  v4 = v1[1];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  MEMORY[0x227684CE8](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void sub_223FE8A10()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x227684424](exception, 4);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_223FE8A48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223FE8A5C(uint64_t a1, int a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  std::locale *v8;
  std::locale *v9;
  std::locale::__imp *v10;
  char *v11;

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = (char *)&unk_24EC65558;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = v10;
    result = (uint64_t)std::locale::locale(v8 + 2, (const std::locale *)a1);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)(a1 + 8);
    LODWORD(v9[5].__locale_) = a2;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v9;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = (char *)&unk_24EC655A0;
    goto LABEL_6;
  }
  result = operator new();
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)result = &unk_24EC655F8;
  *(_QWORD *)(result + 8) = v7;
  *(_DWORD *)(result + 16) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

std::locale *sub_223FE8B58(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24EC65490;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24EC652F8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_223FE8BB0(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24EC65490;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24EC652F8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FE8C18(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v4 + 8);
  }
  return result;
}

std::locale *sub_223FE8C9C(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24EC654D8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24EC652F8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_223FE8CF4(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24EC654D8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24EC652F8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FE8D5C(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

_QWORD *sub_223FE8DA4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24EC652F8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223FE8DE8(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24EC652F8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FE8E3C(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *sub_223FE8E84(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24EC65568;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24EC652F8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_223FE8EDC(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24EC65568;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24EC652F8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FE8F44(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(_BYTE *)(v3 + 16)
    || (v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3, v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  v6 = result;
  if (v4 >= 1)
  {
    v7 = 0;
    while (1)
    {
      v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)v3 + v7));
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v7));
      if (v8 != (_DWORD)result)
        goto LABEL_3;
      if (v4 == ++v7)
      {
        v5 = *(_QWORD *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v5 + v4;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v6 + 8);
  return result;
}

std::locale *sub_223FE903C(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24EC655B0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24EC652F8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_223FE9094(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24EC655B0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24EC652F8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FE90FC(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(v3 + 24 * v2 + 16)
    || (v4 = (unsigned __int8 **)(v3 + 24 * v2),
        v5 = *v4,
        v6 = v4[1] - *v4,
        v7 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    v8 = v6;
    v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      v11 = *v5++;
      v10 = v11;
      v12 = *v9++;
      if (v10 != v12)
        goto LABEL_3;
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v7 + v6;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_223FE918C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24EC652F8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223FE91D0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24EC652F8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x227684CE8);
}

unsigned int *sub_223FE9224(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    sub_223FE8A10();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    *(_QWORD *)(a2 + 80) = *((_QWORD *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

void sub_223FE92F0(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 40);
    v5 = *(_BYTE **)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      sub_22316E078();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 40) = v13;
        *(_QWORD *)(a1 + 48) = v15;
        *(_QWORD *)(a1 + 56) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 40);
  v7 = *(_BYTE **)(a1 + 40);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 48) = v15;
}

uint64_t sub_223FE9768(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  std::string::size_type size;
  std::string *v14;
  BOOL v15;
  std::locale v17;
  std::string v18;

  *(_QWORD *)a1 = &unk_24EC65640;
  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v17, v11);
  std::locale::name(&v18, &v17);
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v18;
    v15 = v14->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
  else
  {
    v15 = 1;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v17);
  *(_BYTE *)(a1 + 171) = v15;
  return a1;
}

void sub_223FE987C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  std::locale *v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale(&a9);
  sub_22319BB48((void **)(v9 + 136));
  v14 = *(void **)(v9 + 112);
  if (v14)
  {
    *(_QWORD *)(v9 + 120) = v14;
    operator delete(v14);
    sub_223FE991C(v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
    {
LABEL_3:
      v16 = *v12;
      if (!*v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    sub_223FE991C(v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
      goto LABEL_3;
  }
  *(_QWORD *)(v9 + 72) = v15;
  operator delete(v15);
  v16 = *v12;
  if (!*v12)
  {
LABEL_5:
    std::locale::~locale(v10);
    *(_QWORD *)v9 = &unk_24EC652F8;
    v17 = *(_QWORD *)(v9 + 8);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(v9 + 48) = v16;
  operator delete(v16);
  goto LABEL_5;
}

void **sub_223FE991C(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0)
LABEL_9:
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void sub_223FE99AC(std::locale *a1)
{
  sub_223FEA474(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223FE99D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v4;
  char *v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const void *v19;
  char v20;
  size_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  size_t v27;
  unsigned __int8 v28;
  unsigned __int8 *v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  char v33;
  int v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  const void *v44;
  size_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  BOOL v48;
  int v49;
  char *v50;
  size_t v51;
  size_t v52;
  int v53;
  int v54;
  char *v55;
  size_t v56;
  size_t v57;
  int v58;
  int v59;
  char *v60;
  size_t v61;
  size_t v62;
  int v63;
  int v64;
  char *v65;
  size_t v66;
  size_t v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  void *v76;
  size_t v77;
  size_t v78;
  uint64_t v79;
  BOOL v80;
  unsigned __int8 **v81;
  unsigned __int8 *v82;
  int v83;
  unsigned __int8 *v84;
  uint64_t v85;
  void *v86;
  size_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  size_t v93;
  size_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  unsigned __int8 *v98;
  uint64_t v99;
  int v100;
  void **p_p;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  const void *v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  uint64_t v117;
  int v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  int v135;
  void *v136;
  size_t v137;
  char v138;
  __int16 __src;
  void *__p;
  size_t __n;
  char v142;

  v2 = a2;
  v4 = *(char **)(a2 + 16);
  v5 = *(char **)(a2 + 24);
  if (v4 == v5)
  {
    v25 = 0;
    v26 = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_245;
  }
  if (!*(_BYTE *)(a1 + 171) || v4 + 1 == v5)
    goto LABEL_34;
  v6 = *v4;
  LOBYTE(__src) = *v4;
  v7 = v4[1];
  HIBYTE(__src) = v7;
  if (*(_BYTE *)(a1 + 169))
  {
    LOBYTE(__src) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v6);
    HIBYTE(__src) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v7);
  }
  v8 = a1 + 16;
  sub_223FEA5B4(&__src, a1 + 16, &__p, (uint64_t)&__p);
  if (v142 < 0)
  {
    v27 = __n;
    operator delete(__p);
    if (v27)
      goto LABEL_8;
LABEL_34:
    v26 = 0;
    v25 = 1;
    v28 = **(_BYTE **)(v2 + 16);
    LOBYTE(__src) = v28;
    if (!*(_BYTE *)(a1 + 169))
      goto LABEL_36;
    goto LABEL_35;
  }
  if (!v142)
    goto LABEL_34;
LABEL_8:
  v9 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 120) - v9;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unsigned __int8 *)(v9 + 1);
    while (__src != *(v12 - 1) || HIBYTE(__src) != *v12)
    {
      v12 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    goto LABEL_227;
  }
LABEL_17:
  if (!*(_BYTE *)(a1 + 170) || *(_QWORD *)(a1 + 88) == *(_QWORD *)(a1 + 96))
  {
    v26 = 0;
    goto LABEL_167;
  }
  v142 = 2;
  LOWORD(__p) = __src;
  BYTE2(__p) = 0;
  (*(void (**)(void **__return_ptr, _QWORD, void **, char *))(**(_QWORD **)(a1 + 32) + 32))(&v136, *(_QWORD *)(a1 + 32), &__p, (char *)&__p + 2);
  if (v142 < 0)
    operator delete(__p);
  v14 = *(_QWORD *)(a1 + 88);
  v15 = v138;
  v16 = *(_QWORD *)(a1 + 96) - v14;
  if (!v16)
  {
    v24 = 0;
    v70 = 0;
    v69 = 0;
    goto LABEL_164;
  }
  v128 = v2;
  v17 = 0;
  v18 = v16 / 48;
  if (v138 >= 0)
    v19 = &v136;
  else
    v19 = v136;
  v20 = v138;
  if (v138 >= 0)
    v21 = v138;
  else
    v21 = v137;
  if (v18 <= 1)
    v22 = 1;
  else
    v22 = v16 / 48;
  v23 = (unsigned __int8 *)(v14 + 47);
  v24 = 1;
  do
  {
    v59 = (char)*(v23 - 24);
    if (v59 >= 0)
      v60 = (char *)(v23 - 47);
    else
      v60 = *(char **)(v23 - 47);
    if (v59 >= 0)
      v61 = *(v23 - 24);
    else
      v61 = *(_QWORD *)(v23 - 39);
    if (v21 >= v61)
      v62 = v61;
    else
      v62 = v21;
    v63 = memcmp(v60, v19, v62);
    if (v63)
    {
      if ((v63 & 0x80000000) == 0)
        goto LABEL_98;
    }
    else if (v61 > v21)
    {
      goto LABEL_98;
    }
    v64 = (char)*v23;
    if (v64 >= 0)
      v65 = (char *)(v23 - 23);
    else
      v65 = *(char **)(v23 - 23);
    if (v64 >= 0)
      v66 = *v23;
    else
      v66 = *(_QWORD *)(v23 - 15);
    if (v66 >= v21)
      v67 = v21;
    else
      v67 = v66;
    v68 = memcmp(v19, v65, v67);
    if (v68)
    {
      if (v68 < 0)
      {
LABEL_123:
        v69 = 1;
        v70 = 5;
        goto LABEL_162;
      }
    }
    else if (v21 <= v66)
    {
      goto LABEL_123;
    }
LABEL_98:
    v24 = ++v17 < v18;
    v23 += 48;
  }
  while (v22 != v17);
  v70 = 0;
  v69 = 0;
LABEL_162:
  v2 = v128;
  v8 = a1 + 16;
  v15 = v20;
LABEL_164:
  if (v15 < 0)
    operator delete(v136);
  v26 = v69;
  if (v24)
    goto LABEL_207;
LABEL_167:
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
    goto LABEL_209;
  v133 = v26;
  v88 = v2;
  sub_223FEA848(&__src, v8, &__p, (uint64_t)&__p);
  v89 = *(_QWORD *)(a1 + 136);
  v90 = v142;
  v91 = *(_QWORD *)(a1 + 144) - v89;
  if (!v91)
    goto LABEL_188;
  v92 = v91 / 24;
  v93 = __n;
  if (v142 >= 0)
    v94 = v142;
  else
    v94 = __n;
  if (v142 < 0)
  {
    v135 = v142;
    v103 = 0;
    v104 = __p;
    if (v92 <= 1)
      v105 = 1;
    else
      v105 = v91 / 24;
    v97 = 1;
    do
    {
      v106 = *(unsigned __int8 *)(v89 + 23);
      v107 = (char)v106;
      if ((v106 & 0x80u) != 0)
        v106 = *(_QWORD *)(v89 + 8);
      if (v94 == v106)
      {
        v108 = v107 >= 0 ? (const void *)v89 : *(const void **)v89;
        if (!memcmp(v104, v108, v93))
        {
          v133 = 1;
          v70 = 5;
          goto LABEL_203;
        }
      }
      v97 = ++v103 < v92;
      v89 += 24;
    }
    while (v105 != v103);
    v70 = 0;
LABEL_203:
    v2 = v88;
    v90 = v135;
    goto LABEL_204;
  }
  if (!v142)
  {
    v114 = *(unsigned __int8 *)(v89 + 23);
    if ((v114 & 0x80u) != 0)
      v114 = *(_QWORD *)(v89 + 8);
    if (v114 != v142)
    {
      v119 = 0;
      if (v92 <= 1)
        v120 = 1;
      else
        v120 = v92;
      v121 = v120 - 1;
      v122 = (uint64_t *)(v89 + 32);
      v2 = v88;
      while (v121 != v119)
      {
        ++v119;
        v123 = *((unsigned __int8 *)v122 + 15);
        v125 = *v122;
        v122 += 3;
        v124 = v125;
        if ((v123 & 0x80u) != 0)
          v123 = v124;
        if (v94 == v123)
        {
          v97 = v119 < v92;
          v133 = 1;
          v70 = 5;
          goto LABEL_204;
        }
      }
      v97 = 0;
      v70 = 0;
      goto LABEL_204;
    }
    v2 = v88;
    v26 = 1;
LABEL_208:
    v25 = 2;
    goto LABEL_245;
  }
  v95 = 0;
  v96 = v92 <= 1 ? 1 : v91 / 24;
  v97 = 1;
  do
  {
    v98 = (unsigned __int8 *)(v89 + 24 * v95);
    v99 = v98[23];
    v100 = (char)v99;
    if ((v99 & 0x80u) != 0)
      v99 = *((_QWORD *)v98 + 1);
    if (v94 == v99)
    {
      if (v100 < 0)
        v98 = *(unsigned __int8 **)v98;
      p_p = &__p;
      v102 = v142;
      while (*(unsigned __int8 *)p_p == *v98)
      {
        p_p = (void **)((char *)p_p + 1);
        ++v98;
        if (!--v102)
        {
          v133 = 1;
          v70 = 5;
          v2 = v88;
          goto LABEL_204;
        }
      }
    }
    v97 = ++v95 < v92;
  }
  while (v95 != v96);
LABEL_188:
  v97 = 0;
  v70 = 0;
  v2 = v88;
LABEL_204:
  if (v90 < 0)
    operator delete(__p);
  v26 = v133;
  if (!v97)
  {
LABEL_209:
    if ((char)__src < 0)
    {
      v112 = *(_DWORD *)(a1 + 164);
    }
    else
    {
      v109 = *(_DWORD *)(a1 + 160);
      v110 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
      v111 = *(_DWORD *)(v110 + 4 * __src);
      if (((v111 & v109) != 0 || __src == 95 && (v109 & 0x80) != 0)
        && (SHIBYTE(__src) & 0x80000000) == 0
        && ((*(_DWORD *)(v110 + 4 * HIBYTE(__src)) & v109) != 0 || (v109 & 0x80) != 0 && HIBYTE(__src) == 95))
      {
        goto LABEL_227;
      }
      v112 = *(_DWORD *)(a1 + 164);
      if ((v112 & v111) != 0 || __src == 95 && (v112 & 0x80) != 0)
      {
LABEL_226:
        v113 = v26;
LABEL_228:
        v26 = v113;
        v25 = 2;
        goto LABEL_245;
      }
    }
    if ((SHIBYTE(__src) & 0x80000000) == 0)
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * HIBYTE(__src)) & v112) == 0)
      {
        v113 = 1;
        if (HIBYTE(__src) != 95 || (v112 & 0x80) == 0)
          goto LABEL_228;
      }
      goto LABEL_226;
    }
LABEL_227:
    v113 = 1;
    goto LABEL_228;
  }
LABEL_207:
  if (v70)
    goto LABEL_208;
  v25 = 2;
  v28 = **(_BYTE **)(v2 + 16);
  LOBYTE(__src) = v28;
  if (*(_BYTE *)(a1 + 169))
  {
LABEL_35:
    v28 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), (char)v28);
    LOBYTE(__src) = v28;
  }
LABEL_36:
  v29 = *(unsigned __int8 **)(a1 + 40);
  v30 = *(_QWORD *)(a1 + 48) - (_QWORD)v29;
  if (v30)
  {
    if (v30 <= 1)
      v30 = 1;
    while (1)
    {
      v31 = *v29++;
      if (v31 == v28)
        break;
      if (!--v30)
        goto LABEL_41;
    }
LABEL_244:
    v26 = 1;
    goto LABEL_245;
  }
LABEL_41:
  v32 = *(_DWORD *)(a1 + 164);
  if (v32 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 72))
  {
    if ((v28 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v28) & v32) == 0)
    {
      v34 = (v32 >> 7) & 1;
      v33 = v28 == 95 ? v34 : 0;
    }
    else
    {
      v33 = 1;
    }
    v35 = *(void **)(a1 + 72);
    v36 = memchr(*(void **)(a1 + 64), (char)v28, (size_t)v35 - *(_QWORD *)(a1 + 64));
    v37 = v36 ? v36 : v35;
    if ((v33 & 1) == 0 && v37 == v35)
      goto LABEL_244;
  }
  v38 = *(_QWORD *)(a1 + 88);
  v39 = *(_QWORD *)(a1 + 96);
  if (v38 == v39)
    goto LABEL_128;
  if (!*(_BYTE *)(a1 + 170))
  {
    v40 = 1;
    v138 = 1;
    LOWORD(v136) = v28;
    v41 = v39 - v38;
    if (v41)
      goto LABEL_59;
LABEL_155:
    v48 = 0;
    if ((v40 & 0x80) != 0)
      goto LABEL_126;
    goto LABEL_127;
  }
  v142 = 1;
  LOWORD(__p) = v28;
  (*(void (**)(void **__return_ptr, _QWORD, void **, char *))(**(_QWORD **)(a1 + 32) + 32))(&v136, *(_QWORD *)(a1 + 32), &__p, (char *)&__p + 1);
  if (v142 < 0)
    operator delete(__p);
  v38 = *(_QWORD *)(a1 + 88);
  v40 = v138;
  v41 = *(_QWORD *)(a1 + 96) - v38;
  if (!v41)
    goto LABEL_155;
LABEL_59:
  v134 = v25;
  v131 = v26;
  v129 = v2;
  v42 = 0;
  v43 = v41 / 48;
  v126 = v40;
  if ((v40 & 0x80u) == 0)
    v44 = &v136;
  else
    v44 = v136;
  if ((v40 & 0x80u) == 0)
    v45 = v40;
  else
    v45 = v137;
  if (v43 <= 1)
    v46 = 1;
  else
    v46 = v41 / 48;
  v47 = (unsigned __int8 *)(v38 + 47);
  v48 = 1;
  while (2)
  {
    v49 = (char)*(v47 - 24);
    if (v49 >= 0)
      v50 = (char *)(v47 - 47);
    else
      v50 = *(char **)(v47 - 47);
    if (v49 >= 0)
      v51 = *(v47 - 24);
    else
      v51 = *(_QWORD *)(v47 - 39);
    if (v45 >= v51)
      v52 = v51;
    else
      v52 = v45;
    v53 = memcmp(v50, v44, v52);
    if (v53)
    {
      if (v53 < 0)
        goto LABEL_84;
    }
    else if (v51 <= v45)
    {
LABEL_84:
      v54 = (char)*v47;
      if (v54 >= 0)
        v55 = (char *)(v47 - 23);
      else
        v55 = *(char **)(v47 - 23);
      if (v54 >= 0)
        v56 = *v47;
      else
        v56 = *(_QWORD *)(v47 - 15);
      if (v56 >= v45)
        v57 = v45;
      else
        v57 = v56;
      v58 = memcmp(v44, v55, v57);
      if (v58)
      {
        if (v58 < 0)
        {
LABEL_95:
          v26 = 1;
          v2 = v129;
          v25 = v134;
          if ((v126 & 0x80) == 0)
            goto LABEL_127;
          goto LABEL_126;
        }
      }
      else if (v45 <= v56)
      {
        goto LABEL_95;
      }
    }
    v48 = ++v42 < v43;
    v47 += 48;
    if (v46 != v42)
      continue;
    break;
  }
  v2 = v129;
  v26 = v131;
  v25 = v134;
  if ((v126 & 0x80) == 0)
    goto LABEL_127;
LABEL_126:
  operator delete(v136);
LABEL_127:
  if (v48)
    goto LABEL_245;
LABEL_128:
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
  {
LABEL_239:
    if ((v28 & 0x80) != 0)
      goto LABEL_245;
    v115 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v28) & v115) == 0)
    {
      v116 = (v115 >> 7) & 1;
      if (v28 != 95)
        v116 = 0;
      if (v116 != 1)
        goto LABEL_245;
    }
    goto LABEL_244;
  }
  sub_223FEA848(&__src, a1 + 16, (_BYTE *)&__src + 1, (uint64_t)&__p);
  v71 = *(_QWORD *)(a1 + 136);
  v72 = v142;
  v73 = *(_QWORD *)(a1 + 144) - v71;
  if (!v73)
  {
    if (v142 < 0)
      operator delete(__p);
LABEL_238:
    v28 = __src;
    goto LABEL_239;
  }
  v132 = v26;
  v130 = v2;
  v74 = 0;
  v75 = v73 / 24;
  v76 = __p;
  v77 = __n;
  if (v142 >= 0)
    v78 = v142;
  else
    v78 = __n;
  if (v75 <= 1)
    v79 = 1;
  else
    v79 = v73 / 24;
  v80 = 1;
  while (2)
  {
    v81 = (unsigned __int8 **)(v71 + 24 * v74);
    v82 = (unsigned __int8 *)*((unsigned __int8 *)v81 + 23);
    v83 = (char)v82;
    if ((char)v82 < 0)
      v82 = v81[1];
    if ((unsigned __int8 *)v78 != v82)
    {
LABEL_149:
      if (++v74 == v79)
      {
        if ((v72 & 0x80) != 0)
LABEL_236:
          operator delete(__p);
        v2 = v130;
        v26 = v132;
        goto LABEL_238;
      }
      goto LABEL_153;
    }
    if (v83 >= 0)
      v84 = (unsigned __int8 *)(v71 + 24 * v74);
    else
      v84 = *v81;
    if ((v72 & 0x80) == 0)
    {
      if (!(_DWORD)v72)
      {
LABEL_157:
        v2 = v130;
        v26 = 1;
        if (!v80)
          goto LABEL_238;
        goto LABEL_245;
      }
      v85 = 0;
      while (*((unsigned __int8 *)&__p + v85) == v84[v85])
      {
        if (v72 == ++v85)
          goto LABEL_157;
      }
      goto LABEL_149;
    }
    v127 = v80;
    v86 = v76;
    v87 = v77;
    if (memcmp(v76, v84, v77))
    {
      ++v74;
      v77 = v87;
      v76 = v86;
      if (v74 == v79)
        goto LABEL_236;
LABEL_153:
      v80 = v74 < v75;
      continue;
    }
    break;
  }
  operator delete(__p);
  v2 = v130;
  v26 = 1;
  if (!v127)
    goto LABEL_238;
LABEL_245:
  if (v26 == *(unsigned __int8 *)(a1 + 168))
  {
    v117 = 0;
    v118 = -993;
  }
  else
  {
    *(_QWORD *)(v2 + 16) += v25;
    v117 = *(_QWORD *)(a1 + 8);
    v118 = -995;
  }
  *(_DWORD *)v2 = v118;
  *(_QWORD *)(v2 + 80) = v117;
}

void sub_223FEA454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::locale *sub_223FEA474(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;

  a1->__locale_ = (std::locale::__imp *)&unk_24EC65640;
  locale = a1[17].__locale_;
  if (locale)
  {
    v3 = a1[18].__locale_;
    v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*((void **)v3 - 3));
        v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  v6 = a1[11].__locale_;
  if (v6)
  {
    v7 = a1[12].__locale_;
    v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0)
LABEL_19:
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24EC652F8;
  v11 = a1[1].__locale_;
  if (v11)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void sub_223FEA5B4(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  __int128 *v19;
  size_t v20;
  std::string v21;
  __int128 __dst;
  int64_t v23;

  v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v5 <= 0x16)
  {
    HIBYTE(v23) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (__int128 *)((char *)p_dst + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  p_dst = (__int128 *)operator new(v10 + 1);
  *((_QWORD *)&__dst + 1) = v5;
  v23 = v11 | 0x8000000000000000;
  *(_QWORD *)&__dst = p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(v23) < 0)
  {
    if (!*((_QWORD *)&__dst + 1))
      goto LABEL_17;
    v12 = (const char *)__dst;
  }
  else
  {
    if (!HIBYTE(v23))
      return;
    v12 = (const char *)&__dst;
  }
  std::__get_collation_name(&v21, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
  v13 = v21.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v21.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_17;
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    v15 = HIBYTE(v23);
    if (HIBYTE(v23) >= 3u)
      return;
    v16 = (char *)&__dst;
    goto LABEL_25;
  }
  v15 = *((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1) < 3uLL)
  {
    v16 = (char *)__dst;
LABEL_25:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v21, *(_QWORD *)(a2 + 16), v16, &v16[v15]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v21;
    if (*(char *)(a4 + 23) < 0)
    {
      v18 = *(_QWORD *)(a4 + 8);
      if (v18 == 1 || v18 == 12)
      {
        if (&__dst != (__int128 *)a4)
        {
          if (v23 >= 0)
            v19 = &__dst;
          else
            v19 = (__int128 *)__dst;
          if (v23 >= 0)
            v20 = HIBYTE(v23);
          else
            v20 = *((_QWORD *)&__dst + 1);
          sub_22319C4B8((void **)a4, v19, v20);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v17 = *(unsigned __int8 *)(a4 + 23);
      if (v17 == 1 || v17 == 12)
      {
        if (&__dst != (__int128 *)a4)
        {
          if (SHIBYTE(v23) < 0)
          {
            sub_22319C3F4((_QWORD *)a4, (void *)__dst, *((size_t *)&__dst + 1));
          }
          else
          {
            *(_OWORD *)a4 = __dst;
            *(_QWORD *)(a4 + 16) = v23;
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
  }
LABEL_17:
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__dst);
}

void sub_223FEA804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223FEA848(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  void **__dst;
  size_t v18;
  int64_t v19;

  v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v5 <= 0x16)
  {
    HIBYTE(v19) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (void **)((char *)p_dst + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  v18 = v5;
  v19 = v11 | 0x8000000000000000;
  __dst = p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  v12 = HIBYTE(v19);
  if (v19 >= 0)
    v13 = (void **)&__dst;
  else
    v13 = __dst;
  if (v19 < 0)
    v12 = v18;
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v13, (char *)v13 + v12);
  v14 = *(unsigned __int8 *)(a4 + 23);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      return;
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0)
      v16 = (_BYTE *)a4;
    else
      v16 = *(_BYTE **)a4;
    v16[11] = v16[3];
    if (SHIBYTE(v19) < 0)
      goto LABEL_26;
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
    goto LABEL_25;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if (SHIBYTE(v19) < 0)
LABEL_26:
    operator delete(__dst);
}

void sub_223FEA9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223FEA9DC()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x227684424](exception, 5);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_223FEAA14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_223FEAA28(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v4;
  int v5;
  char *v6;
  int v9;
  int v10;
  char v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  void **v30;
  _BYTE *v31;
  char *v32;
  _BYTE *v34;
  void *v35[2];
  uint64_t v36;
  void *v37[2];
  uint64_t v38;
  void *__p[2];
  uint64_t v40;
  __int128 v41;
  int64_t v42;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (char *)a4;
  v9 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_38:
    v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_33;
  }
  v10 = a2[1];
  if (v10 != 46)
  {
    if (v10 != 58)
    {
      if (v10 == 61)
      {
        v6 = sub_223FEAFBC(a1, a2 + 2, a3, a4);
        v11 = 0;
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_64;
        goto LABEL_63;
      }
      v9 = 0;
      goto LABEL_38;
    }
    v12 = a2 + 2;
    if (a3 - (v4 + 2) >= 2)
    {
      v13 = 0;
      v14 = (unsigned __int8 *)v4;
      if (v4[2] == 58)
        goto LABEL_14;
      do
      {
        do
        {
          if (a3 - v4 - 4 == v13)
            goto LABEL_89;
          v14 = (unsigned __int8 *)&v4[++v13];
        }
        while (v4[v13 + 2] != 58);
LABEL_14:
        ;
      }
      while (v14[3] != 93);
      v15 = &v4[v13 + 2];
      if (v15 != a3)
      {
        v16 = sub_223FEC6F8(a1, v12, v15, *(_DWORD *)(a1 + 24) & 1);
        if (!v16)
          sub_223FEC6AC();
        v11 = 0;
        *((_DWORD *)v6 + 40) |= v16;
        v6 = &v4[v13 + 4];
        if (SHIBYTE(v40) < 0)
          goto LABEL_63;
        goto LABEL_64;
      }
    }
LABEL_89:
    sub_223FEA9DC();
  }
  v17 = a2 + 2;
  if (a3 - (v4 + 2) < 2)
    goto LABEL_89;
  v18 = a3 - v4 - 4;
  v19 = v4 + 2;
  v20 = v17 + 1;
  if (*v17 == 46)
    goto LABEL_23;
  do
  {
    do
    {
      if (!v18)
        goto LABEL_89;
      --v18;
      v19 = v20;
      v21 = *v20++;
    }
    while (v21 != 46);
LABEL_23:
    ;
  }
  while (*v20 != 93);
  if (v19 == a3)
    goto LABEL_89;
  sub_223FEC224(v17, a1, v19, (uint64_t)&v41);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v40 = v42;
  *(_OWORD *)__p = v41;
  v22 = (char *)HIBYTE(v42);
  v9 = SHIBYTE(v42);
  v23 = *((_QWORD *)&v41 + 1);
  if (v42 < 0)
    v22 = (char *)__p[1];
  if ((unint64_t)(v22 - 1) >= 2)
    sub_223FEC1D8();
  v4 = v19 + 2;
  v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v42 >= 0)
    v23 = HIBYTE(v42);
  if (v23)
  {
    v28 = v4;
    if (v4 == a3)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_33:
  if ((v24 | 0x40) != 0x40)
  {
    LOBYTE(v25) = *v4;
LABEL_57:
    if (v9 < 0)
    {
      v34 = __p[0];
      __p[1] = (void *)1;
      *(_BYTE *)__p[0] = v25;
      v34[1] = 0;
      v28 = v4 + 1;
      if (v4 + 1 == a3)
        goto LABEL_41;
    }
    else
    {
      HIBYTE(v40) = 1;
      LOWORD(__p[0]) = v25;
      v28 = v4 + 1;
      if (v4 + 1 == a3)
        goto LABEL_41;
    }
    goto LABEL_40;
  }
  v25 = *v4;
  if (v25 != 92)
    goto LABEL_57;
  v26 = v4 + 1;
  if (v24)
    v27 = sub_223FEB4E0(a1, v26, a3, (uint64_t *)__p);
  else
    v27 = (char *)sub_223FEB324(a1, (unsigned __int8 *)v26, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v6);
  v28 = v27;
  if (v27 == a3)
  {
LABEL_41:
    if (SHIBYTE(v40) < 0)
    {
      if (!__p[1])
        goto LABEL_62;
      if (__p[1] != (void *)1)
      {
        v30 = (void **)__p[0];
LABEL_61:
        sub_223FEBE10((uint64_t)v6, *(char *)v30, *((char *)v30 + 1));
LABEL_62:
        v11 = 1;
        v4 = v28;
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_64;
        goto LABEL_63;
      }
      v30 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v40))
        goto LABEL_62;
      v30 = __p;
      if (HIBYTE(v40) != 1)
        goto LABEL_61;
    }
    sub_223FE92F0((uint64_t)v6, *(char *)v30);
    goto LABEL_62;
  }
LABEL_40:
  v29 = *v28;
  if (v29 == 93)
    goto LABEL_41;
  v31 = v28 + 1;
  if (v28 + 1 == a3 || v29 != 45 || *v31 == 93)
    goto LABEL_41;
  v41 = 0uLL;
  v42 = 0;
  v4 = v28 + 2;
  if (v28 + 2 == a3 || *v31 != 91 || *v4 != 46)
  {
    if ((v24 | 0x40) == 0x40)
    {
      LODWORD(v31) = *v31;
      if ((_DWORD)v31 == 92)
      {
        if (v24)
          v32 = sub_223FEB4E0(a1, v28 + 2, a3, (uint64_t *)&v41);
        else
          v32 = (char *)sub_223FEB324(a1, (unsigned __int8 *)v28 + 2, (unsigned __int8 *)a3, (uint64_t)&v41, (uint64_t)v6);
        goto LABEL_79;
      }
    }
    else
    {
      LOBYTE(v31) = *v31;
    }
    HIBYTE(v42) = 1;
    LOWORD(v41) = v31;
    goto LABEL_80;
  }
  v32 = sub_223FEB228(a1, v28 + 3, a3, (uint64_t)&v41);
LABEL_79:
  v4 = v32;
LABEL_80:
  *(_OWORD *)v37 = *(_OWORD *)__p;
  v38 = v40;
  __p[1] = 0;
  v40 = 0;
  __p[0] = 0;
  *(_OWORD *)v35 = v41;
  v36 = v42;
  v41 = 0uLL;
  v42 = 0;
  sub_223FEB8E4((uint64_t)v6, (char *)v37, (uint64_t)v35);
  if (SHIBYTE(v36) < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_83;
LABEL_87:
      operator delete((void *)v41);
      v11 = 1;
      if (SHIBYTE(v40) < 0)
        goto LABEL_63;
      goto LABEL_64;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_82;
  }
  operator delete(v37[0]);
  if (SHIBYTE(v42) < 0)
    goto LABEL_87;
LABEL_83:
  v11 = 1;
  if (SHIBYTE(v40) < 0)
LABEL_63:
    operator delete(__p[0]);
LABEL_64:
  if ((v11 & 1) != 0)
    return v4;
  return v6;
}

void sub_223FEAF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *sub_223FEAFBC(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *__p[2];
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unsigned __int8 v22;

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_39;
  v7 = 0;
  v8 = __src;
  if (*__src != 61)
    goto LABEL_5;
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      v8 = &__src[++v7];
      if (__src[v7] == 61)
        goto LABEL_4;
    }
LABEL_39:
    sub_223FEA9DC();
  }
  if (&__src[v7] == a3)
    goto LABEL_39;
  sub_223FEC224(__src, a1, &__src[v7], (uint64_t)&v20);
  if (((char)v22 & 0x80000000) == 0)
  {
    v9 = v22;
    if (v22)
    {
      v10 = (char *)&v20;
      goto LABEL_14;
    }
LABEL_40:
    sub_223FEC1D8();
  }
  v9 = v21;
  if (!v21)
    goto LABEL_40;
  v10 = (char *)v20;
LABEL_14:
  sub_223FEC4B8(a1, (uint64_t)v10, &v10[v9], (uint64_t)__p);
  v11 = (void *)HIBYTE(v19);
  if (v19 < 0)
    v11 = __p[1];
  if (v11)
  {
    v12 = *(_QWORD *)(a4 + 144);
    if (v12 >= *(_QWORD *)(a4 + 152))
    {
      *(_QWORD *)(a4 + 144) = sub_22323C290((char **)(a4 + 136), (uint64_t)__p);
      if (SHIBYTE(v19) < 0)
        goto LABEL_37;
    }
    else
    {
      if (SHIBYTE(v19) < 0)
      {
        sub_223197FA4(*(_BYTE **)(a4 + 144), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        v13 = *(_OWORD *)__p;
        *(_QWORD *)(v12 + 16) = v19;
        *(_OWORD *)v12 = v13;
      }
      *(_QWORD *)(a4 + 144) = v12 + 24;
      *(_QWORD *)(a4 + 144) = v12 + 24;
      if (SHIBYTE(v19) < 0)
        goto LABEL_37;
    }
  }
  else
  {
    v14 = v22;
    if ((v22 & 0x80u) != 0)
      v14 = v21;
    if (v14 == 2)
    {
      v16 = (char *)&v20;
      if ((v22 & 0x80u) != 0)
        v16 = (char *)v20;
      sub_223FEBE10(a4, *v16, v16[1]);
    }
    else
    {
      if (v14 != 1)
        sub_223FEC1D8();
      v15 = (char *)&v20;
      if ((v22 & 0x80u) != 0)
        v15 = (char *)v20;
      sub_223FE92F0(a4, *v15);
    }
    if (SHIBYTE(v19) < 0)
    {
LABEL_37:
      operator delete(__p[0]);
      if ((char)v22 < 0)
        goto LABEL_38;
      return &__src[v7 + 2];
    }
  }
  if ((char)v22 < 0)
LABEL_38:
    operator delete(v20);
  return &__src[v7 + 2];
}

void sub_223FEB1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *sub_223FEB228(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  unint64_t v12;

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_15;
  v6 = 0;
  v7 = __src;
  if (*__src != 46)
    goto LABEL_5;
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      v7 = &__src[++v6];
      if (__src[v6] == 46)
        goto LABEL_4;
    }
LABEL_15:
    sub_223FEA9DC();
  }
  if (&__src[v6] == a3)
    goto LABEL_15;
  sub_223FEC224(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v11;
  v8 = v12;
  *(_QWORD *)(a4 + 16) = v12;
  v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a4 + 8);
  if (v9 - 1 >= 2)
    sub_223FEC1D8();
  return &__src[v6 + 2];
}

unsigned __int8 *sub_223FEB324(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    sub_223FE8114();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      sub_223FEC840(a5, 95);
      result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      sub_223FE92F0(a5, 95);
      result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        result = sub_223FE83C8(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        result = a2 + 1;
      }
      break;
  }
  return result;
}

char *sub_223FEB4E0(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  char v5;
  char v7;
  char *v8;
  char v9;
  int v10;
  char v11;

  if (a2 == a3)
LABEL_70:
    sub_223FE8114();
  v5 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v5;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        sub_223FE888C(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        sub_223FE888C(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        sub_223FE888C(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        sub_223FE888C(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        sub_223FE888C(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        sub_223FE888C(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        sub_223FE888C(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        sub_223FE888C(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30)
        goto LABEL_70;
      v7 = *a2 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_42:
        if (a4)
          goto LABEL_43;
LABEL_69:
        sub_223FE888C(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_42;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        v8 = a3;
        if (a4)
          goto LABEL_43;
        goto LABEL_69;
      }
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      if (!a4)
        goto LABEL_69;
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v7;
      *((_BYTE *)a4 + 1) = 0;
      return v8;
  }
}

void sub_223FEB8E4(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t j;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t k;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t m;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char v35;
  char *v36;
  char v37;
  _BYTE *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  int v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  void *__p[2];
  uint64_t v49;
  void *v50[2];
  uint64_t v51;

  v3 = a3;
  v4 = (uint64_t)a2;
  if (!*(_BYTE *)(a1 + 170))
  {
    v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((_QWORD *)a2 + 1) != 1)
        goto LABEL_74;
    }
    else if (v16 != 1)
    {
LABEL_74:
      sub_223FECE48();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(_QWORD *)(a3 + 8) != 1)
        goto LABEL_74;
    }
    else if (*(_BYTE *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(_BYTE *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)__p = *(_OWORD *)v4;
      v49 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      *(_OWORD *)v50 = *(_OWORD *)v3;
      v51 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)v3 = 0;
      v39 = *(_QWORD *)(a1 + 96);
      if (v39 < *(_QWORD *)(a1 + 104))
      {
        v40 = *(_OWORD *)__p;
        *(_QWORD *)(v39 + 16) = v49;
        *(_OWORD *)v39 = v40;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(_QWORD *)(v39 + 40) = v41;
        v50[1] = 0;
        v51 = 0;
        v50[0] = 0;
        *(_QWORD *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      v42 = sub_223FECE94((void **)(a1 + 88), (uint64_t)__p);
      v43 = SHIBYTE(v51);
      *(_QWORD *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    v34 = a2;
    if ((v16 & 0x80) != 0)
      v34 = *(char **)a2;
    v35 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
        goto LABEL_64;
    }
    else
    {
      *(_BYTE *)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        v37 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v36);
        v38 = (_BYTE *)v3;
        if (*(char *)(v3 + 23) < 0)
          v38 = *(_BYTE **)v3;
        *v38 = v37;
        goto LABEL_67;
      }
    }
    v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(_BYTE *)(a1 + 169))
  {
    for (i = 0; ; ++i)
    {
      v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(_QWORD *)(v4 + 8))
        {
LABEL_13:
          for (j = 0; ; ++j)
          {
            v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(_QWORD *)(v3 + 8))
                goto LABEL_44;
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            v13 = v3;
            if ((v12 & 0x80) != 0)
              v13 = *(_QWORD *)v3;
            v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v13 + j));
            v15 = v3;
            if (*(char *)(v3 + 23) < 0)
              v15 = *(_QWORD *)v3;
            *(_BYTE *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      v8 = v4;
      if ((v7 & 0x80) != 0)
        v8 = *(_QWORD *)v4;
      v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v8 + i));
      v10 = v4;
      if (*(char *)(v4 + 23) < 0)
        v10 = *(_QWORD *)v4;
      *(_BYTE *)(v10 + i) = v9;
    }
  }
  for (k = 0; ; ++k)
  {
    v19 = a2[23];
    if (a2[23] < 0)
      break;
    if (k >= v19)
      goto LABEL_35;
LABEL_33:
    v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      v18 = *(char **)a2;
      v20 = *(char **)a2;
    }
    else
    {
      v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((_QWORD *)a2 + 1))
    goto LABEL_33;
LABEL_35:
  for (m = 0; ; ++m)
  {
    v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0)
      break;
    if (m >= v23)
      goto LABEL_44;
LABEL_42:
    v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      v22 = *(_QWORD *)a3;
      v24 = *(_QWORD *)a3;
    }
    else
    {
      v24 = a3;
    }
    *(_BYTE *)(v24 + m) = *(_BYTE *)(v22 + m);
  }
  if (m < *(_QWORD *)(a3 + 8))
    goto LABEL_42;
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    v26 = v4;
    v4 = *(_QWORD *)v4;
    v25 = *(_QWORD *)(v26 + 8);
  }
  else
  {
    v25 = *(unsigned __int8 *)(v4 + 23);
  }
  sub_223FECCB8(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    v28 = v3;
    v3 = *(_QWORD *)v3;
    v27 = *(_QWORD *)(v28 + 8);
  }
  else
  {
    v27 = *(unsigned __int8 *)(v3 + 23);
  }
  sub_223FECCB8(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)__p = *(_OWORD *)v46;
  v49 = v47;
  *(_OWORD *)v50 = *(_OWORD *)v44;
  v51 = v45;
  v29 = *(_QWORD *)(a1 + 96);
  if (v29 >= *(_QWORD *)(a1 + 104))
  {
    v32 = sub_223FECE94((void **)(a1 + 88), (uint64_t)__p);
    v33 = SHIBYTE(v51);
    *(_QWORD *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  v30 = *(_OWORD *)__p;
  *(_QWORD *)(v29 + 16) = v49;
  *(_OWORD *)v29 = v30;
  __p[1] = 0;
  v49 = 0;
  __p[0] = 0;
  v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(_QWORD *)(v29 + 40) = v31;
  v50[1] = 0;
  v51 = 0;
  v50[0] = 0;
  *(_QWORD *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0)
    goto LABEL_69;
}

void sub_223FEBDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223234BC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FEBDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223234BC4((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_223FEBE10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _WORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  unint64_t v36;
  __int128 v37;
  __int16 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  unint64_t v53;
  __int128 v54;
  __int16 v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  _OWORD *v60;
  char *v61;
  unint64_t v62;
  __int128 v63;
  __int16 v64;

  if (*(_BYTE *)(a1 + 169))
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
    v8 = *(char **)(a1 + 120);
    v7 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      v9 = (char **)(a1 + 112);
      v10 = *(char **)(a1 + 112);
      v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        v12 = v11 >> 1;
        v13 = v7 - (_QWORD)v10;
        if (v13 <= (v11 >> 1) + 1)
          v14 = v12 + 1;
        else
          v14 = v13;
        if (v13 >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (!v15)
        {
          v16 = 0;
          v17 = (_WORD *)(2 * v12);
          v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          v19 = 2 * v12 + 2;
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
LABEL_30:
          v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E)
            goto LABEL_71;
          if ((unint64_t)(v8 - &v16[v11 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
            goto LABEL_71;
          v31 = (v30 >> 1) + 1;
          v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          v33 = &v8[-v32];
          v17 = (_WORD *)((char *)v17 - v32);
          v34 = &v16[2 * v12 - 16];
          v35 = v8 - 16;
          v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          v16 = operator new(2 * v15);
          v17 = &v16[2 * v12];
          v18 = &v16[2 * v15];
          *v17 = v6;
          v19 = (uint64_t)(v17 + 1);
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
          goto LABEL_30;
        }
LABEL_68:
        sub_223174E94();
      }
LABEL_67:
      sub_22316E078();
    }
LABEL_28:
    *(_WORD *)v8 = v6;
    v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  v9 = (char **)(a1 + 112);
  v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  v8 = *(char **)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21)
      goto LABEL_28;
    v22 = *v9;
    v23 = v8 - *v9;
    if (v23 <= -3)
      goto LABEL_67;
    v24 = v23 >> 1;
    v25 = v21 - (_QWORD)v22;
    if (v25 <= (v23 >> 1) + 1)
      v26 = v24 + 1;
    else
      v26 = v25;
    if (v25 >= 0x7FFFFFFFFFFFFFFELL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      if (v27 < 0)
        goto LABEL_68;
      v28 = operator new(2 * v27);
      v17 = &v28[2 * v24];
      v18 = &v28[2 * v27];
      *v17 = v6;
      v19 = (uint64_t)(v17 + 1);
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    else
    {
      v28 = 0;
      v17 = (_WORD *)(2 * v24);
      v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      v19 = 2 * v24 + 2;
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E)
      goto LABEL_72;
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_72;
    v48 = (v47 >> 1) + 1;
    v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    v50 = &v8[-v49];
    v17 = (_WORD *)((char *)v17 - v49);
    v51 = &v28[2 * v24 - 16];
    v52 = v8 - 16;
    v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21)
    goto LABEL_28;
  v39 = *v9;
  v40 = v8 - *v9;
  if (v40 <= -3)
    goto LABEL_67;
  v41 = v40 >> 1;
  v42 = v21 - (_QWORD)v39;
  if (v42 <= (v40 >> 1) + 1)
    v43 = v41 + 1;
  else
    v43 = v42;
  if (v42 >= 0x7FFFFFFFFFFFFFFELL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v43;
  if (!v44)
  {
    v45 = 0;
    v17 = (_WORD *)(2 * v41);
    v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    v19 = 2 * v41 + 2;
    v46 = (char *)(v8 - v39);
    if (v8 == v39)
      goto LABEL_64;
    goto LABEL_57;
  }
  if (v44 < 0)
    goto LABEL_68;
  v45 = operator new(2 * v44);
  v17 = &v45[2 * v41];
  v18 = &v45[2 * v44];
  *v17 = v6;
  v19 = (uint64_t)(v17 + 1);
  v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E)
      goto LABEL_73;
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_73;
    v57 = (v56 >> 1) + 1;
    v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    v59 = &v8[-v58];
    v17 = (_WORD *)((char *)v17 - v58);
    v60 = &v45[2 * v41 - 16];
    v61 = v8 - 16;
    v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      *v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v18;
  if (v8)
    operator delete(v8);
LABEL_66:
  *(_QWORD *)(a1 + 120) = v19;
}

void sub_223FEC1D8()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x227684424](exception, 1);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_223FEC210(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223FEC224(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  __int128 *v19;
  size_t v20;
  std::string v21;
  __int128 __dst;
  int64_t v23;

  v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v5 <= 0x16)
  {
    HIBYTE(v23) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (__int128 *)((char *)p_dst + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  p_dst = (__int128 *)operator new(v10 + 1);
  *((_QWORD *)&__dst + 1) = v5;
  v23 = v11 | 0x8000000000000000;
  *(_QWORD *)&__dst = p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(v23) < 0)
  {
    if (!*((_QWORD *)&__dst + 1))
      goto LABEL_17;
    v12 = (const char *)__dst;
  }
  else
  {
    if (!HIBYTE(v23))
      return;
    v12 = (const char *)&__dst;
  }
  std::__get_collation_name(&v21, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
  v13 = v21.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v21.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_17;
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    v15 = HIBYTE(v23);
    if (HIBYTE(v23) >= 3u)
      return;
    v16 = (char *)&__dst;
    goto LABEL_25;
  }
  v15 = *((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1) < 3uLL)
  {
    v16 = (char *)__dst;
LABEL_25:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v21, *(_QWORD *)(a2 + 16), v16, &v16[v15]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v21;
    if (*(char *)(a4 + 23) < 0)
    {
      v18 = *(_QWORD *)(a4 + 8);
      if (v18 == 1 || v18 == 12)
      {
        if (&__dst != (__int128 *)a4)
        {
          if (v23 >= 0)
            v19 = &__dst;
          else
            v19 = (__int128 *)__dst;
          if (v23 >= 0)
            v20 = HIBYTE(v23);
          else
            v20 = *((_QWORD *)&__dst + 1);
          sub_22319C4B8((void **)a4, v19, v20);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v17 = *(unsigned __int8 *)(a4 + 23);
      if (v17 == 1 || v17 == 12)
      {
        if (&__dst != (__int128 *)a4)
        {
          if (SHIBYTE(v23) < 0)
          {
            sub_22319C3F4((_QWORD *)a4, (void *)__dst, *((size_t *)&__dst + 1));
          }
          else
          {
            *(_OWORD *)a4 = __dst;
            *(_QWORD *)(a4 + 16) = v23;
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
  }
LABEL_17:
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__dst);
}

void sub_223FEC474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223FEC4B8(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  _OWORD *p_p;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  void *__p;
  unint64_t v25;
  int64_t v26;

  v5 = (unint64_t)&a3[-a2];
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v5 > 0x16)
  {
    v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v16 = v5 | 7;
    v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    v25 = v5;
    v26 = v17 | 0x8000000000000000;
    __p = p_p;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = p_p;
    goto LABEL_16;
  }
  HIBYTE(v26) = (_BYTE)a3 - a2;
  p_p = &__p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)p_p - a2 < 0x20)
  {
    v10 = p_p;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)p_p + (v5 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = p_p + 1;
    v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  v19 = HIBYTE(v26);
  if (v26 >= 0)
    v20 = (char *)&__p;
  else
    v20 = (char *)__p;
  if (v26 < 0)
    v19 = v25;
  (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v20, &v20[v19]);
  v21 = *(unsigned __int8 *)(a4 + 23);
  v22 = (char)v21;
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a4 + 8);
  if (v21 == 1)
    goto LABEL_32;
  if (v21 != 12)
  {
    if (v22 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      if ((SHIBYTE(v26) & 0x80000000) == 0)
        return;
LABEL_35:
      operator delete(__p);
      return;
    }
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      return;
    goto LABEL_35;
  }
  if (v22 >= 0)
    v23 = (_BYTE *)a4;
  else
    v23 = *(_BYTE **)a4;
  v23[11] = v23[3];
  if (SHIBYTE(v26) < 0)
    goto LABEL_35;
}

void sub_223FEC690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223FEC6AC()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x227684424](exception, 2);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_223FEC6E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223FEC6F8(uint64_t a1, _BYTE *__src, _BYTE *a3, BOOL a4)
{
  size_t v4;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void **v13;
  const char *v14;
  uint64_t classname;
  void **__dst;
  size_t v18;
  int64_t v19;

  v4 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v4 <= 0x16)
  {
    HIBYTE(v19) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v4);
    p_dst = (void **)((char *)p_dst + v4);
    goto LABEL_9;
  }
  v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v10 = v4 | 7;
  v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  v18 = v4;
  v19 = v11 | 0x8000000000000000;
  __dst = p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  v12 = HIBYTE(v19);
  if (v19 >= 0)
    v13 = (void **)&__dst;
  else
    v13 = __dst;
  if (v19 < 0)
    v12 = v18;
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v13, (char *)v13 + v12);
  if (v19 >= 0)
    v14 = (const char *)&__dst;
  else
    v14 = (const char *)__dst;
  classname = std::__get_classname(v14, a4);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst);
  return classname;
}

void sub_223FEC824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223FEC840(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 64);
    v5 = *(_BYTE **)(a1 + 72);
    v16 = *(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      sub_22316E078();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 64) = v13;
        *(_QWORD *)(a1 + 72) = v15;
        *(_QWORD *)(a1 + 80) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 64);
  v7 = *(_BYTE **)(a1 + 64);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v15;
  *(_QWORD *)(a1 + 80) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 72) = v15;
}

void sub_223FECCB8(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3;
  _OWORD *p_p;
  _BYTE *v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char *v18;
  void *__p;
  unint64_t v20;
  int64_t v21;

  v3 = (unint64_t)&a3[-a2];
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v3 > 0x16)
  {
    v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v14 = v3 | 7;
    v15 = v14 + 1;
    p_p = operator new(v14 + 1);
    v20 = v3;
    v21 = v15 | 0x8000000000000000;
    __p = p_p;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v8 = p_p;
    goto LABEL_16;
  }
  HIBYTE(v21) = (_BYTE)a3 - a2;
  p_p = &__p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v3 < 0x20 || (unint64_t)p_p - a2 < 0x20)
  {
    v8 = p_p;
    v9 = (char *)a2;
  }
  else
  {
    v8 = (char *)p_p + (v3 & 0xFFFFFFFFFFFFFFE0);
    v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    v10 = (__int128 *)(a2 + 16);
    v11 = p_p + 1;
    v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  *v8 = 0;
  v17 = HIBYTE(v21);
  if (v21 >= 0)
    v18 = (char *)&__p;
  else
    v18 = (char *)__p;
  if (v21 < 0)
    v17 = v20;
  (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v18, &v18[v17]);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
}

void sub_223FECE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223FECE48()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x227684424](exception, 9);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_223FECE80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_223FECE94(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      sub_223174E94();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v15 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13)
        goto LABEL_22;
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13)
    operator delete(v13);
  return v11;
}

_QWORD *sub_223FED030(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24EC652F8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223FED074(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24EC652F8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FED0C8(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_223FED0F8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24EC652F8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223FED13C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24EC652F8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FED190(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_223FED1C8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *result;

  v10 = (_QWORD *)operator new();
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(v11 + 8);
  *v10 = &unk_24EC65280;
  v10[1] = v12;
  *(_QWORD *)(v11 + 8) = 0;
  v13 = operator new();
  v14 = *(_DWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)v13 = &unk_24EC65718;
  *(_QWORD *)(v13 + 8) = v15;
  *(_QWORD *)(v13 + 16) = v10;
  *(_QWORD *)(v13 + 24) = a2;
  *(_QWORD *)(v13 + 32) = -1;
  *(_DWORD *)(v13 + 40) = v14;
  *(_DWORD *)(v13 + 44) = a4;
  *(_DWORD *)(v13 + 48) = a5;
  *(_BYTE *)(v13 + 52) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  result = (_QWORD *)operator new();
  *result = &unk_24EC657A8;
  result[1] = v13;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(a3 + 8) = v13;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

void sub_223FED2DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_223FED2F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223FED318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *result;

  v14 = (_QWORD *)operator new();
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(v15 + 8);
  *v14 = &unk_24EC65280;
  v14[1] = v16;
  *(_QWORD *)(v15 + 8) = 0;
  v17 = operator new();
  v18 = *(_DWORD *)(a1 + 32);
  v19 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)v17 = &unk_24EC65718;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = a2;
  *(_QWORD *)(v17 + 32) = a3;
  *(_DWORD *)(v17 + 40) = v18;
  *(_DWORD *)(v17 + 44) = a5;
  *(_DWORD *)(v17 + 48) = a6;
  *(_BYTE *)(v17 + 52) = a7;
  *(_QWORD *)(a4 + 8) = 0;
  result = (_QWORD *)operator new();
  *result = &unk_24EC657A8;
  result[1] = v17;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(a4 + 8) = v17;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

void sub_223FED438(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_223FED454(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_223FED474()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x227684424](exception, 8);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_223FED4AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223FED4C0()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x227684424](exception, 7);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_223FED4F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223FED50C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24EC65778;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24EC652F8;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_223FED574(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24EC65778;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24EC652F8;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FED5EC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;

  v2 = *(unsigned int *)(result + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    *v4 = 0;
    if (!*(_QWORD *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(_QWORD *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
      *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
      v20 = *(_DWORD *)(result + 44);
      v21 = *(_DWORD *)(result + 48);
      if (v20 == v21)
        return result;
      v22 = (v21 - 1);
      v23 = (v20 - 1);
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 32);
      v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        v28 = v25 + 24 * v23 + 24;
        v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(_QWORD *)(v28 - 24) = v24;
          *(_QWORD *)(v28 - 16) = v24;
          *(_QWORD *)v28 = v24;
          *(_QWORD *)(v28 + 8) = v24;
          *(_BYTE *)(v28 - 8) = 0;
          *(_BYTE *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL))
          return result;
      }
      else
      {
        v27 = v23;
      }
      v30 = v22 - v27;
      v31 = (_BYTE *)(v25 + 24 * v27 + 16);
      do
      {
        *((_QWORD *)v31 - 2) = v24;
        *((_QWORD *)v31 - 1) = v24;
        *v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  v5 = *v4 + 1;
  *v4 = v5;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6)
    v8 = v5 < v7 && *(_QWORD *)(v3 + 16 * v2 + 8) != *(_QWORD *)(a2 + 16);
  if (v8 && v5 >= v6)
    goto LABEL_26;
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(result + 44);
  v13 = *(_DWORD *)(result + 48);
  if (v12 == v13)
    return result;
  v14 = (v13 - 1);
  v15 = (v12 - 1);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    v19 = v15;
LABEL_39:
    v34 = v14 - v19;
    v35 = (_BYTE *)(v17 + 24 * v19 + 16);
    do
    {
      *((_QWORD *)v35 - 2) = v16;
      *((_QWORD *)v35 - 1) = v16;
      *v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  v32 = v17 + 24 * v15 + 24;
  v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)(v32 - 24) = v16;
    *(_QWORD *)(v32 - 16) = v16;
    *(_QWORD *)v32 = v16;
    *(_QWORD *)(v32 + 8) = v16;
    *(_BYTE *)(v32 - 8) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_39;
  return result;
}

uint64_t sub_223FED7D0(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 44);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(_QWORD *)(a3 + 16);
  v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    v5 = (v4 - 1);
    v6 = (v3 - 1);
    v7 = *(_QWORD *)(a3 + 24);
    v8 = *(_QWORD *)(a3 + 32);
    v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      v10 = v6;
LABEL_9:
      v13 = v5 - v10;
      v14 = (_BYTE *)(v8 + 24 * v10 + 16);
      do
      {
        *((_QWORD *)v14 - 2) = v7;
        *((_QWORD *)v14 - 1) = v7;
        *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    v11 = v8 + 24 * v6 + 24;
    v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v11 - 24) = v7;
      *(_QWORD *)(v11 - 16) = v7;
      *(_QWORD *)v11 = v7;
      *(_QWORD *)(v11 + 8) = v7;
      *(_BYTE *)(v11 - 8) = 0;
      *(_BYTE *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_9;
  }
  return result;
}

_QWORD *sub_223FED898(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24EC65778;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24EC652F8;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_223FED900(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24EC65778;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24EC652F8;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x227684CE8);
}

void sub_223FED97C()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FED990(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_223FED9A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24EC65778;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24EC652F8;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_223FEDA0C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24EC65778;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24EC652F8;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x227684CE8);
}

void sub_223FEDA84(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_223FEDA90(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void sub_223FEDAB8()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FEDACC(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void sub_223FEDAE0()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x227684424](exception, 15);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_223FEDB18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_223FEDB2C(uint64_t a1, uint64_t a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_223FEE304(a1, (char *)a2, a3);
  v7 = v6;
  if (v6 != (char *)a2 || v6 == a3)
    return v7;
  if ((char *)(a2 + 1) == a3)
    return (char *)a2;
  if (*(_BYTE *)a2 != 92)
    return (char *)a2;
  v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    v9 = (unsigned __int8 *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new();
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)v10 = &unk_24EC65688;
      *(_QWORD *)(v10 + 8) = v13;
      *(_DWORD *)(v10 + 16) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (unsigned __int8 *)a3)
        goto LABEL_25;
      v15 = v9;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_DWORD *)(a1 + 28);
      v18 = (unsigned __int8 *)sub_223FEDB2C(a1, v15, a3);
      if (v18 == v15)
        break;
      v9 = sub_223FEDD70(a1, v18, (unsigned __int8 *)a3, v16, v17 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
    while (v9 != v15);
    if (v15 + 1 == (unsigned __int8 *)a3 || *v15 != 92 || v15[1] != 41)
LABEL_25:
      sub_223FE67E4();
    v7 = (char *)&v15[2 * (v15[1] == 41)];
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v19 = operator new();
      v20 = *(_QWORD *)(a1 + 56);
      v21 = *(_QWORD *)(v20 + 8);
      *(_QWORD *)v19 = &unk_24EC656D0;
      *(_QWORD *)(v19 + 8) = v21;
      *(_DWORD *)(v19 + 16) = v11;
      *(_QWORD *)(v20 + 8) = v19;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v7;
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return (char *)a2;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    sub_223FE8A10();
  sub_223FE8A5C(a1, v8 - 48);
  return (char *)(a2 + 2);
}

unsigned __int8 *sub_223FEDD70(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  unsigned __int8 *v6;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  _BOOL4 v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;

  v6 = a2;
  if (a2 != a3)
  {
    v11 = *a2;
    if (v11 == 42)
    {
      v12 = (_QWORD *)operator new();
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *v12 = &unk_24EC65280;
      v12[1] = v14;
      *(_QWORD *)(v13 + 8) = 0;
      v15 = operator new();
      v16 = *(_DWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(v15 + 16) = v12;
      *(_QWORD *)v15 = &unk_24EC65718;
      *(_QWORD *)(v15 + 8) = v17;
      *(_OWORD *)(v15 + 24) = xmmword_2245F53E0;
      *(_DWORD *)(v15 + 40) = v16;
      *(_DWORD *)(v15 + 44) = a5;
      *(_DWORD *)(v15 + 48) = a6;
      *(_BYTE *)(v15 + 52) = 1;
      *(_QWORD *)(a4 + 8) = 0;
      v18 = (_QWORD *)operator new();
      *v18 = &unk_24EC657A8;
      v18[1] = v15;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v18;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(a4 + 8) = v15;
      ++*(_DWORD *)(a1 + 32);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v19 = &a2[2 * (a2[1] == 123)];
      if (v19 == a3)
        goto LABEL_44;
      v20 = *v19;
      if ((v20 & 0xF8) != 0x30 && (v20 & 0xFE) != 0x38)
        goto LABEL_44;
      v21 = v20 - 48;
      v22 = v19 + 1;
      if (v19 + 1 == a3)
      {
LABEL_15:
        v22 = a3;
      }
      else
      {
        while (1)
        {
          v23 = *v22;
          if ((v23 & 0xF8) != 0x30 && (v23 & 0xFE) != 0x38)
            break;
          if (v21 >= 214748364)
            goto LABEL_44;
          v21 = v23 + 10 * v21 - 48;
          if (++v22 == a3)
            goto LABEL_15;
        }
      }
      if (v22 == v19)
        goto LABEL_44;
      if (v22 != a3)
      {
        v24 = v22 + 1;
        v25 = *v22;
        if (v25 == 44)
        {
          if (v24 == a3)
            goto LABEL_40;
          v26 = *v24;
          if ((v26 & 0xF8) == 0x30 || (v26 & 0xFE) == 0x38)
          {
            v24 = v22 + 2;
            if (v22 + 2 == a3)
              goto LABEL_40;
            v27 = v26 - 48;
            while (1)
            {
              v26 = *v24;
              if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38)
                break;
              if (v27 >= 214748364)
                goto LABEL_44;
              v27 = v26 + 10 * v27 - 48;
              if (++v24 == a3)
                goto LABEL_40;
            }
          }
          else
          {
            v27 = -1;
          }
          if (v24 != a3 && v24 + 1 != a3 && v26 == 92 && v24[1] == 125)
          {
            v6 = &v24[2 * (v24[1] == 125)];
            if (v27 == -1)
            {
              v42 = (_QWORD *)operator new();
              v43 = *(_QWORD *)(a1 + 56);
              v44 = *(_QWORD *)(v43 + 8);
              *v42 = &unk_24EC65280;
              v42[1] = v44;
              *(_QWORD *)(v43 + 8) = 0;
              v31 = operator new();
              v45 = *(_DWORD *)(a1 + 32);
              v46 = *(_QWORD *)(a4 + 8);
              *(_QWORD *)v31 = &unk_24EC65718;
              *(_QWORD *)(v31 + 8) = v46;
              *(_QWORD *)(v31 + 16) = v42;
              *(_QWORD *)(v31 + 24) = v21;
              *(_QWORD *)(v31 + 32) = -1;
              *(_DWORD *)(v31 + 40) = v45;
              *(_DWORD *)(v31 + 44) = a5;
              *(_DWORD *)(v31 + 48) = a6;
              *(_BYTE *)(v31 + 52) = 1;
              *(_QWORD *)(a4 + 8) = 0;
              v34 = (_QWORD *)operator new();
              goto LABEL_42;
            }
            if (v27 >= v21)
            {
              v28 = (_QWORD *)operator new();
              v29 = *(_QWORD *)(a1 + 56);
              v30 = *(_QWORD *)(v29 + 8);
              *v28 = &unk_24EC65280;
              v28[1] = v30;
              *(_QWORD *)(v29 + 8) = 0;
              v31 = operator new();
              v32 = *(_DWORD *)(a1 + 32);
              v33 = *(_QWORD *)(a4 + 8);
              *(_QWORD *)v31 = &unk_24EC65718;
              *(_QWORD *)(v31 + 8) = v33;
              *(_QWORD *)(v31 + 16) = v28;
              *(_QWORD *)(v31 + 24) = v21;
              *(_QWORD *)(v31 + 32) = v27;
              *(_DWORD *)(v31 + 40) = v32;
              *(_DWORD *)(v31 + 44) = a5;
              *(_DWORD *)(v31 + 48) = a6;
              *(_BYTE *)(v31 + 52) = 1;
              *(_QWORD *)(a4 + 8) = 0;
              v34 = (_QWORD *)operator new();
LABEL_42:
              *v34 = &unk_24EC657A8;
              v34[1] = v31;
              *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v34;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(v31 + 16);
              *(_QWORD *)(a4 + 8) = v31;
              ++*(_DWORD *)(a1 + 32);
              return v6;
            }
LABEL_44:
            sub_223FED474();
          }
        }
        else if (v24 != a3 && v25 == 92)
        {
          v35 = v22[1];
          v36 = v35 == 125;
          if (v35 == 125)
          {
            v37 = (_QWORD *)operator new();
            v38 = *(_QWORD *)(a1 + 56);
            v39 = *(_QWORD *)(v38 + 8);
            *v37 = &unk_24EC65280;
            v37[1] = v39;
            *(_QWORD *)(v38 + 8) = 0;
            v31 = operator new();
            v40 = *(_DWORD *)(a1 + 32);
            v41 = *(_QWORD *)(a4 + 8);
            *(_QWORD *)v31 = &unk_24EC65718;
            *(_QWORD *)(v31 + 8) = v41;
            *(_QWORD *)(v31 + 16) = v37;
            *(_QWORD *)(v31 + 24) = v21;
            *(_QWORD *)(v31 + 32) = v21;
            *(_DWORD *)(v31 + 40) = v40;
            *(_DWORD *)(v31 + 44) = a5;
            *(_DWORD *)(v31 + 48) = a6;
            *(_BYTE *)(v31 + 52) = 1;
            *(_QWORD *)(a4 + 8) = 0;
            v34 = (_QWORD *)operator new();
            v6 = &v22[2 * v36];
            goto LABEL_42;
          }
        }
      }
LABEL_40:
      sub_223FED4C0();
    }
  }
  return v6;
}

void sub_223FEE294(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *sub_223FEE304(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char *v6;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == a3)
    return sub_223FE7E50(a1, a2, a3);
  v6 = a2 + 1;
  v5 = *a2;
  if (a2 + 1 == a3 && v5 == 36)
    return sub_223FE7E50(a1, a2, a3);
  if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
  {
    sub_223FE888C(a1, (char)v5);
    return a2 + 1;
  }
  else
  {
    if (v6 != a3 && v5 == 92)
    {
      v9 = *v6;
      if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
      {
        sub_223FE888C(a1, (char)v9);
        return a2 + 2;
      }
      return sub_223FE7E50(a1, a2, a3);
    }
    if (v5 != 46)
      return sub_223FE7E50(a1, a2, a3);
    v10 = (_QWORD *)operator new();
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(_QWORD *)(v11 + 8);
    *v10 = &unk_24EC65880;
    v10[1] = v12;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return a2 + 1;
  }
}

_QWORD *sub_223FEE450(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24EC652F8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223FEE494(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24EC652F8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FEE4E8(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

uint64_t sub_223FEE528(uint64_t a1, unsigned __int8 a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > *(_DWORD *)(a1 + 28))
    sub_223FE8A10();
  sub_223FE8A5C(a1, a2 - 48);
  return 1;
}

char *sub_223FEE588(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = sub_223FEE85C(a1, a2, a3);
  if (v8 == a2 && (v8 = sub_223FEE8D4(a1, a2, a3), v8 == a2))
  {
    if (a2 != a3 && *a2 == 46)
    {
      v14 = (_QWORD *)operator new();
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(v15 + 8);
      *v14 = &unk_24EC65880;
      v14[1] = v16;
      *(_QWORD *)(v15 + 8) = v14;
LABEL_14:
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = a2 + 1;
      return sub_223FE5CEC(a1, v8, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
    v8 = sub_223FE7E50(a1, a2, a3);
    if (v8 != a2)
      goto LABEL_25;
  }
  else if (v8 != a2)
  {
    goto LABEL_25;
  }
  if (v8 == a3)
  {
LABEL_25:
    if (v8 != a2)
      return sub_223FE5CEC(a1, v8, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    return a2;
  }
  v9 = *a2;
  switch(v9)
  {
    case '$':
      v10 = operator new();
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = (char *)&unk_24EC65360;
      goto LABEL_13;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v19 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v18 = operator new();
        v19 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v19;
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(v20 + 8);
        *(_QWORD *)v18 = &unk_24EC65688;
        *(_QWORD *)(v18 + 8) = v21;
        *(_DWORD *)(v18 + 16) = v19;
        *(_QWORD *)(v20 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v22 = (char *)sub_223FE4EC4(a1, a2 + 1, a3);
      if (v22 == a3 || (v23 = v22, *v22 != 41))
        sub_223FE67E4();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v24 = operator new();
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *(_QWORD *)v24 = &unk_24EC656D0;
        *(_QWORD *)(v24 + 8) = v26;
        *(_DWORD *)(v24 + 16) = v19;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v8 = v23 + 1;
      goto LABEL_25;
    case '^':
      v10 = operator new();
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = (char *)&unk_24EC65318;
LABEL_13:
      v17 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)v10 = v13 + 16;
      *(_QWORD *)(v10 + 8) = v17;
      *(_BYTE *)(v10 + 16) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      goto LABEL_14;
  }
  return a2;
}

_BYTE *sub_223FEE85C(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  if (a2 == a3)
    return a2;
  switch(*a2)
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return a2;
    case ')':
      if (*(_DWORD *)(a1 + 36))
        return a2;
      break;
    default:
      break;
  }
  sub_223FE888C(a1, (char)*a2);
  return a2 + 1;
}

char *sub_223FEE8D4(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  signed __int8 v5;
  char *result;
  int v7;
  uint64_t v8;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      sub_223FE888C(a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = sub_223FEB4E0(a1, v4, a3, 0);
      }
      else
      {
        v7 = sub_223FEE528(a1, v5);
        v8 = 2;
        if (!v7)
          v8 = 0;
        result = &v3[v8];
      }
      break;
  }
  return result;
}

uint64_t sub_223FEE994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  __int128 *v11;
  int v12;
  uint64_t i;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  *(_QWORD *)(a4 + 24) = a3;
  v11 = (__int128 *)(a4 + 24);
  *(_QWORD *)(a4 + 32) = a3;
  *(_BYTE *)(a4 + 40) = 0;
  sub_223FE7370(a4, (v10 + 1), (__int128 *)(a4 + 24));
  *(_QWORD *)(a4 + 48) = a2;
  *(_QWORD *)(a4 + 56) = a2;
  *(_BYTE *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 72) = *v11;
  *(_BYTE *)(a4 + 88) = *(_BYTE *)(a4 + 40);
  if ((v9 & 0x800) == 0)
    *(_QWORD *)(a4 + 104) = a2;
  *(_BYTE *)(a4 + 96) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if ((sub_223FE6EFC(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0) & 1) != 0)
      goto LABEL_28;
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (sub_223FEF5AC(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0))
      goto LABEL_28;
LABEL_13:
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      v12 = v9 | 0x80;
      for (i = a2 + 1; i != a3; ++i)
      {
        sub_223FE7370(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (sub_223FEF5AC(a1, i, a3, (uint64_t *)a4, v12, 0))
              goto LABEL_28;
          }
          else if ((sub_223FEECA0(a1, i, a3, (uint64_t *)a4, v12, 0) & 1) != 0)
          {
            goto LABEL_28;
          }
        }
        else if ((sub_223FE6EFC(a1, i, a3, (uint64_t *)a4, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
        sub_223FE7370(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), v11);
      }
      sub_223FE7370(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (sub_223FEF5AC(a1, a3, a3, (uint64_t *)a4, v12, 0))
            goto LABEL_28;
        }
        else if ((sub_223FEECA0(a1, a3, a3, (uint64_t *)a4, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
      }
      else if ((sub_223FE6EFC(a1, a3, a3, (uint64_t *)a4, v12, 0) & 1) != 0)
      {
        goto LABEL_28;
      }
    }
    result = 0;
    *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
    return result;
  }
  if ((sub_223FEECA0(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0) & 1) == 0)
    goto LABEL_13;
LABEL_28:
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4)
    v14 = v11;
  else
    v14 = *(__int128 **)a4;
  v15 = *(_QWORD *)v14;
  *(_QWORD *)(a4 + 56) = *(_QWORD *)v14;
  *(_BYTE *)(a4 + 64) = *(_QWORD *)(a4 + 48) != v15;
  v16 = *((_QWORD *)v14 + 1);
  *(_QWORD *)(a4 + 72) = v16;
  *(_BYTE *)(a4 + 88) = v16 != *(_QWORD *)(a4 + 80);
  return 1;
}

uint64_t sub_223FEECA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  void *v71;
  void *v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  __int128 v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void **v84;
  void **v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t *v91;
  uint64_t v92;
  char v93;
  _BYTE v96[56];
  void *__p[2];
  _QWORD v98[3];
  __int128 v99;
  __int128 v100;
  __int128 v101;

  v100 = 0u;
  v101 = 0u;
  v99 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    v84 = (void **)*((_QWORD *)&v99 + 1);
    v85 = (void **)v100;
    *((_QWORD *)&v101 + 1) = 0;
    v86 = v100 - *((_QWORD *)&v99 + 1);
    if ((_QWORD)v100 - *((_QWORD *)&v99 + 1) < 0x11uLL)
      goto LABEL_81;
    do
    {
LABEL_80:
      operator delete(*v84);
      v85 = (void **)v100;
      v84 = (void **)(*((_QWORD *)&v99 + 1) + 8);
      *((_QWORD *)&v99 + 1) = v84;
      v86 = v100 - (_QWORD)v84;
    }
    while ((_QWORD)v100 - (_QWORD)v84 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)v96 = 0;
  memset(&v96[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v98, 0, 21);
  sub_223FEFD5C((uint64_t)&v99);
  v11 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (((_QWORD)v101 + *((_QWORD *)&v101 + 1)) / 0x2AuLL))
      + 96 * (((_QWORD)v101 + *((_QWORD *)&v101 + 1)) % 0x2AuLL);
  v12 = *(_OWORD *)&v96[16];
  *(_OWORD *)v11 = *(_OWORD *)v96;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  memset(&v96[32], 0, 24);
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  __p[0] = 0;
  __p[1] = 0;
  v98[0] = 0;
  v13 = v98[1];
  *(_QWORD *)(v11 + 85) = *(_QWORD *)((char *)&v98[1] + 5);
  *(_QWORD *)(v11 + 80) = v13;
  v15 = *((_QWORD *)&v101 + 1);
  v14 = v101;
  v16 = ++*((_QWORD *)&v101 + 1);
  v17 = *((_QWORD *)&v99 + 1);
  v18 = *(unsigned int *)(a1 + 32);
  v19 = v101 + v15;
  v20 = 8 * (v19 / 0x2A);
  v21 = 96 * (v19 % 0x2A);
  v22 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + v20) + v21;
  *(_DWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 24) = a3;
  v23 = *(_QWORD *)(v17 + v20) + v21;
  v26 = *(_QWORD *)(v23 + 56);
  v24 = v23 + 56;
  v25 = v26;
  v27 = (*(_QWORD *)(v24 + 8) - v26) >> 4;
  v91 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27)
      *(_QWORD *)(v24 + 8) = v25 + 16 * v18;
  }
  else
  {
    sub_223FE7990((char **)v24, v18 - v27);
    v16 = *((_QWORD *)&v101 + 1);
    v14 = v101;
    v17 = *((_QWORD *)&v99 + 1);
  }
  v93 = 0;
  v28 = 0;
  v92 = 0;
  v29 = v14 + v16 - 1;
  v30 = 8 * (v29 / 0x2A);
  v31 = 96 * (v29 % 0x2A);
  *(_QWORD *)(*(_QWORD *)(v17 + v30) + v31 + 80) = v6;
  v32 = a3 - a2;
  v33 = *(_QWORD *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(_BYTE *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32)
      sub_223FE7508();
    v35 = v16 + v101 - 1;
    v36 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v35 / 0x2A));
    v37 = v35 % 0x2A;
    v38 = v36 + 96 * (v35 % 0x2A);
    v40 = (_QWORD *)(v38 + 80);
    v39 = *(_QWORD *)(v38 + 80);
    if (v39)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v36 + 96 * v37);
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        v41 = *(_QWORD *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != a3)
          goto LABEL_21;
        v64 = v41 - *(_QWORD *)(v36 + 96 * v37 + 8);
        v65 = v92;
        if ((v93 & (v92 >= v64)) == 0)
          v65 = v64;
        if (v65 == v32)
        {
          v66 = (void **)*((_QWORD *)&v99 + 1);
          v67 = v100;
          if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          {
            *((_QWORD *)&v101 + 1) = 0;
            v81 = 0;
          }
          else
          {
            v68 = (_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * ((unint64_t)v101 / 0x2A));
            v69 = (_QWORD *)(*v68 + 96 * ((unint64_t)v101 % 0x2A));
            v70 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * ((*((_QWORD *)&v101 + 1) + (_QWORD)v101) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v101 + 1) + (_QWORD)v101) % 0x2AuLL);
            if (v69 != (_QWORD *)v70)
            {
              do
              {
                v71 = (void *)v69[7];
                if (v71)
                {
                  v69[8] = v71;
                  operator delete(v71);
                }
                v72 = (void *)v69[4];
                if (v72)
                {
                  v69[5] = v72;
                  operator delete(v72);
                }
                v69 += 12;
                if ((_QWORD *)((char *)v69 - *v68) == (_QWORD *)4032)
                {
                  v73 = (_QWORD *)v68[1];
                  ++v68;
                  v69 = v73;
                }
              }
              while (v69 != (_QWORD *)v70);
              v66 = (void **)*((_QWORD *)&v99 + 1);
              v67 = v100;
            }
            *((_QWORD *)&v101 + 1) = 0;
            v81 = v67 - (_QWORD)v66;
            if (v81 >= 0x11)
            {
              do
              {
                operator delete(*v66);
                v66 = (void **)(*((_QWORD *)&v99 + 1) + 8);
                *((_QWORD *)&v99 + 1) = v66;
                v81 = v100 - (_QWORD)v66;
              }
              while ((_QWORD)v100 - (_QWORD)v66 > 0x10uLL);
            }
          }
          if (v81 >> 3 == 1)
          {
            v82 = 21;
          }
          else
          {
            if (v81 >> 3 != 2)
            {
LABEL_76:
              v93 = 1;
              v92 = a3 - a2;
              goto LABEL_8;
            }
            v82 = 42;
          }
          *(_QWORD *)&v101 = v82;
          goto LABEL_76;
        }
        v92 = v65;
        v74 = *((_QWORD *)&v101 + 1) + v101 - 1;
        v75 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v74 / 0x2A));
        v76 = v74 % 0x2A;
        v77 = *(void **)(v75 + 96 * (v74 % 0x2A) + 56);
        if (v77)
        {
          *(_QWORD *)(v75 + 96 * v76 + 64) = v77;
          operator delete(v77);
        }
        v78 = *(void **)(v75 + 96 * v76 + 32);
        if (v78)
        {
          *(_QWORD *)(v75 + 96 * v76 + 40) = v78;
          operator delete(v78);
        }
        v79 = 42 * ((uint64_t)(v100 - *((_QWORD *)&v99 + 1)) >> 3) - 1;
        v80 = v101;
        --*((_QWORD *)&v101 + 1);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v79 = 0;
        if ((unint64_t)(v79 - (*((_QWORD *)&v80 + 1) + v80) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(_QWORD *)&v100 = v100 - 8;
        }
        v93 = 1;
LABEL_8:
        v16 = *((_QWORD *)&v101 + 1);
        if (*((_QWORD *)&v101 + 1))
          continue;
        if ((v93 & 1) != 0)
        {
          v83 = *v91;
          *(_QWORD *)v83 = a2;
          *(_QWORD *)(v83 + 8) = a2 + v92;
          v6 = 1;
          *(_BYTE *)(v83 + 16) = 1;
          goto LABEL_79;
        }
        v6 = 0;
        v84 = (void **)*((_QWORD *)&v99 + 1);
        v85 = (void **)v100;
        *((_QWORD *)&v101 + 1) = 0;
        v86 = v100 - *((_QWORD *)&v99 + 1);
        if ((_QWORD)v100 - *((_QWORD *)&v99 + 1) >= 0x11uLL)
          goto LABEL_80;
LABEL_81:
        v87 = v86 >> 3;
        if (v87 == 1)
        {
          v88 = 21;
LABEL_85:
          *(_QWORD *)&v101 = v88;
        }
        else if (v87 == 2)
        {
          v88 = 42;
          goto LABEL_85;
        }
        if (v84 != v85)
        {
          do
          {
            v89 = *v84++;
            operator delete(v89);
          }
          while (v84 != v85);
          if ((_QWORD)v100 != *((_QWORD *)&v99 + 1))
            *(_QWORD *)&v100 = v100 + ((*((_QWORD *)&v99 + 1) - v100 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((_QWORD)v99)
          operator delete((void *)v99);
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        v49 = v101;
        if (!(_QWORD)v101)
        {
          sub_223FF02FC((uint64_t)&v99);
          v49 = v101;
        }
        v50 = (_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v49 / 0x2A));
        v51 = *v50 + 96 * (v49 % 0x2A);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v51 = 0;
        if (v51 == *v50)
          v51 = *(v50 - 1) + 4032;
        v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        v53 = v36 + 96 * v37;
        *(_QWORD *)(v51 - 56) = 0;
        *(_QWORD *)(v51 - 48) = 0;
        *(_QWORD *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(_QWORD *)(v51 - 48) = *(_QWORD *)(v53 + 48);
        *(_QWORD *)(v53 + 32) = 0;
        *(_QWORD *)(v53 + 40) = 0;
        *(_QWORD *)(v53 + 48) = 0;
        *(_QWORD *)(v51 - 40) = 0;
        *(_QWORD *)(v51 - 32) = 0;
        *(_QWORD *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(_QWORD *)(v51 - 24) = *(_QWORD *)(v53 + 72);
        *(_QWORD *)(v53 + 56) = 0;
        *(_QWORD *)(v53 + 64) = 0;
        *(_QWORD *)(v53 + 72) = 0;
        v54 = *v40;
        *(_QWORD *)(v51 - 11) = *(_QWORD *)(v38 + 85);
        *(_QWORD *)(v51 - 16) = v54;
        v55 = *((_QWORD *)&v101 + 1);
        *(_QWORD *)&v101 = v101 - 1;
        ++*((_QWORD *)&v101 + 1);
        v56 = v55 + v101;
        v57 = (v55 + (uint64_t)v101) / 0x2AuLL;
        v43 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * v57);
        v44 = v56 - 42 * v57;
        v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45)
          goto LABEL_23;
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        v42 = *((_QWORD *)&v101 + 1) + v101 - 1;
        v43 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v42 / 0x2A));
        v44 = v42 % 0x2A;
        v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(_QWORD *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(_QWORD *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        v47 = 42 * ((uint64_t)(v100 - *((_QWORD *)&v99 + 1)) >> 3) - 1;
        v48 = v101;
        --*((_QWORD *)&v101 + 1);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v47 = 0;
        if ((unint64_t)(v47 - (*((_QWORD *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(_QWORD *)&v100 = v100 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        sub_223FE7AB8((uint64_t)v96, (__int128 *)(v36 + 96 * v37));
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v98[1] + 24))(v98[1], 0, v96);
        v58 = *((_QWORD *)&v99 + 1);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v59 = 0;
        else
          v59 = 42 * ((uint64_t)(v100 - *((_QWORD *)&v99 + 1)) >> 3) - 1;
        v60 = *((_QWORD *)&v101 + 1) + v101;
        if (v59 == *((_QWORD *)&v101 + 1) + (_QWORD)v101)
        {
          sub_223FEFD5C((uint64_t)&v99);
          v58 = *((_QWORD *)&v99 + 1);
          v60 = *((_QWORD *)&v101 + 1) + v101;
        }
        v61 = *(_QWORD *)(v58 + 8 * (v60 / 0x2A)) + 96 * (v60 % 0x2A);
        v62 = *(_OWORD *)&v96[16];
        *(_OWORD *)v61 = *(_OWORD *)v96;
        *(_OWORD *)(v61 + 16) = v62;
        *(_QWORD *)(v61 + 40) = 0;
        *(_QWORD *)(v61 + 48) = 0;
        *(_QWORD *)(v61 + 32) = 0;
        *(_OWORD *)(v61 + 32) = *(_OWORD *)&v96[32];
        *(_QWORD *)(v61 + 48) = *(_QWORD *)&v96[48];
        memset(&v96[32], 0, 24);
        *(_QWORD *)(v61 + 56) = 0;
        *(_QWORD *)(v61 + 64) = 0;
        *(_QWORD *)(v61 + 72) = 0;
        *(_OWORD *)(v61 + 56) = *(_OWORD *)__p;
        *(_QWORD *)(v61 + 72) = v98[0];
        __p[0] = 0;
        __p[1] = 0;
        v98[0] = 0;
        v63 = v98[1];
        *(_QWORD *)(v61 + 85) = *(_QWORD *)((char *)&v98[1] + 5);
        *(_QWORD *)(v61 + 80) = v63;
        ++*((_QWORD *)&v101 + 1);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (*(_QWORD *)&v96[32])
        {
          *(_QWORD *)&v96[40] = *(_QWORD *)&v96[32];
          operator delete(*(void **)&v96[32]);
        }
        goto LABEL_8;
      default:
        sub_223FE7554();
    }
  }
}

void sub_223FEF528(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223FEFCE8((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_223FEF53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_223F4FAE4((uint64_t *)va);
  sub_223FEFCE8((void **)(v11 - 144));
  _Unwind_Resume(a1);
}

void sub_223FEF584(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223FEFCE8((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_223FEF598(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223FEFCE8((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_223FEF5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void *v28;
  void *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  void *v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  void *v55;
  uint64_t *v57;
  uint64_t v58;
  char v59;
  _BYTE v61[56];
  void *__p[2];
  _QWORD v63[3];
  __int128 v64;
  char v65;
  _BYTE v66[40];
  __int128 v67;
  void *v68[6];
  char *v69;
  char *v70;
  unint64_t v71;

  v69 = 0;
  v70 = 0;
  v71 = 0;
  *(_DWORD *)v66 = 0;
  memset(&v66[8], 0, 32);
  v67 = 0u;
  memset(v68, 0, 37);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_63;
  *(_QWORD *)&v64 = a3;
  *((_QWORD *)&v64 + 1) = a3;
  v65 = 0;
  *(_DWORD *)v61 = 0;
  memset(&v61[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v63, 0, 21);
  v70 = sub_223FE7620((void **)&v69, (uint64_t)v61);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_QWORD *)&v61[32])
  {
    *(_QWORD *)&v61[40] = *(_QWORD *)&v61[32];
    operator delete(*(void **)&v61[32]);
  }
  v12 = v70;
  *((_DWORD *)v70 - 24) = 0;
  *((_QWORD *)v12 - 11) = a2;
  *((_QWORD *)v12 - 10) = a2;
  *((_QWORD *)v12 - 9) = a3;
  v13 = *((_QWORD *)v12 - 8);
  v14 = *(unsigned int *)(a1 + 28);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v12 - 7) - v13) >> 3);
  if (v14 <= v15)
  {
    if (v14 < v15)
      *((_QWORD *)v12 - 7) = v13 + 24 * v14;
  }
  else
  {
    sub_223FE77F0((void **)v12 - 8, v14 - v15, &v64);
    v12 = v70;
  }
  v16 = *((_QWORD *)v12 - 5);
  v17 = *(unsigned int *)(a1 + 32);
  v18 = (*((_QWORD *)v12 - 4) - v16) >> 4;
  v57 = a4;
  if (v17 <= v18)
  {
    if (v17 < v18)
      *((_QWORD *)v12 - 4) = v16 + 16 * v17;
  }
  else
  {
    sub_223FE7990((char **)v12 - 5, v17 - v18);
    v12 = v70;
  }
  v19 = 0;
  v59 = 0;
  v20 = 0;
  v21 = a3 - a2;
  *((_QWORD *)v12 - 2) = v6;
  *((_DWORD *)v12 - 2) = a5;
  v58 = a3;
  *(v12 - 4) = a6;
  do
  {
    v22 = (++v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v21;
    if (!v22)
      sub_223FE7508();
    v24 = v12 - 16;
    v23 = *((_QWORD *)v12 - 2);
    v25 = v12 - 96;
    if (v23)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v23 + 16))(v23, v12 - 96);
    switch(*(_DWORD *)v25)
    {
      case 0xFFFFFC18:
        v26 = *((_QWORD *)v12 - 10);
        if ((a5 & 0x20) != 0 && v26 == a2 || (a5 & 0x1000) != 0 && v26 != v58)
          goto LABEL_29;
        v33 = v19;
        v34 = v26 - *((_QWORD *)v12 - 11);
        if ((v59 & (v33 >= v34)) == 0)
        {
          v35 = *(_OWORD *)v25;
          *(_OWORD *)&v66[16] = *((_OWORD *)v12 - 5);
          *(_OWORD *)v66 = v35;
          if (v66 != v25)
          {
            sub_223FF06B4((char **)&v66[32], *((char **)v12 - 8), *((char **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
            sub_223FF08B0((double **)v68, *((_QWORD *)v12 - 5), *((char **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          }
          v36 = *(void **)v24;
          *(void **)((char *)&v68[3] + 5) = *(void **)(v12 - 11);
          v68[3] = v36;
          v33 = v34;
        }
        v37 = v70;
        if (v33 == v21)
        {
          v38 = v69;
          while (v37 != v38)
          {
            v39 = (void *)*((_QWORD *)v37 - 5);
            if (v39)
            {
              *((_QWORD *)v37 - 4) = v39;
              operator delete(v39);
            }
            v40 = (void *)*((_QWORD *)v37 - 8);
            if (v40)
            {
              *((_QWORD *)v37 - 7) = v40;
              operator delete(v40);
            }
            v37 -= 96;
          }
          v70 = v38;
          v59 = 1;
          v19 = v21;
        }
        else
        {
          v19 = v33;
          v41 = (void *)*((_QWORD *)v70 - 5);
          if (v41)
          {
            *((_QWORD *)v70 - 4) = v41;
            operator delete(v41);
          }
          v42 = (void *)*((_QWORD *)v37 - 8);
          if (v42)
          {
            *((_QWORD *)v37 - 7) = v42;
            operator delete(v42);
          }
          v70 = v37 - 96;
          v59 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        v27 = v70;
        v28 = (void *)*((_QWORD *)v70 - 5);
        if (v28)
        {
          *((_QWORD *)v70 - 4) = v28;
          operator delete(v28);
        }
        v29 = (void *)*((_QWORD *)v27 - 8);
        if (v29)
        {
          *((_QWORD *)v27 - 7) = v29;
          operator delete(v29);
        }
        v70 = v27 - 96;
        break;
      case 0xFFFFFC20:
        sub_223FE7AB8((uint64_t)v61, (__int128 *)v12 - 6);
        (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v24 + 24))(*(_QWORD *)v24, 1, v12 - 96);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v63[1] + 24))(v63[1], 0, v61);
        v30 = v70;
        if ((unint64_t)v70 >= v71)
        {
          v70 = sub_223FE7620((void **)&v69, (uint64_t)v61);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v31 = *(_OWORD *)&v61[16];
          *(_OWORD *)v70 = *(_OWORD *)v61;
          *((_OWORD *)v30 + 1) = v31;
          *((_QWORD *)v30 + 4) = 0;
          *((_QWORD *)v30 + 5) = 0;
          *((_QWORD *)v30 + 6) = 0;
          *((_QWORD *)v30 + 7) = 0;
          *((_OWORD *)v30 + 2) = *(_OWORD *)&v61[32];
          *((_QWORD *)v30 + 6) = *(_QWORD *)&v61[48];
          memset(&v61[32], 0, 24);
          *((_QWORD *)v30 + 8) = 0;
          *((_QWORD *)v30 + 9) = 0;
          *(_OWORD *)(v30 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v30 + 9) = v63[0];
          __p[0] = 0;
          __p[1] = 0;
          v63[0] = 0;
          v32 = v63[1];
          *(_QWORD *)(v30 + 85) = *(_QWORD *)((char *)&v63[1] + 5);
          *((_QWORD *)v30 + 10) = v32;
          v70 = v30 + 96;
        }
        if (*(_QWORD *)&v61[32])
        {
          *(_QWORD *)&v61[40] = *(_QWORD *)&v61[32];
          operator delete(*(void **)&v61[32]);
        }
        break;
      default:
        sub_223FE7554();
    }
    v12 = v70;
  }
  while (v69 != v70);
  if ((v59 & 1) == 0)
  {
LABEL_63:
    v49 = 0;
    v50 = v68[0];
    if (!v68[0])
      goto LABEL_65;
    goto LABEL_64;
  }
  v43 = *v57;
  *(_QWORD *)v43 = a2;
  *(_QWORD *)(v43 + 8) = a2 + v19;
  *(_BYTE *)(v43 + 16) = 1;
  if ((_QWORD)v67 != *(_QWORD *)&v66[32])
  {
    v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - *(_QWORD *)&v66[32]) >> 3);
    v45 = (_BYTE *)(*(_QWORD *)&v66[32] + 16);
    v46 = 1;
    do
    {
      v47 = v43 + 24 * v46;
      *(_OWORD *)v47 = *((_OWORD *)v45 - 1);
      v48 = *v45;
      v45 += 24;
      *(_BYTE *)(v47 + 16) = v48;
      v22 = v44 > v46++;
    }
    while (v22);
  }
  v49 = 1;
  v50 = v68[0];
  if (v68[0])
  {
LABEL_64:
    v68[1] = v50;
    operator delete(v50);
  }
LABEL_65:
  if (*(_QWORD *)&v66[32])
  {
    *(_QWORD *)&v67 = *(_QWORD *)&v66[32];
    operator delete(*(void **)&v66[32]);
  }
  v51 = v69;
  if (v69)
  {
    v52 = v70;
    v53 = v69;
    if (v70 != v69)
    {
      do
      {
        v54 = (void *)*((_QWORD *)v52 - 5);
        if (v54)
        {
          *((_QWORD *)v52 - 4) = v54;
          operator delete(v54);
        }
        v55 = (void *)*((_QWORD *)v52 - 8);
        if (v55)
        {
          *((_QWORD *)v52 - 7) = v55;
          operator delete(v55);
        }
        v52 -= 96;
      }
      while (v52 != v51);
      v53 = v69;
    }
    v70 = v51;
    operator delete(v53);
  }
  return v49;
}

void sub_223FEFB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;

  sub_223F4FAE4(&a33);
  sub_223FE75A0((void **)(v33 - 120));
  _Unwind_Resume(a1);
}

void sub_223FEFB90(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v11 = 0;
  }
  else
  {
    v4 = a1[4];
    v5 = &v2[v4 / 0x2A];
    v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 + 7);
        if (v8)
        {
          *((_QWORD *)v6 + 8) = v8;
          operator delete(v8);
        }
        v9 = (void *)*((_QWORD *)v6 + 4);
        if (v9)
        {
          *((_QWORD *)v6 + 5) = v9;
          operator delete(v9);
        }
        v6 += 96;
        if (v6 - (_BYTE *)*v5 == 4032)
        {
          v10 = (char *)v5[1];
          ++v5;
          v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
    a1[5] = 0;
    v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v12 = a1[2];
        v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        v11 = v12 - (_QWORD)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2)
      return;
    v13 = 42;
  }
  a1[4] = v13;
}

void **sub_223FEFCE8(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  _BYTE *v5;
  _BYTE *v6;

  sub_223FEFB90(a1);
  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    v6 = a1[1];
    v5 = a1[2];
    if (v5 != v6)
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_223FEFD5C(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_223174E94();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0xFC0uLL);
      sub_22323CCA0((char **)a1, &v89);
      return;
    }
    v89 = operator new(0xFC0uLL);
    sub_22323CE2C((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFC0uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_223174E94();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_223174E94();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_223FF029C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223FF02B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223FF02CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223FF02E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223FF02FC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  void *v48;

  v3 = *(uint64_t **)(a1 + 8);
  v2 = *(uint64_t **)(a1 + 16);
  v4 = v2 - v3;
  if (v2 == v3)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v5 - (*(_QWORD *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(_QWORD *)(a1 + 32) = v6 + 42;
    v48 = (void *)*(v2 - 1);
    *(_QWORD *)(a1 + 16) = v2 - 1;
    sub_22323CE2C((void **)a1, &v48);
    return;
  }
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(uint64_t **)a1;
  v9 = (uint64_t)v7 - *(_QWORD *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      v48 = operator new(0xFC0uLL);
      sub_22323CCA0((char **)a1, &v48);
      v18 = *(_QWORD *)(a1 + 16);
      v48 = *(void **)(v18 - 8);
      *(_QWORD *)(a1 + 16) = v18 - 8;
      sub_22323CE2C((void **)a1, &v48);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
        goto LABEL_9;
    }
    else
    {
      v48 = operator new(0xFC0uLL);
      sub_22323CE2C((void **)a1, &v48);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
      {
LABEL_9:
        v10 = 21;
LABEL_19:
        *(_QWORD *)(a1 + 32) = v10;
        return;
      }
    }
    v10 = *(_QWORD *)(a1 + 32) + 42;
    goto LABEL_19;
  }
  if (v7 == v8)
    v11 = 1;
  else
    v11 = v9 >> 2;
  if (v11 >> 61)
    sub_223174E94();
  v12 = (char *)operator new(8 * v11);
  v13 = operator new(0xFC0uLL);
  v14 = v13;
  if (v11)
  {
    v15 = &v12[8 * v11];
    *(_QWORD *)v12 = v13;
    v16 = v12 + 8;
    v17 = v12;
    if (v3 != v2)
      goto LABEL_27;
    goto LABEL_21;
  }
  v19 = (char *)operator new(8uLL);
  v15 = v19 + 8;
  operator delete(v12);
  v3 = *(uint64_t **)(a1 + 8);
  v20 = *(uint64_t **)(a1 + 16);
  v12 = v19;
  *(_QWORD *)v19 = v14;
  v16 = v19 + 8;
  v17 = v19;
  if (v3 != v20)
  {
    while (1)
    {
LABEL_27:
      if (v16 == v15)
      {
        if (v12 <= v17)
        {
          if (v16 == v17)
            v32 = 1;
          else
            v32 = (v16 - v17) >> 2;
          if (v32 >> 61)
            sub_223174E94();
          v33 = (char *)operator new(8 * v32);
          v34 = v33;
          v35 = v32 >> 2;
          v21 = &v33[8 * (v32 >> 2)];
          v24 = v21;
          v36 = v16 - v12;
          if (v16 != v12)
          {
            v24 = &v21[v36 & 0xFFFFFFFFFFFFFFF8];
            v37 = v36 - 8;
            if (v37 < 0x38 || (v38 = 8 * v35, (unint64_t)(&v33[8 * v35] - v12) < 0x20))
            {
              v39 = &v33[8 * (v32 >> 2)];
              v40 = v12;
              goto LABEL_43;
            }
            v42 = (v37 >> 3) + 1;
            v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
            v39 = &v21[v43];
            v40 = &v12[v43];
            v44 = (__int128 *)(v12 + 16);
            v45 = &v33[v38 + 16];
            v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v47 = *v44;
              *((_OWORD *)v45 - 1) = *(v44 - 1);
              *(_OWORD *)v45 = v47;
              v44 += 2;
              v45 += 32;
              v46 -= 4;
            }
            while (v46);
            if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_43:
                v41 = *(_QWORD *)v40;
                v40 += 8;
                *(_QWORD *)v39 = v41;
                v39 += 8;
              }
              while (v39 != v24);
            }
          }
          v16 = &v33[8 * v32];
          if (v17)
            operator delete(v17);
          v17 = v34;
          goto LABEL_26;
        }
        v26 = (v12 - v17) >> 3;
        if (v26 >= -1)
          v27 = v26 + 1;
        else
          v27 = v26 + 2;
        v28 = v27 >> 1;
        v29 = &v12[-8 * (v27 >> 1)];
        v30 = v16;
        if (v16 != v12)
        {
          memmove(v29, v12, v16 - v12);
          v30 = v12;
        }
        v31 = -v28;
        v24 = &v29[v16 - v12];
        v21 = &v30[8 * v31];
      }
      else
      {
        v21 = v12;
        v24 = v16;
        v16 = v15;
      }
LABEL_26:
      v15 = v16;
      v25 = *v3++;
      *(_QWORD *)v24 = v25;
      v22 = v24 + 8;
      v16 = v22;
      v12 = v21;
      if (v3 == *(uint64_t **)(a1 + 16))
        goto LABEL_22;
    }
  }
LABEL_21:
  v21 = v12;
  v22 = v16;
LABEL_22:
  v23 = *(void **)a1;
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = v21;
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)(a1 + 24) = v15;
  if (v22 - v21 == 8)
  {
    *(_QWORD *)(a1 + 32) = 21;
    if (v23)
LABEL_24:
      operator delete(v23);
  }
  else
  {
    *(_QWORD *)(a1 + 32) += 42;
    if (v23)
      goto LABEL_24;
  }
}

void sub_223FF0678(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v1);
  operator delete(v2);
  _Unwind_Resume(a1);
}

char *sub_223FF06B4(char **a1, char *a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v18 = a1[1];
    v17 = a1 + 1;
    v14 = v18;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_OWORD *)v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      v16 = v24 - result;
      v14 = result;
    }
    else
    {
      v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      v21 = v14;
      if (v20 != a3)
      {
        v22 = v14;
        do
        {
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      sub_22316E078();
    v13 = 24 * v12;
    result = (char *)operator new(24 * v12);
    v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    v16 = v15 - v14;
    v17 = a1 + 1;
  }
  *v17 = &v14[v16];
  return result;
}

double *sub_223FF08B0(double **a1, unint64_t a2, char *a3, size_t __sz)
{
  uint64_t v8;
  double *v9;
  double *v10;
  unint64_t v11;
  uint64_t v12;
  double *result;
  double **v14;
  double *v15;
  unint64_t v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  const double *v36;
  uint64_t v37;
  const double *v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  BOOL v46;
  unint64_t v48;
  uint64_t v49;
  const double *v50;
  double *v51;
  uint64_t v52;
  const double *v53;
  double *v54;
  char *v55;
  unint64_t v56;
  BOOL v58;
  uint64_t v60;
  uint64_t v61;
  double *v62;
  const double *v63;
  uint64_t v64;
  const double *v65;
  double *v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  BOOL v71;
  char v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  const double *v76;
  double *v77;
  uint64_t v78;
  const double *v79;
  float64x2x2_t v80;
  float64x2x2_t v81;
  float64x2x2_t v82;
  float64x2x2_t v83;
  float64x2x2_t v84;
  float64x2x2_t v85;
  float64x2x2_t v86;
  float64x2x2_t v87;

  v8 = (uint64_t)a1[2];
  v9 = *a1;
  v10 = *a1;
  if (__sz > (v8 - (uint64_t)*a1) >> 4)
  {
    if (v10)
    {
      a1[1] = v10;
      operator delete(v10);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_85;
    v11 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v11 = __sz;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    if (v11 >> 60)
LABEL_85:
      sub_22316E078();
    v12 = 2 * v11;
    result = (double *)operator new(16 * v11);
    *a1 = result;
    v14 = a1 + 1;
    a1[2] = &result[v12];
    v15 = result;
    if ((char *)a2 == a3)
      goto LABEL_34;
    v16 = (unint64_t)&a3[-a2 - 16];
    if (v16 >= 0x30)
    {
      v33 = (v16 >> 4) + 1;
      v34 = 2 * (v33 & 0x1FFFFFFFFFFFFFFCLL);
      v17 = (char *)(a2 + v34 * 8);
      v15 = &result[v34];
      v35 = result + 4;
      v36 = (const double *)(a2 + 32);
      v37 = v33 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v38 = v36 - 4;
        v80 = vld2q_f64(v38);
        v84 = vld2q_f64(v36);
        v39 = v35 - 4;
        vst2q_f64(v39, v80);
        vst2q_f64(v35, v84);
        v35 += 8;
        v36 += 8;
        v37 -= 4;
      }
      while (v37);
      if (v33 == (v33 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_34;
    }
    else
    {
      v17 = (char *)a2;
      v15 = result;
    }
    do
    {
      v40 = *(_QWORD *)v17;
      v41 = *((_QWORD *)v17 + 1);
      v17 += 16;
      *(_QWORD *)v15 = v40;
      *((_QWORD *)v15 + 1) = v41;
      v15 += 2;
    }
    while (v17 != a3);
LABEL_34:
    *v14 = v15;
    return result;
  }
  result = a1[1];
  v14 = a1 + 1;
  v18 = (char *)result - (char *)v9;
  v19 = ((char *)result - (char *)v9) >> 4;
  if (v19 < __sz)
  {
    v20 = (char *)(a2 + 16 * v19);
    if (result == v9)
      goto LABEL_18;
    if ((unint64_t)(v18 - 16) >= 0xF0)
    {
      v42 = (v18 & 0xFFFFFFFFFFFFFFF0) - 8;
      v43 = (char *)v9 + v42;
      v44 = a2 + v42;
      v46 = (unint64_t)(v9 + 1) < a2 + (v18 & 0xFFFFFFFFFFFFFFF0)
         && a2 + 8 < (unint64_t)v9 + (v18 & 0xFFFFFFFFFFFFFFF0);
      v21 = (char *)a2;
      if (((unint64_t)v43 <= a2 || (unint64_t)v9 >= v44) && !v46)
      {
        v48 = ((unint64_t)(v18 - 16) >> 4) + 1;
        v49 = 2 * (v48 & 0x1FFFFFFFFFFFFFFCLL);
        v10 = &v9[v49];
        v21 = (char *)(a2 + v49 * 8);
        v50 = (const double *)(a2 + 32);
        v51 = v9 + 4;
        v52 = v48 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v53 = v50 - 4;
          v81 = vld2q_f64(v53);
          v85 = vld2q_f64(v50);
          v54 = v51 - 4;
          vst2q_f64(v54, v81);
          vst2q_f64(v51, v85);
          v50 += 8;
          v51 += 8;
          v52 -= 4;
        }
        while (v52);
        if (v48 == (v48 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_18:
          if (v20 == a3)
          {
            v15 = result;
          }
          else
          {
            v24 = (char *)(v18 + a2);
            v25 = (unint64_t)&a3[-v18 - a2 - 16];
            if (v25 >= 0x170)
            {
              v55 = &v24[v25 & 0xFFFFFFFFFFFFFFF0];
              v56 = (unint64_t)(v24 + 8);
              v58 = result + 1 < (double *)v55 + 2 && v56 < (unint64_t)result + (v25 & 0xFFFFFFFFFFFFFFF0) + 16;
              v15 = result;
              if ((v20 >= (char *)result + (v25 & 0xFFFFFFFFFFFFFFF0) + 8 || result >= (double *)v55 + 1) && !v58)
              {
                v60 = (v25 >> 4) + 1;
                v61 = 2 * (v60 & 0x1FFFFFFFFFFFFFFCLL);
                v20 += v61 * 8;
                v15 = &result[v61];
                v62 = result + 4;
                v63 = (const double *)(a2 + 16 * v19 + 32);
                v64 = v60 & 0x1FFFFFFFFFFFFFFCLL;
                do
                {
                  v65 = v63 - 4;
                  v82 = vld2q_f64(v65);
                  v86 = vld2q_f64(v63);
                  v66 = v62 - 4;
                  vst2q_f64(v66, v82);
                  vst2q_f64(v62, v86);
                  v62 += 8;
                  v63 += 8;
                  v64 -= 4;
                }
                while (v64);
                if (v60 == (v60 & 0x1FFFFFFFFFFFFFFCLL))
                  goto LABEL_34;
              }
            }
            else
            {
              v15 = result;
            }
            do
            {
              v26 = *(_QWORD *)v20;
              v27 = *((_QWORD *)v20 + 1);
              v20 += 16;
              *(_QWORD *)v15 = v26;
              *((_QWORD *)v15 + 1) = v27;
              v15 += 2;
            }
            while (v20 != a3);
          }
          goto LABEL_34;
        }
      }
    }
    else
    {
      v21 = (char *)a2;
    }
    do
    {
      v22 = *(_QWORD *)v21;
      v23 = *((_QWORD *)v21 + 1);
      v21 += 16;
      *(_QWORD *)v10 = v22;
      *((_QWORD *)v10 + 1) = v23;
      v10 += 2;
    }
    while (v21 != v20);
    goto LABEL_18;
  }
  if ((char *)a2 == a3)
  {
    v29 = (char *)v10;
  }
  else
  {
    v28 = (unint64_t)&a3[-a2 - 16];
    if (v28 < 0xF0
      || ((v67 = v28 & 0xFFFFFFFFFFFFFFF0 | 8,
           v68 = (char *)v9 + v67,
           v69 = a2 + v67,
           v70 = (v28 & 0xFFFFFFFFFFFFFFF0) + 16,
           (unint64_t)(v9 + 1) < a2 + v70)
        ? (v71 = a2 + 8 >= (unint64_t)v9 + v70)
        : (v71 = 1),
          v71 ? (v72 = 0) : (v72 = 1),
          (unint64_t)v68 > a2 ? (v73 = (unint64_t)v9 >= v69) : (v73 = 1),
          !v73 || (v72 & 1) != 0))
    {
      v29 = (char *)v10;
      v30 = (char *)a2;
    }
    else
    {
      v74 = (v28 >> 4) + 1;
      v75 = 2 * (v74 & 0x1FFFFFFFFFFFFFFCLL);
      v29 = (char *)&v9[v75];
      v30 = (char *)(a2 + v75 * 8);
      v76 = (const double *)(a2 + 32);
      v77 = v9 + 4;
      v78 = v74 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v79 = v76 - 4;
        v83 = vld2q_f64(v79);
        v87 = vld2q_f64(v76);
        result = v77 - 4;
        vst2q_f64(result, v83);
        vst2q_f64(v77, v87);
        v76 += 8;
        v77 += 8;
        v78 -= 4;
      }
      while (v78);
      if (v74 == (v74 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_36;
    }
    do
    {
      v31 = *(_QWORD *)v30;
      v32 = *((_QWORD *)v30 + 1);
      v30 += 16;
      *(_QWORD *)v29 = v31;
      *((_QWORD *)v29 + 1) = v32;
      v29 += 16;
    }
    while (v30 != a3);
  }
LABEL_36:
  *v14 = (double *)((char *)v10 + v29 - (char *)v9);
  return result;
}

void sub_223FF0CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  char v5;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  v5 = a5;
  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  v13 = *(char **)a1;
  v12 = *(char **)(a1 + 8);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v12[-*(_QWORD *)a1] >> 3);
  v15 = v11 - v14;
  if (v11 > v14)
  {
    v16 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v12) >> 3) >= v15)
    {
      v22 = &v12[24 * v15];
      v27 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((uint64_t)&v12[-*(_QWORD *)a1] >> 3);
      do
      {
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        v12[16] = 0;
        v12 += 24;
        v27 -= 24;
      }
      while (v27);
      *(_QWORD *)(a1 + 8) = v22;
      goto LABEL_24;
    }
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v13) >> 3);
    v18 = 0x5555555555555556 * ((v16 - (uint64_t)v13) >> 3);
    if (v18 <= v11)
      v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
    if (v17 >= 0x555555555555555)
      v19 = 0xAAAAAAAAAAAAAAALL;
    else
      v19 = v18;
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v20 = (char *)operator new(24 * v19);
    v21 = &v20[24 * v14];
    v22 = &v20[24 * v11];
    v23 = 24 * v11 - 24 * v14;
    v24 = v21;
    do
    {
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      v24[16] = 0;
      v24 += 24;
      v23 -= 24;
    }
    while (v23);
    v25 = &v20[24 * v19];
    if (v12 == v13)
    {
      v5 = a5;
      *(_QWORD *)a1 = v21;
      *(_QWORD *)(a1 + 8) = v22;
      *(_QWORD *)(a1 + 16) = v25;
      if (!v12)
      {
LABEL_24:
        v13 = *(char **)a1;
        v12 = v22;
        goto LABEL_25;
      }
    }
    else
    {
      v5 = a5;
      do
      {
        v26 = *(_OWORD *)(v12 - 24);
        *((_QWORD *)v21 - 1) = *((_QWORD *)v12 - 1);
        *(_OWORD *)(v21 - 24) = v26;
        v21 -= 24;
        v12 -= 24;
      }
      while (v12 != v13);
      v12 = v13;
      *(_QWORD *)a1 = v21;
      *(_QWORD *)(a1 + 8) = v22;
      *(_QWORD *)(a1 + 16) = v25;
      if (!v13)
        goto LABEL_24;
    }
    operator delete(v12);
    v22 = *(char **)(a1 + 8);
    goto LABEL_24;
  }
  if (v11 < v14)
  {
    v12 = &v13[8 * ((a4[1] - *a4) >> 3)];
    *(_QWORD *)(a1 + 8) = v12;
  }
LABEL_25:
  if (v12 != v13)
  {
    v28 = 0;
    v29 = 0;
    v31 = *a4;
    v30 = a4[1];
    do
    {
      v32 = 0xAAAAAAAAAAAAAAABLL * ((v30 - v31) >> 3);
      v33 = (_QWORD *)(v31 + v28);
      if (v32 <= v29)
        v34 = a4 + 3;
      else
        v34 = v33;
      *(_QWORD *)&v13[v28] = a2 + *v34 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v29)
        v35 = a4 + 3;
      else
        v35 = (uint64_t *)(*a4 + v28);
      *(_QWORD *)(*(_QWORD *)a1 + v28 + 8) = a2 + v35[1] - v10;
      v31 = *a4;
      v30 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v30 - *a4) >> 3) <= v29)
        v36 = a4 + 3;
      else
        v36 = (uint64_t *)(*a4 + v28);
      v13 = *(char **)a1;
      v37 = *(_QWORD *)(a1 + 8);
      *(_BYTE *)(*(_QWORD *)a1 + v28 + 16) = *((_BYTE *)v36 + 16);
      ++v29;
      v28 += 24;
    }
    while (v29 < 0xAAAAAAAAAAAAAAABLL * ((v37 - (uint64_t)v13) >> 3));
  }
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) = 0;
  v38 = a2 + a4[6] - v10;
  *(_QWORD *)(a1 + 48) = v38;
  *(_QWORD *)(a1 + 56) = a2 + a4[7] - v10;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a4 + 64);
  *(_QWORD *)(a1 + 72) = a2 + a4[9] - v10;
  *(_QWORD *)(a1 + 80) = a2 + a4[10] - v10;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a4 + 88);
  if ((v5 & 1) == 0)
    *(_QWORD *)(a1 + 104) = v38;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a4 + 96);
}

unint64_t sub_223FF0FB0()
{
  std::__shared_weak_count *v0;
  unint64_t *v1;
  unint64_t v2;
  unsigned __int8 v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const char *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  size_t v28;
  size_t v29;
  _QWORD *p_dst;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t *v81;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v83;
  int v84;
  const char *v85;
  int v86;
  const char *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  __int128 v91;
  std::__shared_weak_count *v92;
  char *v93;
  std::__shared_weak_count *v94;
  _QWORD *__dst;
  __int128 v96;
  char __s[37];
  unint64_t v98;
  unint64_t v99;
  _BYTE v100[24];
  __int128 v101;
  void *v102[2];
  unint64_t v103;
  char v104;
  _QWORD v105[5];

  v105[2] = *MEMORY[0x24BDAC8D0];
  v98 = 0;
  v99 = 0;
  sub_2232D3688();
  *(_QWORD *)&v91 = *(_QWORD *)v100;
  sub_2232D69F0((unsigned int *)&v81, (uint64_t *)&v91);
  v98 = (v81 | ((unint64_t)BYTE4(v81) << 32) | ((unint64_t)BYTE5(v81) << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)HIBYTE(v81) << 56) | ((unint64_t)(HIWORD(HIDWORD(v81)) & 0xF | 0x40u) << 48);
  v99 = ((unint64_t)BYTE4(rep) << 32) | ((unint64_t)BYTE5(rep) << 40) | rep & 0xFFFFFF00 | ((unint64_t)HIDWORD(rep) << 32) & 0xFF00000000000000 | ((unint64_t)BYTE6(rep) << 48) | rep & 0x3F | 0x80;
  v0 = *(std::__shared_weak_count **)&v100[8];
  if (*(_QWORD *)&v100[8])
  {
    v1 = (unint64_t *)(*(_QWORD *)&v100[8] + 8);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 - 1, v1));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CEAA0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEAA0))
  {
    sub_22455F53C(&v81);
    sub_223174DE4(v100, "cv3dapi.recon3d");
    sub_2232300E0(&v81, (uint64_t)v100, &qword_2540CEA98);
    if ((v100[23] & 0x80000000) != 0)
      operator delete(*(void **)v100);
    __cxa_guard_release(&qword_2540CEAA0);
  }
  v90 = qword_2540CEA98;
  if (**(int **)(qword_2540CEA98 + 56) <= 3)
  {
    v4 = *(unsigned __int8 *)(qword_2540CEA98 + 72);
    v5 = sub_22322F254(qword_2540CEA98, "OSLogSurrogateAppender", 1, 0);
    v6 = v5;
    if (v4 || v5 != 0)
    {
      v81 = &v90;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v83 = std::chrono::system_clock::now().__d_.__rep_;
      v84 = 3;
      v85 = "unknown file";
      v86 = 84;
      v88 = 0;
      v89 = 0;
      v87 = "unknown function";
      sub_2245664AC((unsigned __int8 *)&v98, __s);
      v8 = *v81;
      v9 = *v81 + 16;
      if (*(char *)(*v81 + 39) < 0)
      {
        v11 = *(const char **)(v8 + 16);
        v10 = *(_QWORD *)(v8 + 24);
        v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v13 & 1) != 0)
          goto LABEL_16;
      }
      else
      {
        v10 = *(unsigned __int8 *)(*v81 + 39);
        v11 = (const char *)(*v81 + 16);
        v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v12 & 1) != 0)
          goto LABEL_16;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v100);
        sub_223199C58("com.apple.cv3d", (unint64_t)v100, &xmmword_255788F40);
        if ((_BYTE)v101 && (v100[23] & 0x80000000) != 0)
          operator delete(*(void **)v100);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_16:
      if (byte_255788F57 >= 0)
        v14 = (const char *)&xmmword_255788F40;
      else
        v14 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v15 = byte_255788F57;
      else
        v15 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v100 = os_log_create(v14, v11);
      v16 = &v100[8];
      if (v15 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v15 >= 0x17)
      {
        v17 = v4;
        v18 = v9;
        v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v19 = v15 | 7;
        v20 = v19 + 1;
        v16 = operator new(v19 + 1);
        *(_QWORD *)&v100[16] = v15;
        *(_QWORD *)&v101 = v20 | 0x8000000000000000;
        *(_QWORD *)&v100[8] = v16;
        v9 = v18;
        v4 = v17;
      }
      else
      {
        BYTE7(v101) = v15;
        if (!v15)
        {
LABEL_30:
          v16[v15] = 0;
          BYTE8(v101) = 1;
          v21 = v102;
          if (v10 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v10 >= 0x17)
          {
            v23 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v10 | 7) != 0x17)
              v23 = v10 | 7;
            v24 = v23 + 1;
            v21 = (void **)operator new(v23 + 1);
            v102[1] = (void *)v10;
            v103 = v24 | 0x8000000000000000;
            v102[0] = v21;
          }
          else
          {
            HIBYTE(v103) = v10;
            if (!v10)
            {
              LOBYTE(v102[0]) = 0;
              v104 = 1;
              v22 = *(NSObject **)v100;
              if ((SHIBYTE(v103) & 0x80000000) == 0)
                goto LABEL_34;
              goto LABEL_40;
            }
          }
          memmove(v21, v11, v10);
          *((_BYTE *)v21 + v10) = 0;
          v104 = 1;
          v22 = *(NSObject **)v100;
          if ((SHIBYTE(v103) & 0x80000000) == 0)
          {
LABEL_34:
            if (!BYTE8(v101))
              goto LABEL_43;
            goto LABEL_41;
          }
LABEL_40:
          operator delete(v102[0]);
          if (!BYTE8(v101))
            goto LABEL_43;
LABEL_41:
          if (SBYTE7(v101) < 0)
            operator delete(*(void **)&v100[8]);
LABEL_43:
          if (*(_QWORD *)v100)
            os_release(*(void **)v100);
          if (!v6 || !*(_QWORD *)(v6 + 24))
          {
            os_log_type_enabled(v22, OS_LOG_TYPE_INFO);
            *(_QWORD *)v100 = 0xD04100202;
            *(_WORD *)&v100[8] = 2080;
            *(_QWORD *)&v100[10] = __s;
            v31 = (void *)_os_log_send_and_compose_impl();
            if (v31)
              free(v31);
            goto LABEL_119;
          }
          v25 = _os_log_pack_size();
          v26 = (std::__shared_weak_count_vtbl *)operator new(v25, (std::align_val_t)8uLL);
          v27 = (std::__shared_weak_count *)operator new();
          v27->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v27->__shared_owners_ = 0;
          v27->__shared_weak_owners_ = 0;
          v27[1].__vftable = v26;
          *(_QWORD *)&v91 = v26;
          *((_QWORD *)&v91 + 1) = v26;
          v93 = 0;
          v94 = 0;
          v92 = v27;
          v28 = strlen(__s);
          if (v28 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v29 = v28;
          if (v28 >= 0x17)
          {
            v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v28 | 7) != 0x17)
              v32 = v28 | 7;
            v33 = v32 + 1;
            p_dst = operator new(v32 + 1);
            *(_QWORD *)&v96 = v29;
            *((_QWORD *)&v96 + 1) = v33 | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v96) = v28;
            p_dst = &__dst;
            if (!v28)
            {
LABEL_57:
              *((_BYTE *)p_dst + v29) = 0;
              v34 = __dst;
              v105[0] = v96;
              *(_QWORD *)((char *)v105 + 7) = *(_QWORD *)((char *)&v96 + 7);
              v35 = HIBYTE(v96);
              v36 = operator new(0x38uLL);
              v36[1] = 0;
              v36[2] = 0;
              v36[3] = off_24EC1FA48;
              *v36 = &off_24EC1F9F8;
              v37 = v105[0];
              v36[4] = v34;
              v36[5] = v37;
              *(_QWORD *)((char *)v36 + 47) = *(_QWORD *)((char *)v105 + 7);
              *((_BYTE *)v36 + 55) = v35;
              v105[0] = 0;
              *(_QWORD *)((char *)v105 + 7) = 0;
              v38 = v94;
              v93 = (char *)(v36 + 3);
              v94 = (std::__shared_weak_count *)v36;
              if (v38)
              {
                p_shared_owners = (unint64_t *)&v38->__shared_owners_;
                do
                  v40 = __ldaxr(p_shared_owners);
                while (__stlxr(v40 - 1, p_shared_owners));
                if (!v40)
                {
                  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                  std::__shared_weak_count::__release_weak(v38);
                }
              }
              *(_OWORD *)v100 = v91;
              v41 = v93;
              *(_QWORD *)&v100[16] = v92;
              if (v92)
              {
                v42 = (unint64_t *)&v92->__shared_owners_;
                do
                  v43 = __ldxr(v42);
                while (__stxr(v43 + 1, v42));
              }
              v44 = v94;
              *(_QWORD *)&v101 = v41;
              *((_QWORD *)&v101 + 1) = v94;
              if (v94)
              {
                v45 = (unint64_t *)&v94->__shared_owners_;
                do
                  v46 = __ldxr(v45);
                while (__stxr(v46 + 1, v45));
                v102[0] = v41;
                do
                  v47 = __ldaxr(v45);
                while (__stlxr(v47 - 1, v45));
                if (!v47)
                {
                  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                  std::__shared_weak_count::__release_weak(v44);
                }
              }
              else
              {
                v102[0] = v41;
              }
              v48 = v92;
              if (v92)
              {
                v49 = (unint64_t *)&v92->__shared_owners_;
                do
                  v50 = __ldaxr(v49);
                while (__stlxr(v50 - 1, v49));
                if (!v50)
                {
                  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                  std::__shared_weak_count::__release_weak(v48);
                }
              }
              v51 = *(_QWORD *)v100;
              if (*((char *)v102[0] + 31) >= 0)
                v52 = (char *)v102[0] + 8;
              else
                v52 = (char *)*((_QWORD *)v102[0] + 1);
              v53 = _os_log_pack_fill();
              *(_DWORD *)v53 = 68157954;
              *(_DWORD *)(v53 + 4) = 13;
              *(_WORD *)(v53 + 8) = 2080;
              *(_QWORD *)(v53 + 10) = v52;
              v54 = operator new();
              v55 = *(unsigned __int8 *)(v8 + 39);
              if ((v55 & 0x80u) == 0)
                v56 = v9;
              else
                v56 = *(_QWORD *)(v8 + 16);
              if ((v55 & 0x80u) != 0)
                v55 = *(_QWORD *)(v8 + 24);
              *(_QWORD *)v54 = v51;
              *(_OWORD *)(v54 + 8) = *(_OWORD *)&v100[8];
              *(_QWORD *)&v100[8] = 0;
              *(_QWORD *)&v100[16] = 0;
              *(_OWORD *)(v54 + 24) = v101;
              v101 = 0uLL;
              *(_QWORD *)(v54 + 40) = v56;
              *(_QWORD *)(v54 + 48) = v55;
              *(_BYTE *)(v54 + 56) = 1;
              __dst = 0;
              *(_QWORD *)&v91 = v54;
              (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v91);
              v57 = v91;
              *(_QWORD *)&v91 = 0;
              if (v57)
              {
                v58 = *(std::__shared_weak_count **)(v57 + 32);
                if (v58)
                {
                  v59 = (unint64_t *)&v58->__shared_owners_;
                  do
                    v60 = __ldaxr(v59);
                  while (__stlxr(v60 - 1, v59));
                  if (!v60)
                  {
                    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                    std::__shared_weak_count::__release_weak(v58);
                  }
                }
                v61 = *(std::__shared_weak_count **)(v57 + 16);
                if (v61)
                {
                  v62 = (unint64_t *)&v61->__shared_owners_;
                  do
                    v63 = __ldaxr(v62);
                  while (__stlxr(v63 - 1, v62));
                  if (!v63)
                  {
                    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                    std::__shared_weak_count::__release_weak(v61);
                  }
                }
                MEMORY[0x227684CE8](v57, 0x10F0C40B62ED6C6);
                v64 = __dst;
                __dst = 0;
                if (v64)
                {
                  v65 = (std::__shared_weak_count *)v64[4];
                  if (v65)
                  {
                    v66 = (unint64_t *)&v65->__shared_owners_;
                    do
                      v67 = __ldaxr(v66);
                    while (__stlxr(v67 - 1, v66));
                    if (!v67)
                    {
                      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                      std::__shared_weak_count::__release_weak(v65);
                    }
                  }
                  v68 = (std::__shared_weak_count *)v64[2];
                  if (v68)
                  {
                    v69 = (unint64_t *)&v68->__shared_owners_;
                    do
                      v70 = __ldaxr(v69);
                    while (__stlxr(v70 - 1, v69));
                    if (!v70)
                    {
                      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                      std::__shared_weak_count::__release_weak(v68);
                    }
                  }
                  MEMORY[0x227684CE8](v64, 0x10F0C40B62ED6C6);
                }
              }
              v71 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
              if (*((_QWORD *)&v101 + 1))
              {
                v72 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - 1, v72));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
              v74 = *(std::__shared_weak_count **)&v100[16];
              if (*(_QWORD *)&v100[16])
              {
                v75 = (unint64_t *)(*(_QWORD *)&v100[16] + 8);
                do
                  v76 = __ldaxr(v75);
                while (__stlxr(v76 - 1, v75));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
              }
LABEL_119:
              if (v4)
              {
                sub_2245664AC((unsigned __int8 *)&v98, v100);
                sub_22322C138((uint64_t)&v81, "Using generated session uuid %.13s", v100);
                sub_223182C08((uint64_t)&v81);
              }
              sub_223182C08((uint64_t)&v81);
              v77 = v89;
              if (v89)
              {
                v78 = (unint64_t *)&v89->__shared_owners_;
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }
              return v98;
            }
          }
          memcpy(p_dst, __s, v29);
          goto LABEL_57;
        }
      }
      memmove(v16, v14, v15);
      goto LABEL_30;
    }
  }
  return v98;
}

void sub_223FF19C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (*(_BYTE *)(v3 - 168))
  {
    if (*(char *)(v3 - 169) < 0)
      operator delete(*(void **)(v3 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FF1A00(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 169) < 0)
  {
    operator delete(*(void **)(v1 - 192));
    __cxa_guard_abort(&qword_2540CEAA0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CEAA0);
  _Unwind_Resume(a1);
}

void sub_223FF1A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  sub_22319A054(&a21);
  sub_22319A054(&a27);
  sub_223199DE8(v27 - 192);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223FF1A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;
  int v22;

  if (v22 < 0)
    operator delete(v21);
  sub_223199DE8((uint64_t)&a21);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223FF1AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FF1B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  if (*(_BYTE *)(v3 - 160) && *(char *)(v3 - 161) < 0)
    operator delete(*(void **)(v3 - 184));
  v5 = *(void **)(v3 - 192);
  if (v5)
    os_release(v5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FF1B5C()
{
  JUMPOUT(0x223FF1B78);
}

__n128 sub_223FF1B80(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

void sub_223FF1B90(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void *sub_223FF1BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void (***v7)(_QWORD *__return_ptr, _QWORD, uint64_t);
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[3];
  std::__shared_weak_count *v16;
  char v17;
  void (***v18)(_QWORD *__return_ptr, _QWORD, _QWORD);
  std::__shared_weak_count *v19;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v3 = *(std::__shared_weak_count **)(v2 + 48);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  v19 = v5;
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(void (****)(_QWORD *__return_ptr, _QWORD, uint64_t))(v2 + 40);
  v18 = v7;
  if (v7)
  {
    (**v7)(v15, v7, a2);
    v8 = sub_223229DE8((uint64_t)v15);
    if (v17)
    {
      v9 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    v6 = v19;
    if (!v19)
      return v8;
  }
  else
  {
    v8 = 0;
  }
  v13 = (unint64_t *)&v6->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
    return v8;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return v8;
}

void sub_223FF1CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_223229E9C((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_223FF1CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_223FF1D00(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

BOOL sub_223FF1D10()
{
  BOOL v0;
  size_t v2;
  int v3;

  v3 = 0;
  v2 = 4;
  if (sysctlbyname("kern.hv_vmm_present", &v3, &v2, 0, 0))
    v0 = 1;
  else
    v0 = v3 == 0;
  return !v0;
}

uint64_t sub_223FF1D60(char *a1, unsigned __int16 a2, int a3)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  std::string *p_p;
  uint64_t v24;
  const char *v25;
  size_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  const char *v29;
  size_t v30;
  _BYTE *v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  size_t v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  size_t v43;
  size_t v44;
  _QWORD *p_dst;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  size_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  int v98;
  const char *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  _QWORD *exception;
  _QWORD *v107;
  const char *v108;
  uint64_t v109;
  const char *v110;
  char *__s;
  uint64_t v112[2];
  std::string __p;
  _QWORD v114[3];
  int v115;
  const char *v116;
  int v117;
  const char *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  _QWORD v122[4];
  _BYTE v123[16];
  void *v124;
  char v125;
  char v126;
  void *v127;
  char v128;
  void *v129;
  char v130;
  char v131;
  char v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  int v138;
  int v139;
  unsigned __int16 v140;
  _BYTE v141[24];
  __int128 v142;
  char *v143;
  __int128 v144;
  std::__shared_weak_count *v145;
  char *v146;
  std::__shared_weak_count *v147;
  _QWORD *v148;
  __int128 v149;
  _QWORD *__dst;
  __int128 v151;
  _BYTE v152[56];
  unint64_t v153;
  char v154;
  uint64_t v155;

  v155 = *MEMORY[0x24BDAC8D0];
  v140 = a2;
  v139 = a3;
  v136 = 0u;
  v137 = 0u;
  v138 = 728325584;
  kdebug_trace();
  v134 = 0;
  v135 = 0;
  v122[0] = a1;
  v122[1] = &v140;
  v122[2] = &v139;
  v122[3] = &v134;
  *(_QWORD *)v152 = &off_24EC658F0;
  *(_QWORD *)&v152[8] = v122;
  sub_22456BD10((uint64_t)v152, (uint64_t)v123);
  if (!v133)
  {
    sub_223FF2BFC(&v121);
    if (**(int **)(v121 + 56) > 2
      || (v19 = *(unsigned __int8 *)(v121 + 72),
          v20 = sub_22322F254(v121, "OSLogSurrogateAppender", 1, 0),
          v21 = v20,
          !v19)
      && !v20)
    {
LABEL_168:
      if (!v133 && v132)
      {
        if (v131)
        {
          if (v130 < 0)
            operator delete(v129);
          if (v128 < 0)
            operator delete(v127);
        }
        if (v126 && v125 < 0)
          operator delete(v124);
      }
      goto LABEL_169;
    }
    v114[0] = &v121;
    v114[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v114[2] = std::chrono::system_clock::now().__d_.__rep_;
    v115 = 2;
    v116 = "unknown file";
    v117 = 47;
    v119 = 0;
    v120 = 0;
    v118 = "unknown function";
    if (a1[23] >= 0)
      v22 = a1;
    else
      v22 = *(char **)a1;
    __s = v22;
    if (v133)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24EC1FCC0;
      __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
    }
    sub_22456A158((uint64_t)v123, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v24 = *(_QWORD *)v114[0];
    v25 = (const char *)(*(_QWORD *)v114[0] + 16);
    v108 = v25;
    v109 = *(_QWORD *)v114[0];
    if (*(char *)(*(_QWORD *)v114[0] + 39) < 0)
    {
      v25 = *(const char **)(v24 + 16);
      v26 = *(_QWORD *)(v24 + 24);
      v110 = (const char *)p_p;
      v28 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v28 & 1) != 0)
        goto LABEL_35;
    }
    else
    {
      v26 = *(unsigned __int8 *)(*(_QWORD *)v114[0] + 39);
      v110 = (const char *)p_p;
      v27 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v27 & 1) != 0)
        goto LABEL_35;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v152);
      sub_223199C58("com.apple.cv3d", (unint64_t)v152, &xmmword_255788F40);
      if (v152[24] && (v152[23] & 0x80000000) != 0)
        operator delete(*(void **)v152);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_35:
    if (byte_255788F57 >= 0)
      v29 = (const char *)&xmmword_255788F40;
    else
      v29 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v30 = byte_255788F57;
    else
      v30 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)v152 = os_log_create(v29, v25);
    v31 = &v152[8];
    if (v30 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v30 >= 0x17)
    {
      v32 = v21;
      v33 = v19;
      v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v34 = v30 | 7;
      v35 = v34 + 1;
      v31 = operator new(v34 + 1);
      *(_QWORD *)&v152[16] = v30;
      *(_QWORD *)&v152[24] = v35 | 0x8000000000000000;
      *(_QWORD *)&v152[8] = v31;
      v19 = v33;
      v21 = v32;
    }
    else
    {
      v152[31] = v30;
      if (!v30)
      {
LABEL_49:
        v31[v30] = 0;
        v152[32] = 1;
        v36 = &v152[40];
        if (v26 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v26 >= 0x17)
        {
          v37 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v26 | 7) != 0x17)
            v37 = v26 | 7;
          v38 = v37 + 1;
          v36 = operator new(v37 + 1);
          *(_QWORD *)&v152[48] = v26;
          v153 = v38 | 0x8000000000000000;
          *(_QWORD *)&v152[40] = v36;
        }
        else
        {
          HIBYTE(v153) = v26;
          if (!v26)
          {
LABEL_57:
            v36[v26] = 0;
            v154 = 1;
            v39 = *(NSObject **)v152;
            if (SHIBYTE(v153) < 0)
              operator delete(*(void **)&v152[40]);
            if (v152[32] && (v152[31] & 0x80000000) != 0)
              operator delete(*(void **)&v152[8]);
            if (*(_QWORD *)v152)
              os_release(*(void **)v152);
            if (!v21 || !*(_QWORD *)(v21 + 24))
            {
              os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG);
              *(_DWORD *)v152 = 136315650;
              *(_QWORD *)&v152[4] = __s;
              *(_WORD *)&v152[12] = 1024;
              *(_DWORD *)&v152[14] = v140;
              *(_WORD *)&v152[18] = 2080;
              *(_QWORD *)&v152[20] = v110;
              v47 = (void *)_os_log_send_and_compose_impl();
              if (v47)
                free(v47);
              goto LABEL_151;
            }
            v40 = _os_log_pack_size();
            v41 = (std::__shared_weak_count_vtbl *)operator new(v40, (std::align_val_t)8uLL);
            v42 = (std::__shared_weak_count *)operator new();
            v42->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v42->__shared_owners_ = 0;
            v42->__shared_weak_owners_ = 0;
            v42[1].__vftable = v41;
            *(_QWORD *)&v144 = v41;
            *((_QWORD *)&v144 + 1) = v41;
            v146 = 0;
            v147 = 0;
            v145 = v42;
            v43 = strlen(__s);
            if (v43 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v44 = v43;
            if (v43 >= 0x17)
            {
              v48 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v43 | 7) != 0x17)
                v48 = v43 | 7;
              v49 = v48 + 1;
              p_dst = operator new(v48 + 1);
              *(_QWORD *)&v151 = v44;
              *((_QWORD *)&v151 + 1) = v49 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v151) = v43;
              p_dst = &__dst;
              if (!v43)
              {
                v46 = v21;
                goto LABEL_76;
              }
            }
            v46 = v21;
            memcpy(p_dst, __s, v44);
LABEL_76:
            *((_BYTE *)p_dst + v44) = 0;
            v50 = strlen(v110);
            if (v50 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v51 = v50;
            if (v50 >= 0x17)
            {
              v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v50 | 7) != 0x17)
                v53 = v50 | 7;
              v54 = v53 + 1;
              v52 = operator new(v53 + 1);
              *(_QWORD *)&v149 = v51;
              *((_QWORD *)&v149 + 1) = v54 | 0x8000000000000000;
              v148 = v52;
            }
            else
            {
              HIBYTE(v149) = v50;
              v52 = &v148;
              if (!v50)
                goto LABEL_84;
            }
            memcpy(v52, v110, v51);
LABEL_84:
            *((_BYTE *)v52 + v51) = 0;
            *(_QWORD *)&v152[8] = __dst;
            *(_QWORD *)&v152[16] = v151;
            *(_QWORD *)&v152[23] = *(_QWORD *)((char *)&v151 + 7);
            *(_QWORD *)&v152[32] = v148;
            *(_QWORD *)&v152[40] = v149;
            *(_QWORD *)&v152[47] = *(_QWORD *)((char *)&v149 + 7);
            *(_QWORD *)v152 = off_24EC580F8;
            v152[31] = HIBYTE(v151);
            v152[55] = HIBYTE(v149);
            v55 = (char *)operator new(0x50uLL);
            *((_QWORD *)v55 + 3) = off_24EC580F8;
            *((_QWORD *)v55 + 1) = 0;
            *((_QWORD *)v55 + 2) = 0;
            *(_QWORD *)v55 = &off_24EC580A8;
            *((_OWORD *)v55 + 2) = *(_OWORD *)&v152[8];
            *((_QWORD *)v55 + 6) = *(_QWORD *)&v152[24];
            memset(&v152[8], 0, 24);
            *(_OWORD *)(v55 + 56) = *(_OWORD *)&v152[32];
            *((_QWORD *)v55 + 9) = *(_QWORD *)&v152[48];
            memset(&v152[32], 0, 24);
            v56 = v147;
            v146 = v55 + 24;
            v147 = (std::__shared_weak_count *)v55;
            if (v56)
            {
              p_shared_owners = (unint64_t *)&v56->__shared_owners_;
              do
                v58 = __ldaxr(p_shared_owners);
              while (__stlxr(v58 - 1, p_shared_owners));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            if ((v152[55] & 0x80000000) != 0)
            {
              operator delete(*(void **)&v152[32]);
              if ((v152[31] & 0x80000000) == 0)
              {
LABEL_91:
                *(_OWORD *)v141 = v144;
                v60 = v145;
                v59 = v146;
                *(_QWORD *)&v141[16] = v145;
                if (!v145)
                  goto LABEL_97;
                goto LABEL_95;
              }
            }
            else if ((v152[31] & 0x80000000) == 0)
            {
              goto LABEL_91;
            }
            operator delete(*(void **)&v152[8]);
            *(_OWORD *)v141 = v144;
            v60 = v145;
            v59 = v146;
            *(_QWORD *)&v141[16] = v145;
            if (!v145)
            {
LABEL_97:
              v63 = v147;
              *(_QWORD *)&v142 = v59;
              *((_QWORD *)&v142 + 1) = v147;
              if (v147)
              {
                v64 = (unint64_t *)&v147->__shared_owners_;
                do
                  v65 = __ldxr(v64);
                while (__stxr(v65 + 1, v64));
                v143 = v59;
                do
                  v66 = __ldaxr(v64);
                while (__stlxr(v66 - 1, v64));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                  std::__shared_weak_count::__release_weak(v63);
                }
              }
              else
              {
                v143 = v59;
              }
              v67 = v145;
              if (v145)
              {
                v68 = (unint64_t *)&v145->__shared_owners_;
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                }
              }
              v70 = *(_QWORD *)v141;
              if (v143[31] >= 0)
                v71 = v143 + 8;
              else
                v71 = (char *)*((_QWORD *)v143 + 1);
              if (v143[55] >= 0)
                v72 = v143 + 32;
              else
                v72 = (char *)*((_QWORD *)v143 + 4);
              v73 = _os_log_pack_fill();
              v74 = v140;
              *(_DWORD *)v73 = 136315650;
              *(_QWORD *)(v73 + 4) = v71;
              *(_WORD *)(v73 + 12) = 1024;
              *(_DWORD *)(v73 + 14) = v74;
              *(_WORD *)(v73 + 18) = 2080;
              *(_QWORD *)(v73 + 20) = v72;
              v75 = operator new();
              v76 = *(unsigned __int8 *)(v109 + 39);
              v77 = v108;
              if ((v76 & 0x80u) != 0)
              {
                v77 = *(const char **)(v109 + 16);
                v76 = *(_QWORD *)(v109 + 24);
              }
              *(_QWORD *)v75 = v70;
              *(_OWORD *)(v75 + 8) = *(_OWORD *)&v141[8];
              *(_QWORD *)&v141[8] = 0;
              *(_QWORD *)&v141[16] = 0;
              *(_OWORD *)(v75 + 24) = v142;
              v142 = 0uLL;
              *(_QWORD *)(v75 + 40) = v77;
              *(_QWORD *)(v75 + 48) = v76;
              *(_BYTE *)(v75 + 56) = 2;
              *(_QWORD *)&v144 = 0;
              *(_QWORD *)v152 = v75;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v46 + 24) + 40))(*(_QWORD *)(v46 + 24), v152);
              v78 = *(_QWORD *)v152;
              *(_QWORD *)v152 = 0;
              if (v78)
              {
                v79 = *(std::__shared_weak_count **)(v78 + 32);
                if (v79)
                {
                  v80 = (unint64_t *)&v79->__shared_owners_;
                  do
                    v81 = __ldaxr(v80);
                  while (__stlxr(v81 - 1, v80));
                  if (!v81)
                  {
                    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                    std::__shared_weak_count::__release_weak(v79);
                  }
                }
                v82 = *(std::__shared_weak_count **)(v78 + 16);
                if (v82)
                {
                  v83 = (unint64_t *)&v82->__shared_owners_;
                  do
                    v84 = __ldaxr(v83);
                  while (__stlxr(v84 - 1, v83));
                  if (!v84)
                  {
                    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                    std::__shared_weak_count::__release_weak(v82);
                  }
                }
                MEMORY[0x227684CE8](v78, 0x10F0C40B62ED6C6);
                v85 = v144;
                *(_QWORD *)&v144 = 0;
                if (v85)
                {
                  v86 = *(std::__shared_weak_count **)(v85 + 32);
                  if (v86)
                  {
                    v87 = (unint64_t *)&v86->__shared_owners_;
                    do
                      v88 = __ldaxr(v87);
                    while (__stlxr(v88 - 1, v87));
                    if (!v88)
                    {
                      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                      std::__shared_weak_count::__release_weak(v86);
                    }
                  }
                  v89 = *(std::__shared_weak_count **)(v85 + 16);
                  if (v89)
                  {
                    v90 = (unint64_t *)&v89->__shared_owners_;
                    do
                      v91 = __ldaxr(v90);
                    while (__stlxr(v91 - 1, v90));
                    if (!v91)
                    {
                      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                      std::__shared_weak_count::__release_weak(v89);
                    }
                  }
                  MEMORY[0x227684CE8](v85, 0x10F0C40B62ED6C6);
                }
              }
              v92 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
              if (*((_QWORD *)&v142 + 1))
              {
                v93 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              v95 = *(std::__shared_weak_count **)&v141[16];
              if (*(_QWORD *)&v141[16])
              {
                v96 = (unint64_t *)(*(_QWORD *)&v141[16] + 8);
                do
                  v97 = __ldaxr(v96);
                while (__stlxr(v97 - 1, v96));
                if (!v97)
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }
LABEL_151:
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v19)
              {
                if (a1[23] < 0)
                  a1 = *(char **)a1;
                if (v133)
                {
                  v107 = __cxa_allocate_exception(8uLL);
                  *v107 = &off_24EC1FCC0;
                  __cxa_throw(v107, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
                }
                v98 = v140;
                sub_22456A158((uint64_t)v123, (std::string *)v152);
                if (v152[23] >= 0)
                  v99 = v152;
                else
                  v99 = *(const char **)v152;
                sub_22322C138((uint64_t)v114, "VisualLoggerServer %s:%d not running: %s", a1, v98, v99);
                if ((v152[23] & 0x80000000) != 0)
                  operator delete(*(void **)v152);
                sub_223182C08((uint64_t)v114);
              }
              sub_223182C08((uint64_t)v114);
              v100 = v120;
              if (v120)
              {
                v101 = (unint64_t *)&v120->__shared_owners_;
                do
                  v102 = __ldaxr(v101);
                while (__stlxr(v102 - 1, v101));
                if (!v102)
                {
                  ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                  std::__shared_weak_count::__release_weak(v100);
                }
              }
              goto LABEL_168;
            }
LABEL_95:
            v61 = (unint64_t *)&v60->__shared_owners_;
            do
              v62 = __ldxr(v61);
            while (__stxr(v62 + 1, v61));
            goto LABEL_97;
          }
        }
        memmove(v36, v25, v26);
        goto LABEL_57;
      }
    }
    memmove(v31, v29, v30);
    goto LABEL_49;
  }
  v4 = sub_2241471F8();
  v5 = (std::__shared_weak_count *)v135;
  if (v134)
    v6 = v134 + 8;
  else
    v6 = 0;
  v112[0] = v6;
  v112[1] = v135;
  if (v135)
  {
    v7 = (unint64_t *)(v135 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = sub_224148408((uint64_t)v4, v112);
  v10 = v9;
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v10)
        goto LABEL_13;
LABEL_169:
      v17 = 0;
      v18 = (std::__shared_weak_count *)v135;
      if (!v135)
        goto LABEL_174;
      goto LABEL_170;
    }
  }
  if (!v9)
    goto LABEL_169;
LABEL_13:
  v13 = atomic_load((unsigned __int8 *)&qword_2540CEAC8);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEAC8))
  {
    __cxa_atexit((void (*)(void *))sub_223FF976C, &qword_2540CEAD0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CEAC8);
  }
  v14 = qword_2540CEAD0;
  for (i = unk_2540CEAD8; v14 != i; v14 += 32)
  {
    v16 = *(_QWORD *)(v14 + 24);
    if (!v16)
      sub_223198474();
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
  }
  v17 = 1;
  v18 = (std::__shared_weak_count *)v135;
  if (v135)
  {
LABEL_170:
    v103 = (unint64_t *)&v18->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
LABEL_174:
  kdebug_trace();
  return v17;
}

void sub_223FF2A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,char a56)
{
  uint64_t v56;

  if (*(_BYTE *)(v56 - 152) && *(char *)(v56 - 153) < 0)
    operator delete(*(void **)(v56 - 176));
  __cxa_guard_abort(&qword_255788F58);
  if (a23 < 0)
    operator delete(__p);
  sub_223182DAC((uint64_t)&a24);
  sub_223197D38((uint64_t)&a38);
  sub_223167354((uint64_t)&a54);
  sub_2231874DC((uint64_t)&a56);
  _Unwind_Resume(a1);
}

void sub_223FF2BFC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CEAB0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEAB0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CEAA8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CEAB0);
  }
  *a1 = qword_2540CEAA8;
}

void sub_223FF2C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CEAB0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CEAB0);
  _Unwind_Resume(a1);
}

BOOL sub_223FF2CF0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  std::__fs::filesystem::path::__string_view v11;
  uint64_t *v12;
  uint64_t *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unsigned __int8 v23;
  char *v24;
  int v25;
  char *v26;
  char *v27;
  int v28;
  char *v29;
  _QWORD *v30;
  uint64_t (***v31)();
  uint64_t v32;
  uint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  _BOOL8 v36;
  _BOOL8 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  void *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void *v54;
  uint64_t v55;
  __int128 v57;
  void *v58;
  char *v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  int v63;
  __int128 v64;
  uint64_t (**v65)();
  int v66;
  uint64_t (***v67)();
  char v68;
  char v69;
  char v70;
  char v71;
  __int128 v72;
  uint64_t v73;
  int v74;
  char v75;
  char v76;
  _WORD v77[8];
  _BYTE v78[7];
  char v79;
  int v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  void *v100;
  char *v101;
  unint64_t v102;
  char v103;
  char v104;
  char v105;
  uint64_t v106;
  void *__p;
  uint64_t *v108;
  _BYTE v109[416];
  char v110;
  _QWORD v111[4];
  int v112;
  char v113;
  uint64_t v114;

  v114 = *MEMORY[0x24BDAC8D0];
  v61 = 0u;
  v62 = 0u;
  v63 = 728325592;
  kdebug_trace();
  v4 = sub_2241471F8();
  v5 = v4[2];
  if (!v5)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = v4[2];
  }
  v6 = *(_QWORD *)(v5 + 64);
  std::mutex::lock((std::mutex *)(v6 + 32));
  sub_2241054D4(&__p, v6 + 96);
  std::mutex::unlock((std::mutex *)(v6 + 32));
  v7 = (uint64_t *)__p;
  v8 = v108;
  if (__p == v108)
  {
LABEL_26:
    if (v7)
    {
      v18 = v108;
      v19 = v7;
      if (v108 != v7)
      {
        do
        {
          v20 = (std::__shared_weak_count *)*(v18 - 1);
          if (v20)
          {
            p_shared_owners = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldaxr(p_shared_owners);
            while (__stlxr(v22 - 1, p_shared_owners));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          v18 -= 2;
        }
        while (v18 != v7);
        v19 = __p;
      }
      v108 = v7;
      operator delete(v19);
    }
    v58 = 0;
    v59 = 0;
    v60 = 0;
    bzero(&__p, 0x300uLL);
    __p = &off_24EC6A160;
    v110 = 0;
    v111[0] = 32;
    v112 = 0;
    v113 = 1;
    LOBYTE(v65) = 0;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v23 = atomic_load((unsigned __int8 *)&qword_2557952C0);
    if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_2557952C0))
    {
      v64 = xmmword_224693B20;
      sub_224103808((uint64_t *)&v64);
      __cxa_atexit((void (*)(void *))sub_224103AB4, &xmmword_255795120, &dword_22314D000);
      __cxa_guard_release(&qword_2557952C0);
    }
    if (byte_2557951D7 < 0)
    {
      sub_223197FA4(&v72, (void *)xmmword_2557951C0, *((unint64_t *)&xmmword_2557951C0 + 1));
    }
    else
    {
      v72 = xmmword_2557951C0;
      v73 = unk_2557951D0;
    }
    v74 = dword_2557951D8;
    v75 = 1;
    v76 = 1;
    memset(v78, 0, sizeof(v78));
    strcpy((char *)v77, "cv3d.recon.*");
    HIBYTE(v77[6]) = 0;
    v77[7] = 0;
    v79 = 12;
    v80 = 1;
    v81 = 1;
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v85 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v95 = 0;
    v96 = 0;
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = &off_24EC6A160;
    sub_223FF6B74((uint64_t)&v102, (uint64_t)&v65);
    sub_223FF71D4((uint64_t)v109, (uint64_t)&v102);
    v100 = &off_24EC6A160;
    sub_223FF896C((uint64_t)&v102);
    sub_223FF896C((uint64_t)&v65);
    v59 = sub_223FF8C20((uint64_t *)&v58, (uint64_t)&__p);
    if (v113)
    {
      if (v112 != -1)
        ((void (*)(void **, _QWORD *))off_24EC65920[v112])(&v100, v111);
      v112 = -1;
    }
    __p = &off_24EC6A160;
    sub_223FF896C((uint64_t)v109);
    bzero(&__p, 0x300uLL);
    __p = &off_24EC6A160;
    v110 = 0;
    v111[0] = 14;
    v112 = 0;
    v113 = 1;
    LOBYTE(v65) = 0;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    LOBYTE(v72) = 0;
    v76 = 0;
    memset(v78, 0, sizeof(v78));
    strcpy((char *)v77, "cv3d.recon.*");
    HIBYTE(v77[6]) = 0;
    v77[7] = 0;
    v79 = 12;
    v80 = 1;
    v81 = 1;
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v85 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v95 = 0;
    v96 = 0;
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = &off_24EC6A160;
    sub_223FF6B74((uint64_t)&v102, (uint64_t)&v65);
    sub_223FF71D4((uint64_t)v109, (uint64_t)&v102);
    v100 = &off_24EC6A160;
    sub_223FF896C((uint64_t)&v102);
    sub_223FF896C((uint64_t)&v65);
    v24 = v59;
    if ((unint64_t)v59 >= v60)
    {
      v26 = sub_223FF8C20((uint64_t *)&v58, (uint64_t)&__p);
    }
    else
    {
      *(_QWORD *)v59 = &off_24EC6A160;
      sub_223FF6B74((uint64_t)(v24 + 16), (uint64_t)v109);
      v24[768] = 0;
      v24[808] = 0;
      if (v113)
      {
        *((_DWORD *)v24 + 200) = -1;
        v25 = v112;
        if (v112 != -1)
        {
          ((void (*)(void **, char *, _QWORD *))off_24EC65A20[v112])(&v100, v24 + 768, v111);
          *((_DWORD *)v24 + 200) = v25;
        }
        v24[808] = 1;
      }
      v26 = v24 + 816;
    }
    v59 = v26;
    if (v113)
    {
      if (v112 != -1)
        ((void (*)(void **, _QWORD *))off_24EC65920[v112])(&v100, v111);
      v112 = -1;
    }
    __p = &off_24EC6A160;
    sub_223FF896C((uint64_t)v109);
    bzero(&__p, 0x300uLL);
    __p = &off_24EC6A160;
    v110 = 0;
    v111[0] = 1;
    v112 = 0;
    v113 = 1;
    v27 = v59;
    if ((unint64_t)v59 >= v60)
    {
      v29 = sub_223FF8C20((uint64_t *)&v58, (uint64_t)&__p);
    }
    else
    {
      *(_QWORD *)v59 = &off_24EC6A160;
      sub_223FF6B74((uint64_t)(v27 + 16), (uint64_t)v109);
      v27[768] = 0;
      v27[808] = 0;
      if (v113)
      {
        *((_DWORD *)v27 + 200) = -1;
        v28 = v112;
        if (v112 != -1)
        {
          ((void (*)(void **, char *, _QWORD *))off_24EC65A20[v112])(&v100, v27 + 768, v111);
          *((_DWORD *)v27 + 200) = v28;
        }
        v27[808] = 1;
      }
      v29 = v27 + 816;
    }
    v104 = 0;
    v105 = 0;
    v106 = 0;
    v100 = v58;
    v101 = v29;
    v102 = v60;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v103 = 1;
    v67 = &v65;
    v65 = &off_24EC69B68;
    v66 = 2;
    v68 = 1;
    v30 = operator new(0x30uLL);
    v30[1] = 0;
    v30[2] = 0;
    *v30 = &off_24EC63FA8;
    sub_223EDA1C0(v30 + 3, a1, (uint64_t)&v100, (uint64_t)&v65, a2);
    *(_QWORD *)&v64 = v30 + 3;
    *((_QWORD *)&v64 + 1) = v30;
    if (v68)
    {
      v31 = v67;
      if (v67 == &v65)
      {
        v32 = 4;
        v31 = &v65;
      }
      else
      {
        if (!v67)
          goto LABEL_69;
        v32 = 5;
      }
      (*v31)[v32]();
    }
LABEL_69:
    v33 = sub_2241471F8();
    v57 = v64;
    if (*((_QWORD *)&v64 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = sub_224148408((uint64_t)v33, (uint64_t *)&v57);
    v37 = v36;
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
      goto LABEL_76;
    v39 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
      if (!v37)
        goto LABEL_81;
    }
    else
    {
LABEL_76:
      if (!v36)
        goto LABEL_81;
    }
    v41 = atomic_load((unsigned __int8 *)&qword_2540CEAC8);
    if ((v41 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CEAC8))
    {
      v42 = qword_2540CEAD0;
      v43 = unk_2540CEAD8;
      if (qword_2540CEAD0 == unk_2540CEAD8)
        goto LABEL_81;
    }
    else
    {
      __cxa_atexit((void (*)(void *))sub_223FF976C, &qword_2540CEAD0, &dword_22314D000);
      __cxa_guard_release(&qword_2540CEAC8);
      v42 = qword_2540CEAD0;
      v43 = unk_2540CEAD8;
      if (qword_2540CEAD0 == unk_2540CEAD8)
        goto LABEL_81;
    }
    do
    {
      v44 = *(_QWORD *)(v42 + 24);
      if (!v44)
        sub_223198474();
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 48))(v44);
      v42 += 32;
    }
    while (v42 != v43);
LABEL_81:
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
    if (!*((_QWORD *)&v64 + 1))
      goto LABEL_85;
    v46 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      if (v103)
      {
LABEL_86:
        v48 = (char *)v100;
        if (v100)
        {
          v49 = v101;
          v50 = v100;
          if (v101 != v100)
          {
            do
            {
              if (*(v49 - 8))
              {
                v51 = *((unsigned int *)v49 - 4);
                if ((_DWORD)v51 != -1)
                  ((void (*)(uint64_t (***)(), char *))off_24EC65920[v51])(&v65, v49 - 48);
                *((_DWORD *)v49 - 4) = -1;
              }
              *((_QWORD *)v49 - 102) = &off_24EC6A160;
              sub_223FF896C((uint64_t)(v49 - 800));
              v49 -= 816;
            }
            while (v49 != v48);
            v50 = v100;
          }
          v101 = v48;
          operator delete(v50);
        }
      }
    }
    else
    {
LABEL_85:
      if (v103)
        goto LABEL_86;
    }
    if (v113)
    {
      if (v112 != -1)
        ((void (*)(void **, _QWORD *))off_24EC65920[v112])(&v100, v111);
      v112 = -1;
    }
    __p = &off_24EC6A160;
    sub_223FF896C((uint64_t)v109);
    v52 = (char *)v58;
    if (v58)
    {
      v53 = v59;
      v54 = v58;
      if (v59 != v58)
      {
        do
        {
          if (*(v53 - 8))
          {
            v55 = *((unsigned int *)v53 - 4);
            if ((_DWORD)v55 != -1)
              ((void (*)(void **, char *))off_24EC65920[v55])(&__p, v53 - 48);
            *((_DWORD *)v53 - 4) = -1;
          }
          *((_QWORD *)v53 - 102) = &off_24EC6A160;
          sub_223FF896C((uint64_t)(v53 - 800));
          v53 -= 816;
        }
        while (v53 != v52);
        v54 = v58;
      }
      v59 = v52;
      operator delete(v54);
    }
    goto LABEL_110;
  }
  while (1)
  {
    v9 = *v7;
    if (*v7 && *(uint64_t (***)())v9 == &off_24EC698B0)
    {
      v10 = *(char *)(a1 + 23);
      v11.__data_ = v10 >= 0 ? (const std::string_view::value_type *)a1 : *(const std::string_view::value_type **)a1;
      v11.__size_ = v10 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(_QWORD *)(a1 + 8);
      if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(*(_QWORD *)(v9 + 8) + 32), v11))break;
    }
    v7 += 2;
    if (v7 == v8)
    {
      v7 = (uint64_t *)__p;
      goto LABEL_26;
    }
  }
  v12 = (uint64_t *)__p;
  if (__p)
  {
    v13 = v108;
    v14 = __p;
    if (v108 != __p)
    {
      do
      {
        v15 = (std::__shared_weak_count *)*(v13 - 1);
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v13 -= 2;
      }
      while (v13 != v12);
      v14 = __p;
    }
    v108 = v12;
    operator delete(v14);
  }
  v37 = 0;
LABEL_110:
  kdebug_trace();
  return v37;
}

#error "223FF3B1C: call analysis failed (funcsize=155)"

void sub_223FF3BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  if (LOBYTE(STACK[0x688]) && SLOBYTE(STACK[0x687]) < 0)
    operator delete((void *)STACK[0x670]);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x370]);
  std::exception::~exception((std::exception *)va);
  __cxa_end_catch();
  JUMPOUT(0x223FF38FCLL);
}

uint64_t sub_223FF3C5C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 808))
  {
    v2 = *(unsigned int *)(a1 + 800);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24EC65920[v2])(&v4, a1 + 768);
    *(_DWORD *)(a1 + 800) = -1;
  }
  *(_QWORD *)a1 = &off_24EC6A160;
  sub_223FF896C(a1 + 16);
  return a1;
}

void **sub_223FF3CD0(void **a1)
{
  _DWORD *v2;
  _DWORD *v3;
  void *v4;
  uint64_t v5;
  char v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((_BYTE *)v3 - 8))
        {
          v5 = *(v3 - 4);
          if ((_DWORD)v5 != -1)
            ((void (*)(char *, _DWORD *))off_24EC65920[v5])(&v7, v3 - 12);
          *(v3 - 4) = -1;
        }
        *((_QWORD *)v3 - 102) = &off_24EC6A160;
        sub_223FF896C((uint64_t)(v3 - 200));
        v3 -= 204;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_223FF3D98(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CEAC0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEAC0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CEAB8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CEAC0);
  }
  *a1 = qword_2540CEAB8;
}

void sub_223FF3E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CEAC0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CEAC0);
  _Unwind_Resume(a1);
}

void sub_223FF3E8C(std::string *__s, uint64_t a2, uint64_t a3, int a4)
{
  size_t size;
  std::string *v9;
  _BYTE *v10;
  BOOL v11;
  int v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  int v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  size_t v23;
  unsigned __int8 v24;
  const char *v25;
  size_t v26;
  std::string::size_type *p_size;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  const char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  size_t v36;
  void *v37;
  _QWORD *v38;
  size_t v39;
  size_t v40;
  _QWORD *p_dst;
  void *v42;
  int v43;
  unsigned __int8 v44;
  const char *v45;
  size_t v46;
  std::string::size_type *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  const char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  size_t v56;
  void *v57;
  _QWORD *v58;
  size_t v59;
  size_t v60;
  _QWORD *v61;
  void *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  char v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  char v81;
  _QWORD *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::string::size_type v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  std::string::size_type v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  _QWORD *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  const char *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::string::size_type v124;
  std::string *v125;
  _BOOL4 v126;
  _BOOL4 v127;
  unint64_t *v128;
  unint64_t v129;
  std::string::size_type v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  std::string::size_type v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  _QWORD *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  const char *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  int v160;
  char *v161;
  uint64_t v162;
  std::string *v163;
  __int128 v164;
  char v165;
  std::string::size_type v166;
  unsigned __int16 v167;
  int v168;
  char *v169;
  uint64_t v170;
  uint64_t *v171;
  const char *v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  size_t v181;
  const char *v182;
  unsigned __int8 v183;
  unsigned __int8 v184;
  const char *v185;
  size_t v186;
  std::string::size_type *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  NSObject *v191;
  uint64_t v192;
  uint64_t v193;
  size_t v194;
  void *v195;
  _QWORD *v196;
  size_t v197;
  size_t v198;
  _QWORD *v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  char v204;
  _QWORD *v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  char *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::string::size_type v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  std::string::size_type v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  _QWORD *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  const char *v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  int v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  size_t v259;
  const char *v260;
  unsigned __int8 v261;
  const char *v262;
  size_t v263;
  std::string::size_type *v264;
  unint64_t v265;
  const char *v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  NSObject *v275;
  size_t v276;
  std::__shared_weak_count_vtbl *v277;
  std::__shared_weak_count *v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t v282;
  std::string::size_type v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  std::string::size_type v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  _QWORD *v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  void *v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  void *v315;
  uint64_t *v316;
  const char *v317;
  const char *v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  int v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  void *__p[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v330;
  const char *v331;
  int v332;
  const char *v333;
  uint64_t v334;
  std::__shared_weak_count *v335;
  std::string v336;
  __int128 v337;
  _QWORD *__dst;
  __int128 v339;
  __int128 v340;
  std::string v341;
  __int128 v342;
  char *v343;
  size_t v344;
  unint64_t v345;
  char v346;
  uint64_t v347[5];

  v347[2] = *MEMORY[0x24BDAC8D0];
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s->__r_.__value_.__l.__size_;
    if (!size)
      return;
    v9 = (std::string *)__s->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&__s->__r_.__value_.__s + 23))
      return;
    v9 = __s;
  }
  v10 = memchr(v9, 58, size);
  if (v10)
    v11 = v10 - (_BYTE *)v9 == -1;
  else
    v11 = 1;
  if (v11)
  {
    sub_223FF2BFC(v347);
    if (**(int **)(v347[0] + 56) > 3)
      goto LABEL_197;
    v12 = *(unsigned __int8 *)(v347[0] + 72);
    v13 = sub_22322F254(v347[0], "OSLogSurrogateAppender", 1, 0);
    if (!v12 && !v13)
      goto LABEL_197;
    v324 = v13;
    v321 = v12;
    __p[0] = v347;
    __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v330 = 3;
    v331 = "unknown file";
    v332 = 142;
    v334 = 0;
    v335 = 0;
    v333 = "unknown function";
    if ((__s->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = (const char *)__s;
    else
      v14 = (const char *)__s->__r_.__value_.__r.__words[0];
    v15 = *(_QWORD *)__p[0];
    v16 = (const char *)(*(_QWORD *)__p[0] + 16);
    v319 = *(_QWORD *)__p[0];
    v317 = v16;
    if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
    {
      v16 = *(const char **)(v15 + 16);
      v17 = *(_QWORD *)(v15 + 24);
    }
    else
    {
      v17 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
    }
    v24 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v341);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v341, &xmmword_255788F40);
      if ((_BYTE)v342 && SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v341.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v25 = (const char *)&xmmword_255788F40;
    else
      v25 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v26 = byte_255788F57;
    else
      v26 = *((_QWORD *)&xmmword_255788F40 + 1);
    v341.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v25, v16);
    p_size = &v341.__r_.__value_.__l.__size_;
    if (v26 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v26 >= 0x17)
    {
      v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v28 = v26 | 7;
      v29 = v28 + 1;
      p_size = (std::string::size_type *)operator new(v28 + 1);
      v341.__r_.__value_.__r.__words[2] = v26;
      *(_QWORD *)&v342 = v29 | 0x8000000000000000;
      v341.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
    }
    else
    {
      BYTE7(v342) = v26;
      if (!v26)
      {
LABEL_43:
        *((_BYTE *)p_size + v26) = 0;
        BYTE8(v342) = 1;
        v30 = (char *)&v343;
        if (v17 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v31 = v14;
        if (v17 >= 0x17)
        {
          v33 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v33 = v17 | 7;
          v34 = v33 + 1;
          v32 = v324;
          v30 = (char *)operator new(v33 + 1);
          v344 = v17;
          v345 = v34 | 0x8000000000000000;
          v343 = v30;
        }
        else
        {
          HIBYTE(v345) = v17;
          v32 = v324;
          if (!v17)
          {
LABEL_51:
            v30[v17] = 0;
            v346 = 1;
            v35 = v341.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v345) < 0)
              operator delete(v343);
            if (BYTE8(v342) && SBYTE7(v342) < 0)
              operator delete((void *)v341.__r_.__value_.__l.__size_);
            if (v341.__r_.__value_.__r.__words[0])
              os_release(v341.__r_.__value_.__l.__data_);
            if (!v32 || !*(_QWORD *)(v32 + 24))
            {
              os_log_type_enabled(v35, OS_LOG_TYPE_INFO);
              LODWORD(v341.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v341.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
              v42 = (void *)_os_log_send_and_compose_impl();
              v43 = v321;
              if (v42)
                free(v42);
              goto LABEL_187;
            }
            v36 = _os_log_pack_size();
            v37 = operator new(v36, (std::align_val_t)8uLL);
            v38 = (_QWORD *)operator new();
            *v38 = &off_24EC1F7F0;
            v38[1] = 0;
            v38[2] = 0;
            v38[3] = v37;
            v336.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
            v336.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
            v337 = 0uLL;
            v336.__r_.__value_.__r.__words[2] = (std::string::size_type)v38;
            v39 = strlen(v31);
            if (v39 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v40 = v39;
            if (v39 >= 0x17)
            {
              v64 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v39 | 7) != 0x17)
                v64 = v39 | 7;
              v65 = v64 + 1;
              p_dst = operator new(v64 + 1);
              *(_QWORD *)&v339 = v40;
              *((_QWORD *)&v339 + 1) = v65 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v339) = v39;
              p_dst = &__dst;
              if (!v39)
              {
LABEL_109:
                *((_BYTE *)p_dst + v40) = 0;
                v66 = __dst;
                *(_QWORD *)&v340 = v339;
                *(_QWORD *)((char *)&v340 + 7) = *(_QWORD *)((char *)&v339 + 7);
                v67 = HIBYTE(v339);
                v68 = operator new(0x38uLL);
                v68[1] = 0;
                v68[2] = 0;
                v68[3] = off_24EC1FA48;
                *v68 = &off_24EC1F9F8;
                v69 = v340;
                v68[4] = v66;
                v68[5] = v69;
                *(_QWORD *)((char *)v68 + 47) = *(_QWORD *)((char *)&v340 + 7);
                *((_BYTE *)v68 + 55) = v67;
                *(_QWORD *)&v340 = 0;
                *(_QWORD *)((char *)&v340 + 7) = 0;
                v70 = (std::__shared_weak_count *)*((_QWORD *)&v337 + 1);
                *(_QWORD *)&v337 = v68 + 3;
                *((_QWORD *)&v337 + 1) = v68;
                if (v70)
                {
                  p_shared_owners = (unint64_t *)&v70->__shared_owners_;
                  do
                    v72 = __ldaxr(p_shared_owners);
                  while (__stlxr(v72 - 1, p_shared_owners));
                  if (!v72)
                  {
                    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                    std::__shared_weak_count::__release_weak(v70);
                  }
                }
                v341 = v336;
                if (v336.__r_.__value_.__r.__words[2])
                {
                  v73 = (unint64_t *)(v336.__r_.__value_.__r.__words[2] + 8);
                  do
                    v74 = __ldxr(v73);
                  while (__stxr(v74 + 1, v73));
                }
                v342 = v337;
                if (*((_QWORD *)&v337 + 1))
                {
                  v75 = (unint64_t *)(*((_QWORD *)&v337 + 1) + 8);
                  do
                    v76 = __ldxr(v75);
                  while (__stxr(v76 + 1, v75));
                  v343 = (char *)v337;
                  do
                    v77 = __ldaxr(v75);
                  while (__stlxr(v77 - 1, v75));
                  if (!v77)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v337 + 1) + 16))(*((_QWORD *)&v337 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v337 + 1));
                  }
                }
                else
                {
                  v343 = (char *)v337;
                }
                if (v336.__r_.__value_.__r.__words[2])
                {
                  v92 = (unint64_t *)(v336.__r_.__value_.__r.__words[2] + 8);
                  do
                    v93 = __ldaxr(v92);
                  while (__stlxr(v93 - 1, v92));
                  if (!v93)
                  {
                    (*(void (**)(std::string::size_type))(*(_QWORD *)v336.__r_.__value_.__r.__words[2] + 16))(v336.__r_.__value_.__r.__words[2]);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v336.__r_.__value_.__r.__words[2]);
                  }
                }
                v94 = v341.__r_.__value_.__r.__words[0];
                if (v343[31] >= 0)
                  v95 = v343 + 8;
                else
                  v95 = (char *)*((_QWORD *)v343 + 1);
                v96 = _os_log_pack_fill();
                *(_DWORD *)v96 = 136315138;
                *(_QWORD *)(v96 + 4) = v95;
                v97 = operator new();
                v98 = *(unsigned __int8 *)(v319 + 39);
                v99 = v317;
                if ((v98 & 0x80u) != 0)
                {
                  v99 = *(const char **)(v319 + 16);
                  v98 = *(_QWORD *)(v319 + 24);
                }
                *(_QWORD *)v97 = v94;
                *(_OWORD *)(v97 + 8) = *(_OWORD *)&v341.__r_.__value_.__r.__words[1];
                *(_OWORD *)&v341.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v97 + 24) = v342;
                v342 = 0uLL;
                *(_QWORD *)(v97 + 40) = v99;
                *(_QWORD *)(v97 + 48) = v98;
                *(_BYTE *)(v97 + 56) = 1;
                __dst = 0;
                v336.__r_.__value_.__r.__words[0] = v97;
                (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v32 + 24) + 40))(*(_QWORD *)(v32 + 24), &v336);
                v43 = v321;
                v100 = v336.__r_.__value_.__r.__words[0];
                v336.__r_.__value_.__r.__words[0] = 0;
                if (v100)
                {
                  v101 = *(std::__shared_weak_count **)(v100 + 32);
                  if (v101)
                  {
                    v102 = (unint64_t *)&v101->__shared_owners_;
                    do
                      v103 = __ldaxr(v102);
                    while (__stlxr(v103 - 1, v102));
                    if (!v103)
                    {
                      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                      std::__shared_weak_count::__release_weak(v101);
                    }
                  }
                  v104 = *(std::__shared_weak_count **)(v100 + 16);
                  if (v104)
                  {
                    v105 = (unint64_t *)&v104->__shared_owners_;
                    do
                      v106 = __ldaxr(v105);
                    while (__stlxr(v106 - 1, v105));
                    if (!v106)
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                  }
                  MEMORY[0x227684CE8](v100, 0x10F0C40B62ED6C6);
                  v107 = __dst;
                  __dst = 0;
                  if (v107)
                  {
                    v108 = (std::__shared_weak_count *)v107[4];
                    if (v108)
                    {
                      v109 = (unint64_t *)&v108->__shared_owners_;
                      do
                        v110 = __ldaxr(v109);
                      while (__stlxr(v110 - 1, v109));
                      if (!v110)
                      {
                        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                        std::__shared_weak_count::__release_weak(v108);
                      }
                    }
                    v111 = (std::__shared_weak_count *)v107[2];
                    if (v111)
                    {
                      v112 = (unint64_t *)&v111->__shared_owners_;
                      do
                        v113 = __ldaxr(v112);
                      while (__stlxr(v113 - 1, v112));
                      if (!v113)
                      {
                        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                        std::__shared_weak_count::__release_weak(v111);
                      }
                    }
                    MEMORY[0x227684CE8](v107, 0x10F0C40B62ED6C6);
                  }
                }
                v114 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
                if (*((_QWORD *)&v342 + 1))
                {
                  v115 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
                  do
                    v116 = __ldaxr(v115);
                  while (__stlxr(v116 - 1, v115));
                  if (!v116)
                  {
                    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                    std::__shared_weak_count::__release_weak(v114);
                  }
                }
                v117 = (std::__shared_weak_count *)v341.__r_.__value_.__r.__words[2];
                if (v341.__r_.__value_.__r.__words[2])
                {
                  v118 = (unint64_t *)(v341.__r_.__value_.__r.__words[2] + 8);
                  do
                    v119 = __ldaxr(v118);
                  while (__stlxr(v119 - 1, v118));
                  if (!v119)
                  {
                    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                    std::__shared_weak_count::__release_weak(v117);
                  }
                }
LABEL_187:
                if (v43)
                {
                  if ((__s->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v120 = (const char *)__s;
                  else
                    v120 = (const char *)__s->__r_.__value_.__r.__words[0];
                  sub_22322C138((uint64_t)__p, "Initializing VisualLogger file exporter %s", v120);
                  sub_223182C08((uint64_t)__p);
                }
                sub_223182C08((uint64_t)__p);
                v121 = v335;
                if (v335)
                {
                  v122 = (unint64_t *)&v335->__shared_owners_;
                  do
                    v123 = __ldaxr(v122);
                  while (__stlxr(v123 - 1, v122));
                  if (!v123)
                  {
                    ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                    std::__shared_weak_count::__release_weak(v121);
                  }
                }
LABEL_197:
                memset(&v341, 0, sizeof(v341));
                v124 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
                if ((v124 & 0x80u) == 0)
                  v125 = __s;
                else
                  v125 = (std::string *)__s->__r_.__value_.__r.__words[0];
                if ((v124 & 0x80u) != 0)
                  v124 = __s->__r_.__value_.__l.__size_;
                sub_2231816F0(&v341, v125, (std::string *)((char *)v125 + v124));
                v126 = sub_223FF2CF0((uint64_t)&v341, a3);
                v127 = v126;
                if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v341.__r_.__value_.__l.__data_);
                  if (!v127)
                    return;
                }
                else if (!v126)
                {
                  return;
                }
                goto LABEL_284;
              }
            }
            memcpy(p_dst, v31, v40);
            goto LABEL_109;
          }
        }
        memmove(v30, v16, v17);
        goto LABEL_51;
      }
    }
    memmove(p_size, v25, v26);
    goto LABEL_43;
  }
  sub_223FF2BFC(v347);
  if (**(int **)(v347[0] + 56) > 3)
    goto LABEL_261;
  v18 = *(unsigned __int8 *)(v347[0] + 72);
  v19 = sub_22322F254(v347[0], "OSLogSurrogateAppender", 1, 0);
  if (!v18 && !v19)
    goto LABEL_261;
  v325 = v19;
  v322 = v18;
  __p[0] = v347;
  __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v330 = 3;
  v331 = "unknown file";
  v332 = 133;
  v334 = 0;
  v335 = 0;
  v333 = "unknown function";
  if ((__s->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = (const char *)__s;
  else
    v20 = (const char *)__s->__r_.__value_.__r.__words[0];
  v21 = *(_QWORD *)__p[0];
  v22 = (const char *)(*(_QWORD *)__p[0] + 16);
  v320 = *(_QWORD *)__p[0];
  v318 = v22;
  if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
  {
    v22 = *(const char **)(v21 + 16);
    v23 = *(_QWORD *)(v21 + 24);
  }
  else
  {
    v23 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
  }
  v44 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&v341);
    sub_223199C58("com.apple.cv3d", (unint64_t)&v341, &xmmword_255788F40);
    if ((_BYTE)v342 && SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v341.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v45 = (const char *)&xmmword_255788F40;
  else
    v45 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v46 = byte_255788F57;
  else
    v46 = *((_QWORD *)&xmmword_255788F40 + 1);
  v341.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v45, v22);
  v47 = &v341.__r_.__value_.__l.__size_;
  if (v46 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v46 >= 0x17)
  {
    v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17)
      v48 = v46 | 7;
    v49 = v48 + 1;
    v47 = (std::string::size_type *)operator new(v48 + 1);
    v341.__r_.__value_.__r.__words[2] = v46;
    *(_QWORD *)&v342 = v49 | 0x8000000000000000;
    v341.__r_.__value_.__l.__size_ = (std::string::size_type)v47;
    goto LABEL_81;
  }
  BYTE7(v342) = v46;
  if (v46)
LABEL_81:
    memmove(v47, v45, v46);
  *((_BYTE *)v47 + v46) = 0;
  BYTE8(v342) = 1;
  v50 = (char *)&v343;
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v51 = v20;
  if (v23 >= 0x17)
  {
    v53 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v53 = v23 | 7;
    v54 = v53 + 1;
    v52 = v325;
    v50 = (char *)operator new(v53 + 1);
    v344 = v23;
    v345 = v54 | 0x8000000000000000;
    v343 = v50;
    goto LABEL_89;
  }
  HIBYTE(v345) = v23;
  v52 = v325;
  if (v23)
LABEL_89:
    memmove(v50, v22, v23);
  v50[v23] = 0;
  v346 = 1;
  v55 = v341.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v345) < 0)
    operator delete(v343);
  if (BYTE8(v342) && SBYTE7(v342) < 0)
    operator delete((void *)v341.__r_.__value_.__l.__size_);
  if (v341.__r_.__value_.__r.__words[0])
    os_release(v341.__r_.__value_.__l.__data_);
  if (!v52 || !*(_QWORD *)(v52 + 24))
  {
    os_log_type_enabled(v55, OS_LOG_TYPE_INFO);
    LODWORD(v341.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v341.__r_.__value_.__r.__words + 4) = (std::string::size_type)v51;
    v62 = (void *)_os_log_send_and_compose_impl();
    v63 = v322;
    if (v62)
      free(v62);
    goto LABEL_251;
  }
  v56 = _os_log_pack_size();
  v57 = operator new(v56, (std::align_val_t)8uLL);
  v58 = (_QWORD *)operator new();
  *v58 = &off_24EC1F7F0;
  v58[1] = 0;
  v58[2] = 0;
  v58[3] = v57;
  v336.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
  v336.__r_.__value_.__l.__size_ = (std::string::size_type)v57;
  v337 = 0uLL;
  v336.__r_.__value_.__r.__words[2] = (std::string::size_type)v58;
  v59 = strlen(v51);
  if (v59 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v60 = v59;
  if (v59 >= 0x17)
  {
    v78 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v59 | 7) != 0x17)
      v78 = v59 | 7;
    v79 = v78 + 1;
    v61 = operator new(v78 + 1);
    *(_QWORD *)&v339 = v60;
    *((_QWORD *)&v339 + 1) = v79 | 0x8000000000000000;
    __dst = v61;
    goto LABEL_127;
  }
  HIBYTE(v339) = v59;
  v61 = &__dst;
  if (v59)
LABEL_127:
    memcpy(v61, v51, v60);
  *((_BYTE *)v61 + v60) = 0;
  v80 = __dst;
  *(_QWORD *)&v340 = v339;
  *(_QWORD *)((char *)&v340 + 7) = *(_QWORD *)((char *)&v339 + 7);
  v81 = HIBYTE(v339);
  v82 = operator new(0x38uLL);
  v82[1] = 0;
  v82[2] = 0;
  v82[3] = off_24EC1FA48;
  *v82 = &off_24EC1F9F8;
  v83 = v340;
  v82[4] = v80;
  v82[5] = v83;
  *(_QWORD *)((char *)v82 + 47) = *(_QWORD *)((char *)&v340 + 7);
  *((_BYTE *)v82 + 55) = v81;
  *(_QWORD *)&v340 = 0;
  *(_QWORD *)((char *)&v340 + 7) = 0;
  v84 = (std::__shared_weak_count *)*((_QWORD *)&v337 + 1);
  *(_QWORD *)&v337 = v82 + 3;
  *((_QWORD *)&v337 + 1) = v82;
  if (v84)
  {
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v341 = v336;
  if (v336.__r_.__value_.__r.__words[2])
  {
    v87 = (unint64_t *)(v336.__r_.__value_.__r.__words[2] + 8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
  }
  v342 = v337;
  if (*((_QWORD *)&v337 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v337 + 1) + 8);
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 1, v89));
    v343 = (char *)v337;
    do
      v91 = __ldaxr(v89);
    while (__stlxr(v91 - 1, v89));
    if (!v91)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v337 + 1) + 16))(*((_QWORD *)&v337 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v337 + 1));
    }
  }
  else
  {
    v343 = (char *)v337;
  }
  if (v336.__r_.__value_.__r.__words[2])
  {
    v128 = (unint64_t *)(v336.__r_.__value_.__r.__words[2] + 8);
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)v336.__r_.__value_.__r.__words[2] + 16))(v336.__r_.__value_.__r.__words[2]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v336.__r_.__value_.__r.__words[2]);
    }
  }
  v130 = v341.__r_.__value_.__r.__words[0];
  if (v343[31] >= 0)
    v131 = v343 + 8;
  else
    v131 = (char *)*((_QWORD *)v343 + 1);
  v132 = _os_log_pack_fill();
  *(_DWORD *)v132 = 136315138;
  *(_QWORD *)(v132 + 4) = v131;
  v133 = operator new();
  v134 = *(unsigned __int8 *)(v320 + 39);
  v135 = v318;
  if ((v134 & 0x80u) != 0)
  {
    v135 = *(const char **)(v320 + 16);
    v134 = *(_QWORD *)(v320 + 24);
  }
  *(_QWORD *)v133 = v130;
  *(_OWORD *)(v133 + 8) = *(_OWORD *)&v341.__r_.__value_.__r.__words[1];
  *(_OWORD *)&v341.__r_.__value_.__r.__words[1] = 0uLL;
  *(_OWORD *)(v133 + 24) = v342;
  v342 = 0uLL;
  *(_QWORD *)(v133 + 40) = v135;
  *(_QWORD *)(v133 + 48) = v134;
  *(_BYTE *)(v133 + 56) = 1;
  __dst = 0;
  v336.__r_.__value_.__r.__words[0] = v133;
  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v52 + 24) + 40))(*(_QWORD *)(v52 + 24), &v336);
  v63 = v322;
  v136 = v336.__r_.__value_.__r.__words[0];
  v336.__r_.__value_.__r.__words[0] = 0;
  if (v136)
  {
    v137 = *(std::__shared_weak_count **)(v136 + 32);
    if (v137)
    {
      v138 = (unint64_t *)&v137->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
    v140 = *(std::__shared_weak_count **)(v136 + 16);
    if (v140)
    {
      v141 = (unint64_t *)&v140->__shared_owners_;
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    MEMORY[0x227684CE8](v136, 0x10F0C40B62ED6C6);
    v143 = __dst;
    __dst = 0;
    if (v143)
    {
      v144 = (std::__shared_weak_count *)v143[4];
      if (v144)
      {
        v145 = (unint64_t *)&v144->__shared_owners_;
        do
          v146 = __ldaxr(v145);
        while (__stlxr(v146 - 1, v145));
        if (!v146)
        {
          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
          std::__shared_weak_count::__release_weak(v144);
        }
      }
      v147 = (std::__shared_weak_count *)v143[2];
      if (v147)
      {
        v148 = (unint64_t *)&v147->__shared_owners_;
        do
          v149 = __ldaxr(v148);
        while (__stlxr(v149 - 1, v148));
        if (!v149)
        {
          ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
          std::__shared_weak_count::__release_weak(v147);
        }
      }
      MEMORY[0x227684CE8](v143, 0x10F0C40B62ED6C6);
    }
  }
  v150 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
  if (*((_QWORD *)&v342 + 1))
  {
    v151 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = (std::__shared_weak_count *)v341.__r_.__value_.__r.__words[2];
  if (v341.__r_.__value_.__r.__words[2])
  {
    v154 = (unint64_t *)(v341.__r_.__value_.__r.__words[2] + 8);
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
LABEL_251:
  if (v63)
  {
    if ((__s->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v156 = (const char *)__s;
    else
      v156 = (const char *)__s->__r_.__value_.__r.__words[0];
    sub_22322C138((uint64_t)__p, "Connecting to VisualLogger server %s", v156);
    sub_223182C08((uint64_t)__p);
  }
  sub_223182C08((uint64_t)__p);
  v157 = v335;
  if (v335)
  {
    v158 = (unint64_t *)&v335->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
LABEL_261:
  v160 = SHIBYTE(__s->__r_.__value_.__r.__words[2]);
  if (v160 >= 0)
    v161 = (char *)__s;
  else
    v161 = (char *)__s->__r_.__value_.__r.__words[0];
  if (v160 >= 0)
    v162 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  else
    v162 = __s->__r_.__value_.__l.__size_;
  sub_2231AD150(v161, v162, ":", 1, 0, (uint64_t)&v341);
  v163 = (std::string *)v341.__r_.__value_.__r.__words[0];
  if (v341.__r_.__value_.__l.__size_ - v341.__r_.__value_.__r.__words[0] == 48)
  {
    if (*(char *)(v341.__r_.__value_.__r.__words[0] + 23) < 0)
    {
      sub_223197FA4(__p, *(void **)v341.__r_.__value_.__l.__data_, *(_QWORD *)(v341.__r_.__value_.__r.__words[0] + 8));
      v163 = (std::string *)v341.__r_.__value_.__r.__words[0];
    }
    else
    {
      v164 = *(_OWORD *)v341.__r_.__value_.__l.__data_;
      rep = *(_QWORD *)(v341.__r_.__value_.__r.__words[0] + 16);
      *(_OWORD *)__p = v164;
    }
    v167 = std::stoi(v163 + 1, 0, 10);
    v165 = sub_223FF1D60((char *)__p, v167, a4);
    if (SHIBYTE(rep) < 0)
      operator delete(__p[0]);
    v163 = (std::string *)v341.__r_.__value_.__r.__words[0];
    if (!v341.__r_.__value_.__r.__words[0])
    {
LABEL_283:
      if ((v165 & 1) == 0)
        return;
      goto LABEL_284;
    }
  }
  else
  {
    v165 = 0;
    if (!v341.__r_.__value_.__r.__words[0])
      goto LABEL_283;
  }
  v166 = v341.__r_.__value_.__l.__size_;
  if ((std::string *)v341.__r_.__value_.__l.__size_ == v163)
  {
    v341.__r_.__value_.__l.__size_ = (std::string::size_type)v163;
    operator delete(v163);
    if ((v165 & 1) == 0)
      return;
  }
  else
  {
    do
    {
      if (*(char *)(v166 - 1) < 0)
        operator delete(*(void **)(v166 - 24));
      v166 -= 24;
    }
    while ((std::string *)v166 != v163);
    v341.__r_.__value_.__l.__size_ = (std::string::size_type)v163;
    operator delete(v341.__r_.__value_.__l.__data_);
    if ((v165 & 1) == 0)
      return;
  }
LABEL_284:
  v168 = *(char *)(a2 + 23);
  if (v168 >= 0)
    v169 = (char *)a2;
  else
    v169 = *(char **)a2;
  if (v168 >= 0)
    v170 = *(unsigned __int8 *)(a2 + 23);
  else
    v170 = *(_QWORD *)(a2 + 8);
  sub_2231AD150(v169, v170, ",", 1, 0, (uint64_t)&v340);
  v171 = (uint64_t *)*((_QWORD *)&v340 + 1);
  v172 = (const char *)v340;
  if ((_QWORD)v340 != *((_QWORD *)&v340 + 1))
  {
    v316 = (uint64_t *)*((_QWORD *)&v340 + 1);
    while (1)
    {
      sub_223FF2BFC(&v327);
      if (**(int **)(v327 + 56) <= 3)
      {
        v173 = *(unsigned __int8 *)(v327 + 72);
        v174 = sub_22322F254(v327, "OSLogSurrogateAppender", 1, 0);
        v175 = v174;
        if (v173 || v174 != 0)
          break;
      }
LABEL_412:
      v250 = sub_2241471F8();
      if (v172[23] < 0)
      {
        v252 = *(uint64_t **)v172;
        v251 = *((_QWORD *)v172 + 1);
      }
      else
      {
        v251 = *((unsigned __int8 *)v172 + 23);
        v252 = (uint64_t *)v172;
      }
      v253 = (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v250[1] + 48))(v250 + 1, v252, v251);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v253 + 40))(v253, 1);
      v172 += 24;
      if (v172 == (const char *)v171)
        goto LABEL_518;
    }
    __p[0] = &v327;
    __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v330 = 3;
    v331 = "unknown file";
    v332 = 156;
    v333 = "unknown function";
    v334 = 0;
    v335 = 0;
    v177 = v172;
    if (v172[23] < 0)
    {
      v177 = *(const char **)v172;
      v178 = *(_QWORD *)__p[0];
      v179 = *(_QWORD *)__p[0] + 16;
      v180 = *(char *)(*(_QWORD *)__p[0] + 39);
      v323 = *(_QWORD *)__p[0];
      if ((v180 & 0x80000000) == 0)
      {
LABEL_299:
        v181 = v180;
        v182 = (const char *)v179;
        v326 = v179;
        v183 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v183 & 1) != 0)
          goto LABEL_303;
LABEL_421:
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)&v336);
          sub_223199C58("com.apple.cv3d", (unint64_t)&v336, &xmmword_255788F40);
          if ((_BYTE)v337 && SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v336.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
LABEL_303:
        if (byte_255788F57 >= 0)
          v185 = (const char *)&xmmword_255788F40;
        else
          v185 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v186 = byte_255788F57;
        else
          v186 = *((_QWORD *)&xmmword_255788F40 + 1);
        v341.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v185, v182);
        if (v186 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v186 >= 0x17)
        {
          v188 = (v186 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v186 | 7) != 0x17)
            v188 = v186 | 7;
          v189 = v188 + 1;
          v187 = (std::string::size_type *)operator new(v188 + 1);
          v341.__r_.__value_.__r.__words[2] = v186;
          *(_QWORD *)&v342 = v189 | 0x8000000000000000;
          v341.__r_.__value_.__l.__size_ = (std::string::size_type)v187;
        }
        else
        {
          BYTE7(v342) = v186;
          v187 = &v341.__r_.__value_.__l.__size_;
          if (!v186)
          {
LABEL_317:
            *((_BYTE *)v187 + v186) = 0;
            BYTE8(v342) = 1;
            if (v181 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v181 >= 0x17)
            {
              v192 = (v181 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v181 | 7) != 0x17)
                v192 = v181 | 7;
              v193 = v192 + 1;
              v190 = (char *)operator new(v192 + 1);
              v344 = v181;
              v345 = v193 | 0x8000000000000000;
              v343 = v190;
            }
            else
            {
              HIBYTE(v345) = v181;
              v190 = (char *)&v343;
              if (!v181)
              {
                LOBYTE(v343) = 0;
                v346 = 1;
                v191 = v341.__r_.__value_.__r.__words[0];
                if ((SHIBYTE(v345) & 0x80000000) == 0)
                  goto LABEL_321;
                goto LABEL_327;
              }
            }
            memmove(v190, v182, v181);
            v190[v181] = 0;
            v346 = 1;
            v191 = v341.__r_.__value_.__r.__words[0];
            if ((SHIBYTE(v345) & 0x80000000) == 0)
            {
LABEL_321:
              if (!BYTE8(v342))
                goto LABEL_330;
              goto LABEL_328;
            }
LABEL_327:
            operator delete(v343);
            if (!BYTE8(v342))
              goto LABEL_330;
LABEL_328:
            if (SBYTE7(v342) < 0)
              operator delete((void *)v341.__r_.__value_.__l.__size_);
LABEL_330:
            if (v341.__r_.__value_.__r.__words[0])
              os_release(v341.__r_.__value_.__l.__data_);
            if (!v175 || !*(_QWORD *)(v175 + 24))
            {
              os_log_type_enabled(v191, OS_LOG_TYPE_INFO);
              LODWORD(v341.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v341.__r_.__value_.__r.__words + 4) = (std::string::size_type)v177;
              v200 = (void *)_os_log_send_and_compose_impl();
              if (v200)
              {
                free(v200);
                if (v173)
                {
LABEL_403:
                  v246 = v172;
                  if (v172[23] < 0)
                    v246 = *(const char **)v172;
                  sub_22322C138((uint64_t)__p, "Enabling logging context: %s", v246);
                  sub_223182C08((uint64_t)__p);
                }
LABEL_406:
                sub_223182C08((uint64_t)__p);
                v247 = v335;
                if (v335)
                {
                  v248 = (unint64_t *)&v335->__shared_owners_;
                  do
                    v249 = __ldaxr(v248);
                  while (__stlxr(v249 - 1, v248));
                  if (!v249)
                  {
                    ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                    std::__shared_weak_count::__release_weak(v247);
                  }
                }
                v171 = v316;
                goto LABEL_412;
              }
              goto LABEL_402;
            }
            v194 = _os_log_pack_size();
            v195 = operator new(v194, (std::align_val_t)8uLL);
            v196 = (_QWORD *)operator new();
            *v196 = &off_24EC1F7F0;
            v196[1] = 0;
            v196[2] = 0;
            v196[3] = v195;
            v336.__r_.__value_.__r.__words[0] = (std::string::size_type)v195;
            v336.__r_.__value_.__l.__size_ = (std::string::size_type)v195;
            v336.__r_.__value_.__r.__words[2] = (std::string::size_type)v196;
            v337 = 0uLL;
            v197 = strlen(v177);
            if (v197 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v198 = v197;
            if (v197 >= 0x17)
            {
              v201 = (v197 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v197 | 7) != 0x17)
                v201 = v197 | 7;
              v202 = v201 + 1;
              v199 = operator new(v201 + 1);
              *(_QWORD *)&v339 = v198;
              *((_QWORD *)&v339 + 1) = v202 | 0x8000000000000000;
              __dst = v199;
            }
            else
            {
              HIBYTE(v339) = v197;
              v199 = &__dst;
              if (!v197)
                goto LABEL_345;
            }
            memcpy(v199, v177, v198);
LABEL_345:
            *((_BYTE *)v199 + v198) = 0;
            v203 = __dst;
            v347[0] = v339;
            *(uint64_t *)((char *)v347 + 7) = *(_QWORD *)((char *)&v339 + 7);
            v204 = HIBYTE(v339);
            v205 = operator new(0x38uLL);
            v205[1] = 0;
            v205[2] = 0;
            v205[3] = off_24EC1FA48;
            *v205 = &off_24EC1F9F8;
            v206 = v347[0];
            v205[4] = v203;
            v205[5] = v206;
            *(_QWORD *)((char *)v205 + 47) = *(uint64_t *)((char *)v347 + 7);
            *((_BYTE *)v205 + 55) = v204;
            memset(v347, 0, 15);
            v207 = (std::__shared_weak_count *)*((_QWORD *)&v337 + 1);
            *(_QWORD *)&v337 = v205 + 3;
            *((_QWORD *)&v337 + 1) = v205;
            if (v207)
            {
              v208 = (unint64_t *)&v207->__shared_owners_;
              do
                v209 = __ldaxr(v208);
              while (__stlxr(v209 - 1, v208));
              if (!v209)
              {
                ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                std::__shared_weak_count::__release_weak(v207);
              }
            }
            v341 = v336;
            v210 = (char *)v337;
            if (v336.__r_.__value_.__r.__words[2])
            {
              v211 = (unint64_t *)(v336.__r_.__value_.__r.__words[2] + 8);
              do
                v212 = __ldxr(v211);
              while (__stxr(v212 + 1, v211));
            }
            v213 = (std::__shared_weak_count *)*((_QWORD *)&v337 + 1);
            *(_QWORD *)&v342 = v210;
            *((_QWORD *)&v342 + 1) = *((_QWORD *)&v337 + 1);
            if (*((_QWORD *)&v337 + 1))
            {
              v214 = (unint64_t *)(*((_QWORD *)&v337 + 1) + 8);
              do
                v215 = __ldxr(v214);
              while (__stxr(v215 + 1, v214));
              v343 = v210;
              do
                v216 = __ldaxr(v214);
              while (__stlxr(v216 - 1, v214));
              if (!v216)
              {
                ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                std::__shared_weak_count::__release_weak(v213);
              }
            }
            else
            {
              v343 = v210;
            }
            v217 = (std::__shared_weak_count *)v336.__r_.__value_.__r.__words[2];
            if (v336.__r_.__value_.__r.__words[2])
            {
              v218 = (unint64_t *)(v336.__r_.__value_.__r.__words[2] + 8);
              do
                v219 = __ldaxr(v218);
              while (__stlxr(v219 - 1, v218));
              if (!v219)
              {
                ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                std::__shared_weak_count::__release_weak(v217);
              }
            }
            v220 = v341.__r_.__value_.__r.__words[0];
            if (v343[31] >= 0)
              v221 = v343 + 8;
            else
              v221 = (char *)*((_QWORD *)v343 + 1);
            v222 = _os_log_pack_fill();
            *(_DWORD *)v222 = 136315138;
            *(_QWORD *)(v222 + 4) = v221;
            v223 = operator new();
            v224 = *(unsigned __int8 *)(v323 + 39);
            v225 = v326;
            if ((v224 & 0x80u) != 0)
            {
              v225 = *(_QWORD *)(v323 + 16);
              v224 = *(_QWORD *)(v323 + 24);
            }
            *(_QWORD *)v223 = v220;
            *(_OWORD *)(v223 + 8) = *(_OWORD *)&v341.__r_.__value_.__r.__words[1];
            *(_OWORD *)&v341.__r_.__value_.__r.__words[1] = 0uLL;
            *(_OWORD *)(v223 + 24) = v342;
            v342 = 0uLL;
            *(_QWORD *)(v223 + 40) = v225;
            *(_QWORD *)(v223 + 48) = v224;
            *(_BYTE *)(v223 + 56) = 1;
            __dst = 0;
            v336.__r_.__value_.__r.__words[0] = v223;
            (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v175 + 24) + 40))(*(_QWORD *)(v175 + 24), &v336);
            v226 = v336.__r_.__value_.__r.__words[0];
            v336.__r_.__value_.__r.__words[0] = 0;
            if (v226)
            {
              v227 = *(std::__shared_weak_count **)(v226 + 32);
              if (v227)
              {
                v228 = (unint64_t *)&v227->__shared_owners_;
                do
                  v229 = __ldaxr(v228);
                while (__stlxr(v229 - 1, v228));
                if (!v229)
                {
                  ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                  std::__shared_weak_count::__release_weak(v227);
                }
              }
              v230 = *(std::__shared_weak_count **)(v226 + 16);
              if (v230)
              {
                v231 = (unint64_t *)&v230->__shared_owners_;
                do
                  v232 = __ldaxr(v231);
                while (__stlxr(v232 - 1, v231));
                if (!v232)
                {
                  ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                  std::__shared_weak_count::__release_weak(v230);
                }
              }
              MEMORY[0x227684CE8](v226, 0x10F0C40B62ED6C6);
              v233 = __dst;
              __dst = 0;
              if (v233)
              {
                v234 = (std::__shared_weak_count *)v233[4];
                if (v234)
                {
                  v235 = (unint64_t *)&v234->__shared_owners_;
                  do
                    v236 = __ldaxr(v235);
                  while (__stlxr(v236 - 1, v235));
                  if (!v236)
                  {
                    ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                    std::__shared_weak_count::__release_weak(v234);
                  }
                }
                v237 = (std::__shared_weak_count *)v233[2];
                if (v237)
                {
                  v238 = (unint64_t *)&v237->__shared_owners_;
                  do
                    v239 = __ldaxr(v238);
                  while (__stlxr(v239 - 1, v238));
                  if (!v239)
                  {
                    ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                    std::__shared_weak_count::__release_weak(v237);
                  }
                }
                MEMORY[0x227684CE8](v233, 0x10F0C40B62ED6C6);
              }
            }
            v240 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
            if (!*((_QWORD *)&v342 + 1))
              goto LABEL_398;
            v241 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
            do
              v242 = __ldaxr(v241);
            while (__stlxr(v242 - 1, v241));
            if (!v242)
            {
              ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
              std::__shared_weak_count::__release_weak(v240);
              v243 = (std::__shared_weak_count *)v341.__r_.__value_.__r.__words[2];
              if (v341.__r_.__value_.__r.__words[2])
                goto LABEL_399;
            }
            else
            {
LABEL_398:
              v243 = (std::__shared_weak_count *)v341.__r_.__value_.__r.__words[2];
              if (v341.__r_.__value_.__r.__words[2])
              {
LABEL_399:
                v244 = (unint64_t *)&v243->__shared_owners_;
                do
                  v245 = __ldaxr(v244);
                while (__stlxr(v245 - 1, v244));
                if (!v245)
                {
                  ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                  std::__shared_weak_count::__release_weak(v243);
                  if (v173)
                    goto LABEL_403;
                  goto LABEL_406;
                }
              }
            }
LABEL_402:
            if (v173)
              goto LABEL_403;
            goto LABEL_406;
          }
        }
        memmove(v187, v185, v186);
        goto LABEL_317;
      }
    }
    else
    {
      v178 = *(_QWORD *)__p[0];
      v179 = *(_QWORD *)__p[0] + 16;
      v180 = *(char *)(*(_QWORD *)__p[0] + 39);
      v323 = *(_QWORD *)__p[0];
      if ((v180 & 0x80000000) == 0)
        goto LABEL_299;
    }
    v182 = *(const char **)(v178 + 16);
    v181 = *(_QWORD *)(v178 + 24);
    v326 = v179;
    v184 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v184 & 1) != 0)
      goto LABEL_303;
    goto LABEL_421;
  }
  sub_223FF2BFC(v347);
  if (**(int **)(v347[0] + 56) > 3)
    goto LABEL_517;
  v254 = *(unsigned __int8 *)(v347[0] + 72);
  v255 = sub_22322F254(v347[0], "OSLogSurrogateAppender", 1, 0);
  v256 = v255;
  if (!v254 && !v255)
    goto LABEL_517;
  __p[0] = v347;
  __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v330 = 3;
  v331 = "unknown file";
  v332 = 151;
  v334 = 0;
  v335 = 0;
  v333 = "unknown function";
  v257 = *(_QWORD *)__p[0];
  v258 = *(_QWORD *)__p[0] + 16;
  if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
  {
    v260 = *(const char **)(v257 + 16);
    v259 = *(_QWORD *)(v257 + 24);
  }
  else
  {
    v259 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
    v260 = (const char *)(*(_QWORD *)__p[0] + 16);
  }
  v261 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v261 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&v341);
    sub_223199C58("com.apple.cv3d", (unint64_t)&v341, &xmmword_255788F40);
    if ((_BYTE)v342 && SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v341.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v262 = (const char *)&xmmword_255788F40;
  else
    v262 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v263 = byte_255788F57;
  else
    v263 = *((_QWORD *)&xmmword_255788F40 + 1);
  v341.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v262, v260);
  v264 = &v341.__r_.__value_.__l.__size_;
  if (v263 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v263 >= 0x17)
  {
    v265 = v256;
    v266 = v260;
    v267 = v257;
    v268 = v254;
    v269 = v258;
    v270 = (v263 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v263 | 7) != 0x17)
      v270 = v263 | 7;
    v271 = v270 + 1;
    v264 = (std::string::size_type *)operator new(v270 + 1);
    v341.__r_.__value_.__r.__words[2] = v263;
    *(_QWORD *)&v342 = v271 | 0x8000000000000000;
    v341.__r_.__value_.__l.__size_ = (std::string::size_type)v264;
    v258 = v269;
    v254 = v268;
    v257 = v267;
    v260 = v266;
    v256 = v265;
    goto LABEL_446;
  }
  BYTE7(v342) = v263;
  if (v263)
LABEL_446:
    memmove(v264, v262, v263);
  *((_BYTE *)v264 + v263) = 0;
  BYTE8(v342) = 1;
  v272 = (char *)&v343;
  if (v259 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v259 >= 0x17)
  {
    v273 = (v259 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v259 | 7) != 0x17)
      v273 = v259 | 7;
    v274 = v273 + 1;
    v272 = (char *)operator new(v273 + 1);
    v344 = v259;
    v345 = v274 | 0x8000000000000000;
    v343 = v272;
  }
  else
  {
    HIBYTE(v345) = v259;
    if (!v259)
      goto LABEL_455;
  }
  memmove(v272, v260, v259);
LABEL_455:
  v272[v259] = 0;
  v346 = 1;
  v275 = v341.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v345) < 0)
    operator delete(v343);
  if (BYTE8(v342) && SBYTE7(v342) < 0)
    operator delete((void *)v341.__r_.__value_.__l.__size_);
  if (v341.__r_.__value_.__r.__words[0])
    os_release(v341.__r_.__value_.__l.__data_);
  if (v256 && *(_QWORD *)(v256 + 24))
  {
    v276 = _os_log_pack_size();
    v277 = (std::__shared_weak_count_vtbl *)operator new(v276, (std::align_val_t)8uLL);
    v278 = (std::__shared_weak_count *)operator new();
    v279 = v278;
    v278->__shared_owners_ = 0;
    v280 = (unint64_t *)&v278->__shared_owners_;
    v278->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v278->__shared_weak_owners_ = 0;
    v278[1].__vftable = v277;
    v341.__r_.__value_.__r.__words[0] = (std::string::size_type)v277;
    v341.__r_.__value_.__l.__size_ = (std::string::size_type)v277;
    v341.__r_.__value_.__r.__words[2] = (std::string::size_type)v278;
    do
      v281 = __ldxr(v280);
    while (__stxr(v281 + 1, v280));
    v342 = 0uLL;
    v343 = 0;
    do
      v282 = __ldaxr(v280);
    while (__stlxr(v282 - 1, v280));
    if (!v282)
    {
      ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
      std::__shared_weak_count::__release_weak(v279);
    }
    v283 = v341.__r_.__value_.__r.__words[0];
    *(_WORD *)_os_log_pack_fill() = 0;
    v284 = operator new();
    v285 = *(unsigned __int8 *)(v257 + 39);
    if ((v285 & 0x80u) == 0)
      v286 = v258;
    else
      v286 = *(_QWORD *)(v257 + 16);
    if ((v285 & 0x80u) != 0)
      v285 = *(_QWORD *)(v257 + 24);
    *(_QWORD *)v284 = v283;
    *(_OWORD *)(v284 + 8) = *(_OWORD *)&v341.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v341.__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)(v284 + 24) = v342;
    v342 = 0uLL;
    *(_QWORD *)(v284 + 40) = v286;
    *(_QWORD *)(v284 + 48) = v285;
    *(_BYTE *)(v284 + 56) = 1;
    __dst = 0;
    v336.__r_.__value_.__r.__words[0] = v284;
    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v256 + 24) + 40))(*(_QWORD *)(v256 + 24), &v336);
    v287 = v336.__r_.__value_.__r.__words[0];
    v336.__r_.__value_.__r.__words[0] = 0;
    if (v287)
    {
      v288 = *(std::__shared_weak_count **)(v287 + 32);
      if (v288)
      {
        v289 = (unint64_t *)&v288->__shared_owners_;
        do
          v290 = __ldaxr(v289);
        while (__stlxr(v290 - 1, v289));
        if (!v290)
        {
          ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
          std::__shared_weak_count::__release_weak(v288);
        }
      }
      v291 = *(std::__shared_weak_count **)(v287 + 16);
      if (v291)
      {
        v292 = (unint64_t *)&v291->__shared_owners_;
        do
          v293 = __ldaxr(v292);
        while (__stlxr(v293 - 1, v292));
        if (!v293)
        {
          ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
          std::__shared_weak_count::__release_weak(v291);
        }
      }
      MEMORY[0x227684CE8](v287, 0x10F0C40B62ED6C6);
      v294 = __dst;
      __dst = 0;
      if (v294)
      {
        v295 = (std::__shared_weak_count *)v294[4];
        if (v295)
        {
          v296 = (unint64_t *)&v295->__shared_owners_;
          do
            v297 = __ldaxr(v296);
          while (__stlxr(v297 - 1, v296));
          if (!v297)
          {
            ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
            std::__shared_weak_count::__release_weak(v295);
          }
        }
        v298 = (std::__shared_weak_count *)v294[2];
        if (v298)
        {
          v299 = (unint64_t *)&v298->__shared_owners_;
          do
            v300 = __ldaxr(v299);
          while (__stlxr(v300 - 1, v299));
          if (!v300)
          {
            ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
            std::__shared_weak_count::__release_weak(v298);
          }
        }
        MEMORY[0x227684CE8](v294, 0x10F0C40B62ED6C6);
      }
    }
    v301 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
    if (*((_QWORD *)&v342 + 1))
    {
      v302 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
      do
        v303 = __ldaxr(v302);
      while (__stlxr(v303 - 1, v302));
      if (!v303)
      {
        ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
        std::__shared_weak_count::__release_weak(v301);
      }
    }
    v304 = (std::__shared_weak_count *)v341.__r_.__value_.__r.__words[2];
    if (v341.__r_.__value_.__r.__words[2])
    {
      v305 = (unint64_t *)(v341.__r_.__value_.__r.__words[2] + 8);
      do
        v306 = __ldaxr(v305);
      while (__stlxr(v306 - 1, v305));
      if (!v306)
      {
        ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
        std::__shared_weak_count::__release_weak(v304);
      }
    }
  }
  else
  {
    os_log_type_enabled(v275, OS_LOG_TYPE_INFO);
    LOWORD(v341.__r_.__value_.__l.__data_) = 0;
    v307 = (void *)_os_log_send_and_compose_impl();
    if (v307)
      free(v307);
  }
  if (v254)
  {
    sub_22322C138((uint64_t)__p, "Enabling root logging context");
    sub_223182C08((uint64_t)__p);
  }
  sub_223182C08((uint64_t)__p);
  v308 = v335;
  if (v335)
  {
    v309 = (unint64_t *)&v335->__shared_owners_;
    do
      v310 = __ldaxr(v309);
    while (__stlxr(v310 - 1, v309));
    if (!v310)
    {
      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
      std::__shared_weak_count::__release_weak(v308);
    }
  }
LABEL_517:
  v311 = sub_2241471F8();
  v312 = (*(uint64_t (**)(uint64_t *, const char *, _QWORD))(v311[1] + 48))(v311 + 1, "", 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v312 + 40))(v312, 1);
LABEL_518:
  v313 = v340;
  if ((_QWORD)v340)
  {
    v314 = *((_QWORD *)&v340 + 1);
    v315 = (void *)v340;
    if (*((_QWORD *)&v340 + 1) != (_QWORD)v340)
    {
      do
      {
        if (*(char *)(v314 - 1) < 0)
          operator delete(*(void **)(v314 - 24));
        v314 -= 24;
      }
      while (v314 != v313);
      v315 = (void *)v340;
    }
    *((_QWORD *)&v340 + 1) = v313;
    operator delete(v315);
  }
}

void sub_223FF6188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  if (*(_BYTE *)(v17 - 168))
  {
    if (*(char *)(v17 - 169) < 0)
      operator delete(*(void **)(v17 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  sub_22319BB48((void **)(v17 - 216));
  _Unwind_Resume(a1);
}

void sub_223FF6238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  sub_22319A054(&a35);
  sub_22319A054((uint64_t *)(v35 - 240));
  sub_223199DE8(v35 - 192);
  sub_223182DAC((uint64_t)&a25);
  sub_22319BB48((void **)(v35 - 216));
  _Unwind_Resume(a1);
}

void sub_223FF6274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v39;

  MEMORY[0x227684CE8](v38, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)&__p);
  sub_22319BB48((void **)(v39 - 216));
  _Unwind_Resume(a1);
}

void sub_223FF65B8()
{
  uint64_t v0;
  void *v1;

  if (*(char *)(v0 - 161) < 0)
    operator delete(*(void **)(v0 - 184));
  v1 = *(void **)(v0 - 192);
  if (v1)
    os_release(v1);
  JUMPOUT(0x223FF6628);
}

void sub_223FF6624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_223182DAC((uint64_t)va);
  sub_22319BB48((void **)(v17 - 216));
  _Unwind_Resume(a1);
}

void sub_223FF6640(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319BB48((void **)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_223FF6654(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319BB48((void **)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_223FF6668()
{
  uint64_t v0;

  sub_22319BB48((void **)(v0 - 216));
  JUMPOUT(0x223FF6674);
}

void sub_223FF667C()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  char *v12;
  uint64_t v13;

  v0 = atomic_load((unsigned __int8 *)&qword_255795118);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255795118))
  {
    v1 = qword_255795100;
    v2 = unk_255795108;
    if (qword_255795100 == unk_255795108)
      goto LABEL_5;
  }
  else
  {
    __cxa_atexit((void (*)(void *))sub_223FF976C, &qword_255795100, &dword_22314D000);
    __cxa_guard_release(&qword_255795118);
    v1 = qword_255795100;
    v2 = unk_255795108;
    if (qword_255795100 == unk_255795108)
      goto LABEL_5;
  }
  do
  {
    v3 = *(_QWORD *)(v1 + 24);
    if (!v3)
      sub_223198474();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
    v1 += 32;
  }
  while (v1 != v2);
LABEL_5:
  v4 = sub_2241471F8();
  __p = 0;
  v12 = 0;
  v13 = 0;
  sub_224148198((uint64_t)v4, (uint64_t **)&__p);
  v5 = (char *)__p;
  if (__p)
  {
    v6 = v12;
    v7 = __p;
    if (v12 != __p)
    {
      do
      {
        v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v12 = v5;
    operator delete(v7);
  }
}

void sub_223FF67C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11)
{
  char *v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (__p)
  {
    v12 = a11;
    v13 = __p;
    if (a11 != __p)
    {
      do
      {
        v14 = (std::__shared_weak_count *)*((_QWORD *)v12 - 1);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 16;
      }
      while (v12 != __p);
      v13 = __p;
    }
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_223FF6840()
{
  JUMPOUT(0x227684CE8);
}

void sub_223FF6854(uint64_t a1)
{
  __int128 **v1;
  _QWORD *v2;
  __int128 *v3;
  __int128 v4;
  __int16 v5;
  int v6;
  uint64_t *v7;
  _QWORD *v8;
  __int128 *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  __int16 v21;
  int v22;
  char v23;
  __int16 v24;
  char v25;
  char v26;
  char v27;
  _BYTE v28[24];
  _BYTE *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v1 = *(__int128 ***)(a1 + 8);
  LOBYTE(__p[0]) = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v2 = v28;
  v28[0] = 0;
  v30 = 0;
  LOBYTE(v31) = 0;
  v33 = 0;
  v3 = *v1;
  if ((*((char *)*v1 + 23) & 0x80000000) == 0)
  {
    v4 = *v3;
    *(_QWORD *)&v17 = *((_QWORD *)v3 + 2);
    v16 = v4;
    v5 = *(_WORD *)v1[1];
    v6 = *(_DWORD *)v1[2];
LABEL_3:
    *(_OWORD *)__p = v16;
    v20 = v17;
    v21 = v5;
    v22 = v6;
    v23 = 1;
    goto LABEL_8;
  }
  sub_223197FA4(&v16, *(void **)v3, *((_QWORD *)v3 + 1));
  v5 = *(_WORD *)v1[1];
  WORD4(v17) = v5;
  v6 = *(_DWORD *)v1[2];
  LODWORD(v18) = v6;
  if (!v23)
    goto LABEL_3;
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__p[0]);
    v5 = WORD4(v17);
    v6 = v18;
  }
  *(_OWORD *)__p = v16;
  v20 = v17;
  v21 = v5;
  v22 = v6;
LABEL_8:
  v31 = 0;
  v32 = 0;
  v33 = 1;
  v24 = 2;
  v25 = 0;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  v7 = sub_2241471F8();
  v8 = operator new(0x38uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24EC63F48;
  sub_223ED9D8C((uint64_t)(v8 + 3), (uint64_t)__p, (uint64_t)&v16, (uint64_t)&unk_224693B30, (uint64_t)v7);
  v9 = v1[3];
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
  *(_QWORD *)v9 = v8 + 3;
  *((_QWORD *)v9 + 1) = v8;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if ((_BYTE)v18)
  {
    v13 = (__int128 *)*((_QWORD *)&v17 + 1);
    if (*((__int128 **)&v17 + 1) == &v16)
    {
      v14 = 4;
      v13 = &v16;
    }
    else
    {
      if (!*((_QWORD *)&v17 + 1))
        goto LABEL_19;
      v14 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
  }
LABEL_19:
  if (!v30)
    goto LABEL_25;
  if (v29 == v28)
  {
    v15 = 4;
  }
  else
  {
    if (!v29)
      goto LABEL_25;
    v15 = 5;
    v2 = v29;
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v15))(v2);
LABEL_25:
  if (v23)
  {
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
  }
}

void sub_223FF6AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_QWORD *a30,char a31)
{
  _QWORD *v31;
  uint64_t v33;

  if (a31)
  {
    if (a30 == v31)
    {
      v33 = 4;
    }
    else
    {
      if (!a30)
        goto LABEL_7;
      v33 = 5;
      v31 = a30;
    }
    (*(void (**)(_QWORD *))(*v31 + 8 * v33))(v31);
  }
LABEL_7:
  if (a23)
  {
    if (a20 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223FF6B74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v18;
  char v19;
  char v20;
  char v21;
  _BYTE v22[2];
  _BYTE v23[2];
  char v24;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 40) = -1;
    v4 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(char *))off_24EC65940[v4])(&v18);
      *(_DWORD *)(a1 + 40) = v4;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    *(_BYTE *)(a1 + 104) = 0;
    if (*(_BYTE *)(a2 + 104))
    {
      v7 = *(_OWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = v7;
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
  }
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    *(_DWORD *)(a1 + 144) = -1;
    v8 = *(unsigned int *)(a2 + 144);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_24EC65960[v8])(&v19, a1 + 120, a2 + 120);
      *(_DWORD *)(a1 + 144) = v8;
    }
    *(_BYTE *)(a1 + 152) = 1;
  }
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  if (*(_BYTE *)(a2 + 224))
  {
    *(_DWORD *)(a1 + 216) = -1;
    v9 = *(unsigned int *)(a2 + 216);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_24EC65980[v9])(&v20, a1 + 160, a2 + 160);
      *(_DWORD *)(a1 + 216) = v9;
    }
    *(_BYTE *)(a1 + 224) = 1;
  }
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  if (*(_BYTE *)(a2 + 256))
  {
    *(_QWORD *)(a1 + 232) = &off_24EC6A3B8;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(a2 + 248) = 0;
    *(_BYTE *)(a1 + 256) = 1;
  }
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  if (*(_BYTE *)(a2 + 312))
  {
    *(_BYTE *)(a1 + 272) = 0;
    *(_DWORD *)(a1 + 304) = -1;
    v10 = *(unsigned int *)(a2 + 304);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_24EC65940[v10])(&v21, a1 + 272, a2 + 272);
      *(_DWORD *)(a1 + 304) = v10;
    }
    *(_BYTE *)(a1 + 312) = 1;
  }
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  if (*(_BYTE *)(a2 + 416))
  {
    *(_BYTE *)(a1 + 336) = 0;
    *(_DWORD *)(a1 + 400) = -1;
    v11 = *(unsigned int *)(a2 + 400);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC659A0[v11])(v22, a1 + 336, a2 + 336);
      *(_DWORD *)(a1 + 400) = v11;
    }
    *(_BYTE *)(a1 + 416) = 1;
  }
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  if (*(_BYTE *)(a2 + 576))
  {
    *(_BYTE *)(a1 + 448) = 0;
    *(_DWORD *)(a1 + 560) = -1;
    v12 = *(unsigned int *)(a2 + 560);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC659C0[v12])(v23, a1 + 448, a2 + 448);
      *(_DWORD *)(a1 + 560) = v12;
    }
    *(_BYTE *)(a1 + 576) = 1;
  }
  *(_BYTE *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  if (*(_BYTE *)(a2 + 624))
  {
    *(_BYTE *)(a1 + 616) = 0;
    if (*(_BYTE *)(a2 + 616))
    {
      *(_QWORD *)(a1 + 592) = 0;
      *(_QWORD *)(a1 + 600) = 0;
      *(_QWORD *)(a1 + 608) = 0;
      *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
      *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
      *(_QWORD *)(a2 + 592) = 0;
      *(_QWORD *)(a2 + 600) = 0;
      *(_QWORD *)(a2 + 608) = 0;
      *(_BYTE *)(a1 + 616) = 1;
    }
    *(_BYTE *)(a1 + 624) = 1;
  }
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 680) = 0;
  if (*(_BYTE *)(a2 + 680))
  {
    *(_BYTE *)(a1 + 640) = 0;
    *(_DWORD *)(a1 + 672) = -1;
    v13 = *(unsigned int *)(a2 + 672);
    if ((_DWORD)v13 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_24EC65940[v13])(&v24, a1 + 640, a2 + 640);
      *(_DWORD *)(a1 + 672) = v13;
    }
    *(_BYTE *)(a1 + 680) = 1;
  }
  v14 = *(_OWORD *)(a2 + 688);
  v15 = *(_OWORD *)(a2 + 704);
  v16 = *(_OWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 729) = *(_OWORD *)(a2 + 729);
  *(_OWORD *)(a1 + 704) = v15;
  *(_OWORD *)(a1 + 720) = v16;
  *(_OWORD *)(a1 + 688) = v14;
  return a1;
}

void sub_223FF6F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v20 = *(unsigned int *)(v12 + 560);
  if ((_DWORD)v20 != -1)
    ((void (*)(char *, uint64_t))off_24EC659B0[v20])(&a12, v18);
  *(_DWORD *)(v12 + 560) = -1;
  sub_223EDAEBC(v17);
  sub_223EDAF1C(v12 + 264);
  if (*(_BYTE *)(v12 + 256))
    sub_2241231D8(v16);
  sub_223EDAF7C(v15);
  sub_223EDAFDC(v14);
  sub_223EDB03C(v13);
  sub_223EDAF1C(v12);
  _Unwind_Resume(a1);
}

__n128 sub_223FF6FD0(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 result;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (a3[1].n128_u8[8])
  {
    result = *a3;
    *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
    *(__n128 *)a2 = result;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    *(_BYTE *)(a2 + 24) = 1;
  }
  return result;
}

__n128 sub_223FF7004(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

__n128 sub_223FF7020(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

__n128 sub_223FF703C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

__n128 sub_223FF7058(uint64_t a1, __n128 *a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)a3;
  a2[1].n128_u64[0] = *(_QWORD *)(a3 + 16);
  *a2 = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  a2[1].n128_u8[8] = 0;
  a2[3].n128_u8[0] = 0;
  if (*(_BYTE *)(a3 + 48))
  {
    result = *(__n128 *)(a3 + 24);
    a2[2].n128_u64[1] = *(_QWORD *)(a3 + 40);
    *(__n128 *)((char *)a2 + 24) = result;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    a2[3].n128_u8[0] = 1;
  }
  return result;
}

__n128 sub_223FF70A8(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void sub_223FF70C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int128 *v4;
  unsigned __int128 v5;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (*(_BYTE *)(a3 + 48))
  {
    v3 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_QWORD *)(a2 + 16) = v3;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v4 = (unsigned __int128 *)(a3 + 32);
    do
      v5 = __ldaxp(v4);
    while (__stlxp(v5, v4));
    *(_OWORD *)(a2 + 32) = v5;
    *(_BYTE *)(a2 + 48) = 1;
  }
}

__n128 sub_223FF710C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  unint64_t v3;
  __n128 result;

  v3 = a3[1].n128_u64[0];
  result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = v3;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void sub_223FF7128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int128 *v5;
  unsigned __int128 v6;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 96) = 0;
  if (*(_BYTE *)(a3 + 96))
  {
    *(_BYTE *)(a2 + 24) = 0;
    if (*(_BYTE *)(a3 + 24))
    {
      v3 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v3;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(a2 + 24) = 1;
    }
    *(_BYTE *)(a2 + 32) = 0;
    *(_BYTE *)(a2 + 80) = 0;
    if (*(_BYTE *)(a3 + 80))
    {
      v4 = *(_QWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(a2 + 48) = v4;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v5 = (unsigned __int128 *)(a3 + 64);
      do
        v6 = __ldaxp(v5);
      while (__stlxp(v6, v5));
      *(_OWORD *)(a2 + 64) = v6;
      *(_BYTE *)(a2 + 80) = 1;
    }
    *(_BYTE *)(a2 + 96) = 1;
  }
}

__n128 sub_223FF71B8(uint64_t a1, __n128 *a2, __n128 *a3)
{
  unint64_t v3;
  __n128 result;

  v3 = a3[1].n128_u64[0];
  result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = v3;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

uint64_t sub_223FF71D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  _QWORD *v39;
  void **v40;
  void **v41;
  void *v42;
  char v43;
  void **v44;
  void **v45;
  void *v46;
  void **v47;
  void **v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v54;
  uint64_t v55;
  char v56;

  sub_223FF7B34(a1, a2);
  v4 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v4;
  v5 = (void **)(a1 + 72);
  v6 = (__int128 *)(a2 + 72);
  if (*(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112))
  {
    if (*(_BYTE *)(a1 + 112))
    {
      if (*(_BYTE *)(a1 + 104) && *(char *)(a1 + 95) < 0)
        operator delete(*v5);
      *(_BYTE *)(a1 + 112) = 0;
      v8 = a1 + 120;
      v9 = a2 + 120;
      v10 = *(unsigned __int8 *)(a1 + 152);
      if (v10 != *(unsigned __int8 *)(a2 + 152))
        goto LABEL_14;
    }
    else
    {
      *(_BYTE *)(a1 + 72) = 0;
      *(_BYTE *)(a1 + 104) = 0;
      if (*(_BYTE *)(a2 + 104))
      {
        v12 = *v6;
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
        *(_OWORD *)v5 = v12;
        *(_QWORD *)(a2 + 80) = 0;
        *(_QWORD *)(a2 + 88) = 0;
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
        *(_BYTE *)(a1 + 104) = 1;
      }
      *(_BYTE *)(a1 + 112) = 1;
      v8 = a1 + 120;
      v9 = a2 + 120;
      v10 = *(unsigned __int8 *)(a1 + 152);
      if (v10 != *(unsigned __int8 *)(a2 + 152))
        goto LABEL_14;
    }
    goto LABEL_37;
  }
  if (!*(_BYTE *)(a1 + 112))
    goto LABEL_36;
  if (*(unsigned __int8 *)(a1 + 104) != *(unsigned __int8 *)(a2 + 104))
  {
    if (!*(_BYTE *)(a1 + 104))
    {
      v54 = *v6;
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_OWORD *)v5 = v54;
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)v6 = 0;
      *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = 1;
      v8 = a1 + 120;
      v9 = a2 + 120;
      v10 = *(unsigned __int8 *)(a1 + 152);
      if (v10 == *(unsigned __int8 *)(a2 + 152))
        goto LABEL_37;
LABEL_14:
      if (!v10)
      {
        *(_BYTE *)(a1 + 120) = 0;
        *(_DWORD *)(a1 + 144) = -1;
        v13 = *(unsigned int *)(a2 + 144);
        if ((_DWORD)v13 != -1)
        {
          ((void (*)(uint64_t *, uint64_t, uint64_t))off_24EC65960[v13])(&v55, v8, v9);
          *(_DWORD *)(a1 + 144) = v13;
        }
        *(_BYTE *)(a1 + 152) = 1;
        v14 = a1 + 160;
        v15 = a2 + 160;
        v16 = *(unsigned __int8 *)(a1 + 224);
        if (v16 == *(unsigned __int8 *)(a2 + 224))
          goto LABEL_45;
        goto LABEL_25;
      }
      v11 = *(unsigned int *)(a1 + 144);
      if ((_DWORD)v11 != -1)
        ((void (*)(uint64_t *, uint64_t, uint64_t))off_24EC65950[v11])(&v55, v8, v9);
      *(_DWORD *)(a1 + 144) = -1;
      *(_BYTE *)(a1 + 152) = 0;
LABEL_44:
      v14 = a1 + 160;
      v15 = a2 + 160;
      v16 = *(unsigned __int8 *)(a1 + 224);
      if (v16 == *(unsigned __int8 *)(a2 + 224))
        goto LABEL_45;
LABEL_25:
      if (v16)
      {
        v17 = *(unsigned int *)(a1 + 216);
        if ((_DWORD)v17 != -1)
          ((void (*)(uint64_t *))off_24EC65970[v17])(&v55);
        *(_DWORD *)(a1 + 216) = -1;
        *(_BYTE *)(a1 + 224) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 160) = 0;
        *(_DWORD *)(a1 + 216) = -1;
        v18 = *(unsigned int *)(a2 + 216);
        if ((_DWORD)v18 != -1)
        {
          ((void (*)(uint64_t *))off_24EC65980[v18])(&v55);
          *(_DWORD *)(a1 + 216) = v18;
        }
        *(_BYTE *)(a1 + 224) = 1;
      }
      goto LABEL_51;
    }
    if (*(char *)(a1 + 95) < 0)
      operator delete(*v5);
    *(_BYTE *)(a1 + 104) = 0;
LABEL_36:
    v8 = a1 + 120;
    v9 = a2 + 120;
    v10 = *(unsigned __int8 *)(a1 + 152);
    if (v10 == *(unsigned __int8 *)(a2 + 152))
      goto LABEL_37;
    goto LABEL_14;
  }
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_36;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v5);
  v7 = *v6;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)v5 = v7;
  *(_BYTE *)(a2 + 95) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v8 = a1 + 120;
  v9 = a2 + 120;
  v10 = *(unsigned __int8 *)(a1 + 152);
  if (v10 != *(unsigned __int8 *)(a2 + 152))
    goto LABEL_14;
LABEL_37:
  if (!v10)
    goto LABEL_44;
  v19 = *(unsigned int *)(a1 + 144);
  v20 = *(unsigned int *)(a2 + 144);
  if ((_DWORD)v19 == -1)
  {
    if ((_DWORD)v20 == -1)
      goto LABEL_44;
    goto LABEL_43;
  }
  if ((_DWORD)v20 != -1)
  {
LABEL_43:
    v55 = v8;
    ((void (*)(uint64_t *))off_24EC659E0[v20])(&v55);
    goto LABEL_44;
  }
  ((void (*)(uint64_t *, uint64_t, uint64_t))off_24EC65950[v19])(&v55, v8, v9);
  *(_DWORD *)(a1 + 144) = -1;
  v14 = a1 + 160;
  v15 = a2 + 160;
  v16 = *(unsigned __int8 *)(a1 + 224);
  if (v16 != *(unsigned __int8 *)(a2 + 224))
    goto LABEL_25;
LABEL_45:
  if (!v16)
    goto LABEL_51;
  v21 = *(unsigned int *)(a1 + 216);
  v22 = *(unsigned int *)(a2 + 216);
  if ((_DWORD)v21 == -1)
  {
    if ((_DWORD)v22 == -1)
      goto LABEL_51;
  }
  else if ((_DWORD)v22 == -1)
  {
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_24EC65970[v21])(&v55, v14, v15);
    *(_DWORD *)(a1 + 216) = -1;
    goto LABEL_51;
  }
  v55 = v14;
  ((void (*)(uint64_t *))off_24EC659F0[v22])(&v55);
LABEL_51:
  if (*(unsigned __int8 *)(a1 + 256) == *(unsigned __int8 *)(a2 + 256))
  {
    if (*(_BYTE *)(a1 + 256))
    {
      v23 = *(_OWORD *)(a2 + 240);
      *(_QWORD *)(a2 + 240) = 0;
      *(_QWORD *)(a2 + 248) = 0;
      v24 = *(std::__shared_weak_count **)(a1 + 248);
      *(_OWORD *)(a1 + 240) = v23;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
  }
  else if (*(_BYTE *)(a1 + 256))
  {
    v27 = *(std::__shared_weak_count **)(a1 + 248);
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    *(_BYTE *)(a1 + 256) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 232) = &off_24EC6A3B8;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(a2 + 248) = 0;
    *(_BYTE *)(a1 + 256) = 1;
  }
  sub_223FF7B34(a1 + 264, a2 + 264);
  if (*(unsigned __int8 *)(a1 + 416) == *(unsigned __int8 *)(a2 + 416))
  {
    if (!*(_BYTE *)(a1 + 416))
      goto LABEL_80;
    v30 = *(unsigned int *)(a1 + 400);
    v31 = *(unsigned int *)(a2 + 400);
    if ((_DWORD)v30 == -1)
    {
      if ((_DWORD)v31 == -1)
        goto LABEL_80;
    }
    else if ((_DWORD)v31 == -1)
    {
      ((void (*)(uint64_t *, uint64_t))off_24EC65990[v30])(&v55, a1 + 336);
      *(_DWORD *)(a1 + 400) = -1;
      goto LABEL_80;
    }
    v55 = a1 + 336;
    ((void (*)(uint64_t *))off_24EC65A00[v31])(&v55);
  }
  else if (*(_BYTE *)(a1 + 416))
  {
    v32 = *(unsigned int *)(a1 + 400);
    if ((_DWORD)v32 != -1)
      ((void (*)(uint64_t *, uint64_t))off_24EC65990[v32])(&v55, a1 + 336);
    *(_DWORD *)(a1 + 400) = -1;
    *(_BYTE *)(a1 + 416) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 336) = 0;
    *(_DWORD *)(a1 + 400) = -1;
    v33 = *(unsigned int *)(a2 + 400);
    if ((_DWORD)v33 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_24EC659A0[v33])(&v56, a1 + 336, a2 + 336);
      *(_DWORD *)(a1 + 400) = v33;
    }
    *(_BYTE *)(a1 + 416) = 1;
  }
LABEL_80:
  if (*(unsigned __int8 *)(a1 + 576) == *(unsigned __int8 *)(a2 + 576))
  {
    if (!*(_BYTE *)(a1 + 576))
      goto LABEL_94;
    v34 = *(unsigned int *)(a1 + 560);
    v35 = *(unsigned int *)(a2 + 560);
    if ((_DWORD)v34 == -1)
    {
      if ((_DWORD)v35 == -1)
        goto LABEL_94;
    }
    else if ((_DWORD)v35 == -1)
    {
      ((void (*)(uint64_t *, uint64_t))off_24EC659B0[v34])(&v55, a1 + 448);
      *(_DWORD *)(a1 + 560) = -1;
      goto LABEL_94;
    }
    v55 = a1 + 448;
    ((void (*)(uint64_t *))off_24EC65A10[v35])(&v55);
  }
  else if (*(_BYTE *)(a1 + 576))
  {
    v36 = *(unsigned int *)(a1 + 560);
    if ((_DWORD)v36 != -1)
      ((void (*)(uint64_t *, uint64_t))off_24EC659B0[v36])(&v55, a1 + 448);
    *(_DWORD *)(a1 + 560) = -1;
    *(_BYTE *)(a1 + 576) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 448) = 0;
    *(_DWORD *)(a1 + 560) = -1;
    v37 = *(unsigned int *)(a2 + 560);
    if ((_DWORD)v37 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_24EC659C0[v37])(&v56, a1 + 448, a2 + 448);
      *(_DWORD *)(a1 + 560) = v37;
    }
    *(_BYTE *)(a1 + 576) = 1;
  }
LABEL_94:
  v38 = (void **)(a1 + 592);
  v39 = (_QWORD *)(a2 + 592);
  if (*(unsigned __int8 *)(a1 + 624) != *(unsigned __int8 *)(a2 + 624))
  {
    if (!*(_BYTE *)(a1 + 624))
    {
      *(_BYTE *)(a1 + 592) = 0;
      *(_BYTE *)(a1 + 616) = 0;
      v43 = 1;
      if (*(_BYTE *)(a2 + 616))
      {
        *v38 = 0;
        *(_QWORD *)(a1 + 600) = 0;
        *(_QWORD *)(a1 + 608) = 0;
        *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
        *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
        *v39 = 0;
        *(_QWORD *)(a2 + 600) = 0;
        *(_QWORD *)(a2 + 608) = 0;
        *(_BYTE *)(a1 + 616) = 1;
      }
      goto LABEL_137;
    }
    v43 = *(_BYTE *)(a1 + 616);
    if (!v43)
    {
LABEL_137:
      *(_BYTE *)(a1 + 624) = v43;
      goto LABEL_138;
    }
    v44 = (void **)*v38;
    if (!*v38)
    {
LABEL_136:
      v43 = 0;
      goto LABEL_137;
    }
    v45 = *(void ***)(a1 + 600);
    v46 = *v38;
    if (v45 == v44)
    {
LABEL_135:
      *(_QWORD *)(a1 + 600) = v44;
      operator delete(v46);
      goto LABEL_136;
    }
    while (1)
    {
      if (*((_BYTE *)v45 - 16) && *((char *)v45 - 41) < 0)
      {
        operator delete(*(v45 - 8));
        if (*((_BYTE *)v45 - 72))
        {
LABEL_117:
          if (*((char *)v45 - 73) < 0)
            operator delete(*(v45 - 12));
        }
      }
      else if (*((_BYTE *)v45 - 72))
      {
        goto LABEL_117;
      }
      v45 -= 12;
      if (v45 == v44)
      {
        v46 = *v38;
        goto LABEL_135;
      }
    }
  }
  if (*(_BYTE *)(a1 + 624))
  {
    if (*(unsigned __int8 *)(a1 + 616) == *(unsigned __int8 *)(a2 + 616))
    {
      if (*(_BYTE *)(a1 + 616))
      {
        v40 = (void **)*v38;
        if (*v38)
        {
          v41 = *(void ***)(a1 + 600);
          v42 = *v38;
          if (v41 != v40)
          {
            do
            {
              if (*((_BYTE *)v41 - 16) && *((char *)v41 - 41) < 0)
                operator delete(*(v41 - 8));
              if (*((_BYTE *)v41 - 72) && *((char *)v41 - 73) < 0)
                operator delete(*(v41 - 12));
              v41 -= 12;
            }
            while (v41 != v40);
            v42 = *v38;
          }
          *(_QWORD *)(a1 + 600) = v40;
          operator delete(v42);
          *v38 = 0;
          *(_QWORD *)(a1 + 600) = 0;
          *(_QWORD *)(a1 + 608) = 0;
        }
        *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
        *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
        *v39 = 0;
        *(_QWORD *)(a2 + 600) = 0;
        *(_QWORD *)(a2 + 608) = 0;
      }
    }
    else if (*(_BYTE *)(a1 + 616))
    {
      v47 = (void **)*v38;
      if (*v38)
      {
        v48 = *(void ***)(a1 + 600);
        v49 = *v38;
        if (v48 != v47)
        {
          do
          {
            if (*((_BYTE *)v48 - 16) && *((char *)v48 - 41) < 0)
              operator delete(*(v48 - 8));
            if (*((_BYTE *)v48 - 72) && *((char *)v48 - 73) < 0)
              operator delete(*(v48 - 12));
            v48 -= 12;
          }
          while (v48 != v47);
          v49 = *v38;
        }
        *(_QWORD *)(a1 + 600) = v47;
        operator delete(v49);
      }
      *(_BYTE *)(a1 + 616) = 0;
    }
    else
    {
      *v38 = 0;
      *(_QWORD *)(a1 + 600) = 0;
      *(_QWORD *)(a1 + 608) = 0;
      *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
      *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
      *v39 = 0;
      *(_QWORD *)(a2 + 600) = 0;
      *(_QWORD *)(a2 + 608) = 0;
      *(_BYTE *)(a1 + 616) = 1;
    }
  }
LABEL_138:
  sub_223FF7B34(a1 + 632, a2 + 632);
  v50 = *(_OWORD *)(a2 + 688);
  v51 = *(_OWORD *)(a2 + 704);
  v52 = *(_OWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 729) = *(_OWORD *)(a2 + 729);
  *(_OWORD *)(a1 + 704) = v51;
  *(_OWORD *)(a1 + 720) = v52;
  *(_OWORD *)(a1 + 688) = v50;
  return a1;
}

void sub_223FF7A9C(_Unwind_Exception *exception_object, ...)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v4;
  va_list va;

  va_start(va, exception_object);
  v4 = *v2;
  if ((_DWORD)v4 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24EC659B0[v4])((uint64_t *)va, v1);
  *v2 = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_223FF7B34(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;

  v2 = result;
  if (*(unsigned __int8 *)(result + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (!*(_BYTE *)(result + 48))
      return result;
    v3 = *(unsigned int *)(result + 40);
    v4 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v3 != -1)
    {
      if ((_DWORD)v4 == -1)
      {
        result = ((uint64_t (*)(char *, uint64_t))off_24EC65930[v3])(&v8, result + 8);
        *(_DWORD *)(v2 + 40) = -1;
        return result;
      }
LABEL_15:
      v7 = result + 8;
      return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24EC659D0[v4])(&v7, result + 8, a2 + 8);
    }
    if ((_DWORD)v4 != -1)
      goto LABEL_15;
  }
  else if (*(_BYTE *)(result + 48))
  {
    v5 = *(unsigned int *)(result + 40);
    if ((_DWORD)v5 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_24EC65930[v5])(&v9, result + 8);
    *(_DWORD *)(v2 + 40) = -1;
    *(_BYTE *)(v2 + 48) = 0;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)(result + 40) = -1;
    v6 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v6 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24EC65940[v6])(&v10, result + 8, a2 + 8);
      *(_DWORD *)(v2 + 40) = v6;
    }
    *(_BYTE *)(v2 + 48) = 1;
  }
  return result;
}

void sub_223FF7C7C(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 32);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      if (*(unsigned __int8 *)(a2 + 24) == *((unsigned __int8 *)a3 + 24))
      {
        if (*(_BYTE *)(a2 + 24))
        {
          if (*(char *)(a2 + 23) < 0)
            operator delete(*(void **)a2);
          v7 = *a3;
          *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
          *(_OWORD *)a2 = v7;
          *((_BYTE *)a3 + 23) = 0;
          *(_BYTE *)a3 = 0;
        }
      }
      else if (*(_BYTE *)(a2 + 24))
      {
        if (*(char *)(a2 + 23) < 0)
        {
          operator delete(*(void **)a2);
          *(_BYTE *)(a2 + 24) = 0;
        }
        else
        {
          *(_BYTE *)(a2 + 24) = 0;
        }
      }
      else
      {
        v9 = *a3;
        *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
        *(_OWORD *)a2 = v9;
        *((_QWORD *)a3 + 1) = 0;
        *((_QWORD *)a3 + 2) = 0;
        *(_QWORD *)a3 = 0;
        *(_BYTE *)(a2 + 24) = 1;
      }
      return;
    }
    ((void (*)(char *, uint64_t))off_24EC65930[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  *(_BYTE *)v4 = 0;
  *(_BYTE *)(v4 + 24) = 0;
  if (*((_BYTE *)a3 + 24))
  {
    v8 = *a3;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v4 = v8;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(v4 + 24) = 1;
  }
  *(_DWORD *)(v4 + 32) = 0;
}

__n128 sub_223FF7DE0(__n128 **a1, uint64_t a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v8;

  v4 = *a1;
  v5 = (*a1)[2].n128_u32[0];
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, __n128 *))off_24EC65930[v5])(&v8, v4);
LABEL_7:
    v4[2].n128_u32[0] = -1;
    result = *a3;
    v4[1].n128_u64[0] = a3[1].n128_u64[0];
    *v4 = result;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    v4[2].n128_u32[0] = 1;
    return result;
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  *(__n128 *)a2 = result;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return result;
}

__n128 sub_223FF7EA8(__n128 **a1, uint64_t a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v8;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[2];
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, __n128 *))off_24EC65950[v5])(&v8, v4);
LABEL_7:
    v4[1].n128_u32[2] = -1;
    result = *a3;
    v4[1].n128_u64[0] = a3[1].n128_u64[0];
    *v4 = result;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    v4[1].n128_u32[2] = 0;
    return result;
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  *(__n128 *)a2 = result;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return result;
}

__n128 sub_223FF7F68(__n128 **a1, uint64_t a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v8;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[2];
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, __n128 *))off_24EC65950[v5])(&v8, v4);
LABEL_7:
    v4[1].n128_u32[2] = -1;
    result = *a3;
    v4[1].n128_u64[0] = a3[1].n128_u64[0];
    *v4 = result;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    v4[1].n128_u32[2] = 1;
    return result;
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  *(__n128 *)a2 = result;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return result;
}

void sub_223FF8030(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  void **v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 56);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      v7 = *a3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)a2 = v7;
      *((_BYTE *)a3 + 23) = 0;
      *(_BYTE *)a3 = 0;
      v8 = (void **)(a2 + 24);
      v9 = (__int128 *)((char *)a3 + 24);
      if (*(unsigned __int8 *)(a2 + 48) == *((unsigned __int8 *)a3 + 48))
      {
        if (*(_BYTE *)(a2 + 48))
        {
          if (*(char *)(a2 + 47) < 0)
            operator delete(*v8);
          v10 = *v9;
          *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
          *(_OWORD *)v8 = v10;
          *((_BYTE *)a3 + 47) = 0;
          *((_BYTE *)a3 + 24) = 0;
        }
      }
      else if (*(_BYTE *)(a2 + 48))
      {
        if (*(char *)(a2 + 47) < 0)
          operator delete(*v8);
        *(_BYTE *)(a2 + 48) = 0;
      }
      else
      {
        v13 = *v9;
        *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
        *(_OWORD *)v8 = v13;
        *((_QWORD *)a3 + 4) = 0;
        *((_QWORD *)a3 + 5) = 0;
        *(_QWORD *)v9 = 0;
        *(_BYTE *)(a2 + 48) = 1;
      }
      return;
    }
    ((void (*)(char *, uint64_t))off_24EC65970[v5])(&v14, v4);
  }
  *(_DWORD *)(v4 + 56) = -1;
  v11 = *a3;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)v4 = v11;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 48) = 0;
  if (*((_BYTE *)a3 + 48))
  {
    v12 = *(__int128 *)((char *)a3 + 24);
    *(_QWORD *)(v4 + 40) = *((_QWORD *)a3 + 5);
    *(_OWORD *)(v4 + 24) = v12;
    *((_QWORD *)a3 + 4) = 0;
    *((_QWORD *)a3 + 5) = 0;
    *((_QWORD *)a3 + 3) = 0;
    *(_BYTE *)(v4 + 48) = 1;
  }
  *(_DWORD *)(v4 + 56) = 0;
}

__n128 sub_223FF81E0(__n128 **a1, uint64_t a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v8;

  v4 = *a1;
  v5 = (*a1)[3].n128_u32[2];
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, __n128 *))off_24EC65970[v5])(&v8, v4);
LABEL_7:
    v4[3].n128_u32[2] = -1;
    result = *a3;
    v4[1].n128_u64[0] = a3[1].n128_u64[0];
    *v4 = result;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    v4[3].n128_u32[2] = 1;
    return result;
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  *(__n128 *)a2 = result;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return result;
}

void sub_223FF82A8(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  unsigned __int128 *v8;
  unsigned __int128 v9;
  unsigned __int128 *v10;
  uint64_t v11;
  unsigned __int128 *v12;
  unsigned __int128 v13;
  uint64_t v14;
  unsigned __int128 *v15;
  unsigned __int128 v16;
  unsigned __int128 v17;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 64);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      if (*(unsigned __int8 *)(a2 + 48) == *((unsigned __int8 *)a3 + 48))
      {
        if (*(_BYTE *)(a2 + 48))
        {
          if (*(char *)(a2 + 23) < 0)
            operator delete(*(void **)a2);
          v7 = *a3;
          *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
          *(_OWORD *)a2 = v7;
          *((_BYTE *)a3 + 23) = 0;
          *(_BYTE *)a3 = 0;
          v8 = (unsigned __int128 *)(a3 + 2);
          do
            v9 = __ldaxp(v8);
          while (__stlxp(v9, v8));
          v10 = (unsigned __int128 *)(a2 + 32);
          v17 = v9;
          do
            __ldaxp(v10);
          while (__stlxp(v9, v10));
        }
      }
      else if (*(_BYTE *)(a2 + 48))
      {
        if (*(char *)(a2 + 23) < 0)
        {
          operator delete(*(void **)a2);
          *(_BYTE *)(a2 + 48) = 0;
        }
        else
        {
          *(_BYTE *)(a2 + 48) = 0;
        }
      }
      else
      {
        v14 = *((_QWORD *)a3 + 2);
        *(_OWORD *)a2 = *a3;
        *(_QWORD *)(a2 + 16) = v14;
        *((_QWORD *)a3 + 1) = 0;
        *((_QWORD *)a3 + 2) = 0;
        *(_QWORD *)a3 = 0;
        v15 = (unsigned __int128 *)(a3 + 2);
        do
          v16 = __ldaxp(v15);
        while (__stlxp(v16, v15));
        *(_OWORD *)(a2 + 32) = v16;
        *(_BYTE *)(a2 + 48) = 1;
      }
      return;
    }
    ((void (*)(unsigned __int128 *, uint64_t))off_24EC65990[v5])(&v17, v4);
  }
  *(_DWORD *)(v4 + 64) = -1;
  *(_BYTE *)v4 = 0;
  *(_BYTE *)(v4 + 48) = 0;
  if (*((_BYTE *)a3 + 48))
  {
    v11 = *((_QWORD *)a3 + 2);
    *(_OWORD *)v4 = *a3;
    *(_QWORD *)(v4 + 16) = v11;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    v12 = (unsigned __int128 *)(a3 + 2);
    do
      v13 = __ldaxp(v12);
    while (__stlxp(v13, v12));
    *(_OWORD *)(v4 + 32) = v13;
    *(_BYTE *)(v4 + 48) = 1;
  }
  *(_DWORD *)(v4 + 64) = 0;
}

__n128 sub_223FF8460(__n128 **a1, uint64_t a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v8;

  v4 = *a1;
  v5 = (*a1)[4].n128_u32[0];
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, __n128 *))off_24EC65990[v5])(&v8, v4);
LABEL_7:
    v4[4].n128_u32[0] = -1;
    result = *a3;
    v4[1].n128_u64[0] = a3[1].n128_u64[0];
    *v4 = result;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    v4[4].n128_u32[0] = 1;
    return result;
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  *(__n128 *)a2 = result;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return result;
}

void sub_223FF8528(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int128 *v13;
  unsigned __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int128 *v17;
  unsigned __int128 v18;
  __int128 v19;
  unsigned __int128 *v20;
  unsigned __int128 v21;
  unsigned __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int128 *v25;
  unsigned __int128 v26;
  unsigned __int128 v27;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5)
  {
    ((void (*)(unsigned __int128 *, uint64_t))off_24EC659B0[v5])(&v27, v4);
LABEL_12:
    *(_DWORD *)(v4 + 112) = -1;
    *(_BYTE *)v4 = 0;
    *(_BYTE *)(v4 + 96) = 0;
    if (*((_BYTE *)a3 + 96))
    {
      *(_BYTE *)(v4 + 24) = 0;
      if (*((_BYTE *)a3 + 24))
      {
        v11 = *((_QWORD *)a3 + 2);
        *(_OWORD *)v4 = *a3;
        *(_QWORD *)(v4 + 16) = v11;
        *((_QWORD *)a3 + 1) = 0;
        *((_QWORD *)a3 + 2) = 0;
        *(_QWORD *)a3 = 0;
        *(_BYTE *)(v4 + 24) = 1;
      }
      *(_BYTE *)(v4 + 32) = 0;
      *(_BYTE *)(v4 + 80) = 0;
      if (*((_BYTE *)a3 + 80))
      {
        v12 = *((_QWORD *)a3 + 6);
        *(_OWORD *)(v4 + 32) = a3[2];
        *(_QWORD *)(v4 + 48) = v12;
        *((_QWORD *)a3 + 5) = 0;
        *((_QWORD *)a3 + 6) = 0;
        *((_QWORD *)a3 + 4) = 0;
        v13 = (unsigned __int128 *)(a3 + 4);
        do
          v14 = __ldaxp(v13);
        while (__stlxp(v14, v13));
        *(_OWORD *)(v4 + 64) = v14;
        *(_BYTE *)(v4 + 80) = 1;
      }
      *(_BYTE *)(v4 + 96) = 1;
    }
    *(_DWORD *)(v4 + 112) = 0;
    return;
  }
  if (*(unsigned __int8 *)(a2 + 96) == *((unsigned __int8 *)a3 + 96))
  {
    if (!*(_BYTE *)(a2 + 96))
      return;
    if (*(unsigned __int8 *)(a2 + 24) == *((unsigned __int8 *)a3 + 24))
    {
      if (*(_BYTE *)(a2 + 24))
      {
        if (*(char *)(a2 + 23) < 0)
          operator delete(*(void **)a2);
        v7 = *a3;
        *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
        *(_OWORD *)a2 = v7;
        *((_BYTE *)a3 + 23) = 0;
        *(_BYTE *)a3 = 0;
        v8 = a2 + 32;
        v9 = a3 + 2;
        v10 = *(unsigned __int8 *)(a2 + 80);
        if (v10 != *((unsigned __int8 *)a3 + 80))
          goto LABEL_51;
        goto LABEL_42;
      }
    }
    else
    {
      if (!*(_BYTE *)(a2 + 24))
      {
        v23 = *((_QWORD *)a3 + 2);
        *(_OWORD *)a2 = *a3;
        *(_QWORD *)(a2 + 16) = v23;
        *((_QWORD *)a3 + 1) = 0;
        *((_QWORD *)a3 + 2) = 0;
        *(_QWORD *)a3 = 0;
        *(_BYTE *)(a2 + 24) = 1;
        v8 = a2 + 32;
        v9 = a3 + 2;
        v10 = *(unsigned __int8 *)(a2 + 80);
        if (v10 == *((unsigned __int8 *)a3 + 80))
        {
LABEL_42:
          if (v10)
          {
            if (*(char *)(a2 + 55) < 0)
              operator delete(*(void **)v8);
            v19 = *v9;
            *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
            *(_OWORD *)v8 = v19;
            *((_BYTE *)a3 + 55) = 0;
            *((_BYTE *)a3 + 32) = 0;
            v20 = (unsigned __int128 *)(a3 + 4);
            do
              v21 = __ldaxp(v20);
            while (__stlxp(v21, v20));
            v22 = (unsigned __int128 *)(a2 + 64);
            v27 = v21;
            do
              __ldaxp(v22);
            while (__stlxp(v21, v22));
          }
          return;
        }
LABEL_51:
        if (v10)
        {
          if (*(char *)(a2 + 55) < 0)
            operator delete(*(void **)v8);
          *(_BYTE *)(a2 + 80) = 0;
        }
        else
        {
          v24 = *((_QWORD *)v9 + 2);
          *(_OWORD *)v8 = *v9;
          *(_QWORD *)(v8 + 16) = v24;
          *((_QWORD *)v9 + 1) = 0;
          *((_QWORD *)v9 + 2) = 0;
          *(_QWORD *)v9 = 0;
          v25 = (unsigned __int128 *)(a3 + 4);
          do
            v26 = __ldaxp(v25);
          while (__stlxp(v26, v25));
          *(_OWORD *)(a2 + 64) = v26;
          *(_BYTE *)(a2 + 80) = 1;
        }
        return;
      }
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_BYTE *)(a2 + 24) = 0;
    }
    v8 = a2 + 32;
    v9 = a3 + 2;
    v10 = *(unsigned __int8 *)(a2 + 80);
    if (v10 == *((unsigned __int8 *)a3 + 80))
      goto LABEL_42;
    goto LABEL_51;
  }
  if (*(_BYTE *)(a2 + 96))
  {
    if (*(_BYTE *)(a2 + 80) && *(char *)(a2 + 55) < 0)
      operator delete(*(void **)(a2 + 32));
    if (*(_BYTE *)(a2 + 24) && *(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_BYTE *)(a2 + 96) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    if (*((_BYTE *)a3 + 24))
    {
      v15 = *((_QWORD *)a3 + 2);
      *(_OWORD *)a2 = *a3;
      *(_QWORD *)(a2 + 16) = v15;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(a2 + 24) = 1;
    }
    *(_BYTE *)(a2 + 32) = 0;
    *(_BYTE *)(a2 + 80) = 0;
    if (*((_BYTE *)a3 + 80))
    {
      v16 = *((_QWORD *)a3 + 6);
      *(_OWORD *)(a2 + 32) = a3[2];
      *(_QWORD *)(a2 + 48) = v16;
      *((_QWORD *)a3 + 5) = 0;
      *((_QWORD *)a3 + 6) = 0;
      *((_QWORD *)a3 + 4) = 0;
      v17 = (unsigned __int128 *)(a3 + 4);
      do
        v18 = __ldaxp(v17);
      while (__stlxp(v18, v17));
      *(_OWORD *)(a2 + 64) = v18;
      *(_BYTE *)(a2 + 80) = 1;
    }
    *(_BYTE *)(a2 + 96) = 1;
  }
}

__n128 sub_223FF88A4(__n128 **a1, uint64_t a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v8;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, __n128 *))off_24EC659B0[v5])(&v8, v4);
LABEL_7:
    v4[7].n128_u32[0] = -1;
    result = *a3;
    v4[1].n128_u64[0] = a3[1].n128_u64[0];
    *v4 = result;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    v4[7].n128_u32[0] = 1;
    return result;
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  *(__n128 *)a2 = result;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return result;
}

uint64_t sub_223FF896C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;

  if (*(_BYTE *)(a1 + 680))
  {
    v2 = *(unsigned int *)(a1 + 672);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24EC65930[v2])(&v16, a1 + 640);
    *(_DWORD *)(a1 + 672) = -1;
  }
  if (*(_BYTE *)(a1 + 624))
  {
    if (*(_BYTE *)(a1 + 616))
    {
      v3 = *(_QWORD *)(a1 + 592);
      if (v3)
      {
        v4 = *(_QWORD *)(a1 + 600);
        v5 = *(void **)(a1 + 592);
        if (v4 == v3)
        {
LABEL_19:
          *(_QWORD *)(a1 + 600) = v3;
          operator delete(v5);
          goto LABEL_20;
        }
        while (1)
        {
          if (*(_BYTE *)(v4 - 16) && *(char *)(v4 - 41) < 0)
          {
            operator delete(*(void **)(v4 - 64));
            if (*(_BYTE *)(v4 - 72))
            {
LABEL_14:
              if (*(char *)(v4 - 73) < 0)
                operator delete(*(void **)(v4 - 96));
            }
          }
          else if (*(_BYTE *)(v4 - 72))
          {
            goto LABEL_14;
          }
          v4 -= 96;
          if (v4 == v3)
          {
            v5 = *(void **)(a1 + 592);
            goto LABEL_19;
          }
        }
      }
    }
  }
LABEL_20:
  if (*(_BYTE *)(a1 + 576))
  {
    v6 = *(unsigned int *)(a1 + 560);
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, uint64_t))off_24EC659B0[v6])(&v17, a1 + 448);
    *(_DWORD *)(a1 + 560) = -1;
  }
  if (*(_BYTE *)(a1 + 416))
  {
    v7 = *(unsigned int *)(a1 + 400);
    if ((_DWORD)v7 != -1)
      ((void (*)(char *, uint64_t))off_24EC65990[v7])(&v18, a1 + 336);
    *(_DWORD *)(a1 + 400) = -1;
  }
  if (*(_BYTE *)(a1 + 312))
  {
    v8 = *(unsigned int *)(a1 + 304);
    if ((_DWORD)v8 != -1)
      ((void (*)(char *, uint64_t))off_24EC65930[v8])(&v19, a1 + 272);
    *(_DWORD *)(a1 + 304) = -1;
  }
  if (!*(_BYTE *)(a1 + 256))
    goto LABEL_37;
  v9 = *(std::__shared_weak_count **)(a1 + 248);
  if (!v9)
    goto LABEL_37;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!*(_BYTE *)(a1 + 224))
      goto LABEL_41;
  }
  else
  {
LABEL_37:
    if (!*(_BYTE *)(a1 + 224))
      goto LABEL_41;
  }
  v12 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v12 != -1)
    ((void (*)(char *, uint64_t))off_24EC65970[v12])(&v20, a1 + 160);
  *(_DWORD *)(a1 + 216) = -1;
LABEL_41:
  if (*(_BYTE *)(a1 + 152))
  {
    v13 = *(unsigned int *)(a1 + 144);
    if ((_DWORD)v13 != -1)
      ((void (*)(char *, uint64_t))off_24EC65950[v13])(&v21, a1 + 120);
    *(_DWORD *)(a1 + 144) = -1;
  }
  if (*(_BYTE *)(a1 + 112) && *(_BYTE *)(a1 + 104) && *(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    if (!*(_BYTE *)(a1 + 48))
      return a1;
  }
  else if (!*(_BYTE *)(a1 + 48))
  {
    return a1;
  }
  v14 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v14 != -1)
    ((void (*)(char *, uint64_t))off_24EC65930[v14])(&v22, a1 + 8);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

char *sub_223FF8C20(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v17;
  char *v18;
  char *v19;
  _QWORD v20[3];
  char v21;
  __int128 v22;
  __int128 v23;
  char v24[2];

  v3 = 0xFAFAFAFAFAFAFAFBLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x50505050505050)
    sub_22316E078();
  if (0xF5F5F5F5F5F5F5F6 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0xF5F5F5F5F5F5F5F6 * ((a1[2] - *a1) >> 4);
  if (0xFAFAFAFAFAFAFAFBLL * ((a1[2] - *a1) >> 4) >= 0x28282828282828)
    v6 = 0x50505050505050;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x50505050505050)
      sub_223174E94();
    v7 = (char *)operator new(816 * v6);
  }
  else
  {
    v7 = 0;
  }
  v17 = &v7[816 * v3];
  v19 = &v7[816 * v6];
  *(_QWORD *)v17 = &off_24EC6A160;
  sub_223FF6B74((uint64_t)(v17 + 16), a2 + 16);
  v17[768] = 0;
  v17[808] = 0;
  if (*(_BYTE *)(a2 + 808))
  {
    v8 = &v7[816 * v3];
    *((_DWORD *)v8 + 200) = -1;
    v9 = *(unsigned int *)(a2 + 800);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(_QWORD *, char *, uint64_t))off_24EC65A20[v9])(v20, v17 + 768, a2 + 768);
      *((_DWORD *)v8 + 200) = v9;
    }
    v17[808] = 1;
  }
  v10 = (uint64_t)v17;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  *(_QWORD *)&v23 = v17;
  *((_QWORD *)&v23 + 1) = v17;
  v22 = v23;
  v20[0] = a1 + 2;
  v20[1] = &v22;
  v20[2] = &v23;
  v21 = 0;
  if (v11 == v12)
  {
    v14 = v11;
  }
  else
  {
    do
    {
      *(_QWORD *)(v10 - 816) = &off_24EC6A160;
      sub_223EDA884(v10 - 800, (uint64_t)(v11 - 800));
      *(_BYTE *)(v10 - 48) = 0;
      *(_BYTE *)(v10 - 8) = 0;
      if (*(v11 - 8))
      {
        *(_BYTE *)(v10 - 48) = 0;
        *(_DWORD *)(v10 - 16) = -1;
        v13 = *((unsigned int *)v11 - 4);
        if ((_DWORD)v13 != -1)
        {
          ((void (*)(char *, uint64_t, char *))off_24EC65A30[v13])(v24, v10 - 48, v11 - 48);
          *(_DWORD *)(v10 - 16) = v13;
        }
        *(_BYTE *)(v10 - 8) = 1;
      }
      v11 -= 816;
      v10 = *((_QWORD *)&v23 + 1) - 816;
      *((_QWORD *)&v23 + 1) -= 816;
    }
    while (v11 != v12);
    v14 = (char *)*a1;
    v11 = (char *)a1[1];
  }
  *a1 = v10;
  a1[1] = (uint64_t)(v17 + 816);
  a1[2] = (uint64_t)v19;
  if (v11 != v14)
  {
    do
    {
      v18 = v11 - 816;
      if (*(v11 - 8))
      {
        v15 = *((unsigned int *)v11 - 4);
        if ((_DWORD)v15 != -1)
          ((void (*)(_QWORD *, char *))off_24EC65920[v15])(v20, v11 - 48);
        *((_DWORD *)v11 - 4) = -1;
      }
      *((_QWORD *)v11 - 102) = &off_24EC6A160;
      sub_223FF896C((uint64_t)(v11 - 800));
      v11 -= 816;
    }
    while (v18 != v14);
    v11 = v14;
  }
  if (v11)
    operator delete(v11);
  return v17 + 816;
}

void sub_223FF8F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223FF8FF4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FF8F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v11 = *(unsigned int *)(v7 - 16);
  if ((_DWORD)v11 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC65920[v11])(v9 - 81, v5);
  *(_DWORD *)(v7 - 16) = -1;
  *v8 = v6;
  sub_223FF896C(v4);
  sub_223FF90B4((uint64_t)va1);
  sub_223FF8FF4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FF8F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_223FF90B4((uint64_t)va1);
  sub_223FF8FF4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FF8F94(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t sub_223FF8FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v3 = (_QWORD *)(a3 + 24);
  v4 = *(_QWORD *)(a3 + 24);
  if (!v4)
  {
    v3 = (_QWORD *)(a2 + 24);
    goto LABEL_5;
  }
  if (v4 != a3)
  {
    *(_QWORD *)(a2 + 24) = v4;
LABEL_5:
    *v3 = 0;
    return result;
  }
  *(_QWORD *)(a2 + 24) = a2;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
}

uint64_t sub_223FF8FF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  char v6;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 816;
    if (*(_BYTE *)(i - 8))
    {
      v4 = *(unsigned int *)(i - 16);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, uint64_t))off_24EC65920[v4])(&v6, i - 48);
      *(_DWORD *)(i - 16) = -1;
    }
    *(_QWORD *)(i - 816) = &off_24EC6A160;
    sub_223FF896C(i - 800);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223FF90B4(uint64_t a1)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  char v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    for (i = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8); v3 != i; v3 += 816)
    {
      if (*(_BYTE *)(v3 + 808))
      {
        v5 = *(unsigned int *)(v3 + 800);
        if ((_DWORD)v5 != -1)
          ((void (*)(char *, uint64_t))off_24EC65920[v5])(&v6, v3 + 768);
        *(_DWORD *)(v3 + 800) = -1;
      }
      *(_QWORD *)v3 = &off_24EC6A160;
      sub_223FF896C(v3 + 16);
    }
  }
  return a1;
}

void sub_223FF9168(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_223FF96DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223FF9700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FF9714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void **sub_223FF976C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v7 = v3 - 32;
      v5 = (char *)*((_QWORD *)v3 - 1);
      if (v3 - 32 == v5)
      {
        v5 = v3 - 32;
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_6:
      v3 = v7;
      if (v7 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void sub_223FF97F8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  std::string *v5;
  std::string __p;
  std::string v7;

  if (!*(_BYTE *)(a1 + 24)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/CommonConfig.cpp", 27, (uint64_t)"storage_path", 12, (uint64_t)"Persistence storage path not set up, metadata path unavailable", 62, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  memset(&v7, 0, sizeof(v7));
  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (std::string *)a1;
  else
    v5 = *(std::string **)a1;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  sub_2231816F0(&v7, v5, (std::string *)((char *)v5 + v4));
  memset(&__p, 0, sizeof(__p));
  sub_2231816F0(&__p, (std::string *)"metadata", (std::string *)"");
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(a2, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  else
    *a2 = v7;
  sub_22319C30C((uint64_t)a2, (std::__fs::filesystem::path *)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v7.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_15;
}

void sub_223FF9914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a20 & 0x80000000) == 0)
LABEL_4:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(__p);
  goto LABEL_4;
}

void sub_223FF9978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if ((a17 & 0x80000000) == 0)
    JUMPOUT(0x223FF993CLL);
  JUMPOUT(0x223FF9934);
}

void sub_223FF9988(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  std::string *v5;
  std::string __p;
  std::string v7;

  if (!*(_BYTE *)(a1 + 24)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/CommonConfig.cpp", 32, (uint64_t)"storage_path", 12, (uint64_t)"Persistence storage path not set up, data path unavailable", 58, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  memset(&v7, 0, sizeof(v7));
  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (std::string *)a1;
  else
    v5 = *(std::string **)a1;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  sub_2231816F0(&v7, v5, (std::string *)((char *)v5 + v4));
  memset(&__p, 0, sizeof(__p));
  sub_2231816F0(&__p, (std::string *)"data", (std::string *)"");
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(a2, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  else
    *a2 = v7;
  sub_22319C30C((uint64_t)a2, (std::__fs::filesystem::path *)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v7.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_15;
}

void sub_223FF9AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a20 & 0x80000000) == 0)
LABEL_4:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(__p);
  goto LABEL_4;
}

void sub_223FF9B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if ((a17 & 0x80000000) == 0)
    JUMPOUT(0x223FF9ACCLL);
  JUMPOUT(0x223FF9AC4);
}

__n128 sub_223FF9B18@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, int32x4_t a3@<Q0>, int32x4_t a4@<Q3>, float32x4_t a5@<Q5>)
{
  float32x2_t v5;
  float32x4_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  int8x16_t v18;
  int32x4_t v19;
  __int128 v20;
  __n128 result;

  a3.i64[0] = *(_QWORD *)a1;
  a3.i32[2] = *(_DWORD *)(a1 + 8);
  a4.i64[0] = *(_QWORD *)(a1 + 16);
  a4.i32[2] = *(_DWORD *)(a1 + 24);
  v6.i64[0] = vzip1q_s32(a3, a4).u64[0];
  a5.i64[0] = *(_QWORD *)(a1 + 48);
  a5.i32[2] = *(_DWORD *)(a1 + 56);
  v7 = (int8x16_t)vnegq_f32(a5);
  v8 = (int8x16_t)vtrn2q_s32(a3, a4);
  v8.i32[2] = HIDWORD(*(_QWORD *)(a1 + 32));
  v5.i32[0] = *(_DWORD *)(a1 + 40);
  v9 = vzip2q_s32(a3, a4);
  *(float32x2_t *)v10.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v6.f32, *(float *)v7.i32), *(float32x2_t *)v8.i8, *(float32x2_t *)a5.f32, 1), *(float32x2_t *)v9.i8, a5, 2);
  v11 = (float32x4_t)v9;
  v11.i32[2] = v5.i32[0];
  v12 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v11, 2);
  v10.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 32), *(float32x2_t *)v7.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a1 + 32), 1), *(float32x2_t *)a5.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL), v5).u32[0]);
  v6.i64[1] = *(_QWORD *)(a1 + 32);
  v13.i32[3] = 0;
  v13.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v8, 0).i32[3];
  *(uint64_t *)((char *)v13.i64 + 4) = vextq_s8(v8, v12, 4uLL).u64[0];
  v11.i64[1] = v12.u32[0];
  HIDWORD(v20) = 0;
  v14 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(*(_OWORD *)(a1 + 64))), v13, *(float32x2_t *)(a1 + 64), 1), v11, *(float32x4_t *)(a1 + 64), 2), v10, *(float32x4_t *)(a1 + 64), 3);
  v15 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(*(_OWORD *)(a1 + 80))), v13, *(float32x2_t *)(a1 + 80), 1), v11, *(float32x4_t *)(a1 + 80), 2), v10, *(float32x4_t *)(a1 + 80), 3);
  v16 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(*(_OWORD *)(a1 + 96))), v13, *(float32x2_t *)(a1 + 96), 1), v11, *(float32x4_t *)(a1 + 96), 2), v10, *(float32x4_t *)(a1 + 96), 3);
  v17 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(*(_OWORD *)(a1 + 112))), v13, *(float32x2_t *)(a1 + 112), 1), v11, *(float32x4_t *)(a1 + 112), 2), v10, *(float32x4_t *)(a1 + 112), 3);
  v10.i64[0] = vzip1q_s32(v14, v15).u64[0];
  v17.i64[0] ^= 0x8000000080000000;
  v10.i64[1] = v16.u32[0];
  v18 = (int8x16_t)vtrn2q_s32(v14, v15);
  v18.i32[2] = v16.i32[1];
  v19 = vzip2q_s32(v14, v15);
  v19.i32[2] = v16.i32[2];
  LODWORD(v20) = vdupq_lane_s32(*(int32x2_t *)&v18, 0).i32[3];
  *(_QWORD *)((char *)&v20 + 4) = vextq_s8(v18, (int8x16_t)0, 4uLL).u64[0];
  v19.i64[1] = vdupq_laneq_s32(v19, 2).u32[0];
  *(_OWORD *)(a2 + 16) = v20;
  *(int32x4_t *)(a2 + 32) = v19;
  *(float32x4_t *)a2 = v10;
  *(float32x2_t *)(a2 + 48) = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v10.f32, v17.f32[0]), *(float32x2_t *)v18.i8, *(float32x2_t *)v17.f32, 1), *(float32x2_t *)v19.i8, COERCE_FLOAT(v17.i32[2] ^ 0x80000000));
  *(_DWORD *)(a2 + 56) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v17.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.f32, 1), *(float32x2_t *)v16.i8, 1), (float32x2_t)(v17.i64[1] ^ 0xFFFFFFFF80000000), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)).u32[0];
  *(_DWORD *)(a2 + 60) = 1065353216;
  result.n128_u64[0] = v20;
  result.n128_u32[2] = DWORD2(v20);
  return result;
}

uint64_t sub_223FF9C98(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  _BOOL4 v19;

  v2 = vsubq_f32(*a1, *a2);
  v3 = vsubq_f32(a1[1], a2[1]);
  v4 = vsubq_f32(a1[2], a2[2]);
  v5 = vsubq_f32(a1[3], a2[3]);
  v6 = vmulq_f32(v5, v5);
  v7 = vmulq_f32(v4, v4);
  v8 = vmulq_f32(v3, v3);
  v9 = vmulq_f32(v2, v2);
  v6.f32[0] = v6.f32[3]
            + (float)(v6.f32[2]
                    + (float)(v6.f32[1]
                            + (float)(v6.f32[0]
                                    + (float)(v7.f32[3]
                                            + (float)(v7.f32[2]
                                                    + (float)(v7.f32[1]
                                                            + (float)(v7.f32[0]
                                                                    + (float)(v8.f32[3]
                                                                            + (float)(v8.f32[2]
                                                                                    + (float)(v8.f32[1]
                                                                                            + (float)(v8.f32[0] + (float)(v9.f32[3] + (float)(v9.f32[2] + vaddv_f32(*(float32x2_t *)v9.f32))))))))))))));
  v10 = vsubq_f32(a1[4], a2[4]);
  v11 = vsubq_f32(a1[5], a2[5]);
  v12 = vsubq_f32(a1[6], a2[6]);
  v13 = vsubq_f32(a1[7], a2[7]);
  v14 = vmulq_f32(v13, v13);
  v15 = vmulq_f32(v12, v12);
  v16 = vmulq_f32(v11, v11);
  v17 = vmulq_f32(v10, v10);
  v18 = v6.f32[0]
      + (float)(v14.f32[3]
              + (float)(v14.f32[2]
                      + (float)(v14.f32[1]
                              + (float)(v14.f32[0]
                                      + (float)(v15.f32[3]
                                              + (float)(v15.f32[2]
                                                      + (float)(v15.f32[1]
                                                              + (float)(v15.f32[0]
                                                                      + (float)(v16.f32[3]
                                                                              + (float)(v16.f32[2]
                                                                                      + (float)(v16.f32[1]
                                                                                              + (float)(v16.f32[0] + (float)(v17.f32[3] + (float)(v17.f32[2] + vaddv_f32(*(float32x2_t *)v17.f32)))))))))))))));
  v19 = v18 == 0.0;
  if (v18 < 0.0)
    v18 = 0.0 - v18;
  return v18 <= 0.000001 || v19;
}

void sub_223FF9DFC(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223FF9E20@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 2;
  *(_BYTE *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = 2;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a2 + 16) = _D0;
  *(_DWORD *)(a2 + 24) = 1065353216;
  *(_BYTE *)(a2 + 28) = 1;
  *(_WORD *)(a2 + 32) = 256;
  *(_BYTE *)(a2 + 34) = 1;
  *(_OWORD *)(a2 + 40) = xmmword_2245B95E0;
  *(_QWORD *)(a2 + 56) = 0x548960000;
  *(_BYTE *)(a2 + 64) = 1;
  *(_DWORD *)(a2 + 68) = 1077936128;
  *(_BYTE *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 76) = xmmword_2245B95F0;
  *(_BYTE *)(a2 + 92) = 1;
  *(_WORD *)(a2 + 96) = 1;
  *(_DWORD *)(a2 + 100) = 1045220557;
  *(_QWORD *)(a2 + 104) = 0x4000000000000000;
  *(_BYTE *)(a2 + 112) = 1;
  *(_WORD *)(a2 + 120) = 256;
  *(_BYTE *)(a2 + 122) = 1;
  *(_QWORD *)(a2 + 124) = 0x5000002EELL;
  *(_WORD *)(a2 + 132) = 1;
  *(_BYTE *)(a2 + 136) = 0;
  *(_BYTE *)(a2 + 140) = 0;
  *(_DWORD *)(a2 + 144) = 10;
  *(_BYTE *)(a2 + 152) = 2;
  *(_QWORD *)(a2 + 160) = 0;
  *(_BYTE *)(a2 + 168) = 0;
  *(_BYTE *)(a2 + 176) = 1;
  *(_QWORD *)(a2 + 180) = 0x23E05A8ACLL;
  *(_DWORD *)(a2 + 188) = 1028443341;
  *(_BYTE *)(a2 + 192) = 0;
  *(_BYTE *)(a2 + 196) = 0;
  *(_QWORD *)(a2 + 200) = 0x43E800000;
  *(_BYTE *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 0;
  *(_DWORD *)(a2 + 216) = 1056964608;
  *(_WORD *)(a2 + 220) = 256;
  *(_OWORD *)(a2 + 224) = xmmword_2245B9600;
  *(_BYTE *)(a2 + 248) = 0;
  *(_DWORD *)(a2 + 240) = 4;
  *(_QWORD *)(a2 + 252) = 0x2003E75C28FLL;
  *(_BYTE *)(a2 + 260) = 1;
  *(_QWORD *)(a2 + 264) = 0x240A00000;
  *(_DWORD *)(a2 + 272) = 1;
  *(_QWORD *)(a2 + 280) = 0x3FE8000000000000;
  *(_QWORD *)(a2 + 288) = 0x1300000007;
  *(_BYTE *)(a2 + 296) = 24;
  *(_QWORD *)(a2 + 300) = 0x40A0000040000000;
  switch((int)result)
  {
    case 15:
    case 17:
      *(_QWORD *)(a2 + 40) = 0x3FC999999999999ALL;
      *(_BYTE *)(a2 + 212) = 1;
      *(_BYTE *)(a2 + 72) = 1;
      *(_BYTE *)(a2 + 168) = 1;
      *(_BYTE *)(a2 + 152) = 1;
      *(_QWORD *)(a2 + 160) = 0x4072C00000000000;
      *(_BYTE *)(a2 + 64) = 0;
      *(_BYTE *)(a2 + 133) = 1;
      *(_BYTE *)(a2 + 220) = 1;
      *(_BYTE *)(a2 + 28) = 0;
      *(_BYTE *)(a2 + 8) = 1;
      *(_DWORD *)(a2 + 4) = 70;
      *(_BYTE *)(a2 + 248) = 1;
      break;
    case 19:
      __asm { FMOV            V0.2D, #0.5; jumptable 0000000223FF9FB0 case 19 }
      *(_OWORD *)(a2 + 40) = _Q0;
      *(_BYTE *)(a2 + 192) = 1;
      *(_BYTE *)(a2 + 196) = 1;
      *(_BYTE *)(a2 + 208) = 0;
      *(_BYTE *)(a2 + 176) = 0;
      *(_BYTE *)(a2 + 72) = 0;
      *(_BYTE *)(a2 + 97) = 1;
      *(_BYTE *)(a2 + 92) = 0;
      *(_DWORD *)(a2 + 76) = 1022739087;
      *(_QWORD *)(a2 + 232) = 0x40A000003E800000;
      break;
    case 20:
      *(_DWORD *)(a2 + 236) = 1074161254;
      break;
    default:
      return result;
  }
  return result;
}

void sub_223FFA05C(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9[2];
  char v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  char v16;
  char v17;
  void *__p[2];
  char v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  char v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unsigned __int8 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  char v37;

  if (a3 > 0.0)
  {
    if (a4 <= a3)
    {
      sub_223208674(v9, "z_max should be larger than z_min");
      v17 = 1;
      sub_2231A958C(0x21u, (__int128 *)v9, (uint64_t)&v27);
      *(_OWORD *)a2 = v27;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 112) = 0;
      if (v37)
      {
        *(_BYTE *)(a2 + 40) = 0;
        v7 = v30;
        if (v30)
        {
          *(_OWORD *)(a2 + 16) = v28;
          *(_QWORD *)(a2 + 32) = v29;
          v29 = 0;
          v28 = 0uLL;
          *(_BYTE *)(a2 + 40) = 1;
        }
        *(_BYTE *)(a2 + 48) = 0;
        *(_BYTE *)(a2 + 104) = 0;
        if (v36)
        {
          v8 = v33;
          *(_QWORD *)(a2 + 64) = v32;
          *(_OWORD *)(a2 + 48) = v31;
          v31 = 0uLL;
          *(_QWORD *)(a2 + 72) = v8;
          *(_OWORD *)(a2 + 80) = v34;
          *(_QWORD *)(a2 + 96) = v35;
          v32 = 0;
          v34 = 0uLL;
          v35 = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        *(_BYTE *)(a2 + 112) = 1;
        *(_BYTE *)(a2 + 120) = 0;
        if (v7 && SHIBYTE(v29) < 0)
          operator delete((void *)v28);
      }
      else
      {
        *(_BYTE *)(a2 + 120) = 0;
      }
      if (v17)
      {
        if (v16)
        {
          if (v15 < 0)
            operator delete(v14);
          if (v13 < 0)
            operator delete(v12);
        }
        if (v11)
        {
          if (v10 < 0)
            operator delete(v9[0]);
        }
      }
    }
    else
    {
      *(float *)(a1 + 232) = a3;
      *(float *)(a1 + 236) = a4;
      *(_BYTE *)(a2 + 120) = 1;
    }
    return;
  }
  sub_223208674(__p, "z_min should be a positive value");
  v26 = 1;
  sub_2231A958C(0x21u, (__int128 *)__p, (uint64_t)&v27);
  *(_OWORD *)a2 = v27;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (!v37)
  {
    *(_BYTE *)(a2 + 120) = 0;
    if (!v26)
      return;
LABEL_24:
    if (!v25)
      goto LABEL_27;
    if (v24 < 0)
    {
      operator delete(v23);
      if ((v22 & 0x80000000) == 0)
      {
LABEL_27:
        if (!v20)
          return;
        goto LABEL_28;
      }
    }
    else if ((v22 & 0x80000000) == 0)
    {
      goto LABEL_27;
    }
    operator delete(v21);
    if (!v20)
      return;
LABEL_28:
    if (v19 < 0)
      operator delete(__p[0]);
    return;
  }
  *(_BYTE *)(a2 + 40) = 0;
  v5 = v30;
  if (v30)
  {
    *(_OWORD *)(a2 + 16) = v28;
    *(_QWORD *)(a2 + 32) = v29;
    v29 = 0;
    v28 = 0uLL;
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  if (v36)
  {
    v6 = v33;
    *(_QWORD *)(a2 + 64) = v32;
    *(_OWORD *)(a2 + 48) = v31;
    v31 = 0uLL;
    *(_QWORD *)(a2 + 72) = v6;
    *(_OWORD *)(a2 + 80) = v34;
    *(_QWORD *)(a2 + 96) = v35;
    v32 = 0;
    v34 = 0uLL;
    v35 = 0;
    *(_BYTE *)(a2 + 104) = 1;
  }
  *(_BYTE *)(a2 + 112) = 1;
  *(_BYTE *)(a2 + 120) = 0;
  if (v5 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  if (v26)
    goto LABEL_24;
}

void sub_223FFA358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319FD28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FFA36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_22319FD28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FFA380(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  const void *v4;
  size_t v5;
  unsigned __int8 v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  size_t v33;
  size_t v34;
  _QWORD *p_dst;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  const char *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  const char *v88;
  const char *__src;
  uint64_t *v90[3];
  int v91;
  const char *v92;
  int v93;
  const char *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  __int128 v98;
  std::__shared_weak_count *v99;
  char *v100;
  std::__shared_weak_count *v101;
  _QWORD *__dst;
  __int128 v103;
  _BYTE object[24];
  __int128 v105;
  void *__p[2];
  unint64_t v107;
  char v108;
  _QWORD v109[5];

  v109[2] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2557892F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
  {
    __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
    __cxa_guard_release(&qword_2557892F0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CEAF0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEAF0))
  {
    sub_22455F53C(v90);
    sub_223174DE4(object, "cv3d.recon");
    sub_2232300E0(v90, (uint64_t)object, &qword_2540CEAE8);
    if ((object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_guard_release(&qword_2540CEAF0);
  }
  if (*(char *)(qword_2540CEAE8 + 39) < 0)
  {
    v4 = *(const void **)(qword_2540CEAE8 + 16);
    v5 = *(_QWORD *)(qword_2540CEAE8 + 24);
  }
  else
  {
    v4 = (const void *)(qword_2540CEAE8 + 16);
    v5 = *(unsigned __int8 *)(qword_2540CEAE8 + 39);
  }
  sub_223195728((uint64_t)&unk_255789280, v4, v5, "Manually emitted error log to error store (message: %s)", 0x37uLL);
  v6 = atomic_load((unsigned __int8 *)&qword_2540CEB00);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEB00))
  {
    sub_22455F53C(v90);
    sub_223174DE4(object, "cv3dapi.recon3d");
    sub_2232300E0(v90, (uint64_t)object, &qword_2540CEAF8);
    if ((object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_guard_release(&qword_2540CEB00);
  }
  v97 = qword_2540CEAF8;
  if (**(int **)(qword_2540CEAF8 + 56) <= 5)
  {
    v7 = *(unsigned __int8 *)(qword_2540CEAF8 + 72);
    v8 = sub_22322F254(qword_2540CEAF8, "OSLogSurrogateAppender", 1, 0);
    v9 = v8;
    if (v7 || v8)
    {
      v90[0] = &v97;
      v90[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
      v90[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
      v91 = 5;
      v92 = "unknown file";
      v93 = 29;
      v95 = 0;
      v96 = 0;
      v94 = "unknown function";
      if (*(char *)(a1 + 23) >= 0)
        v10 = (const char *)a1;
      else
        v10 = *(const char **)a1;
      v11 = *v90[0];
      v12 = (const char *)(*v90[0] + 16);
      v88 = v12;
      if (*(char *)(*v90[0] + 39) < 0)
      {
        v12 = *(const char **)(v11 + 16);
        v13 = *(_QWORD *)(v11 + 24);
        v15 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v15 & 1) != 0)
          goto LABEL_17;
      }
      else
      {
        v13 = *(unsigned __int8 *)(*v90[0] + 39);
        v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v14 & 1) != 0)
          goto LABEL_17;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v105 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_17:
      if (byte_255788F57 >= 0)
        v16 = (const char *)&xmmword_255788F40;
      else
        v16 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v17 = byte_255788F57;
      else
        v17 = *((_QWORD *)&xmmword_255788F40 + 1);
      __src = v12;
      *(_QWORD *)object = os_log_create(v16, v12);
      v18 = &object[8];
      if (v17 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v17 >= 0x17)
      {
        v19 = v9;
        v20 = v11;
        v21 = a1;
        v22 = v10;
        v23 = v7;
        v24 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17)
          v24 = v17 | 7;
        v25 = v24 + 1;
        v18 = operator new(v24 + 1);
        *(_QWORD *)&object[16] = v17;
        *(_QWORD *)&v105 = v25 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v18;
        v7 = v23;
        v10 = v22;
        a1 = v21;
        v11 = v20;
        v9 = v19;
      }
      else
      {
        BYTE7(v105) = v17;
        if (!v17)
        {
LABEL_31:
          v18[v17] = 0;
          BYTE8(v105) = 1;
          v26 = __p;
          if (v13 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v13 >= 0x17)
          {
            v28 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v13 | 7) != 0x17)
              v28 = v13 | 7;
            v29 = v28 + 1;
            v26 = operator new(v28 + 1);
            __p[1] = (void *)v13;
            v107 = v29 | 0x8000000000000000;
            __p[0] = v26;
          }
          else
          {
            HIBYTE(v107) = v13;
            if (!v13)
            {
              LOBYTE(__p[0]) = 0;
              v108 = 1;
              v27 = *(NSObject **)object;
              if ((SHIBYTE(v107) & 0x80000000) == 0)
                goto LABEL_35;
              goto LABEL_41;
            }
          }
          memmove(v26, __src, v13);
          *((_BYTE *)v26 + v13) = 0;
          v108 = 1;
          v27 = *(NSObject **)object;
          if ((SHIBYTE(v107) & 0x80000000) == 0)
          {
LABEL_35:
            if (!BYTE8(v105))
              goto LABEL_44;
            goto LABEL_42;
          }
LABEL_41:
          operator delete(__p[0]);
          if (!BYTE8(v105))
            goto LABEL_44;
LABEL_42:
          if (SBYTE7(v105) < 0)
            operator delete(*(void **)&object[8]);
LABEL_44:
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (!v9 || !*(_QWORD *)(v9 + 24))
          {
            os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
            *(_DWORD *)object = 136315138;
            *(_QWORD *)&object[4] = v10;
            v36 = (void *)_os_log_send_and_compose_impl();
            if (v36)
              free(v36);
            goto LABEL_118;
          }
          v30 = _os_log_pack_size();
          v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
          v32 = (std::__shared_weak_count *)operator new();
          v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v32->__shared_owners_ = 0;
          v32->__shared_weak_owners_ = 0;
          v32[1].__vftable = v31;
          *(_QWORD *)&v98 = v31;
          *((_QWORD *)&v98 + 1) = v31;
          v100 = 0;
          v101 = 0;
          v99 = v32;
          v33 = strlen(v10);
          if (v33 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v34 = v33;
          if (v33 >= 0x17)
          {
            v37 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v33 | 7) != 0x17)
              v37 = v33 | 7;
            v38 = v37 + 1;
            p_dst = operator new(v37 + 1);
            *(_QWORD *)&v103 = v34;
            *((_QWORD *)&v103 + 1) = v38 | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v103) = v33;
            p_dst = &__dst;
            if (!v33)
            {
LABEL_58:
              *((_BYTE *)p_dst + v34) = 0;
              v39 = __dst;
              v109[0] = v103;
              *(_QWORD *)((char *)v109 + 7) = *(_QWORD *)((char *)&v103 + 7);
              v40 = HIBYTE(v103);
              v41 = operator new(0x38uLL);
              v41[1] = 0;
              v41[2] = 0;
              v41[3] = off_24EC1FA48;
              *v41 = &off_24EC1F9F8;
              v42 = v109[0];
              v41[4] = v39;
              v41[5] = v42;
              *(_QWORD *)((char *)v41 + 47) = *(_QWORD *)((char *)v109 + 7);
              *((_BYTE *)v41 + 55) = v40;
              v109[0] = 0;
              *(_QWORD *)((char *)v109 + 7) = 0;
              v43 = v101;
              v100 = (char *)(v41 + 3);
              v101 = (std::__shared_weak_count *)v41;
              if (v43)
              {
                p_shared_owners = (unint64_t *)&v43->__shared_owners_;
                do
                  v45 = __ldaxr(p_shared_owners);
                while (__stlxr(v45 - 1, p_shared_owners));
                if (!v45)
                {
                  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                  std::__shared_weak_count::__release_weak(v43);
                }
              }
              *(_OWORD *)object = v98;
              v46 = v100;
              *(_QWORD *)&object[16] = v99;
              if (v99)
              {
                v47 = (unint64_t *)&v99->__shared_owners_;
                do
                  v48 = __ldxr(v47);
                while (__stxr(v48 + 1, v47));
              }
              v49 = v101;
              *(_QWORD *)&v105 = v46;
              *((_QWORD *)&v105 + 1) = v101;
              if (v101)
              {
                v50 = (unint64_t *)&v101->__shared_owners_;
                do
                  v51 = __ldxr(v50);
                while (__stxr(v51 + 1, v50));
                __p[0] = v46;
                do
                  v52 = __ldaxr(v50);
                while (__stlxr(v52 - 1, v50));
                if (!v52)
                {
                  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                  std::__shared_weak_count::__release_weak(v49);
                }
              }
              else
              {
                __p[0] = v46;
              }
              v53 = v99;
              if (v99)
              {
                v54 = (unint64_t *)&v99->__shared_owners_;
                do
                  v55 = __ldaxr(v54);
                while (__stlxr(v55 - 1, v54));
                if (!v55)
                {
                  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                  std::__shared_weak_count::__release_weak(v53);
                }
              }
              v56 = *(_QWORD *)object;
              if (*((char *)__p[0] + 31) >= 0)
                v57 = (char *)__p[0] + 8;
              else
                v57 = (char *)*((_QWORD *)__p[0] + 1);
              v58 = _os_log_pack_fill();
              *(_DWORD *)v58 = 136315138;
              *(_QWORD *)(v58 + 4) = v57;
              v59 = operator new();
              v60 = *(unsigned __int8 *)(v11 + 39);
              v61 = *(const char **)(v11 + 16);
              v62 = *(_QWORD *)(v11 + 24);
              v63 = v105;
              *(_OWORD *)(v59 + 8) = *(_OWORD *)&object[8];
              if ((v60 & 0x80u) != 0)
                v60 = v62;
              else
                v61 = v88;
              *(_QWORD *)v59 = v56;
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v59 + 24) = v63;
              v105 = 0uLL;
              *(_QWORD *)(v59 + 40) = v61;
              *(_QWORD *)(v59 + 48) = v60;
              *(_BYTE *)(v59 + 56) = 16;
              __dst = 0;
              *(_QWORD *)&v98 = v59;
              (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), &v98);
              v64 = v98;
              *(_QWORD *)&v98 = 0;
              if (v64)
              {
                v65 = *(std::__shared_weak_count **)(v64 + 32);
                if (v65)
                {
                  v66 = (unint64_t *)&v65->__shared_owners_;
                  do
                    v67 = __ldaxr(v66);
                  while (__stlxr(v67 - 1, v66));
                  if (!v67)
                  {
                    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                    std::__shared_weak_count::__release_weak(v65);
                  }
                }
                v68 = *(std::__shared_weak_count **)(v64 + 16);
                if (v68)
                {
                  v69 = (unint64_t *)&v68->__shared_owners_;
                  do
                    v70 = __ldaxr(v69);
                  while (__stlxr(v70 - 1, v69));
                  if (!v70)
                  {
                    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                    std::__shared_weak_count::__release_weak(v68);
                  }
                }
                MEMORY[0x227684CE8](v64, 0x10F0C40B62ED6C6);
                v71 = __dst;
                __dst = 0;
                if (v71)
                {
                  v72 = (std::__shared_weak_count *)v71[4];
                  if (v72)
                  {
                    v73 = (unint64_t *)&v72->__shared_owners_;
                    do
                      v74 = __ldaxr(v73);
                    while (__stlxr(v74 - 1, v73));
                    if (!v74)
                    {
                      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                      std::__shared_weak_count::__release_weak(v72);
                    }
                  }
                  v75 = (std::__shared_weak_count *)v71[2];
                  if (v75)
                  {
                    v76 = (unint64_t *)&v75->__shared_owners_;
                    do
                      v77 = __ldaxr(v76);
                    while (__stlxr(v77 - 1, v76));
                    if (!v77)
                    {
                      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                      std::__shared_weak_count::__release_weak(v75);
                    }
                  }
                  MEMORY[0x227684CE8](v71, 0x10F0C40B62ED6C6);
                }
              }
              v78 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
              if (*((_QWORD *)&v105 + 1))
              {
                v79 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
                do
                  v80 = __ldaxr(v79);
                while (__stlxr(v80 - 1, v79));
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }
              v81 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v82 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v83 = __ldaxr(v82);
                while (__stlxr(v83 - 1, v82));
                if (!v83)
                {
                  ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                  std::__shared_weak_count::__release_weak(v81);
                }
              }
LABEL_118:
              if (v7)
              {
                if (*(char *)(a1 + 23) >= 0)
                  v84 = (const char *)a1;
                else
                  v84 = *(const char **)a1;
                sub_22322C138((uint64_t)v90, "Manually emitted error log to error store (message: %s)", v84);
                sub_223182C08((uint64_t)v90);
              }
              sub_223182C08((uint64_t)v90);
              v85 = v96;
              if (v96)
              {
                v86 = (unint64_t *)&v96->__shared_owners_;
                do
                  v87 = __ldaxr(v86);
                while (__stlxr(v87 - 1, v86));
                if (!v87)
                {
                  ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                  std::__shared_weak_count::__release_weak(v85);
                }
              }
              return;
            }
          }
          memcpy(p_dst, v10, v34);
          goto LABEL_58;
        }
      }
      memmove(v18, v16, v17);
      goto LABEL_31;
    }
  }
}

void sub_223FFADC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37)
  {
    if (a36 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_223FFAE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CEB00);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CEB00);
  _Unwind_Resume(a1);
}

void sub_223FFAE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CEAF0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CEAF0);
  _Unwind_Resume(a1);
}

void sub_223FFAEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_22319A054(&a23);
  sub_22319A054(&a28);
  sub_223199DE8((uint64_t)&a31);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_223FFAEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  int v24;

  if (v24 < 0)
    operator delete(v23);
  sub_223199DE8((uint64_t)&a23);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_223FFAF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *object,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223FFAFD8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v3;
  _QWORD __src[35];

  *(_QWORD *)a2 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_2245C7810;
  *(_WORD *)(a2 + 24) = 1;
  *(_DWORD *)(a2 + 28) = 1065353216;
  *(_QWORD *)(a2 + 32) = 0x100000000;
  *(_DWORD *)(a2 + 40) = 0x1000000;
  *(_WORD *)(a2 + 44) = 0;
  *(_BYTE *)(a2 + 48) = 1;
  *(_BYTE *)(a2 + 52) = 0;
  *(_BYTE *)(a2 + 84) = 0;
  *(_DWORD *)(a2 + 88) = 0x20000;
  *(_BYTE *)(a2 + 92) = 0;
  *(_QWORD *)(a2 + 96) = 0x409000003E4CCCCDLL;
  *(_WORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 108) = 1;
  *(_WORD *)(a2 + 116) = 0;
  *(_BYTE *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 124) = 0x3D8F5C29BCA3D70ALL;
  *(_WORD *)(a2 + 132) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  *(_WORD *)(a2 + 144) = 2816;
  *(_QWORD *)(a2 + 152) = 0x4013000000000000;
  *(_DWORD *)(a2 + 160) = 2139095039;
  *(_QWORD *)(a2 + 164) = -1;
  *(_WORD *)(a2 + 172) = 769;
  *(_BYTE *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 188) = xmmword_2245C7820;
  *(_DWORD *)(a2 + 204) = 0x1000000;
  *(_QWORD *)(a2 + 208) = 0x3FD0000000000000;
  *(_QWORD *)(a2 + 216) = 0x3D4CCCCD00000000;
  *(_BYTE *)(a2 + 224) = 1;
  *(_BYTE *)(a2 + 228) = 0;
  *(_BYTE *)(a2 + 232) = 0;
  *(_BYTE *)(a2 + 236) = 0;
  *(_BYTE *)(a2 + 240) = 0;
  *(_DWORD *)(a2 + 244) = 16777472;
  *(_DWORD *)(a2 + 248) = 0;
  *(_BYTE *)(a2 + 252) = 0;
  *(_BYTE *)(a2 + 256) = 0;
  *(_BYTE *)(a2 + 260) = 0;
  *(_BYTE *)(a2 + 264) = 0;
  *(_DWORD *)(a2 + 268) = 65792;
  *(_BYTE *)(a2 + 272) = 0;
  switch((int)result)
  {
    case 5:
      goto LABEL_6;
    case 7:
      sub_223FFAFD8(__src, 5);
      result = (uint64_t)memcpy((void *)a2, __src, 0x111uLL);
      *(_DWORD *)(a2 + 20) = 2139095039;
      return result;
    case 12:
    case 13:
      *(_QWORD *)a2 = 0x3FB999999999999ALL;
      *(_DWORD *)(a2 + 108) = 1;
      *(_BYTE *)(a2 + 218) = 1;
      *(_WORD *)(a2 + 216) = 256;
      *(_BYTE *)(a2 + 132) = 0;
      *(_DWORD *)(a2 + 8) = 1024416809;
      *(_BYTE *)(a2 + 40) = 0;
      goto LABEL_6;
    case 15:
    case 17:
      sub_223FFAFD8(__src, 12);
      memcpy((void *)a2, __src, 0x111uLL);
      *(_BYTE *)(a2 + 120) = 0;
      *(_QWORD *)(a2 + 124) = 0x3DA3D70ABD75C28FLL;
      *(_BYTE *)(a2 + 132) = 0;
      *(_BYTE *)(a2 + 136) = 1;
      *(_DWORD *)(a2 + 8) = 1031127695;
      *(_BYTE *)(a2 + 42) = 1;
      *(_BYTE *)(a2 + 45) = 1;
      *(_DWORD *)(a2 + 112) = 1065353216;
      *(_WORD *)(a2 + 116) = 257;
      *(_DWORD *)(a2 + 236) = 1039516303;
      *(_BYTE *)(a2 + 240) = 1;
      *(_DWORD *)(a2 + 260) = 1084227584;
      *(_BYTE *)(a2 + 264) = 1;
      *(_BYTE *)(a2 + 224) = 2;
      *(_BYTE *)(a2 + 244) = 1;
      *(_WORD *)(a2 + 40) = 257;
      *(_BYTE *)(a2 + 105) |= 1u;
      result = sub_223FFB370(a2, 1);
      if ((result & 1) == 0)
      {
        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 135, (uint64_t)"res", 3, (uint64_t)"Failed to configure per-frame mesh semantics output. Check that MeshingConfig.integrate_attribute has the attribute enabled.", 124, (void (*)(void **))sub_22457406C);
        if ((_DWORD)result)
          abort();
      }
      *(_BYTE *)(a2 + 268) = 1;
      *(_BYTE *)(a2 + 206) = 1;
      if (*(_BYTE *)(a2 + 48))
      {
LABEL_6:
        *(_BYTE *)(a2 + 44) = 1;
        *(_DWORD *)(a2 + 20) = 2139095039;
        *(_DWORD *)(a2 + 228) = 2139095039;
        *(_BYTE *)(a2 + 232) = 1;
      }
      return result;
    case 16:
      *(_BYTE *)(a2 + 48) = 0;
      v3 = *(unsigned __int8 *)(a2 + 84);
      *(_DWORD *)(a2 + 52) = 1;
      *(_WORD *)(a2 + 56) = 8;
      *(_DWORD *)(a2 + 60) = 1;
      *(_QWORD *)(a2 + 64) = 0x404000003D75C28FLL;
      *(_DWORD *)(a2 + 72) = 1061997773;
      *(_WORD *)(a2 + 76) = 0;
      *(_DWORD *)(a2 + 80) = 3;
      if (!v3)
        *(_BYTE *)(a2 + 84) = 1;
      return result;
    case 19:
      sub_223FFAFD8(__src, 12);
      result = (uint64_t)memcpy((void *)a2, __src, 0x111uLL);
      goto LABEL_13;
    case 20:
      sub_223FFAFD8(__src, 12);
      result = (uint64_t)memcpy((void *)a2, __src, 0x111uLL);
      *(_QWORD *)(a2 + 96) = 0x400666663E4CCCCDLL;
LABEL_13:
      *(_BYTE *)(a2 + 218) = 0;
      *(_BYTE *)(a2 + 43) = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_223FFB370(uint64_t a1, int a2)
{
  int v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  char v10;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  void *v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  size_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD v62[3];
  int v63;
  const char *v64;
  int v65;
  const char *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  void *object;
  void *v71[2];
  __int128 v72;
  void *__p[2];
  unint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;

  if (!a2)
  {
    v10 = *(_BYTE *)(a1 + 104) & 0xFE;
LABEL_12:
    *(_BYTE *)(a1 + 104) = v10;
    return 1;
  }
  if ((*(_BYTE *)(a1 + 105) & 1) != 0)
  {
    v10 = *(_BYTE *)(a1 + 104) | 1;
    goto LABEL_12;
  }
  sub_223FFCAC0(&v69);
  if (**(int **)(v69 + 56) <= 3)
  {
    v2 = *(unsigned __int8 *)(v69 + 72);
    v3 = sub_22322F254(v69, "OSLogSurrogateAppender", 1, 0);
    if (v2 || v3 != 0)
    {
      v5 = v3;
      v62[0] = &v69;
      v62[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v62[2] = std::chrono::system_clock::now().__d_.__rep_;
      v63 = 3;
      v64 = "unknown file";
      v65 = 401;
      v67 = 0;
      v68 = 0;
      v66 = "unknown function";
      v6 = v69;
      v7 = v69 + 16;
      if (*(char *)(v69 + 39) < 0)
      {
        v9 = *(const char **)(v69 + 16);
        v8 = *(_QWORD *)(v69 + 24);
      }
      else
      {
        v8 = *(unsigned __int8 *)(v69 + 39);
        v9 = (const char *)(*(_QWORD *)v62[0] + 16);
      }
      v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&object);
        sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
        if ((_BYTE)v72 && SHIBYTE(v71[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v13 = (const char *)&xmmword_255788F40;
      else
        v13 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v14 = byte_255788F57;
      else
        v14 = *((_QWORD *)&xmmword_255788F40 + 1);
      object = os_log_create(v13, v9);
      v15 = v71;
      if (v14 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v14 >= 0x17)
      {
        v16 = v5;
        v17 = v9;
        v18 = v6;
        v19 = v2;
        v20 = v7;
        v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v21 = v14 | 7;
        v22 = v21 + 1;
        v15 = operator new(v21 + 1);
        v71[1] = (void *)v14;
        *(_QWORD *)&v72 = v22 | 0x8000000000000000;
        v71[0] = v15;
        v7 = v20;
        v2 = v19;
        v6 = v18;
        v9 = v17;
        v5 = v16;
      }
      else
      {
        BYTE7(v72) = v14;
        if (!v14)
        {
LABEL_29:
          *((_BYTE *)v15 + v14) = 0;
          BYTE8(v72) = 1;
          v23 = __p;
          if (v8 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v8 >= 0x17)
          {
            v24 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v8 | 7) != 0x17)
              v24 = v8 | 7;
            v25 = v24 + 1;
            v23 = operator new(v24 + 1);
            __p[1] = (void *)v8;
            v74 = v25 | 0x8000000000000000;
            __p[0] = v23;
          }
          else
          {
            HIBYTE(v74) = v8;
            if (!v8)
              goto LABEL_37;
          }
          memmove(v23, v9, v8);
LABEL_37:
          *((_BYTE *)v23 + v8) = 0;
          v75 = 1;
          v26 = object;
          if (SHIBYTE(v74) < 0)
            operator delete(__p[0]);
          if (BYTE8(v72) && SBYTE7(v72) < 0)
            operator delete(v71[0]);
          if (object)
            os_release(object);
          if (v5 && *(_QWORD *)(v5 + 24))
          {
            v27 = _os_log_pack_size();
            v28 = (std::__shared_weak_count_vtbl *)operator new(v27, (std::align_val_t)8uLL);
            v29 = (std::__shared_weak_count *)operator new();
            v30 = v29;
            v29->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v29->__shared_owners_;
            v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v29->__shared_weak_owners_ = 0;
            v29[1].__vftable = v28;
            object = v28;
            v71[0] = v28;
            v71[1] = v29;
            do
              v32 = __ldxr(p_shared_owners);
            while (__stxr(v32 + 1, p_shared_owners));
            v72 = 0uLL;
            __p[0] = 0;
            do
              v33 = __ldaxr(p_shared_owners);
            while (__stlxr(v33 - 1, p_shared_owners));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v30);
            }
            v34 = object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v35 = operator new();
            v36 = *(unsigned __int8 *)(v6 + 39);
            if ((v36 & 0x80u) == 0)
              v37 = v7;
            else
              v37 = *(_QWORD *)(v6 + 16);
            if ((v36 & 0x80u) != 0)
              v36 = *(_QWORD *)(v6 + 24);
            *(_QWORD *)v35 = v34;
            *(_OWORD *)(v35 + 8) = *(_OWORD *)v71;
            v71[0] = 0;
            v71[1] = 0;
            *(_OWORD *)(v35 + 24) = v72;
            v72 = 0uLL;
            *(_QWORD *)(v35 + 40) = v37;
            *(_QWORD *)(v35 + 48) = v36;
            *(_BYTE *)(v35 + 56) = 1;
            v76 = 0;
            v77 = v35;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), &v77);
            v38 = v77;
            v77 = 0;
            if (v38)
            {
              v39 = *(std::__shared_weak_count **)(v38 + 32);
              if (v39)
              {
                v40 = (unint64_t *)&v39->__shared_owners_;
                do
                  v41 = __ldaxr(v40);
                while (__stlxr(v41 - 1, v40));
                if (!v41)
                {
                  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                  std::__shared_weak_count::__release_weak(v39);
                }
              }
              v42 = *(std::__shared_weak_count **)(v38 + 16);
              if (v42)
              {
                v43 = (unint64_t *)&v42->__shared_owners_;
                do
                  v44 = __ldaxr(v43);
                while (__stlxr(v44 - 1, v43));
                if (!v44)
                {
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                }
              }
              MEMORY[0x227684CE8](v38, 0x10F0C40B62ED6C6);
              v45 = v76;
              v76 = 0;
              if (v45)
              {
                v46 = *(std::__shared_weak_count **)(v45 + 32);
                if (v46)
                {
                  v47 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v48 = __ldaxr(v47);
                  while (__stlxr(v48 - 1, v47));
                  if (!v48)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                }
                v49 = *(std::__shared_weak_count **)(v45 + 16);
                if (v49)
                {
                  v50 = (unint64_t *)&v49->__shared_owners_;
                  do
                    v51 = __ldaxr(v50);
                  while (__stlxr(v51 - 1, v50));
                  if (!v51)
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                }
                MEMORY[0x227684CE8](v45, 0x10F0C40B62ED6C6);
              }
            }
            v52 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
            if (*((_QWORD *)&v72 + 1))
            {
              v53 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v55 = (std::__shared_weak_count *)v71[1];
            if (v71[1])
            {
              v56 = (unint64_t *)((char *)v71[1] + 8);
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
          }
          else
          {
            os_log_type_enabled(v26, OS_LOG_TYPE_INFO);
            LOWORD(object) = 0;
            v58 = (void *)_os_log_send_and_compose_impl();
            if (v58)
              free(v58);
          }
          if (v2)
          {
            sub_22322C138((uint64_t)v62, "Cannot enable per frame semantics output when it is not integrated.");
            sub_223182C08((uint64_t)v62);
          }
          sub_223182C08((uint64_t)v62);
          v59 = v68;
          if (v68)
          {
            v60 = (unint64_t *)&v68->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          return 0;
        }
      }
      memmove(v15, v13, v14);
      goto LABEL_29;
    }
  }
  return 0;
}

void sub_223FFBA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223FFBA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v3 - 96));
  sub_22319A054((uint64_t *)(v3 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FFBAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x227684CE8](v3, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FFBAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FFBB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FFBB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_223FFBB64(uint64_t a1)
{
  float v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  void **p_dst;
  uint64_t v13;
  unint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **__dst;
  size_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  const void *v34;
  unint64_t v35;
  void *__p[2];
  __int128 v37;
  int v38;
  uint64_t v39[19];
  void *v40;
  void *v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  if (!*(_BYTE *)(a1 + 184))
    return 0;
  v2 = ceilf((float)((float)(*(float *)(a1 + 188) + *(float *)(a1 + 188)) / 0.24) + 0.001);
  v3 = (float)((float)((float)(v2 + 1.0) * (float)(v2 + 1.0))
                           * (float)(ceilf((float)((float)(*(float *)(a1 + 192) + *(float *)(a1 + 196)) / 0.24) + 0.001)
                                   + 1.0));
  if (!(_DWORD)v3)
    return 0;
  v40 = 0;
  v41 = 0;
  v43 = 0;
  v42 = 0;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  sub_224001330(&v40, v3);
  v4 = MEMORY[0x24BEDB870];
  v5 = MEMORY[0x24BEDB870] + 64;
  v6 = (uint64_t *)MEMORY[0x24BEDB800];
  v7 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v8 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v39[0] = MEMORY[0x24BEDB870] + 64;
  v30 = v7;
  *(uint64_t *)((char *)&v30 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v30 + *(_QWORD *)(v30 - 24));
  std::ios_base::init(v9, &v31);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v30 = v4 + 24;
  v39[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x24BEDB848];
  v31 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v37 = 0u;
  v38 = 16;
  if ((sub_224000E28((uint64_t *)&v40, (uint64_t)&v30) & 1) == 0
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 294, (uint64_t)"result.SaveToStream(ss)", 23, (uint64_t)"Failed to serialize occupancy data", 34, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if ((v38 & 0x10) != 0)
  {
    v14 = *((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1) < v35)
    {
      *((_QWORD *)&v37 + 1) = v35;
      v14 = v35;
    }
    v15 = v34;
    v11 = v14 - (_QWORD)v34;
    if (v14 - (unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_47;
  }
  else
  {
    if ((v38 & 8) == 0)
    {
      v11 = 0;
      HIBYTE(v29) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_19;
    }
    v15 = v32;
    v11 = v33 - (_QWORD)v32;
    if ((unint64_t)(v33 - (_QWORD)v32) >= 0x7FFFFFFFFFFFFFF8)
LABEL_47:
      sub_22316DBC0();
  }
  if (v11 >= 0x17)
  {
    v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v16 = v11 | 7;
    v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    v28 = v11;
    v29 = v17 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_18;
  }
  HIBYTE(v29) = v11;
  p_dst = (void **)&__dst;
  if (v11)
LABEL_18:
    memmove(p_dst, v15, v11);
LABEL_19:
  *((_BYTE *)p_dst + v11) = 0;
  v18 = *(unsigned __int8 *)(a1 + 204);
  v13 = HIBYTE(v29);
  if (v18)
  {
    if (v29 >= 0)
      v19 = HIBYTE(v29);
    else
      v19 = v28;
    v13 = (v19 + 102400);
    if ((v29 & 0x8000000000000000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
  if (v29 < 0)
  {
    v13 = v28;
LABEL_27:
    operator delete(__dst);
  }
LABEL_28:
  v30 = *v6;
  *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = v6[3];
  v31 = v10 + 16;
  if (SBYTE7(v37) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x227684BE0](v39);
  if (*((_QWORD *)&v45 + 1))
  {
    *(_QWORD *)&v46 = *((_QWORD *)&v45 + 1);
    operator delete(*((void **)&v45 + 1));
  }
  v20 = v44;
  if ((_QWORD)v44)
  {
    v21 = *((_QWORD *)&v44 + 1);
    v22 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) != (_QWORD)v44)
    {
      do
      {
        v23 = *(std::__shared_weak_count **)(v21 - 96);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 120;
      }
      while (v21 != v20);
      v22 = (void *)v44;
    }
    *((_QWORD *)&v44 + 1) = v20;
    operator delete(v22);
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  return v13;
}

void sub_223FFBF08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::ostream::~ostream();
  MEMORY[0x227684BE0](v1);
  sub_223919EBC(v2 - 168);
  _Unwind_Resume(a1);
}

void sub_223FFBF38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223919EBC(v1 - 168);
  _Unwind_Resume(a1);
}

void sub_223FFBF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_2232BBE74((uint64_t)va);
  sub_223919EBC(v5 - 168);
  _Unwind_Resume(a1);
}

BOOL sub_223FFBF6C(double *a1, CFTypeRef *a2, double a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a3 >= 0.0)
  {
    *a1 = a3;
    v9 = 1;
    if (a3 != 0.0 && a3 > 0.0000001)
      v9 = vcvtad_u64_f64(a3 / 0.100000001);
    return sub_223FFDB9C((uint64_t)a1, v9, a2);
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245C6420;
    strcpy((char *)__p, "Meshing period is non-positive");
    v4 = (char *)operator new(0x68uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 33;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_223FFC134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223FFC170(uint64_t a1, CFTypeRef *a2, float a3, float a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p;
  __int128 v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a3 <= 0.0)
  {
    __p = operator new(0x28uLL);
    v17 = xmmword_2245C77E0;
    strcpy((char *)__p, "z_min should be a positive value");
    v6 = (char *)operator new(0x68uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 33;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    if (a4 > a3)
    {
      *(float *)(a1 + 96) = a3;
      *(float *)(a1 + 100) = a4;
      return 1;
    }
    __p = operator new(0x28uLL);
    v17 = xmmword_2245C6450;
    strcpy((char *)__p, "z_max should be larger than z_min");
    v11 = (char *)operator new(0x68uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 33;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v13 = v19;
      if (v19)
      {
        v14 = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p);
  return 0;
}

void sub_223FFC43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223FFC484(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (*(_BYTE *)(a1 + 48))
  {
    if (a3 > 0.0 && a3 <= 255.0)
    {
      *(float *)(a1 + 12) = a3;
      return 1;
    }
    else
    {
      __p[0] = operator new(0x30uLL);
      *(_OWORD *)&__p[1] = xmmword_2245C4540;
      strcpy((char *)__p[0], "Maximum voxel weight should be in range [0,255]");
      v5 = (char *)operator new(0x68uLL);
      strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp");
      if (a2)
      {
        *(_QWORD *)&v19.__val_ = 33;
        v19.__cat_ = std::generic_category();
        sub_2245321DC(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v6 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v6;
        v7 = v18;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
      }
      operator delete(v5);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      return 0;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "SDF config must exist");
    v11 = (char *)operator new(0x68uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp");
    if (a2)
    {
      *(_QWORD *)&v19.__val_ = 1;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v13 = v18;
      if (v18)
      {
        v14 = (unint64_t *)&v18->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return 0;
  }
}

void sub_223FFC76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223FFC7B4(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (*(_BYTE *)(a1 + 48))
  {
    if (a3 > 0.0)
    {
      *(float *)(a1 + 20) = a3;
      return 1;
    }
    __p[0] = operator new(0x38uLL);
    *(_OWORD *)&__p[1] = xmmword_2245C44A0;
    strcpy((char *)__p[0], "Coarse voxel threshold should be a positive value");
    v10 = (char *)operator new(0x68uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 33;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v11;
      v12 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "SDF config must exist");
    v5 = (char *)operator new(0x68uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 1;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v17;
      if (v17)
      {
        v8 = (unint64_t *)&v17->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p[0]);
  return 0;
}

void sub_223FFCA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223FFCAC0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CEB10);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEB10))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CEB08);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CEB10);
  }
  *a1 = qword_2540CEB08;
}

void sub_223FFCB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CEB10);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CEB10);
  _Unwind_Resume(a1);
}

uint64_t sub_223FFCBB4(uint64_t a1, int a2)
{
  int v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  char v10;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  void *v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  size_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD v62[3];
  int v63;
  const char *v64;
  int v65;
  const char *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  void *object;
  void *v71[2];
  __int128 v72;
  void *__p[2];
  unint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;

  if (!a2)
  {
    v10 = *(_BYTE *)(a1 + 104) & 0xFB;
LABEL_12:
    *(_BYTE *)(a1 + 104) = v10;
    return 1;
  }
  if ((*(_BYTE *)(a1 + 105) & 4) != 0)
  {
    v10 = *(_BYTE *)(a1 + 104) | 4;
    goto LABEL_12;
  }
  sub_223FFCAC0(&v69);
  if (**(int **)(v69 + 56) <= 3)
  {
    v2 = *(unsigned __int8 *)(v69 + 72);
    v3 = sub_22322F254(v69, "OSLogSurrogateAppender", 1, 0);
    if (v2 || v3 != 0)
    {
      v5 = v3;
      v62[0] = &v69;
      v62[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v62[2] = std::chrono::system_clock::now().__d_.__rep_;
      v63 = 3;
      v64 = "unknown file";
      v65 = 419;
      v67 = 0;
      v68 = 0;
      v66 = "unknown function";
      v6 = v69;
      v7 = v69 + 16;
      if (*(char *)(v69 + 39) < 0)
      {
        v9 = *(const char **)(v69 + 16);
        v8 = *(_QWORD *)(v69 + 24);
      }
      else
      {
        v8 = *(unsigned __int8 *)(v69 + 39);
        v9 = (const char *)(*(_QWORD *)v62[0] + 16);
      }
      v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&object);
        sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
        if ((_BYTE)v72 && SHIBYTE(v71[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v13 = (const char *)&xmmword_255788F40;
      else
        v13 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v14 = byte_255788F57;
      else
        v14 = *((_QWORD *)&xmmword_255788F40 + 1);
      object = os_log_create(v13, v9);
      v15 = v71;
      if (v14 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v14 >= 0x17)
      {
        v16 = v5;
        v17 = v9;
        v18 = v6;
        v19 = v2;
        v20 = v7;
        v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v21 = v14 | 7;
        v22 = v21 + 1;
        v15 = operator new(v21 + 1);
        v71[1] = (void *)v14;
        *(_QWORD *)&v72 = v22 | 0x8000000000000000;
        v71[0] = v15;
        v7 = v20;
        v2 = v19;
        v6 = v18;
        v9 = v17;
        v5 = v16;
      }
      else
      {
        BYTE7(v72) = v14;
        if (!v14)
        {
LABEL_29:
          *((_BYTE *)v15 + v14) = 0;
          BYTE8(v72) = 1;
          v23 = __p;
          if (v8 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v8 >= 0x17)
          {
            v24 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v8 | 7) != 0x17)
              v24 = v8 | 7;
            v25 = v24 + 1;
            v23 = operator new(v24 + 1);
            __p[1] = (void *)v8;
            v74 = v25 | 0x8000000000000000;
            __p[0] = v23;
          }
          else
          {
            HIBYTE(v74) = v8;
            if (!v8)
              goto LABEL_37;
          }
          memmove(v23, v9, v8);
LABEL_37:
          *((_BYTE *)v23 + v8) = 0;
          v75 = 1;
          v26 = object;
          if (SHIBYTE(v74) < 0)
            operator delete(__p[0]);
          if (BYTE8(v72) && SBYTE7(v72) < 0)
            operator delete(v71[0]);
          if (object)
            os_release(object);
          if (v5 && *(_QWORD *)(v5 + 24))
          {
            v27 = _os_log_pack_size();
            v28 = (std::__shared_weak_count_vtbl *)operator new(v27, (std::align_val_t)8uLL);
            v29 = (std::__shared_weak_count *)operator new();
            v30 = v29;
            v29->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v29->__shared_owners_;
            v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v29->__shared_weak_owners_ = 0;
            v29[1].__vftable = v28;
            object = v28;
            v71[0] = v28;
            v71[1] = v29;
            do
              v32 = __ldxr(p_shared_owners);
            while (__stxr(v32 + 1, p_shared_owners));
            v72 = 0uLL;
            __p[0] = 0;
            do
              v33 = __ldaxr(p_shared_owners);
            while (__stlxr(v33 - 1, p_shared_owners));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v30);
            }
            v34 = object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v35 = operator new();
            v36 = *(unsigned __int8 *)(v6 + 39);
            if ((v36 & 0x80u) == 0)
              v37 = v7;
            else
              v37 = *(_QWORD *)(v6 + 16);
            if ((v36 & 0x80u) != 0)
              v36 = *(_QWORD *)(v6 + 24);
            *(_QWORD *)v35 = v34;
            *(_OWORD *)(v35 + 8) = *(_OWORD *)v71;
            v71[0] = 0;
            v71[1] = 0;
            *(_OWORD *)(v35 + 24) = v72;
            v72 = 0uLL;
            *(_QWORD *)(v35 + 40) = v37;
            *(_QWORD *)(v35 + 48) = v36;
            *(_BYTE *)(v35 + 56) = 1;
            v76 = 0;
            v77 = v35;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), &v77);
            v38 = v77;
            v77 = 0;
            if (v38)
            {
              v39 = *(std::__shared_weak_count **)(v38 + 32);
              if (v39)
              {
                v40 = (unint64_t *)&v39->__shared_owners_;
                do
                  v41 = __ldaxr(v40);
                while (__stlxr(v41 - 1, v40));
                if (!v41)
                {
                  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                  std::__shared_weak_count::__release_weak(v39);
                }
              }
              v42 = *(std::__shared_weak_count **)(v38 + 16);
              if (v42)
              {
                v43 = (unint64_t *)&v42->__shared_owners_;
                do
                  v44 = __ldaxr(v43);
                while (__stlxr(v44 - 1, v43));
                if (!v44)
                {
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                }
              }
              MEMORY[0x227684CE8](v38, 0x10F0C40B62ED6C6);
              v45 = v76;
              v76 = 0;
              if (v45)
              {
                v46 = *(std::__shared_weak_count **)(v45 + 32);
                if (v46)
                {
                  v47 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v48 = __ldaxr(v47);
                  while (__stlxr(v48 - 1, v47));
                  if (!v48)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                }
                v49 = *(std::__shared_weak_count **)(v45 + 16);
                if (v49)
                {
                  v50 = (unint64_t *)&v49->__shared_owners_;
                  do
                    v51 = __ldaxr(v50);
                  while (__stlxr(v51 - 1, v50));
                  if (!v51)
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                }
                MEMORY[0x227684CE8](v45, 0x10F0C40B62ED6C6);
              }
            }
            v52 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
            if (*((_QWORD *)&v72 + 1))
            {
              v53 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v55 = (std::__shared_weak_count *)v71[1];
            if (v71[1])
            {
              v56 = (unint64_t *)((char *)v71[1] + 8);
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
          }
          else
          {
            os_log_type_enabled(v26, OS_LOG_TYPE_INFO);
            LOWORD(object) = 0;
            v58 = (void *)_os_log_send_and_compose_impl();
            if (v58)
              free(v58);
          }
          if (v2)
          {
            sub_22322C138((uint64_t)v62, "Cannot enable per frame color output when it is not integrated.");
            sub_223182C08((uint64_t)v62);
          }
          sub_223182C08((uint64_t)v62);
          v59 = v68;
          if (v68)
          {
            v60 = (unint64_t *)&v68->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          return 0;
        }
      }
      memmove(v15, v13, v14);
      goto LABEL_29;
    }
  }
  return 0;
}

void sub_223FFD294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223FFD2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v3 - 96));
  sub_22319A054((uint64_t *)(v3 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FFD308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x227684CE8](v3, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FFD334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FFD350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FFD364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_223FFD3A8(uint64_t a1, int a2)
{
  int v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  char v10;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  void *v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  size_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD v62[3];
  int v63;
  const char *v64;
  int v65;
  const char *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  void *object;
  void *v71[2];
  __int128 v72;
  void *__p[2];
  unint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;

  if (!a2)
  {
    v10 = *(_BYTE *)(a1 + 104) & 0xEF;
LABEL_12:
    *(_BYTE *)(a1 + 104) = v10;
    return 1;
  }
  if ((*(_BYTE *)(a1 + 105) & 0x10) != 0)
  {
    v10 = *(_BYTE *)(a1 + 104) | 0x10;
    goto LABEL_12;
  }
  sub_223FFCAC0(&v69);
  if (**(int **)(v69 + 56) <= 3)
  {
    v2 = *(unsigned __int8 *)(v69 + 72);
    v3 = sub_22322F254(v69, "OSLogSurrogateAppender", 1, 0);
    if (v2 || v3 != 0)
    {
      v5 = v3;
      v62[0] = &v69;
      v62[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v62[2] = std::chrono::system_clock::now().__d_.__rep_;
      v63 = 3;
      v64 = "unknown file";
      v65 = 437;
      v67 = 0;
      v68 = 0;
      v66 = "unknown function";
      v6 = v69;
      v7 = v69 + 16;
      if (*(char *)(v69 + 39) < 0)
      {
        v9 = *(const char **)(v69 + 16);
        v8 = *(_QWORD *)(v69 + 24);
      }
      else
      {
        v8 = *(unsigned __int8 *)(v69 + 39);
        v9 = (const char *)(*(_QWORD *)v62[0] + 16);
      }
      v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&object);
        sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
        if ((_BYTE)v72 && SHIBYTE(v71[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v13 = (const char *)&xmmword_255788F40;
      else
        v13 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v14 = byte_255788F57;
      else
        v14 = *((_QWORD *)&xmmword_255788F40 + 1);
      object = os_log_create(v13, v9);
      v15 = v71;
      if (v14 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v14 >= 0x17)
      {
        v16 = v5;
        v17 = v9;
        v18 = v6;
        v19 = v2;
        v20 = v7;
        v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v21 = v14 | 7;
        v22 = v21 + 1;
        v15 = operator new(v21 + 1);
        v71[1] = (void *)v14;
        *(_QWORD *)&v72 = v22 | 0x8000000000000000;
        v71[0] = v15;
        v7 = v20;
        v2 = v19;
        v6 = v18;
        v9 = v17;
        v5 = v16;
      }
      else
      {
        BYTE7(v72) = v14;
        if (!v14)
        {
LABEL_29:
          *((_BYTE *)v15 + v14) = 0;
          BYTE8(v72) = 1;
          v23 = __p;
          if (v8 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v8 >= 0x17)
          {
            v24 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v8 | 7) != 0x17)
              v24 = v8 | 7;
            v25 = v24 + 1;
            v23 = operator new(v24 + 1);
            __p[1] = (void *)v8;
            v74 = v25 | 0x8000000000000000;
            __p[0] = v23;
          }
          else
          {
            HIBYTE(v74) = v8;
            if (!v8)
              goto LABEL_37;
          }
          memmove(v23, v9, v8);
LABEL_37:
          *((_BYTE *)v23 + v8) = 0;
          v75 = 1;
          v26 = object;
          if (SHIBYTE(v74) < 0)
            operator delete(__p[0]);
          if (BYTE8(v72) && SBYTE7(v72) < 0)
            operator delete(v71[0]);
          if (object)
            os_release(object);
          if (v5 && *(_QWORD *)(v5 + 24))
          {
            v27 = _os_log_pack_size();
            v28 = (std::__shared_weak_count_vtbl *)operator new(v27, (std::align_val_t)8uLL);
            v29 = (std::__shared_weak_count *)operator new();
            v30 = v29;
            v29->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v29->__shared_owners_;
            v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v29->__shared_weak_owners_ = 0;
            v29[1].__vftable = v28;
            object = v28;
            v71[0] = v28;
            v71[1] = v29;
            do
              v32 = __ldxr(p_shared_owners);
            while (__stxr(v32 + 1, p_shared_owners));
            v72 = 0uLL;
            __p[0] = 0;
            do
              v33 = __ldaxr(p_shared_owners);
            while (__stlxr(v33 - 1, p_shared_owners));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v30);
            }
            v34 = object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v35 = operator new();
            v36 = *(unsigned __int8 *)(v6 + 39);
            if ((v36 & 0x80u) == 0)
              v37 = v7;
            else
              v37 = *(_QWORD *)(v6 + 16);
            if ((v36 & 0x80u) != 0)
              v36 = *(_QWORD *)(v6 + 24);
            *(_QWORD *)v35 = v34;
            *(_OWORD *)(v35 + 8) = *(_OWORD *)v71;
            v71[0] = 0;
            v71[1] = 0;
            *(_OWORD *)(v35 + 24) = v72;
            v72 = 0uLL;
            *(_QWORD *)(v35 + 40) = v37;
            *(_QWORD *)(v35 + 48) = v36;
            *(_BYTE *)(v35 + 56) = 1;
            v76 = 0;
            v77 = v35;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), &v77);
            v38 = v77;
            v77 = 0;
            if (v38)
            {
              v39 = *(std::__shared_weak_count **)(v38 + 32);
              if (v39)
              {
                v40 = (unint64_t *)&v39->__shared_owners_;
                do
                  v41 = __ldaxr(v40);
                while (__stlxr(v41 - 1, v40));
                if (!v41)
                {
                  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                  std::__shared_weak_count::__release_weak(v39);
                }
              }
              v42 = *(std::__shared_weak_count **)(v38 + 16);
              if (v42)
              {
                v43 = (unint64_t *)&v42->__shared_owners_;
                do
                  v44 = __ldaxr(v43);
                while (__stlxr(v44 - 1, v43));
                if (!v44)
                {
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                }
              }
              MEMORY[0x227684CE8](v38, 0x10F0C40B62ED6C6);
              v45 = v76;
              v76 = 0;
              if (v45)
              {
                v46 = *(std::__shared_weak_count **)(v45 + 32);
                if (v46)
                {
                  v47 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v48 = __ldaxr(v47);
                  while (__stlxr(v48 - 1, v47));
                  if (!v48)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                }
                v49 = *(std::__shared_weak_count **)(v45 + 16);
                if (v49)
                {
                  v50 = (unint64_t *)&v49->__shared_owners_;
                  do
                    v51 = __ldaxr(v50);
                  while (__stlxr(v51 - 1, v50));
                  if (!v51)
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                }
                MEMORY[0x227684CE8](v45, 0x10F0C40B62ED6C6);
              }
            }
            v52 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
            if (*((_QWORD *)&v72 + 1))
            {
              v53 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v55 = (std::__shared_weak_count *)v71[1];
            if (v71[1])
            {
              v56 = (unint64_t *)((char *)v71[1] + 8);
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
          }
          else
          {
            os_log_type_enabled(v26, OS_LOG_TYPE_INFO);
            LOWORD(object) = 0;
            v58 = (void *)_os_log_send_and_compose_impl();
            if (v58)
              free(v58);
          }
          if (v2)
          {
            sub_22322C138((uint64_t)v62, "Cannot enable per frame material output when it is not integrated.");
            sub_223182C08((uint64_t)v62);
          }
          sub_223182C08((uint64_t)v62);
          v59 = v68;
          if (v68)
          {
            v60 = (unint64_t *)&v68->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          return 0;
        }
      }
      memmove(v15, v13, v14);
      goto LABEL_29;
    }
  }
  return 0;
}

void sub_223FFDA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223FFDAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v3 - 96));
  sub_22319A054((uint64_t *)(v3 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FFDAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x227684CE8](v3, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FFDB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FFDB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223FFDB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL sub_223FFDB9C(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a2)
  {
    *(_DWORD *)(a1 + 108) = a2;
  }
  else
  {
    __p = operator new(0x28uLL);
    v12 = xmmword_2245B8D40;
    strcpy((char *)__p, "Num fusion samples are less than 1");
    v5 = (char *)operator new(0x68uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 33;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a2 != 0;
}

void sub_223FFDD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223FFDD3C(float *a1, CFTypeRef *a2, float a3, float a4, float a5)
{
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a3 < 0.0 || a4 < 0.0 || a5 < 0.0)
  {
    __p = operator new(0x30uLL);
    v13 = xmmword_2245C4530;
    strcpy((char *)__p, "Arguments need to be non-negative numbers");
    v7 = (char *)operator new(0x68uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 33;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v8;
      v9 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if (SHIBYTE(v13) < 0)
      operator delete(__p);
    return 0;
  }
  else
  {
    a1[47] = a3;
    a1[48] = a4;
    a1[49] = a5;
    return 1;
  }
}

void sub_223FFDEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223FFDF1C(uint64_t a1, uint64_t *a2, char a3, int a4, float a5)
{
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v11 = *(_QWORD **)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v11 >= v10)
  {
    v14 = *(_QWORD **)a1;
    v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - *(_QWORD *)a1) >> 3);
    v16 = v15 + 1;
    if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_22329A3C4();
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v14) >> 3);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v16;
    if (v18 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v19 = 24 * v18;
    v20 = (char *)operator new(24 * v18);
    v21 = &v20[24 * v15];
    *(_QWORD *)v21 = *a2;
    *((_DWORD *)v21 + 2) = *((_DWORD *)a2 + 2);
    *((float *)v21 + 3) = a5;
    v21[16] = a3;
    *((_DWORD *)v21 + 5) = a4;
    v13 = v21 + 24;
    if (v11 != v14)
    {
      do
      {
        v22 = *(v11 - 3);
        v11 -= 3;
        v23 = *((_DWORD *)v11 + 2);
        *((_QWORD *)v21 - 3) = v22;
        v21 -= 24;
        *((_DWORD *)v21 + 2) = v23;
        v24 = *(_QWORD *)((char *)v11 + 12);
        *((_DWORD *)v21 + 5) = *((_DWORD *)v11 + 5);
        *(_QWORD *)(v21 + 12) = v24;
      }
      while (v11 != v14);
      v11 = v14;
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = &v20[v19];
    if (v11)
      operator delete(v11);
  }
  else
  {
    v12 = *a2;
    *((_DWORD *)v11 + 2) = *((_DWORD *)a2 + 2);
    *v11 = v12;
    *((float *)v11 + 3) = a5;
    *((_BYTE *)v11 + 16) = a3;
    *((_DWORD *)v11 + 5) = a4;
    v13 = v11 + 3;
  }
  *(_QWORD *)(a1 + 8) = v13;
  ++*(_DWORD *)(a1 + 24);
}

size_t sub_223FFE094(uint64_t a1, unsigned int a2, unsigned int a3)
{
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  size_t result;
  unsigned int v22;
  unsigned __int8 v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  size_t v29;
  const char *v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  const char *v33;
  size_t v34;
  void *v35;
  unint64_t v36;
  const char *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *p_p;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  size_t v45;
  std::__shared_weak_count_vtbl *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void *v76;
  uint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  __int128 v80;
  int v81;
  const char *v82;
  int v83;
  const char *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  __int128 v101;
  int v102;
  const char *v103;
  int v104;
  const char *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t i;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unsigned __int8 v127;
  uint64_t v128;
  uint64_t j;
  unsigned __int8 v130;
  unint64_t v131;
  char *v132;
  _BYTE *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  size_t v138;
  char *v139;
  char *v140;
  unint64_t v141;
  char *v142;
  char *v143;
  unint64_t v144;
  __int128 v145;
  char *v146;
  char *v147;
  unint64_t v148;
  uint64_t v149;
  char *v150;
  char v151;
  unsigned __int8 v152;
  uint64_t v153;
  uint64_t k;
  unsigned __int8 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  __int128 v159;
  int v160;
  const char *v161;
  int v162;
  const char *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  void *object;
  void *v171[2];
  __int128 v172;
  void *__p;
  size_t v174;
  unint64_t v175;
  std::__shared_weak_count *v176;

  v7 = *(_QWORD *)a1;
  v6 = *(char **)(a1 + 8);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(_QWORD *)a1] >> 3);
  v9 = a2 - v8;
  if (a2 <= v8)
  {
    if (a2 >= v8)
      goto LABEL_21;
    v20 = (char *)(v7 + 24 * a2);
    goto LABEL_20;
  }
  v10 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v6) >> 3) >= v9)
  {
    v20 = &v6[24 * v9];
    do
    {
      *((_QWORD *)v6 + 1) = 0;
      *((_QWORD *)v6 + 2) = 0;
      *(_QWORD *)v6 = 0;
      v6[16] = -1;
      v6 += 24;
    }
    while (v6 != v20);
LABEL_20:
    *(_QWORD *)(a1 + 8) = v20;
    goto LABEL_21;
  }
  v11 = 0x5555555555555556 * ((v10 - v7) >> 3);
  if (v11 <= a2)
    v11 = a2;
  if (0xAAAAAAAAAAAAAAABLL * ((v10 - v7) >> 3) >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12 > 0xAAAAAAAAAAAAAAALL)
    sub_223174E94();
  v13 = (char *)operator new(24 * v12);
  v14 = &v13[24 * v8];
  v15 = &v13[24 * a2];
  v16 = v14;
  do
  {
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = 0;
    *(_QWORD *)v16 = 0;
    v16[16] = -1;
    v16 += 24;
  }
  while (v16 != v15);
  if (v6 != (char *)v7)
  {
    do
    {
      v17 = *((_QWORD *)v6 - 3);
      v6 -= 24;
      v18 = *((_DWORD *)v6 + 2);
      *((_QWORD *)v14 - 3) = v17;
      v14 -= 24;
      *((_DWORD *)v14 + 2) = v18;
      v19 = *(_QWORD *)(v6 + 12);
      *((_DWORD *)v14 + 5) = *((_DWORD *)v6 + 5);
      *(_QWORD *)(v14 + 12) = v19;
    }
    while (v6 != (char *)v7);
    v6 = (char *)v7;
  }
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v15;
  *(_QWORD *)(a1 + 16) = &v13[24 * v12];
  if (v6)
    operator delete(v6);
LABEL_21:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
  result = sub_223FFF23C((uint64_t *)a1);
  v22 = result;
  if (result <= a3)
    goto LABEL_175;
  v23 = atomic_load((unsigned __int8 *)&qword_2540CEB20);
  if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEB20))
  {
    sub_22455F53C(&v158);
    sub_223174DE4(&object, "cv3d.recon");
    sub_2232300E0(&v158, (uint64_t)&object, &qword_2540CEB18);
    if (SHIBYTE(v171[1]) < 0)
      operator delete(object);
    __cxa_guard_release(&qword_2540CEB20);
  }
  v166 = qword_2540CEB18;
  if (**(int **)(qword_2540CEB18 + 56) <= 4)
  {
    v24 = *(unsigned __int8 *)(qword_2540CEB18 + 72);
    v25 = sub_22322F254(qword_2540CEB18, "OSLogSurrogateAppender", 1, 0);
    v26 = v25;
    if (v24 || v25 != 0)
    {
      v158 = &v166;
      *(std::chrono::steady_clock::time_point *)&v159 = std::chrono::steady_clock::now();
      *((std::chrono::system_clock::time_point *)&v159 + 1) = std::chrono::system_clock::now();
      v160 = 4;
      v161 = "unknown file";
      v162 = 114;
      v164 = 0;
      v165 = 0;
      v163 = "unknown function";
      v28 = *v158;
      v157 = *v158;
      if (*(char *)(*v158 + 39) < 0)
      {
        v30 = *(const char **)(v28 + 16);
        v29 = *(_QWORD *)(v28 + 24);
        v156 = *v158 + 16;
        v32 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v32 & 1) != 0)
          goto LABEL_32;
      }
      else
      {
        v29 = *(unsigned __int8 *)(*v158 + 39);
        v30 = (const char *)(*v158 + 16);
        v156 = (uint64_t)v30;
        v31 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v31 & 1) != 0)
          goto LABEL_32;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&object);
        sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
        if ((_BYTE)v172 && SHIBYTE(v171[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_32:
      if (byte_255788F57 >= 0)
        v33 = (const char *)&xmmword_255788F40;
      else
        v33 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v34 = byte_255788F57;
      else
        v34 = *((_QWORD *)&xmmword_255788F40 + 1);
      object = os_log_create(v33, v30);
      v35 = v171;
      if (v34 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v34 >= 0x17)
      {
        v36 = v26;
        v37 = v30;
        v38 = v24;
        v39 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v34 | 7) != 0x17)
          v39 = v34 | 7;
        v40 = v39 + 1;
        v35 = operator new(v39 + 1);
        v171[1] = (void *)v34;
        *(_QWORD *)&v172 = v40 | 0x8000000000000000;
        v171[0] = v35;
        v24 = v38;
        v30 = v37;
        v26 = v36;
      }
      else
      {
        BYTE7(v172) = v34;
        if (!v34)
        {
LABEL_46:
          *((_BYTE *)v35 + v34) = 0;
          BYTE8(v172) = 1;
          p_p = &__p;
          if (v29 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v29 >= 0x17)
          {
            v42 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v29 | 7) != 0x17)
              v42 = v29 | 7;
            v43 = v42 + 1;
            p_p = operator new(v42 + 1);
            v174 = v29;
            v175 = v43 | 0x8000000000000000;
            __p = p_p;
          }
          else
          {
            HIBYTE(v175) = v29;
            if (!v29)
              goto LABEL_54;
          }
          memmove(p_p, v30, v29);
LABEL_54:
          *((_BYTE *)p_p + v29) = 0;
          LOBYTE(v176) = 1;
          v44 = object;
          if (SHIBYTE(v175) < 0)
            operator delete(__p);
          if (BYTE8(v172) && SBYTE7(v172) < 0)
            operator delete(v171[0]);
          if (object)
            os_release(object);
          if (v26 && *(_QWORD *)(v26 + 24))
          {
            v45 = _os_log_pack_size();
            v46 = (std::__shared_weak_count_vtbl *)operator new(v45, (std::align_val_t)8uLL);
            v47 = (std::__shared_weak_count *)operator new();
            v48 = v47;
            v47->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v47->__shared_owners_;
            v47->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v47->__shared_weak_owners_ = 0;
            v47[1].__vftable = v46;
            object = v46;
            v171[0] = v46;
            v171[1] = v47;
            do
              v50 = __ldxr(p_shared_owners);
            while (__stxr(v50 + 1, p_shared_owners));
            v172 = 0uLL;
            __p = 0;
            do
              v51 = __ldaxr(p_shared_owners);
            while (__stlxr(v51 - 1, p_shared_owners));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v48);
            }
            v52 = object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v53 = operator new();
            v54 = *(unsigned __int8 *)(v157 + 39);
            v55 = v156;
            if ((v54 & 0x80u) != 0)
            {
              v55 = *(_QWORD *)(v157 + 16);
              v54 = *(_QWORD *)(v157 + 24);
            }
            *(_QWORD *)v53 = v52;
            *(_OWORD *)(v53 + 8) = *(_OWORD *)v171;
            v171[0] = 0;
            v171[1] = 0;
            *(_OWORD *)(v53 + 24) = v172;
            v172 = 0uLL;
            *(_QWORD *)(v53 + 40) = v55;
            *(_QWORD *)(v53 + 48) = v54;
            *(_BYTE *)(v53 + 56) = 16;
            v167 = 0;
            v168 = v53;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v26 + 24) + 40))(*(_QWORD *)(v26 + 24), &v168);
            v56 = v168;
            v168 = 0;
            if (v56)
            {
              v57 = *(std::__shared_weak_count **)(v56 + 32);
              if (v57)
              {
                v58 = (unint64_t *)&v57->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              v60 = *(std::__shared_weak_count **)(v56 + 16);
              if (v60)
              {
                v61 = (unint64_t *)&v60->__shared_owners_;
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 - 1, v61));
                if (!v62)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
              MEMORY[0x227684CE8](v56, 0x10F0C40B62ED6C6);
              v63 = v167;
              v167 = 0;
              if (v63)
              {
                v64 = *(std::__shared_weak_count **)(v63 + 32);
                if (v64)
                {
                  v65 = (unint64_t *)&v64->__shared_owners_;
                  do
                    v66 = __ldaxr(v65);
                  while (__stlxr(v66 - 1, v65));
                  if (!v66)
                  {
                    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                    std::__shared_weak_count::__release_weak(v64);
                  }
                }
                v67 = *(std::__shared_weak_count **)(v63 + 16);
                if (v67)
                {
                  v68 = (unint64_t *)&v67->__shared_owners_;
                  do
                    v69 = __ldaxr(v68);
                  while (__stlxr(v69 - 1, v68));
                  if (!v69)
                  {
                    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                    std::__shared_weak_count::__release_weak(v67);
                  }
                }
                MEMORY[0x227684CE8](v63, 0x10F0C40B62ED6C6);
              }
            }
            v70 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
            if (*((_QWORD *)&v172 + 1))
            {
              v71 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            v73 = (std::__shared_weak_count *)v171[1];
            if (v171[1])
            {
              v74 = (unint64_t *)((char *)v171[1] + 8);
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
          }
          else
          {
            os_log_type_enabled(v44, OS_LOG_TYPE_ERROR);
            LOWORD(object) = 0;
            v76 = (void *)_os_log_send_and_compose_impl();
            if (v76)
              free(v76);
          }
          if (v24)
          {
            sub_22322C138((uint64_t)&v158, "Occupancy mesh too big for serialization, dropping");
            v77 = v158;
            if (v158)
            {
              v78 = v164;
              if (v164)
              {
                v79 = (_QWORD *)(*v158 + 16);
                if (*(char *)(*v158 + 39) < 0)
                  v79 = (_QWORD *)*v79;
                v80 = v159;
                v81 = v160;
                v82 = v161;
                v83 = v162;
                v84 = v163;
                v85 = v165;
                v168 = v164;
                v169 = v165;
                if (v165)
                {
                  v86 = (unint64_t *)&v165->__shared_owners_;
                  do
                    v87 = __ldxr(v86);
                  while (__stxr(v87 + 1, v86));
                }
                object = v79;
                *(_OWORD *)v171 = v80;
                LODWORD(v172) = v81;
                *((_QWORD *)&v172 + 1) = v82;
                LODWORD(__p) = v83;
                v174 = (size_t)v84;
                v175 = v78;
                v176 = v85;
                if (v85)
                {
                  v88 = (unint64_t *)&v85->__shared_owners_;
                  do
                    v89 = __ldxr(v88);
                  while (__stxr(v89 + 1, v88));
                }
                if (v81 >= **(_DWORD **)(*v77 + 56))
                {
                  sub_22323003C(*v77, (uint64_t)&object);
                  v85 = v176;
                }
                if (v85)
                {
                  v90 = (unint64_t *)&v85->__shared_owners_;
                  do
                    v91 = __ldaxr(v90);
                  while (__stlxr(v91 - 1, v90));
                  if (!v91)
                  {
                    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                    std::__shared_weak_count::__release_weak(v85);
                  }
                }
                v92 = v169;
                if (v169)
                {
                  v93 = (unint64_t *)&v169->__shared_owners_;
                  do
                    v94 = __ldaxr(v93);
                  while (__stlxr(v94 - 1, v93));
                  if (!v94)
                  {
                    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                    std::__shared_weak_count::__release_weak(v92);
                  }
                }
                v95 = v165;
                v164 = 0;
                v165 = 0;
                if (v95)
                {
                  v96 = (unint64_t *)&v95->__shared_owners_;
                  do
                    v97 = __ldaxr(v96);
                  while (__stlxr(v97 - 1, v96));
                  if (!v97)
                  {
                    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                    std::__shared_weak_count::__release_weak(v95);
                  }
                }
              }
            }
          }
          v98 = v158;
          if (v158)
          {
            v99 = v164;
            if (v164)
            {
              v100 = (_QWORD *)(*v158 + 16);
              if (*(char *)(*v158 + 39) < 0)
                v100 = (_QWORD *)*v100;
              v101 = v159;
              v102 = v160;
              v103 = v161;
              v104 = v162;
              v105 = v163;
              v106 = v165;
              v168 = v164;
              v169 = v165;
              if (v165)
              {
                v107 = (unint64_t *)&v165->__shared_owners_;
                do
                  v108 = __ldxr(v107);
                while (__stxr(v108 + 1, v107));
              }
              object = v100;
              *(_OWORD *)v171 = v101;
              LODWORD(v172) = v102;
              *((_QWORD *)&v172 + 1) = v103;
              LODWORD(__p) = v104;
              v174 = (size_t)v105;
              v175 = v99;
              v176 = v106;
              if (v106)
              {
                v109 = (unint64_t *)&v106->__shared_owners_;
                do
                  v110 = __ldxr(v109);
                while (__stxr(v110 + 1, v109));
              }
              if (v102 >= **(_DWORD **)(*v98 + 56))
              {
                sub_22323003C(*v98, (uint64_t)&object);
                v106 = v176;
              }
              if (v106)
              {
                v111 = (unint64_t *)&v106->__shared_owners_;
                do
                  v112 = __ldaxr(v111);
                while (__stlxr(v112 - 1, v111));
                if (!v112)
                {
                  ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                  std::__shared_weak_count::__release_weak(v106);
                }
              }
              v113 = v169;
              if (v169)
              {
                v114 = (unint64_t *)&v169->__shared_owners_;
                do
                  v115 = __ldaxr(v114);
                while (__stlxr(v115 - 1, v114));
                if (!v115)
                {
                  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                  std::__shared_weak_count::__release_weak(v113);
                }
              }
              v116 = v165;
              v164 = 0;
              v165 = 0;
              if (v116)
              {
                v117 = (unint64_t *)&v116->__shared_owners_;
                do
                  v118 = __ldaxr(v117);
                while (__stlxr(v118 - 1, v117));
                if (!v118)
                {
                  ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                  std::__shared_weak_count::__release_weak(v116);
                }
              }
            }
          }
          v119 = v165;
          if (v165)
          {
            v120 = (unint64_t *)&v165->__shared_owners_;
            do
              v121 = __ldaxr(v120);
            while (__stlxr(v121 - 1, v120));
            if (!v121)
            {
              ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
              std::__shared_weak_count::__release_weak(v119);
            }
          }
          goto LABEL_166;
        }
      }
      memmove(v35, v33, v34);
      goto LABEL_46;
    }
  }
LABEL_166:
  v122 = *(_QWORD *)(a1 + 32);
  for (i = *(_QWORD *)(a1 + 40); i != v122; i -= 120)
  {
    v124 = *(std::__shared_weak_count **)(i - 96);
    if (v124)
    {
      v125 = (unint64_t *)&v124->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
  }
  *(_QWORD *)(a1 + 40) = v122;
  result = sub_223FFF23C((uint64_t *)a1);
  v22 = result;
LABEL_175:
  if (a3 < v22)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/OccupancyQuery.cpp", 119, (uint64_t)"size_without_padding <= size_in_bytes", 37, (uint64_t)"Occupancy by proximity result too big for serialization", 55, (void (*)(void **))sub_22457406C);
    v127 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v127 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v128 = qword_255795648;
      for (j = qword_255795650; v128 != j; v128 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v128)(*(_QWORD *)(v128 + 8), "size_without_padding <= size_in_bytes", 37, "Occupancy by proximity result too big for serialization", 55);
    }
    v130 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v130 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      goto LABEL_224;
    result = qword_255795660(*(_QWORD *)algn_255795668, "size_without_padding <= size_in_bytes", 37, "Occupancy by proximity result too big for serialization", 55);
  }
  v131 = a3 - v22;
  if (a3 <= v22)
    return result;
  v133 = *(_BYTE **)(a1 + 56);
  v132 = *(char **)(a1 + 64);
  v134 = v132 - v133;
  if (v131 > v132 - v133)
  {
    v135 = *(_QWORD *)(a1 + 72);
    if (v135 - (uint64_t)v132 >= v131 - (v132 - v133))
    {
      bzero(*(void **)(a1 + 64), v131 - (v132 - v133));
      *(_QWORD *)(a1 + 64) = &v133[v131];
      goto LABEL_214;
    }
    v136 = v135 - (_QWORD)v133;
    v137 = 2 * v136;
    if (2 * v136 <= v131)
      v137 = v131;
    if (v136 >= 0x3FFFFFFFFFFFFFFFLL)
      v138 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v138 = v137;
    v139 = (char *)operator new(v138);
    v140 = &v139[v134];
    bzero(&v139[v134], v131 - (v132 - v133));
    if (v132 == v133)
      goto LABEL_212;
    if (v134 >= 8 && (unint64_t)(v133 - v139) >= 0x20)
    {
      if (v134 < 0x20)
      {
        v141 = 0;
        goto LABEL_204;
      }
      v141 = v134 & 0xFFFFFFFFFFFFFFE0;
      v142 = v132 - 16;
      v143 = &v139[v132 - 16 - v133];
      v144 = v134 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v145 = *(_OWORD *)v142;
        *((_OWORD *)v143 - 1) = *((_OWORD *)v142 - 1);
        *(_OWORD *)v143 = v145;
        v143 -= 32;
        v142 -= 32;
        v144 -= 32;
      }
      while (v144);
      if (v134 == v141)
        goto LABEL_211;
      if ((v134 & 0x18) != 0)
      {
LABEL_204:
        v140 -= v134 & 0xFFFFFFFFFFFFFFF8;
        v146 = &v132[-v141 - 8];
        v147 = &v139[v146 - v133];
        v148 = v141 - (v134 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v149 = *(_QWORD *)v146;
          v146 -= 8;
          *(_QWORD *)v147 = v149;
          v147 -= 8;
          v148 += 8;
        }
        while (v148);
        v132 -= v134 & 0xFFFFFFFFFFFFFFF8;
        if (v134 == (v134 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_211;
        goto LABEL_209;
      }
      v140 -= v141;
      v132 -= v141;
    }
LABEL_209:
    v150 = v140 - 1;
    do
    {
      v151 = *--v132;
      *v150-- = v151;
    }
    while (v132 != v133);
LABEL_211:
    v132 = *(char **)(a1 + 56);
    v140 = v139;
LABEL_212:
    *(_QWORD *)(a1 + 56) = v140;
    *(_QWORD *)(a1 + 64) = &v139[v131];
    *(_QWORD *)(a1 + 72) = &v139[v138];
    if (v132)
      operator delete(v132);
    goto LABEL_214;
  }
  if (v131 < v132 - v133)
    *(_QWORD *)(a1 + 64) = &v133[v131];
LABEL_214:
  result = sub_223FFF23C((uint64_t *)a1);
  if (result == a3)
    return result;
  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/OccupancyQuery.cpp", 127, (uint64_t)"get_serialized_size() == size_in_bytes", 38, (uint64_t)"Serialized size doesn't match expected size", 43, (void (*)(void **))sub_22457406C);
  v152 = atomic_load((unsigned __int8 *)&qword_255795680);
  if ((v152 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
  {
    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
    __cxa_guard_release(&qword_255795680);
  }
  if (!byte_255795670 || byte_255795678)
  {
    v153 = qword_255795648;
    for (k = qword_255795650; v153 != k; v153 += 16)
      (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v153)(*(_QWORD *)(v153 + 8), "get_serialized_size() == size_in_bytes", 38, "Serialized size doesn't match expected size", 43);
  }
  v155 = atomic_load((unsigned __int8 *)&qword_255795680);
  if ((v155 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
  {
    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
    __cxa_guard_release(&qword_255795680);
  }
  if (!byte_255795670)
LABEL_224:
    abort();
  return qword_255795660(*(_QWORD *)algn_255795668, "get_serialized_size() == size_in_bytes", 38, "Serialized size doesn't match expected size", 43);
}

void sub_223FFF06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,void *a31,int a32,__int16 a33,char a34,char a35,char a36,int a37,__int16 a38,char a39,char a40)
{
  if (a36 && a35 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a14);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/OccupancyQuery.cpp", 131, (uint64_t)"", 0, (uint64_t)"Exception when padding size to bytes", 36, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_223FFF228()
{
  __cxa_end_catch();
  JUMPOUT(0x223FFF230);
}

size_t sub_223FFF23C(uint64_t *a1)
{
  unsigned __int8 v1;
  unint64_t v2;
  const void *v3;
  size_t v4;
  void **v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  void **v14;
  size_t v15;
  unint64_t v16;
  _QWORD v17[3];
  _QWORD v18[2];
  _QWORD v19[3];
  const void *v20;
  uint64_t v21;
  const void *v22;
  unint64_t v23;
  void *__p;
  char v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  void *v29[3];
  void *v30;
  void *v31;
  uint64_t *v32;
  uint64_t *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;

  sub_2232E8F68((uint64_t)v29, a1);
  sub_223195210((uint64_t)v18);
  v17[0] = &off_24EC790B8;
  v17[1] = 1;
  v17[2] = v19;
  LODWORD(v14) = 3;
  std::ostream::write();
  sub_2240014C8((uint64_t)v17, (uint64_t *)v29, 3u);
  if ((v27 & 0x10) != 0)
  {
    v2 = v26;
    if (v26 < v23)
    {
      v26 = v23;
      v2 = v23;
    }
    v3 = v22;
    v4 = v2 - (_QWORD)v22;
    if (v2 - (unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_35;
  }
  else
  {
    if ((v27 & 8) == 0)
    {
      HIBYTE(v16) = 0;
      LOBYTE(v14) = 0;
      v1 = 0;
LABEL_10:
      v6 = v1;
      goto LABEL_16;
    }
    v3 = v20;
    v4 = v21 - (_QWORD)v20;
    if ((unint64_t)(v21 - (_QWORD)v20) >= 0x7FFFFFFFFFFFFFF8)
LABEL_35:
      sub_22316DBC0();
  }
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v5 = (void **)operator new(v7 + 1);
    v15 = v4;
    v16 = v8 | 0x8000000000000000;
    v14 = v5;
LABEL_14:
    memmove(v5, v3, v4);
    *((_BYTE *)v5 + v4) = 0;
    v1 = HIBYTE(v16);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
  HIBYTE(v16) = v4;
  v5 = (void **)&v14;
  if (v4)
    goto LABEL_14;
  LOBYTE(v14) = 0;
  v1 = HIBYTE(v16);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
    goto LABEL_10;
LABEL_15:
  v6 = v15;
  operator delete(v14);
LABEL_16:
  v18[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v19[0] = v9;
  v19[1] = MEMORY[0x24BEDB848] + 16;
  if (v25 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](&v28);
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  v10 = v32;
  if (v32)
  {
    v11 = v33;
    v12 = v32;
    if (v33 != v32)
    {
      do
        v11 = sub_2232E7BD4(v11 - 48);
      while (v11 != v10);
      v12 = v32;
    }
    v33 = v10;
    operator delete(v12);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  return v6;
}

void sub_223FFF4AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2232E7A44(v1 - 200);
  _Unwind_Resume(a1);
}

void sub_223FFF4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_223195348((uint64_t)va);
  sub_2232E7A44(v7 - 200);
  _Unwind_Resume(a1);
}

uint64_t sub_223FFF4E0(uint64_t a1, const void *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  const UInt8 *BytePtr;
  unint64_t Length;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24EC65AA0;
  sub_2245289FC(&v17, a2);
  v4 = v18;
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(a1 + 24) = v4;
  if (!v4)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  v7 = v18;
  if (!v18)
    goto LABEL_8;
  v8 = (unint64_t *)&v18->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)(a1 + 40) = xmmword_224693CC0;
    *(_QWORD *)(a1 + 56) = 0;
    if (!a2)
      return a1;
  }
  else
  {
LABEL_8:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)(a1 + 40) = xmmword_224693CC0;
    *(_QWORD *)(a1 + 56) = 0;
    if (!a2)
      return a1;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)a2);
  Length = CFDataGetLength((CFDataRef)a2);
  v12 = Length / 0xC;
  if ((Length / 0xC))
    v13 = 3;
  else
    v13 = 0;
  if ((Length / 0xC))
    v14 = 3;
  else
    v14 = 0;
  if (v13 * (_DWORD)v12 == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_QWORD *)(a1 + 32) = BytePtr;
  *(_QWORD *)(a1 + 40) = (v12 << 32) | 3;
  *(_QWORD *)(a1 + 48) = (v14 << 32) | 1;
  *(_DWORD *)(a1 + 56) = v12;
  *(_DWORD *)(a1 + 60) = v13;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (12 * v15 != CFDataGetLength((CFDataRef)a2)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/OccupancyQuery.cpp", 194, (uint64_t)"this->size() * kNumParameters * sizeof(float) == static_cast<size_t>(CFDataGetLength(points))", 93, (uint64_t)"Input array not evenly divisible by 3*sizeof(float).", 52, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return a1;
}

void sub_223FFF6C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223FFF6DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223FFF6F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223FFF704(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_223FFF70C(uint64_t a1, const void *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  const UInt8 *BytePtr;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24EC65AD8;
  sub_2245289FC(&v15, a2);
  v4 = v16;
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 24) = v4;
  if (!v4)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  v7 = v16;
  if (!v16)
    goto LABEL_8;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)(a1 + 40) = xmmword_2246546D0;
    *(_QWORD *)(a1 + 56) = 0;
    if (!a2)
      return a1;
  }
  else
  {
LABEL_8:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)(a1 + 40) = xmmword_2246546D0;
    *(_QWORD *)(a1 + 56) = 0;
    if (!a2)
      return a1;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)a2);
  v11 = (unint64_t)CFDataGetLength((CFDataRef)a2) >> 4;
  v12 = (_DWORD)v11 != 0;
  *(_QWORD *)(a1 + 32) = BytePtr;
  *(_QWORD *)(a1 + 40) = (v11 << 32) | 4;
  *(_QWORD *)(a1 + 48) = (v12 << 34) | 1;
  *(_DWORD *)(a1 + 56) = v11;
  *(_DWORD *)(a1 + 60) = 4 * v12;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (CFDataGetLength((CFDataRef)a2) != 16 * v13
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/OccupancyQuery.cpp", 214, (uint64_t)"this->size() * kNumParameters * sizeof(float) == static_cast<size_t>(CFDataGetLength(data))", 91, (uint64_t)"Input array not evenly divisible by 4*sizeof(float).", 52, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return a1;
}

void sub_223FFF888(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223FFF89C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223FFF8B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223FFF8C4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_223FFF8CC(uint64_t a1, const void *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  const UInt8 *BytePtr;
  unint64_t Length;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24EC65B10;
  sub_2245289FC(&v17, a2);
  v4 = v18;
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(a1 + 24) = v4;
  if (!v4)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  v7 = v18;
  if (!v18)
    goto LABEL_8;
  v8 = (unint64_t *)&v18->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)(a1 + 40) = xmmword_224693CD0;
    *(_QWORD *)(a1 + 56) = 0;
    if (!a2)
      return a1;
  }
  else
  {
LABEL_8:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)(a1 + 40) = xmmword_224693CD0;
    *(_QWORD *)(a1 + 56) = 0;
    if (!a2)
      return a1;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)a2);
  Length = CFDataGetLength((CFDataRef)a2);
  v12 = Length / 0x14;
  if ((Length / 0x14))
    v13 = 5;
  else
    v13 = 0;
  if ((Length / 0x14))
    v14 = 5;
  else
    v14 = 0;
  if (v13 * (_DWORD)v12 == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_QWORD *)(a1 + 32) = BytePtr;
  *(_QWORD *)(a1 + 40) = (v12 << 32) | 5;
  *(_QWORD *)(a1 + 48) = (v14 << 32) | 1;
  *(_DWORD *)(a1 + 56) = v12;
  *(_DWORD *)(a1 + 60) = v13;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (20 * v15 != CFDataGetLength((CFDataRef)a2)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/OccupancyQuery.cpp", 234, (uint64_t)"this->size() * kNumParameters * sizeof(float) == static_cast<size_t>(CFDataGetLength(data))", 91, (uint64_t)"Input array not evenly divisible by 5*sizeof(float).", 52, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return a1;
}

void sub_223FFFAB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223FFFAC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223FFFADC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223FFFAF0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_223FFFAF8(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  void *v11;
  void *v13[2];
  void *v14[2];
  __int128 v15;
  void *v16[2];
  void *v17[2];
  __int128 v18;
  void *v19[2];
  void *v20[2];
  __int128 v21;
  void *v22;
  uint64_t (**v23)();
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27[2];
  void *v28;
  char *v29;
  void *__p;
  void *v31;
  uint64_t v32;

  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  v23 = &off_24EC791F8;
  v24 = 1;
  v25 = a2;
  *(_OWORD *)v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)v14 = 0u;
  v15 = 0u;
  *(_OWORD *)v13 = 0u;
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  v26 = 0;
  std::istream::read();
  std::istream::read();
  v32 = 0;
  std::istream::read();
  std::istream::read();
  v27[0] = 0;
  std::istream::read();
  v22 = v27[0];
  sub_2240023D4((uint64_t *)v13, (char **)v27);
  sub_223623614(a1, (uint64_t)v27);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  v3 = (char *)v28;
  if (v28)
  {
    v4 = v29;
    v5 = v28;
    if (v29 != v28)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 12);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 120;
      }
      while (v4 != v3);
      v5 = v28;
    }
    v29 = v3;
    operator delete(v5);
  }
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
  if (v20[1])
  {
    *(void **)&v21 = v20[1];
    operator delete(v20[1]);
  }
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
  if (v17[1])
  {
    *(void **)&v18 = v17[1];
    operator delete(v17[1]);
  }
  v9 = (uint64_t *)v16[0];
  if (v16[0])
  {
    v10 = (uint64_t *)v16[1];
    v11 = v16[0];
    if (v16[1] != v16[0])
    {
      do
        v10 = sub_2232E7BD4(v10 - 48);
      while (v10 != v9);
      v11 = v16[0];
    }
    v16[1] = v9;
    operator delete(v11);
  }
  if (v14[1])
  {
    *(void **)&v15 = v14[1];
    operator delete(v14[1]);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
  return a1;
}

void sub_224000D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  void *v33;
  void *v34;

  sub_2232E7A44((uint64_t)&a31);
  v33 = *(void **)(v31 + 56);
  if (v33)
  {
    *(_QWORD *)(v31 + 64) = v33;
    operator delete(v33);
    sub_223295868(a10);
    v34 = *(void **)v31;
    if (!*(_QWORD *)v31)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    sub_223295868(a10);
    v34 = *(void **)v31;
    if (!*(_QWORD *)v31)
      goto LABEL_3;
  }
  *(_QWORD *)(v31 + 8) = v34;
  operator delete(v34);
  _Unwind_Resume(a1);
}

uint64_t sub_224000E28(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  void *v6[3];
  void *v7;
  void *v8;
  void *v9;
  uint64_t *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *__p;
  void *v16;
  _QWORD v17[3];
  unsigned int v18;

  v17[0] = &off_24EC790B8;
  v17[1] = 1;
  v17[2] = a2;
  sub_2232E8F68((uint64_t)v6, a1);
  v18 = 3;
  std::ostream::write();
  sub_2240014C8((uint64_t)v17, (uint64_t *)v6, v18);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  v2 = (uint64_t *)v9;
  if (v9)
  {
    v3 = v10;
    v4 = v9;
    if (v10 != v9)
    {
      do
        v3 = sub_2232E7BD4(v3 - 48);
      while (v3 != v2);
      v4 = v9;
    }
    v10 = v2;
    operator delete(v4);
  }
  if (v7)
  {
    v8 = v7;
    operator delete(v7);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  return 1;
}

_QWORD *sub_224000F64(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC65AA0;
  v2 = (std::__shared_weak_count *)result[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_224000FD8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC65AA0;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22400104C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
}

BOOL sub_224001064(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
    return 0;
  if (*(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44))
    return *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52);
  return 0;
}

_QWORD *sub_2240010A8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC65AD8;
  v2 = (std::__shared_weak_count *)result[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_22400111C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC65AD8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224001190(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1);
}

BOOL sub_2240011A8(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
    return 0;
  if (*(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44))
    return *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52);
  return 0;
}

_QWORD *sub_2240011EC(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC65B10;
  v2 = (std::__shared_weak_count *)result[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_224001260(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC65B10;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2240012D4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1);
}

BOOL sub_2240012EC(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
    return 0;
  if (*(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44))
    return *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52);
  return 0;
}

void sub_224001330(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v5[24 * a2];
      do
      {
        *((_QWORD *)v5 + 1) = 0;
        *((_QWORD *)v5 + 2) = 0;
        *(_QWORD *)v5 = 0;
        v5[16] = -1;
        v5 += 24;
      }
      while (v5 != v11);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_22329A3C4();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[24 * v6];
    v13 = &v12[24 * a2];
    v14 = v12;
    do
    {
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *(_QWORD *)v14 = 0;
      v14[16] = -1;
      v14 += 24;
    }
    while (v14 != v13);
    v15 = (char *)*a1;
    if (v5 != *a1)
    {
      do
      {
        v16 = *((_QWORD *)v5 - 3);
        v5 -= 24;
        v17 = *((_DWORD *)v5 + 2);
        *((_QWORD *)v12 - 3) = v16;
        v12 -= 24;
        *((_DWORD *)v12 + 2) = v17;
        v18 = *(_QWORD *)(v5 + 12);
        *((_DWORD *)v12 + 5) = *((_DWORD *)v5 + 5);
        *(_QWORD *)(v12 + 12) = v18;
      }
      while (v5 != v15);
      v5 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v10[24 * v9];
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_2240014C8(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  uint64_t v18;
  uint64_t k;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t m;
  uint64_t v28;
  uint64_t n;
  uint64_t v30;
  uint64_t ii;
  uint64_t v32;
  uint64_t jj;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  result = std::ostream::write();
  v7 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    do
    {
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v8 = v7 + 12;
      std::ostream::write();
      std::ostream::write();
      result = std::ostream::write();
      v7 += 24;
    }
    while (v8 + 12 != v6);
  }
  if (a3 >= 2)
  {
    std::ostream::write();
    std::ostream::write();
    v9 = a2[3];
    v10 = a2[4] - v9;
    if (v10)
    {
      v11 = 16 * (v10 >> 4);
      do
      {
        sub_22341C1E8();
        v9 += 16;
        v11 -= 16;
      }
      while (v11);
    }
    std::ostream::write();
    v12 = (uint64_t *)a2[6];
    for (i = (uint64_t *)a2[7]; v12 != i; v12 += 48)
    {
      std::ostream::write();
      std::ostream::write();
      v14 = *v12;
      v15 = v12[1];
      if (v15 != *v12)
      {
        do
        {
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          v14 += 12;
        }
        while (v14 != v15);
      }
      std::ostream::write();
      std::ostream::write();
      v16 = v12[5];
      for (j = v12[6]; v16 != j; v16 += 12)
      {
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
      }
      std::ostream::write();
      std::ostream::write();
      v18 = v12[10];
      for (k = v12[11]; v18 != k; v18 += 12)
      {
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
      }
      std::ostream::write();
      std::ostream::write();
      v21 = v12[15];
      v20 = v12[16];
      v22 = v20 - v21;
      if (v20 != v21)
      {
        do
        {
          std::ostream::write();
          ++v21;
          --v22;
        }
        while (v22);
      }
      std::ostream::write();
      std::ostream::write();
      v24 = v12[20];
      v23 = v12[21];
      v25 = v23 - v24;
      if (v23 != v24)
      {
        do
        {
          std::ostream::write();
          ++v24;
          --v25;
        }
        while (v25);
      }
      std::ostream::write();
      v26 = v12[24];
      for (m = v12[25]; v26 != m; v26 += 12)
      {
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
      }
      std::ostream::write();
      v28 = v12[28];
      for (n = v12[29]; v28 != n; v28 += 8)
      {
        std::ostream::write();
        std::ostream::write();
      }
      std::ostream::write();
      v30 = v12[32];
      for (ii = v12[33]; v30 != ii; v30 += 8)
      {
        std::ostream::write();
        std::ostream::write();
      }
      std::ostream::write();
      v32 = v12[36];
      for (jj = v12[37]; v32 != jj; v32 += 12)
      {
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
      }
      if (*((_BYTE *)v12 + 344))
      {
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
      }
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v34 = v12[44];
      v35 = v12[45] - v34;
      if (v35)
      {
        v36 = 4 * (v35 >> 2);
        do
        {
          std::ostream::write();
          v34 += 4;
          v36 -= 4;
        }
        while (v36);
      }
    }
    std::ostream::write();
    v37 = a2[9];
    v38 = a2[10] - v37;
    if (v38)
    {
      v39 = 68 * (v38 / 68);
      do
      {
        while (!*(_BYTE *)(v37 + 64))
        {
          std::ostream::write();
          v37 += 68;
          v39 -= 68;
          if (!v39)
            goto LABEL_41;
        }
        std::ostream::write();
        sub_22341C304();
        v37 += 68;
        v39 -= 68;
      }
      while (v39);
    }
LABEL_41:
    std::ostream::write();
    v40 = a2[12];
    v41 = a2[13] - v40;
    if (v41)
    {
      v42 = 17 * (v41 / 17);
      do
      {
        while (!*(_BYTE *)(v40 + 16))
        {
          std::ostream::write();
          v40 += 17;
          v42 -= 17;
          if (!v42)
            goto LABEL_46;
        }
        std::ostream::write();
        sub_22341C1E8();
        v40 += 17;
        v42 -= 17;
      }
      while (v42);
    }
LABEL_46:
    result = std::ostream::write();
    v44 = a2[15];
    v43 = a2[16];
    v45 = v43 - v44;
    if (v43 != v44)
    {
      do
      {
        result = std::ostream::write();
        ++v44;
        --v45;
      }
      while (v45);
    }
    if (a3 >= 3)
      return std::ostream::write();
  }
  return result;
}

void sub_224001D64(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v7 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  std::istream::read();
  v4 = *a2;
  v3 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *a2) >> 2);
  if (v7 <= v5)
  {
    if (v7 < v5)
    {
      v3 = v4 + 12 * v7;
      a2[1] = v3;
    }
  }
  else
  {
    sub_2232F52A0(a2, v7 - v5);
    v4 = *a2;
    v3 = a2[1];
  }
  if (v3 != v4)
  {
    v6 = v3;
    do
    {
      std::istream::read();
      std::istream::read();
      std::istream::read();
      v4 += 12;
    }
    while (v4 != v6);
  }
}

void sub_224001E48(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v7 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  std::istream::read();
  v4 = *a2;
  v3 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *a2) >> 2);
  if (v7 <= v5)
  {
    if (v7 < v5)
    {
      v3 = v4 + 12 * v7;
      a2[1] = v3;
    }
  }
  else
  {
    sub_2232F5570(a2, v7 - v5);
    v4 = *a2;
    v3 = a2[1];
  }
  if (v3 != v4)
  {
    v6 = v3;
    do
    {
      std::istream::read();
      std::istream::read();
      std::istream::read();
      v4 += 12;
    }
    while (v4 != v6);
  }
}

uint64_t *sub_224001F2C@<X0>(uint64_t *result@<X0>, char **a2@<X8>)
{
  char **v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  char **v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64[49];
  std::__shared_weak_count *v65;

  v2 = a2;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = result[1] - *result;
  if (v3)
  {
    v4 = result;
    v5 = 0;
    v57 = v3 >> 4;
    v58 = result;
    v54 = v2;
    do
    {
      v6 = (uint64_t *)(*v4 + 16 * v5);
      v8 = *v6;
      v7 = v6[1];
      sub_22414DCC8((uint64_t *)(v4[3] + 384 * v5), 0, (uint64_t)v64);
      v9 = (std::__shared_weak_count *)operator new(0x198uLL);
      v9->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      v9->__shared_weak_owners_ = 0;
      v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F0A0;
      v11 = &v9[1].__vftable;
      sub_22317FD80((uint64_t)&v9[1], (uint64_t)v64);
      v64[48] = (uint64_t)&v9[1];
      v65 = v9;
      v12 = v4[6] + 68 * v5;
      v13 = *(unsigned __int8 *)(v12 + 64);
      if (*(_BYTE *)(v12 + 64))
      {
        v59 = *(_OWORD *)(v12 + 48);
        v60 = *(_OWORD *)(v12 + 32);
        v61 = *(_OWORD *)(v12 + 16);
        v63 = *(_OWORD *)v12;
        v14 = v4[9] + 17 * v5;
        v15 = *(_BYTE *)(v14 + 16);
        if (v15)
          goto LABEL_6;
      }
      else
      {
        v21 = v63;
        LOBYTE(v21) = 0;
        v63 = v21;
        v14 = v4[9] + 17 * v5;
        v15 = *(_BYTE *)(v14 + 16);
        if (v15)
        {
LABEL_6:
          v16 = *(_QWORD *)v14;
          v62 = *(_QWORD *)(v14 + 8);
          v18 = v2[1];
          v17 = (unint64_t)v2[2];
          if ((unint64_t)v18 >= v17)
            goto LABEL_16;
          v19 = v16;
          v16 &= 0xFFFFFFFFFFFFFF00;
          v20 = 1;
          goto LABEL_11;
        }
      }
      v16 = 0;
      v18 = v2[1];
      v17 = (unint64_t)v2[2];
      if ((unint64_t)v18 >= v17)
      {
LABEL_16:
        v24 = *v2;
        v25 = 0xEEEEEEEEEEEEEEEFLL * ((v18 - *v2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0x222222222222222)
          sub_22316E078();
        v27 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v17 - (_QWORD)v24) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x111111111111111)
          v28 = 0x222222222222222;
        else
          v28 = v26;
        if (v28)
        {
          v55 = v15;
          v56 = v16;
          if (v28 > 0x222222222222222)
            sub_223174E94();
          v29 = v5;
          v30 = v8;
          v31 = v7;
          v32 = v13;
          v33 = (char *)operator new(120 * v28);
          v13 = v32;
          v7 = v31;
          v8 = v30;
          v5 = v29;
          v16 = v56;
          v11 = &v9[1].__vftable;
          v15 = v55;
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[120 * v25];
        *(_QWORD *)v34 = v8;
        *((_QWORD *)v34 + 1) = v7;
        v35 = &v33[120 * v28];
        *((_QWORD *)v34 + 2) = v11;
        *((_QWORD *)v34 + 3) = v9;
        do
          v36 = __ldxr(p_shared_owners);
        while (__stxr(v36 + 1, p_shared_owners));
        v37 = &v33[120 * v25];
        v37[32] = 0;
        v38 = v37 + 32;
        v38[64] = 0;
        v2 = v54;
        if (v13)
        {
          *(_OWORD *)v38 = v63;
          *((_OWORD *)v38 + 1) = v61;
          *((_OWORD *)v38 + 2) = v60;
          *((_OWORD *)v38 + 3) = v59;
          v38[64] = 1;
        }
        v39 = &v33[120 * v25];
        *(_QWORD *)(v39 + 100) = v16;
        *(_QWORD *)(v39 + 108) = v62;
        v39[116] = v15;
        v23 = v34 + 120;
        if (v18 == v24)
        {
          *v54 = v34;
          v54[1] = v23;
          v54[2] = v35;
        }
        else
        {
          v40 = 0;
          do
          {
            v42 = &v34[v40];
            v43 = &v18[v40];
            *(_OWORD *)(v42 - 120) = *(_OWORD *)&v18[v40 - 120];
            *(_OWORD *)(v42 - 104) = *(_OWORD *)&v18[v40 - 104];
            *((_QWORD *)v43 - 13) = 0;
            *((_QWORD *)v43 - 12) = 0;
            v34[v40 - 88] = 0;
            *(v42 - 24) = 0;
            if (v18[v40 - 24])
            {
              v44 = *(_OWORD *)(v43 - 88);
              v45 = *(_OWORD *)(v43 - 72);
              v46 = *(_OWORD *)(v43 - 40);
              *(_OWORD *)&v34[v40 - 56] = *(_OWORD *)(v43 - 56);
              *(_OWORD *)&v34[v40 - 40] = v46;
              *(_OWORD *)&v34[v40 - 88] = v44;
              *(_OWORD *)&v34[v40 - 72] = v45;
              *(v42 - 24) = 1;
            }
            v41 = *(_OWORD *)(v43 - 20);
            *(v42 - 4) = *(v43 - 4);
            *(_OWORD *)(v42 - 20) = v41;
            v40 -= 120;
          }
          while (&v18[v40] != v24);
          v18 = *v54;
          v47 = v54[1];
          *v54 = &v34[v40];
          v54[1] = v23;
          v54[2] = v35;
          while (v47 != v18)
          {
            v48 = (std::__shared_weak_count *)*((_QWORD *)v47 - 12);
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v47 -= 120;
          }
        }
        if (v18)
          operator delete(v18);
        goto LABEL_46;
      }
      v20 = 0;
      v19 = 0;
LABEL_11:
      *(_QWORD *)v18 = v8;
      *((_QWORD *)v18 + 1) = v7;
      *((_QWORD *)v18 + 2) = v11;
      *((_QWORD *)v18 + 3) = v9;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
      v18[32] = 0;
      v18[96] = 0;
      if (v13)
      {
        *((_OWORD *)v18 + 2) = v63;
        *((_OWORD *)v18 + 3) = v61;
        *((_OWORD *)v18 + 4) = v60;
        *((_OWORD *)v18 + 5) = v59;
        v18[96] = 1;
      }
      *(_QWORD *)(v18 + 100) = v19 | v16;
      *(_QWORD *)(v18 + 108) = v62;
      v18[116] = v20;
      v23 = v18 + 120;
LABEL_46:
      v2[1] = v23;
      v51 = v65;
      v4 = v58;
      if (v65)
      {
        v52 = (unint64_t *)&v65->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      result = sub_22316F8F4(v64);
      ++v5;
    }
    while (v5 != v57);
  }
  return result;
}

void sub_22400237C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  sub_223167354(v26 - 104);
  sub_22316F8F4(&a26);
  sub_223295868(a9);
  _Unwind_Resume(a1);
}

void sub_2240023A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_223295868(a9);
  _Unwind_Resume(a1);
}

void sub_2240023B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_22316F8F4(&a26);
  sub_223295868(a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2240023D4@<X0>(uint64_t *a1@<X0>, char **a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  float v8;
  char v9;
  int v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  _QWORD *result;
  void **v31;
  __int128 v33;
  __int128 v34;
  char *v35;

  HIDWORD(v3) = 0;
  *((_OWORD *)a2 + 2) = 0u;
  v31 = (void **)(a2 + 4);
  *a2 = 0;
  a2[1] = 0;
  *((_DWORD *)a2 + 6) = 0;
  a2[2] = 0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  a2[10] = 0;
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
    {
      while (1)
      {
        v8 = *(float *)(v4 + 12);
        if (v8 > 0.000001 && 0xAAAAAAAAAAAAAAABLL * ((v6 - *a2) >> 3) == v7)
          ++v7;
        *(_QWORD *)&v3 = *(_QWORD *)v4;
        DWORD2(v3) = *(_DWORD *)(v4 + 8);
        v9 = *(_BYTE *)(v4 + 16);
        v10 = *(_DWORD *)(v4 + 20);
        v11 = (unint64_t)a2[2];
        if ((unint64_t)v6 >= v11)
          break;
        *((_DWORD *)v6 + 2) = DWORD2(v3);
        *(_QWORD *)v6 = v3;
        *((float *)v6 + 3) = v8;
        v6[16] = v9;
        *((_DWORD *)v6 + 5) = v10;
        a2[1] = v6 + 24;
        v4 += 24;
        v6 += 24;
        if (v4 == v5)
          goto LABEL_23;
      }
      v12 = *a2;
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a2) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_22329A3C4();
      v33 = v3;
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v12) >> 3);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v14;
      if (v16 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v17 = (char *)operator new(24 * v16);
      v18 = &v17[24 * v13];
      HIDWORD(v3) = HIDWORD(v33);
      *(_QWORD *)v18 = v33;
      *((_DWORD *)v18 + 2) = DWORD2(v33);
      *((float *)v18 + 3) = v8;
      v18[16] = v9;
      *((_DWORD *)v18 + 5) = v10;
      v19 = v18;
      if (v6 != v12)
      {
        do
        {
          v20 = *((_QWORD *)v6 - 3);
          v6 -= 24;
          v21 = *((_DWORD *)v6 + 2);
          *((_QWORD *)v19 - 3) = v20;
          v19 -= 24;
          *((_DWORD *)v19 + 2) = v21;
          v22 = *(_QWORD *)(v6 + 12);
          *((_DWORD *)v19 + 5) = *((_DWORD *)v6 + 5);
          *(_QWORD *)(v19 + 12) = v22;
        }
        while (v6 != v12);
        v6 = v12;
      }
      v23 = v18 + 24;
      *a2 = v19;
      a2[1] = v18 + 24;
      a2[2] = &v17[24 * v16];
      if (v6)
        operator delete(v6);
      a2[1] = v23;
      v4 += 24;
      v6 = v23;
    }
    while (v4 != v5);
  }
LABEL_23:
  *((_DWORD *)a2 + 6) = v7;
  sub_224001F2C(a1 + 3, (char **)&v34);
  v24 = (char *)*v31;
  if (*v31)
  {
    v25 = a2[5];
    v26 = *v31;
    if (v25 != v24)
    {
      do
      {
        v27 = (std::__shared_weak_count *)*((_QWORD *)v25 - 12);
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v25 -= 120;
      }
      while (v25 != v24);
      v26 = *v31;
    }
    a2[5] = v24;
    operator delete(v26);
    *v31 = 0;
    v31[1] = 0;
    v31[2] = 0;
  }
  *((_OWORD *)a2 + 2) = v34;
  a2[6] = v35;
  result = a2 + 7;
  if (a2 + 7 != (char **)(a1 + 15))
    result = sub_2235621B0(result, (char *)a1[15], (char *)a1[16], a1[16] - a1[15]);
  a2[10] = (char *)a1[18];
  return result;
}

void sub_2240026CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223919EBC(v1);
  _Unwind_Resume(a1);
}

void sub_2240026E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223919EBC(v1);
  _Unwind_Resume(a1);
}

void sub_2240026F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223919EBC(v1);
  _Unwind_Resume(a1);
}

void sub_224002708(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223919EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22400271C(uint64_t a1, uint64_t a2, int a3, float a4)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v8 = *(_DWORD *)(a1 + 32);
  v9 = *(_DWORD *)(a1 + 36);
  if ((*(_DWORD *)(a2 + 32) != v8 || *(_DWORD *)(a2 + 36) != v9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsUtils.cpp", 39, (uint64_t)"semantics.Size() == size", 24, (uint64_t)"Image size mismatch", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (!v9 || !v8)
    return 0;
  v10 = 0;
  v11 = 0;
LABEL_8:
  v12 = 0;
  v13 = 0;
  v14 = 0;
  while (1)
  {
    _H1 = *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v10 * *(_DWORD *)(a1 + 44) + 2 * v12);
    __asm { FCVT            S1, H1 }
    if (_S1 <= a4
      && *(_BYTE *)(*(_QWORD *)(a2 + 24) + v10 * *(_DWORD *)(a2 + 44) + v13) == 10
      && (float)((float)((float)(1.0 / (float)(a3 * a3)) * (float)(v9 * v8)) * 0.005) <= (float)++v11)
    {
      return 1;
    }
    v14 += a3;
    v13 += *(_DWORD *)(a2 + 40) * a3;
    v12 += *(_DWORD *)(a1 + 40) * a3;
    if (v14 >= v8)
    {
      v10 += a3;
      if (v10 >= v9)
        return 0;
      goto LABEL_8;
    }
  }
}

_QWORD *sub_224002894(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &off_24EC65BF8;
  v2 = a1 + 9;
  v3 = (_QWORD *)a1[12];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_224002950(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &off_24EC65BF8;
  v2 = a1 + 9;
  v3 = (_QWORD *)a1[12];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224002A1C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    sub_223198474();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t sub_224002A40(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 96);
  if (!v1)
    sub_223198474();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t sub_224002A64(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 64);
  if (!v1)
    sub_223198474();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t sub_224002A88(unsigned __int8 *a1, unsigned int a2)
{
  return *a1 | a2;
}

uint64_t sub_224002A94(unsigned __int8 *a1, int a2)
{
  return *a1 & (a2 ^ 0xFFu);
}

uint64_t sub_224002AA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  _DWORD *v8;
  BOOL v9;
  uint64_t result;
  float v11;
  float v12;
  int v13;
  int v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  v8 = (_DWORD *)(a1 + 56);
  if ((*(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56) || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/Utils.cpp", 260, (uint64_t)"color1.Size() == color2.Size()", 30, (uint64_t)"input images should have the same size", 38, (void (*)(void **))sub_22457406C)|| (a4 >= 0.0 ? (v9 = a4 > 1.0) : (v9 = 1), v9&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/Utils.cpp", 261, (uint64_t)"(alpha >= 0.f && alpha <= 1.f)", 30, (uint64_t)"alpha value should within range [0, 1]", 38, (void (*)(void **))sub_22457406C)))
  {
    abort();
  }
  *(_QWORD *)a3 = &off_24EC21B18;
  result = sub_2231C5C38(v8, (_WORD *)(a3 + 8));
  v13 = *(_DWORD *)(a1 + 60);
  if (v13 && *(_DWORD *)(a1 + 56))
  {
    v14 = 0;
    v15 = 1.0 - a4;
    do
    {
      v16 = *(unsigned int *)(a1 + 56);
      if ((_DWORD)v16)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = *(unsigned int *)(a1 + 48);
        v21 = *(_QWORD *)(a1 + 24) + (*(_DWORD *)(a1 + 68) * v14);
        v22 = *(unsigned int *)(a2 + 48);
        v23 = *(_QWORD *)(a2 + 24) + (*(_DWORD *)(a2 + 68) * v14);
        result = *(_QWORD *)(a3 + 32) + (*(_DWORD *)(a3 + 124) * v14);
        v24 = *(unsigned int *)(a3 + 104);
        do
        {
          v25 = (_BYTE *)(v21 + v17);
          v26 = (_BYTE *)(v23 + v18);
          v27 = (_BYTE *)(result + v19);
          LOBYTE(v11) = *v25;
          LOBYTE(v12) = *v26;
          *(float *)&v28 = v15 * (float)LODWORD(v12);
          *(float *)&v29 = (float)((float)LODWORD(v11) * a4) + *(float *)&v28;
          *v27 = (int)*(float *)&v29;
          LOBYTE(v29) = v25[1];
          LOBYTE(v28) = v26[1];
          *(float *)&v30 = v15 * (float)v28;
          *(float *)&v31 = (float)((float)v29 * a4) + *(float *)&v30;
          v27[1] = (int)*(float *)&v31;
          LOBYTE(v31) = v25[2];
          LOBYTE(v30) = v26[2];
          v12 = v15 * (float)v30;
          v11 = (float)((float)v31 * a4) + v12;
          v27[2] = (int)v11;
          v19 += v24;
          v18 += v22;
          v17 += v20;
          --v16;
        }
        while (v16);
      }
      ++v14;
    }
    while (v14 != v13);
  }
  return result;
}

uint64_t sub_224002CAC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_224002D14@<X0>(uint64_t a1@<X0>, int32x2_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  uint64_t v9;
  float32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x2_t v19;
  float v20;
  float v21;
  float v22;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t result;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _BYTE v55[32];
  __int128 v56;
  _BYTE v57[32];
  __int128 v58;
  uint64_t v59[2];

  v59[1] = *MEMORY[0x24BDAC8D0];
  v9 = sub_2241498F4(a4, 0);
  *(int32x2_t *)v10.f32 = *a2;
  v11 = (int32x4_t)v10;
  v11.i32[2] = a2[1].i32[0];
  *(int32x2_t *)v12.i8 = a2[2];
  v13 = v12;
  v13.i32[2] = a2[3].i32[0];
  v14 = (float32x2_t)vzip1_s32(*a2, *(int32x2_t *)v12.i8);
  v15 = (float32x2_t)a2[4];
  v12.i32[0] = a2[5].i32[0];
  v16 = (float32x2_t)vtrn2q_s32(v11, v13).u64[0];
  *(int32x2_t *)v17.f32 = a2[6];
  v17.i32[2] = a2[7].i32[0];
  v13.i64[0] = vzip2q_s32(v11, v13).u64[0];
  v18 = (int8x16_t)vnegq_f32(v17);
  *(float32x2_t *)v10.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v14, *(float *)v18.i32), v16, *(float32x2_t *)v17.f32, 1), *(float32x2_t *)v13.i8, v17, 2);
  v19 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v16, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v16, 1), 0xCuLL).u64[0];
  *(float32x2_t *)&v10.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(v15, *(float32x2_t *)v18.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v15, 1), *(float32x2_t *)v17.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), *(float32x2_t *)v12.i8);
  v18.i32[0] = *(_DWORD *)(a1 + 32);
  v20 = *(float *)(a1 + 36);
  v21 = *(float *)(a1 + 40);
  v22 = *(float *)(a1 + 44);
  __asm { FMOV            V16.4S, #1.0 }
  v28 = _Q16;
  v28.f32[0] = (float)(*(float *)v18.i32 * (float)((float)((float)*(unsigned int *)(a1 + 88) + -1.0) + 0.5)) + v21;
  v29 = v28;
  v29.f32[1] = (float)((float)((float)((float)*(unsigned int *)(a1 + 92) + -1.0) + 0.5) * v20) + v22;
  v30 = (int8x16_t)vmulq_n_f32(v29, a5);
  *(float32x2_t *)v31.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v14, *(float *)v30.i32), v19, *(float32x2_t *)v30.i8, 1), *(float32x2_t *)v13.i8, (float32x4_t)v30, 2);
  *(float32x2_t *)&v31.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v15, *(float32x2_t *)v30.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 1), v15, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), *(float32x2_t *)v12.i8);
  v32 = vaddq_f32(v10, v31);
  _Q16.f32[0] = v21 - (float)(*(float *)v18.i32 * 0.5);
  v33 = _Q16;
  v33.f32[1] = (float)((float)((float)((float)*(unsigned int *)(a1 + 92) + -1.0) + 0.5) * v20) + v22;
  v34 = (int8x16_t)vmulq_n_f32(v33, a5);
  *(float32x2_t *)v35.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v14, *(float *)v34.i32), v19, *(float32x2_t *)v34.i8, 1), *(float32x2_t *)v13.i8, (float32x4_t)v34, 2);
  *(float32x2_t *)&v35.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v15, *(float32x2_t *)v34.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1), v15, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), *(float32x2_t *)v12.i8);
  v36 = vaddq_f32(v10, v35);
  v28.f32[1] = v22 - (float)(v20 * 0.5);
  v37 = (int8x16_t)vmulq_n_f32(v28, a5);
  *(float32x2_t *)v35.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v14, *(float *)v37.i32), v19, *(float32x2_t *)v37.i8, 1), *(float32x2_t *)v13.i8, (float32x4_t)v37, 2);
  *(float32x2_t *)&v35.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v15, *(float32x2_t *)v37.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.i8, 1), v15, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), *(float32x2_t *)v12.i8);
  _Q16.i32[1] = v28.i32[1];
  v38 = (int8x16_t)vmulq_n_f32(_Q16, a5);
  *(float32x2_t *)v39.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v14, *(float *)v38.i32), v19, *(float32x2_t *)v38.i8, 1), *(float32x2_t *)v13.i8, (float32x4_t)v38, 2);
  *(float32x2_t *)&v39.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v15, *(float32x2_t *)v38.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.i8, 1), v15, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL), *(float32x2_t *)v12.i8);
  v40 = vaddq_f32(v10, v35);
  v41 = vaddq_f32(v10, v39);
  v42 = vsubq_f32(v36, v32);
  v43 = vsubq_f32(v40, v32);
  *(_DWORD *)&v55[8] = v10.i32[2];
  *(_QWORD *)v55 = v10.i64[0];
  *(_DWORD *)&v55[20] = v32.i32[2];
  *(_QWORD *)&v55[12] = v32.i64[0];
  LODWORD(v56) = v36.i32[2];
  *(_QWORD *)&v55[24] = v36.i64[0];
  HIDWORD(v56) = v41.i32[2];
  *(_QWORD *)((char *)&v56 + 4) = v41.i64[0];
  *(_DWORD *)&v57[8] = v40.i32[2];
  *(_QWORD *)v57 = v40.i64[0];
  v44 = vmlaq_f32(v40, v43, (float32x4_t)vdupq_n_s32(0x3D4CCCCDu));
  v45 = vmlaq_f32(v44, v42, (float32x4_t)vdupq_n_s32(0x3E99999Au));
  *(_DWORD *)&v57[20] = v45.i32[2];
  *(_QWORD *)&v57[12] = v45.i64[0];
  v46 = vmlaq_f32(v44, v42, (float32x4_t)vdupq_n_s32(0x3F333333u));
  LODWORD(v58) = v46.i32[2];
  *(_QWORD *)&v57[24] = v46.i64[0];
  __asm { FMOV            V0.4S, #0.25 }
  v48 = vmlaq_f32(v40, v43, _Q0);
  _Q0.i64[0] = 0x3F0000003F000000;
  _Q0.i64[1] = 0x3F0000003F000000;
  v49 = vmlaq_f32(v48, v42, _Q0);
  HIDWORD(v58) = v49.i32[2];
  *(_QWORD *)((char *)&v58 + 4) = v49.i64[0];
  sub_224005B7C(v9, (uint64_t *)v55, v59, 8uLL);
  *(_OWORD *)v55 = xmmword_224693FB0;
  *(_OWORD *)&v55[16] = unk_224693FC0;
  v56 = xmmword_224693FD0;
  *(_OWORD *)v57 = xmmword_224693FE0;
  *(_OWORD *)&v57[16] = xmmword_224693FF0;
  v58 = xmmword_224694000;
  sub_223744B60(a4 + 112, (uint64_t *)v55, v59, 8uLL);
  result = a4 + 32;
  v51 = *(_QWORD *)(a4 + 32);
  v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  v53 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a4 + 40) - v51) >> 2);
  if (v52 <= v53)
  {
    if (v52 < v53)
      *(_QWORD *)(a4 + 40) = v51 + 4 * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  }
  else
  {
    result = sub_2235341F4(result, v52 - v53, a3);
  }
  *(_DWORD *)(a4 + 64) = 1;
  return result;
}

void sub_224003094(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_2240030A8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_2240030BC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_2240030D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>, float a6@<S0>)
{
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  int32x4_t v16;
  float v17;
  float v18;
  int32x4_t v19;
  int v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x2_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float v27;
  unint64_t v28;
  uint64_t v29;
  __float2 v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  unint64_t result;
  float32x4_t v36;
  __int32 v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  __int32 v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v51;
  uint64_t v52;
  __int32 v53;

  sub_2241498F4(a5, 0);
  sub_22339E3C8(a5, 2 * a4 + 2);
  sub_22339E528(a5 + 112, 2 * a4);
  sub_22339E3C8(a5 + 32, 2 * a4 + 2);
  v11.i64[0] = *(_QWORD *)a2;
  v11.i32[2] = *(_DWORD *)(a2 + 8);
  v12.i64[0] = *(_QWORD *)a1;
  v12.i32[2] = *(_DWORD *)(a1 + 8);
  v13 = vsubq_f32(v11, v12);
  v14 = (float32x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
  v15.f32[0] = 1.0
             / sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.f32, 1), *(float32x2_t *)v13.f32, 1), v14, v14).f32[0]);
  v16 = (int32x4_t)vmulq_n_f32(v13, v15.f32[0]);
  v17 = fabsf(vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v16.i8, 0), 0, vmul_lane_f32(v15, *(float32x2_t *)v13.f32, 1)), v14, v15).f32[0]);
  v47 = a3;
  if (v17 == 1.0 || (v17 >= 1.0 ? (v18 = v17 + -1.0) : (v18 = 1.0 - v17), v18 <= 0.000001))
    v19 = (int32x4_t)xmmword_2245F4CF0;
  else
    v19 = (int32x4_t)xmmword_2245C76E0;
  v20 = 0;
  v21 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v16, v16), (int8x16_t)v16, 0xCuLL);
  v22 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v16, (int8x16_t)v16, 0xCuLL), (int8x16_t)v16, 8uLL);
  v23 = vmlsq_f32(vmulq_f32(v21, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v19, (int8x16_t)v19, 0xCuLL), (int8x16_t)v19, 8uLL)), v22, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v19, v19), (int8x16_t)v19, 0xCuLL));
  v24 = (float32x2_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
  v25 = (int32x4_t)vmulq_n_f32(v23, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.f32, 1), *(float32x2_t *)v23.f32, 1), v24, v24).f32[0]));
  v26 = vmlsq_f32(vmulq_f32(v22, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v25, v25), (int8x16_t)v25, 0xCuLL)), v21, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v25, (int8x16_t)v25, 0xCuLL), (int8x16_t)v25, 8uLL));
  v23.i64[0] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  v48 = vmulq_n_f32(v26, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.f32, 1), *(float32x2_t *)v26.f32, 1), *(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32).f32[0]));
  v49 = (float32x4_t)v25;
  v28 = *(_QWORD *)(a5 + 8);
  do
  {
    while (1)
    {
      v27 = 6.28318548 / (double)a4;
      v30 = __sincosf_stret(v27 * (float)v20);
      v31 = vmlaq_n_f32(vmulq_n_f32(v48, v30.__sinval), v49, v30.__cosval);
      v32 = vmulq_n_f32(v31, a6);
      v31.i64[0] = *(_QWORD *)a1;
      v31.i32[2] = *(_DWORD *)(a1 + 8);
      v51 = v32;
      v33 = vaddq_f32(v31, v32);
      v53 = v33.i32[2];
      v52 = v33.i64[0];
      if (v28 >= *(_QWORD *)(a5 + 16))
      {
        result = sub_2233B2838((unint64_t *)a5, &v52);
      }
      else
      {
        v34 = v52;
        *(_DWORD *)(v28 + 8) = v53;
        *(_QWORD *)v28 = v34;
        result = v28 + 12;
      }
      *(_QWORD *)(a5 + 8) = result;
      v33.i64[0] = *(_QWORD *)a2;
      v33.i32[2] = *(_DWORD *)(a2 + 8);
      v36 = vaddq_f32(v51, v33);
      v53 = v36.i32[2];
      v52 = v36.i64[0];
      if (result >= *(_QWORD *)(a5 + 16))
        break;
      v29 = v52;
      *(_DWORD *)(result + 8) = v53;
      *(_QWORD *)result = v29;
      v28 = result + 12;
      *(_QWORD *)(a5 + 8) = result + 12;
      if (a4 < ++v20)
        goto LABEL_15;
    }
    result = sub_2233B2838((unint64_t *)a5, &v52);
    v28 = result;
    *(_QWORD *)(a5 + 8) = result;
    ++v20;
  }
  while (a4 >= v20);
LABEL_15:
  if (a4)
  {
    v37 = 0;
    result = *(_QWORD *)(a5 + 120);
    do
    {
      v39 = v37 + 2;
      LODWORD(v52) = v37;
      HIDWORD(v52) = v37 + 2;
      v40 = v37 + 1;
      v53 = v37 + 1;
      if (result >= *(_QWORD *)(a5 + 128))
      {
        v42 = sub_2233B29C0((unint64_t *)(a5 + 112), &v52);
      }
      else
      {
        v41 = v52;
        *(_DWORD *)(result + 8) = v53;
        *(_QWORD *)result = v41;
        v42 = result + 12;
      }
      *(_QWORD *)(a5 + 120) = v42;
      LODWORD(v52) = v40;
      HIDWORD(v52) = v40 + 1;
      v43 = v40 + 2;
      v53 = v43;
      if (v42 < *(_QWORD *)(a5 + 128))
      {
        v38 = v52;
        *(_DWORD *)(v42 + 8) = v53;
        *(_QWORD *)v42 = v38;
        result = v42 + 12;
      }
      else
      {
        result = sub_2233B29C0((unint64_t *)(a5 + 112), &v52);
      }
      *(_QWORD *)(a5 + 120) = result;
      v37 = v43 - 1;
    }
    while (2 * a4 != v39);
    v28 = *(_QWORD *)(a5 + 8);
  }
  v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *(_QWORD *)a5) >> 2);
  v45 = *(_QWORD *)(a5 + 32);
  v46 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a5 + 40) - v45) >> 2);
  if (v44 <= v46)
  {
    if (v44 < v46)
      *(_QWORD *)(a5 + 40) = v45 + 4 * ((uint64_t)(v28 - *(_QWORD *)a5) >> 2);
  }
  else
  {
    result = sub_2235341F4(a5 + 32, v44 - v46, v47);
  }
  *(_DWORD *)(a5 + 64) = 1;
  return result;
}

void sub_22400349C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_2240034B0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_2240034C4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_2240034D8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_2240034EC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_224003500(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_224003514(uint64_t a1, int a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  int v44;
  _DWORD *result;
  int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;

  v6 = -1431655765 * ((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v51 = v6;
  sub_22339E3C8(a1, (v6 + 4));
  if (a2 == 1)
  {
    v49 = 3148076810;
    v50 = 961656599;
    v10 = *(_QWORD *)(a1 + 8);
    if (v10 >= *(_QWORD *)(a1 + 16))
    {
      v12 = sub_2233B2838((unint64_t *)a1, &v49);
    }
    else
    {
      v11 = v49;
      *(_DWORD *)(v10 + 8) = v50;
      *(_QWORD *)v10 = v11;
      v12 = v10 + 12;
    }
    *(_QWORD *)(a1 + 8) = v12;
    v49 = 1000593162;
    v50 = 961656599;
    if (v12 >= *(_QWORD *)(a1 + 16))
    {
      v19 = sub_2233B2838((unint64_t *)a1, &v49);
    }
    else
    {
      v18 = v49;
      *(_DWORD *)(v12 + 8) = v50;
      *(_QWORD *)v12 = v18;
      v19 = v12 + 12;
    }
    *(_QWORD *)(a1 + 8) = v19;
    v49 = 0x3DCCCCCD3BA3D70ALL;
    v50 = 961656599;
    if (v19 >= *(_QWORD *)(a1 + 16))
    {
      v23 = sub_2233B2838((unint64_t *)a1, &v49);
    }
    else
    {
      v24 = v49;
      *(_DWORD *)(v19 + 8) = v50;
      *(_QWORD *)v19 = v24;
      v23 = v19 + 12;
    }
    *(_QWORD *)(a1 + 8) = v23;
    v49 = 0x3DCCCCCDBBA3D70ALL;
    v50 = 961656599;
    if (v23 >= *(_QWORD *)(a1 + 16))
      goto LABEL_36;
    goto LABEL_32;
  }
  if (a2 == 2)
  {
    v49 = 0xBBA3D70A00000000;
    v50 = 961656599;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 >= *(_QWORD *)(a1 + 16))
    {
      v9 = sub_2233B2838((unint64_t *)a1, &v49);
    }
    else
    {
      v8 = v49;
      *(_DWORD *)(v7 + 8) = v50;
      *(_QWORD *)v7 = v8;
      v9 = v7 + 12;
    }
    *(_QWORD *)(a1 + 8) = v9;
    v49 = 0x3BA3D70A00000000;
    v50 = 961656599;
    if (v9 >= *(_QWORD *)(a1 + 16))
    {
      v17 = sub_2233B2838((unint64_t *)a1, &v49);
    }
    else
    {
      v16 = v49;
      *(_DWORD *)(v9 + 8) = v50;
      *(_QWORD *)v9 = v16;
      v17 = v9 + 12;
    }
    *(_QWORD *)(a1 + 8) = v17;
    v49 = 0x3BA3D70A00000000;
    v50 = 1036858793;
    if (v17 >= *(_QWORD *)(a1 + 16))
    {
      v23 = sub_2233B2838((unint64_t *)a1, &v49);
    }
    else
    {
      v22 = v49;
      *(_DWORD *)(v17 + 8) = v50;
      *(_QWORD *)v17 = v22;
      v23 = v17 + 12;
    }
    *(_QWORD *)(a1 + 8) = v23;
    v49 = 0xBBA3D70A00000000;
    v50 = 1036858793;
    if (v23 >= *(_QWORD *)(a1 + 16))
    {
LABEL_36:
      v29 = sub_2233B2838((unint64_t *)a1, &v49);
      goto LABEL_37;
    }
LABEL_32:
    v27 = v49;
    *(_DWORD *)(v23 + 8) = v50;
    *(_QWORD *)v23 = v27;
    *(_QWORD *)(a1 + 8) = v23 + 12;
    goto LABEL_38;
  }
  v49 = 0xBBA3D70A00000000;
  v50 = 961656599;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13 >= *(_QWORD *)(a1 + 16))
  {
    v15 = sub_2233B2838((unint64_t *)a1, &v49);
  }
  else
  {
    v14 = v49;
    *(_DWORD *)(v13 + 8) = v50;
    *(_QWORD *)v13 = v14;
    v15 = v13 + 12;
  }
  *(_QWORD *)(a1 + 8) = v15;
  v49 = 0x3BA3D70A00000000;
  v50 = 961656599;
  if (v15 >= *(_QWORD *)(a1 + 16))
  {
    v21 = sub_2233B2838((unint64_t *)a1, &v49);
  }
  else
  {
    v20 = v49;
    *(_DWORD *)(v15 + 8) = v50;
    *(_QWORD *)v15 = v20;
    v21 = v15 + 12;
  }
  *(_QWORD *)(a1 + 8) = v21;
  v49 = 0x3BA3D70A3DCCCCCDLL;
  v50 = 961656599;
  if (v21 >= *(_QWORD *)(a1 + 16))
  {
    v26 = sub_2233B2838((unint64_t *)a1, &v49);
  }
  else
  {
    v25 = v49;
    *(_DWORD *)(v21 + 8) = v50;
    *(_QWORD *)v21 = v25;
    v26 = v21 + 12;
  }
  *(_QWORD *)(a1 + 8) = v26;
  v49 = 0xBBA3D70A3DCCCCCDLL;
  v50 = 961656599;
  if (v26 >= *(_QWORD *)(a1 + 16))
    goto LABEL_36;
  v28 = v49;
  *(_DWORD *)(v26 + 8) = v50;
  *(_QWORD *)v26 = v28;
  v29 = v26 + 12;
LABEL_37:
  *(_QWORD *)(a1 + 8) = v29;
LABEL_38:
  sub_22339E3C8(a1 + 32, (v6 + 4));
  v30 = *(_QWORD *)(a1 + 40);
  if (v30 >= *(_QWORD *)(a1 + 48))
  {
    v32 = sub_2233B2B48((unint64_t *)(a1 + 32), (uint64_t *)a3);
    *(_QWORD *)(a1 + 40) = v32;
    if (v32 >= *(_QWORD *)(a1 + 48))
    {
LABEL_40:
      v33 = sub_2233B2B48((unint64_t *)(a1 + 32), (uint64_t *)a3);
      *(_QWORD *)(a1 + 40) = v33;
      if (v33 >= *(_QWORD *)(a1 + 48))
        goto LABEL_41;
LABEL_45:
      v37 = *(_QWORD *)a3;
      *(_DWORD *)(v33 + 8) = *(_DWORD *)(a3 + 8);
      *(_QWORD *)v33 = v37;
      v34 = v33 + 12;
      *(_QWORD *)(a1 + 40) = v34;
      if (v34 >= *(_QWORD *)(a1 + 48))
        goto LABEL_42;
      goto LABEL_46;
    }
  }
  else
  {
    v31 = *(_QWORD *)a3;
    *(_DWORD *)(v30 + 8) = *(_DWORD *)(a3 + 8);
    *(_QWORD *)v30 = v31;
    v32 = v30 + 12;
    *(_QWORD *)(a1 + 40) = v30 + 12;
    if (v30 + 12 >= *(_QWORD *)(a1 + 48))
      goto LABEL_40;
  }
  v36 = *(_QWORD *)a3;
  *(_DWORD *)(v32 + 8) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)v32 = v36;
  v33 = v32 + 12;
  *(_QWORD *)(a1 + 40) = v33;
  if (v33 < *(_QWORD *)(a1 + 48))
    goto LABEL_45;
LABEL_41:
  v34 = sub_2233B2B48((unint64_t *)(a1 + 32), (uint64_t *)a3);
  *(_QWORD *)(a1 + 40) = v34;
  if (v34 >= *(_QWORD *)(a1 + 48))
  {
LABEL_42:
    v35 = sub_2233B2B48((unint64_t *)(a1 + 32), (uint64_t *)a3);
    goto LABEL_47;
  }
LABEL_46:
  v38 = *(_QWORD *)a3;
  *(_DWORD *)(v34 + 8) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)v34 = v38;
  v35 = v34 + 12;
LABEL_47:
  v39 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 40) = v35;
  *(_DWORD *)(a1 + 64) = 1;
  sub_22339E528(a1 + 112, 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 120) - v39) >> 2) + 2);
  v40 = v6 + 2;
  v48 = v6 + 2;
  LODWORD(v49) = v6 + 1;
  v42 = *(_DWORD **)(a1 + 120);
  v41 = *(_QWORD *)(a1 + 128);
  if ((unint64_t)v42 >= v41)
  {
    v43 = sub_2233B2CD0(a1 + 112, &v51, &v49, &v48);
    v46 = v51;
    v47 = *(_QWORD *)(a1 + 128);
    v40 = v51 + 2;
    *(_QWORD *)(a1 + 120) = v43;
    v44 = v46 + 3;
    v48 = v46 + 3;
    LODWORD(v49) = v40;
    if ((unint64_t)v43 >= v47)
      goto LABEL_49;
LABEL_51:
    *v43 = v40;
    v43[1] = v44;
    v43[2] = v51;
    result = v43 + 3;
    goto LABEL_52;
  }
  *v42 = v6;
  v42[1] = v6 + 1;
  v43 = v42 + 3;
  v42[2] = v40;
  *(_QWORD *)(a1 + 120) = v42 + 3;
  v44 = v6 + 3;
  v48 = v6 + 3;
  LODWORD(v49) = v6 + 2;
  if ((unint64_t)(v42 + 3) < v41)
    goto LABEL_51;
LABEL_49:
  result = sub_2233B2E70(a1 + 112, &v49, &v48, &v51);
LABEL_52:
  *(_QWORD *)(a1 + 120) = result;
  return result;
}

uint64_t *sub_224003A84(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x2_t *v16;
  int32x2_t *v17;
  unint64_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int32x2_t *v27;
  int32x2_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int32x2_t v33;
  int v34;

  v31 = 0;
  v32 = 961656599;
  if (a2 == 1)
  {
    v29 = 0;
    v4 = 0x3951B7173DCCCCCDLL;
  }
  else if (a2 == 2)
  {
    v29 = 0;
    v4 = 0x3DCD35A900000000;
  }
  else
  {
    v29 = 1036831949;
    v4 = 0x3951B71700000000;
  }
  v30 = v4;
  sub_2240030D0((uint64_t)&v31, (uint64_t)&v29, a3, 8u, (uint64_t)&v23, 0.0025);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v6 = -1431655765 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  sub_22339E3C8(a1, v6 - 0x5555555555555555 * ((v24 - v23) >> 2));
  v7 = v23;
  v8 = v24;
  if (v23 != v24)
  {
    v9 = *(_QWORD *)(a1 + 8);
    do
    {
      if (v9 < *(_QWORD *)(a1 + 16))
      {
        v10 = *(_QWORD *)v7;
        *(_DWORD *)(v9 + 8) = *(_DWORD *)(v7 + 8);
        *(_QWORD *)v9 = v10;
        v9 += 12;
      }
      else
      {
        v9 = sub_2233B2B48((unint64_t *)a1, (uint64_t *)v7);
      }
      *(_QWORD *)(a1 + 8) = v9;
      v7 += 12;
    }
    while (v7 != v8);
  }
  sub_22339E3C8(a1 + 32, v6 - 0x5555555555555555 * ((v26 - v25) >> 2));
  v11 = v25;
  v12 = v26;
  if (v25 != v26)
  {
    v13 = *(_QWORD *)(a1 + 40);
    do
    {
      if (v13 < *(_QWORD *)(a1 + 48))
      {
        v14 = *(_QWORD *)v11;
        *(_DWORD *)(v13 + 8) = *(_DWORD *)(v11 + 8);
        *(_QWORD *)v13 = v14;
        v13 += 12;
      }
      else
      {
        v13 = sub_2233B2B48((unint64_t *)(a1 + 32), (uint64_t *)v11);
      }
      *(_QWORD *)(a1 + 40) = v13;
      v11 += 12;
    }
    while (v11 != v12);
  }
  v15 = *(_QWORD *)(a1 + 112);
  *(_DWORD *)(a1 + 64) = 1;
  sub_22339E528(a1 + 112, 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 120) - v15) >> 2)- 0x5555555555555555 * (((char *)v28 - (char *)v27) >> 2));
  v16 = v27;
  v17 = v28;
  if (v27 != v28)
  {
    v18 = *(_QWORD *)(a1 + 120);
    v19 = vdup_n_s32(v5);
    do
    {
      v21 = v16[1].i32[0] + v5;
      v33 = vadd_s32(*v16, v19);
      v34 = v21;
      if (v18 < *(_QWORD *)(a1 + 128))
      {
        v20 = v33;
        *(_DWORD *)(v18 + 8) = v34;
        *(int32x2_t *)v18 = v20;
        v18 += 12;
      }
      else
      {
        v18 = sub_2233B29C0((unint64_t *)(a1 + 112), (uint64_t *)&v33);
      }
      *(_QWORD *)(a1 + 120) = v18;
      v16 = (int32x2_t *)((char *)v16 + 12);
    }
    while (v16 != v17);
  }
  return sub_22316F8F4(&v23);
}

void sub_224003CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22316F8F4(&a9);
  _Unwind_Resume(a1);
}

void sub_224003CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22316F8F4(&a9);
  _Unwind_Resume(a1);
}

void sub_224003D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22316F8F4(&a9);
  _Unwind_Resume(a1);
}

void sub_224003D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22316F8F4(&a9);
  _Unwind_Resume(a1);
}

float32x4_t sub_224003D34@<Q0>(float32x2_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  float32x4_t result;
  float32x4_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t *v11;
  float32x2_t *v12;
  float32x4_t v13;
  uint64_t v14;
  int v15;

  sub_2241498F4(a3, 0);
  *(_DWORD *)(a3 + 64) = 1;
  v14 = 1065353216;
  v15 = 0;
  if (a2)
  {
    sub_224003514(a3, 0, (uint64_t)&v14);
    v14 = 0x3F80000000000000;
    v15 = 0;
    sub_224003514(a3, 1, (uint64_t)&v14);
    v14 = 0;
    v15 = 1065353216;
    sub_224003514(a3, 2, (uint64_t)&v14);
  }
  else
  {
    sub_224003A84(a3, 0, &v14);
    v14 = 0x3F80000000000000;
    v15 = 0;
    sub_224003A84(a3, 1, &v14);
    v14 = 0;
    v15 = 1065353216;
    sub_224003A84(a3, 2, &v14);
  }
  v11 = *(float32x2_t **)a3;
  v12 = *(float32x2_t **)(a3 + 8);
  if (*(float32x2_t **)a3 != v12)
  {
    do
    {
      v7.i32[0] = a1[1].i32[0];
      v8.i32[0] = a1[3].i32[0];
      v9.i32[0] = a1[5].i32[0];
      v10.i32[0] = v11[1].i32[0];
      *(float32x2_t *)v13.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a1, COERCE_FLOAT(*v11)), a1[2], *v11, 1), a1[4], v10.f32[0]);
      *(float32x2_t *)&v13.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v7.f32, *v11), v8, *v11, 1), v10, v9);
      *(float32x2_t *)v7.f32 = a1[6];
      v7.i32[2] = a1[7].i32[0];
      result = vaddq_f32(v13, v7);
      v11[1].i32[0] = result.i32[2];
      *v11 = *(float32x2_t *)result.f32;
      v11 = (float32x2_t *)((char *)v11 + 12);
    }
    while (v11 != v12);
  }
  return result;
}

void sub_224003EA0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_224003EB4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_224003EC8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_224003EDC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_224003EF0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_224003F04(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_224003F18@<X0>(unint64_t a1@<X0>, float32x2_t *a2@<X1>, float32x2_t *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, __int16 a6@<W5>, uint64_t a7@<X8>, int8x16_t a8@<Q0>)
{
  int v11;
  uint64_t result;
  unint64_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  float32x2_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  float32x2_t v47;
  float32x2_t v48;
  int8x16_t v49;
  int8x16_t v50;
  __int16 v51;
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  __int128 *v55;
  int v56;
  __int128 **v57;

  v51 = a6;
  v11 = a1 - 2;
  if (a1 <= 2)
    return sub_2241498F4(a7, 0);
  *(float32x2_t *)a8.i8 = *a3;
  a8.i32[2] = a3[1].i32[0];
  v50 = a8;
  *(float32x2_t *)a8.i8 = a3[2];
  a8.i32[2] = a3[3].i32[0];
  v49 = a8;
  sub_2241498F4(a7, 0);
  HIDWORD(v54) = 0;
  v53 = 0;
  v52 = 0uLL;
  sub_22339E3C8((uint64_t)&v52, a1);
  v16 = *((_QWORD *)&v52 + 1);
  v17 = (float32x4_t)vextq_s8(v49, v49, 8uLL);
  v47 = *(float32x2_t *)v17.f32;
  v48 = (float32x2_t)vextq_s8(v50, v50, 8uLL).u64[0];
  v18 = 8 * a1;
  do
  {
    while (1)
    {
      *(float32x2_t *)v20.f32 = vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v50.i8, COERCE_FLOAT(*a2)), *(float32x2_t *)v49.i8, *a2, 1);
      *(float32x2_t *)&v20.u32[2] = vmla_lane_f32(vmul_f32(v48, *a2), v47, *a2, 1);
      *(float32x2_t *)v17.f32 = a3[6];
      v17.i32[2] = a3[7].i32[0];
      v17 = vaddq_f32(v20, v17);
      v56 = v17.i32[2];
      v55 = (__int128 *)v17.i64[0];
      if (v16 >= v53)
        break;
      v19 = (uint64_t)v55;
      *(_DWORD *)(v16 + 8) = v56;
      *(_QWORD *)v16 = v19;
      v16 += 12;
      *((_QWORD *)&v52 + 1) = v16;
      ++a2;
      v18 -= 8;
      if (!v18)
        goto LABEL_7;
    }
    v16 = sub_2233B2838((unint64_t *)&v52, (uint64_t *)&v55);
    *((_QWORD *)&v52 + 1) = v16;
    ++a2;
    v18 -= 8;
  }
  while (v18);
LABEL_7:
  v22 = v53;
  v21 = v54;
  v23 = v52;
  v24 = *(_QWORD *)a7;
  if (*(_QWORD *)a7)
  {
    *(_QWORD *)(a7 + 8) = v24;
    v25 = -1431655765 * ((unint64_t)(*(_QWORD *)(a7 + 16) - v24) >> 2);
    *(_QWORD *)&v52 = v24;
    DWORD2(v52) = v25;
    v26 = *(unsigned int *)(a7 + 28);
    if ((_DWORD)v26 == -1)
      sub_22316DD70();
    v55 = &v52;
    ((void (*)(__int128 **, uint64_t))off_24EC65C38[v26])(&v55, a7 + 24);
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = 0;
  }
  *(_QWORD *)a7 = v23;
  *(_QWORD *)(a7 + 8) = v16;
  *(_QWORD *)(a7 + 16) = v22;
  *(_QWORD *)(a7 + 24) = v21;
  HIDWORD(v54) = 0;
  v53 = 0;
  v52 = 0uLL;
  result = sub_22339E528((uint64_t)&v52, (a1 - 2));
  v30 = *((_QWORD *)&v52 + 1);
  v31 = 1;
  do
  {
    while (1)
    {
      v33 = v31 + 1;
      LODWORD(v55) = 0;
      HIDWORD(v55) = v31;
      v56 = v31 + 1;
      if (v30 >= v53)
        break;
      v32 = (uint64_t)v55;
      *(_DWORD *)(v30 + 8) = v56;
      *(_QWORD *)v30 = v32;
      v30 += 12;
      *((_QWORD *)&v52 + 1) = v30;
      v31 = v33;
      if (v33 - 1 == v11)
        goto LABEL_14;
    }
    result = sub_2233B29C0((unint64_t *)&v52, (uint64_t *)&v55);
    v30 = result;
    *((_QWORD *)&v52 + 1) = result;
    v31 = v33;
  }
  while (v33 - 1 != v11);
LABEL_14:
  v35 = v53;
  v34 = v54;
  v36 = v52;
  v37 = *(_QWORD *)(a7 + 112);
  if (v37)
  {
    *(_QWORD *)(a7 + 120) = v37;
    v38 = -1431655765 * ((unint64_t)(*(_QWORD *)(a7 + 128) - v37) >> 2);
    *(_QWORD *)&v52 = v37;
    DWORD2(v52) = v38;
    v39 = *(unsigned int *)(a7 + 140);
    if ((_DWORD)v39 == -1)
      sub_22316DD70();
    v55 = &v52;
    result = ((uint64_t (*)(__int128 **, uint64_t))off_24EC65C58[v39])(&v55, a7 + 136);
    *(_QWORD *)(a7 + 112) = 0;
    *(_QWORD *)(a7 + 120) = 0;
    *(_QWORD *)(a7 + 128) = 0;
  }
  *(_QWORD *)(a7 + 112) = v36;
  *(_QWORD *)(a7 + 120) = v30;
  *(_QWORD *)(a7 + 128) = v35;
  *(_QWORD *)(a7 + 136) = v34;
  if (a4)
  {
    *(_DWORD *)(a7 + 104) = 1;
    v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a7 + 8) - *(_QWORD *)a7) >> 2);
    v27.i32[0] = a3[1].i32[0];
    v28.i32[0] = a3[3].i32[0];
    v29.i32[0] = a3[5].i32[0];
    v41 = vadd_f32(a3[4], vmla_f32(vmul_f32(*a3, 0), 0, a3[2]));
    DWORD2(v52) = vadd_f32(v29, vmla_f32(vmul_f32(v27, 0), 0, v28)).u32[0];
    *(float32x2_t *)&v52 = v41;
    result = sub_22339E688(a7 + 72, v40, (uint64_t *)&v52);
  }
  if (*(_BYTE *)(a5 + 12))
  {
    *(_DWORD *)(a7 + 64) = 1;
    result = sub_22339EBD4((uint64_t)&v52, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a7 + 8) - *(_QWORD *)a7) >> 2), a5);
    v42 = *(_QWORD *)(a7 + 32);
    if (v42)
    {
      *(_QWORD *)(a7 + 40) = v42;
      v43 = -1431655765 * ((unint64_t)(*(_QWORD *)(a7 + 48) - v42) >> 2);
      v55 = (__int128 *)v42;
      v56 = v43;
      v44 = *(unsigned int *)(a7 + 60);
      if ((_DWORD)v44 == -1)
        sub_22316DD70();
      v57 = &v55;
      result = ((uint64_t (*)(__int128 ***, uint64_t))off_24EC65C38[v44])(&v57, a7 + 56);
      *(_QWORD *)(a7 + 32) = 0;
      *(_QWORD *)(a7 + 40) = 0;
      *(_QWORD *)(a7 + 48) = 0;
    }
    *(_OWORD *)(a7 + 32) = v52;
    v45 = v54;
    *(_QWORD *)(a7 + 48) = v53;
    *(_QWORD *)(a7 + 56) = v45;
  }
  if ((a6 & 0xFF00) != 0)
  {
    result = sub_22339E890(a7 + 240, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a7 + 8) - *(_QWORD *)a7) >> 2), (const char *)&v51);
    *(_DWORD *)(a7 + 272) = 1;
  }
  return result;
}

void sub_224004364(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_224004384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t *v13;
  va_list va;

  va_start(va, a13);
  sub_22317ED18((uint64_t *)va);
  sub_22316F8F4(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_2240043CC@<X0>(_BYTE *a1@<X8>)
{
  std::chrono::system_clock::time_point v2;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3;
  unint64_t v4;
  tm *v5;
  size_t v6;
  size_t v7;
  size_t v8;
  void *p_p;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  void *__p;
  size_t v26;
  int64_t v27;
  tm __t;
  time_t v29;
  _QWORD v30[2];
  _QWORD v31[3];
  const void *v32;
  uint64_t v33;
  const void *v34;
  unint64_t v35;
  void *v36;
  char v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  char __s[24];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  sub_223195210((uint64_t)v30);
  v2.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v3 = v2.__d_.__rep_ / 1000 % 1000;
  if (v3 >= 0)
    v4 = v2.__d_.__rep_ / 1000 % 1000;
  else
    v4 = v3 + 1000;
  *(_QWORD *)&__t.tm_sec = v2.__d_.__rep_ - 1000 * v4;
  v29 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&__t);
  v5 = localtime_r(&v29, &__t);
  strcpy(__s, "yyyy.mm.dd.HH-MM.SS.fff");
  v6 = strlen(__s);
  strftime(__s, v6, "%Y-%m-%d %H:%M:%S", v5);
  v7 = strlen(__s);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_p = operator new(v10 + 1);
    v26 = v8;
    v27 = v11 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_11;
  }
  HIBYTE(v27) = v7;
  p_p = &__p;
  if (v7)
LABEL_11:
    memcpy(p_p, __s, v8);
  *((_BYTE *)p_p + v8) = 0;
  if (v27 >= 0)
    v12 = &__p;
  else
    v12 = __p;
  if (v27 >= 0)
    v13 = HIBYTE(v27);
  else
    v13 = v26;
  v14 = sub_2231813E8(v31, (uint64_t)v12, v13);
  sub_2231813E8(v14, (uint64_t)",", 1);
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__p);
    if (v4 < 0xA)
      goto LABEL_20;
  }
  else if (v4 < 0xA)
  {
LABEL_20:
    v15 = "00";
    v16 = 2;
    goto LABEL_24;
  }
  if (v4 > 0x63)
    goto LABEL_25;
  v15 = "0";
  v16 = 1;
LABEL_24:
  sub_2231813E8(v31, (uint64_t)v15, v16);
LABEL_25:
  std::ostream::operator<<();
  if ((v39 & 0x10) != 0)
  {
    v18 = v38;
    if (v38 < v35)
    {
      v38 = v35;
      v18 = v35;
    }
    v19 = v34;
    v17 = v18 - (_QWORD)v34;
    if (v18 - (unint64_t)v34 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_42;
  }
  else
  {
    if ((v39 & 8) == 0)
    {
      v17 = 0;
      a1[23] = 0;
      goto LABEL_38;
    }
    v19 = v32;
    v17 = v33 - (_QWORD)v32;
    if ((unint64_t)(v33 - (_QWORD)v32) > 0x7FFFFFFFFFFFFFF7)
LABEL_42:
      sub_22316DBC0();
  }
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    v22 = operator new(v20 + 1);
    *((_QWORD *)a1 + 1) = v17;
    *((_QWORD *)a1 + 2) = v21 | 0x8000000000000000;
    *(_QWORD *)a1 = v22;
    a1 = v22;
    goto LABEL_37;
  }
  a1[23] = v17;
  if (v17)
LABEL_37:
    memmove(a1, v19, v17);
LABEL_38:
  a1[v17] = 0;
  v30[0] = *MEMORY[0x24BEDB7F0];
  v23 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v31[0] = v23;
  v31[1] = MEMORY[0x24BEDB848] + 16;
  if (v37 < 0)
    operator delete(v36);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x227684BE0](&v40);
}

void sub_224004718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  sub_223195348((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_22400475C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t *v26;
  void *v27[2];
  uint64_t v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  char v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  char v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  char v45;
  char v46;
  __int128 *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  void *v50[2];
  uint64_t v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  char v57;
  char v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  void *v62;
  char v63;
  void *__p;
  char v65;
  char v66;
  char v67;
  void *__src[2];
  uint64_t v69;
  __int128 __dst;
  uint64_t v71;
  char v72;
  void *v73;
  char v74;
  void *v75;
  char v76;
  char v77;
  char v78;
  _BYTE v79[32];
  uint64_t v80;
  unsigned __int8 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  _DWORD v90[6];
  int v91;
  char v92;
  char *v93;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 272))(&v89, a2, a1);
  if (v89 != 2)
  {
    v91 = 0;
    sub_223845034(v90, "Folder does not exist: ");
    sub_22384465C((uint64_t)&v47, (uint64_t)v90, a1);
    if (v91 == -1)
      sub_22316DD70();
    v47 = &v36;
    ((void (*)(void **__return_ptr, __int128 **, _DWORD *))off_24EC65C98[v91])(__src, &v47, v90);
    if (v91 != -1)
      ((void (*)(__int128 **, _DWORD *))off_24EC65C68[v91])(&v47, v90);
    if (SHIBYTE(v69) < 0)
    {
      sub_223197FA4(&__dst, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      __dst = *(_OWORD *)__src;
      v71 = v69;
    }
    v72 = 1;
    LOBYTE(v73) = 0;
    v77 = 0;
    v78 = 1;
    sub_2231A958C(5u, &__dst, (uint64_t)v79);
    *(_OWORD *)a3 = *(_OWORD *)v79;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    if (v88)
    {
      *(_BYTE *)(a3 + 40) = 0;
      v6 = v81;
      if (v81)
      {
        *(_OWORD *)(a3 + 16) = *(_OWORD *)&v79[16];
        *(_QWORD *)(a3 + 32) = v80;
        v80 = 0;
        *(_OWORD *)&v79[16] = 0uLL;
        *(_BYTE *)(a3 + 40) = 1;
      }
      *(_BYTE *)(a3 + 48) = 0;
      *(_BYTE *)(a3 + 104) = 0;
      if (v87)
      {
        v7 = v84;
        *(_QWORD *)(a3 + 64) = v83;
        *(_OWORD *)(a3 + 48) = v82;
        v82 = 0uLL;
        *(_QWORD *)(a3 + 72) = v7;
        *(_OWORD *)(a3 + 80) = v85;
        *(_QWORD *)(a3 + 96) = v86;
        v83 = 0;
        v85 = 0uLL;
        v86 = 0;
        *(_BYTE *)(a3 + 104) = 1;
      }
      *(_BYTE *)(a3 + 112) = 1;
      *(_BYTE *)(a3 + 120) = 0;
      if (v6 && SHIBYTE(v80) < 0)
        operator delete(*(void **)&v79[16]);
      if (!v78)
        goto LABEL_102;
    }
    else
    {
      *(_BYTE *)(a3 + 120) = 0;
      if (!v78)
        goto LABEL_102;
    }
    if (!v77)
      goto LABEL_34;
    if (v76 < 0)
    {
      operator delete(v75);
      if ((v74 & 0x80000000) == 0)
      {
LABEL_34:
        if (!v72)
          goto LABEL_102;
        goto LABEL_35;
      }
    }
    else if ((v74 & 0x80000000) == 0)
    {
      goto LABEL_34;
    }
    operator delete(v73);
    if (!v72)
      goto LABEL_102;
LABEL_35:
    if ((SHIBYTE(v71) & 0x80000000) == 0)
      goto LABEL_102;
    v8 = (void *)__dst;
    goto LABEL_101;
  }
  if ((v89 & 0x10000000000) == 0)
  {
    v91 = 0;
    sub_223714EB8(v90, "Folder does not have read permissions: ");
    sub_22384465C((uint64_t)&v47, (uint64_t)v90, a1);
    if (v91 == -1)
      sub_22316DD70();
    v47 = &v36;
    ((void (*)(void **__return_ptr, __int128 **, _DWORD *))off_24EC65C98[v91])(__src, &v47, v90);
    if (v91 != -1)
      ((void (*)(__int128 **, _DWORD *))off_24EC65C68[v91])(&v47, v90);
    if (SHIBYTE(v69) < 0)
    {
      sub_223197FA4(&v59, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v59 = *(_OWORD *)__src;
      v60 = v69;
    }
    v61 = 1;
    LOBYTE(v62) = 0;
    v66 = 0;
    v67 = 1;
    sub_2231A958C(5u, &v59, (uint64_t)v79);
    *(_OWORD *)a3 = *(_OWORD *)v79;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    if (v88)
    {
      *(_BYTE *)(a3 + 40) = 0;
      v9 = v81;
      if (v81)
      {
        *(_OWORD *)(a3 + 16) = *(_OWORD *)&v79[16];
        *(_QWORD *)(a3 + 32) = v80;
        v80 = 0;
        *(_OWORD *)&v79[16] = 0uLL;
        *(_BYTE *)(a3 + 40) = 1;
      }
      *(_BYTE *)(a3 + 48) = 0;
      *(_BYTE *)(a3 + 104) = 0;
      if (v87)
      {
        v10 = v84;
        *(_QWORD *)(a3 + 64) = v83;
        *(_OWORD *)(a3 + 48) = v82;
        v82 = 0uLL;
        *(_QWORD *)(a3 + 72) = v10;
        *(_OWORD *)(a3 + 80) = v85;
        *(_QWORD *)(a3 + 96) = v86;
        v83 = 0;
        v85 = 0uLL;
        v86 = 0;
        *(_BYTE *)(a3 + 104) = 1;
      }
      *(_BYTE *)(a3 + 112) = 1;
      *(_BYTE *)(a3 + 120) = 0;
      if (v9 && SHIBYTE(v80) < 0)
        operator delete(*(void **)&v79[16]);
    }
    else
    {
      *(_BYTE *)(a3 + 120) = 0;
    }
    if (v67)
    {
      if (v66)
      {
        if (v65 < 0)
          operator delete(__p);
        if (v63 < 0)
          operator delete(v62);
      }
      if (v61 && SHIBYTE(v60) < 0)
      {
        v8 = (void *)v59;
LABEL_101:
        operator delete(v8);
        goto LABEL_102;
      }
    }
    goto LABEL_102;
  }
  if ((v89 & 0x8000000000) == 0)
  {
    v91 = 0;
    sub_223701BA0(v90, "Folder does not have write permissions: ");
    sub_22384465C((uint64_t)&v47, (uint64_t)v90, a1);
    if (v91 == -1)
      sub_22316DD70();
    v47 = &v36;
    ((void (*)(void **__return_ptr, __int128 **, _DWORD *))off_24EC65C98[v91])(__src, &v47, v90);
    if (v91 != -1)
      ((void (*)(__int128 **, _DWORD *))off_24EC65C68[v91])(&v47, v90);
    if (SHIBYTE(v69) < 0)
    {
      sub_223197FA4(v50, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      *(_OWORD *)v50 = *(_OWORD *)__src;
      v51 = v69;
    }
    v52 = 1;
    LOBYTE(v53) = 0;
    v57 = 0;
    v58 = 1;
    sub_2231A958C(5u, (__int128 *)v50, (uint64_t)v79);
    *(_OWORD *)a3 = *(_OWORD *)v79;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    if (v88)
    {
      *(_BYTE *)(a3 + 40) = 0;
      v17 = v81;
      if (v81)
      {
        *(_OWORD *)(a3 + 16) = *(_OWORD *)&v79[16];
        *(_QWORD *)(a3 + 32) = v80;
        v80 = 0;
        *(_OWORD *)&v79[16] = 0uLL;
        *(_BYTE *)(a3 + 40) = 1;
      }
      *(_BYTE *)(a3 + 48) = 0;
      *(_BYTE *)(a3 + 104) = 0;
      if (v87)
      {
        v18 = v84;
        *(_QWORD *)(a3 + 64) = v83;
        *(_OWORD *)(a3 + 48) = v82;
        v82 = 0uLL;
        *(_QWORD *)(a3 + 72) = v18;
        *(_OWORD *)(a3 + 80) = v85;
        *(_QWORD *)(a3 + 96) = v86;
        v83 = 0;
        v85 = 0uLL;
        v86 = 0;
        *(_BYTE *)(a3 + 104) = 1;
      }
      *(_BYTE *)(a3 + 112) = 1;
      *(_BYTE *)(a3 + 120) = 0;
      if (v17 && SHIBYTE(v80) < 0)
        operator delete(*(void **)&v79[16]);
    }
    else
    {
      *(_BYTE *)(a3 + 120) = 0;
    }
    if (v58)
    {
      if (v57)
      {
        if (v56 < 0)
          operator delete(v55);
        if (v54 < 0)
          operator delete(v53);
      }
      if (v52 && SHIBYTE(v51) < 0)
      {
        v8 = v50[0];
        goto LABEL_101;
      }
    }
    goto LABEL_102;
  }
  memset(v79, 0, 24);
  sub_2231816F0((std::string *)v79, (std::string *)".tmp-d7ed820b", (std::string *)"");
  if (*(char *)(a1 + 23) < 0)
  {
    sub_223197FA4(__src, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)a1;
    v69 = *(_QWORD *)(a1 + 16);
  }
  sub_22319C30C((uint64_t)__src, (std::__fs::filesystem::path *)v79);
  if ((v79[23] & 0x80000000) != 0)
    operator delete(*(void **)v79);
  (*(void (**)(__int128 **__return_ptr, uint64_t, void **, uint64_t))(*(_QWORD *)a2 + 376))(&v47, a2, __src, 16);
  if (!v48)
  {
    v91 = 0;
    sub_223846924(v90, "Cannot write to ");
    sub_22384465C((uint64_t)&v93, (uint64_t)v90, a1);
    if (v91 == -1)
      sub_22316DD70();
    v93 = &v92;
    ((void (*)(__int128 *__return_ptr, char **, _DWORD *))off_24EC65C98[v91])(&v36, &v93, v90);
    if (v91 != -1)
      ((void (*)(char **, _DWORD *))off_24EC65C68[v91])(&v93, v90);
    if (SHIBYTE(v37) < 0)
    {
      sub_223197FA4(v38, (void *)v36, *((unint64_t *)&v36 + 1));
    }
    else
    {
      *(_OWORD *)v38 = v36;
      v39 = v37;
    }
    v40 = 1;
    LOBYTE(v41) = 0;
    v45 = 0;
    v46 = 1;
    sub_2231A958C(5u, (__int128 *)v38, (uint64_t)v79);
    *(_OWORD *)a3 = *(_OWORD *)v79;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    if (v88)
    {
      *(_BYTE *)(a3 + 40) = 0;
      v19 = v81;
      if (v81)
      {
        *(_OWORD *)(a3 + 16) = *(_OWORD *)&v79[16];
        *(_QWORD *)(a3 + 32) = v80;
        v80 = 0;
        *(_OWORD *)&v79[16] = 0uLL;
        *(_BYTE *)(a3 + 40) = 1;
      }
      *(_BYTE *)(a3 + 48) = 0;
      *(_BYTE *)(a3 + 104) = 0;
      if (v87)
      {
        v20 = v84;
        *(_QWORD *)(a3 + 64) = v83;
        *(_OWORD *)(a3 + 48) = v82;
        v82 = 0uLL;
        *(_QWORD *)(a3 + 72) = v20;
        *(_OWORD *)(a3 + 80) = v85;
        *(_QWORD *)(a3 + 96) = v86;
        v83 = 0;
        v85 = 0uLL;
        v86 = 0;
        *(_BYTE *)(a3 + 104) = 1;
      }
      *(_BYTE *)(a3 + 112) = 1;
      *(_BYTE *)(a3 + 120) = 0;
      if (v19 && SHIBYTE(v80) < 0)
        operator delete(*(void **)&v79[16]);
    }
    else
    {
      *(_BYTE *)(a3 + 120) = 0;
    }
    if (v46)
    {
      if (v45)
      {
        if (v44 < 0)
          operator delete(v43);
        if (v42 < 0)
          operator delete(v41);
      }
      if (v40 && SHIBYTE(v39) < 0)
        operator delete(v38[0]);
    }
    if (SHIBYTE(v37) < 0)
      operator delete((void *)v36);
    v21 = v49;
    if (!v49)
      goto LABEL_102;
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
LABEL_158:
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    goto LABEL_102;
  }
  v11 = v49;
  if (v49)
  {
    v12 = (unint64_t *)&v49->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  (*(void (**)(__int128 **__return_ptr, uint64_t, void **, uint64_t))(*(_QWORD *)a2 + 368))(&v47, a2, __src, 8);
  if (v48)
  {
    v14 = v49;
    if (v49)
    {
      v15 = (unint64_t *)&v49->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 232))(a2, __src);
    *(_BYTE *)(a3 + 120) = 1;
    goto LABEL_102;
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 232))(a2, __src);
  v91 = 0;
  sub_2231C0094(v90, "Cannot read from ");
  sub_22384465C((uint64_t)&v93, (uint64_t)v90, a1);
  if (v91 == -1)
    sub_22316DD70();
  v93 = &v92;
  ((void (*)(__int128 *__return_ptr, char **, _DWORD *))off_24EC65C98[v91])(&v36, &v93, v90);
  if (v91 != -1)
    ((void (*)(char **, _DWORD *))off_24EC65C68[v91])(&v93, v90);
  if (SHIBYTE(v37) < 0)
  {
    sub_223197FA4(v27, (void *)v36, *((unint64_t *)&v36 + 1));
  }
  else
  {
    *(_OWORD *)v27 = v36;
    v28 = v37;
  }
  v29 = 1;
  LOBYTE(v30) = 0;
  v34 = 0;
  v35 = 1;
  sub_2231A958C(5u, (__int128 *)v27, (uint64_t)v79);
  *(_OWORD *)a3 = *(_OWORD *)v79;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v88)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v24 = v81;
    if (v81)
    {
      *(_OWORD *)(a3 + 16) = *(_OWORD *)&v79[16];
      *(_QWORD *)(a3 + 32) = v80;
      v80 = 0;
      *(_OWORD *)&v79[16] = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v87)
    {
      v25 = v84;
      *(_QWORD *)(a3 + 64) = v83;
      *(_OWORD *)(a3 + 48) = v82;
      v82 = 0uLL;
      *(_QWORD *)(a3 + 72) = v25;
      *(_OWORD *)(a3 + 80) = v85;
      *(_QWORD *)(a3 + 96) = v86;
      v83 = 0;
      v85 = 0uLL;
      v86 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v24 && SHIBYTE(v80) < 0)
      operator delete(*(void **)&v79[16]);
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
  if (v35)
  {
    if (v34)
    {
      if (v33 < 0)
        operator delete(v32);
      if (v31 < 0)
        operator delete(v30);
    }
    if (v29 && SHIBYTE(v28) < 0)
      operator delete(v27[0]);
  }
  if (SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  v21 = v49;
  if (v49)
  {
    v26 = (unint64_t *)&v49->__shared_owners_;
    do
      v23 = __ldaxr(v26);
    while (__stlxr(v23 - 1, v26));
    goto LABEL_158;
  }
LABEL_102:
  if (SHIBYTE(v69) < 0)
    operator delete(__src[0]);
}

void sub_224005330(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, char a11, int a12, __int16 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  uint64_t v56;
  uint64_t v57;
  void *v60;

  if (a42 < 0)
    operator delete(__p);
  sub_2242BB3F8((uint64_t)&a56);
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  if (a2 == 2)
  {
    v60 = __cxa_begin_catch(a1);
    STACK[0x250] = (*(uint64_t (**)(void *))(*(_QWORD *)v60 + 16))(v60);
    sub_224005584(v57 - 96, (const char *)&STACK[0x250]);
    if (*(char *)(v57 - 73) < 0)
    {
      sub_223197FA4(&a9, *(void **)(v57 - 96), *(_QWORD *)(v57 - 88));
    }
    else
    {
      a9 = *(_OWORD *)(v57 - 96);
      a10 = *(_QWORD *)(v57 - 80);
    }
    a11 = 1;
    LOBYTE(a13) = 0;
    a20 = 0;
    LOBYTE(a22) = 1;
    sub_2231A958C(5u, &a9, v57 - 224);
    sub_22319718C(v56, v57 - 224);
    sub_22319723C(v57 - 224);
    sub_22319FD28((uint64_t)&a9);
    if (*(char *)(v57 - 73) < 0)
      operator delete(*(void **)(v57 - 96));
    __cxa_end_catch();
    JUMPOUT(0x224004F2CLL);
  }
  sub_22316DC48(a1);
}

uint64_t sub_224005584(uint64_t a1, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_223844F44(v4, "Unexpected exception: ");
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24EC65CB0[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_10:
    sub_22316DD70();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_10;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24EC65C80[v5])(&v11, v4);
LABEL_6:
  if (v5 == -1)
    sub_22316DD70();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC65C98[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC65C68[v5])(&v6, v4);
  return result;
}

void sub_2240056B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2240056C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2240056DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2240056F0(unint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t *v3;
  unint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t *v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t v35;

  v34 = 0;
  v35 = 0;
  v33 = &v34;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
    v32 = 0;
    goto LABEL_68;
  }
  v5 = 0;
  do
  {
    while (1)
    {
      v7 = *v3;
      v6 = v3[1];
      v8 = &v34;
      v9 = &v34;
      v10 = v34;
      if (v34)
        break;
LABEL_45:
      v19 = (uint64_t *)operator new(0x30uLL);
      *(uint64_t *)((char *)v19 + 25) = v7;
      *(uint64_t *)((char *)v19 + 33) = v6;
      *v19 = 0;
      v19[1] = 0;
      v19[2] = (uint64_t)v9;
      *v8 = v19;
      if (*v33)
      {
        v33 = (uint64_t **)*v33;
        v19 = *v8;
      }
      sub_2231A9A8C(v34, v19);
      ++v35;
      v3 += 2;
      if (v3 == v4)
        goto LABEL_66;
    }
    v11 = *v3;
    v12 = HIBYTE(v7);
    v13 = v3[1];
    v14 = HIBYTE(v6);
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v10;
        v15 = *((unsigned __int8 *)v10 + 25);
        if (v15 == v11)
          break;
        LODWORD(v18) = *v3;
        if (v15 <= v11)
          goto LABEL_42;
LABEL_6:
        v10 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_45;
      }
      v15 = *((unsigned __int8 *)v9 + 26);
      if (v15 != BYTE1(v7))
      {
        LODWORD(v18) = BYTE1(v7);
        if (v15 <= BYTE1(v7))
          goto LABEL_42;
        goto LABEL_6;
      }
      v16 = *((unsigned __int8 *)v9 + 27);
      LODWORD(v17) = BYTE2(v7);
      if (v16 != BYTE2(v7))
        goto LABEL_23;
      v16 = *((unsigned __int8 *)v9 + 28);
      LODWORD(v17) = BYTE3(v7);
      if (v16 != BYTE3(v7))
        goto LABEL_23;
      v16 = *((unsigned __int8 *)v9 + 29);
      LODWORD(v17) = BYTE4(v7);
      if (v16 != BYTE4(v7))
        goto LABEL_23;
      v16 = *((unsigned __int8 *)v9 + 30);
      LODWORD(v17) = BYTE5(v7);
      if (v16 != BYTE5(v7))
        goto LABEL_23;
      v16 = *((unsigned __int8 *)v9 + 31);
      LODWORD(v17) = BYTE6(v7);
      if (v16 != BYTE6(v7))
        goto LABEL_23;
      v16 = *((unsigned __int8 *)v9 + 32);
      v17 = HIBYTE(v7);
      if (v16 != (_DWORD)v12)
        goto LABEL_23;
      v16 = *((unsigned __int8 *)v9 + 33);
      LODWORD(v17) = v3[1];
      if (v16 != v13)
        goto LABEL_23;
      v16 = *((unsigned __int8 *)v9 + 34);
      LODWORD(v17) = BYTE1(v6);
      if (v16 != BYTE1(v6))
        goto LABEL_23;
      v16 = *((unsigned __int8 *)v9 + 35);
      LODWORD(v17) = BYTE2(v6);
      if (v16 != BYTE2(v6))
        goto LABEL_23;
      v16 = *((unsigned __int8 *)v9 + 36);
      LODWORD(v17) = BYTE3(v6);
      if (v16 != BYTE3(v6))
        goto LABEL_23;
      v16 = *((unsigned __int8 *)v9 + 37);
      LODWORD(v17) = BYTE4(v6);
      if (v16 != BYTE4(v6)
        || (v16 = *((unsigned __int8 *)v9 + 38), LODWORD(v17) = BYTE5(v6), v16 != BYTE5(v6))
        || (v16 = *((unsigned __int8 *)v9 + 39), LODWORD(v17) = BYTE6(v6), v16 != BYTE6(v6))
        || (v16 = *((unsigned __int8 *)v9 + 40), v17 = HIBYTE(v6), v16 != (_DWORD)v14))
      {
LABEL_23:
        if (v17 < v16)
          goto LABEL_6;
      }
      v15 = *((unsigned __int8 *)v9 + 27);
      LODWORD(v18) = BYTE2(v7);
      if (v15 == BYTE2(v7))
      {
        v15 = *((unsigned __int8 *)v9 + 28);
        LODWORD(v18) = BYTE3(v7);
        if (v15 == BYTE3(v7))
        {
          v15 = *((unsigned __int8 *)v9 + 29);
          LODWORD(v18) = BYTE4(v7);
          if (v15 == BYTE4(v7))
          {
            v15 = *((unsigned __int8 *)v9 + 30);
            LODWORD(v18) = BYTE5(v7);
            if (v15 == BYTE5(v7))
            {
              v15 = *((unsigned __int8 *)v9 + 31);
              LODWORD(v18) = BYTE6(v7);
              if (v15 == BYTE6(v7))
              {
                v15 = *((unsigned __int8 *)v9 + 32);
                v18 = HIBYTE(v7);
                if (v15 == (_DWORD)v12)
                {
                  v15 = *((unsigned __int8 *)v9 + 33);
                  LODWORD(v18) = v3[1];
                  if (v15 == v13)
                  {
                    v15 = *((unsigned __int8 *)v9 + 34);
                    LODWORD(v18) = BYTE1(v6);
                    if (v15 == BYTE1(v6))
                    {
                      v15 = *((unsigned __int8 *)v9 + 35);
                      LODWORD(v18) = BYTE2(v6);
                      if (v15 == BYTE2(v6))
                      {
                        v15 = *((unsigned __int8 *)v9 + 36);
                        LODWORD(v18) = BYTE3(v6);
                        if (v15 == BYTE3(v6))
                        {
                          v15 = *((unsigned __int8 *)v9 + 37);
                          LODWORD(v18) = BYTE4(v6);
                          if (v15 == BYTE4(v6))
                          {
                            v15 = *((unsigned __int8 *)v9 + 38);
                            LODWORD(v18) = BYTE5(v6);
                            if (v15 == BYTE5(v6))
                            {
                              v15 = *((unsigned __int8 *)v9 + 39);
                              LODWORD(v18) = BYTE6(v6);
                              if (v15 == BYTE6(v6))
                              {
                                v15 = *((unsigned __int8 *)v9 + 40);
                                v18 = HIBYTE(v6);
                                if (v15 == (_DWORD)v14)
                                  break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_42:
      if (v15 >= v18)
        break;
      v10 = v9[1];
      if (!v10)
      {
        v8 = v9 + 1;
        goto LABEL_45;
      }
    }
    v20 = a2[2];
    if ((unint64_t)v5 < v20)
    {
      *v5 = v7;
      v5[1] = v6;
      v21 = v5 + 2;
      goto LABEL_60;
    }
    v22 = (_QWORD *)*a2;
    v23 = ((uint64_t)v5 - *a2) >> 4;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 60)
      sub_22316E078();
    v25 = v20 - (_QWORD)v22;
    if (v25 >> 3 > v24)
      v24 = v25 >> 3;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
      v26 = 0xFFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      if (v26 >> 60)
        sub_223174E94();
      v27 = (char *)operator new(16 * v26);
      v28 = (unint64_t *)&v27[16 * v23];
      *v28 = v7;
      v28[1] = v6;
      v29 = (uint64_t)v28;
      if (v5 == v22)
      {
LABEL_58:
        v30 = &v27[16 * v26];
        v21 = v28 + 2;
        *a2 = v29;
        a2[1] = (uint64_t)(v28 + 2);
        a2[2] = (uint64_t)v30;
        if (v5)
          goto LABEL_59;
        goto LABEL_60;
      }
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t *)(16 * v23);
      *v28 = v7;
      v28[1] = v6;
      v29 = 16 * v23;
      if (v5 == v22)
        goto LABEL_58;
    }
    do
    {
      *(_OWORD *)(v29 - 16) = *((_OWORD *)v5 - 1);
      v29 -= 16;
      v5 -= 2;
    }
    while (v5 != v22);
    v5 = (_QWORD *)*a2;
    v31 = &v27[16 * v26];
    v21 = v28 + 2;
    *a2 = v29;
    a2[1] = (uint64_t)(v28 + 2);
    a2[2] = (uint64_t)v31;
    if (v5)
LABEL_59:
      operator delete(v5);
LABEL_60:
    a2[1] = (uint64_t)v21;
    v5 = v21;
    v3 += 2;
  }
  while (v3 != v4);
LABEL_66:
  v32 = v34;
LABEL_68:
  sub_223198030((uint64_t)&v33, v32);
}

void sub_224005B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  sub_223198030((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_224005B7C(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  int v34;
  _QWORD *v35;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD *)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - result) >> 2) >= a4)
  {
    v22 = *(_QWORD *)(a1 + 8);
    v20 = (uint64_t *)(a1 + 8);
    v21 = v22;
    v23 = 0xAAAAAAAAAAAAAAABLL * ((v22 - result) >> 2);
    if (v23 >= a4)
    {
      v30 = result;
      if (a2 != a3)
      {
        v31 = result;
        do
        {
          v32 = *v6;
          *(_DWORD *)(v31 + 8) = *((_DWORD *)v6 + 2);
          *(_QWORD *)v31 = v32;
          v31 += 12;
          v6 = (uint64_t *)((char *)v6 + 12);
          v30 += 12;
        }
        while (v6 != a3);
      }
      v19 = v30 - result;
    }
    else
    {
      v24 = (uint64_t *)((char *)a2 + 12 * v23);
      if (v21 != result)
      {
        v25 = 12 * v23;
        do
        {
          v26 = *v6;
          *(_DWORD *)(result + 8) = *((_DWORD *)v6 + 2);
          *(_QWORD *)result = v26;
          result += 12;
          v6 = (uint64_t *)((char *)v6 + 12);
          v25 -= 12;
        }
        while (v25);
        result = *v20;
      }
      v27 = result;
      if (v24 != a3)
      {
        v27 = result;
        v28 = result;
        do
        {
          v29 = *v24;
          *(_DWORD *)(v28 + 8) = *((_DWORD *)v24 + 2);
          *(_QWORD *)v28 = v29;
          v28 += 12;
          v24 = (uint64_t *)((char *)v24 + 12);
          v27 += 12;
        }
        while (v24 != a3);
      }
      v19 = v27 - result;
    }
  }
  else
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      v33 = (_QWORD **)result;
      v34 = -1431655765 * ((v8 - result) >> 2);
      v10 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v10 == -1)
        sub_22316DD70();
      v35 = &v33;
      ((void (*)(_QWORD **, uint64_t))off_24EC65C38[v10])(&v35, a1 + 24);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 > 0x1555555555555555)
      goto LABEL_31;
    v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v12 = 2 * v11;
    if (2 * v11 <= a4)
      v12 = a4;
    v13 = v11 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v12;
    if (v13 > 0x1555555555555555)
LABEL_31:
      sub_22316E078();
    LODWORD(v35) = v13;
    v14 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v14 == -1)
      sub_22316DD70();
    v33 = &v35;
    result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC65C48[v14])(&v33, a1 + 24);
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = result + 12 * v15;
    v16 = result;
    if (v6 != a3)
    {
      v16 = result;
      v17 = result;
      do
      {
        v18 = *v6;
        *(_DWORD *)(v17 + 8) = *((_DWORD *)v6 + 2);
        *(_QWORD *)v17 = v18;
        v17 += 12;
        v6 = (uint64_t *)((char *)v6 + 12);
        v16 += 12;
      }
      while (v6 != a3);
    }
    v19 = v16 - result;
    v20 = (uint64_t *)(a1 + 8);
  }
  *v20 = result + v19;
  return result;
}

void sub_224005DCC(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();

  v23 = &off_24EC27B70;
  sub_22449A504(a1, (uint64_t)&v14);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24EC279D0;
  *(_OWORD *)(v3 + 8) = v15;
  *(_OWORD *)(v3 + 24) = v16;
  *(_OWORD *)(v3 + 40) = v17;
  *(_QWORD *)(v3 + 56) = v18;
  *(_OWORD *)(v3 + 64) = v19;
  *(_QWORD *)(v3 + 80) = v20;
  *(_QWORD *)(v3 + 104) = v22;
  *(_OWORD *)(v3 + 88) = v21;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27BA8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (uint64_t)v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v14, v3, 25);
  v8 = v14[1];
  v7 = v14[2];
  *(_OWORD *)(a2 + 3) = *v14;
  *(_OWORD *)(a2 + 5) = v8;
  *(_OWORD *)(a2 + 7) = v7;
  v14 = 0;
  MEMORY[0x227684CE8]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v9 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v9;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a2 + 60) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_224005FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_223167354(v10);
  sub_223167354((uint64_t)&a10);
  sub_22329C830(&a9);
  _Unwind_Resume(a1);
}

void sub_224005FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22329C830(&a9);
  _Unwind_Resume(a1);
}

void sub_224006008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21)
    free(a21);
  _Unwind_Resume(exception_object);
}

void sub_224006020(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();

  v23 = &off_24EC65E78;
  sub_224499BAC(a1, (uint64_t)&v14);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24EC65CD8;
  *(_OWORD *)(v3 + 8) = v15;
  *(_OWORD *)(v3 + 24) = v16;
  *(_OWORD *)(v3 + 40) = v17;
  *(_QWORD *)(v3 + 56) = v18;
  *(_OWORD *)(v3 + 64) = v19;
  *(_QWORD *)(v3 + 80) = v20;
  *(_QWORD *)(v3 + 104) = v22;
  *(_OWORD *)(v3 + 88) = v21;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC65EB0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (uint64_t)v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v14, v3, 17);
  v8 = v14[1];
  v7 = v14[2];
  *(_OWORD *)(a2 + 3) = *v14;
  *(_OWORD *)(a2 + 5) = v8;
  *(_OWORD *)(a2 + 7) = v7;
  v14 = 0;
  MEMORY[0x227684CE8]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v9 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v9;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a2 + 60) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_224006214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_223167354(v10);
  sub_223167354((uint64_t)&a10);
  sub_22329C830(&a9);
  _Unwind_Resume(a1);
}

void sub_224006248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22329C830(&a9);
  _Unwind_Resume(a1);
}

void sub_22400625C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21)
    free(a21);
  _Unwind_Resume(exception_object);
}

void sub_224006274(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2240062DC()
{
  return 17;
}

uint64_t sub_2240062E4(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_2240062EC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_224006300(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_224006380()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224006394()
{
  return 17;
}

__int128 *sub_2240063A0()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578F1D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578F1D0))
  {
    v2 = sub_224006478();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(&xmmword_25578F1B8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25578F1C8 = *((_QWORD *)v2 + 2);
      xmmword_25578F1B8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578F1B8, &dword_22314D000);
    __cxa_guard_release(&qword_25578F1D0);
  }
  if (byte_25578F1CF >= 0)
    return &xmmword_25578F1B8;
  else
    return (__int128 *)xmmword_25578F1B8;
}

void sub_224006460(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F1D0);
  _Unwind_Resume(a1);
}

__int128 *sub_224006478()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578F1F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578F1F0))
    return &xmmword_25578F1D8;
  v2 = sub_224006554();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578F1D8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578F1E8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578F1D8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578F1D8, &dword_22314D000);
  __cxa_guard_release(&qword_25578F1F0);
  return &xmmword_25578F1D8;
}

void sub_22400653C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F1F0);
  _Unwind_Resume(a1);
}

std::string *sub_224006554()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578F210);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578F210))
    return &stru_25578F1F8;
  sub_22400676C((uint64_t)__p);
  sub_224006644((char *)__p, &stru_25578F1F8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578F1F8, &dword_22314D000);
  __cxa_guard_release(&qword_25578F210);
  return &stru_25578F1F8;
}

void sub_224006604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578F210);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578F210);
  _Unwind_Resume(a1);
}

void sub_224006644(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2231E7680();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_224006740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22400676C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578F230);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578F230))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgr8u>]", qword_25578F218);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578F218, &dword_22314D000);
    __cxa_guard_release(&qword_25578F230);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578F250);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578F250))
  {
    v5 = sub_2231A38CC(qword_25578F218, "<", 0);
    sub_2231A37C8(qword_25578F218, 0, v5, qword_25578F238);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578F238, &dword_22314D000);
    __cxa_guard_release(&qword_25578F250);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578F270);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578F270))
  {
    sub_224573040((uint64_t)qword_25578F238, (uint64_t)&xmmword_25578F258);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578F258, &dword_22314D000);
    __cxa_guard_release(&qword_25578F270);
  }
  if (byte_25578F26F < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578F258, *((unint64_t *)&xmmword_25578F258 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578F258;
    *(_QWORD *)(a1 + 16) = unk_25578F268;
  }
}

void sub_224006908(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F270);
  _Unwind_Resume(a1);
}

void sub_224006920(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F250);
  _Unwind_Resume(a1);
}

void sub_224006938(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F230);
  _Unwind_Resume(a1);
}

void sub_224006954(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224006978(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_2240069C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE17EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE17EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE17EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE17EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

__n128 sub_224006A38@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  __n128 result;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  char **v38;
  __int128 v39;
  char *v40;
  __int128 v41;
  uint64_t v42;

  v3 = a2;
  v42 = *MEMORY[0x24BDAC8D0];
  v4 = 0uLL;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 48) = 1065353216;
  *(_DWORD *)(a2 + 68) = 1065353216;
  *(_DWORD *)(a2 + 88) = 1065353216;
  *(_DWORD *)(a2 + 108) = 1065353216;
  v5 = *(char **)a1;
  v6 = *(char **)(a1 + 8);
  v39 = 0uLL;
  v40 = 0;
  v7 = v6 - v5;
  if (v6 == v5)
  {
    v8 = 0;
  }
  else
  {
    if (v7 < 0)
      sub_22316E078();
    *(_QWORD *)&v39 = operator new(v6 - v5);
    *((_QWORD *)&v39 + 1) = v39;
    v40 = (char *)(v39 + 16 * (v7 >> 4));
    v38 = (char **)&v39;
    do
    {
      v41 = *(_OWORD *)v5;
      sub_2232E9564(&v38, &v41);
      v5 += 16;
    }
    while (v5 != v6);
    v4 = v39;
    v8 = v40;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v3 = v4;
  *(_QWORD *)(v3 + 16) = v8;
  v39 = 0uLL;
  v40 = 0;
  v11 = v10 - v9;
  if (v10 == v9)
  {
    v30 = 0;
    v13 = 0;
    v29 = 0;
    goto LABEL_28;
  }
  v12 = 0xCCCCCCCCCCCCCCCDLL * (v11 >> 3);
  v35 = v3;
  if (v12 > 0x666666666666666)
    sub_22329A3C4();
  v13 = (char *)operator new(v11);
  *(_QWORD *)&v39 = v13;
  *((_QWORD *)&v39 + 1) = v13;
  v40 = &v13[40 * v12];
  do
  {
    while (1)
    {
      while (1)
      {
        *(_QWORD *)&v15 = *(_QWORD *)v9;
        DWORD2(v15) = *(_DWORD *)(v9 + 8);
        *(_QWORD *)&v14 = *(_QWORD *)(v9 + 12);
        DWORD2(v14) = *(_DWORD *)(v9 + 20);
        v18 = *(_QWORD *)(v9 + 24);
        v17 = *(_QWORD *)(v9 + 32);
        if (v13 >= v40)
          break;
        *((_DWORD *)v13 + 2) = DWORD2(v15);
        *(_QWORD *)v13 = v15;
        v16 = v13 + 20;
        *(_QWORD *)(v13 + 12) = v14;
        *((_QWORD *)v13 + 3) = v18;
        *((_QWORD *)v13 + 4) = v17;
        v13 += 40;
        *v16 = DWORD2(v14);
        *((_QWORD *)&v39 + 1) = v13;
        v9 += 40;
        if (v9 == v10)
          goto LABEL_26;
      }
      v19 = (char *)v39;
      v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v13[-v39] >> 3);
      v21 = v20 + 1;
      if (v20 + 1 > 0x666666666666666)
        sub_22329A3C4();
      v36 = v15;
      v37 = v14;
      if (0x999999999999999ALL * ((uint64_t)&v40[-v39] >> 3) > v21)
        v21 = 0x999999999999999ALL * ((uint64_t)&v40[-v39] >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v40[-v39] >> 3) >= 0x333333333333333)
        v22 = 0x666666666666666;
      else
        v22 = v21;
      if (v22 > 0x666666666666666)
        sub_223174E94();
      v23 = (char *)operator new(40 * v22);
      v24 = &v23[40 * v20];
      *(_QWORD *)v24 = v36;
      *((_DWORD *)v24 + 2) = DWORD2(v36);
      *((_DWORD *)v24 + 5) = DWORD2(v37);
      *(_QWORD *)(v24 + 12) = v37;
      *((_QWORD *)v24 + 3) = v18;
      *((_QWORD *)v24 + 4) = v17;
      v25 = v24 + 40;
      if (v13 == v19)
      {
        *(_QWORD *)&v39 = &v23[40 * v20];
        *((_QWORD *)&v39 + 1) = v24 + 40;
        v19 = v13;
        v40 = &v23[40 * v22];
        break;
      }
      do
      {
        v26 = *((_QWORD *)v13 - 5);
        v13 -= 40;
        v27 = *((_DWORD *)v13 + 2);
        *((_QWORD *)v24 - 5) = v26;
        v24 -= 40;
        *((_DWORD *)v24 + 2) = v27;
        v28 = *(_QWORD *)(v13 + 12);
        *((_DWORD *)v24 + 5) = *((_DWORD *)v13 + 5);
        *(_QWORD *)(v24 + 12) = v28;
        v14 = *(_OWORD *)(v13 + 24);
        *(_OWORD *)(v24 + 24) = v14;
      }
      while (v13 != v19);
      *(_QWORD *)&v39 = v24;
      *((_QWORD *)&v39 + 1) = v25;
      v40 = &v23[40 * v22];
      if (v19)
        break;
      v13 = v25;
      *((_QWORD *)&v39 + 1) = v25;
      v9 += 40;
      if (v9 == v10)
        goto LABEL_26;
    }
    operator delete(v19);
    v13 = v25;
    *((_QWORD *)&v39 + 1) = v25;
    v9 += 40;
  }
  while (v9 != v10);
LABEL_26:
  v29 = v39;
  v30 = v40;
  v3 = v35;
LABEL_28:
  result = *(__n128 *)(a1 + 48);
  v32 = *(_OWORD *)(a1 + 64);
  v33 = *(_OWORD *)(a1 + 80);
  v34 = *(_OWORD *)(a1 + 96);
  *(_QWORD *)(v3 + 24) = v29;
  *(_QWORD *)(v3 + 32) = v13;
  *(_QWORD *)(v3 + 40) = v30;
  *(_OWORD *)(v3 + 80) = v33;
  *(_OWORD *)(v3 + 96) = v34;
  *(__n128 *)(v3 + 48) = result;
  *(_OWORD *)(v3 + 64) = v32;
  return result;
}

void sub_224006D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  sub_2233400F8(a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_224006DC4@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, void **a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  char **v29;
  char *v30;
  uint64_t *v31;
  uint64_t (**v32)();
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char **v53;
  char **v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t **v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  _QWORD *v85;
  char **v86;
  uint64_t **v87;
  uint64_t *v88;
  uint64_t **v89;
  uint64_t **v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t **v113;
  char **v114;
  uint64_t **v115;
  uint64_t **v116;
  uint64_t **v117;
  uint64_t **v118;
  char **v119;
  char **v120;
  char **v121;
  uint64_t *v122;
  uint64_t **v123;
  uint64_t **v124;
  uint64_t v125;
  char **v126;
  uint64_t v127;
  uint64_t v128;
  __int128 *v129;
  __int128 *v130;
  uint64_t *v131;
  char v132;
  char v133;
  char v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char **v145;
  char **v146;
  char **v147;
  uint64_t *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  char **v154;
  char **v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  char *v162;
  uint64_t *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  BOOL v205;
  uint64_t *v206;
  uint64_t *v207;
  uint64_t *v208;
  unint64_t v209;
  char *v210;
  uint64_t v211;
  char *v212;
  unint64_t v213;
  char *v214;
  uint64_t v215;
  char *v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  _BYTE *v228;
  _QWORD *v229;
  int64_t v230;
  unint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  int v236;
  char *v237;
  uint64_t *v238;
  uint64_t *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  _OWORD *v245;
  char *v246;
  uint64_t v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  void **v266;
  uint64_t **v267;
  uint64_t **v268;
  uint64_t **v269;
  uint64_t **v270;
  char **v271;
  uint64_t **v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t *v275;
  _QWORD *v276;
  char *v277;
  uint64_t v278;
  uint64_t **v279;
  char **v280;
  uint64_t **v281;
  uint64_t **v282;
  uint64_t **v283;
  uint64_t *v284;
  uint64_t **v285;
  char **v286;
  uint64_t **v287;
  uint64_t *v288;
  uint64_t *v289;
  uint64_t *v290;
  uint64_t *v291;
  __int128 *v292;
  __int128 *v293;
  uint64_t *v294;
  char *v295;
  uint64_t *v296;
  uint64_t **v297;
  uint64_t **v298;
  uint64_t **v299;
  uint64_t **v300;
  char **v301;
  uint64_t **v302;
  uint64_t **v303;
  uint64_t **v304;
  uint64_t **v305;
  uint64_t *v306;
  uint64_t **v307;
  char **v308;
  uint64_t *v309;
  char **v310;
  char **v311;
  uint64_t *v312;
  uint64_t *v313;
  uint64_t *v314;
  uint64_t *v315;
  uint64_t *v316;
  uint64_t *v317;
  uint64_t *v318;
  uint64_t *v319;
  uint64_t *v320;
  uint64_t *v321;
  uint64_t *v322;
  uint64_t *v323;
  char **v324;
  uint64_t v325;
  uint64_t **v326;
  uint64_t *v327;
  uint64_t *v328;
  uint64_t *v329;
  char **v330;
  uint64_t *v331;
  uint64_t *v332;
  uint64_t *v333;
  uint64_t *v334;
  uint64_t *v335;
  uint64_t *v336;
  uint64_t *v337;
  uint64_t *v338;
  char *v339;
  _QWORD *v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t *v351;
  _QWORD v352[3];
  uint64_t *v353;
  uint64_t v354;
  _QWORD v355[3];
  char *v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t *v359;
  __int128 v360;
  uint64_t v361;
  uint64_t *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t *v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  uint64_t *v370;
  _QWORD v371[3];
  uint64_t *v372;
  __int128 v373;
  uint64_t v374;
  char *v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t *v378;
  __int128 v379;
  uint64_t v380;
  uint64_t *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t *v384;
  _QWORD *v385;
  uint64_t v386;
  uint64_t *v387;
  uint64_t v388;
  uint64_t *v389;
  uint64_t v390;
  uint64_t *v391;
  uint64_t v392;
  uint64_t *v393;
  uint64_t v394;
  char *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t *v403;
  _QWORD *v404;
  uint64_t v405;
  uint64_t *v406;
  uint64_t v407;
  uint64_t *v408;
  _QWORD v409[3];
  _QWORD *v410;
  uint64_t v411;
  uint64_t v412;
  char *v413;
  uint64_t *v414;
  uint64_t v415;
  uint64_t *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t *v423;
  _QWORD *v424;
  uint64_t v425;
  uint64_t *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t *v430;
  __int128 v431;
  uint64_t v432;
  char *v433;
  uint64_t *v434;
  uint64_t v435;
  uint64_t *v436;
  uint64_t v437;
  uint64_t v438;
  _QWORD v439[3];
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t *v443;
  _QWORD *v444;
  uint64_t v445;
  uint64_t *v446;
  uint64_t v447;
  uint64_t *v448;
  _QWORD v449[3];
  char *v450;
  uint64_t v451;
  uint64_t v452;
  char *v453;
  uint64_t *v454;
  uint64_t v455;
  char *v456;
  _QWORD v457[3];

  v278 = a2;
  v457[1] = *MEMORY[0x24BDAC8D0];
  v8 = *result;
  v7 = result[1];
  v290 = result;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v9 = v7 - v8;
  if (v9)
  {
    v10 = 0xEEEEEEEEEEEEEEEFLL * (v9 >> 3);
    v266 = a4;
    if (v10 > 0x1555555555555555)
      sub_22316E078();
    v14 = (char *)operator new(0x3333333333333334 * (v9 >> 3));
    v15 = 0;
    *a4 = v14;
    a4[1] = v14;
    v340 = v439;
    v309 = &v440;
    a4[2] = &v14[12 * v10];
    v336 = &v429;
    v326 = &v430;
    v16 = v409;
    v291 = &v390;
    v303 = &v443;
    v335 = &v442;
    v302 = &v446;
    v332 = &v445;
    v17 = v352;
    v287 = &v353;
    v18 = (char *)v355;
    v286 = &v356;
    v315 = &v358;
    v285 = &v359;
    v284 = (uint64_t *)&v362;
    v334 = &v364;
    v283 = &v365;
    v329 = &v367;
    v282 = &v368;
    v323 = &v412;
    v271 = &v413;
    v272 = &v410;
    v319 = &v432;
    v288 = (uint64_t *)&v434;
    v301 = &v433;
    v321 = &v435;
    v322 = &v415;
    v333 = &v399;
    v269 = &v400;
    v270 = &v416;
    v314 = &v402;
    v267 = &v406;
    v268 = &v403;
    v337 = &v419;
    v299 = &v420;
    v300 = &v436;
    v320 = &v422;
    v312 = &v425;
    v313 = &v405;
    v297 = &v426;
    v298 = &v423;
    v324 = &v450;
    v19 = (char *)&v452;
    v310 = &v456;
    v311 = &v453;
    v289 = &v455;
    v293 = (__int128 *)v457;
    v330 = (char **)&v372;
    v274 = (uint64_t *)&v376;
    v327 = &v374;
    v339 = (char *)&v373 + 8;
    v338 = &v377;
    v307 = &v378;
    v308 = &v375;
    v306 = (uint64_t *)&v381;
    v317 = &v383;
    v318 = &v380;
    v316 = &v386;
    v304 = &v387;
    v305 = &v384;
    v292 = &v379;
    v328 = &v342;
    v295 = (char *)&v345;
    v280 = &v346;
    v281 = &v343;
    v294 = &v348;
    v279 = &v349;
    v273 = a3;
    v296 = &v394;
    v275 = v352;
    v276 = v409;
    v277 = (char *)v355;
    v331 = &v361;
    while (1)
    {
      v21 = v19;
      v325 = v15;
      v22 = (uint64_t **)(v8 + 120 * v15);
      v23 = *v22;
      v24 = v22[1];
      v25 = (uint64_t)&(*v22)[4 * (_QWORD)v24];
      v448 = *v22;
      v449[0] = &off_24EC65F80;
      *(double *)&v449[1] = a5;
      v450 = (char *)v449;
      v451 = v25;
      v26 = (char *)v449;
      v27 = (char *)v449;
      if (v24)
      {
        while (1)
        {
          v28 = (*(uint64_t (**)(char *))(*(_QWORD *)v26 + 48))(v26);
          v23 = v448;
          if ((v28 & 1) != 0)
            break;
          v23 = v448 + 4;
          v448 = v23;
          if (v23 == (uint64_t *)v451)
            break;
          v26 = v450;
          if (!v450)
            sub_223198474();
        }
        v27 = v450;
      }
      v438 = v25;
      v439[0] = &off_24EC65F80;
      *(double *)&v439[1] = a5;
      v440 = (uint64_t)v340;
      v441 = v25;
      v29 = v330;
      v370 = v23;
      if (!v27)
        goto LABEL_16;
      if (v27 != (char *)v449)
        break;
      v372 = v371;
      (*(void (**)(_QWORD *, _QWORD *))(v449[0] + 24))(v449, v371);
      *(_QWORD *)&v373 = v451;
      *((_QWORD *)&v373 + 1) = v438;
      v39 = v274;
      v33 = v331;
      if (v440)
      {
        v34 = (uint64_t)v340;
        if ((_QWORD *)v440 == v340)
        {
          v30 = v18;
          v31 = v17;
          v32 = (uint64_t (**)())v439[0];
          goto LABEL_17;
        }
        v376 = (uint64_t *)v440;
        v39 = v309;
      }
      v30 = v18;
      v31 = v17;
      *v39 = 0;
      v35 = (uint64_t)v340;
      v36 = (_QWORD *)v440;
      v377 = v441;
      if ((_QWORD *)v440 == v340)
      {
LABEL_24:
        v36 = (_QWORD *)v35;
        v38 = 4;
        v17 = v31;
        v18 = v30;
        v37 = (char *)v289;
        goto LABEL_25;
      }
LABEL_18:
      v17 = v31;
      v18 = v30;
      v37 = (char *)v289;
      if (!v36)
        goto LABEL_26;
      v38 = 5;
LABEL_25:
      (*(void (**)(void))(*v36 + 8 * v38))();
LABEL_26:
      v40 = v450;
      if (v450 == (char *)v449)
      {
        v40 = (char *)v449;
        v41 = 4;
      }
      else
      {
        if (!v450)
          goto LABEL_31;
        v41 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
LABEL_31:
      v428 = (uint64_t)v370;
      v42 = v326;
      if (!v372)
        goto LABEL_34;
      if (v372 != v371)
      {
        v430 = v372;
        v42 = (uint64_t **)v330;
LABEL_34:
        *v42 = 0;
        goto LABEL_36;
      }
      v430 = v336;
      (*(void (**)(_QWORD *))(v371[0] + 24))(v371);
LABEL_36:
      v431 = v373;
      v43 = v288;
      if (!v376)
        goto LABEL_39;
      if (v376 != v327)
      {
        v434 = v376;
        v43 = v274;
LABEL_39:
        *v43 = 0;
        goto LABEL_41;
      }
      v434 = v319;
      (*(void (**)(void))(v374 + 24))();
LABEL_41:
      v44 = v376;
      v435 = v377;
      if (v376 == v327)
      {
        v44 = v327;
        v45 = 4;
      }
      else
      {
        if (!v376)
          goto LABEL_46;
        v45 = 5;
      }
      (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_46:
      v46 = v372;
      if (v372 == v371)
      {
        v46 = v371;
        v47 = 4;
      }
      else
      {
        if (!v372)
          goto LABEL_51;
        v47 = 5;
      }
      (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_51:
      v48 = (uint64_t)v430;
      v418 = v428;
      if (!v430)
        goto LABEL_54;
      if (v430 != v336)
      {
        v48 = (*(uint64_t (**)(void))(*v430 + 16))();
LABEL_54:
        v420 = (uint64_t *)v48;
        goto LABEL_56;
      }
      v420 = v337;
      (*(void (**)(uint64_t *))(v429 + 24))(v336);
LABEL_56:
      v408 = (uint64_t *)*((_QWORD *)&v431 + 1);
      v421 = v431;
      v49 = (uint64_t)v434;
      if (!v434)
        goto LABEL_59;
      if (v434 != v319)
      {
        v49 = (*(uint64_t (**)(void))(*v434 + 16))();
LABEL_59:
        v410 = (_QWORD *)v49;
        goto LABEL_61;
      }
      v410 = v16;
      (*(void (**)(uint64_t *, _QWORD *))(v432 + 24))(v319, v16);
LABEL_61:
      v411 = v435;
      v50 = (uint64_t)v420;
      v398 = v418;
      if (!v420)
        goto LABEL_64;
      if (v420 != v337)
      {
        v50 = (*(uint64_t (**)(void))(*v420 + 16))();
LABEL_64:
        v400 = (uint64_t *)v50;
        goto LABEL_66;
      }
      v400 = v333;
      (*(void (**)(uint64_t *))(v419 + 24))(v337);
LABEL_66:
      v401 = v421;
      v51 = (uint64_t)v410;
      v341 = v408;
      if (!v410)
        goto LABEL_69;
      if (v410 != v16)
      {
        v51 = (*(uint64_t (**)(void))(*v410 + 16))();
LABEL_69:
        v343 = (uint64_t *)v51;
        goto LABEL_71;
      }
      v343 = v328;
      (*(void (**)(_QWORD *))(v409[0] + 24))(v16);
LABEL_71:
      v344 = v411;
      sub_22400A18C((uint64_t)&v448, &v398, &v341, a6);
      v52 = (uint64_t)v410;
      v393 = v408;
      if (!v410)
      {
        v396 = 0;
        v397 = v411;
        v389 = v408;
LABEL_79:
        v391 = (uint64_t *)v52;
        goto LABEL_80;
      }
      if (v410 == v16)
      {
        v396 = (uint64_t)v296;
        (*(void (**)(_QWORD *))(v409[0] + 24))(v16);
      }
      else
      {
        v396 = (*(uint64_t (**)(void))(*v410 + 16))();
      }
      v397 = v411;
      v52 = (uint64_t)v410;
      v389 = v408;
      if (!v410)
        goto LABEL_79;
      if (v410 != v16)
      {
        v52 = (*(uint64_t (**)(void))(*v410 + 16))();
        goto LABEL_79;
      }
      v391 = v291;
      (*(void (**)(_QWORD *))(v409[0] + 24))(v16);
LABEL_80:
      v392 = v411;
      sub_22400A18C((uint64_t)&v438, &v393, &v389, a6);
      v370 = v448;
      v53 = v330;
      if (!v450)
        goto LABEL_83;
      if (v450 != (char *)v449)
      {
        v372 = (uint64_t *)v450;
        v53 = v324;
LABEL_83:
        *v53 = 0;
        goto LABEL_85;
      }
      v372 = v371;
      (*(void (**)(_QWORD *, _QWORD *))(v449[0] + 24))(v449, v371);
LABEL_85:
      *(_QWORD *)&v373 = v451;
      v54 = v308;
      if (!v453)
        goto LABEL_88;
      if (v453 != v21)
      {
        v375 = v453;
        v54 = v311;
LABEL_88:
        *v54 = 0;
        goto LABEL_90;
      }
      v375 = v339;
      (*(void (**)(char *))(v452 + 24))(v21);
LABEL_90:
      v376 = v454;
      v55 = v307;
      if (!v456)
        goto LABEL_93;
      if (v456 != v37)
      {
        v378 = (uint64_t *)v456;
        v55 = v310;
LABEL_93:
        *v55 = 0;
        goto LABEL_95;
      }
      v378 = v338;
      (*(void (**)(char *))(v455 + 24))(v37);
LABEL_95:
      *(_QWORD *)&v379 = v457[0];
      *((_QWORD *)&v379 + 1) = v438;
      v56 = v306;
      if (!v440)
        goto LABEL_98;
      if ((_QWORD *)v440 != v340)
      {
        v381 = (uint64_t *)v440;
        v56 = v309;
LABEL_98:
        *v56 = 0;
        goto LABEL_100;
      }
      v381 = v318;
      (*(void (**)(uint64_t, _QWORD *))(v439[0] + 24))((uint64_t)v340, v318);
LABEL_100:
      v382 = v441;
      v57 = v305;
      if (!v443)
        goto LABEL_103;
      if (v443 != v335)
      {
        v384 = v443;
        v57 = v303;
LABEL_103:
        *v57 = 0;
        goto LABEL_105;
      }
      v384 = v317;
      (*(void (**)(void))(v442 + 24))();
LABEL_105:
      v385 = v444;
      v58 = v304;
      if (!v446)
        goto LABEL_108;
      if (v446 != v332)
      {
        v387 = v446;
        v58 = v302;
LABEL_108:
        *v58 = 0;
        goto LABEL_110;
      }
      v387 = v316;
      (*(void (**)(void))(v445 + 24))();
LABEL_110:
      v59 = v446;
      v388 = v447;
      v60 = (uint64_t)v340;
      v61 = v335;
      if (v446 == v332)
      {
        v59 = v332;
        v62 = 4;
      }
      else
      {
        if (!v446)
          goto LABEL_115;
        v62 = 5;
      }
      (*(void (**)(void))(*v59 + 8 * v62))();
      v60 = (uint64_t)v340;
      v61 = v335;
LABEL_115:
      v63 = v443;
      if (v443 == v61)
      {
        v63 = v61;
        v64 = 4;
      }
      else
      {
        if (!v443)
          goto LABEL_120;
        v64 = 5;
      }
      (*(void (**)(void))(*v63 + 8 * v64))();
      v60 = (uint64_t)v340;
LABEL_120:
      v65 = (_QWORD *)v440;
      if (v440 == v60)
      {
        v65 = (_QWORD *)v60;
        v66 = 4;
      }
      else
      {
        if (!v440)
          goto LABEL_125;
        v66 = 5;
      }
      (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_125:
      v67 = v391;
      if (v391 == v291)
      {
        v67 = v291;
        v68 = 4;
      }
      else
      {
        if (!v391)
          goto LABEL_130;
        v68 = 5;
      }
      (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_130:
      v69 = (_QWORD *)v396;
      if ((uint64_t *)v396 == v296)
      {
        v69 = v296;
        v70 = 4;
      }
      else
      {
        if (!v396)
          goto LABEL_135;
        v70 = 5;
      }
      (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_135:
      v71 = v456;
      if (v456 == v37)
      {
        v71 = v37;
        v72 = 4;
      }
      else
      {
        if (!v456)
          goto LABEL_140;
        v72 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v71 + 8 * v72))();
LABEL_140:
      v73 = v453;
      if (v453 == v21)
      {
        v73 = v21;
        v74 = 4;
      }
      else
      {
        if (!v453)
          goto LABEL_145;
        v74 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v73 + 8 * v74))();
LABEL_145:
      v75 = v450;
      if (v450 == (char *)v449)
      {
        v75 = (char *)v449;
        v76 = 4;
      }
      else
      {
        if (!v450)
          goto LABEL_150;
        v76 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v75 + 8 * v76))();
LABEL_150:
      v77 = v343;
      if (v343 == v328)
      {
        v77 = v328;
        v78 = 4;
      }
      else
      {
        if (!v343)
          goto LABEL_155;
        v78 = 5;
      }
      (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_155:
      v79 = v400;
      if (v400 == v333)
      {
        v79 = v333;
        v80 = 4;
      }
      else
      {
        if (!v400)
          goto LABEL_160;
        v80 = 5;
      }
      (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_160:
      v81 = v410;
      if (v410 == v16)
      {
        v81 = v16;
        v82 = 4;
      }
      else
      {
        if (!v410)
          goto LABEL_165;
        v82 = 5;
      }
      (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_165:
      v83 = v420;
      if (v420 == v337)
      {
        v83 = v337;
        v84 = 4;
      }
      else
      {
        if (!v420)
          goto LABEL_170;
        v84 = 5;
      }
      (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_170:
      v351 = v370;
      v85 = v287;
      if (!v372)
        goto LABEL_173;
      if (v372 != v371)
      {
        v353 = v372;
        v85 = v330;
LABEL_173:
        *v85 = 0;
        goto LABEL_175;
      }
      v353 = v17;
      (*(void (**)(_QWORD *, uint64_t *))(v371[0] + 24))(v371, v17);
LABEL_175:
      v354 = v373;
      v86 = v286;
      if (!v375)
        goto LABEL_178;
      if (v375 != v339)
      {
        v356 = v375;
        v86 = v308;
LABEL_178:
        *v86 = 0;
        goto LABEL_180;
      }
      v356 = v18;
      (*(void (**)(void))(*((_QWORD *)&v373 + 1) + 24))();
LABEL_180:
      v357 = v376;
      v87 = v285;
      if (!v378)
        goto LABEL_183;
      if (v378 != v338)
      {
        v359 = v378;
        v87 = v307;
LABEL_183:
        *v87 = 0;
        goto LABEL_185;
      }
      v359 = v315;
      (*(void (**)(void))(v377 + 24))();
LABEL_185:
      v360 = v379;
      v88 = v284;
      if (!v381)
        goto LABEL_188;
      if (v381 != v318)
      {
        v362 = v381;
        v88 = v306;
LABEL_188:
        *v88 = 0;
        goto LABEL_190;
      }
      v362 = v33;
      (*(void (**)(void))(v380 + 24))();
LABEL_190:
      v363 = v382;
      v89 = v283;
      if (!v384)
        goto LABEL_193;
      if (v384 != v317)
      {
        v365 = v384;
        v89 = v305;
LABEL_193:
        *v89 = 0;
        goto LABEL_195;
      }
      v365 = v334;
      (*(void (**)(void))(v383 + 24))();
LABEL_195:
      v366 = v385;
      v90 = v282;
      if (!v387)
        goto LABEL_198;
      if (v387 != v316)
      {
        v368 = v387;
        v90 = v304;
LABEL_198:
        *v90 = 0;
        goto LABEL_200;
      }
      v368 = v329;
      (*(void (**)(void))(v386 + 24))();
LABEL_200:
      v91 = v387;
      v369 = v388;
      if (v387 == v316)
      {
        v91 = v316;
        v92 = 4;
      }
      else
      {
        if (!v387)
          goto LABEL_205;
        v92 = 5;
      }
      (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_205:
      v93 = v384;
      if (v384 == v317)
      {
        v93 = v317;
        v94 = 4;
      }
      else
      {
        if (!v384)
          goto LABEL_210;
        v94 = 5;
      }
      (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_210:
      v95 = v381;
      if (v381 == v318)
      {
        v95 = v318;
        v96 = 4;
      }
      else
      {
        if (!v381)
          goto LABEL_215;
        v96 = 5;
      }
      (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_215:
      v97 = v378;
      if (v378 == v338)
      {
        v97 = v338;
        v98 = 4;
      }
      else
      {
        if (!v378)
          goto LABEL_220;
        v98 = 5;
      }
      (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_220:
      v99 = v375;
      if (v375 == v339)
      {
        v99 = v339;
        v100 = 4;
      }
      else
      {
        if (!v375)
          goto LABEL_225;
        v100 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v99 + 8 * v100))();
LABEL_225:
      v101 = v372;
      if (v372 == v371)
      {
        v101 = v371;
        v102 = 4;
      }
      else
      {
        if (!v372)
          goto LABEL_230;
        v102 = 5;
      }
      (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_230:
      v103 = v434;
      if (v434 == v319)
      {
        v103 = v319;
        v104 = 4;
      }
      else
      {
        if (!v434)
          goto LABEL_235;
        v104 = 5;
      }
      (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_235:
      v105 = v430;
      if (v430 == v336)
      {
        v105 = v336;
        v106 = 4;
      }
      else
      {
        if (!v430)
          goto LABEL_240;
        v106 = 5;
      }
      (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_240:
      v107 = (uint64_t)v353;
      v408 = v351;
      if (!v353)
        goto LABEL_243;
      if (v353 != v17)
      {
        v107 = (*(uint64_t (**)(void))(*v353 + 16))();
LABEL_243:
        v410 = (_QWORD *)v107;
        goto LABEL_245;
      }
      v410 = v16;
      (*(void (**)(uint64_t *, _QWORD *))(v352[0] + 24))(v17, v16);
LABEL_245:
      v108 = (uint64_t)v356;
      v411 = v354;
      if (!v356)
        goto LABEL_248;
      if (v356 != v18)
      {
        v108 = (*(uint64_t (**)(void))(*(_QWORD *)v356 + 16))();
LABEL_248:
        v413 = (char *)v108;
        goto LABEL_250;
      }
      v413 = (char *)v323;
      (*(void (**)(char *))(v355[0] + 24))(v18);
LABEL_250:
      v109 = (uint64_t)v359;
      v414 = v357;
      if (!v359)
        goto LABEL_253;
      if (v359 != v315)
      {
        v109 = (*(uint64_t (**)(void))(*v359 + 16))();
LABEL_253:
        v416 = (uint64_t *)v109;
        goto LABEL_255;
      }
      v416 = v322;
      (*(void (**)(uint64_t *))(v358 + 24))(v315);
LABEL_255:
      v398 = *((_QWORD *)&v360 + 1);
      v417 = v360;
      v110 = (uint64_t)v362;
      if (!v362)
        goto LABEL_258;
      if (v362 != v33)
      {
        v110 = (*(uint64_t (**)(void))(*v362 + 16))();
LABEL_258:
        v400 = (uint64_t *)v110;
        goto LABEL_260;
      }
      v400 = v333;
      (*(void (**)(uint64_t *))(v361 + 24))(v33);
LABEL_260:
      v111 = (uint64_t)v365;
      v401 = v363;
      if (!v365)
        goto LABEL_263;
      if (v365 != v334)
      {
        v111 = (*(uint64_t (**)(void))(*v365 + 16))();
LABEL_263:
        v403 = (uint64_t *)v111;
        goto LABEL_265;
      }
      v403 = v314;
      (*(void (**)(uint64_t *))(v364 + 24))(v334);
LABEL_265:
      v112 = (uint64_t)v368;
      v404 = v366;
      if (!v368)
        goto LABEL_268;
      if (v368 != v329)
      {
        v112 = (*(uint64_t (**)(void))(*v368 + 16))();
LABEL_268:
        v406 = (uint64_t *)v112;
        goto LABEL_270;
      }
      v406 = v313;
      (*(void (**)(uint64_t *))(v367 + 24))(v329);
LABEL_270:
      v407 = v369;
      v428 = (uint64_t)v408;
      v113 = v326;
      if (!v410)
        goto LABEL_273;
      if (v410 != v16)
      {
        v430 = v410;
        v113 = v272;
LABEL_273:
        *v113 = 0;
        goto LABEL_275;
      }
      v430 = v336;
      (*(void (**)(_QWORD *))(v409[0] + 24))(v16);
LABEL_275:
      *(_QWORD *)&v431 = v411;
      v114 = v301;
      if (!v413)
        goto LABEL_278;
      if (v413 != (char *)v323)
      {
        v433 = v413;
        v114 = v271;
LABEL_278:
        *v114 = 0;
        goto LABEL_280;
      }
      v433 = (char *)&v431 + 8;
      (*(void (**)(void))(v412 + 24))();
LABEL_280:
      v434 = v414;
      v115 = v300;
      if (!v416)
        goto LABEL_283;
      if (v416 != v322)
      {
        v436 = v416;
        v115 = v270;
LABEL_283:
        *v115 = 0;
        goto LABEL_285;
      }
      v436 = v321;
      (*(void (**)(void))(v415 + 24))();
LABEL_285:
      v437 = v417;
      v418 = v398;
      v116 = v299;
      if (!v400)
        goto LABEL_288;
      if (v400 != v333)
      {
        v420 = v400;
        v116 = v269;
LABEL_288:
        *v116 = 0;
        goto LABEL_290;
      }
      v420 = v337;
      (*(void (**)(void))(v399 + 24))();
LABEL_290:
      v421 = v401;
      v117 = v298;
      if (!v403)
        goto LABEL_293;
      if (v403 != v314)
      {
        v423 = v403;
        v117 = v268;
LABEL_293:
        *v117 = 0;
        goto LABEL_295;
      }
      v423 = v320;
      (*(void (**)(void))(v402 + 24))();
LABEL_295:
      v424 = v404;
      v118 = v297;
      if (!v406)
        goto LABEL_298;
      if (v406 != v313)
      {
        v426 = v406;
        v118 = v267;
LABEL_298:
        *v118 = 0;
        goto LABEL_300;
      }
      v426 = v312;
      (*(void (**)(void))(v405 + 24))();
LABEL_300:
      v427 = v407;
      v448 = (uint64_t *)v428;
      v119 = v324;
      if (!v430)
        goto LABEL_303;
      if (v430 != v336)
      {
        v450 = (char *)v430;
        v119 = (char **)v326;
LABEL_303:
        *v119 = 0;
        goto LABEL_305;
      }
      v450 = (char *)v449;
      (*(void (**)(void))(v429 + 24))();
LABEL_305:
      v451 = v431;
      v120 = v311;
      if (!v433)
        goto LABEL_308;
      if (v433 != (char *)&v431 + 8)
      {
        v453 = v433;
        v120 = v301;
LABEL_308:
        *v120 = 0;
        goto LABEL_310;
      }
      v453 = v21;
      (*(void (**)(char *, char *))(*((_QWORD *)&v431 + 1) + 24))((char *)&v431 + 8, v21);
LABEL_310:
      v454 = v434;
      v121 = v310;
      if (!v436)
        goto LABEL_313;
      if (v436 != v321)
      {
        v456 = (char *)v436;
        v121 = (char **)v300;
LABEL_313:
        *v121 = 0;
        goto LABEL_315;
      }
      v456 = v37;
      (*(void (**)(void))(v435 + 24))();
LABEL_315:
      v457[0] = v437;
      v438 = v418;
      v122 = v309;
      if (!v420)
        goto LABEL_318;
      if (v420 != v337)
      {
        v440 = (uint64_t)v420;
        v122 = (uint64_t *)v299;
LABEL_318:
        *v122 = 0;
        goto LABEL_320;
      }
      v440 = (uint64_t)v340;
      (*(void (**)(void))(v419 + 24))();
LABEL_320:
      v441 = v421;
      v123 = v303;
      if (!v423)
        goto LABEL_323;
      if (v423 != v320)
      {
        v443 = v423;
        v123 = v298;
LABEL_323:
        *v123 = 0;
        goto LABEL_325;
      }
      v443 = v335;
      (*(void (**)(void))(v422 + 24))();
LABEL_325:
      v444 = v424;
      v124 = v302;
      if (!v426)
        goto LABEL_328;
      if (v426 != v312)
      {
        v446 = v426;
        v124 = v297;
LABEL_328:
        *v124 = 0;
        goto LABEL_330;
      }
      v446 = v332;
      (*(void (**)(void))(v425 + 24))();
LABEL_330:
      v447 = v427;
      if (v448 == (uint64_t *)v438)
      {
        v341 = v448;
        v126 = (char **)v281;
        if (!v450)
          goto LABEL_338;
        if (v450 == (char *)v449)
        {
          v343 = v328;
          (*(void (**)(_QWORD *))(v449[0] + 24))(v449);
        }
        else
        {
          v343 = (uint64_t *)v450;
          v126 = v324;
LABEL_338:
          *v126 = 0;
        }
        v344 = v451;
        v154 = v280;
        if (v453)
        {
          if (v453 != v21)
          {
            v346 = v453;
            v154 = v311;
            goto LABEL_455;
          }
          v346 = v295;
          (*(void (**)(char *))(v452 + 24))(v21);
        }
        else
        {
LABEL_455:
          *v154 = 0;
        }
        v347 = v454;
        v155 = (char **)v279;
        if (v456)
        {
          if (v456 != v37)
          {
            v349 = (uint64_t *)v456;
            v155 = v310;
            goto LABEL_460;
          }
          v349 = v294;
          (*(void (**)(char *))(v455 + 24))(v37);
        }
        else
        {
LABEL_460:
          *v155 = 0;
        }
        v350 = v457[0];
        goto LABEL_463;
      }
      v370 = v448;
      v125 = (uint64_t)v450;
      if (!v450)
        goto LABEL_334;
      if (v450 != (char *)v449)
      {
        v125 = (*(uint64_t (**)(char *))(*(_QWORD *)v450 + 16))(v450);
LABEL_334:
        v372 = (uint64_t *)v125;
        goto LABEL_341;
      }
      v372 = v371;
      (*(void (**)(_QWORD *, _QWORD *))(v449[0] + 24))(v449, v371);
LABEL_341:
      v127 = (uint64_t)v453;
      *(_QWORD *)&v373 = v451;
      if (!v453)
        goto LABEL_344;
      if (v453 != v21)
      {
        v127 = (*(uint64_t (**)(char *))(*(_QWORD *)v453 + 16))(v453);
LABEL_344:
        v375 = (char *)v127;
        goto LABEL_346;
      }
      v375 = v339;
      (*(void (**)(char *))(v452 + 24))(v21);
LABEL_346:
      v128 = (uint64_t)v456;
      v376 = v454;
      if (!v456)
        goto LABEL_349;
      if (v456 != v37)
      {
        v128 = (*(uint64_t (**)(char *))(*(_QWORD *)v456 + 16))(v456);
LABEL_349:
        v378 = (uint64_t *)v128;
        goto LABEL_351;
      }
      v378 = v338;
      (*(void (**)(char *))(v455 + 24))(v37);
LABEL_351:
      v130 = v292;
      v129 = v293;
LABEL_352:
      *(_QWORD *)v130 = *(_QWORD *)v129;
      while (1)
      {
        v131 = v370 + 4;
        v370 = v131;
        if (v131 == (uint64_t *)v373)
          goto LABEL_361;
        do
        {
          if (!v372)
LABEL_674:
            sub_223198474();
          v132 = (*(uint64_t (**)(uint64_t *))(*v372 + 48))(v372);
          v131 = v370;
          if ((v132 & 1) != 0)
            break;
          v131 = v370 + 4;
          v370 = v131;
        }
        while (v131 != (uint64_t *)v373);
LABEL_361:
        while (v131 != v376)
        {
          if (!v375)
            goto LABEL_674;
          v134 = (*(uint64_t (**)(char *))(*(_QWORD *)v375 + 48))(v375);
          v131 = v370;
          if ((v134 & 1) != 0)
            break;
          do
          {
            v131 += 4;
            v370 = v131;
            if (v131 == (uint64_t *)v373)
              break;
            if (!v372)
              goto LABEL_674;
            v133 = (*(uint64_t (**)(uint64_t *))(*v372 + 48))(v372);
            v131 = v370;
          }
          while ((v133 & 1) == 0);
        }
        if (v131 == (uint64_t *)v438)
          break;
        if (*((float *)v131 + 2) < *((float *)v448 + 2))
        {
          v448 = v131;
          if (v372)
          {
            if (v372 != v371)
            {
              v135 = (char *)(*(uint64_t (**)(void))(*v372 + 16))();
              v395 = v135;
              v136 = v450;
              if (v135 != (char *)&v393)
                goto LABEL_369;
LABEL_374:
              if (v136 != (char *)v449)
              {
                ((void (*)(uint64_t **, _QWORD *))v393[3])(&v393, v449);
                (*(void (**)(char *))(*(_QWORD *)v395 + 32))(v395);
                v395 = v450;
                v136 = v450;
                v450 = (char *)v449;
                if (v136 == (char *)&v393)
                  goto LABEL_376;
LABEL_371:
                v137 = v21;
                if (v136)
                {
                  v138 = 5;
                  goto LABEL_381;
                }
                goto LABEL_382;
              }
              ((void (*)(uint64_t **, uint64_t **))v393[3])(&v393, &v389);
              (*(void (**)(char *))(*(_QWORD *)v395 + 32))(v395);
              v395 = 0;
              (*(void (**)(char *, uint64_t **))(*(_QWORD *)v450 + 24))(v450, &v393);
              (*(void (**)(char *))(*(_QWORD *)v450 + 32))(v450);
              v450 = 0;
              v395 = (char *)&v393;
              ((void (*)(uint64_t **, _QWORD *))v389[3])(&v389, v449);
              ((void (*)(uint64_t **))v389[4])(&v389);
              v450 = (char *)v449;
              v136 = v395;
              if (v395 != (char *)&v393)
                goto LABEL_371;
LABEL_376:
              v136 = (char *)&v393;
LABEL_380:
              v138 = 4;
LABEL_381:
              (*(void (**)(void))(*(_QWORD *)v136 + 8 * v138))();
              v137 = v21;
LABEL_382:
              v451 = v373;
              if (v375)
              {
                if (v375 != v339)
                {
                  v139 = (char *)(*(uint64_t (**)(void))(*(_QWORD *)v375 + 16))();
                  v137 = v21;
                  v395 = v139;
                  v140 = v453;
                  if (v139 != (char *)&v393)
                    goto LABEL_385;
LABEL_390:
                  if (v140 != v137)
                  {
                    ((void (*)(uint64_t **, char *))v393[3])(&v393, v137);
                    (*(void (**)(char *))(*(_QWORD *)v395 + 32))(v395);
                    v395 = v453;
                    v140 = v453;
                    v453 = v21;
                    if (v140 == (char *)&v393)
                      goto LABEL_392;
LABEL_387:
                    if (v140)
                    {
                      v141 = 5;
                      goto LABEL_397;
                    }
                    goto LABEL_398;
                  }
                  ((void (*)(uint64_t **, uint64_t **))v393[3])(&v393, &v389);
                  (*(void (**)(char *))(*(_QWORD *)v395 + 32))(v395);
                  v395 = 0;
                  (*(void (**)(char *, uint64_t **))(*(_QWORD *)v453 + 24))(v453, &v393);
                  (*(void (**)(char *))(*(_QWORD *)v453 + 32))(v453);
                  v453 = 0;
                  v395 = (char *)&v393;
                  ((void (*)(uint64_t **, char *))v389[3])(&v389, v21);
                  ((void (*)(uint64_t **))v389[4])(&v389);
                  v453 = v21;
                  v140 = v395;
                  if (v395 != (char *)&v393)
                    goto LABEL_387;
LABEL_392:
                  v140 = (char *)&v393;
LABEL_396:
                  v141 = 4;
LABEL_397:
                  (*(void (**)(void))(*(_QWORD *)v140 + 8 * v141))();
LABEL_398:
                  v454 = v376;
                  if (v378)
                  {
                    if (v378 != v338)
                    {
                      v142 = (char *)(*(uint64_t (**)(void))(*v378 + 16))();
                      v395 = v142;
                      v143 = v456;
                      if (v142 != (char *)&v393)
                        goto LABEL_401;
LABEL_406:
                      if (v143 != v37)
                      {
                        ((void (*)(uint64_t **, char *))v393[3])(&v393, v37);
                        (*(void (**)(char *))(*(_QWORD *)v395 + 32))(v395);
                        v395 = v456;
                        v143 = v456;
                        v456 = v37;
                        if (v143 == (char *)&v393)
                          goto LABEL_408;
LABEL_403:
                        if (v143)
                        {
                          v144 = 5;
                          goto LABEL_413;
                        }
                        goto LABEL_414;
                      }
                      ((void (*)(uint64_t **, uint64_t **))v393[3])(&v393, &v389);
                      (*(void (**)(char *))(*(_QWORD *)v395 + 32))(v395);
                      v395 = 0;
                      (*(void (**)(char *, uint64_t **))(*(_QWORD *)v456 + 24))(v456, &v393);
                      (*(void (**)(char *))(*(_QWORD *)v456 + 32))(v456);
                      v456 = 0;
                      v395 = (char *)&v393;
                      ((void (*)(uint64_t **, char *))v389[3])(&v389, v37);
                      ((void (*)(uint64_t **))v389[4])(&v389);
                      v456 = v37;
                      v143 = v395;
                      if (v395 != (char *)&v393)
                        goto LABEL_403;
LABEL_408:
                      v143 = (char *)&v393;
LABEL_412:
                      v144 = 4;
LABEL_413:
                      (*(void (**)(void))(*(_QWORD *)v143 + 8 * v144))();
LABEL_414:
                      v129 = v292;
                      v130 = v293;
                      goto LABEL_352;
                    }
                    v395 = (char *)&v393;
                    (*(void (**)(uint64_t *, uint64_t **))(v377 + 24))(v338, &v393);
                    v142 = v395;
                    v143 = v456;
                    if (v395 == (char *)&v393)
                      goto LABEL_406;
                  }
                  else
                  {
                    v142 = 0;
                    v395 = 0;
                    v143 = v456;
                    if (&v265 == (uint64_t *)-1296)
                      goto LABEL_406;
                  }
LABEL_401:
                  if (v143 != v37)
                  {
                    v395 = v143;
                    v456 = v142;
                    if (v143 == (char *)&v393)
                      goto LABEL_408;
                    goto LABEL_403;
                  }
                  (*(void (**)(char *, uint64_t **))(v455 + 24))(v37, &v393);
                  (*(void (**)(char *))(*(_QWORD *)v456 + 32))(v456);
                  v456 = v395;
                  v143 = (char *)&v393;
                  v395 = (char *)&v393;
                  goto LABEL_412;
                }
                v395 = (char *)&v393;
                (*(void (**)(char *, uint64_t **))(*((_QWORD *)&v373 + 1) + 24))(v339, &v393);
                v139 = v395;
                v137 = v21;
                v140 = v453;
                if (v395 == (char *)&v393)
                  goto LABEL_390;
              }
              else
              {
                v139 = 0;
                v395 = 0;
                v140 = v453;
                if (&v265 == (uint64_t *)-1296)
                  goto LABEL_390;
              }
LABEL_385:
              if (v140 != v137)
              {
                v395 = v140;
                v453 = v139;
                if (v140 == (char *)&v393)
                  goto LABEL_392;
                goto LABEL_387;
              }
              (*(void (**)(char *, uint64_t **))(v452 + 24))(v137, &v393);
              (*(void (**)(char *))(*(_QWORD *)v453 + 32))(v453);
              v453 = v395;
              v140 = (char *)&v393;
              v395 = (char *)&v393;
              goto LABEL_396;
            }
            v395 = (char *)&v393;
            (*(void (**)(_QWORD *, uint64_t **))(v371[0] + 24))(v371, &v393);
            v135 = v395;
            v136 = v450;
            if (v395 == (char *)&v393)
              goto LABEL_374;
          }
          else
          {
            v135 = 0;
            v395 = 0;
            v136 = v450;
            if (&v265 == (uint64_t *)-1296)
              goto LABEL_374;
          }
LABEL_369:
          if (v136 != (char *)v449)
          {
            v395 = v136;
            v450 = v135;
            if (v136 == (char *)&v393)
              goto LABEL_376;
            goto LABEL_371;
          }
          (*(void (**)(_QWORD *, uint64_t **))(v449[0] + 24))(v449, &v393);
          (*(void (**)(char *))(*(_QWORD *)v450 + 32))(v450);
          v450 = v395;
          v136 = (char *)&v393;
          v395 = (char *)&v393;
          goto LABEL_380;
        }
      }
      v341 = v448;
      v145 = (char **)v281;
      if (!v450)
        goto LABEL_424;
      if (v450 != (char *)v449)
      {
        v343 = (uint64_t *)v450;
        v145 = v324;
LABEL_424:
        *v145 = 0;
        goto LABEL_426;
      }
      v343 = v328;
      (*(void (**)(_QWORD *))(v449[0] + 24))(v449);
LABEL_426:
      v344 = v451;
      v146 = v280;
      if (!v453)
        goto LABEL_429;
      if (v453 != v21)
      {
        v346 = v453;
        v146 = v311;
LABEL_429:
        *v146 = 0;
        goto LABEL_431;
      }
      v346 = v295;
      (*(void (**)(char *))(v452 + 24))(v21);
LABEL_431:
      v347 = v454;
      v147 = (char **)v279;
      if (!v456)
        goto LABEL_434;
      if (v456 != v37)
      {
        v349 = (uint64_t *)v456;
        v147 = v310;
LABEL_434:
        *v147 = 0;
        goto LABEL_436;
      }
      v349 = v294;
      (*(void (**)(char *))(v455 + 24))(v37);
LABEL_436:
      v350 = v457[0];
      v148 = v378;
      if (v378 == v338)
      {
        v148 = v338;
        v149 = 4;
      }
      else
      {
        if (!v378)
          goto LABEL_441;
        v149 = 5;
      }
      (*(void (**)(void))(*v148 + 8 * v149))();
LABEL_441:
      v150 = v375;
      if (v375 == v339)
      {
        v150 = v339;
        v151 = 4;
        goto LABEL_445;
      }
      if (v375)
      {
        v151 = 5;
LABEL_445:
        (*(void (**)(void))(*(_QWORD *)v150 + 8 * v151))();
      }
      v152 = v372;
      if (v372 == v371)
      {
        v152 = v371;
        v153 = 4;
      }
      else
      {
        if (!v372)
          goto LABEL_463;
        v153 = 5;
      }
      (*(void (**)(void))(*v152 + 8 * v153))();
LABEL_463:
      v156 = v446;
      if (v446 == v332)
      {
        v156 = v332;
        v157 = 4;
      }
      else
      {
        if (!v446)
          goto LABEL_468;
        v157 = 5;
      }
      (*(void (**)(void))(*v156 + 8 * v157))();
LABEL_468:
      v158 = v443;
      if (v443 == v335)
      {
        v158 = v335;
        v159 = 4;
      }
      else
      {
        if (!v443)
          goto LABEL_473;
        v159 = 5;
      }
      (*(void (**)(void))(*v158 + 8 * v159))();
LABEL_473:
      v160 = (_QWORD *)v440;
      if ((_QWORD *)v440 == v340)
      {
        v160 = v340;
        v161 = 4;
      }
      else
      {
        if (!v440)
          goto LABEL_478;
        v161 = 5;
      }
      (*(void (**)(void))(*v160 + 8 * v161))();
LABEL_478:
      v162 = v456;
      if (v456 == v37)
      {
        v162 = v37;
        v164 = 4;
        v163 = v312;
      }
      else
      {
        v163 = v312;
        if (!v456)
          goto LABEL_483;
        v164 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v162 + 8 * v164))();
LABEL_483:
      v165 = v453;
      if (v453 == v21)
      {
        v165 = v21;
        v166 = 4;
      }
      else
      {
        if (!v453)
          goto LABEL_488;
        v166 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v165 + 8 * v166))();
LABEL_488:
      v167 = v450;
      if (v450 == (char *)v449)
      {
        v167 = (char *)v449;
        v168 = 4;
      }
      else
      {
        if (!v450)
          goto LABEL_493;
        v168 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v167 + 8 * v168))();
LABEL_493:
      v169 = v426;
      if (v426 == v163)
      {
        v169 = v163;
        v171 = 4;
        v170 = v338;
      }
      else
      {
        v170 = v338;
        if (!v426)
          goto LABEL_498;
        v171 = 5;
      }
      (*(void (**)(void))(*v169 + 8 * v171))();
LABEL_498:
      v172 = v423;
      if (v423 == v320)
      {
        v172 = v320;
        v173 = 4;
      }
      else
      {
        if (!v423)
          goto LABEL_503;
        v173 = 5;
      }
      (*(void (**)(void))(*v172 + 8 * v173))();
LABEL_503:
      v174 = v420;
      if (v420 == v337)
      {
        v174 = v337;
        v175 = 4;
      }
      else
      {
        if (!v420)
          goto LABEL_508;
        v175 = 5;
      }
      (*(void (**)(void))(*v174 + 8 * v175))();
LABEL_508:
      v176 = v436;
      if (v436 == v321)
      {
        v176 = v321;
        v177 = 4;
      }
      else
      {
        if (!v436)
          goto LABEL_513;
        v177 = 5;
      }
      (*(void (**)(void))(*v176 + 8 * v177))();
LABEL_513:
      v178 = v433;
      if (v433 == (char *)&v431 + 8)
      {
        v178 = (char *)&v431 + 8;
        v179 = 4;
      }
      else
      {
        if (!v433)
          goto LABEL_518;
        v179 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v178 + 8 * v179))();
LABEL_518:
      v180 = v430;
      if (v430 == v336)
      {
        v180 = v336;
        v181 = 4;
      }
      else
      {
        if (!v430)
          goto LABEL_523;
        v181 = 5;
      }
      (*(void (**)(void))(*v180 + 8 * v181))();
LABEL_523:
      v182 = v406;
      if (v406 == v313)
      {
        v182 = v313;
        v183 = 4;
      }
      else
      {
        if (!v406)
          goto LABEL_528;
        v183 = 5;
      }
      (*(void (**)(void))(*v182 + 8 * v183))();
LABEL_528:
      v184 = v403;
      if (v403 == v314)
      {
        v184 = v314;
        v185 = 4;
      }
      else
      {
        if (!v403)
          goto LABEL_533;
        v185 = 5;
      }
      (*(void (**)(void))(*v184 + 8 * v185))();
LABEL_533:
      v186 = v400;
      if (v400 == v333)
      {
        v186 = v333;
        v187 = 4;
      }
      else
      {
        if (!v400)
          goto LABEL_538;
        v187 = 5;
      }
      (*(void (**)(void))(*v186 + 8 * v187))();
LABEL_538:
      v188 = v416;
      if (v416 == v322)
      {
        v188 = v322;
        v189 = 4;
      }
      else
      {
        if (!v416)
          goto LABEL_543;
        v189 = 5;
      }
      (*(void (**)(void))(*v188 + 8 * v189))();
LABEL_543:
      v190 = v413;
      if (v413 == (char *)v323)
      {
        v190 = v323;
        v191 = 4;
      }
      else
      {
        if (!v413)
          goto LABEL_548;
        v191 = 5;
      }
      (*(void (**)(void))(*v190 + 8 * v191))();
LABEL_548:
      v192 = v410;
      if (v410 == v16)
      {
        v192 = v16;
        v193 = 4;
      }
      else
      {
        if (!v410)
          goto LABEL_553;
        v193 = 5;
      }
      (*(void (**)(void))(*v192 + 8 * v193))();
LABEL_553:
      v194 = (uint64_t)v362;
      v370 = (uint64_t *)*((_QWORD *)&v360 + 1);
      if (!v362)
      {
        v19 = v21;
        v195 = v339;
        goto LABEL_557;
      }
      if (v362 != v33)
      {
        v194 = (*(uint64_t (**)(void))(*v362 + 16))();
        v195 = v339;
        v19 = v21;
LABEL_557:
        v372 = (uint64_t *)v194;
        goto LABEL_559;
      }
      v372 = v371;
      (*(void (**)(uint64_t *, _QWORD *))(v361 + 24))(v33, v371);
      v19 = v21;
      v195 = v339;
LABEL_559:
      v196 = (uint64_t)v365;
      *(_QWORD *)&v373 = v363;
      if (!v365)
        goto LABEL_562;
      if (v365 != v334)
      {
        v196 = (*(uint64_t (**)(void))(*v365 + 16))();
        v19 = v21;
LABEL_562:
        v375 = (char *)v196;
        goto LABEL_564;
      }
      v375 = v195;
      (*(void (**)(uint64_t *, char *))(v364 + 24))(v334, v195);
      v19 = v21;
LABEL_564:
      v197 = v368;
      v376 = v366;
      if (!v368)
        goto LABEL_567;
      if (v368 != v329)
      {
        v197 = (uint64_t *)(*(uint64_t (**)(void))(*v368 + 16))();
        v19 = v21;
LABEL_567:
        v378 = v197;
        goto LABEL_569;
      }
      v378 = v170;
      (*(void (**)(uint64_t *, uint64_t *))(v367 + 24))(v329, v170);
      v197 = v378;
      v19 = v21;
LABEL_569:
      *(_QWORD *)&v379 = v369;
      v198 = v341;
      v199 = v370;
      if (v197 == v338)
      {
        v197 = v338;
        v200 = 4;
      }
      else
      {
        if (!v197)
          goto LABEL_574;
        v200 = 5;
      }
      (*(void (**)(void))(*v197 + 8 * v200))();
      v19 = v21;
LABEL_574:
      v201 = v375;
      if (v375 == v339)
      {
        v201 = v339;
        v202 = 4;
      }
      else
      {
        if (!v375)
          goto LABEL_579;
        v202 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v201 + 8 * v202))();
      v19 = v21;
LABEL_579:
      v203 = v372;
      if (v372 == v371)
      {
        v203 = v371;
        v204 = 4;
      }
      else
      {
        if (!v372)
          goto LABEL_584;
        v204 = 5;
      }
      (*(void (**)(void))(*v203 + 8 * v204))();
      v19 = v21;
LABEL_584:
      v205 = v198 == v199;
      v206 = v331;
      v207 = v334;
      if (v205)
        goto LABEL_616;
      v208 = v341;
      v210 = (char *)a4[1];
      v209 = (unint64_t)a4[2];
      if ((unint64_t)v210 < v209)
      {
        v211 = *v341;
        *((_DWORD *)v210 + 2) = *((_DWORD *)v341 + 2);
        *(_QWORD *)v210 = v211;
        v212 = v210 + 12;
        v18 = v277;
        v207 = v334;
        a4[1] = v212;
        v206 = v331;
        v19 = v21;
        if (!v273)
          goto LABEL_616;
        goto LABEL_587;
      }
      v216 = (char *)*a4;
      v217 = 0xAAAAAAAAAAAAAAABLL * ((v210 - (_BYTE *)*a4) >> 2);
      v218 = v217 + 1;
      if (v217 + 1 > 0x1555555555555555)
        sub_22316E078();
      v219 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v209 - (_QWORD)v216) >> 2);
      if (2 * v219 > v218)
        v218 = 2 * v219;
      if (v219 >= 0xAAAAAAAAAAAAAAALL)
        v220 = 0x1555555555555555;
      else
        v220 = v218;
      if (v220)
      {
        if (v220 > 0x1555555555555555)
          goto LABEL_675;
        v221 = (char *)operator new(12 * v220);
        a4 = v266;
      }
      else
      {
        v221 = 0;
      }
      v232 = *v208;
      v233 = &v221[12 * v217];
      *((_DWORD *)v233 + 2) = *((_DWORD *)v208 + 2);
      *(_QWORD *)v233 = v232;
      v234 = v233;
      if (v210 == v216)
      {
        v17 = v275;
        v18 = v277;
        v237 = v233 + 12;
        *a4 = v233;
        a4[1] = v233 + 12;
        a4[2] = &v221[12 * v220];
        if (v210)
          goto LABEL_614;
      }
      else
      {
        v17 = v275;
        v18 = v277;
        do
        {
          v235 = *(_QWORD *)(v210 - 12);
          v210 -= 12;
          v236 = *((_DWORD *)v210 + 2);
          *(_QWORD *)(v234 - 12) = v235;
          v234 -= 12;
          *((_DWORD *)v234 + 2) = v236;
        }
        while (v210 != v216);
        v210 = (char *)*a4;
        v237 = v233 + 12;
        *a4 = v234;
        a4[1] = v233 + 12;
        a4[2] = &v221[12 * v220];
        if (v210)
LABEL_614:
          operator delete(v210);
      }
      v16 = v276;
      v207 = v334;
      a4[1] = v237;
      v206 = v331;
      v19 = v21;
      if (!v273)
      {
LABEL_616:
        v238 = v349;
        v239 = v294;
        if (v349 == v294)
          goto LABEL_632;
        goto LABEL_617;
      }
LABEL_587:
      v214 = *(char **)(v278 + 8);
      v213 = *(_QWORD *)(v278 + 16);
      if ((unint64_t)v214 < v213)
      {
        *(_QWORD *)v214 = v325;
        v215 = (uint64_t)(v214 + 8);
        v17 = v275;
        goto LABEL_631;
      }
      v222 = *(char **)v278;
      v223 = (uint64_t)&v214[-*(_QWORD *)v278];
      v224 = v223 >> 3;
      v225 = (v223 >> 3) + 1;
      if (v225 >> 61)
        sub_22367C394();
      v226 = v213 - (_QWORD)v222;
      if (v226 >> 2 > v225)
        v225 = v226 >> 2;
      if ((unint64_t)v226 >= 0x7FFFFFFFFFFFFFF8)
        v227 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v227 = v225;
      if (v227)
      {
        if (v227 >> 61)
LABEL_675:
          sub_223174E94();
        v228 = operator new(8 * v227);
        v229 = &v228[8 * v224];
        *v229 = v325;
        v215 = (uint64_t)(v229 + 1);
        v230 = v214 - v222;
        if (v214 == v222)
        {
LABEL_622:
          a4 = v266;
          goto LABEL_628;
        }
      }
      else
      {
        v228 = 0;
        v229 = (_QWORD *)(8 * v224);
        *(_QWORD *)(8 * v224) = v325;
        v215 = 8 * v224 + 8;
        v230 = v214 - v222;
        if (v214 == v222)
          goto LABEL_622;
      }
      v231 = v230 - 8;
      if (v231 >= 0x58)
      {
        v241 = v214 - v228 - v223;
        a4 = v266;
        if (v241 >= 0x20)
        {
          v242 = (v231 >> 3) + 1;
          v243 = 8 * (v242 & 0x3FFFFFFFFFFFFFFCLL);
          v244 = &v214[-v243];
          v229 = (_QWORD *)((char *)v229 - v243);
          v245 = &v228[8 * v224 - 16];
          v246 = v214 - 16;
          v247 = v242 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v248 = *(_OWORD *)v246;
            *(v245 - 1) = *((_OWORD *)v246 - 1);
            *v245 = v248;
            v245 -= 2;
            v246 -= 32;
            v247 -= 4;
          }
          while (v247);
          v214 = v244;
          if (v242 == (v242 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_628;
        }
      }
      else
      {
        a4 = v266;
      }
      do
      {
        v249 = *((_QWORD *)v214 - 1);
        v214 -= 8;
        *--v229 = v249;
      }
      while (v214 != v222);
LABEL_628:
      v250 = v278;
      *(_QWORD *)v278 = v229;
      *(_QWORD *)(v250 + 8) = v215;
      *(_QWORD *)(v250 + 16) = &v228[8 * v227];
      if (v222)
        operator delete(v222);
      v17 = v275;
      v18 = v277;
      v206 = v331;
      v207 = v334;
      v19 = v21;
LABEL_631:
      *(_QWORD *)(v278 + 8) = v215;
      v16 = v276;
      v238 = v349;
      v239 = v294;
      if (v349 == v294)
      {
LABEL_632:
        v238 = v239;
        v240 = 4;
        goto LABEL_633;
      }
LABEL_617:
      if (!v238)
        goto LABEL_634;
      v240 = 5;
LABEL_633:
      (*(void (**)(void))(*v238 + 8 * v240))();
      v19 = v21;
LABEL_634:
      v251 = v346;
      if (v346 == v295)
      {
        v251 = v295;
        v252 = 4;
      }
      else
      {
        if (!v346)
          goto LABEL_639;
        v252 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v251 + 8 * v252))();
      v19 = v21;
LABEL_639:
      v253 = v343;
      if (v343 == v328)
      {
        v253 = v328;
        v254 = 4;
      }
      else
      {
        if (!v343)
          goto LABEL_644;
        v254 = 5;
      }
      (*(void (**)(void))(*v253 + 8 * v254))();
      v19 = v21;
LABEL_644:
      v255 = v368;
      if (v368 == v329)
      {
        v255 = v329;
        v256 = 4;
      }
      else
      {
        if (!v368)
          goto LABEL_649;
        v256 = 5;
      }
      (*(void (**)(void))(*v255 + 8 * v256))();
      v19 = v21;
LABEL_649:
      v257 = v365;
      if (v365 == v207)
      {
        v257 = v207;
        v258 = 4;
      }
      else
      {
        if (!v365)
          goto LABEL_654;
        v258 = 5;
      }
      (*(void (**)(void))(*v257 + 8 * v258))();
      v19 = v21;
LABEL_654:
      v259 = v362;
      if (v362 == v206)
      {
        v259 = v206;
        v260 = 4;
      }
      else
      {
        if (!v362)
          goto LABEL_659;
        v260 = 5;
      }
      (*(void (**)(void))(*v259 + 8 * v260))();
      v19 = v21;
LABEL_659:
      v261 = v359;
      if (v359 == v315)
      {
        v261 = v315;
        v262 = 4;
      }
      else
      {
        if (!v359)
          goto LABEL_664;
        v262 = 5;
      }
      (*(void (**)(void))(*v261 + 8 * v262))();
      v19 = v21;
LABEL_664:
      v263 = v356;
      if (v356 == v18)
      {
        v263 = v18;
        v264 = 4;
      }
      else
      {
        if (!v356)
          goto LABEL_669;
        v264 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v263 + 8 * v264))();
      v19 = v21;
LABEL_669:
      result = v353;
      if (v353 == v17)
      {
        result = v17;
        v20 = 4;
      }
      else
      {
        if (!v353)
          goto LABEL_6;
        v20 = 5;
      }
      result = (uint64_t *)(*(uint64_t (**)(void))(*result + 8 * v20))();
      v19 = v21;
LABEL_6:
      v15 = v325 + 1;
      v8 = *v290;
      if (v325 + 1 >= 0xEEEEEEEEEEEEEEEFLL * ((v290[1] - *v290) >> 3))
        return result;
    }
    v372 = (uint64_t *)v27;
    v29 = v324;
LABEL_16:
    v30 = v18;
    v31 = v17;
    *v29 = 0;
    *(_QWORD *)&v373 = v451;
    *((_QWORD *)&v373 + 1) = v25;
    v32 = &off_24EC65F80;
    v33 = v331;
    v34 = (uint64_t)v340;
LABEL_17:
    v376 = v327;
    v35 = v34;
    ((void (*)(uint64_t, _QWORD *))v32[3])(v34, v327);
    v36 = (_QWORD *)v440;
    v377 = v441;
    if (v440 == v35)
      goto LABEL_24;
    goto LABEL_18;
  }
  return result;
}

void sub_2240095A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  void *v12;

  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(a10 + 8) = v12;
    operator delete(v12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22400A18C(uint64_t a1, _QWORD *a2, _QWORD *a3, double a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  *(_QWORD *)a1 = *a2;
  v8 = a1 + 8;
  v9 = (_QWORD *)a2[4];
  if (v9)
  {
    if (v9 == a2 + 1)
    {
      *(_QWORD *)(a1 + 32) = v8;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)a2[4] + 24))(a2[4], v8);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  v10 = a2[5];
  *(_QWORD *)(a1 + 48) = &off_24EC65F00;
  *(_QWORD *)(a1 + 40) = v10;
  *(double *)(a1 + 56) = a4;
  *(_QWORD *)(a1 + 72) = a1 + 48;
  *(_QWORD *)(a1 + 80) = *a3;
  v11 = a3[4];
  if (v11)
  {
    if ((_QWORD *)v11 == a3 + 1)
    {
      *(_QWORD *)(a1 + 112) = a1 + 88;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)a3[4] + 24))(a3[4], a1 + 88);
      goto LABEL_11;
    }
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  *(_QWORD *)(a1 + 112) = v11;
LABEL_11:
  *(_QWORD *)(a1 + 120) = a3[5];
  v12 = *(_QWORD *)a1;
LABEL_12:
  while (v12 != *(_QWORD *)(a1 + 80))
  {
    v13 = *(_QWORD *)(a1 + 72);
    if (!v13)
      goto LABEL_21;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13) & 1) != 0)
      break;
    v12 = *(_QWORD *)a1 + 32;
    *(_QWORD *)a1 = v12;
    if (v12 != *(_QWORD *)(a1 + 40))
    {
      while (1)
      {
        v14 = *(_QWORD *)(a1 + 32);
        if (!v14)
          break;
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
        v12 = *(_QWORD *)a1;
        if ((v15 & 1) == 0)
        {
          v12 += 32;
          *(_QWORD *)a1 = v12;
          if (v12 != *(_QWORD *)(a1 + 40))
            continue;
        }
        goto LABEL_12;
      }
LABEL_21:
      sub_223198474();
    }
  }
  return a1;
}

void sub_22400A314(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = *(_QWORD **)(v2 + 72);
  if (v5 == v3)
  {
    v6 = 4;
    v5 = v3;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = *(_QWORD **)(v2 + 32);
  if (v7 == v1)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v8 = 5;
    v1 = *(_QWORD **)(v2 + 32);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v8))(v1);
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_22400A3C0()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22400A3D4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC65F00;
  result[1] = v3;
  return result;
}

uint64_t sub_22400A408(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC65F00;
  a2[1] = v2;
  return result;
}

BOOL sub_22400A424(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) >= *(float *)(a2 + 8);
}

uint64_t sub_22400A43C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11sensor_data14FilteredPointsERKNSt3__16vectorIN5boost9container12small_vectorINS1_20Jas"
                     "perPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEEddNS_3esn11OptionalRefINS3_ImNS9_ImEEEEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11sensor_data14FilteredPointsERKNSt3__16vectorIN5boost9container12small_vecto"
                                "rINS1_20JasperPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEEddNS_3esn11OptionalRefINS3_Im"
                                "NS9_ImEEEEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11sensor_data14FilteredPointsERKNSt3__16vectorIN5boost9container12small_vectorINS1_20JasperPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEEddNS_3esn11OptionalRefINS3_ImNS9_ImEEEEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11sensor_data14FilteredPointsERKNSt3__16vectorIN5boost9container12small_vectorINS1_20JasperPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEEddNS_3esn11OptionalRefINS3_ImNS9_ImEEEEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22400A4A8()
{
  return &unk_24EC65F60;
}

void sub_22400A4B8()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22400A4CC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC65F80;
  result[1] = v3;
  return result;
}

uint64_t sub_22400A500(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC65F80;
  a2[1] = v2;
  return result;
}

BOOL sub_22400A51C(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) > *(double *)(a1 + 8);
}

uint64_t sub_22400A530(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11sensor_data14FilteredPointsERKNSt3__16vectorIN5boost9container12small_vectorINS1_20Jas"
                     "perPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEEddNS_3esn11OptionalRefINS3_ImNS9_ImEEEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11sensor_data14FilteredPointsERKNSt3__16vectorIN5boost9container12small_vecto"
                                "rINS1_20JasperPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEEddNS_3esn11OptionalRefINS3_Im"
                                "NS9_ImEEEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11sensor_data14FilteredPointsERKNSt3__16vectorIN5boost9container12small_vectorINS1_20JasperPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEEddNS_3esn11OptionalRefINS3_ImNS9_ImEEEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11sensor_data14FilteredPointsERKNSt3__16vectorIN5boost9container12small_vectorINS1_20JasperPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEEddNS_3esn11OptionalRefINS3_ImNS9_ImEEEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22400A59C()
{
  return &unk_24EC65FE0;
}

std::mutex **sub_22400A5A8(std::mutex **a1)
{
  std::mutex *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::mutex::~mutex(v2);
    MEMORY[0x227684CE8]();
  }
  return a1;
}

void sub_22400A5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, char a6, uint64_t a7, char a8)
{
  char *v13;
  char *v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _QWORD *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  std::mutex **v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::mutex *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  _QWORD *v58;
  unsigned __int8 v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  _OWORD *v77;
  int v78;
  _OWORD *v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  __int128 v82;
  std::__shared_weak_count *v83;
  __int128 v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  _OWORD *v97;
  uint64_t v98;
  _OWORD *v99;
  void **v100;
  void **v101;
  __int128 v102;
  size_t v103;
  void **v104;
  char v105;
  __int128 v106;
  void *v107;
  size_t v108;
  void **v109;
  char v110;
  __int128 v111;
  void *v112;
  size_t v113;
  void **v114;
  char v115;
  __int128 v116;
  void *v117;
  size_t v118;
  void **v119;
  char v120;
  __int128 v121;
  void *v122;
  size_t v123;
  void **v124;
  char v125;
  __int128 v126;
  void *v127;
  size_t v128;
  __int128 v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  std::chrono::steady_clock::time_point v133;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v134;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v135;
  std::chrono::steady_clock::time_point v136;
  std::chrono::system_clock::time_point v137;
  _BYTE *v138;
  int v139;
  uint64_t v140;
  char v141;
  void *v142;
  char v143;
  __int128 v144;
  std::__shared_weak_count *v145;
  void *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  std::mutex *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  void *v173[2];
  char v174;
  char v175;
  void *v176;
  char v177;
  void *v178;
  char v179;
  char v180;
  char v181;
  void *v182[2];
  char v183;
  char v184;
  void *v185;
  char v186;
  void *v187;
  char v188;
  char v189;
  char v190;
  void *v191[2];
  char v192;
  char v193;
  void *v194;
  char v195;
  void *v196;
  char v197;
  char v198;
  char v199;
  __int128 v200;
  _QWORD v201[2];
  _BYTE __p[32];
  __int128 v203;
  __int128 v204;
  __int128 v205;
  void *v206[3];
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  __int128 v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  char v216;
  __int128 v217;
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  std::unique_lock<std::mutex> __lk;
  void *v223[2];
  char v224;
  unsigned __int8 v225;
  __int128 v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  char v231;
  char v232;
  uint64_t v233;

  v233 = *MEMORY[0x24BDAC8D0];
  v13 = (char *)operator new(0x4B8uLL);
  *(_OWORD *)(v13 + 8) = 0u;
  *(_QWORD *)v13 = &off_24EC66498;
  v14 = v13 + 64;
  bzero(v13 + 64, 0x468uLL);
  *((_QWORD *)v13 + 3) = &off_24EC66000;
  v15 = v13 + 24;
  *((_QWORD *)v13 + 4) = &unk_24EC66068;
  *((_QWORD *)v13 + 5) = &unk_24EC660A0;
  v13[104] = 0;
  v13[144] = 0;
  v13[176] = 0;
  v13[472] = 0;
  v13[712] = 0;
  v13[752] = 0;
  v13[64] = 0;
  *((_QWORD *)v13 + 101) = 850045863;
  *((_OWORD *)v13 + 51) = 0u;
  *((_OWORD *)v13 + 52) = 0u;
  *((_OWORD *)v13 + 53) = 0u;
  *((_QWORD *)v13 + 108) = 0;
  *((_QWORD *)v13 + 109) = 1018212795;
  *((_OWORD *)v13 + 55) = 0u;
  *((_OWORD *)v13 + 56) = 0u;
  *((_QWORD *)v13 + 114) = 0;
  v13[1128] = 0;
  v13[1184] = 0;
  *(_OWORD *)(v13 + 1192) = 0u;
  *((_QWORD *)v13 + 145) = 0;
  *(_OWORD *)(v13 + 1144) = 0u;
  v13[1168] = 0;
  v16 = (unint64_t *)(v13 + 16);
  *(_QWORD *)&v200 = v13 + 24;
  *((_QWORD *)&v200 + 1) = v13;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  *((_QWORD *)v13 + 6) = v15;
  *((_QWORD *)v13 + 7) = v13;
  v19 = a5;
  v18 = a2;
  if (*(_BYTE *)(a3 + 32))
  {
    v20 = *(_QWORD *)(a3 + 24);
    if (v20)
    {
      if (v20 == a3)
      {
        *((_QWORD *)v13 + 11) = v14;
        (*(void (**)(uint64_t, char *))(*(_QWORD *)a3 + 24))(a3, v14);
        goto LABEL_9;
      }
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    }
    *((_QWORD *)v13 + 11) = v20;
LABEL_9:
    v13[96] = 1;
    v15 = (char *)v200;
  }
  v21 = v15 + 80;
  if (v15[112] == *(_BYTE *)(a4 + 32))
  {
    if (!v15[112])
      goto LABEL_43;
    v22 = *(_QWORD *)(a4 + 24);
    if (v22)
    {
      if (v22 == a4)
      {
        *(_QWORD *)&__p[24] = __p;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a4 + 24))(a4, __p);
LABEL_28:
        if (__p != v21)
        {
          v26 = *(_QWORD *)&__p[24];
          v27 = (_BYTE *)*((_QWORD *)v15 + 13);
          if (*(_BYTE **)&__p[24] == __p)
          {
            if (v27 == v21)
            {
              (*(void (**)(_BYTE *, std::unique_lock<std::mutex> *))(*(_QWORD *)__p + 24))(__p, &__lk);
              (*(void (**)(_QWORD))(**(_QWORD **)&__p[24] + 32))(*(_QWORD *)&__p[24]);
              *(_QWORD *)&__p[24] = 0;
              (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)v15 + 13) + 24))(*((_QWORD *)v15 + 13), __p);
              (*(void (**)(_QWORD))(**((_QWORD **)v15 + 13) + 32))(*((_QWORD *)v15 + 13));
              *((_QWORD *)v15 + 13) = 0;
              *(_QWORD *)&__p[24] = __p;
              (*(void (**)(std::unique_lock<std::mutex> *, char *))&__lk.__m_->__m_.__opaque[16])(&__lk, v15 + 80);
              (*(void (**)(std::unique_lock<std::mutex> *))&__lk.__m_->__m_.__opaque[24])(&__lk);
              *((_QWORD *)v15 + 13) = v21;
              v28 = *(_QWORD **)&__p[24];
              if (*(_BYTE **)&__p[24] == __p)
                goto LABEL_32;
            }
            else
            {
              (*(void (**)(_BYTE *, char *))(*(_QWORD *)__p + 24))(__p, v15 + 80);
              (*(void (**)(_QWORD))(**(_QWORD **)&__p[24] + 32))(*(_QWORD *)&__p[24]);
              *(_QWORD *)&__p[24] = *((_QWORD *)v15 + 13);
              v30 = *(_BYTE **)&__p[24];
              *((_QWORD *)v15 + 13) = v21;
              v28 = v30;
              if (v30 == __p)
                goto LABEL_32;
            }
            goto LABEL_38;
          }
          if (v27 != v21)
          {
            *(_QWORD *)&__p[24] = *((_QWORD *)v15 + 13);
            *((_QWORD *)v15 + 13) = v26;
            v28 = v27;
            if (v27 == __p)
            {
LABEL_32:
              v29 = 4;
              v28 = __p;
LABEL_40:
              (*(void (**)(void))(*v28 + 8 * v29))();
              goto LABEL_43;
            }
LABEL_38:
            if (!v28)
              goto LABEL_43;
            v29 = 5;
            goto LABEL_40;
          }
          (*(void (**)(char *, _BYTE *))(*(_QWORD *)v21 + 24))(v15 + 80, __p);
          (*(void (**)(_QWORD))(**((_QWORD **)v15 + 13) + 32))(*((_QWORD *)v15 + 13));
          *((_QWORD *)v15 + 13) = *(_QWORD *)&__p[24];
          *(_QWORD *)&__p[24] = __p;
        }
        v28 = *(_QWORD **)&__p[24];
        if (*(_BYTE **)&__p[24] == __p)
          goto LABEL_32;
        goto LABEL_38;
      }
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    }
    *(_QWORD *)&__p[24] = v22;
    goto LABEL_28;
  }
  if (v15[112])
  {
    v23 = (_BYTE *)*((_QWORD *)v15 + 13);
    if (v23 == v21)
    {
      v24 = 4;
    }
    else
    {
      if (!v23)
      {
LABEL_26:
        v15[112] = 0;
        goto LABEL_43;
      }
      v24 = 5;
      v21 = (_BYTE *)*((_QWORD *)v15 + 13);
    }
    (*(void (**)(_BYTE *))(*(_QWORD *)v21 + 8 * v24))(v21);
    goto LABEL_26;
  }
  v25 = *(_QWORD *)(a4 + 24);
  if (v25)
  {
    if (v25 == a4)
    {
      *((_QWORD *)v15 + 13) = v21;
      (*(void (**)(_QWORD, char *))(**(_QWORD **)(a4 + 24) + 24))(*(_QWORD *)(a4 + 24), v15 + 80);
      goto LABEL_42;
    }
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
  }
  *((_QWORD *)v15 + 13) = v25;
LABEL_42:
  v15[112] = 1;
LABEL_43:
  *(_BYTE *)(v200 + 1112) = 0;
  v31 = operator new();
  *(_OWORD *)(v31 + 16) = 0u;
  *(_OWORD *)(v31 + 32) = 0u;
  v32 = (std::mutex **)(v31 + 32);
  *(_QWORD *)(v31 + 48) = 0;
  *(_OWORD *)v31 = 0u;
  if (a8)
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a7 + 96))(__p, a7);
    v33 = *(_QWORD *)__p;
    v34 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v35 = (unint64_t *)(*(_QWORD *)&__p[8] + 16);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = *(std::__shared_weak_count **)(v31 + 8);
    *(_QWORD *)v31 = v33;
    *(_QWORD *)(v31 + 8) = v34;
    if (v37)
    {
      std::__shared_weak_count::__release_weak(v37);
      v34 = *(std::__shared_weak_count **)&__p[8];
    }
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a7 + 80))(__p, a7);
    v40 = *(_OWORD *)__p;
    *(_QWORD *)__p = 0;
    *(_QWORD *)&__p[8] = 0;
    v41 = *(std::__shared_weak_count **)(v31 + 48);
    *(_OWORD *)(v31 + 40) = v40;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v45 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      goto LABEL_81;
    }
  }
  else
  {
    v47 = operator new(0x28uLL);
    v47[1] = 0;
    v47[2] = 0;
    *v47 = &off_24EC66448;
    *(_QWORD *)&__lk.__owns_ = 0;
    v223[0] = 0;
    __lk.__m_ = 0;
    __p[0] = 0;
    __p[24] = 0;
    sub_2241277A4(v47 + 3, 1, (uint64_t)&__lk, (uint64_t *)__p);
    if (__p[24] && (__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (__lk.__m_)
    {
      *(_QWORD *)&__lk.__owns_ = __lk.__m_;
      operator delete(__lk.__m_);
    }
    v48 = *(std::__shared_weak_count **)(v31 + 24);
    *(_QWORD *)(v31 + 16) = v47 + 3;
    *(_QWORD *)(v31 + 24) = v47;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = operator new();
    *(_QWORD *)v51 = 850045863;
    *(_OWORD *)(v51 + 8) = 0u;
    *(_OWORD *)(v51 + 24) = 0u;
    *(_OWORD *)(v51 + 40) = 0u;
    *(_QWORD *)(v51 + 56) = 0;
    v52 = *v32;
    *v32 = (std::mutex *)v51;
    if (v52)
    {
      std::mutex::~mutex(v52);
      MEMORY[0x227684CE8]();
    }
    v54 = *(_QWORD *)(v31 + 16);
    v53 = *(_QWORD *)(v31 + 24);
    if (v53)
    {
      v55 = (unint64_t *)(v53 + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    v44 = *(std::__shared_weak_count **)(v31 + 48);
    *(_QWORD *)(v31 + 40) = v54;
    *(_QWORD *)(v31 + 48) = v53;
    if (v44)
    {
      v57 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v57);
      while (__stlxr(v46 - 1, v57));
LABEL_81:
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
  }
  v58 = *(_QWORD **)(v200 + 1120);
  *(_QWORD *)(v200 + 1120) = v31;
  if (v58)
    sub_2240116BC(v58);
  v59 = atomic_load((unsigned __int8 *)&qword_2540CEB28);
  if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEB28))
  {
    sub_2232D3688();
    __cxa_atexit((void (*)(void *))sub_2232D3808, &qword_2540CEB30, &dword_22314D000);
    __cxa_guard_release(&qword_2540CEB28);
    v19 = a5;
    v18 = a2;
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)qword_2540CEB30;
  sub_2232D69F0((unsigned int *)__p, (uint64_t *)&__lk);
  v60 = ((unint64_t)__p[12] << 32) | ((unint64_t)__p[13] << 40) | *(_DWORD *)&__p[8] & 0xFFFFFF00 | ((unint64_t)*(unsigned int *)&__p[12] << 32) & 0xFF00000000000000 | ((unint64_t)__p[14] << 48) | __p[8] & 0x3F | 0x80;
  v61 = v200;
  *(_QWORD *)(v200 + 1128) = (*(unsigned int *)__p | ((unint64_t)__p[4] << 32) | ((unint64_t)__p[5] << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)__p[7] << 56) | ((unint64_t)(HIWORD(*(_DWORD *)&__p[4]) & 0xF | 0x40u) << 48);
  *(_QWORD *)(v61 + 1136) = v60;
  if (*(_BYTE *)(v18 + 40))
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&v200;
    *(_QWORD *)&__lk.__owns_ = v18;
    v201[0] = &off_24EC661F0;
    v201[1] = &__lk;
    sub_22456BD10((uint64_t)v201, (uint64_t)__p);
    if (!BYTE8(v208))
      goto LABEL_276;
    v61 = v200;
  }
  v62 = v18 + 72;
  v63 = (_BYTE *)(v61 + 688);
  if (*(unsigned __int8 *)(v61 + 720) != *(unsigned __int8 *)(v18 + 104))
  {
    if (*(_BYTE *)(v61 + 720))
    {
      v66 = *(_BYTE **)(v61 + 712);
      if (v66 == v63)
      {
        v67 = 4;
      }
      else
      {
        if (!v66)
          goto LABEL_106;
        v67 = 5;
        v63 = *(_BYTE **)(v61 + 712);
      }
      (*(void (**)(_BYTE *))(*(_QWORD *)v63 + 8 * v67))(v63);
LABEL_106:
      *(_BYTE *)(v61 + 720) = 0;
      if (!a6)
        goto LABEL_107;
      goto LABEL_130;
    }
    v68 = *(_QWORD *)(v18 + 96);
    if (v68)
    {
      if (v68 == v62)
      {
        *(_QWORD *)(v61 + 712) = v63;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v18 + 96) + 24))(*(_QWORD *)(v18 + 96), v61 + 688);
        goto LABEL_128;
      }
      v69 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v68 + 16))(*(_QWORD *)(v18 + 96));
    }
    else
    {
      v69 = 0;
    }
    *(_QWORD *)(v61 + 712) = v69;
LABEL_128:
    *(_BYTE *)(v61 + 720) = 1;
LABEL_129:
    if (!a6)
      goto LABEL_107;
    goto LABEL_130;
  }
  if (!*(_BYTE *)(v61 + 720))
    goto LABEL_129;
  v64 = *(_QWORD *)(v18 + 96);
  if (!v64)
  {
    v65 = 0;
    goto LABEL_103;
  }
  if (v64 != v62)
  {
    v65 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v64 + 16))(*(_QWORD *)(v18 + 96));
LABEL_103:
    *(_QWORD *)&__p[24] = v65;
    goto LABEL_111;
  }
  *(_QWORD *)&__p[24] = __p;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v62 + 24))(v62, __p);
LABEL_111:
  if (__p == v63)
    goto LABEL_123;
  v72 = *(_QWORD *)&__p[24];
  v73 = *(_BYTE **)(v61 + 712);
  if (*(_BYTE **)&__p[24] == __p)
  {
    if (v73 == v63)
    {
      (*(void (**)(_BYTE *, std::unique_lock<std::mutex> *))(*(_QWORD *)__p + 24))(__p, &__lk);
      (*(void (**)(_QWORD))(**(_QWORD **)&__p[24] + 32))(*(_QWORD *)&__p[24]);
      *(_QWORD *)&__p[24] = 0;
      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v61 + 712) + 24))(*(_QWORD *)(v61 + 712), __p);
      (*(void (**)(_QWORD))(**(_QWORD **)(v61 + 712) + 32))(*(_QWORD *)(v61 + 712));
      *(_QWORD *)(v61 + 712) = 0;
      *(_QWORD *)&__p[24] = __p;
      (*(void (**)(std::unique_lock<std::mutex> *, uint64_t))&__lk.__m_->__m_.__opaque[16])(&__lk, v61 + 688);
      (*(void (**)(std::unique_lock<std::mutex> *))&__lk.__m_->__m_.__opaque[24])(&__lk);
      *(_QWORD *)(v61 + 712) = v63;
      v74 = *(_BYTE **)&__p[24];
      if (*(_BYTE **)&__p[24] != __p)
        goto LABEL_124;
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)__p + 24))(__p, v61 + 688);
      (*(void (**)(_QWORD))(**(_QWORD **)&__p[24] + 32))(*(_QWORD *)&__p[24]);
      *(_QWORD *)&__p[24] = *(_QWORD *)(v61 + 712);
      v75 = *(_BYTE **)&__p[24];
      *(_QWORD *)(v61 + 712) = v63;
      v74 = v75;
      if (v75 != __p)
        goto LABEL_124;
    }
LABEL_115:
    (*(void (**)(void))(*(_QWORD *)__p + 32))();
    if (!a6)
      goto LABEL_107;
    goto LABEL_130;
  }
  if (v73 == v63)
  {
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v63 + 24))(v61 + 688, __p);
    (*(void (**)(_QWORD))(**(_QWORD **)(v61 + 712) + 32))(*(_QWORD *)(v61 + 712));
    *(_QWORD *)(v61 + 712) = *(_QWORD *)&__p[24];
    *(_QWORD *)&__p[24] = __p;
LABEL_123:
    v74 = *(_BYTE **)&__p[24];
    if (*(_BYTE **)&__p[24] != __p)
      goto LABEL_124;
    goto LABEL_115;
  }
  *(_QWORD *)&__p[24] = *(_QWORD *)(v61 + 712);
  *(_QWORD *)(v61 + 712) = v72;
  v74 = v73;
  if (v73 == __p)
    goto LABEL_115;
LABEL_124:
  if (!v74)
    goto LABEL_129;
  (*(void (**)(_BYTE *))(*(_QWORD *)v74 + 40))(v74);
  if (!a6)
  {
LABEL_107:
    v70 = *(unsigned __int8 *)(v18 + 48);
    v71 = v200;
    *(_BYTE *)(v200 + 896) = v70;
    if (v70 < 3)
    {
      if (!*(_BYTE *)(v18 + 40))
        goto LABEL_329;
      goto LABEL_259;
    }
LABEL_249:
    sub_223208674(v191, "Invalid sync type value");
    v199 = 1;
    sub_22454BC28((uint64_t)v191, (uint64_t)__p);
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    if ((_BYTE)v208)
    {
      *(_BYTE *)(a1 + 40) = 0;
      v131 = BYTE8(v203);
      if (BYTE8(v203))
      {
        *(_OWORD *)(a1 + 16) = *(_OWORD *)&__p[16];
        *(_QWORD *)(a1 + 32) = v203;
        *(_QWORD *)&__p[24] = 0;
        *(_QWORD *)&v203 = 0;
        *(_QWORD *)&__p[16] = 0;
        *(_BYTE *)(a1 + 40) = 1;
      }
      *(_BYTE *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 104) = 0;
      if ((_BYTE)v207)
      {
        v132 = *((_QWORD *)&v205 + 1);
        *(_QWORD *)(a1 + 64) = v205;
        *(_OWORD *)(a1 + 48) = v204;
        v204 = 0uLL;
        *(_QWORD *)(a1 + 72) = v132;
        *(_OWORD *)(a1 + 80) = *(_OWORD *)v206;
        *(void **)(a1 + 96) = v206[2];
        *(_QWORD *)&v205 = 0;
        memset(v206, 0, sizeof(v206));
        *(_BYTE *)(a1 + 104) = 1;
      }
      *(_BYTE *)(a1 + 112) = 1;
      *(_BYTE *)(a1 + 120) = 0;
      if (v131 && SBYTE7(v203) < 0)
        operator delete(*(void **)&__p[16]);
      if (!v199)
        goto LABEL_399;
    }
    else
    {
      *(_BYTE *)(a1 + 120) = 0;
      if (!v199)
        goto LABEL_399;
    }
    if (v198)
    {
      if (v197 < 0)
        operator delete(v196);
      if (v195 < 0)
        operator delete(v194);
    }
    if (v193 && v192 < 0)
    {
      operator delete(v191[0]);
      v145 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
      if (!*((_QWORD *)&v200 + 1))
        return;
      goto LABEL_400;
    }
    goto LABEL_399;
  }
LABEL_130:
  sub_22413E550(v19, v200, (uint64_t)__p);
  v76 = v200;
  v77 = (_OWORD *)(v200 + 392);
  v78 = *(unsigned __int8 *)(v200 + 440);
  *(_BYTE *)(v200 + 152) = __p[0];
  v79 = (_OWORD *)(v76 + 160);
  if (v78)
  {
    sub_224011B08((uint64_t)v79, (uint64_t)&__p[8]);
    v80 = v219;
    v219 = 0uLL;
    v81 = *(std::__shared_weak_count **)(v76 + 400);
    *v77 = v80;
    if (v81)
      std::__shared_weak_count::__release_weak(v81);
    v82 = v220;
    v220 = 0uLL;
    v83 = *(std::__shared_weak_count **)(v76 + 416);
    v77[1] = v82;
    if (v83)
      std::__shared_weak_count::__release_weak(v83);
    v84 = v221;
    v221 = 0uLL;
    v85 = *(std::__shared_weak_count **)(v76 + 432);
    v77[2] = v84;
    if (v85)
    {
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
  }
  else
  {
    *v79 = *(_OWORD *)&__p[8];
    v88 = *(_DWORD *)&__p[24];
    *(_BYTE *)(v76 + 184) = 0;
    *(_DWORD *)(v76 + 176) = v88;
    *(_BYTE *)(v76 + 208) = 0;
    if (BYTE8(v204))
    {
      *(_OWORD *)(v76 + 184) = v203;
      *(_QWORD *)(v76 + 200) = v204;
      *(_QWORD *)&v204 = 0;
      v203 = 0uLL;
      *(_BYTE *)(v76 + 208) = 1;
    }
    *(_BYTE *)(v76 + 216) = 0;
    *(_BYTE *)(v76 + 360) = 0;
    if (v216)
    {
      v89 = v207;
      *(void **)(v76 + 232) = v206[0];
      *(_OWORD *)(v76 + 216) = v205;
      v205 = 0uLL;
      v90 = *(_OWORD *)&v206[1];
      v206[0] = 0;
      v206[1] = 0;
      *(_QWORD *)(v76 + 256) = v89;
      v91 = v211;
      *(_QWORD *)(v76 + 280) = v209;
      *(_QWORD *)(v76 + 304) = v91;
      v92 = v215;
      *(_QWORD *)(v76 + 328) = v213;
      *(_OWORD *)(v76 + 240) = v90;
      v206[2] = 0;
      v207 = 0;
      *(_OWORD *)(v76 + 264) = v208;
      v208 = 0uLL;
      *(_OWORD *)(v76 + 288) = v210;
      v209 = 0;
      v210 = 0uLL;
      v211 = 0;
      *(_OWORD *)(v76 + 312) = v212;
      v212 = 0uLL;
      v93 = v214;
      *(_QWORD *)(v76 + 352) = v92;
      *(_OWORD *)(v76 + 336) = v93;
      v213 = 0;
      v214 = 0uLL;
      v215 = 0;
      *(_BYTE *)(v76 + 360) = 1;
    }
    *(_OWORD *)(v76 + 368) = v217;
    *(_QWORD *)(v76 + 384) = v218;
    *v77 = v219;
    v219 = 0uLL;
    v77[1] = v220;
    v220 = 0uLL;
    v77[2] = v221;
    v221 = 0uLL;
    *(_BYTE *)(v76 + 440) = 1;
  }
  v94 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
  if (*((_QWORD *)&v221 + 1))
  {
    v95 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if (*((_QWORD *)&v220 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v220 + 1));
  if (*((_QWORD *)&v219 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v219 + 1));
  if (!v216)
    goto LABEL_161;
  if (SHIBYTE(v215) < 0)
  {
    operator delete((void *)v214);
    if ((SHIBYTE(v213) & 0x80000000) == 0)
    {
LABEL_157:
      if ((SHIBYTE(v211) & 0x80000000) == 0)
        goto LABEL_158;
      goto LABEL_176;
    }
  }
  else if ((SHIBYTE(v213) & 0x80000000) == 0)
  {
    goto LABEL_157;
  }
  operator delete((void *)v212);
  if ((SHIBYTE(v211) & 0x80000000) == 0)
  {
LABEL_158:
    if ((SHIBYTE(v209) & 0x80000000) == 0)
      goto LABEL_159;
LABEL_177:
    operator delete((void *)v208);
    if ((SHIBYTE(v207) & 0x80000000) == 0)
    {
LABEL_160:
      if ((SHIBYTE(v206[0]) & 0x80000000) == 0)
        goto LABEL_161;
LABEL_179:
      operator delete((void *)v205);
      if (!BYTE8(v204))
        goto LABEL_164;
      goto LABEL_162;
    }
    goto LABEL_178;
  }
LABEL_176:
  operator delete((void *)v210);
  if (SHIBYTE(v209) < 0)
    goto LABEL_177;
LABEL_159:
  if ((SHIBYTE(v207) & 0x80000000) == 0)
    goto LABEL_160;
LABEL_178:
  operator delete(v206[1]);
  if (SHIBYTE(v206[0]) < 0)
    goto LABEL_179;
LABEL_161:
  if (!BYTE8(v204))
    goto LABEL_164;
LABEL_162:
  if (SBYTE7(v204) < 0)
    operator delete((void *)v203);
LABEL_164:
  v97 = v19 + 5;
  v98 = v200;
  v99 = (_OWORD *)(v200 + 448);
  if (*(_BYTE *)(v200 + 680))
  {
    *v99 = *v97;
    *(_DWORD *)(v98 + 464) = *((_DWORD *)v19 + 14);
    sub_22361F234(v98 + 472, v19 + 8);
    v100 = (void **)(v98 + 504);
    v101 = (void **)(v19 + 12);
    if (*(unsigned __int8 *)(v98 + 648) == *((unsigned __int8 *)v19 + 240))
    {
      if (*(_BYTE *)(v98 + 648) && v100 != v101)
      {
        if (*(char *)(v98 + 527) < 0)
        {
          if (*((char *)v19 + 119) >= 0)
          {
            v103 = *((unsigned __int8 *)v19 + 119);
          }
          else
          {
            v101 = (void **)v19[12];
            v103 = v19[13];
          }
          sub_22319C4B8(v100, v101, v103);
        }
        else if ((*((_BYTE *)v19 + 119) & 0x80) != 0)
        {
          sub_22319C3F4(v100, (void *)v19[12], v19[13]);
        }
        else
        {
          v102 = *(_OWORD *)v101;
          *(_QWORD *)(v98 + 520) = v19[14];
          *(_OWORD *)v100 = v102;
        }
        v104 = (void **)(v98 + 528);
        v105 = *((_BYTE *)v19 + 143);
        if (*(char *)(v98 + 551) < 0)
        {
          if (v105 >= 0)
            v107 = v19 + 15;
          else
            v107 = (void *)v19[15];
          if (v105 >= 0)
            v108 = *((unsigned __int8 *)v19 + 143);
          else
            v108 = v19[16];
          sub_22319C4B8(v104, v107, v108);
        }
        else if ((*((_BYTE *)v19 + 143) & 0x80) != 0)
        {
          sub_22319C3F4(v104, (void *)v19[15], v19[16]);
        }
        else
        {
          v106 = *(_OWORD *)(v19 + 15);
          *(_QWORD *)(v98 + 544) = v19[17];
          *(_OWORD *)v104 = v106;
        }
        v109 = (void **)(v98 + 552);
        v110 = *((_BYTE *)v19 + 167);
        if (*(char *)(v98 + 575) < 0)
        {
          if (v110 >= 0)
            v112 = v19 + 18;
          else
            v112 = (void *)v19[18];
          if (v110 >= 0)
            v113 = *((unsigned __int8 *)v19 + 167);
          else
            v113 = v19[19];
          sub_22319C4B8(v109, v112, v113);
        }
        else if ((*((_BYTE *)v19 + 167) & 0x80) != 0)
        {
          sub_22319C3F4(v109, (void *)v19[18], v19[19]);
        }
        else
        {
          v111 = *((_OWORD *)v19 + 9);
          *(_QWORD *)(v98 + 568) = v19[20];
          *(_OWORD *)v109 = v111;
        }
        v114 = (void **)(v98 + 576);
        v115 = *((_BYTE *)v19 + 191);
        if (*(char *)(v98 + 599) < 0)
        {
          if (v115 >= 0)
            v117 = v19 + 21;
          else
            v117 = (void *)v19[21];
          if (v115 >= 0)
            v118 = *((unsigned __int8 *)v19 + 191);
          else
            v118 = v19[22];
          sub_22319C4B8(v114, v117, v118);
        }
        else if ((*((_BYTE *)v19 + 191) & 0x80) != 0)
        {
          sub_22319C3F4(v114, (void *)v19[21], v19[22]);
        }
        else
        {
          v116 = *(_OWORD *)(v19 + 21);
          *(_QWORD *)(v98 + 592) = v19[23];
          *(_OWORD *)v114 = v116;
        }
        v119 = (void **)(v98 + 600);
        v120 = *((_BYTE *)v19 + 215);
        if (*(char *)(v98 + 623) < 0)
        {
          if (v120 >= 0)
            v122 = v19 + 24;
          else
            v122 = (void *)v19[24];
          if (v120 >= 0)
            v123 = *((unsigned __int8 *)v19 + 215);
          else
            v123 = v19[25];
          sub_22319C4B8(v119, v122, v123);
        }
        else if ((*((_BYTE *)v19 + 215) & 0x80) != 0)
        {
          sub_22319C3F4(v119, (void *)v19[24], v19[25]);
        }
        else
        {
          v121 = *((_OWORD *)v19 + 12);
          *(_QWORD *)(v98 + 616) = v19[26];
          *(_OWORD *)v119 = v121;
        }
        v124 = (void **)(v98 + 624);
        v125 = *((_BYTE *)v19 + 239);
        if (*(char *)(v98 + 647) < 0)
        {
          if (v125 >= 0)
            v127 = v19 + 27;
          else
            v127 = (void *)v19[27];
          if (v125 >= 0)
            v128 = *((unsigned __int8 *)v19 + 239);
          else
            v128 = v19[28];
          sub_22319C4B8(v124, v127, v128);
        }
        else if ((*((_BYTE *)v19 + 239) & 0x80) != 0)
        {
          sub_22319C3F4(v124, (void *)v19[27], v19[28]);
        }
        else
        {
          v126 = *(_OWORD *)(v19 + 27);
          *(_QWORD *)(v98 + 640) = v19[29];
          *(_OWORD *)v124 = v126;
        }
      }
    }
    else if (*(_BYTE *)(v98 + 648))
    {
      sub_224011E0C((uint64_t)v100);
    }
    else
    {
      sub_224011F80((char *)v100, (__int128 *)v101);
      *(_BYTE *)(v98 + 648) = 1;
    }
    v129 = *(_OWORD *)(v19 + 31);
    *(_QWORD *)(v98 + 672) = v19[33];
    *(_OWORD *)(v98 + 656) = v129;
  }
  else
  {
    sub_2240121A8((uint64_t)v99, (uint64_t)v97);
    *(_BYTE *)(v98 + 680) = 1;
  }
  sub_22413DF30(v200 + 152, 1, (uint64_t)__p);
  if (!BYTE8(v208))
  {
LABEL_276:
    __lk = *(std::unique_lock<std::mutex> *)__p;
    v138 = sub_22319FFBC(v223, (__int128 *)&__p[16]);
    *(std::unique_lock<std::mutex> *)a1 = __lk;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    if (v232)
    {
      *(_BYTE *)(a1 + 40) = 0;
      v139 = v225;
      if (v225)
      {
        *(_OWORD *)(a1 + 16) = *(_OWORD *)v138;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)v138 + 2);
        *((_QWORD *)v138 + 1) = 0;
        *((_QWORD *)v138 + 2) = 0;
        *(_QWORD *)v138 = 0;
        *(_BYTE *)(a1 + 40) = 1;
      }
      *(_BYTE *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 104) = 0;
      if (v231)
      {
        v140 = v228;
        *(_QWORD *)(a1 + 64) = v227;
        *(_OWORD *)(a1 + 48) = v226;
        v226 = 0uLL;
        *(_QWORD *)(a1 + 72) = v140;
        *(_OWORD *)(a1 + 80) = v229;
        *(_QWORD *)(a1 + 96) = v230;
        v227 = 0;
        v229 = 0uLL;
        v230 = 0;
        *(_BYTE *)(a1 + 104) = 1;
      }
      *(_BYTE *)(a1 + 112) = 1;
      *(_BYTE *)(a1 + 120) = 0;
      if (v139 && v224 < 0)
        operator delete(v223[0]);
      if (BYTE8(v208))
        goto LABEL_399;
    }
    else
    {
      *(_BYTE *)(a1 + 120) = 0;
      if (BYTE8(v208))
        goto LABEL_399;
    }
    if ((_BYTE)v208)
    {
      if ((_BYTE)v207)
      {
        if (SHIBYTE(v206[2]) < 0)
          operator delete(v206[0]);
        if (SBYTE7(v205) < 0)
          operator delete((void *)v204);
      }
      if (BYTE8(v203) && SBYTE7(v203) < 0)
      {
        operator delete(*(void **)&__p[16]);
        v145 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
        if (!*((_QWORD *)&v200 + 1))
          return;
        goto LABEL_400;
      }
    }
    goto LABEL_399;
  }
  v130 = *(unsigned __int8 *)(v18 + 48);
  v71 = v200;
  *(_BYTE *)(v200 + 896) = v130;
  if (v130 > 2)
    goto LABEL_249;
LABEL_259:
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v71 + 784);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v71 + 784));
  v133.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 2000000000;
  while (!*(_BYTE *)(v71 + 776))
  {
    if (v133.__d_.__rep_ <= std::chrono::steady_clock::now().__d_.__rep_)
    {
LABEL_286:
      if (!*(_BYTE *)(v71 + 776))
      {
        v143 = 0;
        goto LABEL_326;
      }
      break;
    }
    v136.__d_.__rep_ = v133.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v136.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v137.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!v137.__d_.__rep_)
      {
        v134 = 0;
        goto LABEL_261;
      }
      if (v137.__d_.__rep_ < 1)
      {
        if ((unint64_t)v137.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          v134 = 0x8000000000000000;
          goto LABEL_261;
        }
      }
      else if ((unint64_t)v137.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        v134 = 0x7FFFFFFFFFFFFFFFLL;
        if ((v136.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL) != 0x7FFFFFFFFFFFFFFFLL)
        {
LABEL_275:
          v135.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_262;
        }
LABEL_261:
        v135.__d_.__rep_ = v134 + v136.__d_.__rep_;
LABEL_262:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(v71 + 848), &__lk, v135);
        std::chrono::steady_clock::now();
        goto LABEL_263;
      }
      v134 = 1000 * v137.__d_.__rep_;
      if (1000 * v137.__d_.__rep_ > (v136.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
        goto LABEL_275;
      goto LABEL_261;
    }
LABEL_263:
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v133.__d_.__rep_)
      goto LABEL_286;
  }
  if (*(_BYTE *)(v18 + 48) != 2)
  {
LABEL_325:
    v143 = 1;
    goto LABEL_326;
  }
  if (!*(_BYTE *)(v71 + 768))
  {
    if (*(_BYTE *)(v71 + 1104))
    {
      std::condition_variable::~condition_variable((std::condition_variable *)(v71 + 1056));
      v146 = *(void **)(v71 + 1032);
      if (v146)
      {
        *(_QWORD *)(v71 + 1040) = v146;
        operator delete(v146);
      }
      std::mutex::~mutex((std::mutex *)(v71 + 968));
      *(_BYTE *)(v71 + 1104) = 0;
    }
    goto LABEL_325;
  }
  v141 = 2;
  if (*(_BYTE *)(v71 + 744) && !*(_QWORD *)(v71 + 736))
  {
    if (*(_BYTE *)(v71 + 760))
      v141 = 2;
    else
      v141 = 1;
  }
  if (*(_BYTE *)(v71 + 1104))
  {
    std::condition_variable::~condition_variable((std::condition_variable *)(v71 + 1056));
    v142 = *(void **)(v71 + 1032);
    if (v142)
    {
      *(_QWORD *)(v71 + 1040) = v142;
      operator delete(v142);
    }
    std::mutex::~mutex((std::mutex *)(v71 + 968));
  }
  *(_BYTE *)(v71 + 904) = v141;
  *(_BYTE *)(v71 + 912) = 0;
  *(_BYTE *)(v71 + 920) = 0;
  *(_BYTE *)(v71 + 928) = 0;
  *(_BYTE *)(v71 + 936) = 0;
  *(_BYTE *)(v71 + 944) = 0;
  *(_BYTE *)(v71 + 952) = 0;
  *(_OWORD *)(v71 + 960) = xmmword_224694780;
  *(_OWORD *)(v71 + 976) = 0u;
  *(_OWORD *)(v71 + 992) = 0u;
  *(_OWORD *)(v71 + 1008) = 0u;
  *(_OWORD *)(v71 + 1024) = 0u;
  *(_OWORD *)(v71 + 1040) = 0u;
  *(_QWORD *)(v71 + 1056) = 1018212795;
  *(_QWORD *)(v71 + 1096) = 0;
  *(_OWORD *)(v71 + 1064) = 0u;
  *(_OWORD *)(v71 + 1080) = 0u;
  v143 = 1;
  *(_BYTE *)(v71 + 1104) = 1;
  v144 = *(_OWORD *)(v71 + 744);
  *(_OWORD *)__p = *(_OWORD *)(v71 + 728);
  *(_OWORD *)&__p[16] = v144;
  *(_QWORD *)&v203 = *(_QWORD *)(v71 + 760);
  sub_224120980(v71 + 904, (__int128 *)__p);
LABEL_326:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  if ((v143 & 1) == 0)
  {
    v149 = v200;
    if (*(_BYTE *)(v200 + 1104))
    {
      std::condition_variable::~condition_variable((std::condition_variable *)(v200 + 1056));
      v150 = *(void **)(v149 + 1032);
      if (v150)
      {
        *(_QWORD *)(v149 + 1040) = v150;
        operator delete(v150);
      }
      std::mutex::~mutex((std::mutex *)(v149 + 968));
      *(_BYTE *)(v149 + 1104) = 0;
    }
    sub_223208674(v182, "Client received no configuration from server after connection. This might mean the server could be outdated. Make sure to update VisualLogger server to protocol version 1.3.0+ (or same or newer version as the client).");
    v190 = 1;
    sub_22400C190(0xCu, (__int128 *)v182, (uint64_t)__p);
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    if ((_BYTE)v208)
    {
      *(_BYTE *)(a1 + 40) = 0;
      v151 = BYTE8(v203);
      if (BYTE8(v203))
      {
        *(_OWORD *)(a1 + 16) = *(_OWORD *)&__p[16];
        *(_QWORD *)(a1 + 32) = v203;
        *(_QWORD *)&__p[24] = 0;
        *(_QWORD *)&v203 = 0;
        *(_QWORD *)&__p[16] = 0;
        *(_BYTE *)(a1 + 40) = 1;
      }
      *(_BYTE *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 104) = 0;
      if ((_BYTE)v207)
      {
        v152 = *((_QWORD *)&v205 + 1);
        *(_QWORD *)(a1 + 64) = v205;
        *(_OWORD *)(a1 + 48) = v204;
        v204 = 0uLL;
        *(_QWORD *)(a1 + 72) = v152;
        *(_OWORD *)(a1 + 80) = *(_OWORD *)v206;
        *(void **)(a1 + 96) = v206[2];
        *(_QWORD *)&v205 = 0;
        memset(v206, 0, sizeof(v206));
        *(_BYTE *)(a1 + 104) = 1;
      }
      *(_BYTE *)(a1 + 112) = 1;
      *(_BYTE *)(a1 + 120) = 0;
      if (v151 && SBYTE7(v203) < 0)
        operator delete(*(void **)&__p[16]);
      if (!v190)
        goto LABEL_399;
    }
    else
    {
      *(_BYTE *)(a1 + 120) = 0;
      if (!v190)
        goto LABEL_399;
    }
    if (v189)
    {
      if (v188 < 0)
        operator delete(v187);
      if (v186 < 0)
        operator delete(v185);
    }
    if (v184 && v183 < 0)
    {
      operator delete(v182[0]);
      v145 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
      if (!*((_QWORD *)&v200 + 1))
        return;
      goto LABEL_400;
    }
    goto LABEL_399;
  }
LABEL_329:
  if (!*(_BYTE *)(v18 + 50) || *(_BYTE *)(v18 + 48) == 2)
  {
    v153 = v200;
    if (*(_BYTE *)(v200 + 776) && !*(_BYTE *)(v18 + 50) && *(_BYTE *)(v200 + 768))
    {
      sub_22400C308((uint64_t)__p, v200, 0, 0);
      if (!BYTE8(v208))
      {
        sub_22319593C((uint64_t)__p);
        __lk = *(std::unique_lock<std::mutex> *)__p;
        sub_22319FFBC(v223, (__int128 *)&__p[16]);
        sub_22319718C(a1, (uint64_t)&__lk);
        sub_22319723C((uint64_t)&__lk);
        sub_223197D38((uint64_t)__p);
        v145 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
        if (*((_QWORD *)&v200 + 1))
          goto LABEL_400;
        return;
      }
      sub_223197D38((uint64_t)__p);
      v153 = v200;
    }
    v154 = *(_QWORD *)(v153 + 1120);
    v155 = *(std::mutex **)(v154 + 32);
    if (v155)
    {
      std::mutex::lock(*(std::mutex **)(v154 + 32));
      v157 = *(_QWORD *)(v154 + 40);
      v156 = *(_QWORD *)(v154 + 48);
      *(_QWORD *)__p = v157;
      *(_QWORD *)&__p[8] = v156;
      if (v156)
      {
        v158 = (unint64_t *)(v156 + 8);
        do
          v159 = __ldxr(v158);
        while (__stxr(v159 + 1, v158));
      }
      std::mutex::unlock(v155);
      v153 = v200;
    }
    else
    {
      v157 = *(_QWORD *)(v154 + 40);
      v160 = *(_QWORD *)(v154 + 48);
      *(_QWORD *)__p = v157;
      *(_QWORD *)&__p[8] = v160;
      if (v160)
      {
        v161 = (unint64_t *)(v160 + 8);
        do
          v162 = __ldxr(v161);
        while (__stxr(v162 + 1, v161));
      }
    }
    if (v153)
      v163 = v153 + 16;
    else
      v163 = 0;
    v164 = *(_QWORD *)(v157 + 8);
    if (!v164)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v164 = *(_QWORD *)(v157 + 8);
    }
    sub_224126FD0(v164, v163);
    v165 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v166 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v167 = __ldaxr(v166);
      while (__stlxr(v167 - 1, v166));
      if (!v167)
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
      }
    }
    *(_OWORD *)a1 = v200;
    v200 = 0uLL;
    *(_BYTE *)(a1 + 120) = 1;
    goto LABEL_399;
  }
  sub_223208674(v173, "When syncing is disabled, the first sync point must not be deferred");
  v181 = 1;
  sub_22454BC28((uint64_t)v173, (uint64_t)__p);
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if ((_BYTE)v208)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v147 = BYTE8(v203);
    if (BYTE8(v203))
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)&__p[16];
      *(_QWORD *)(a1 + 32) = v203;
      *(_QWORD *)&__p[24] = 0;
      *(_QWORD *)&v203 = 0;
      *(_QWORD *)&__p[16] = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if ((_BYTE)v207)
    {
      v148 = *((_QWORD *)&v205 + 1);
      *(_QWORD *)(a1 + 64) = v205;
      *(_OWORD *)(a1 + 48) = v204;
      v204 = 0uLL;
      *(_QWORD *)(a1 + 72) = v148;
      *(_OWORD *)(a1 + 80) = *(_OWORD *)v206;
      *(void **)(a1 + 96) = v206[2];
      *(_QWORD *)&v205 = 0;
      memset(v206, 0, sizeof(v206));
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 120) = 0;
    if (v147 && SBYTE7(v203) < 0)
      operator delete(*(void **)&__p[16]);
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
  }
  if (!v181)
    goto LABEL_399;
  if (v180)
  {
    if (v179 < 0)
      operator delete(v178);
    if (v177 < 0)
      operator delete(v176);
  }
  if (!v175 || (v174 & 0x80000000) == 0)
  {
LABEL_399:
    v145 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
    if (*((_QWORD *)&v200 + 1))
      goto LABEL_400;
    return;
  }
  operator delete(v173[0]);
  v145 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
  if (!*((_QWORD *)&v200 + 1))
    return;
LABEL_400:
  v168 = (unint64_t *)&v145->__shared_owners_;
  do
    v169 = __ldaxr(v168);
  while (__stlxr(v169 - 1, v168));
  if (!v169)
  {
    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
    std::__shared_weak_count::__release_weak(v145);
  }
}

void sub_22400BF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  __cxa_guard_abort(&qword_2540CEB28);
  sub_223167354((uint64_t)&a51);
  _Unwind_Resume(a1);
}

uint64_t sub_22400C0E4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = *(std::__shared_weak_count **)(a1 + 280);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 264);
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 264);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = *(std::__shared_weak_count **)(a1 + 248);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  sub_224011EC0(a1 + 64);
  if (!*(_BYTE *)(a1 + 56) || (*(char *)(a1 + 55) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22400C190(unsigned int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 __p;
  uint64_t v18;
  unsigned __int8 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char v26;

  sub_22319FFBC(v7, a2);
  sub_224012298((uint64_t)&v16, a1, (__int128 *)v7);
  *(_OWORD *)a3 = v16;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v26)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v19;
    if (v19)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v18;
      v18 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v25)
    {
      v6 = v22;
      *(_QWORD *)(a3 + 64) = v21;
      *(_OWORD *)(a3 + 48) = v20;
      v20 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v23;
      *(_QWORD *)(a3 + 96) = v24;
      v21 = 0;
      v23 = 0uLL;
      v24 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    if (v5 && SHIBYTE(v18) < 0)
      operator delete((void *)__p);
  }
  if (v15)
  {
    if (!v14)
      goto LABEL_13;
    if (v13 < 0)
    {
      operator delete(v12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v9)
          return;
        goto LABEL_14;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v10);
    if (!v9)
      return;
LABEL_14:
    if (v8 < 0)
      operator delete(v7[0]);
  }
}

void sub_22400C2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319FD28((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22400C308(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  std::mutex *v7;
  std::string::size_type v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  char v18;
  __int128 v19;
  _BYTE v20[28];
  int v21;
  __int128 v22;
  __int128 __p;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  char v31;
  char v32;
  _OWORD v33[2];
  int v34;
  char v35;
  _QWORD v36[4];
  __int128 v37;
  __int128 v38;
  char v39;
  unsigned __int8 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  _QWORD v49[2];
  _QWORD v50[3];
  _QWORD *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v21 = 9;
  LOBYTE(v22) = 0;
  v32 = 0;
  v7 = (std::mutex *)(a2 + 904);
  LOBYTE(v19) = 0;
  v20[16] = 0;
  *(_DWORD *)&v20[24] = 0;
  v18 = 1;
  v8 = a2 + 152;
  while (1)
  {
    if (*(_BYTE *)(a2 + 896) == 2)
    {
      sub_224120570(v7, (uint64_t)&v37);
      v19 = v37;
      *(_OWORD *)v20 = v38;
      if (v20[16])
        goto LABEL_9;
    }
    else
    {
      LOBYTE(v19) = 0;
      *((_QWORD *)&v19 + 1) = 0;
      *(_QWORD *)v20 = 0;
      v20[8] = 1;
      if (v20[16])
      {
LABEL_9:
        if (!*(_BYTE *)(a2 + 440))
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    v20[16] = 1;
    if (!*(_BYTE *)(a2 + 440))
      goto LABEL_13;
LABEL_12:
    v33[0] = v19;
    v33[1] = *(_OWORD *)v20;
    v34 = 1;
    v35 = 1;
    sub_22413DC20(v8, (uint64_t)v33, (uint64_t)&v37);
    if (v48)
      goto LABEL_13;
    sub_22400D0F8((uint64_t)&v21, (uint64_t)&v37);
    v18 = 0;
    if (v48 || !v47)
      goto LABEL_13;
    if (!v46)
    {
LABEL_24:
      if (!v40)
        goto LABEL_13;
      goto LABEL_25;
    }
    if (SHIBYTE(v45) < 0)
    {
      operator delete((void *)v44);
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_24;
    }
    else if ((SHIBYTE(v42) & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete((void *)v41);
    if (!v40)
      goto LABEL_13;
LABEL_25:
    if (v39 < 0)
      operator delete((void *)v38);
LABEL_13:
    if (!*(_BYTE *)(a2 + 144))
      goto LABEL_15;
    v36[0] = a2;
    v36[1] = &v19;
    v36[2] = &v21;
    v36[3] = &v18;
    v49[0] = &off_24EC662C0;
    v49[1] = v36;
    sub_22456BD10((uint64_t)v49, (uint64_t)&v37);
    if (v48)
      goto LABEL_15;
    sub_22400D0F8((uint64_t)&v21, (uint64_t)&v37);
    if (v48 || !v47)
      goto LABEL_15;
    if (v46)
    {
      if (SHIBYTE(v45) < 0)
      {
        operator delete((void *)v44);
        if (SHIBYTE(v42) < 0)
        {
LABEL_39:
          operator delete((void *)v41);
          if (!v40)
            goto LABEL_15;
          goto LABEL_33;
        }
      }
      else if (SHIBYTE(v42) < 0)
      {
        goto LABEL_39;
      }
    }
    if (!v40)
      goto LABEL_15;
LABEL_33:
    if (v39 < 0)
      operator delete((void *)v38);
LABEL_15:
    if (v19 != 1)
      break;
    v50[0] = &off_24EC66388;
    v50[1] = a2;
    v51 = v50;
    v11 = sub_22412072C((uint64_t)v7, (uint64_t)v50, a3, a4);
    v9 = v51;
    if (v51 == v50)
    {
      v9 = v50;
      v10 = 4;
    }
    else
    {
      if (!v51)
        goto LABEL_4;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_4:
    *(_DWORD *)&v20[24] = v11 ^ 1;
    v18 = v11;
    if ((v11 & 1) == 0)
      goto LABEL_42;
  }
  v18 = 0;
LABEL_42:
  if (!v32)
  {
    v16 = *(_OWORD *)v20;
    *(_OWORD *)a1 = v19;
    *(_OWORD *)(a1 + 16) = v16;
    *(_OWORD *)(a1 + 28) = *(_OWORD *)&v20[12];
    *(_BYTE *)(a1 + 120) = 1;
    return;
  }
  if (*(_BYTE *)(a2 + 112))
  {
    v12 = *(_QWORD *)(a2 + 104);
    if (!v12)
      sub_223198474();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v12 + 48))(v12, &v22);
  }
  v37 = v22;
  v13 = sub_22319FFBC(&v38, &__p);
  *(_OWORD *)a1 = v37;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v47)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v14 = v40;
    if (v40)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v13;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)v13 + 2);
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
      *(_QWORD *)v13 = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v46)
    {
      v15 = v43;
      *(_QWORD *)(a1 + 64) = v42;
      *(_OWORD *)(a1 + 48) = v41;
      v42 = 0;
      v41 = 0uLL;
      *(_QWORD *)(a1 + 72) = v15;
      *(_OWORD *)(a1 + 80) = v44;
      *(_QWORD *)(a1 + 96) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 120) = 0;
    if (v14 && v39 < 0)
      operator delete((void *)v38);
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
  }
  if (v32 && v31)
  {
    if (!v30)
      goto LABEL_61;
    if ((v29 & 0x80000000) == 0)
    {
      if ((v27 & 0x80000000) == 0)
        goto LABEL_61;
LABEL_66:
      operator delete(v26);
      if (!v25)
        return;
LABEL_62:
      if (v24 < 0)
        operator delete((void *)__p);
      return;
    }
    operator delete(v28);
    if (v27 < 0)
      goto LABEL_66;
LABEL_61:
    if (v25)
      goto LABEL_62;
  }
}

void sub_22400C790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_22400D5A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22400C810(uint64_t a1)
{
  unint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::mutex *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v41;
  void *v42;
  char v43;
  char v44;
  void *v45;
  char v46;
  void *__p;
  char v48;
  char v49;
  char v50;
  char v51;

  *(_QWORD *)a1 = &off_24EC66000;
  *(_QWORD *)(a1 + 8) = &unk_24EC66068;
  *(_QWORD *)(a1 + 16) = &unk_24EC660A0;
  v2 = a1 + 16;
  v3 = *(std::__shared_weak_count **)(a1 + 1176);
  *(_OWORD *)(a1 + 1168) = 0u;
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = *(_QWORD **)(a1 + 1120);
    v7 = (std::mutex *)v6[4];
    if (v7)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    v6 = *(_QWORD **)(a1 + 1120);
    v7 = (std::mutex *)v6[4];
    if (v7)
    {
LABEL_6:
      std::mutex::lock(v7);
      v9 = v6[5];
      v8 = (std::__shared_weak_count *)v6[6];
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      std::mutex::unlock(v7);
      goto LABEL_14;
    }
  }
  v9 = v6[5];
  v8 = (std::__shared_weak_count *)v6[6];
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
LABEL_14:
  v14 = *(_QWORD **)(v9 + 8);
  if (!v14)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v14 = *(_QWORD **)(v9 + 8);
  }
  sub_224127320(v14, v2);
  if (v8)
  {
    v15 = (unint64_t *)&v8->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (*(_BYTE *)(a1 + 144))
  {
    v17 = *(std::__shared_weak_count **)(a1 + 136);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *(_BYTE *)(a1 + 144) = 0;
  }
  if (*(_BYTE *)(a1 + 440))
  {
    sub_22413DF30(a1 + 152, 2, (uint64_t)&v41);
    if (!v51)
    {
      if (v50)
      {
        if (v49)
        {
          if (v48 < 0)
            operator delete(__p);
          if (v46 < 0)
            operator delete(v45);
        }
        if (v44 && v43 < 0)
          operator delete(v42);
      }
    }
  }
  v20 = *(std::__shared_weak_count **)(a1 + 1176);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (*(_BYTE *)(a1 + 1160))
    sub_22455C510(a1 + 1144);
  v23 = *(_QWORD **)(a1 + 1120);
  *(_QWORD *)(a1 + 1120) = 0;
  if (v23)
    sub_2240116BC(v23);
  if (*(_BYTE *)(a1 + 1104))
  {
    std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 1056));
    v24 = *(void **)(a1 + 1032);
    if (v24)
    {
      *(_QWORD *)(a1 + 1040) = v24;
      operator delete(v24);
    }
    std::mutex::~mutex((std::mutex *)(a1 + 968));
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 848));
  std::mutex::~mutex((std::mutex *)(a1 + 784));
  if (*(_BYTE *)(a1 + 720))
  {
    v25 = *(_QWORD **)(a1 + 712);
    if (v25 == (_QWORD *)(a1 + 688))
    {
      v26 = 4;
      v25 = (_QWORD *)(a1 + 688);
      goto LABEL_49;
    }
    if (v25)
    {
      v26 = 5;
LABEL_49:
      (*(void (**)(void))(*v25 + 8 * v26))();
    }
  }
  if (*(_BYTE *)(a1 + 680))
  {
    sub_224011EC0(a1 + 504);
    if (*(_BYTE *)(a1 + 496))
    {
      if (*(char *)(a1 + 495) < 0)
        operator delete(*(void **)(a1 + 472));
    }
  }
  if (*(_BYTE *)(a1 + 440))
  {
    v27 = *(std::__shared_weak_count **)(a1 + 432);
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = *(std::__shared_weak_count **)(a1 + 416);
    if (v30)
      std::__shared_weak_count::__release_weak(v30);
    v31 = *(std::__shared_weak_count **)(a1 + 400);
    if (v31)
      std::__shared_weak_count::__release_weak(v31);
    sub_224011EC0(a1 + 216);
    if (*(_BYTE *)(a1 + 208) && *(char *)(a1 + 207) < 0)
      operator delete(*(void **)(a1 + 184));
  }
  if (*(_BYTE *)(a1 + 144))
  {
    v32 = *(std::__shared_weak_count **)(a1 + 136);
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  if (*(_BYTE *)(a1 + 112))
  {
    v35 = *(_QWORD **)(a1 + 104);
    if (v35 == (_QWORD *)(a1 + 80))
    {
      v36 = 4;
      v35 = (_QWORD *)(a1 + 80);
    }
    else
    {
      if (!v35)
        goto LABEL_79;
      v36 = 5;
    }
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
LABEL_79:
  if (!*(_BYTE *)(a1 + 72))
    goto LABEL_85;
  v37 = *(_QWORD **)(a1 + 64);
  if (v37 == (_QWORD *)(a1 + 40))
  {
    v38 = 4;
    v37 = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (!v37)
      goto LABEL_85;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_85:
  v39 = *(std::__shared_weak_count **)(a1 + 32);
  if (v39)
    std::__shared_weak_count::__release_weak(v39);
  return a1;
}

uint64_t sub_22400CC68(uint64_t a1)
{
  return sub_22400C810(a1 - 8);
}

uint64_t sub_22400CC70(uint64_t a1)
{
  return sub_22400C810(a1 - 16);
}

void sub_22400CC78(uint64_t a1)
{
  sub_22400C810(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22400CC9C(uint64_t a1)
{
  sub_22400C810(a1 - 8);
  JUMPOUT(0x227684CE8);
}

void sub_22400CCC4(uint64_t a1)
{
  sub_22400C810(a1 - 16);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22400CCEC(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_22400CCF4(uint64_t a1)
{
  return a1 + 1128;
}

void sub_22400CCFC(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  const void ***v23;
  int *v24;
  __int128 v25;
  void *__p;
  char v27;
  unsigned __int8 v28;
  void *v29[2];
  uint64_t v30;
  uint64_t v31;
  void *v32[2];
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  uint64_t (**v37)();
  uint64_t *v38;

  v10 = 9;
  LOBYTE(v11) = 0;
  v21 = 0;
  if (*(_BYTE *)(a1 + 440))
  {
    sub_22413D910(a1 + 152, a2, (uint64_t)&v25);
    if (!v36)
    {
      sub_22400D0F8((uint64_t)&v10, (uint64_t)&v25);
      if (!v36)
      {
        if (v35)
        {
          if (v34)
          {
            if (SHIBYTE(v33) < 0)
              operator delete(v32[0]);
            if (SHIBYTE(v30) < 0)
              operator delete(v29[0]);
          }
          if (v28 && v27 < 0)
            operator delete(__p);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 720))
  {
    v22 = a1;
    v23 = a2;
    v24 = &v10;
    v37 = &off_24EC664E8;
    v38 = &v22;
    sub_22456BD10((uint64_t)&v37, (uint64_t)&v25);
    if (!v36)
    {
      sub_22400D0F8((uint64_t)&v10, (uint64_t)&v25);
      if (!v36)
      {
        if (v35)
        {
          if (v34)
          {
            if (SHIBYTE(v33) < 0)
              operator delete(v32[0]);
            if (SHIBYTE(v30) < 0)
              operator delete(v29[0]);
          }
          if (v28 && v27 < 0)
            operator delete(__p);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 144))
  {
    v22 = a1;
    v23 = a2;
    v24 = &v10;
    v37 = &off_24EC66528;
    v38 = &v22;
    sub_22456BD10((uint64_t)&v37, (uint64_t)&v25);
    if (!v36)
    {
      sub_22400D0F8((uint64_t)&v10, (uint64_t)&v25);
      if (!v36)
      {
        if (v35)
        {
          if (v34)
          {
            if (SHIBYTE(v33) < 0)
              operator delete(v32[0]);
            if (SHIBYTE(v30) < 0)
              operator delete(v29[0]);
          }
          if (v28 && v27 < 0)
            operator delete(__p);
        }
      }
    }
  }
  if (!v21)
  {
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  if (*(_BYTE *)(a1 + 112))
  {
    v6 = *(_QWORD *)(a1 + 104);
    if (!v6)
      sub_223198474();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v6 + 48))(v6, &v11);
  }
  v25 = v11;
  v7 = sub_22319FFBC(&__p, &v12);
  *(_OWORD *)a3 = v25;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v35)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v8 = v28;
    if (v28)
    {
      *(_OWORD *)(a3 + 16) = *(_OWORD *)v7;
      *(_QWORD *)(a3 + 32) = *((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)v7 = 0;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v34)
    {
      v9 = v31;
      *(_QWORD *)(a3 + 64) = v30;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v29;
      v29[0] = 0;
      v29[1] = 0;
      *(_QWORD *)(a3 + 72) = v9;
      *(_OWORD *)(a3 + 80) = *(_OWORD *)v32;
      *(_QWORD *)(a3 + 96) = v33;
      v30 = 0;
      v32[0] = 0;
      v32[1] = 0;
      v33 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v8 && v27 < 0)
      operator delete(__p);
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
  if (v21 && v20)
  {
    if (!v19)
      goto LABEL_30;
    if (v18 < 0)
    {
      operator delete(v17);
      if ((v16 & 0x80000000) == 0)
      {
LABEL_30:
        if (!v14)
          return;
LABEL_31:
        if (v13 < 0)
          operator delete((void *)v12);
        return;
      }
    }
    else if ((v16 & 0x80000000) == 0)
    {
      goto LABEL_30;
    }
    operator delete(v15);
    if (!v14)
      return;
    goto LABEL_31;
  }
}

void sub_22400D084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_223197D38((uint64_t)&a29);
  sub_22400D5A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22400D0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22400D5A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22400D0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22400D5A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22400D0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22400D5A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22400D0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22400D5A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22400D0F8(uint64_t a1, uint64_t a2)
{
  char *v4;
  void **v5;
  int v6;
  _OWORD *v7;
  int v8;
  _OWORD *v9;
  unsigned int v10;
  int v11;
  _OWORD *v12;
  int v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  std::string v20;
  __int128 v21;
  char v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  __int128 v30;
  __int128 __p;
  uint64_t v32;
  char v33;
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  uint64_t v38;
  char v39;
  unsigned __int8 v40;

  v4 = (char *)(a1 + 8);
  if (*(_BYTE *)(a1 + 128))
    goto LABEL_2;
  v10 = *(_DWORD *)a1;
  LOBYTE(v21) = 0;
  v29 = 0;
  sub_224012298((uint64_t)&v30, v10, &v21);
  v11 = *(unsigned __int8 *)(a1 + 128);
  *(_OWORD *)v4 = v30;
  v12 = (_OWORD *)(a1 + 24);
  if (!v11)
  {
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 120) = 0;
    v16 = v40;
    if (v40)
    {
      *(_BYTE *)(a1 + 48) = 0;
      if (v33)
      {
        *v12 = __p;
        *(_QWORD *)(a1 + 40) = v32;
        v32 = 0;
        __p = 0uLL;
        *(_BYTE *)(a1 + 48) = 1;
      }
      *(_BYTE *)(a1 + 56) = 0;
      *(_BYTE *)(a1 + 112) = 0;
      if (v39)
      {
        v17 = v36;
        *(_QWORD *)(a1 + 72) = v35;
        *(_OWORD *)(a1 + 56) = *(_OWORD *)v34;
        v34[0] = 0;
        v34[1] = 0;
        *(_QWORD *)(a1 + 80) = v17;
        *(_OWORD *)(a1 + 88) = *(_OWORD *)v37;
        *(_QWORD *)(a1 + 104) = v38;
        v35 = 0;
        v37[0] = 0;
        v37[1] = 0;
        v38 = 0;
        *(_BYTE *)(a1 + 112) = 1;
      }
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 1;
    if (!v16)
      goto LABEL_49;
    goto LABEL_41;
  }
  sub_2237018A4((uint64_t)v12, &__p);
  if (v40)
  {
LABEL_41:
    if (v39)
    {
      if (SHIBYTE(v38) < 0)
        operator delete(v37[0]);
      if (SHIBYTE(v35) < 0)
        operator delete(v34[0]);
    }
    if (v33 && SHIBYTE(v32) < 0)
      operator delete((void *)__p);
  }
LABEL_49:
  if (v29)
  {
    if (v28)
    {
      if (v27 < 0)
        operator delete(v26);
      if (v25 < 0)
        operator delete(v24);
    }
    if (v23 && v22 < 0)
      operator delete((void *)v21);
  }
LABEL_2:
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a1 + 16) || *(_DWORD *)a2 != *(_DWORD *)v4)
  {
    sub_22456A158(a2, &v20);
    sub_22456AEF4(v4, (void **)&v20.__r_.__value_.__l.__data_, (uint64_t)&v30);
    v8 = *(unsigned __int8 *)(a1 + 128);
    *(_OWORD *)v4 = v30;
    v9 = (_OWORD *)(a1 + 24);
    if (v8)
    {
      sub_2237018A4((uint64_t)v9, &__p);
      if (!v40)
        goto LABEL_30;
    }
    else
    {
      *(_BYTE *)(a1 + 24) = 0;
      *(_BYTE *)(a1 + 120) = 0;
      v13 = v40;
      if (v40)
      {
        *(_BYTE *)(a1 + 48) = 0;
        if (v33)
        {
          *v9 = __p;
          *(_QWORD *)(a1 + 40) = v32;
          v32 = 0;
          __p = 0uLL;
          *(_BYTE *)(a1 + 48) = 1;
        }
        *(_BYTE *)(a1 + 56) = 0;
        *(_BYTE *)(a1 + 112) = 0;
        if (v39)
        {
          v14 = v36;
          *(_QWORD *)(a1 + 72) = v35;
          *(_OWORD *)(a1 + 56) = *(_OWORD *)v34;
          v34[0] = 0;
          v34[1] = 0;
          *(_QWORD *)(a1 + 80) = v14;
          *(_OWORD *)(a1 + 88) = *(_OWORD *)v37;
          *(_QWORD *)(a1 + 104) = v38;
          v35 = 0;
          v37[0] = 0;
          v37[1] = 0;
          v38 = 0;
          *(_BYTE *)(a1 + 112) = 1;
        }
        *(_BYTE *)(a1 + 120) = 1;
      }
      *(_BYTE *)(a1 + 128) = 1;
      if (!v13)
      {
LABEL_30:
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        {
          v15 = (void *)v20.__r_.__value_.__r.__words[0];
LABEL_33:
          operator delete(v15);
          return;
        }
        return;
      }
    }
    if (!v39)
      goto LABEL_27;
    if (SHIBYTE(v38) < 0)
    {
      operator delete(v37[0]);
      if ((SHIBYTE(v35) & 0x80000000) == 0)
      {
LABEL_27:
        if (!v33)
          goto LABEL_30;
LABEL_28:
        if (SHIBYTE(v32) < 0)
          operator delete((void *)__p);
        goto LABEL_30;
      }
    }
    else if ((SHIBYTE(v35) & 0x80000000) == 0)
    {
      goto LABEL_27;
    }
    operator delete(v34[0]);
    if (!v33)
      goto LABEL_30;
    goto LABEL_28;
  }
  if (*(_BYTE *)(a2 + 112))
    v5 = (void **)(a2 + 16);
  else
    v5 = (void **)&unk_2246C9618;
  if (!*((_BYTE *)v5 + 24))
    return;
  sub_22456AEF4(v4, v5, (uint64_t)&v30);
  v6 = *(unsigned __int8 *)(a1 + 128);
  *(_OWORD *)v4 = v30;
  v7 = (_OWORD *)(a1 + 24);
  if (v6)
  {
    sub_2237018A4((uint64_t)v7, &__p);
    if (!v40)
      return;
  }
  else
  {
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 120) = 0;
    v18 = v40;
    if (v40)
    {
      *(_BYTE *)(a1 + 48) = 0;
      if (v33)
      {
        *v7 = __p;
        *(_QWORD *)(a1 + 40) = v32;
        v32 = 0;
        __p = 0uLL;
        *(_BYTE *)(a1 + 48) = 1;
      }
      *(_BYTE *)(a1 + 56) = 0;
      *(_BYTE *)(a1 + 112) = 0;
      if (v39)
      {
        v19 = v36;
        *(_QWORD *)(a1 + 72) = v35;
        *(_OWORD *)(a1 + 56) = *(_OWORD *)v34;
        v34[0] = 0;
        v34[1] = 0;
        *(_QWORD *)(a1 + 80) = v19;
        *(_OWORD *)(a1 + 88) = *(_OWORD *)v37;
        *(_QWORD *)(a1 + 104) = v38;
        v35 = 0;
        v37[0] = 0;
        v37[1] = 0;
        v38 = 0;
        *(_BYTE *)(a1 + 112) = 1;
      }
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 1;
    if (!v18)
      return;
  }
  if (v39)
  {
    if (SHIBYTE(v38) < 0)
      operator delete(v37[0]);
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (v33 && SHIBYTE(v32) < 0)
  {
    v15 = (void *)__p;
    goto LABEL_33;
  }
}

void sub_22400D570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319FD28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22400D588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22400D5A4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 120))
    return a1;
  if (*(_BYTE *)(a1 + 112))
  {
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 79) & 0x80000000) == 0)
        goto LABEL_6;
LABEL_10:
      operator delete(*(void **)(a1 + 56));
      if (!*(_BYTE *)(a1 + 48))
        return a1;
      goto LABEL_7;
    }
    operator delete(*(void **)(a1 + 88));
    if (*(char *)(a1 + 79) < 0)
      goto LABEL_10;
  }
LABEL_6:
  if (!*(_BYTE *)(a1 + 48))
    return a1;
LABEL_7:
  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22400D638(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  void *v10;
  char v11;
  unsigned __int8 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  char v19;
  __int128 v20;
  __int128 __p;
  uint64_t v22;
  unsigned __int8 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  __int128 v32;
  char v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  char v39;
  char v40;

  if (!*(_BYTE *)(a1 + 896))
  {
    LOBYTE(v32) = 0;
    v40 = 0;
    sub_22400C190(0xBu, &v32, (uint64_t)&v20);
    *(_OWORD *)a2 = v20;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (v30)
    {
      *(_BYTE *)(a2 + 40) = 0;
      v4 = v23;
      if (v23)
      {
        *(_OWORD *)(a2 + 16) = __p;
        *(_QWORD *)(a2 + 32) = v22;
        v22 = 0;
        __p = 0uLL;
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (v29)
      {
        v5 = v26;
        *(_QWORD *)(a2 + 64) = v25;
        *(_OWORD *)(a2 + 48) = v24;
        v24 = 0uLL;
        *(_QWORD *)(a2 + 72) = v5;
        *(_OWORD *)(a2 + 80) = v27;
        *(_QWORD *)(a2 + 96) = v28;
        v25 = 0;
        v27 = 0uLL;
        v28 = 0;
        *(_BYTE *)(a2 + 104) = 1;
      }
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (v4 && SHIBYTE(v22) < 0)
        operator delete((void *)__p);
      if (!v40)
        return;
    }
    else
    {
      *(_BYTE *)(a2 + 120) = 0;
      if (!v40)
        return;
    }
    if (v39)
    {
      if (v38 < 0)
        operator delete(v37);
      if (v36 < 0)
        operator delete(v35);
    }
    if (v34 && v33 < 0)
      operator delete((void *)v32);
    return;
  }
  if (!*(_BYTE *)(a1 + 1104))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    goto LABEL_16;
  }
  sub_22400C308((uint64_t)&v20, a1, 0, 0);
  if (v31)
  {
    v3 = __p;
    *(_OWORD *)a2 = v20;
    *(_OWORD *)(a2 + 16) = v3;
    *(_QWORD *)(a2 + 32) = v22;
LABEL_16:
    *(_BYTE *)(a2 + 120) = 1;
    return;
  }
  v9 = v20;
  v6 = sub_22319FFBC(&v10, &__p);
  *(_OWORD *)a2 = v9;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (v19)
  {
    *(_BYTE *)(a2 + 40) = 0;
    v7 = v12;
    if (v12)
    {
      *(_OWORD *)(a2 + 16) = *(_OWORD *)v6;
      *(_QWORD *)(a2 + 32) = *((_QWORD *)v6 + 2);
      *((_QWORD *)v6 + 1) = 0;
      *((_QWORD *)v6 + 2) = 0;
      *(_QWORD *)v6 = 0;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (v18)
    {
      v8 = v15;
      *(_QWORD *)(a2 + 64) = v14;
      *(_OWORD *)(a2 + 48) = v13;
      v13 = 0uLL;
      *(_QWORD *)(a2 + 72) = v8;
      *(_OWORD *)(a2 + 80) = v16;
      *(_QWORD *)(a2 + 96) = v17;
      v14 = 0;
      v16 = 0uLL;
      v17 = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    if (v7 && v11 < 0)
      operator delete(v10);
  }
  else
  {
    *(_BYTE *)(a2 + 120) = 0;
  }
  if (!v31 && v30)
  {
    if (v29)
    {
      if (SHIBYTE(v28) < 0)
        operator delete((void *)v27);
      if (SHIBYTE(v25) < 0)
        operator delete((void *)v24);
    }
    if (v23)
    {
      if (SHIBYTE(v22) < 0)
        operator delete((void *)__p);
    }
  }
}

void sub_22400D950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_223197D38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22400D964(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319FD28(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_22400D978(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 __p;
  uint64_t v17;
  unsigned __int8 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  char v25;

  if (*(_BYTE *)(a1 + 896))
  {
    if (*(_BYTE *)(a1 + 1104))
    {
      sub_22400C308(a3, a1, a2, 1);
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 32) = 0;
      *(_DWORD *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 120) = 1;
    }
    return;
  }
  LOBYTE(v6) = 0;
  v14 = 0;
  sub_22400C190(0xBu, &v6, (uint64_t)&v15);
  *(_OWORD *)a3 = v15;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v25)
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v14)
      return;
    goto LABEL_16;
  }
  *(_BYTE *)(a3 + 40) = 0;
  v4 = v18;
  if (v18)
  {
    *(_OWORD *)(a3 + 16) = __p;
    *(_QWORD *)(a3 + 32) = v17;
    v17 = 0;
    __p = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v24)
  {
    v5 = v21;
    *(_QWORD *)(a3 + 64) = v20;
    *(_OWORD *)(a3 + 48) = v19;
    v19 = 0uLL;
    *(_QWORD *)(a3 + 72) = v5;
    *(_OWORD *)(a3 + 80) = v22;
    *(_QWORD *)(a3 + 96) = v23;
    v20 = 0;
    v22 = 0uLL;
    v23 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (v4 && SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  if (v14)
  {
LABEL_16:
    if (v13)
    {
      if (v12 < 0)
        operator delete(v11);
      if (v10 < 0)
        operator delete(v9);
    }
    if (v8 && v7 < 0)
      operator delete((void *)v6);
  }
}

void sub_22400DB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319FD28((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22400DB58(_BYTE *a1, _QWORD *a2)
{
  void *v2;
  void *v3;
  char v4;
  char v5;
  char v6;
  _BYTE *v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  char **v19;
  char *v20;
  int v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  char v31;
  char v32;
  unsigned __int8 v33;
  _QWORD v34[3];
  __int128 v35;
  void *__p;
  char v37;
  unsigned __int8 v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  _QWORD v48[2];
  _BYTE v49[24];
  _BYTE *v50;
  uint64_t v51;

  v7 = a1;
  v51 = *MEMORY[0x24BDAC8D0];
  v22 = 9;
  LOBYTE(v23) = 0;
  v33 = 0;
  v8 = a2 + 1;
  v9 = a2[1];
  v19 = (char **)*a2;
  v20 = (char *)v9;
  if (a2[2])
  {
    *(_QWORD *)(v9 + 16) = &v20;
    *a2 = v8;
    *v8 = 0;
    a2[2] = 0;
    if (!a1[440])
      goto LABEL_7;
  }
  else
  {
    v19 = &v20;
    if (!a1[440])
      goto LABEL_7;
  }
  sub_22413E240((std::string::size_type)(a1 + 152), &v19, (uint64_t)&v35);
  if (!v47)
  {
    sub_22400D0F8((uint64_t)&v22, (uint64_t)&v35);
    if (!v47)
    {
      if (v46)
      {
        if (v45)
        {
          if (SHIBYTE(v44) < 0)
            operator delete(v42);
          if (SHIBYTE(v41) < 0)
            operator delete(v39);
        }
        if (v38 && v37 < 0)
          operator delete(__p);
      }
    }
  }
LABEL_7:
  if (v7[144])
  {
    v34[0] = v7;
    v34[1] = &v19;
    v34[2] = &v22;
    v48[0] = &off_24EC66568;
    v48[1] = v34;
    sub_22456BD10((uint64_t)v48, (uint64_t)&v35);
    if (!v47)
    {
      sub_22400D0F8((uint64_t)&v22, (uint64_t)&v35);
      if (!v47)
      {
        if (v46)
        {
          if (v45)
          {
            if (SHIBYTE(v44) < 0)
              operator delete(v42);
            if (SHIBYTE(v41) < 0)
              operator delete(v39);
          }
          if (v38 && v37 < 0)
            operator delete(__p);
        }
      }
    }
  }
  if (v7[112])
  {
    v10 = (_BYTE *)*((_QWORD *)v7 + 13);
    if (v10)
    {
      if (v10 == v7 + 80)
      {
        v50 = v49;
        (*(void (**)(_BYTE *, _BYTE *))(*((_QWORD *)v7 + 10) + 24))(v7 + 80, v49);
        v11 = v50;
        v12 = v33;
        if (v33)
        {
LABEL_16:
          if (!v11)
            sub_223198474();
          (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v11 + 48))(v11, &v23);
          v35 = v23;
          v13 = sub_22319FFBC(&__p, &v24);
          if (!v46)
          {
            v17 = 0;
            v16 = 0;
            v7 = 0;
            v15 = 0;
            goto LABEL_30;
          }
          v14 = v38;
          if (v38)
          {
            v7 = __p;
            v4 = v37;
            *v13 = 0;
            v13[1] = 0;
            v15 = 1;
            v13[2] = 0;
            if (v45)
              goto LABEL_20;
          }
          else
          {
            v7 = 0;
            v15 = 0;
            if (v45)
            {
LABEL_20:
              v2 = v39;
              v5 = HIBYTE(v41);
              v39 = 0;
              v40 = 0;
              v3 = v42;
              v6 = HIBYTE(v44);
              v41 = 0;
              v42 = 0;
              v43 = 0;
              v16 = 1;
              v44 = 0;
              v17 = 1;
              if (!v14)
                goto LABEL_30;
              goto LABEL_28;
            }
          }
          v16 = 0;
          v2 = 0;
          v17 = 1;
          if (!v14)
            goto LABEL_30;
LABEL_28:
          if (v37 < 0)
            operator delete(__p);
LABEL_30:
          v11 = v50;
          if (v50 != v49)
            goto LABEL_31;
          goto LABEL_24;
        }
LABEL_23:
        v17 = 0;
        v16 = 0;
        v15 = 0;
        if (v11 != v49)
        {
LABEL_31:
          if (!v11)
          {
LABEL_34:
            if (!v12 || !v17)
              goto LABEL_42;
            if (!v16)
              goto LABEL_39;
            if (v6 < 0)
            {
              operator delete(v3);
              if ((v5 & 0x80) == 0)
              {
LABEL_39:
                if (!v15)
                  goto LABEL_42;
                goto LABEL_40;
              }
            }
            else if ((v5 & 0x80) == 0)
            {
              goto LABEL_39;
            }
            operator delete(v2);
            if (!v15)
              goto LABEL_42;
LABEL_40:
            if (v4 < 0)
              operator delete(v7);
            goto LABEL_42;
          }
          v18 = 5;
LABEL_33:
          (*(void (**)(void))(*(_QWORD *)v11 + 8 * v18))();
          goto LABEL_34;
        }
LABEL_24:
        v18 = 4;
        v11 = v49;
        goto LABEL_33;
      }
      v11 = (_BYTE *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 16))(*((_QWORD *)v7 + 13));
    }
    else
    {
      v11 = 0;
    }
    v50 = v11;
    v12 = v33;
    if (v33)
      goto LABEL_16;
    goto LABEL_23;
  }
LABEL_42:
  sub_22323DF84((uint64_t)&v19, v20);
  if (v33 && v32)
  {
    if (!v31)
      goto LABEL_47;
    if (v30 < 0)
    {
      operator delete(v29);
      if ((v28 & 0x80000000) == 0)
      {
LABEL_47:
        if (!v26)
          return;
LABEL_48:
        if (v25 < 0)
          operator delete((void *)v24);
        return;
      }
    }
    else if ((v28 & 0x80000000) == 0)
    {
      goto LABEL_47;
    }
    operator delete(v27);
    if (!v26)
      return;
    goto LABEL_48;
  }
}

void sub_22400DF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_223197D38((uint64_t)&a33);
  sub_22323DF84((uint64_t)&a10, a11);
  sub_22400D5A4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_22400DFE4(uint64_t a1, _QWORD *a2)
{
  sub_22400DB58((_BYTE *)(a1 - 16), a2);
}

void sub_22400DFEC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *p_p;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;
  char v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  BOOL v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  char v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  char v51;
  uint64_t v52;
  __int128 *p_s1;
  __int128 *v54;
  uint64_t v55;
  const void *v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  BOOL v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  _BOOL4 v72;
  char v73;
  uint64_t v74;
  __int128 *v75;
  __int128 *v76;
  uint64_t v77;
  const void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  BOOL v82;
  unint64_t *v83;
  unint64_t v84;
  std::string::size_type v85;
  std::__shared_weak_count *size;
  unint64_t *v87;
  unint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  std::mutex *v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  _BOOL4 v98;
  char v99;
  uint64_t v100;
  __int128 *v101;
  __int128 *v102;
  uint64_t v103;
  const void *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  BOOL v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  size_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  const void **v128;
  unsigned __int8 *v129;
  uint64_t v130;
  std::mutex *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count *v133;
  std::string::size_type v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *p_shared_weak_owners;
  unint64_t v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  std::string::size_type v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  std::mutex *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  std::string::size_type v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  _QWORD *v168;
  unint64_t *v169;
  unint64_t v170;
  char *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  std::mutex *v181;
  std::__shared_weak_count *v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  int v188;
  char *v189;
  size_t v190;
  unint64_t *v191;
  unint64_t v192;
  std::string::size_type v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  BOOL v199;
  uint64_t v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  const void **v209;
  unsigned __int8 *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  const void **v215;
  unsigned __int8 *v216;
  uint64_t v217;
  int v218;
  int v219;
  int v220;
  int v221;
  BOOL v223;
  _BOOL4 v224;
  _QWORD *v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  char v229;
  unint64_t v230;
  unsigned __int8 *v231;
  unsigned __int8 *v232;
  unsigned __int8 *v233;
  uint64_t v234;
  int64_t v235;
  int v236;
  _QWORD *v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  char v241;
  unint64_t v242;
  unsigned __int8 *v243;
  unsigned __int8 *v244;
  unsigned __int8 *v245;
  uint64_t v246;
  int64_t v247;
  int v248;
  int v249;
  unsigned int v250;
  std::recursive_mutex ***v251;
  std::recursive_mutex *v252;
  std::recursive_mutex **v253;
  std::recursive_mutex **v254;
  unsigned int v255;
  uint64_t v256;
  std::recursive_mutex ***v257;
  std::recursive_mutex **v258;
  std::recursive_mutex *v259;
  std::recursive_mutex **v260;
  uint64_t *v261;
  char v262;
  BOOL v263;
  std::recursive_mutex **v264;
  std::recursive_mutex **v265;
  std::recursive_mutex ***v266;
  std::recursive_mutex **v267;
  uint64_t *v268;
  std::recursive_mutex ***v269;
  std::recursive_mutex **v270;
  uint64_t *v271;
  std::recursive_mutex *v272;
  std::recursive_mutex **v273;
  uint64_t *v274;
  char v275;
  std::recursive_mutex **v276;
  uint64_t *v277;
  std::recursive_mutex **v278;
  uint64_t *v279;
  BOOL v280;
  std::recursive_mutex ***v281;
  __int128 v282;
  uint64_t v283;
  _QWORD *v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::recursive_mutex ***v291;
  unint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::recursive_mutex ***v298;
  __int128 v299;
  uint64_t v300;
  _QWORD *v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::string::size_type v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::recursive_mutex ***v309;
  unint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t *v316;
  unint64_t v317;
  unint64_t *v318;
  char *v319;
  char *v320;
  void *v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  int v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  std::string::size_type v331;
  std::__shared_weak_count *v332;
  std::condition_variable *v333;
  _OWORD *v334;
  std::mutex *v335;
  uint64_t v336;
  std::string v337;
  std::string __dst;
  char v339;
  void *v340;
  char v341;
  void *v342;
  char v343;
  char v344;
  char v345;
  __int128 __p;
  __int128 v347;
  uint64_t v348;
  unsigned __int8 v349;
  __int128 v350;
  uint64_t v351;
  uint64_t v352;
  __int128 v353;
  uint64_t v354;
  char v355;
  char v356;
  char v357;
  uint64_t v358;
  std::__shared_weak_count *v359;
  void *v360[2];
  char v361;
  char v362;
  void *v363;
  char v364;
  void *v365;
  char v366;
  char v367;
  char v368;
  void *v369;
  char *v370;
  unint64_t v371;
  __int128 __s1;
  __int128 v373;
  void *v374;
  unsigned __int8 v375;
  __int128 v376;
  void *v377;
  uint64_t v378;
  __int128 v379;
  uint64_t v380;
  char v381;
  char v382;
  std::string::size_type v383;
  std::string::size_type v384;
  std::string::size_type v385;
  std::__shared_weak_count *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390[3];

  v4 = a3;
  v369 = 0;
  v370 = 0;
  v371 = 0;
  v6 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
LABEL_644:
    if (!*(_BYTE *)(a1 + 72)
      || v369 == v370
      || (*(_QWORD *)&__s1 = a1,
          *((_QWORD *)&__s1 + 1) = &v369,
          v337.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC66408,
          v337.__r_.__value_.__l.__size_ = (std::string::size_type)&__s1,
          sub_22456BD10((uint64_t)&v337, (uint64_t)&__p),
          v357))
    {
      *(_BYTE *)(v4 + 120) = 1;
    }
    else
    {
      sub_22456A158((uint64_t)&__p, &v337);
      if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
        sub_223197FA4(&__dst, v337.__r_.__value_.__l.__data_, v337.__r_.__value_.__l.__size_);
      else
        __dst = v337;
      v339 = 1;
      LOBYTE(v340) = 0;
      v344 = 0;
      v345 = 1;
      sub_22400C190(8u, (__int128 *)&__dst, (uint64_t)&__s1);
      *(_OWORD *)v4 = __s1;
      *(_BYTE *)(v4 + 16) = 0;
      *(_BYTE *)(v4 + 112) = 0;
      if (v382)
      {
        *(_BYTE *)(v4 + 40) = 0;
        v327 = v375;
        if (v375)
        {
          *(_OWORD *)(v4 + 16) = v373;
          *(_QWORD *)(v4 + 32) = v374;
          v374 = 0;
          v373 = 0uLL;
          *(_BYTE *)(v4 + 40) = 1;
        }
        *(_BYTE *)(v4 + 48) = 0;
        *(_BYTE *)(v4 + 104) = 0;
        if (v381)
        {
          v328 = v378;
          *(_QWORD *)(v4 + 64) = v377;
          *(_OWORD *)(v4 + 48) = v376;
          v376 = 0uLL;
          *(_QWORD *)(v4 + 72) = v328;
          *(_OWORD *)(v4 + 80) = v379;
          *(_QWORD *)(v4 + 96) = v380;
          v377 = 0;
          v379 = 0uLL;
          v380 = 0;
          *(_BYTE *)(v4 + 104) = 1;
        }
        *(_BYTE *)(v4 + 112) = 1;
        *(_BYTE *)(v4 + 120) = 0;
        if (v327 && SHIBYTE(v374) < 0)
          operator delete((void *)v373);
      }
      else
      {
        *(_BYTE *)(v4 + 120) = 0;
      }
      if (v345)
      {
        if (v344)
        {
          if (v343 < 0)
            operator delete(v342);
          if (v341 < 0)
            operator delete(v340);
        }
        if (v339 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v337.__r_.__value_.__l.__data_);
      if (!v357 && v356)
      {
        if (v355)
        {
          if (SHIBYTE(v354) < 0)
            operator delete((void *)v353);
          if (SHIBYTE(v351) < 0)
            operator delete((void *)v350);
        }
        if (v349 && SHIBYTE(v348) < 0)
          operator delete((void *)v347);
      }
    }
    goto LABEL_648;
  }
  v334 = (_OWORD *)(a1 + 728);
  v335 = (std::mutex *)(a1 + 784);
  v333 = (std::condition_variable *)(a1 + 848);
  v329 = a1 + 904;
  v336 = a2[1];
LABEL_6:
  v8 = *(_QWORD *)(v6 + 8);
  if (!v8)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v8 = *(_QWORD *)(v6 + 8);
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v8 + 48))(&__p);
  v9 = BYTE7(v347);
  if (SBYTE7(v347) < 0)
    v9 = *((_QWORD *)&__p + 1);
  if (v9 == 8)
  {
    p_p = (__int128 *)__p;
    if ((SBYTE7(v347) & 0x80u) == 0)
      p_p = &__p;
    v11 = *(_QWORD *)"cv3d.net" == *(_QWORD *)p_p;
    if ((SBYTE7(v347) & 0x80000000) == 0)
    {
LABEL_15:
      if (!v11)
        goto LABEL_31;
      goto LABEL_16;
    }
  }
  else
  {
    v11 = 0;
    if ((SBYTE7(v347) & 0x80000000) == 0)
      goto LABEL_15;
  }
  operator delete((void *)__p);
  if (!v11)
  {
LABEL_31:
    v19 = v370;
    if ((unint64_t)v370 >= v371)
      goto LABEL_3;
    *(_QWORD *)v370 = &off_24EC6A3B8;
    *((_QWORD *)v19 + 1) = *(_QWORD *)(v6 + 8);
    v20 = *(_QWORD *)(v6 + 16);
    *((_QWORD *)v19 + 2) = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
LABEL_35:
    v7 = v19 + 24;
    goto LABEL_4;
  }
LABEL_16:
  v12 = *(_QWORD *)(v6 + 8);
  if (!v12)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v12 = *(_QWORD *)(v6 + 8);
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v12 + 48))(&__s1);
  v13 = 0;
  strcpy((char *)&__p, "cv3d.net");
  BYTE7(v347) = 8;
  DWORD2(v347) = 2;
  LOBYTE(v348) = 1;
  v14 = BYTE7(v373);
  if ((SBYTE7(v373) & 0x80u) == 0)
    v15 = BYTE7(v373);
  else
    v15 = *((_QWORD *)&__s1 + 1);
  if (v15 != 8)
  {
LABEL_39:
    if (v14 < 0)
      goto LABEL_88;
LABEL_40:
    if (v13)
      goto LABEL_41;
LABEL_89:
    v49 = *(_QWORD *)(v6 + 8);
    if (!v49)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v49 = *(_QWORD *)(v6 + 8);
    }
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v49 + 48))(&__s1);
    v50 = 0;
    strcpy((char *)&__p, "cv3d.net");
    BYTE7(v347) = 8;
    DWORD2(v347) = 5;
    LOBYTE(v348) = 1;
    v51 = BYTE7(v373);
    if ((SBYTE7(v373) & 0x80u) == 0)
      v52 = BYTE7(v373);
    else
      v52 = *((_QWORD *)&__s1 + 1);
    if (v52 == 8)
    {
      if ((BYTE7(v373) & 0x80) != 0)
      {
        if (memcmp((const void *)__s1, &__p, *((size_t *)&__s1 + 1)))
        {
          operator delete((void *)__s1);
          goto LABEL_132;
        }
      }
      else if (BYTE7(v373))
      {
        p_s1 = &__s1;
        v54 = &__p;
        v55 = BYTE7(v373);
        while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v54)
        {
          p_s1 = (__int128 *)((char *)p_s1 + 1);
          v54 = (__int128 *)((char *)v54 + 1);
          if (!--v55)
            goto LABEL_104;
        }
        v50 = 0;
        if ((BYTE7(v373) & 0x80) != 0)
        {
LABEL_131:
          operator delete((void *)__s1);
          if (v50)
          {
LABEL_107:
            v56 = *(const void **)(v6 + 8);
            v57 = *(std::__shared_weak_count **)(v6 + 16);
            if (v57)
            {
              p_shared_owners = (unint64_t *)&v57->__shared_owners_;
              do
                v59 = __ldxr(p_shared_owners);
              while (__stxr(v59 + 1, p_shared_owners));
            }
            if (v56)
            {
              v60 = __dynamic_cast(v56, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC66830, 0) != 0;
              if (!v57)
                goto LABEL_117;
            }
            else
            {
              v60 = 0;
              if (!v57)
                goto LABEL_117;
            }
            v61 = (unint64_t *)&v57->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (v62)
            {
LABEL_117:
              if (v60)
                goto LABEL_118;
LABEL_123:
              v63 = 0;
              v64 = 0;
              __p = 0uLL;
            }
            else
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
              if (!v60)
                goto LABEL_123;
LABEL_118:
              v64 = *(_QWORD *)(v6 + 8);
              v63 = *(std::__shared_weak_count **)(v6 + 16);
              if (v63)
              {
                v65 = (unint64_t *)&v63->__shared_owners_;
                do
                  v66 = __ldxr(v65);
                while (__stxr(v66 + 1, v65));
              }
              *(_QWORD *)&__p = v64;
              *((_QWORD *)&__p + 1) = v63;
            }
            std::mutex::lock(v335);
            if (!*(_BYTE *)(a1 + 776))
            {
              v334[1] = 0u;
              v334[2] = 0u;
              *v334 = 0u;
              *(_BYTE *)(a1 + 776) = 1;
            }
            v67 = *(_OWORD *)(v64 + 8);
            v68 = *(_OWORD *)(v64 + 24);
            *(_OWORD *)((char *)v334 + 25) = *(_OWORD *)(v64 + 33);
            *v334 = v67;
            v334[1] = v68;
            std::condition_variable::notify_all(v333);
            std::mutex::unlock(v335);
            if (v63)
            {
              v69 = (unint64_t *)&v63->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
LABEL_642:
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }
            goto LABEL_5;
          }
LABEL_132:
          v71 = *(_QWORD *)(v6 + 8);
          if (!v71)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v71 = *(_QWORD *)(v6 + 8);
          }
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v71 + 48))(&__s1);
          v72 = 0;
          strcpy((char *)&__p, "cv3d.net");
          BYTE7(v347) = 8;
          DWORD2(v347) = 3;
          LOBYTE(v348) = 1;
          v73 = BYTE7(v373);
          if ((SBYTE7(v373) & 0x80u) == 0)
            v74 = BYTE7(v373);
          else
            v74 = *((_QWORD *)&__s1 + 1);
          if (v74 == 8)
          {
            if ((BYTE7(v373) & 0x80) != 0)
            {
              if (memcmp((const void *)__s1, &__p, *((size_t *)&__s1 + 1)))
              {
                operator delete((void *)__s1);
                goto LABEL_191;
              }
            }
            else if (BYTE7(v373))
            {
              v75 = &__s1;
              v76 = &__p;
              v77 = BYTE7(v373);
              while (*(unsigned __int8 *)v75 == *(unsigned __int8 *)v76)
              {
                v75 = (__int128 *)((char *)v75 + 1);
                v76 = (__int128 *)((char *)v76 + 1);
                if (!--v77)
                  goto LABEL_147;
              }
              v72 = 0;
              if ((BYTE7(v373) & 0x80) != 0)
              {
LABEL_190:
                operator delete((void *)__s1);
                if (v72)
                {
LABEL_150:
                  v78 = *(const void **)(v6 + 8);
                  v79 = *(std::__shared_weak_count **)(v6 + 16);
                  if (v79)
                  {
                    v80 = (unint64_t *)&v79->__shared_owners_;
                    do
                      v81 = __ldxr(v80);
                    while (__stxr(v81 + 1, v80));
                  }
                  if (v78)
                  {
                    v82 = __dynamic_cast(v78, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC66780, 0) != 0;
                    if (!v79)
                      goto LABEL_160;
                  }
                  else
                  {
                    v82 = 0;
                    if (!v79)
                      goto LABEL_160;
                  }
                  v83 = (unint64_t *)&v79->__shared_owners_;
                  do
                    v84 = __ldaxr(v83);
                  while (__stlxr(v84 - 1, v83));
                  if (!v84)
                  {
                    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                    std::__shared_weak_count::__release_weak(v79);
                    if (!v82)
                      goto LABEL_183;
LABEL_161:
                    v85 = *(_QWORD *)(v6 + 8);
                    size = *(std::__shared_weak_count **)(v6 + 16);
                    if (size)
                    {
                      v87 = (unint64_t *)&size->__shared_owners_;
                      do
                        v88 = __ldxr(v87);
                      while (__stxr(v88 + 1, v87));
                    }
                    v337.__r_.__value_.__r.__words[0] = v85;
                    v337.__r_.__value_.__l.__size_ = (std::string::size_type)size;
                    if (*(_BYTE *)(a1 + 1112))
                      goto LABEL_165;
LABEL_184:
                    v91 = *(_QWORD *)(a1 + 1120);
                    v92 = *(std::mutex **)(v91 + 32);
                    if (v92)
                    {
                      std::mutex::lock(*(std::mutex **)(v91 + 32));
                      v94 = *(_QWORD *)(v91 + 40);
                      v93 = *(std::__shared_weak_count **)(v91 + 48);
                      *(_QWORD *)&__p = v94;
                      *((_QWORD *)&__p + 1) = v93;
                      if (v93)
                      {
                        v95 = (unint64_t *)&v93->__shared_owners_;
                        do
                          v96 = __ldxr(v95);
                        while (__stxr(v96 + 1, v95));
                      }
                      std::mutex::unlock(v92);
                    }
                    else
                    {
                      v94 = *(_QWORD *)(v91 + 40);
                      v93 = *(std::__shared_weak_count **)(v91 + 48);
                      *(_QWORD *)&__p = v94;
                      *((_QWORD *)&__p + 1) = v93;
                      if (v93)
                      {
                        v115 = (unint64_t *)&v93->__shared_owners_;
                        do
                          v116 = __ldxr(v115);
                        while (__stxr(v116 + 1, v115));
                      }
                    }
                    v117 = *(_QWORD *)(v94 + 8);
                    if (!v117)
                    {
                      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                      {
                        abort();
                      }
                      v117 = *(_QWORD *)(v94 + 8);
                    }
                    sub_224127444(v117, (_QWORD *)(v85 + 8));
                    if (v93)
                    {
                      v118 = (unint64_t *)&v93->__shared_owners_;
                      do
                        v119 = __ldaxr(v118);
                      while (__stlxr(v119 - 1, v118));
                      if (!v119)
                      {
                        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                        std::__shared_weak_count::__release_weak(v93);
                      }
                    }
                    size = (std::__shared_weak_count *)v337.__r_.__value_.__l.__size_;
                    goto LABEL_237;
                  }
LABEL_160:
                  if (v82)
                    goto LABEL_161;
LABEL_183:
                  size = 0;
                  v85 = 0;
                  *(_OWORD *)&v337.__r_.__value_.__l.__data_ = 0uLL;
                  if (!*(_BYTE *)(a1 + 1112))
                    goto LABEL_184;
LABEL_165:
                  v89 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
                  sub_224107AC8(v89, (uint64_t)&__s1);
                  __p = __s1;
                  sub_22319FFBC(&v347, &v373);
                  if (*(_BYTE *)(a1 + 112))
                  {
                    v90 = *(_QWORD *)(a1 + 104);
                    if (!v90)
                      sub_223198474();
                    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v90 + 48))(v90, &__p);
                  }
                  if (!v356)
                    goto LABEL_175;
                  if (!v355)
                    goto LABEL_172;
                  if ((SHIBYTE(v354) & 0x80000000) == 0)
                  {
                    if ((SHIBYTE(v351) & 0x80000000) == 0)
                      goto LABEL_172;
LABEL_273:
                    operator delete((void *)v350);
                    if (!v349)
                      goto LABEL_175;
LABEL_173:
                    if (SHIBYTE(v348) < 0)
                      operator delete((void *)v347);
                    goto LABEL_175;
                  }
                  operator delete((void *)v353);
                  if (SHIBYTE(v351) < 0)
                    goto LABEL_273;
LABEL_172:
                  if (v349)
                    goto LABEL_173;
LABEL_175:
                  if (v382)
                  {
                    if (!v381)
                      goto LABEL_179;
                    if ((SHIBYTE(v380) & 0x80000000) == 0)
                    {
                      if ((SHIBYTE(v377) & 0x80000000) == 0)
                        goto LABEL_179;
LABEL_276:
                      operator delete((void *)v376);
                      if (!v375)
                        goto LABEL_237;
LABEL_180:
                      if (SHIBYTE(v374) < 0)
                        operator delete((void *)v373);
                      goto LABEL_237;
                    }
                    operator delete((void *)v379);
                    if (SHIBYTE(v377) < 0)
                      goto LABEL_276;
LABEL_179:
                    if (v375)
                      goto LABEL_180;
                  }
LABEL_237:
                  if (size)
                  {
                    v120 = (unint64_t *)&size->__shared_owners_;
                    do
                      v121 = __ldaxr(v120);
                    while (__stlxr(v121 - 1, v120));
                    if (!v121)
                    {
                      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                      std::__shared_weak_count::__release_weak(size);
                    }
                  }
                  v5 = v336;
                  goto LABEL_5;
                }
LABEL_191:
                v97 = *(_QWORD *)(v6 + 8);
                if (!v97)
                {
                  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                  {
                    abort();
                  }
                  v97 = *(_QWORD *)(v6 + 8);
                }
                (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v97 + 48))(&__s1);
                v98 = 0;
                strcpy((char *)&__p, "cv3d.net");
                BYTE7(v347) = 8;
                DWORD2(v347) = 4;
                LOBYTE(v348) = 1;
                v99 = BYTE7(v373);
                if ((SBYTE7(v373) & 0x80u) == 0)
                  v100 = BYTE7(v373);
                else
                  v100 = *((_QWORD *)&__s1 + 1);
                if (v100 == 8)
                {
                  if ((BYTE7(v373) & 0x80) != 0)
                  {
                    if (memcmp((const void *)__s1, &__p, *((size_t *)&__s1 + 1)))
                    {
                      operator delete((void *)__s1);
LABEL_266:
                      v19 = v370;
                      if ((unint64_t)v370 < v371)
                      {
                        *(_QWORD *)v370 = &off_24EC6A3B8;
                        *((_QWORD *)v19 + 1) = *(_QWORD *)(v6 + 8);
                        v135 = *(_QWORD *)(v6 + 16);
                        *((_QWORD *)v19 + 2) = v135;
                        if (v135)
                        {
                          v136 = (unint64_t *)(v135 + 8);
                          do
                            v137 = __ldxr(v136);
                          while (__stxr(v137 + 1, v136));
                        }
                        goto LABEL_35;
                      }
LABEL_3:
                      v7 = sub_224014520((char **)&v369, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16));
LABEL_4:
                      v370 = v7;
                      goto LABEL_5;
                    }
                  }
                  else if (BYTE7(v373))
                  {
                    v101 = &__s1;
                    v102 = &__p;
                    v103 = BYTE7(v373);
                    while (*(unsigned __int8 *)v101 == *(unsigned __int8 *)v102)
                    {
                      v101 = (__int128 *)((char *)v101 + 1);
                      v102 = (__int128 *)((char *)v102 + 1);
                      if (!--v103)
                        goto LABEL_206;
                    }
                    v98 = 0;
                    if ((BYTE7(v373) & 0x80) != 0)
                    {
LABEL_265:
                      operator delete((void *)__s1);
                      if (!v98)
                        goto LABEL_266;
LABEL_209:
                      v104 = *(const void **)(v6 + 8);
                      v105 = *(std::__shared_weak_count **)(v6 + 16);
                      if (v105)
                      {
                        v106 = (unint64_t *)&v105->__shared_owners_;
                        do
                          v107 = __ldxr(v106);
                        while (__stxr(v107 + 1, v106));
                      }
                      if (v104)
                      {
                        v108 = __dynamic_cast(v104, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC66800, 0) != 0;
                        if (!v105)
                          goto LABEL_219;
                      }
                      else
                      {
                        v108 = 0;
                        if (!v105)
                          goto LABEL_219;
                      }
                      v109 = (unint64_t *)&v105->__shared_owners_;
                      do
                        v110 = __ldaxr(v109);
                      while (__stlxr(v110 - 1, v109));
                      if (!v110)
                      {
                        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                        std::__shared_weak_count::__release_weak(v105);
                        if (v108)
                        {
LABEL_220:
                          v112 = *(_QWORD *)(v6 + 8);
                          v111 = *(std::__shared_weak_count **)(v6 + 16);
                          if (v111)
                          {
                            v113 = (unint64_t *)&v111->__shared_owners_;
                            do
                              v114 = __ldxr(v113);
                            while (__stxr(v114 + 1, v113));
                          }
                          v358 = v112;
                          v359 = v111;
                          if (!*(_BYTE *)(v112 + 56))
                            goto LABEL_394;
LABEL_245:
                          v122 = *(_QWORD *)(a1 + 1168);
                          if (v122)
                          {
                            v123 = *(unsigned __int8 *)(v122 + 71);
                            v124 = *(_QWORD *)(v122 + 56);
                            if ((v123 & 0x80u) == 0)
                              v125 = *(unsigned __int8 *)(v122 + 71);
                            else
                              v125 = *(_QWORD *)(v122 + 56);
                            v126 = *(unsigned __int8 *)(v112 + 55);
                            v127 = (char)v126;
                            if ((v126 & 0x80u) != 0)
                              v126 = *(_QWORD *)(v112 + 40);
                            if (v125 == v126)
                            {
                              v128 = (const void **)(v122 + 48);
                              if (v127 >= 0)
                                v129 = (unsigned __int8 *)(v112 + 32);
                              else
                                v129 = *(unsigned __int8 **)(v112 + 32);
                              if ((v123 & 0x80) != 0)
                              {
                                if (!memcmp(*v128, v129, v124))
                                  goto LABEL_394;
                              }
                              else
                              {
                                if (!(_DWORD)v123)
                                  goto LABEL_394;
                                while (*(unsigned __int8 *)v128 == *v129)
                                {
                                  v128 = (const void **)((char *)v128 + 1);
                                  ++v129;
                                  if (!--v123)
                                    goto LABEL_394;
                                }
                              }
                            }
                            sub_223208674(&__s1, "Received a different target destination context during 'update enabled loggers' command. Retargeting of visualized textual log messages is not yet implemented. Command ignored.");
                            LOBYTE(v380) = 1;
                            sub_2231A974C((uint64_t)&__p, 0x16u, &__s1);
                            if (*(_BYTE *)(a1 + 112))
                            {
                              v140 = *(_QWORD *)(a1 + 104);
                              if (!v140)
                                sub_223198474();
                              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v140 + 48))(v140, &__p);
                            }
                            if (v356)
                            {
                              if (v355)
                              {
                                if (SHIBYTE(v354) < 0)
                                  operator delete((void *)v353);
                                if (SHIBYTE(v351) < 0)
                                  operator delete((void *)v350);
                              }
                              if (v349 && SHIBYTE(v348) < 0)
                                operator delete((void *)v347);
                            }
                            if ((_BYTE)v380)
                            {
                              if (BYTE8(v379))
                              {
                                if (SBYTE7(v379) < 0)
                                  operator delete(v377);
                                if (SBYTE7(v376) < 0)
                                  operator delete(v374);
                              }
                              if (BYTE8(v373) && SBYTE7(v373) < 0)
                                operator delete((void *)__s1);
                            }
LABEL_394:
                            v193 = *(_QWORD *)(a1 + 1168);
                            v194 = *(std::__shared_weak_count **)(a1 + 1176);
                            v383 = v193;
                            v384 = (std::string::size_type)v194;
                            if (v194)
                            {
                              v195 = (unint64_t *)&v194->__shared_owners_;
                              do
                                v196 = __ldxr(v195);
                              while (__stxr(v196 + 1, v195));
                            }
                            v197 = *(_QWORD *)(v112 + 8);
                            v198 = *(_QWORD *)(v112 + 16);
                            v332 = v194;
                            if (v197 == v198)
                            {
                              if (*(_BYTE *)(a1 + 1160))
                                v199 = v193 == 0;
                              else
                                v199 = 1;
                              v4 = a3;
                              v5 = v336;
                              if (!v199)
                                goto LABEL_558;
                              goto LABEL_634;
                            }
                            while (1)
                            {
                              if (!*(_BYTE *)(a1 + 1160))
                              {
                                sub_22455C98C((uint64_t *)&__p);
                                v200 = __p;
                                if (*(_BYTE *)(a1 + 1160))
                                {
                                  v201 = *((_QWORD *)&__p + 1);
                                  __p = 0uLL;
                                  *(_QWORD *)(a1 + 1144) = v200;
                                  v202 = *(std::__shared_weak_count **)(a1 + 1152);
                                  *(_QWORD *)(a1 + 1152) = v201;
                                  if (v202)
                                  {
                                    v203 = (unint64_t *)&v202->__shared_owners_;
                                    do
                                      v204 = __ldaxr(v203);
                                    while (__stlxr(v204 - 1, v203));
                                    if (!v204)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                                      std::__shared_weak_count::__release_weak(v202);
                                    }
                                  }
                                }
                                else
                                {
                                  *(_OWORD *)(a1 + 1144) = __p;
                                  __p = 0uLL;
                                  *(_BYTE *)(a1 + 1160) = 1;
                                }
                                sub_22455C510((uint64_t)&__p);
                              }
                              sub_22455F5CC(v390);
                              v205 = *(unsigned __int8 *)(v390[0] + 39);
                              if ((v205 & 0x80u) == 0)
                                v206 = *(unsigned __int8 *)(v390[0] + 39);
                              else
                                v206 = *(_QWORD *)(v390[0] + 24);
                              v207 = *(unsigned __int8 *)(v197 + 23);
                              v208 = (char)v207;
                              if ((v207 & 0x80u) != 0)
                                v207 = *(_QWORD *)(v197 + 8);
                              if (v206 == v207)
                              {
                                v209 = (const void **)(v390[0] + 16);
                                if (v208 >= 0)
                                  v210 = (unsigned __int8 *)v197;
                                else
                                  v210 = *(unsigned __int8 **)v197;
                                if ((v205 & 0x80) != 0)
                                {
                                  if (!memcmp(*v209, v210, *(_QWORD *)(v390[0] + 24)))
                                    goto LABEL_449;
                                }
                                else
                                {
                                  if (!*(_BYTE *)(v390[0] + 39))
                                    goto LABEL_449;
                                  while (*(unsigned __int8 *)v209 == *v210)
                                  {
                                    v209 = (const void **)((char *)v209 + 1);
                                    ++v210;
                                    if (!--v205)
                                      goto LABEL_449;
                                  }
                                }
                              }
                              sub_22455F6C0(&v389);
                              v211 = *(unsigned __int8 *)(v389 + 39);
                              if ((v211 & 0x80u) == 0)
                                v212 = *(unsigned __int8 *)(v389 + 39);
                              else
                                v212 = *(_QWORD *)(v389 + 24);
                              v213 = *(unsigned __int8 *)(v197 + 23);
                              v214 = (char)v213;
                              if ((v213 & 0x80u) != 0)
                                v213 = *(_QWORD *)(v197 + 8);
                              if (v212 == v213)
                              {
                                v215 = (const void **)(v389 + 16);
                                if (v214 >= 0)
                                  v216 = (unsigned __int8 *)v197;
                                else
                                  v216 = *(unsigned __int8 **)v197;
                                if ((v211 & 0x80) != 0)
                                {
                                  v224 = memcmp(*v215, v216, *(_QWORD *)(v389 + 24)) == 0;
                                }
                                else
                                {
                                  if (!*(_BYTE *)(v389 + 39))
                                  {
LABEL_449:
                                    v224 = 1;
                                    goto LABEL_452;
                                  }
                                  v217 = v211 - 1;
                                  do
                                  {
                                    v219 = *(unsigned __int8 *)v215;
                                    v215 = (const void **)((char *)v215 + 1);
                                    v218 = v219;
                                    v221 = *v216++;
                                    v220 = v221;
                                    v223 = v217-- != 0;
                                    v224 = v218 == v220;
                                  }
                                  while (v218 == v220 && v223);
                                }
                              }
                              else
                              {
                                v224 = 0;
                              }
LABEL_452:
                              sub_22455F5CC(&v388);
                              v225 = (_QWORD *)(v388 + 16);
                              v226 = *(unsigned __int8 *)(v388 + 39);
                              v227 = *(_QWORD *)(v388 + 24);
                              if ((v226 & 0x80u) == 0)
                                v228 = *(unsigned __int8 *)(v388 + 39);
                              else
                                v228 = *(_QWORD *)(v388 + 24);
                              v229 = *(_BYTE *)(v197 + 23);
                              if (v229 >= 0)
                                v230 = *(unsigned __int8 *)(v197 + 23);
                              else
                                v230 = *(_QWORD *)(v197 + 8);
                              if (v229 >= 0)
                                v231 = (unsigned __int8 *)v197;
                              else
                                v231 = *(unsigned __int8 **)v197;
                              if (v228 != v230)
                                goto LABEL_468;
                              if ((v226 & 0x80) == 0)
                              {
                                if (!*(_BYTE *)(v388 + 39))
                                  goto LABEL_504;
                                v232 = v231;
                                v233 = (unsigned __int8 *)(v388 + 16);
                                v234 = *(unsigned __int8 *)(v388 + 39);
                                while (*v233 == *v232)
                                {
                                  ++v233;
                                  ++v232;
                                  if (!--v234)
                                    goto LABEL_504;
                                }
LABEL_468:
                                if ((v226 & 0x80) != 0)
                                {
                                  v225 = (_QWORD *)*v225;
                                  v235 = *(_QWORD *)(v388 + 24);
                                }
                                else
                                {
                                  v235 = *(unsigned __int8 *)(v388 + 39);
                                }
                                goto LABEL_472;
                              }
                              v225 = (_QWORD *)*v225;
                              v236 = memcmp(v225, v231, *(_QWORD *)(v388 + 24));
                              v235 = v227;
                              if (!v236)
                                goto LABEL_504;
LABEL_472:
                              if (v235 > (uint64_t)v230 || memcmp(v231, v225, v235))
                                goto LABEL_474;
                              if ((v226 & 0x80) != 0)
                              {
                                if (v230 <= v227)
                                  goto LABEL_474;
                              }
                              else
                              {
                                v227 = v226;
                                if (v230 <= v226)
                                  goto LABEL_474;
                              }
                              if (v231[v227] == 46)
                              {
LABEL_504:
                                v249 = 0;
                                v250 = *(_DWORD *)(v197 + 24);
                                if (!v224)
                                  goto LABEL_524;
                                goto LABEL_505;
                              }
LABEL_474:
                              sub_22455F6C0(&v387);
                              v237 = (_QWORD *)(v387 + 16);
                              v238 = *(unsigned __int8 *)(v387 + 39);
                              v239 = *(_QWORD *)(v387 + 24);
                              if ((v238 & 0x80u) == 0)
                                v240 = *(unsigned __int8 *)(v387 + 39);
                              else
                                v240 = *(_QWORD *)(v387 + 24);
                              v241 = *(_BYTE *)(v197 + 23);
                              if (v241 >= 0)
                                v242 = *(unsigned __int8 *)(v197 + 23);
                              else
                                v242 = *(_QWORD *)(v197 + 8);
                              if (v241 >= 0)
                                v243 = (unsigned __int8 *)v197;
                              else
                                v243 = *(unsigned __int8 **)v197;
                              if (v240 != v242)
                                goto LABEL_490;
                              if ((v238 & 0x80) != 0)
                              {
                                v237 = (_QWORD *)*v237;
                                v248 = memcmp(v237, v243, *(_QWORD *)(v387 + 24));
                                v247 = v239;
                                if (v248)
                                  goto LABEL_497;
                              }
                              else if (*(_BYTE *)(v387 + 39))
                              {
                                v244 = v243;
                                v245 = (unsigned __int8 *)(v387 + 16);
                                v246 = *(unsigned __int8 *)(v387 + 39);
                                while (*v245 == *v244)
                                {
                                  ++v245;
                                  ++v244;
                                  if (!--v246)
                                    goto LABEL_523;
                                }
LABEL_490:
                                if ((v238 & 0x80) != 0)
                                {
                                  v237 = (_QWORD *)*v237;
                                  v247 = *(_QWORD *)(v387 + 24);
                                }
                                else
                                {
                                  v247 = *(unsigned __int8 *)(v387 + 39);
                                }
LABEL_497:
                                if (v247 > (uint64_t)v242 || memcmp(v243, v237, v247))
                                  goto LABEL_406;
                                if ((v238 & 0x80) != 0)
                                {
                                  if (v242 <= v239)
                                    goto LABEL_406;
                                }
                                else
                                {
                                  v239 = v238;
                                  if (v242 <= v238)
                                    goto LABEL_406;
                                }
                                if (v243[v239] != 46)
                                  goto LABEL_406;
                              }
LABEL_523:
                              v249 = 1;
                              v250 = *(_DWORD *)(v197 + 24);
                              if (!v224)
                              {
LABEL_524:
                                v256 = 0x100000001;
                                switch(v250)
                                {
                                  case 0u:
                                    v266 = *(std::recursive_mutex ****)(a1 + 1144);
                                    if (v249)
                                    {
                                      v252 = **v266;
                                      std::recursive_mutex::lock(v252);
                                      v267 = *v266;
                                      if (*((_DWORD *)*v266 + 28) == 2)
                                      {
                                        v268 = (uint64_t *)v267[10];
                                        *(_QWORD *)&__p = v267[12];
                                        sub_22455E4F0(v268, (uint64_t)&__p, v197, 0x100000006);
                                      }
                                    }
                                    else
                                    {
                                      v252 = **v266;
                                      std::recursive_mutex::lock(v252);
                                      v278 = *v266;
                                      if (*((_DWORD *)*v266 + 29) == 2)
                                      {
                                        v279 = (uint64_t *)v278[10];
                                        *(_QWORD *)&__p = v278[13];
                                        sub_22455E4F0(v279, (uint64_t)&__p, v197, 0x100000006);
                                      }
                                    }
                                    goto LABEL_405;
                                  case 1u:
                                    v269 = *(std::recursive_mutex ****)(a1 + 1144);
                                    if (v249)
                                    {
                                      v252 = **v269;
                                      std::recursive_mutex::lock(v252);
                                      v270 = *v269;
                                      if (*((_DWORD *)*v269 + 28) == 2)
                                      {
                                        v271 = (uint64_t *)v270[10];
                                        *(_QWORD *)&__p = v270[12];
                                        sub_22455E4F0(v271, (uint64_t)&__p, v197, 0);
                                      }
                                    }
                                    else
                                    {
                                      v252 = **v269;
                                      std::recursive_mutex::lock(v252);
                                      v276 = *v269;
                                      if (*((_DWORD *)*v269 + 29) == 2)
                                      {
                                        v277 = (uint64_t *)v276[10];
                                        *(_QWORD *)&__p = v276[13];
                                        sub_22455E4F0(v277, (uint64_t)&__p, v197, 0);
                                      }
                                    }
                                    goto LABEL_405;
                                  case 2u:
                                    goto LABEL_538;
                                  case 3u:
                                    v256 = 0x100000002;
                                    v257 = *(std::recursive_mutex ****)(a1 + 1144);
                                    v258 = *v257;
                                    if (!v249)
                                      goto LABEL_512;
                                    goto LABEL_539;
                                  case 4u:
                                    v256 = 0x100000003;
                                    v257 = *(std::recursive_mutex ****)(a1 + 1144);
                                    v258 = *v257;
                                    if (!v249)
                                      goto LABEL_512;
                                    goto LABEL_539;
                                  case 5u:
                                    v256 = 0x100000004;
LABEL_538:
                                    v257 = *(std::recursive_mutex ****)(a1 + 1144);
                                    v258 = *v257;
                                    if (v249)
                                      goto LABEL_539;
                                    goto LABEL_512;
                                  case 6u:
                                    v256 = 0x100000005;
                                    v257 = *(std::recursive_mutex ****)(a1 + 1144);
                                    v258 = *v257;
                                    if (!v249)
                                      goto LABEL_512;
                                    goto LABEL_539;
                                  case 7u:
                                    v256 = 0x100000006;
                                    v257 = *(std::recursive_mutex ****)(a1 + 1144);
                                    v258 = *v257;
                                    if (!v249)
                                      goto LABEL_512;
                                    goto LABEL_539;
                                  default:
                                    goto LABEL_713;
                                }
                              }
LABEL_505:
                              if (v250 > 1)
                              {
                                v255 = v250 - 2;
                                if (v255 >= 6)
                                {
LABEL_713:
                                  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/Client.cpp", 663, (uint64_t)"", 0, (uint64_t)"invalid argument", 16, (void (*)(void **))sub_22457406C);
LABEL_714:
                                  abort();
                                }
                                v256 = v255 + 0x100000001;
                                v257 = *(std::recursive_mutex ****)(a1 + 1144);
                                v258 = *v257;
                                if (v249)
                                {
LABEL_539:
                                  if (*((_DWORD *)v258 + 28) != 2)
                                  {
                                    sub_22455DA58(v257, 6);
                                    v257 = *(std::recursive_mutex ****)(a1 + 1144);
                                    v258 = *v257;
                                  }
                                  v272 = *v258;
                                  std::recursive_mutex::lock(*v258);
                                  v273 = *v257;
                                  if (*((_DWORD *)*v257 + 28) != 2)
                                  {
                                    std::recursive_mutex::unlock(v272);
LABEL_545:
                                    v263 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/Client.cpp", 702, (uint64_t)"ret == elog::APILogging::Available()", 36, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
LABEL_546:
                                    if (v263)
                                      goto LABEL_714;
                                    goto LABEL_406;
                                  }
                                  v274 = (uint64_t *)v273[10];
                                  *(_QWORD *)&__p = v273[12];
                                  v275 = sub_22455E4F0(v274, (uint64_t)&__p, v197, v256);
                                  std::recursive_mutex::unlock(v272);
                                  if ((v275 & 1) == 0)
                                    goto LABEL_545;
                                }
                                else
                                {
LABEL_512:
                                  if (*((_DWORD *)v258 + 29) != 2)
                                  {
                                    sub_22455DCBC(v257, 6);
                                    v257 = *(std::recursive_mutex ****)(a1 + 1144);
                                    v258 = *v257;
                                  }
                                  v259 = *v258;
                                  std::recursive_mutex::lock(*v258);
                                  v260 = *v257;
                                  if (*((_DWORD *)*v257 + 29) != 2)
                                  {
                                    std::recursive_mutex::unlock(v259);
LABEL_518:
                                    v263 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/Client.cpp", 708, (uint64_t)"ret == elog::APILogging::InternalAvailable()", 44, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                                    goto LABEL_546;
                                  }
                                  v261 = (uint64_t *)v260[10];
                                  *(_QWORD *)&__p = v260[13];
                                  v262 = sub_22455E4F0(v261, (uint64_t)&__p, v197, v256);
                                  std::recursive_mutex::unlock(v259);
                                  if ((v262 & 1) == 0)
                                    goto LABEL_518;
                                }
                              }
                              else
                              {
                                v251 = *(std::recursive_mutex ****)(a1 + 1144);
                                if (v249)
                                {
                                  v252 = **v251;
                                  std::recursive_mutex::lock(v252);
                                  v253 = *v251;
                                  *(_QWORD *)&__p = (*v251)[10];
                                  v337.__r_.__value_.__r.__words[0] = (std::string::size_type)v253[12];
                                  sub_22455E2B8((uint64_t **)&__p, (uint64_t *)&v337);
                                  v254 = *v251;
                                  if (*((_BYTE *)*v251 + 124))
                                    *((_BYTE *)v254 + 124) = 0;
                                  *((_DWORD *)v254 + 28) = 1;
                                }
                                else
                                {
                                  v252 = **v251;
                                  std::recursive_mutex::lock(v252);
                                  v264 = *v251;
                                  *(_QWORD *)&__p = (*v251)[10];
                                  v337.__r_.__value_.__r.__words[0] = (std::string::size_type)v264[13];
                                  sub_22455E36C((uint64_t **)&__p, (uint64_t *)&v337);
                                  v265 = *v251;
                                  if (*((_BYTE *)*v251 + 132))
                                    *((_BYTE *)v265 + 132) = 0;
                                  *((_DWORD *)v265 + 29) = 1;
                                }
LABEL_405:
                                std::recursive_mutex::unlock(v252);
                              }
LABEL_406:
                              v197 += 32;
                              if (v197 == v198)
                              {
                                v193 = v383;
                                if (*(_BYTE *)(a1 + 1160))
                                  v280 = v383 == 0;
                                else
                                  v280 = 1;
                                v4 = a3;
                                v5 = v336;
                                if (!v280)
                                {
LABEL_558:
                                  v281 = *(std::recursive_mutex ****)(a1 + 1144);
                                  if (*((_DWORD *)*v281 + 28) != 2)
                                    goto LABEL_596;
                                  sub_22455E8BC(v281, &__p);
                                  v282 = __p;
                                  if ((_QWORD)__p == *((_QWORD *)&__p + 1))
                                  {
                                    if ((_QWORD)__p)
                                    {
                                      *((_QWORD *)&__p + 1) = __p;
                                      operator delete((void *)__p);
                                    }
                                    goto LABEL_579;
                                  }
                                  v283 = *((_QWORD *)&__p + 1);
                                  v284 = (_QWORD *)__p;
                                  while (*v284 != v193)
                                  {
                                    v284 += 2;
                                    if (v284 == *((_QWORD **)&__p + 1))
                                    {
                                      v284 = (_QWORD *)*((_QWORD *)&__p + 1);
                                      break;
                                    }
                                  }
                                  if ((_QWORD)__p)
                                  {
                                    do
                                    {
                                      v285 = *(std::__shared_weak_count **)(v283 - 8);
                                      if (v285)
                                      {
                                        v286 = (unint64_t *)&v285->__shared_owners_;
                                        do
                                          v287 = __ldaxr(v286);
                                        while (__stlxr(v287 - 1, v286));
                                        if (!v287)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
                                          std::__shared_weak_count::__release_weak(v285);
                                        }
                                      }
                                      v283 -= 16;
                                    }
                                    while (v283 != (_QWORD)v282);
                                    *((_QWORD *)&__p + 1) = v282;
                                    operator delete((void *)__p);
                                    v199 = v284 == *((_QWORD **)&v282 + 1);
                                    v5 = v336;
                                    if (v199)
                                    {
                                      v193 = v383;
                                      goto LABEL_579;
                                    }
                                  }
                                  else
                                  {
                                    v199 = v284 == *((_QWORD **)&__p + 1);
                                    v5 = v336;
                                    if (!v199)
                                      goto LABEL_596;
LABEL_579:
                                    v288 = (std::__shared_weak_count *)v384;
                                    v337.__r_.__value_.__r.__words[0] = v193;
                                    v337.__r_.__value_.__l.__size_ = v384;
                                    if (v384)
                                    {
                                      v289 = (unint64_t *)(v384 + 8);
                                      do
                                        v290 = __ldxr(v289);
                                      while (__stxr(v290 + 1, v289));
                                      v291 = *(std::recursive_mutex ****)(a1 + 1144);
                                      *((_QWORD *)&__p + 1) = v288;
                                      do
                                        v292 = __ldxr(v289);
                                      while (__stxr(v292 + 1, v289));
                                    }
                                    else
                                    {
                                      v291 = *(std::recursive_mutex ****)(a1 + 1144);
                                      *((_QWORD *)&__p + 1) = 0;
                                    }
                                    *(_QWORD *)&__p = v193;
                                    sub_22455E6EC(v291, (uint64_t *)&__p);
                                    if (v288)
                                    {
                                      v293 = (unint64_t *)&v288->__shared_owners_;
                                      do
                                        v294 = __ldaxr(v293);
                                      while (__stlxr(v294 - 1, v293));
                                      if (!v294)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                                        std::__shared_weak_count::__release_weak(v288);
                                      }
                                    }
                                    v295 = (std::__shared_weak_count *)v337.__r_.__value_.__l.__size_;
                                    if (v337.__r_.__value_.__l.__size_)
                                    {
                                      v296 = (unint64_t *)(v337.__r_.__value_.__l.__size_ + 8);
                                      do
                                        v297 = __ldaxr(v296);
                                      while (__stlxr(v297 - 1, v296));
                                      if (!v297)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                                        std::__shared_weak_count::__release_weak(v295);
                                      }
                                    }
                                  }
LABEL_596:
                                  v298 = *(std::recursive_mutex ****)(a1 + 1144);
                                  if (*((_DWORD *)*v298 + 29) == 2)
                                  {
                                    sub_22455E9D8(v298, &__p);
                                    v299 = __p;
                                    if ((_QWORD)__p == *((_QWORD *)&__p + 1))
                                    {
                                      if ((_QWORD)__p)
                                      {
                                        *((_QWORD *)&__p + 1) = __p;
                                        operator delete((void *)__p);
                                      }
                                      goto LABEL_617;
                                    }
                                    v300 = *((_QWORD *)&__p + 1);
                                    v301 = (_QWORD *)__p;
                                    while (*v301 != v383)
                                    {
                                      v301 += 2;
                                      if (v301 == *((_QWORD **)&__p + 1))
                                      {
                                        v301 = (_QWORD *)*((_QWORD *)&__p + 1);
                                        break;
                                      }
                                    }
                                    if ((_QWORD)__p)
                                    {
                                      do
                                      {
                                        v302 = *(std::__shared_weak_count **)(v300 - 8);
                                        if (v302)
                                        {
                                          v303 = (unint64_t *)&v302->__shared_owners_;
                                          do
                                            v304 = __ldaxr(v303);
                                          while (__stlxr(v304 - 1, v303));
                                          if (!v304)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                                            std::__shared_weak_count::__release_weak(v302);
                                          }
                                        }
                                        v300 -= 16;
                                      }
                                      while (v300 != (_QWORD)v299);
                                      *((_QWORD *)&__p + 1) = v299;
                                      operator delete((void *)__p);
                                      v199 = v301 == *((_QWORD **)&v299 + 1);
                                      v5 = v336;
                                      if (v199)
                                        goto LABEL_617;
                                    }
                                    else
                                    {
                                      v199 = v301 == *((_QWORD **)&__p + 1);
                                      v5 = v336;
                                      if (!v199)
                                        goto LABEL_634;
LABEL_617:
                                      v305 = v383;
                                      v306 = (std::__shared_weak_count *)v384;
                                      v385 = v383;
                                      v386 = (std::__shared_weak_count *)v384;
                                      if (v384)
                                      {
                                        v307 = (unint64_t *)(v384 + 8);
                                        do
                                          v308 = __ldxr(v307);
                                        while (__stxr(v308 + 1, v307));
                                        v309 = *(std::recursive_mutex ****)(a1 + 1144);
                                        *((_QWORD *)&__p + 1) = v306;
                                        do
                                          v310 = __ldxr(v307);
                                        while (__stxr(v310 + 1, v307));
                                      }
                                      else
                                      {
                                        v309 = *(std::recursive_mutex ****)(a1 + 1144);
                                        *((_QWORD *)&__p + 1) = 0;
                                      }
                                      *(_QWORD *)&__p = v305;
                                      sub_22455E7D4(v309, (uint64_t *)&__p);
                                      if (v306)
                                      {
                                        v311 = (unint64_t *)&v306->__shared_owners_;
                                        do
                                          v312 = __ldaxr(v311);
                                        while (__stlxr(v312 - 1, v311));
                                        if (!v312)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                                          std::__shared_weak_count::__release_weak(v306);
                                        }
                                      }
                                      v313 = v386;
                                      if (v386)
                                      {
                                        v314 = (unint64_t *)&v386->__shared_owners_;
                                        do
                                          v315 = __ldaxr(v314);
                                        while (__stlxr(v315 - 1, v314));
                                        if (!v315)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
                                          std::__shared_weak_count::__release_weak(v313);
                                        }
                                      }
                                    }
                                  }
                                }
LABEL_634:
                                if (v332)
                                {
                                  v316 = (unint64_t *)&v332->__shared_owners_;
                                  do
                                    v317 = __ldaxr(v316);
                                  while (__stlxr(v317 - 1, v316));
                                  if (!v317)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
                                    std::__shared_weak_count::__release_weak(v332);
                                  }
                                }
                                v63 = v359;
                                if (v359)
                                {
                                  v318 = (unint64_t *)&v359->__shared_owners_;
                                  do
                                    v70 = __ldaxr(v318);
                                  while (__stlxr(v70 - 1, v318));
                                  goto LABEL_642;
                                }
LABEL_5:
                                v6 += 24;
                                if (v6 == v5)
                                  goto LABEL_644;
                                goto LABEL_6;
                              }
                            }
                          }
                          v130 = *(_QWORD *)(a1 + 1120);
                          v131 = *(std::mutex **)(v130 + 32);
                          if (!v131)
                          {
                            v138 = *(std::__shared_weak_count **)(v130 + 8);
                            if (!v138 || (v139 = std::__shared_weak_count::lock(v138)) == 0)
                            {
                              v146 = 0;
                              v147 = *(std::__shared_weak_count **)(a1 + 32);
                              if (v147)
                                goto LABEL_317;
                              goto LABEL_329;
                            }
                            v133 = v139;
                            v134 = *(_QWORD *)v130;
LABEL_306:
                            if (v134)
                            {
                              v331 = v134;
                              if (v133)
                              {
                                v141 = (unint64_t *)&v133->__shared_owners_;
                                do
                                  v142 = __ldxr(v141);
                                while (__stxr(v142 + 1, v141));
                                p_shared_weak_owners = (unint64_t *)&v133->__shared_weak_owners_;
                                do
                                  v144 = __ldxr(p_shared_weak_owners);
                                while (__stxr(v144 + 1, p_shared_weak_owners));
                                do
                                  v145 = __ldaxr(v141);
                                while (__stlxr(v145 - 1, v141));
                                if (!v145)
                                {
                                  ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                                  std::__shared_weak_count::__release_weak(v133);
                                }
                                v146 = v133;
                                goto LABEL_333;
                              }
                              goto LABEL_337;
                            }
                            v146 = v133;
                            v147 = *(std::__shared_weak_count **)(a1 + 32);
                            if (v147)
                            {
LABEL_317:
                              v148 = *(_QWORD *)(a1 + 24);
                              v149 = (unint64_t *)&v147->__shared_weak_owners_;
                              do
                                v150 = __ldxr(v149);
                              while (__stxr(v150 + 1, v149));
                              v151 = std::__shared_weak_count::lock(v147);
                              v133 = v151;
                              if (v151)
                              {
                                v152 = v148 + 8;
                                if (!v148)
                                  v152 = 0;
                                v331 = v152;
                                v153 = (unint64_t *)&v151->__shared_weak_owners_;
                                do
                                  v154 = __ldxr(v153);
                                while (__stxr(v154 + 1, v153));
                                std::__shared_weak_count::__release_weak(v147);
                                v155 = (unint64_t *)&v133->__shared_owners_;
                                do
                                  v156 = __ldaxr(v155);
                                while (__stlxr(v156 - 1, v155));
                                if (v156)
                                {
LABEL_332:
                                  if (v146)
                                  {
LABEL_333:
                                    v157 = (unint64_t *)&v146->__shared_owners_;
                                    do
                                      v158 = __ldaxr(v157);
                                    while (__stlxr(v158 - 1, v157));
                                    if (!v158)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                                      std::__shared_weak_count::__release_weak(v146);
                                    }
                                  }
LABEL_337:
                                  v159 = *(_QWORD *)(a1 + 1120);
                                  v160 = *(std::mutex **)(v159 + 32);
                                  if (v160)
                                  {
                                    v161 = v112 + 32;
                                    std::mutex::lock(*(std::mutex **)(v159 + 32));
                                    v163 = *(_QWORD *)(v159 + 40);
                                    v162 = *(std::__shared_weak_count **)(v159 + 48);
                                    v383 = v163;
                                    v384 = (std::string::size_type)v162;
                                    if (v162)
                                    {
                                      v164 = (unint64_t *)&v162->__shared_owners_;
                                      do
                                        v165 = __ldxr(v164);
                                      while (__stxr(v165 + 1, v164));
                                    }
                                    std::mutex::unlock(v160);
                                  }
                                  else
                                  {
                                    v161 = v112 + 32;
                                    v163 = *(_QWORD *)(v159 + 40);
                                    v162 = *(std::__shared_weak_count **)(v159 + 48);
                                    v383 = v163;
                                    v384 = (std::string::size_type)v162;
                                    if (v162)
                                    {
                                      v166 = (unint64_t *)&v162->__shared_owners_;
                                      do
                                        v167 = __ldxr(v166);
                                      while (__stxr(v167 + 1, v166));
                                    }
                                  }
                                  v168 = operator new(0x70uLL);
                                  v168[1] = 0;
                                  v168[2] = 0;
                                  *v168 = &off_24EC665A8;
                                  *(_QWORD *)&__s1 = v163;
                                  *((_QWORD *)&__s1 + 1) = v162;
                                  v383 = 0;
                                  v384 = 0;
                                  v337.__r_.__value_.__r.__words[0] = v331;
                                  v337.__r_.__value_.__l.__size_ = (std::string::size_type)v133;
                                  if (v133)
                                  {
                                    v169 = (unint64_t *)&v133->__shared_weak_owners_;
                                    do
                                      v170 = __ldxr(v169);
                                    while (__stxr(v170 + 1, v169));
                                  }
                                  LOBYTE(__p) = 0;
                                  BYTE8(v347) = 0;
                                  v171 = (char *)v161;
                                  if (*(_BYTE *)(v112 + 56))
                                  {
                                    if (*(char *)(v112 + 55) < 0)
                                    {
                                      sub_223197FA4(&__p, *(void **)(v112 + 32), *(_QWORD *)(v112 + 40));
                                    }
                                    else
                                    {
                                      __p = *(_OWORD *)v161;
                                      *(_QWORD *)&v347 = *(_QWORD *)(v161 + 16);
                                    }
                                    BYTE8(v347) = 1;
                                  }
                                  v385 = 0;
                                  v386 = 0;
                                  sub_224103C18((uint64_t)(v168 + 3), &__s1, &v337, &__p, &v385);
                                  if (BYTE8(v347) && SBYTE7(v347) < 0)
                                    operator delete((void *)__p);
                                  if (v133)
                                    std::__shared_weak_count::__release_weak(v133);
                                  if (v162)
                                  {
                                    v172 = (unint64_t *)&v162->__shared_owners_;
                                    do
                                      v173 = __ldaxr(v172);
                                    while (__stlxr(v173 - 1, v172));
                                    if (!v173)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                                      std::__shared_weak_count::__release_weak(v162);
                                    }
                                  }
                                  *(_QWORD *)(a1 + 1168) = v168 + 3;
                                  v174 = *(std::__shared_weak_count **)(a1 + 1176);
                                  *(_QWORD *)(a1 + 1176) = v168;
                                  if (v174)
                                  {
                                    v175 = (unint64_t *)&v174->__shared_owners_;
                                    do
                                      v176 = __ldaxr(v175);
                                    while (__stlxr(v176 - 1, v175));
                                    if (!v176)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                                      std::__shared_weak_count::__release_weak(v174);
                                    }
                                  }
                                  v177 = (std::__shared_weak_count *)v384;
                                  if (v384)
                                  {
                                    v178 = (unint64_t *)(v384 + 8);
                                    do
                                      v179 = __ldaxr(v178);
                                    while (__stlxr(v179 - 1, v178));
                                    if (!v179)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                                      std::__shared_weak_count::__release_weak(v177);
                                    }
                                  }
                                  v180 = *(_QWORD *)(a1 + 1120);
                                  v181 = *(std::mutex **)(v180 + 32);
                                  if (v181)
                                  {
                                    std::mutex::lock(*(std::mutex **)(v180 + 32));
                                    v183 = *(_QWORD *)(v180 + 40);
                                    v182 = *(std::__shared_weak_count **)(v180 + 48);
                                    *(_QWORD *)&__p = v183;
                                    *((_QWORD *)&__p + 1) = v182;
                                    if (v182)
                                    {
                                      v184 = (unint64_t *)&v182->__shared_owners_;
                                      do
                                        v185 = __ldxr(v184);
                                      while (__stxr(v185 + 1, v184));
                                    }
                                    std::mutex::unlock(v181);
                                  }
                                  else
                                  {
                                    v183 = *(_QWORD *)(v180 + 40);
                                    v182 = *(std::__shared_weak_count **)(v180 + 48);
                                    *(_QWORD *)&__p = v183;
                                    *((_QWORD *)&__p + 1) = v182;
                                    if (v182)
                                    {
                                      v186 = (unint64_t *)&v182->__shared_owners_;
                                      do
                                        v187 = __ldxr(v186);
                                      while (__stxr(v187 + 1, v186));
                                    }
                                  }
                                  v188 = *(char *)(v112 + 55);
                                  if (v188 >= 0)
                                    v189 = v171;
                                  else
                                    v189 = *(char **)(v112 + 32);
                                  if (v188 >= 0)
                                    v190 = *(unsigned __int8 *)(v112 + 55);
                                  else
                                    v190 = *(_QWORD *)(v112 + 40);
                                  sub_22412831C(v183, v189, v190, 1);
                                  if (v182)
                                  {
                                    v191 = (unint64_t *)&v182->__shared_owners_;
                                    do
                                      v192 = __ldaxr(v191);
                                    while (__stlxr(v192 - 1, v191));
                                    if (!v192)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                                      std::__shared_weak_count::__release_weak(v182);
                                    }
                                  }
                                  if (v133)
                                    std::__shared_weak_count::__release_weak(v133);
                                  goto LABEL_394;
                                }
                                ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                                v147 = v133;
                              }
                              else
                              {
                                v331 = 0;
                              }
                              std::__shared_weak_count::__release_weak(v147);
                              goto LABEL_332;
                            }
LABEL_329:
                            v331 = 0;
                            v133 = 0;
                            goto LABEL_332;
                          }
                          std::mutex::lock(*(std::mutex **)(v130 + 32));
                          v132 = *(std::__shared_weak_count **)(v130 + 8);
                          if (v132)
                          {
                            v133 = std::__shared_weak_count::lock(v132);
                            if (v133)
                            {
                              v134 = *(_QWORD *)v130;
LABEL_305:
                              std::mutex::unlock(v131);
                              goto LABEL_306;
                            }
                          }
                          else
                          {
                            v133 = 0;
                          }
                          v134 = 0;
                          goto LABEL_305;
                        }
LABEL_244:
                        v112 = 0;
                        v358 = 0;
                        v359 = 0;
                        if (!MEMORY[0x38])
                          goto LABEL_394;
                        goto LABEL_245;
                      }
LABEL_219:
                      if (v108)
                        goto LABEL_220;
                      goto LABEL_244;
                    }
LABEL_208:
                    if (!v98)
                      goto LABEL_266;
                    goto LABEL_209;
                  }
LABEL_206:
                  v98 = DWORD2(v373) == 4;
                }
                if (v99 < 0)
                  goto LABEL_265;
                goto LABEL_208;
              }
LABEL_149:
              if (v72)
                goto LABEL_150;
              goto LABEL_191;
            }
LABEL_147:
            v72 = DWORD2(v373) == 3;
          }
          if (v73 < 0)
            goto LABEL_190;
          goto LABEL_149;
        }
LABEL_106:
        if (v50)
          goto LABEL_107;
        goto LABEL_132;
      }
LABEL_104:
      v50 = DWORD2(v373) == 5;
    }
    if (v51 < 0)
      goto LABEL_131;
    goto LABEL_106;
  }
  if ((BYTE7(v373) & 0x80) != 0)
  {
    if (memcmp((const void *)__s1, &__p, *((size_t *)&__s1 + 1)))
    {
      operator delete((void *)__s1);
      goto LABEL_89;
    }
    goto LABEL_38;
  }
  if (!BYTE7(v373))
  {
LABEL_38:
    v13 = DWORD2(v373) == 2;
    goto LABEL_39;
  }
  v16 = &__s1;
  v17 = &__p;
  v18 = BYTE7(v373);
  while (*(unsigned __int8 *)v16 == *(unsigned __int8 *)v17)
  {
    v16 = (__int128 *)((char *)v16 + 1);
    v17 = (__int128 *)((char *)v17 + 1);
    if (!--v18)
      goto LABEL_38;
  }
  v13 = 0;
  if ((BYTE7(v373) & 0x80) == 0)
    goto LABEL_40;
LABEL_88:
  operator delete((void *)__s1);
  if (!v13)
    goto LABEL_89;
LABEL_41:
  v23 = *(const void **)(v6 + 8);
  v24 = *(std::__shared_weak_count **)(v6 + 16);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  if (v23)
  {
    v27 = __dynamic_cast(v23, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC666B0, 0) != 0;
    if (!v24)
      goto LABEL_51;
  }
  else
  {
    v27 = 0;
    if (!v24)
      goto LABEL_51;
  }
  v28 = (unint64_t *)&v24->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (v29)
  {
LABEL_51:
    if (v27)
      goto LABEL_52;
LABEL_60:
    v31 = 0;
    v30 = 0;
    __s1 = 0uLL;
    if (!MEMORY[0x38])
      goto LABEL_61;
LABEL_56:
    if (*(_DWORD *)(v30 + 48))
    {
      v34 = 1;
      v35 = 1;
      if (!v31)
        goto LABEL_79;
LABEL_75:
      v44 = (unint64_t *)&v31->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
      if (*(_BYTE *)(a1 + 1104))
      {
        v43 = *(_OWORD *)(v30 + 8);
        v42 = v30 + 8;
        __p = v43;
        v347 = *(_OWORD *)(v42 + 16);
        v348 = *(_QWORD *)(v42 + 32);
        sub_224120980(v329, &__p);
      }
      v34 = 0;
      v35 = 0;
      if (v31)
        goto LABEL_75;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (!v27)
      goto LABEL_60;
LABEL_52:
    v30 = *(_QWORD *)(v6 + 8);
    v31 = *(std::__shared_weak_count **)(v6 + 16);
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    *(_QWORD *)&__s1 = v30;
    *((_QWORD *)&__s1 + 1) = v31;
    if (*(_BYTE *)(v30 + 56))
      goto LABEL_56;
LABEL_61:
    if (*(_BYTE *)(a1 + 440))
    {
      v37 = *(_QWORD *)(a1 + 424);
      v36 = *(std::__shared_weak_count **)(a1 + 432);
      *(_QWORD *)&__p = v37;
      *((_QWORD *)&__p + 1) = v36;
      if (v36)
      {
        v38 = (unint64_t *)&v36->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      std::mutex::lock((std::mutex *)(v37 + 8));
      ++*(_QWORD *)v37;
      std::condition_variable::notify_all((std::condition_variable *)(v37 + 72));
      std::mutex::unlock((std::mutex *)(v37 + 8));
      if (v36)
      {
        v40 = (unint64_t *)&v36->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
    }
    v35 = 0;
    v34 = 1;
    if (v31)
      goto LABEL_75;
  }
LABEL_79:
  if ((v35 & 1) == 0)
  {
    v5 = v336;
    if (!v34)
      goto LABEL_5;
    v19 = v370;
    if ((unint64_t)v370 < v371)
    {
      *(_QWORD *)v370 = &off_24EC6A3B8;
      *((_QWORD *)v19 + 1) = *(_QWORD *)(v6 + 8);
      v46 = *(_QWORD *)(v6 + 16);
      *((_QWORD *)v19 + 2) = v46;
      if (v46)
      {
        v47 = (unint64_t *)(v46 + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      goto LABEL_35;
    }
    goto LABEL_3;
  }
  sub_223208674(v360, "Client received invalid sync command from server.");
  v368 = 1;
  sub_22400C190(8u, (__int128 *)v360, (uint64_t)&__p);
  *(_OWORD *)v4 = __p;
  *(_BYTE *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 112) = 0;
  if (v356)
  {
    *(_BYTE *)(v4 + 40) = 0;
    v325 = v349;
    if (v349)
    {
      *(_OWORD *)(v4 + 16) = v347;
      *(_QWORD *)(v4 + 32) = v348;
      v348 = 0;
      v347 = 0uLL;
      *(_BYTE *)(v4 + 40) = 1;
    }
    *(_BYTE *)(v4 + 48) = 0;
    *(_BYTE *)(v4 + 104) = 0;
    if (v355)
    {
      v326 = v352;
      *(_QWORD *)(v4 + 64) = v351;
      *(_OWORD *)(v4 + 48) = v350;
      v350 = 0uLL;
      *(_QWORD *)(v4 + 72) = v326;
      *(_OWORD *)(v4 + 80) = v353;
      *(_QWORD *)(v4 + 96) = v354;
      v351 = 0;
      v353 = 0uLL;
      v354 = 0;
      *(_BYTE *)(v4 + 104) = 1;
    }
    *(_BYTE *)(v4 + 112) = 1;
    *(_BYTE *)(v4 + 120) = 0;
    if (v325 && SHIBYTE(v348) < 0)
      operator delete((void *)v347);
  }
  else
  {
    *(_BYTE *)(v4 + 120) = 0;
  }
  if (v368)
  {
    if (v367)
    {
      if (v366 < 0)
        operator delete(v365);
      if (v364 < 0)
        operator delete(v363);
    }
    if (v362 && v361 < 0)
      operator delete(v360[0]);
  }
LABEL_648:
  v319 = (char *)v369;
  if (v369)
  {
    v320 = v370;
    v321 = v369;
    if (v370 != v369)
    {
      do
      {
        v322 = (std::__shared_weak_count *)*((_QWORD *)v320 - 1);
        if (v322)
        {
          v323 = (unint64_t *)&v322->__shared_owners_;
          do
            v324 = __ldaxr(v323);
          while (__stlxr(v324 - 1, v323));
          if (!v324)
          {
            ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
            std::__shared_weak_count::__release_weak(v322);
          }
        }
        v320 -= 24;
      }
      while (v320 != v319);
      v321 = v369;
    }
    v370 = v319;
    operator delete(v321);
  }
}

void sub_2240102F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a70;
  char a72;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  void *v76;

  if (a41 && a40 < 0)
    operator delete(__p);
  if (v72)
    std::__shared_weak_count::__release_weak(v72);
  sub_223167354((uint64_t)&a72);
  std::__shared_weak_count::~__shared_weak_count(v73);
  operator delete(v76);
  sub_223167354(v74 - 160);
  if (v72)
  {
    std::__shared_weak_count::__release_weak(v72);
    sub_223167354((uint64_t)&a55);
    sub_2231A62F0(&a70);
    _Unwind_Resume(a1);
  }
  sub_223167354((uint64_t)&a55);
  sub_2231A62F0(&a70);
  _Unwind_Resume(a1);
}

uint64_t sub_2240106C8(uint64_t a1)
{
  void *v3[4];
  char v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  char v11;
  char v12;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 32))(v3);
  if (v12 || !v11)
    return a1 + 8;
  if (v10)
  {
    if ((v9 & 0x80000000) == 0)
    {
      if ((v7 & 0x80000000) == 0)
        goto LABEL_7;
LABEL_11:
      operator delete(v6);
      if (!v5)
        return a1 + 8;
      goto LABEL_8;
    }
    operator delete(v8);
    if (v7 < 0)
      goto LABEL_11;
  }
LABEL_7:
  if (!v5)
    return a1 + 8;
LABEL_8:
  if ((v4 & 0x80000000) == 0)
    return a1 + 8;
  operator delete(v3[2]);
  return a1 + 8;
}

uint64_t sub_224010778(uint64_t a1)
{
  void *v3[4];
  char v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  char v11;
  char v12;

  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v3, a1 - 8);
  if (v12 || !v11)
    return a1;
  if (v10)
  {
    if ((v9 & 0x80000000) == 0)
    {
      if ((v7 & 0x80000000) == 0)
        goto LABEL_7;
LABEL_11:
      operator delete(v6);
      if (!v5)
        return a1;
      goto LABEL_8;
    }
    operator delete(v8);
    if (v7 < 0)
      goto LABEL_11;
  }
LABEL_7:
  if (!v5)
    return a1;
LABEL_8:
  if ((v4 & 0x80000000) == 0)
    return a1;
  operator delete(v3[2]);
  return a1;
}

void sub_224010828(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::mutex *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::mutex *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *p_shared_weak_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  __int128 v63;
  char v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  char v70;
  char v71;
  __int128 v72;
  void *v73;
  char v74;
  char v75;
  void *v76;
  char v77;
  void *__p;
  char v79;
  char v80;
  char v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v82, a2);
  if (!v82)
    goto LABEL_111;
  v3 = *(uint64_t **)(a1 + 1120);
  v4 = (std::mutex *)v3[4];
  if (v4)
  {
    std::mutex::lock((std::mutex *)v3[4]);
    v5 = (std::__shared_weak_count *)v3[1];
    if (v5)
    {
      v6 = std::__shared_weak_count::lock(v5);
      if (v6)
      {
        v7 = *v3;
        std::mutex::unlock(v4);
        if (v7)
          goto LABEL_6;
      }
      else
      {
        std::mutex::unlock(v4);
      }
    }
    else
    {
      v6 = 0;
      std::mutex::unlock(v4);
    }
    goto LABEL_14;
  }
  v10 = (std::__shared_weak_count *)v3[1];
  if (v10)
  {
    v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      v6 = v11;
      if (*v3)
      {
LABEL_6:
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        goto LABEL_109;
      }
LABEL_14:
      v12 = *(unsigned __int8 *)(a1 + 1112);
      if (v6)
      {
        v13 = (unint64_t *)&v6->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      if (v12)
        goto LABEL_111;
      goto LABEL_22;
    }
  }
  if (*(_BYTE *)(a1 + 1112))
    goto LABEL_111;
LABEL_22:
  sub_2241077E0((unsigned __int8 *)(a1 + 1128), (uint64_t)&v62);
  v72 = v62;
  sub_22319FFBC(&v73, &v63);
  if (*(_BYTE *)(a1 + 112))
  {
    v15 = *(_QWORD *)(a1 + 104);
    if (!v15)
      sub_223198474();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 48))(v15, &v72);
  }
  if (v81)
  {
    if (v80)
    {
      if (v79 < 0)
        operator delete(__p);
      if (v77 < 0)
        operator delete(v76);
    }
    if (v75 && v74 < 0)
      operator delete(v73);
  }
  if (v71)
  {
    if (v70)
    {
      if (v69 < 0)
        operator delete(v68);
      if (v67 < 0)
        operator delete(v66);
    }
    if (v65 && v64 < 0)
      operator delete((void *)v63);
  }
  v16 = *(uint64_t **)(a1 + 1120);
  v6 = v83;
  v60 = v82;
  v61 = v83;
  if (v83)
  {
    v17 = (unint64_t *)&v83->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)v16[1];
  if (v19)
  {
    v20 = std::__shared_weak_count::lock(v19);
    if (v20)
    {
      v21 = v20;
      v22 = *v16;
      v23 = (unint64_t *)&v20->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v21);
      }
      if (v22
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/Client.cpp", 66, (uint64_t)"!controlled_visuallogger.lock()", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_117;
      }
    }
  }
  if (!v16[2]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/Client.cpp", 67, (uint64_t)"owned_contexts", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_117;
  }
  v25 = (std::mutex *)v16[4];
  if (v25)
    goto LABEL_59;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/Client.cpp", 68, (uint64_t)"mutex", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_117:
    abort();
  }
  v25 = (std::mutex *)v16[4];
LABEL_59:
  std::mutex::lock(v25);
  v27 = v16[5];
  v26 = v16[6];
  *(_QWORD *)&v62 = v27;
  *((_QWORD *)&v62 + 1) = v26;
  if (v26)
  {
    v28 = (unint64_t *)(v26 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v30 = v16[5];
  }
  else
  {
    v30 = v27;
  }
  sub_224128888(v30, (uint64_t)&v72);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v60 + 80))(&v84, v60);
  if (v84 != v27)
  {
    v31 = v16[5];
    v32 = *(_QWORD **)(v31 + 8);
    if (!v32)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_118;
      }
      v32 = *(_QWORD **)(v31 + 8);
    }
    sub_224127320(v32, a1 + 16);
    v33 = v84;
    v34 = *(_QWORD *)(v84 + 8);
    if (!v34)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_118;
      }
      v34 = *(_QWORD *)(v33 + 8);
    }
    sub_224127444(v34, &v72);
  }
  if (v61)
  {
    p_shared_weak_owners = (unint64_t *)&v61->__shared_weak_owners_;
    do
      v36 = __ldxr(p_shared_weak_owners);
    while (__stxr(v36 + 1, p_shared_weak_owners));
  }
  v37 = (std::__shared_weak_count *)v16[1];
  *v16 = v60;
  v16[1] = (uint64_t)v61;
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  v39 = v84;
  v38 = v85;
  if (v85)
  {
    v40 = (unint64_t *)&v85->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = (std::__shared_weak_count *)v16[6];
  v16[5] = v39;
  v16[6] = (uint64_t)v38;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v84 != (_QWORD)v62)
  {
    v45 = v16[5];
    v46 = *(_QWORD *)(v45 + 8);
    if (v46)
    {
LABEL_90:
      sub_224126FD0(v46, a1 + 16);
      goto LABEL_91;
    }
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      v46 = *(_QWORD *)(v45 + 8);
      goto LABEL_90;
    }
LABEL_118:
    abort();
  }
LABEL_91:
  v47 = (std::__shared_weak_count *)v16[3];
  v16[2] = 0;
  v16[3] = 0;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v85;
  if (v85)
  {
    v51 = (unint64_t *)&v85->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  sub_22323DF84((uint64_t)&v72, *((char **)&v72 + 1));
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  std::mutex::unlock(v25);
  if (v6)
  {
    v56 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(v56);
    while (__stlxr(v9 - 1, v56));
LABEL_109:
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_111:
  v57 = v83;
  if (v83)
  {
    v58 = (unint64_t *)&v83->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
}

void sub_224010E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,char *a28)
{
  std::mutex *v28;
  uint64_t v29;

  sub_22323DF84((uint64_t)&a27, a28);
  sub_223167354((uint64_t)&a12);
  std::mutex::unlock(v28);
  sub_223167354((uint64_t)&a10);
  sub_223167354(v29 - 96);
  _Unwind_Resume(a1);
}

void sub_224010F4C(uint64_t a1, uint64_t a2)
{
  sub_224010828(a1 - 8, a2);
}

uint64_t sub_224010F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _OWORD v21[7];
  char v22;
  _BYTE v23[24];
  _BYTE *v24;
  char v25;
  _BYTE v26[24];
  _BYTE *v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24EC660D8;
  *(_QWORD *)(a1 + 8) = &unk_24EC66138;
  v26[0] = 0;
  v28 = 0;
  if (*(_BYTE *)(a3 + 32))
  {
    v11 = *(_QWORD *)(a3 + 24);
    if (v11)
    {
      if (v11 == a3)
      {
        v27 = v26;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a3 + 24))(a3, v26);
      }
      else
      {
        v27 = *(_BYTE **)(a3 + 24);
        *(_QWORD *)(a3 + 24) = 0;
      }
    }
    else
    {
      v27 = 0;
    }
    v28 = 1;
  }
  v23[0] = 0;
  v25 = 0;
  if (*(_BYTE *)(a4 + 32))
  {
    v12 = *(_QWORD *)(a4 + 24);
    if (v12)
    {
      if (v12 == a4)
      {
        v24 = v23;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a4 + 24))(a4, v23);
      }
      else
      {
        v24 = *(_BYTE **)(a4 + 24);
        *(_QWORD *)(a4 + 24) = 0;
      }
    }
    else
    {
      v24 = 0;
    }
    v25 = 1;
  }
  if (*(_BYTE *)(a2 + 64))
  {
    v13 = *(_QWORD **)(*(_QWORD *)(a2 + 56) + 8);
    v14 = 1;
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  sub_22400A5EC((uint64_t)v21, a2, (uint64_t)v26, (uint64_t)v23, v13, v14, a5, a6);
  if (!v22)
  {
    sub_22319593C((uint64_t)v21);
    sub_22401682C((uint64_t)v21);
  }
  *(_OWORD *)(a1 + 16) = v21[0];
  v21[0] = 0uLL;
  if (v25)
  {
    v16 = v24;
    if (v24 == v23)
    {
      v17 = 4;
      v16 = v23;
    }
    else
    {
      if (!v24)
        goto LABEL_25;
      v17 = 5;
    }
    (*(void (**)(_QWORD *, uint64_t))(*v16 + 8 * v17))(v16, v15);
  }
LABEL_25:
  if (v28)
  {
    v18 = v27;
    if (v27 == v26)
    {
      v19 = 4;
      v18 = v26;
      goto LABEL_30;
    }
    if (v27)
    {
      v19 = 5;
LABEL_30:
      (*(void (**)(_QWORD *, uint64_t))(*v18 + 8 * v19))(v18, v15);
    }
  }
  return a1;
}

void sub_224011174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_224011214(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_24EC660D8;
  a1[1] = &unk_24EC66138;
  v2 = (std::__shared_weak_count *)a1[3];
  a1[2] = 0;
  a1[3] = 0;
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  v5 = (std::__shared_weak_count *)a1[3];
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2240112C8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(a1 - 1) = &off_24EC660D8;
  v1 = (std::__shared_weak_count *)a1[2];
  *a1 = &unk_24EC66138;
  a1[1] = 0;
  a1[2] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    v5 = (std::__shared_weak_count *)a1[2];
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_224011378(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_24EC660D8;
  a1[1] = &unk_24EC66138;
  v2 = (std::__shared_weak_count *)a1[3];
  a1[2] = 0;
  a1[3] = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    v5 = (std::__shared_weak_count *)a1[3];
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  JUMPOUT(0x227684CE8);
}

void sub_22401142C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(a1 - 1) = &off_24EC660D8;
  v1 = (std::__shared_weak_count *)a1[2];
  *a1 = &unk_24EC66138;
  a1[1] = 0;
  a1[2] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    v5 = (std::__shared_weak_count *)a1[2];
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2240114F0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) + 8;
}

uint64_t sub_2240114FC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_22401150C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_22401151C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_22401152C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_22401153C(uint64_t a1)
{
  void *v3[4];
  char v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  char v11;
  char v12;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 16) + 32))(v3);
  if (v12 || !v11)
    return a1 + 8;
  if (v10)
  {
    if ((v9 & 0x80000000) == 0)
    {
      if ((v7 & 0x80000000) == 0)
        goto LABEL_7;
LABEL_11:
      operator delete(v6);
      if (!v5)
        return a1 + 8;
      goto LABEL_8;
    }
    operator delete(v8);
    if (v7 < 0)
      goto LABEL_11;
  }
LABEL_7:
  if (!v5)
    return a1 + 8;
LABEL_8:
  if ((v4 & 0x80000000) == 0)
    return a1 + 8;
  operator delete(v3[2]);
  return a1 + 8;
}

uint64_t sub_2240115F0(uint64_t a1)
{
  void *v3[4];
  char v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  char v11;
  char v12;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 8) + 32))(v3);
  if (v12 || !v11)
    return a1;
  if (v10)
  {
    if ((v9 & 0x80000000) == 0)
    {
      if ((v7 & 0x80000000) == 0)
        goto LABEL_7;
LABEL_11:
      operator delete(v6);
      if (!v5)
        return a1;
      goto LABEL_8;
    }
    operator delete(v8);
    if (v7 < 0)
      goto LABEL_11;
  }
LABEL_7:
  if (!v5)
    return a1;
LABEL_8:
  if ((v4 & 0x80000000) == 0)
    return a1;
  operator delete(v3[2]);
  return a1;
}

void sub_2240116A4(uint64_t a1, uint64_t a2)
{
  sub_224010828(*(_QWORD *)(a1 + 16), a2);
}

void sub_2240116AC(uint64_t a1, uint64_t a2)
{
  sub_224010828(*(_QWORD *)(a1 + 8), a2);
}

void sub_2240116BC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::mutex *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::mutex *)a1[4];
    a1[4] = 0;
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (std::mutex *)a1[4];
    a1[4] = 0;
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[3];
      if (!v6)
        goto LABEL_11;
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        v9 = (std::__shared_weak_count *)a1[1];
        if (!v9)
          goto LABEL_17;
      }
      else
      {
LABEL_11:
        v9 = (std::__shared_weak_count *)a1[1];
        if (!v9)
          goto LABEL_17;
      }
      std::__shared_weak_count::__release_weak(v9);
LABEL_17:
      JUMPOUT(0x227684CE8);
    }
  }
  std::mutex::~mutex(v5);
  MEMORY[0x227684CE8]();
  goto LABEL_7;
}

void sub_2240117AC()
{
  JUMPOUT(0x227684CE8);
}

void sub_2240117C0(uint64_t a1)
{
  uint64_t **v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19[2];
  _QWORD v20[3];
  _QWORD *v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v1 = *(uint64_t ***)(a1 + 8);
  v2 = (uint64_t)v1[1];
  v3 = *(_DWORD *)(v2 + 32);
  v15 = *(_OWORD *)(v2 + 112);
  v16 = *(_QWORD *)(v2 + 128);
  v4 = **v1;
  v20[0] = &off_24EC66230;
  v20[1] = v4;
  v21 = v20;
  v22 = 1;
  v19[0] = 0;
  v19[1] = 0;
  *(_QWORD *)&v18 = v4;
  *((_QWORD *)&v18 + 1) = 1;
  v17 = v3;
  v5 = operator new(0x110uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_24EC6B190;
  v6 = v5 + 3;
  sub_2241350BC((uint64_t)(v5 + 3), &v17, v2, v19, &v15, &v18, (uint64_t)v20);
  v9 = **v1;
  if (*(_BYTE *)(v9 + 144))
  {
    v10 = *(std::__shared_weak_count **)(v9 + 136);
    *(_QWORD *)(v9 + 128) = v6;
    *(_QWORD *)(v9 + 136) = v5;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    *(_QWORD *)(v9 + 120) = &off_24EC6B1F0;
    *(_QWORD *)(v9 + 128) = v6;
    *(_QWORD *)(v9 + 136) = v5;
    *(_BYTE *)(v9 + 144) = 1;
  }
  if (v22)
  {
    v13 = v21;
    if (v21 == v20)
    {
      v14 = 4;
      v13 = v20;
    }
    else
    {
      if (!v21)
        return;
      v14 = 5;
    }
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v13 + 8 * v14))(v13, v7, v8);
  }
}

void sub_224011940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21)
{
  std::__shared_weak_count *v21;
  void *v23;
  char *v24;
  uint64_t v25;

  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  if (a21)
  {
    v24 = a20;
    if (a20 == &a17)
    {
      v25 = 4;
      v24 = &a17;
    }
    else
    {
      if (!a20)
        goto LABEL_7;
      v25 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
  }
LABEL_7:
  _Unwind_Resume(a1);
}

void sub_22401199C()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2240119B0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC66230;
  result[1] = v3;
  return result;
}

uint64_t sub_2240119E4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC66230;
  a2[1] = v2;
  return result;
}

void sub_224011A00(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  char v5;
  void *v6;
  char v7;
  void *__p;
  char v9;
  char v10;
  char v11;
  char v12;

  sub_22400DFEC(*(_QWORD *)(a1 + 8), a2, (uint64_t)&v2);
  if (!v12 && v11)
  {
    if (!v10)
      goto LABEL_7;
    if (v9 < 0)
    {
      operator delete(__p);
      if ((v7 & 0x80000000) == 0)
      {
LABEL_7:
        if (!v5)
          return;
        goto LABEL_8;
      }
    }
    else if ((v7 & 0x80000000) == 0)
    {
      goto LABEL_7;
    }
    operator delete(v6);
    if (!v5)
      return;
LABEL_8:
    if (v4 < 0)
      operator delete(v3);
  }
}

uint64_t sub_224011A90(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit3viz6Client4Impl15CommandReceiverE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3kit3viz6Client4Impl15CommandReceiverE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit3viz6Client4Impl15CommandReceiverE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit3viz6Client4Impl15CommandReceiverE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_224011AFC()
{
  return &unk_24EC662A0;
}

uint64_t sub_224011B08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = a1 + 24;
  v5 = (__int128 *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48))
  {
    if (!*(_BYTE *)(a1 + 48))
    {
      v10 = *v5;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)v4 = v10;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)v5 = 0;
      *(_BYTE *)(a1 + 48) = 1;
      v7 = a1 + 56;
      v8 = a2 + 56;
      v9 = *(unsigned __int8 *)(a1 + 200);
      if (v9 == *(unsigned __int8 *)(a2 + 200))
        goto LABEL_12;
LABEL_15:
      if (v9)
      {
        sub_224011E0C(v7);
      }
      else
      {
        v11 = *(_OWORD *)v8;
        *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
        *(_OWORD *)v7 = v11;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)v8 = 0;
        v12 = *(_OWORD *)(a2 + 80);
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 80) = v12;
        *(_QWORD *)(a2 + 88) = 0;
        *(_QWORD *)(a2 + 96) = 0;
        *(_QWORD *)(a2 + 80) = 0;
        v13 = *(_OWORD *)(a2 + 104);
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
        *(_OWORD *)(a1 + 104) = v13;
        *(_QWORD *)(a2 + 112) = 0;
        *(_QWORD *)(a2 + 120) = 0;
        *(_QWORD *)(a2 + 104) = 0;
        v14 = *(_OWORD *)(a2 + 128);
        *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = v14;
        *(_QWORD *)(a2 + 128) = 0;
        *(_QWORD *)(a2 + 136) = 0;
        *(_QWORD *)(a2 + 144) = 0;
        v15 = *(_OWORD *)(a2 + 152);
        *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 152) = v15;
        *(_QWORD *)(a2 + 152) = 0;
        *(_QWORD *)(a2 + 160) = 0;
        *(_QWORD *)(a2 + 168) = 0;
        v16 = *(_OWORD *)(a2 + 176);
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
        *(_OWORD *)(a1 + 176) = v16;
        *(_QWORD *)(a2 + 176) = 0;
        *(_QWORD *)(a2 + 184) = 0;
        *(_QWORD *)(a2 + 192) = 0;
        *(_BYTE *)(a1 + 200) = 1;
      }
      goto LABEL_18;
    }
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)v4);
    *(_BYTE *)(a1 + 48) = 0;
LABEL_11:
    v7 = a1 + 56;
    v8 = a2 + 56;
    v9 = *(unsigned __int8 *)(a1 + 200);
    if (v9 == *(unsigned __int8 *)(a2 + 200))
      goto LABEL_12;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 48))
    goto LABEL_11;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)v4);
  v6 = *v5;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)v5 + 2);
  *(_OWORD *)v4 = v6;
  *(_BYTE *)(a2 + 47) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  v7 = a1 + 56;
  v8 = a2 + 56;
  v9 = *(unsigned __int8 *)(a1 + 200);
  if (v9 != *(unsigned __int8 *)(a2 + 200))
    goto LABEL_15;
LABEL_12:
  if (v9)
    sub_224011CCC(v7, (__int128 *)v8);
LABEL_18:
  v17 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v17;
  return a1;
}

uint64_t sub_224011CCC(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  void **v13;
  __int128 v14;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v7);
  v8 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v9);
  v10 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)v9 = v10;
  *((_BYTE *)a2 + 95) = 0;
  *((_BYTE *)a2 + 72) = 0;
  v11 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v11);
  v12 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)v11 = v12;
  *((_BYTE *)a2 + 119) = 0;
  *((_BYTE *)a2 + 96) = 0;
  v13 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v13);
  v14 = *(__int128 *)((char *)a2 + 120);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  *(_OWORD *)v13 = v14;
  *((_BYTE *)a2 + 143) = 0;
  *((_BYTE *)a2 + 120) = 0;
  return a1;
}

void sub_224011E0C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 144))
  {
    if (*(char *)(a1 + 143) < 0)
    {
      operator delete(*(void **)(a1 + 120));
      if ((*(char *)(a1 + 119) & 0x80000000) == 0)
      {
LABEL_4:
        if ((*(char *)(a1 + 95) & 0x80000000) == 0)
          goto LABEL_5;
        goto LABEL_12;
      }
    }
    else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_13;
    }
LABEL_12:
    operator delete(*(void **)(a1 + 72));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*(char *)(a1 + 47) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
LABEL_13:
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      {
LABEL_8:
        *(_BYTE *)(a1 + 144) = 0;
        return;
      }
LABEL_15:
      operator delete(*(void **)a1);
      goto LABEL_8;
    }
LABEL_14:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
}

uint64_t sub_224011EC0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 144))
    return a1;
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_4:
      if ((*(char *)(a1 + 95) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_13:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
    goto LABEL_14;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_13;
LABEL_7:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_14:
  operator delete(*(void **)a1);
  return a1;
}

char *sub_224011F80(char *__dst, __int128 *a2)
{
  __int128 v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE *v10;
  __int128 v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(__int128 *)((char *)a2 + 24);
      *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 5);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_223197FA4(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    sub_223197FA4(__dst + 48, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)__dst + 3) = v7;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_223197FA4(__dst + 72, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 72);
    *((_QWORD *)__dst + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v8;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_223197FA4(__dst + 96, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v9 = a2[6];
    *((_QWORD *)__dst + 14) = *((_QWORD *)a2 + 14);
    *((_OWORD *)__dst + 6) = v9;
  }
  v10 = __dst + 120;
  if (*((char *)a2 + 143) < 0)
  {
    sub_223197FA4(v10, *((void **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v11 = *(__int128 *)((char *)a2 + 120);
    *((_QWORD *)__dst + 17) = *((_QWORD *)a2 + 17);
    *(_OWORD *)v10 = v11;
  }
  return __dst;
}

void sub_2240120E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (*(char *)(v1 + 119) < 0)
  {
    operator delete(*v5);
    if ((*(char *)(v1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 71) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v4);
  if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2240121A8(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  if (*(_BYTE *)(a2 + 200))
  {
    sub_224011F80((char *)(a1 + 56), (__int128 *)(a2 + 56));
    *(_BYTE *)(a1 + 200) = 1;
  }
  v6 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v6;
  return a1;
}

void sub_224012264(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 48))
  {
    if (*(char *)(v1 + 47) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_224012298(uint64_t a1, unsigned int a2, __int128 *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  unsigned int v9;
  __int128 *v10;
  void *__dst[2];
  uint64_t v12;
  char v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  char v19;
  char v20;

  v4 = atomic_load((unsigned __int8 *)&qword_2557952D0);
  if ((v4 & 1) == 0)
  {
    v10 = a3;
    v9 = a2;
    v8 = __cxa_guard_acquire(&qword_2557952D0);
    a2 = v9;
    a3 = v10;
    if (v8)
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_2540CA608, &dword_22314D000);
      __cxa_guard_release(&qword_2557952D0);
      a2 = v9;
      a3 = v10;
    }
  }
  v5 = a2;
  sub_22319FFBC(__dst, a3);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = &off_2540CA608;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (!v20)
    return a1;
  *(_BYTE *)(a1 + 40) = 0;
  if (v13)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 32) = v12;
    __dst[1] = 0;
    v12 = 0;
    __dst[0] = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (!v19)
  {
    *(_BYTE *)(a1 + 112) = 1;
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  v6 = v16;
  *(_QWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v14;
  v14[0] = 0;
  v14[1] = 0;
  *(_QWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 96) = v18;
  __p[1] = 0;
  v18 = 0;
  v15 = 0;
  __p[0] = 0;
  *(_BYTE *)(a1 + 104) = 1;
  *(_BYTE *)(a1 + 112) = 1;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_13:
    operator delete(v14[0]);
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    goto LABEL_13;
LABEL_8:
  if (!v13)
    return a1;
LABEL_14:
  if ((SHIBYTE(v12) & 0x80000000) == 0)
    return a1;
  operator delete(__dst[0]);
  return a1;
}

void sub_224012448()
{
  JUMPOUT(0x227684CE8);
}

void sub_22401245C(uint64_t a1)
{
  uint64_t *v1;
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23[2];
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t (**v31)();
  uint64_t v32;
  std::__shared_weak_count *v33;
  _BYTE v34[16];
  void *v35;
  char v36;
  char v37;
  void *v38;
  char v39;
  void *__p;
  char v41;
  char v42;
  char v43;
  char v44;

  v1 = *(uint64_t **)(a1 + 8);
  v3 = *v1;
  v2 = (__int128 *)v1[1];
  v4 = v2[1];
  v23[0] = *v2;
  v23[1] = v4;
  v24 = 1;
  v25 = 1;
  sub_224012798(v23, &v26);
  v5 = (std::__shared_weak_count *)operator new(0x50uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC665F8;
  v5[1].__vftable = 0;
  *(_WORD *)((char *)&v5[1].__shared_weak_owners_ + 7) = 0;
  LOBYTE(v5[3].__vftable) = 0;
  v7 = v27;
  v8 = v28;
  v27 = 0;
  v28 = 0;
  v29 = v5 + 1;
  v30 = v5;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v31 = &off_24EC6A3B8;
  v32 = v7;
  v33 = v8;
  if (v8)
  {
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  sub_224129C90(*(_QWORD *)(v3 + 128), (uint64_t)&v29);
  v44 = 1;
  v14 = v33;
  if (v33)
  {
    v15 = (unint64_t *)&v33->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v30;
  if (v30)
  {
    v18 = (unint64_t *)&v30->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v28;
  if (!v28)
    goto LABEL_26;
  v21 = (unint64_t *)&v28->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (v44)
      return;
  }
  else
  {
LABEL_26:
    if (v44)
      return;
  }
  sub_22400D0F8(v1[2], (uint64_t)v34);
  *(_BYTE *)v1[3] = 0;
  if (!v44 && v43)
  {
    if (v42)
    {
      if (v41 < 0)
        operator delete(__p);
      if (v39 < 0)
        operator delete(v38);
    }
    if (v37)
    {
      if (v36 < 0)
        operator delete(v35);
    }
  }
}

void sub_2240126C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,int a48,__int16 a49,char a50,char a51,int a52,__int16 a53,char a54,char a55)
{
  if (!(_BYTE)a53 && (_BYTE)a49)
  {
    if (a47)
    {
      if (a46 < 0)
        operator delete(__p);
      if (a39 < 0)
        operator delete(a34);
    }
    if (a33)
    {
      if (a32 < 0)
      {
        operator delete(a27);
        _Unwind_Resume(exception_object);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_224012798@<X0>(__int128 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unsigned __int8 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = mach_continuous_time();
  v5 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)&v13);
    LODWORD(v12) = DWORD1(v13);
    LODWORD(v11) = v13;
    *(double *)&qword_255795558 = (double)v11 / (double)v12;
    __cxa_guard_release(&qword_255795560);
  }
  v17[0] = llround(*(double *)&qword_255795558 * (double)v4);
  v17[1] = 2;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v6 = a1[1];
  v13 = *a1;
  v14 = v6;
  v15 = a1[2];
  v16 = *((_QWORD *)a1 + 6);
  v7 = operator new();
  *(_QWORD *)v7 = &off_24EC666D8;
  v8 = v14;
  *(_OWORD *)(v7 + 8) = v13;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v15;
  *(_QWORD *)(v7 + 56) = v16;
  sub_2231AB0FC(v7 + 64, (uint64_t)v17);
  *(_QWORD *)v7 = &off_24EC66658;
  *a2 = &off_24EC6A3B8;
  a2[1] = v7;
  v9 = (_QWORD *)operator new();
  *v9 = &off_24EC6A4B0;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v7;
  a2[2] = v9;
  return sub_2231AD66C((uint64_t)v17);
}

void sub_224012948(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_224012960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224012984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  MEMORY[0x227684CE8](v9, 0x10B3C40A30D6217);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2240129B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2240129C4(_QWORD *a1)
{
  *a1 = &off_24EC666D8;
  sub_2231AD66C((uint64_t)(a1 + 8));
  return a1;
}

void sub_2240129F4(_QWORD *a1)
{
  *a1 = &off_24EC666D8;
  sub_2231AD66C((uint64_t)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224012A34(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_224012A3C(uint64_t a1, void *lpsrc)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL4 v8;
  BOOL v9;
  char v11;
  char *v12;

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC66698, 0);
  if (!v4)
    return 0;
  if ((void *)a1 == lpsrc)
    return 1;
  v5 = (*(_BYTE *)(a1 + 56) != 0) == (v4[56] != 0);
  if (*(_BYTE *)(a1 + 56) && v4[56])
  {
    v6 = *(unsigned int *)(a1 + 48);
    v7 = *((_DWORD *)v4 + 12);
    v8 = v7 == v6;
    v9 = v7 == -1;
    LODWORD(v5) = v7 == -1;
    if (v9)
      v8 = 0;
    if ((_DWORD)v6 == -1)
      v5 = v5;
    else
      v5 = v8;
    if ((_DWORD)v6 != -1 && v8)
    {
      v12 = &v11;
      return ((uint64_t (*)(char **, uint64_t, _BYTE *))off_24EC66368[v6])(&v12, a1 + 8, v4 + 8);
    }
  }
  return v5;
}

void sub_224012B3C(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_224013C88();
  sub_224012BF0(a1);
  sub_2231AC984(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 64, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_224012BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_224012BF0(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25578F410);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578F410))
  {
    v4 = sub_224013990();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_2231AD150((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_223197FA4(&xmmword_25578F3F8, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_25578F408 = *(_QWORD *)(v9 - 8);
      xmmword_25578F3F8 = v7;
    }
    sub_22319BB48(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578F3F8, &dword_22314D000);
    __cxa_guard_release(&qword_25578F410);
  }
  return sub_22401416C(&xmmword_25578F3F8, (uint64_t)"{", a1 + 8, (uint64_t)"}");
}

void sub_224012D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  __cxa_guard_abort(&qword_25578F410);
  _Unwind_Resume(a1);
}

void sub_224012D20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F410);
  _Unwind_Resume(a1);
}

void sub_224012D38(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.net");
  *(_DWORD *)(a1 + 24) = 2;
}

double sub_224012D64@<D0>(const void *a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  sub_224137744(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

_QWORD *sub_224012D98(_QWORD *a1)
{
  *a1 = &off_24EC666D8;
  sub_2231AD66C((uint64_t)(a1 + 8));
  return a1;
}

void sub_224012DC8(_QWORD *a1)
{
  *a1 = &off_24EC666D8;
  sub_2231AD66C((uint64_t)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224012E08(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_22401342C();
  return sub_224012F5C(v2, (uint64_t)"{", a1 + 8, (uint64_t)",", a1 + 64, (uint64_t)"}");
}

uint64_t sub_224012E60(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_224013188((uint64_t)v5, (uint64_t)v2, a1 + 8);
  if (v3 == -1)
    sub_22316DD70();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC66350[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC662F0[v3])(v5, v2);
  return result;
}

void sub_224012EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24EC662F0[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_224012F30(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_224012F5C(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_2231ABB0C((uint64_t *)&v19, (uint64_t)&__dst);
  sub_224013188((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC66308[v16])(&p_p_dst, &__dst);
  sub_2231AB90C((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC66308[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC66350[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC662F0[v16])(&p_dst, &__dst);
  return result;
}

void sub_2240130F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224013110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224013124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224013138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22401314C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224013160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224013174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224013188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21[0] = v5;
  sub_22411FB64((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC66338[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_2240133D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_2240133FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_224013418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_22401342C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578F290);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578F290))
    return &xmmword_25578F278;
  v2 = sub_224013508();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578F278, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578F288 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578F278 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578F278, &dword_22314D000);
  __cxa_guard_release(&qword_25578F290);
  return &xmmword_25578F278;
}

void sub_2240134F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F290);
  _Unwind_Resume(a1);
}

std::string *sub_224013508()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578F2B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578F2B0))
    return &stru_25578F298;
  sub_2240137AC((uint64_t)__p);
  sub_2240135F8((char *)__p, &stru_25578F298);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578F298, &dword_22314D000);
  __cxa_guard_release(&qword_25578F2B0);
  return &stru_25578F298;
}

void sub_2240135B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578F2B0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578F2B0);
  _Unwind_Resume(a1);
}

void sub_2240135F8(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_224013990();
  if (*((char *)v4 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_2231AC788();
  if (*((char *)v6 + 23) < 0)
  {
    sub_223197FA4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_22401375C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2240137AC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578F330);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578F330))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::Sync>]", qword_25578F318);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578F318, &dword_22314D000);
    __cxa_guard_release(&qword_25578F330);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578F350);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578F350))
  {
    v5 = sub_2231A38CC(qword_25578F318, "<", 0);
    sub_2231A37C8(qword_25578F318, 0, v5, qword_25578F338);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578F338, &dword_22314D000);
    __cxa_guard_release(&qword_25578F350);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578F370);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578F370))
  {
    sub_224573040((uint64_t)qword_25578F338, (uint64_t)&xmmword_25578F358);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578F358, &dword_22314D000);
    __cxa_guard_release(&qword_25578F370);
  }
  if (byte_25578F36F < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578F358, *((unint64_t *)&xmmword_25578F358 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578F358;
    *(_QWORD *)(a1 + 16) = unk_25578F368;
  }
}

void sub_224013948(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F370);
  _Unwind_Resume(a1);
}

void sub_224013960(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F350);
  _Unwind_Resume(a1);
}

void sub_224013978(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F330);
  _Unwind_Resume(a1);
}

__int128 *sub_224013990()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578F2D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578F2D0))
    return &xmmword_25578F2B8;
  v2 = (char *)sub_224013A6C();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_25578F2B8, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25578F2C8 = *((_QWORD *)v2 + 2);
    xmmword_25578F2B8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578F2B8, &dword_22314D000);
  __cxa_guard_release(&qword_25578F2D0);
  return &xmmword_25578F2B8;
}

void sub_224013A54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F2D0);
  _Unwind_Resume(a1);
}

void *sub_224013A6C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25578F2F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578F2F0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::Sync]", qword_25578F2D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578F2D8, &dword_22314D000);
    __cxa_guard_release(&qword_25578F2F0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25578F310);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25578F310))
    return &unk_25578F2F8;
  sub_224573040((uint64_t)qword_25578F2D8, (uint64_t)&unk_25578F2F8);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25578F2F8, &dword_22314D000);
  __cxa_guard_release(&qword_25578F310);
  return &unk_25578F2F8;
}

void sub_224013B5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F310);
  _Unwind_Resume(a1);
}

void sub_224013B74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F2F0);
  _Unwind_Resume(a1);
}

BOOL sub_224013B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  _BOOL8 result;

  if (*(_QWORD *)a2 != *(_QWORD *)a3)
    return 0;
  v3 = *(unsigned __int8 *)(a3 + 16);
  if (*(_BYTE *)(a2 + 16))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
  {
    if ((*(_BYTE *)(a2 + 16) != 0) == (v3 != 0))
      goto LABEL_10;
    return 0;
  }
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a3 + 8))
    return 0;
LABEL_10:
  result = (*(_BYTE *)(a2 + 32) != 0) == (*(_BYTE *)(a3 + 32) != 0);
  if (*(_BYTE *)(a2 + 32))
  {
    if (*(_BYTE *)(a3 + 32))
      return *(_QWORD *)(a2 + 24) == *(_QWORD *)(a3 + 24);
  }
  return result;
}

BOOL sub_224013C1C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  BOOL v3;

  if (*a2 != *a3 || *((_QWORD *)a2 + 1) != *((_QWORD *)a3 + 1))
    return 0;
  if (a2[24])
    v3 = a3[24] == 0;
  else
    v3 = 1;
  if (v3)
    return (a2[24] != 0) == (a3[24] != 0);
  else
    return *((_QWORD *)a2 + 2) == *((_QWORD *)a3 + 2);
}

std::string *sub_224013C88()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  __int128 *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void *v10[3];
  void *v11[2];
  char v12;
  void *__dst[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578F390);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578F390))
  {
    sub_223174DE4(v11, "viz::PackageData");
    v2 = sub_224013990();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v14 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v4 = sub_224013F70();
    if (*((char *)v4 + 23) < 0)
    {
      sub_223197FA4(&v15, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      v16 = *((_QWORD *)v4 + 2);
      v15 = v5;
    }
    v6 = sub_2232A0DB4();
    if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_223197FA4(&v17, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
    }
    else
    {
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v18 = v6->__r_.__value_.__r.__words[2];
      v17 = v7;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v20 = 0x400000000000000;
    sub_22319BD1C(v10, (uint64_t)__dst, 4uLL);
    sub_2245730F4((char *)v11, (uint64_t *)v10, &stru_25578F378, v8, v9);
    sub_22319BB48(v10);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v16) & 0x80000000) == 0)
          goto LABEL_16;
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete((void *)v17);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_22;
    }
LABEL_21:
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v12 & 0x80000000) == 0)
      {
LABEL_18:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578F378, &dword_22314D000);
        __cxa_guard_release(&qword_25578F390);
        return &stru_25578F378;
      }
LABEL_23:
      operator delete(v11[0]);
      goto LABEL_18;
    }
LABEL_22:
    operator delete(__dst[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_23;
  }
  return &stru_25578F378;
}

void sub_224013E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_22319BB48(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
    {
LABEL_10:
      if (a18 < 0)
        operator delete(a13);
      __cxa_guard_abort(&qword_25578F390);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_224013F48()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x224013F24);
  }
}

__int128 *sub_224013F70()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578F3B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578F3B0))
    return &xmmword_25578F398;
  v2 = (char *)sub_22401404C();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_25578F398, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25578F3A8 = *((_QWORD *)v2 + 2);
    xmmword_25578F398 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578F398, &dword_22314D000);
  __cxa_guard_release(&qword_25578F3B0);
  return &xmmword_25578F398;
}

void sub_224014034(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F3B0);
  _Unwind_Resume(a1);
}

void *sub_22401404C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25578F3D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578F3D0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::NetworkPackage]", qword_25578F3B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578F3B8, &dword_22314D000);
    __cxa_guard_release(&qword_25578F3D0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25578F3F0);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25578F3F0))
    return &unk_25578F3D8;
  sub_224573040((uint64_t)qword_25578F3B8, (uint64_t)&unk_25578F3D8);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25578F3D8, &dword_22314D000);
  __cxa_guard_release(&qword_25578F3F0);
  return &unk_25578F3D8;
}

void sub_22401413C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F3F0);
  _Unwind_Resume(a1);
}

void sub_224014154(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F3D0);
  _Unwind_Resume(a1);
}

uint64_t sub_22401416C(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_2231ABB0C((uint64_t *)&v14, (uint64_t)&__dst);
  sub_224013188((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC66308[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC66350[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC662F0[v11])(&p_dst, &__dst);
  return result;
}

void sub_2240142AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2240142C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2240142D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2240142EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224014300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224014314(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC665F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224014324(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC665F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_224014354(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 72) || (*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return;
LABEL_6:
    operator delete(*(void **)(a1 + 24));
    return;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_6;
}

void sub_2240143B0()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2240143C4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC66388;
  result[1] = v3;
  return result;
}

uint64_t sub_2240143F8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC66388;
  a2[1] = v2;
  return result;
}

uint64_t sub_224014414(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned int v8;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v1 + 440))
  {
    v2 = *(std::__shared_weak_count **)(v1 + 400);
    if (v2)
    {
      v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        v4 = v3;
        v5 = *(_QWORD *)(v1 + 392);
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (v7)
        {
          if (v5)
          {
LABEL_8:
            v8 = 0;
            goto LABEL_11;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v4);
          if (v5)
            goto LABEL_8;
        }
      }
    }
  }
  v8 = 1;
LABEL_11:
  if (*(_BYTE *)(v1 + 144))
    return 0;
  else
    return v8;
}

uint64_t sub_2240144A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d3kit3viz6Client4Impl8SyncImplENSt3__18optionalINS4_6chrono8durationIxNS4_5ratioILl1ELl10000"
                     "00000EEEEEEEENK3$_0clEvEUlvE0_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d3kit3viz6Client4Impl8SyncImplENSt3__18optionalINS4_6chrono8durationIxNS4_5ratioI"
                                "Ll1ELl1000000000EEEEEEEENK3$_0clEvEUlvE0_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d3kit3viz6Client4Impl8SyncImplENSt3__18optionalINS4_6chrono8durationIxNS4_5ratioILl1ELl1000000000EEEEEEEENK3$_0clEvEUlvE0_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d3kit3viz6Client4Impl8SyncImplENSt3__18optionalINS4_6chrono8durationIxNS4_5ratioILl1ELl1000000000EEEEEEEENK3$_0clEvEUlvE0_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_224014514()
{
  return &unk_24EC663E8;
}

char *sub_224014520(char **a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v4 = *a1;
  v5 = a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v7)
    v7 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  if (v7 > 0xAAAAAAAAAAAAAAALL)
    sub_223174E94();
  v10 = 24 * v7;
  v11 = (char *)operator new(24 * v7);
  v12 = &v11[24 * v6];
  *(_QWORD *)v12 = &off_24EC6A3B8;
  *((_QWORD *)v12 + 1) = a2;
  *((_QWORD *)v12 + 2) = a3;
  if (a3)
  {
    v13 = (unint64_t *)(a3 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v4 = *a1;
    v5 = a1[1];
  }
  v15 = &v11[v10];
  v16 = v12 + 24;
  if (v5 == v4)
  {
    *a1 = v12;
    a1[1] = v16;
    a1[2] = v15;
  }
  else
  {
    do
    {
      *((_QWORD *)v12 - 3) = &off_24EC6A3B8;
      v12 -= 24;
      *(_OWORD *)(v12 + 8) = *((_OWORD *)v5 - 1);
      *((_QWORD *)v5 - 2) = 0;
      *((_QWORD *)v5 - 1) = 0;
      v5 -= 24;
    }
    while (v5 != v4);
    v4 = *a1;
    v17 = a1[1];
    *a1 = v12;
    a1[1] = v16;
    a1[2] = v15;
    while (v17 != v4)
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v17 -= 24;
    }
  }
  if (v4)
    operator delete(v4);
  return v16;
}

void sub_2240146B0()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2240146C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(*v1 + 64);
  if (!v2)
    sub_223198474();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 48))(v2, v1[1]);
}

void sub_2240146F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC66448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224014704(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC66448;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224014734(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_224014744(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC66498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224014754(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC66498;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224014784(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_224014798()
{
  JUMPOUT(0x227684CE8);
}

void sub_2240147AC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t (**v20)();
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v23[4];
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  char v30;
  char v31;
  char v32;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = *v1;
  v3 = (uint64_t *)v1[1];
  v4 = (std::__shared_weak_count *)v3[1];
  v18 = *v3;
  v19 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = v3[3];
  v7 = (std::__shared_weak_count *)v3[4];
  v20 = &off_24EC6A3B8;
  v21 = v8;
  v22 = v7;
  if (v7)
  {
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)(v2 + 712);
  if (!v11)
    sub_223198474();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v23, v11, &v18);
  v12 = v22;
  if (!v22)
    goto LABEL_12;
  v13 = (unint64_t *)&v22->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v15 = v19;
    if (!v19)
      goto LABEL_16;
  }
  else
  {
LABEL_12:
    v15 = v19;
    if (!v19)
      goto LABEL_16;
  }
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (v32)
      return;
    goto LABEL_17;
  }
LABEL_16:
  if (v32)
    return;
LABEL_17:
  sub_22400D0F8(v1[2], (uint64_t)v23);
  if (!v32 && v31)
  {
    if (v30)
    {
      if (v29 < 0)
        operator delete(__p);
      if (v27 < 0)
        operator delete(v26);
    }
    if (v25)
    {
      if (v24 < 0)
        operator delete(v23[2]);
    }
  }
}

void sub_224014944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,int a38,__int16 a39,char a40,char a41,int a42,__int16 a43,char a44,char a45)
{
  if (!(_BYTE)a43 && (_BYTE)a39)
  {
    if (a37)
    {
      if (a36 < 0)
        operator delete(__p);
      if (a29 < 0)
        operator delete(a24);
    }
    if (a23)
    {
      if (a22 < 0)
      {
        operator delete(a17);
        _Unwind_Resume(exception_object);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2240149F4()
{
  JUMPOUT(0x227684CE8);
}

void sub_224014A08(uint64_t a1)
{
  sub_224129C90(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 128), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
}

void sub_224014A1C()
{
  JUMPOUT(0x227684CE8);
}

void sub_224014A30(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t (**v26)();
  uint64_t v27;
  std::__shared_weak_count *v28;
  _BYTE v29[16];
  void *v30;
  char v31;
  char v32;
  void *v33;
  char v34;
  void *__p;
  char v36;
  char v37;
  char v38;
  char v39;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = *v1;
  sub_224014D4C((_QWORD *)v1[1], &v21);
  v3 = (std::__shared_weak_count *)operator new(0x50uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC665F8;
  v3[1].__vftable = 0;
  *(_WORD *)((char *)&v3[1].__shared_weak_owners_ + 7) = 0;
  LOBYTE(v3[3].__vftable) = 0;
  v5 = v22;
  v6 = v23;
  v22 = 0;
  v23 = 0;
  v24 = v3 + 1;
  v25 = v3;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v26 = &off_24EC6A3B8;
  v27 = v5;
  v28 = v6;
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    do
      v10 = __ldaxr(v8);
    while (__stlxr(v10 - 1, v8));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  sub_224129C90(*(_QWORD *)(v2 + 128), (uint64_t)&v24);
  v39 = 1;
  v12 = v28;
  if (v28)
  {
    v13 = (unint64_t *)&v28->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v25;
  if (v25)
  {
    v16 = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v23;
  if (!v23)
    goto LABEL_26;
  v19 = (unint64_t *)&v23->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (v39)
      return;
  }
  else
  {
LABEL_26:
    if (v39)
      return;
  }
  sub_22400D0F8(v1[2], (uint64_t)v29);
  if (!v39 && v38)
  {
    if (v37)
    {
      if (v36 < 0)
        operator delete(__p);
      if (v34 < 0)
        operator delete(v33);
    }
    if (v32)
    {
      if (v31 < 0)
        operator delete(v30);
    }
  }
}

void sub_224014C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,int a40,__int16 a41,char a42,char a43,int a44,__int16 a45,char a46,char a47)
{
  if (!(_BYTE)a45 && (_BYTE)a41)
  {
    if (a39)
    {
      if (a38 < 0)
        operator delete(__p);
      if (a31 < 0)
        operator delete(a26);
    }
    if (a25)
    {
      if (a24 < 0)
      {
        operator delete(a19);
        _Unwind_Resume(exception_object);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_224014D4C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unsigned __int8 v5;
  unint64_t v7;
  unint64_t v8;
  mach_timebase_info info;
  _QWORD v10[2];
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = mach_continuous_time();
  v5 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v7) = info.numer;
    LODWORD(v8) = info.denom;
    *(double *)&qword_255795558 = (double)v7 / (double)v8;
    __cxa_guard_release(&qword_255795560);
  }
  v10[0] = llround(*(double *)&qword_255795558 * (double)v4);
  v10[1] = 2;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  sub_224014E90(a1, (uint64_t)v10, a2);
  return sub_2231AD66C((uint64_t)v10);
}

void sub_224014E64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_224014E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224014E90(_QWORD *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char **v13;
  char *v14;
  uint64_t v15;

  v5 = a1 + 1;
  v6 = a1[1];
  v13 = (char **)*a1;
  v14 = (char *)v6;
  v15 = a1[2];
  if (v15)
  {
    *(_QWORD *)(v6 + 16) = &v14;
    *a1 = v5;
    *v5 = 0;
    a1[2] = 0;
  }
  else
  {
    v13 = &v14;
  }
  v7 = (_QWORD *)operator new();
  v8 = v7;
  v9 = v14;
  v7[1] = v13;
  *v7 = &off_24EC667A8;
  v7[2] = v9;
  v10 = v7 + 2;
  v11 = v15;
  v7[3] = v15;
  if (v11)
  {
    *((_QWORD *)v9 + 2) = v10;
    v13 = &v14;
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v7[1] = v10;
  }
  sub_2231AB0FC((uint64_t)(v7 + 4), a2);
  *v8 = &off_24EC66728;
  *a3 = &off_24EC6A3B8;
  a3[1] = v8;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24EC6A4B0;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = v8;
  a3[2] = v12;
  sub_22323DF84((uint64_t)&v13, v14);
}

void sub_224014FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_22323DF84((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_224014FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  uint64_t v11;
  uint64_t v12;

  sub_22323DF84(v12, *(char **)(v11 + 16));
  MEMORY[0x227684CE8](v11, 0x10B3C407C1CE13ALL);
  sub_22323DF84((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_22401501C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_22323DF84((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_224015034(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24EC667A8;
  sub_2231AD66C(a1 + 32);
  sub_22323DF84(a1 + 8, *(char **)(a1 + 16));
  return a1;
}

void sub_224015070(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24EC667A8;
  sub_2231AD66C(a1 + 32);
  sub_22323DF84(a1 + 8, *(char **)(a1 + 16));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2240150BC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2240150C4(char *a1, char *lpsrc)
{
  uint64_t result;
  _QWORD *v5;
  char *v6;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC66768, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v5 = (_QWORD *)(result + 8);
      v6 = a1 + 8;
      return sub_2240161E0((uint64_t)&v6, &v5);
    }
  }
  return result;
}

void sub_224015148(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_22401634C();
  sub_2240151FC(a1);
  sub_2231AC984(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_2240151E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2240151FC(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25578F550);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578F550))
  {
    v4 = sub_224015FE4();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_2231AD150((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_223197FA4(&xmmword_25578F538, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_25578F548 = *(_QWORD *)(v9 - 8);
      xmmword_25578F538 = v7;
    }
    sub_22319BB48(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578F538, &dword_22314D000);
    __cxa_guard_release(&qword_25578F550);
  }
  return sub_224016634(&xmmword_25578F538, (uint64_t)"{", (_QWORD *)(a1 + 8), (uint64_t)"}");
}

void sub_22401530C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  __cxa_guard_abort(&qword_25578F550);
  _Unwind_Resume(a1);
}

void sub_22401532C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F550);
  _Unwind_Resume(a1);
}

void sub_224015344(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.net");
  *(_DWORD *)(a1 + 24) = 3;
}

double sub_224015370@<D0>(const void *a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  sub_2241379F0(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_2240153A4(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24EC667A8;
  sub_2231AD66C(a1 + 32);
  sub_22323DF84(a1 + 8, *(char **)(a1 + 16));
  return a1;
}

void sub_2240153E0(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24EC667A8;
  sub_2231AD66C(a1 + 32);
  sub_22323DF84(a1 + 8, *(char **)(a1 + 16));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22401542C(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_224015A80();
  return sub_224015580(v2, (uint64_t)"{", (_QWORD *)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_224015484(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_2240157AC((uint64_t)v5, (uint64_t)v2, (_QWORD *)(a1 + 8));
  if (v3 == -1)
    sub_22316DD70();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC66350[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC662F0[v3])(v5, v2);
  return result;
}

void sub_22401551C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24EC662F0[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_224015554(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_224015580(__int128 *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_2231ABB0C((uint64_t *)&v19, (uint64_t)&__dst);
  sub_2240157AC((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC66308[v16])(&p_p_dst, &__dst);
  sub_2231AB90C((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC66308[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC66350[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC662F0[v16])(&p_dst, &__dst);
  return result;
}

void sub_22401571C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224015734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224015748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22401575C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224015770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224015784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224015798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2240157AC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  unint64_t v20;
  _QWORD *v21[5];
  _QWORD *v22;
  char v23;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v22 = (_QWORD *)v5;
  v21[0] = (_QWORD *)(v5 + 16);
  sub_2231813E8((_QWORD *)(v5 + 16), (uint64_t)"{", 1);
  sub_2241224B4((uint64_t)&v23, v21, a3);
  sub_2231813E8(v21[0], (uint64_t)"}", 1);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __p;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = operator new(v12 + 1);
    __p[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __p[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __p;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v22;
  if (v22)
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *v22 = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)((char *)v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    v14[3] = MEMORY[0x24BEDB848] + 16;
    v14[2] = v17;
    if (*((char *)v14 + 111) < 0)
      operator delete((void *)v14[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 16);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = (_QWORD *)a2;
  v21[1] = __p;
  v21[2] = (_QWORD *)a2;
  v21[3] = __p;
  v21[4] = __p;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC66338[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

void sub_224015A2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_224015A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_224015A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_224015A80()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578F430);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578F430))
    return &xmmword_25578F418;
  v2 = sub_224015B5C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578F418, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578F428 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578F418 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578F418, &dword_22314D000);
  __cxa_guard_release(&qword_25578F430);
  return &xmmword_25578F418;
}

void sub_224015B44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F430);
  _Unwind_Resume(a1);
}

std::string *sub_224015B5C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578F450);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578F450))
    return &stru_25578F438;
  sub_224015E00((uint64_t)__p);
  sub_224015C4C((char *)__p, &stru_25578F438);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578F438, &dword_22314D000);
  __cxa_guard_release(&qword_25578F450);
  return &stru_25578F438;
}

void sub_224015C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578F450);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578F450);
  _Unwind_Resume(a1);
}

void sub_224015C4C(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_224015FE4();
  if (*((char *)v4 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_2231AC788();
  if (*((char *)v6 + 23) < 0)
  {
    sub_223197FA4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_224015DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_224015E00(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578F4D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578F4D0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::UpdateEnabledContexts>]", qword_25578F4B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578F4B8, &dword_22314D000);
    __cxa_guard_release(&qword_25578F4D0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578F4F0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578F4F0))
  {
    v5 = sub_2231A38CC(qword_25578F4B8, "<", 0);
    sub_2231A37C8(qword_25578F4B8, 0, v5, qword_25578F4D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578F4D8, &dword_22314D000);
    __cxa_guard_release(&qword_25578F4F0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578F510);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578F510))
  {
    sub_224573040((uint64_t)qword_25578F4D8, (uint64_t)&xmmword_25578F4F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578F4F8, &dword_22314D000);
    __cxa_guard_release(&qword_25578F510);
  }
  if (byte_25578F50F < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578F4F8, *((unint64_t *)&xmmword_25578F4F8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578F4F8;
    *(_QWORD *)(a1 + 16) = unk_25578F508;
  }
}

void sub_224015F9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F510);
  _Unwind_Resume(a1);
}

void sub_224015FB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F4F0);
  _Unwind_Resume(a1);
}

void sub_224015FCC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F4D0);
  _Unwind_Resume(a1);
}

__int128 *sub_224015FE4()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578F470);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578F470))
    return &xmmword_25578F458;
  v2 = (char *)sub_2240160C0();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_25578F458, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25578F468 = *((_QWORD *)v2 + 2);
    xmmword_25578F458 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578F458, &dword_22314D000);
  __cxa_guard_release(&qword_25578F470);
  return &xmmword_25578F458;
}

void sub_2240160A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F470);
  _Unwind_Resume(a1);
}

void *sub_2240160C0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25578F490);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578F490))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::UpdateEnabledContexts]", qword_25578F478);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578F478, &dword_22314D000);
    __cxa_guard_release(&qword_25578F490);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25578F4B0);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25578F4B0))
    return &unk_25578F498;
  sub_224573040((uint64_t)qword_25578F478, (uint64_t)&unk_25578F498);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25578F498, &dword_22314D000);
  __cxa_guard_release(&qword_25578F4B0);
  return &unk_25578F498;
}

void sub_2240161B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F4B0);
  _Unwind_Resume(a1);
}

void sub_2240161C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578F490);
  _Unwind_Resume(a1);
}

uint64_t sub_2240161E0(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const void **v11;
  unsigned __int8 *v12;
  uint64_t result;
  _BOOL4 v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)(*(_QWORD *)a1 + 16) != (*a2)[2])
    return 0;
  v5 = (_QWORD *)*v2;
  v3 = v2 + 1;
  v4 = v5;
  if (v5 != v3)
  {
    v6 = (_QWORD *)**a2;
    while (1)
    {
      v7 = *((unsigned __int8 *)v4 + 55);
      if ((v7 & 0x80u) == 0)
        v8 = *((unsigned __int8 *)v4 + 55);
      else
        v8 = v4[5];
      v9 = *((unsigned __int8 *)v6 + 55);
      v10 = (char)v9;
      if ((v9 & 0x80u) != 0)
        v9 = v6[5];
      if (v8 != v9)
        return 0;
      v11 = (const void **)(v4 + 4);
      if (v10 >= 0)
        v12 = (unsigned __int8 *)(v6 + 4);
      else
        v12 = (unsigned __int8 *)v6[4];
      if ((v7 & 0x80) != 0)
      {
        v14 = memcmp(*v11, v12, v4[5]) == 0;
        result = 0;
        if (!v14)
          return result;
      }
      else
      {
        if (*((_BYTE *)v4 + 55))
        {
          while (*(unsigned __int8 *)v11 == *v12)
          {
            v11 = (const void **)((char *)v11 + 1);
            ++v12;
            if (!--v7)
              goto LABEL_17;
          }
          return 0;
        }
LABEL_17:
        result = 0;
      }
      if (*((unsigned __int8 *)v4 + 56) != *((unsigned __int8 *)v6 + 56))
        return result;
      v15 = (_QWORD *)v4[1];
      v16 = v4;
      if (v15)
      {
        do
        {
          v4 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v16[2];
          v17 = *v4 == (_QWORD)v16;
          v16 = v4;
        }
        while (!v17);
      }
      v18 = (_QWORD *)v6[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v6[2];
          v17 = *v19 == (_QWORD)v6;
          v6 = v19;
        }
        while (!v17);
      }
      v6 = v19;
      if (v4 == v3)
        return 1;
    }
  }
  return 1;
}

std::string *sub_22401634C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  __int128 *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void *v10[3];
  void *v11[2];
  char v12;
  void *__dst[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578F530);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578F530))
  {
    sub_223174DE4(v11, "viz::PackageData");
    v2 = sub_224015FE4();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v14 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v4 = sub_224013F70();
    if (*((char *)v4 + 23) < 0)
    {
      sub_223197FA4(&v15, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      v16 = *((_QWORD *)v4 + 2);
      v15 = v5;
    }
    v6 = sub_2232A1174();
    if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_223197FA4(&v17, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
    }
    else
    {
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v18 = v6->__r_.__value_.__r.__words[2];
      v17 = v7;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v20 = 0x400000000000000;
    sub_22319BD1C(v10, (uint64_t)__dst, 4uLL);
    sub_2245730F4((char *)v11, (uint64_t *)v10, &stru_25578F518, v8, v9);
    sub_22319BB48(v10);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v16) & 0x80000000) == 0)
          goto LABEL_16;
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete((void *)v17);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_22;
    }
LABEL_21:
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v12 & 0x80000000) == 0)
      {
LABEL_18:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578F518, &dword_22314D000);
        __cxa_guard_release(&qword_25578F530);
        return &stru_25578F518;
      }
LABEL_23:
      operator delete(v11[0]);
      goto LABEL_18;
    }
LABEL_22:
    operator delete(__dst[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_23;
  }
  return &stru_25578F518;
}

void sub_224016558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_22319BB48(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
    {
LABEL_10:
      if (a18 < 0)
        operator delete(a13);
      __cxa_guard_abort(&qword_25578F530);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_22401660C()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x2240165E8);
  }
}

uint64_t sub_224016634(__int128 *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_2231ABB0C((uint64_t *)&v14, (uint64_t)&__dst);
  sub_2240157AC((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC66308[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC66350[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC662F0[v11])(&p_dst, &__dst);
  return result;
}

void sub_224016774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22401678C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2240167A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2240167B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2240167C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2240167DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC665A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2240167EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC665A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22401681C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_22401682C(uint64_t a1)
{
  sub_22456B1EC(a1);
}

void sub_224016838(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  int v5;
  size_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD **v21;
  _QWORD *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  const char *v26;

  if (*a3)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 208) = 0u;
    *(_OWORD *)(v4 + 224) = 0u;
    *(_OWORD *)(v4 + 240) = 0u;
    *(_OWORD *)(v4 + 256) = 0u;
    *(_QWORD *)(v4 + 272) = 0;
    sub_223195210(v4);
    v22 = (_QWORD *)v4;
    std::ostream::operator<<();
    v5 = *(_DWORD *)(v4 + 120);
    if ((v5 & 0x10) != 0)
    {
      v9 = *(_QWORD *)(v4 + 112);
      v10 = *(_QWORD *)(v4 + 72);
      if (v9 < v10)
      {
        *(_QWORD *)(v4 + 112) = v10;
        v9 = v10;
      }
      v11 = *(const void **)(v4 + 64);
      v6 = v9 - (_QWORD)v11;
      if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_25;
    }
    else
    {
      if ((v5 & 8) == 0)
      {
        v6 = 0;
        HIBYTE(v20) = 0;
        v7 = __dst;
        goto LABEL_17;
      }
      v11 = *(const void **)(v4 + 40);
      v6 = *(_QWORD *)(v4 + 56) - (_QWORD)v11;
      if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_25:
        sub_22316DBC0();
    }
    if (v6 >= 0x17)
    {
      v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v12 = v6 | 7;
      v13 = v12 + 1;
      v7 = (void **)operator new(v12 + 1);
      __dst[1] = (void *)v6;
      v20 = v13 | 0x8000000000000000;
      __dst[0] = v7;
    }
    else
    {
      HIBYTE(v20) = v6;
      v7 = __dst;
      if (!v6)
        goto LABEL_17;
    }
    memmove(v7, v11, v6);
LABEL_17:
    *((_BYTE *)v7 + v6) = 0;
    v14 = v22;
    if (v22)
    {
      v15 = MEMORY[0x24BEDB7F0];
      v16 = *MEMORY[0x24BEDB7F0];
      *v22 = *MEMORY[0x24BEDB7F0];
      v17 = *(_QWORD *)(v15 + 72);
      *(_QWORD *)((char *)v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
      v14[3] = MEMORY[0x24BEDB848] + 16;
      v14[2] = v17;
      if (*((char *)v14 + 111) < 0)
        operator delete((void *)v14[11]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x227684BE0](v14 + 16);
      MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
    }
    v22 = (_QWORD *)a2;
    v23 = (const char *)__dst;
    v24 = a2;
    v25 = (const char *)__dst;
    v26 = (const char *)__dst;
    v18 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v18 == -1)
      sub_22316DD70();
    v21 = &v22;
    ((void (*)(_QWORD ***, uint64_t))off_24EC66338[v18])(&v21, a2);
    if (SHIBYTE(v20) < 0)
      operator delete(__dst[0]);
    return;
  }
  v22 = (_QWORD *)a2;
  v23 = "nullptr";
  v24 = a2;
  v25 = "nullptr";
  v26 = "nullptr";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    sub_22316DD70();
  __dst[0] = &v22;
  ((void (*)(void **, uint64_t))off_24EC66320[v8])(__dst, a2);
}

void sub_224016AEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_224016B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_224016B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_224016B40(_QWORD *a1, _BYTE *a2)
{
  const char *v2;
  uint64_t v3;

  switch(*a2)
  {
    case 0:
      v2 = "NotSyncing";
      v3 = 10;
      break;
    case 1:
      v2 = "Waiting";
      v3 = 7;
      break;
    case 2:
      v2 = "Proceeding";
      v3 = 10;
      break;
    case 3:
      v2 = "ProceedingConditionally";
      v3 = 23;
      break;
    default:
      sub_2231813E8(a1, (uint64_t)"invalid sync status (", 21);
      a1 = (_QWORD *)std::ostream::operator<<();
      v2 = ")";
      v3 = 1;
      break;
  }
  return sub_2231813E8(a1, (uint64_t)v2, v3);
}

uint64_t sub_224016C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = &off_24EC20AE0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  sub_2231AB0FC(a1 + 32, a3);
  *(_QWORD *)a1 = &off_24EC66920;
  return a1;
}

void sub_224016C54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_224016C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *size;
  unint64_t *v7;
  unint64_t v8;
  unsigned __int8 v9;
  CFTypeID v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::logic_error *exception;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::string __p;
  std::string v19;

  sub_2244E40A8((uint64_t *)&v19, a2, 1);
  *(_QWORD *)a1 = &off_24EC20AE0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = 0uLL;
  sub_2231AB0FC(a1 + 32, a3);
  *(_QWORD *)a1 = &off_24EC66888;
  size = (std::__shared_weak_count *)v19.__r_.__value_.__l.__size_;
  if (v19.__r_.__value_.__l.__size_)
  {
    v7 = (unint64_t *)(v19.__r_.__value_.__l.__size_ + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *(_QWORD *)a1 = &off_24EC66920;
  sub_22319ED0C(&v16, a2);
  v9 = atomic_load((unsigned __int8 *)&qword_2540CEB48);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEB48))
  {
    qword_2540CEB90 = CFBooleanGetTypeID();
    qword_2540CEB98 = CFStringGetTypeID();
    qword_2540CEBA0 = CFNumberGetTypeID();
    qword_2540CEBA8 = CFArrayGetTypeID();
    qword_2540CEBB0 = CFDictionaryGetTypeID();
    __cxa_guard_release(&qword_2540CEB48);
  }
  if (!sub_22452AC38((uint64_t)&v16, 5, (uint64_t)&qword_2540CEB90))
  {
    sub_224532954(v10, &__p);
    sub_224017758(&v19, (uint64_t *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v19);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v11 = v17;
  if (!v17)
    return a1;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_224016E98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  __cxa_guard_abort(&qword_2540CEB48);
  sub_223167354((uint64_t)va);
  sub_224016F8C(v2);
  _Unwind_Resume(a1);
}

void sub_224016EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _QWORD *v23;

  if (a23 < 0)
  {
    operator delete(__p);
    sub_223167354((uint64_t)&a10);
    sub_224016F8C(v23);
    _Unwind_Resume(a1);
  }
  sub_223167354((uint64_t)&a10);
  sub_224016F8C(v23);
  _Unwind_Resume(a1);
}

_QWORD *sub_224016F8C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC20AE0;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_224017008(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC20AE0;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_224017080(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC20AE0;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x227684CE8);
}

void sub_2240170F8(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  int64x2_t v7;
  int8x16_t v8;
  void *v9[3];
  void *v10[2];
  char v11;
  void *__p[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  __int128 v16;
  std::string::size_type v17;
  void *v18[2];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CEB50);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CEB50))
    goto LABEL_2;
  sub_223174DE4(v10, "viz::PackageData");
  v3 = sub_2231AEA24();
  if (*((char *)v3 + 23) < 0)
  {
    sub_223197FA4(__p, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    v13 = *((_QWORD *)v3 + 2);
    *(_OWORD *)__p = v4;
  }
  *(_OWORD *)v14 = *(_OWORD *)"viz::Package";
  v15 = 0xC00000000000000;
  v5 = sub_223BD776C();
  if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&v16, v5->__r_.__value_.__l.__data_, v5->__r_.__value_.__l.__size_);
  }
  else
  {
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v17 = v5->__r_.__value_.__r.__words[2];
    v16 = v6;
  }
  *(_OWORD *)v18 = *(_OWORD *)"void";
  v19 = 0x400000000000000;
  sub_22319BD1C(v9, (uint64_t)__p, 4uLL);
  sub_2245730F4((char *)v10, (uint64_t *)v9, &stru_2540CEB60, v7, v8);
  sub_22319BB48(v9);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(v18[0]);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_20;
    }
  }
  else if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete((void *)v16);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_21:
    operator delete(__p[0]);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_17;
LABEL_22:
    operator delete(v10[0]);
    goto LABEL_17;
  }
LABEL_20:
  operator delete(v14[0]);
  if (SHIBYTE(v13) < 0)
    goto LABEL_21;
LABEL_16:
  if (v11 < 0)
    goto LABEL_22;
LABEL_17:
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2540CEB60, &dword_22314D000);
  __cxa_guard_release(&qword_2540CEB50);
LABEL_2:
  sub_224017438(a1);
  sub_2231AC984((__int128 *)&stru_2540CEB60, (uint64_t)"{", (uint64_t)__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
}

void sub_22401732C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_22319BB48(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_2540CEB50);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_2540CEB50);
  _Unwind_Resume(a1);
}

void sub_224017410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_224017438(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t result;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  void ***p_dst;
  const char *v13;
  __int128 *v14;
  const char *v15;
  const char *v16;
  void **p_p_dst;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CEB58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEB58))
  {
    v4 = sub_2231AEA24();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_2231AD150((char *)v4, v6, "::", 2, 0, (uint64_t)&p_dst);
    if (*(v13 - 1) < 0)
    {
      sub_223197FA4(&xmmword_2540CEB78, *((void **)v13 - 3), *((_QWORD *)v13 - 2));
    }
    else
    {
      v7 = *(_OWORD *)(v13 - 24);
      unk_2540CEB88 = *((_QWORD *)v13 - 1);
      xmmword_2540CEB78 = v7;
    }
    sub_22319BB48((void **)&p_dst);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CEB78, &dword_22314D000);
    __cxa_guard_release(&qword_2540CEB58);
  }
  v11 = -1;
  if (byte_2540CEB8F < 0)
  {
    sub_223197FA4(&__dst, (void *)xmmword_2540CEB78, *((unint64_t *)&xmmword_2540CEB78 + 1));
  }
  else
  {
    __dst = xmmword_2540CEB78;
    v10 = unk_2540CEB88;
  }
  v11 = 1;
  p_dst = (void ***)&__dst;
  v13 = "{";
  v14 = &__dst;
  v15 = "{";
  v16 = "{";
  sub_2231ABB0C((uint64_t *)&v14, (uint64_t)&__dst);
  sub_2231AE3CC((uint64_t)&v8, (uint64_t)&__dst, (uint64_t *)(a1 + 8));
  p_dst = (void ***)&__dst;
  v13 = "}";
  v14 = &__dst;
  v15 = "}";
  v16 = "}";
  if (v11 == -1)
    sub_22316DD70();
  p_p_dst = (void **)&p_dst;
  ((void (*)(void ***, __int128 *))off_24EC668E0[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_22316DD70();
  p_dst = &p_p_dst;
  result = ((uint64_t (*)(void ****, __int128 *))off_24EC668F8[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(void ****, __int128 *))off_24EC668C8[v11])(&p_dst, &__dst);
  return result;
}

void sub_224017654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_22319BB48((void **)va);
  __cxa_guard_abort(&qword_2540CEB58);
  _Unwind_Resume(a1);
}

void sub_224017674(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CEB58);
  _Unwind_Resume(a1);
}

void sub_22401768C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2240176A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2240176B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2240176CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2240176E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2240176F4(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 6;
}

void sub_224017720(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_22413ADAC(lpsrc, 6, a2);
}

void sub_224017758(std::string *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD v4[4];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4[0] = "DictionaryData must only contain Number, Boolean, String, Array or Dictionary values, but contains ";
  v4[1] = 99;
  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  v4[2] = v3;
  v4[3] = v2;
  sub_2231A9820((uint64_t)v4, (uint64_t)&v5, 0, 0, a1);
}

_QWORD *sub_2240177E8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC20AE0;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_224017860(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC20AE0;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2240178D8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  std::logic_error *exception;
  _QWORD v7[4];
  std::string v8;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a2 + 8);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  if (!*a1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_224123ACC(a2, v7);
    sub_224018B80((uint64_t)&v8, (uint64_t)v7);
    std::logic_error::logic_error(exception, &v8);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  return result;
}

void sub_2240179C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  void *v23;
  int v24;

  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      sub_223167354(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void sub_224017A30(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  _BYTE v35[120];
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v2 = *(uint64_t **)(a1 + 64);
  v3 = *(uint64_t **)(a1 + 72);
  if (v2 == v3)
  {
LABEL_44:
    sub_224106AEC((uint64_t *)(a1 + 8), (uint64_t)v35);
    sub_22401682C((uint64_t)v35);
  }
  v4 = (__int128 *)(a1 + 8);
  while (1)
  {
    v6 = *v2;
    v5 = (std::__shared_weak_count *)v2[1];
    v38 = *v2;
    v39 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      break;
    v12 = *(const void **)(a1 + 8);
    v11 = *(_QWORD *)(a1 + 16);
    if (v10 == v11)
      goto LABEL_11;
LABEL_12:
    if (v5)
    {
      v13 = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v2 += 2;
    if (v2 == v3)
      goto LABEL_44;
  }
  v11 = *(unsigned __int8 *)(a1 + 31);
  v12 = (const void *)(a1 + 8);
  if (v10 != v11)
    goto LABEL_12;
LABEL_11:
  if (memcmp(v9, v12, v11))
    goto LABEL_12;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 24))(&v36, v6, *(unsigned int *)(a1 + 32));
  v15 = v36;
  if (!v36)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      sub_223197FA4(&v32, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
    }
    else
    {
      v32 = *v4;
      v33 = *(_QWORD *)(a1 + 24);
    }
    v34 = *(_DWORD *)(a1 + 32);
    sub_224106D70((uint64_t)&v32, (uint64_t)v35);
    sub_22401682C((uint64_t)v35);
  }
  v16 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v16 != -1)
  {
    if (!(_DWORD)v16)
    {
      v17 = v37;
      if (v37)
      {
        v18 = (unint64_t *)&v37->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = *(std::__shared_weak_count **)(a1 + 48);
      *(_QWORD *)(a1 + 40) = v15;
      *(_QWORD *)(a1 + 48) = v17;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      goto LABEL_33;
    }
    ((void (*)(_BYTE *, uint64_t))off_24EC669A8[v16])(v35, a1 + 40);
    v15 = v36;
  }
  *(_DWORD *)(a1 + 56) = -1;
  v23 = v37;
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *(_DWORD *)(a1 + 56) = 0;
LABEL_33:
  v26 = v37;
  if (v37)
  {
    v27 = (unint64_t *)&v37->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_224017CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  sub_223167354(v17 - 96);
  sub_223167354(v17 - 80);
  _Unwind_Resume(a1);
}

void sub_224017D14(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_224017D28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_224017D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_22319723C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_224017D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  void *__p[2];
  uint64_t v10;
  int v11;

  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *(_QWORD *)(a2 + 8);
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v6 + 48))(__p);
  if (SHIBYTE(v10) < 0)
  {
    sub_223197FA4((_BYTE *)(a1 + 8), __p[0], (unint64_t)__p[1]);
    v7 = SHIBYTE(v10);
    *(_DWORD *)(a1 + 32) = v11;
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 32) = v11;
  }
  sub_2240178D8(__p, a2);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)__p;
  *(_DWORD *)(a1 + 56) = 1;
  sub_223BF6664((_QWORD *)(a1 + 64), a3);
  return a1;
}

void sub_224017E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_224017E94(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  _BYTE v35[120];
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v2 = *(uint64_t **)(a1 + 64);
  v3 = *(uint64_t **)(a1 + 72);
  if (v2 == v3)
  {
LABEL_44:
    sub_224106AEC((uint64_t *)(a1 + 8), (uint64_t)v35);
    sub_22401682C((uint64_t)v35);
  }
  v4 = (__int128 *)(a1 + 8);
  while (1)
  {
    v6 = *v2;
    v5 = (std::__shared_weak_count *)v2[1];
    v38 = *v2;
    v39 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      break;
    v12 = *(const void **)(a1 + 8);
    v11 = *(_QWORD *)(a1 + 16);
    if (v10 == v11)
      goto LABEL_11;
LABEL_12:
    if (v5)
    {
      v13 = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v2 += 2;
    if (v2 == v3)
      goto LABEL_44;
  }
  v11 = *(unsigned __int8 *)(a1 + 31);
  v12 = (const void *)(a1 + 8);
  if (v10 != v11)
    goto LABEL_12;
LABEL_11:
  if (memcmp(v9, v12, v11))
    goto LABEL_12;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 24))(&v36, v6, *(unsigned int *)(a1 + 32));
  v15 = v36;
  if (!v36)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      sub_223197FA4(&v32, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
    }
    else
    {
      v32 = *v4;
      v33 = *(_QWORD *)(a1 + 24);
    }
    v34 = *(_DWORD *)(a1 + 32);
    sub_224106D70((uint64_t)&v32, (uint64_t)v35);
    sub_22401682C((uint64_t)v35);
  }
  v16 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v16 != -1)
  {
    if (!(_DWORD)v16)
    {
      v17 = v37;
      if (v37)
      {
        v18 = (unint64_t *)&v37->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = *(std::__shared_weak_count **)(a1 + 48);
      *(_QWORD *)(a1 + 40) = v15;
      *(_QWORD *)(a1 + 48) = v17;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      goto LABEL_33;
    }
    ((void (*)(_BYTE *, uint64_t))off_24EC669A8[v16])(v35, a1 + 40);
    v15 = v36;
  }
  *(_DWORD *)(a1 + 56) = -1;
  v23 = v37;
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *(_DWORD *)(a1 + 56) = 0;
LABEL_33:
  v26 = v37;
  if (v37)
  {
    v27 = (unint64_t *)&v37->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_224018130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  sub_223167354(v17 - 96);
  sub_223167354(v17 - 80);
  _Unwind_Resume(a1);
}

void sub_224018178(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_22401818C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_2240181A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_22319723C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2240181B4(int a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[2];
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)qword_2540CEBB8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_2540CEBB8))
  {
    v9 = operator new(0x28uLL);
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = &off_24EC6B598;
    *v9 = &off_24EC608C8;
    *((_DWORD *)v9 + 8) = 0;
    v18[0] = v9 + 3;
    v18[1] = v9;
    v14[0] = 0;
    v14[1] = 0;
    sub_223BF5A0C(&v15, v18, 1uLL);
    LODWORD(v19) = 0;
    v20 = v15;
    v21 = v16;
    v15 = 0uLL;
    v16 = 0;
    v10 = operator new(0x28uLL);
    v10[1] = 0;
    v10[2] = 0;
    *v10 = &off_24EC608C8;
    v10[3] = &off_24EC6B598;
    *((_DWORD *)v10 + 8) = 1;
    v17[0] = v10 + 3;
    v17[1] = v10;
    v11[0] = 0;
    v11[1] = 0;
    sub_223BF5A0C(&v12, v17, 1uLL);
    v22 = 1;
    v23 = v12;
    v24 = v13;
    v12 = 0uLL;
    v13 = 0;
    sub_22401847C(&v19, 2);
    sub_224018640((uint64_t)&v22);
    sub_224018640((uint64_t)&v19);
    sub_2231B888C((void **)&v12);
    sub_223167354((uint64_t)v17);
    sub_223167354((uint64_t)v11);
    sub_2231B888C((void **)&v15);
    sub_223167354((uint64_t)v18);
    sub_223167354((uint64_t)v14);
    __cxa_atexit((void (*)(void *))sub_2240186D8, &qword_2540CEBE8, &dword_22314D000);
    __cxa_guard_release(qword_2540CEBB8);
  }
  v3 = qword_2540CEBF0;
  if (!qword_2540CEBF0)
    goto LABEL_12;
  v4 = &qword_2540CEBF0;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 < a1;
    if (v5 >= a1)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (!v6)
      v4 = (uint64_t *)v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 == &qword_2540CEBF0 || *((_DWORD *)v4 + 8) > a1)
LABEL_12:
    v4 = &qword_2540CEBF0;
  return v4 + 5;
}

void sub_2240183C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  uint64_t v24;

  sub_224018640(v24);
  sub_224018640((uint64_t)&a24);
  sub_2231B888C(&a11);
  sub_223167354((uint64_t)&a20);
  sub_223167354((uint64_t)&a9);
  sub_2231B888C(&a17);
  sub_223167354((uint64_t)&a22);
  sub_223167354((uint64_t)&a15);
  __cxa_guard_abort(qword_2540CEBB8);
  _Unwind_Resume(a1);
}

uint64_t *sub_22401847C(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;

  qword_2540CEBF8 = 0;
  qword_2540CEBF0 = 0;
  qword_2540CEBE8 = (uint64_t)&qword_2540CEBF0;
  if (a2)
  {
    v2 = result;
    v3 = 0;
    v4 = &result[4 * a2];
    v5 = *(_DWORD *)result;
LABEL_6:
    v7 = &qword_2540CEBF0;
LABEL_10:
    if (v3)
    {
      v10 = v7 + 1;
      if (v7[1])
        goto LABEL_24;
    }
    else
    {
LABEL_20:
      v10 = &qword_2540CEBF0;
      v7 = &qword_2540CEBF0;
    }
LABEL_21:
    v13 = operator new(0x40uLL);
    v13[8] = v5;
    sub_223BF6664((_QWORD *)v13 + 5, (uint64_t)(v2 + 1));
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = v7;
    *v10 = (uint64_t)v13;
    if (*(_QWORD *)qword_2540CEBE8)
    {
      qword_2540CEBE8 = *(_QWORD *)qword_2540CEBE8;
      v13 = (_DWORD *)*v10;
    }
    result = sub_2231A9A8C((uint64_t *)qword_2540CEBF0, (uint64_t *)v13);
    ++qword_2540CEBF8;
LABEL_24:
    while (1)
    {
      v2 += 4;
      if (v2 == v4)
        break;
      v3 = qword_2540CEBF0;
      v5 = *(_DWORD *)v2;
      if ((uint64_t *)qword_2540CEBE8 == &qword_2540CEBF0)
        goto LABEL_6;
      v6 = qword_2540CEBF0;
      if (qword_2540CEBF0)
      {
        do
        {
          v7 = (uint64_t *)v6;
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        v8 = &qword_2540CEBF0;
        do
        {
          v7 = (uint64_t *)v8[2];
          v9 = *v7 == (_QWORD)v8;
          v8 = v7;
        }
        while (v9);
      }
      if (*((_DWORD *)v7 + 8) < v5)
        goto LABEL_10;
      if (!qword_2540CEBF0)
        goto LABEL_20;
      v11 = qword_2540CEBF0;
      while (1)
      {
        while (1)
        {
          v7 = (uint64_t *)v11;
          v12 = *(_DWORD *)(v11 + 32);
          if (v12 <= v5)
            break;
          v11 = *v7;
          v10 = v7;
          if (!*v7)
            goto LABEL_21;
        }
        if (v12 >= v5)
          break;
        v11 = v7[1];
        if (!v11)
        {
          v10 = v7 + 1;
          goto LABEL_21;
        }
      }
    }
  }
  return result;
}

void sub_224018608(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_224018F40(v1);
  _Unwind_Resume(a1);
}

void sub_22401861C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  sub_224018F40((_QWORD *)qword_2540CEBF0);
  _Unwind_Resume(a1);
}

uint64_t sub_224018640(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2240186D8(uint64_t a1)
{
  sub_224018F40(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_224018700(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t *v6;
  unsigned __int8 ***v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 **v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  char v18;

  result = sub_224018848((uint64_t)&v18, a2, a3);
  if ((_DWORD)result)
  {
    v6 = (uint64_t *)a2[5];
    v7 = (unsigned __int8 ***)a3[5];
    if (*((_BYTE *)v6 + 24))
      v8 = *((_BYTE *)v7 + 24) == 0;
    else
      v8 = 1;
    if (v8)
    {
      return (*((_BYTE *)v6 + 24) != 0) == (*((_BYTE *)v7 + 24) != 0);
    }
    else
    {
      v10 = *v6;
      v9 = v6[1];
      v11 = *v7;
      if (v9 - *v6 == (char *)v7[1] - (char *)*v7)
      {
        if (v10 == v9)
          return 1;
        while (1)
        {
          v12 = *(unsigned __int8 *)(v10 + 23);
          if ((v12 & 0x80u) == 0)
            v13 = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 23);
          else
            v13 = *(unsigned __int8 **)(v10 + 8);
          v14 = (unsigned __int8 *)*((unsigned __int8 *)v11 + 23);
          v15 = (char)v14;
          if ((char)v14 < 0)
            v14 = v11[1];
          if (v13 != v14)
            break;
          if (v15 >= 0)
            v16 = (unsigned __int8 *)v11;
          else
            v16 = *v11;
          if ((v12 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v10, v16, *(_QWORD *)(v10 + 8)))
              return 0;
          }
          else if (*(_BYTE *)(v10 + 23))
          {
            v17 = 0;
            while (*(unsigned __int8 *)(v10 + v17) == v16[v17])
            {
              if (v12 == ++v17)
                goto LABEL_13;
            }
            return 0;
          }
LABEL_13:
          v10 += 24;
          v11 += 3;
          result = 1;
          if (v10 == v9)
            return result;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_224018848(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  int v7;
  BOOL v8;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 **v16;
  BOOL v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v29;
  char v30;

  if (!sub_224018A20((uint64_t)&v30, a2, a3))
    return 0;
  v5 = (unsigned __int8 *)a2[3];
  v6 = (unsigned __int8 **)a3[3];
  v7 = *((unsigned __int8 *)v6 + 24);
  if (v5[24])
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if ((v5[24] != 0) != (v7 != 0))
      return 0;
    goto LABEL_25;
  }
  v10 = v5[23];
  if ((v10 & 0x80u) == 0)
    v11 = (unsigned __int8 *)v5[23];
  else
    v11 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
  v12 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
  v13 = (char)v12;
  if ((char)v12 < 0)
    v12 = v6[1];
  if (v11 != v12)
    return 0;
  if (v13 >= 0)
    v14 = (unsigned __int8 *)a3[3];
  else
    v14 = *v6;
  if ((v10 & 0x80) == 0)
  {
    if (v5[23])
    {
      while (*v5 == *v14)
      {
        ++v5;
        ++v14;
        if (!--v10)
          goto LABEL_25;
      }
      return 0;
    }
    goto LABEL_25;
  }
  if (memcmp(*(const void **)v5, v14, *((_QWORD *)v5 + 1)))
    return 0;
LABEL_25:
  v15 = (unsigned __int8 *)a2[4];
  v16 = (unsigned __int8 **)a3[4];
  if (v15[24])
    v17 = *((_BYTE *)v16 + 24) == 0;
  else
    v17 = 1;
  if (v17)
    return (v15[24] != 0) == (*((_BYTE *)v16 + 24) != 0);
  v18 = v15[23];
  if ((v18 & 0x80u) == 0)
    v19 = (unsigned __int8 *)v15[23];
  else
    v19 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
  v20 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 23);
  v21 = (char)v20;
  if ((char)v20 < 0)
    v20 = v16[1];
  if (v19 != v20)
    return 0;
  if (v21 >= 0)
    v22 = (unsigned __int8 *)a3[4];
  else
    v22 = *v16;
  if ((v18 & 0x80) != 0)
    return memcmp(*(const void **)v15, v22, *((_QWORD *)v15 + 1)) == 0;
  if (!v15[23])
    return 1;
  v23 = v18 - 1;
  do
  {
    v25 = *v15++;
    v24 = v25;
    v27 = *v22++;
    v26 = v27;
    v29 = v23-- != 0;
    result = v24 == v26;
  }
  while (v24 == v26 && v29);
  return result;
}

BOOL sub_224018A20(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;

  if (*(_QWORD *)*a2 != *(_QWORD *)*a3 || *(unsigned __int8 *)(*a2 + 8) != *(unsigned __int8 *)(*a3 + 8))
    return 0;
  v5 = (unsigned __int8 *)a2[1];
  v6 = (unsigned __int8 **)a3[1];
  v7 = *((unsigned __int8 *)v6 + 24);
  if (v5[24])
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if ((v5[24] != 0) != (v7 != 0))
      return 0;
  }
  else
  {
    v13 = v5[23];
    if ((v13 & 0x80u) == 0)
      v14 = (unsigned __int8 *)v5[23];
    else
      v14 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
    v15 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
    v16 = (char)v15;
    if ((char)v15 < 0)
      v15 = v6[1];
    if (v14 != v15)
      return 0;
    if (v16 >= 0)
      v17 = (unsigned __int8 *)a3[1];
    else
      v17 = *v6;
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v5, v17, *((_QWORD *)v5 + 1)))
        return 0;
    }
    else if (v5[23])
    {
      while (*v5 == *v17)
      {
        ++v5;
        ++v17;
        if (!--v13)
          goto LABEL_9;
      }
      return 0;
    }
  }
LABEL_9:
  v9 = a2[2];
  v10 = a3[2];
  if (*(_BYTE *)(v9 + 16))
    v11 = *(_BYTE *)(v10 + 16) == 0;
  else
    v11 = 1;
  if (v11)
    return (*(_BYTE *)(v9 + 16) != 0) == (*(_BYTE *)(v10 + 16) != 0);
  if (*(_QWORD *)v9 == *(_QWORD *)v10)
    return *(unsigned __int8 *)(v9 + 8) == *(unsigned __int8 *)(v10 + 8);
  return 0;
}

uint64_t sub_224018B80(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD v6[2];
  char v7;
  _QWORD **v8;
  _QWORD *v9;
  const char *v10;
  char *v11;
  const char *v12;
  const char *v13;

  v5 = 0;
  sub_223A6B558(v4, "data of type ");
  v6[0] = a2;
  v6[1] = a2 + 24;
  v9 = v4;
  v10 = "{";
  v11 = (char *)v4;
  v12 = "{";
  v13 = "{";
  if (v5 == -1)
    goto LABEL_8;
  v8 = &v9;
  ((void (*)(_QWORD ***, _DWORD *))off_24EC669B8[v5])(&v8, v4);
  LOBYTE(v9) = 1;
  v10 = (const char *)v4;
  v11 = &v7;
  sub_224018D70((uint64_t)v6, (uint64_t)&v9);
  v9 = v4;
  v10 = "}";
  v11 = (char *)v4;
  v12 = "}";
  v13 = "}";
  if (v5 == -1)
LABEL_8:
    sub_22316DD70();
  v8 = &v9;
  ((void (*)(_QWORD ***, _DWORD *))off_24EC669B8[v5])(&v8, v4);
  v9 = v4;
  v10 = " is not serializable";
  v11 = (char *)v4;
  v12 = " is not serializable";
  v13 = " is not serializable";
  if (v5 == -1)
    sub_22316DD70();
  v6[0] = &v9;
  ((void (*)(_QWORD *, _DWORD *))off_24EC669E8[v5])(v6, v4);
  if (v5 == -1)
    sub_22316DD70();
  v9 = v6;
  result = ((uint64_t (*)(_QWORD **, _DWORD *))off_24EC66990[v5])(&v9, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD **, _DWORD *))off_24EC66978[v5])(&v9, v4);
  return result;
}

void sub_224018D20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224018D34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224018D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224018D5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224018D70(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t *v12;

  v4 = *(const char **)a1;
  if (!*(_BYTE *)a2)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v8 = ",";
    v9 = v7;
    v10 = ",";
    v11 = ",";
    v5 = *(unsigned int *)(v7 + 24);
    if ((_DWORD)v5 == -1)
      goto LABEL_6;
    v12 = &v7;
    ((void (*)(uint64_t **))off_24EC669B8[v5])(&v12);
  }
  *(_BYTE *)a2 = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v4;
  v9 = v7;
  v10 = v4;
  v11 = v4;
  v6 = *(unsigned int *)(v7 + 24);
  if ((_DWORD)v6 == -1)
LABEL_6:
    sub_22316DD70();
  v12 = &v7;
  ((void (*)(uint64_t **))off_24EC669D0[v6])(&v12);
  sub_224018E38(a2, *(unsigned int **)(a1 + 8));
}

void sub_224018E38(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  uint64_t *v13;

  if (!*(_BYTE *)a1)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (std::string *)",";
    v10 = v8;
    v11 = (std::string *)",";
    v12 = (std::string *)",";
    v4 = *(unsigned int *)(v8 + 24);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    ((void (*)(std::string *))off_24EC669B8[v4])(&v7);
  }
  *(_BYTE *)a1 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  std::to_string(&v7, *a2);
  v8 = v5;
  v9 = &v7;
  v10 = v5;
  v11 = &v7;
  v12 = &v7;
  v6 = *(unsigned int *)(v5 + 24);
  if ((_DWORD)v6 == -1)
    sub_22316DD70();
  v13 = &v8;
  ((void (*)(uint64_t **, uint64_t))off_24EC66960[v6])(&v13, v5);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_224018F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_224018F40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (a1)
  {
    sub_224018F40(*a1);
    sub_224018F40(a1[1]);
    v2 = a1[5];
    if (v2)
    {
      v3 = a1[6];
      v4 = (void *)a1[5];
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = (void *)a1[5];
      }
      a1[6] = v2;
      operator delete(v4);
    }
    operator delete(a1);
  }
}

void sub_224018FF0(unsigned int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 __p;
  uint64_t v18;
  unsigned __int8 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char v26;

  sub_22319FFBC(v7, a2);
  sub_224019168((uint64_t)&v16, a1, (__int128 *)v7);
  *(_OWORD *)a3 = v16;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v26)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v19;
    if (v19)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v18;
      v18 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v25)
    {
      v6 = v22;
      *(_QWORD *)(a3 + 64) = v21;
      *(_OWORD *)(a3 + 48) = v20;
      v20 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v23;
      *(_QWORD *)(a3 + 96) = v24;
      v21 = 0;
      v23 = 0uLL;
      v24 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    if (v5 && SHIBYTE(v18) < 0)
      operator delete((void *)__p);
  }
  if (v15)
  {
    if (!v14)
      goto LABEL_13;
    if (v13 < 0)
    {
      operator delete(v12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v9)
          return;
        goto LABEL_14;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v10);
    if (!v9)
      return;
LABEL_14:
    if (v8 < 0)
      operator delete(v7[0]);
  }
}

void sub_224019154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319FD28((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_224019168(uint64_t a1, unsigned int a2, __int128 *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  unsigned int v9;
  __int128 *v10;
  void *__dst[2];
  uint64_t v12;
  char v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  char v19;
  char v20;

  v4 = atomic_load((unsigned __int8 *)&qword_2557952C8);
  if ((v4 & 1) == 0)
  {
    v10 = a3;
    v9 = a2;
    v8 = __cxa_guard_acquire(&qword_2557952C8);
    a2 = v9;
    a3 = v10;
    if (v8)
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_2540CA600, &dword_22314D000);
      __cxa_guard_release(&qword_2557952C8);
      a2 = v9;
      a3 = v10;
    }
  }
  v5 = a2;
  sub_22319FFBC(__dst, a3);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = &off_2540CA600;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (!v20)
    return a1;
  *(_BYTE *)(a1 + 40) = 0;
  if (v13)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 32) = v12;
    __dst[1] = 0;
    v12 = 0;
    __dst[0] = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (!v19)
  {
    *(_BYTE *)(a1 + 112) = 1;
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  v6 = v16;
  *(_QWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v14;
  v14[0] = 0;
  v14[1] = 0;
  *(_QWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 96) = v18;
  __p[1] = 0;
  v18 = 0;
  v15 = 0;
  __p[0] = 0;
  *(_BYTE *)(a1 + 104) = 1;
  *(_BYTE *)(a1 + 112) = 1;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_13:
    operator delete(v14[0]);
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    goto LABEL_13;
LABEL_8:
  if (!v13)
    return a1;
LABEL_14:
  if ((SHIBYTE(v12) & 0x80000000) == 0)
    return a1;
  operator delete(__dst[0]);
  return a1;
}

void sub_224019314(uint64_t a1, _QWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  int v5;
  size_t v6;
  void *p_p;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *__p;
  size_t v20;
  int64_t v21;
  _QWORD *v22;

  if (!*a3)
  {
    sub_2231813E8(*a2, (uint64_t)"nullptr", 7);
    return;
  }
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_223195210(v4);
  v22 = (_QWORD *)v4;
  std::ostream::operator<<();
  v5 = *(_DWORD *)(v4 + 120);
  if ((v5 & 0x10) != 0)
  {
    v8 = *(_QWORD *)(v4 + 112);
    v9 = *(_QWORD *)(v4 + 72);
    if (v8 < v9)
    {
      *(_QWORD *)(v4 + 112) = v9;
      v8 = v9;
    }
    v10 = *(const void **)(v4 + 64);
    v6 = v8 - (_QWORD)v10;
    if (v8 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v5 & 8) == 0)
    {
      v6 = 0;
      HIBYTE(v21) = 0;
      p_p = &__p;
      goto LABEL_16;
    }
    v10 = *(const void **)(v4 + 40);
    v6 = *(_QWORD *)(v4 + 56) - (_QWORD)v10;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_22316DBC0();
  }
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    p_p = operator new(v11 + 1);
    v20 = v6;
    v21 = v12 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v21) = v6;
    p_p = &__p;
    if (!v6)
      goto LABEL_16;
  }
  memmove(p_p, v10, v6);
LABEL_16:
  *((_BYTE *)p_p + v6) = 0;
  v13 = v22;
  if (v22)
  {
    v14 = MEMORY[0x24BEDB7F0];
    v15 = *MEMORY[0x24BEDB7F0];
    *v22 = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(v14 + 72);
    *(_QWORD *)((char *)v13 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(v14 + 64);
    v13[3] = MEMORY[0x24BEDB848] + 16;
    v13[2] = v16;
    if (*((char *)v13 + 111) < 0)
      operator delete((void *)v13[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v13 + 16);
    MEMORY[0x227684CE8](v13, 0x10B2C40EED050F3);
  }
  if (v21 >= 0)
    v17 = &__p;
  else
    v17 = __p;
  if (v21 >= 0)
    v18 = HIBYTE(v21);
  else
    v18 = v20;
  sub_2231813E8(*a2, (uint64_t)v17, v18);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
}

void sub_224019574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2240195B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2240195C8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v23[2];
  std::__shared_weak_count *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  __int16 v29;

  *a1 = off_24EC66A10;
  a1[1] = &unk_24EC66A88;
  sub_223B87C9C((uint64_t)(a1 + 2), (uint64_t *)(a2 + 64));
  v23[0] = &off_24EC1F8C8;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(std::__shared_weak_count **)(a2 + 24);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = *(_QWORD *)(a2 + 48);
    v14 = *(_DWORD *)(a2 + 56);
    v15 = *(_WORD *)(a2 + 60);
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 48);
    v14 = *(_DWORD *)(a2 + 56);
    v15 = *(_WORD *)(a2 + 60);
  }
  v23[1] = v9;
  v24 = v10;
  v25 = *(_QWORD *)(a2 + 32);
  v26 = *(_DWORD *)(a2 + 40);
  v27 = v13;
  v28 = v14;
  v29 = v15;
  if (v10)
  {
    v17 = (unint64_t *)&v10->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  sub_22416BFE0((uint64_t)(a1 + 24), (uint64_t)v23, 0, v4, v5, v6, v7, v8);
  v19 = v24;
  if (!v24)
    return a1;
  v20 = (unint64_t *)&v24->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
    return a1;
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  return a1;
}

void sub_224019724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_22319A5E0((uint64_t)va);
  sub_223B8842C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_224019740(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC66A10;
  *(_QWORD *)(a1 + 8) = &unk_24EC66A88;
  v2 = *(unsigned int *)(a1 + 288);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC66CB8[v2])(&v4, a1 + 224);
  *(_DWORD *)(a1 + 288) = -1;
  sub_223B8842C(a1 + 16);
  return a1;
}

uint64_t sub_2240197B0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)(a1 - 8) = off_24EC66A10;
  *(_QWORD *)a1 = &unk_24EC66A88;
  v2 = *(unsigned int *)(a1 + 280);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC66CB8[v2])(&v4, a1 + 216);
  *(_DWORD *)(a1 + 280) = -1;
  return sub_223B8842C(a1 + 8);
}

uint64_t sub_224019820(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC66A10;
  *(_QWORD *)(a1 + 8) = &unk_24EC66A88;
  v2 = *(unsigned int *)(a1 + 288);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC66CB8[v2])(&v4, a1 + 224);
  *(_DWORD *)(a1 + 288) = -1;
  sub_223B8842C(a1 + 16);
  return MEMORY[0x227684CE8](a1, 0x10F3C406E56456ELL);
}

uint64_t sub_2240198A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24EC66A10;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC66A88;
  v3 = *(unsigned int *)(a1 + 280);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24EC66CB8[v3])(&v5, a1 + 216);
  *(_DWORD *)(a1 + 280) = -1;
  sub_223B8842C(a1 + 8);
  return MEMORY[0x227684CE8](v2, 0x10F3C406E56456ELL);
}

void sub_224019930(uint64_t a1, _DWORD *a2)
{
  if (!sub_224026DF0(a2, a1)
    && !sub_224026F9C(a2, a1)
    && !sub_224027170(a2, a1)
    && !sub_22402731C(a2, a1)
    && !sub_22402748C((uint64_t)a2, a1))
  {
    sub_2240275C4(a1, a2);
  }
}

void sub_2240199B4(uint64_t a1, uint64_t (***a2)())
{
  sub_2240199C4(a2, a1);
}

void sub_2240199C4(uint64_t (***a1)(), uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  char v24;
  char v25;
  char v26;
  void *__p;
  uint64_t v28;
  char v29;

  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC60740, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *((unsigned __int8 *)v4 + 104);
    v4[11] = "info";
    v4[12] = 4;
    if (!v6)
      *((_BYTE *)v4 + 104) = 1;
    sub_223BB4B40((uint64_t)v4, a2 + 16);
    v7 = *(unsigned __int8 *)(v5 + 104);
    *(_QWORD *)(v5 + 88) = "value";
    *(_QWORD *)(v5 + 96) = 5;
    if (!v7)
      *(_BYTE *)(v5 + 104) = 1;
    sub_224024A50(v5, (unsigned __int16 *)(a2 + 192));
    return;
  }
  v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC20CC0, 0);
  if (v8)
  {
    v9 = v8;
    sub_223BBD12C((uint64_t)&__p, v8, a2 + 16);
    LODWORD(__p) = 2;
    sub_224554038(v9[6], &__p);
    if (__p <= 1)
    {
      sub_2231B31EC(v9, a2 + 192, __p);
    }
    else
    {
      sub_2231B1308(v9 + 2);
      sub_2231B31EC(v9, a2 + 192, 2u);
      v10 = v9[4];
      v11 = *(_QWORD *)(v10 - 16) - (*(uint64_t (**)(_QWORD *))(v9[2] + 32))(v9 + 2) + *(_QWORD *)(v10 - 8);
      if (v11)
        (*(void (**)(_QWORD *, uint64_t))(v9[2] + 40))(v9 + 2, v11);
      v9[4] -= 16;
    }
    return;
  }
  v12 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC607C8, 0);
  if (!v12)
  {
    v16 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC60800, 0);
    if (!v16)
    {
      if (*a1 == &off_24EC77900)
      {
        sub_223BCDEF0((uint64_t)&__p, a1, a2 + 16);
        sub_223BD17F8((uint64_t)&__p, a1, a2 + 192);
      }
      else
      {
        sub_224027740(a2, (uint64_t)a1);
      }
      return;
    }
    v17 = (uint64_t)v16;
    LODWORD(__p) = 6;
    sub_2245508F0((uint64_t)v16, &__p);
    v18 = __p;
    if (__p >= 6)
      v19 = 6;
    else
      v19 = __p;
    if (v19 < 3)
      sub_223BC4F50((uint64_t)&__p, v17, a2 + 16, v19);
    else
      sub_223BC5140(v17, a2 + 16, v19);
    if (v18 < 3 || *(_BYTE *)(v17 + 131))
    {
LABEL_31:
      v20 = a2 + 192;
      LODWORD(__p) = 2;
      sub_2245508F0(v17, &__p);
      v21 = __p;
      if (__p >= 2)
        v22 = 2;
      else
        v22 = __p;
      if (v22 < 2)
        sub_223BC8E50((uint64_t)&__p, (const void *)v17, v20);
      else
        sub_223BC90C8(v17, v20);
      if (v21 < 2 || *(_BYTE *)(v17 + 131))
        return;
      while (1)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v17 + 16) + *(_QWORD *)(**(_QWORD **)(v17 + 16) - 24) + 32) & 2) != 0)
          return;
        sub_2245523C0(v17, (uint64_t)&__p);
        if (v29 < 0)
        {
          if (v28 != 1 || *(unsigned __int8 *)(v17 + 72) != *(unsigned __int8 *)__p)
          {
LABEL_67:
            v26 = 1;
            goto LABEL_68;
          }
        }
        else if (v29 != 1 || *(unsigned __int8 *)(v17 + 72) != __p)
        {
          goto LABEL_67;
        }
        v26 = 0;
LABEL_68:
        if (v29 < 0)
          operator delete(__p);
        if (*(_BYTE *)(v17 + 131))
          v25 = 0;
        else
          v25 = v26;
        if ((v25 & 1) == 0)
          return;
      }
    }
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v17 + 16) + *(_QWORD *)(**(_QWORD **)(v17 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_31;
      sub_2245523C0(v17, (uint64_t)&__p);
      if (v29 < 0)
      {
        if (v28 != 1 || *(unsigned __int8 *)(v17 + 72) != *(unsigned __int8 *)__p)
        {
LABEL_48:
          v24 = 1;
          goto LABEL_49;
        }
      }
      else if (v29 != 1 || *(unsigned __int8 *)(v17 + 72) != __p)
      {
        goto LABEL_48;
      }
      v24 = 0;
LABEL_49:
      if (v29 < 0)
        operator delete(__p);
      if (*(_BYTE *)(v17 + 131))
        v23 = 0;
      else
        v23 = v24;
      if ((v23 & 1) == 0)
        goto LABEL_31;
    }
  }
  v13 = (uint64_t)v12;
  v14 = *((unsigned __int8 *)v12 + 104);
  v12[11] = "info";
  v12[12] = 4;
  if (!v14)
    *((_BYTE *)v12 + 104) = 1;
  sub_223BBD758((uint64_t)v12, a2 + 16);
  v15 = *(unsigned __int8 *)(v13 + 104);
  *(_QWORD *)(v13 + 88) = "value";
  *(_QWORD *)(v13 + 96) = 5;
  if (!v15)
    *(_BYTE *)(v13 + 104) = 1;
  sub_224025B90(v13, (unsigned __int16 *)(a2 + 192));
}

uint64_t sub_224019E70()
{
  return 2;
}

uint64_t sub_224019E78()
{
  return 2;
}

uint64_t sub_224019E80()
{
  return 1;
}

uint64_t sub_224019E88()
{
  return 1;
}

void sub_224019E90(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BYTE v9[16];
  std::__shared_weak_count *v10;
  uint64_t v11;
  _BYTE v12[216];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  sub_22416C400(a1 + 192, (uint64_t)v9);
  sub_223B8901C(a1 + 16, (uint64_t)v12);
  v4 = operator new();
  sub_224026CD0(v4, (uint64_t)v9, (uint64_t)v12);
  v11 = 0;
  *a2 = &off_24EC6A3B8;
  a2[1] = v4;
  v5 = (_QWORD *)operator new();
  *v5 = &off_24EC6A4B0;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v4;
  a2[2] = v5;
  sub_2231AD66C((uint64_t)v12);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_224019FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD *);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2231C35FC((_QWORD **)va1);
  sub_2231AD66C((uint64_t)va2);
  sub_22319B358((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22401A004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B358((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22401A01C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_224019E90(a1 - 8, a2);
}

uint64_t sub_22401A024(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[6];
  char v7;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A430, (const struct __class_type_info *)&unk_24EC66C80, 8);
  if (result)
  {
    v4 = result;
    v6[0] = a1 + 24;
    v6[1] = a1 + 40;
    v6[2] = a1 + 72;
    v6[3] = a1 + 96;
    v6[4] = a1 + 128;
    v6[5] = a1 + 160;
    v5[0] = result + 24;
    v5[1] = result + 40;
    v5[2] = result + 72;
    v5[3] = result + 96;
    v5[4] = result + 128;
    v5[5] = result + 160;
    result = sub_224018700((uint64_t)&v7, v6, v5);
    if ((_DWORD)result)
      return sub_22416C7A8((unsigned __int16 *)(a1 + 192), (unsigned __int16 *)(v4 + 192));
  }
  return result;
}

uint64_t sub_22401A0D8(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[6];
  char v7;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A430, (const struct __class_type_info *)&unk_24EC66C80, 8);
  if (result)
  {
    v4 = result;
    v6[0] = a1 + 16;
    v6[1] = a1 + 32;
    v6[2] = a1 + 64;
    v6[3] = a1 + 88;
    v6[4] = a1 + 120;
    v6[5] = a1 + 152;
    v5[0] = result + 24;
    v5[1] = result + 40;
    v5[2] = result + 72;
    v5[3] = result + 96;
    v5[4] = result + 128;
    v5[5] = result + 160;
    result = sub_224018700((uint64_t)&v7, v6, v5);
    if ((_DWORD)result)
      return sub_22416C7A8((unsigned __int16 *)(a1 + 184), (unsigned __int16 *)(v4 + 192));
  }
  return result;
}

void sub_22401A18C(uint64_t a1, _DWORD *a2)
{
  if (!sub_224026DF0(a2, a1)
    && !sub_224026F9C(a2, a1)
    && !sub_224027170(a2, a1)
    && !sub_22402731C(a2, a1)
    && !sub_22402748C((uint64_t)a2, a1))
  {
    sub_2240275C4(a1, a2);
  }
}

void sub_22401A210(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;

  v3 = a1 - 8;
  if (!sub_224026DF0(a2, a1 - 8)
    && !sub_224026F9C(a2, v3)
    && !sub_224027170(a2, v3)
    && !sub_22402731C(a2, v3)
    && !sub_22402748C((uint64_t)a2, v3))
  {
    sub_2240275C4(v3, a2);
  }
}

void sub_22401A294(uint64_t a1, uint64_t (***a2)())
{
  sub_2240199C4(a2, a1);
}

void sub_22401A2A4(uint64_t a1, uint64_t (***a2)())
{
  sub_2240199C4(a2, a1 - 8);
}

uint64_t sub_22401A2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24EC68708;
  *(_QWORD *)(a1 + 8) = &unk_24EC68780;
  sub_223B87C9C(a1 + 16, (uint64_t *)(a2 + 32));
  sub_22414D320(a1 + 192, *(uint64_t **)(a2 + 8));
  *(_QWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(v4 + 408))
    *(_QWORD *)(a1 + 584) = sub_22323C290((char **)(a1 + 576), v4 + 384);
  return a1;
}

void sub_22401A34C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  void **v4;
  void **v5;
  void **v7;
  void **v8;
  void *v9;
  void **v10;

  v5 = v4;
  v10 = v5;
  v7 = (void **)*v5;
  if (*v5)
  {
    v8 = *(void ***)(v2 + 584);
    v9 = *v5;
    if (v8 != v7)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      v9 = *v10;
    }
    *(_QWORD *)(v2 + 584) = v7;
    operator delete(v9);
  }
  sub_2232E7BD4(v3);
  sub_223B8842C(v1);
  _Unwind_Resume(a1);
}

void sub_22401A3BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223B8842C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_22401A3D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = off_24EC68708;
  a1[1] = &unk_24EC68780;
  v2 = a1[72];
  if (v2)
  {
    v3 = a1[73];
    v4 = (void *)a1[72];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[72];
    }
    a1[73] = v2;
    operator delete(v4);
  }
  sub_2232E7BD4(a1 + 24);
  sub_223B8842C((uint64_t)(a1 + 2));
  return a1;
}

uint64_t sub_22401A460(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(a1 - 1) = off_24EC68708;
  *a1 = &unk_24EC68780;
  v2 = a1[71];
  if (v2)
  {
    v3 = a1[72];
    v4 = (void *)a1[71];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[71];
    }
    a1[72] = v2;
    operator delete(v4);
  }
  sub_2232E7BD4(a1 + 23);
  return sub_223B8842C((uint64_t)(a1 + 1));
}

void sub_22401A4EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = off_24EC68708;
  a1[1] = &unk_24EC68780;
  v2 = a1[72];
  if (v2)
  {
    v3 = a1[73];
    v4 = (void *)a1[72];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[72];
    }
    a1[73] = v2;
    operator delete(v4);
  }
  sub_2232E7BD4(a1 + 24);
  sub_223B8842C((uint64_t)(a1 + 2));
  JUMPOUT(0x227684CE8);
}

void sub_22401A58C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(a1 - 1) = off_24EC68708;
  *a1 = &unk_24EC68780;
  v2 = a1[71];
  if (v2)
  {
    v3 = a1[72];
    v4 = (void *)a1[71];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[71];
    }
    a1[72] = v2;
    operator delete(v4);
  }
  sub_2232E7BD4(a1 + 23);
  sub_223B8842C((uint64_t)(a1 + 1));
  JUMPOUT(0x227684CE8);
}

void sub_22401A634(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_22401A664(a2, a1, &v3);
}

void sub_22401A664(uint64_t (***a1)(), uint64_t a2, unsigned int *a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;

  v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC605E8, 0);
  if (v6)
  {
    sub_224032110((uint64_t)v6, a2, *a3);
  }
  else
  {
    v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC1FC00, 0);
    if (v7)
    {
      sub_2240322BC((uint64_t)v7, a2, *a3);
    }
    else
    {
      v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC60670, 0);
      if (v8)
      {
        sub_2240324AC((uint64_t)v8, a2, *a3);
      }
      else
      {
        v9 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC606B8, 0);
        if (v9)
        {
          sub_224032658((uint64_t)v9, a2, *a3);
        }
        else
        {
          v10 = *a3;
          if (*a1 == &off_24EC776C0)
            sub_224032878((uint64_t)a1, a2, v10);
          else
            sub_224032A7C(a1, a2, v10);
        }
      }
    }
  }
}

void sub_22401A79C(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_22401A7CC(a2, a1, &v3);
}

void sub_22401A7CC(uint64_t (***a1)(), uint64_t a2, unsigned int *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  void *v9;
  unsigned int v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (!sub_224032BF0(a1, a2, a3))
  {
    v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC20CC0, 0);
    if (v6)
    {
      v7 = v6;
      v8 = *a3;
      sub_223BBD12C((uint64_t)&v11, v6, a2 + 16);
      sub_2232F3C70((uint64_t)&v12, v7, (uint64_t *)(a2 + 192));
      if (v8 >= 3)
        sub_2231B7368((uint64_t)v7, a2 + 576);
    }
    else if (!sub_224032D0C(a1, a2, a3))
    {
      v9 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC60800, 0);
      if (v9)
      {
        sub_224032E28((uint64_t)v9, a2, *a3);
      }
      else
      {
        v10 = *a3;
        if (*a1 == &off_24EC77900)
        {
          sub_223BCDEF0((uint64_t)&v13, a1, a2 + 16);
          sub_22402F460((uint64_t)&v14, a1, (uint64_t *)(a2 + 192));
          if (v10 >= 3)
            sub_223BCE828(a1, a2 + 576);
        }
        else
        {
          sub_22403307C((uint64_t)a1, a2, v10);
        }
      }
    }
  }
}

uint64_t sub_22401A934()
{
  return 3;
}

uint64_t sub_22401A93C()
{
  return 3;
}

uint64_t sub_22401A944()
{
  return 1;
}

uint64_t sub_22401A94C()
{
  return 1;
}

void sub_22401A954(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  char v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 __p;
  _BYTE v13[7];
  char v14;
  char v15;
  uint64_t v16[48];
  uint64_t v17;
  std::__shared_weak_count *v18;
  _DWORD v19[2];
  _BYTE v20[216];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = a1[72];
  v7 = a1[73];
  if (v6 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = *(void **)v6;
    v2 = *(_QWORD *)(v6 + 8);
    v19[0] = *(_DWORD *)(v6 + 16);
    *(_DWORD *)((char *)v19 + 3) = *(_DWORD *)(v6 + 19);
    v3 = *(_BYTE *)(v6 + 23);
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)v6 = 0;
  }
  sub_22414DCC8(a1 + 24, 1, (uint64_t)v16);
  LOBYTE(__p) = 0;
  v15 = 0;
  if (v6 != v7)
  {
    if (v3 < 0)
    {
      sub_223197FA4(&__p, v8, v2);
    }
    else
    {
      *(_QWORD *)&__p = v8;
      *((_QWORD *)&__p + 1) = v2;
      *(_DWORD *)v13 = v19[0];
      *(_DWORD *)&v13[3] = *(_DWORD *)((char *)v19 + 3);
      v14 = v3;
    }
    v15 = 1;
  }
  sub_2241468E0(&v17, (uint64_t)v16, &__p);
  sub_223B8901C((uint64_t)(a1 + 2), (uint64_t)v20);
  sub_224031FD8(a2, &v17, (uint64_t)v20);
  sub_2231AD66C((uint64_t)v20);
  v9 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v15 && v14 < 0)
    operator delete((void *)__p);
  sub_22316F8F4(v16);
  if (v6 != v7 && v3 < 0)
    operator delete(v8);
}

void sub_22401AAFC(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, char a9, ...)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  va_list va;

  va_start(va, a9);
  if (a9 && a8 < 0)
    operator delete(__p);
  sub_22316F8F4((uint64_t *)va);
  if (v10 != v11 && v12 < 0)
    operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_22401AB68(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_22401A954((uint64_t *)(a1 - 8), a2);
}

uint64_t sub_22401AB70(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[6];
  char v7;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A430, (const struct __class_type_info *)&unk_24EC68848, 8);
  if (result)
  {
    v4 = result;
    result = sub_223657B10(a1 + 192, result + 192);
    if ((_DWORD)result)
    {
      v6[0] = a1 + 24;
      v6[1] = a1 + 40;
      v6[2] = a1 + 72;
      v6[3] = a1 + 96;
      v6[4] = a1 + 128;
      v6[5] = a1 + 160;
      v5[0] = v4 + 24;
      v5[1] = v4 + 40;
      v5[2] = v4 + 72;
      v5[3] = v4 + 96;
      v5[4] = v4 + 128;
      v5[5] = v4 + 160;
      return sub_224018700((uint64_t)&v7, v6, v5);
    }
  }
  return result;
}

uint64_t sub_22401AC24(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[6];
  char v7;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A430, (const struct __class_type_info *)&unk_24EC68848, 8);
  if (result)
  {
    v4 = result;
    result = sub_223657B10(a1 + 184, result + 192);
    if ((_DWORD)result)
    {
      v6[0] = a1 + 16;
      v6[1] = a1 + 32;
      v6[2] = a1 + 64;
      v6[3] = a1 + 88;
      v6[4] = a1 + 120;
      v6[5] = a1 + 152;
      v5[0] = v4 + 24;
      v5[1] = v4 + 40;
      v5[2] = v4 + 72;
      v5[3] = v4 + 96;
      v5[4] = v4 + 128;
      v5[5] = v4 + 160;
      return sub_224018700((uint64_t)&v7, v6, v5);
    }
  }
  return result;
}

void sub_22401ACD8(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_22401A664(a2, a1, &v3);
}

void sub_22401AD08(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_22401A664(a2, a1 - 8, &v3);
}

void sub_22401AD38(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_22401A7CC(a2, a1, &v3);
}

void sub_22401AD68(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_22401A7CC(a2, a1 - 8, &v3);
}

uint64_t sub_22401AD98(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  char v11;
  __int128 v12;
  void *v13;
  size_t v14;
  char v15;
  __int128 v16;
  void *v17;
  size_t v18;
  char v19;
  __int128 v20;
  void *v21;
  size_t v22;
  char v23;
  __int128 v24;
  void *v25;
  size_t v26;
  char v27;
  __int128 v28;
  void *v29;
  size_t v30;
  char v31;
  __int128 v32;
  void *v33;
  size_t v34;

  v4 = a1 + 24;
  *(_OWORD *)(a1 + 48) = 0u;
  v5 = a1 + 48;
  v6 = a1 + 72;
  *(_OWORD *)(a1 + 96) = 0u;
  v7 = a1 + 96;
  v8 = a1 + 120;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 144) = *((_DWORD *)a2 + 4);
  if (*((_BYTE *)a2 + 48))
  {
    if (*((char *)a2 + 47) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 152), (void *)a2[3], a2[4]);
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 3);
      *(_QWORD *)(a1 + 168) = a2[5];
      *(_OWORD *)(a1 + 152) = v9;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 175) = 0;
    *(_BYTE *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)a2;
  v10 = *((_OWORD *)a2 + 13);
  *(_QWORD *)(a1 + 208) = a2[28];
  *(_OWORD *)(a1 + 192) = v10;
  if (*((_BYTE *)a2 + 200))
  {
    if (a2 + 7 != (_QWORD *)a1)
    {
      v11 = *((_BYTE *)a2 + 79);
      if (*(char *)(a1 + 23) < 0)
      {
        if (v11 >= 0)
          v13 = a2 + 7;
        else
          v13 = (void *)a2[7];
        if (v11 >= 0)
          v14 = *((unsigned __int8 *)a2 + 79);
        else
          v14 = a2[8];
        sub_22319C4B8((void **)a1, v13, v14);
      }
      else if ((*((_BYTE *)a2 + 79) & 0x80) != 0)
      {
        sub_22319C3F4((_QWORD *)a1, (void *)a2[7], a2[8]);
      }
      else
      {
        v12 = *(_OWORD *)(a2 + 7);
        *(_QWORD *)(a1 + 16) = a2[9];
        *(_OWORD *)a1 = v12;
      }
    }
    if ((_QWORD *)v4 != a2 + 10)
    {
      v15 = *((_BYTE *)a2 + 103);
      if (*(char *)(a1 + 47) < 0)
      {
        if (v15 >= 0)
          v17 = a2 + 10;
        else
          v17 = (void *)a2[10];
        if (v15 >= 0)
          v18 = *((unsigned __int8 *)a2 + 103);
        else
          v18 = a2[11];
        sub_22319C4B8((void **)v4, v17, v18);
      }
      else if ((*((_BYTE *)a2 + 103) & 0x80) != 0)
      {
        sub_22319C3F4((_QWORD *)v4, (void *)a2[10], a2[11]);
      }
      else
      {
        v16 = *((_OWORD *)a2 + 5);
        *(_QWORD *)(v4 + 16) = a2[12];
        *(_OWORD *)v4 = v16;
      }
    }
    if ((_QWORD *)v5 != a2 + 13)
    {
      v19 = *((_BYTE *)a2 + 127);
      if (*(char *)(a1 + 71) < 0)
      {
        if (v19 >= 0)
          v21 = a2 + 13;
        else
          v21 = (void *)a2[13];
        if (v19 >= 0)
          v22 = *((unsigned __int8 *)a2 + 127);
        else
          v22 = a2[14];
        sub_22319C4B8((void **)v5, v21, v22);
      }
      else if ((*((_BYTE *)a2 + 127) & 0x80) != 0)
      {
        sub_22319C3F4((_QWORD *)v5, (void *)a2[13], a2[14]);
      }
      else
      {
        v20 = *(_OWORD *)(a2 + 13);
        *(_QWORD *)(v5 + 16) = a2[15];
        *(_OWORD *)v5 = v20;
      }
    }
    if ((_QWORD *)v6 != a2 + 16)
    {
      v23 = *((_BYTE *)a2 + 151);
      if (*(char *)(a1 + 95) < 0)
      {
        if (v23 >= 0)
          v25 = a2 + 16;
        else
          v25 = (void *)a2[16];
        if (v23 >= 0)
          v26 = *((unsigned __int8 *)a2 + 151);
        else
          v26 = a2[17];
        sub_22319C4B8((void **)v6, v25, v26);
      }
      else if ((*((_BYTE *)a2 + 151) & 0x80) != 0)
      {
        sub_22319C3F4((_QWORD *)v6, (void *)a2[16], a2[17]);
      }
      else
      {
        v24 = *((_OWORD *)a2 + 8);
        *(_QWORD *)(v6 + 16) = a2[18];
        *(_OWORD *)v6 = v24;
      }
    }
    if ((_QWORD *)v7 != a2 + 19)
    {
      v27 = *((_BYTE *)a2 + 175);
      if (*(char *)(a1 + 119) < 0)
      {
        if (v27 >= 0)
          v29 = a2 + 19;
        else
          v29 = (void *)a2[19];
        if (v27 >= 0)
          v30 = *((unsigned __int8 *)a2 + 175);
        else
          v30 = a2[20];
        sub_22319C4B8((void **)v7, v29, v30);
      }
      else if ((*((_BYTE *)a2 + 175) & 0x80) != 0)
      {
        sub_22319C3F4((_QWORD *)v7, (void *)a2[19], a2[20]);
      }
      else
      {
        v28 = *(_OWORD *)(a2 + 19);
        *(_QWORD *)(v7 + 16) = a2[21];
        *(_OWORD *)v7 = v28;
      }
    }
    if ((_QWORD *)v8 != a2 + 22)
    {
      v31 = *((_BYTE *)a2 + 199);
      if (*(char *)(a1 + 143) < 0)
      {
        if (v31 >= 0)
          v33 = a2 + 22;
        else
          v33 = (void *)a2[22];
        if (v31 >= 0)
          v34 = *((unsigned __int8 *)a2 + 199);
        else
          v34 = a2[23];
        sub_22319C4B8((void **)v8, v33, v34);
      }
      else if ((*((_BYTE *)a2 + 199) & 0x80) != 0)
      {
        sub_22319C3F4((_QWORD *)v8, (void *)a2[22], a2[23]);
      }
      else
      {
        v32 = *((_OWORD *)a2 + 11);
        *(_QWORD *)(v8 + 16) = a2[24];
        *(_OWORD *)v8 = v32;
      }
    }
  }
  return a1;
}

void sub_22401B098(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (*(char *)(v1 + 143) < 0)
  {
    operator delete(*v6);
    if ((*(char *)(v1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 95) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v5);
  if ((*(char *)(v1 + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*v4);
  if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_22401B14C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BOOL4 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  void *v11;
  __int128 v12;
  int v13;
  int v14;
  void *v15[3];
  void *v16[2];
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  void *__p[2];
  void *v27;
  __int128 v28;
  uint64_t v29;
  void *v30[2];
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  void *v34[2];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;

  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(a1 + 23))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(a1 + 47))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 71) < 0)
  {
    if (*(_QWORD *)(a1 + 56))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(a1 + 71))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 95) < 0)
  {
    if (*(_QWORD *)(a1 + 80))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(a1 + 95))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 119) < 0)
    v4 = *(_QWORD *)(a1 + 104);
  else
    v4 = *(unsigned __int8 *)(a1 + 119);
  if (v4)
  {
LABEL_21:
    v5 = 1;
    v6 = *(char *)(a1 + 175);
    if ((v6 & 0x80000000) == 0)
      goto LABEL_22;
LABEL_28:
    v7 = *(_QWORD *)(a1 + 160);
    LOBYTE(__p[0]) = 0;
    v38 = 0;
    if (!v5)
      goto LABEL_55;
LABEL_29:
    sub_224568FAC((char *)v15, (__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), (__int128 *)(a1 + 72), (__int128 *)(a1 + 96), (__int128 *)(a1 + 120));
    if (!v38)
    {
      *(_OWORD *)__p = *(_OWORD *)v15;
      v11 = v15[2];
      memset(v15, 0, sizeof(v15));
      v12 = *(_OWORD *)v16;
      v16[0] = 0;
      v28 = v12;
      v27 = v11;
      v29 = v17;
      v16[1] = 0;
      v17 = 0;
      *(_OWORD *)v30 = *(_OWORD *)v18;
      v18[0] = 0;
      v18[1] = 0;
      v31 = v19;
      v33 = v21;
      v32 = *(_OWORD *)v20;
      v19 = 0;
      v20[0] = 0;
      v20[1] = 0;
      v21 = 0;
      *(_OWORD *)v34 = *(_OWORD *)v22;
      v22[0] = 0;
      v22[1] = 0;
      v35 = v23;
      v37 = v25;
      v36 = v24;
      v23 = 0;
      v24 = 0uLL;
      v25 = 0;
      v38 = 1;
      goto LABEL_52;
    }
    if (SHIBYTE(v27) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)v15;
    v27 = v15[2];
    HIBYTE(v15[2]) = 0;
    LOBYTE(v15[0]) = 0;
    if (SHIBYTE(v29) < 0)
      operator delete((void *)v28);
    v28 = *(_OWORD *)v16;
    v29 = v17;
    HIBYTE(v17) = 0;
    LOBYTE(v16[0]) = 0;
    if (SHIBYTE(v31) < 0)
      operator delete(v30[0]);
    *(_OWORD *)v30 = *(_OWORD *)v18;
    v31 = v19;
    HIBYTE(v19) = 0;
    LOBYTE(v18[0]) = 0;
    if (SHIBYTE(v33) < 0)
      operator delete((void *)v32);
    v32 = *(_OWORD *)v20;
    v33 = v21;
    HIBYTE(v21) = 0;
    LOBYTE(v20[0]) = 0;
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
    *(_OWORD *)v34 = *(_OWORD *)v22;
    v35 = v23;
    HIBYTE(v23) = 0;
    LOBYTE(v22[0]) = 0;
    if ((SHIBYTE(v37) & 0x80000000) == 0)
    {
      v36 = v24;
      v37 = v25;
      HIBYTE(v25) = 0;
      LOBYTE(v24) = 0;
      if (SHIBYTE(v21) < 0)
        goto LABEL_42;
LABEL_52:
      if (SHIBYTE(v19) < 0)
      {
LABEL_43:
        operator delete(v18[0]);
        if (SHIBYTE(v17) < 0)
          goto LABEL_44;
        goto LABEL_54;
      }
LABEL_53:
      if (SHIBYTE(v17) < 0)
      {
LABEL_44:
        operator delete(v16[0]);
        if ((SHIBYTE(v15[2]) & 0x80000000) == 0)
          goto LABEL_55;
        goto LABEL_45;
      }
LABEL_54:
      if ((SHIBYTE(v15[2]) & 0x80000000) == 0)
        goto LABEL_55;
LABEL_45:
      operator delete(v15[0]);
      v9 = *(_DWORD *)(a1 + 144);
      LODWORD(v15[0]) = v9;
      if (v7)
        goto LABEL_56;
      goto LABEL_46;
    }
    operator delete((void *)v36);
    v36 = v24;
    v37 = v25;
    HIBYTE(v25) = 0;
    LOBYTE(v24) = 0;
    if (SHIBYTE(v23) < 0)
    {
      operator delete(v22[0]);
      if ((SHIBYTE(v21) & 0x80000000) == 0)
        goto LABEL_52;
    }
    else if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
LABEL_42:
    operator delete(v20[0]);
    if (SHIBYTE(v19) < 0)
      goto LABEL_43;
    goto LABEL_53;
  }
  if (*(char *)(a1 + 143) < 0)
    v8 = *(_QWORD *)(a1 + 128);
  else
    v8 = *(unsigned __int8 *)(a1 + 143);
  v5 = v8 != 0;
  v6 = *(char *)(a1 + 175);
  if (v6 < 0)
    goto LABEL_28;
LABEL_22:
  v7 = v6;
  LOBYTE(__p[0]) = 0;
  v38 = 0;
  if (v5)
    goto LABEL_29;
LABEL_55:
  v9 = *(_DWORD *)(a1 + 144);
  LODWORD(v15[0]) = v9;
  if (v7)
  {
LABEL_56:
    if (*(char *)(a1 + 175) < 0)
    {
      sub_223197FA4(&v15[1], *(void **)(a1 + 152), *(_QWORD *)(a1 + 160));
      v9 = (int)v15[0];
    }
    else
    {
      *(_OWORD *)&v15[1] = *(_OWORD *)(a1 + 152);
      v16[0] = *(void **)(a1 + 168);
    }
    LOBYTE(v16[1]) = 1;
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 176);
    *(_DWORD *)(a2 + 16) = v9;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)&v15[1];
    *(void **)(a2 + 40) = v16[0];
    v15[1] = 0;
    v15[2] = 0;
    v16[0] = 0;
    *(_BYTE *)(a2 + 48) = 1;
    *(_BYTE *)(a2 + 56) = 0;
    v10 = (char *)(a2 + 56);
    *(_BYTE *)(a2 + 200) = 0;
    if (v38)
      goto LABEL_60;
LABEL_47:
    *(_OWORD *)(a2 + 208) = *(_OWORD *)(a1 + 192);
    *(_QWORD *)(a2 + 224) = *(_QWORD *)(a1 + 208);
    if (!v38)
      return;
    goto LABEL_64;
  }
LABEL_46:
  LOBYTE(v15[1]) = 0;
  LOBYTE(v16[1]) = 0;
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 176);
  *(_DWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  v10 = (char *)(a2 + 56);
  *(_BYTE *)(a2 + 200) = 0;
  if (!v38)
    goto LABEL_47;
LABEL_60:
  sub_224011F80(v10, (__int128 *)__p);
  *(_BYTE *)(a2 + 200) = 1;
  v13 = LOBYTE(v16[1]);
  v14 = SHIBYTE(v16[0]);
  *(_OWORD *)(a2 + 208) = *(_OWORD *)(a1 + 192);
  *(_QWORD *)(a2 + 224) = *(_QWORD *)(a1 + 208);
  if (v13)
  {
    if (v14 < 0)
      operator delete(v15[1]);
  }
  if (!v38)
    return;
LABEL_64:
  if (SHIBYTE(v37) < 0)
  {
    operator delete((void *)v36);
    if ((SHIBYTE(v35) & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v33) & 0x80000000) == 0)
        goto LABEL_67;
      goto LABEL_73;
    }
  }
  else if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(v34[0]);
  if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
LABEL_67:
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      goto LABEL_68;
LABEL_74:
    operator delete(v30[0]);
    if ((SHIBYTE(v29) & 0x80000000) == 0)
    {
LABEL_69:
      if ((SHIBYTE(v27) & 0x80000000) == 0)
        return;
LABEL_76:
      operator delete(__p[0]);
      return;
    }
    goto LABEL_75;
  }
LABEL_73:
  operator delete((void *)v32);
  if (SHIBYTE(v31) < 0)
    goto LABEL_74;
LABEL_68:
  if ((SHIBYTE(v29) & 0x80000000) == 0)
    goto LABEL_69;
LABEL_75:
  operator delete((void *)v28);
  if (SHIBYTE(v27) < 0)
    goto LABEL_76;
}

void sub_22401B6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_224011EC0((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_22401B6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_224011EC0((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_22401B6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  void **v32;

  sub_224011EC0(v31);
  if (*(_BYTE *)(v30 + 48) && *(char *)(v30 + 47) < 0)
    operator delete(*v32);
  if (a16)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  sub_224011EC0((uint64_t)&a30);
  _Unwind_Resume(a1);
}

BOOL sub_22401B714(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const void **v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const void **v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const void **v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  const void **v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  const void **v43;
  unsigned __int8 *v44;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v9 = a1[47];
  if ((v9 & 0x80u) == 0)
    v10 = a1[47];
  else
    v10 = *((_QWORD *)a1 + 4);
  v11 = v6[47];
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)v6 + 4);
  if (v10 != v11)
    return 0;
  v13 = (const void **)(a1 + 24);
  if (v12 >= 0)
    v14 = v6 + 24;
  else
    v14 = (unsigned __int8 *)*((_QWORD *)v6 + 3);
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*v13, v14, *((_QWORD *)a1 + 4)))
      return 0;
  }
  else if (a1[47])
  {
    while (*(unsigned __int8 *)v13 == *v14)
    {
      v13 = (const void **)((char *)v13 + 1);
      ++v14;
      if (!--v9)
        goto LABEL_31;
    }
    return 0;
  }
LABEL_31:
  v15 = a1[71];
  if ((v15 & 0x80u) == 0)
    v16 = a1[71];
  else
    v16 = *((_QWORD *)a1 + 7);
  v17 = v6[71];
  v18 = (char)v17;
  if ((v17 & 0x80u) != 0)
    v17 = *((_QWORD *)v6 + 7);
  if (v16 != v17)
    return 0;
  v19 = (const void **)(a1 + 48);
  if (v18 >= 0)
    v20 = v6 + 48;
  else
    v20 = (unsigned __int8 *)*((_QWORD *)v6 + 6);
  if ((v15 & 0x80) != 0)
  {
    if (memcmp(*v19, v20, *((_QWORD *)a1 + 7)))
      return 0;
  }
  else if (a1[71])
  {
    while (*(unsigned __int8 *)v19 == *v20)
    {
      v19 = (const void **)((char *)v19 + 1);
      ++v20;
      if (!--v15)
        goto LABEL_46;
    }
    return 0;
  }
LABEL_46:
  v21 = a1[95];
  if ((v21 & 0x80u) == 0)
    v22 = a1[95];
  else
    v22 = *((_QWORD *)a1 + 10);
  v23 = v6[95];
  v24 = (char)v23;
  if ((v23 & 0x80u) != 0)
    v23 = *((_QWORD *)v6 + 10);
  if (v22 != v23)
    return 0;
  v25 = (const void **)(a1 + 72);
  if (v24 >= 0)
    v26 = v6 + 72;
  else
    v26 = (unsigned __int8 *)*((_QWORD *)v6 + 9);
  if ((v21 & 0x80) != 0)
  {
    if (memcmp(*v25, v26, *((_QWORD *)a1 + 10)))
      return 0;
  }
  else if (a1[95])
  {
    while (*(unsigned __int8 *)v25 == *v26)
    {
      v25 = (const void **)((char *)v25 + 1);
      ++v26;
      if (!--v21)
        goto LABEL_61;
    }
    return 0;
  }
LABEL_61:
  v27 = a1[119];
  if ((v27 & 0x80u) == 0)
    v28 = a1[119];
  else
    v28 = *((_QWORD *)a1 + 13);
  v29 = v6[119];
  v30 = (char)v29;
  if ((v29 & 0x80u) != 0)
    v29 = *((_QWORD *)v6 + 13);
  if (v28 != v29)
    return 0;
  v31 = (const void **)(a1 + 96);
  if (v30 >= 0)
    v32 = v6 + 96;
  else
    v32 = (unsigned __int8 *)*((_QWORD *)v6 + 12);
  if ((v27 & 0x80) != 0)
  {
    if (memcmp(*v31, v32, *((_QWORD *)a1 + 13)))
      return 0;
  }
  else if (a1[119])
  {
    while (*(unsigned __int8 *)v31 == *v32)
    {
      v31 = (const void **)((char *)v31 + 1);
      ++v32;
      if (!--v27)
        goto LABEL_76;
    }
    return 0;
  }
LABEL_76:
  v33 = a1[143];
  if ((v33 & 0x80u) == 0)
    v34 = a1[143];
  else
    v34 = *((_QWORD *)a1 + 16);
  v35 = v6[143];
  v36 = (char)v35;
  if ((v35 & 0x80u) != 0)
    v35 = *((_QWORD *)v6 + 16);
  if (v34 != v35)
    return 0;
  v37 = (const void **)(a1 + 120);
  if (v36 >= 0)
    v38 = v6 + 120;
  else
    v38 = (unsigned __int8 *)*((_QWORD *)v6 + 15);
  if ((v33 & 0x80) != 0)
  {
    if (memcmp(*v37, v38, *((_QWORD *)a1 + 16)))
      return 0;
  }
  else if (a1[143])
  {
    while (*(unsigned __int8 *)v37 == *v38)
    {
      v37 = (const void **)((char *)v37 + 1);
      ++v38;
      if (!--v33)
        goto LABEL_91;
    }
    return 0;
  }
LABEL_91:
  if (*((_DWORD *)a1 + 36) != *((_DWORD *)v6 + 36))
    return 0;
  v39 = a1[175];
  if ((v39 & 0x80u) == 0)
    v40 = a1[175];
  else
    v40 = *((_QWORD *)a1 + 20);
  v41 = v6[175];
  v42 = (char)v41;
  if ((v41 & 0x80u) != 0)
    v41 = *((_QWORD *)v6 + 20);
  if (v40 != v41)
    return 0;
  v43 = (const void **)(a1 + 152);
  if (v42 >= 0)
    v44 = v6 + 152;
  else
    v44 = (unsigned __int8 *)*((_QWORD *)v6 + 19);
  if ((v39 & 0x80) != 0)
  {
    if (!memcmp(*v43, v44, *((_QWORD *)a1 + 20)))
      goto LABEL_107;
    return 0;
  }
  if (a1[175])
  {
    while (*(unsigned __int8 *)v43 == *v44)
    {
      v43 = (const void **)((char *)v43 + 1);
      ++v44;
      if (!--v39)
        goto LABEL_107;
    }
    return 0;
  }
LABEL_107:
  if (*((_QWORD *)a1 + 22) != *((_QWORD *)v6 + 22) || *((_QWORD *)a1 + 23) != *((_QWORD *)v6 + 23))
    return 0;
  if (*((_QWORD *)a1 + 24) != *((_QWORD *)v6 + 24)
    || *((_DWORD *)a1 + 50) != (unint64_t)*((unsigned int *)v6 + 50))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 204) == *(_QWORD *)(v6 + 204)
      && *((_DWORD *)a1 + 53) == (unint64_t)*((unsigned int *)v6 + 53);
}

uint64_t sub_22401BB1C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24EC678F0;
  *(_QWORD *)(a1 + 8) = &unk_24EC67950;
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_22401BB94(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 - 8) = off_24EC678F0;
  *(_QWORD *)a1 = &unk_24EC67950;
  v2 = *(void **)(a1 + 208);
  if (v2)
  {
    *(_QWORD *)(a1 + 216) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v4, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_22401BC0C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24EC678F0;
  *(_QWORD *)(a1 + 8) = &unk_24EC67950;
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40B4DE50DDLL);
}

uint64_t sub_22401BC98(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24EC678F0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC67950;
  v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(_QWORD *)(a1 + 216) = v3;
    operator delete(v3);
  }
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v4))(&v6, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40B4DE50DDLL);
}

uint64_t sub_22401BD2C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC67B28;
  *(_QWORD *)(a1 + 8) = &unk_24EC67B88;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_22401BDDC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24EC67B28;
  *(_QWORD *)a1 = &unk_24EC67B88;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_22401BE8C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC67B28;
  *(_QWORD *)(a1 + 8) = &unk_24EC67B88;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40F569C881);
}

uint64_t sub_22401BF50(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24EC67B28;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC67B88;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40F569C881);
}

uint64_t sub_22401C024(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC67D00;
  *(_QWORD *)(a1 + 8) = &unk_24EC67D60;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_22401C0D4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24EC67D00;
  *(_QWORD *)a1 = &unk_24EC67D60;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_22401C184(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC67D00;
  *(_QWORD *)(a1 + 8) = &unk_24EC67D60;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40F569C881);
}

uint64_t sub_22401C248(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24EC67D00;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC67D60;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40F569C881);
}

uint64_t sub_22401C31C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC67ED8;
  *(_QWORD *)(a1 + 8) = &unk_24EC67F38;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_22401C3CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24EC67ED8;
  *(_QWORD *)a1 = &unk_24EC67F38;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_22401C47C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC67ED8;
  *(_QWORD *)(a1 + 8) = &unk_24EC67F38;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40F569C881);
}

uint64_t sub_22401C540(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24EC67ED8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC67F38;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40F569C881);
}

uint64_t sub_22401C614(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC68F70;
  *(_QWORD *)(a1 + 8) = &unk_24EC68FD0;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_22401C6C4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24EC68F70;
  *(_QWORD *)a1 = &unk_24EC68FD0;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_22401C774(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC68F70;
  *(_QWORD *)(a1 + 8) = &unk_24EC68FD0;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40F569C881);
}

uint64_t sub_22401C838(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24EC68F70;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC68FD0;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40F569C881);
}

uint64_t sub_22401C90C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC69110;
  *(_QWORD *)(a1 + 8) = &unk_24EC69170;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_22401C9BC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24EC69110;
  *(_QWORD *)a1 = &unk_24EC69170;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_22401CA6C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC69110;
  *(_QWORD *)(a1 + 8) = &unk_24EC69170;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40F569C881);
}

uint64_t sub_22401CB30(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24EC69110;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC69170;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40F569C881);
}

uint64_t sub_22401CC04(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24EC68180;
  *(_QWORD *)(a1 + 8) = &unk_24EC681E0;
  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 208);
  if (v2)
    v2(0, a1 + 208, 0, 0, 0);
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

_QWORD *sub_22401CC90(_QWORD *result)
{
  _QWORD *v1;
  uint64_t (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v4;

  v1 = result;
  *(result - 1) = off_24EC68180;
  *result = &unk_24EC681E0;
  v2 = (uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))result[25];
  if (v2)
    result = (_QWORD *)v2(0, result + 25, 0, 0, 0);
  v3 = *((unsigned int *)v1 + 46);
  if ((_DWORD)v3 != -1)
    result = (_QWORD *)((uint64_t (*)(char *, _QWORD *))*(&off_24EC66CC8 + v3))(&v4, v1 + 1);
  *((_DWORD *)v1 + 46) = -1;
  return result;
}

uint64_t sub_22401CD1C(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24EC68180;
  *(_QWORD *)(a1 + 8) = &unk_24EC681E0;
  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 208);
  if (v2)
    v2(0, a1 + 208, 0, 0, 0);
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40294CF2FDLL);
}

uint64_t sub_22401CDBC(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v4;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24EC68180;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC681E0;
  v3 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 200);
  if (v3)
    v3(0, a1 + 200, 0, 0, 0);
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v4))(&v6, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40294CF2FDLL);
}

uint64_t sub_22401CE64(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC685D8;
  *(_QWORD *)(a1 + 8) = &unk_24EC68638;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_22401CF14(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24EC685D8;
  *(_QWORD *)a1 = &unk_24EC68638;
  v2 = *(std::__shared_weak_count **)(a1 + 200);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_22401CFC4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC685D8;
  *(_QWORD *)(a1 + 8) = &unk_24EC68638;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C407D254C52);
}

uint64_t sub_22401D088(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24EC685D8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC68638;
  v3 = *(std::__shared_weak_count **)(a1 + 200);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C407D254C52);
}

uint64_t sub_22401D15C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC68938;
  *(_QWORD *)(a1 + 8) = &unk_24EC68998;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_22401D20C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24EC68938;
  *(_QWORD *)a1 = &unk_24EC68998;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_22401D2BC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC68938;
  *(_QWORD *)(a1 + 8) = &unk_24EC68998;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10F3C40EF434651);
}

uint64_t sub_22401D380(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24EC68938;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC68998;
  v3 = *(std::__shared_weak_count **)(a1 + 208);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10F3C40EF434651);
}

_BYTE *sub_22401D454@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *result;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_223197FA4((_BYTE *)a2, *(void **)a1, *(_QWORD *)(a1 + 8));
    *(_DWORD *)(a2 + 24) = *(unsigned __int8 *)(a1 + 24);
    v4 = a2 + 32;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a2 + 24) = *(unsigned __int8 *)(a1 + 24);
    v4 = a2 + 32;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)v4 = *(_OWORD *)(a1 + 32);
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 48);
      goto LABEL_6;
    }
  }
  sub_223197FA4((_BYTE *)v4, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
LABEL_6:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  if (*(char *)(a1 + 87) < 0)
  {
    sub_223197FA4((_BYTE *)(a2 + 64), *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
  }
  else
  {
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  }
  result = (_BYTE *)(a2 + 88);
  if (*(char *)(a1 + 111) < 0)
    return sub_223197FA4(result, *(void **)(a1 + 88), *(_QWORD *)(a1 + 96));
  *(_OWORD *)result = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  return result;
}

void sub_22401D55C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 87) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22401D5D0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_24EC68BE0;
  *(_QWORD *)(a1 + 8) = &unk_24EC68C40;
  if (*(char *)(a1 + 311) < 0)
  {
    operator delete(*(void **)(a1 + 288));
    if ((*(char *)(a1 + 287) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 255) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 287) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 264));
  if ((*(char *)(a1 + 255) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 223) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 232));
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
LABEL_5:
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 200));
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
LABEL_11:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v4, a1 + 16);
LABEL_12:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_22401D6A4(uint64_t a1)
{
  return sub_22401D5D0(a1 - 8);
}

void sub_22401D6AC(uint64_t a1)
{
  sub_22401D5D0(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22401D6D0(uint64_t a1)
{
  sub_22401D5D0(a1 - 8);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22401D6F8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC68DD0;
  *(_QWORD *)(a1 + 8) = &unk_24EC68E30;
  if (*(_BYTE *)(a1 + 376) && *(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(_BYTE *)(a1 + 344) && *(char *)(a1 + 343) < 0)
  {
    operator delete(*(void **)(a1 + 320));
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v4, a1 + 16);
LABEL_8:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_22401D7A0(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = off_24EC68DD0;
  *(_QWORD *)a1 = &unk_24EC68E30;
  if (*(_BYTE *)(a1 + 368) && *(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  if (*(_BYTE *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v3, a1 + 8);
LABEL_8:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_22401D848(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)a1 = off_24EC68DD0;
  *(_QWORD *)(a1 + 8) = &unk_24EC68E30;
  if (*(_BYTE *)(a1 + 376) && *(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(_BYTE *)(a1 + 344) && *(char *)(a1 + 343) < 0)
  {
    operator delete(*(void **)(a1 + 320));
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
    {
LABEL_8:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x227684CE8);
    }
  }
  ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v3, a1 + 16);
  goto LABEL_8;
}

void sub_22401D900(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = off_24EC68DD0;
  *(_QWORD *)a1 = &unk_24EC68E30;
  if (*(_BYTE *)(a1 + 368) && *(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  if (*(_BYTE *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
    {
LABEL_8:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x227684CE8);
    }
  }
  ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v3, a1 + 8);
  goto LABEL_8;
}

uint64_t sub_22401D9C0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC66EC0;
  *(_QWORD *)(a1 + 8) = &unk_24EC66F20;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_22401DA28(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  *(_QWORD *)(result - 8) = off_24EC66EC0;
  *(_QWORD *)result = &unk_24EC66F20;
  v2 = *(unsigned int *)(result + 184);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v3, result + 8);
  *(_DWORD *)(v1 + 184) = -1;
  return result;
}

uint64_t sub_22401DA90(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC66EC0;
  *(_QWORD *)(a1 + 8) = &unk_24EC66F20;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40CF772451);
}

uint64_t sub_22401DB0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24EC66EC0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC66F20;
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40CF772451);
}

uint64_t sub_22401DB90(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC67060;
  *(_QWORD *)(a1 + 8) = &unk_24EC670C0;
  sub_224022CC4(a1 + 200);
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_22401DBFC(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 - 8) = off_24EC67060;
  *(_QWORD *)a1 = &unk_24EC670C0;
  result = sub_224022CC4(a1 + 192);
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v4, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return result;
}

uint64_t sub_22401DC68(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC67060;
  *(_QWORD *)(a1 + 8) = &unk_24EC670C0;
  sub_224022CC4(a1 + 200);
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40DC57CB27);
}

uint64_t sub_22401DCE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24EC67060;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC670C0;
  sub_224022CC4(a1 + 192);
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40DC57CB27);
}

uint64_t sub_22401DD70(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC672D0;
  *(_QWORD *)(a1 + 8) = &unk_24EC67330;
  sub_22323DF84(a1 + 200, *(char **)(a1 + 208));
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_22401DDE0(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = off_24EC672D0;
  *(_QWORD *)a1 = &unk_24EC67330;
  sub_22323DF84(a1 + 192, *(char **)(a1 + 200));
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v3, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_22401DE50(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC672D0;
  *(_QWORD *)(a1 + 8) = &unk_24EC67330;
  sub_22323DF84(a1 + 200, *(char **)(a1 + 208));
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40546963AFLL);
}

uint64_t sub_22401DED4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24EC672D0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC67330;
  sub_22323DF84(a1 + 192, *(char **)(a1 + 200));
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40546963AFLL);
}

uint64_t sub_22401DF60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_24EC67470;
  *(_QWORD *)(a1 + 8) = &unk_24EC674D0;
  if (*(_BYTE *)(a1 + 248) && *(char *)(a1 + 247) < 0)
    operator delete(*(void **)(a1 + 224));
  v2 = *(_QWORD *)(a1 + 200);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 208);
    v4 = *(void **)(a1 + 200);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 200);
    }
    *(_QWORD *)(a1 + 208) = v2;
    operator delete(v4);
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_22401E034(uint64_t a1)
{
  return sub_22401DF60(a1 - 8);
}

void sub_22401E03C(uint64_t a1)
{
  sub_22401DF60(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22401E060(uint64_t a1)
{
  sub_22401DF60(a1 - 8);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22401E088(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC676B0;
  *(_QWORD *)(a1 + 8) = &unk_24EC67710;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_22401E0F0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  *(_QWORD *)(result - 8) = off_24EC676B0;
  *(_QWORD *)result = &unk_24EC67710;
  v2 = *(unsigned int *)(result + 184);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v3, result + 8);
  *(_DWORD *)(v1 + 184) = -1;
  return result;
}

uint64_t sub_22401E158(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC676B0;
  *(_QWORD *)(a1 + 8) = &unk_24EC67710;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40956CF698);
}

uint64_t sub_22401E1D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24EC676B0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC67710;
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40956CF698);
}

uint64_t sub_22401E258()
{
  return 2;
}

uint64_t sub_22401E260()
{
  return 1;
}

uint64_t sub_22401E268(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_22401E274(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_22401E280@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;
  char *v9;
  char *v10;
  _BYTE v12[208];
  uint64_t (**v13)();
  char v14;
  void *__p;
  void *v16;
  char *v17;
  _QWORD v18[28];

  v18[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_223B8944C(v4, (uint64_t)v12);
  }
  else if (v5 == 1)
  {
    sub_223B89234(v4, (uint64_t)v12);
  }
  else
  {
    if (v5)
      sub_22316DD70();
    sub_223B8901C(v4, (uint64_t)v12);
  }
  v13 = &off_24EC20A50;
  v14 = *(_BYTE *)(a1 + 208);
  v16 = 0;
  v17 = 0;
  __p = 0;
  v7 = *(_BYTE **)(a1 + 216);
  v6 = *(_BYTE **)(a1 + 224);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if ((v8 & 0x8000000000000000) != 0)
      sub_2240336DC();
    v9 = (char *)operator new(v6 - v7);
    v10 = &v9[v8];
    __p = v9;
    v17 = &v9[v8];
    memcpy(v9, v7, v8);
    v16 = v10;
  }
  sub_2231AB0FC((uint64_t)v18, (uint64_t)v12);
  v13 = &off_24EC209D0;
  sub_224033514((uint64_t)&v13, a2);
  v13 = &off_24EC20A50;
  sub_2231AD66C((uint64_t)v18);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return sub_2231AD66C((uint64_t)v12);
}

void sub_22401E3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_2231AAA4C(&a35);
  sub_2231AD66C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22401E3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_2231AD66C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_22401E420(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24EC67848 && sub_224092CBC(a1, (uint64_t)a2);
}

void sub_22401E440(uint64_t a1, uint64_t (***a2)())
{
  sub_224092EE8(a2, a1);
}

void sub_22401E450(uint64_t a1, uint64_t (***a2)())
{
  sub_224093F44(a2, a1);
}

uint64_t sub_22401E460()
{
  return 2;
}

uint64_t sub_22401E468()
{
  return 2;
}

uint64_t sub_22401E470()
{
  return 1;
}

void sub_22401E478(uint64_t a1, uint64_t (***a2)())
{
  sub_224092EE8(a2, a1 - 8);
}

void sub_22401E488(uint64_t a1, uint64_t (***a2)())
{
  sub_224093F44(a2, a1 - 8);
}

uint64_t sub_22401E498()
{
  return 2;
}

uint64_t sub_22401E4A0()
{
  return 1;
}

uint64_t sub_22401E4A8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_22401E4B4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_22401E4C0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_223B8944C(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_223B89234(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_22316DD70();
    sub_223B8901C(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = &off_24EC2B830;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_2231AB0FC((uint64_t)v17, (uint64_t)v14);
  v15[0] = &off_24EC2B7B0;
  sub_224036884((uint64_t)v15, a2);
  v15[0] = &off_24EC2B830;
  sub_2231AD66C((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_2231AD66C((uint64_t)v14);
}

void sub_22401E600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_223305C28(&a35);
  sub_2231AD66C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22401E61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_2231AD66C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_22401E66C(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24EC67A80 && sub_224095EA4(a1, (uint64_t)a2);
}

void sub_22401E68C(uint64_t a1, uint64_t (***a2)())
{
  sub_2240960FC(a2, a1);
}

void sub_22401E69C(uint64_t a1, uint64_t (***a2)())
{
  sub_224097158(a2, a1);
}

void sub_22401E6AC(uint64_t a1, uint64_t (***a2)())
{
  sub_2240960FC(a2, a1 - 8);
}

void sub_22401E6BC(uint64_t a1, uint64_t (***a2)())
{
  sub_224097158(a2, a1 - 8);
}

uint64_t sub_22401E6CC()
{
  return 2;
}

uint64_t sub_22401E6D4()
{
  return 1;
}

uint64_t sub_22401E6DC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_22401E6E8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_22401E6F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_223B8944C(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_223B89234(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_22316DD70();
    sub_223B8901C(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = &off_24EC27C78;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_2231AB0FC((uint64_t)v17, (uint64_t)v14);
  v15[0] = &off_24EC27BF8;
  sub_224045D1C((uint64_t)v15, a2);
  v15[0] = &off_24EC27C78;
  sub_2231AD66C((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_2231AD66C((uint64_t)v14);
}

void sub_22401E834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_22329F808(&a35);
  sub_2231AD66C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22401E850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_2231AD66C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_22401E8A0(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24EC67C58 && sub_224098F50(a1, (uint64_t)a2);
}

void sub_22401E8C0(uint64_t a1, uint64_t (***a2)())
{
  sub_2240991A8(a2, a1);
}

void sub_22401E8D0(uint64_t a1, uint64_t (***a2)())
{
  sub_22409A204(a2, a1);
}

void sub_22401E8E0(uint64_t a1, uint64_t (***a2)())
{
  sub_2240991A8(a2, a1 - 8);
}

void sub_22401E8F0(uint64_t a1, uint64_t (***a2)())
{
  sub_22409A204(a2, a1 - 8);
}

uint64_t sub_22401E900()
{
  return 2;
}

uint64_t sub_22401E908()
{
  return 1;
}

uint64_t sub_22401E910(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_22401E91C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_22401E928@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_223B8944C(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_223B89234(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_22316DD70();
    sub_223B8901C(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = &off_24EC68088;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_2231AB0FC((uint64_t)v17, (uint64_t)v14);
  v15[0] = &off_24EC68008;
  sub_22405A614((uint64_t)v15, a2);
  v15[0] = &off_24EC68088;
  sub_2231AD66C((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_2231AD66C((uint64_t)v14);
}

void sub_22401EA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_22405A7C8(&a35);
  sub_2231AD66C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22401EA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_2231AD66C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_22401EAD4(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24EC67E30 && sub_22409C14C(a1, (uint64_t)a2);
}

void sub_22401EAF4(uint64_t a1, uint64_t (***a2)())
{
  sub_22409C3A4(a2, a1);
}

void sub_22401EB04(uint64_t a1, uint64_t (***a2)())
{
  sub_22409D400(a2, a1);
}

void sub_22401EB14(uint64_t a1, uint64_t (***a2)())
{
  sub_22409C3A4(a2, a1 - 8);
}

void sub_22401EB24(uint64_t a1, uint64_t (***a2)())
{
  sub_22409D400(a2, a1 - 8);
}

uint64_t sub_22401EB34()
{
  return 1;
}

uint64_t sub_22401EB3C()
{
  return 1;
}

uint64_t sub_22401EB44(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_22401EB50(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_22401EB5C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_223B8944C(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_223B89234(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_22316DD70();
    sub_223B8901C(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = &off_24EC59F20;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_2231AB0FC((uint64_t)v17, (uint64_t)v14);
  v15[0] = &off_24EC59EA0;
  sub_22409F348((uint64_t)v15, a2);
  v15[0] = &off_24EC59F20;
  sub_2231AD66C((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_2231AD66C((uint64_t)v14);
}

void sub_22401EC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_2237DB4D0(&a35);
  sub_2231AD66C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22401ECB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_2231AD66C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_22401ED08(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24EC68EC8 && sub_22409F4FC(a1, (uint64_t)a2);
}

void sub_22401ED28(uint64_t a1, uint64_t (***a2)())
{
  sub_22409F754(a2, a1);
}

void sub_22401ED38(uint64_t a1, uint64_t (***a2)())
{
  sub_2240A50D0(a2, a1);
}

uint64_t sub_22401ED48()
{
  return 1;
}

uint64_t sub_22401ED50()
{
  return 1;
}

uint64_t sub_22401ED58()
{
  return 1;
}

void sub_22401ED60(uint64_t a1, uint64_t (***a2)())
{
  sub_22409F754(a2, a1 - 8);
}

void sub_22401ED70(uint64_t a1, uint64_t (***a2)())
{
  sub_2240A50D0(a2, a1 - 8);
}

uint64_t sub_22401ED80()
{
  return 1;
}

uint64_t sub_22401ED88()
{
  return 1;
}

uint64_t sub_22401ED90(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_22401ED9C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_22401EDA8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_223B8944C(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_223B89234(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_22316DD70();
    sub_223B8901C(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = &off_24EC69288;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_2231AB0FC((uint64_t)v17, (uint64_t)v14);
  v15[0] = &off_24EC69208;
  sub_2240B0338((uint64_t)v15, a2);
  v15[0] = &off_24EC69288;
  sub_2231AD66C((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_2231AD66C((uint64_t)v14);
}

void sub_22401EEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_2240B04EC(&a35);
  sub_2231AD66C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22401EF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_2231AD66C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_22401EF54(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24EC69068 && sub_2240B1ED8(a1, (uint64_t)a2);
}

void sub_22401EF74(uint64_t a1, uint64_t (***a2)())
{
  sub_2240B2130(a2, a1);
}

void sub_22401EF84(uint64_t a1, uint64_t (***a2)())
{
  sub_2240B7AAC(a2, a1);
}

void sub_22401EF94(uint64_t a1, uint64_t (***a2)())
{
  sub_2240B2130(a2, a1 - 8);
}

void sub_22401EFA4(uint64_t a1, uint64_t (***a2)())
{
  sub_2240B7AAC(a2, a1 - 8);
}

uint64_t sub_22401EFB4()
{
  return 2;
}

uint64_t sub_22401EFBC()
{
  return 1;
}

uint64_t sub_22401EFC4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_22401EFD0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_22401EFDC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t (**v12)();
  __int128 v13;
  _BYTE v14[208];
  uint64_t (**v15)();
  uint64_t (**v16)();
  __int128 v17;
  _QWORD v18[28];

  v18[27] = *MEMORY[0x24BDAC8D0];
  sub_22415246C((int *)(a1 + 200), &v12);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_223B8944C(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_223B89234(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_22316DD70();
    sub_223B8901C(v4, (uint64_t)v14);
  }
  v15 = &off_24EC282C8;
  v16 = &off_24EC6D000;
  v17 = v13;
  v13 = 0uLL;
  sub_2231AB0FC((uint64_t)v18, (uint64_t)v14);
  v15 = &off_24EC28248;
  sub_224071360((uint64_t)&v15, a2);
  v15 = &off_24EC282C8;
  sub_2231AD66C((uint64_t)v18);
  v16 = &off_24EC6D000;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  sub_2231AD66C((uint64_t)v14);
  v12 = &off_24EC6D000;
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_22401F16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  sub_2232A572C(&a39);
  sub_2231AD66C((uint64_t)&a13);
  sub_224159450(&a10);
  _Unwind_Resume(a1);
}

void sub_22401F1A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_224159450((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_22401F1B8(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24EC680D8 && sub_2240C3554(a1, (uint64_t)a2);
}

void sub_22401F1D8(uint64_t a1, uint64_t (***a2)())
{
  sub_2240C376C(a2, a1);
}

void sub_22401F1E8(uint64_t a1, uint64_t (***a2)())
{
  sub_2240C4570(a2, a1);
}

void sub_22401F1F8(uint64_t a1, uint64_t (***a2)())
{
  sub_2240C376C(a2, a1 - 8);
}

void sub_22401F208(uint64_t a1, uint64_t (***a2)())
{
  sub_2240C4570(a2, a1 - 8);
}

uint64_t sub_22401F218()
{
  return 2;
}

uint64_t sub_22401F220()
{
  return 1;
}

uint64_t sub_22401F228(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_22401F234(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_22401F240(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v13[208];
  _QWORD v14[2];
  std::__shared_weak_count *v15;
  _QWORD v16[28];

  v16[27] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 200);
  v5 = *(std::__shared_weak_count **)(a1 + 208);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = a1 + 16;
  v9 = *(_DWORD *)(a1 + 192);
  if (v9 == 2)
  {
    sub_223B8944C(v8, (uint64_t)v13);
  }
  else if (v9 == 1)
  {
    sub_223B89234(v8, (uint64_t)v13);
  }
  else
  {
    if (v9)
      sub_22316DD70();
    sub_223B8901C(v8, (uint64_t)v13);
  }
  v14[0] = &off_24EC20AE0;
  v14[1] = v4;
  v15 = v5;
  sub_2231AB0FC((uint64_t)v16, (uint64_t)v13);
  v14[0] = &off_24EC66920;
  sub_2231ADC74((uint64_t)v14, a2);
  v14[0] = &off_24EC20AE0;
  sub_2231AD66C((uint64_t)v16);
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  sub_2231AD66C((uint64_t)v13);
}

void sub_22401F3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  sub_224017008(&a37);
  sub_2231AD66C((uint64_t)&a11);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22401F430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22401F444(uint64_t a1, uint64_t (***a2)())
{
  if (*a2 == off_24EC68530)
    return sub_2240C647C(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_22401F464(uint64_t a1, uint64_t (***a2)())
{
  sub_2240C6694(a2, a1);
}

void sub_22401F474(uint64_t a1, uint64_t (***a2)())
{
  sub_2240C7630(a2, a1);
}

void sub_22401F484(uint64_t a1, uint64_t (***a2)())
{
  sub_2240C6694(a2, a1 - 8);
}

void sub_22401F494(uint64_t a1, uint64_t (***a2)())
{
  sub_2240C7630(a2, a1 - 8);
}

uint64_t sub_22401F4A4()
{
  return 2;
}

uint64_t sub_22401F4AC()
{
  return 1;
}

uint64_t sub_22401F4B4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_22401F4C0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_22401F4CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  __int128 v17;
  _QWORD v18[28];

  v18[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_223B8944C(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_223B89234(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_22316DD70();
    sub_223B8901C(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 208);
  v6 = *(std::__shared_weak_count **)(a1 + 216);
  v15[0] = &off_24EC68AE8;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v17 = *(_OWORD *)(a1 + 224);
  sub_2231AB0FC((uint64_t)v18, (uint64_t)v14);
  v15[0] = &off_24EC68A68;
  sub_22408E578((uint64_t)v15, a2);
  v15[0] = &off_24EC68AE8;
  sub_2231AD66C((uint64_t)v18);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_2231AD66C((uint64_t)v14);
}

void sub_22401F614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_22408E734(&a35);
  sub_2231AD66C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22401F630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_2231AD66C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_22401F680(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24EC68890 && sub_2240C953C(a1, (uint64_t)a2);
}

void sub_22401F6A0(uint64_t a1, uint64_t (***a2)())
{
  sub_2240C97B4(a2, a1);
}

void sub_22401F6B0(uint64_t a1, uint64_t (***a2)())
{
  sub_2240CA750(a2, a1);
}

void sub_22401F6C0(uint64_t a1, uint64_t (***a2)())
{
  sub_2240C97B4(a2, a1 - 8);
}

void sub_22401F6D0(uint64_t a1, uint64_t (***a2)())
{
  sub_2240CA750(a2, a1 - 8);
}

uint64_t sub_22401F6E0()
{
  return 1;
}

uint64_t sub_22401F6E8()
{
  return 1;
}

uint64_t sub_22401F6F0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_22401F6FC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_22401F708(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8[2];
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  _BYTE v16[208];
  _QWORD v17[3];
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *__p;
  char v24;
  _QWORD v25[28];

  v25[27] = *MEMORY[0x24BDAC8D0];
  sub_22401D454(a1 + 200, (uint64_t)v8);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_223B8944C(v4, (uint64_t)v16);
  }
  else if (v5 == 1)
  {
    sub_223B89234(v4, (uint64_t)v16);
  }
  else
  {
    if (v5)
      sub_22316DD70();
    sub_223B8901C(v4, (uint64_t)v16);
  }
  sub_2232A15E0((uint64_t)v17, (__int128 *)v8, (uint64_t)v16);
  v6 = operator new();
  sub_2240CC65C(v6, (uint64_t)v17);
  *a2 = &off_24EC6A3B8;
  a2[1] = v6;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24EC6A4B0;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  a2[2] = v7;
  v17[0] = off_24EC27D48;
  sub_2231AD66C((uint64_t)v25);
  if (v24 < 0)
  {
    operator delete(__p);
    if ((v22 & 0x80000000) == 0)
    {
LABEL_9:
      if ((v20 & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_18;
    }
  }
  else if ((v22 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v21);
  if ((v20 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v18 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v19);
  if ((v18 & 0x80000000) == 0)
  {
LABEL_11:
    sub_2231AD66C((uint64_t)v16);
    if ((v15 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)v17[1]);
  sub_2231AD66C((uint64_t)v16);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v13 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v14);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v11 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v12);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v9 & 0x80000000) == 0)
      return;
LABEL_23:
    operator delete(v8[0]);
    return;
  }
LABEL_22:
  operator delete(v10);
  if (v9 < 0)
    goto LABEL_23;
}

void sub_22401F918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t (**a49)())
{
  uint64_t v49;

  (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  a49 = off_24EC27CC8;
  sub_2232A1D3C((uint64_t)&a49);
  sub_2231AD66C((uint64_t)&a23);
  sub_223293AA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22401F98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223293AA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22401F9A0(uint64_t a1, uint64_t (***a2)())
{
  if (*a2 == &off_24EC68B38)
    return sub_2240CC7EC(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_22401F9C0(uint64_t a1, uint64_t (***a2)())
{
  sub_2240CCD40(a2, a1);
}

double sub_22401F9D0(uint64_t a1, uint64_t (***a2)())
{
  return sub_2240CE8A0(a2, a1);
}

void sub_22401F9E0(uint64_t a1, uint64_t (***a2)())
{
  sub_2240CCD40(a2, a1 - 8);
}

double sub_22401F9F0(uint64_t a1, uint64_t (***a2)())
{
  return sub_2240CE8A0(a2, a1 - 8);
}

uint64_t sub_22401FA00()
{
  return 1;
}

uint64_t sub_22401FA08()
{
  return 1;
}

uint64_t sub_22401FA10(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_22401FA1C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_22401FA28@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10[3];
  char v11;
  char v12;
  void *v13;
  char v14;
  char v15;
  _BYTE v16[208];
  uint64_t (**v17)();
  uint64_t v18;
  void *v19;
  char v20;
  char v21;
  void *__p;
  char v23;
  char v24;
  _QWORD v25[28];

  v25[27] = *MEMORY[0x24BDAC8D0];
  sub_224145D28(a1 + 200);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_223B8944C(v4, (uint64_t)v16);
  }
  else if (v5 == 1)
  {
    sub_223B89234(v4, (uint64_t)v16);
  }
  else
  {
    if (v5)
      sub_22316DD70();
    sub_223B8901C(v4, (uint64_t)v16);
  }
  sub_2232A3B88((uint64_t)&v17, v10, (uint64_t)v16);
  v6 = (_QWORD *)operator new();
  sub_2240D0F78((uint64_t)v6, (uint64_t)&v17);
  *v6 = off_24EC28368;
  *a2 = &off_24EC6A3B8;
  a2[1] = v6;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24EC6A4B0;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  a2[2] = v7;
  v17 = off_24EC283E8;
  sub_2231AD66C((uint64_t)v25);
  if (v24 && v23 < 0)
    operator delete(__p);
  if (v21 && v20 < 0)
    operator delete(v19);
  v8 = v18;
  v18 = 0;
  if (v8)
    MEMORY[0x227684CE8](v8, 0x1000C4072FAA15ELL);
  sub_2231AD66C((uint64_t)v16);
  if (v15 && v14 < 0)
    operator delete(v13);
  if (v12 && v11 < 0)
    operator delete((void *)v10[1]);
  result = v10[0];
  v10[0] = 0;
  if (result)
    return MEMORY[0x227684CE8](result, 0x1000C4072FAA15ELL);
  return result;
}

void sub_22401FC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  sub_2232A3CA0((uint64_t)&a45);
  sub_2231AD66C((uint64_t)&a19);
  sub_223294C8C(&a10);
  _Unwind_Resume(a1);
}

void sub_22401FC74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223294C8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22401FC88(uint64_t a1, uint64_t (***a2)())
{
  if (*a2 == off_24EC68D28)
    return sub_2240D10FC(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_22401FCA8(uint64_t a1, uint64_t (***a2)())
{
  sub_2240D1314(a2, a1);
}

void sub_22401FCB8(uint64_t a1, uint64_t (***a2)())
{
  sub_2240D5DC8(a2, a1);
}

void sub_22401FCC8(uint64_t a1, uint64_t (***a2)())
{
  sub_2240D1314(a2, a1 - 8);
}

void sub_22401FCD8(uint64_t a1, uint64_t (***a2)())
{
  sub_2240D5DC8(a2, a1 - 8);
}

uint64_t sub_22401FCE8()
{
  return 1;
}

uint64_t sub_22401FCF0()
{
  return 1;
}

uint64_t sub_22401FCF8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_22401FD04(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_22401FD10@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  _BYTE v15[208];
  _QWORD v16[3];
  char v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  _QWORD v22[30];

  v22[27] = *MEMORY[0x24BDAC8D0];
  v8 = *(unsigned __int8 *)(a1 + 200);
  if (v8 == 2)
  {
    if (*(_DWORD *)(a1 + 248) != 1)
      goto LABEL_15;
    v10 = 0;
    LOBYTE(v9) = *(_BYTE *)(a1 + 208);
    v3 = *(_QWORD *)(a1 + 216);
    v2 = *(_BYTE *)(a1 + 224);
    v11 = 1;
    v5 = 1;
    v6 = *(_QWORD *)(a1 + 225);
    v12 = a1 + 16;
    v13 = *(_DWORD *)(a1 + 192);
    if (v13 != 2)
      goto LABEL_10;
  }
  else
  {
    if (v8 == 1)
    {
      if (*(_DWORD *)(a1 + 248))
        goto LABEL_15;
      v5 = 0;
      v9 = *(_QWORD *)(a1 + 208);
      v3 = *(_QWORD *)(a1 + 216);
      v2 = *(_BYTE *)(a1 + 224);
      v6 = (unint64_t)*(unsigned __int8 *)(a1 + 232) << 56;
      v4 = *(_QWORD *)(a1 + 233);
      v10 = v9 & 0xFFFFFFFFFFFFFF00;
      v11 = 1;
      v12 = a1 + 16;
      v13 = *(_DWORD *)(a1 + 192);
      if (v13 == 2)
        goto LABEL_8;
      goto LABEL_10;
    }
    LOBYTE(v9) = 0;
    v11 = 0;
    v10 = 0;
    v12 = a1 + 16;
    v13 = *(_DWORD *)(a1 + 192);
    if (v13 != 2)
    {
LABEL_10:
      if (v13 == 1)
      {
        sub_223B89234(v12, (uint64_t)v15);
        goto LABEL_14;
      }
      if (!v13)
      {
        sub_223B8901C(v12, (uint64_t)v15);
        goto LABEL_14;
      }
LABEL_15:
      sub_22316DD70();
    }
  }
LABEL_8:
  sub_223B8944C(v12, (uint64_t)v15);
LABEL_14:
  v16[0] = &off_24EC666D8;
  v16[1] = v10 | v9;
  v16[2] = v3;
  v17 = v2;
  v18 = v6;
  v19 = v4;
  v20 = v5;
  v21 = v11;
  sub_2231AB0FC((uint64_t)v22, (uint64_t)v15);
  v16[0] = &off_24EC66658;
  sub_2240DA934((uint64_t)v16, a2);
  v16[0] = &off_24EC666D8;
  sub_2231AD66C((uint64_t)v22);
  return sub_2231AD66C((uint64_t)v15);
}

void sub_22401FED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_2231AD66C(v9);
  sub_2231AD66C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22401FEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231AD66C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22401FF08(uint64_t a1, uint64_t (***a2)())
{
  if (*a2 == off_24EC66E18)
    return sub_2240DAAFC(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_22401FF28(uint64_t a1, uint64_t (***a2)())
{
  sub_2240DAE8C(a2, a1);
}

void sub_22401FF38(uint64_t a1, uint64_t (***a2)())
{
  sub_2240DE758(a2, a1);
}

void sub_22401FF48(uint64_t a1, uint64_t (***a2)())
{
  sub_2240DAE8C(a2, a1 - 8);
}

void sub_22401FF58(uint64_t a1, uint64_t (***a2)())
{
  sub_2240DE758(a2, a1 - 8);
}

uint64_t sub_22401FF68()
{
  return 1;
}

uint64_t sub_22401FF70()
{
  return 1;
}

uint64_t sub_22401FF78(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_22401FF84(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_22401FF90(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  _BYTE v9[216];
  __int128 v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  int v32;
  __int128 __p;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  void *v44[2];
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  _QWORD v51[28];

  v51[27] = *MEMORY[0x24BDAC8D0];
  sub_22401B14C(a1 + 200, (uint64_t)&v10);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_223B8944C(v4, (uint64_t)v9);
  }
  else if (v5 == 1)
  {
    sub_223B89234(v4, (uint64_t)v9);
  }
  else
  {
    if (v5)
      sub_22316DD70();
    sub_223B8901C(v4, (uint64_t)v9);
  }
  v30 = off_24EC671D8;
  v31 = v10;
  v32 = v11;
  LOBYTE(__p) = 0;
  v35 = 0;
  if (v14)
  {
    __p = v12;
    v34 = v13;
    v13 = 0;
    v12 = 0uLL;
    v35 = 1;
  }
  LOBYTE(v36) = 0;
  v48 = 0;
  if (v27)
  {
    v37 = v16;
    v36 = v15;
    v15 = 0uLL;
    v6 = v17;
    v16 = 0;
    v17 = 0uLL;
    v38 = v6;
    v39 = v18;
    v18 = 0;
    *(_OWORD *)v40 = v19;
    v19 = 0uLL;
    v41 = v20;
    v43 = v22;
    v42 = v21;
    v20 = 0;
    v21 = 0uLL;
    v22 = 0;
    *(_OWORD *)v44 = v23;
    v23 = 0uLL;
    v45 = v24;
    v47 = v26;
    v46 = v25;
    v24 = 0;
    v25 = 0uLL;
    v26 = 0;
    v48 = 1;
  }
  v49 = v28;
  v50 = v29;
  sub_2231AB0FC((uint64_t)v51, (uint64_t)v9);
  v30 = off_24EC67158;
  v7 = (_QWORD *)operator new();
  sub_2240E3044((uint64_t)v7, (uint64_t)&v30);
  *v7 = off_24EC67158;
  *a2 = &off_24EC6A3B8;
  a2[1] = v7;
  v8 = (_QWORD *)operator new();
  *v8 = &off_24EC6A4B0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  a2[2] = v8;
  v30 = off_24EC671D8;
  sub_2231AD66C((uint64_t)v51);
  if (!v48)
    goto LABEL_18;
  if (SHIBYTE(v47) < 0)
  {
    operator delete((void *)v46);
    if ((SHIBYTE(v45) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(v43) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_34;
    }
  }
  else if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v44[0]);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v41) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_35:
    operator delete(v40[0]);
    if ((SHIBYTE(v39) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v37) & 0x80000000) == 0)
        goto LABEL_18;
LABEL_37:
      operator delete((void *)v36);
      if (!v35)
        goto LABEL_21;
      goto LABEL_19;
    }
    goto LABEL_36;
  }
LABEL_34:
  operator delete((void *)v42);
  if (SHIBYTE(v41) < 0)
    goto LABEL_35;
LABEL_16:
  if ((SHIBYTE(v39) & 0x80000000) == 0)
    goto LABEL_17;
LABEL_36:
  operator delete((void *)v38);
  if (SHIBYTE(v37) < 0)
    goto LABEL_37;
LABEL_18:
  if (!v35)
    goto LABEL_21;
LABEL_19:
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__p);
LABEL_21:
  sub_2231AD66C((uint64_t)v9);
  if (!v27)
    goto LABEL_28;
  if (SHIBYTE(v26) < 0)
  {
    operator delete((void *)v25);
    if ((SHIBYTE(v24) & 0x80000000) == 0)
    {
LABEL_24:
      if ((SHIBYTE(v22) & 0x80000000) == 0)
        goto LABEL_25;
      goto LABEL_41;
    }
  }
  else if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete((void *)v23);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
LABEL_25:
    if ((SHIBYTE(v20) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_42;
  }
LABEL_41:
  operator delete((void *)v21);
  if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_43;
  }
LABEL_42:
  operator delete((void *)v19);
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      goto LABEL_28;
LABEL_44:
    operator delete((void *)v15);
    if (!v14)
      return;
    goto LABEL_29;
  }
LABEL_43:
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_44;
LABEL_28:
  if (!v14)
    return;
LABEL_29:
  if (SHIBYTE(v13) < 0)
    operator delete((void *)v12);
}

void sub_224020350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  uint64_t v65;

  (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  sub_2240E2F94((uint64_t)&a65);
  sub_2231AD66C((uint64_t)&a9);
  sub_2240E2FF4((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_2240203C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_2240E2FF4((uint64_t)&a36);
  _Unwind_Resume(a1);
}

BOOL sub_2240203D4(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24EC66FB8 && sub_2240E4894(a1, (uint64_t)a2);
}

void sub_2240203F4(uint64_t a1, uint64_t (***a2)())
{
  sub_2240E4AAC(a2, a1);
}

void sub_224020404(uint64_t a1, uint64_t (***a2)())
{
  sub_2240E8ED8(a2, a1);
}

void sub_224020414(uint64_t a1, uint64_t (***a2)())
{
  sub_2240E4AAC(a2, a1 - 8);
}

void sub_224020424(uint64_t a1, uint64_t (***a2)())
{
  sub_2240E8ED8(a2, a1 - 8);
}

uint64_t sub_224020434()
{
  return 1;
}

uint64_t sub_22402043C()
{
  return 1;
}

uint64_t sub_224020444(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_224020450(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_22402045C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const void **v4;
  const void ***v5;
  uint64_t v6;
  int v7;
  const void **v8;
  const void ***v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  char **v13;
  char *v14;
  char *v15;
  _BYTE v16[208];
  uint64_t (**v17)();
  char **v18;
  char *v19[2];
  _QWORD v20[28];

  v20[27] = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v15 = 0;
  v13 = &v14;
  v4 = *(const void ***)(a1 + 200);
  v5 = (const void ***)(a1 + 208);
  if (v4 != (const void **)(a1 + 208))
  {
    do
    {
      sub_2240EE228((uint64_t **)&v13, (uint64_t *)&v14, v4 + 4, (uint64_t)(v4 + 4));
      v8 = (const void **)v4[1];
      if (v8)
      {
        do
        {
          v9 = (const void ***)v8;
          v8 = (const void **)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (const void ***)v4[2];
          v10 = *v9 == v4;
          v4 = (const void **)v9;
        }
        while (!v10);
      }
      v4 = (const void **)v9;
    }
    while (v9 != v5);
  }
  v6 = a1 + 16;
  v7 = *(_DWORD *)(a1 + 192);
  if (v7 == 2)
  {
    sub_223B8944C(v6, (uint64_t)v16);
  }
  else if (v7 == 1)
  {
    sub_223B89234(v6, (uint64_t)v16);
  }
  else
  {
    if (v7)
      sub_22316DD70();
    sub_223B8901C(v6, (uint64_t)v16);
  }
  v17 = &off_24EC667A8;
  v18 = v13;
  v19[0] = v14;
  v19[1] = v15;
  if (v15)
  {
    *((_QWORD *)v14 + 2) = v19;
    v13 = &v14;
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v18 = v19;
  }
  sub_2231AB0FC((uint64_t)v20, (uint64_t)v16);
  v17 = &off_24EC66728;
  v11 = operator new();
  sub_2240EE0D4(v11, (uint64_t)&v17);
  *a2 = &off_24EC6A3B8;
  a2[1] = v11;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24EC6A4B0;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = v11;
  a2[2] = v12;
  v17 = &off_24EC667A8;
  sub_2231AD66C((uint64_t)v20);
  sub_22323DF84((uint64_t)&v18, v19[0]);
  sub_2231AD66C((uint64_t)v16);
  sub_22323DF84((uint64_t)&v13, v14);
}

void sub_224020658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  sub_224015034((uint64_t)&a39);
  sub_2231AD66C((uint64_t)&a13);
  sub_22323DF84((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_2240206CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_22323DF84((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_2240206E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_22323DF84((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_2240206FC(uint64_t a1, uint64_t (***a2)())
{
  if (*a2 == off_24EC67228)
    return sub_2240EE324(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_22402071C(uint64_t a1, uint64_t (***a2)())
{
  sub_2240EE554(a2, a1);
}

void sub_22402072C(uint64_t a1, uint64_t (***a2)())
{
  sub_2240F0E88(a2, a1);
}

void sub_22402073C(uint64_t a1, uint64_t (***a2)())
{
  sub_2240EE554(a2, a1 - 8);
}

void sub_22402074C(uint64_t a1, uint64_t (***a2)())
{
  sub_2240F0E88(a2, a1 - 8);
}

uint64_t sub_22402075C()
{
  return 1;
}

uint64_t sub_224020764()
{
  return 1;
}

uint64_t sub_22402076C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_224020778(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_224020784(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  void **v9;
  void *v10;
  void **v11;
  void **v12;
  void *v13;
  void *v14;
  void **v15;
  void *v16;
  char v17;
  char v18;
  _BYTE v19[208];
  uint64_t (**v20)();
  void *v21;
  void **v22;
  void *__p;
  char v24;
  char v25;
  _QWORD v26[28];

  v26[27] = *MEMORY[0x24BDAC8D0];
  sub_2240F453C(a1 + 200, (uint64_t)&v14);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_223B8944C(v4, (uint64_t)v19);
  }
  else if (v5 == 1)
  {
    sub_223B89234(v4, (uint64_t)v19);
  }
  else
  {
    if (v5)
      sub_22316DD70();
    sub_223B8901C(v4, (uint64_t)v19);
  }
  sub_2240F67C8((uint64_t)&v20, (uint64_t)&v14, (uint64_t)v19);
  v6 = (_QWORD *)operator new();
  sub_2240F4698((uint64_t)v6, (uint64_t)&v20);
  *v6 = off_24EC67568;
  *a2 = &off_24EC6A3B8;
  a2[1] = v6;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24EC6A4B0;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  a2[2] = v7;
  v20 = off_24EC675B8;
  sub_2231AD66C((uint64_t)v26);
  if (v25 && v24 < 0)
    operator delete(__p);
  v8 = (void **)v21;
  if (v21)
  {
    v9 = v22;
    v10 = v21;
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v9 - 9) < 0)
          operator delete(*(v9 - 4));
        v9 -= 4;
      }
      while (v9 != v8);
      v10 = v21;
    }
    v22 = v8;
    operator delete(v10);
  }
  sub_2231AD66C((uint64_t)v19);
  if (v18 && v17 < 0)
    operator delete(v16);
  v11 = (void **)v14;
  if (v14)
  {
    v12 = v15;
    v13 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v12 - 9) < 0)
          operator delete(*(v12 - 4));
        v12 -= 4;
      }
      while (v12 != v11);
      v13 = v14;
    }
    v15 = v11;
    operator delete(v13);
  }
}

void sub_224020988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t (**a43)())
{
  uint64_t v43;

  (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  a43 = off_24EC67568;
  sub_2240F4E5C((uint64_t)&a43);
  sub_2231AD66C((uint64_t)&a17);
  sub_224022F84((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_2240209FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_224022F84((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_224020A10(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  if (*a2 == &off_24EC673C8)
    return sub_2240F68E0(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_224020A30(uint64_t a1, uint64_t (***a2)())
{
  sub_2240F6B18(a2, a1);
}

void sub_224020A40(uint64_t a1, uint64_t (***a2)())
{
  sub_2240F940C(a2, a1);
}

void sub_224020A50(uint64_t a1, uint64_t (***a2)())
{
  sub_2240F6B18(a2, a1 - 8);
}

void sub_224020A60(uint64_t a1, uint64_t (***a2)())
{
  sub_2240F940C(a2, a1 - 8);
}

uint64_t sub_224020A70()
{
  return 1;
}

uint64_t sub_224020A78()
{
  return 1;
}

uint64_t sub_224020A80(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_224020A8C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_224020A98@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  char v11;
  _OWORD v12[13];
  __int128 v13;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  char v17;
  _QWORD v18[28];

  v18[27] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 248))
  {
    v3 = *(_QWORD *)(a1 + 208);
    v10 = *(_QWORD *)(a1 + 216);
    v11 = *(_BYTE *)(a1 + 224);
    *(_QWORD *)((char *)v12 + 7) = *(_QWORD *)(a1 + 232);
    HIBYTE(v12[0]) = *(_BYTE *)(a1 + 240);
    v4 = v3 & 0xFFFFFFFFFFFFFF00;
    v13 = v12[0];
    v5 = v3;
    v6 = 1;
    v7 = a1 + 16;
    v8 = *(_DWORD *)(a1 + 192);
    if (v8 != 2)
      goto LABEL_3;
LABEL_7:
    sub_223B8944C(v7, (uint64_t)v12);
    goto LABEL_9;
  }
  v5 = 0;
  v4 = 0;
  v6 = 0;
  v7 = a1 + 16;
  v8 = *(_DWORD *)(a1 + 192);
  if (v8 == 2)
    goto LABEL_7;
LABEL_3:
  if (v8 == 1)
  {
    sub_223B89234(v7, (uint64_t)v12);
  }
  else
  {
    if (v8)
      sub_22316DD70();
    sub_223B8901C(v7, (uint64_t)v12);
  }
LABEL_9:
  v14[0] = &off_24EC677F8;
  v14[1] = v4 | v5;
  v14[2] = v10;
  v15 = v11;
  v16 = v13;
  v17 = v6;
  sub_2231AB0FC((uint64_t)v18, (uint64_t)v12);
  v14[0] = &off_24EC677A8;
  sub_2240FCC44((uint64_t)v14, a2);
  v14[0] = &off_24EC677F8;
  sub_2231AD66C((uint64_t)v18);
  return sub_2231AD66C((uint64_t)v12);
}

void sub_224020C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  sub_2231AD66C(v3);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224020C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_224020C44(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24EC67608 && sub_2240FE778(a1, (uint64_t)a2);
}

void sub_224020C64(uint64_t a1, uint64_t (***a2)())
{
  sub_2240FEA28(a2, a1);
}

void sub_224020C74(uint64_t a1, uint64_t (***a2)())
{
  sub_224100BFC(a2, a1);
}

void sub_224020C84(uint64_t a1, uint64_t (***a2)())
{
  sub_2240FEA28(a2, a1 - 8);
}

void sub_224020C94(uint64_t a1, uint64_t (***a2)())
{
  sub_224100BFC(a2, a1 - 8);
}

uint64_t sub_224020CA4()
{
  return 3;
}

uint64_t sub_224020CAC()
{
  return 2;
}

uint64_t sub_224020CB4()
{
  return 1;
}

uint64_t sub_224020CBC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24EC678F0;
  *(_QWORD *)(a1 + 8) = &unk_24EC67950;
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_224020D34(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24EC678F0;
  *(_QWORD *)(a1 + 8) = &unk_24EC67950;
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40B4DE50DDLL);
}

void sub_224020DC0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 - 8) = off_24EC678F0;
  *(_QWORD *)a1 = &unk_24EC67950;
  v2 = *(void **)(a1 + 208);
  if (v2)
  {
    *(_QWORD *)(a1 + 216) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v4, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_224020E38(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24EC678F0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC67950;
  v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(_QWORD *)(a1 + 216) = v3;
    operator delete(v3);
  }
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v4))(&v6, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40B4DE50DDLL);
}

uint64_t sub_224020ECC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC67B28;
  *(_QWORD *)(a1 + 8) = &unk_24EC67B88;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_224020F7C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC67B28;
  *(_QWORD *)(a1 + 8) = &unk_24EC67B88;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40F569C881);
}

void sub_224021040(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24EC67B28;
  *(_QWORD *)a1 = &unk_24EC67B88;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_2240210F0(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24EC67B28;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC67B88;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40F569C881);
}

uint64_t sub_2240211C4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC67D00;
  *(_QWORD *)(a1 + 8) = &unk_24EC67D60;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_224021274(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC67D00;
  *(_QWORD *)(a1 + 8) = &unk_24EC67D60;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40F569C881);
}

void sub_224021338(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24EC67D00;
  *(_QWORD *)a1 = &unk_24EC67D60;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_2240213E8(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24EC67D00;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC67D60;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40F569C881);
}

uint64_t sub_2240214BC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC67ED8;
  *(_QWORD *)(a1 + 8) = &unk_24EC67F38;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_22402156C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC67ED8;
  *(_QWORD *)(a1 + 8) = &unk_24EC67F38;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40F569C881);
}

void sub_224021630(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24EC67ED8;
  *(_QWORD *)a1 = &unk_24EC67F38;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_2240216E0(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24EC67ED8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC67F38;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40F569C881);
}

uint64_t sub_2240217B4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC68F70;
  *(_QWORD *)(a1 + 8) = &unk_24EC68FD0;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_224021864(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC68F70;
  *(_QWORD *)(a1 + 8) = &unk_24EC68FD0;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40F569C881);
}

void sub_224021928(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24EC68F70;
  *(_QWORD *)a1 = &unk_24EC68FD0;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_2240219D8(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24EC68F70;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC68FD0;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40F569C881);
}

uint64_t sub_224021AAC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC69110;
  *(_QWORD *)(a1 + 8) = &unk_24EC69170;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_224021B5C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC69110;
  *(_QWORD *)(a1 + 8) = &unk_24EC69170;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40F569C881);
}

void sub_224021C20(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24EC69110;
  *(_QWORD *)a1 = &unk_24EC69170;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_224021CD0(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24EC69110;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC69170;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40F569C881);
}

uint64_t sub_224021DA4(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24EC68180;
  *(_QWORD *)(a1 + 8) = &unk_24EC681E0;
  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 208);
  if (v2)
    v2(0, a1 + 208, 0, 0, 0);
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_224021E30(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24EC68180;
  *(_QWORD *)(a1 + 8) = &unk_24EC681E0;
  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 208);
  if (v2)
    v2(0, a1 + 208, 0, 0, 0);
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40294CF2FDLL);
}

_QWORD *sub_224021ED0(_QWORD *result)
{
  _QWORD *v1;
  uint64_t (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v4;

  v1 = result;
  *(result - 1) = off_24EC68180;
  *result = &unk_24EC681E0;
  v2 = (uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))result[25];
  if (v2)
    result = (_QWORD *)v2(0, result + 25, 0, 0, 0);
  v3 = *((unsigned int *)v1 + 46);
  if ((_DWORD)v3 != -1)
    result = (_QWORD *)((uint64_t (*)(char *, _QWORD *))*(&off_24EC66CC8 + v3))(&v4, v1 + 1);
  *((_DWORD *)v1 + 46) = -1;
  return result;
}

uint64_t sub_224021F5C(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v4;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24EC68180;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC681E0;
  v3 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 200);
  if (v3)
    v3(0, a1 + 200, 0, 0, 0);
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v4))(&v6, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40294CF2FDLL);
}

uint64_t sub_224022004(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC685D8;
  *(_QWORD *)(a1 + 8) = &unk_24EC68638;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_2240220B4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC685D8;
  *(_QWORD *)(a1 + 8) = &unk_24EC68638;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C407D254C52);
}

void sub_224022178(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24EC685D8;
  *(_QWORD *)a1 = &unk_24EC68638;
  v2 = *(std::__shared_weak_count **)(a1 + 200);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_224022228(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24EC685D8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC68638;
  v3 = *(std::__shared_weak_count **)(a1 + 200);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C407D254C52);
}

uint64_t sub_2240222FC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC68938;
  *(_QWORD *)(a1 + 8) = &unk_24EC68998;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_2240223AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24EC68938;
  *(_QWORD *)(a1 + 8) = &unk_24EC68998;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10F3C40EF434651);
}

void sub_224022470(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24EC68938;
  *(_QWORD *)a1 = &unk_24EC68998;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_224022520(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24EC68938;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC68998;
  v3 = *(std::__shared_weak_count **)(a1 + 208);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10F3C40EF434651);
}

void sub_2240225F8(uint64_t a1)
{
  sub_22401D5D0(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22402261C(uint64_t a1)
{
  return sub_22401D5D0(a1 - 8);
}

void sub_224022624(uint64_t a1)
{
  sub_22401D5D0(a1 - 8);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22402264C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC68DD0;
  *(_QWORD *)(a1 + 8) = &unk_24EC68E30;
  if (*(_BYTE *)(a1 + 376) && *(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(_BYTE *)(a1 + 344) && *(char *)(a1 + 343) < 0)
  {
    operator delete(*(void **)(a1 + 320));
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v4, a1 + 16);
LABEL_8:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_2240226F4(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)a1 = off_24EC68DD0;
  *(_QWORD *)(a1 + 8) = &unk_24EC68E30;
  if (*(_BYTE *)(a1 + 376) && *(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(_BYTE *)(a1 + 344) && *(char *)(a1 + 343) < 0)
  {
    operator delete(*(void **)(a1 + 320));
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
    {
LABEL_8:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x227684CE8);
    }
  }
  ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v3, a1 + 16);
  goto LABEL_8;
}

void sub_2240227AC(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = off_24EC68DD0;
  *(_QWORD *)a1 = &unk_24EC68E30;
  if (*(_BYTE *)(a1 + 368) && *(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  if (*(_BYTE *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v3, a1 + 8);
LABEL_8:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_224022854(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = off_24EC68DD0;
  *(_QWORD *)a1 = &unk_24EC68E30;
  if (*(_BYTE *)(a1 + 368) && *(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  if (*(_BYTE *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
    {
LABEL_8:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x227684CE8);
    }
  }
  ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v3, a1 + 8);
  goto LABEL_8;
}

uint64_t sub_224022914(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC66EC0;
  *(_QWORD *)(a1 + 8) = &unk_24EC66F20;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_22402297C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC66EC0;
  *(_QWORD *)(a1 + 8) = &unk_24EC66F20;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40CF772451);
}

uint64_t sub_2240229F8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  *(_QWORD *)(result - 8) = off_24EC66EC0;
  *(_QWORD *)result = &unk_24EC66F20;
  v2 = *(unsigned int *)(result + 184);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v3, result + 8);
  *(_DWORD *)(v1 + 184) = -1;
  return result;
}

uint64_t sub_224022A60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24EC66EC0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC66F20;
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40CF772451);
}

uint64_t sub_224022AE4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC67060;
  *(_QWORD *)(a1 + 8) = &unk_24EC670C0;
  sub_224022CC4(a1 + 200);
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_224022B50(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC67060;
  *(_QWORD *)(a1 + 8) = &unk_24EC670C0;
  sub_224022CC4(a1 + 200);
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40DC57CB27);
}

uint64_t sub_224022BD0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 - 8) = off_24EC67060;
  *(_QWORD *)a1 = &unk_24EC670C0;
  result = sub_224022CC4(a1 + 192);
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v4, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return result;
}

uint64_t sub_224022C3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24EC67060;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC670C0;
  sub_224022CC4(a1 + 192);
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40DC57CB27);
}

uint64_t sub_224022CC4(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0)
  {
    operator delete(*(void **)(a1 + 152));
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 120));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_14:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
    goto LABEL_15;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_14;
LABEL_7:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_15:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_224022D94(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC672D0;
  *(_QWORD *)(a1 + 8) = &unk_24EC67330;
  sub_22323DF84(a1 + 200, *(char **)(a1 + 208));
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_224022E04(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC672D0;
  *(_QWORD *)(a1 + 8) = &unk_24EC67330;
  sub_22323DF84(a1 + 200, *(char **)(a1 + 208));
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40546963AFLL);
}

void sub_224022E88(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = off_24EC672D0;
  *(_QWORD *)a1 = &unk_24EC67330;
  sub_22323DF84(a1 + 192, *(char **)(a1 + 200));
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v3, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_224022EF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24EC672D0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC67330;
  sub_22323DF84(a1 + 192, *(char **)(a1 + 200));
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40546963AFLL);
}

uint64_t sub_224022F84(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  if (*(_BYTE *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    v2 = *(void ***)a1;
    if (!*(_QWORD *)a1)
      return a1;
  }
  else
  {
    v2 = *(void ***)a1;
    if (!*(_QWORD *)a1)
      return a1;
  }
  v3 = *(void ***)(a1 + 8);
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      if (*((char *)v3 - 9) < 0)
        operator delete(*(v3 - 4));
      v3 -= 4;
    }
    while (v3 != v2);
    v4 = *(void ***)a1;
  }
  *(_QWORD *)(a1 + 8) = v2;
  operator delete(v4);
  return a1;
}

void sub_22402301C(uint64_t a1)
{
  sub_22401DF60(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224023040(uint64_t a1)
{
  return sub_22401DF60(a1 - 8);
}

void sub_224023048(uint64_t a1)
{
  sub_22401DF60(a1 - 8);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224023070(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC676B0;
  *(_QWORD *)(a1 + 8) = &unk_24EC67710;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_2240230D8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC676B0;
  *(_QWORD *)(a1 + 8) = &unk_24EC67710;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40956CF698);
}

uint64_t sub_224023154(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  *(_QWORD *)(result - 8) = off_24EC676B0;
  *(_QWORD *)result = &unk_24EC67710;
  v2 = *(unsigned int *)(result + 184);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v3, result + 8);
  *(_DWORD *)(v1 + 184) = -1;
  return result;
}

uint64_t sub_2240231BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24EC676B0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC67710;
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40956CF698);
}

void sub_224023240(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  _BYTE v37[28];
  char v38[8];
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  unsigned int v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  uint64_t v60;
  std::ios_base v61;
  uint64_t v62;
  int v63;
  uint64_t (**v64)();
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  __int16 v71;

  *(_OWORD *)v37 = *(_OWORD *)a2;
  *(_OWORD *)&v37[12] = *(_OWORD *)(a2 + 12);
  v38[0] = 0;
  v46 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, uint64_t))off_24EC66D28[v3])(&v64, v38, a2 + 32);
    v46 = v3;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v4 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "io_format";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v4)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LODWORD(v52) = 0;
  sub_223B94FE4((uint64_t)&v48, (uint64_t)&v49, (unsigned __int16 *)v37);
  if ((_DWORD)v52 == -1)
    sub_22316DD70();
  v48 = &v47;
  ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t *))off_24EC66D10[v52])(&v64, &v48, &v49);
  if ((_DWORD)v52 != -1)
    ((void (*)(char **, uint64_t *))off_24EC66CF8[v52])(&v48, &v49);
  sub_224542510(a1, (uint64_t)&v64);
  if (SHIBYTE(v66) < 0)
  {
    operator delete(v64);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_15;
  }
  else if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    goto LABEL_15;
  }
  v5 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "structure";
  *(_QWORD *)(a1 + 80) = 9;
  if (!v5)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_15:
  sub_22454024C(a1);
  v49 = (uint64_t)"version";
  v50 = 7;
  LODWORD(v51) = 2;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_224542048(a1, &v51);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "image_format";
    *(_QWORD *)(a1 + 80) = 12;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LODWORD(v52) = 0;
  sub_223B95444((uint64_t)&v48, (uint64_t)&v49, (uint64_t *)&v37[8]);
  if ((_DWORD)v52 == -1)
    sub_22316DD70();
  v48 = &v47;
  ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t *))off_24EC66D10[v52])(&v64, &v48, &v49);
  if ((_DWORD)v52 != -1)
    ((void (*)(char **, uint64_t *))off_24EC66CF8[v52])(&v48, &v49);
  sub_224542510(a1, (uint64_t)&v64);
  if (SHIBYTE(v66) < 0)
  {
    operator delete(v64);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_30;
  }
  else if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    goto LABEL_30;
  }
  v8 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "size";
  *(_QWORD *)(a1 + 80) = 4;
  if (!v8)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_30:
  v49 = 2;
  v50 = (uint64_t)&v37[16];
  sub_224542C38(a1, (uint64_t)&v49);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 **)(v9 - 8);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v10 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "image_data";
    *(_QWORD *)(a1 + 80) = 10;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22454024C(a1);
  if (*(unsigned __int16 *)v37 == 1)
  {
    if (!v46)
    {
      v49 = (uint64_t)&off_24EC1F8C8;
      v12 = v39;
      v13 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        v16 = v43;
        v17 = v44;
        v18 = v45;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      else
      {
        v16 = v43;
        v17 = v44;
        v18 = v45;
      }
      v50 = v12;
      v51 = v13;
      v52 = v41;
      v53 = v42;
      v54 = v16;
      v55 = v17;
      v56 = v18;
      if (v13)
      {
        v28 = (unint64_t *)&v13->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      goto LABEL_59;
    }
    if (v46 == 1)
    {
      v49 = (uint64_t)&off_24EC1F8C8;
      sub_2231F47D4((uint64_t)v38, (uint64_t)&v50);
LABEL_59:
      sub_22416E5E0((const void *)a1, (uint64_t)&v49);
      v30 = v51;
      if (!v51)
        goto LABEL_73;
      v31 = (unint64_t *)&v51->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      goto LABEL_72;
    }
LABEL_80:
    sub_22316DD70();
  }
  v11 = sub_22416E0BC(*(unsigned __int16 *)v37);
  if (v46)
  {
    if (v46 != 1)
      goto LABEL_80;
    v64 = &off_24EC1F8C8;
    sub_2231F47D4((uint64_t)v38, (uint64_t)&v65);
  }
  else
  {
    v64 = &off_24EC1F8C8;
    v20 = v39;
    v21 = v40;
    if (v40)
    {
      v22 = (unint64_t *)&v40->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v24 = v43;
      v25 = v44;
      v26 = v45;
      do
        v27 = __ldxr(v22);
      while (__stxr(v27 + 1, v22));
    }
    else
    {
      v24 = v43;
      v25 = v44;
      v26 = v45;
    }
    v65 = v20;
    v66 = v21;
    v67 = v41;
    v68 = v42;
    v69 = v24;
    v70 = v25;
    v71 = v26;
    if (v21)
    {
      v33 = (unint64_t *)&v21->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v49 = a1;
  std::streambuf::basic_streambuf();
  v50 = MEMORY[0x24BEDB848] + 16;
  v57 = 0u;
  v58 = 0u;
  v59 = 24;
  v60 = MEMORY[0x24BEDB828] + 24;
  v61.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v61, &v50);
  v62 = 0;
  v63 = -1;
  sub_22319F8C4(&v64, (char *)&v60, v11);
  sub_2240239E0((uint64_t)&v49);
  v30 = v66;
  if (!v66)
    goto LABEL_73;
  v35 = (unint64_t *)&v66->__shared_owners_;
  do
    v32 = __ldaxr(v35);
  while (__stlxr(v32 - 1, v35));
LABEL_72:
  if (v32)
  {
LABEL_73:
    v36 = v46;
    if (v46 == -1)
      return;
    goto LABEL_74;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  v36 = v46;
  if (v46 != -1)
LABEL_74:
    ((void (*)(uint64_t *, char *))off_24EC66CB8[v36])(&v49, v38);
}

void sub_22402386C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  sub_2240239E0((uint64_t)&a24);
  sub_22319A5E0(v24 - 120);
  sub_22319A588((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224023890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = v38;
  MEMORY[0x227684BE0](v40);
  if (a38 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_22319A5E0(v39 - 120);
  sub_22319A588((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2240238D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_22319A5E0(v9 - 120);
  sub_22319A588((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2240238F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v27 = a26;
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      sub_22319A588((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_22319A588((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2240239E0(uint64_t a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  size_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  int v18;
  void **v19;
  void **v20;
  uint64_t v21;
  void **__dst;
  size_t v24;
  int64_t v25;
  size_t v26;
  void **v27;

  v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 56);
    if (v5 < v6)
    {
      *(_QWORD *)(a1 + 96) = v6;
      v5 = v6;
    }
    v7 = *(const void **)(a1 + 48);
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_36;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v25) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = *(const void **)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_36:
      sub_22316DBC0();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v24 = v3;
    v25 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v25) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  v10 = HIBYTE(v25);
  if (v25 >= 0)
    v11 = HIBYTE(v25);
  else
    v11 = v24;
  v12 = *(_QWORD *)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 88)
    || *(_QWORD *)(v12 + 80) != 7
    || ((v13 = *(int **)(v12 + 72), v14 = *v13, v15 = *(int *)((char *)v13 + 3), v14 == *(_DWORD *)"version")
      ? (v16 = v15 == *(_DWORD *)"sion")
      : (v16 = 0),
        !v16))
  {
    LOBYTE(v26) = 6;
    v27 = (void **)v11;
    v17 = (unsigned __int8 *)sub_22453FEA0(v12);
    v18 = *v17;
    *v17 = v26;
    LOBYTE(v26) = v18;
    v19 = (void **)*((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v27;
    v27 = v19;
    sub_22345337C(&v27, v18);
    v10 = HIBYTE(v25);
  }
  if (v10 < 0)
  {
    v20 = __dst;
    if (v11 && !__dst)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v20 = 0;
    }
  }
  else
  {
    v20 = (void **)&__dst;
  }
  v21 = *(_QWORD *)a1;
  v26 = v11;
  v27 = v20;
  sub_2245403C8(v21, &v26);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  return a1;
}

void sub_224023C2C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_22345337C(v13, a13);
  sub_22316DC48(a1);
}

uint64_t sub_224023C48(const void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _OWORD v5[2];
  _BYTE v6[64];
  int v7;
  char v8;
  char v9;

  v5[0] = *(_OWORD *)a2;
  *(_OWORD *)((char *)v5 + 12) = *(_OWORD *)(a2 + 12);
  v6[0] = 0;
  v7 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_24EC66D28[v3])(&v8, v6, a2 + 32);
    v7 = v3;
  }
  result = sub_22319F5F8(a1, (uint64_t)v5);
  if (v7 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_24EC66CB8[v7])(&v9, v6);
  return result;
}

void sub_224023D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  uint64_t v21;
  uint64_t v22;

  if (a21 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC66CB8[a21])(v22 - 33, v21);
  _Unwind_Resume(exception_object);
}

void sub_224023D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319A588((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224023D48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  _BYTE v37[28];
  char v38[8];
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  unsigned int v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  uint64_t v60;
  std::ios_base v61;
  uint64_t v62;
  int v63;
  uint64_t (**v64)();
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  __int16 v71;

  *(_OWORD *)v37 = *(_OWORD *)a2;
  *(_OWORD *)&v37[12] = *(_OWORD *)(a2 + 12);
  v38[0] = 0;
  v46 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, uint64_t))off_24EC66D28[v3])(&v64, v38, a2 + 32);
    v46 = v3;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v4 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "io_format";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v4)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LODWORD(v52) = 0;
  sub_223B94FE4((uint64_t)&v48, (uint64_t)&v49, (unsigned __int16 *)v37);
  if ((_DWORD)v52 == -1)
    sub_22316DD70();
  v48 = &v47;
  ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t *))off_24EC66D10[v52])(&v64, &v48, &v49);
  if ((_DWORD)v52 != -1)
    ((void (*)(char **, uint64_t *))off_24EC66CF8[v52])(&v48, &v49);
  sub_2245409C8(a1, (uint64_t)&v64);
  if (SHIBYTE(v66) < 0)
  {
    operator delete(v64);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_15;
  }
  else if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    goto LABEL_15;
  }
  v5 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "structure";
  *(_QWORD *)(a1 + 80) = 9;
  if (!v5)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_15:
  sub_22453FAE0(a1);
  v49 = (uint64_t)"version";
  v50 = 7;
  LODWORD(v51) = 2;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_224540500(a1, &v51);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "image_format";
    *(_QWORD *)(a1 + 80) = 12;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LODWORD(v52) = 0;
  sub_223B95444((uint64_t)&v48, (uint64_t)&v49, (uint64_t *)&v37[8]);
  if ((_DWORD)v52 == -1)
    sub_22316DD70();
  v48 = &v47;
  ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t *))off_24EC66D10[v52])(&v64, &v48, &v49);
  if ((_DWORD)v52 != -1)
    ((void (*)(char **, uint64_t *))off_24EC66CF8[v52])(&v48, &v49);
  sub_2245409C8(a1, (uint64_t)&v64);
  if (SHIBYTE(v66) < 0)
  {
    operator delete(v64);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_30;
  }
  else if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    goto LABEL_30;
  }
  v8 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "size";
  *(_QWORD *)(a1 + 80) = 4;
  if (!v8)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_30:
  v49 = 2;
  v50 = (uint64_t)&v37[16];
  sub_224540FB8(a1, (uint64_t)&v49);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 **)(v9 - 8);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v10 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "image_data";
    *(_QWORD *)(a1 + 80) = 10;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22453FAE0(a1);
  if (*(unsigned __int16 *)v37 == 1)
  {
    if (!v46)
    {
      v49 = (uint64_t)&off_24EC1F8C8;
      v12 = v39;
      v13 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        v16 = v43;
        v17 = v44;
        v18 = v45;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      else
      {
        v16 = v43;
        v17 = v44;
        v18 = v45;
      }
      v50 = v12;
      v51 = v13;
      v52 = v41;
      v53 = v42;
      v54 = v16;
      v55 = v17;
      v56 = v18;
      if (v13)
      {
        v28 = (unint64_t *)&v13->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      goto LABEL_59;
    }
    if (v46 == 1)
    {
      v49 = (uint64_t)&off_24EC1F8C8;
      sub_2231F47D4((uint64_t)v38, (uint64_t)&v50);
LABEL_59:
      sub_22416E5E0((const void *)a1, (uint64_t)&v49);
      v30 = v51;
      if (!v51)
        goto LABEL_73;
      v31 = (unint64_t *)&v51->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      goto LABEL_72;
    }
LABEL_80:
    sub_22316DD70();
  }
  v11 = sub_22416E0BC(*(unsigned __int16 *)v37);
  if (v46)
  {
    if (v46 != 1)
      goto LABEL_80;
    v64 = &off_24EC1F8C8;
    sub_2231F47D4((uint64_t)v38, (uint64_t)&v65);
  }
  else
  {
    v64 = &off_24EC1F8C8;
    v20 = v39;
    v21 = v40;
    if (v40)
    {
      v22 = (unint64_t *)&v40->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v24 = v43;
      v25 = v44;
      v26 = v45;
      do
        v27 = __ldxr(v22);
      while (__stxr(v27 + 1, v22));
    }
    else
    {
      v24 = v43;
      v25 = v44;
      v26 = v45;
    }
    v65 = v20;
    v66 = v21;
    v67 = v41;
    v68 = v42;
    v69 = v24;
    v70 = v25;
    v71 = v26;
    if (v21)
    {
      v33 = (unint64_t *)&v21->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v49 = a1;
  std::streambuf::basic_streambuf();
  v50 = MEMORY[0x24BEDB848] + 16;
  v57 = 0u;
  v58 = 0u;
  v59 = 24;
  v60 = MEMORY[0x24BEDB828] + 24;
  v61.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v61, &v50);
  v62 = 0;
  v63 = -1;
  sub_22319F8C4(&v64, (char *)&v60, v11);
  sub_2240244E8((uint64_t)&v49);
  v30 = v66;
  if (!v66)
    goto LABEL_73;
  v35 = (unint64_t *)&v66->__shared_owners_;
  do
    v32 = __ldaxr(v35);
  while (__stlxr(v32 - 1, v35));
LABEL_72:
  if (v32)
  {
LABEL_73:
    v36 = v46;
    if (v46 == -1)
      return;
    goto LABEL_74;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  v36 = v46;
  if (v46 != -1)
LABEL_74:
    ((void (*)(uint64_t *, char *))off_24EC66CB8[v36])(&v49, v38);
}

void sub_224024374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  sub_2240244E8((uint64_t)&a24);
  sub_22319A5E0(v24 - 120);
  sub_22319A588((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224024398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = v38;
  MEMORY[0x227684BE0](v40);
  if (a38 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_22319A5E0(v39 - 120);
  sub_22319A588((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2240243DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_22319A5E0(v9 - 120);
  sub_22319A588((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2240243F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v27 = a26;
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      sub_22319A588((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_22319A588((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2240244E8(uint64_t a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void **__dst;
  size_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 56);
    if (v5 < v6)
    {
      *(_QWORD *)(a1 + 96) = v6;
      v5 = v6;
    }
    v7 = *(const void **)(a1 + 48);
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_36;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v25) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = *(const void **)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_36:
      sub_22316DBC0();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v24 = v3;
    v25 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v25) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  v10 = HIBYTE(v25);
  if (v25 >= 0)
    v11 = HIBYTE(v25);
  else
    v11 = v24;
  v12 = *(_QWORD *)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 88)
    || *(_QWORD *)(v12 + 80) != 7
    || ((v13 = *(int **)(v12 + 72), v14 = *v13, v15 = *(int *)((char *)v13 + 3), v14 == *(_DWORD *)"version")
      ? (v16 = v15 == *(_DWORD *)"sion")
      : (v16 = 0),
        !v16))
  {
    LOBYTE(v26) = 6;
    v27 = v11;
    v17 = (unsigned __int8 *)sub_22453F8B8(v12);
    v18 = *v17;
    *v17 = v26;
    LOBYTE(v26) = v18;
    v19 = *((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v27;
    v27 = v19;
    sub_223454278(&v27, v18);
    v10 = HIBYTE(v25);
  }
  if (v10 < 0)
  {
    v20 = __dst;
    if (v11 && !__dst)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v20 = 0;
    }
  }
  else
  {
    v20 = (void **)&__dst;
  }
  v21 = *(_QWORD *)a1;
  v26 = v11;
  v27 = (uint64_t)v20;
  sub_22453FC5C(v21, (size_t *)&v26);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  return a1;
}

void sub_224024734(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_223454278(v13, a13);
  sub_22316DC48(a1);
}

void sub_224024750(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD v4[2];
  _BYTE v5[64];
  int v6;
  char v7;
  char v8;

  v4[0] = *(_OWORD *)a2;
  *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(a2 + 12);
  v5[0] = 0;
  v6 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_24EC66D28[v3])(&v7, v5, a2 + 32);
    v6 = v3;
  }
  sub_223BA43C0(a1, (uint64_t)v4);
  if (v6 != -1)
    ((void (*)(char *, _BYTE *))off_24EC66CB8[v6])(&v8, v5);
}

void sub_224024808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  uint64_t v21;
  uint64_t v22;

  if (a21 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC66CB8[a21])(v22 - 33, v21);
  _Unwind_Resume(exception_object);
}

void sub_22402483C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319A588((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224024850(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD v4[2];
  _BYTE v5[64];
  int v6;
  char v7;
  char v8;

  v4[0] = *(_OWORD *)a2;
  *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(a2 + 12);
  v5[0] = 0;
  v6 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_24EC66D28[v3])(&v7, v5, a2 + 32);
    v6 = v3;
  }
  sub_223BAA7A4(a1, (uint64_t)v4);
  if (v6 != -1)
    ((void (*)(char *, _BYTE *))off_24EC66CB8[v6])(&v8, v5);
}

void sub_224024908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  uint64_t v21;
  uint64_t v22;

  if (a21 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC66CB8[a21])(v22 - 33, v21);
  _Unwind_Resume(exception_object);
}

void sub_22402493C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319A588((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224024950(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD v4[2];
  _BYTE v5[64];
  int v6;
  char v7;
  char v8;

  v4[0] = *(_OWORD *)a2;
  *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(a2 + 12);
  v5[0] = 0;
  v6 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_24EC66D28[v3])(&v7, v5, a2 + 32);
    v6 = v3;
  }
  sub_223BB08B4(a1, (uint64_t)v4);
  if (v6 != -1)
    ((void (*)(char *, _BYTE *))off_24EC66CB8[v6])(&v8, v5);
}

void sub_224024A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  uint64_t v21;
  uint64_t v22;

  if (a21 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC66CB8[a21])(v22 - 33, v21);
  _Unwind_Resume(exception_object);
}

void sub_224024A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319A588((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_224024A50(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  char *v10;
  unsigned int v11;
  int v12;
  int v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *exception;
  _QWORD *v58;
  _BYTE v59[24];
  __int128 v60;
  _BYTE v61[32];
  _BYTE v62[22];
  unsigned int v63;
  char v64;
  _BYTE v65[40];
  _BYTE v66[22];
  void *__p;
  char v68;
  int v69;
  _QWORD v70[21];
  unsigned __int16 *v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[22];
  char v75;

  sub_224544628(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)v65 = 0;
  sub_22451CAD4(v5, v65);
  if (HIDWORD(*(_QWORD *)v65))
    goto LABEL_100;
  if (*(_DWORD *)v65 >= 2u)
    v6 = 2;
  else
    v6 = *(_DWORD *)v65;
  if (v6 >= 2)
  {
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "io_format";
    *(_QWORD *)(a1 + 96) = 9;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)v65 = a2;
    sub_2240255AC((uint64_t *)a1, (_WORD **)v65);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "structure";
    *(_QWORD *)(a1 + 96) = 9;
    if (v8)
    {
      sub_224544628(a1);
      v9 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (v9)
        goto LABEL_12;
    }
    else
    {
      *(_BYTE *)(a1 + 104) = 1;
      sub_224544628(a1);
      v42 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (v42)
        goto LABEL_12;
    }
    *(_BYTE *)(a1 + 104) = 1;
LABEL_12:
    v10 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)v65 = 0;
    sub_22451CAD4(v10, v65);
    if (!HIDWORD(*(_QWORD *)v65))
    {
      if (*(_DWORD *)v65 >= 2u)
        v11 = 2;
      else
        v11 = *(_DWORD *)v65;
      if (v11 < 2)
      {
        *(_OWORD *)v59 = 1uLL;
        v27 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "image_format";
        *(_QWORD *)(a1 + 96) = 12;
        if (!v27)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = v59;
        sub_22402579C((uint64_t *)a1, (_QWORD **)v65);
        v28 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "size";
        *(_QWORD *)(a1 + 96) = 4;
        if (!v28)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = 2;
        *(_QWORD *)&v65[8] = &v59[8];
        v29 = (char *)sub_2245448E0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_224545A98(v29, (uint64_t)v65);
        *(_OWORD *)(a2 + 4) = *(_OWORD *)v59;
      }
      else
      {
        v12 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "image_format";
        *(_QWORD *)(a1 + 96) = 12;
        if (!v12)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = a2 + 4;
        sub_22402579C((uint64_t *)a1, (_QWORD **)v65);
        v13 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "size";
        *(_QWORD *)(a1 + 96) = 4;
        if (!v13)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = 2;
        *(_QWORD *)&v65[8] = a2 + 8;
        v14 = (char *)sub_2245448E0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_224545A98(v14, (uint64_t)v65);
      }
      v30 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v30 - 8);
      v31 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(v31 - 8);
      *(_QWORD *)(a1 + 48) = v30 - 8;
      *(_QWORD *)(a1 + 72) = v31 - 8;
      LODWORD(v30) = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "image_data";
      *(_QWORD *)(a1 + 96) = 10;
      if ((_DWORD)v30)
      {
        sub_224544628(a1);
        v32 = *a2;
        if (v32 == 1)
        {
LABEL_51:
          sub_22416B404((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
          v33 = *((unsigned int *)a2 + 24);
          if ((_DWORD)v33 != -1)
            ((void (*)(_BYTE *, unsigned __int16 *))off_24EC6D660[v33])(v59, a2 + 16);
          *((_QWORD *)a2 + 4) = &off_24EC1F958;
          *(_OWORD *)(a2 + 20) = *(_OWORD *)&v65[8];
          *(_OWORD *)(a2 + 28) = *(_OWORD *)&v65[24];
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v66;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v66[14];
          *((_DWORD *)a2 + 24) = 1;
          sub_22416E278((const void *)a1, (uint64_t)(a2 + 16));
          goto LABEL_99;
        }
      }
      else
      {
        *(_BYTE *)(a1 + 104) = 1;
        sub_224544628(a1);
        v32 = *a2;
        if (v32 == 1)
          goto LABEL_51;
      }
      v43 = sub_22416E0BC(v32);
      sub_224025988((uint64_t)v65, (uint64_t *)a1);
      sub_2231B3838(v70, v43, (uint64_t)v59);
      v44 = *((unsigned int *)a2 + 24);
      if ((_DWORD)v44 != -1)
      {
        if ((_DWORD)v44 == 1)
        {
          v45 = *(_OWORD *)&v59[8];
          *(_QWORD *)&v59[8] = 0;
          *(_QWORD *)&v59[16] = 0;
          v46 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
          *(_OWORD *)(a2 + 20) = v45;
          if (v46)
          {
            p_shared_owners = (unint64_t *)&v46->__shared_owners_;
            do
              v48 = __ldaxr(p_shared_owners);
            while (__stlxr(v48 - 1, p_shared_owners));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          *(_OWORD *)(a2 + 28) = v60;
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v61;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v61[14];
          v49 = *(std::__shared_weak_count **)&v59[16];
          if (*(_QWORD *)&v59[16])
          {
            v50 = (unint64_t *)(*(_QWORD *)&v59[16] + 8);
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          goto LABEL_83;
        }
        ((void (*)(unsigned __int16 **, unsigned __int16 *))off_24EC66CB8[v44])(&v71, a2 + 16);
      }
      *((_QWORD *)a2 + 4) = &off_24EC1F958;
      *(_OWORD *)(a2 + 20) = *(_OWORD *)&v59[8];
      *(_QWORD *)&v59[8] = 0;
      *(_QWORD *)&v59[16] = 0;
      *(_OWORD *)(a2 + 28) = v60;
      *(_OWORD *)(a2 + 36) = *(_OWORD *)v61;
      *(_QWORD *)(a2 + 43) = *(_QWORD *)&v61[14];
      *((_DWORD *)a2 + 24) = 1;
LABEL_83:
      std::istream::~istream();
      *(_QWORD *)v65 = MEMORY[0x24BEDB848] + 16;
      if (v68 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      goto LABEL_99;
    }
LABEL_100:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)v65 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v65[8]);
  sub_22416B680((uint64_t)v59, (uint64_t)v65, 0);
  v15 = *(std::__shared_weak_count **)&v65[16];
  if (*(_QWORD *)&v65[16])
  {
    v16 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  LODWORD(v60) = 0;
  v18 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "io_format";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v18)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v65 = v59;
  sub_2240255AC((uint64_t *)a1, (_WORD **)v65);
  v19 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "structure";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v19)
    *(_BYTE *)(a1 + 104) = 1;
  sub_224544628(a1);
  v20 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v20)
    *(_BYTE *)(a1 + 104) = 1;
  v21 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)v65 = 0;
  sub_22451CAD4(v21, v65);
  if (*(_DWORD *)&v65[4])
  {
    v58 = __cxa_allocate_exception(8uLL);
    *v58 = &off_24EC7AC38;
    __cxa_throw(v58, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  v22 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_format";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v22)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v65 = &v59[8];
  sub_22402579C((uint64_t *)a1, (_QWORD **)v65);
  v23 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "size";
  *(_QWORD *)(a1 + 96) = 4;
  if (!v23)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v65 = 2;
  *(_QWORD *)&v65[8] = &v59[16];
  v24 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_224545A98(v24, (uint64_t)v65);
  v25 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v25 - 8);
  v26 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v26 - 8);
  *(_QWORD *)(a1 + 48) = v25 - 8;
  *(_QWORD *)(a1 + 72) = v26 - 8;
  LODWORD(v25) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_data";
  *(_QWORD *)(a1 + 96) = 10;
  if (!(_DWORD)v25)
    *(_BYTE *)(a1 + 104) = 1;
  sub_224544628(a1);
  if (*(unsigned __int16 *)v59 != 1)
  {
    v34 = sub_22416E0BC(*(unsigned __int16 *)v59);
    sub_224025988((uint64_t)v65, (uint64_t *)a1);
    sub_2231B3838(v70, v34, (uint64_t)&v71);
    if (v63 != -1)
    {
      if (v63 == 1)
      {
        v35 = v72;
        v72 = 0uLL;
        v36 = *(std::__shared_weak_count **)&v61[8];
        *(_OWORD *)v61 = v35;
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        *(_OWORD *)&v61[16] = v73;
        *(_OWORD *)v62 = *(_OWORD *)v74;
        *(_QWORD *)&v62[14] = *(_QWORD *)&v74[14];
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
        if (*((_QWORD *)&v72 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        goto LABEL_88;
      }
      ((void (*)(char *, char *))off_24EC66CB8[v63])(&v75, (char *)&v60 + 8);
    }
    *((_QWORD *)&v60 + 1) = &off_24EC1F958;
    *(_OWORD *)v61 = v72;
    v72 = 0uLL;
    *(_OWORD *)&v61[16] = v73;
    *(_OWORD *)v62 = *(_OWORD *)v74;
    *(_QWORD *)&v62[14] = *(_QWORD *)&v74[14];
    v63 = 1;
LABEL_88:
    std::istream::~istream();
    *(_QWORD *)v65 = MEMORY[0x24BEDB848] + 16;
    if (v68 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    goto LABEL_91;
  }
  sub_22416B268((uint64_t *)&v59[8], v60);
  if (v63 != -1)
    ((void (*)(unsigned __int16 **, char *))off_24EC6D660[v63])(&v71, (char *)&v60 + 8);
  *((_QWORD *)&v60 + 1) = &off_24EC1F958;
  *(_OWORD *)v61 = *(_OWORD *)&v65[8];
  *(_OWORD *)&v61[16] = *(_OWORD *)&v65[24];
  *(_OWORD *)v62 = *(_OWORD *)v66;
  *(_QWORD *)&v62[14] = *(_QWORD *)&v66[14];
  v63 = 1;
  sub_22416E278((const void *)a1, (uint64_t)&v60 + 8);
LABEL_91:
  *(_WORD *)v65 = *(_WORD *)v59;
  *(_OWORD *)&v65[8] = *(_OWORD *)&v59[8];
  v52 = v63;
  *(_DWORD *)&v65[24] = v60;
  v65[32] = 0;
  v69 = -1;
  if (v63 == -1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v65;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v65[12];
    v53 = *((unsigned int *)a2 + 24);
    if ((_DWORD)v53 != -1)
    {
      ((void (*)(unsigned __int16 **, unsigned __int16 *))off_24EC66CB8[v53])(&v71, a2 + 16);
      *((_DWORD *)a2 + 24) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, char *))off_24EC66D38[v63])(&v64, &v65[32], (char *)&v60 + 8);
    v69 = v52;
    *(_OWORD *)a2 = *(_OWORD *)v65;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v65[12];
    v71 = a2 + 16;
    ((void (*)(unsigned __int16 **))off_24EC66D48[v52])(&v71);
  }
  if (v69 != -1)
    ((void (*)(unsigned __int16 **, _BYTE *))off_24EC66CB8[v69])(&v71, &v65[32]);
  if (v63 != -1)
    ((void (*)(_BYTE *, char *))off_24EC66CB8[v63])(v65, (char *)&v60 + 8);
LABEL_99:
  v54 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v54 - 8);
  v55 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v55 - 8);
  *(_QWORD *)(a1 + 48) = v54 - 8;
  *(_QWORD *)(a1 + 72) = v55 - 8;
  return a1;
}

void sub_224025454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,int a39)
{
  uint64_t v39;

  std::istream::~istream();
  a24 = MEMORY[0x24BEDB848] + 16;
  if (a37 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  if (a21 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24EC66CB8[a21])(v39 - 65, &a13);
  _Unwind_Resume(a1);
}

void sub_2240255AC(uint64_t *a1, _WORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2245448E0(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_22451CFD4(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_22456E918(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_22416D4C8((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](v8 + 128);
  MEMORY[0x227684CE8](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_224025710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_22456E764((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22402579C(uint64_t *a1, _QWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2245448E0(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_22451CFD4(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_22456E918(v7, v9);
  v16 = 0;
  *(_QWORD *)&v17 = v8;
  sub_22416DB34((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](v8 + 128);
  MEMORY[0x227684CE8](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_2240258FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_22456E764((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_224025988(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  char *v7;
  std::string::size_type v8;
  std::string *p_n;
  char *v10;
  _QWORD v12[2];
  std::string __n;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  v7 = (char *)sub_2245448E0(a2);
  ++a2[14];
  __n.__r_.__value_.__r.__words[0] = 0;
  sub_22451CAD4(v7, &__n);
  v8 = __n.__r_.__value_.__r.__words[0];
  memset(&__n, 0, sizeof(__n));
  if (v8 && (std::string::append(&__n, v8, 0), SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0))
  {
    p_n = (std::string *)__n.__r_.__value_.__r.__words[0];
    if (!__n.__r_.__value_.__r.__words[0])
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      p_n = 0;
    }
  }
  else
  {
    p_n = &__n;
  }
  v12[0] = v8;
  v12[1] = p_n;
  v10 = (char *)sub_2245448E0(a2);
  ++a2[14];
  sub_2245449F8(v10, (uint64_t)v12);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = __n;
  *((_BYTE *)&__n.__r_.__value_.__s + 23) = 0;
  __n.__r_.__value_.__s.__data_[0] = 0;
  sub_2231B5488(a1);
  if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__n.__r_.__value_.__l.__data_);
  return a1;
}

void sub_224025B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_2231A01E4(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_224025B90(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  char *v10;
  unsigned int v11;
  int v12;
  int v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *exception;
  _QWORD *v58;
  _BYTE v59[24];
  __int128 v60;
  _BYTE v61[32];
  _BYTE v62[22];
  unsigned int v63;
  char v64;
  _BYTE v65[40];
  _BYTE v66[22];
  void *__p;
  char v68;
  int v69;
  _QWORD v70[21];
  unsigned __int16 *v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[22];
  char v75;

  sub_224544138(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)v65 = 0;
  sub_22451C444(v5, v65);
  if (HIDWORD(*(_QWORD *)v65))
    goto LABEL_100;
  if (*(_DWORD *)v65 >= 2u)
    v6 = 2;
  else
    v6 = *(_DWORD *)v65;
  if (v6 >= 2)
  {
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "io_format";
    *(_QWORD *)(a1 + 96) = 9;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)v65 = a2;
    sub_2240266EC((uint64_t *)a1, (_WORD **)v65);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "structure";
    *(_QWORD *)(a1 + 96) = 9;
    if (v8)
    {
      sub_224544138(a1);
      v9 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (v9)
        goto LABEL_12;
    }
    else
    {
      *(_BYTE *)(a1 + 104) = 1;
      sub_224544138(a1);
      v42 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (v42)
        goto LABEL_12;
    }
    *(_BYTE *)(a1 + 104) = 1;
LABEL_12:
    v10 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)v65 = 0;
    sub_22451C444(v10, v65);
    if (!HIDWORD(*(_QWORD *)v65))
    {
      if (*(_DWORD *)v65 >= 2u)
        v11 = 2;
      else
        v11 = *(_DWORD *)v65;
      if (v11 < 2)
      {
        *(_OWORD *)v59 = 1uLL;
        v27 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "image_format";
        *(_QWORD *)(a1 + 96) = 12;
        if (!v27)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = v59;
        sub_2240268DC((uint64_t *)a1, (_QWORD **)v65);
        v28 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "size";
        *(_QWORD *)(a1 + 96) = 4;
        if (!v28)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = 2;
        *(_QWORD *)&v65[8] = &v59[8];
        v29 = (char *)sub_2245443F0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_224544E0C(v29, (uint64_t)v65);
        *(_OWORD *)(a2 + 4) = *(_OWORD *)v59;
      }
      else
      {
        v12 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "image_format";
        *(_QWORD *)(a1 + 96) = 12;
        if (!v12)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = a2 + 4;
        sub_2240268DC((uint64_t *)a1, (_QWORD **)v65);
        v13 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "size";
        *(_QWORD *)(a1 + 96) = 4;
        if (!v13)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = 2;
        *(_QWORD *)&v65[8] = a2 + 8;
        v14 = (char *)sub_2245443F0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_224544E0C(v14, (uint64_t)v65);
      }
      v30 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v30 - 8);
      v31 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(v31 - 8);
      *(_QWORD *)(a1 + 48) = v30 - 8;
      *(_QWORD *)(a1 + 72) = v31 - 8;
      LODWORD(v30) = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "image_data";
      *(_QWORD *)(a1 + 96) = 10;
      if ((_DWORD)v30)
      {
        sub_224544138(a1);
        v32 = *a2;
        if (v32 == 1)
        {
LABEL_51:
          sub_22416B404((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
          v33 = *((unsigned int *)a2 + 24);
          if ((_DWORD)v33 != -1)
            ((void (*)(_BYTE *, unsigned __int16 *))off_24EC6D660[v33])(v59, a2 + 16);
          *((_QWORD *)a2 + 4) = &off_24EC1F958;
          *(_OWORD *)(a2 + 20) = *(_OWORD *)&v65[8];
          *(_OWORD *)(a2 + 28) = *(_OWORD *)&v65[24];
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v66;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v66[14];
          *((_DWORD *)a2 + 24) = 1;
          sub_22416E278((const void *)a1, (uint64_t)(a2 + 16));
          goto LABEL_99;
        }
      }
      else
      {
        *(_BYTE *)(a1 + 104) = 1;
        sub_224544138(a1);
        v32 = *a2;
        if (v32 == 1)
          goto LABEL_51;
      }
      v43 = sub_22416E0BC(v32);
      sub_224026AC8((uint64_t)v65, (uint64_t *)a1);
      sub_2231B3838(v70, v43, (uint64_t)v59);
      v44 = *((unsigned int *)a2 + 24);
      if ((_DWORD)v44 != -1)
      {
        if ((_DWORD)v44 == 1)
        {
          v45 = *(_OWORD *)&v59[8];
          *(_QWORD *)&v59[8] = 0;
          *(_QWORD *)&v59[16] = 0;
          v46 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
          *(_OWORD *)(a2 + 20) = v45;
          if (v46)
          {
            p_shared_owners = (unint64_t *)&v46->__shared_owners_;
            do
              v48 = __ldaxr(p_shared_owners);
            while (__stlxr(v48 - 1, p_shared_owners));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          *(_OWORD *)(a2 + 28) = v60;
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v61;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v61[14];
          v49 = *(std::__shared_weak_count **)&v59[16];
          if (*(_QWORD *)&v59[16])
          {
            v50 = (unint64_t *)(*(_QWORD *)&v59[16] + 8);
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          goto LABEL_83;
        }
        ((void (*)(unsigned __int16 **, unsigned __int16 *))off_24EC66CB8[v44])(&v71, a2 + 16);
      }
      *((_QWORD *)a2 + 4) = &off_24EC1F958;
      *(_OWORD *)(a2 + 20) = *(_OWORD *)&v59[8];
      *(_QWORD *)&v59[8] = 0;
      *(_QWORD *)&v59[16] = 0;
      *(_OWORD *)(a2 + 28) = v60;
      *(_OWORD *)(a2 + 36) = *(_OWORD *)v61;
      *(_QWORD *)(a2 + 43) = *(_QWORD *)&v61[14];
      *((_DWORD *)a2 + 24) = 1;
LABEL_83:
      std::istream::~istream();
      *(_QWORD *)v65 = MEMORY[0x24BEDB848] + 16;
      if (v68 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      goto LABEL_99;
    }
LABEL_100:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)v65 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v65[8]);
  sub_22416B680((uint64_t)v59, (uint64_t)v65, 0);
  v15 = *(std::__shared_weak_count **)&v65[16];
  if (*(_QWORD *)&v65[16])
  {
    v16 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  LODWORD(v60) = 0;
  v18 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "io_format";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v18)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v65 = v59;
  sub_2240266EC((uint64_t *)a1, (_WORD **)v65);
  v19 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "structure";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v19)
    *(_BYTE *)(a1 + 104) = 1;
  sub_224544138(a1);
  v20 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v20)
    *(_BYTE *)(a1 + 104) = 1;
  v21 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)v65 = 0;
  sub_22451C444(v21, v65);
  if (*(_DWORD *)&v65[4])
  {
    v58 = __cxa_allocate_exception(8uLL);
    *v58 = &off_24EC7AC38;
    __cxa_throw(v58, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  v22 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_format";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v22)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v65 = &v59[8];
  sub_2240268DC((uint64_t *)a1, (_QWORD **)v65);
  v23 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "size";
  *(_QWORD *)(a1 + 96) = 4;
  if (!v23)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v65 = 2;
  *(_QWORD *)&v65[8] = &v59[16];
  v24 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_224544E0C(v24, (uint64_t)v65);
  v25 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v25 - 8);
  v26 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v26 - 8);
  *(_QWORD *)(a1 + 48) = v25 - 8;
  *(_QWORD *)(a1 + 72) = v26 - 8;
  LODWORD(v25) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_data";
  *(_QWORD *)(a1 + 96) = 10;
  if (!(_DWORD)v25)
    *(_BYTE *)(a1 + 104) = 1;
  sub_224544138(a1);
  if (*(unsigned __int16 *)v59 != 1)
  {
    v34 = sub_22416E0BC(*(unsigned __int16 *)v59);
    sub_224026AC8((uint64_t)v65, (uint64_t *)a1);
    sub_2231B3838(v70, v34, (uint64_t)&v71);
    if (v63 != -1)
    {
      if (v63 == 1)
      {
        v35 = v72;
        v72 = 0uLL;
        v36 = *(std::__shared_weak_count **)&v61[8];
        *(_OWORD *)v61 = v35;
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        *(_OWORD *)&v61[16] = v73;
        *(_OWORD *)v62 = *(_OWORD *)v74;
        *(_QWORD *)&v62[14] = *(_QWORD *)&v74[14];
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
        if (*((_QWORD *)&v72 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        goto LABEL_88;
      }
      ((void (*)(char *, char *))off_24EC66CB8[v63])(&v75, (char *)&v60 + 8);
    }
    *((_QWORD *)&v60 + 1) = &off_24EC1F958;
    *(_OWORD *)v61 = v72;
    v72 = 0uLL;
    *(_OWORD *)&v61[16] = v73;
    *(_OWORD *)v62 = *(_OWORD *)v74;
    *(_QWORD *)&v62[14] = *(_QWORD *)&v74[14];
    v63 = 1;
LABEL_88:
    std::istream::~istream();
    *(_QWORD *)v65 = MEMORY[0x24BEDB848] + 16;
    if (v68 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    goto LABEL_91;
  }
  sub_22416B268((uint64_t *)&v59[8], v60);
  if (v63 != -1)
    ((void (*)(unsigned __int16 **, char *))off_24EC6D660[v63])(&v71, (char *)&v60 + 8);
  *((_QWORD *)&v60 + 1) = &off_24EC1F958;
  *(_OWORD *)v61 = *(_OWORD *)&v65[8];
  *(_OWORD *)&v61[16] = *(_OWORD *)&v65[24];
  *(_OWORD *)v62 = *(_OWORD *)v66;
  *(_QWORD *)&v62[14] = *(_QWORD *)&v66[14];
  v63 = 1;
  sub_22416E278((const void *)a1, (uint64_t)&v60 + 8);
LABEL_91:
  *(_WORD *)v65 = *(_WORD *)v59;
  *(_OWORD *)&v65[8] = *(_OWORD *)&v59[8];
  v52 = v63;
  *(_DWORD *)&v65[24] = v60;
  v65[32] = 0;
  v69 = -1;
  if (v63 == -1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v65;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v65[12];
    v53 = *((unsigned int *)a2 + 24);
    if ((_DWORD)v53 != -1)
    {
      ((void (*)(unsigned __int16 **, unsigned __int16 *))off_24EC66CB8[v53])(&v71, a2 + 16);
      *((_DWORD *)a2 + 24) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, char *))off_24EC66D38[v63])(&v64, &v65[32], (char *)&v60 + 8);
    v69 = v52;
    *(_OWORD *)a2 = *(_OWORD *)v65;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v65[12];
    v71 = a2 + 16;
    ((void (*)(unsigned __int16 **))off_24EC66D48[v52])(&v71);
  }
  if (v69 != -1)
    ((void (*)(unsigned __int16 **, _BYTE *))off_24EC66CB8[v69])(&v71, &v65[32]);
  if (v63 != -1)
    ((void (*)(_BYTE *, char *))off_24EC66CB8[v63])(v65, (char *)&v60 + 8);
LABEL_99:
  v54 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v54 - 8);
  v55 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v55 - 8);
  *(_QWORD *)(a1 + 48) = v54 - 8;
  *(_QWORD *)(a1 + 72) = v55 - 8;
  return a1;
}

void sub_224026594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,int a39)
{
  uint64_t v39;

  std::istream::~istream();
  a24 = MEMORY[0x24BEDB848] + 16;
  if (a37 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  if (a21 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24EC66CB8[a21])(v39 - 65, &a13);
  _Unwind_Resume(a1);
}

void sub_2240266EC(uint64_t *a1, _WORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2245443F0(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_22451C83C(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_22456E918(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_22416D4C8((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](v8 + 128);
  MEMORY[0x227684CE8](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_224026850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_22456E764((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2240268DC(uint64_t *a1, _QWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2245443F0(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_22451C83C(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_22456E918(v7, v9);
  v16 = 0;
  *(_QWORD *)&v17 = v8;
  sub_22416DB34((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](v8 + 128);
  MEMORY[0x227684CE8](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_224026A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_22456E764((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_224026AC8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  char *v7;
  std::string::size_type v8;
  std::string *p_n;
  char *v10;
  _QWORD v12[2];
  std::string __n;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  v7 = (char *)sub_2245443F0(a2);
  ++a2[14];
  __n.__r_.__value_.__r.__words[0] = 0;
  sub_22451C444(v7, &__n);
  v8 = __n.__r_.__value_.__r.__words[0];
  memset(&__n, 0, sizeof(__n));
  if (v8 && (std::string::append(&__n, v8, 0), SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0))
  {
    p_n = (std::string *)__n.__r_.__value_.__r.__words[0];
    if (!__n.__r_.__value_.__r.__words[0])
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      p_n = 0;
    }
  }
  else
  {
    p_n = &__n;
  }
  v12[0] = v8;
  v12[1] = p_n;
  v10 = (char *)sub_2245443F0(a2);
  ++a2[14];
  sub_224544508(v10, (uint64_t)v12);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = __n;
  *((_BYTE *)&__n.__r_.__value_.__s + 23) = 0;
  __n.__r_.__value_.__s.__data_[0] = 0;
  sub_2231B5488(a1);
  if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__n.__r_.__value_.__l.__data_);
  return a1;
}

void sub_224026C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_2231A01E4(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_224026CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  _OWORD v12[2];

  sub_2231F9F68(a2, (uint64_t)&v11);
  *(_QWORD *)a1 = &off_24EC21AC8;
  *(_QWORD *)(a1 + 8) = &off_24EC219D8;
  v5 = v11;
  v6 = v12[0];
  v11 = 0uLL;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 46) = *(_OWORD *)((char *)v12 + 14);
  sub_2231AB0FC(a1 + 64, a3);
  *(_QWORD *)a1 = &off_24EC21A48;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_24EC6A528;
  return a1;
}

void sub_224026DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  v5 = *(std::__shared_weak_count **)(v2 + 24);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_2231C37EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_224026DF0(const void *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v13;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC605E8, 0);
  v4 = (uint64_t)v3;
  if (v3)
  {
    if (*(unsigned __int8 *)v3[5] <= 1u)
    {
      v5 = *((unsigned __int8 *)v3 + 88);
      v3[9] = "info";
      v3[10] = 4;
      if (!v5)
        *((_BYTE *)v3 + 88) = 1;
    }
    sub_22454024C((uint64_t)v3);
    v13 = 6;
    if (**(unsigned __int8 **)(v4 + 40) <= 1u)
    {
      v6 = *(unsigned __int8 *)(v4 + 88);
      *(_QWORD *)(v4 + 72) = "version";
      *(_QWORD *)(v4 + 80) = 7;
      if (!v6)
        *(_BYTE *)(v4 + 88) = 1;
    }
    sub_224542048(v4, &v13);
    sub_223B8D388(v4, a2 + 16, v13);
    v7 = *(_QWORD *)(v4 + 56);
    v8 = *(unsigned __int8 **)(v7 - 8);
    *(_QWORD *)(v4 + 40) = v8;
    *(_QWORD *)(v4 + 56) = v7 - 8;
    if (*(_BYTE *)(v4 + 88))
      *(_BYTE *)(v4 + 88) = 0;
    v9 = a2 + 192;
    if (*v8 <= 1u)
    {
      *(_QWORD *)(v4 + 72) = "value";
      *(_QWORD *)(v4 + 80) = 5;
      *(_BYTE *)(v4 + 88) = 1;
    }
    sub_22454024C(v4);
    v13 = 2;
    if (**(unsigned __int8 **)(v4 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(v4 + 88);
      *(_QWORD *)(v4 + 72) = "version";
      *(_QWORD *)(v4 + 80) = 7;
      if (!v10)
        *(_BYTE *)(v4 + 88) = 1;
    }
    sub_224542048(v4, &v13);
    sub_224023240(v4, v9);
    v11 = *(_QWORD *)(v4 + 56);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v11 - 8);
    *(_QWORD *)(v4 + 56) = v11 - 8;
    if (*(_BYTE *)(v4 + 88))
      *(_BYTE *)(v4 + 88) = 0;
  }
  return v4 != 0;
}

BOOL sub_224026F9C(const void *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v19;

  v3 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC1FC00, 0);
  v4 = v3;
  if (v3)
  {
    v5 = v3[3];
    if (*(_BYTE *)(v5 + 40))
    {
      v19 = (uint64_t *)(v5 + 16);
      sub_22455A7EC(&v19, 6u);
    }
    else
    {
      sub_22455AA60((uint64_t)&v19, v5 + 8);
    }
    sub_224555278(v4[3]);
    sub_223B970F8((uint64_t)v4, a2 + 16, 6u);
    v6 = v4[3];
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 88) - 8);
    sub_224554D6C((uint64_t *)(v6 + 48), *(_QWORD *)(v6 + 16) - v7 - 9);
    v8 = *(_QWORD *)(v6 + 48);
    if (v8)
      memmove((void *)(*(_QWORD *)(v6 + 24) + v7), *(const void **)(v6 + 56), v8);
    *(_QWORD *)(v6 + 48) = 0;
    v9 = *(_QWORD *)(v6 + 80);
    v10 = *(_QWORD *)(v6 + 88) - 8;
    *(_QWORD *)(v6 + 88) = v10;
    if (v9 == v10)
    {
      std::ostream::write();
      if (*(_BYTE *)(v6 + 40))
      {
        free(*(void **)(v6 + 24));
        *(_BYTE *)(v6 + 40) = 0;
      }
    }
    v11 = a2 + 192;
    v12 = v4[3];
    if (*(_BYTE *)(v12 + 40))
    {
      v19 = (uint64_t *)(v12 + 16);
      sub_22455A7EC(&v19, 2u);
    }
    else
    {
      sub_22455AA60((uint64_t)&v19, v12 + 8);
    }
    sub_224555278(v4[3]);
    sub_224023C48(v4, v11);
    v13 = v4[3];
    v14 = *(_QWORD *)(*(_QWORD *)(v13 + 88) - 8);
    sub_224554D6C((uint64_t *)(v13 + 48), *(_QWORD *)(v13 + 16) - v14 - 9);
    v15 = *(_QWORD *)(v13 + 48);
    if (v15)
      memmove((void *)(*(_QWORD *)(v13 + 24) + v14), *(const void **)(v13 + 56), v15);
    *(_QWORD *)(v13 + 48) = 0;
    v16 = *(_QWORD *)(v13 + 80);
    v17 = *(_QWORD *)(v13 + 88) - 8;
    *(_QWORD *)(v13 + 88) = v17;
    if (v16 == v17)
    {
      std::ostream::write();
      if (*(_BYTE *)(v13 + 40))
      {
        free(*(void **)(v13 + 24));
        *(_BYTE *)(v13 + 40) = 0;
      }
    }
  }
  return v4 != 0;
}

BOOL sub_224027170(const void *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v13;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC60670, 0);
  v4 = (uint64_t)v3;
  if (v3)
  {
    if (*(unsigned __int8 *)v3[5] <= 1u)
    {
      v5 = *((unsigned __int8 *)v3 + 88);
      v3[9] = "info";
      v3[10] = 4;
      if (!v5)
        *((_BYTE *)v3 + 88) = 1;
    }
    sub_22453FAE0((uint64_t)v3);
    v13 = 6;
    if (**(unsigned __int8 **)(v4 + 40) <= 1u)
    {
      v6 = *(unsigned __int8 *)(v4 + 88);
      *(_QWORD *)(v4 + 72) = "version";
      *(_QWORD *)(v4 + 80) = 7;
      if (!v6)
        *(_BYTE *)(v4 + 88) = 1;
    }
    sub_224540500(v4, &v13);
    sub_223B98294(v4, a2 + 16, v13);
    v7 = *(_QWORD *)(v4 + 56);
    v8 = *(unsigned __int8 **)(v7 - 8);
    *(_QWORD *)(v4 + 40) = v8;
    *(_QWORD *)(v4 + 56) = v7 - 8;
    if (*(_BYTE *)(v4 + 88))
      *(_BYTE *)(v4 + 88) = 0;
    v9 = a2 + 192;
    if (*v8 <= 1u)
    {
      *(_QWORD *)(v4 + 72) = "value";
      *(_QWORD *)(v4 + 80) = 5;
      *(_BYTE *)(v4 + 88) = 1;
    }
    sub_22453FAE0(v4);
    v13 = 2;
    if (**(unsigned __int8 **)(v4 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(v4 + 88);
      *(_QWORD *)(v4 + 72) = "version";
      *(_QWORD *)(v4 + 80) = 7;
      if (!v10)
        *(_BYTE *)(v4 + 88) = 1;
    }
    sub_224540500(v4, &v13);
    sub_224023D48(v4, v9);
    v11 = *(_QWORD *)(v4 + 56);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v11 - 8);
    *(_QWORD *)(v4 + 56) = v11 - 8;
    if (*(_BYTE *)(v4 + 88))
      *(_BYTE *)(v4 + 88) = 0;
  }
  return v4 != 0;
}

BOOL sub_22402731C(const void *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  _QWORD *v13;
  _QWORD *v14;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC606B8, 0);
  v4 = (uint64_t)v3;
  if (v3)
  {
    if (v3[5])
    {
      v5 = (_QWORD *)v3[3];
      v16 = *(_BYTE *)(v4 + 32);
      sub_2231813E8(v5, (uint64_t)&v16, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(v4 + 40);
    sub_223B9FBAC(v4, a2 + 16, 6u);
    v6 = *(_BYTE *)(v4 + 34);
    if (*(_QWORD *)(v4 + 40))
    {
      v7 = *(_QWORD **)(v4 + 24);
      v17 = *(_BYTE *)(v4 + 32);
      sub_2231813E8(v7, (uint64_t)&v17, 1);
    }
    v8 = *(_QWORD **)(v4 + 24);
    v18 = v6;
    sub_2231813E8(v8, (uint64_t)&v18, 1);
    v9 = *(_QWORD *)(v4 + 40);
    v10 = a2 + 192;
    *(_QWORD *)(v4 + 40) = v9 + 1;
    if (v9 != -1)
    {
      v11 = *(_QWORD **)(v4 + 24);
      v19 = *(_BYTE *)(v4 + 32);
      sub_2231813E8(v11, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(v4 + 40);
    sub_224024750(v4, v10);
    v12 = *(_BYTE *)(v4 + 34);
    if (*(_QWORD *)(v4 + 40))
    {
      v13 = *(_QWORD **)(v4 + 24);
      v20 = *(_BYTE *)(v4 + 32);
      sub_2231813E8(v13, (uint64_t)&v20, 1);
    }
    v14 = *(_QWORD **)(v4 + 24);
    v21 = v12;
    sub_2231813E8(v14, (uint64_t)&v21, 1);
    ++*(_QWORD *)(v4 + 40);
  }
  return v4 != 0;
}

BOOL sub_22402748C(uint64_t a1, uint64_t a2)
{
  uint64_t (**v2)();
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int __src;
  int v12;
  uint64_t v13;

  v2 = *(uint64_t (***)())a1;
  if (*(uint64_t (***)())a1 == &off_24EC776C0)
  {
    v5 = a2 + 16;
    __src = 6;
    v6 = a1 + 24;
    sub_224501B60(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_2244FF590((_QWORD *)a1);
    sub_223BA5FAC(a1, v5, v7);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v8 + 10) = *(_QWORD *)(a1 + 32) - v8 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
    v12 = 2;
    sub_224501B60(v6, *(char **)(a1 + 32), (char *)&v12, (char *)&v13, 4);
    sub_2244FF590((_QWORD *)a1);
    sub_224024850(a1, a2 + 192);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v9 + 10) = *(_QWORD *)(a1 + 32) - v9 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
  }
  return v2 == &off_24EC776C0;
}

void sub_2240275C4(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;

  v4 = a1 + 16;
  v5 = a2[2];
  v9 = 6;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
  v6 = v9;
  if (v5 < 1)
  {
    sub_223BABEC8((uint64_t)a2, v4, v9);
  }
  else
  {
    if (v5 == 2)
    {
      v9 = 3;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_223BABEC8((uint64_t)a2, v4, v6);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
  v7 = a1 + 192;
  v8 = a2[2];
  v9 = 2;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
  if (v8 < 1)
  {
    sub_224024950((uint64_t)a2, v7);
  }
  else
  {
    if (v8 == 2)
    {
      v9 = 2;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_224024950((uint64_t)a2, v7);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_224027740(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9[3];
  unsigned int v10;

  v4 = a1 + 16;
  v5 = *(_QWORD *)a2;
  *(_QWORD *)v9 = *(_QWORD *)(a2 + 8);
  v10 = 6;
  (*(void (**)(uint64_t, unsigned int *))(v5 + 104))(a2, &v10);
  if (v9[0] < 1)
  {
    if (v10 < 3)
      sub_223BD7864((uint64_t)&v10, a2, v4, v10);
    else
      sub_223BD7AD8(a2, v4, v10);
  }
  else
  {
    sub_223BD7174(v9, a2, v4, v10);
  }
  v6 = a1 + 192;
  v7 = *(_QWORD *)a2;
  *(_QWORD *)v9 = *(_QWORD *)(a2 + 8);
  v8 = v9[0];
  v10 = 2;
  (*(void (**)(uint64_t, unsigned int *))(v7 + 104))(a2, &v10);
  if (v8 < 1)
  {
    if (v10 < 2)
      sub_223BDB94C((uint64_t)&v10, (_BYTE *)a2, v6);
    else
      sub_223BDBBC4(a2, v6);
  }
  else
  {
    sub_223BDB820(v9, (_BYTE *)a2, v6, v10);
  }
}

uint64_t *sub_224027870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9[2];
  int v10[92];

  sub_22454024C(a2);
  v9[0] = (uint64_t)"version";
  v9[1] = 7;
  v10[0] = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_224542048(a2, v10);
  v6 = v10[0];
  sub_22402821C((uint64_t)v9, a3);
  sub_224027950(a2, v9, v6);
  result = sub_2232E7BD4(v9);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a2 + 56) = v8 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
  return result;
}

void sub_22402793C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2232E7BD4(&a9);
  _Unwind_Resume(a1);
}

void sub_224027950(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t i;
  float *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t j;
  float *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t k;
  float *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  float **v36;
  float **v37;
  float *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  float **v41;
  float **v42;
  float *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t m;
  float *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  __int128 *v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  unsigned __int8 *v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  _QWORD v68[2];
  uint64_t v69;
  __int128 *v70;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "vertices";
    *(_QWORD *)(a1 + 80) = 8;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22454024C(a1);
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      v9 = *(float **)v7;
      LODWORD(v70) = *(_DWORD *)(v7 + 8);
      v69 = (uint64_t)v9;
      *(_QWORD *)&v67 = 3;
      *((_QWORD *)&v67 + 1) = &v69;
      sub_2245436F8(a1, (float **)&v67);
      v7 += 12;
    }
    while (v7 != v8);
  }
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(unsigned __int8 **)(v10 - 8);
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 56) = v10 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v11 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "colors_type";
    *(_QWORD *)(a1 + 80) = 11;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2240283CC(a1, (_DWORD *)a2 + 8);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v12 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "colors";
    *(_QWORD *)(a1 + 80) = 6;
    if (!v12)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22454024C(a1);
  v13 = a2[5];
  for (i = a2[6]; v13 != i; v13 += 12)
  {
    v15 = *(float **)v13;
    LODWORD(v70) = *(_DWORD *)(v13 + 8);
    v69 = (uint64_t)v15;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2245436F8(a1, (float **)&v67);
  }
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(unsigned __int8 **)(v16 - 8);
  *(_QWORD *)(a1 + 40) = v17;
  *(_QWORD *)(a1 + 56) = v16 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v17 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "normals_type";
    *(_QWORD *)(a1 + 80) = 12;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2240283CC(a1, (_DWORD *)a2 + 18);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v18 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "normals";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v18)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22454024C(a1);
  v19 = a2[10];
  for (j = a2[11]; v19 != j; v19 += 12)
  {
    v21 = *(float **)v19;
    LODWORD(v70) = *(_DWORD *)(v19 + 8);
    v69 = (uint64_t)v21;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2245436F8(a1, (float **)&v67);
  }
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(unsigned __int8 **)(v22 - 8);
  *(_QWORD *)(a1 + 40) = v23;
  *(_QWORD *)(a1 + 56) = v22 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v23 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "semantics_type";
    *(_QWORD *)(a1 + 80) = 14;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2240283CC(a1, (_DWORD *)a2 + 28);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v24 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "semantics";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v24)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v25 = a2[15];
  *(_QWORD *)&v67 = a2[16] - v25;
  *((_QWORD *)&v67 + 1) = v25;
  sub_2245403C8(a1, (size_t *)&v67);
  v26 = a2 + 19;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v27 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "materials_type", *(_QWORD *)(a1 + 80) = 14, v27))
  {
    sub_2240283CC(a1, v26);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_37;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_2240283CC(a1, v26);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_37;
  }
  v28 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "materials";
  *(_QWORD *)(a1 + 80) = 9;
  if (!v28)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_37:
  v29 = a2[20];
  *(_QWORD *)&v67 = a2[21] - v29;
  *((_QWORD *)&v67 + 1) = v29;
  sub_2245403C8(a1, (size_t *)&v67);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v30 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "faces";
    *(_QWORD *)(a1 + 80) = 5;
    if (!v30)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22454024C(a1);
  v31 = a2[24];
  for (k = a2[25]; v31 != k; v31 += 12)
  {
    v33 = *(float **)v31;
    LODWORD(v70) = *(_DWORD *)(v31 + 8);
    v69 = (uint64_t)v33;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_224542C38(a1, (uint64_t)&v67);
  }
  v34 = *(_QWORD *)(a1 + 56);
  v35 = *(unsigned __int8 **)(v34 - 8);
  *(_QWORD *)(a1 + 40) = v35;
  *(_QWORD *)(a1 + 56) = v34 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v35 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "edges";
    *(_QWORD *)(a1 + 80) = 5;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22454024C(a1);
  v36 = (float **)a2[28];
  v37 = (float **)a2[29];
  while (v36 != v37)
  {
    v38 = *v36++;
    v69 = (uint64_t)v38;
    *(_QWORD *)&v67 = 2;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_224542C38(a1, (uint64_t)&v67);
  }
  v39 = *(_QWORD *)(a1 + 56);
  v40 = *(unsigned __int8 **)(v39 - 8);
  *(_QWORD *)(a1 + 40) = v40;
  *(_QWORD *)(a1 + 56) = v39 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v40 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "tex_coords";
    *(_QWORD *)(a1 + 80) = 10;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22454024C(a1);
  v41 = (float **)a2[32];
  v42 = (float **)a2[33];
  while (v41 != v42)
  {
    v43 = *v41++;
    v69 = (uint64_t)v43;
    *(_QWORD *)&v67 = 2;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2245436F8(a1, (float **)&v67);
  }
  v44 = *(_QWORD *)(a1 + 56);
  v45 = *(unsigned __int8 **)(v44 - 8);
  *(_QWORD *)(a1 + 40) = v45;
  *(_QWORD *)(a1 + 56) = v44 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v45 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "tex_faces";
    *(_QWORD *)(a1 + 80) = 9;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22454024C(a1);
  v46 = a2[36];
  for (m = a2[37]; v46 != m; v46 += 12)
  {
    v48 = *(float **)v46;
    LODWORD(v70) = *(_DWORD *)(v46 + 8);
    v69 = (uint64_t)v48;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_224542C38(a1, (uint64_t)&v67);
  }
  v49 = *(_QWORD *)(a1 + 56);
  v50 = *(unsigned __int8 **)(v49 - 8);
  *(_QWORD *)(a1 + 40) = v50;
  *(_QWORD *)(a1 + 56) = v49 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (a3 >= 2)
  {
    if (*v50 <= 1u)
    {
      *(_QWORD *)(a1 + 72) = "box";
      *(_QWORD *)(a1 + 80) = 3;
      *(_BYTE *)(a1 + 88) = 1;
    }
    if (!*((_BYTE *)a2 + 344))
    {
      LOBYTE(v67) = 0;
      *((_QWORD *)&v67 + 1) = 0;
      v58 = (unsigned __int8 *)sub_22453FEA0(a1);
      v59 = *v58;
      *v58 = v67;
      LOBYTE(v67) = v59;
      v60 = *((_QWORD *)v58 + 1);
      *((_QWORD *)v58 + 1) = *((_QWORD *)&v67 + 1);
      *((_QWORD *)&v67 + 1) = v60;
      sub_22345337C((void ***)&v67 + 1, v59);
LABEL_91:
      if (a3 >= 4)
      {
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v64 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "confidences_type";
          *(_QWORD *)(a1 + 80) = 16;
          if (!v64)
            *(_BYTE *)(a1 + 88) = 1;
        }
        sub_2240283CC(a1, (_DWORD *)a2 + 87);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v65 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "confidences";
          *(_QWORD *)(a1 + 80) = 11;
          if (!v65)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v66 = a2[44];
        *(_QWORD *)&v67 = (a2[45] - v66) >> 2;
        *((_QWORD *)&v67 + 1) = v66;
        sub_2245436F8(a1, (float **)&v67);
      }
      return;
    }
    v51 = *(_DWORD *)(a1 + 8);
    sub_22454024C(a1);
    *(_QWORD *)&v67 = "version";
    *((_QWORD *)&v67 + 1) = 7;
    LODWORD(v68[0]) = 2;
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v52 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v52))
    {
      v53 = (__int128 *)(a2 + 40);
      sub_224542048(a1, v68);
      if (v51 >= 1)
      {
LABEL_69:
        if (v51 == 2)
        {
          *(_QWORD *)&v67 = "min_version";
          *((_QWORD *)&v67 + 1) = 11;
          LODWORD(v68[0]) = 2;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v54 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "min_version";
            *(_QWORD *)(a1 + 80) = 11;
            if (!v54)
              *(_BYTE *)(a1 + 88) = 1;
          }
          sub_224542048(a1, v68);
        }
        v67 = *v53;
        v68[0] = *((_QWORD *)v53 + 2);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v55 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "min";
          *(_QWORD *)(a1 + 80) = 3;
          if (!v55)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v69 = 3;
        v70 = &v67;
        sub_2245436F8(a1, (float **)&v69);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v56 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "max";
          *(_QWORD *)(a1 + 80) = 3;
          if (!v56)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v57 = (unint64_t)&v67 | 0xC;
LABEL_89:
        v69 = 3;
        v70 = (__int128 *)v57;
        sub_2245436F8(a1, (float **)&v69);
        v63 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v63 - 8);
        *(_QWORD *)(a1 + 56) = v63 - 8;
        if (*(_BYTE *)(a1 + 88))
          *(_BYTE *)(a1 + 88) = 0;
        goto LABEL_91;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 88) = 1;
      v53 = (__int128 *)(a2 + 40);
      sub_224542048(a1, v68);
      if (v51 >= 1)
        goto LABEL_69;
    }
    v67 = *v53;
    v68[0] = *((_QWORD *)v53 + 2);
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v61 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "min";
      *(_QWORD *)(a1 + 80) = 3;
      if (!v61)
        *(_BYTE *)(a1 + 88) = 1;
    }
    v69 = 3;
    v70 = &v67;
    sub_2245436F8(a1, (float **)&v69);
    v57 = (unint64_t)&v67 | 0xC;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v62 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "max";
      *(_QWORD *)(a1 + 80) = 3;
      if (!v62)
        *(_BYTE *)(a1 + 88) = 1;
    }
    goto LABEL_89;
  }
}

void sub_224028204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_22345337C(v9, a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22402821C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;

  v4 = sub_2232F7C70((_QWORD *)a1, a2);
  *((_DWORD *)v4 + 8) = *(_DWORD *)(a2 + 32);
  sub_2232F7C70(v4 + 5, a2 + 40);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  sub_2232F7C70((_QWORD *)(a1 + 80), a2 + 80);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  sub_223180F98((_QWORD *)(a1 + 120), a2 + 120);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  sub_223180F98((_QWORD *)(a1 + 160), a2 + 160);
  sub_2232F7E10((_QWORD *)(a1 + 192), a2 + 192);
  sub_2232F7FB0((_QWORD *)(a1 + 224), a2 + 224);
  sub_2232F8128((_QWORD *)(a1 + 256), a2 + 256);
  sub_2232F7E10((_QWORD *)(a1 + 288), a2 + 288);
  v5 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v5;
  sub_223181104((_QWORD *)(a1 + 352), a2 + 352);
  return a1;
}

void sub_224028318(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  sub_2232E7F80(v9);
  sub_2232E800C(v8);
  sub_2232E808C(v7);
  sub_2232E7F80(v6);
  sub_22317EC9C(v5);
  sub_22317EC9C(v4);
  sub_2232E810C(v3);
  sub_2232E810C(v2);
  sub_2232E810C(v1);
  _Unwind_Resume(a1);
}

void sub_22402838C()
{
  JUMPOUT(0x224028364);
}

void sub_224028394()
{
  JUMPOUT(0x22402836CLL);
}

void sub_22402839C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;

  sub_2232E810C(v2);
  sub_2232E810C(v1);
  _Unwind_Resume(a1);
}

void sub_2240283B8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_2232E810C(v1);
  _Unwind_Resume(a1);
}

void sub_2240283CC(uint64_t a1, _DWORD *a2)
{
  void *__p[2];
  char v4;
  _BYTE v5[24];
  int v6;
  char v7;
  char *v8;

  v6 = 0;
  sub_2240284CC((uint64_t)v5, a2);
  if (v6 == -1)
    sub_22316DD70();
  v8 = &v7;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC66D10[v6])(__p, &v8, v5);
  if (v6 != -1)
    ((void (*)(char **, _BYTE *))off_24EC66CF8[v6])(&v8, v5);
  sub_224542510(a1, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_224028488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2240284A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2240284B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2240284CC(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  int v7;
  size_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__dst[2];
  unint64_t v21;
  _QWORD v22[5];
  _QWORD *v23;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_223195210(v4);
  v22[0] = v4;
  v5 = "unknown";
  v6 = 7;
  switch(*a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      v5 = "per-vertex";
      v6 = 10;
      goto LABEL_4;
    case 2:
      v5 = "per-face";
      v6 = 8;
LABEL_4:
      sub_2231813E8((_QWORD *)(v4 + 16), (uint64_t)v5, v6);
      break;
    case 3:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Mesh/src/TriMesh.cpp", 46, (uint64_t)&unk_2245B123B, 0, (uint64_t)"Unsupported type", 16, (void (*)(void **))sub_22457406C);
      abort();
    default:
      break;
  }
  v7 = *(_DWORD *)(v4 + 120);
  if ((v7 & 0x10) != 0)
  {
    v10 = *(_QWORD *)(v4 + 112);
    v11 = *(_QWORD *)(v4 + 72);
    if (v10 < v11)
    {
      *(_QWORD *)(v4 + 112) = v11;
      v10 = v11;
    }
    v12 = *(const void **)(v4 + 64);
    v8 = v10 - (_QWORD)v12;
    if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_26;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v21) = 0;
      v9 = __dst;
      goto LABEL_18;
    }
    v12 = *(const void **)(v4 + 40);
    v8 = *(_QWORD *)(v4 + 56) - (_QWORD)v12;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_26:
      sub_22316DBC0();
  }
  if (v8 >= 0x17)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    v9 = (void **)operator new(v13 + 1);
    __dst[1] = (void *)v8;
    v21 = v14 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_17;
  }
  HIBYTE(v21) = v8;
  v9 = __dst;
  if (v8)
LABEL_17:
    memmove(v9, v12, v8);
LABEL_18:
  *((_BYTE *)v9 + v8) = 0;
  v15 = v22[0];
  if (v22[0])
  {
    v16 = MEMORY[0x24BEDB7F0];
    v17 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v22[0] = *MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(v16 + 72);
    *(_QWORD *)(v15 + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(v16 + 64);
    *(_QWORD *)(v15 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v15 + 16) = v18;
    if (*(char *)(v15 + 111) < 0)
      operator delete(*(void **)(v15 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v15 + 128);
    MEMORY[0x227684CE8](v15, 0x10B2C40EED050F3);
  }
  v22[0] = a1;
  v22[1] = __dst;
  v22[2] = a1;
  v22[3] = __dst;
  v22[4] = __dst;
  v19 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v19 == -1)
    sub_22316DD70();
  v23 = v22;
  ((void (*)(_QWORD **, uint64_t, uint64_t))off_24EC66CE0[v19])(&v23, a1, v6);
  if (SHIBYTE(v21) < 0)
    operator delete(__dst[0]);
}

void sub_22402879C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_2240287C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2240287DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2240287F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11[48];

  v5 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v11[0] = (uint64_t *)(v5 + 16);
    sub_22455A7EC(v11, 4u);
  }
  else
  {
    sub_22455AA60((uint64_t)v11, v5 + 8);
  }
  sub_224555278(*(_QWORD *)(a2 + 24));
  sub_22402821C((uint64_t)v11, a3);
  sub_2232FC4DC(a2, (uint64_t)v11, 4u);
  sub_2232E7BD4((uint64_t *)v11);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 88) - 8);
  sub_224554D6C((uint64_t *)(v6 + 48), *(_QWORD *)(v6 + 16) - v7 - 9);
  v8 = *(_QWORD *)(v6 + 48);
  if (v8)
    memmove((void *)(*(_QWORD *)(v6 + 24) + v7), *(const void **)(v6 + 56), v8);
  *(_QWORD *)(v6 + 48) = 0;
  v9 = *(_QWORD *)(v6 + 80);
  v10 = *(_QWORD *)(v6 + 88) - 8;
  *(_QWORD *)(v6 + 88) = v10;
  if (v9 == v10)
  {
    std::ostream::write();
    if (*(_BYTE *)(v6 + 40))
    {
      free(*(void **)(v6 + 24));
      *(_BYTE *)(v6 + 40) = 0;
    }
  }
}

void sub_224028904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2232E7BD4(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_224028918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9[2];
  int v10[92];

  sub_22453FAE0(a2);
  v9[0] = (uint64_t)"version";
  v9[1] = 7;
  v10[0] = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_224540500(a2, v10);
  v6 = v10[0];
  sub_22402821C((uint64_t)v9, a3);
  sub_2240289F8(a2, v9, v6);
  result = sub_2232E7BD4(v9);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a2 + 56) = v8 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
  return result;
}

void sub_2240289E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2232E7BD4(&a9);
  _Unwind_Resume(a1);
}

void sub_2240289F8(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t j;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t k;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t m;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  __int128 *v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  unsigned __int8 *v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  _QWORD v68[2];
  uint64_t v69;
  __int128 *v70;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "vertices";
    *(_QWORD *)(a1 + 80) = 8;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22453FAE0(a1);
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      v9 = *(_QWORD *)v7;
      LODWORD(v70) = *(_DWORD *)(v7 + 8);
      v69 = v9;
      *(_QWORD *)&v67 = 3;
      *((_QWORD *)&v67 + 1) = &v69;
      sub_224541808(a1, &v67);
      v7 += 12;
    }
    while (v7 != v8);
  }
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(unsigned __int8 **)(v10 - 8);
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 56) = v10 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v11 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "colors_type";
    *(_QWORD *)(a1 + 80) = 11;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2240292C4(a1, (_DWORD *)a2 + 8);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v12 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "colors";
    *(_QWORD *)(a1 + 80) = 6;
    if (!v12)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22453FAE0(a1);
  v13 = a2[5];
  for (i = a2[6]; v13 != i; v13 += 12)
  {
    v15 = *(_QWORD *)v13;
    LODWORD(v70) = *(_DWORD *)(v13 + 8);
    v69 = v15;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_224541808(a1, &v67);
  }
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(unsigned __int8 **)(v16 - 8);
  *(_QWORD *)(a1 + 40) = v17;
  *(_QWORD *)(a1 + 56) = v16 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v17 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "normals_type";
    *(_QWORD *)(a1 + 80) = 12;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2240292C4(a1, (_DWORD *)a2 + 18);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v18 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "normals";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v18)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22453FAE0(a1);
  v19 = a2[10];
  for (j = a2[11]; v19 != j; v19 += 12)
  {
    v21 = *(_QWORD *)v19;
    LODWORD(v70) = *(_DWORD *)(v19 + 8);
    v69 = v21;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_224541808(a1, &v67);
  }
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(unsigned __int8 **)(v22 - 8);
  *(_QWORD *)(a1 + 40) = v23;
  *(_QWORD *)(a1 + 56) = v22 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v23 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "semantics_type";
    *(_QWORD *)(a1 + 80) = 14;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2240292C4(a1, (_DWORD *)a2 + 28);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v24 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "semantics";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v24)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v25 = a2[15];
  *(_QWORD *)&v67 = a2[16] - v25;
  *((_QWORD *)&v67 + 1) = v25;
  sub_22453FC5C(a1, (size_t *)&v67);
  v26 = a2 + 19;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v27 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "materials_type", *(_QWORD *)(a1 + 80) = 14, v27))
  {
    sub_2240292C4(a1, v26);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_37;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_2240292C4(a1, v26);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_37;
  }
  v28 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "materials";
  *(_QWORD *)(a1 + 80) = 9;
  if (!v28)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_37:
  v29 = a2[20];
  *(_QWORD *)&v67 = a2[21] - v29;
  *((_QWORD *)&v67 + 1) = v29;
  sub_22453FC5C(a1, (size_t *)&v67);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v30 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "faces";
    *(_QWORD *)(a1 + 80) = 5;
    if (!v30)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22453FAE0(a1);
  v31 = a2[24];
  for (k = a2[25]; v31 != k; v31 += 12)
  {
    v33 = *(_QWORD *)v31;
    LODWORD(v70) = *(_DWORD *)(v31 + 8);
    v69 = v33;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_224540FB8(a1, (uint64_t)&v67);
  }
  v34 = *(_QWORD *)(a1 + 56);
  v35 = *(unsigned __int8 **)(v34 - 8);
  *(_QWORD *)(a1 + 40) = v35;
  *(_QWORD *)(a1 + 56) = v34 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v35 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "edges";
    *(_QWORD *)(a1 + 80) = 5;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22453FAE0(a1);
  v36 = (uint64_t *)a2[28];
  v37 = (uint64_t *)a2[29];
  while (v36 != v37)
  {
    v38 = *v36++;
    v69 = v38;
    *(_QWORD *)&v67 = 2;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_224540FB8(a1, (uint64_t)&v67);
  }
  v39 = *(_QWORD *)(a1 + 56);
  v40 = *(unsigned __int8 **)(v39 - 8);
  *(_QWORD *)(a1 + 40) = v40;
  *(_QWORD *)(a1 + 56) = v39 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v40 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "tex_coords";
    *(_QWORD *)(a1 + 80) = 10;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22453FAE0(a1);
  v41 = (uint64_t *)a2[32];
  v42 = (uint64_t *)a2[33];
  while (v41 != v42)
  {
    v43 = *v41++;
    v69 = v43;
    *(_QWORD *)&v67 = 2;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_224541808(a1, &v67);
  }
  v44 = *(_QWORD *)(a1 + 56);
  v45 = *(unsigned __int8 **)(v44 - 8);
  *(_QWORD *)(a1 + 40) = v45;
  *(_QWORD *)(a1 + 56) = v44 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v45 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "tex_faces";
    *(_QWORD *)(a1 + 80) = 9;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22453FAE0(a1);
  v46 = a2[36];
  for (m = a2[37]; v46 != m; v46 += 12)
  {
    v48 = *(_QWORD *)v46;
    LODWORD(v70) = *(_DWORD *)(v46 + 8);
    v69 = v48;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_224540FB8(a1, (uint64_t)&v67);
  }
  v49 = *(_QWORD *)(a1 + 56);
  v50 = *(unsigned __int8 **)(v49 - 8);
  *(_QWORD *)(a1 + 40) = v50;
  *(_QWORD *)(a1 + 56) = v49 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (a3 >= 2)
  {
    if (*v50 <= 1u)
    {
      *(_QWORD *)(a1 + 72) = "box";
      *(_QWORD *)(a1 + 80) = 3;
      *(_BYTE *)(a1 + 88) = 1;
    }
    if (!*((_BYTE *)a2 + 344))
    {
      LOBYTE(v67) = 0;
      *((_QWORD *)&v67 + 1) = 0;
      v58 = (unsigned __int8 *)sub_22453F8B8(a1);
      v59 = *v58;
      *v58 = v67;
      LOBYTE(v67) = v59;
      v60 = *((_QWORD *)v58 + 1);
      *((_QWORD *)v58 + 1) = *((_QWORD *)&v67 + 1);
      *((_QWORD *)&v67 + 1) = v60;
      sub_223454278((uint64_t *)&v67 + 1, v59);
LABEL_91:
      if (a3 >= 4)
      {
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v64 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "confidences_type";
          *(_QWORD *)(a1 + 80) = 16;
          if (!v64)
            *(_BYTE *)(a1 + 88) = 1;
        }
        sub_2240292C4(a1, (_DWORD *)a2 + 87);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v65 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "confidences";
          *(_QWORD *)(a1 + 80) = 11;
          if (!v65)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v66 = a2[44];
        *(_QWORD *)&v67 = (a2[45] - v66) >> 2;
        *((_QWORD *)&v67 + 1) = v66;
        sub_224541808(a1, &v67);
      }
      return;
    }
    v51 = *(_DWORD *)(a1 + 8);
    sub_22453FAE0(a1);
    *(_QWORD *)&v67 = "version";
    *((_QWORD *)&v67 + 1) = 7;
    LODWORD(v68[0]) = 2;
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v52 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v52))
    {
      v53 = (__int128 *)(a2 + 40);
      sub_224540500(a1, v68);
      if (v51 >= 1)
      {
LABEL_69:
        if (v51 == 2)
        {
          *(_QWORD *)&v67 = "min_version";
          *((_QWORD *)&v67 + 1) = 11;
          LODWORD(v68[0]) = 2;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v54 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "min_version";
            *(_QWORD *)(a1 + 80) = 11;
            if (!v54)
              *(_BYTE *)(a1 + 88) = 1;
          }
          sub_224540500(a1, v68);
        }
        v67 = *v53;
        v68[0] = *((_QWORD *)v53 + 2);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v55 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "min";
          *(_QWORD *)(a1 + 80) = 3;
          if (!v55)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v69 = 3;
        v70 = &v67;
        sub_224541808(a1, &v69);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v56 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "max";
          *(_QWORD *)(a1 + 80) = 3;
          if (!v56)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v57 = (unint64_t)&v67 | 0xC;
LABEL_89:
        v69 = 3;
        v70 = (__int128 *)v57;
        sub_224541808(a1, &v69);
        v63 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v63 - 8);
        *(_QWORD *)(a1 + 56) = v63 - 8;
        if (*(_BYTE *)(a1 + 88))
          *(_BYTE *)(a1 + 88) = 0;
        goto LABEL_91;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 88) = 1;
      v53 = (__int128 *)(a2 + 40);
      sub_224540500(a1, v68);
      if (v51 >= 1)
        goto LABEL_69;
    }
    v67 = *v53;
    v68[0] = *((_QWORD *)v53 + 2);
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v61 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "min";
      *(_QWORD *)(a1 + 80) = 3;
      if (!v61)
        *(_BYTE *)(a1 + 88) = 1;
    }
    v69 = 3;
    v70 = &v67;
    sub_224541808(a1, &v69);
    v57 = (unint64_t)&v67 | 0xC;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v62 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "max";
      *(_QWORD *)(a1 + 80) = 3;
      if (!v62)
        *(_BYTE *)(a1 + 88) = 1;
    }
    goto LABEL_89;
  }
}

void sub_2240292AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_223454278(v9, a9);
  _Unwind_Resume(a1);
}

void sub_2240292C4(uint64_t a1, _DWORD *a2)
{
  void *__p[2];
  char v4;
  _BYTE v5[24];
  int v6;
  char v7;
  char *v8;

  v6 = 0;
  sub_2240284CC((uint64_t)v5, a2);
  if (v6 == -1)
    sub_22316DD70();
  v8 = &v7;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC66D10[v6])(__p, &v8, v5);
  if (v6 != -1)
    ((void (*)(char **, _BYTE *))off_24EC66CF8[v6])(&v8, v5);
  sub_2245409C8(a1, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_224029380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22402939C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2240293B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2240293C4(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t k;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t m;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t n;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t ii;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unsigned __int8 v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unsigned __int8 v108;

  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v6, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v7 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *a2;
  v9 = a2[1];
  if (v9 != *a2)
  {
    do
    {
      if (v7)
      {
        v10 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v10, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v11 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v11 + 1;
      if (v11 != -1)
      {
        v12 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v12, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v13 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v13 + 1;
      if (v13 != -1)
      {
        v14 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v14, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v7 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v7;
      v8 += 12;
    }
    while (v8 != v9);
  }
  if (v7)
  {
    v15 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v15, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v16 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v16 + 1;
  if (v16 != -1)
  {
    v17 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v17, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v18 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v18;
  v19 = a2[5];
  for (i = a2[6]; v19 != i; v19 += 12)
  {
    if (v18)
    {
      v21 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v21, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v22 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v22 + 1;
    if (v22 != -1)
    {
      v23 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v23, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v24 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v24 + 1;
    if (v24 != -1)
    {
      v25 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v25, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v18 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v18;
  }
  if (v18)
  {
    v26 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v26, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v27 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v27 + 1;
  if (v27 != -1)
  {
    v28 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v28, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v29 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v29;
  v30 = a2[10];
  for (j = a2[11]; v30 != j; v30 += 12)
  {
    if (v29)
    {
      v32 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v32, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v33 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v33 + 1;
    if (v33 != -1)
    {
      v34 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v34, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v35 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v35 + 1;
    if (v35 != -1)
    {
      v36 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v36, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v29 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v29;
  }
  if (v29)
  {
    v37 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v37, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v38 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v38 + 1;
  if (v38 != -1)
  {
    v39 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v39, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v40 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v40;
  v42 = (unsigned __int8 *)a2[15];
  v41 = (unsigned __int8 *)a2[16];
  v43 = v41 - v42;
  if (v41 != v42)
  {
    do
    {
      sub_22454F564(a1, v42++);
      --v43;
    }
    while (v43);
    v40 = *(_QWORD *)(a1 + 40);
  }
  if (v40)
  {
    v44 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v44, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v45 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v45 + 1;
  if (v45 != -1)
  {
    v46 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v46, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v47 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v47;
  v49 = (unsigned __int8 *)a2[20];
  v48 = (unsigned __int8 *)a2[21];
  v50 = v48 - v49;
  if (v48 != v49)
  {
    do
    {
      sub_22454F564(a1, v49++);
      --v50;
    }
    while (v50);
    v47 = *(_QWORD *)(a1 + 40);
  }
  if (v47)
  {
    v51 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v51, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v52 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v52;
  v53 = a2[24];
  for (k = a2[25]; v53 != k; v53 += 12)
  {
    if (v52)
    {
      v63 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v63, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v64 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v64 + 1;
    if (v64 != -1)
    {
      v65 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v65, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v66 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v66 + 1;
    if (v66 != -1)
    {
      v67 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v67, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v52 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v52;
  }
  if (v52)
  {
    v55 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v55, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v56 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v56;
  v57 = a2[28];
  for (m = a2[29]; v57 != m; v57 += 8)
  {
    if (v56)
    {
      v68 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v68, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v69 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v69 + 1;
    if (v69 != -1)
    {
      v70 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v70, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v56 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v56;
  }
  if (v56)
  {
    v59 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v59, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v60 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v60;
  v61 = a2[32];
  for (n = a2[33]; v61 != n; v61 += 8)
  {
    if (v60)
    {
      v71 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v71, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v72 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v72 + 1;
    if (v72 != -1)
    {
      v73 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v73, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v60 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v60;
  }
  if (v60)
  {
    v74 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v74, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v75 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v75;
  v76 = a2[36];
  for (ii = a2[37]; v76 != ii; v76 += 12)
  {
    if (v75)
    {
      v95 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v95, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v96 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v96 + 1;
    if (v96 != -1)
    {
      v97 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v97, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v98 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v98 + 1;
    if (v98 != -1)
    {
      v99 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v99, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v75 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v75;
  }
  if (a3 >= 2)
  {
    if (*((_BYTE *)a2 + 344))
    {
      v108 = 1;
      sub_22454F564(a1, &v108);
      if (*(_QWORD *)(a1 + 40))
      {
        v78 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v78, (uint64_t)&v108, 1);
      }
      std::ostream::operator<<();
      v79 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v79 + 1;
      if (v79 != -1)
      {
        v80 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v80, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v81 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v81 + 1;
      if (v81 != -1)
      {
        v82 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v82, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v83 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v83 + 1;
      if (v83 != -1)
      {
        v84 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v84, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v85 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v85 + 1;
      if (v85 != -1)
      {
        v86 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v86, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v87 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v87 + 1;
      if (v87 != -1)
      {
        v88 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v88, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v89 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v89 + 1;
      if (v89 != -1)
      {
        v90 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v90, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v91 = *(_QWORD *)(a1 + 40);
      v92 = *(_BYTE *)(a1 + 34);
      *(_QWORD *)(a1 + 40) = v91 + 1;
      if (v91 != -1)
      {
        v93 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v93, (uint64_t)&v108, 1);
      }
      v94 = *(_QWORD **)(a1 + 24);
      v108 = v92;
      sub_2231813E8(v94, (uint64_t)&v108, 1);
      ++*(_QWORD *)(a1 + 40);
      if (a3 < 4)
        return;
    }
    else
    {
      v108 = 0;
      sub_22454F564(a1, &v108);
      if (a3 < 4)
        return;
    }
    if (*(_QWORD *)(a1 + 40))
    {
      v100 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v100, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v101 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v101 + 1;
    if (v101 != -1)
    {
      v102 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v102, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v103 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v103;
    v104 = a2[44];
    v105 = a2[45] - v104;
    if (v105)
    {
      v106 = 4 * (v105 >> 2);
      do
      {
        if (v103)
        {
          v107 = *(_QWORD **)(a1 + 24);
          v108 = *(_BYTE *)(a1 + 32);
          sub_2231813E8(v107, (uint64_t)&v108, 1);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
        v104 += 4;
        std::ostream::operator<<();
        v103 = *(_QWORD *)(a1 + 40) + 1;
        *(_QWORD *)(a1 + 40) = v103;
        v106 -= 4;
      }
      while (v106);
    }
  }
}

uint64_t *sub_22402A070(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t *result;
  uint64_t v35;
  char *__src;
  char *v37;
  int v38;
  char *v39;
  char *v40;
  int v41;
  char *v42;
  char *v43;
  int v44;
  char *v45;
  char *v46;
  int v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char v58[12];
  char v59[12];
  char v60[4];
  int v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;

  LODWORD(__src) = 4;
  v4 = a1 + 24;
  sub_224501B60(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  v5 = __src;
  sub_2244FF590((_QWORD *)a1);
  sub_22402821C((uint64_t)&__src, a2);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v37 - __src) >> 2);
  sub_224501B60(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v6 = __src;
  if (v37 != __src)
  {
    v7 = 12 * ((v37 - __src) / 12);
    do
    {
      v8 = v6 + 12;
      sub_224501B60(v4, *(char **)(a1 + 32), v6, v6 + 12, 12);
      v6 = v8;
      v7 -= 12;
    }
    while (v7);
  }
  LODWORD(v64) = v38;
  sub_224501B60(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v40 - v39) >> 2);
  sub_224501B60(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v9 = v39;
  if (v40 != v39)
  {
    v10 = 12 * ((v40 - v39) / 12);
    do
    {
      v11 = v9 + 12;
      sub_224501B60(v4, *(char **)(a1 + 32), v9, v9 + 12, 12);
      v9 = v11;
      v10 -= 12;
    }
    while (v10);
  }
  LODWORD(v64) = v41;
  sub_224501B60(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 2);
  sub_224501B60(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v12 = v42;
  if (v43 != v42)
  {
    v13 = 12 * ((v43 - v42) / 12);
    do
    {
      v14 = v12 + 12;
      sub_224501B60(v4, *(char **)(a1 + 32), v12, v12 + 12, 12);
      v12 = v14;
      v13 -= 12;
    }
    while (v13);
  }
  LODWORD(v64) = v44;
  sub_224501B60(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  v64 = v46 - v45;
  sub_224501B60(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v16 = v45;
  v15 = v46;
  if (!v45
    && v46
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_38;
  }
  sub_224501B60(v4, *(char **)(a1 + 32), v16, v15, v15 - v16);
  LODWORD(v64) = v47;
  sub_224501B60(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  v64 = v49 - v48;
  sub_224501B60(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v17 = v48;
  v18 = v49;
  if (!v48
    && v49
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_38;
  }
  sub_224501B60(v4, *(char **)(a1 + 32), v17, v18, v18 - v17);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 2);
  sub_224501B60(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v19 = v50;
  if (v51 != v50)
  {
    v20 = 12 * ((v51 - v50) / 12);
    do
    {
      v21 = v19 + 12;
      sub_224501B60(v4, *(char **)(a1 + 32), v19, v19 + 12, 12);
      v19 = v21;
      v20 -= 12;
    }
    while (v20);
  }
  v64 = (v53 - v52) >> 3;
  sub_224501B60(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v22 = v52;
  if (v53 != v52)
  {
    v23 = 8 * ((v53 - v52) >> 3);
    do
    {
      v24 = v22 + 8;
      sub_224501B60(v4, *(char **)(a1 + 32), v22, v22 + 8, 8);
      v22 = v24;
      v23 -= 8;
    }
    while (v23);
  }
  v64 = (v55 - v54) >> 3;
  sub_224501B60(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v25 = v54;
  if (v55 != v54)
  {
    v26 = 8 * ((v55 - v54) >> 3);
    do
    {
      v27 = v25 + 8;
      sub_224501B60(v4, *(char **)(a1 + 32), v25, v25 + 8, 8);
      v25 = v27;
      v26 -= 8;
    }
    while (v26);
  }
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v57 - v56) >> 2);
  sub_224501B60(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v28 = v56;
  if (v57 != v56)
  {
    v29 = 12 * ((v57 - v56) / 12);
    do
    {
      v30 = v28 + 12;
      sub_224501B60(v4, *(char **)(a1 + 32), v28, v28 + 12, 12);
      v28 = v30;
      v29 -= 12;
    }
    while (v29);
  }
  if (v5 >= 2)
  {
    if (v60[0])
    {
      LOBYTE(v64) = 1;
      sub_224501B60(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 1, 1);
      LODWORD(v64) = 2;
      sub_224501B60(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
      sub_2244FF590((_QWORD *)a1);
      sub_224501B60(v4, *(char **)(a1 + 32), v58, v59, 12);
      sub_224501B60(v4, *(char **)(a1 + 32), v59, v60, 12);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
      *(_QWORD *)(v31 + 10) = *(_QWORD *)(a1 + 32) - v31 - 18;
      *(_QWORD *)(a1 + 56) -= 8;
    }
    else
    {
      LOBYTE(v64) = 0;
      sub_224501B60(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 1, 1);
    }
    if (v5 >= 4)
    {
      LODWORD(v64) = v61;
      sub_224501B60(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
      v64 = (v63 - v62) >> 2;
      sub_224501B60(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
      v32 = v62;
      v33 = v63;
      if (v62
        || !v63
        || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        sub_224501B60(v4, *(char **)(a1 + 32), v32, v33, v33 - v32);
        goto LABEL_37;
      }
LABEL_38:
      abort();
    }
  }
LABEL_37:
  result = sub_2232E7BD4((uint64_t *)&__src);
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v35 + 10) = *(_QWORD *)(a1 + 32) - v35 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  return result;
}

void sub_22402A7A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2232E7BD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22402A7B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2232E7BD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22402A7C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2232E7BD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22402A7DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2232E7BD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22402A7F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2232E7BD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22402A804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2232E7BD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22402A818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2232E7BD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22402A82C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2232E7BD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_22402A840(int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  int v7;
  uint64_t *result;
  uint64_t v9[48];

  LODWORD(v9[0]) = 4;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, v9);
  v6 = v9[0];
  if (*a1 < 1)
  {
    sub_22402821C((uint64_t)v9, a3);
    sub_22402A990(a2, v9, v6);
    return sub_2232E7BD4(v9);
  }
  else
  {
    if (*a1 == 2
      && (LODWORD(v9[0]) = 3, (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, v9), *a1 < 1))
    {
      v7 = 0;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v7 = 1;
    }
    sub_22402821C((uint64_t)v9, a3);
    sub_22402A990(a2, v9, v6);
    result = sub_2232E7BD4(v9);
    if (v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  }
  return result;
}

void sub_22402A968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2232E7BD4(&a9);
  _Unwind_Resume(a1);
}

void sub_22402A97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2232E7BD4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22402A990(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t j;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t k;
  uint64_t v20;
  uint64_t m;
  uint64_t v22;
  uint64_t n;
  uint64_t result;
  uint64_t v25;
  uint64_t ii;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v6 = *a2;
  v7 = a2[1];
  if (v7 != *a2)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v6);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v6 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v6 + 8);
      v6 += 12;
    }
    while (v6 != v7);
  }
  sub_22402B00C((_BYTE *)a1, (_DWORD *)a2 + 8);
  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[6] - a2[5]) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v8 = a2[5];
  for (i = a2[6]; v8 != i; v8 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8 + 8);
  }
  sub_22402B00C((_BYTE *)a1, (_DWORD *)a2 + 18);
  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[11] - a2[10]) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v10 = a2[10];
  for (j = a2[11]; v10 != j; v10 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10 + 8);
  }
  sub_22402B00C((_BYTE *)a1, (_DWORD *)a2 + 28);
  v31 = a2[16] - a2[15];
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v13 = a2[15];
  v12 = a2[16];
  v14 = v12 - v13;
  if (v12 != v13)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v13++);
      --v14;
    }
    while (v14);
  }
  sub_22402B00C((_BYTE *)a1, (_DWORD *)a2 + 38);
  v31 = a2[21] - a2[20];
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v16 = a2[20];
  v15 = a2[21];
  v17 = v15 - v16;
  if (v15 != v16)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v16++);
      --v17;
    }
    while (v17);
  }
  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[25] - a2[24]) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v18 = a2[24];
  for (k = a2[25]; v18 != k; v18 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v18);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v18 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v18 + 8);
  }
  v31 = (a2[29] - a2[28]) >> 3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v20 = a2[28];
  for (m = a2[29]; v20 != m; v20 += 8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v20 + 4);
  }
  v31 = (a2[33] - a2[32]) >> 3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v22 = a2[32];
  for (n = a2[33]; v22 != n; v22 += 8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v22);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v22 + 4);
  }
  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[37] - a2[36]) >> 2);
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v25 = a2[36];
  for (ii = a2[37]; v25 != ii; v25 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25 + 4);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25 + 8);
  }
  if (a3 >= 2)
  {
    if (*((_BYTE *)a2 + 344))
    {
      LOBYTE(v31) = 1;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v31);
      v27 = *(_DWORD *)(a1 + 8);
      LODWORD(v31) = 2;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v31);
      if (v27 < 1)
      {
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 40);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 324);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 41);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 332);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 42);
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 340);
        if (a3 < 4)
          return result;
      }
      else
      {
        if (v27 == 2)
        {
          LODWORD(v31) = 2;
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v31);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 40);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 324);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 41);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 332);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 42);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 340);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        if (a3 < 4)
          return result;
      }
    }
    else
    {
      LOBYTE(v31) = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v31);
      if (a3 < 4)
        return result;
    }
    sub_22402B00C((_BYTE *)a1, (_DWORD *)a2 + 87);
    v31 = (a2[45] - a2[44]) >> 2;
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
    v28 = a2[44];
    v29 = a2[45] - v28;
    if (v29)
    {
      v30 = 4 * (v29 >> 2);
      do
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v28);
        v28 += 4;
        v30 -= 4;
      }
      while (v30);
    }
  }
  return result;
}

void sub_22402B00C(_BYTE *a1, _DWORD *a2)
{
  void *__p[2];
  char v4;
  _DWORD v5[6];
  int v6;
  char v7;
  char *v8;

  if ((a1[12] & 2) != 0)
  {
    v6 = 0;
    sub_2240284CC((uint64_t)v5, a2);
    if (v6 == -1)
      sub_22316DD70();
    v8 = &v7;
    ((void (*)(void **__return_ptr, char **, _DWORD *))off_24EC66D10[v6])(__p, &v8, v5);
    if (v6 != -1)
      ((void (*)(char **, _DWORD *))off_24EC66CF8[v6])(&v8, v5);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v4 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v5[0] = *a2;
    (*(void (**)(_BYTE *, _DWORD *))(*(_QWORD *)a1 + 104))(a1, v5);
  }
}

void sub_22402B0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22402B110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22402B124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22402B138(uint64_t a1, uint64_t *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_224544628(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_22451CAD4(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 4)
    v6 = 4;
  else
    v6 = v12;
  if (v6 < 3)
    sub_22402B234((uint64_t)&v11, a1, a2, v6);
  else
    sub_22402B8FC(a1, (uint64_t)a2, v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

uint64_t *sub_22402B234(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  int v29;
  int v30;
  char *v31;
  int v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *exception;
  __int128 v40;
  uint64_t *v41;
  uint64_t v42[3];
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[24];
  int v56;
  _BYTE v57[24];
  int v58;
  _BYTE v59[24];
  int v60;
  _BYTE v61[24];
  int v62;
  int v63;
  __int128 v64;
  uint64_t *v65;
  char v66;
  uint64_t v67;

  memset(v42, 0, sizeof(v42));
  v43 = 0;
  memset(v44, 0, sizeof(v44));
  v45 = 0;
  memset(v46, 0, sizeof(v46));
  v47 = 0;
  v48 = 0;
  v50 = 0;
  v49 = 0;
  v51 = 0;
  v53 = 0;
  v52 = 0;
  v54 = 0;
  v63 = 0;
  LOBYTE(v64) = 0;
  v66 = 0;
  memset(v55, 0, sizeof(v55));
  v56 = 0;
  v58 = 0;
  memset(v57, 0, sizeof(v57));
  v60 = 0;
  memset(v59, 0, sizeof(v59));
  memset(v61, 0, sizeof(v61));
  v62 = 0;
  *(_QWORD *)&v40 = "vertices";
  *((_QWORD *)&v40 + 1) = 8;
  v41 = v42;
  sub_22402C1BC(a2, (uint64_t)&v40);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "colors_type";
  *(_QWORD *)(a2 + 96) = 11;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v43 + 4;
  sub_22402C318((uint64_t *)a2, (_DWORD **)&v40);
  *(_QWORD *)&v40 = "colors";
  *((_QWORD *)&v40 + 1) = 6;
  v41 = v44;
  sub_22402C1BC(a2, (uint64_t)&v40);
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "normals_type";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v45 + 4;
  sub_22402C318((uint64_t *)a2, (_DWORD **)&v40);
  *(_QWORD *)&v40 = "normals";
  *((_QWORD *)&v40 + 1) = 7;
  v41 = v46;
  sub_22402C1BC(a2, (uint64_t)&v40);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "semantics_type";
  *(_QWORD *)(a2 + 96) = 14;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v47 + 4;
  sub_22402C318((uint64_t *)a2, (_DWORD **)&v40);
  v10 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "semantics";
  *(_QWORD *)(a2 + 96) = 9;
  if (!v10)
    *(_BYTE *)(a2 + 104) = 1;
  v11 = (unsigned __int8 *)sub_2245448E0((uint64_t *)a2);
  v12 = *v11;
  if (v12 == 2)
  {
    v13 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v11 + 1) + 8) - **((_QWORD **)v11 + 1)) >> 4;
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    v17 = v13 - (v49 - v48);
    if (v13 <= v49 - v48)
      goto LABEL_18;
    goto LABEL_16;
  }
  if (v12 == 1)
  {
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v11 + 1) + 8) - **((_QWORD **)v11 + 1)) >> 3);
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    v17 = v13 - (v49 - v48);
    if (v13 <= v49 - v48)
      goto LABEL_18;
LABEL_16:
    sub_22317F2E8((uint64_t)&v48, v17);
    v15 = v48;
    v14 = v49;
    goto LABEL_20;
  }
  if (!*v11)
  {
    v13 = 0;
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    goto LABEL_18;
  }
  v13 = 1;
  v14 = v49;
  v15 = v48;
  v16 = v49 - v48;
  v17 = 1 - (v49 - v48);
  if (v49 == v48)
    goto LABEL_16;
LABEL_18:
  if (v16 > v13)
  {
    v14 = v15 + v13;
    v49 = v15 + v13;
  }
LABEL_20:
  *(_QWORD *)&v40 = v14 - v15;
  *((_QWORD *)&v40 + 1) = v15;
  v18 = (char *)sub_2245448E0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2245449F8(v18, (uint64_t)&v40);
  v19 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "materials_type";
  *(_QWORD *)(a2 + 96) = 14;
  if (!v19)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v51 + 4;
  sub_22402C318((uint64_t *)a2, (_DWORD **)&v40);
  v20 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "materials";
  *(_QWORD *)(a2 + 96) = 9;
  if (!v20)
    *(_BYTE *)(a2 + 104) = 1;
  v21 = (unsigned __int8 *)sub_2245448E0((uint64_t *)a2);
  v22 = *v21;
  if (v22 == 2)
  {
    v23 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 4;
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    v27 = v23 - (v53 - v52);
    if (v23 <= v53 - v52)
      goto LABEL_33;
    goto LABEL_31;
  }
  if (v22 == 1)
  {
    v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 3);
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    v27 = v23 - (v53 - v52);
    if (v23 <= v53 - v52)
      goto LABEL_33;
LABEL_31:
    sub_22317F2E8((uint64_t)&v52, v27);
    v25 = v52;
    v24 = v53;
    goto LABEL_35;
  }
  if (!*v21)
  {
    v23 = 0;
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    goto LABEL_33;
  }
  v23 = 1;
  v24 = v53;
  v25 = v52;
  v26 = v53 - v52;
  v27 = 1 - (v53 - v52);
  if (v53 == v52)
    goto LABEL_31;
LABEL_33:
  if (v26 > v23)
  {
    v24 = v25 + v23;
    v53 = v25 + v23;
  }
LABEL_35:
  *(_QWORD *)&v40 = v24 - v25;
  *((_QWORD *)&v40 + 1) = v25;
  v28 = (char *)sub_2245448E0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2245449F8(v28, (uint64_t)&v40);
  *(_QWORD *)&v40 = "faces";
  *((_QWORD *)&v40 + 1) = 5;
  v41 = (uint64_t *)&v55[4];
  sub_22402C508(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "edges";
  *((_QWORD *)&v40 + 1) = 5;
  v41 = (uint64_t *)&v57[4];
  sub_22402C678(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "tex_coords";
  *((_QWORD *)&v40 + 1) = 10;
  v41 = (uint64_t *)&v59[4];
  sub_22402C7CC(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "tex_faces";
  *((_QWORD *)&v40 + 1) = 9;
  v41 = (uint64_t *)&v61[4];
  sub_22402C508(a2, (uint64_t)&v40);
  if (a4 >= 2)
  {
    v29 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "box";
    *(_QWORD *)(a2 + 96) = 3;
    if (!v29)
      *(_BYTE *)(a2 + 104) = 1;
    if (*(_BYTE *)sub_2245448E0((uint64_t *)a2))
    {
      v40 = 0uLL;
      v41 = 0;
      sub_224544628(a2);
      v30 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "version";
      *(_QWORD *)(a2 + 96) = 7;
      if (!v30)
        *(_BYTE *)(a2 + 104) = 1;
      v31 = (char *)sub_2245448E0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v67 = 0;
      sub_22451CAD4(v31, &v67);
      if (HIDWORD(v67))
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24EC7AC38;
        __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
      }
      v32 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "min";
      *(_QWORD *)(a2 + 96) = 3;
      if (!v32)
        *(_BYTE *)(a2 + 104) = 1;
      v33 = sub_2245448E0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      sub_224545EA4(v33, (float *)&v40);
      v34 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "max";
      *(_QWORD *)(a2 + 96) = 3;
      if (!v34)
        *(_BYTE *)(a2 + 104) = 1;
      v35 = sub_2245448E0((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      sub_224545EA4(v35, (float *)&v40 + 3);
      v36 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(v36 - 8);
      v37 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 112) = *(_QWORD *)(v37 - 8);
      *(_QWORD *)(a2 + 48) = v36 - 8;
      *(_QWORD *)(a2 + 72) = v37 - 8;
      v65 = v41;
      v64 = v40;
      v66 = 1;
    }
    else
    {
      ++*(_QWORD *)(a2 + 112);
      if (v66)
        v66 = 0;
    }
    if (a4 >= 4)
    {
      if (!*(_BYTE *)(a2 + 104))
        *(_BYTE *)(a2 + 104) = 1;
      *(_QWORD *)(a2 + 88) = "confidences";
      *(_QWORD *)(a2 + 96) = 11;
    }
  }
  sub_2232F5FB8((uint64_t)&v40, (uint64_t)v42);
  sub_2232F60FC(a3, (uint64_t)&v40);
  sub_2232E7BD4((uint64_t *)&v40);
  return sub_2232F82A0(v42);
}

